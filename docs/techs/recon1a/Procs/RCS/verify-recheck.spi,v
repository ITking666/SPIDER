head	1.8;
access;
symbols
	Pre_gold:1.6;
locks;
comment	@# @;


1.8
date	2016.07.05.19.07.14;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2016.03.25.17.22.51;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2013.12.13.16.22.18;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2013.11.13.16.52.50;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2013.11.12.14.03.24;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2013.11.08.19.38.44;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2013.11.08.19.28.24;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2012.05.23.03.13.44;	author tapu;	state Exp;
branches;
next	;


desc
@new file -- allows addition or removal of particle images for each view
@


1.8
log
@echo formatting
@
text
@ ; <html><head><title>Add/subtract additional particles by view</title></head><body><pre>
 ;
 ; SOURCE:   spider/docs/techs/recon1/Procs/verify-recheck.spi  
 ;
 ; PURPOSE:  Add/subtract additional particles by view
 ;
 ; USAGE:    clean ; ./spider spi/dat @@verify-recheck
 ;
 ; REQUIRES: spider/docs/techs/recon1/Procs/verify-settings.spi
 ;
 ; INPUTS:  (Where *** denotes view)
 ;  [ref_view_list]       [rec_dir]/sel_proj              List of projection views         (one)
 ;  [prj_dir]             views/prj***                    Directory for each view          (one)
 ;  [view_list]           [prj_dir]/sel_part_byv          Total-particle list              (one/view)
 ;  [good_particles]      [prj_dir]/sel_part_byv_good     Old good-particle list           (one/view)
 ;  [bad_particles]       [prj_dir]/sel_part_byv_bad      Old bad-particle list            (one/view)
 ;  [not_bad_particles]   [prj_dir]/sel_part_byv_notbad   OPTIONAL new good-particle list  (one/view)
 ;  [not_good_particles]  [prj_dir]/sel_part_byv_notgood  OPTIONAL new bad-particle list   (one/view)
 ;
 ; OUTPUTS:  (Where *** denotes view)
 ;  [new_good_particles]  [prj_dir]/sel_part_byv_goodB    New good particle list           (one/view)
 ;  [new_bad_particles]   [prj_dir]/sel_part_byv_badB     New bad  particle list           (one/view)
 ;  [summary_recheckB]    summary_recheckB                Summary doc file                 (one)
 ;  [new_good_part_copy]  ../Particles/good/sel_partB_*** Archive copy of good particle list (one/view)
 ;
 ; ----------------------- Parameters  -----------------------
 
 [archive-yn] = 0         ; Copy archive of files to Particles/good? (1 == yes)

 ; --------------------- END BATCH HEADER ----------------------

 MD
   TR OFF                                             ; Decrease results file output
 MD
   VB OFF                                             ; Decrease results file output

 ; Set common filenames & parameters
 @@verify-settings

 [temp_rechecked_bad]      = 'tmpbadrechecked'
 [temp_new_good]           = 'tmpgoodnew'
 [temp_rechecked_good]     = 'tmpgoodrechecked'
 [temp_new_bad]            = 'tmpbadnew'
 [temp_merged_good_unsort] = 'tmpgoodmerged_unsort'
 [temp_merged_bad_unsort]  = 'tmpbadmerged_unsort'

 ; Clean up
 DE
   [temp_rechecked_bad]
 DE
   [temp_new_good]
 DE
   [temp_rechecked_good]
 DE
   [temp_new_bad]
 DE
   [temp_merged_good_unsort]
 DE
   [temp_merged_bad_unsort]
 DE
   [summary_recheckB]
 ;SD /      VIEWNUM       NEWGOOD       OLDGOOD       NEW_BAD       OLD_BAD    FRACTION_KEPT
 SD /       NEWGOOD       OLDGOOD       NEW_BAD       OLD_BAD    FRACTION_KEPT
   [summary_recheckB]

 ; Initialize counters
 [old-good] = 0
 [old-bad]  = 0
 [old-tot]  = 0
 [new-good] = 0
 [new-bad]  = 0
 [new-tot]  = 0

 IF ( [archive-yn] == 0 ) THEN
   SYS
     echo "  Not archiving copy of output selection files" 
 ELSE
   SYS
     echo "  Archiving copy of selection files" 
 ENDIF

 ; Get number of reference-views
 UD N [num-views]
   [ref_view_list]

 ; Loop through reference-views
 DO [view-key] = 1,[num-views]  ; Loop through reference-views ----------------------- 

    ; Get reference-view#
    UD IC [view-key],[view]
      [ref_view_list]

    ; Clean up pre-existing files
    DE
     [new_bad_particles][view]
    DE
     [new_good_particles][view]

    ; Check if files exist and increment counters

    IQ FI [good-exists]
      [good_particles][view]

    IF ( [good-exists]==1) THEN
      UD N [view-good-old]
        [good_particles][view]

      [old-good] = [old-good] + [view-good-old]
    ELSE
      SD -1,[view]
        [good_particles][view]

      [view-good-old] = 0
    ENDIF

    IQ FI [bad-exists]
      [bad_particles][view]

    IF ( [bad-exists] == 1 ) THEN
      UD N [view-bad-old]
        [bad_particles][view]

      [old-bad] = [old-bad] + [view-bad-old]
    ELSE
      SD -1,[view]
        [bad_particles][view]

      [view-bad-old] = 0
    ENDIF

    [view-good-old]  ; Diagnostic
 ;  [view-tot-old] = [view-good-old] + [view-bad-old]

    ; Check if view files exist
    IQ FI [view-exists]
      [view_list][view]_sort
    IF ( [view-exists] == 0 ) THEN
       CYCLE
    ENDIF

    ; Get total particles before
    UD N [view-tot-old]
      [view_list][view]_sort

    [old-tot] = [old-tot] + [view-tot-old]

    ; Check if NOTBAD file exists
    IQ FI [notbad-exists]
      [not_bad_particles][view]

    IF ( [notbad-exists] == 1 ) THEN
        SYS
          echo "  View: {***[view]}: Not-bad particle list found"

        ; subtract NOTBAD from BAD
        DOC SUBTRACT
          [bad_particles][view]
          [not_bad_particles][view]
          [temp_rechecked_bad]  ; OUTPUT
          1                     ; Column# to subtract: view-slice#

        ; Add NOTBAD to GOOD
        DOC AND
          [view_list][view]_sort
          [not_bad_particles][view]
          [temp_new_good]      ; OUTPUT
          1                    ; Column# to intersect: view-slice#
    ; If NOTBAD doesn't exist
    ELSE
        ; Check for empty BAD_PARTICLE_DOC
        UD N [num-bad]
          [bad_particles][view]

        IF ( [num-bad]==0) THEN
          DE
            [temp_rechecked_bad]
          SYS
            touch [temp_rechecked_bad].$DATEXT
        ELSE
          DOC REN
            [bad_particles][view]
            [temp_rechecked_bad]
        ENDIF

        DE
          [temp_new_good]
        SD -1,[view]  ; dummy file
          [temp_new_good]
        SD E
          [temp_new_good]
    ENDIF


    ; Check if NOTGOOD file exists
    IQ FI [notgood-exists]
      [not_good_particles][view]

    IF ( [notgood-exists] == 1 ) THEN
        SYS
          echo "  View: {***[view]}: Not-good particle list found"

        ; Subtract NOTGOOD from GOOD
        DOC SUBTRACT
          [good_particles][view]
          [not_good_particles][view]
          [temp_rechecked_good]  ; OUTPUT
          1                     ; column# to subtract: view-slice#

        ; get rest of parameters from total-selection file
        DOC AND
          [view_list][view]_sort
          [not_good_particles][view]
          [temp_new_bad]  ; OUTPUT
          1               ; column# to intersect: view-slice#
    ELSE
        ; Check for empty GOOD_PARTICLE_DOC
        UD N [num-good]
          [good_particles][view]

        IF ( [num-good] == 0) THEN
          DE
            [temp_rechecked_good]
          SYS
            touch [temp_rechecked_good].$DATEXT
        ELSE
          DOC REN
            [good_particles][view]
            [temp_rechecked_good]
        ENDIF

        DE
          [temp_new_bad]
        SD -1,[view]  ; Dummy file
          [temp_new_bad]
        SD E
          [temp_new_bad]
    ENDIF

    ; Check that there are at least some good particles
    UD N [length-good-minus-newbad]
      [temp_rechecked_good]
    UD N [length-good-new]
      [temp_new_good]

    !SYS
      !echo "DIAGNOSTIC: View {***[view]}: {***[length-good-minus-newbad]} {***[length-good-new]}"

    IF ( [length-good-minus-newbad]+[length-good-new] >= 1 ) THEN
        ; merge RECHECKED_GOOD with NEW_GOOD
        DOC MERGE
          [temp_rechecked_good]
          [temp_new_good]
          [temp_merged_good_unsort]  ; OUTPUT
          (-1)                       ; merge everything
    ELSE
        !SYS
          !echo "DIAGNOSTIC: View: {***[view]}: {***[length-good-minus-newbad]} {***[length-good-new]}"
        DE
          [temp_merged_good_unsort]
        SYS
          touch [temp_merged_good_unsort].$DATEXT
    ENDIF

    ; Check that there are at least some bad particles
    UD N [length-bad-minus-newgood]
      [temp_rechecked_bad]
    UD N [length-bad-new]
      [temp_new_bad]

    IF ( [length-bad-minus-newgood]+[length-bad-new] >= 1) THEN
      ; Merge RECHECKED_BAD with NEW_BAD
      DOC MERGE
        [temp_rechecked_bad]
        [temp_new_bad]
        [temp_merged_bad_unsort]  ; OUTPUT
        -1                        ; Merge everything
    ELSE
      !SYS
        !echo " DIAGNOSTIC: View: {%I0%[view]}: {%I0%[length-bad-minus-newgood]} {%I0%[length-bad-new]}"
      DE
        [temp_merged_bad_unsort]
      SYS
        touch [temp_merged_bad_unsort].$DATEXT
    ENDIF

    ; Check if merged file has entries
    UD N [length-merged-good]
      [temp_merged_good_unsort]

    IF ( [length-merged-good] >= 1 ) THEN
      ; Sort MERGED_GOOD, in reversed order

      SD /       VIEW_WIN    GLOBAL_NUM     GRP_WIN         CCROT        MIRROR       GRP_NUM        VIEW
        [new_good_particles][view]
      SD E
        [new_good_particles][view]

      DOC SORT A
        [temp_merged_good_unsort]
        [new_good_particles][view]           ; File      (output)
        -4                             ; Column# to sort: CCROT, Reversed
        Y                              ; Renumber

      ; Copy
      IF ( [archive-yn] .NE. 0 ) THEN
        SYS
          cp -f [new_good_particles][view].$DATEXT [new_good_part_copy][view].$DATEXT
      ENDIF

      ; Increment counters
      UD N [view-good-new]
        [new_good_particles][view]
        
      [view-good-new]  ; Diagnostic
        
      [new-good] = [new-good] + [view-good-new]
    ELSE
      [view-good-new] = 0

      ; Downstream batch files may look for output
      SYS
        touch [new_good_particles][view].$DATEXT
    ENDIF


    ; Check if merged file has entries
    UD N [length-merged-bad]
      [temp_merged_bad_unsort]

    IF ( [length-merged-bad] >= 1 ) THEN

     !SD /      VIEW_WIN     GLOBAL_NUM      DFSLICE        CCROT      MIRROR_FLAG    GROUP_NUM      VIEWNUM
      SD /       VIEW_WIN    GLOBAL_NUM     GRP_WIN         CCROT        MIRROR       GRP_NUM        VIEW
        [new_bad_particles][view]
      SD E
        [new_bad_particles][view]

      ; Reversed order Sort, append
      DOC SORT A
        [temp_merged_bad_unsort]
        [new_bad_particles][view]     ; File      (output)
        -4                            ; Column# to sort: CCROT, Reversed
        Y                             ; Renumber 

      ; Increment counters
      UD N [view-bad-new]
        [new_bad_particles][view]

      [new-bad] = [new-bad] + [view-bad-new]
    ELSE
      [view-bad-new] = 0
    ENDIf

    [view-tot-new] = [view-good-new] + [view-bad-new]
    [new-tot]      = [new-tot] + [view-tot-new]

    ; Trap for zero old good particles
    IF ( [view-good-old] >= 1 ) THEN
      [fraction-kept] = [view-good-new]/[view-good-old]
    ELSE
      [fraction-kept] = 0
    ENDIF

    ; Write to summary
    SD [view], [view-good-new],[view-good-old],[view-bad-new],[view-bad-old],[fraction-kept],[view-tot-old],[view-tot-new]
      [summary_recheckB]

    ; Clean up
    DE
      [temp_rechecked_bad]
    DE
      [temp_new_good]
    DE
      [temp_rechecked_good]
    DE
      [temp_new_bad]
    DE
      [temp_merged_good_unsort]
    DE
      [temp_merged_bad_unsort]
 ENDDO
 ; End view-loop

 [dummy] = -[num-views]
 SD /            NEWGOOD       OLDGOOD       NEW_BAD       OLD_BAD      NEWTOTAL      OLDTOTAL
   [summary_recheckB]
 SD [dummy], [new-good],[old-good],[new-bad],[old-bad],[new-tot],[old-tot]
   [summary_recheckB]
 SD E
   [summary_recheckB]

 SYS 
   echo  
 SYS M
   echo "  Good  particles,  Before: {%I6%[old-good]}   After:  {%I6%[new-good]}"; 
   echo "  Bad   particles,  Before: {%I6%[old-bad]}   After:  {%I6%[new-bad]} "; 
   echo "  Total particles,  Before: {%I6%[old-tot]}   After:  {%I6%[new-tot]} "; 
.

 SYS 
   echo  ; echo -n "  Done    "; date; echo
.
 EN 

 ; Modified 2013-11-28
 ;    2013-11-28 (trs) -- Deletes pre-existing files
 ;    2013-11-28 (trs) -- Leaves zero-length file for unpopulated views for downstream batch files
 ;    2013-10-23 (agl) -- New file names, modernized syntax & cosmetic
 ;    2013-10-23 (agl) -- Replaced: reversedoc-7col with reverse DOC SORT
 ;    2011-01-14 (trs) -- Checks for other empty doc files
 ;    2010-12-16 (trs) -- Checks for empty GOOD_PARTICLE_DOCs

 ; </pre></body></html>
@


1.7
log
@cosmetic
@
text
@d76 1
a76 1
     echo " Not archiving copy of output selection files" ; echo
d79 1
a79 1
     echo " Archiving copy of selection files" ; echo
d153 1
a153 1
          echo " View: {***[view]}: Not-bad particle list found"
d200 1
a200 1
          echo " View: {***[view]}: Not-good particle list found"
d341 1
a341 1
        [new_bad_particles][view]           ; File      (output)
d395 3
a397 3
   echo " Good  particles,  Before: {%I6%[old-good]}   After:  {%I6%[new-good]}"; 
   echo " Bad   particles,  Before: {%I6%[old-bad]}   After:  {%I6%[new-bad]} "; 
   echo " Total particles,  Before: {%I6%[old-tot]}   After:  {%I6%[new-tot]} "; 
d401 1
a401 1
   echo   ; echo -n " Done    "; date; echo
@


1.6
log
@DE [new_bad_particles][view]
DE [new_good_particles][view]
SYS
>         touch [new_good_particles][view].$DATEXT
tapu
@
text
@d12 7
a18 7
 ;  [ref_view_list]       = 'sel_proj'                        ; List of projection views         (one)
 ;  [prj_dir]             = 'views/prj***'                    ; Directory for each view          (one)
 ;  [view_list]           = '[prj_dir]/sel_part_byv'          ; Total-particle list              (one/view)
 ;  [good_particles]      = '[prj_dir]/sel_part_byv_good'     ; Old good-particle list           (one/view)
 ;  [bad_particles]       = '[prj_dir]/sel_part_byv_bad'      ; Old bad-particle list            (one/view)
 ;  [not_bad_particles]   = '[prj_dir]/sel_part_byv_notbad'   ; OPTIONAL new good-particle list  (one/view)
 ;  [not_good_particles]  = '[prj_dir]/sel_part_byv_notgood'  ; OPTIONAL new bad-particle list   (one/view)
d21 4
a24 4
 ;  [new_good_particles]  = '[prj_dir]/sel_part_byv_goodB'    ; New good particle list           (one/view)
 ;  [new_bad_particles]   = '[prj_dir]/sel_part_byv_badB'     ; New bad  particle list           (one/view)
 ;  [summary_recheckB]    = 'summary_recheckB'                ; Summary doc file                 (one)
 ;  [new_good_part_copy]  = '../Particles/good/sel_partB_***' ; Archive copy of good particle list (one/view)
@


1.5
log
@using_settings
@
text
@d93 6
d319 4
d403 1
a403 1
 EN D
d405 3
a407 1
 ; Modified 2013-10-23
@


1.4
log
@consolidated_filenames
@
text
@d7 19
a25 2
 ; USAGE:        clean ; ./spider spi/dat @@verify-recheck

d30 1
a30 22
 ; -------------------------- Inputs --------------------------

 [ref_view_list]       = 'sel_proj'                             ; List of projection views         (one)

 [prj_dir]             = 'views/prj***'                         ; Directory for each view          (one)

 [view_list]           = '[prj_dir][view]/sel_part_byv'         ; Total-particle list              (one/view)
 ; VIEW_WIN    PARTICLE  DFSLICE  CC_ROT   MIRROR           GROUPNUM       VIEW

 [good_particle]   = '[prj_dir][view]/sel_part_byv_good'    ; Old good-particle list           (one/view)

 [bad_particles]    = '[prj_dir][view]/sel_part_byv_bad'     ; Old bad-particle list            (one/view)

 [not_bad_particles]   = '[prj_dir][view]/sel_part_byv_notbad'  ; OPTIONAL new good-particle list  (one/view)

 [not_good_particles]  = '[prj_dir][view]/sel_part_byv_notgood' ; OPTIONAL new bad-particle list   (one/view)

 ; -------------------------- Outputs --------------------------

 [new_good_particles]  = '[prj_dir][view]/sel_part_byv_goodB'   ; New good particle list           (one/view)

 [new_bad_particles]   = '[prj_dir][view]/sel_part_byv_badB'    ; New bad  particle list           (one/view)
d32 4
a35 5
 [summary_recheckB]    = 'summary_recheckB'                     ; Summary doc file                 (one)

 [new_good_part_copy]  = '../Particles/good/sel_partB_{***[view]}' ; Archive copy of good particle list (one/view)

 ; --------------------- END BATCH HEADER ----------------------
d37 2
a40 1

a41 1

a42 1

a43 1

a44 1

d76 1
a76 1
     echo ; echo " Not archiving copy of output selection files" ; echo
d79 1
a79 1
     echo ; echo " Archiving copy of selection files" ; echo
d87 1
a87 1
 DO [view-key] = 1,[num-views]  ; WAS 38,39  ; WAS 3,3  ; WAS 
a92 1

d96 1
a96 1
      [good_particle]
d100 1
a100 1
        [good_particle]
d105 1
a105 1
        [good_particle]
d111 1
a111 1
      [bad_particles]
d115 1
a115 1
        [bad_particles]
d120 1
a120 1
        [bad_particles]
d128 7
d137 1
a137 1
      [view_list]_sort
d143 1
a143 1
      [not_bad_particles]
d145 1
a145 1
    IF ( [notbad-exists] == 1) THEN
d151 2
a152 2
          [bad_particles]
          [not_bad_particles]
d158 4
a161 4
          [view_list]_sort
          [not_bad_particles]
          [temp_new_good]  ; OUTPUT
          1                ; Column# to intersect: view-slice#
d166 1
a166 1
          [bad_particles]
d175 1
a175 1
            [bad_particles]
d190 1
a190 1
      [not_good_particles]
d198 2
a199 2
          [good_particle]
          [not_good_particles]
d205 2
a206 2
          [view_list]_sort
          [not_good_particles]
d212 1
a212 1
        [good_particle]
d221 1
a221 1
            [good_particle]
d288 1
a288 1
        [new_good_particles]
d290 1
a290 1
        [new_good_particles]
d294 1
a294 1
        [new_good_particles]           ; File      (output)
d301 1
a301 1
          cp -f [new_good_particles].$DATEXT [new_good_part_copy].$DATEXT
d306 1
a306 1
        [new_good_particles]
d324 1
a324 1
        [new_bad_particles]
d326 1
a326 1
        [new_bad_particles]
d331 1
a331 1
        [new_bad_particles]           ; File      (output)
d337 1
a337 1
        [new_bad_particles]
@


1.3
log
@rewrite_syntax_filenames
@
text
@d15 1
a15 1
 [ref_view_list]       = 'sel_proj'                       ; List of projection views         (one)
d17 1
a17 1
 [prj_dir]             = 'views/prj{***[view-num]}'       ; Directory for each view          (one)
d19 1
a19 1
 [total_particle_doc]  = '[prj_dir]/sel_part_byv_sort'    ; Total-particle list              (one/view)
d22 1
a22 1
 [good_particle_doc]   = '[prj_dir]/sel_part_byv_good'    ; Old good-particle list           (one/view)
d24 1
a24 1
 [bad_particle_doc]    = '[prj_dir]/sel_part_byv_bad'     ; Old bad-particle list            (one/view)
d26 1
a26 1
 [not_bad_particles]   = '[prj_dir]/sel_part_byv_notbad'  ; OPTIONAL new good-particle list  (one/view)
d28 1
a28 1
 [not_good_particles]  = '[prj_dir]/sel_part_byv_notgood' ; OPTIONAL new bad-particle list   (one/view)
d32 1
a32 1
 [new_good_particles]  = '[prj_dir]/sel_part_byv_goodB'   ; New good particle list           (one/view)
d34 1
a34 1
 [new_bad_particles]   = '[prj_dir]/sel_part_byv_badB'    ; New bad  particle list           (one/view)
d36 1
a36 1
 [summary_doc]         = 'summary_recheckB'               ; Summary doc file                 (one)
d38 1
a38 1
 [new_good_part_copy]  = '../Particles/good/sel_partB_{***[view-num]}' ; Archive copy of good particle list (one/view)
d69 1
a69 1
   [summary_doc]
d72 1
a72 1
   [summary_doc]
d98 1
a98 1
    UD IC [view-key],[view-num]
d105 1
a105 1
      [good_particle_doc]
d109 1
a109 1
        [good_particle_doc]
d113 2
a114 2
      SD -1,[view-num]
        [good_particle_doc]
d120 1
a120 1
      [bad_particle_doc]
d124 1
a124 1
        [bad_particle_doc]
d128 2
a129 2
      SD -1,[view-num]
        [bad_particle_doc]
d139 1
a139 1
      [total_particle_doc]
d149 1
a149 1
          echo " View: {***[view-num]}: Not-bad particle list found"
d153 1
a153 1
          [bad_particle_doc]
d160 1
a160 1
          [total_particle_doc]
d168 1
a168 1
          [bad_particle_doc]
d177 1
a177 1
            [bad_particle_doc]
d183 1
a183 1
        SD -1,[view-num]  ; dummy file
d196 1
a196 1
          echo " View: {***[view-num]}: Not-good particle list found"
d200 1
a200 1
          [good_particle_doc]
d207 1
a207 1
          [total_particle_doc]
d214 1
a214 1
        [good_particle_doc]
d223 1
a223 1
            [good_particle_doc]
d229 1
a229 1
        SD -1,[view-num]  ; Dummy file
d242 1
a242 1
      !echo "DIAGNOSTIC: View {***[view-num]}: {***[length-good-minus-newbad]} {***[length-good-new]}"
d253 1
a253 1
          !echo "DIAGNOSTIC: View: {***[view-num]}: {***[length-good-minus-newbad]} {***[length-good-new]}"
d275 1
a275 1
        !echo " DIAGNOSTIC: View: {%I0%[view-num]}: {%I0%[length-bad-minus-newgood]} {%I0%[length-bad-new]}"
d357 2
a358 2
    SD [view-num], [view-good-new],[view-good-old],[view-bad-new],[view-bad-old],[fraction-kept],[view-tot-old],[view-tot-new]
      [summary_doc]
d378 1
a378 1
   [summary_doc]
d380 1
a380 1
   [summary_doc]
d382 1
a382 1
   [summary_doc]
@


1.2
log
@rewrite_syntax_filenames
@
text
@d286 1
a286 1
    IF ( [length-merged-good] >= 1) THEN
d350 1
a350 1
    IF ( [view-good-old] >= 1) THEN
d387 1
a387 1
   echo " Good  particles,  Before: {%I6%[old-good]}  After:  {%I6%[new-good]}"; 
d398 4
a401 4
 ;    2013-10-23 (agl) -- new file names, modernized syntax & cosmetic
 ;    2013-10-23 (agl) -- replaced: reversedoc-7col with reverse DOC SORT
 ;    2011-01-14 (trs) -- checks for other empty doc files
 ;    2010-12-16 (trs) -- checks for empty GOOD_PARTICLE_DOCs
@


1.1
log
@Initial revision
@
text
@d1 7
a7 104
; ADD/SUBTRACT ADDITIONAL PARTICLES BY VIEW
;
; REQUIRES reversedoc_7col.spi
;
; NOTE1: SPIDER versions 18.19 through 19.01.1 sometimes crash when handling empty doc files
; NOTE2: SPIDER version 20.11.0 loses some particles in the DOC SORT steps

; ----------------------- Parameters  -----------------------
[archive-yn] = 0   ; copy files to Particles/good? (for archival purposes)

; -------------------------- Inputs --------------------------
fr l
[ref_view_list]../Alignment/projlist                           ; list of projection views
fr l
[view_dir]Views/prj{***[view-num]}                            ; directory for each view
fr l
[total_particle_doc][view_dir]/sortsel                         ; total-particle list-prefix, for each reference-view
; VIEWSLICE    PARTICLE     DFSLICE       CC_ROT       MIRROR      GROUPNUM       VIEW
fr l
[good_particle_doc][view_dir]/goodsel                          ; old good-particle doc template, for each reference-view
fr l
[bad_particle_doc][view_dir]/badsel                            ; old bad-particle doc template
fr l
[not_bad_particle_list][view_dir]/notbad                       ; (optional) new good-particle doc template
fr l
[not_good_particle_list][view_dir]/notgood                     ; (optional) new good-particle doc template

; -------------------------- Outputs --------------------------
fr l
[new_good_particles][view_dir]/goodselB                        ; new good-particle doc template, for each reference-view
fr l
[new_bad_particles][view_dir]/badselB                          ; new bad-particle doc template
fr l
[new_good_part_copy]../Particles/good/goodselB{***[view-num]}  ; copy of good particle list (for archiving)
fr l
[summary_doc]how_many-recheckB                                 ; summary doc

; --------------------- END BATCH HEADER ----------------------

fr l
[temp_rechecked_bad]tmpbadrechecked
fr l
[temp_new_good]tmpgoodnew
fr l
[temp_rechecked_good]tmpgoodrechecked
fr l
[temp_new_bad]tmpbadnew
fr l
[temp_merged_good_unsort]tmpgoodmerged_unsort
fr l
[temp_merged_bad_unsort]tmpbadmerged_unsort
fr l
[temp_merged_good_unreversed]tmpgoodmerged_unreversed
fr l
[temp_merged_bad_unreversed]tmpbadmerged_unreversed

; clean up
de
[temp_rechecked_bad]
de
[temp_new_good]
de
[temp_rechecked_good]
de
[temp_new_bad]
de
[temp_merged_good_unsort]
de
[temp_merged_bad_unsort]
de
[temp_merged_good_unreversed]
de
[temp_merged_bad_unreversed]
de
[summary_doc]
;SD /      VIEWNUM       NEWGOOD       OLDGOOD       NEW_BAD       OLD_BAD    FRACTION_KEPT
SD /       NEWGOOD       OLDGOOD       NEW_BAD       OLD_BAD    FRACTION_KEPT
[summary_doc]

; initialize counters
[old-good] = 0
[old-bad]  = 0
[old-tot]  = 0
[new-good] = 0
[new-bad]  = 0
[new-tot]  = 0

if([archive-yn].eq.0) then
    vm
    echo ; echo "Not archiving a copy of output selection files" ; echo
else
    vm
    echo ; echo "Archiving a copy of selection files" ; echo
endif

; get number of reference-views
ud n [num-views]
[ref_view_list]

; loop through reference-views
do lb8 [view-key] = 1,[num-views]  ; WAS 38,39  ; WAS 3,3  ; WAS 
    ; get reference-view#
    ud ic,[view-key],[view-num]
    [ref_view_list]
d9 3
d13 1
a13 1
    ; CHECK IF FILES EXIST AND INCREMENT COUNTERS
d15 1
a15 2
    iq fi [good-exists]
    [good_particle_doc]
d17 92
a108 2
    if([good-exists].eq.1) then
        ud n [view-good-old]
d111 3
a113 3
        [old-good] = [old-good] + [view-good-old]
    else
        sd -1,[view-num]
d116 2
a117 2
        [view-good-old] = 0
    endif
d119 2
a120 2
    iq fi [bad-exists]
    [bad_particle_doc]
d122 2
a123 2
    if([bad-exists].eq.1) then
        ud n [view-bad-old]
d126 3
a128 3
        [old-bad] = [old-bad] + [view-bad-old]
    else
        sd -1,[view-num]
d131 2
a132 2
        [view-bad-old] = 0
    endif
d134 2
a135 2
    [view-good-old]  ; diagnostic
;    [view-tot-old] = [view-good-old] + [view-bad-old]
d137 3
a139 3
    ; get total particles before
    ud n [view-tot-old]
    [total_particle_doc]
d143 7
a149 7
    ; check if NOTBAD file exists
    iq fi [notbad-exists]
    [not_bad_particle_list]

    if ([notbad-exists].eq.1) then
        vm
        echo "View {***[view-num]}: Not-bad particle list found"
d152 17
a168 17
        doc subtract
        [bad_particle_doc]
        [not_bad_particle_list]
        [temp_rechecked_bad]  ; OUTPUT
        (1)                   ; column# to subtract: view-slice#

        ; add NOTBAD to GOOD
        doc and
        [total_particle_doc]
        [not_bad_particle_list]
        [temp_new_good]  ; OUTPUT
        (1)              ; column# to intersect: view-slice#
    ; if NOTBAD doesn't exist
    else
        ; check for empty BAD_PARTICLE_DOC
        ud n [num-bad]
        [bad_particle_doc]
d170 2
a171 2
        if([num-bad].eq.0) then
            de
d173 1
a173 1
            vm
d175 2
a176 2
        else
            doc ren
d179 1
a179 18
        endif

        de
        [temp_new_good]
        sd -1,[view-num]  ; dummy file
        [temp_new_good]
        sd e
        [temp_new_good]
    endif


    ; check if NOTGOOD file exists
    iq fi [notgood-exists]
    [not_good_particle_list]

    if ([notgood-exists].eq.1) then
        vm
        echo "View {***[view-num]}: Not-good particle list found"
d181 23
a203 6
        ; subtract NOTGOOD from GOOD
        doc subtract
        [good_particle_doc]
        [not_good_particle_list]
        [temp_rechecked_good]  ; OUTPUT
        (1)                    ; column# to subtract: view-slice#
d206 8
a213 8
        doc and
        [total_particle_doc]
        [not_good_particle_list]
        [temp_new_bad]  ; OUTPUT
        (1)              ; column# to intersect: view-slice#
    else
        ; check for empty GOOD_PARTICLE_DOC
        ud n [num-good]
d216 2
a217 2
        if([num-good].eq.0) then
            de
d219 1
a219 1
            vm
d221 2
a222 2
        else
            doc ren
d225 1
a225 1
        endif
d227 13
a239 7
        de
        [temp_new_bad]
        sd -1,[view-num]  ; dummy file
        [temp_new_bad]
        sd e
        [temp_new_bad]
    endif
d241 2
a242 5
    ; check that there are at least some good particles
    ud n [length-good-minus-newbad]
    [temp_rechecked_good]
    ud n [length-good-new]
    [temp_new_good]
d244 1
a244 4
;    vm
;    echo "DIAGNOSTIC: View {***[view-num]}: {***[length-good-minus-newbad]} {***[length-good-new]}"

    if([length-good-minus-newbad]+[length-good-new].ge.1) then
d246 23
a268 23
        doc merge
        [temp_rechecked_good]
        [temp_new_good]
        [temp_merged_good_unsort]  ; OUTPUT
        (-1)                       ; merge everything
    else
;        vm
;        echo "DIAGNOSTIC: View {***[view-num]}: {***[length-good-minus-newbad]} {***[length-good-new]}"
        de
        [temp_merged_good_unsort]
        vm
        touch [temp_merged_good_unsort].$DATEXT
    endif

    ; check that there are at least some bad particles
    ud n [length-bad-minus-newgood]
    [temp_rechecked_bad]
    ud n [length-bad-new]
    [temp_new_bad]

    if([length-bad-minus-newgood]+[length-bad-new].ge.1) then
        ; merge RECHECKED_BAD with NEW_BAD
        doc merge
d272 5
a276 5
        (-1)                      ; merge everything
    else
;        vm
;        echo "DIAGNOSTIC: View {***[view-num]}: {***[length-bad-minus-newgood]} {***[length-bad-new]}"
        de
d278 1
a278 1
        vm
d280 5
a284 1
    endif
d286 2
a287 19
    ; check if merged file has entries
    ud n [length-merged-good]
    [temp_merged_good_unsort]

    if([length-merged-good].ge.1) then
        ; sort MERGED_GOOD
;        doc ren
;        [temp_merged_good_unsort]
;        [temp_merged_good_unsort]
        doc sort
        [temp_merged_good_unsort]
        [temp_merged_good_unreversed]  ; WAS [new_good_particles]  ; WAS 
        (4)   ; column# to sort: CCROT
        Y     ; renumber?

        ; reverse order, from highest to lowest
        @@reversedoc_7col
        [temp_merged_good_unreversed]  ; INPUT
        [new_good_particles]           ; OUPUT
d289 1
a289 1
        SD /      VIEWSLICE     GLOBALNUM      DFSLICE        CCROT      MIRROR_FLAG    GROUP_NUM      VIEWNUM
d291 1
a291 1
        sd e
a292 2
        de
        [temp_merged_good_unreversed]
d294 11
a304 5
        ; copy
        if([archive-yn].ne.0) then
            vm
            cp -f [new_good_particles].$DATEXT [new_good_part_copy].$DATEXT
        endif
d306 2
a307 2
        ; increment counters
        ud n [view-good-new]
d310 1
a310 1
        [view-good-new]  ; diagnostic
d312 11
a322 25
        [new-good] = [new-good] + [view-good-new]
    else
        [view-good-new] = 0
    endif


    ; check if merged file has entries
    ud n [length-merged-bad]
    [temp_merged_bad_unsort]

    if([length-merged-bad].ge.1) then
        ; sort MERGED_GOOD
;        doc ren
;        [temp_merged_bad_unsort]
;        [temp_merged_bad_unsort]
        doc sort
        [temp_merged_bad_unsort]
        [temp_merged_bad_unreversed]  ; WAS [new_bad_particles]   ; WAS 
        (4)    ; column# to sort: CCROT
        Y      ; renumber?

        ; reverse order, from highest to lowest
        @@reversedoc_7col
        [temp_merged_bad_unreversed]  ; INPUT
        [new_bad_particles]           ; OUPUT
d324 2
a325 1
        SD /      VIEWSLICE     GLOBALNUM      DFSLICE        CCROT      MIRROR_FLAG    GROUP_NUM      VIEWNUM
d327 1
a327 1
        sd e
a328 2
        de
        [temp_merged_bad_unreversed]
d330 9
a338 2
        ; increment counters
        ud n [view-bad-new]
d340 5
a344 4
        [new-bad] = [new-bad] + [view-bad-new]
    else
        [view-bad-new] = 0
    endif
d347 1
a347 1
    [new-tot] = [new-tot] + [view-tot-new]
d349 41
a389 43
    ; trap for zero old good particles
    if([view-good-old].ge.1) then
        [fraction-kept] = [view-good-new]/[view-good-old]
    else
        [fraction-kept] = 0
    endif

    ; write to summary
    sd [view-num], [view-good-new],[view-good-old],[view-bad-new],[view-bad-old],[fraction-kept],[view-tot-old],[view-tot-new]
    [summary_doc]

    ; clean up
    de
    [temp_rechecked_bad]
    de
    [temp_new_good]
    de
    [temp_rechecked_good]
    de
    [temp_new_bad]
    de
    [temp_merged_good_unsort]
    de
    [temp_merged_bad_unsort]
lb8
; end view-loop

[dummy] = -[num-views]
SD /            NEWGOOD       OLDGOOD       NEW_BAD       OLD_BAD      NEWTOTAL      OLDTOTAL
[summary_doc]
sd [dummy], [new-good],[old-good],[new-bad],[old-bad],[new-tot],[old-tot]
[summary_doc]
sd e
[summary_doc]

vm m
echo ; echo "Done"; date; 
echo "Good particles before: {******[old-good]}"; 
echo "Good particles after:  {******[new-good]}"; 
echo "Bad particles before: {******[old-bad]}"; 
echo "Bad particles after:  {******[new-bad]}"; 
echo "Total particles before: {******[old-tot]}"; 
echo "Total particles after:  {******[new-tot]}"; 
a390 1
en d
d392 12
a403 4
; Modified 2012-05-03
;    TO DO: replace REVERSEDOC_7COL with updated DOC SORT (will require SPIDER 19.03.1+)
;    2011-01-14 (trs) -- checks for other empty doc files
;    2010-12-16 (trs) -- checks for empty GOOD_PARTICLE_DOCs
@
