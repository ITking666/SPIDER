head	1.3;
access;
symbols
	Pre_gold:1.3;
locks;
comment	@# @;


1.3
date	2015.11.18.19.28.48;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2013.11.08.19.26.29;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2012.05.23.02.49.01;	author tapu;	state Exp;
branches;
next	;


desc
@new file -- applies CTF profile to windowed images
@


1.3
log
@ctf correction using 'TF CT'
and 'TF COR'
@
text
@ ; <html><head><title>CTF corrects selected images using CTF correction doc file</title></head><body><pre>
 ;
 ; SOURCE:  spider/docs/techs/recon1/Procs/filtctf.spi
 ;
 ; PURPOSE: CTF corrects selected images using CTF correction doc file
 ;          Not necessary if using:  restack-n-ctf
 ;
 ; USAGE:   clean ; spider spi/dat @@filtctf

 ; ------------------ Parameters ------------------
 
 [progress-n]  = 1           ; Print progress message every Nth micrograph

 ; -------------------- Inputs --------------------

 [params]      = '../params'                                   ; Parameter doc file        (one)

 [sel_mic]     = '../sel_micrograph'                           ; Micrograph selection file (one)

![sel_part]    = 'good/ngood****'                              ; Particle selection file   (one / micrograph)
 [sel_part]    = 'good/sel_part_****'                          ; Particle selection file   (one / micrograph)

![unfilt_imgs] = 'win/winser_{****[mic]}@@******'               ; Windowed image stacks     (one / micrograph)
 [unfilt_imgs] = 'win/data_bymic_{****[mic]}@@******'           ; Windowed image stacks     (one / micrograph)

 [ctf_cor]     = '../Power_Spectra/power/flipctf_{****[mic]}'  ; CTF correction files      (one / micrograph)

 ; -------------------- Outputs --------------------

 [ctf_dir]     = 'win'                                         ; Output directory

![ctfd_imgs]   = '[ctf_dir]/winctf_{****[mic]}@@*****'          ; CTF-corrected image stacks (one / micrograph)
 [ctfd_imgs]   = '[ctf_dir]/data_ctfd_bymic_{****[mic]}@@*****' ; CTF-corrected image stacks (one / micrograph

 ; --------------- END BATCH HEADER ---------------

 MD
   SET MP
   0
 MD
   VB OFF

 SYS
   mkdir -p [ctf_dir]

 ; Get number of micrographs
 UD N [num-mics]
   [sel_mic]

 ; Loop through micrographs ----------------------------------------------------
 DO [mic-key] =1,[num-mics]

    UD IC [mic-key],[mic]
      [sel_mic]                        ; Micrograph selection  file (input)

    IF (int([mic-key]/[progress-n]) == [mic-key]/[progress-n]) THEN
      SYS
        echo " Micrograph: {%I4%[mic]}, {%I4%[mic-key]} out of: {%I4%[num-mics]}"
    ENDIF

    ; Check if particle selection file exists
    IQ FI [exists-yn]
      [sel_part][mic]                   ; Micrograph selection file (input)
    IF ([exists-yn] == 0) CYCLE         ; Skip empty micrographs

    ; Loop through selected particles -----------------------------------------
    DO                                  ; Loop through selected particles 
      UD NEXT [key],[num]               ; Get particle number
        [sel_part][mic]                 ; Particle selection file     (input)
      IF ([key] <= 0) EXIT              ; End of particles in this micrograph 
   
      ; Filter particle using CTF correction file
      TF COR
        [unfilt_imgs][num]              ; Existing particle in stack  (input)
        [ctf_cor][mic]                  ; CTF correctionfile          (input)
        [ctfd_imgs]                     ; New particle in stack       (output)

    ENDDO                               ; End particle loop   -----------------

    ; Clean up
    UD ICE
      [sel_part][mic]
 ENDDO                                 ; End micrograph loop  -----------------

 SYS
   echo ; echo -n " Done    "; date

 EN

; Modified 2015-11-16
;    2015-11-16 (agl) -- use 'TF COR' not 'FD'!
;    2013-10-16 (agl) -- modernized
;    2013-10-11 (agl) -- Filenames & cosmetic
;    2011-08-19 (trs) -- operating on (micrograph) stacks
;    2009-09-28 (trs) -- skips empty micrographs
 ; </body></pre></html>
@


1.2
log
@rewrite_syntax_filenames
@
text
@d12 1
a12 6
 [pad-factor]   = 2     ; Padding factor  (2 == double size)

 [padded-size]  = 0     ; Final dimension (0 == keep original size)
                          ;    (downsampling useful for ML3D)

 [progress-n]   = 1     ; Print progress message every Nth micrograph
d16 1
a16 1
 [params]       = '../params'                          ; Parameter doc file          (one)
d18 1
a18 1
 [sel_mic]      = '../sel_micrograph'                  ; Micrograph selection file   (one)
d20 2
a21 2
![sel_part]     = 'good/ngood****'                     ; Particle selection file     (one / micrograph)
 [sel_part]     = 'good/sel_part_****'                 ; Particle selection file     (one / micrograph)
d23 2
a24 2
 [unfilt_imgs]  = 'win/winser_{****[mic]}@@******'      ; Windowed image stacks       (one / micrograph)
 [unfilt_imgs]  = 'win/data_bymic_{****[mic]}@@******'  ; Windowed image stacks       (one / micrograph)
d26 1
a26 1
 [ctf_profile]  = '../Power_Spectra/power/flipctf{****[mic]}' ; CTF-profile doc file (one / micrograph)
d30 1
a30 1
 [ctf_dir]      = 'win'                                ; Output directory
d32 2
a33 2
 [ctfxpart]     = '[ctf_dir]/winctf_{****[mic]}@@*****'          ; CTF-corrected image stacks (one / micrograph)
 [ctfxpart]     = '[ctf_dir]/data_ctfd_bymic_{****[mic]}@@*****' ; CTF-corrected image stacks (one / micrograph
a36 5
 ; Temporary files
 [temp_padded_img] = '_1'
 [temp_filt_img]   = '_2'
 [temp_oversize]   = '_3'

a45 11
 ; Get image dimension
 UD 17, [sp_winsiz]
   [params]                                ; Parameter doc file (input)

 ; Pad to larger size before filtering
 [padded-size] = [sp_winsiz]*[pad-factor]  ; Pad to larger size before filtering
 IF ( [padded-size] .NE. 0) THEN
    SYS
      echo " Resizing to: {%I3%[padded-size]}x{%I3%[padded-size]} during filtration" ; echo
 ENDIF

d54 1
a54 1
      [sel_mic]                  ; Micrograph selection  file (input)
d56 1
a56 1
    IF (int([mic-key]/[progress-n]).EQ.[mic-key]/[progress-n]) THEN
d64 1
a64 1
    IF ([exists-yn].EQ.0) CYCLE         ; Skip empty micrographs
d69 8
a76 37
        [sel_part][mic]                 ; Particle selection file  (input)
      IF ([key] <= 0) EXIT              ; End of particles 
 
      ; Pad Image with right & bottom border
      PD                                ; Pad Image 2X
        [unfilt_imgs][num]              ; Image                    (input)
        [temp_padded_img]               ; Padded image             (output)
        [padded-size],[padded-size]     ; Padded size
        B                               ; Use border average for background
        1,1                             ; Top-left coords
  
      ; Filter using CTF correction doc file
      FD                                ; Filter using doc file  
        [temp_padded_img]               ; Padded image             (input)
        [temp_filt_img]                 ; CTF corrected image      (output)
        [ctf_profile]                   ; CTF correction doc file  (input)

      IF ( [padded-size] >= 2) THEN
        ; Window back to enlarged size
        WI                              ; Window  
          [temp_filt_img]               ; CTF corrected image      (input)
          [temp_oversize]               ; CTF-corrected image      (output)
          [sp_winsiz],[sp_winsiz]       ; X,Y dimensions
          1,1                           ; Top-left coords

        ; Interpolate further
        IP                              ; Interpolate
          [temp_oversize]               ; CTF corrected image      (input)
          [ctfxpart][num]               ; Interpolated image       (output)
          [sp_winsiz],[sp_winsiz]       ; New dimensions
      ELSE
        ; Window back to original size
        WI                              ; Window  
          [temp_filt_img]               ; CTF corrected image      (input)
          [ctfxpart][num]               ; CTF-corrected image      (output)
          [sp_winsiz],[sp_winsiz]       ; X,Y dimensions
          1,1                           ; Top-left coords
d78 1
a78 2
      ENDIF
    ENDDO                               ; End particle loop
d83 1
a83 1
 ENDDO                                 ; End micrograph loop
d90 2
a91 1
; Modified 2013-10-16
d96 1
@


1.1
log
@Initial revision
@
text
@d1 143
a143 163
; CTF-corrects images using document filter

; ------------------ Parameters ------------------
[pad-factor]        = 2    ; padding factor (2-->130x130 image padded into 260x260 box)
[new-dim]           = 0    ; final dimension (0==keep original size)
;                          ; (downsampling useful for ML3D)
[progress-interval] = 10   ; print progress message to screen every Nth micrograph

; -------------------- Inputs --------------------
fr l
[parameter_doc]../params                          ; parameter doc file
fr l
[micrograph_list]../sel_micrograph                ; micrograph selection file
fr l
[particles_by_mic]good/ngood****                  ; prefix, for each micrograph
;       MIC_SLICE
fr l
[unfilt_imgs]win/winser_{****[mic-num]}           ; image template
fr l
[ctf_profile]../Power_Spectra/power/flipctf****   ; CTF-profile template

; -------------------- Outputs --------------------
fr l
[ctf_dir]../Particles/win                        ; output directory
fr l
[ctfxparticle][ctf_dir]/winctf_{****[mic-num]}   ; CTF-multiplied images, in CTF_DIR

; --------------- END BATCH HEADER ---------------

; temporary files
fr l
[temp_padded_img]_1
fr l
[temp_filt_img]_2
fr l
[temp_orig_size]_3
fr l
[temp_stack]_4

vm
echo "if(! -d [ctf_dir]) mkdir -p [ctf_dir]"|csh

; get image dimension
ud 17,[idim]
[parameter_doc]

[padded-dim]=[idim]*[pad-factor]  ; before filtering, we'll pad into a larger box

if([new-dim].ne.0) then
    vm
    echo "Resizing particles to {***[new-dim]} pixels" ; date ; echo
endif

; get number of micrographs
ud n,[num-mics]
[micrograph_list]

md
set mp
0
md
vb off

; loop through micrographs
DO LB2 [mic-key]=1,[num-mics]
    ud ic,[mic-key],[mic-num]
    [micrograph_list]

    if (int([mic-key]/[progress-interval]).eq.[mic-key]/[progress-interval]) then
        vm
        echo "On micrograph #{****[mic-num]}, {****[mic-key]} out of {****[num-mics]}"
    endif

    ; check if micrograph list exists
    iq fi [exists-yn]
    [particles_by_mic][mic-num]

    ; skip empty micrographs
    if([exists-yn].eq.0) goto lb2

    ; get number of particles
    ud n [mic-parts]
    [particles_by_mic][mic-num]

    ; skip empty micrographs
    if([mic-parts].eq.0) goto lb2

    ; get last slice
    ud ic [mic-parts], [last-slice]
    [particles_by_mic][mic-num]
    (hopefully doc file is sorted)

    ; make incore stack
    if([new-dim].ge.2) then
        ms
        [temp_stack]@@
        [new-dim],[new-dim]
        [last-slice]
    else
        ms
        [temp_stack]@@
        [idim],[idim]
        [last-slice]
    endif

    ; loop through particles
    do lb1 [part-key]=1,[mic-parts]
        ; get particle#
        ud ic [part-key],[mic-slice]
        [particles_by_mic][mic-num]

        ; pad
        pd
        [unfilt_imgs]@@[mic-slice]
        [temp_padded_img]
        [padded-dim],[padded-dim]
        B        ; set background to _B_order average
        (1,1)    ; top-left coords

        ; filter using 1D CTF
        fd
        [temp_padded_img]
        [temp_filt_img]
        [ctf_profile][mic-num]

        ; window back down to original size
        wi
        [temp_filt_img]
        [temp_orig_size]
        [idim],[idim]  ; x,y-dimensions
        (1,1)    ; top-left coords

        if([new-dim].ge.2) then
            ; interpolate further
            ip
            [temp_orig_size]
            [temp_stack]@@[mic-slice]  ; WAS [ctfxparticle][mic-slice]
            [new-dim],[new-dim]  ; new dimensions
        else
            cp
            [temp_orig_size]
            [temp_stack]@@[mic-slice]  ; WAS [ctfxparticle][mic-slice]
        endif
    lb1
    ; end particle loop

    ; clean up
    cp
    [temp_stack]@@
    [ctfxparticle]
    de
    [temp_stack]@@
    ud ice
    [particles_by_mic][mic-num]
LB2
; end micrograph loop

vm
echo ; echo "Done"; date

en d

; Modified 2011-08-19
@
