head	1.29;
access;
symbols
	Pre_gold:1.29
	GPL_update:1.15
	pre_rewrite_2010:1.14
	pre_more_stack:1.10
	best-code:1.10
	no-named-regs:1.10
	pre_GPL:1.10
	tag_version1_0:1.10;
locks;
comment	@:: @;


1.29
date	2015.03.03.15.49.34;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2015.03.03.14.43.05;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2013.12.13.16.33.24;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2013.11.22.16.43.22;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2013.11.08.19.27.16;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2012.07.19.17.27.17;	author tapu;	state Exp;
branches;
next	1.23;

1.23
date	2012.05.23.02.09.30;	author tapu;	state Exp;
branches;
next	1.22;

1.22
date	2012.05.22.12.20.53;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2012.05.18.15.03.47;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2012.04.11.02.13.03;	author tapu;	state Exp;
branches;
next	1.19;

1.19
date	2010.09.23.13.50.42;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2010.09.22.21.00.21;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2010.09.22.20.59.34;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2010.09.21.18.55.01;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2010.01.19.19.05.11;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.22.17.55.10;	author tapu;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.22.15.32.03;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2007.08.27.13.08.40;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2007.03.19.13.58.19;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2004.11.24.17.40.52;	author bbaxter;	state Exp;
branches;
next	1.9;

1.9
date	2004.11.24.16.38.57;	author bbaxter;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.03.18.08.43;	author bbaxter;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.13.14.43.54;	author bbaxter;	state Exp;
branches;
next	1.6;

1.6
date	2004.07.13.14.26.10;	author bbaxter;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.13.13.58.37;	author bbaxter;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.06.15.25.51;	author bbaxter;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.12.14.00.32;	author bbaxter;	state Exp;
branches;
next	1.2;

1.2
date	2003.10.09.22.01.14;	author bbaxter;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.24.18.03.23;	author bbaxter;	state Exp;
branches;
next	;


desc
@spider batch file
@


1.29
log
@deci not sp_deci
@
text
@ ; <html><head><title>Calculates average power spectra and defocus values for set of micrographs</title></head><body><pre>
 ;
 ; PURPOSE: Calculates average power spectra for a set of micrographs, 
 ;          estimates defocus from the power spectra, and places defocus
 ;          value in a doc. file.

 ; PURPOSE: First converts a scanned micrograph file to SPIDER format.
 ;          Computes 2D power spectrum and places in: power/roo****
 ;          Estimates defocus from 2D power spectra and places in: defocus
 ;          Creates 1D CTF correction image and CTF document file.
 ;          Inputs: Window size, Percentage of the overlap distance 
 ;                  of the window from the micrograph border,
 ;          Uses SPIDER operation 'CTF ED'
 ;
 ;  REQUIRES:  load-mic.spi
 ;
 ; SOURCE:  spider/docs/techs/recon1/Procs/powdefocus.spi 
 ;          RO SD                               May 2012 ArDean Leith
 ;          CTF                                 Apr 2013 ArDean Leith
 ;
 ; Edit following parameters and filenames as needed.
 ;
 ; [deci] = Decimation factor for 'DC S' operation
 ;      0 = Get value from params file (key=16)
 ;      1 = Full sized image
 ;      2 = 1/2 size
 ;      4 = 1/4 size
 [deci]   = 0        ; Decimation factor (0 = Get value from params file)

 [tilesiz]   = 500      ; Size of tiles (square)
 [xover]     = 50       ; X tile overlap % 
 [yover]     = 50       ; Y tile overlap % 
 [xd]        = 500      ; X tile dist. from the edge 
 [yd]        = 500      ; Y tile dist. from the edge 

 [want-defocus-yn] = 1  ; Find defocus values using 'CTF ED'
 [keepspi]         = 1  ; Keep on-disk temp spider file (0 = discard) 

 ; ----------- Input files --------------

 [params]   = '../params'              ; Parameter doc file             (one)

 [sel_mic]  = '../sel_micrograph'      ; Micrograph selection doc file  (one)

 [micgr]    = '../Micrographs/raw****' ; Micrograph images           (one/micrograph)

 ; ----------- Output files --------------

 [outdir]   = 'power'                  ; Power spectra directory     (one)

 [pow]      = '[outdir]/pw_avg_****'   ; Power spectrum images       (one/micrograph)

 [ctf]      = '[outdir]/ctf_****'      ; CTF noise doc files         (one/micrograph)

 [roo]      = '[outdir]/roo_****'      ; Rotational average file     (one/micrograph)

 [rod]      = '[outdir]/roo_doc_****'  ; Rotational average doc file (one/micrograph)

 [out]      = 'defocus'                ; Defocus values doc file     (one)

 ; ----------- Temp file --------------

 [spi] = '_1'                          ; Temp Spider file

 ; -------------- END BATCH HEADER --------------------------

 MD
   TR OFF                           ; Loop info turned off
 MD
   VB OFF                           ; File info turned off
 MD
   SET MP                           ; Use all available OMP processors
   0

 SYS                                ; Make sure output dir. present
   mkdir -p [outdir]

 ;  -----  Get zip & format flags (can params vary??)
 UD 1,[sp_zflag]                    ; Get zip flag
   [params]                         ; Params file           (input)
 UD 2,[sp_fflag]                    ; Get tif flag
   [params]                         ; Params file           (input)
 UD 3,[sp_nx]                       ; X dimension 
   [params]                         ; Params file           (input)
 UD 4,[sp_ny]                       ; Y dimension        
   [params]                         ; Params file           (input)
 UD 5,[sp_pixsiz]                   ; Get pixel size
   [params]                         ; Params file           (input)

 IF ( [deci] < 1 ) THEN
    UD 16,[sp_deci]                 ; Get decimation factor  
      [params]                      ; Params file           (input)
    [deci] = [sp_deci]
    IF ([deci] < 1) [deci] = 1.0    ; Should not be zero
 ELSE
    ; (Don't need this multiplcation factor if decimation supplied by PARAMS)
    [sp_pixsiz]=[sp_pixsiz]*[deci]  ; Adjust pixel size for decimation
 ENDIF


 IF ( [want-defocus-yn]  >  0 ) THEN
   ; Want to determine defocus parameters

   UD 6,[sp_kev]                    ; Electron voltage (kev)
     [params]                       ; Params file           (input)
   UD 7,[sp_sph_abb]                ; Spherical aberration (mm)
     [params]                       ; Params file           (input)
   UD 12,[sp_acr]                   ; Amplitude contrast ratio
     [params]                       ; Params file           (input)

   DE
     [out]                          ; Defocus file           (removed)

 ENDIF

 UD N [nummics]                     ; Get number of micrographs
   [sel_mic]

 DO [key]=1,[nummics]               ; Loop over all micrographs -------------------

   UD [key], [mic]                  ; Get micrograph number
     [sel_mic]                      ; Micrograph select doc file  (input)

   ;SYS
   ;  echo ' 'Loading Micrograph:   {*****[mic]}  

   ; Convert micrographs and load into incore file
   @@load-mic([mic],[sp_zflag],[sp_fflag],[deci],[sp_nx],[sp_ny],[keepspi])
     [micgr][mic]                  ; Micrograph template     (input)
     [spi]                         ; SPIDER file             (output)
     _4                            ; Hiscan & Nikon scratch  (output)

   IF ( [want-defocus-yn]  >  0 ) THEN
     ; ----------- Get defocus value  -------------------
     ; Save defocus parameters in doc file

     DE                          ; Delete ctf noise doc file
      [ctf][mic]                 ;                                (removed)
     DE
       [rod][mic]                ; PS rotational average doc file (removed)

     ; Estimate CTF defocus parameters & save in defocus summary doc file
     CTF ED [def],[cutoff],[ntiles] 
       [spi]                     ; Micrograph image               (input)
       [tilesiz],[xover],[yover] ; Tile size, x & y tile % overlap:
       [xd],[yd]                 ; X & Y tiling border
       [sp_pixsiz],[sp_sph_abb]  ; Pixel size, Spherical aberration
       [sp_kev]                  ; Electron voltage [kev]
       [sp_acr]                  ; Ampl. contrast ratio
       [ctf][mic]                ; CTF noise doc file             (output)
       [out]                     ; Defocus doc file, appendded    (output)
       [mic]                     ; Key/image number for doc file
       [pow][mic]                ; 2D power spectrum              (output)

     SYS
       echo ' 'Micrograph: {%I5%[mic]}' ' Tiles: {%i4%[ntiles]}' '  Defocus: {%f8.2%[def]} ; echo

     RO SD                       ; Rotational average
       [pow][mic]                ; 2D CTF file                    (input)
       [roo][mic]                ; 1D rotational average          (output)
       [rod][mic]                ; PS rotational average doc file (output)

   ENDIF
 ENDDO

 SD E
   [out]                         ; Doc file           (closed)

 SYS
   cat [out].$DATEXT ; echo ' '
 
 EN
 ; </body></pre></html>
@


1.28
log
@sp_ param names
@
text
@d23 1
a23 1
 ; [sp_deci] = Decimation factor for 'DC S' operation
d28 1
a28 1
 [sp_deci]   = 0        ; Decimation factor (0 = Get value from params file)
d90 1
a90 1
 IF ( [sp_deci] < 1 ) THEN
d93 2
a94 1
    IF ([sp_deci] < 1) [sp_deci] = 1.0   ; Should not be zero
d97 1
a97 1
    [sp_pixsiz]=[sp_pixsiz]*[sp_deci]  ; Adjust pixel size for decimation
d128 1
a128 1
   @@load-mic([mic],[sp_zflag],[sp_fflag],[sp_deci],[sp_nx],[sp_ny],[keepspi])
@


1.27
log
@cosmetic tapu
@
text
@d23 1
a23 1
 ; [deci] = Decimation factor for 'DC S' operation
d28 1
a28 1
 [deci]      = 0        ; Decimation factor (0 = Get value from params file)
d79 1
a79 1
 UD 1,[zflag]                       ; Get zip flag
d81 1
a81 1
 UD 2,[fflag]                       ; Get tif flag
d83 1
a83 1
 UD 3,[nx]                          ; HiScan  X parameters 
d85 1
a85 1
 UD 4,[ny]                          ; HiScan  Y dimension        
d90 2
a91 2
 IF ( [deci] < 1 ) THEN
    UD 16,[deci]                    ; Get decimation factor  
d93 1
a93 7
    IF ([deci].LT.1) [deci] = 1.0   ; Should not be zero
 ENDIF

 IF ( [deci] < 0 ) THEN
    UD 16,[deci]                    ; Get decimation factor  
      [params]                      ; Params file           (input)
    IF ( [deci] < 1 ) [deci] = 1.0  ; Should not be zero
a94 1
    [sp_pixsiz]=[sp_pixsiz]*[deci]  ; Adjust pixel size for decimation
d96 1
d127 1
a127 1
   @@load-mic([mic],[zflag],[fflag],[deci],[nx],[ny],[keepspi])
@


1.26
log
@cosmetic mainly
@
text
@d37 1
a37 1
 [keepspi]   = 1        ; Keep on-disk temp spider file (0 = discard) 
d43 1
a43 1
 [sel_mic]  = '../sel_micrograph'      ; Micrograph selection doc file  (one) 
@


1.25
log
@rewrite_syntax_filenames
@
text
@d10 1
d41 1
a41 1
 [params]   = '../params'                     ; Parameter doc file             (one)
d43 1
a43 1
 [sel_mic]  = '../sel_micrograph'             ; Micrograph selection doc file  (one) 
d45 1
a45 1
 [micgr]    = '../Micrographs/raw{****[mic]}' ; Micrograph images   (one/micrograph)
d49 1
a49 1
 [outdir]   = 'power'                         ; Power spectra directory (one)
d51 1
a51 1
 [pow]      = '[outdir]/pw_avg_{****[mic]}'   ; Power spectrum images   (one/micrograph)
d53 1
a53 1
 [ctf]      = '[outdir]/ctf_{****[mic]}'      ; CTF noise doc files     (one/micrograph)
d55 1
a55 1
 [roo]      = '[outdir]/roo_{****[mic]}'      ; Rotational average file     (one/micrograph)
d57 1
a57 1
 [rod]      = '[outdir]/roo_doc_{****[mic]}'  ; Rotational average doc file (one/micrograph)
d59 1
a59 1
 [out]      = 'defocus'                       ; Defocus values doc file     (one)
d63 1
a63 1
 [spi] = '_1'                              ; Temp Spider file
a115 1
   ; Put defocus parameters title in doc file
d117 1
a117 1
     [out]                            ; Defocus file           (removed)
d134 1
a134 1
     [micgr]                       ; Micrograph template     (input)
d140 1
a140 1
     ; Save defocus parameters for each group in doc file
d142 4
a145 2
     DE                          ; Delete group doc file
      [ctf]                      ;                             (removed)
d147 1
a147 1
     ; Estimate CTF defocus parameters & save in summary doc file
d149 1
a149 1
       [spi]                     ; Micrograph image             (input)
d155 2
a156 2
       [ctf]                     ; CTF noise doc file               (output)
       [out]                     ; Defocus doc file             (output)
d158 1
a158 1
       [pow]                     ; 2D power spectrum            (output)
d161 1
a161 1
       echo ' 'Micrograph: {*****[mic]}' ' Tiles: {%i4%[ntiles]}' '  Defocus: {%f8.2%[def]} ; echo ' '
d164 3
a166 3
       [pow]                     ; 2D CTF file                    (input)
       [roo]                     ; 1D rotational average          (output)
       [rod]                     ; PS rotational average doc file (output)
@


1.24
log
@Doesn't apply PARAMS decimation factor in pixel size, should already be accounted for
Does apply user-supplied decimation factor to pixel size
@
text
@d1 122
a122 129
; <html><head><title>Calculates average power spectra and defocus values for a set of micrographs</title></head><body><pre>
;
; PURPOSE:   Calculates average power spectra for a set of micrographs.
;            First converts a scanned file to SPIDER format.
;            Places power spectra in: power/roo****
;            Estimates defocus from 2D power spectra and places in: defocus
;            Uses SPIDER operation 'TF ED'
;            Inputs: Window size, percentage of the overlap
;                    distance of the window from the micrograph border
;                    PS mask radius
;
; SOURCE:  spider/docs/techs/recon/newprogs/powdefocus.spi 
;
; Edit following parameters and filenames as needed.
;
; [deci] = Decimation factor for 'DC S' operation
;      0 = Get value from params file (key=16)
;      1 = Full sized image
;      2 = 1/2 size
;      4 = 1/4 size
[deci]      = 0      ; Decimation factor (0 = Get value from params file)

[winsiz]    = 500    ; Window size of small pieces (Sx=Sy)
[xover]     = 50     ; X overlap % 
[yover]     = 50     ; Y overlap % 
[xd]        = 500    ; X Dist. from the edge 
[yd]        = 500    ; Y Dist. from the edge 
[radius]    = 225    ; Power spectrum mask radius (A)  (0 = don't mask)

[dodefocus] = 1      ; Find defocus values 
[keepspi]   = 1      ; Keep the on-disk temp spider file (0 = discard) 
[maskr]     = 0      ; Mask output power spectrum this far from border   (0 = nomask)  

; ----------- Input files --------------

[params]   = '../params'                     ; Parameter doc file

[sel_mic]  = '../sel_micrograph'             ; Micrograph selection doc file 

[micgr]    = '../Micrographs/raw{****[mic]}' ; Micrograph images

; ----------- Output files --------------

[outdir]   = 'power'                         ; Power spectra directory

[pow]      = '[outdir]/pw_avg{****[mic]}'    ; Power spectra images

[roo]      = '[outdir]/roo{****[mic]}'       ; Rotational averagedoc file

[ctf]      = '[outdir]/ctf{****[mic]}'       ; Spectrum, envelope, noise doc file

[out]      = 'defocus'                       ; Defocus values doc file

; ----------- Temp file --------------

[spi] = '_1'                                  ; Temp Spider file

; -------------- END BATCH HEADER --------------------------

MD
TR OFF                             ; Loop info turned off
MD
VB OFF                             ; File info turned off
MD
() OFF                             ; No need for () in DO loops          
MD
SET MP                             ; Use all available OMP processors
0

VM                                 ; Make sure output dir. present
mkdir -p [outdir]

;  -----  Get zip & format flags (can params vary??)
UD 1,[zflag]                       ; Get zip flag
[params]                           ; Params file           (input)
UD 2,[fflag]                       ; Get tif flag
[params]                           ; Params file           (input)
UD 3,[nx]                          ; HiScan  X parameters 
[params]                           ; Params file           (input)
UD 4,[ny]                          ; HiScan  Y dimension        
[params]                           ; Params file           (input)
UD 5,[sp_pixsiz]                   ; Get pixel size
[params]                           ; Params file           (input)
IF ([deci].LT.1) THEN
   UD 16,[deci]                    ; Get decimation factor  
   [params]                        ; Params file           (input)
   IF ([deci].LT.1) [deci] = 1.0   ; Should not be zero
ENDIF

IF ([deci].LE.0) THEN
   UD 16,[deci]                    ; Get decimation factor  
     [params]                      ; Params file           (input)
   IF ([deci].LT.1) [deci] = 1.0   ; Should not be zero
ELSE
   [sp_pixsiz]=[sp_pixsiz]*[deci]  ; Adjust pixel size for decimation
   ; (Don't need this multiplcation factor if decimation supplied by PARAMS)
ENDIF

IF ([radius] .GT. 0) THEN 
  [circf] = 2*[sp_pixsiz]/[radius] ; Mask radius (now in 1/px)
ENDIF

IF ([dodefocus] .GT. 0) THEN
  ; Want to determine defocus parameters for each group

  UD 7,[sp_sph_abb]                ; Spherical aberration (mm)
  [params]                         ; Params file           (input)
  UD 12,[sp_acr]                   ; Amplitude contrast ratio
  [params]                         ; Params file           (input)
  UD 14,[sp_lambda]                ; Lambda
  [params]                         ; Params file           (input)

  ; Put defocus parameters title in doc file
  DE
  [out]                            ; Defocus file           (removed)

  SD /    Micrograph     Defocus     Astig.Ang    Astig.Mag  Cutoff.Freq
  [out]                            ; Title for defocus file (output)
ENDIF

[tmparr] = 'tmparray'              ; Name for temporary incore doc file

[winsizd2]=[winsiz]/2
SD IC NEW                          ; Create an in-core doc file array
[tmparr]
4,[winsizd2]                       ; Creates a 4 column doc file

UD N [nummics]                     ; Get number of micrographs
[sel_mic]
d124 1
a124 1
DO [key]=1,[nummics]               ; Loop over all micrographs -------------------
d126 2
a127 2
  UD [key], [mic]                  ; Get micrograph number
  [sel_mic]                        ; Micrograph select doc file  (input)
d129 2
a130 2
   VM
   echo ' 'Loading Micrograph:   {*****[mic]}  
d133 4
a136 135
   @@loadmic([mic],[zflag],[fflag],[deci],[nx],[ny],[keepspi])
   [micgr]                         ; Micrograph template     (input)
   [spi]                           ; Spider file             (output)
   _4                              ; Hiscan & Nikon scratch  (output)

   VM
   echo " Creating spectra:   [pow] and [roo]"  
   DE                              ; If output doc file exists, delete 
   [roo]                           ;                      (removed)

   FI H [x],[y]                    ; Get dimensions of converted image
   [spi]                           ; Micrograph image     (input)
   NSAM,NROW

   ; [winsiz] = large window size

   ;[v87]=(([x]-2*[xd])*([y]-2*[yd]))number of pieces in this micrograph

   [nox]=100/(100-[xover]); Normalization of % of the overlap in x 
   [noy]=100/(100-[yover]); Normalization of % of the overlap in y

   [npx]=INT([nox]*(([x]-2*[xd])/[winsiz]-1)+1)  ; No. of pieces horizontal dim.(X)
   [npy]=INT([noy]*(([y]-2*[yd])/[winsiz]-1)+1)  ; No. of pieces vertical dim.(Y)

   [v94] = 0
   ; -------------------- Loops over X and Y -------------- 
   DO [v12] = 1, [npy]
      [uly] = ([winsiz]/[noy])*([v12]-1) + [yd]     ; Y-direction
      DO  [v13] = 1, [npx]
         [ulx] = ([winsiz]/[nox])*([v13]-1) + [xd]  ; X-direction

         WI                       ; Window image
         [spi]                    ; Get small pieces of input image 
         _5
         [winsiz],[winsiz]        ; Size of small pieces
         [ulx],[uly]              ; Coord. of upper left corner

         RA                       ; Correct ramp effects 
         _5                       ;                  (input)
         _6                       ;                  (output)

         PW                       ; Calc power spectrum of each small piece
         _6                       ;                  (input)
         _7                       ; PS               (output)

         SQ                       ; Square image             
         _7                       ;                  (input) 
         _9                       ; Squared          (output)

         [v94] = [v94]+1

         IF ([v94].ge.2) THEN
            AD                    ; Add images
            _3                    ;                  (input)
            _9                    ;                  (input)
            _3                    ; Sum              (output)
            *
         ELSE
            CP                    ; Copy image
            _9                    ;                  (input)
            _3                    ;                  (output)
         ENDIF
      ENDDO
   ENDDO

   ; --------- End Loops. Resulting spectrum in:  _3 ------------

   AR                            ; Average over power spectra of small pieces 
   _3                            ; Inline file              (input)
   _8                            ; Inline file              (output)
   P1/[v94]

   WU                            ; Calculate the square root 
   _8                            ; Inline file              (input) 
   _2                            ; Inline file              (output)  

   IF ([circf].GT.0.0) THEN      ; Mask out center 
      FI H [nsam],[nrow]
      _2                         ; Inline file              (input)
      NSAM,NROW                  ; Get image dimensions

      [cx] = [nsam]/2 + 1        ; x center
      [cy] = [nrow]/2 + 1        ; Y center

      GP [pv]                    ; Get pixel intensity
      _2                         ; Inline file              (input)
      ([cx]+10,5)                ; Location for background   

       
      [circ] =[circf]*[nsam]     ; Mask radius
      [circo]=[maskr]            ; Outer Mask radius
      if ([maskr].GT. 0) THEN
        [circo]=[cx]-[maskr]     ; Outer Mask radius
      ENDIF

      MA                         ; Mask image
      _2                         ; Inline file              (input)
      _9                         ; Inline file              (output)
      [circo],[circ]             ; Radii of central dot. e.g. (2*5A/px/200A)/x 500 = 25 pixels
      D                          ; Disk
      E                          ; External background
      [pv]                       ; Background
      [cx],[cy]                  ; Center coordinates

      VM
      echo " Masked spectra:     {*****[circo]} and {***[circ]}"  

      CP                         ; Copy image
      _9                         ; Inline file              (input)
      [pow]                      ; Disk power spectrum      (output)
   ELSE
      CP                         ; Copy to disk
      _2                         ; Inline spectrum file     (input)
      [pow]                      ; Disk power spectrum      (output)
   ENDIF                         
 
   RO                            ; Rotational average
   _2                            ; File                     (input)
   _3                            ; 1D rotational average    (output)

   LI D                          ; List in doc file
   _3                            ; 1D rotational average    (input)
   [tmparr]                      ; Doc file                 (output)
   R                             ; Row wanted
   (1)                           ; Which row

   ; Labels for columns in output doc file
   SD /      Amplitude    X-axis     Spat.Freq.
   [roo]                                ; Doc file    (output)

   [winsizd2t] = [winsiz]/2             ; 1/2 large window size

   DO [v70] = 1,[winsizd2]
      UD IC [v70], [v72],[v73]
      [tmparr]                          ; Doc file    (input)
d138 2
a139 10
      ; Compute spatial freq.
      [sfreq] = [v70] / (2.0 * [winsizd2t]) 

      SD [v70],[v72],[v73],[sfreq]
      [roo]                             ; PS Doc file (output)
   ENDDO

   ; ----------- Get defocus value  -------------------

   IF ([dodefocus] .GT. 0) THEN
d142 2
a143 15
     DE                                ; Delete group doc file
     [ctf]                             ;                    (removed)

     ; Transfer Function -- Estimation of CTF parameters

     TF ED [v12],[v13],[v14],[v15],[v16] 
     [pow]                             ; 2D spectrum        (input)
     ([sp_pixsiz], [sp_sph_abb])       ; Pixel size, Spherical aberration
     ([sp_lambda])                     ; Lambda
     ([sp_acr])                        ; Ampl. contrast ratio
     [ctf]                             ; Doc file           (output)

     ; Save parameters for this group in summary doc file
     SD [key], [mic],[v14],[v12],[v13],[v16]
     [out]                             ; Doc file           (output)
d145 20
a164 2
     VM
     echo ' 'Micrograph: {*****[mic]}'   'Defocus: {%f8.2%[v14]};echo ' '
d167 1
a167 1
ENDDO
d169 2
a170 2
SD E
[out]                                  ; Doc file           (output)
d172 2
a173 2
VM
echo ' ' ; cat [out].$DATEXT ; echo ' '
d175 2
a176 2
EN
; </body></pre></html>
@


1.23
log
@No longer multiplying pixel size by decimation factor
@
text
@d89 9
a97 1
[sp_pixsiz]=[sp_pixsiz]*[deci]     ; Adjust pixel size for decimation??
@


1.22
log
@*** empty log message ***
@
text
@d3 1
a3 3
; PURPOSE:   Calculates average power spectra for a set of micrographs, 
;            estimates defocus from the power spectra, and places it in
;            doc. file.
a12 1
;          RO SD                               May 2012 ArDean Leith
d23 5
a27 5
[tilesiz]   = 500    ; Size of tiles (square)
[xover]     = 50     ; X tile overlap % 
[yover]     = 50     ; Y tile overlap % 
[xd]        = 500    ; X tile dist. from the edge 
[yd]        = 500    ; Y tile dist. from the edge 
d32 1
a32 1
[maskr]     = 0      ; Mask output power spectrum this far from border (0 = nomask)  
d44 1
a44 1
[outdir]   = 'power'                      ; Power spectra directory
d46 1
a46 1
[pow]      = '[outdir]/pw_avg{****[mic]}' ; Power spectra images
d48 1
a48 1
[roo]      = '[outdir]/roo{****[mic]}'    ; Rotational average doc file
d50 1
a50 1
[ctf]      = '[outdir]/ctf{****[mic]}'    ; Spectrum, envelope, noise doc file
d52 1
a52 1
[out]      = 'defocus'                    ; Defocus values doc file
d56 1
a56 1
[spi] = '_1'                            ; Temp Spider file
d61 1
a61 1
  TR OFF                           ; Loop info turned off
d63 1
a63 1
  VB OFF                           ; File info turned off
d65 4
a68 2
  SET MP                           ; Use all available OMP processors
  0
d75 1
a75 1
  [params]                         ; Params file           (input)
d77 1
a77 1
  [params]                         ; Params file           (input)
d79 1
a79 1
  [params]                         ; Params file           (input)
d81 1
a81 1
  [params]                         ; Params file           (input)
d83 1
a83 1
  [params]                         ; Params file           (input)
d86 1
a86 1
     [params]                      ; Params file           (input)
d89 1
a89 4

;;[sp_pixsiz]=[sp_pixsiz]*[deci]     ; Adjust pixel size for decimation??
;;(I think we should NOT be multiplying by the pixel size.
;; Every other usage of key #16 in PARAMS ignores it. --trs)
d96 1
a96 1
  ; Want to determine defocus parameters
d99 1
a99 1
    [params]                       ; Params file           (input)
d101 1
a101 1
    [params]                       ; Params file           (input)
d103 1
a103 1
    [params]                       ; Params file           (input)
d108 3
a110 4
  SD /      CONTENTS:   MICROGRAPH DEFOCUS VALUES 
    [out]                          ; Title for defocus file (output)
  SD /      Micrograph     Defocus     Astig.Ang     Astig.Mag   Cutoff.Freq
    [out]                          ; Title for defocus file (output)
d113 7
d121 1
a121 1
  [sel_mic]
d126 1
a126 1
    [sel_mic]                      ; Micrograph select doc file  (input)
d128 2
a129 2
   ;VM
   ;  echo ' 'Loading Micrograph:   {*****[mic]}  
d133 3
a135 3
     [micgr]                       ; Micrograph template     (input)
     [spi]                         ; Spider file             (output)
     _4                            ; Hiscan & Nikon scratch  (output)
d138 1
a138 1
     echo " Creating spectra:   [pow] and [roo]"  
d140 1
a140 1
     [roo]                         ;                         (removed)
d143 2
a144 2
     [spi]                         ; Micrograph image        (input)
     NSAM,NROW
d146 1
a146 1
   ;[v87]=(([x]-2*[xd])*([y]-2*[yd]))           ; No of tiles in this micrograph
d148 1
a148 2
   [nox]=100/(100-[xover])                      ; Normalization of % overlap in x 
   [noy]=100/(100-[yover])                      ; Normalization of % overlap in y
d150 2
a151 2
   [npx]=INT([nox]*(([x]-2*[xd])/[tilesiz]-1)+1) ; No. of tiles horizontal dim.(X)
   [npy]=INT([noy]*(([y]-2*[yd])/[tilesiz]-1)+1) ; No. of tiles vertical dim.  (Y)
d153 4
a156 1
   [ntiles] = 0
d158 10
a167 11
   DO [ity] = 1, [npy]
      [uly] = ([tilesiz]/[noy])*([ity]-1) + [yd]     ; Y-direction

      DO  [itx] = 1, [npx]
         [ulx] = ([tilesiz]/[nox])*([itx]-1) + [xd]  ; X-direction

         WI                       ; Window image to get a tile
           [spi]                  ; Get small tiles of input image 
           _5
           [tilesiz],[tilesiz]    ; Size of tile
           [ulx],[uly]            ; Coord. of upper left corner
d170 2
a171 2
           _5                     ; Image            (input)
           _6                     ; Image            (output)
d173 3
a175 3
         PW                       ; Power spectrum of each tile
           _6                     ; Image            (input)
           _7                     ; PS               (output)
d178 2
a179 2
           _7                     ; Image            (input) 
           _9                     ; Squared          (output)
d181 1
a181 1
         [ntiles] = [ntiles] + 1
d183 1
a183 1
         IF ([ntiles].GE.2) THEN
d185 4
a188 4
              _3                  ; Image            (input)
              _9                  ; Image            (input)
              _3                  ; Sum              (output)
              *
d191 2
a192 2
              _9                  ; Image            (input)
              _3                  ; Image            (output)
a196 3
   VM
     echo " Number of tiles:    {****[ntiles]}  Size: {****[tilesiz]}x{****[tilesiz]}"  

d199 8
a206 8
   AR                            ; Average tile power spectrum 
     _3                          ; Inline file              (input)
     _8                          ; Inline file              (output)
     P1/[ntiles]

   WU                            ; Square root 
     _8                          ; Inline file              (input) 
     _2                          ; Inline file              (output)  
d209 3
a211 3
      FI H [nx],[ny]             ; Get image dimensions
        _2                       ; Inline file              (input)
        NSAM,NROW                ; Get image dimensions
d213 2
a214 2
      [cx] = [nx]/2 + 1          ; X center
      [cy] = [ny]/2 + 1          ; Y center
d217 2
a218 2
        _2                       ; Inline file              (input)
        [cx]+10, 5               ; Location for background   
d220 2
a221 1
      [circ] =[circf]*[nx]       ; Compute mask radius
d227 8
a234 8
      MA                         ; Mask the image with circle(s)
        _2                       ; Inline file              (input)
        _9                       ; Inline file              (output)
        [circo],[circ]           ; Radii of central dot. e.g. (2*5A/px/200A)/x 500 = 25 pixels
        D                        ; Disk
        E                        ; External background
        [pv]                     ; Background
        [cx],[cy]                ; Center coordinates
d237 1
a237 1
        echo " Mask radii:         {*****[circo]} and {***[circ]}"  
d240 2
a241 2
        _9                       ; Inline file              (input)
        [pow]                    ; Disk power spectrum      (output)
d244 2
a245 2
        _2                       ; Inline spectrum file     (input)
        [pow]                    ; Disk power spectrum      (output)
d248 26
a273 4
   RO SD                         ; Rotational average
     _2                          ; File                     (input)
     _3                          ; 1D rotational average    (output)
    [roo]                        ; PS Doc file (output)
d280 2
a281 2
     DE                          ; Delete group doc file
     [ctf]                       ;                    (removed)
d283 1
a283 1
     ; Transfer Function -- Estimate CTF parameters
d285 10
a294 10
     TF ED [ang], [mag],[def],[overdef],[cutoff] 
       [pow]                     ; 2D power spectrum  (input)
       [sp_pixsiz],[sp_sph_abb]  ; Pixel size, Spherical aberration
       [sp_lambda]               ; Electron wavelength Lambda
       [sp_acr]                  ; Ampl. contrast ratio
       [ctf]                     ; CTF doc file       (output)

     ; Save CTR parameters for image in summary doc file
     SD [key], [mic],[def],[ang],[mag],[cutoff]
       [out]                     ; Doc file           (output)
d297 1
a297 1
       echo ' 'Micrograph: {*****[mic]}'   'Defocus: {%f8.2%[def]};echo ' '
d303 1
a303 1
  [out]                          ; Doc file           (closed)
d306 1
a306 1
  cat [out].$DATEXT ; echo ' '
@


1.21
log
@*** empty log message ***
@
text
@d39 1
a39 1
[params]   = '../params'                    ; Parameter doc file
d41 1
a41 1
[sel_mic]  = '../sel_micrograph'            ; Micrograph selection doc file 
d43 1
a43 1
[micgr]   = '../Micrographs/raw{****[mic]}' ; Micrograph images
@


1.20
log
@No longer multiplying pixel size by decimation factor
@
text
@d3 3
a5 1
; PURPOSE:   Calculates average power spectra for a set of micrographs.
d15 1
d26 5
a30 5
[winsiz]    = 500    ; Window size of small pieces (Sx=Sy)
[xover]     = 50     ; X overlap % 
[yover]     = 50     ; Y overlap % 
[xd]        = 500    ; X Dist. from the edge 
[yd]        = 500    ; Y Dist. from the edge 
d35 1
a35 1
[maskr]     = 0      ; Mask output power spectrum this far from border   (0 = nomask)  
d39 1
a39 1
[params]   = '../params'                     ; Parameter doc file
d41 1
a41 1
[sel_mic]  = '../sel_micrograph'             ; Micrograph selection doc file 
d43 1
a43 1
[micgr]    = '../Micrographs/raw{****[mic]}' ; Micrograph images
d47 1
a47 1
[outdir]   = 'power'                         ; Power spectra directory
d49 1
a49 1
[pow]      = '[outdir]/pw_avg{****[mic]}'    ; Power spectra images
d51 1
a51 1
[roo]      = '[outdir]/roo{****[mic]}'       ; Rotational averagedoc file
d53 1
a53 1
[ctf]      = '[outdir]/ctf{****[mic]}'       ; Spectrum, envelope, noise doc file
d55 1
a55 1
[out]      = 'defocus'                       ; Defocus values doc file
d59 1
a59 1
[spi] = '_1'                                  ; Temp Spider file
d64 1
a64 1
TR OFF                             ; Loop info turned off
d66 1
a66 1
VB OFF                             ; File info turned off
d68 2
a69 4
() OFF                             ; No need for () in DO loops          
MD
SET MP                             ; Use all available OMP processors
0
d76 1
a76 1
[params]                           ; Params file           (input)
d78 1
a78 1
[params]                           ; Params file           (input)
d80 1
a80 1
[params]                           ; Params file           (input)
d82 1
a82 1
[params]                           ; Params file           (input)
d84 1
a84 1
[params]                           ; Params file           (input)
d87 1
a87 1
   [params]                        ; Params file           (input)
d100 1
a100 1
  ; Want to determine defocus parameters for each group
d103 1
a103 1
  [params]                         ; Params file           (input)
d105 1
a105 1
  [params]                         ; Params file           (input)
d107 1
a107 1
  [params]                         ; Params file           (input)
d112 4
a115 3

  SD /    Micrograph     Defocus     Astig.Ang    Astig.Mag  Cutoff.Freq
  [out]                            ; Title for defocus file (output)
a117 7
[tmparr] = 'tmparray'              ; Name for temporary incore doc file

[winsizd2]=[winsiz]/2
SD IC NEW                          ; Create an in-core doc file array
[tmparr]
4,[winsizd2]                       ; Creates a 4 column doc file

d119 1
a119 1
[sel_mic]
d124 1
a124 1
  [sel_mic]                        ; Micrograph select doc file  (input)
d126 2
a127 2
   VM
   echo ' 'Loading Micrograph:   {*****[mic]}  
d131 3
a133 3
   [micgr]                         ; Micrograph template     (input)
   [spi]                           ; Spider file             (output)
   _4                              ; Hiscan & Nikon scratch  (output)
d136 1
a136 1
   echo " Creating spectra:   [pow] and [roo]"  
d138 1
a138 1
   [roo]                           ;                      (removed)
d141 2
a142 2
   [spi]                           ; Micrograph image     (input)
   NSAM,NROW
d144 1
a144 1
   ; [winsiz] = large window size
d146 2
a147 1
   ;[v87]=(([x]-2*[xd])*([y]-2*[yd]))number of pieces in this micrograph
d149 2
a150 2
   [nox]=100/(100-[xover]); Normalization of % of the overlap in x 
   [noy]=100/(100-[yover]); Normalization of % of the overlap in y
d152 4
a155 2
   [npx]=INT([nox]*(([x]-2*[xd])/[winsiz]-1)+1)  ; No. of pieces horizontal dim.(X)
   [npy]=INT([noy]*(([y]-2*[yd])/[winsiz]-1)+1)  ; No. of pieces vertical dim.(Y)
d157 8
a164 12
   [v94] = 0
   ; -------------------- Loops over X and Y -------------- 
   DO [v12] = 1, [npy]
      [uly] = ([winsiz]/[noy])*([v12]-1) + [yd]     ; Y-direction
      DO  [v13] = 1, [npx]
         [ulx] = ([winsiz]/[nox])*([v13]-1) + [xd]  ; X-direction

         WI                       ; Window image
         [spi]                    ; Get small pieces of input image 
         _5
         [winsiz],[winsiz]        ; Size of small pieces
         [ulx],[uly]              ; Coord. of upper left corner
d167 2
a168 2
         _5                       ;                  (input)
         _6                       ;                  (output)
d170 3
a172 3
         PW                       ; Calc power spectrum of each small piece
         _6                       ;                  (input)
         _7                       ; PS               (output)
d175 2
a176 2
         _7                       ;                  (input) 
         _9                       ; Squared          (output)
d178 1
a178 1
         [v94] = [v94]+1
d180 1
a180 1
         IF ([v94].ge.2) THEN
d182 4
a185 4
            _3                    ;                  (input)
            _9                    ;                  (input)
            _3                    ; Sum              (output)
            *
d188 2
a189 2
            _9                    ;                  (input)
            _3                    ;                  (output)
d194 3
d199 8
a206 8
   AR                            ; Average over power spectra of small pieces 
   _3                            ; Inline file              (input)
   _8                            ; Inline file              (output)
   P1/[v94]

   WU                            ; Calculate the square root 
   _8                            ; Inline file              (input) 
   _2                            ; Inline file              (output)  
d209 3
a211 3
      FI H [nsam],[nrow]
      _2                         ; Inline file              (input)
      NSAM,NROW                  ; Get image dimensions
d213 2
a214 2
      [cx] = [nsam]/2 + 1        ; x center
      [cy] = [nrow]/2 + 1        ; Y center
d217 2
a218 2
      _2                         ; Inline file              (input)
      ([cx]+10,5)                ; Location for background   
d220 1
a220 2
       
      [circ] =[circf]*[nsam]     ; Mask radius
d226 8
a233 8
      MA                         ; Mask image
      _2                         ; Inline file              (input)
      _9                         ; Inline file              (output)
      [circo],[circ]             ; Radii of central dot. e.g. (2*5A/px/200A)/x 500 = 25 pixels
      D                          ; Disk
      E                          ; External background
      [pv]                       ; Background
      [cx],[cy]                  ; Center coordinates
d236 1
a236 1
      echo " Masked spectra:     {*****[circo]} and {***[circ]}"  
d239 2
a240 2
      _9                         ; Inline file              (input)
      [pow]                      ; Disk power spectrum      (output)
d243 2
a244 2
      _2                         ; Inline spectrum file     (input)
      [pow]                      ; Disk power spectrum      (output)
d247 4
a250 26
   RO                            ; Rotational average
   _2                            ; File                     (input)
   _3                            ; 1D rotational average    (output)

   LI D                          ; List in doc file
   _3                            ; 1D rotational average    (input)
   [tmparr]                      ; Doc file                 (output)
   R                             ; Row wanted
   (1)                           ; Which row

   ; Labels for columns in output doc file
   SD /      Amplitude    X-axis     Spat.Freq.
   [roo]                                ; Doc file    (output)

   [winsizd2t] = [winsiz]/2             ; 1/2 large window size

   DO [v70] = 1,[winsizd2]
      UD IC [v70], [v72],[v73]
      [tmparr]                          ; Doc file    (input)

      ; Compute spatial freq.
      [sfreq] = [v70] / (2.0 * [winsizd2t]) 

      SD [v70],[v72],[v73],[sfreq]
      [roo]                             ; PS Doc file (output)
   ENDDO
d257 2
a258 2
     DE                                ; Delete group doc file
     [ctf]                             ;                    (removed)
d260 1
a260 1
     ; Transfer Function -- Estimation of CTF parameters
d262 10
a271 10
     TF ED [v12],[v13],[v14],[v15],[v16] 
     [pow]                             ; 2D spectrum        (input)
     ([sp_pixsiz], [sp_sph_abb])       ; Pixel size, Spherical aberration
     ([sp_lambda])                     ; Lambda
     ([sp_acr])                        ; Ampl. contrast ratio
     [ctf]                             ; Doc file           (output)

     ; Save parameters for this group in summary doc file
     SD [key], [mic],[v14],[v12],[v13],[v16]
     [out]                             ; Doc file           (output)
d274 1
a274 1
     echo ' 'Micrograph: {*****[mic]}'   'Defocus: {%f8.2%[v14]};echo ' '
d280 1
a280 1
[out]                                  ; Doc file           (output)
d283 1
a283 1
echo ' ' ; cat [out].$DATEXT ; echo ' '
@


1.19
log
@*** empty log message ***
@
text
@d89 4
a92 1
[sp_pixsiz]=[sp_pixsiz]*[deci]     ; Adjust pixel size for decimation??
@


1.18
log
@mask to zero
@
text
@d36 1
a36 2
 [params]   = '../params'                     ; Parameter doc file
;[params]   = 'input/params'                  ; Parameter doc file
d38 1
a38 2
 [sel_mic]  = '../sel_micrograph'             ; Micrograph selection doc file 
;[sel_mic]  = 'input/sel_micrograph'          ; Micrograph selection doc file 
d40 1
a40 2
 [micgr]    = '../Micrographs/raw{****[mic]}' ; Micrograph images
;[micgr]    = 'input/m20{****[mic]}'          ; Micrograph images
d44 1
a44 1
 [outdir]   = 'power'                         ; Power spectra directory
d46 1
a46 1
 [pow]      = '[outdir]/pw_avg{****[mic]}'    ; Power spectra images
d48 1
a48 1
 [roo]      = '[outdir]/roo{****[mic]}'       ; Rotational averagedoc file
d50 1
a50 1
 [ctf]      = '[outdir]/ctf{****[mic]}'       ; Spectrum, envelope, noise doc file
d52 1
a52 1
 [out]      = 'defocus'                       ; Defocus values doc file
@


1.17
log
@added mask
@
text
@d32 1
a32 1
[maskr]     = 2      ; Mask output power spectrum this far from border   (0 = nomask)  
d36 1
a36 1
  [params]  = '../params'                     ; Parameter doc file
@


1.16
log
@combined power & defocus using new loadmic
@
text
@a20 1

d32 1
d36 2
a37 2
[params]  =  'input/params'                    ; Parameter doc file
;[params]  =  '../params'                      ; Parameter doc file
d39 2
a40 2
[sel_mic] = 'input/sel_micrograph'             ; Micrograph selection doc file 
;[sel_mic] = '../sel_micrograph'               ; Micrograph selection doc file 
d42 2
a43 2
[micgr]   = 'input/m20{****[mic]}'             ; Micrograph images
;[micgr]   = '../Micrographs/raw{****[mic]}'   ; Micrograph images
d47 1
a47 3
[outdir] = 'jnkpow'                        ; Power spectra directory
[outdir] = 'jnkpow'                        ; Power spectra directory
;[outdir]= 'power'                         ; Power spectra directory
d49 1
a49 1
[pow]    = '[outdir]/pw_avg{****[mic]}'    ; Power spectra images
d51 1
a51 1
[roo]    = '[outdir]/roo{****[mic]}'       ; Rotational averagedoc file
d53 1
a53 1
[ctf]    = '[outdir]/ctf{****[mic]}'       ; Spectrum, envelope, noise doc file
d55 1
a55 2
[out]    = 'jnk-defocus'                   ; Defocus values doc file
;[out]   = 'defocus'                       ; Defocus values doc file
d59 1
a59 1
[spi] = '_1'                               ; Temp Spider file
d211 1
a211 2

   IF ([circf].GT.0.0) THEN       ; Mask out center 
d221 8
a228 1
      ([cx]+10,5)   
a229 1
      [circ]=[circf]*[nsam]
d233 1
a233 1
      (0.0,[circ])               ; Radius of central dot. e.g. (2*5A/px/200A)/x 500 = 25 pixels
d237 4
a240 1
      ([cx],[cy])                ; Center coordinates
d244 5
a248 1
      _2                         ; Inline file              (output)
d250 1
a250 5

   CP                            ; Copy to disk
   _2                            ; Inline spectrum file     (input)
   [pow]                         ; Disk power spectrum      (output)

d309 1
a309 1
echo ' ' ; cat [out].* ; echo ' '
@


1.15
log
@simplify-rewrite
@
text
@d1 1
a1 1
; <html><head><title>Calculates average power spectra for a set of micrographs</title></head><body><pre>
d5 3
a7 1
;            Places power spectra in: power/roo***
d10 1
d12 1
a12 1
; SOURCE:  spider/docs/techs/recon/newprogs/power.spi 
d15 15
d31 2
a32 14
[winsiz] = 500    ; Window size of small pieces (Sx=Sy)
[xover]  = 50     ; % of the overlap in x
[yover]  = 50     ; % of the overlap in y
[xd]     = 500    ; Dist. from the edge (x)
[yd]     = 500    ; Dist. from the edge (y)
[mask]   = 225    ; Power spectrum mask radius (Angstroms); 0 = don't mask

; [deci] = decimation factor for 'DC S' operation
;  0 = get value from param file (key=16)
;  1 = full sized image
;  2 = 1/2 size
;  4 = 1/4 size

[deci]   = 0     ; Decimation factor (0 = get value from  param file)
d36 2
a37 1
[params] = '../params'                     ; Parameter file
d39 2
a40 1
[sel_mic] = '../sel_micrograph'            ; Micrograph selection doc file 
d42 2
a43 1
[micgr] = '../Micrographs/raw{****[mic]}'  ; Micrographs
d47 9
a55 1
[outdir] = 'power'                         ; Power spectra output directory
d57 2
a58 1
[spectrum] = '[outdir]/pw_avg{****[mic]}'  ; Power spectra
d60 3
a62 1
[roo] = '[outdir]/roo{****[mic]}'          ; Rotational average (doc file)
a75 3
UD N [nummics]                     ; Get number of micrographs
[sel_mic]

d79 41
a119 2
FR G                               ; Name for temporary incore doc file
[tmparr]tmparray
d126 3
d131 2
a132 2
  UD [key], [mic]
  [sel_mic]                        ; Micrograph selection doc file   (input)
d135 1
a135 1
   echo ' 'Micrograph: {*****[mic]}  Creating spectra: [spectrum] and [roo]  
d137 5
a141 16
   ;  -----  Get zip & format flags from parameter file (can params vary??) ---------
   UD 1,[zflag]                    ; Get zip flag
   [params]

   UD 2,[fflag]                    ; Get tif flag
   [params]

   ; ----------- Checks if files are gzip compressed ------------------

   IF ([zflag]*[fflag].GT.0) THEN  ; Both tif & zip flags set
       VM                          ; Unzip the file
       gunzip [micgr].tif.gz
   ELSEIF ([zflag].GT.0) THEN      ; Zip, but not tif, flag set
       VM                          ; Unzip the file
       gunzip [micgr].$DATEXT.gz
   ENDIF
d143 4
a146 64
   ; ----------- Conversion based on scanner type -------------------
   IF ([fflag] .eq .0) THEN	; Spider file, need to put input in _1
      CP                        ; Place in incore file
      [micgr]                   ; Spider file   (input)
      _1                        ; Spider file   (output)

   ELSEIF ([fflag] .EQ. 1) THEN
      UD 3,[nsam]              ; HiScan raw file, Get X,Y size parameters 
      [params]                 ; Params file    (input)
      UD 4,[nrow]              ;         
      [params]                 ; Params file    (input)

      CP FROM RAW
      16                       ; Bits / pixel
      [micgr].tif              ; Raw file      (input)
      [raw]                    ; File (input)
      [nsam],[nrow]            ; Size
      (342)                    ; Header bytes
      (1)
      N
      _2                       ; Spider file   (output)

      AR
      _2                       ; Spider file   (input)
      _1                       ; Spider file   (output)
      log(p1+1)

   ELSEIF ([fflag] .EQ. 3) THEN

      VM                       ; ZI tif file.  Overview should always = 1
      zi2spi [micgr].tif [micgr].$DATEXT 1

      CP                       ; Place in incore file
      [micgr]
      _1                       ; Spider file   (output)

      DE                       ; Delete the SPIDER format file
      [micgr]                  ;

   ELSEIF ([format].EQ.4) THEN     
      CP FROM NIKON            ; Nikon Tif Scanner file
      [micgr].tif              ; Nikon tif file (input)
      _1                       ; Spider file    (output)

   ENDIF 

   ; ----------- Size reduction, if any -------------------

   IF ([deci].LT.1) THEN
      UD 16,[deci]             ; Get reduction factor from param file
      [params]                 ; Param file   (input)
   ENDIF

   IF ([deci].GT.1) THEN       ; Reduction

      DC S                     ; Decimate image - Sum neighbouring pixels
      _1                       ; Spider file (input)
      _2                       ; Spider file (output)
      [deci],[deci]            ; Decimation factor

      CP                       ; Copy file
      _2                       ; Spider file (input)
      _1                       ; Spider file (output)
   ENDIF
d148 2
a149 19
   ; ----------- Masking ---------------------------------------

   IF ([mask].NE.0) THEN
      UD 5,[pxsiz]               ; Get pixel size
      [params]                   ; Params file (input)

      [pxsiz]=[pxsiz]*[deci]     ; Adjust pixel size for decimation

      [radius]=2*[pxsiz]/[mask]  ; Mask radius (now in 1/px)
   ENDIF

   ; If the output doc files already exist, delete them
   DE
   [roo]

   ; ------------------ from: power_p1 ----------------

   FI H [x],[y]      ; Get dimensions of the full image
   _1
d159 2
a160 2
   [npx]=INT([nox]*(([x]-2*[xd])/[winsiz]-1)+1)  ; Number of pieces horizontal dim.(X)
   [npy]=INT([noy]*(([y]-2*[yd])/[winsiz]-1)+1)  ; Number of pieces vertical dim.(Y)
d164 1
a164 1
   DO  [v12] = 1, [npy]
d169 2
a170 2
         WI                ; Window image
         _1                ; Get small pieces of the input image 
d172 2
a173 2
         [winsiz],[winsiz] ; Size of small pieces
         [ulx],[uly]       ; Coordinates of the upper left corner
d175 11
a185 11
         RA                ; Correct ramp effects 
         _5
         _6

         PW                ; Calc power spectrum of each small piece
         _6
         _7

         SQ                ; Square image             
         _7  
         _9
d190 4
a193 4
            AD             ; Add images
            _3
            _9
            _3
d196 3
a198 3
            CP             ; Copy image
            _9
            _3
d203 1
a203 1
   ; --------- End Loops. Resulting spectrum in _3 ------------
d205 3
a207 3
   AR                         ; Average over power spectra of small pieces 
   _3
   _8
d210 4
a213 3
   WU                         ; Calculate the square root 
   _8
   _2   
d215 1
a215 1
   IF ([radius].NE.0) THEN    ; Mask out center 
d217 2
a218 2
      _2
      NSAM,NROW               ; Get image dimensions
d220 2
a221 2
      [cx] = [nsam]/2 + 1
      [cy] = [nrow]/2 + 1
d223 36
a258 36
      GP [pv]                 ; Get pixel intensity
      _2
      ([cx]+10,5)

      MA                      ; Mask image
      _2
      _9
      (0.0,[radius]*[nsam])   ; Radius of central dot. e.g., (2 * 5A/px/200A)/x 500 = 25 pixels
      D
      E
      [pv]
      ([cx],[cy])

      CP                      ; Copy image
      _9
      _2
   ENDIF                      ; End maskout if clause. Spectrum in _2 

   CP                         ; Write the output file
   _2
   [spectrum]

   ; Create the document file, with column headings & spatial freq. column
   RO 
   _2
   _3                         ; 1D rotational average

   LI D
   _3
   [tmparr]                   ; Doc file            (output)
   R                          ; Row output
   (1)                        ; Row

   ; Labels for columns in output file
   SD /     Amplitude     X-axis    Spat.Freq.
   [roo]                 ; Doc file            (output)
d260 1
a260 1
   [winsizd2t] = [winsiz]/2  ; 1/2 large window size
d264 1
a264 1
      [tmparr]                             ; Doc file      (input)
d266 2
a267 1
      [sfreq] = [v70] / (2.0 * [winsizd2t]) ; Compute spatial freq.
d270 1
a270 1
      [roo]                                ; Doc file         (output)
a271 1
   ; ------------------ end: power_p1 ----------------
d273 24
a296 8
   ; ----------- Rezip if necessary -------------------
   IF ([zflag]*[fflag] .GT. 0) THEN  ; Both tif & zip flags set
       VM                            ; Recompress the file
       gzip [micgr].tif

   ELSEIF ([zflag].eq.1) THEN        ; Only zip flag
       VM                            ; Recompress the file
       gzip [micgr].$DATEXT
d298 1
d300 2
a301 1
ENDDO
d304 1
a304 1
echo ' '
@


1.14
log
@Reuse of MASK register sometimes caused problems
@
text
@d1 1
a1 1
; <html><head><title>Calculates avg power spectra for a set of micrographs</title></head><body><pre>
d3 5
a7 5
; PURPOSE: ; Calculates average power spectra for a set of micrographs.
;            Converts a scanned file to SPIDER format.
;            Input: window size, percentage of the overlap
;            distance of the window from the micrograph border
;            Spectra placed in: power/roo***
d9 1
a9 1
; SOURCE: power.spi 
d11 1
a11 3
; CALLS:   power_p1.spi 
;
; Edit the following parameters as needed, including the filenames
d25 2
a26 1
[deci]   = 1     ; Decimation factor (0 = get value from  param file)
d29 2
a30 2
FR L
[params]../params                     ; Parameter file
d32 1
a32 2
FR L
[sel_mic]../sel_micrograph            ; Micrograph selection doc file 
d34 1
a34 2
FR L
[micgr]../Micrographs/mic{****[mic]}  ; Micrographs
d38 1
a38 2
FR L
[outdir]power                         ; Power spectra output directory
d40 1
a40 2
FR L
[spectrum][outdir]/pw_avg{****[mic]}  ; Power spectra
d42 1
a42 2
FR L
[roo][outdir]/roo{****[mic]}          ; Rotational average (doc file)
d46 9
a54 3
; This gets the file numbers,
; checks if they need to be unzipped or converted,
; then calls power_p1 in the main loop
d62 1
a62 1
FR G                               ; Name for incore doc file
d70 1
a70 1
DO  [key]=1,[nummics]              ; Loop over all micrographs -------------------
d73 1
a73 1
  [sel_mic]                        ; Doc file              (input)
d76 1
a76 1
   echo ' 'Processing micrograph: {*****[mic]}
d175 3
a177 1
   @@power_p1([winsiz],[xover],[yover],[xd],[yd],[radius])
d179 92
d272 28
a299 2
   [roo]
   [tmparr]
d313 3
@


1.13
log
@mask is variable size, Nikon converter added, reformatted
@
text
@d163 2
a164 2
      UD 5,[pxsiz]             ; Get pixel size
      [params]                 ; Params file (input)
d166 1
a166 1
      [pxsiz]=[pxsiz]*[deci]   ; Adjust pixel size for decimation
d168 1
a168 1
      [mask]=2*[pxsiz]/[mask]  ; Mask radius (now in 1/px)
d175 1
a175 1
   @@power_p1([winsiz],[xover],[yover],[xd],[yd],[mask])
@


1.12
log
@deci = 1
@
text
@d3 1
a3 1
; PURPOSE: ; Calculates avg power spectra for a set of micrographs.
d20 1
a20 1
[mask]   = 1      ; 1 = mask out center of spectrum; 0 = don't mask
d27 1
a27 1
[deci] = 1     ; Decimation factor (0 = get value from  param file)
d56 1
a56 1
UD N [nummics]                 ; Get number of micrographs
d59 1
a59 1
VM                             ; Make sure output dir. present
d62 1
a62 1
FR G                           ; Name for incore doc file
d66 1
a66 1
SD IC NEW                      ; Create an in-core doc file array
d68 1
a68 1
4,[winsizd2]                   ; Creates a 4 column doc file
d70 1
a70 1
DO LB1 [key]=1,[nummics]       ; Loop over all micrographs -------------------
d73 1
a73 1
  [sel_mic]                    ; Doc file              (inpu)
d78 2
a79 2
   ; Get zip and format flags from parameter file
   UD 1,[zflag]                ; Get zip flag
d82 1
a82 1
   UD 2,[fflag]                ; Get tif flag
d85 4
a88 2
   IF ([zflag]*[fflag].GT.0) THEN   ; Both tif & zip flags set
       VM                           ; Unzip the file
d90 2
a91 5
       GOTO LB3
   ENDIF

   IF ([zflag].GT.0) THEN     ; Zip, but not tif, flag set
       VM                     ; Unzip the file
a92 1
       GOTO LB3
d95 43
a137 1
   LB3
d139 1
a139 19
   IF ([fflag].EQ.1) THEN
       UD 3,x51        ; If it's a HiScan tif, get X,Y size parameters
       [params]
       UD 4,x52
       [params]

       CP FROM RAW
       [micgr].tif       ; Raw file      (input)
       (16)              ; Bits per pixel
       x51,x52           ; Columns & rows
       (342)             ; Header bytes
       (1)               ; Most significant byte
       N                 ; Do not fold negatives
       junk12987         ; Spider file   (output)

       AR
       junk12987
       _1
       log(p1+1)
d141 1
a141 2
       DE
       junk12987
d143 3
d148 1
a148 10
   ; If it's a ZI tif, make system call to zi2spi.
   ; NB OVERVIEW SHOULD ALWAYS = 1, USE 'DC S' TO REDUCE SIZE
   IF ([fflag].EQ.3) THEN

       VM                       ; Convert to SPIDER format
       zi2spi [micgr].tif [micgr].$DATEXT 1

       CP                       ; Place in incore file
       [micgr]
       _1
d150 4
a153 2
       DE                       ; Delete the SPIDER format file
       [micgr]                  ;
d155 3
d160 1
a160 5
   IF ([fflag].eq.0) THEN	; If not tif, still need to put input in _1
       CP                       ; Place in incore file
       [micgr]                  ;                       (input)
       _1
   ENDIF
d162 3
a164 2
   ; Size reduction, if any
   IF ([deci].EQ.1) GOTO LB7   ; No reduction
d166 1
a166 3
   IF ([deci].LT.1) THEN
      UD 16,[deci]          ; Get reduction factor from param file
      [params]              ;                             (input)
d168 1
a168 1
      IF ([deci].LE.1) GOTO LB7
a170 11
   DC S                     ; Decimate image - Sum neighbouring pixels
   _1
   _2
   [deci],[deci]            ; Decimation factor

   CP                       ; Copy file
   _2
   _1

   LB7

d181 3
a183 2
   IF ([zflag]*[fflag].GT.0) THEN     ; Both tif & zip flags set
       VM
a184 2
       GOTO LB4
   ENDIF
d186 2
a187 2
   IF ([zflag].eq.1) THEN             ; Only zip flag
       VM
a188 1
       GOTO LB4
d191 1
a191 2
   LB4
LB1
@


1.11
log
@stack usage
@
text
@d27 1
a27 1
[deci] = 0     ; Decimation factor (0 = get value from  param file)
@


1.10
log
@changed decimation factor from key 21 -> key 16
@
text
@d1 1
a1 1
; power.bat
d3 9
a11 5
; Calculates avg power spectra for a set of micrographs.
; Converts a scanned file to SPIDER format.
; input: window size, percentage of the overlap
; distance of the window from the micrograph border
; results in power/roo***
a12 1

d15 6
a20 6
x71=500   ; window size of small pieces (Sx=Sy)
x72=50    ; % of the overlap in x
x73=50    ; % of the overlap in y
x74=500   ; dist. from the edge (x)
x75=500   ; dist. from the edge (y)
x89= 1    ; 1 = mask out center of spectrum; 0 = don't mask
d22 1
a22 1
; x88 = decimation factor for DC S command
d27 1
a27 1
x88 = 0  ; decimation factor (0 = get value from  param file)
d31 1
a31 1
[params]../params      ; parameter file
d34 1
a34 1
[FILENUMS]../filenums   ; file numbers
d37 1
a37 1
[mic]../Micrographs/mic{****x12}   ; micrographs
d42 1
a42 1
[outdir]power     ; output directory
d45 1
a45 1
[spectrum][outdir]/pw_avg{****x12}   ; power spectra
d48 1
a48 1
[roo][outdir]/roo{****x12}          ; rotational average (doc file)
d51 3
a53 3
;
; This gets the file numbers, checks
; if they need to be unzipped or converted,
d56 2
a57 3
; get the filenumbers
ud n,x20
[FILENUMS]
d59 1
a59 1
VM                      ; Make sure output dir. present
d62 1
a62 2
; create an in-core doc file array
FR G
d64 3
a66 1
SD IC NEW
d68 1
a68 1
(4,x71/2)   ; LI D creates a 4 column doc file
d70 1
a70 74
DO LB1 x11=1,x20
ud x11,x12
[FILENUMS]
; x12 is now the file number

VM
echo Working on micrograph {***x12}

; get zip and format flags from parameter file
ud 1,x80
[params]
ud 2,x81
[params]

IF (x80*x81.GT.0) THEN     ; both tif & zip flags set
    vm
    gunzip [mic].tif.gz
    GOTO LB3
ENDIF

IF (x80.GT.0) THEN     ; zip, but not tif, flag set
    vm
    gunzip [mic].$DATEXT.gz
    GOTO LB3
ENDIF

LB3

IF (x81.eq.1) THEN
    UD 3,x51        ; if it's a HiScan tif, get X,Y size parameters
    [params]
    UD 4,x52
    [params]

    cp from raw
    (16)
    [mic].tif
    x51,x52
    (342)
    (1)
    n
    junk12987

    ar
    junk12987
    _1
    log(p1+1)

    de
    junk12987

ENDIF

 ; if it's a ZI tif, make system call to zi2spi.
; NB OVERVIEW SHOULD ALWAYS = 1, USE DC S TO REDUCE SIZE
IF (x81.eq.3) THEN

    VM
    zi2spi [mic].tif [mic].$DATEXT 1

    cp
    [mic]
    _1

	DE
	[mic]

ENDIF

IF (x81.eq.0) THEN	; if not tif, still need to put input in _1

    cp
    [mic]
    _1
d72 2
a73 1
ENDIF
d75 2
a76 2
; size reduction, if any
IF (x88.EQ.1) GOTO LB7   ; no reduction
d78 2
a79 2
IF (x88.LT.1) THEN
   ud 16,x88   ; get reduction factor from param file
d82 2
a83 35
   IF (x88.LE.1) GOTO LB7
ENDIF

DC S
_1
_2
x88,x88

CP
_2
_1

LB7

; if the output doc files already exist, delete them
DE
[roo]

@@power_p1[x71,x72,x73,x74,x75,x89]
_1
[spectrum]
[roo]
[tmparr]

IF (x80*x81.GT.0) THEN     ; both tif & zip flags set
    vm
    gzip [mic].tif
	GOTO LB4
ENDIF

IF (x80.eq.1) THEN     ; only zip flag
    vm
    gzip [mic].$DATEXT
    GOTO LB4
ENDIF
d85 103
a187 1
LB4
d189 1
d192 2
a193 1
EN D
@


1.9
log
@converted from overview number to decimation factor
@
text
@d20 1
a20 1
;  0 = get value from param file (key=21)
d148 1
a148 1
   ud 21,x88   ; get reduction factor from param file
@


1.8
log
@changed extension to spi, changed <> brackets to []
@
text
@a16 1
x88= 1    ; overview # (for ZI files only, otherwise ignored)
d19 7
d34 1
a34 1
[mic]../Micrographs/mic{***x12}    ; ; ;micrographs
d42 1
a42 1
[spectrum][outdir]/pw_avg{***x12}   ; power spectra
d45 1
a45 1
[roo][outdir]/roo{***x12}          ; rotational average (doc file)
d120 2
a121 1
 ; if it's a ZI tif, make system call to zi2spi. x87 is overview #
d125 1
a125 1
    zi2spi [mic].tif [mic].$DATEXT {*x88}
d143 21
@


1.7
log
@put asterisks in symbolic variable, i.e. <mic>../mic --> <mic>../mic{***x12}
@
text
@a0 2
MD
TERM ON
d17 1
a17 1
x88= 2    ; overview # (for ZI files only, otherwise ignored)
d22 2
a23 1
<params>../params      ; parameter file
d25 2
a26 1
[FILENUMS]../filenums    ; ; ; file numbers
d28 1
a28 1
<mic>../Micrographs/mic{***x12}    ; ; ;micrographs
d31 4
d36 1
a36 1
<spectrum>power/pw_avg   ; power spectra
d39 1
a39 1
<roo>power/roo          ; rotational average (doc file)
d51 3
d56 1
a56 1
<tmparr>tmparray
d58 1
a58 1
<tmparr>
d66 3
d71 1
a71 1
<params>
d73 1
a73 1
<params>
d77 1
a77 1
    gunzip <mic>.tif.gz
d83 1
a83 1
    gunzip <mic>.$DATEXT.gz
d91 1
a91 1
    <params>
d93 1
a93 1
    <params>
d97 1
a97 1
    <mic>.tif
d118 1
a118 1
    zi2spi <mic>.tif <mic>.$DATEXT {*x88}
d121 1
a121 1
    <mic>
d125 1
a125 1
	<mic>
d132 1
a132 1
    <mic>
d139 1
a139 1
<roo>{****x12}
d143 3
a145 3
<spectrum>{****x12}
<roo>{****x12}
<tmparr>
d149 1
a149 1
    gzip <mic>.tif
d155 1
a155 1
    gzip <mic>.$DATEXT
d163 1
a163 1
EN
@


1.6
log
@replaced <filenums> with [FILENUMS] in the rest of the file
@
text
@d1 2
d26 1
a26 1
[FILENUMS]../filenums     ; file numbers
d28 1
a28 1
<mic>../Micrographs/raw   ;micrographs
d67 1
a67 1
    gunzip <mic>{****x12}.tif.gz
d73 1
a73 1
    gunzip <mic>{****x12}.$DATEXT.gz
d87 1
a87 1
    <mic>{****x12}.tif
d108 1
a108 1
    zi2spi <mic>{****x12}.tif <mic>{****x12}.$DATEXT {*x88}
d111 1
a111 1
    <mic>{****x12}
d115 1
a115 1
	<mic>{****x12}
d122 1
a122 1
    <mic>{****x12}
d139 1
a139 1
    gzip <mic>{****x12}.tif
d145 1
a145 1
    gzip <mic>{****x12}.$DATEXT
@


1.5
log
@changed <filenums> to [FILENUMS]
@
text
@d43 1
a43 1
<files>
d54 1
a54 1
<files>
@


1.4
log
@rewrote to use in-core doc files
@
text
@d24 1
a24 1
<files>../filenums     ; file numbers
@


1.3
log
@fixed zi2spi line x87 --> x88
@
text
@d45 7
d65 1
a65 1
    gunzip <mic>{***x12}.tif.gz
d71 1
a71 1
    gunzip <mic>{***x12}.$DATEXT.gz
d85 1
a85 1
    <mic>{***x12}.tif
d106 1
a106 1
    zi2spi <mic>{***x12}.tif <mic>{***x12}.$DATEXT {*x88}
d109 1
a109 1
    <mic>{***x12}
d113 1
a113 1
	<mic>{***x12}
d120 1
a120 1
    <mic>{***x12}
d127 1
a127 1
<roo>{***x12}
d131 3
a133 2
<spectrum>{***x12}
<roo>{***x12}
d137 1
a137 1
    gzip <mic>{***x12}.tif
d143 1
a143 1
    gzip <mic>{***x12}.$DATEXT
@


1.2
log
@removed the 1D binary output, made more efficient use of inline files
@
text
@d99 1
a99 1
    zi2spi <mic>{***x12}.tif <mic>{***x12}.$DATEXT {*x87}
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
; 
d12 1
a12 1
x71=500   ; window size of small pieces (Sx=Sy) 
d14 1
a14 1
x73=50    ; % of the overlap in y 
d21 3
a23 3
FR G
<params>../params      ; parameter file	
FR G
d25 1
a25 1
FR G
d29 1
a29 1
FR G
d31 2
a32 3
FR G
<rospect>power/pw_ro     ; rotational average (binary)
FR G
d36 1
a36 1
; 
d71 1
a71 1
    UD 3,x51        ; if it's a HiScan tif, get X,Y size parameters 
d73 1
a73 1
    UD 4,x52          
d96 1
a96 1
IF (x81.eq.3) THEN  
d119 1
a119 1
IQ FI x88
a120 5
IF (x88.EQ.1) THEN
    DE
    <roo>{***x12}
ENDIF

a124 1
<rospect>{***x12}
d143 1
a143 1
EN D
@
