head	1.6;
access;
symbols;
locks;
comment	@# @;


1.6
date	2015.08.31.14.58.12;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2014.06.06.14.36.02;	author tapu;	state Exp;
branches;
next	1.4;

1.4
date	2014.06.06.10.12.34;	author tapu;	state Exp;
branches;
next	1.3;

1.3
date	2014.02.04.18.11.50;	author tapu;	state Exp;
branches;
next	1.2;

1.2
date	2014.02.04.12.09.51;	author tapu;	state Exp;
branches;
next	1.1;

1.1
date	2012.12.21.14.33.58;	author leith;	state Exp;
branches;
next	;


desc
@@


1.6
log
@updated
@
text
@; PAIRWISE REFERENCE-FREE ALIGNMENT
;
; Requires p_pairwise.rct, drawcircles.rct
; 
; Adapted from Michael Radermacher's rfreeprepdoc.rec and rfreeal2001.rec
;
; Described in Marco S, Chagoyen M, de la Fraga LG, Carazo JM, Carrascosa JL (1996)
; "A variant to the Random Approximation of the reference-free algorithm."
; Ultramicroscopy. Vol 66: pg. 5-10.

; --------------- Parameters ---------------

[filteredImgsYN]      = 0      ; use filtered images? (1==YES, 0==NO, -1==If_Available)
[cgOption]            = 2      ; center-of-gravity option (1==None, 2==CG PH, 3=RT180)
[numProcs]            = 0      ; number of CPUs to use (0= ALL)
[saveIntermeds]       = 1      ; save intermediate pairwise files (1==YES)
[alignRadius]         = -1     ; outer radius for alignment, (<0 == get from PARAMS object diameter)
[radiusPaddingFactor] = 1.7    ; if alignment radius is automatic, will multiply by this number
[innerRad]            = 1      ; inner radius for alignment, pixels
[searchRange]         = 8      ; translation search range, for AP SH (for alignment to final average)
[stepSize]            = 2      ; translation step size, for AP SH

; -------------- Input files ----------------
fr l
[parameter_doc]params                        ; parameter doc file
fr l 
[selection_list]listparticles                ; particle list

; unaligned images (will set [unaligned_images])
fr l 
[fullsized_stack]Zerodegr/stk2-winrot        ; unfiltered-particle stack (w/o "@@", see option [filteredImgsYN])
fr l 
[filtered_stack]Zerodegr/stkfiltered         ; filtered-particle stack (w/o "@@", see option [filteredImgsYN])

; --------------- Output files ---------------
fr l
[pair_dir]Zerodegr/Pairwise                  ; toplevel output directory
fr l
[pair_doc][pair_dir]/pairdoc****             ; pair-document template
fr l
[depth_dir][pair_dir]/Depth                  ; directory prefix for each depth of binary tree
fr l
[pair_align_doc][pair_dir]/alignpair         ; intermediate, reference-free alignment doc
fr l
[centered_stack][pair_dir]/stkcentavg        ; centered-average stack (slice 1: No centering, 2: CG PH, 3: RT180) 
fr l
[final_avg][pair_dir]/rfreeavg001            ; reference-free alignment average
fr l
[final_var][pair_dir]/rfreevar001            ; reference-free alignment variance
fr l
[final_align_doc][pair_dir]/docalign         ; final reference-based alignment doc
fr l
[final_align_copy][pair_dir]/docalign-copy   ; final reference-based alignment doc
fr l
[aligned_stack][pair_dir]/stkaligned         ; aligned-image stack (w/o "@@")
fr l
[aligned_images][aligned_stack]@@*****        ; aligned-image template (check number of digits)
fr l
[master_aligned]Zerodegr/stk3-aligned        ; master aligned-image stack (w/o "@@")

; ------------- END BATCH HEADER -------------

; Temporary files
fr l
[temp_reference]tmpref***
;fr l
;[temp_unmirrored7]_71
;fr l
;[temp_aligned7]_72
;fr l
;[temp_unmirrored5]_51
;fr l
;[temp_aligned5]_52
fr l
[temp_unmirrored3]_31
;FR L
;[temp_uncentered]_81

md
set mp
[numProcs]
md
vb off

; get parameters
ud 17,[idimParams]    ; window dimension
[parameter_doc]

ud e  ; close params

IF ([filteredImgsYN] .EQ. -1) THEN
    ; See if filtered images exist
    IQ FI [filteredExist]
    [filtered_stack]

    IF ([filteredExist] .EQ. 1) [filteredImgsYN]=1
ENDIF

IF ([filteredImgsYN] .EQ. 1) THEN
    VM
    echo "Aligning filtered/shrunken images [filtered_stack].$DATEXT" ; echo
    FR L
    [unaligned_images][filtered_stack]@@*****
ELSE
    VM
    echo "Aligning fullsize images [fullsized_stack].$DATEXT" ; echo
    FR L
    [unaligned_images][fullsized_stack]@@*****
ENDIF


; GET IMAGE DIMENSION

[one] = 1  ; dummy register

; get first-particle#
ud ic [one],[first-particle]
[selection_list]

; get image-dimension from first particle
fs
[unaligned_images][first-particle]
FI H [xdimFirst],[ydimFirst]
[unaligned_images][first-particle]
NX,NY

; compare image-dimensions from params and header, make sure not downsampled
IF ([idimParams] .NE. [ydimFirst]) THEN
    ; if images are square, then proceed
    if([xdimFirst] .EQ. [ydimFirst]) then
        ; compute ratio
        [ratio] = [idimParams]/[ydimFirst]
        
        ; use shrunken image-dimension
        [img-dim] = [ydimFirst]

        vm
        echo "Image dimension from parameter doc, {***[idimParams]} px, {%f3.1%[ratio]} times that from [unaligned_images][first-particle]"
        
        ; if automatic, then reduce object diameter
        IF ([alignRadius] .LE. 0) THEN
            ud 18,[objDiam]   ; particle diameter
            [parameter_doc]
            ud e
            
            [objDiam] = int([objDiam]/[ratio])
            ; (If the user specifies a huge diameter, hopefully later error-checking will find it.)

            ; calculate alignment radius
            [alignRadius] = [radiusPaddingFactor]*([objDiam] - 1)/2
    
            vm
            echo "Reducing object diameter by a factor of {%f3.1%[ratio]} also, to {***[objDiam]} px" ; echo
        ENDIF
    ; if images are not square
    else
        ; don't know what to do
        vm
        echo ; echo "ERROR"
        vm
        echo "Images not square"
        vm
        echo "Fix and re-start"

        en
    endif

; if PARAMS and image dimensions are the same...
else
    [img-dim] = [idimParams]
    
    ; if diameter automatically set, then get from PARAMS
    IF ([alignRadius] .LE. 0) THEN
        ud 18,[objDiam]   ; particle diameter
        [parameter_doc]
        ud e

        ; calculate alignment radius
        [alignRadius] = [radiusPaddingFactor]*([objDiam] - 1)/2
    ENDIF
endif

; check outer alignment radius
[check-radius] = int([img-dim]/2) - [alignRadius] - [searchRange]

; fix outer alignment radius, if necessary
if([check-radius].lt.2) then
    vm
    echo "WARNING:"
    vm
    echo "Tested alignment radius of {***[alignRadius]} from specified object diameter of {***[objDiam]} too big"
    
    ; re-set alignment radius
    [alignRadius] = int([img-dim]/2) - [searchRange] - 3
endif

vm
echo "Using outer alignment radius of {***[alignRadius]} pixels" ; echo


DE
[centered_stack]@@

; Perform pairwise alignment
@@p_pairwise
[innerRad]          ; PARAMETER: inner radius for alignment, pixels
[alignRadius]       ; PARAMETER: outer alignment radius, pixels
[searchRange]       ; PARAMETER: translation search range, pixels
[stepSize]         ; PARAMETER: translation step size
(1)                 ; PARAMETER: allow rotation?
[saveIntermeds]     ; PARAMETER: save outputs?
(1)                 ; PARAMETER: verbosity level
[selection_list]    ; INPUT: particle list
[unaligned_images]  ; INPUT: particle template
[pair_dir]          ; OUTPUT: toplevel output directory
[centered_stack]@@1  ; OUTPUT: reference-free average


; CENTER AVERAGES USING A FEW DIFFERENT STRATEGIES

; Search the center of gravity of the global average map AVSTX71
cg ph X21,X22,[xshift-cg],[yshift-cg]
[centered_stack]@@1

sh
[centered_stack]@@1
[centered_stack]@@2
-[xshift-cg],-[yshift-cg]  ; x,y-shifts


@@center1([xshift-cg],[yshift-cg])
[centered_stack]@@1  ; INPUT
[centered_stack]@@3  ; OUTPUT


if([cgOption].eq.1) then
    vm
    echo ; echo "Will not use re-centered intermediate average"
elseif([cgOption].eq.2) then
    vm
    echo ; echo "Will use average centered using CG PH"
else
    vm
    echo ; echo "Will use average centered by rotating 180 degrees and self-aligning"
endif

CP
[centered_stack]@@{*[cgOption]}
[temp_reference][cgOption]


; DRAW CIRCLES ON AVERAGES

@@drawcircles
[centered_stack]@@1   ; INPUT: overwritten
[innerRad]           ; PARAMETER: radius1
[alignRadius]        ; PARAMETER: radius2

@@drawcircles
[centered_stack]@@2   ; INPUT: overwritten
[innerRad]           ; PARAMETER: radius1
[alignRadius]        ; PARAMETER: radius2

@@drawcircles
[centered_stack]@@3   ; INPUT: overwritten
[innerRad]           ; PARAMETER: radius1
[alignRadius]        ; PARAMETER: radius2


vm
echo ; echo "Aligning to final average"; date

; clean up pre-existing file
de
[final_align_doc]

; align to centered average
ap sh
[temp_reference]   ; WAS [centered_stack]@@*  ; INPUT: reference template
[cgOption]          ; reference image# (center-of-gravity option)
[searchRange],[stepSize]
[innerRad],[alignRadius]
*                   ; INPUT: reference angles
[unaligned_images]  ; INPUT: experimental-image template
[selection_list]    ; INPUT: selection doc
*                   ; INPUT: previous alignment doc
(0)                 ; no angular restriction
(1)                 ; check mirrored positions
[final_align_doc]   ; OUTPUT: alignment doc

DE
[temp_reference][cgOption]


; APPLY ALIGNMENTS

VM
echo "Applying alignments" ; date

de
[aligned_stack]@@

; get #particles
ud n [num-particles]
[selection_list]

; loop through particles
do lb3 [part-key3] = 1,[num-particles]
    ud ic [part-key3], [part-num]
    [selection_list]

    ; read alignment parameters
    ud ic [part-num], x81,x82,x83,x84,x85,[inplane-angle3],[xshift3],[yshift3],x89,x90,x91,x92,x93,x94,[mirror-flag3]
    [final_align_doc]

    ; if necessary, mirror after shift+rotate
    if([mirror-flag3].lt.0) then
        rt sq
        [unaligned_images][part-num]
        [temp_unmirrored3]   ; OUTPUT
        [inplane-angle3]
        [xshift3],[yshift3]

        mr
        [temp_unmirrored3]   ; INPUT: rotated, shifted image
        [aligned_images][part-num]
        Y                    ; mirror around y-axis
    else
        rt sq
        [unaligned_images][part-num]
        [aligned_images][part-num]
        [inplane-angle3]
        [xshift3],[yshift3]
    endif
lb3
; end particle-loop

; close docs
ud ice
[final_align_doc]
ud ice
[selection_list]

; copy aligned images to central location (will be overwritten by subsequent alignments)
cp
[aligned_stack]@@
[master_aligned]@@
VM
cp -af [final_align_doc].$DATEXT [final_align_copy].$DATEXT


; Computation of the average and variance maps of the last cycle
as dc
[aligned_images]  ; INPUT: aligned-image template
[selection_list]  ; INPUT: selection file
A                 ; average _A_ll images
[final_avg]       ; OUTPUT: average
[final_var]       ; OUTPUT: variance

vm
echo "Done"; date

en 

; Modified 2015-08-13
;    2015-07-29 (trs) -- draws circles on intermediate averages
;    2015-07-29 (trs) -- makes backup copy of alignment doc
;    2015-07-29 (trs) -- bug fix: didn't read object diameter from PARAMS unless downsampled
;    2015-04-01 (trs) -- added option to use filtershrink images
;    2015-03-27 (trs) -- split off reference-free alignment into subroutine, p_pairwise
;    2015-03-24 (trs) -- all center-of-gravity options written for comparison
;    2014-03-25 (trs) -- can override object diameter from PARAMS
;    2014-03-05 (trs) -- making master copy of aligned stack
;    2014-03-05 (trs) -- writing images in stacks
;    2014-02-27 (trs) -- added centering options
;    2014-02-06 (trs) -- added digit for more than 999 pairs of images
;    2014-01-24 (trs) -- uses all processors
;    2013-05-06 (trs) -- uses named registers
;    2013-05-06 (trs & svd) -- gets image-dimension from first image
;    2010-08-24 (trs) -- AP MQ and OR MQ replaced with AP SH and OR SH
;    2010-02-08 (trs) -- fits outer alignment radius to image
;    2009-06-12 (trs) -- centers penultimate average
;    2008-11-25 (trs) -- computes variance
;    2008-11-24 (trs) -- adapted from pairwise.spi
@


1.5
log
@bug fix
@
text
@d2 2
d11 11
a21 6
; ---------------- Parameters ----------------
[cg-option]    = 1                       ; center-of-gravity option (0==None, 1==CG PH, 2=RT180)
[inner-rad]    = 1                       ; inner radius for alignment, pixels
[obj-diam]     = -1                      ; object diameter, pixels (<0 == get from PARAMS)
[search-range] = 8                       ; translation search range, for AP SH (for alignment to final average)
[step-size]    = 2                       ; translation step size, for AP SH
d23 1
a23 1
; --------------- Input files ---------------
d26 1
a26 1
fr l
d28 4
d33 1
a33 2
[unaligned_image]Zerodegr/stk2-winrot@@*****  ; particle template
;;[unaligned_image]Zerodegr/Winrot/unt*****    ; particle template
d37 1
a37 1
[pair_dir]Zerodegr/Pairwise                ; toplevel output directory
d39 1
a39 1
[pair_doc][pair_dir]/pairdoc****           ; pair-document template
d41 1
a41 1
[depth_dir][pair_dir]/Depth                ; directory prefix for each depth of binary tree
d43 1
a43 1
[pair_align_doc][pair_dir]/alignpair       ; intermediate, reference-free alignment doc
d45 1
a45 1
[intermed_avg_stack]avgpair                ; intermediate-average stack, in DEPTH_DIR
d47 1
a47 2
[intermed_avg][intermed_avg_stack]@@****    ; intermediate-average template, in DEPTH_DIR
;;[intermed_avg]avgpair****    ; intermediate-average template, in DEPTH_DIR
d49 1
a49 1
[centered_avg]interim_avg****              ; intermediate-average, centered
d51 1
a51 1
[final_avg][pair_dir]/rfreeavg001          ; reference-free alignment average
d53 1
a53 1
[final_var][pair_dir]/rfreevar001          ; reference-free alignment average
d55 1
a55 3
[final_align_doc][pair_dir]/docpairalign   ; final, reference-based alignment doc
;;fr l
;;[aligned_dir]Zerodegr/Aligned              ; aligned-image directory
d57 1
a57 1
[aligned_stack][pair_dir]/cenu             ; aligned-image stack (w/o "@@")
d59 1
a59 4
[aligned_images][aligned_stack]@@*****      ; aligned-image template (check number of digits)
;;[aligned_images][aligned_dir]/cenu*****    ; aligned-image template
fr l
[master_aligned]Zerodegr/stk3-aligned      ; master aligned-image stack (w/o "@@")
d61 1
a61 1
; ------------ END BATCH HEADER ------------
d65 9
a73 7
[temp_unmirrored7]_71
fr l
[temp_aligned7]_72
fr l
[temp_unmirrored5]_51
fr l
[temp_aligned5]_52
d76 2
d80 3
d86 1
a86 1
ud 17,[idim-params]    ; window dimension
d89 22
a110 4
if([obj-diam].le.0) then
    ud 18,[obj-diam]   ; particle diameter
    [parameter_doc]
endif
d112 1
a112 1
ud e
d122 4
a125 4
[unaligned_image][first-particle]
fi [idim-first]
[unaligned_image][first-particle]
(2)   ; header position for NROW
d128 6
a133 6
if([idim-params].ne.[idim-first]) then
    ; compute ratio
    [ratio] = [idim-params]/[idim-first]

    ; if ratio is an integer, images are probably shrunk
    if([ratio].eq.int([ratio])) then
d135 1
a135 1
        [img-dim] = [idim-first]
d137 11
a147 2
        ; reduce object diameter
        [obj-diam] = [obj-diam]/[ratio]
d149 7
a155 7
        vm
        echo "WARNING:"
        vm
        echo "Image dimension from [parameter_doc], {***[idim-params]}, {*[ratio]} times that from [unaligned_image][first-particle]"
        vm
        echo "Reducing object diameter by a factor of {*[ratio]} also, to {***[obj-diam]}" ; echo
    ; if ratio is not an integer
d159 1
a159 1
        echo "ERROR"
d161 1
a161 1
        echo "Image dimension from [parameter_doc], {***[idim-params]}, different from [unaligned_image][first-particle], {***[idim-first]}"
d167 2
d170 11
a180 1
    [img-dim] = [idim-params]
a182 3
; calculate alignment radius
[align-radius] = ([obj-diam] - 1)/1.4   ; padding it a bit

d184 1
a184 1
[check-radius] = int([img-dim]/2) - [align-radius] - [search-range]
d189 1
a189 1
    echo "WARNING"
d191 1
a191 1
    echo "Tested alignment radius of {***[align-radius]} from specified object diameter of {***[obj-diam]} too big"
d194 1
a194 1
    [align-radius] = int([img-dim]/2) - [search-range] - 3
d198 1
a198 1
echo "Using outer alignment radius of {***[align-radius]} pixels" ; echo
a199 3
; get #particles
ud n [num-particles]
[selection_list]
d201 2
a202 3
[max-pairs]  = int(([num-particles]+1)/2)
[dummy]      = 0
[pair-depth] = 1
d204 20
a223 4
vm
echo "Preparing pairing docs"; date
vm
echo "if(! -d [pair_dir]) mkdir [pair_dir]"|csh
d225 4
a228 11
de
[pair_doc][pair-depth]
SD /   FIRST_PARTICLE SECOND_PARTICLE
[pair_doc][pair-depth]

;vm
;echo "Working on depth 001"

; loop through pairs
do lb1 [pair-key1] = 1,[max-pairs]
    [first-key] = [pair-key1]*2 - 1
a229 32
    ; get first-particle#
    ud ic [first-key],[first-particle]
    [selection_list]

    ; get second-particle# in pair
    [second-key] = [first-key] + 1

    ; if there are particles left, then read next one
    if([second-key].le.[num-particles]) then
        ud ic [second-key],[second-particle]
        [selection_list]

        ; save to pairing doc
        sd [pair-key1], [first-particle],[second-particle]
        [pair_doc][pair-depth]
    ; else if there is an unpaired particle, pair it with particle "0"
    else
        ; save to pairing doc
        sd [pair-key1], [first-particle],[dummy]
        [pair_doc][pair-depth]
    endif

    ; increment particle counter
    [first-key] = [second-key] + 1
lb1
; end pair-loop

; close docs
ud ice
[selection_list]
sd e
[pair_doc][pair-depth]
d231 3
a234 1
; ALIGNMENT
d236 1
a236 242
; use all processors
md
set mp
0

; loop through pair-depths
do lb4 [pair-depth] = 1,999
    ; get number of pairs
    ud n [old-pairs]
    [pair_doc][pair-depth]

    ; exit loop if there is a single pair
    if([old-pairs].eq.1) goto lb16

    [new-pairs]   = int(([old-pairs]+1)/2)
    [full-pairs]  = int([old-pairs]/2)
    [next-depth] = [pair-depth] + 1

;    vm
;    echo "Working on depth {***[next-depth]}"

    de
    [pair_doc][next-depth]
    SD /     FIRST_PAIR  SECOND_PAIR
    [pair_doc][next-depth]

    ; loop through pairs of pairs
    do lb6 [pair-key6] = 1,[full-pairs]
        [first-pair]  = 2*[pair-key6] - 1
        [second-pair] = 2*[pair-key6]

        ; get particle #s
        ud ic [first-pair],[first-particle]
        [selection_list]
        ud ic [second-pair],[second-particle]
        [selection_list]

        ; save to pair-of-pair doc
        sd [pair-key6], [first-pair],[second-pair]
        [pair_doc][next-depth]
    lb6
    ; exit pair-of-pair loop

    ; if there is an unpaired pair, pair it with zero
    if([new-pairs].ne.[full-pairs]) then
        ; get first-particle #
        ud ic [first-pair],[first-particle]
        [selection_list]

        sd [new-pairs], [old-pairs],[dummy]
        [pair_doc][next-depth]
    endif

    ud ice
    [selection_list]
    sd e
    [pair_doc][next-depth]
lb4
; end pair-depth loop

; jump here if there is a single pair
lb16

[last-depth] = [next-depth] - 1


vm
echo ; echo "Aligning particles pairwise"; date

de
[pair_align_doc]
SD /    PAIR_DEPTH   FIRST_PAIR   SECOND_PAIR    CCROT       IN_PLANE     X_SHIFT      Y_SHIFT       MIRROR
[pair_align_doc]

[pair-depth] = 1

; the alignment for the first pairing file is done 
; separately, because the input images are not yet 
; the intermediate images.

vm
echo "Depth=001"
vm
echo "if(! -d [depth_dir]{***[pair-depth]}) mkdir [depth_dir]{***[pair-depth]}"|csh

de
[depth_dir]{***[pair-depth]}/[intermed_avg_stack]@@

; loop through pairs
do lb7 [pair-key7] = 1,[max-pairs]
    ; get particle #s from pair doc
    ud ic [pair-key7], [first-particle],[second-particle]
    [pair_doc][pair-depth]

    ; if particle is paired then...
    if([second-particle].ne.0) then
        ; align ("reference" is first particle in pair)
        or sh [inplane-angle7],[xshift7],[yshift7],[mirror-flag7],[ccrot7]
        [unaligned_image][first-particle]  ; "reference"
        [search-range],[step-size]
        [inner-rad],[align-radius]
        [unaligned_image][second-particle]  ; image to be aligned

        ; if necessary, mirror after shift+rotate
        if([mirror-flag7].eq.1) then
            rt sq
            [unaligned_image][second-particle]
            [temp_unmirrored7]   ; OUTPUT
            [inplane-angle7]
            [xshift7],[yshift7]
 
            mr
            [temp_unmirrored7]  ; INPUT: rotated+shifted, unmirrored image
            [temp_aligned7]     ; OUTPUT
            Y                   ; mirror around y-axis
        else
            rt sq
            [unaligned_image][second-particle]
            [temp_aligned7]   ; OUTPUT
            [inplane-angle7]
            [xshift7],[yshift7]
        endif
 
        ; add pair together
        ad
        [temp_aligned7]
        [unaligned_image][first-particle]
        [depth_dir]{***[pair-depth]}/[intermed_avg][pair-key7]
        *  ; no more images to add

        ; save to alignment doc
        sd [pair-key7], [pair-depth],[first-particle],[second-particle],[ccrot7],[inplane-angle7],[xshift7],[yshift7],[mirror-flag7]
        [pair_align_doc]
    ; else if unpaired
    else
        ; copy
        cp
        [unaligned_image][first-particle]
        [depth_dir]{***[pair-depth]}/[intermed_avg][pair-key7]

        ; save zeroes to alignment doc
        sd [pair-key7], [pair-depth],[first-particle],[dummy],[dummy],[dummy],[dummy],[dummy],[dummy]
        [pair_align_doc]
    endif
lb7
; end pair-of-particles loop

; close docs
ud ice
[pair_doc][pair-depth]
sd e
[pair_align_doc]

; loop through pairing docs
do lb8 [pair-depth] = 1,[last-depth]
    [next-depth] = [pair-depth] + 1

    vm
    echo "Depth={***[next-depth]}"
    vm
    echo "if(! -d [depth_dir]{***[next-depth]}) mkdir [depth_dir]{***[next-depth]}"|csh
    
    de
    [depth_dir]{***[pair-depth]}/[intermed_avg]@@

    ; get number of pairs
    ud n [num-pairs]
    [pair_doc][next-depth]

    ; loop through pairs
    do lb5 [pair-key5] = 1,[num-pairs]
        ; get pair #s 
        ud ic [pair-key5], [first-pair],[second-pair]
        [pair_doc][next-depth]

        ; if pair is paired then...
        if([second-pair].ne.0) then
            ; align
            or sh [inplane-angle5],[xshift5],[yshift5],[mirror-flag5],[ccrot5]
            [depth_dir]{***[pair-depth]}/[intermed_avg][first-pair]  ; "reference"
            [search-range],[step-size]
            [inner-rad],[align-radius]
            [depth_dir]{***[pair-depth]}/[intermed_avg][second-pair]  ; image to be aligned
 
            ; if necessary, mirror after shift+rotate
            if([mirror-flag5].eq.1) then
                rt sq
                [depth_dir]{***[pair-depth]}/[intermed_avg][second-pair]
                [temp_unmirrored5]   ; OUTPUT
                [inplane-angle5]
                [xshift5],[yshift5]
 
                mr
                [temp_unmirrored5]  ; INPUT: rotated+shifted, unmirrored image
                [temp_aligned5]     ; OUTPUT
                Y                   ; mirror around y-axis
            else
                rt sq
                [depth_dir]{***[pair-depth]}/[intermed_avg][second-pair]
                [temp_aligned5]   ; OUTPUT
                [inplane-angle5]
                [xshift5],[yshift5]
            endif
 
            ; add pair together
            ad
            [temp_aligned5]  ; INPUT: aligned second pair
            [depth_dir]{***[pair-depth]}/[intermed_avg][first-pair]
            [depth_dir]{***[next-depth]}/[intermed_avg][pair-key5]
            *  ; no more images to add

            ; save to alignment doc
            sd [pair-key5], [next-depth],[first-pair],[second-pair],[ccrot5],[inplane-angle5],[xshift5],[yshift5],[mirror-flag5]
            [pair_align_doc]
        ; else if unpaired
        else
            ; copy first pair
            cp
            [depth_dir]{***[pair-depth]}/[intermed_avg][first-pair]
            [depth_dir]{***[next-depth]}/[intermed_avg][pair-key5]

            ; save zeroes to alignment doc
            sd [pair-key5], [next-depth],[first-pair],[dummy],[dummy],[dummy],[dummy],[dummy],[dummy]
            [pair_align_doc]
        endif
    lb5
    ; end pair-of-pair loop

    ; close docs    
    ud ice
    [pair_doc][pair-depth]
lb8
; end pairing-doc loop

sd e
[pair_align_doc]

;; center last intermediate average
;cg ph x21,x22,[xshift-cg],[yshift-cg]
;[depth_dir]{***[next-depth]}/[intermed_avg][one]

if([cg-option].eq.1) then
d238 2
a239 6
    echo "Centering average using CG PH"
    
    ; Search the center of gravity of the global average map AVSTX71
    cg ph X21,X22,[xshift-cg],[yshift-cg]
    [depth_dir]{***[next-depth]}/[intermed_avg][one]
elseif([cg-option].eq.2) then
d241 1
a241 6
    echo "Centering average by rotating 180 degrees and aligning"
    
    ; center by rotating by 180 degrees and self-alignment
    @@center1([xshift-cg],[yshift-cg])
    [depth_dir]{***[next-depth]}/[intermed_avg][one]
    [pair_dir]/[centered_avg][one]
d244 1
a244 5
    echo "Not centering average"
    
    ; no centering
    [xshift-cg] = 0   ; x-shift
    [yshift-cg] = 0   ; y-shift
d247 21
a267 4
sh
[depth_dir]{***[next-depth]}/[intermed_avg][one]
[pair_dir]/[centered_avg][one]
-[xshift-cg],-[yshift-cg]  ; x,y-shifts
d279 20
a298 20
[pair_dir]/[centered_avg]  ; INPUT: reference template
[one]                      ; reference image#
[search-range],[step-size]
[inner-rad],[align-radius]
*                          ; INPUT: reference angles
[unaligned_image]          ; INPUT: experimental-image template
[selection_list]           ; INPUT: selection doc
*                          ; INPUT: previous alignment doc
(0)                        ; no angular restriction
(1)                        ; check mirrored positions
[final_align_doc]          ; OUTPUT: alignment doc

;ap mq
;[pair_dir]/[centered_avg]   ; INPUT: reference template
;(1)                         ; reference-image#
;[search-range],[step-size]
;[inner-rad],[align-radius]
;[unaligned_image]           ; INPUT: experimental-image template
;[selection_list]            ; INPUT: selection doc
;[final_align_doc]           ; OUTPUT: alignment doc
a299 2
;vm
;echo "if(! -d [aligned_dir]) mkdir [aligned_dir]"|csh
a312 1
;    ud ic [part-key3], [mirror-flag3],x32,[inplane-angle3],[xshift3],[yshift3],[part-num]  ; for AP MQ
d319 1
a319 1
        [unaligned_image][part-num]
d330 1
a330 1
        [unaligned_image][part-num]
d348 3
d363 1
a363 1
en d
d365 7
a371 1
; Modified 2014-06-06
@


1.4
log
@added digit for more than 999 pairs of images
added centering options
writing images in stacks
making master copy of aligned stack
can override object diameter from PARAMS
@
text
@d467 1
a467 1
    @@center1(-xshift-cg],[yshift-cg])
d580 1
a580 1
; Modified 2014-03-25
@


1.3
log
@made default inner alignment radius 3 pixels
@
text
@d10 3
a12 1
[inner-rad]    = 3                       ; inner radius for alignment, pixels
d18 1
a18 1
[parameter_doc]params                       ; parameter doc file
d20 4
a23 3
[selection_list]listparticles               ; particle list
fr l
[unaligned_image]Zerodegr/Winrot/unt*****   ; particle template
d29 1
a29 1
[pair_doc][pair_dir]/pairdoc***            ; pair-document template
d35 4
a38 1
[intermed_avg]avgpair***                   ; intermediate-average template, in DEPTH_DIR
d40 1
a40 1
[centered_avg]interim_cent***              ; intermediate-average, centered, in DEPTH_DIR
d47 2
d50 1
a50 1
[aligned_dir]Zerodegr/Aligned              ; aligned-image directory
d52 4
a55 1
[aligned_images][aligned_dir]/cenu*****    ; aligned-image template
d57 1
a57 1
; ----------- END BATCH HEADER -----------
d77 6
a82 2
ud 18,[obj-diam]   ; particle diameter
[parameter_doc]
d299 3
d375 3
d451 3
d455 23
a477 6
vm
echo ; echo "Aligning to final average"; date

; center last intermediate average
cg ph x21,x22,[xshift-cg],[yshift-cg]
[depth_dir]{***[next-depth]}/[intermed_avg][one]
d481 1
a481 1
[depth_dir]{***[next-depth]}/[centered_avg][one]
d484 4
d494 2
a495 2
[depth_dir]{***[next-depth]}/[centered_avg]  ; INPUT: reference template
[one]               ; reference image#
d498 7
a504 7
*                   ; INPUT: reference angles
[unaligned_image]   ; INPUT: experimental-image template
[selection_list]    ; INPUT: selection doc
*                   ; INPUT: previous alignment doc
(0)                 ; no angular restriction
(1)                 ; check mirrored positions
[final_align_doc]   ; OUTPUT: alignment doc
d507 2
a508 2
;[depth_dir]{***[next-depth]}/[centered_avg]  ; INPUT: reference template
;(1)      ; reference-image#
d511 3
a513 3
;[unaligned_image]                            ; INPUT: experimental-image template
;[selection_list]                             ; INPUT: selection doc
;[final_align_doc]                            ; OUTPUT: alignment doc
d515 4
a518 2
vm
echo "if(! -d [aligned_dir]) mkdir [aligned_dir]"|csh
d562 5
d580 6
a585 2
; Modified 2014-02-04
;    2014-01-24 (trs) -- uses default inner radius of 3 pixels for alignment
@


1.2
log
@changed to named registers
changed inner alignment radius to 3 pixels
@
text
@d10 1
a10 1
[inner-rad]    = 5                       ; inner radius for alignment, pixels
d89 2
a90 2
    if([ratio].eq.int([ratio]) then
        ; use shrunked image-dimension
d97 1
a97 1
        echo "WARNING"
d196 8
d528 3
a530 1
; Modified 2013-05-06
@


1.1
log
@Initial revision
@
text
@d10 3
a12 4

x41 = 5                                  ; inner radius for alignment, pixels
x43 = 8                                  ; translation search range, for AP SH (for alignment to final average)
x44 = 2                                  ; translation step size, for AP SH
d46 13
a58 1
; ------------- END BATCH HEADER -------------
d63 2
a64 8
vm
echo "if(! -d [pair_dir]) mkdir [pair_dir]"|csh

vm
echo "Preparing pairing docs"; date

; get params
ud 17,x17   ; window dimension
d66 1
a66 1
ud 18,x42   ; particle diameter
d70 50
a119 2
; calculate particle-radius
x42=(x42-1)/1.4  ; padding it a bit
d122 1
a122 2
[check-radius] = int(x17/2) - x42 - x43
; x17==image-dimension, x42==outer-radius, x43==search-range
d125 9
a133 2
if([check-radius].lt.2) x42 = int(x17/2) - x43 - 3
; x17==image-dimension, x43==search-range
d136 1
a136 1
echo "Using outer alignment radius of {***x42} pixels" ; echo
d146 5
d160 2
a161 2
do lb1 x10=1,[max-pairs]
    [first-key] = x10*2 - 1
d176 1
a176 1
        sd x10,[first-particle],[second-particle]
d181 1
a181 1
        sd x10,[first-particle],[dummy]
d218 3
a220 3
    do lb6 x60=1,[full-pairs]
        [first-pair]  = 2*x60 - 1
        [second-pair] = 2*x60
d229 1
a229 1
        sd x60, [first-pair],[second-pair]
d277 1
a277 1
do lb7 x70=1,[max-pairs]
d279 1
a279 1
    ud ic x70, [first-particle],[second-particle]
d285 1
a285 1
        or sh x71,x72,x73,x74,x75
d287 2
a288 2
        x43,x44  ; translation search-range, step-size
        x41,x42  ; first, last ring
a289 2
        ; x71==in-plane angle, x72==x-shift, x73==y-shift
        ; x74==mirror-flag, x75==CCROT
d292 1
a292 1
        if(x74.eq.1) then
d295 3
a297 3
            _11      ; OUTPUT
            x71      ; in-plane angle
            x72,x73  ; x-,y-shifts
d300 3
a302 3
            _11  ; INPUT: rotated+shifted, unmirrored image
            _12  ; OUTPUT
            Y    ; mirror around y-axis
d306 3
a308 3
            _12      ; OUTPUT
            x71      ; in-plane angle
            x72,x73  ; x-,y-shifts
d313 1
a313 1
        _12
d315 1
a315 1
        [depth_dir]{***[pair-depth]}/[intermed_avg]x70
d319 1
a319 1
        sd x70,[pair-depth],[first-particle],[second-particle],x75,x71,x72,x73,x74
a320 1
        ; x75==CCROT, x71==in-plane angle, x72==x-shift, x73==y-shift, x74==mirror-flag
d326 1
a326 1
        [depth_dir]{***[pair-depth]}/[intermed_avg]x70
d329 1
a329 1
        sd x70,[pair-depth],[first-particle],[dummy],[dummy],[dummy],[dummy],[dummy],[dummy]
d355 1
a355 1
    do lb5 x50=1,[num-pairs]
d357 1
a357 1
        ud ic x50, [first-pair],[second-pair]
d363 1
a363 1
            or sh x51,x52,x53,x54,x55
d365 2
a366 2
            x43,x44  ; translation search-range, step-size
            x41,x42  ; first, last ring
a367 2
            ; x51==in-plane angle, x52==x-shift, x53==y-shift
            ; x54==mirror-flag, x55==CCROT
d370 1
a370 1
            if(x54.eq.1) then
d373 3
a375 3
                _51      ; OUTPUT
                x51      ; in-plane angle
                x52,x53  ; x-,y-shifts
d378 3
a380 3
                _51  ; INPUT: rotated+shifted, unmirrored image
                _52  ; OUTPUT
                Y    ; mirror around y-axis
d384 3
a386 3
                _52      ; OUTPUT
                x51      ; in-plane angle
                x52,x53  ; x-,y-shifts
d391 1
a391 1
            _52  ; INPUT: aligned second pair
d393 1
a393 1
            [depth_dir]{***[next-depth]}/[intermed_avg]x50
d397 1
a397 1
            sd x50,[next-depth],[first-pair],[second-pair],x55,x51,x52,x53,x54
a398 1
            ; x55==CCROT, x51==in-plane angle, x52==x-shift, x53==y-shift, x54==mirror-flag
d404 1
a404 1
            [depth_dir]{***[next-depth]}/[intermed_avg]x50
d407 1
a407 1
            sd x50,[next-depth],[first-pair],[dummy],[dummy],[dummy],[dummy],[dummy],[dummy]
d413 1
a413 1
    ; close docs	
a425 2
[one] = 1  ; dummy register

d427 1
a427 1
cg ph x21,x22,x12,x13
d433 1
a433 1
-x12,-x13  ; x,y-shifts
d442 3
a444 3
[one]               ; image#
x43,x44             ; translation range, step size
x41,x42             ; first, last ring
d456 2
a457 2
;x43,x44  ; translation range, step size
;x41,x42  ; first, last ring
d470 2
a471 2
do lb3 x30=1,[num-particles]
    ud ic,x30,x36
d475 2
a476 2
;    ud ic,x30,x31,x32,x33,x34,x35,x36  ; for AP MQ
    ud ic,x36,x81,x82,x83,x84,x85,x33,x34,x35,x89,x90,x91,x92,x93,x94,x31
a477 1
    ; x36==particle#, x33==in-plane angle, x34==x-shift, x35==y-shift, x31==mirror-flag
d480 1
a480 1
    if(x31.lt.0) then
d482 4
a485 4
        [unaligned_image]x36
        _31      ; OUTPUT
        x33      ; in-plane angle
        x34,x35  ; x-,y-shift
d488 3
a490 3
        _31  ; INPUT: rotated, shifted image
        [aligned_images]x36
        Y    ; mirror around y-axis
d493 4
a496 4
        [unaligned_image]x36
        [aligned_images]x36
        x33      ; in-plane angle
        x34,x35  ; x-,y-shift
d520 3
a522 2
; Modified 2012-10-04
;    TO DO: change to named registers
@
