head	1.3;
access;
symbols;
locks;
comment	@# @;


1.3
date	2015.08.31.14.48.21;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2014.06.06.09.44.47;	author tapu;	state Exp;
branches;
next	1.1;

1.1
date	2012.12.21.14.33.58;	author leith;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@; PARES DENDROGRAM TO DESIRED NUMBER OF CLASSES

; ------------- Parameters --------------

[class-type] = 1    ; classification method (1==Hierarchical, 2==Cluster)
[numClasses] = 27   ; desired number of classes
x36 = 2             ; decimation factor applied to input images
[numProcs]   = 0    ; number of CPUs to use (0==ALL)
x56 = 3             ; progress message printed every Nth class

; ---------------- Inputs ----------------
fr l
[parameter_doc]params                     ; parameter doc file
;;fr l
;;[class_dir]Zerodegr/Hierarchical          ; input/output directory
;;[class_dir]Zerodegr/Cluster               ; input/output directory
fr l
[clhc_dir]Zerodegr/Hierarchical           ; input directory if using hierarchical classification (see parameter above)
fr l
[cluster_dir]Zerodegr/Cluster             ; input directory if using Ward's clustering methods (see parameter above)
fr l
[dendrogram_doc][class_dir]/docdendro     ; particle-assignment doc
fr l
[particles]Zerodegr/stkfiltered@@*****     ; particle file-pattern
;;[particles]Zerodegr/Filtered/flt*****     ; particle file-pattern

; ---------------- Outputs ----------------
fr l
[threshold_doc][class_dir]/docthreshold   ; threshold doc, showing threshold-attempts vs. number of classes
fr l
[class_doc][class_dir]/docclass           ; class-membership doc prefix, for each class
fr l
[class_avg][class_dir]/classavg           ; class average prefix, for each class
fr l
[class_var][class_dir]/classvar           ; class variance prefix, for each class
fr l
[class_stats_doc][class_dir]/listclasses  ; class-size document

; ------------ END BATCH HEADER ------------

; set temporary filenames
fr l
[circular_mask_incore]_6
fr l
[class_doc_unsorted_incore]tmpdocclass_incore


; GENERATE CIRCULAR MASK

; get window dimension
ud 17,x65
[parameter_doc]
ud e

; divide by decimation-factor
x65=x65/x36

; mask radius
x32=(x65-1)/2

; make circular mask
mo
[circular_mask_incore]
x65,x65  ; dimensions
C        ; _C_ircle
x32      ; radius

; set input directory
if([class-type].le.1) then
    [class_dir] = [clhc_dir]
else
    [class_dir] = [cluster_dir]
endif

md
set mp
[numProcs]

; DETERMINE THRESHOLD THAT YIELDS APPOPRIATE NUMBER OF CLASSES
; (This uses a binary search.  If anyone knows a better way, let me know. --Tapu)

de
[threshold_doc]
SD /      VIEW#     TARGET_CLASS# ACTUAL_CLASS# THRESHOLD
[threshold_doc]

x35=0.5   ; initialize threshold
x33=0.25  ; initialize threshold-increment

vm
echo "Finding threshold"; date

; loop through threshold-attempts
do lb3 x30=1,25
    x31=x35  ; x35==candidate threshold, x31==actually-used threshold

    de
    tmpclasssize

    cl hd
    x31               ; threshold
    [dendrogram_doc]  ; INPUT: dendrogram doc
    tmpclasssize      ; OUTPUT (temporary): class-size doc

    ud n,x37
    tmpclasssize

    sd x30,x37,[numClasses],x31
    [threshold_doc]
    ; x37==current #classes, x31==current threshold

    if(x37.eq.[numClasses]) goto lb4    ; exit loop when at correct #classes
    if(x37.gt.[numClasses])x35=x35+x33  ; too many classes --> increase threshold
    if(x37.lt.[numClasses])x35=x35-x33  ; too few classes --> decrease threshold
    x33=x33/2                           ; halve search increment
lb3
; end threshold-loop

lb4  ; jump here after correct #classes

vm
echo "Target number of classes: {***[numClasses]}; actual number: {***x37}" ; echo

[numClasses] = x37  ; if loop can't find correct #classes, use last attempt

de
tmpclasssize

; generate class-lists
cl he
x31                    ; threshold
[dendrogram_doc]       ; INPUT: dendrogram doc
[class_doc]****_noccc  ; OUTPUT: class-list file-pattern


; GENERATE CLASS AVERAGES

vm
echo "Generating class averages"

; initialize maximum class-size
x68 = -1

; loop through classes
do lb2 x16=1,[numClasses]
    if (int(x16/x56).eq.x16/x56) then
        vm
        echo "Working on {***x16}th class out of {***[numClasses]}"
    endif

    ; calculate unlabeled average
    as r
    [particles]
    [class_doc]{****x16}_noccc  ; INPUT: class-list doc
    A                           ; _A_ll images
    [class_avg]{***x16}         ; OUTPUT: class average
    [class_var]{***x16}         ; OUTPUT: class variance

    ; get standard deviation of the variance (x44)
    fs m,x41,x42,x43,x44
    [class_var]{***x16}
    [circular_mask_incore]


    ; CALCULATE CCC OF PARTICLES AGAINST CLASS AVERAGE

    de
    [class_doc]{****x16}_unsort

    ; initialize CCC-sum
    x34 = 0

    ; get class size
    ud n,x69
    [class_doc]{****x16}_noccc

    ; update maximum
    if(x69.gt.x68) x68=x69

    ; initialize in-core doc file
    sd ic new
    [class_doc_unsorted_incore]
    (2,x69)  ; #columns, #keys

    ; loop through particles
    do lb6 x60=1,x69
        ; read particle# (x61)
        ud ic x60,x61
        [class_doc]{****x16}_noccc

        ; calculate CCC (x62)
        cc c,x62
        [particles]x61
        [class_avg]{***x16}
        [circular_mask_incore]

        ; update CCC-sum (x34)
        x34 = x34 + x62

        ; write to unsorted doc
        sd ic x60, x61,x62
        [class_doc_unsorted_incore]
    lb6
    ; end particle-loop

    ; clean up
    ud ice
    [class_doc]{****x16}_noccc
    de
    [class_doc]{****x16}_noccc
    sd ic copy
    [class_doc_unsorted_incore]
    [class_doc]{****x16}_unsort
    sd ice
    [class_doc_unsorted_incore]

    ; sort by CCC
    doc sort
    [class_doc]{****x16}_unsort
    [class_doc]{****x16}
    (2)  ; column for CCC
    Y    ; renumber?

    ; label and clean up
    SD /      PART_NUM    CCC_VS_AVG
    [class_doc]{****x16}
    sd e
    [class_doc]{****x16}
    de
    [class_doc]{****x16}_unsort

    ; average CCC-sum
    x34 = x34/x69
    ; x69==#particles

    ; write to doc file
    sd x16,x16,x34,x44,x69
    [class_stats_doc]_unsort
    ; x44=sdvar
lb2
; end class-loop

; sort class-list
doc sort
[class_stats_doc]_unsort
[class_stats_doc]
(2)  ; column for CCC
Y    ; renumber?

; label+close doc
SD /      CLASSNUM       CCC        VARIANCE_SD  NUMPARTS
[class_stats_doc]
sd e
[class_stats_doc]
de
[class_stats_doc]_unsort

vm m
echo ;
echo "Done" ;
echo "Maximum class size: {****x68}" ;
date
.

en d

; Modified 2015-08-13
;    TO DO: find threshold that gives exact number of desired classes
;    2015-07-16 (trs) -- number of CPUs now user-defined
;    2014-03-06 (trs) -- added parameter to choose between K-means and clustering directories
;    2014-03-06 (trs) -- reading images from stacks
;    2009-07-29 (trs) -- generates class list, adapted from kmeans.spi
;    2004-04-09 (trs) -- adapted from M.Radermacher's evalclacla2.two
@


1.2
log
@Reading images from stacks
Added parameter to choose between K-means and clustering directories
@
text
@d5 5
a9 4
[class-type] = 1  ; classification method (1==Hierarchical, 2==Cluster)
x20 = 27          ; desired number of classes
x36 = 2           ; decimation factor applied to input images
x56 = 3           ; progress message printed every Nth class
d24 1
a24 1
[particles]Zerodegr/stk4-filtered@@*****   ; particle file-pattern
d77 1
a77 1
0
d108 1
a108 1
    sd x30,x37,x20,x31
d110 1
a110 1
    ; x37==current #classes, x20==desired #classes, x31==current threshold
d112 4
a115 4
    if(x37.eq.x20) goto lb4    ; exit loop when at correct #classes
    if(x37.gt.x20)x35=x35+x33  ; too many classes --> increase threshold
    if(x37.lt.x20)x35=x35-x33  ; too few classes --> decrease threshold
    x33=x33/2                  ; halve search increment
d122 1
a122 1
echo "Target number of classes: {***x20}; actual number: {***x37}" ; echo
d124 1
a124 1
x20=x37  ; if loop can't find correct #classes, use last attempt
d145 1
a145 1
do lb2 x16=1,x20
d148 1
a148 1
        echo "Working on {***x16}th class out of {***x20}"
d267 1
a267 1
; Modified 2014-03-06
d269 1
@


1.1
log
@Initial revision
@
text
@d4 5
a8 3
x20 = 27   ; desired number of classes
x36 = 2    ; decimation factor applied to input images
x56 = 3    ; progress message printed every Nth class
d13 5
d19 1
a19 2
[class_dir]Zerodegr/Hierarchical          ; input/output directory
;[class_dir]Zerodegr/Cluster               ; input/output directory
d23 2
a24 1
[particles]Zerodegr/Filtered/flt*****     ; particle file-pattern
d67 6
d266 4
a269 1
; Modified 2009-07-29
@
