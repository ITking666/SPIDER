head	1.2;
access;
symbols;
locks;
comment	@# @;


1.2
date	2015.08.31.14.58.12;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2012.12.21.14.33.58;	author leith;	state Exp;
branches;
next	;


desc
@@


1.2
log
@updated
@
text
@; COMPARE PROJECTIONS OF TWO VOLUMES
; 
; Requires montageprj.rct

; --------------- Parameters ---------------

[exp-num]     = 2     ; volume number to align to reference
[ref-num]     = 3     ; volume number of reference
[num-solns]   = 2     ; number of alignment solutions to compare (starting from highest CC)

[dtheta]      = 15    ; angular increment for re-projections (15==83 projections)
[shift-range] = 8     ; alignment shift range, pixels
[shift-step]  = 2     ; alignment step size, pixels
[first-ring]  = 5     ; inner alignment radius, pixels

; ---------------- Inputs -----------------
fr l
[parameter_doc]params          ; parameter doc file
fr l
[vol_dir]Volumes               ; volume directory
fr l
[class_vol][vol_dir]/vflt***   ; class volume template

; ---------------- Outputs ----------------
fr l
[volalign_dir]Volumes/Alignment             ; volume-alignment directory
fr l
[class_list][volalign_dir]/list2merge       ; list of class volumes (appended)
;        CLASS_NUM    SOLUTIONNUM
fr l
[ref_angles][volalign_dir]/refangles        ; projection-angle doc file
fr l
[list_projs][volalign_dir]/projlist         ; list of projections
fr l
[prj_stack][volalign_dir]/prj_***           ; re-projection stack (for both reference and experimental volumes)
fr l
[align_doc][volalign_dir]/sortprjalign***   ; alignment docfile, sorted
fr l
[vol_align_doc][volalign_dir]/dalv***       ; volume alignment doc filename template
fr l
[proj_montage][volalign_dir]/mproj***       ; stack of compared reprojections
fr l
[aligned_vol][vol_dir]/vali***              ; aligned volume

; ------------ END BATCH HEADER ------------

; Temporary files
fr l
[temp_class_list]tmplistclasses
fr l
[temp_align_doc]tmpapsh
fr l
[temp_refvol_aligned]_11
fr l
[temp_expvol_aligned]_12
fr l
[temp_expvol_refined]_13
fr l
[temp_mask]_20
fr l
[temp_initial_reproj]tmp_init_projs{***[soln-num]}
fr l
[temp_refined_reproj]tmp_refi_projs{***[soln-num]}
fr l
[temp_comparison_stack]_21

; get image, particle dimensions
ud ic 17,[img-dim]
[parameter_doc]
ud ic 18, [part-diam]
[parameter_doc]
ud ice
[parameter_doc]

vm
echo "if(! -d [volalign_dir]) mkdir -p [volalign_dir]"|csh


; GENERATE RE-PROJECTIONS (Adapted from refproj.spi)

de 
[ref_angles]

; compute projection angles
VO EA [numang]
[dtheta]       ; Delta theta
0,0            ; Range of theta
0,0            ; Range of phi
[ref_angles]   ; Doc file of angles       (output)

[numang] = [numang] - 1
; (Last projection is redundant with (0,0,0).)

doc create
[list_projs]
(1)           ; column# to fill
(1-[numang])  ; values to enter

[prj-radius] = [img-dim]/2 - 1

; generate class list
doc create
[temp_class_list]
(1)           ; column# to fill
[ref-num],[exp-num]


; UPDATE CLASS LIST

[one]  = 1
sd [one], [ref-num],[one]
[class_list]
sd [one], [exp-num],[one]
[class_list]
sd e
[class_list]
doc ren
[class_list]
[class_list]

doc sort
[class_list]   ; INPUT
[class_list]   ; OUTPUT
(1)            ; column# to sort
Y,Y            ; renumber keys?, remove duplicates?

; label
SD /      CLASS_NUM    SOLUTIONNUM
[class_list]
sd e
[class_list]

ud n [num-classes]
[class_list]

vm
echo "Accumulated {***[num-classes]} classes total in [class_list].$DATEXT" ; echo

; loop through classes
do lb3 [class-key] = 1,2
    ud ic [class-key], [class-num]
    [temp_class_list]
    
    de
    [prj_stack][class-num]@@

    vm
    echo "Projecting [class_vol][class-num]"

    ; project volume
    PJ 3Q
    [class_vol][class-num]        ; Volume to be projected          (input)
    [prj-radius]                  ; Radius
    (1-[numang])                  ; List of file numbers
    [ref_angles]                  ; Proj. angles doc file           (input)
    [prj_stack][class-num]@@****   ; Template for projection stack   (output)
lb3
; end class-loop

; close doc
ud ice
[temp_class_list]
de
[temp_class_list]


; ALIGN RE-PROJECTIONS

vm
echo ; echo "Aligning re-projections" ; date

; calculate particle-radius
[align-radius] = ([part-diam] - 1)/1.4  
; (padding it a bit)

; check outer alignment radius
[check-radius] = int([img-dim]/2) - [align-radius] - [shift-range]

; fix outer alignment radius, if necessary
if([check-radius].lt.2) [align-radius] = int([img-dim]/2) - [shift-range] - 3

vm
echo "Using outer alignment radius of {***[align-radius]} pixels" ; echo

; align to reference projections
ap sh
[prj_stack][ref-num]@@****     ; reference-image template
[list_projs]                  ; list of reference images
[shift-range],[shift-step]    ; search range, step size
[first-ring],[align-radius]   ; first, last ring
[ref_angles]                  ; projection angles
[prj_stack][exp-num]@@****     ; experimental-image template
[list_projs]                  ; experimental image(s)
*                             ; initial angles
(0,0)                         ; search range, threshold angle
Y,N                           ; check mirrored positions?, shift/rotate input?
[temp_align_doc]              ; OUTPUT: alignment doc

; sort by CC
doc sort
[temp_align_doc]       ; INPUT
[align_doc][exp-num]   ; OUTPUT
(11)                   ; column# to sort: CCROT
Y,N                    ; renumber?, remove duplicates?

de
[temp_align_doc]
;                     1             2              3            4             5             6            7              8             9            10            11            12           13             14            15
SD /              ANGLE_PSI    ANGLE_THETA     ANGLE_PHI     REFPROJ       EXP_IMG  CUM.{INPLANE      X_SHIFT        Y_SHIFT}      NUMPROJ       ANGDIFF        CCROT        INPLANE      X_SHIFT        Y_SHIFT        MIRCC
[align_doc][exp-num]
sd e
[align_doc][exp-num]


; COMPARING ALIGNMENTS

; delete pre-existing files
de
[vol_align_doc][exp-num]
de
[vol_align_doc][ref-num]
de
[proj_montage][exp-num]@@

[prj-radius] = ([img-dim]/2) - 1
[vol-center] = ([img-dim]/2) + 1

; make mask for CC
mo 3
[temp_mask]
[img-dim],[img-dim],[img-dim]
SP        ; SPhere
N         ; coordinates from doc file?
(1)       ; density
[prj-radius]
[vol-center],[vol-center],[vol-center]
(0,0,0)   ; don't continue

[ydim]                = [img-dim] + 36  ; label is 36 pixels tall
[numComparisonSlices] = 2*([num-solns]+1)*[numang]

; make empty stack for labelled re-projections
ms
[temp_comparison_stack]@@
[img-dim],[ydim]  ; dimensions
[numComparisonSlices]

vm
echo "Aligning [class_vol][exp-num] to [class_vol][ref-num]"

; get #projections
ud n [num-proj]
[align_doc][exp-num]

; loop through solutions
do lb1 [soln-num] = 1,[num-solns]
    ; alignment doc assumed to be sorted from lowest to highest, so count from end
    [key] = [num-proj] - [soln-num] + 1

    ; read alignment parameters
    ud ic [key], x81,x82,x83,[ref-proj],[exp-proj],[inplane],x87,x88,x89,x90,x91,x92,x93,x94,[mirror-flag]
    [align_doc][exp-num]

    ; get reference angles
    ud ic [ref-proj], [ref-psi],[ref-theta],[ref-phi]
    [ref_angles]
    ; (May differ from angles in ALIGN_DOC if mirroring was required.)

    ; get experimental angles
    ud ic [exp-proj], [exp-psi],[exp-theta],[exp-phi]
    [ref_angles]

    if ([mirror-flag].le.0) then
        ; combine rotation with mirror (180-degree rotation around y)
        sa 3 [mir-phi],[mir-theta],[mir-psi],[xsh],[ysh],[zsh]
        [exp-phi],[exp-theta],[inplane]
        (0,0,0)     ; x,y,z-shifts
        (0,180,0)   ; 2nd rotation
        (0,0,0)     ; x,y,z-shifts

        ; combine angles to get reference's frame of reference
        sa 3 [ali-phi],[ali-theta],[ali-psi],[xsh],[ysh],[zsh]
        [mir-phi],[mir-theta],[mir-psi]      ; 1st set of angles
        (0,0,0)                              ; x,y,z-shifts
        -[ref-psi],-[ref-theta],-[ref-phi]   ; 2nd set of angles
        (0,0,0)                              ; x,y,z-shifts

        ; rotate experimental volume
        rt 3d
        [class_vol][exp-num]
        [temp_expvol_aligned]   ; OUTPUT
        [ali-phi],[ali-theta],[ali-psi]

        vm
        echo "Solution #{*[soln-num]}, initial alignment: ({%f7.2%[mir-phi]},{%f7.2%[mir-theta]},{%f7.2%[mir-psi]}) at reference projection #{***[ref-proj]}"
        
        ; refine alignments
        or 3q [or3q-phi],[or3q-theta],[or3q-psi],[or3q-cc]
        [class_vol][ref-num]   ; INPUT: reference
        [class_vol][exp-num]   ; INPUT: experimental volume
        [prj-radius]
        [ali-phi],[ali-theta]
        [ali-psi]
        
        ; rotate experimental volume
        rt 3d
        [class_vol][exp-num]
        [temp_expvol_refined]   ; OUTPUT
        [or3q-phi],[or3q-theta],[or3q-psi]

        vm
        echo "Solution #{*[soln-num]}, refined alignment: ({%f7.2%[or3q-phi]},{%f7.2%[or3q-theta]},{%f7.2%[or3q-psi]})" ; echo
    ; if mirror not required
    else
        ; combine angles to get reference's frame of reference
        sa 3 [ali-phi],[ali-theta],[ali-psi],[xsh],[ysh],[zsh]
        [exp-phi],[exp-theta],[inplane]      ; 1st set of angles
        (0,0,0)                              ; x,y,z-shifts
        -[ref-psi],-[ref-theta],-[ref-phi]   ; 2nd set of angles
        (0,0,0)                              ; x,y,z-shifts

        ; rotate experimental volume
        rt 3d
        [class_vol][exp-num]
        [temp_expvol_aligned]   ; OUTPUT
        [ali-phi],[ali-theta],[ali-psi]

        vm
        echo "Solution #{*[soln-num]}, initial alignment: ({%f7.2%[ali-phi]},{%f7.2%[ali-theta]},{%f7.2%[ali-psi]}) at reference projection #{***[ref-proj]}"
        
        ; refine alignments
        or 3q [or3q-phi],[or3q-theta],[or3q-psi],[or3q-cc]
        [class_vol][ref-num]   ; INPUT: reference
        [class_vol][exp-num]   ; INPUT: experimental volume
        [prj-radius]
        [ali-phi],[ali-theta]
        [ali-psi]
        
        ; rotate experimental volume
        rt 3d
        [class_vol][exp-num]
        [temp_expvol_refined]   ; OUTPUT
        [or3q-phi],[or3q-theta],[or3q-psi]

        vm
        echo "Solution #{*[soln-num]}, refined alignment: ({%f7.2%[or3q-phi]},{%f7.2%[or3q-theta]},{%f7.2%[or3q-psi]})" ; echo
    endif

    ; compute CCCs
    cc c [initial-cc]
    [class_vol][ref-num]
    [temp_expvol_aligned]
    [temp_mask]
    
    cc c [refined-cc]
    [class_vol][ref-num]
    [temp_expvol_refined]
    [temp_mask]
    ; (Output from OR 3Q isn't exactly comparable.)
    
    
    ; WRITE TO ALIGNMENT DOC
    
    sd [soln-num], [ref-proj],[ali-phi],[ali-theta],[ali-psi],[initial-cc],[or3q-phi],[or3q-theta],[or3q-psi],[refined-cc]
    [vol_align_doc][exp-num]
    
    de
    [temp_initial_reproj]@@
    de
    [temp_refined_reproj]@@

    ; generate projections of aligned volumes
    PJ 3Q
    [temp_expvol_aligned]
    [prj-radius]       ; Radius
    [list_projs]       ; List of file numbers
    [ref_angles]       ; Proj. angles doc file           (input)
    [temp_initial_reproj]@@****

    PJ 3Q
    [temp_expvol_refined]
    [prj-radius]       ; Radius
    [list_projs]       ; List of file numbers
    [ref_angles]       ; Proj. angles doc file           (input)
    [temp_refined_reproj]@@****
    
    ; loop through projections
    do lb2 [prj-num] = 1,[num-proj]
        @@montageprj
        [prj-num]                                ; PARAMETER: projection#
        [soln-num]                               ; PARAMETER: solution#
        [num-solns]                              ; PARAMETER: #solutions
        [prj_stack][ref-num]                     ; INPUT: reference-projections
        [temp_initial_reproj]                    ; INPUT: initial aligned projections
        [temp_refined_reproj]                    ; INPUT: refined aligned projections
        [temp_comparison_stack]                  ; INPUT/OUTPUT: re-projection stack
    lb2
    ; end projection-loop
    
    ; if best solution, write volume to disk
    if([soln-num].eq.1) then
        cp
        [temp_expvol_refined]
        [aligned_vol][exp-num]
        
        vm
        echo "Wrote refined volume [aligned_vol][exp-num].$DATEXT" ; echo
        
        ; write dummy file for reference
        [zero] = 0
        sd [soln-num], [one],[zero],[zero],[zero],[one],[zero],[zero],[zero],[one]
        [vol_align_doc][ref-num]
    endif
lb1
; end solution-loop

; close docs
ud ice
[align_doc][exp-num]
ud ice
[ref_angles]
SD /SOLN   REFPROJ     INITIAL_PHI  INITIAL_THETA  INITIAL_PSI   INITIAL_CC     REFINED_PHI  REFINED_THETA  REFINED_PSI   REFINED_CC
[vol_align_doc][exp-num]
sd e
[vol_align_doc][exp-num]
SD /SOLN   REFPROJ     INITIAL_PHI  INITIAL_THETA  INITIAL_PSI   INITIAL_CC     REFINED_PHI  REFINED_THETA  REFINED_PSI   REFINED_CC
[vol_align_doc][ref-num]
sd e
[vol_align_doc][ref-num]


; CREATE MONTAGE OF PROJECTIONS

vm
echo "Generating montages of re-projections" ; date ; echo

de
[proj_montage][exp-num]@@

; loop through projections
do lb5 [prj-num] = 1,[num-proj]
    [firstSlice] = ([prj-num]-1)*([num-solns]+1)*2 + 1
    [firstSlice]
    
    [lastSlice]  = ([prj-num])*([num-solns]+1)*2
    [lastSlice]
    
    ; create montage
    mn s
    [temp_comparison_stack]@@****             ; INPUT
    [firstSlice]-[lastSlice]                 ; range of images
    (2,1)                                    ; images/row, margin width
    (0,5)                                    ; margin value
    [proj_montage][exp-num]@@{****[prj-num]}  ; OUTPUT
lb5
; end projection-loop


; CLEAN UP

do lb4 [soln-num] = 1,[num-solns]
    de
    [temp_initial_reproj]@@
    de
    [temp_refined_reproj]@@
lb4

en d

; Modified 2015-03-17
;    TO DO: incorporate shifts in volume alignment
;    2015-03-17 (trs & qw) -- bug fix: in output montage, wrote the same solution's re-projections
@


1.1
log
@Initial revision
@
text
@d7 2
a8 2
[exp-num]     = 3     ; volume number to align to reference
[ref-num]     = 4     ; volume number of reference
a15 3
;;[part-diam]   = 75    ; particle dimension, pixels
;;[img-dim]     = 100   ; image dimension, pixels

d53 1
a53 1
[temp_refvol_aligned]_11   ; WAS [volalign_dir]/tmprefaligned{***[ref-num]}
d55 1
a55 1
[temp_expvol_aligned]_12   ; WAS [volalign_dir]/tmpexpaligned{***[exp-num]}
d57 1
a57 1
[temp_expvol_refined]_13   ; WAS [volalign_dir]/tmpexprefined{***[exp-num]}
d64 2
d103 1
a103 1
[temp_class_list]   ; WAS [class_list]
d140 1
a140 1
do lb3 [class-key] = 1,2   ; WAS [num-classes]
d142 1
a142 1
    [temp_class_list]   ; WAS [class_list]
d162 1
a162 1
[temp_class_list]   ; WAS [class_list]
d217 1
d222 2
d239 9
a268 9
    ;; rotate reference
    ;rt 3d
    ;[class_vol][ref-num]
    ;[temp_refvol_aligned]   ; OUTPUT
    ;[ref-phi],[ref-theta],[ref-psi]
    ;
    ;vm
    ;echo "Rotating [class_vol][ref-num] by ({%f7.2%[ref-phi]},{%f7.2%[ref-theta]},{%f7.2%[ref-psi]})"

a280 6
;        ; rotate experimental volume (to best projection's frame of reference)
;        rt 3d
;        [class_vol][exp-num]
;        [temp_expvol_aligned]   ; OUTPUT
;        [mir-phi],[mir-theta],[mir-psi]

a314 6
;        ; rotate experimental volume (to best projection's frame of reference)
;        rt 3d
;        [class_vol][exp-num]
;        [temp_expvol_aligned]   ; OUTPUT
;        [exp-phi],[exp-theta],[inplane]

a363 6
;    ud n [num-alignments]
;    [vol_align_doc]
;    
;    [next-alignment] = [num-alignments] + 1
;    
;    sd [next-alignment], [exp-num], [ref-num],[ali-phi],[ali-theta],[ali-psi],[initial-cc],[or3q-phi],[or3q-theta],[or3q-psi],[refined-cc]
d387 14
a400 1
    ; if best solution, write to disk
d441 15
a455 9
do lb2 [prj-num] = 1,[num-proj]
    @@montageprj
    [prj-num]                                ; PARAMETER: projection#
    [num-solns]                              ; PARAMETER: #solutions
    [prj_stack][ref-num]                     ; INPUT: reference-projections
    [temp_initial_reproj]                    ; INPUT: initial aligned projections
    [temp_refined_reproj]                    ; INPUT: refined aligned projections
    [proj_montage][exp-num]@@{***[prj-num]}   ; OUTPUT: compared reprojections
lb2
d470 3
a472 3
; Modified 2012-12-18
;     TO DO: incorporate shifts in volume alignment

@
