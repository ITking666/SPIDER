; PERFORMS MULTI-REFERENCE ALIGNMENT
;
; NOTE: Requires backup.rct, center1.rct, apsh.rct

; --------------------------------- Parameters ---------------------------------
[multirefIterNum]  = -1    ; iteration of multireference alignment to use as input (0 == initial classes, <0 == last)
[cgOption]         = 2     ; center-of-gravity option (0==None, 1==CG PH, 2=RT180)
[reffreeYN]        = 0     ; perform additional reference-free alignment within each class? (0==None, 1==pairwise, 2==AP SR)
[verified-yn]      = 0     ; use individually verified particles? (0==NO, 1==YES (follows combinegoodclasses.rct))
[lastRing]         = -1    ; outer radius (<0 == automatic)
[firstRing]        = 1     ; inner radius for orientation alignment, pixels
[searchRange]      = 8     ; maximum translational shift, pixels
[stepSize]         = 2     ; translational-search step size
[mirror-option]    = 0     ; search mirrored positions in AP SH? (0==NO)
[numProcs]         = 0     ; number of CPUs to use (0 == ALL)

; ----------------------------------- Inputs -----------------------------------
fr l
[parameter_doc]params                                                     ; needed if outer alignment ring set to auto
fr l
[untilted_dir]Zerodegr                                                    ; input/output directory for untilted-specimen images
fr l
[unaligned_images][untilted_dir]/stk2-winrot@*****                        ; unaligned particle template
fr l
[multiref_tracking_doc][untilted_dir]/docmultiref                         ; (optional) doc file tracking iterations of multireference alignment 
;                                                                         ; (will be created if non-existent)

; directory containing previous classes (will set [old_class_dir])
fr l
[initial_class_dir][untilted_dir]/Tree                                    ; directory from reference-free alignment ([multirefIterNum]: 0)
fr l
[old_multiref_dir][untilted_dir]/Multiref{*[prevIterNum]}                 ; directory for previous iteration's files

; list of good classes (will set [good_class_list])
fr l
[toplevel_good_classes][old_class_dir]/goodclasses                        ; list of toplevel references (if all from one directory, generated if not present)
fr l
[old_ref_views][old_class_dir]/listviews                                  ; (optional) list of views, used if toplevel references not found
fr l
[byview_good_classes][old_class_dir]/View***/goodclasses                  ; (optional) list of references in View*** subdirectories

; single list of classes or classes for each view (will set [class_doc])  
fr l
[preverified_class_parts][old_class_dir]/docclass{***[class-num]}         ; class-membership list (initial classes)
fr l
[verifiedparts_per_view][old_class_dir]/goodsel{***[class-num]}           ; class-membership list (after verification, for each view)

; pre-aligned images (will set [old_aligned_images])
fr l
[initial_aligned_images][untilted_dir]/Pairwise/stkaligned@*****          ; aligned-images (for OPTION: reference-free inputs ([multirefIterNum]: 0))
fr l    
[master_aligned_images][untilted_dir]/stk3-aligned@*****                  ; aligned-images (for OPTION: most recent alignment ([multirefIterNum]: -1))
fr l
[iter_aligned_images][old_class_dir]/stkcenu@*****                        ; aligned-images (for OPTION: specific iteration's input)

; list of particles to align (will set [selection_list])
fr l
[preverified_particles]listparticles                                      ; particle list (before verification)
fr l
[verified_list][old_class_dir]/combinedgood                               ; particle list (OPTIONAL, after verification)

; -------------------------------- Outputs -------------------------------
fr l
[next_multiref_dir][untilted_dir]/Multiref{*[nextIterNum]}   ; alignment directory
fr l
[multiref_dir_link]Multiref-CURRENT                          ; soft link to multi-reference alignment directory
;                                                            ; (so that you dont need to increment directory number)
fr l
[new_ref_views][next_multiref_dir]/listviews                 ; reference-view list
fr l
[reference_stack][next_multiref_dir]/stkref                  ; reference stack (w/o "@")
fr l
[alignment_doc][next_multiref_dir]/docalign                  ; alignment doc file
fr l
[new_aligned_stack][next_multiref_dir]/stkcenu               ; new aligned image stack (w/o "@")
fr l
[master_aligned][untilted_dir]/stk3-aligned                  ; master aligned-image stack (w/o "@")
fr l
[how_many][next_multiref_dir]/how_many                       ; particles-per-view doc file
FR L
[view_dir][next_multiref_dir]/View{***[viewNum]}             ; subdirectory for optional reference-free alignment
FR L
[reffree_stack][next_multiref_dir]/stkfree                   ; optional reference-free average stack (w/o "@")
fr l
[view_select][next_multiref_dir]/selview***                  ; selection file for each view
;        PART_NUM      CC_ROT     MIRRORFLAG
fr l
[sorted_select][next_multiref_dir]/sortsel***                ; sorted selection file
fr l
[viewavg_stack][next_multiref_dir]/stkavgview                ; view-average stack (w/o "@")
fr l
[viewvar_stack][next_multiref_dir]/stkvarview                ; view-variance stack (w/o "@")

; ------------------------------ END BATCH HEADER ------------------------------

; Change if not enough digits allocated
fr l
[centered_refs][reference_stack]@***            ; reference images (modify if >=1000 references)
fr l
[new_aligned_images][new_aligned_stack]@*****   ; new aligned-image template (modify if >=100,000 particles)
FR L
[reffree_slice][reffree_stack]@***              ; reference-free average image-template (modify if >=1000 references)
; (also modify label [view_select] and [sorted_select] if >=1000 references)

; Temporary files
FR L
[temp_uncentered_avg]_11
FR L
[temp_uncentered_var]_12
FR L
[temp_centered_avg]_13
FR L
[temp_apsr_avg]tmpavgapsr***
FR L
[temp_apsr_doc]tmpdocapsr***

md
set mp
[numProcs]

; get image-dimension
ud ic 17,[idim-params]
[parameter_doc]

; if outer radius automatic, get particle diameter
if([lastRing].le.0) then
    ud ic 18,[particle-diam]
    [parameter_doc]

    [lastRing] = ([particle-diam] - 1)/1.4
endif

; CHECK IF ITERATION-TRACKER EXISTS

iq fi [tracker-exists]
[multiref_tracking_doc]

; if tracker does exist
if([tracker-exists].eq.1) then
    ; look for last iteration number
    ud n [lastIterKey]
    [multiref_tracking_doc]
    
    [lastIterKey]

; if tracker does not exist
else
    [lastIterKey] = 0
endif

; increment iteration-key
[nextIterKey] = [lastIterKey] + 1


; CHECK IF ITERATION# IS SPECIFIED

; if iteration# specified to be zero, then start from initial classes
if ([multirefIterNum].eq.0) then
    ; use initial classification
    [nextIterNum]        = 1
    [old_class_dir]      = [initial_class_dir]
    [old_aligned_images] = [initial_aligned_images]

; if iteration# specified and not initial, then use that iteration
elseif ([multirefIterNum].gt.0) then
    [old_class_dir]      = [old_multiref_dir]
    [old_aligned_images] = [iter_aligned_images]
    
    [prevIterNum] = [multirefIterNum]
    
    ; increment key & iteration#
    [nextIterNum] = [multirefIterNum] + 1

; if iteration# not specified, then use the last one
else
    [old_aligned_images] = [master_aligned_images]
    
    ; if tracker exists
    if([tracker-exists].eq.1) then
        ; if tracker is non-empty
        if([lastIterKey].ge.1) then
            ; get iteration number
            ud [lastIterKey], [prevIterNum]
            [multiref_tracking_doc]
            ud e  ; close doc
            
            ; increment key & iteration#
            [nextIterNum]   = [prevIterNum] + 1
            [old_class_dir] = [old_multiref_dir]
        endif
    endif
        
    ; if iteration-track doesn't exist OR last key was zero, delete doc file and start over
    IF ([lastIterKey]*[tracker-exists] .EQ. 0) THEN
        vm
        echo "Multiref tracking doc empty, starting with iteration #1" ; echo
        
        de
        [multiref_tracking_doc]
        
        [nextIterNum]        = 1
        [old_class_dir]      = [initial_class_dir]
        [old_aligned_images] = [master_aligned_images]
    endif
endif

vm
echo "Input class docs assumed to be in toplevel of [old_class_dir]" ; echo


; CHECK WHICH PARTICLE LIST TO USE, i.e., before or after verification

; before verification
if([verified-yn] .lt. 1) then
    [selection_list]  = [preverified_particles]
    [class_doc]       = [preverified_class_parts]
    
; after verification
else
    [class_doc]       = [verifiedparts_per_view]

    ; if input iteration-specified
    if([multirefIterNum].gt.0) then
        [iter] = [multirefIterNum]

        ; define location of selection list
        fr l
        [selection_list][verified_list]
    
    ; if input iteration not specified
    else
        ; get iteration number
        ud [lastIterKey], [iter]
        [multiref_tracking_doc]
        ud e  ; close doc
        
        ; define location of selection list
        fr l
        [selection_list][verified_list]
    endif
endif

vm
echo "Using particles listed in [selection_list].$DATEXT" ; echo


; CHECK WHETHER DOWNSAMPLED

[one] = 1  ; dummy register

; get first-particle#
ud ic [one],[first-particle]
[selection_list]

; get image-dimension from first particle
fs
[unaligned_images][first-particle]
fi [idim-first]
[unaligned_images][first-particle]
(2)   ; header position for NROW

; compare image-dimensions from params and header, make sure not downsampled
if([idim-params].ne.[idim-first]) then
    ; compute ratio
    [ratio] = [idim-params]/[idim-first]

    ; if ratio is an integer, images are probably shrunk
    if([ratio].eq.int([ratio])) then
        ; use shrunken image-dimension
        [imgDim] = [idim-first]

        ; reduce object diameter
        [lastRing] = [lastRing]/[ratio]

        vm
        echo "WARNING:"
        vm
        echo "Image dimension from [parameter_doc], {***[idim-params]}, {*[ratio]} times that from [unaligned_images][first-particle]"
        vm
        echo "Reducing object diameter by a factor of {*[ratio]} also, to {***[lastRing]}" ; echo
    
    ; if ratio is not an integer, then I don't know what to do
    else
        vm
        echo "ERROR"
        vm
        echo "Image dimension from [parameter_doc], {***[idim-params]}, different from [unaligned_images][first-particle], {***[idim-first]}"
        vm
        echo "Fix and re-start"

        en
    endif
else
    [imgDim] = [idim-params]
endif


; check outer alignment radius
[check-radius] = int([imgDim]/2) - [lastRing] - [searchRange]

; fix outer alignment radius, if necessary
if([check-radius].lt.2) then
    vm
    echo "WARNING"
    vm
    echo "Tested alignment radius of {***[lastRing]} too big"
    
    ; re-set alignment radius
    [lastRing] = int([imgDim]/2) - [searchRange] - 3
endif

vm
echo "Using outer alignment radius of {***[lastRing]} pixels" ; echo

ud ice
[parameter_doc]

; initialize reference-counter
[refCounter] = 0

[num-views] = 1
[zero] = 0

    
; PREPARE OUTPUT DIRECTORY

vm
echo "Working on multireference iteration #{*[nextIterNum]}" ; echo
vm
echo "if(! -d [next_multiref_dir]) mkdir -v [next_multiref_dir]"|csh

de
[reference_stack]@


; GENERATE REFERENCES

if ([multirefIterNum] .gt. 0) then
    vm
    echo "Generating references from specific iteration [old_aligned_images]"
else
    vm
    echo "Generating references from master aligned images [old_aligned_images]"
endif

VM
date

de
[new_ref_views]


; GENERATE REFERENCE-LIST

; Look for toplevel good-class list
IQ FI [toplevelGoodClassesYN]
[toplevel_good_classes]

IF ([toplevelGoodClassesYN] .EQ. 1) THEN
    UD N [numGoodClasses]
    [toplevel_good_classes]
ENDIF

IF ([toplevelGoodClassesYN]*[numGoodClasses] .GE. 1) THEN
    vm
    echo ; echo "List of references found in toplevel [old_class_dir]"

; Will try to generate from by-view good-classes
ELSE
    DOC COMBINE
    [byview_good_classes]
    [old_ref_views]
    [toplevel_good_classes]

    vm
    echo ; echo "List of references generated in toplevel [old_class_dir] from combined views"
ENDIF

[good_class_list] = [toplevel_good_classes]

; get #references
ud n [numRefs]
[good_class_list]

IF ([numRefs] .GT. 999) THEN
    VM
    echo "WARNING:" ; echo "Increase number of digits allocated for file labels"
ENDIF

VM
echo

; loop through references
do lb1 [refKey] = 1,[numRefs]
    ; get class#
    ud ic [refKey],[class-num]
    [good_class_list]

    ; get #particles (check for empty classes)
    ud n [NumParts]
    [class_doc]
    
    if ([NumParts] .eq. 0) then
        vm
        echo "Skipping  (empty)   [class_doc]"
    else
        ; increment reference-counter
        [refCounter] = [refCounter] + 1

        ; generate average
        as r
        [old_aligned_images]
        [class_doc]
        A                      ; _A_ll images
        [temp_uncentered_avg]  ; OUTPUT: class-average
        [temp_uncentered_var]  ; OUTPUT: class-variance (not saved)

        if([cgOption].eq.1) then
            if([refCounter].eq.1) then
                vm
                echo "Centering references using CG PH"
            endif
            
            ; center reference
            cg ph x21,x22,[xshift],[yshift]
            [temp_uncentered_avg]  ; INPUT: unshifted class-average

            ; shift
            sh
            [temp_uncentered_avg]  ; INPUT: unshifted class-average
            [centered_refs][refCounter]
            -[xshift],-[yshift]
        elseif([cgOption].eq.2) then
            if([refCounter].eq.1) then
                vm
                echo "Centering average by rotating 180 degrees and aligning"
            endif
            
            ; center by rotating by 180 degrees and self-alignment
            @center1(x21,x22)
            [temp_uncentered_avg]  ; INPUT: uncentered class-average
            [temp_centered_avg]    ; OUTPUT
            
            CP
            [temp_centered_avg]
            [centered_refs][refCounter]
        else
            if([refCounter].eq.1) then
                vm
                echo "Not centering references"
            endif
            
            CP
            [temp_uncentered_avg]  ; INPUT: uncentered class-average
            [centered_refs][refCounter]
        endif

        vm
        echo "Reference #{***[refCounter]} from [class_doc]"
    endif
    
    ; write to doc
    if ([NumParts] .gt. 0) then
        sd [refCounter], [refCounter],[zero],[class-num]
        [new_ref_views]
    endif
lb1
; end reference-loop

; close doc
ud ice
[good_class_list]

; close doc
SD /       REFNUM      VIEW_NUM     CLASSNUM
[new_ref_views]
sd e
[new_ref_views]

; create softlink to fixed directory name so that SPIRE can more easily monitor centering of references
vm
cd [untilted_dir] && rm -f [multiref_dir_link] && ln -sv [next_multiref_dir] [multiref_dir_link] ; echo

vm
echo ; echo "Running multireference-alignment using {***[refCounter]} references"

; if alignment doc exists, output directory might mistakenly be same as input directory
iq fi [align-exists]
[alignment_doc]

if([align-exists].eq.1) then
    vm
    echo "WARNING: [alignment_doc] exists, backing up..."

    @backup
    [alignment_doc]
endif

; PERFORM MULTI-REFERENCE ALIGNMENT, APPLY PARAMETERS, AND AVERAGE IMAGES
@apsh
[mirror-option]        ; PARAMETER
[searchRange]          ; PARAMETER
[stepSize]             ; PARAMETER
[firstRing]            ; PARAMETER
[lastRing]             ; PARAMETER
[centered_refs]        ; INPUT
[unaligned_images]     ; INPUT
[selection_list]       ; INPUT
[alignment_doc]        ; OUTPUT
[new_aligned_stack]    ; OUTPUT
[master_aligned]       ; OUTPUT
[view_select]          ; OUTPUT
[sorted_select]        ; OUTPUT
[how_many]             ; OUTPUT
[viewavg_stack]        ; OUTPUT
[viewvar_stack]        ; OUTPUT


; PERFORM OPTIONAL REFERENCE-FREE ALIGNMENT WITHIN EACH CLASS (VIEW)

IF ([reffreeYN] .EQ. 1) THEN
    DE
    [reffree_stack]@
    
    ; Loop through views
    DO LB51 [viewNum] = 1,[numRefs]
        VM
        echo "if(! -d [view_dir]) mkdir [view_dir]"|csh
        VM
        echo "Performing pairwise reference-free alignment on view #{%i0%[viewNum]}"

        GLOBAL [viewNum] = [viewNum]

        ; Perform pairwise alignment
        @p_pairwise
        [firstRing]                ; PARAMETER: inner radius for alignment, pixels
        [lastRing]                 ; PARAMETER: outer alignment radius, pixels
        [searchRange]              ; PARAMETER: translation search range, pixels
        [stepSize]                 ; PARAMETER: translation step size
        (1)                        ; PARAMETER: allow rotation?
        (1)                        ; PARAMETER: save outputs?
        (0)                        ; PARAMETER: verbosity level
        [view_select][viewNum]     ; INPUT: particle list
        [new_aligned_images]       ; INPUT: particle template
        [view_dir]                 ; OUTPUT: toplevel output directory
        [reffree_slice][viewNum]   ; OUTPUT: reference-free average
    LB51
    ; end view-loop

; run reference-free alignment using AP SR
ELSEIF ([reffreeYN] .EQ. 2) THEN
    DE
    [reffree_stack]@
    
    ; Loop through views
    DO LB52 [viewNum] = 1,[numRefs]
        VM
        echo "if(! -d [view_dir]) mkdir [view_dir]"|csh
        VM
        echo "Performing reference-free alignment using AP SR on view #{%i0%[viewNum]}"

        AP SR
        [new_aligned_images]         ; particles to be aligned
        [view_select][viewNum]       ; selection file
        [lastRing]                   ; expected size of the object
        [firstRing],[lastRing]
        [centered_refs][viewNum]     ; centering image
        [view_dir]/[temp_apsr_avg]   ; WAS [reffree_slice]              ; OUTPUT: average
        [view_dir]/[temp_apsr_doc]   ; OUTPUT: alignment doc

        
        ; COUNT #ITERATIONS

        [maxIter] = 100

        ; loop through iterations
        do lb53 [apsrIter] = 1,[maxIter]
            ; check if file exists
            iq fi [docExists]
            [view_dir]/[temp_apsr_doc][apsrIter]
        
            ; if file doesn't exist, then exit loop
            if ([docExists] .EQ. 0) goto lb54
        lb53
        ; end iteration-loop
        
        lb54  ; jump here when iteration file not found

        [apsrIter] = [apsrIter] - 1  ; previous iteration's file exists

        CP
        [view_dir]/[temp_apsr_avg][apsrIter]
        [reffree_slice][viewNum]
    LB52
    ; end view-loop
ENDIF


; ALIGN TO NEW REFERENCES

IF ([reffreeYN] .GE. 1) THEN
    VM
    echo "Re-running multi-reference alignment with new averages" ; date

    ; PERFORM NEW MULTI-REFERENCE ALIGNMENT, APPLY PARAMETERS, AND AVERAGE IMAGES
    @apsh
    [mirror-option]        ; PARAMETER
    [searchRange]          ; PARAMETER
    [stepSize]             ; PARAMETER
    [firstRing]            ; PARAMETER
    [lastRing]             ; PARAMETER
    [reffree_slice]        ; INPUT
    [unaligned_images]     ; INPUT
    [selection_list]       ; INPUT
    [alignment_doc]        ; OUTPUT
    [new_aligned_stack]    ; OUTPUT
    [master_aligned]       ; OUTPUT
    [view_select]          ; OUTPUT
    [sorted_select]        ; OUTPUT
    [how_many]             ; OUTPUT
    [viewavg_stack]        ; OUTPUT
    [viewvar_stack]        ; OUTPUT
ENDIF


; save to tracking doc
sd [nextIterKey], [nextIterNum]
[multiref_tracking_doc]
sd e
[multiref_tracking_doc]
DOC REN
[multiref_tracking_doc]
[multiref_tracking_doc]

vm
echo ; echo "Done" ; date

EN D

; Modified 2016-04-20
;    TO DO: use averages as references directly, rather than recompute from aligned images
;    2015-08-27 (trs) -- split off AP SH into subroutine
;    2015-08-26 (trs) -- optional reference-free alignment within each view
;    2015-08-10 (trs) -- centers output averages (using same scheme as for input references)
;    2015-08-10 (trs) -- can pick classes in View*** using verifybyview
;    2015-04-01 (trs) -- added option for RT180 centering
;    2015-03-24 (trs) -- tracking doc not updated until successful completion
;    2014-11-07 (trs) -- variance saved as default
;    2014-11-06 (trs) -- skips empty classes
;    2014-03-08 (trs) -- added error-check for empty good-classes file
;    2014-03-06 (trs) -- making master copy of aligned stack
;    2014-03-06 (trs) -- using images in stacks
;    2014-03-04 (trs) -- keeps track of last iteration
;    2014-02-04 (trs) -- added error-checking for alignment radius
;    2012-09-10 (trs) -- center-of-gravity and checking mirrored positions in AP SH now options
;    2012-08-31 (trs) -- skipping center-of-gravity calculation
;    2012-08-31 (trs) -- bug fix: variance map for case of 1 particle in view
;    2012-08-08 (trs) -- updated obsolete AP MQ to AP SH
