; PAIRWISE REFERENCE-FREE ALIGNMENT OF TILTED IMAGES
; 
; Requires p_pairwise.rct, drawcircles.rct
;
; Adapted from Michael Radermacher's rfreeprepdoc.rec and rfreeal2001.rec
;
; Described in Marco S, Chagoyen M, de la Fraga LG, Carazo JM, Carrascosa JL (1996)
; "A variant to the Random Approximation of the reference-free algorithm."
; Ultramicroscopy. Vol 66: pg. 5-10.

; ---------------- Parameters ----------------
[cgOption]            = 2      ; center-of-gravity option (1==None, 2==CG PH, 3=RT180)
[numProcs]            = 0      ; number of CPUs to use (0 == ALL)
[maskRadius]          = -1     ; mask radius (0 == None, <0 == 1/2 image dimension)
[innerRad]            = 1      ; inner radius for alignment, pixels
[alignRadius]         = -1     ; outer radius for alignment, (<0 == get from PARAMS object diameter)
[radiusPaddingFactor] = 1.7    ; if alignment radius is automatic, will multiply by this number
[searchRange]         = 8      ; translation search range, for AP SH (for alignment to final average)
[stepSize]            = 2      ; translation step size, for AP SH
[saveIntermeds]       = 1      ; save intermediate pairwise files (1==YES)

; --------------- Input files ---------------
fr l
[parameter_doc]params                        ; parameter doc file
fr l
[selection_list]listparticles                ; particle list
fr l 
[unaligned_images]Tilted/stk2-winrot@*****   ; particle template

; --------------- Output files ---------------
fr l
[pair_dir]Tilted/Pairwise                  ; toplevel output directory
fr l
[pair_doc][pair_dir]/pairdoc****           ; pair-document template
fr l
[depth_dir][pair_dir]/Depth                ; directory prefix for each depth of binary tree
fr l
[pair_align_doc][pair_dir]/alignpair       ; intermediate, reference-free alignment doc
fr l
[intermed_avg_stack]avgpair                ; intermediate-average stack, in DEPTH_DIR
fr l
[intermed_avg][intermed_avg_stack]@****    ; intermediate-average template, in DEPTH_DIR
fr l
[centered_stack][pair_dir]/stkcentavg      ; centered-average stack (slice 1: No centering, 2: CG PH, 3: RT180)
fr l
[final_avg][pair_dir]/rfreeavg001          ; reference-free alignment average
fr l
[final_var][pair_dir]/rfreevar001          ; reference-free alignment average
FR L
[apsh_doc][pair_dir]/docapsh               ; intermediate AP SH alignment doc
fr l
[final_align_doc][pair_dir]/docpairalign   ; final alignment doc
fr l
[aligned_stack]Tilted/stk3-cent            ; aligned-image stack (w/o "@")
fr l
[aligned_images][aligned_stack]@*****      ; aligned-image template (check number of digits)

; ------------ END BATCH HEADER ------------

; Temporary files
fr l
[temp_reference]tmpref***
;fr l
;[temp_unmirrored7]_71
;fr l
;[temp_aligned7]_72
;fr l
;[temp_unmirrored5]_51
;fr l
;[temp_aligned5]_52
fr l
[temp_unmirrored3]_31
;FR L
;[temp_uncentered]_81
fr l
[temp_unmasked]_82

md
set mp
[numProcs]
md
vb off

; get image dimension
ud 17,[idim-params]    ; window dimension
[parameter_doc]
UD E

; dummy registers
[one]  = 1  
[zero] = 0

; get first-particle#
ud ic [one],[first-particle]
[selection_list]

; get image-dimension from first particle
fs
[unaligned_images][first-particle]
fi [idim-first]
[unaligned_images][first-particle]
(2)   ; header position for NROW

; compare image-dimensions from params and header, make sure not downsampled
if([idim-params].ne.[idim-first]) then
    ; compute ratio
    [ratio] = [idim-params]/[idim-first]

    ; if ratio is an integer, images are probably shrunk
    if([ratio].eq.int([ratio])) then
        ; use shrunken image-dimension
        [img-dim] = [idim-first]

        ; reduce object diameter
;;;        [obj-diam] = [obj-diam]/[ratio]

        vm
        echo "WARNING:"
        vm
        echo "Image dimension from [parameter_doc], {***[idim-params]}, {*[ratio]} times that from [unaligned_images][first-particle]"
;;;        vm
;;;        echo "Reducing object diameter by a factor of {*[ratio]} also, to {***[obj-diam]}" ; echo
    ; if ratio is not an integer
    else
        ; don't know what to do
        vm
        echo "ERROR"
        vm
        echo "Image dimension from [parameter_doc], {***[idim-params]}, different from [unaligned_images][first-particle], {***[idim-first]}"
        vm
        echo "Fix and re-start"

        en
    endif
else
    [img-dim] = [idim-params]
endif


; SET OUTER ALIGNMENT RADIUS

if([alignRadius].le.0) then
    ud 18,[obj-diam]   ; particle diameter
    [parameter_doc]
    ud e
    
    ; in case of downsampling
    if([idim-params].ne.[idim-first]) then
        [obj-diam] = [obj-diam]/[ratio]

        vm
        echo "Reducing object diameter by a factor of {*[ratio]} also, to {***[obj-diam]}" ; echo
    ENDIF

    ; calculate alignment radius
    [alignRadius] = [radiusPaddingFactor]*([obj-diam] - 1)/2
endif

; check outer alignment radius
[check-radius] = int([img-dim]/2) - [alignRadius] - [searchRange]

; fix outer alignment radius, if necessary
if([check-radius].lt.2) then
    vm
    echo "WARNING"
    vm
    echo "Tested alignment radius of {***[alignRadius]} from specified object diameter of {***[obj-diam]} too big"
    
    ; re-set alignment radius
    [alignRadius] = int([img-dim]/2) - [searchRange] - 3
endif

vm
echo "Using outer alignment radius of {***[alignRadius]} pixels" ; echo

; If applying mask
if ([maskRadius] .ne. 0) then
    ; if user-defined mask
    if ([maskRadius] .gt. 0) then
        vm
        echo "Using user-defined mask radius of {***[maskRadius]} pixels" ; echo
    else
        [maskRadius] = int([img-dim]/2 - 1)
        
        vm
        echo "Using mask radius of {***[maskRadius]} pixels" ; echo
    endif

    [imgCenter]  = [img-dim]/2 + 1  ; image center coordinates
else
    vm
    echo "Not masking output images" ; echo
endif


DE
[centered_stack]@

; Perform pairwise alignment
@p_pairwise
[innerRad]          ; PARAMETER: inner radius for alignment, pixels
[alignRadius]       ; PARAMETER: outer alignment radius, pixels
[searchRange]       ; PARAMETER: translation search range, pixels
[stepSize]         ; PARAMETER: translation step size
(0)                 ; PARAMETER: allow rotation?
[saveIntermeds]     ; PARAMETER: save outputs?
(1)                 ; PARAMETER: verbosity level
[selection_list]    ; INPUT: particle list
[unaligned_images]  ; INPUT: particle template
[pair_dir]          ; OUTPUT: toplevel output directory
[centered_stack]@1  ; OUTPUT: reference-free average


; CENTER AVERAGES USING A FEW DIFFERENT STRATEGIES

; Search the center of gravity of the global average map AVSTX71
cg ph X21,X22,[xshift-cg],[yshift-cg]
[centered_stack]@1

sh
[centered_stack]@1
[centered_stack]@2
-[xshift-cg],-[yshift-cg]  ; x,y-shifts

; center by rotating by 180 degrees and self-alignment
@center1([xshift-cg],[yshift-cg])
[centered_stack]@1
[centered_stack]@3  ; OUTPUT


if([cgOption].eq.1) then
    vm
    echo ; echo "Will not use re-centered intermediate average"
elseif([cgOption].eq.2) then
    vm
    echo ; echo "Will use average centered using CG PH"
else
    vm
    echo ; echo "Will use average centered by rotating 180 degrees and self-aligning"
endif

CP
[centered_stack]@{*[cgOption]}
[temp_reference][cgOption]


; DRAW CIRCLES ON AVERAGES

@drawcircles
[centered_stack]@1   ; INPUT: overwritten
[innerRad]           ; PARAMETER: radius1
[alignRadius]        ; PARAMETER: radius2

@drawcircles
[centered_stack]@2   ; INPUT: overwritten
[innerRad]           ; PARAMETER: radius1
[alignRadius]        ; PARAMETER: radius2

@drawcircles
[centered_stack]@3   ; INPUT: overwritten
[innerRad]           ; PARAMETER: radius1
[alignRadius]        ; PARAMETER: radius2


vm
echo ; echo "Aligning to final average"; date

; clean up pre-existing files
de
[apsh_doc]   ; WAS [final_align_doc]
DE
[final_align_doc]
SD /              ANGLE_PSI    ANGLE_THETA    ANGLE_PHI      REFPROJ       PARTNUM       INPLANE       X_SHIFT      Y_SHIFT
[final_align_doc]

; align to centered average
ap sh
[temp_reference]   ; WAS [centered_stack]@*  ; INPUT: reference template
[cgOption]          ; reference image# (center-of-gravity option)
[searchRange],[stepSize]
[innerRad],[alignRadius]
*                   ; INPUT: reference angles
[unaligned_images]  ; INPUT: experimental-image template
[selection_list]    ; INPUT: selection doc
*                   ; INPUT: previous alignment doc
(0)                 ; no angular restriction
(0)                 ; check mirrored positions
[apsh_doc]   ; WAS [final_align_doc]   ; OUTPUT: alignment doc

DE
[temp_reference][cgOption]


; APPLY ALIGNMENTS

VM
echo "Applying alignments" ; date

de
[aligned_stack]@

; get #particles
ud n [num-particles]
[selection_list]

; loop through particles
do lb3 [part-key3] = 1,[num-particles]
    ud ic [part-key3], [part-num]
    [selection_list]

    ; read alignment parameters
    ud ic [part-num], x81,x82,x83,x84,x85,[inplaneAngle3],[xshift3],[yshift3],x89,x90,x91,x92,x93,x94,[mirror-flag3]
    [apsh_doc]   ; WAS [final_align_doc]

    ; if necessary, mirror after shift+rotate
    ; (Should never be necessary if using 0 in AP SH above)
    if([mirror-flag3].lt.0) then
        VM
        echo "WARNING:" ; echo "Mirroring is necessary for some reason"
        
        EN
        
        rt sq
        [unaligned_images][part-num]
        [temp_unmirrored3]   ; OUTPUT
        [inplaneAngle3]
        [xshift3],[yshift3]

        mr
        [temp_unmirrored3]   ; INPUT: rotated, shifted image
        [aligned_images][part-num]
        Y                    ; mirror around y-axis
    endif

    if([mirror-flag3].ge.0) then
        ; shifts from AP SH assume rotation (which we wish to ignore) come first, so we have to re-compute shifts
        SA P [angleNoRotate], [xshiftNoRotate], [yshiftNoRotate]
        [inplaneAngle3],[xshift3],[yshift3]
        -[inplaneAngle3],[zero],[zero]
        
        rt sq
        [unaligned_images][part-num]
        [temp_unmasked]
        [angleNoRotate]   ; should be 0
        [xshiftNoRotate],[yshiftNoRotate]
    endif
    
    ; Write alignment parameters
    sd [part-num], x81,x82,x83,x84,x85,[angleNoRotate],[xshiftNoRotate],[yshiftNoRotate],x89,x90,x91,x92,x93,x94,[mirror-flag3]
    [final_align_doc]
    
    if ([maskRadius] .ne. 0) then
        ; Apply a circular mask on the centered images 
        ma
        [temp_unmasked]  ; INPUT: aligned image
        [aligned_images][part-num]
        [maskRadius]
        G                ; _G_aussian cutoff
        C                ; background set to _C_ircumference average
        [imgCenter],[imgCenter] 
        (2.5)            ; Gaussian falloff
    else
        cp
        [temp_unmasked]  ; INPUT: aligned image
        [aligned_images][part-num]
    endif
lb3
; end particle-loop

; close docs
ud ice
[apsh_doc]   ; WAS [final_align_doc]
ud ice
[selection_list]
sd e
[final_align_doc]

; Computation of the average and variance maps of the last cycle
as dc
[aligned_images]  ; INPUT: aligned-image template
[selection_list]  ; INPUT: selection file
A                 ; average _A_ll images
[final_avg]       ; OUTPUT: average
[final_var]       ; OUTPUT: variance

vm
echo "Done"; date

en d

; Modified 2015-08-13
;    2015-08-06 (trs) -- ignores in-plane rotation angle
;    2015-07-29 (trs) -- draws circles on intermediate averages
;    2015-04-28 (trs) -- using p_pairwise
;    2015-03-27 (trs) -- split off reference-free alignment into subroutine
;    2015-03-24 (trs) -- all center-of-gravity options written for comparison
;    2015-03-13 (trs & qw) -- adapted from pairwise.rct
;    2014-03-25 (trs) -- can override object diameter from PARAMS
;    2014-03-05 (trs) -- making master copy of aligned stack
;    2014-03-05 (trs) -- writing images in stacks
;    2014-02-27 (trs) -- added centering options
;    2014-02-06 (trs) -- added digit for more than 999 pairs of images
;    2014-01-24 (trs) -- uses all processors
;    2013-05-06 (trs) -- uses named registers
;    2013-05-06 (trs & svd) -- gets image-dimension from first image
;    2010-08-24 (trs) -- AP MQ and OR MQ replaced with AP SH and OR SH
;    2010-02-08 (trs) -- fits outer alignment radius to image
;    2009-06-12 (trs) -- centers penultimate average
;    2008-11-25 (trs) -- computes variance
;    2008-11-24 (trs) -- adapted from pairwise.spi
