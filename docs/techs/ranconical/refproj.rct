; PROJECT REFERENCE VOLUME
;
; Adapted from refproj.spi

; ------------------- Parameters -------------------

[single-class] = 1     ; class number to calculate projections (0==all)
[dtheta]       = 15    ; angular increment for references (15==83 projections)

; --------------------- Inputs ---------------------
fr l
[parameter_doc]params                     ; parameter doc file
fr l
[class_vol]Volumes/vcla{***[classNum]}    ; class volume template
fr l
[class_list]goodviews                     ; list of class volumes (required if multiple classes)

; --------------------- Outputs ---------------------
fr l
[pocs_dir]Pocs                                       ; output directory
fr l
[ref_angles][pocs_dir]/refangles                     ; reference-angles doc file
fr l
[list_projs][pocs_dir]/projlist                      ; list of reference projections
fr l
[prj_stack][pocs_dir]/prj_{***[classNum]}@           ; reference-projection stack
FR L
[power_spectrum][pocs_dir]/stkpws_{***[classNum]}@   ; reference-projection stack

; ----------------- END BATCH HEADER -----------------

; Temporary files
[temp_pws]   = '_1'
[temp_stack] = '_2'

; get image-dimension
ud 17,[img-dim]
[parameter_doc]
ud e

vm
echo "if(! -d [pocs_dir]) mkdir [pocs_dir]"|csh

de 
[ref_angles]

; compute projection angles
VO EA [numang]
[dtheta]       ; Delta theta
0,0            ; Range of theta
0,0            ; Range of phi
[ref_angles]   ; Doc file of angles       (output)

[numang] = [numang] - 1
; (Last projection is redundant with (0,0,0).)

doc create
[list_projs]
(1)           ; column# to fill
(1-[numang])  ; values to enter

; check if all classes or single class specified
if([single-class].eq.0) then
    ; get #classes
    ud n [num-classes]
    [class_list]
    
    vm
    echo "Projecting all {***[num-classes]} classes listed in [class_list]" ; echo
else
    [num-classes] = 1
    [classNum]   = [single-class]
endif

[prj-radius] = [img-dim]/2 - 1

; loop through classes
do lb3 [class-key] = 1,[num-classes]
    ; get class# if not a single class
    if([single-class].eq.0) then
        ud ic [class-key], [classNum]
        [class_list]
    endif
    ; (If single class, [classNum] will have been set above.)
    
    de
    [prj_stack]
    DE
    [power_spectrum]
    
    MS
    [temp_stack]@
    (160,160)
    [numang]

    vm
    echo "Projecting [class_vol]"

    ; project volume
    PJ 3Q
    [class_vol]        ; Volume to be projected          (input)
    [prj-radius]       ; Radius
    (1-[numang])       ; List of file numbers
    [ref_angles]       ; Proj. angles doc file           (input)
    [prj_stack]@****   ; Template for projection stack   (output)
    
    ; Loop through projections
    DO LB2 [prjNum] = 1,[numang]
        PW
        [prj_stack]{****[prjNum]}
        [temp_pws]
        
        SQRT
        [temp_pws]
        [temp_stack]@{****[prjNum]}
        ; (For some reason, writing directly to disk directly didn't work.)
    LB2
    ; End projection-loop
lb3
; end class-loop

CP
[temp_stack]@
[power_spectrum]

en d

; Modified 2015-08-13
;    2015-08-13 (trs) -- writes (square root of) power spectrum of reference projection
