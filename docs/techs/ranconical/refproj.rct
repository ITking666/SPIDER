; PROJECT REFERENCE VOLUME
;
; Adapted from refproj.spi

; -------------- Parameters --------------

[classNum]      = 1   ; class number to calculate projections (0==all)
[multiref-iter] = -1  ; iteration of multireference alignment to use as input (for multiple classes, <0==last)
[dtheta]        = 15  ; angular increment for references (15==83 projections)

; ---------------- Inputs ----------------
fr l
[parameter_doc]params                        ; parameter doc file
fr l
[class_vol]Volumes/vcla***                   ; class volume template
fr l
[multiref_tracking_doc]Zerodegr/docmultiref  ; list of multireference alignment iterations (if reconstructing multiple classes)
fr l
[class_dir]Zerodegr/Multiref{*[iter]}        ; alignment directory (if reconstructing multiple classes)
fr l
[class_list][class_dir]/goodviews            ; list of classes (if reconstructing multiple classes)

; ---------------- Outputs ----------------
fr l
[pocs_dir]Pocs                    ; output directory
fr l
[ref_angles][pocs_dir]/refangles  ; reference-angles doc file
fr l
[list_projs][pocs_dir]/projlist   ; list of reference projections
fr l
[prj_stack]prj_***                ; reference-projection stack (w/o "@"), in POCS_DIR
FR L
[last_prjs]prj-LAST               ; softlink to most recent stack of projections (for SPIRE)
FR L
[power_spectrum]stkpws_***@       ; power-spectrum stack, in POCS_DIR
FR L
[last_pws]stkpws-LAST             ; softlink to most recent stack of power spectra (for SPIRE)

; ----------------- END BATCH HEADER -----------------

; Temporary files
[temp_pws]   = '_1'
[temp_stack] = '_2'

; get image-dimension
ud 17,[imgDim]
[parameter_doc]
ud e

vm
echo "if(! -d [pocs_dir]) mkdir [pocs_dir]"|csh

de 
[ref_angles]

; compute projection angles
VO EA [numang]
[dtheta]       ; Delta theta
0,0            ; Range of theta
0,0            ; Range of phi
[ref_angles]   ; Doc file of angles       (output)

[numang] = [numang] - 1
; (Last projection is redundant with (0,0,0).)

doc create
[list_projs]
(1)           ; column# to fill
(1-[numang])  ; values to enter

; check if all classes or single class specified
if([classNum].eq.0) then
    ; get iteration number

    ; if input iteration-specified
    if([multiref-iter].gt.0) then
        [iter] = [multiref-iter]

    ; if input iteration not specified
    else
        ; look for last iteration number
        ud n [last-iter-key]
        [multiref_tracking_doc]
        
        ; get iteration number
        ud [last-iter-key], [iter]
        [multiref_tracking_doc]
        ud e  ; close doc
    endif

    ; get #classes
    ud n [num-classes]
    [class_list]
    
    vm
    echo "Projecting all {***[num-classes]} classes listed in [class_list]" ; echo
else
    [num-classes] = 1
    [currClass]   = [classNum]
endif

[prj-radius] = [imgDim]/2 - 1

; loop through classes
do lb3 [class-key] = 1,[num-classes]
    ; get class# if not a single class
    if([classNum].eq.0) then
        ud ic [class-key], [currClass]
        [class_list]
    endif
    ; (If single class, [currClass] will have been set above.)
    
    de
    [pocs_dir]/[prj_stack][currClass]@
    DE
    [pocs_dir]/[power_spectrum][currClass]
    
    MS
    [temp_stack]@
    [imgDim],[imgDim]
    [numang]

    vm
    echo "Projecting [class_vol][currClass]"

    ; project volume
    PJ 3Q
    [class_vol][currClass]                    ; Volume to be projected          (input)
    [prj-radius]                              ; Radius
    (1-[numang])                              ; List of file numbers
    [ref_angles]                              ; Proj. angles doc file           (input)
    [pocs_dir]/[prj_stack][currClass]@****    ; Template for projection stack   (output)
    
    ; Loop through projections
    DO LB2 [prjNum] = 1,[numang]
        PW
        [pocs_dir]/[prj_stack][currClass]@{****[prjNum]}
        [temp_pws]
        
        SQRT
        [temp_pws]
        [temp_stack]@{****[prjNum]}
        ; (For some reason, writing directly to disk directly didn't work.)
    LB2
    ; End projection-loop
lb3
; end class-loop

CP
[temp_stack]@
[pocs_dir]/[power_spectrum][currClass]

; create soft links of most recent stacks for SPIRE
SYS
cd [pocs_dir] && rm -f [last_prjs].$DATEXT && ln -sv [prj_stack][currClass].$DATEXT      [last_prjs].$DATEXT ; echo
SYS
cd [pocs_dir] && rm -f [last_pws].$DATEXT  && ln -sv [power_spectrum][currClass].$DATEXT [last_pws].$DATEXT  ; echo

en d

; Modified 2017-11-02
;    2016-04-20 (trs) -- creates link to more recent projection stack for SPIRE
;    2015-08-13 (trs) -- writes (square root of) power spectrum of reference projection
