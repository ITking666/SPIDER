head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2002.06.10.12.39.15;	author leith;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@<HTML>

<HEAD>
<TITLE>Using SPIDER on IBM SP Clusters with Job Scheduling</TITLE>
</HEAD>

<BODY>
<H2 ALIGN=CENTER>Using SPIDER on IBM SP Clusters with Job Scheduling</H2>
This page illustrates the usage of some SPIDER operations that are helpful in 
creating and controlling the execution of multiple SPIDER jobs running
in parallel on a loosely coupled clustered system which has a complex job
scheduling system to assign nodes to a user and regulate processing time.
 
<H2 ALIGN=CENTER>Example: Alignment of Single Particles</H2>

<H3> <A NAME="bjob">bjob</A> </H3>
<H4>Schedules node use using LoadLeveler on IBM SP clusters.
To run : <I>llsubmit  bjob</I>  </H4>

<PRE>
#@@ job_name        = bjob                 
#@@ output          = bjob.out 
#@@ error           = bjob.err 
#@@ job_type        = parallel 
#@@ network.MPI     = css0,not_shared,us 
#@@ node_usage      = not_shared 
#@@ environment     = COPY_ALL 
#@@ notification    = complete 
#@@ class           = regular 

#@@ tasks_per_node  = 1 
#@@ node            = 25 

# 
#@@ wall_clock_limit= 7:50:00 
#@@ queue 

date 
#reserve one node for each SPIDER job
poe -nodes 25 -procs 25 -pgmmodel mpmd -cmdfile bjob.cmd 
date 
</PRE>

<H3> <A NAME="bjob.cmd">bjob.cmd</A> </H3>
<H4>Starts master and idle tasks on each node. </H4>
<PRE>

#- command --- Project/ Data  -- intial ----- results --- reg. 
#              extension       procedure   file number    setting   

./spider        pam/acn        @@b_master        0         x11=11
./spider        pam/acn        @@b_idle          1         x77=16
./spider        pam/acn        @@b_idle          2         x11=17 
./spider        pam/acn        @@b_idle          3         x11=18 
..
..
..
./spider        pam/acn        @@b_idle         24         x11=40  
</PRE>


<H3> <A NAME="b_master">b_master.pam</A> </H3>
<H4>Master task. Started on one node only. Coordinates and
synchronizes all tasks. </H4>

; ArDean Leith Nov 2000                                   <BR>
</P>

; INPUT:                                                  <BR>
; x12                        (Starting micrograph number) <BR>
; x13                        (Ending micrograph number)   <BR>
; myinput/reference_volume   (3-D input file)             <BR>
; myinput/win_part@@*****     (2-D  projections)           <BR>
; myinput/ngood{***mcg}      (Selection doc files)        <BR>
</P>

; OUTPUT:                                   <BR>
; out/prj****                (Projections)  <BR>
; select                     (Doc file)     <BR>
; refangles                  (Doc file)     <BR>
; out/apmq{***x77}           (Doc files)    <BR>
</P>

x12 = 16   ; starting micrograph number     <BR>
x13 = 40   ; ending micrograph number       <BR>
</P>

MD                                          <BR>
TR OFF   ; decrease output to results file  <BR>    
MD                                          <BR>
VB OFF   ; decrease output to results file  <BR>    
MD                                          <BR>
SET MP   ; use SMP on 2 processors per node <BR>    
2                                           <BR>
</P>

VM       ; dir: out{..}  NEEDED             <BR>
mkdir out                                   <BR>
</P>

x11=1                                       <BR>

; activate slave task for each micrograph   <BR>
<DT>DO LB1 x77=x12,x13                      <DL>
   <DD>; create sync document files with register settings for each slave             </DD>
   <DD>@@<A HREF="#b_startslave">b_startslave</A>[x11,x41,x42,x51,x52,x55,x66,x76,x77] </DD>
<DT>LB1                                    </DL>
</P>

VM                                         <BR>
echo "b_master waiting for all alignments" <BR>

MY FL   ; flush results                    <BR>
</P>

; wait for alignments to finish                          <BR>
@@<A HREF="#b_wait">b_wait</A>[x11,x12,x13,x47,x66,x76]   <BR>
</P>

; alignments finished, signal slaves to end <BR>
x11=99                                      <BR>
DO LB3 x77=x12,x13                          <BR>
   <DD>  @@<A HREF="#b_startslave">b_startslave</A>[x11,x41,x42,x51,x52,x55,x66,x76,x77] </DD></DL>
LB3                                         <BR>
<P>

EN                                          <BR>
<P>



<A NAME="b_startslave"><H3>b_startslave.pam</H3></A>  </P>
<H4>SPIDER procedure called by: <A HREF="#b_master">b_master</A> that
creates a doc. files for each group.  The doc. file is used to signal the
startup of processing by the <A HREF="#b_idle">b_idle</A>  tasks and also
passes info to the <A HREF="#b_idle">b_idle</A> tasks.       </H4>

[x11,x41,x42,x51,x52,x55,x66,x76,x77]       <BR>

; ArDean Leith Nov 2000<BR>
; Creates doc files used to wake up and pass info to idle tasks       <BR>
</P>

; INPUT        <BR>
; reg: 41      <BR>
; reg: 42      <BR>
; reg: 51      <BR>
; reg: 52      <BR>
; reg: 55      <BR>
; reg: 66      <BR>
; reg: 76      <BR>
; reg: 77      <BR>

</P>

; remove any existing document file for settings & to sync files  <BR>
VM     ; remove old sync doc. file for this group                 <BR>
\rm -f jnkdoc{***x77}.$DATEXT                                     <BR>

; create document file with register settings           <BR>
SD 11,x11          (contains type of slave flag)        <BR>
jnkdoctmp{***x77}       <BR>
SD 41,x41               <BR>
jnkdoctmp{***x77}       <BR>
SD 42,x42               <BR>
jnkdoctmp{***x77}       <BR>
SD 51,x51               <BR>
jnkdoctmp{***x77}       <BR>
SD 52,x52               <BR>
jnkdoctmp{***x77}       <BR>
SD 55,x55               <BR>
jnkdoctmp{***x77}       <BR>
SD 66,x66               <BR>
jnkdoctmp{***x77}       <BR>
SD 76,x76               <BR>
jnkdoctmp{***x77}       <BR>
</P>

SD E                    <BR>
jnkdoctmp{***x77}       <BR>
VM       <BR>
mv jnkdoctmp{***x77}.$DATEXT jnkdoc{***x77}.$DATEXT       <BR>
RE       <BR>
</P>




<A NAME="b_idle"><H3>b_idle.pam</H3></A>  
<H4>Started on each node execept for the master node.  This
task waits for the existence of a start-up file: jnkdoc{***x77}
created by: <A HREF="#b_master">b_master</A>
When the signal (file) arrives, this procedure 
calls SPIDER procedure <A HREF="#b12">b12.pam</A> which carries out the
alignment for this group.  When the alignment is finished, this
procedure creates a new doc. file: jnkdocparamout{***x77}
which signals  <A HREF="#b_master">_bmaster</A> that it
can re-awaken.</H4>

; ArDean Leith Nov 2000                     </P>

; INPUT:                                    <BR>
; reg: 77    (group, on command line)       <BR>
; jnkdoc{ }  (doc  file created by b_master & b_startslave)    
</P>

; OUTPUT:       <BR>
; jnkdocparmout  (signal file contains x11 & x47)      
</P>

x77      ; group must be on command line!!!!!  <BR>

MD                                          <BR>
TR OFF   ; decrease output to results file  <BR>    
MD                                          <BR>
VB OFF   ; decrease output to results file  <BR>    
MD                                          <BR>
SET MP   ; use SMP on 2 processors per node <BR>    
2                                           <BR>
</P>

; Awakens on signal from <A HREF="#b_master">b_master</A> ----------------------------    <BR>

; Runs following operations for each awakening (100000=infinite)  <BR>
DO LB1 i=1,100000           <BR><DL>
   <DD>IQ SYNC   ; wait for wake-up signal (file: jnkdoc{***grp} </DD>
   <DD>jnkdoc{***x77}       <BR>
   <DD>(10 36000)           </DD>
   <P>
   <DD>; retrieve registers stored in doc file: jnkdoc{***x77}       </DD>
   <DD>UD IC,11,X11         </DD>
   <DD>jnkdoc{***x77}       </DD>
   <DD>IF (x11.GE.99) THEN  </DD> <DL>
      <DD>; signal to kill this slave task </DD>
      <DD>EN                </DL>
   <DD>ENDIF                </DD></P>

   <DD>UD IC,41,X41         </DD>
   <DD>jnkdoc{***x77}       </DD>
   <DD>UD IC,42,X42         </DD>
   <DD>jnkdoc{***x77}       </DD>
   <DD>UD IC,51,X51         </DD>
   <DD>jnkdoc{***x77}       </DD>
   <DD>UD IC,52,X52         </DD>
   <DD>jnkdoc{***x77}       </DD>
   <DD>UD IC,55,X55         </DD>
   <DD>jnkdoc{***x77}       </DD>
   <DD>UD IC,66,X66         </DD>
   <DD>jnkdoc{***x77}       </DD>
   <DD>UD IC,76,X76         </DD>
   <DD>jnkdoc{***x77}       </DD>
   </P>

   <DD>UD ICE               </DD>
   <DD>jnkdoc{***x77}       </DD>
   </P>
   <DD>VM   ; remove this sync. doc file  </DD>
   <DD>\rm -f jnkdoc{***x77}*             </DD>
   </P>

   <DD>VM       </DD>
   <DD>date     </DD>
   <DD>VM       </DD>
   <DD>echo "starting step: {**x76}  group: {**x77}" </DD>
   </P>

   <DD>X11                                  </DD>
   <DD>MY FL     ; flush results file       </DD>
   <\P>

   <DD>IF (x11 .EQ. 1) THEN       </DD><DL>
      <DD>@@<A HREF="#b12">b12[x77]</A> ; runs alignment for this group.  </DD></DL>
   <DD>ENDIF                      </DD>
   </P>

   <DD>; Signal <A HREF="#b_master">b_master</A> to re-awaken now      </DD>
   <DD>;     (b_master wakes when it sees jnkdocparamout{***x77})   </DD>
   <DD>SD 11,X11                    ; set sync file output          </DD>
   <DD>jnkdocparamout{***x77}                                       </DD>
   </P>

   <DD>SD E                         </DD>
   <DD>jnkdocparamout{***x77}       </DD>
   </P>

   <DD>VM                          </DD>
   <DD>echo "ending iteration: {**x76} group: {**x77}" </DL>
LB1       </P>

EN       <BR>
</P>


<A NAME="b12"><H3>b12.pam</H3></A>  
<H4> Started on each processor by <A HREF="#b_idle">b_idle.pam</A>  
 Aligns particles to reference projections. </H4>
</P>

[x77]
; ArDean Leith Nov 2000
</P>

; Aligns particles to reference projections.                      <BR>
;  Multireference alignment of an image series. For              <BR>
;  project with multiple defocus settings, run this program      <BR>
;  separately for particles from each individual micrograph.     <BR>
</P>

; If pixel size is different than 4.78, expected size of object and  <BR>
; first and last ring parameters should be changed                   <BR>
</P>

; INPUT:      <BR>
; out/prj****                     (2-D ref. images)                             <BR>
; select                          (Selection doc file for refs. from b11.pam)   <BR> 
; scratch/leith/win_part@@*****    (Windowed images)                             <BR>
; myinput/ngood{***grp}           (Selection doc files for windowed images)     <BR>
</P>

; OUTPUT:      <BR>
; out/apmq{***x77}                (Alignment doc files)   <BR>
</P>

MD                                          <BR>
TR OFF   ; decrease ouput to results file   <BR>    
MD                                          <BR>
VB OFF   ; decrease ouput to results file   <BR>    
MD                                          <BR>
SET MP   ; use SMP on 2 processors per node <BR>    
2                                           <BR>
</P>

MY FL   ; flush output
</P>

AP MQ                          ; Alignment - 3D, multi reference                  <BR>
out/prj****                    ; Template for 2-D reference image names  (input)  <BR>
select                         ; Selection doc. file for reference imgs. (input)  <BR>
(10,1)                         ; Accuracy of the search                           <BR>
(5,47)                         ; First and last ring                              <BR>
/scratch/leith/win_part@@*****  ; Windowed images    (input)                       <BR>
myinput/ngood{***x77}          ; Windowed images selection doc. file (input)      <BR> 
out/apmq{***x77}               ; Angles output file  (output)                     <BR>
</P>

MY FL                          ; Flush output                                     <BR>
</P>

RE      <BR>


<A NAME="b_wait"> <H3>b_wait.pam </H3> </A>
<H4><A HREF="#b_master">b_master</A> running on the master node calls this
procedure after awakening  the <A HREF="#b_idle">b_idle</A> tasks to
carry out the alignment. When an alignment is finished, 
<A HREF="#b_idle">b_idle</A> creates a new doc. file: jnkdocparamout{***x77}.)
This procedure causes <A HREF="#b_master">b_master</A>
to  wait for the creation of these files from each of the  
<A HREF="#b_idle">b_idle</A> tasks. 
 </H4>

[x11,x12,x13,x47,x66,x76]                     <BR>
; ArDean Leith Nov 2000                       </P>

; Used in <A HREF="#b_master">b_master</A>. Waits for slaves to finish.  <BR>
;              For step id=2, accumulates register 47 contents from <BR>
;              sync doc file.                                       <BR>
</P>

; INPUT:                                <BR>
; reg: 11  (step id)                    <BR>
; reg: 12  (startinggroups)             <BR>
; reg: 13  (ending groups)              <BR>
; reg: 66  (number of groups)           <BR>
; reg: 76  (step number)                <BR>
; jnkdocparamout{***grp}*               <BR>
</P>

; OUTPUT:                               <BR>
; reg: 47  (acummulated reg #47)        <BR>
</P>

x12     ; echo reg 12                   <BR>
x13     ; echo reg 13                   <BR>
x47=0   ; initialize return value       <BR>
</P>

;  wait for all micrograph groups -------------                  <BR>

   DO LB3 x76=x12,x13                                            <BR>
    <DL>
    <DD>  X77=56-x76    ; count down since group 16 is so long   </DD>
    <DD>x77                                                      </DD>
    <DD>MY FL   ; flush results                                  </DD>
    <DD>IQ SYNC                                                  </DD>
    <DD>jnkdocparamout{***x77}                                   </DD>
    <DD>(10 36000)                                               </DD>
    <DD>VM                                                       </DD>
    <DD>date                                                     </DD>
    <DD>VM                                                       </DD>
    <DD>echo "synced step: {**x76} group: {**x77} "              </DD>
    <DD>;                                                        </DD>
    <DD>IF (X11 .EQ. 2) THEN                                     </DD><DL>
        <DD>; b_defloopa sets x47 in jnkdocparamout{***x77}      </DD> 
        <DD>UD 47,x12                                            </DD>
        <DD>jnkdocparamout{***x77}                               </DD>
        <DD>x47=x47+x12                                          </DD>
        <DD>UD E                                                 </DD>
        <DD>jnkdocparamout{***x77}                               </DL>
    <DD>ENDIF                                                    </DD>
    <DD>DE                                                       </DD>
    <DD>jnkdocparamout{***x77}                                   </DD>
    <DD>;                                                        </DD>
    <DD>MY FL   ; flush results                                  </DL>
LB3             ;  end wait loop over groups -------  
</P>

RE       <BR>
</P>

<HR> <P><SMALL>
Source:      techs/parallel/parallel_ibm.html  &nbsp;&nbsp;&nbsp;  
Last update: 26 April 2001  &nbsp;&nbsp;&nbsp;
ArDean Leith  </SMALL><P>

</BODY>
</HTML>
@
