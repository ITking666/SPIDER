head	1.11;
access;
symbols
	GPL_update:1.10
	pre_rewrite_2010:1.8
	pre_more_stack:1.5
	best-code:1.4
	no-named-regs:1.4
	pre_GPL:1.4
	tag_version1_0:1.4;
locks; strict;
comment	@# @;


1.11
date	2010.12.21.15.26.54;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2010.02.04.19.20.18;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2010.01.19.18.51.59;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2008.02.19.20.10.44;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2007.03.21.13.07.11;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2007.01.17.16.35.38;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2006.08.09.14.37.22;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.01.21.02.27;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.29.18.55.05;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.03.15.38.43;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.01.16.20.04;	author leith;	state Exp;
branches;
next	;


desc
@for multiple groups now
@


1.11
log
@cosmetic & parrallel names with refinement
@
text
@; <html><head><title>Compute alignment parameters and optionally apply them</title></head><body><pre>
;
; SOURCE: spider/docs/techs/recon/newprogs/apshgrp.spi   
;                   New                                 Nov 2004 ArDean Leith
;                   Rewritten                           Feb 2005 ArDean Leith
;                   Added alignment option & stack op   Nov 2006 ArDean Leith
;                   SET MP location                     Feb 2008 ArDean Leith
;                   VAR name                            Feb 2010 ArDean Leith
;                   VAR names changed                   Dec 2010 ArDean Leith
;
; PURPOSE: Multi-reference alignment of an image series. 
;          Sample images are aligned with reference projections via
;          shifts (translations) and rotations.  
;          FOR PROJECTS WITH MULTIPLE GROUPS- WITH OR WITHOUT PUBSUB.
;
;<b>------------ Edit next 7 Input parameters ------------------------------ 

[pubsub]  = 0   ; If >0 use PubSub
[doalign] = 1   ; If >0 apply alignment to images

[shrange] = 8   ; Translation search range (must be divisible by step size)
[step]    = 2   ; Translation step size

[diam]    = 276 ; Diameter of object (Angstroms) for alignment search.
                ;   (EDIT as needed!) Used to find last rotational alignment radius.

[r1]      = 5   ; First rotation alignment ring, only radii > this will be analyzed
[r2]      = 0   ; Last rotation ring (If zero, compute from object diameter)

; ----------------- Input files --------------------------------------------

[params]            = '../params'             ; Parameter setting file

[defgrps]           = 'sel_group'             ; List of defocus groups (doc. file)

[ref_images]        = 'projs/prj_{***[grp]}@@' ; Reference images  

[ref_images_angles] = 'refangles'             ; Reference images angles doc. file

[unaligned_images]  = 'data{***[grp]}@@'       ; Unaligned particles images 

; ----------------- Output files ------------------------------------------------

[align_parameters]  = 'align_01_{***[grp]}'   ; Alignment parameters doc. file 

[aligned_images]    = 'dala01_{***[grp]}@@'    ; Rotated, shifted (aligned) particles

; ----------------- END BATCH HEADER ------------------------------------------- </b>

MD
TR OFF                                     ; Decrease results file output
MD
VB OFF                                     ; Decrease results file output
MD
() OFF                                     ; No () necessary in loops


; DO NOT WORRY IF [grp] IS UNDEFINED HERE, IT IS TAKEN CARE OF BY PUBSUB
IF ([grp] .GT. 0) [pubsub] = 0             ; Secondary PubSub run 

UD N [numgrps]                             ; Get number of groups 
[defgrps]                                  ; Groups selection file        (input)

IF ([pubsub] .EQ. 0) THEN                  ; Main loop runs 'AP SH'
                                           ; Used for Non-PubSub & PubSub runs 
  
   MD                 
   SET MP                                  ; Use all processors (needed here for secondary runs)
   0

   ; Get rotational alignment radius from object size if needed 
   IF ([r2].LE.0) THEN                       
      UD 5,[sp_pixsiz]                     ; Get pixel size (A) 
      [params]                             ; Reconstruction parameters   (input)
 
      UD 17,[sp_winsiz]                    ; Get window size (pixels) 
      [params]                             ; Reconstruction parameters   (input)

      [r2] = INT([diam]/(2.0*[sp_pixsiz])) ; Object radius (pixels) for last alignment ring
      [ring-sh] = [r2] + [shrange]         ; Last ring + translation range
      [maxrad]  = INT([sp_winsiz]/2) - 2   ; Max. radius of object in window

      IF ([ring-sh] .GE. [maxrad]) THEN
         [r2] = [maxrad] - [shrange] - 1   ; Reduce radius of outer  ring to fit window
      ENDIF
   ENDIF

   IF ([grp] .GT. 0) [numgrps] = 1    ; Group listed on command line, overides list        

   DO  [numgrp]=1,[numgrps]           ; Loop over all group(s)

      IF ([grp] .LT. 1) THEN          ; Group not on command line, use selection file        
         UD [numgrp],[grp]            ; Get current group number 
         [defgrps]                    ; Group selection file                  (input)
      ENDIF

      DE                              ; Delete existing  output doc. files.
      [align_parameters]
 
      FI H [numpart]                  ; Get number of particles 
      [unaligned_images]              ; Unaligned particle images              (input)
      MAXIM                           ; Max. image number in stack      

      FI H [numproj]                  ; Get number of projections 
      [ref_images]                    ; Reference images                       (input)
      MAXIM                           ; Max. image number in stack      

      VM
      echo ' 'Aligning group: {****[grp]} with: {******[numpart]} particles  

      AP SH                           ; Find Alignment using multiple references  
      [ref_images]*****               ; Reference image file name template     (input)
      (1-[numproj])                   ; List of reference images       
      [shrange],[step]                ; Shift search range, step size  
      [r1],[r2]                       ; First and last ring      
      [ref_images_angles]             ; Ref. angles doc file                   (input)
      [unaligned_images]*****         ; Unaligned particle images              (input)
      (1-[numpart])                   ; List of particles  
      *                               ; No unaligned particles align. doc file        
      (0)                             ; No restriction on angular proj. search 
      (1)                             ; Check mirrored positions
      [align_parameters]              ; Alignment angles doc. file             (output)

      IF ([doalign] .GT. 0) THEN
         ; Apply alignment parameters to unaligned particles
         ; Order in doc file: PHI,THETA,PSI, REF#,IMG#,  ROT,SX,SY

         RT SQ                        ; Rotate & shift whole stack operation
         [unaligned_images]           ; Unaligned particles stack              (input) 
         [aligned_images]             ; Aligned particles stack                (output)
         (6,0,7,8)                    ; Reg. numbers for angle, scale,& shifts
         [align_parameters]           ; Alignment angles doc. file             (input)
      ENDIF

      MY FL                           ; Flush results file
      [grp] = 0                       ; Reset default group for next group
   ENDDO                              ; End loop for multiple groups
    
ELSE                                  ; Used only to intiate master PubSub run 
   DO  [numgrp]=1,[numgrps]           ; Loop over all groups
   
       UD [numgrp],[grp]              ; Get current group number 
       [defgrps]                      ; Group selection file                   (input)
   
       ; Create PubSub run for this group
       VM                             ; Use PubSub to manage parallel processes   
       publish './spider spi/$DATEXT @@apshgrp {***[grp]} grp={***[grp]}'
    ENDDO
ENDIF

EN                              

; </body></pre></html>

@


1.10
log
@VAR  & max radius
@
text
@d1 1
a1 1
; <html><head><title>Computes and optionally applys alignment parameters</title></head><body><pre>
d4 6
a9 5
;                       New                                Nov 2004 ArDean Leith
;                       Rewritten                          Feb 2005 ArDean Leith
;                       Added alignment option & stack op  Nov 2006 ArDean Leith
;                       SET MP location                    Feb 2008 ArDean Leith
;                       VAR name                           Feb 2010 ArDean Leith
d16 1
a16 1
;<b>------------ Edit next 6 Input parameters ------------------------------ 
d21 1
a21 1
[range]   = 8   ; Translation search range (must be divisible by step size)
d25 1
a25 1
                ;   (EDIT as needed!) Used to find last alignment radius.
d32 1
a32 1
[parameters]        = '../params'             ; Parameter setting file
d34 1
a34 1
[defgrps]           = 'sel_group'             ; List of groups (group selection doc file)
d36 1
a36 1
[ref_images]        = 'projs/prj_{***[grp]}@@' ; Reference image name  
d40 1
a40 1
[unaligned_images]  = 'data{***[grp]}@@'       ; Unaligned particles stacks
d51 1
a51 1
TR OFF                                ; Decrease results file output
d53 4
a56 1
VB OFF                                ; Decrease results file output
d59 1
a59 1
IF ([grp] .GT. 0) [pubsub] = 0        ; Secondary PubSub run 
d61 2
a62 2
UD N [numgrps]                        ; Get number of groups 
[defgrps]                             ; Groups selection file           (input)
d64 2
a65 2
IF ([pubsub] .EQ. 0) THEN             ; Main loop runs 'AP SH'
                                      ; Used for Non-PubSub and PubSub runs 
d68 1
a68 1
   SET MP                             ; Use all processors (needed here for secondary runs)
d71 4
a74 3
   IF ([r2].LE.0) THEN                ; Compute alignment radius from object size  
      UD 5,[pxsz]                     ; Get pixel size (A) from this file
      [parameters]
d76 2
a77 2
      UD 17,[winsz]                   ; Get window size (pixels) from this file
      [parameters]
d79 3
a81 3
      [r2] = INT([diam]/(2.0*[pxsz])) ; Compute object radius (pixels) for last alignment ring
      [tp] = [r2] + [range]           ; Compute last ring + translation range
      [t]  = INT([winsz]/2) - 2       ; Compute max. radius of object within window
d83 2
a84 2
      IF ([tp] .GE. [t]) THEN
         [r2] = [t] - [range] - 1     ; Reduce radius of last alignment ring to fit window
d92 1
a92 1
      IF ([grp] .LT. 1) THEN          ; Group not on command line, use list from selection file        
d100 7
a106 7
      FI X [numpart]                  ; Get number of particles 
      [unaligned_images]              ; Unaligned particles name template      (input)
      (26)                            ; Max. image number in stack      

      FI X [numproj]                  ; Get number of projections 
      [ref_images]                    ; Unaligned particles name template      (input)
      (26)                            ; Max. image number in stack      
d114 1
a114 1
      [range],[step]                  ; Search range, step size  
d117 2
a118 2
      [unaligned_images]*****         ; Unaligned particles file name template (input)
      (1-[numpart])                   ; Number of particles  
d122 1
a122 1
      [align_parameters]              ; Alignment angles doc. file            (output)
d129 2
a130 2
         [unaligned_images]           ; Unaligned particles stack             (input) 
         [aligned_images]             ; Aligned particles stack               (output)
d132 1
a132 1
         [align_parameters]           ; Alignment angles doc. file            (input)
d145 2
a146 2
       ; Create parallel PubSub run for each group
       VM                             ; Use PubSub to create parallel processes   
@


1.9
log
@simplify-rewrite
@
text
@d8 1
d14 1
a14 1
;;
d31 1
a31 2
FR G
[parameters]../params                  ; Parameter setting file
d33 1
a33 2
FR G                                     
[defgrps]sel_group                     ; List of groups (group selection doc file)
d35 1
a35 2
FR G
[ref_images]projs/prj_{***[grp]}@@      ; Reference image name  
d37 1
a37 2
FR G
[ref_images_angles]refangles           ; Reference images angles doc. file
d39 1
a39 2
FR G
[unaligned_images]data{***[grp]}@@      ; Unaligned particles stacks
d43 1
a43 2
FR G
[align_parameters]align_01_{***[grp]}  ; Alignment parameters doc. file 
d45 1
a45 2
FR G
[aligned_images]dala01_{***[grp]}@@     ; Rotated, shifted (aligned) particles
d76 1
a76 1
      [t]  = INT([winsz]/2) - 1       ; Compute max. radius of object within window
@


1.8
log
@SET MP location
@
text
@d3 5
a7 4
; SOURCE: apshgrp.spi   New                               Nov 2004 ArDean Leith
;                       Rewritten                         Feb 2005 ArDean Leith
;                       Added alignment option & stack op Nov 2006 ArDean Leith
;                       SET MP location                   Feb 2008 ArDean Leith
d13 1
a13 3
;
; MASTER COPY: /net/bali/usr1/spider/docs/techs/recon/newprogs/
;
d31 1
a31 1
[parameters]../params                    ; Parameter setting file
d34 1
a34 1
[defgrps]../Reconstruction/sel_group     ; List of groups (group selection doc file)
d37 1
a37 1
[ref_images]projs/prj_{***[grp]}@@        ; Reference image name  
d40 1
a40 1
[ref_images_angles]refangles             ; Reference images angles doc. file
d43 1
a43 1
[unaligned_images]data{***[grp]}@@        ; Unaligned particles stacks
d48 1
a48 1
[align_parameters]align_01_{***[grp]}    ; Alignment parameters doc. file 
d51 1
a51 1
[aligned_images]dala01_{***[grp]}@@       ; Rotated, shifted (aligned) particles
d91 1
a91 1
   DO LB2 [numgrp]=1,[numgrps]        ; Loop over all group(s)
d138 1
a138 1
   LB2                                ; End loop for multiple groups
d141 1
a141 1
   DO LB3 [numgrp]=1,[numgrps]        ; Loop over all groups
d149 1
a149 1
    LB3
@


1.7
log
@projs/
@
text
@d6 1
a59 3
MD                 
SET MP                                ; Use all processors (needed here for secondary runs)
0
d70 4
@


1.6
log
@added stacks, named variables
@
text
@d34 1
a34 1
[defgrps]../Reconstruction/sel_group   ; List of groups (group selection doc file)
d37 1
a37 1
[ref_images]prj_{***[grp]}@@              ; Reference image name  
@


1.5
log
@MP
@
text
@d1 1
a1 1
; <html><head><title>Computes alignment parameters for sample images</title></head><body><pre>
d3 3
a5 2
; SOURCE: apshgrp.spi                 ArDean Leith    Nov 2004
;                                                     Feb 2005
d10 1
a10 1
;          For projects with multiple groups.
d16 2
a17 1
x12 = 0         ; If >0 use PubSub
d19 2
a20 2
x31 = 8 	; Translation search range (must be divisible by step size)
x32 = 2		; Translation step size
d22 1
a22 1
x20 = 276       ; Diameter of object (Angstroms) for alignment search.
d25 2
a26 2
x21 = 5		; First rotation alignment ring, only radii > this will be analyzed
x22 = 0         ; Last rotation ring (If zero, compute from object diameter)
d34 1
a34 1
[order]../Power_Spectra/order_defgrps    ; List of groups (group selection doc file)
d37 1
a37 1
[ref_images_template]prj_{***x77}@@****   ; Reference image name template  
d40 1
a40 1
[ref_images_selection]projlist           ; Reference images selection doc. file
d43 1
a43 1
[ref_images_angles]refangles             ; Reference images angles doc. file
d45 1
a45 2
FR G
[sample_images_template]../Particles/win/ser****** ; Sample image name template
d48 1
a48 3
[sample_images_selection]part_by_group_{***x77}    ; Particle selection doc file

; ----------------- Output files ---------------------------------------------
d51 1
a51 1
[align_parameters]align_01_{***x77}                ; Alignment parameters doc. file 
d56 1
a56 1
TR OFF                          ; Decreases results file output
d58 1
a58 1
VB OFF                          ; Decreases results file output
d60 1
a60 1
SET MP                          ; Use all processors
d63 2
a64 2
; DO NOT WORRY IF x77 IS UNDEFINED HERE, IT IS TAKEN CARE OF BY PUBSUB
IF (x77 .GT. 0) x12 = 0         ; Secondary PubSub run 
d66 2
a67 2
UD N,x70                        ; Get number of groups 
[order]                         ; Groups selection file           (input)
d69 2
a70 2
IF (x12 .EQ. 0) THEN            ; Main loop runs 'AP SH'
                                ; Used for Non PubSub and PubSub runs 
d72 2
a73 2
   IF (x22.LE.0) THEN           ; Compute alignment radius from object size  
      UD 5,x39                  ; Get pixel size (A) from this file
d76 1
a76 1
      UD 17,x52                 ; Get window size (pixels) from this file
d79 3
a81 3
      x22 = INT(x20/(2.0*x39))  ; Compute object radius (pixels) for last alignment ring
      x46 = x22 + x31           ; Compute last ring + translation range
      x45 = INT(x52/2) - 1      ; Compute max. radius of object within window
d83 2
a84 2
      IF (x46 .GE. x45) THEN
         x22 = x45 - x31 - 1    ; Reduce radius of last alignment ring to fit window
d88 1
a88 1
   IF (x77 .GT. 0) x70 = 1      ; Group listed on command line, overides list        
d90 1
a90 1
   DO LB2 x11=1,x70             ; Loop over all group(s)
d92 3
a94 3
      IF (x77 .LT. 1) THEN      ; Group not on command line, use list from selection file        
         UD x11,x77             ; Get current group number 
         [order]                ; Group selection file                  (input)
d97 1
a97 1
      DE                        ; Delete existing alignment parameter output doc. files.
d100 8
d109 1
a109 1
      echo  ' ' Aligning group: {****x77}   
d111 23
a133 15
      AP SH                     ; Align sample images using multiple references  
      [ref_images_template]     ; Reference image file name template     (input)
      [ref_images_selection]    ; Reference images selection doc. file   (input)
      x31,x32                   ; Search range, step size  
      x21,x22                   ; First and last ring      
      [ref_images_angles]       ; Ref. angles doc file                   (input)
      [sample_images_template]  ; Sample images file name template       (input)
      [sample_images_selection] ; Sample images selection doc. file      (input) 
      *                         ; No sample images align. doc file        
      (0)                       ; No restriction on angular proj. search 
      (1)                       ; Check mirrored positions
      [align_parameters]        ; Alignment angles doc. file             (output)

      MY FL                     ; Flush results file
      x77 = 0                   ; Reset default group for next group
d135 3
a137 1
   LB2                          ; End loop for multiple groups
d139 5
a143 5
ELSE                            ; Used only to intiate master PubSub run 
   DO LB3 x11=1,x70             ; Loop over all groups

       UD x11,x77               ; Get current group number 
       [order]                  ; Group selection file                   (input)
d146 2
a147 3
       VM                       ; Use PubSub to create parallel 'AP SH' processes   
       publish './spider spi/$DATEXT @@apshgrp {***x77} x77={***x77}'

@


1.4
log
@fix
@
text
@d60 3
@


1.3
log
@      x77 = 0                   ; Reset default group for next group
@
text
@d20 1
a20 1
x20 = 366.47    ; Diameter of object (Angstroms) for alignment search.
d35 1
a35 1
[ref_images_template]prj{***x77}/prj**** ; Reference image name template  
d88 1
a88 1
   DO LB2 x11=1,x70             ; Loop over all groups
d97 3
d101 1
a101 1
      AP SH                        ; Align sample images using multiple references  
@


1.2
log
@comments improved
@
text
@d112 1
@


1.1
log
@Initial revision
@
text
@d13 1
a13 3
; INSTRUCTIONS:  <a href="../pub_apsh.html">pub_apsh.html</a>
;
;<b>------------ Edit next 7 Input parameters ------------------------------ 
d61 1
a61 1
; DO NOT WORRY IF x77 UNDEFINED HERE, IT IS TAKEN CARE OF BY PUBSUB
d67 2
a68 1
IF (x12 .EQ. 0) THEN            ; Non-PubSub run or Secondary PubSub run 
d115 1
a115 1
ELSE                            ; Primary PubSub run
@
