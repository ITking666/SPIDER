head	1.7;
access;
symbols
	GPL_update:1.5
	pre_rewrite_2010:1.4
	pre_more_stack:1.4
	best-code:1.4
	no-named-regs:1.4
	pre_GPL:1.4
	tag_version1_0:1.4;
locks; strict;
comment	@:: @;


1.7
date	2012.05.04.16.03.52;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2011.08.09.16.26.12;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.19.19.01.40;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.16.19.04.43;	author bbaxter;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.21.21.15.50;	author bimal;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.05.12.43.03;	author bbaxter;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.29.16.01.38;	author bbaxter;	state Exp;
branches;
next	;


desc
@procedure file for particle picking
@


1.7
log
@added source
@
text
@; SOURCE:   spider/docs/techs/recon/newprogs/pickparticle.spi   BIMAL RATH : FEB 2003
;
; PICKS PARICLES FROM A MICROGRAPH. INPUTS ARE A MICROGRAPH AND THE 3D VOLUME
; OF THE PARTICLE THAT WE ARE SEARCHING FOR ITS PROJECTION INSIDE THE MICROGRAPH.
; USES A NON-ISOTROPIC MASK. USED ALAN ROSEMAN'S FORMULATION FOR CALCULATING 
; LOCAL CROSS-CORRELATION COEFFICIENTS(ULTRAMICROSCOPY 2003).

; MAKE SURE THAT BOTH THE MICROGRAPH AND THE 3D VOLUME OF THE PARTICLE 
; ARE OF SAME MAGNIFICATION (1 PIXEL = "N" NANOMETER) 

; READ INPUT FILES

FR 
?MICROGRAPH FILE (INPUT) NAME ?[micfile]

FR 
?PARTICLE VOLUME (INPUT) NAME ?[partvol]

FR
?NOISE FILE (INPUT, USED FOR NORMALIZATION) ?[noisefile] 

FR 
?WINDOWED PARTICLE SERIES (OUTPUT) TEMPLATE ?[winpart]

RR [v93]
?STARTING PARTICLE NUMBER ?

; PEAK SEARCH FILES
FR L
?DOC_FILE #5?[docfile5]
DOC_DELETED_5

; PROJECTION FILES USED FOR AVERAGING IF AVERAGING IS SELECTED
FR L
?DOC_FILE #6?[docfile6]
PRJ_DELETED_

; FILE WITH EULERIAN ANGLES AND INFO FROM PEAK SEARCH FILE
FR 
?DOCUMENT FILE (OUTPUT: WILL HAVE PARTICLE POSITION INFO.) NAME ?[posdoc]

; FIND IF A SELECTION DOC FILE USED.
RR [v41]
? DO YOU WANT TO USE A SELECTION FILE (NO = 0, YES = 1) ?

MD
  VB OFF


; IF SELECTION FILE IS NOT USED
IF ([v41] .NE. 1 ) THEN

   ; EULERIAN ANGLES BEGINING AND ENDVALUES 
   ; PHI ([v65]-[v68]), THETA([v66]-[v69]), PSI([v67]-[v73])
   ; NOTE: KEEP ENDVALUES ALWAYS +VE
 
   RR [v65]
   ?PHI, START ANGLE ?
   RR [v68]
   ?PHI, END ANGLE (+VE) ?
   RR [v74]
   ?PHI, SEARCH STEP SIZE (+VE) ?

   ; AVOID DIVISION BY ZERO
   IF ([v74].EQ.0) THEN
      [v74] = 1
   ENDIF

   RR [v66]
   ?THETA, START ANGLE ?
   RR [v69]
   ?THETA, END ANGLE (+VE) ?
   RR [v75]
   ?THETA, SEARCH STEP SIZE (+VE) ?

   ; AVOID DIVISION BY ZERO
   IF ([v75].EQ.0) THEN
      [v75] = 1
   ENDIF

   RR [v67]
   ?PSI, START ANGLE ?
   RR [v73]
   ?PSI, END ANGLE (+VE) ?
   RR [v76]
   ?PSI, SEARCH STEP SIZE (+VE) ?

   ; AVOID DIVISION BY ZERO
   IF ([v76].EQ.0) THEN
      [v76] = 1
   ENDIF

ENDIF

; IF SELECTION DOC FILE IS USED THEN  AVERAGE OF THE PROJECTIONS CAN BE USED
; AS SEARCH TEMPLATE. DIFFULT VALUE OF [v22] = 0 
[v22] = 0
IF ([v41] .EQ. 1) THEN
   ; ASK IF AN AVERAGE OF THE PROJECTIONS IS TO BE USED AS SEARCH TEMPLATE.
   RR [v22]
   ? USE AVERAGE OF THE PROJECTIONS AS SEARCH TEMPLATE (NO = 0, YES = 1) ?
ENDIF

; INTERPOLATION FACTOR 
RR [v89] 
?INTERPOLATION FACTOR (NO INTERPOLATION = 1, ELSE, ENTER DESIRED NUMBER ) ?

; # OF PEAKS TO BE SEARCHED 
RR [v95] 
? No. OF PEAKS TO BE SEARCHED ?

; NEIGHBOURHOOD DISTANCE FOR EXCLUSION 
RR [v35] 
?NEIGHBOURHOOD DISTANCE FOR PEAK EXCLUSION ?

[v35] = [v35]/[v89]

; FIND IF A SYMMETRIC MASK WILL BE USED.
RR [v51]
? DO YOU WANT TO USE A SYMMETRIC MASK FOR LCCC CALCULATION (NO = 0, YES = 1) ?


IF ([v51] .EQ. 0) THEN
   ; PIXEL VALUE FOR MASKING 
   RR [v83]
   ? PIXEL VALUE FOR MASKING (VALUES < ENTERED VALUE = 0, REST = 1) ?
ENDIF

; FIND PROJECT ID.
RR [proj]
? PROJECT ID NUMBER?

; FIND MICROGRAPH NUMBER.
RR [mic]
? MICROGRAPH NUMBER?

; DELETES THE DOCUMENT FILES IF THEY EXIST
IQ FI [v15]
[docfile5]
IF ([v15].EQ.1) THEN
   DE
   [docfile5]
ENDIF

IQ FI [v15]
[docfile6]
IF ([v15].EQ.1) THEN
   DE
   [docfile6]
ENDIF

IQ FI [v15]
[posdoc]
IF ([v15].EQ.1) THEN
   DE
   [posdoc]
ENDIF

; FIND NSAM AND NROW OF THE MICROGRAPH
FI [v20],[v21]
[micfile]
12,2

; FIND NSAM,NROW AND NSLICE OF THE PARTICLE VOLUME
FI [v23],[v24],[v25]
[partvol]
12,2,1

; COPY IMAGES INTO MEMORY SO THAT IT CAN BE ACCESSED QUICKLY A NUMBER OF TIMES
; IN THE FOLLOWING LOOPS 
; NOTE: DON'T REUSE _1 AND _99

IF ([v89] .EQ. 1) THEN
   CP 
   [partvol]
   _1
 
   CP 
   [micfile]
   _99
   
ELSE
   [v52] = INT([v23]/[v89])
   [v53] = INT([v24]/[v89])
   [v54] = INT([v25]/[v89])
      
   [v48] = INT([v20]/[v89])
   [v49] = INT([v21]/[v89])
  
   IP
   [partvol]
   _1
   [v52],[v53],[v54]
   
   IP
   [micfile]
   _99
   [v48],[v49] 
ENDIF

; FIND NSAM AND NROW OF THE INTERPOLATED MICROGRAPH
; KEPT THE SAME VARIABLE NAME AS ABOVE
FI [v20],[v21]
_99
12,2

; FIND NSAM, NROW AND NSLICE OF THE INTERPOLATED PARTICLE VOLUME
; KEPT THE SAME VARIABLE NAME AS ABOVE
FI [v23],[v24],[v25]
_1
12,2,1

; FIND THE MINIMUM OF NSAM AND NROW OF SMALL VOLUME

IF ([v23].LT.[v24]) THEN 
   [v29] = [v23]
ELSE 
   [v29] = [v24]
ENDIF

[v13] = INT([v29]/2)-1

[v86] = [v20]-[v23]+1
[v87] = [v21]-[v24]+1

[v33] = INT([v23]/2)+1
[v34] = INT([v24]/2)+1

; EULER ANGLE SEARCH IS DONE HERE

; PJ 3 DOESN'T GIVE CORRECT RESULTS IF SOME PIXEL VALUES ARE -VE
;AR SCA
;[partvol]
;_1
;0,100
        
IF ([v41] .EQ. 1) THEN
   ; ASK FOR SELECTION DOC FILE WITH EULERIAN ANGLES
   FR 
   ?SELECTION DOC_FILE ?[sel_doc]

   UD N, [v42],[v43]
   [sel_doc]
   
   ; END VALUES FOR LOOPS   
   [v77] = [v42]
   [v78] = 1
   [v79] = 1
   
   ; IF AVERAGE OF PROJECTIONS IS USED AS TEMPLATE
   IF ([v22] .EQ. 1) THEN   
      [v77] = 1
   ENDIF     
   
ELSE 
   ; EULER ANGLES ARE PROVIDED AT THE PROMPT  
   ; END VALUES FOR LOOPS         
   [v77] = (([v68]-[v65])/[v74])+1
   [v78] = (([v69]-[v66])/[v75])+1
   [v79] = (([v73]-[v67])/[v76])+1  
ENDIF

DO [v72] = 1, [v79]
   [v58] = [v67]+([v72]-1)*[v76] 
   
   DO [v71] = 1, [v78]
      [v57] = [v66]+([v71]-1)*[v75]
      
      DO [v70] = 1, [v77]  
         [v56] = [v65]+([v70]-1)*[v74]   
                 
         IF  ([v41]. EQ. 1) THEN
            UD IC, [v70],[v56],[v57],[v58]
            [sel_doc]
         ENDIF

         ; DO LOOP #
         [v90] = ([v72]-1)*[v77]*[v78] + ([v71]-1)*[v77] + [v70]        

         ; AVERAGE OF PROJECTIONS IS NOT USED AS TEMPLATE
         IF ([v22] .NE. 1) THEN 
         
            ; MAKE A PROJECTION
            ; NOTE: DON'T REUSE _2
            PJ 3
            _1
            [v23],[v24]
            _2
            [v56],[v57]
            [v58]
            
         ; AVERAGE OF PROJECTIONS IS USED AS TEMPLATE
         ELSE  
             
            PJ 3Q
            _1
            [v13]
            1-[v42]
            [sel_doc]
            [docfile6]***
      
            AS R
            [docfile6]***
            1-[v42] 
            A
            _2 
            _40                    
            
         ENDIF

         IF ([v51] .EQ. 0) THEN
            ; ASYMMETRIC MASK
            
            ; IF AVERAGE OF PROJECTIONS IS USED AS TEMPLATE
            IF ([v22] .EQ. 1) THEN  
               ; MAKE SURE THAT [v83] IS THE RIGHT MASKING VALUE FOR THE AVERAGE
               ; OF THE PROJECTIONS
               TH M
               _2
               _4
               B
               [v83]          
            ELSE             
            
               ; CANN'T JUST USE THRESHOLDING SINCE THE PIXEL VALUES
               ; CHANGES FOR EACH PROJECTION.
               ; SO I AM MAKING A MASK OF THE 3D STRUCTURE AND THEN USING PJ3
               ; TO PROJECT AND THEN USING STANDARD DEVIATION VALUE TO 
               ; THRESHOLD. I HAVE VERIFIED IT WORKS QUITE O.K., BUT MAY NOT BE
               ; PERFECT. TO GET THE PERFECT RESULT ONE MAY NEED TO CHANGE 
               ; THE THRESHOLD VALUE AND USE IT DIRECTLY ON _2 (NO NEED TO CREATE
               ; THE BINARY MASK AND GET A PROJECTION FROM IT AND THEN DO 
               ; THRESHOLDING USING STANDARD DEVIATION VALUE) 
               
              IF ([v90] .EQ. 1) THEN
                  ; DO ONLY ONCE
                  TH M
                  _1
                  _30
                  B
                  [v83]
               ENDIF   
            
               PJ 3
               _30
               [v23],[v24]
               _31
               [v56],[v57]
               [v58]

               ;cp
               ;_31
               ;prj_bin_see_me{***[v90]}  
          
               FS [v98],[v99],[v88],[v59]
               _31
         
               ; THRESHOLD THE PROJECTION
               ; NOTE: DON'T REUSE _4            
               TH M
               _31
               _4
               B
               [v59]
            ENDIF                       
         ELSE        
            ; SYMMETRIC MASK
            ; MAKE A CIRCULAR MASK. PIXELS OUTSIDE THE RADIUS = 0 
            ; PIXELS INSIDE = 1        

            ; DO IT ONLY ONCE
            IF ([v90] .EQ. 1) THEN
               ; IF _4 EXISTS THEN DELETE IT. COMMAND PT WON'T ASK FOR 
               ; NSAM AND NROW INPUTS IF THE FILE EXISTS. WHEN PICKPARTICLE
               ; PROCEDURE IS CALLED INSIDE ANOTHER PROCEDURE IT WILL CAUSE
               ; ERROR
               
               IQ FI [v16]
               _4
               IF ([v16].EQ.1) THEN
                  DE
                  _4
               ENDIF
            
               PT
               _4
               [v23],[v24]
               C
               [v33],[v34]
               [v29]/2
               N
            ENDIF  
         ENDIF 

         ;cp
         ;_2
         ;prj_see_me{***[v90]} 
            
         ;cp
         ;_4
         ;mask_see_me{***[v90]}

         FS [v80],[v81],[v50],[v82]
         _4
         
         ; TOTAL NUMBER OF NON-ZERO PIXELS INSIDE THE MASK
         [v50] = [v50]*[v23]*[v24]

         ; IN ASYMMETRIC CASE SET [v55] =1 FOR ALL LOOPS
         ; IN SYMMETRIC  CASE SET [v55] =1 ONLY FOR THE FIRST LOOP
         IF ([v51] .EQ. 0) THEN
            [v55] = 1
         ELSE 
            [v55] =0
         ENDIF

         IF ([v90] .EQ. 1) THEN
            [v55] = 1
         ENDIF

         ; CALCULATE LOCAL STANDARD DEVIATION ONLY ONCE IN SYMMETRIC CASE
         ; CALCULATE LOCAL STANDARD DEVIATION FOR EACH ORIENTATION IN ASYMMETRIC CASE

         IF ([v55] .EQ. 1) THEN
            ; CREATE A BLANK IMAGE, SAME SIZE AS LARGE IMAGE
            MO 
            _5
            [v20],[v21]
            B
            (0)

            ; INSERT THE MASK INSIDE THE BLANK IMAGE
            IN
            _4
            _5
           (1,1)

            ; DO FT ON BLANK IMAGE(WITH THE MASK INSERTED)
            ; NOTE: DON'T REUSE _6
            FT
            _5
            _6

            ; DO IT ONLY ONCE
            IF ([v90] .EQ. 1) THEN
               ; DO FT ON LARGE IMAGE
               FT
               _99
               _86
            ENDIF   

            ; MULTIPLY FT OF LARGE IMAGE WITH COMPLEX CONJUGATE 
            ; OF FT OF BLANK IMAGE
            MU M
            _86
            _6
            _8
            *

            ; DO INVERSE FT
            FT
            _8
            _9

            ; NORMALIZE 
            AR
            _9
            _10
            (P1+0)/([v50])

            SQ
            _10
            _11

            ; REUSE MEMORY SPACE FOR STORING IMAGE ( _5,_8 - _10)

            ; DO IT ONLY ONCE
            IF ([v90] .EQ. 1) THEN
               SQ
               _99
               _87
         
               ; DO FT ON SQUARE OF THE LARGE IMAGE
               FT
               _87
               _88
            ENDIF   
  
            ; MULTIPLY FT OF SQUARE OF LARGE IMAGE WITH COMPLEX CONJUGATE 
            ; OF FT OF BLANK IMAGE
            MU M
            _88
            _6
            _7

            ; DO INVERSE FT
            FT
            _7
            _8

            ; NORMALIZE
            AR
            _8
            _9
            (P1+0)/([v50])

            SU
            _9
            _11
            _10

            ; GET RID OF SQRT OF -VE # AND DIVISION BY ZERO(WHILE DIVIDING THE 
            ; CCF BY LOCAL STANDARD DEVIATION)
            TH M
            _10
            _80
            B
            (0)
            
            MM
            _80
            _10
            (9E+20)
  
            ; LOCAL STANDARD DEVIATION
            WU
            _10
            _3
           
            ; NOTE: DON'T REUSE _5  
            WI
            _3
            _5                        
            [v86],[v87]         
            (1,1)

         ENDIF

         ; PREPARE THE REFERENCE IMAGE SUCH THAT THE AVERAGE INSIDE 
         ; THE MASK = 0 AND THE STANDARD DEVIATION INSIDE THE MASK = 1
         MM
         _4
         _2
         (0)
   
         ; FIND AVERAGE
         FS [v60],[v61],[v62],[v63]
         _2
         
         ; SUM
         [v40] = [v62]*([v23]*[v24])
         
         SQ
         _2
         _7
               
         ; FIND AVERAGE
         FS [v60],[v61],[v62],[v63]
         _7

         ; SUM
         [v45] = [v62]*([v23]*[v24])

         ; SD INSIDE MASK        
         [v46] = SQRT(([v45] -(([v40]*[v40])/[v50]))/([v50]-1))

         ; AVG INSIDE MASK         
         [v47]  =  [v40]/[v50]    
         
         ;NORMALIZE
         AR
         _2
         _8
         (P1-[v47])/[v46]

         MM
         _4
         _8
         (0)

         ; CREATE AN EMPTY IMAGE OF DIMENSION = MICROGRAPH DIMENSION 
         ; AND PASTE THE PREPARED REFERNCE IMAGE AT THE LEFT
	 ; CORNER OF THIS EMPTY IMAGE           
         MO 
         _9
         [v20],[v21]
         B
         (0)

         [v36] = INT(([v20]-[v23])/2)+1
         [v37] = INT(([v21]-[v24])/2)+1 
                        
         IN
         _8
         _9
         (1,1)

         ; FIND CROSS CORRELATION FUNCTION OF THE ABOVE IMAGE WITH
         ; WITH THE LARGE IMAGE
                          
         FT
	 _9
	 _60
	 
	 
	 ; SET F(0,0) ELEMENT = ZERO. DONE TO DO SIMILAR NORMALIZATION
         ; AS DONE IN REAL SPACE 
	 
         RP
	 _60
	 (1,1)
	 (0)

         RP
	 _60
	 (2,1)
	 (0)

         FT
	 _99
	 _61
	 
	 ; DON'T CHANGE ORDER OF INPUT IN THE FOLLOWING OPERATION

	 MU M
	 _61
	 _60
	 _62	 
         *
	 
         ; DO INVERSE FT	 
	 FT
	 _62
	 _10
	 
         WI
         _10
         _3
         [v86],[v87]
         (1,1)              

         ; DIVIDE THE CC FUNCTION WITH TOTAL NUMBER OF NON-ZERO PIXELS
         ; INSIDE THE MASK         
         AR
         _3
         _7
         P1/[v50]

         ; DIVIDE THE  ABOVE RESULT WITH CORRESPONDING ELEMENT OF 
         ; THE LOCAL STANDARD DEVIATION ARRAY 
         MU D
         _7
         _5
         _8
         *
        
         ; COMPARE THE CROSS-CORRELATION FILE IN EACH LOOP AND CREATE AN
         ; OUTPUT FILE WITH THE HIGHEST PIXEL VALUE  
         IF ([v90] .EQ. 1) THEN
            ; FOR FIRST LOOP, COPY THE FILE
            CP
            _8
            _97
         ELSE
            ; FOR MORE THAN ONE LOOP COMPARE THE CROSS-CORRELATION FILES
            MX
           _8
           _97
           _98
   
           ; COPY THE OUTPUT FILE SO THAT IT BECOMES ONE OF THE INPUT FILES
           ; FOR THE NEXT LOOP
           CP
           _98
           _97
         ENDIF                                                                           
      ENDDO
   ENDDO
ENDDO 

;CP
;_97
;save_cross_corr

; DO RESTRICTED PEAK SEARCH                 
PK DR
_97
([v95],1)
(1,1)
[v35]
[docfile5]

; FIND MAX KEY NO.
UD N, [v91],[v92]
[docfile5]

;INSERT COMMENTS
SD /         X           Y       PARTICLE NO.   PEAK HT
[posdoc]

; WRITE XY POSITIONS AND PEAK HEIGHT VALUE TO FILE [posdoc]
DO [v96] = 1,[v91]
   UD IC,[v96],[v11],[v12],[v18]
   [docfile5]
            
   ; CORRECT FOR THE CENTER OF THE PEAK WITH RESPECT TO LARGE IMAGE.
   ; THE PEAK HEIGHT DETERMINED IN PEAK SEARCH STEP IS WITH RESPECT TO THE
   ; IMAGE CREATED BY SUBSTRACTING THE DIMENSION OF REFERENCE IMAGE
   ; FROM THE LARGE IMAGE. FACTOR OF NSAM/2+1, NROW/2+1 AND NSLICE/2+1
   ; ARE ADDDED
   [v30] = [v11]+[v33]
   [v31] = [v12]+[v34]
   [v30] = [v30]*[v89] +1
   [v31] = [v31]*[v89] +1           
            
   [v44] = ([v93]-1) + [v96]      
   SD [v96],[v30],[v31],[v44],[v18]
   [posdoc] 
   ;SD [v96],[v30],[v31]
   ;annotate                 
     
ENDDO
        
UD ICE
[docfile5]
         
DE
[docfile5]             

;SD /         X           Y          PEAK HT
;[posdoc]

SD E
[posdoc]
 
; WINDOW PARTICLES FROM THE INPUT MICROGRAPH 
 
UD N, [v38],[v39]
[posdoc]
UD E

; FIND NSAM,NROW AND NSLICE OF THE PARTICLE VOLUME
; NEED TO BE DONE AGAIN BECAUSE THE VARIABLES HAVE BEEN CHANGED AFTER
; INTERPOLATION IS DONE

FI [v23],[v24]
[partvol]
12,2

[v33] = INT([v23]/2)+1
[v34] = INT([v24]/2)+1

; COPY NOISE FILE TO MEMORY
CP
[noisefile]
_27

; FIND RADIUS OF MASK FILE
IF ([v23].LT.[v24]) THEN 
   [v29] = [v23]
ELSE 
   [v29] = [v24]
ENDIF
[v13] = INT([v29]/2)-1

; MAKE A MASK FILE
MO
_26
[v23],[v24]
C
[v13]

; PIXELS THOSE ARE PART OF THE PARTICLE ARE EXCLUDED FROM NORMALIZATION
AR
_26
_28
(P1-1)*(-1)

DO [v26] = 1,[v38]

   UD IC [v26],[v27],[v28],[v94],[v97]
   [posdoc]

   [v84] = [v27] - [v33]
   [v85] = [v28] - [v34]
   
   WI
   [micfile]
   _29
   [v23],[v24]
   [v84],[v85]

   RA
   _29
   _22

   ; NORMALIZE AS PER HISTOGRAM
   CE FIT
   _27
   _22
   _28
   [winpart]{******[v94]}

   ST H             ; Save micrograph # and img. # in header aug 2011
   [winpart]{******[v94]}
   PROJ,MIC,NUM
   [proj],[mic],[v94]

ENDDO

UD ICE
[posdoc]

DE A
[docfile6]001

RE

@


1.6
log
@ST H             ; Save micrograph # and img. # in header aug 2011
@
text
@d1 1
a1 1
; pickparticle.bat     	          		BIMAL RATH : FEB 2003
d47 1
a47 1
VB OFF
@


1.5
log
@simplify-rewrite
@
text
@d129 8
d803 5
@


1.4
log
@made it end with RE
@
text
@a7 4
MD
VB OFF


d14 1
a14 1
?MICROGRAPH FILE (INPUT) NAME ?<1>
d17 1
a17 1
?PARTICLE VOLUME (INPUT) NAME ?<2>
d20 1
a20 1
?NOISE FILE (INPUT, USED FOR NORMALIZATION) ?<3> 
d23 1
a23 1
?WINDOWED PARTICLE SERIES (OUTPUT) TEMPLATE ?<5>
d25 1
a25 1
RR X93
d30 1
a30 1
?DOC_FILE #5?<7>
d35 1
a35 1
?DOC_FILE #6?<8>
a37 1

d40 1
a40 1
?DOCUMENT FILE (OUTPUT: WILL HAVE PARTICLE POSITION INFO.) NAME ?<9>
d43 1
a43 1
RR X41
d46 4
d51 1
a51 1
IF (X41 .NE. 1 ) THEN
d54 1
a54 1
   ; PHI (X65-X68), THETA(X66-X69), PSI(X67-X73)
d57 1
a57 1
   RR X65
d59 1
a59 1
   RR X68
d61 1
a61 1
   RR X74
d65 2
a66 2
   IF (X74.EQ.0) THEN
      X74 = 1
d69 1
a69 1
   RR X66
d71 1
a71 1
   RR X69
d73 1
a73 1
   RR X75
d77 2
a78 2
   IF (X75.EQ.0) THEN
      X75 = 1
d81 1
a81 1
   RR X67
d83 1
a83 1
   RR X73
d85 1
a85 1
   RR X76
d89 2
a90 2
   IF (X76.EQ.0) THEN
      X76 = 1
d96 3
a98 3
; AS SEARCH TEMPLATE. DIFFULT VALUE OF X22 = 0 
X22 = 0
IF (X41 .EQ. 1) THEN
d100 1
a100 1
   RR X22
d105 1
a105 1
RR X89 
d109 1
a109 1
RR X95 
d113 1
a113 1
RR X35 
d116 1
a116 1
X35 = X35/X89
d119 1
a119 1
RR X51
d123 1
a123 1
IF (X51 .EQ. 0) THEN
d125 1
a125 1
   RR X83
d130 3
a132 3
IQ FI X15
<7>
IF (X15.EQ.1) THEN
d134 1
a134 1
   <7>
d137 3
a139 3
IQ FI X15
<8>
IF (X15.EQ.1) THEN
d141 1
a141 1
   <8>
d144 3
a146 4

IQ FI X15
<9>
IF (X15.EQ.1) THEN
d148 1
a148 1
   <9>
a150 1

d152 2
a153 2
FI X20,X21
<1>
d157 2
a158 2
FI X23,X24,X25
<2>
a160 1

d165 1
a165 1
IF (X89 .EQ. 1) THEN
d167 1
a167 1
   <2>
d171 1
a171 1
   <1>
d175 3
a177 3
   X52 = INT(X23/X89)
   X53 = INT(X24/X89)
   X54 = INT(X25/X89)
d179 3
a181 4
   X48 = INT(X20/X89)
   X49 = INT(X21/X89)

   
d183 1
a183 1
   <2>
d185 1
a185 1
   X52,X53,X54
d188 1
a188 1
   <1>
d190 1
a190 2
   X48,X49
   
d195 1
a195 1
FI X20,X21
d201 1
a201 1
FI X23,X24,X25
d207 2
a208 2
IF (X23.LT.X24) THEN 
   X29 = X23
d210 1
a210 1
   X29 = X24
d213 1
a213 1
X13 = INT(X29/2)-1
d215 2
d218 2
a219 2
X86 = X20-X23+1
X87 = X21-X24+1
a220 3
X33 = INT(X23/2)+1
X34 = INT(X24/2)+1

d225 1
a225 1
;<2>
d229 1
a229 3


IF (X41 .EQ. 1) THEN
d232 1
a232 1
   ?SELECTION DOC_FILE ?<4>
d234 2
a235 2
   UD N, X42,X43
   <4>
d238 3
a240 3
   X77 = X42
   X78 = 1
   X79 = 1
d243 2
a244 2
   IF (X22 .EQ. 1) THEN   
      X77 = 1
d250 3
a252 3
   X77 = ((X68-X65)/X74)+1
   X78 = ((X69-X66)/X75)+1
   X79 = ((X73-X67)/X76)+1  
d255 2
a256 4


DO LB4 X72 = 1, X79
   X58 = X67+(X72-1)*X76 
d258 2
a259 2
   DO LB5 X71 = 1, X78
      X57 = X66+(X71-1)*X75
d261 2
a262 2
      DO LB6 X70 = 1, X77  
         X56 = X65+(X70-1)*X74   
d264 3
a266 4
         IF  (X41. EQ. 1) THEN
            UD IC, X70,X56,X57,x58
            <4>
         
d270 1
a270 1
         X90 = (X72-1)*X77*X78 + (X71-1)*X77 + X70        
d273 1
a273 1
         IF (X22 .NE. 1) THEN 
d279 1
a279 1
            x23,x24
d281 2
a282 2
            X56,X57
            X58
d289 4
a292 4
            X13
            1-X42
            <4>
            <8>***
d295 2
a296 2
            <8>***
            1-X42 
d303 1
a303 1
         IF (X51 .EQ. 0) THEN
d307 2
a308 2
            IF (X22 .EQ. 1) THEN  
               ; MAKE SURE THAT X83 IS THE RIGHT MASKING VALUE FOR THE AVERAGE
d314 1
a314 1
               X83          
d327 1
a327 1
              IF (X90 .EQ. 1) THEN
d333 1
a333 1
                  X83
d338 1
a338 1
               X23,X24
d340 8
a347 6
               X56,X57
               X58
;cp
;_31
;prj_bin_see_me{***x90}            
               FS X98,X99,X88,X59
d356 1
a356 1
               X59
d364 1
a364 1
            IF (X90 .EQ. 1) THEN
d370 1
a370 1
               IQ FI X16
d372 1
a372 1
               IF (X16.EQ.1) THEN
d379 1
a379 1
               X23,X24
d381 2
a382 2
               X33,X34
               X29/2
d387 3
a389 3
;cp
;_2
;prj_see_me{***x90} 
d391 3
a393 3
;cp
;_4
;mask_see_me{***x90}
d395 1
a395 2

         FS X80,X81,X50,X82
d399 1
a399 1
         X50 = X50*X23*X24
d401 4
a404 4
         ; IN ASYMMETRIC CASE SET X55 =1 FOR ALL LOOPS
         ; IN SYMMETRIC  CASE SET X55 =1 ONLY FOR THE FIRST LOOP
         IF (X51 .EQ. 0) THEN
            X55 = 1
d406 1
a406 1
            X55 =0
d409 2
a410 2
         IF (X90 .EQ. 1) THEN
            X55 = 1
d416 1
a416 1
         IF (X55 .EQ. 1) THEN
d420 1
a420 1
            X20,X21
d437 1
a437 1
            IF (X90 .EQ. 1) THEN
d461 1
a461 1
            (P1+0)/(X50)
d470 1
a470 1
            IF (X90 .EQ. 1) THEN
d497 1
a497 1
            (P1+0)/(X50)
d526 1
a526 1
            X86,X87         
d539 1
a539 1
         FS X60,X61,X62,X63
d543 1
a543 1
         X40 = X62*(X23*X24)
d550 1
a550 1
         FS X60,X61,X62,X63
d554 1
a554 1
         X45 = X62*(X23*X24)
d557 1
a557 1
         X46 = SQRT((X45 -((X40*X40)/X50))/(X50-1))
d560 1
a560 1
         X47  =  X40/X50    
d566 1
a566 1
         (P1-X47)/X46
d578 1
a578 1
         X20,X21
d582 2
a583 2
         X36 = INT((X20-X23)/2)+1
         X37 = INT((X21-X24)/2)+1 
a610 1

a627 1

d631 1
a631 1
         X86,X87
d639 1
a639 1
         P1/X50
d651 1
a651 1
         IF (X90 .EQ. 1) THEN
d668 4
a671 5
         ENDIF
                                                                              
      LB6
   LB5
LB4 
d680 1
a680 1
(X95,1)
d682 2
a683 2
X35
<7>
d686 2
a687 2
UD N, X91,X92
<7>
d691 1
a691 1
<9>
d693 4
a696 4
; WRITE XY POSITIONS AND PEAK HEIGHT VALUE TO FILE <9>
DO LB10 X96 = 1,X91
   UD IC,X96,X11,X12,X18
   <7>
d703 4
a706 4
   X30 = X11+X33
   X31 = X12+X34
   X30 = X30*X89 +1
   X31 = X31*X89 +1           
d708 4
a711 4
   X44 = (X93-1) + X96      
   SD X96,X30,X31,X44,X18
   <9> 
   ;SD X96,X30,X31
d714 1
a714 2

LB10
d717 1
a717 1
<7>
d720 1
a720 1
<7>             
d723 1
a723 1
;<9>
d726 1
a726 1
<9>
d728 1
a728 1
; WINDOW THE PARTICLES FROM THE INPUT MICROGRAPH 
d730 2
a731 2
UD N, X38,X39
<9>
d738 2
a739 2
FI X23,X24
<2>
d742 2
a743 2
X33 = INT(X23/2)+1
X34 = INT(X24/2)+1
d747 1
a747 1
<3>
d751 2
a752 2
IF (X23.LT.X24) THEN 
   X29 = X23
d754 1
a754 1
   X29 = X24
d756 1
a756 1
X13 = INT(X29/2)-1
d761 1
a761 1
X23,X24
d763 1
a763 1
X13
d771 1
a771 1
DO LB2 X26 = 1,X38
d773 2
a774 2
   UD IC,X26,X27,X28,X94,X97
   <9>
d776 2
a777 2
   X84 = X27 - X33
   X85 = X28 - X34
d780 1
a780 1
   <1>
d782 2
a783 2
   X23,X24
   X84,X85
d794 1
a794 1
   <5>{******X94}
d796 1
a796 1
LB2
d799 1
a799 1
<9>
d802 1
a802 1
<8>001
@


1.3
log
@made real space equivalent calculation for ccc
@
text
@d819 1
a819 1
EN
@


1.2
log
@added bimal's update
@
text
@d23 3
d526 1
a526 1
            (9E+10)
d585 2
a586 2
         ; AND PASTE THE PREPARED REFERNCE IMAGE AT THE MIDDLE OF 
         ; THIS EMPTY IMAGE           
d599 1
a599 1
         X36,X37
d604 36
a639 4
         CC
         _99
         _9
         _10
d645 1
a645 1
         X33,X34               
d694 2
a695 1
(X95,0)
d703 4
d717 2
a718 2
   X30 = X11+INT(X20/2)
   X31 = X12+INT(X21/2)
d722 2
a723 2
         
   SD X96,X30,X31,X18
d737 2
a738 2
SD /         X           Y          PEAK HT
<9>
d760 26
d788 1
a788 1
   UD IC,X26,X27,X28,X97
a793 1
   X94 = (X93 - 1) + X26
d796 1
a796 1
   <5>{******X94}
d800 11
d819 1
a819 1
RE
@


1.1
log
@Initial revision
@
text
@d351 3
a353 3
cp
_31
prj_bin_see_me{***x90}            
d394 3
a396 3
cp
_2
prj_see_me{***x90} 
d398 3
a400 3
cp
_4
mask_see_me{***x90}
a667 4

SD /         X           Y          PEAK HT
<9>

d697 3
d731 1
a731 1
   <5>{*****X94}
@
