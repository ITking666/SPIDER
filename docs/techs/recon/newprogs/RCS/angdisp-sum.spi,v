head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2015.07.16.13.16.46;	author leith;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@; <html><head><title>Makes view of angular distribution of projections used in reconstruction</title></head><body><pre>
;
; SOURCE:  spider/docs/techs/recon/newprogs/angdisp.spi 
;                Added lower hemisphere   Feb 2005 al
;                VAR                      Feb 2010 al
;
; Purpose: Makes SPIDER image views of angular data output from refinement.
;          Creates two side by side images showing the angular direction 
;          assigned to each of the sample images in the reconstruction.
;          Left hemisphere is for projections from above and right hemisphere
;          is for projections from the lower direction. These are
;          essentially polar coordinate plots. Both plots are viewed 
;          from above on the sphere.
;          For a given defocus group, makes maps for each refinement iteration.
;          User may select which defocus groups to compute.
;          DEFAULT: does all iterations for 1st defocus group.
;
; I/O PARAMETERS AND FILES ARE SET HERE:
;
; <b> ----------- Input Parameters ---------------------------------------

 [g1] = 1       ; First defocus group
 [g2] = -1      ; Last defocus group (-1 = do all groups)

 [i1] = 1       ; First iteration
 [i2] = -1      ; Last iteration (-1 = do all iterations) 

 ;  ----------- Input files ---------------------------------------

 [angles] = 'final/align_{**[iter]}_{***[grp]}'  ; Expects psi,theta,phi in register 1,2,3

 ; --------------- Output files  -------------------------------------
 
 [dir]    = 'display'                     ; Output directory

 [disp]   = 'disp_{**[iter]}_{***[grp]}'  ; Output image file name template

 ; -------------- END BATCH HEADER ------------------------------</b>

 ; Temporary files
 [temp_running_sum] = '_1'
 [temp_small_image] = '_3'

 [smallRadius]    = 2                    ; Radius of the small circles in plot
 [smallDim]       = 2*[smallRadius] + 1
 [smallCenter]    = [smallRadius] + 1
 [siz]            = 607                  ; Single image size
 [sizm1]          = [siz] - 2            ; Single image size - 1 pixel border
 [plotRadius]     = 300                  ; Plot radius
 [plotRadiusPad]  = [plotRadius] + 2
 [rp]             = [plotRadius] + 3
 [dfs]            = 2 * [siz]            ; Double frame size

 SYS                                     ; Make output directory if necessary
   mkdir -p [dir]

 [out] = '[dir]/[disp]'                  ; Create output file names

 BL                                      ; Create a blank image
   [temp_small_image]
   [smallDim],[smallDim] 
   N
   0.0 

 PT                                      ; Mark location in image 
   [temp_small_image]                    ; Image file
   CL                                    ; Circle (Looks like square due to small radius)
   [smallCenter],[smallCenter]           ; Center coordinates
   [smallRadius]                         ; Radius
   N                                     ; No more 

 MD
   SET MP
   0

 IF ([g2] == -1) [g2] = 999              ; Do all defocus groups

 DO [grp] = [g1],[g2]                    ; Loop over defocus groups

   [iter] = [i1]                         ; First iteration number

   IQ FI [exists]                        ; See if passed last defocus group
     [angles]

   IF ([exists] .NE. 1) EXIT             ; Quit loop if def, group not found

   IF ([i2].EQ.-1) [i2] = 999            ; Do all iterations

   DO [iter] = [i1],[i2]                 ; Loop over refinement iterations

      IQ FI [exists]                     ; see if passed last iteration number
        [angles]

      IF ([exists] .NE. 1)  EXIT         ; Quit inner loop if iteration not found

      BL                                 ; Create a blank image
        [temp_running_sum]
        [dfs],[siz]                      ; Dual frame size
        N
        0.0 

      UD N [npr]                         ; Get number of projections in this group
        [angles]

      [rit] = 0                          ; Projections on right frame hemisphere

      DO                                 ; Loop over projections in the group
         UD NEXT [k],[psi],[theta],[psi] ; Doc file with  angles
           [angles]                      ; Angle file      (input) 
         IF ([k] <= 0) EXIT              ; End of angles file

         [frameOffset] = 0
         IF ([theta] > 90.0) THEN        ; Lower hemisphere projection
            [theta] = 180.0 - [theta]

            IF ([psi] > 360.0) [psi] = [psi] - 360.0
            [frameOffset] = [siz]        ; Right frame offset
            [rit] = [rit] + 1            ; Projections on right frame hemisphere
         ENDIF

         [latitude] = [theta]/90
         [latitude] = [latitude]* [plotRadius]
         [xcenter]  = cos([psi])
         [ycenter]  = sin([psi])
         [xcenter]  = [xcenter] * [latitude]
         [ycenter]  = [ycenter] * [latitude]
         [xcenter]  = [xcenter] + [rp] + [frameOffset]
         [ycenter]  = [ycenter] + [rp]
   
         [topLeftX] = [xcenter] - [smallRadius]
         [topLeftY] = [ycenter] - [smallRadius]
         
         PA                              ; Add small-image patch to larger image
           [temp_small_image]            ; Small-circle image-patch  (input)
           [temp_running_sum]            ; Large image  (input/output)
           [topLeftX],[topLeftY]
      ENDDO

      UD ICE
        [angles]

      FS                                 ; Get max/min
        [temp_running_sum]

      PT                                 ; Draw large circle on left frame
        [temp_running_sum]
        CL
        [rp],[rp] 
        [plotRadiusPad]  ; WAS (302)     ; Radius
        N

      [v1] = [rp] + [siz]
      PT                                 ; Draw large circle on right frame
        [temp_running_sum]
        CL
        [v1],[rp] 
        [plotRadiusPad]  ; WAS (302)     ; Radius
      N

      PT                                 ; Draw axes lines on left frame
        [temp_running_sum]
        L
        1,[rp] 
        [sizm1],[rp] 
        Y
        L
        [rp],1 
        [rp],[sizm1] 
        N

      [v1] = [rp] + [siz]
      [v2] = [sizm1] + [siz]
      
      PT                                ; Draw axes lines on right frame
        [temp_running_sum]
        L
        1,[rp] 
        [v2],[rp] 
        Y
        L
        [v1],1 
        [v1],[sizm1] 
        N

      NEG                              ; Reverse contrast
        [temp_running_sum]
        [out]                          ; Output image file  ; WAS _2

      SYS
        echo " Iteration: {**[iter]}, Group: {***[grp]} Images: {*****[npr]} Lower hemisphere: {*****[rit]}"

      CP TO JPG
        [out]
        [out]
      SYS
        display [out].jpg &

   ENDDO

   SYS

EN
; </body></pre></html>
@
