([stk-opt],[r-fsc],[bp-type],[r-bpn],[cg-err],[cg-chi], [cg-iter],[cg-mode],[cg-lam],[rp-lam],[rp-cor],[rp-iter], [sp_pixsiz],[incore-yn])

 ; <html><head><title></title></head><body><pre>

 ; SOURCE: spider/docs/techs/recon1/Procs/bp-settings.spi   
 ;
 ; PURPOSE: Set reconstruction parameters and filenames 

; ----------------- Parameters -------------------

 [bp-type]   = 2     ; Backprojection method (1==BP CG, 2==BP 32F, 3==BP RP, 4==BP 3N)

 [stk-opt]   = 1     ; Stack option (0==read original from disk, 1==copy into memory, 2==copy locally)

 [rad-fsc]   = -1    ; Object radius for FSC masking, pixels (<0 will retrieve from PARAMS file)

 [rad-bp]    = -1    ; (For BP CG or BP RP) radius of reconstructed volume, pixels (use -1 for 95% winsize / 2)

 [max-wait]  = 600   ; Maximum headstart in seconds for copying stacks before next group starts

 [incore-yn] = 1     ; Load input images into incore stack  (>0 == yes we have enough memory)

 ; For BP CG
 [cg-err]   = 1.0E-5  ; BP CG: error limit
 [cg-chi]   = 0.0     ; BP CG: chi^2 limit
 [cg-iter]  = 25      ; BP CG: iteration limit
 [cg-mode]  = 1       ; BP CG: mode   (see BP CG documentation)
 [cg-lam]   = 2000    ; BP CG: lambda (see BP CG documentation)

 ; For BP RP
 [rp-lam]   = 0.2e-5  ; BP RP: lambda
 [rp-cor]   = 0.0     ; BP RP: correction limit
 [rp-iter]  = 50      ; BP RP: iteration limit

 ; ------------------ Input files ---------------------

 GLO [params]         = '../params'                ; Parameter doc file           (one)

 GLO [input]          = './input'                  ; Input directory

 GLO [sel_group]      = '[input]/bp_sel_group'     ; Group selection doc file   (one)

 GLO [aligned_images] = '[input]/bp_dala_01_***'   ; Aligned-particle stacks    (one/group)

 GLO [group_align]    = '[input]/bp_align_01_***'  ; Alignment angles doc files (one/group)

 GLO [sel_parts]      = '[input]/bp_sel_part_***'  ; Particle selection files   (one/group)

 GLO [symmetry_doc]   = '*'                        ; Symmetry doc file (* == not used)

 ; ----------------- Output files --------------------
 GLO [vol]            = 'vol_01'                   ; Reconstructed vol             (one)
 GLO [vol_1]          = 'vol_01_one'               ; Reconstructed subset vol      (one)
 GLO [vol_2]          = 'vol_01_two'               ; Reconstructed subset vol      (one)

 GLO [fsc]            = 'fsc_doc'                  ; FSC curve doc  files          (one) 
 GLO [resol_doc]      = 'resolution'               ; Summary doc file

 GLO [group_dir]      = 'vols_***'                 ; Reconstructed group directory (one/group)
 GLO [group_vol]      = '[group_dir]/[vol]_all'    ; Reconstructed group vol       (one/group) 
 GLO [group_vol_1]    = '[group_dir]/[vol]_one'    ; Reconstructed group vol       (one/group) 
 GLO [group_vol_2]    = '[group_dir]/[vol]_two'    ; Reconstructed group vol       (one/group) 

 GLO [selodd]         = '[group_dir]/sel_odd_***'  ; Selection file for odd  particles (one/group) 
 GLO [seleven]        = '[group_dir]/sel_eve_***'  ; Selection file for even particles (one/group)  

 GLO [finished_file]  = 'jnk_sync_***'             ; OPTIONAL parallel segment finished flag (one/group)

 ; -------------- END BATCH HEADER --------------------------

 UD IC 5, [sp_pixsiz]               ; Get pixel size (A) 
   [params]                         ; Reconstruction parameter file   (input)
 
 UD IC 17, [sp_winsiz]              ; Get window size (pixels) 
   [params]                         ; Reconstruction parameter file   (input)

 UD IC 18, [sp_partsiz]             ; Get diameter 
   [params]                         ; Reconstruction parameter file   (input)

 [center] = [sp_winsiz]/2 + 1       ; Center coordinate

 ; Calculate reconstruction radius if necessary
 IF ( [r-bp] == -1 ) THEN
   [r-bp] = INT( (0.95*[sp_winsiz]) / 2.0 )
 ENDIF

 ; Calculate mask radius, if necessary
 IF ( [r-fsc] <= 0 ) THEN
    ; Get diameter from params file
    [r-fsc] = [sp_partsiz] / 2
 ENDIF

 RE
 ; </pre></body></html>

