 ; <html><head><title>Determine alignment parameters</title></head><body><pre>
 ;
 ; SOURCE: spider/docs/techs/recon1/Procs/align-pubsub.spi   
 ;
 ; PURPOSE: Multi-reference alignment of an image series. 
 ;          Sample images are aligned with reference projections via
 ;          shifts (translations) and rotations.  
 ;          FOR PROJECTS WITH ONE OR MORE GROUPS - WITH PUBSUB
 ;
 ; USAGE:   Start on PubSub master:
 ;          clean ; ./spider spi/dat @align-pubsub 0
 
 ; --------------------- END BATCH HEADER ---------------------

; Set parameter and file names
 @align-settings([apply-yn],[shrange],[step],[r1],[r2],[apply-yn],[local-yn],[incore-yn],[max-wait])
 
 MD
   TR OFF                        ; Decrease results file output
 MD
   VB OFF                        ; Decrease results file output

 SYS                             ; Create output directory 
   mkdir -p [out_dir]

 ; Initialize counters
 [total-parts] = 0               ; Initialize # of particles
 [num-grps]    = 0               ; Initialize # of groups

 DO                              ; Loop through groups -----------------------------

   UD NEXT [key], [grp]          ; Get group number
     [sel_group]                 ; Group selection file     (input)
   IF ( [key] <= 0) EXIT

   [num-grps] = [num-grps] + 1   ; Increment # of groups

   ; For first group, check whether input files exist
   IF ( [num-grps] == 1 ) THEN

      @check-exist([exists1])
        [ref_images]             ; Image file  (input)
      @check-exist([exists2])
        [ref_image_angles]       ; Doc file  (input)
      @check-exist([exists3])
        [unaligned_images][grp]  ; Image file  (input)

      ; If any file is missing, product of flags will be zero
      [iqfi-product] = [exists1]*[exists2]*[exists3]

      IF ( [iqfi-product] == 0) THEN
         SYS
            echo ; echo "Exiting" ; echo
         EN 
      ENDIF
   ENDIF

   ; Get # of particles
   UD N [grp-parts]
     [sel_particles][grp]         ; Doc file  (input)
    
   ; Increment total particle counter
    [total-parts] = [total-parts] + [grp-parts]

   SYS
      publish './spider spi/$DATEXT @align-main {***[grp]} grp={***[grp]}'
   SYS

   IF ( [max-wait] > 0 ) THEN
     ; Wait for compute node copy to local disk to minimize competition
     IQ SYNC DEL  [wait-time]     ; Check file existance then delete it
       [wait_file][grp]           ; Flag file  (input)
       10 [max-wait]              ; Wait time
     SYS
        echo " Group: {%I3%[grp]}  Wait time: {%I5%[wait-time]} seconds"
   ENDIF

   MY FL                          ; Flush results file
 ENDDO                            ; End group-loop

 ; Wait for compute node completion
 [one] = 1
 [end] = [num-grps]
 @wait-pub([one],[end])           ; Wait for compute node competition  
   [finished_file]                ; File created when finished (one/group)

 EN 
 ; </pre></body></html>
