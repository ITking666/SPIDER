 ; SOURCE:   framealign.spi
 ; PURPOSE:  Remove drift among a series of frames
 ; REQUIRES: settings-framealign.spi
 ; USAGE:    spider spi/dat @framealign

;   ----------------- Parameters -----------------------------------------
; 
; [useScratchYN]    ; Use scratch directory? (0 == No, 1 == Yes)
; [inCoreYN]        ; Store stacks in memory (0 == No, 1 == Yes)
;                   ; (In RAM will require 2X the size of one stack of frames.)
; [verboseLevel]    ; Verbosity level (3 == Maximum)
; [origFrame]       ; Shift relative to this frame
; [maxim]           ; Maximum number of frames to average
; [skip]            ; Exclude frames within this distance when finding refined image shifts
; [epsZero]         ; Default shifts to zero if <  this value
; [searchRange]     ; Search range
; [numProcs]        ; Number of processors to use (0 == All)
; [revContrastYN]   ; Reverse contrast? (0==no)

;   ----------------- Input files ----------------------------------------
; 
; [file_list]               ; List of frame set file names (without extensions)
; [in_mrc]                  ; MRC file pattern ([entry] == entry in FILE_LIST)
; [scratch_dir]             ; Temporary scratch directory (OPTIONAL)
; 
;   ----------------- Output files ----------------------------------------
; 
; [shift_doc_stem]        ; Alignment doc file prefix
; [mlr_doc_stem]          ; Refined alignment doc file prefix
; [aligned]               ; Summed aligned image
; 
;  ----------------- END BATCH HEADER ------------------------------------

 @settings-framealign([useScratchYN],[inCoreYN],[verboseLevel],[origFrame],[maxim],[skip],[epsZero],[searchRange],[numProcs],[revContrastYN])
 
 IF ([useScratchYN] .GE. 1) THEN
    SYS
    mkdir -p [scratch_dir]
    ; (Intentionally, will not overwrite an existing file/link.)
 ELSE
    [scratch_dir] = '.'
 ENDIF

 ; Temporary files
 [temp_spi_disk]       = '[scratch_dir]/jnk_stkspider'     ; SPIDER stack on disk
 [temp_spi_core]       = '_11'                             ; SPIDER stack in memory (OPTIONAL)
 [temp_apscc_doc]      = '[scratch_dir]/jnk_doc_apscc'     ; unused 'AP SCC' Alignment doc file
 [temp_unreversed]     = '_14'                             ; before optional contrast reversal
 
 ; Can pass optional #CPUs from command-line call
 IF ([ncpus] .NE. 0) [numProcs]=[ncpus]
 MD
   TR OFF
 MD
   SET MP
   [numProcs]
 
 IF ([verboseLevel] .GE. 1) THEN
    SYS M
    rm -f [stdout_text] ; 
    echo "Using {%i0%[numProcs]} CPUs (0==All)" ; echo ;
    echo "Using {%i0%[numProcs]} CPUs (0==All)" >> [stdout_text] ;
.
 ENDIF
 
 SYS
   mkdir -p [outdir]
 
 [imgCounter] = 0
 
 DO                                    ; Endless loop to read input sets of micrographs
   FR N [fails]                        ; Read next input file name
     [file_list]                       ; List of file names  (input)
     [entry]
   IF ([fails] .NE. 0) EXIT            ; End of input


   ; Construct i/o filenames   
   [shift_doc] = [shift_doc_stem][entry]  ; Alignment doc file
   [mlr_doc]   = [mlr_doc_stem][entry]    ; Refined alignment doc file
;;;   [aligned]   = [aligned_stem][entry]    ; Summed aligned image  
   
   [imgCounter] = [imgCounter] + 1
   
   IF ([verboseLevel] .GE. 1) THEN
        SYS M
        echo "Working on micrograph [in_mrc], {%i0%[imgCounter]}th micrograph" ; date ; 
        echo "Working on micrograph [in_mrc], {%i0%[imgCounter]}th micrograph" >> [stdout_text] ;
        date  >> [stdout_text] ;
.
   ENDIF
   
   ; Convert images from MRC stack format to SPIDER stacks -------------------
   IF ([verboseLevel] .GE. 2) THEN
        SYS
        echo "  xxxxx 'CP FROM MRC'  Convert images from MRC to SPIDER format xxxxxxxxxxxxxxxx "
   ENDIF

   CP FROM MRC             ; Convert MRC to: SPIDER
     [in_mrc]              ; Existing 16 bit stack MRC file (input)
     [temp_spi_disk]@*     ; SPIDER stack file              (output)
     1                     ; Stacked image number           
     NO,YES                ; No byte flip, Flip top

   ; Convert images from MRC stack format to SPIDER stacks -------------------
   IF ([verboseLevel] .GE. 3) THEN
        SYS  
        echo "  xxxxx 'FS' ixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx " >> [stdout_text]
   ENDIF

   FI H [numFrames],[nx],[ny]   ; Find number of images 
     [temp_spi_disk]@           ; Image stack               (input)
     MAXIM,NX,NY                ; Images & size
 
   IF ([inCoreYN] .GE. 1) THEN
        MS
        [temp_spi_core]@
        [nx],[ny]
        [numFrames]
        
        CP
        [temp_spi_disk]@
        [temp_spi_core]@
        
        [temp_spi] = [temp_spi_core]
   ELSE
        [temp_spi] = [temp_spi_disk]
   ENDIF
   
   DO [frame] = 1,[numFrames]
     FS [max],[min],[avg],[std]
       [temp_spi]@{**[frame]}   ; SPIDER file               (input)
       
     ; Convert images from MRC stack format to SPIDER stacks -------------------
     IF ([verboseLevel] .GE. 3) THEN
        SYS
        echo '  Range ({%I2%[frame]}): ({%f10.2%[min]} ... {%f8.2%[max]})' >> [stdout_text]
     ENDIF
   ENDDO


   ; Filter frame images to minimize central peak --------------------------
   ; Convert images from MRC stack format to SPIDER stacks -------------------

   IF ([verboseLevel] .GE. 3) THEN
        SYS  
        echo "  xxxxx 'DN MED' Filter {%I0%[numFrames]} frame images. Size: {%I0%[nx]} x {%I0%[ny]}" >> [stdout_text]
   ENDIF
   
   IF ([inCoreYN] .GE. 1) THEN
        [temp_filt_stack]     = '_12'       ; Filtered stack  

        MS
        [temp_filt_stack]@
        [nx],[ny]
        [numFrames]
        
;        CP
;        [temp_spi_core]@
;        [temp_filt_stack]@
;        ;(If in-core stack doesn't yet exist, later steps will ask additional question about #images.)
   
   ELSE
        [temp_filt_stack]     = '[scratch_dir]/jnk_stkfilt'       ; Filtered stack  
   ENDIF

   DO [frame] = 1,[numFrames]

     DN MED
       [temp_spi]@{**[frame]}     ; SPIDER file                (input)
       [temp_filt_stack]@{**[frame]}   ; Image                      (output)
       3                               ; Filter length
       Cross                           ; Filter shape
     FS [max],[min],[avg],[std]
       [temp_filt_stack]@{**[frame]}   ; SPIDER file               (input)
       
     ; Convert images from MRC stack format to SPIDER stacks -------------------
     IF ([verboseLevel] .GE. 3) THEN
        SYS
        echo '  Range ({%I2%[frame]}): ({%f10.2%[min]} ... {%f8.2%[max]})' >> [stdout_text]
     ENDIF
   ENDDO

;   FI H [numFrames],[nx],[ny]  ; Find number of images 
;     [temp_filt_stack]@        ; Image stack                (input)
;     MAXIM,NX,NY               ; Images & size
;     (FILTERED STACK WILL ALWAYS (?) HAVE THE SAME DIMENSIONS AS THE UNFILTERED STACK.) 
 
   ;  Find pair-wise frame shifts ------------------------------------------
   ;  If the parameter [skip] is for example 4, the 4 frames after the current one will not be aligned
   
   ; Convert images from MRC stack format to SPIDER stacks -------------------
   IF ([verboseLevel] .GE. 2) THEN
        SYS  
        echo "  xxxxx 'AP SCC' Find pair-wise alignment shifts for images xxxxxxxxxxx " >> [stdout_text]
   ENDIF

   [n2end]   = [numFrames]
   [n2endm1] = [numFrames] - 1

   DE
     [temp_apscc_doc]         ; AP doc file            (removed)
   DE
     [shift_doc]              ; Shift doc file         (removed)

   [frameCounter] = 0
   DO [refFrame] = 1,[n2endm1]
     [jgo] = [refFrame] + [skip]
     IF ([jgo] >= [numFrames]) EXIT

     DO [samFrame] = [jgo],[numFrames]
  
       ; Find alignment parameters for each frame pair --------------------
       AP SCC  [exp],[ref],[xo],[yo],[zo],[pk]         
         [temp_filt_stack]@{**[refFrame]}   ; Reference frame        (input)
         [searchRange],[searchRange]        ; Search area 
         Yes, No                            ; Normalize peak height, pad?  
         [temp_filt_stack]@{**[samFrame]}   ; Sample frame           (input)
         [temp_apscc_doc]                   ; Doc file               (output)

       ; Convert images from MRC stack format to SPIDER stacks -------------------
       IF ([verboseLevel] .GE. 2) THEN
            SYS
            echo "  #{%I2%[refFrame]}..{%I2%[samFrame]}  Shift: {%f8.2%[xo]}, {%f8.2%[yo]}  Peak: {%f6.4%[pk]}" >> [stdout_text]
       ENDIF
  
       ; Default shifts to zero if <  [epsZero]
       IF ( ABS([xo]) < [epsZero] ) [xo] = 0.0 
       IF ( ABS([yo]) < [epsZero] ) [yo] = 0.0 

       [frameCounter] = [frameCounter] + 1
       SD [frameCounter], [refFrame],[samFrame], [xo],[yo]
         [shift_doc]          ; Shift doc file         (output)
     ENDDO                    ; End sample-frame loop
   ENDDO                      ; End reference-frame loop

   DE
   [temp_filt_stack]@
   
   
   ; Refine alignment shifts ---------------------------------------------
   
   ; Convert images from MRC stack format to SPIDER stacks -------------------
   IF ([verboseLevel] .GE. 3) THEN
        SYS  
        echo "  xxxxx 'ML'   Refine alignment shifts xxxxxxxxxxxxxxxxxxxxxx " >> [stdout_text]
   ENDIF

   DE
     [mlr_doc]               ; Refined shift doc file   (removed)

   ML                        ; Multivariable linear regression
     [shift_doc]             ; Shift doc file           (input)
     [mlr_doc]               ; Refined shift doc file   (output)


   ; Shift align frame images ---------------------------------------------
   
   IF ([verboseLevel] .GE. 3) THEN
        SYS  
        echo "  xxxxx 'SH F' Shift align frame images xxxxxxxxxxxxxxxxxxxxx" >> [stdout_text]
   ENDIF
 
   IF ([inCoreYN] .GE. 1) THEN
        [temp_ali_stack]     = '_13'       ; Filtered stack  

        MS
        [temp_ali_stack]@
        [nx],[ny]
        [numFrames]
        
;        CP
;        [temp_spi_core]@
;        [temp_ali_stack]@
;        ;(If in-core stack doesn't yet exist, later steps will ask additional question about #images.)
   
   ELSE
        [temp_ali_stack]      = '[scratch_dir]/jnk_stkaligned'    ; Aligned frame image stack 
   ENDIF

   DO                         ; Loop over images in sum

     UD NEXT [key], [frame],[xs],[ys] 
       [mlr_doc]              ; Refined shift doc file (input)
     IF ([key] <= 0)  EXIT    ; End of file 

     IF ([verboseLevel] .GE. 3) THEN
        SYS
        echo '  Image: {**[frame]}    Shift: {%f6.2%[xs]}, {%f6.2%[ys]}' >> [stdout_text]
     ENDIF
     
     IF ([frame] == [origFrame]) CYCLE   ; No shift

     ; Shift image: n to align with image: nvs
     SH F                             ; Shift operation 
       [temp_spi]@{**[frame]}         ; Image stack            (input)
       [temp_ali_stack]@{**[frame]}   ; Aligned stack          (output)
       [xs],[ys]                      ; Shifts

   ENDDO                              ; End image-loop

   UD NEXT E
   [mlr_doc]

   ; Copy the unshifted image into shifted stack
   CP                                   ; Copy
     [temp_spi]@{**[origFrame]}         ; Original stacked image  (input)
     [temp_ali_stack]@{**[origFrame]}   ; Aligned image stack     (output)

;   [maxim] = 20
;   ; (?WHY IS THERE A MAXIMUM NUMBER OF FRAMES TO AVERAGE?)

   ; Sum the aligned frame images ---------------------------------------------
   
   IF ([verboseLevel] .GE. 2) THEN
        SYS  
        echo "  xxxxx 'AD S' Sum aligned frame images xxxxxxxxxxxxxxxxxxxx" >> [stdout_text]
   ENDIF

   AD S
     [temp_ali_stack]@**     ; Aligned images        (input)
     1-[maxim]               ; Image numbers
     [temp_unreversed]   ; WAS [aligned]               ; Aligned sum image     (output)

   ; Reverse contrast if necessary
   IF ([revContrastYN] .LE. 0) THEN
     CP
     [temp_unreversed]
     [aligned]               ; Aligned sum image     (output)
   ELSE
     NEG A
     [temp_unreversed]
     [aligned]               ; Aligned sum image     (output)
   ENDIF
    
   FS [max],[min]
      [aligned]              ; Aligned sum image     (output)

   SYS M
     mv [aligned].$DATEXT [outdir] ;
     mv [shift_doc].$DATEXT [outdir] ;
     mv [mlr_doc].$DATEXT [outdir]
.   
   IF ([verboseLevel] .GE. 2) THEN
        SYS
        echo '  Sum image range: ({%f10.2%[min]} ... {%f8.2%[max]})' >> [stdout_text]
   ENDIF

   ; Clean up
   DE
   [temp_spi_disk]@
   DE
   [temp_spi]@
   DE
   [temp_apscc_doc]
   DE
   [temp_ali_stack]@
   
 ENDDO   ; End image loop

 IF ([useScratchYN] .GE. 1) THEN
    SYS
    rm -vf [scratch_dir]
 ENDIF
 
 EN 

; Modified 2016-03-11
;    2016-01-26 (trs) -- added option to invert contrast
;    2016-01-13 (trs) -- added option to store intermediates in RAM
;    2016-01-12 (trs) -- adapted from framealign.spi (agl)
