 ([iter],[num-grps],[task])

 ; <html><head><title>Runs jobs on PubSub parallel cluster</title></head><body><pre>
 ;
 ; SOURCE: spider/docs/techs/recon1/Procs/gold/pub-submit.spi    New   Jan 2016
 ;         
 ;
 ; PURPOSE: Procedure for starting scripts on parallel cluster. Returns when all
 ;          the jobs have successfully finished.
 ;
 ;
 ; INPUT REGISTERS:
 ;   [iter]                Current iteration
 ;   [num-grps]            Number of parallel groups 
 ;   [task]                Specifies tack started by:  pub-refine-start
 ;
 ; INPUT FILES: 
 ;   [sel_group]           input/sel_group        Group selection file      (one)
 ;
 ; OUTPUT FILES:  ('????' denotes tracking #, and '***' denotes group)
 ;   [finished_file]       jnk_sync_????_***      Temp file signals when subscriber job finishes (one/group) Deleted
 ;
 ; PROCEDURES CALLED:
 ;
 ;    publish                <a href="publish.perl">           publish.perl</a>
 ;    .. pub-refine-start    <a href="pub-refine-start.spi">   pub-refine-start</a>          
 ;    ..... refine-settings  <a href="refine-settings.spi">    refine-settings.spi</a>            
 ;    ..... refine-???loop   <a href="refine-prjloop.spi">     refine-???loop.spi</a>            
 ;
 ; -------------------------------- END BATCH HEADER ----------------------------

 ; Temporary output file name for synchronization
 GLO [finished_file] = 'jnk_sync_{****[rn]}_{***[grp]}'  ; Created when parallel segment finished (one/group)

 FR                         ; Read PubSub script prefix
   ? PubSub script ? [pubstr]

 ; Generate 4 digit random number for semi-unique SYNC file numbering
 [rn]   = int(ran(0.0)*9999)


 DO [grp] = 1,[num-grps]    ; Loop over all  groups  ---------------
   ; Use pub-refine-start to run: refine-???loop  for each group
   SYS
     [pubstr] {%I0%[grp]} task={%I0%[task]} iter={%I0%[iter]} grp={%I0%[grp]} rn={****[rn]} pubsub=1  

 ENDDO                      ; End of: Loop over all groups ---------


 ; Wait for all subscribers to finish this task (Previously in: pub-refine-wait)
 SYS
   echo -n "  Waiting for iteration: {%I0%[iter]}  task={%I0%[task]} " ; date '+ TIME: %x  %X' ; echo
 MY FL                      ; Flush results

 DO [grp] = 1,[num-grps]    ; Loop over all  groups -----------------

   SYS
     echo "  Waiting for: [finished_file]     For group: {%I0%[grp]}"

   IQ SYNC DEL              ; Wait for file existence then delete it
     [finished_file]        ; Sync file               (deleted)
     10 3600000             ; Re-Check time, max time

   SYS
     echo -n "  Synced group: {%I0%[grp]} --- "; date '+ TIME: %x  %X'

   MY FL                   ; Flush results file
 ENDDO                     ; End wait loop over groups -------------

 RE
 ; </pre></body></html>


