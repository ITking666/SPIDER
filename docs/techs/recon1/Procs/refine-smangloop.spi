 ([ang-step],[r2],[alignsh],[prj-radius],[iter],[grp],[pixsiz],[bp-type])

 ; <html><head><title>Small angle refinement group loop</title></head><body><pre>
 ;
 ; SOURCE: spider/docs/techs/recon1/Procs/smangloop.spi
 ;         New                              ArDean Leith  Nov 2002
 ;         Rewrite                          ArDean Leith  Oct 2004
 ;         Avg CCROT degredations           ArDean Leith  Feb 2005
 ;         []                               ArDean Leith  Dec 2005
 ;         More stacks                      ArDean Leith  Dec 2006
 ;         Removed iter1 parameter          ArDean Leith  Feb 2007
 ;         Filenames & UD NEXT              ArDean Leith  Dec 2009
 ;         COG centering removed            ArDean Leith  Sep 2010
 ;         TF COR                           ArDean Leith  Nov 2010
 ;         For CTF corrected images         ArDean Leith  Oct 2013
 ; 
 ; PURPOSE: Small angle refinement group loop.  Runs for each group on each iteration.
 ;          Finds parameters to align images to projections from reference volume (AP REF),
 ;          aligns images (RT SF),  backprojects images into new volume(BP **)
 ;
 ; CALLED FROM: <a href="./pub_refine_start.spi">pub_refine_start</a> OR   
 ;              <a href="./refine.spi">refine.spi</a>  
 ;
 ; REGISTERS AND FILES ARE SET IN: <a href="refine settings.spi">refine settings.spi</a>
 ;
 ; INPUT REGISTERS:
 ;   [r2]                      Radius (pixels) of the structure
 ;   [alignsh]                 Shift allowed is +-[alignsh]
 ;   [prj-radius]              Radius (pixels) of structure for projection
 ;   [iter]                    Alignment step iteration counter  
 ;   [grp]                     Current defocus group                      
 ;   [pixsiz]                  Pixel size                              
 ;   [bp-type]                 Type of 'back projection'                              
 ;
 ;  '##' denotes iteration,  '##+' denotes next iteration, and '***' denotes group
 ; INPUT FILES:
 ;   [sel_parts]               input/select_***        Particle selection doc file  (one)
 ;   [group_align]             final/align##+_***      Alignment parameter doc file (one/group)
 ;   [unaligned_images]        input/data***@          Unaligned stacked image file (one/group) 
 ;   [iter_refangs]            work/ang_refs_##        Reference angles doc   file  (one)      
 ;
 ; OUTPUT FILES:
 ;   [next_group_align]        final/align##+_***      Alignment parameter doc file (one/group)
 ;   [next_group_vol]          work/vol##+_***         Reconstructed group volume   (one/group)
 ;
 ;   [temp_out_images]         work/dala##+_***        Aligned stacked image file   (one/group)
 ;   [img_ang_vora]            final/angvora_##_***    Projection angles doc file   (one/group)        
 ;
 ;   [temp_out_images]         work/dala##+_***        Aligned stacked images   (created & deleted)
 ;   [next_group_vol]_s1       work/vol_##+_***_s1     Volume subset            (created & deleted)
 ;   [next_group_vol]_s2       work/vol_##+_***_s2     Volume subset            (created & deleted)
 ;   [temp_ref_projs]          _5@                     Reference projections    (created & deleted)
 ;
 ; INLINE BUFFERS USED: _5@
 ;
 ; ----------------- END BATCH HEADER -------------------------------------

 SYS
   echo -n " Starting: refine-smangloop  Iteration: {%I0%[iter]}  Group:{%I3%[grp]} --- " ; date '+ %x  %X'

 [r1]        = 5.0                   ; First radius for 'AP REF' (Can alter this)
 [converg]   = 1.5*[ang-step]        ; Angular distance limit for stopping iters.
 [converg]                           ; Echo converg 

 [next-iter] = [iter]+1
 
 FI H [maxim],[nx],[ny]              ; Find total number of images (not [numparts])
   [unaligned_images]@               ; Input file needed                  (input)
   MAXIM, NX, NY                     ; Max. image number, image size

 UD N [num-refs]                     ; Get number of reference images used
   [iter_refangs]                    ; Reference images angles doc. file (input)

 MS                                  ; Make MT inline stack for ref. projections
   [temp_ref_projs]                  ; Empty stack                        (output)
   [nx],[nx],1                       ; Image size
   [num-refs]                        ; Number of images allowed in stack

 DE                                  ; Remove existing align parameter doc file 
   [next_group_align]

 ; Make header for next group align doc file 
 SD /PSI, THE, PHI, REF, EXP, ANG, SX, SY, NPROJ, DIFF, CCROT, ANG, SX, SY, MIR-CC
   [next_group_align]                ; Alignment angle doc file        (output)

 [num-big]    = 0                    ; Number of angular changes above iter. stop limit
 [toobig]     = 0                    ; Not OK to stop iterating
 [sum-ccrot]  = 0.0                  ; Sum of CCROT correlation coefficients
 [num-degred] = 0.0                  ; Number of CCROT degredations
 [sum-degred] = 0.0                  ; Sum of CCROT degredations
 [num-impr]   = 0.0                  ; Number of CCROT improvements
 [sum-impr]   = 0.0                  ; Sum of CCROT improvements
 [sum-diff]   = 0.0
 [num-imgs]   = 0                    ; Number of images in current group

 MY FL                               ; Flush results file

 DO                                  ; Loop over all particles
    UD NEXT [key],[img]              ; Get particle number  
      [sel_parts]                    ; Group particle selection file   (input) 
    IF ( [key] <= 0 ) EXIT           ; End of images in selection doc file
 
    [num-imgs] = [num-imgs] + 1      ; # of images in current group

    ; Format of alignment parameters doc file is:
    ;         PSI,THE,PHI,           REF#,EXP#, ANG,SX,SY,   NPROJ,DIFF,CCROT
    UD IC [img], [psi],[the],[phi],  [d],[exp], [d],[d],[d], [d],[d],[old-ccrot]
      [group_align]                  ; Input alignment parameters doc file

    DE                               ; Delete  
      [img_ang_vora]                 ; angvora doc file                (removed)

    VO RAS                           ; Rotate projection dir.   
      [iter_refangs]                 ; Relative angles file            (input)
      -[phi],-[the],-[psi]           ; Offset
      1, 0                           ; Psi set to zero
      [img_ang_vora]                 ; Doc file for angles to search   (output)

    ; Create stack holding set of reference projections from input volume.
    PJ 3Q                            ; Create ref. projections
      [current_vol]                  ; Current volume                  (input)  
      [prj-radius]                   ; Radius of computed object
      1-[num-refs]                   ; Ref. projection file numbers 
      [img_ang_vora]                 ; Angles in search area doc file  (input)
      [temp_ref_projs]******         ; Template for ref. projections   (output)

    MY FL                            ; Flush results file

    ; Find ref. image matching exp. image.  Output to registers not doc file
    ;       PSI,THE,PHI,       REF#,EXP#, ANG,  SX, SY,    NPROJ,DIFF,     CCROT,  CURRENT_ALIGN
    AP REF  [psi],[the],[phi], [ref],[exp], [inp],[sx],[sy], [nproj],[diff], [ccrot], [t0],[t1],[t2],[t3]
      [temp_ref_projs]******         ; Template of existing ref. projections (input) 
      1-[num-refs])                  ; Ref. projection file numbers
      [alignsh]                      ; Shift search range
      [r1], [r2], 1                  ; First, last ring, & skip
      [img_ang_vora]                 ; Ref. angles file                   (input)
      SCR.{******[grp]}              ; No scratch file (usually will fit in-core)
      [unaligned_images]@******      ; Original unaligned  image stack    (input)
      [img]                          ; Current exp. image file number
      [group_align]                  ; Alignment parameters doc file      (input)
      0                              ; Angular projection restriction
      N,Y                            ; No mirrored projection check,  align first 

    ;         PSI,THE,PHI,         REF#,EXP#, ANG,  SX,  SY,   NPROJ,DIFF,CCROT
    SD [img], [psi],[the],[phi],  [ref],[img],[inp],[sx],[sy], [num-refs],[diff],[ccrot], [t0],[t1],[t2],[t3]
      [next_group_align]                              ; Next align. doc file (output)

    IF ( [ccrot] < [old-ccrot] ) THEN
      [sum-degred]=[sum-degred]+([old-ccrot]-[ccrot]) ; Sum average CCROT degredation
      [num-degred]=[num-degred]+1                     ; Increment   CCROT degredations counter
    ELSE
      [sum-impr] = [sum-impr]+([ccrot]-[old-ccrot])   ; Sum average CCROT improvement
      [num-impr] = [num-impr]+1                       ; Increment   CCROT improvements counter
    ENDIF

    IF ( [diff] > [converg] ) [num-big]=[num-big]+1   ; Increment large displacement counter
    [sum-ccrot] = [sum-ccrot]+[ccrot]                 ; Sum rotational CCC (for average).
    [sum-diff]  = [sum-diff]+[diff]                   ; Sum of angular differences
      
    ; Apply combined transformation to original particle image
    RT SF                                             ; Rotate & shift
      [unaligned_images]@{******[img]}                ; Unaligned original images stack (input)
      [temp_out_images]{******[img]}                  ; Temp aligned exp. images stack  (output)
      [inp]                                           ; Inplane rotation angle
      [sx],[sy]                                       ; X & Y shift

    ; Soft masking of particle before back projection (removed -not usefull)

 ENDDO                         ; End of loop over all particles --------------------

 UD ICE                        ; Close this file here
   [group_align]               ; Doc file                         (closed)                 
 DE
   [img_ang_vora]              ; Doc file                         (removed)

 
 ; Calculate new, refined volume using centered projections and 
 ; angles from align doc. file.  

 @refine-bp([next-iter],[grp], [bp-type],[prj-radius])

 DE                            ; Delete
   [temp_ref_projs]            ; Ref. projections file             (removed)
 DE                            ; Delete
   [temp_out_images]@          ; Aligned image stack               (removed)

 IF ( [iter] > 1) THEN         ; Not first iteration
    DE                         ; Delete 
      [group_vol]              ; Previous group vol.               (removed)        
    DE                         ; Delete
      [group_vol]_s1           ; Previous subset 1 group vol.      (removed)
    DE                         ; Delete 
      [group_vol]_s2           ; Previous subset 2 group vol.      (removed)
 ENDIF


 ; Find % of images showing excessive change in angular displacement
 [toobig]=100*[num-big]/[num-imgs]     ; % of images with excessive change in ang. displacement

 SYS
   echo " Iteration: {%I2%[iter]} Group: {%I3%[grp]}   Excessive changes: {%I3%[toobig]}%"

 [avg-ccrot]  = [sum-ccrot]/[num-imgs]                        ; Average CCROT 
 [avg-degred] = 0.0                                           ; Average CCROT degredation
 IF ( [num-degred] > 0)[avg-degred]=[sum-degred]/[num-degred] ; Average CCROT degredation
 [avg-impr]   = 0.0                                           ; Average CCROT improvement
 IF ([num-impr] > 0) [avg-impr] = [sum-impr]/[num-impr]       ; Average CCROT improvement
 [per-degred] = 100*[num-degred]/[num-imgs]                   ; Percent images with CCROT degredation
 [avg-diff]   = [sum-diff]/[num-imgs]                         ; Average angular difference

 SYS
   echo " CCROT degred.: {%I3%[per-degred]}%  Avg degred.: {%F8.2%[avg-degred]}  Avg improve: {%F8.2%[avg-impr]}"

 SD / %Large angles, Avg. Ang-diff,  Avg. CCROT, % degred.,  Avg degred.,  Avg improv.
   [next_group_align]                   ; Alignment doc file   (output)
 SD -2, [toobig],[avg-diff],[avg-ccrot],[per-degred],[avg-degred],[avg-impr]
   [next_group_align]                   ; Alignment doc file   (output)
 SD E                                   ; Close doc file  
   [next_group_align]                   ; Alignment doc file   (closed)
 
 RE

 ; </pre></body></html>

