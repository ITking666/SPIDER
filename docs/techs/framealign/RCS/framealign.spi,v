head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2017.11.13.16.25.53;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2016.01.14.15.22.25;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2015.02.25.18.09.05;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2015.02.20.19.14.53;	author leith;	state Exp;
branches;
next	;


desc
@@


1.4
log
@cosmetic, removed old unused filename traces
@
text
@ ; SOURCE:   framealign.spi
 ; PURPOSE:  Remove drift among a series of frames
 ; USAGE:    clean ; spider spi/dat @@framealign

 ;  ----------------- Parameters -----------------------------------------

 [useScratchYN] = 1     ; Use scratch directory? (0 == No)
 [verboseLevel] = 1     ; Verbosity level (2 == Maximum)
 [origFrame]    = 1     ; Shift relative to this frame
 [maxim]        = 20    ; Maximum number of frames to average
 [skip]         = 4     ; Exclude frames within this distance when finding refined image shifts
 [epsZero]      = .07   ; Default shifts to zero if <  this value
 [searchRange]  = 150   ; Search range
 [numProcs]     = 0     ; Number of processors to use (0 == All)

 ;  ----------------- Input files ----------------------------------------

 [file_list]      = 'filenames'          ; List of frame set file names (without extensions)
 [in_mrc]         = '[in].mrcs'          ; MRC file pattern ([in] == Entry in 'file_list')

 ;  ----------------- Output files ----------------------------------------

 [scratch_dir]    = '/var/tmp/tmpframes' ; Temporary scratch directory (OPTIONAL)
 [shift_doc_stem] = 'doc_shift_'         ; Alignment doc file prefix
 [mlr_doc_stem]   = 'doc_mlr_shift_'     ; Refined alignment doc file prefix
 [aligned_stem]   = 'mic'                ; Summed aligned image prefix

 ; ----------------- END BATCH HEADER ------------------------------------

 IF ( [useScratchYN] >= 1 ) THEN
   SYS
     mkdir -pv [scratch_dir]
 ELSE
   SYS
     [scratch_dir] = '.'
 ENDIF

 ; Temporary files
 [temp_spi]            = '[scratch_dir]/jnk_stkspider'     ; SPIDER stack
 [temp_filt_stack]     = '[scratch_dir]/jnk_stkfilt'       ; Filtered stack  
 [temp_apscc_doc]      = '[scratch_dir]/jnk_doc_apscc'     ; unused 'AP SCC' Alignment doc file
 [temp_ali_stack]      = '[scratch_dir]/jnk_stkaligned'    ; Aligned frame image stack 

 MD
   TR OFF
 MD                                    ; Use [numProcs] processors
   SET MP
     [numProcs]

 DO                                    ; Endless loop to read input sets
   FR N [fails]                        ; Read next input file name
     [file_list]                       ; List of file names  (input)
     [in]
   IF ( [fails] .NE. 0 ) EXIT          ; End of input

   ; Construct I/O filenames   
   [shift_doc] = [shift_doc_stem][in]  ; Alignment doc file
   [mlr_doc]   = [mlr_doc_stem][in]    ; Refined alignment doc file
   [aligned]   = [aligned_stem][in]    ; Summed aligned image  


   ; Convert images from MRC stack format to SPIDER stacks -------------------
   IF ( [verboseLevel] >= 1 ) THEN
      SYS
        echo "  xxxxx 'CP FROM MRC'  Convert images from MRC to SPIDER format xxxxxxxxxxxxxxxx "
   ENDIF

   CP FROM MRC             ; Convert MRC to: SPIDER
     [in_mrc]              ; Existing 16 bit stack MRC file (input)
     [temp_spi]@@*          ; SPIDER stack file              (output)
     1                     ; Stacked image number           
     NO,YES                ; No byte flip, Flip top

   ; Convert images from MRC stack format to SPIDER stacks -------------------
   IF ( [verboseLevel] >= 1 ) THEN
      SYS  
        echo "  xxxxx 'FS' ixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "
   ENDIF

   FI H [numFrames],[nx],[ny]   ; Find number of images 
     [temp_spi]@@               ; Image stack               (input)
     MAXIM,NX,NY               ; Images & size
 
   DO [frame] = 1,[numFrames]
     FS [max],[min],[avg],[std]
       [temp_spi]@@{**[frame]}   ; SPIDER file               (input)
       
     ; Convert images from MRC stack format to SPIDER stacks -------------------
     IF ([verboseLevel] >= 1) THEN
        SYS
        echo '  Range ({%I2%[frame]}): ({%f10.2%[min]} ... {%f8.2%[max]})'
     ENDIF
   ENDDO


   ; Filter frame images to minimize central peak --------------------------
   ; Convert images from MRC stack format to SPIDER stacks -------------------

   IF ([verboseLevel] >= 2) THEN
        SYS  
        echo "  xxxxx 'DN MED' Filter {%I0%[numFrames]} frame images. Size: {%I0%[nx]} x {%I0%[ny]}"
   ENDIF

   DO [frame] = 1,[numFrames]

     DN MED
       [temp_spi]@@{**[frame]}          ; SPIDER file                (input)
       [temp_filt_stack]@@{**[frame]}   ; Image                      (output)
       3                               ; Filter length
       Cross                           ; Filter shape

     FS [max],[min],[avg],[std]
       [temp_filt_stack]@@{**[frame]}   ; SPIDER file               (input)
       
     ; Convert images from MRC stack format to SPIDER stacks -------------------
     IF ( [verboseLevel] >= 2 ) THEN
        SYS
        echo '  Range ({%I2%[frame]}): ({%f10.2%[min]} ... {%f8.2%[max]})'
     ENDIF
   ENDDO

;   FI H [numFrames],[nx],[ny]  ; Find number of images 
;     [temp_filt_stack]@@        ; Image stack                (input)
;     MAXIM,NX,NY               ; Images & size
;     (FILTERED STACK WILL ALWAYS (?) HAVE THE SAME DIMENSIONS AS THE UNFILTRED STACK.) 
 
   ;  Find pair-wise frame shifts ------------------------------------------
   ;  If the parameter [skip] is for example 4, the 4 frames after the current one will not be aligned
   
   ; Convert images from MRC stack format to SPIDER stacks -------------------
   IF ( [verboseLevel] >= 1 ) THEN
     SYS  
        echo "  xxxxx 'AP SCC' Find pair-wise alignment shifts for images xxxxxxxxxxx "
   ENDIF

   [n2end]   = [numFrames]
   [n2endm1] = [numFrames] - 1

   DE
     [temp_apscc_doc]         ; AP doc file            (removed)
   DE
     [shift_doc]              ; Shift doc file         (removed)

   [counter] = 0
   DO [refFrame] = 1,[n2endm1]
     [jgo] = [refFrame] + [skip]
     IF ([jgo] >= [numFrames]) EXIT

     DO [samFrame] = [jgo],[numFrames]
  
       ; Find alignment parameters for each frame pair --------------------
       AP SCC  [exp],[ref],[xo],[yo],[zo],[pk]         
         [temp_filt_stack]@@{**[refFrame]}   ; Reference frame        (input)
         [searchRange],[searchRange]        ; Search area 
         Yes, No                            ; Normalize peak height, pad?  
         [temp_filt_stack]@@{**[samFrame]}   ; Sample frame           (input)
         [temp_apscc_doc]                   ; Doc file               (output)

       ; Convert images from MRC stack format to SPIDER stacks -------------------
       IF ( [verboseLevel] >= 1 ) THEN
         SYS
            echo "  #{%I2%[refFrame]}..{%I2%[samFrame]}  Shift: {%f8.2%[xo]}, {%f8.2%[yo]}  Peak: {%f6.4%[pk]}"
       ENDIF
  
       ; Default shifts to zero if <  [epsZero]
       IF ( ABS([xo]) < [epsZero] ) [xo] = 0.0 
       IF ( ABS([yo]) < [epsZero] ) [yo] = 0.0 

       [counter] = [counter] + 1
       SD [counter], [refFrame],[samFrame], [xo],[yo]
         [shift_doc]          ; Shift doc file         (output)
     ENDDO    
   ENDDO

   
   ; Refine alignment shifts ---------------------------------------------
   
   ; Convert images from MRC stack format to SPIDER stacks -------------------
   IF ( [verboseLevel] >= 2 ) THEN
     SYS  
       echo "  xxxxx 'ML'   Refine alignment shifts xxxxxxxxxxxxxxxxxxxxxx "
   ENDIF

   DE
     [mlr_doc]               ; Refined shift doc file   (removed)

   ML                        ; Multivariable linear regression
     [shift_doc]             ; Shift doc file           (input)
     [mlr_doc]               ; Refined shift doc file   (output)

   !SYS
   !  cat [mlr_doc]*


   ; Shift align frame images ---------------------------------------------
   
   IF ( [verboseLevel] >= 2 ) THEN
     SYS  
       echo "  xxxxx 'SH F' Shift align frame images xxxxxxxxxxxxxxxxxxxxx"
   ENDIF
 
   DO                         ; Loop over images in sum

     UD NEXT [key], [frame],[xs],[ys] 
       [mlr_doc]              ; Refined shift doc file (input)
     IF ([key] <= 0)  EXIT    ; End of file 

     IF ([verboseLevel] >= 2) THEN
        SYS
        echo '  Image: {**[frame]}    Shift: {%f6.2%[xs]}, {%f6.2%[ys]}'
     ENDIF
     
     IF ([frame] == [origFrame]) CYCLE   ; No shift

     ; Shift image: n to align with image: [origFrame]
     SH F                             ; Shift operation 
       [temp_spi]@@{**[frame]}         ; Image stack            (input)
       [temp_ali_stack]@@{**[frame]}   ; Aligned stack          (output)
       [xs],[ys]                      ; Shifts

   ENDDO

   UD NEXT E
     [mlr_doc]

   ; Copy the unshifted image into shifted stack
   CP                                   ; Copy
     [temp_spi]@@{**[origFrame]}         ; Original stacked image  (input)
     [temp_ali_stack]@@{**[origFrame]}   ; Aligned image stack     (output)

   ; Sum the aligned frame images ---------------------------------------------
   
   IF ( [verboseLevel] >= 1 ) THEN
     SYS  
       echo "  xxxxx 'AD S' Sum aligned frame images xxxxxxxxxxxxxxxxxxxx"
   ENDIF

   AD S
     [temp_ali_stack]@@**     ; Aligned images        (input)
     1-[maxim]               ; Image numbers
     [aligned]               ; Aligned sum image     (output)

    FS [max],[min]
      [aligned]              ; Aligned sum image     (output)

   IF ( [verboseLevel] >= 1 ) THEN
     SYS
       echo '  Sum image range: ({%f10.2%[min]} ... {%f8.2%[max]})'
   ENDIF

   DE
     [temp_spi]@@
   DE
     [temp_filt_stack]@@
   DE
     [temp_apscc_doc]
   DE
     [temp_ali_stack]@@
   
 ENDDO

 IF ( [useScratchYN] >= 1 ) THEN
   SYS
     rmdir -v [scratch_dir]
 ENDIF
 
 EN 

 
@


1.3
log
@Tapu's scratch, echo verbose, doc file close bug fixes
@
text
@d18 2
a19 3
 [file_list]      = 'filenames'           ; List of frame set file names (without extensions)
;;; [in_mrc_exts] = '.mrcs'               ; Current frame image stack mrc     
 [in_mrc]         = 'Brno8/[in].mrcs'     ; MRC file pattern ([in] == Entry in 'file_list')
d23 4
a26 4
 [scratch_dir]    = '/var/tmp/tmpframes'   ; Temporary scratch directory (OPTIONAL)
 [shift_doc_stem] = 'doc_shift_'           ; Alignment doc file prefix
 [mlr_doc_stem]   = 'doc_mlr_shift_'       ; Refined alignment doc file prefix
 [aligned_stem]   = 'mic'                  ; Summed aligned image prefix
a56 3
;;;[in_mrc]    = [in][in_mrc_exts]     ; Current frame image stack mrc     
;;;[temp_spi]  = [in]                  ; SPIDER image stack   
;;;[temp_filt_stack] = [filt_stem][in] ; Filtered stack  
a58 1
;;;[temp_ali_stack] = [sh_stem][in]    ; Aligned image stack   
d215 1
a215 1
     ; Shift image: n to align with image: nvs
@


1.2
log
@*** empty log message ***
@
text
@d3 1
a3 1
 ; USAGE:    clean ; $spid/newspinog spi/dat @@framealign
d7 8
a14 6
 [skip]     = 4    ; Exclude frames within this distance when
                   ; finding refined image shifts.

 [eps-zero] = .07  ; Default shifts to zero if <  this value

 [nvs]      = 1    ; Shift versus this frame
d18 3
a20 1
 [files]          = 'filenames'           ; List of frame set file names (without extensions)
d22 1
a22 1
 [in_mrc_exts]    = '.frames.mrc'         ; Current frame image stack mrc     
d24 4
a27 1
 ;  ----------------- Output files ----------------------------------------
d29 1
a29 4
 [filt_stem]      = 'jjnk_filtstk_'       ; Filtered stack  
 [apscc_doc]      = 'jnk_unused_doc'      ; unused 'AP SCC' Alignment doc file
 [shift_doc_stem] = 'jjnk_shift_doc_'     ; Alignment doc file
 [mlr_doc_stem]   = 'jjnk_mlr_shift_doc_' ; Refined alignment doc file
d31 7
a37 3
 [sh_stem]        = 'jjnk_shstk_'         ; Aligned frame image stack 
  
 [aligned_stem]   = 'jjnk_ali_'           ; Summed aligned image  
d39 5
a43 1
 ; ----------------- END BATCH HEADER ------------------------------------
d47 1
a47 1
 MD                                    ; Use 4 processors
d49 1
a49 1
   4
d53 1
a53 1
     [files]                           ; List of file names  (input)
d55 1
a55 1
   IF ([fails] .NE. 0) EXIT            ; End of input
d57 4
a60 5

   ; Construct i/o filenames   
   [in_mrc]    = [in][in_mrc_exts]     ; Current frame image stack mrc     
   [spi]       = [in]                  ; SPIDER image stack   
   [filt]      = [filt_stem][in]       ; Filtered stack  
d63 1
a63 1
   [sh]        = [sh_stem][in]         ; Aligned image stack   
d68 4
a71 2
   SYS
     echo "  xxxxx 'CP FROM MRC'  Convert images from MRC to SPIDER format xxxxxxxxxxxxxxxx "
d75 1
a75 1
     [spi]@@*               ; SPIDER stack file              (output)
d79 9
a87 8

lb22
   SYS  
     echo "  xxxxx 'FS' ixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "

   FI H [maxim],[nx],[ny]  ; Find number of images 
     [spi]@@                ; Image stack               (input)
     MAXIM,NX,NY           ; Images & size
d89 1
a89 1
   DO [n]=1,[maxim]
d91 7
a97 3
       [spi]@@{**[n]}       ; SPIDER file               (input)
     SYS
       echo '  Range ({%I2%[n]}): ({%f10.2%[min]} ... {%f8.2%[max]})'
d102 6
a107 2
   SYS  
     echo "  xxxxx 'DN MED' Filter {%I0%[maxim]} frame images. Size: {%I0%[nx]} x {%I0%[ny]}"
d109 1
a109 1
   DO [n] = 1,[maxim]
d112 4
a115 5
       [spi]@@{**[n]}       ; SPIDER file                (input)
       [filt]@@{**[n]}      ; Image                      (output)
       3                   ; Filter length
       Cross               ; Filter shape
   ENDDO
a116 1
   DO [n]=1,[maxim]
d118 7
a124 3
       [filt]@@{**[n]}       ; SPIDER file               (input)
     SYS
       echo '  Range ({%I2%[n]}): ({%f10.2%[min]} ... {%f8.2%[max]})'
d127 4
a130 6

lb33
   FI H [maxim],[nx],[ny]  ; Find number of images 
     [filt]@@               ; Image stack                (input)
     MAXIM,NX,NY           ; Images & size
 
d133 7
a139 2
   SYS  
     echo "  xxxxx 'AP SCC' Find pair-wise alignment shifts for images xxxxxxxxxxx "
d141 2
a142 2
   [n2end]   = [maxim]
   [n2endm1] = [maxim] - 1
d145 1
a145 1
     [apscc_doc]              ; AP doc file            (removed)
d149 4
a152 4
   [n]  = 0
   DO [i] = 1,[n2endm1]
     [jgo] = [i] + [skip]
     IF ([jgo] >= [maxim]) EXIT
d154 1
a154 1
     DO [j] = [jgo],[maxim]
d158 11
a168 8
         [filt]@@{**[i]}       ; Reference frame        (input)
         150, 150             ; Search area 
         Yes, No              ; Normalize peak height, pad?  
         [filt]@@{**[j]}       ; Sample frame           (input)
         [apscc_doc]          ; Doc file               (output)

       SYS
         echo "  #{%I2%[i]}..{%I2%[j]}  Shift: {%f8.2%[xo]}, {%f8.2%[yo]}  Peak: {%f6.4%[pk]}"
d170 3
a172 3
       ; Default shifts to zero if <  [eps-zero]
       IF ( ABS([xo]) < [eps-zero] ) [xo] = 0.0 
       IF ( ABS([yo]) < [eps-zero] ) [yo] = 0.0 
d174 2
a175 2
       [n] = [n] + 1
       SD [n], [i],[j], [xo],[yo]
d180 1
a180 1
lb44
d182 6
a187 2
   SYS  
     echo "  xxxxx 'ML'   Refine alignment shifts xxxxxxxxxxxxxxxxxxxxxx "
d199 1
a199 1
lb55
d201 5
a205 2
   SYS  
     echo "  xxxxx 'SH F' Shift align frame images xxxxxxxxxxxxxxxxxxxxx"
d209 1
a209 1
     UD NEXT [key], [n],[xs],[ys] 
d213 6
a218 3
     SYS
       echo '  Image: {**[n]}    Shift: {%f6.2%[xs]}, {%f6.2%[ys]}'
     IF ([n] == [nvs]) CYCLE  ; No shift
d221 4
a224 4
     SH F                     ; Shift operation 
       [spi]@@{**[n]}          ; Image stack            (input)
       [sh]@@{**[n]}           ; Aligned stack          (output)
       [xs],[ys]              ; Shifts
d228 3
d232 3
a234 6
   CP                         ; Copy
     [spi]@@{**[nvs]}          ; Original stacked image  (input)
     [sh]@@{**[nvs]}           ; Aligned image stack     (output)

lb66
   [maxim] = 20
d237 5
a241 2
   SYS  
     echo "  xxxxx 'AD S' Sum aligned frame images xxxxxxxxxxxxxxxxxxxx"
d244 1
a244 1
     [sh]@@**                 ; Aligned images        (input)
a249 2
   SYS
     echo '  Sum image range: ({%f10.2%[min]} ... {%f8.2%[max]})'
d251 14
d267 5
@


1.1
log
@Initial revision
@
text
@a15 6
 ;           123456789 123456789 123456789 123456789 123456789 
 ![in1]    = '14jul28a_fmrp80_00058gr_00029sq_00003hl'
 ![in2]    = '14jul28a_fmrp80_00058gr_00029sq_00004hl'
 ![in3]    = '14jul28a_fmrp80_00058gr_00029sq_00005hl'
 ![in0]    = 'gc_14mar11a_rfm_00017gr_00001sq_v04_00032hl'

d39 1
a39 1
 DO                                    ; Endless loop
d45 2
a55 5
    goto lb44 !!!!!!!! ML ------------------------------------
   !goto lb55 !!!!!!!! SH ------------------------------------
   !goto lb67 !!!!!!!! SU ------------------------------------
   !goto lb68 !!!!!!!! CC ------------------------------------

d141 2
a142 2
       IF ( ABS[xo] < [eps-zero] ) [xo] = 0.0 
       IF ( ABS[yo] < [eps-zero] ) [yo] = 0.0 
d212 1
a212 1
 EN !!!!------------------------------------------------------------
d214 1
@
