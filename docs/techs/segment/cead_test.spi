 ; SOURCE: spider/docs/techs/segment/cead_test.spi
 ;
 ; AUTHOR:  ArDean Leith   October 2006 
 ;
 ; PURPOSE:  Studies influence of parameter selection on
 ;           results of SPIDER 'CE AD' operation  "HEG"
 ;           Anisotropic Diffusion
 ;           Operates on a single relevant slice from the volume.
 ;
 ; OUTPUT:   Stack of images created with various parameter settings.
 ; 
 ; USAGE:    Use Web to display central slice of the original input 
 ;               volume
 ;           Use Web -- Pixel operation to find location of a good window
 ;               for testing.  Window will be 200x200 unless you alter it below.
 ;           Set input parameters below: 
 ;               Input volume name, 
 ;               Input window location,
 ;               CE AD Iterations- Initial, Final, & Step
 ;               CE AD Times- Initial, Final, & Step
 ;               FC - Contour Levels
 ;           While running - use Web to look at results in: cead_stk 
 ;           When finished - use Web to look at final montage in: cead_montage   
 ;           When finished - use Web to look at final imges in: cead_volume   
 ;
 ; tingvol    68,229,121  10,25,5  .05,.15,.05
 ; ryrvol     260,50,55   5,100,25 .00,.21,.10  20,110,90
 ; benzervol  260,50,66   3,23,10  .01,.13,.06

 ; Toggles to select types of outputs
 [PW]  = 1                  ; Output Power Spectrums 
 [FC]  = 1                  ; Output Contoured Files
 [TH]  = 0                  ; Output Thresholded images
 [VOL] = 1                  ; Output Volume with windows of denoised slices

 ; -----------------------------------  INPUT VOLUME  

 [volin] = 'win_bzvol'      ; Input volume 

 ; -----------------------------------  OUTPUT FILES  

 [stkout]  = 'cead_stk'          ; Labeled output stack file  

 [montage] = 'cead_montage'      ; Final labeled output montage    

 [volout]  = 'cead_denoisedvol'  ; Final labeled denoised slice volume    
 
 ; -----------------------------------  INPUT PARAMETERS  

 [slice]       =  6      ; Relevant slice from input volume     

 [iter_go]     =   3     ; Starting iteration
 [iter_end]    =  23     ; Ending iteration
 [iter_step]   =  10     ; Iteration step 

 [time_go]     = .01     ; Starting time-step (0... 0.25)
 [time_end]    = .13     ; Ending time-step
 [time_step]   = .06     ; Time-step step 
 [fclevels]    = 4       ; FC Contour Levels


 [sigma_go]    = 3.0     ; Starting sigma     (Standard deviation)
 [sigma_end]   = 3.0     ; Ending sigma        
 [sigma_step]  = 3.0     ; Sigma step

 [lambda_go]   =  10     ; Starting lambda    (Contrast-- integers)
 [lambda_end]  =  10     ; Ending lambda
 [lambda_step] =  10     ; Lambda step

 [cutoff_go]   =  1      ; Starting cutoff    (Usually unused)  
 [cutoff_end]  =  1      ; Ending cutoff
 [cutoff_step] =  1      ; Cutoff step

; -------------- END BATCH HEADER -------------------------------------------

 SYS
   echo "  File:       [volin]"

 ; Remove any existing output files
 DE 
   [stkout] 
    
 ; Report input volume size, location, etc
 FI H [nx],[ny],[nz],[max],[min],[favg]
   [volin]                   ; Input volume 
   nx,ny,nz,max,min,avg      ; nx, ny, & nz locations
 SYS
   echo "  Avg:        {***[favg]}" 
 SYS
   echo "  Size:       {%i0%[nx]} x {%i0%[ny]} x {%i0%[nz]}"

 ; Scale image values over 0...255
 AR SCA                      ; Scale image 0...255
   [volin]                   ; Input volume 
   _2                        ; Output
   0 255                     ; Scaling range

 ;NEG                        ; Negate the image (MAY NOT BE NECESSARY)
 ;_2 
 ;_2 


 [imgnum] = 0 

 ; Display Original Unfiltered Slice 

 ; Extract relevant slice from processed volume
 PS Z                        ; Pick slice
   _2                        ; Input volume 
   _3                        ; Output slice 
   [slice]                   ; Slice number 

 ; Increment image stack pointer 
 [imgnum]=[imgnum]+1         ; Increment stack pointer 
 LA                          ; Label the image 
   _3                        ; Input stack image 
   [stkout]@{****[imgnum]}   ; Output stack 
   ORIGINAL


IF ([PW] > 0) THEN
   [padpx] = (4 * [nx]) + 1 ; Padded x dimension
   [padpy] = (4 * [ny]) + 1 ; Padded y dimension

   ; Power Spectrum of slice
   PD                       ; Pad into 4X larger image
   _3                       ; Original slice input
   _4                       ; Padded image
   [padpx],[padpy]          ; Padded image size
   Y                        ; Use average for background
 
   PW                       ; Power Spectrum of slice
   _4                       ; Padded image
   _5                      ; Power spectrum output

   [px] = ([padpx] - [nx]) / 2
   [py] = ([padpy] - [ny]) / 2
 
   ; Window the PS  
   WI                      ; Window operation
   _5                      ; Input
   _4                      ; Output
   [nx],[ny]               ; Window size
   [px],[py]               ; Window location

   [wcx] = ([nx]/2) + 1
   [wcy] = ([ny]/2) + 1
   ; Mask the PS  
   MA                      ; Window operation
   _4                      ; Input
   _5                      ; Output
   (0,6)                   ; Outer & inner masking radii  
   D                       ; Sharp disk
   E                       ; External background input
   0                       ; Background
   [wcx],[wcy]             ; Mask center coordinates 

   ; Increment image stack pointer 
   [imgnum]=[imgnum]+1     ; Increment stack pointer 
   LA                      ; Label the image 
   _5                      ; Input stack image 
   [stkout]@{****[imgnum]} ; Output stack 
   POWER SPEC 
ENDIF

IF ([FC] > 0) THEN
   ; Contour the output image
   FC                      ; Contour the image 
   _3                      ; Input
   _5                      ; Output
   [fclevels]              ; Levels
   Y                       ; Overwrite the image
   W                       ; White contours 
 
   ; Increment image stack pointer 
   [imgnum] = [imgnum] + 1     
   ; Put label in output image
   LA                      ; Label the image 
   _5                      ; Input image 
   [stkout]@{****[imgnum]} ; Output stack 
   CONTOURED  
ENDIF

IF ([TH] > 0) THEN
   ; Threshold the output image
   TH F                    ; Threshold the image 
   _3                      ; Input
   _5                      ; Output
   B                       ; Below the cutoff set to zero
   [cutoff_go]             ; Cutoff threshold
   (0.0)                   ; Value for Below the cutoff  
   ; Increment image stack pointer 
   [imgnum]=[imgnum]+1     ; Increment stack pointer 
   LA                      ; Label the image 
   _5                      ; Input stack image 
   [stkout]@{****[imgnum]} ; Output stack 
   THRESHOLDED 
ENDIF


 ; ----------  process _2   Using:  CE -- AD, HEG 

 [iter_loops]   = 1   ; Protect against division by zero
 IF ([iter_step] > 0) THEN
   [iter_loops]   = INT((([iter_end]   - [iter_go])   / [iter_step]) + 0.5 ) + 1
 ENDIF
 [time_loops]   = 1
 IF ([time_step] > 0) THEN
   [time_loops]   = INT((([time_end]   - [time_go])   / [time_step]) + 0.5)  + 1
 ENDIF
 [sigma_loops]  = 1
 IF ([sigma_step] > 0) THEN
    [sigma_loops]  = INT((([sigma_end]  - [sigma_go])  / [sigma_step]))  + 1
 ENDIF
 [lambda_loops] = 1
 IF ([lambda_step] > 0) THEN
    [lambda_loops] = INT((([lambda_end] - [lambda_go]) / [lambda_step])) + 1
 ENDIF
 [cutoff_loops] = 1
 IF ([cutoff_step] > 0) THEN
   [cutoff_loops] = INT((([cutoff_end] - [cutoff_go]) / [cutoff_step])) + 1
 ENDIF

 ; Find number of output images
 [frames]       = [iter_loops]*[time_loops]*[sigma_loops]*[lambda_loops]*[cutoff_loops]

 ; Report steps
 SYS
   echo "  Iterations: {***[iter_loops]}    Times:      {***[time_loops]}"
 SYS
   echo "  Sigmas:     {***[sigma_loops]}    Lambdas:    {***[lambda_loops]}"
 IF ([TH] > 0) THEN
   SYS
     echo "  Cutoffs:    {***[cutoff_loops]}     Tests:     {***[frames]}"
 ELSE
   SYS
     echo "  Tests:      {***[frames]}"
 ENDIF
 SYS
   echo "   "
 SYS
   echo "  Output stack: [stkout]"
 SYS
   echo "  Output volume: [volout]"
 SYS
   echo "   "

IF ([VOL] > 0) THEN
   ; Want an output volume of denoised slice windows 
   PS Z                    ; Pick slice
   [volin]                 ; Input volume 
   _8                      ; Output slice 
   [slice]                 ; Slice number

   ; Scale the slice same as for denoised slice
   AR 
   _8                      ; Input slice 
   _7                      ; Output slice 
   255 * (P1-[min]) / ([max]-[min]) 

   [padlocx] = [nx] + 0    ; Location for inset window
   [padlocy] = [ny] + 0    ; Location for inset window

   BL                      ; Blank volume
   [volout]
   [nx],[ny]+36,[frames]; Size adjusts for label
   N                       ; Use background
   0                       ; Background
 ENDIF

 ; Carry out filtering steps
 [vol_frame]=0

 DO [iter_loop]=1,[iter_loops]
   [iter]= [iter_go] + ([iter_loop] -1) * [iter_step]
   
   DO  [time_loop]=1,[time_loops]
      [time]= [time_go] + ([time_loop] -1) * [time_step]

      DO  [sigma_loop]=1,[sigma_loops]
            [sigma]= [sigma_go] + ([sigma_loop] -1) * [sigma_step]

         DO [lambda_loop]=1,[lambda_loops]
            [lambda]= [lambda_go] + ([lambda_loop] -1) * [lambda_step]

            CE AD             ; Anisotropic Diffusion 
            _2                ; Input volume 
            _3                ; Temp. output volume 
            HEG               ; AD filter type
            [iter]            ; Iterations 
            [time]            ; Time step 
            [sigma],[lambda]  ; Sigma & Lambda 
 
            ; Extract relevant slice from processed volume
            PS Z           ; Pick slice
              _3             ; Input volume 
              _4             ; Output slice 
              [slice]        ; Slice number 

            IF ([TH] .LE. 0) THEN
               ; Display denoised image
 
               ; Increment image stack pointer 
               [imgnum] = [imgnum] + 1     
               ; Echo image description to terminal
               SYS                  ; Systems call
               echo "  N: {***[imgnum]}       Iter: {***[iter]}  Time: {%f3.2%[time]}  S: {%f3.1%[sigma]} L: {***[lambda]}"
               ; Put label in output image
               LA                  ; Label the image 
               _4                  ; Input image 
               [stkout]@{****[imgnum]}            ; Output stack 
               I:{***[iter]} T:{%f3.2%[time]}   

;              Some alternatative Labels 
;              {***[imgnum]}  
;              I:{***[iter]}
;              T:{%f3.2%[time]}  
;              S:{%f3.1%[sigma]} 
;              L:{**[lambda]}"  
;              C:{***[cutoff]} 
            ELSE
               ; Display thresholded denoised image
               DO  [cutoff_loop]=1,[cutoff_loops]
                  [cutoff]= [cutoff_go] + ([cutoff_loop] -1) * [cutoff_step]
               
                  ; Threshold the output image
                  TH F              ; Threshold the image 
                  _4                ; Input
                  _5                ; Output
                  B                 ; Below the cutoff set to zero
                  [cutoff]          ; Cutoff threshold
                  (0.0)             ; Value for Below the cutoff
  
                  ; Increment image stack pointer 
                  [imgnum] = [imgnum] + 1     
                  ; Echo image description to terminal
                  SYS                  ; Systems call
                  echo "  N: {***[imgnum]}   TH  Iter: {***[iter]}  Time: {%f3.2%[time]}  S: {%f3.1%[sigma]} L: {***[lambda]} C: {***[cutoff]}" 
                  ; Put label in output image
                  LA                  ; Label the image 
                  _5                  ; Input image 
                  [stkout]@{****[imgnum]}            ; Output stack 
                  I:{***[iter]} T:{%f3.2%[time]} C: {***[cutoff]}  
               ENDDO
            ENDIF



            IF ([FC] > 0) THEN
              ; Display contour on the denoised slice
              FC                ; Contour the image 
              _4                ; Input
              _5                ; Output
              5                 ; Levels
              Y                 ; Overwrite the image
              W                 ; White contours 
 
              ; Increment image stack pointer 
              [imgnum] = [imgnum] + 1     
              ; Echo image description to terminal
              SYS                  ; Systems call
              echo "  N: {***[imgnum]}   FC  Iter: {***[iter]}  Time: {%f3.2%[time]}  S: {%f3.1%[sigma]} L: {***[lambda]}" 
              ; Put label in output image
              LA                  ; Label the image 
              _5                  ; Input image 
              [stkout]@{****[imgnum]}            ; Output stack 
              I:{***[iter]} T:{%f3.2%[time]}  
            ENDIF

            IF ([PW] > 0) THEN
              ; Display Power Spectrum of denoised slice
              [px] = ([padpx] - [nx]) / 2
              [py] = ([padpy] - [ny]) / 2

              PD                  ; Pad into 4X larger image
              _4                  ; Original slice input
              _5                  ; Padded image
              [padpx],[padpy]     ; Padded image size
              Y                   ; Use average for background
              [px],[py]           ; Window location

              PW                  ; Power Spectrum of slice
              _5                  ; Padded image
              _6                  ; Power spectrum output

              ; Window the PS  
              WI                  ; Window operation
              _6                  ; Input
              _5                  ; Output
              [nx],[ny]           ; Window size
              [px],[py]           ; Window location

              ; Mask the PS  
              MA                  ; Window operation
              _5                  ; Input
              _6                  ; Output
              (0,6)               ; Masking radii
              D                   ; Sharp disk
              E                   ; External background input
              0                   ; Background
              [wcx],[wcy]         ; Mask center coordinates 

              ; Increment image stack pointer 
              [imgnum] = [imgnum] + 1     
              ; Echo image description to terminal
              SYS                  ; Systems call
              echo "  N: {***[imgnum]}   PS  Iter: {***[iter]}  Time: {%f3.2%[time]}  S: {%f3.1%[sigma]} L: {***[lambda]}" 

              ; Put label in output image
              LA                  ; Label the image 
              _6                  ; Input image 
              [stkout]@{****[imgnum]}            ; Output stack 
              I:{***[iter]} T:{%f3.2%[time]}  
           ENDIF

           IF ([VOL] > 0) THEN
              ; Create volume of slice with denoised areas

              CP
              _7                  ; Original slice input
              _8                  ; Padded image
             
              IN                  ; Pad into original slice image
              _4                  ; Denoised slice input
              _8                  ; Original intensity scaled slice
              [padlocx],[padlocy] ; Window location

              ; Put label in output image
              LA                  ; Label the image 
              _8                  ; Input image 
              _9                  ; Output image 
              N: {***[imgnum]} I:{***[iter]} T:{%f3.2%[time]} S: {%f3.1%[sigma]} L: {***[lambda]}
 
              [vol_frame]=[vol_frame]+1

              SK R                ; Stack into labeled size volume
              [volout]            ; Original intensity scaled slice
              _9                  ; Denoised slice input
              [vol_frame]         ; Slice location
              *                   ; Stop stacking
           ENDIF
         ENDDO
      ENDDO
   ENDDO
 ENDDO

 SYS
   echo "  Total Frames: {***[imgnum]}"

 DE 
   [montage] 

 MN S                    ; Montage the output images
   [stkout]@****         ; Input file template
   1-[imgnum]            ; File numbers
   8,1                   ; Images / row, margin width
   0                     ; Margin value
   [montage]             ; Output file

 FS
   [montage]             ; Output file

 SYS
   echo "  Output montage: [montage]" ;  echo

 EN


 
