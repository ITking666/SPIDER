head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2017.01.03.19.25.44;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2017.01.03.16.27.36;	author leith;	state Exp;
branches;
next	;


desc
@@


1.2
log
@can window
@
text
@ ; MASTER COPY: spider/docs/techs/segment/seg_test.spi
 ;
 ; AUTHOR:  ArDean Leith   October 2006 
 ;
 ; PURPOSE:  Applies Anisotropic Diffusion to denoise volume then
 ;           studies influence of some parameter settings on
 ;           results of 21 different SPIDER segmentation 
 ;           filters/operations.
 ;
 ; INPUT:    A SPIDER volume.  Operates on a windowed subvolume or  
 ;           relevant slice from the volume.
 ;
 ; USAGE:    Use Web to display slices of the original input volume.
 ;               Find a good slice for testing       
 ;           Use Web -- Pixel operation to find location of a good window
 ;               for testing.  Window will be 200x200 unless you alter it below.
 ;           Edit input parameters and invoke this procedure in SPIDER 
 ;           To limit the types of operations studied alter the 
 ;           selection toggles (e.g.[CE_GNC] = 1) in the procedure.
 ;
 ;           While running - use Web to look at results in:       seg_stk 
 ;           When finished - use Web to look at final montage in: seg_montage
 ;
 ; OUTPUT:   1) Stack of images created with various parameter settings.
 ;           2) Montage of resulting images.
 ; 
 ; tingvol    68,229,121  10,25,5  .05,.15,.05
 ; benzervol  260,50,66   3,23,10  .01,.13,.06
 ; ryrvol     260,50,55   5,100,25 .00,.21,.10  20,110,90
 ; spider spi/dat @@seg_test

 
 [CE_GNC]    = 1
 [CE_MED]    = 1
 [CE_HI]     = 1
 [CE_LAH]    = 1
 [CE_HAR]    = 1
 [CE_HURST]  = 1
 [CE_MAX]    = 1
 [CE_VAR]    = 1
 [CE_RANGE]  = 1
 [CE_G]      = 1
 [CE_LAP]    = 1
 [CE_SO]     = 1
 [CE_FREI]   = 1
 [CE_PR]     = 1
 [FC]        = 1
 [ED]        = 1
 [CE_WATER]  = 1
 [ER_WA]     = 1
 [CE_RIDGE]  = 1
 [ER_EDM]    = 1
 [CE_TOP]    = 1             ; Usefull for particles only

 ; -----------------------------------  INPUT VOLUME  

![volin] = 'bzvol'    
 [volin] = 'win_bzvol'    

 ; -----------------------------------  OUTPUT FILES  

 [stkout]  = 'jnkseg_stk'      ; Labeled output stack file   

 [montage] = 'jnkseg_montage'  ; Final labeled output montage  

 ; -----------------------------------  INPUT PARAMETERS  

 ; Toggle to make window from large input volume.  Value of '1' is true.
 [WINDO]  = 0                ; Window original  input volume first

 IF ([WINDO] > 0) THEN
   [wnx]    = 200            ; Window X dimension
   [wny]    = 200            ; Window Y dimension
   [wnz]    =  11            ; Window Z dimension (Should be odd)

   [wx]     = 260            ; Window upper left X location
   [wy]     =  50            ; Window upper left Y location
   [wz]     =  50            ; Window upper      Z location
   [zsl]    =  6             ; Z slice     

 ELSE
   [zsl]    =  6             ; Z slice     

 ENDIF

 [aditer] =   5              ; Iteration
 [time]   = .02              ; Time-step (0... 0.25)

 [sigma]  = 3.0              ; Sigma     (CE AD Standard deviation)
 [lambda] =  10              ; Lambda    (CE AD Contrast-- integers)

 ; -------------- END BATCH HEADER -------------------------------------------

; Remove any existing output files
 DE 
   [stkout] 
 DE 
   [montage] 
    
 ; Report input volume size, location, etc
 FI H [nx],[ny],[nz]
   [volin]                       ; Input volume 
   NX, NY, NZ                    ; Header values

 SYS
   echo "  Input volume:       {%I0%[nx]} x {%I0%[ny]} x {%I0%[nz]}"

 IF ( [WINDO] > 0) THEN

   ; Window the input volume into smaller volume 
   WI                            ; Window operation
     [volin]                     ; Input  volume
     _1                          ; Output volume
     [wnx],[wny],[wnz]           ; Window size
     [wx],[wy],[wz]              ; Window location
 
   SYS
     echo "  Windowed:   {%I0%[wnx]} x {%I0%[wny]} x {%I0%[wnz]}"
   SYS
     echo "       At:    {%I0%[wx]},  {%I0%[wy]},   {%I0%[wz]}"

 ELSE
   ; Load input volume incore
   CP
     [volin]                     ; Input  volume
     _1                          ; Output volume

 ENDIF

 ; Scale volume values over 0...255
 AR SCA                        ; Scale image 0...255
   _1                          ; Input  volume
   _2                          ; Output volume
   0 255                       ; Scaling range


 ; Extract relevant slice from input volume
 PS Z                          ; Pick relevant slice
   _2                          ; Input volume
   _3                          ; Output slice 
   [zsl]                       ; Slice number 
 
 SYS
   echo "       Using slice:     {%I0%[zsl]}"

 ;NEG                          ; Negate the image (MAY NOT BE NECESSARY)
 ;_3                           ; Input volume
 ;_3                           ; Output volume 


 ; Report windowed image range (for setting threshold)
 FS [fmax],[fmin],[favg]
   _2                          ; Input volume
 SYS
   echo "       Avg:        {***[favg]}"; echo "  "
 SYS                
   echo "  Denoising Iter:{***[aditer]}  Time:{%f3.2%[time]}  S:{%f3.1%[sigma]} L: {**[lambda]}" ; echo 

 [imgnum] = 0                  ; Initialize output image 

 
 CP
   _2                          ; Input volume 
   win_bzvol                   ; Small input  volume 

 [imgnum] = 0                  ; Initialize output image 


 ; ----------------------------------- ORIGINAL SLICE 

 ; Increment image stack pointer 
 [imgnum]=[imgnum]+1           ; Increment stack pointer 
 LA                            ; Label the image 
   _3                          ; Input stack image 
   [stkout]@@{****[imgnum]}     ; Output stack 
   ORIGINAL

 SYS  
   echo "  N: {***[imgnum]} Original" 

 ; ----------------------------------------- CE AD
 
 CE AD                         ; Anisotropic Diffusion 
   _2                          ; Input volume 
   _4                          ; Output volume 
   HEG                         ; AD filter type
   [aditer]                    ; Iterations 
   [time]                      ; Time step 
   [sigma],[lambda]            ; Sigma & Lambda 
 
 PS Z                          ; Pick relevant slice
   _4                          ; Input volume 
   _5                          ; Output slice 
   [zsl]                       ; Slice number 
 
 ; Increment image stack pointer 
 [imgnum]=[imgnum]+1           ; Increment stack pointer 
 LA                            ; Label the image 
   _5                          ; Input stack image 
   [stkout]@@{****[imgnum]}     ; Output stack 
   CE AD ORIGINAL

 SYS  
   echo "  N: {***[imgnum]} CE AD Denoised Original" 


 IF ([CE_MED] == 1) THEN
   ; ----------------------------------- CE -- Median 
    
   DO  [iter]=1,3 
      [radius] = [iter] * 2 + 1 
      CE MED                    ; Median 
        _2                      ; Original Input volume 
        _6                      ; Output volume 
        [radius]                ; Length 
        BOX                     ; Box shape 
   
      PS Z                      ; Pick relevant slice
        _6                      ; Input volume 
        _7                      ; Output slice 
        [zsl]                   ; Slice number 
   
      [imgnum]=[imgnum]+1       ; Increment stack pointer 
      LA                        ; Label the image 
        _7                      ; Input stack image 
        [stkout]@@{****[imgnum]} ; Output stack 
        CE MED R:{***[radius]}
   
      SYS  
        echo "  N: {***[imgnum]} CE Median Radius: {***[radius]}" 
   ENDDO 
 ENDIF

 [CE_GNC]
 IF ([CE_GNC] == 1) THEN
  ; ----------------------------------- CE -- GNC 
    
   DO  [iter]=1,3 
      [glambda] = [iter] * 2 + 1 
      CE GNC                    ; GNC 
        _3                      ; Original Input slice 
        _7                      ; Output slice 
        [iter]                  ; Lambda (smaller is for smaller obj) 
         0.2                    ; Contrast sensitivity 
         1.0E-8                 ; accuracy 
    
      [imgnum]=[imgnum]+1       ; Increment stack pointer 
      LA                        ; Label the image 
        _7                      ; Input stack image 
        [stkout]@@{****[imgnum]} ; Output stack 
        CE GNC L:{***[glambda]}
   
      SYS  
        echo "  N: {***[imgnum]} CE GNC Lambda: {***[glambda]}" 
   ENDDO 
ENDIF


 IF ([CE_HI] == 1) THEN
   
   ; ----------------------------------- CE -- Histogram Equalization
   
   CE HI                      ; CE HI
   _5                         ; Input image
   _7                         ; Output image
   N                          ; No print
   
   [imgnum]=[imgnum]+1        ; Increment stack pointer 
   LA                         ; Label the image 
   _7                         ; Input stack image 
   [stkout]@@{****[imgnum]}    ; Output stack 
   CE HI
   
   SYS  
   echo "  N: {***[imgnum]} CE HI" 
 ENDIF

 IF ([CE_LAH] == 1) THEN
   ; ----------------------------------- CE -- LAH 
    
   [bins]   = 64                 ; Number of bins 
   
   DO  [iter]=1,3 
      [radius] = [iter] * 2 + 1 
    
      CE LAH                     ; Local area histogram equalization 
      _4                         ; Input volume 
      _6                         ; Output volume 
      [radius],[radius],[radius] ; Neighborhood 
      [bins]                     ; Number of bins 
   
      PS Z                       ; Pick relevant slice
      _6                         ; Input volume 
      _7                         ; Output slice 
      [zsl]                      ; Slice number 
   
      [imgnum]=[imgnum]+1        ; Increment stack pointer 
      LA                         ; Label the image 
      _7                         ; Input stack image 
      [stkout]@@{****[imgnum]}    ; Output stack 
      CE LAH R:{**[radius]} B:{**[bins]}  
   
      SYS  
      echo "  N: {***[imgnum]} CE LAH Radius: {**[radius]} Bins: {***[bins]}" 
   ENDDO
 ENDIF

IF ([CE_HAR] == 1) THEN
   ;------------------------------ CE -- Haralick 
    
   [off] = 2
   DO  [iter]=0,1 
      DO  [mode]=1,6 
   
         [radius] = 9 + [iter] * 6 
    
         CE HAR                  ; Haralick 
         _5                      ; Input slice 
         _7                      ; Output slice 
         [radius],[radius]       ; Neighborhood 
         (32)                    ; Intensity Levels 
         [off],[off]             ; Offset 
         [mode]                  ; Mode 
   
         [imgnum]=[imgnum]+1     ; Increment stack pointer 
         LA                      ; Label the image 
         _7                      ; Input stack image 
         [stkout]@@{****[imgnum]} ; Output stack 
         CE HAR M:{*[mode]} R:{**[radius]} O:2 
   
         SYS
         echo "  N: {***[imgnum]} CE Haralick Radius: {**[radius]} Mode: {*[mode]} Off: 2"
      ENDDO 
   ENDDO 
   
   [off] = 4
   DO  [iter]=0,1 
      DO  [mode]=1,6 
   
         [radius] = 11 + [iter] * 6 
    
         CE HAR                  ; Haralick 
         _5                      ; Input slice 
         _7                      ; Output slice 
         [radius],[radius]       ; Neighborhood 
         (32)                    ; Intensity Levels 
         [off],[off]             ; Offset 
         [mode]                  ; Mode 
   
         [imgnum]=[imgnum]+1     ; Increment stack pointer 
         LA                      ; Label the image 
         _7                      ; Input stack image 
         [stkout]@@{****[imgnum]} ; Output stack 
         CE HAR M:{*[mode]} R:{**[radius]} O:4" 
   
         SYS
         echo "  N: {***[imgnum]} CE Haralick Radius: {**[radius]} Mode: {*[mode]} Off: 4"
      ENDDO 
   ENDDO 
 ENDIF

 IF ([CE_HURST] == 1) THEN
   ;------------------------------ CE -- Hurst 
    
   DO  [iter]=1,3 
      [radius] =1  + [iter] * 2 
   
      CE HURST                   ; Hurst 
      _4                         ; Input volume 
      _6                         ; Output volume 
      [radius]                   ; Radius 
   
      PS Z                       ; Pick relevant slice
      _6                         ; Input volume 
      _7                         ; Output slice 
      [zsl]                      ; Slice number 
   
      [imgnum]=[imgnum]+1        ; Increment stack pointer 
      LA                         ; Label the image 
      _7                         ; Input stack image 
      [stkout]@@{****[imgnum]}    ; Output stack 
      CE HURST  R:{***[radius]}
   
      SYS  
      echo "  N: {***[imgnum]} CE Hurst Radius: {***[radius]}" 
   ENDDO
ENDIF

IF ([CE_MAX] == 1) THEN
   ;------------------------------ CE -- Maximum 
   
   DO [iter]=1,3 
      [radius] = 1  + [iter] * 2 
   
      CE MAX                  ; Maximum 
      _4                      ; Input volume 
      _6                      ; Output volume 
      [radius]                ; Radius 
   
      PS Z                    ; Pick relevant slice
      _6                      ; Input volume 
      _7                      ; Output slice 
      [zsl]                   ; Slice number 
   
      [imgnum]=[imgnum]+1     ; Increment stack pointer 
      LA                      ; Label the image 
      _7                      ; Input stack image 
      [stkout]@@{****[imgnum]} ; Output stack 
      CE MAX R:{***[radius]}
   
      SYS  
      echo "  N: {***[imgnum]} CE Max Radius: {***[radius]}" 
   ENDDO
ENDIF

IF ([CE_VAR] == 1) THEN
   ;------------------------------ CE -- Variance 
   
   DO  [iter]=1,3 
      [radius] = 1  + [iter] * 2 
   
      CE VAR                  ; Variance 
      _4                      ; Input volume 
      _6                      ; Output volume 
      [radius]                ; Radius 
   
      PS Z                    ; Pick relevant slice
      _6                      ; Input volume 
      _7                      ; Output slice 
      [zsl]                   ; Slice number 
   
      [imgnum]=[imgnum]+1     ; Increment stack pointer 
      LA                      ; Label the image 
      _7                      ; Input stack image 
      [stkout]@@{****[imgnum]} ; Output stack 
      CE VAR R:{***[radius]}
   
      SYS  
      echo "  N: {***[imgnum]} CE VAR Radius: {***[radius]}" 
   ENDDO
ENDIF

IF ([CE_RANGE] == 1) THEN
   ;------------------------------ CE -- Range 
   
   DO  [iter]=1,3 
      [radius] = 1  + [iter] * 2 
   
      CE RANGE                ; Hurst 
      _4                      ; Input volume 
      _6                      ; Output volume 
      [radius]                ; Radius 
   
      PS Z                    ; Pick relevant slice
      _6                      ; Input volume 
      _7                      ; Output slice 
      [zsl]                   ; Slice number 
   
      [imgnum]=[imgnum]+1     ; Increment stack pointer 
      LA                      ; Label the image 
      _7                      ; Input stack image 
      [stkout]@@{****[imgnum]} ; Output stack 
      CE RANGE R:{***[radius]}
   
      SYS  
      echo "  N: {***[imgnum]} CE Range Radius: {***[radius]}" 
   ENDDO
ENDIF

IF ([CE_G] == 1) THEN
   ;------------------------------ CE -- Gradient 
   
   CE G                       ; Gradient 
   _4                         ; Input volume 
   _6                         ; Output volume 
   
   PS Z                       ; Pick relevant slice
   _6                         ; Input volume 
   _7                         ; Output slice 
   [zsl]                      ; Slice number 
   
   [imgnum]=[imgnum]+1        ; Increment stack pointer 
   LA                         ; Label the image 
   _7                         ; Input stack image 
   [stkout]@@{****[imgnum]}    ; Output stack 
   CE GRADIENT  
   
   SYS  
   echo "  N: {***[imgnum]} CE Gradient" 
ENDIF

IF ([CE_LAP] == 1) THEN
   ;------------------------------ CE -- Laplacian 
   
   DO LB12 [iter]=0,2 
      [radius] = 3  + [iter] * 4 
   
      CE L                    ;  
      _4                      ; Input volume 
      _6                      ; Output volume 
      [radius]                ; Radius 
   
      PS Z                    ; Pick relevant slice
      _6                      ; Input volume 
      _7                      ; Output slice 
      [zsl]                   ; Slice number 
   
      [imgnum]=[imgnum]+1     ; Increment stack pointer 
      LA                      ; Label the image 
      _7                      ; Input stack image 
      [stkout]@@{****[imgnum]} ; Output stack 
      CE LAP R:{***[radius]}
   
      SYS  
      echo "  N: {***[imgnum]} CE Laplacian Radius: {***[radius]}" 
   LB12
ENDIF

IF ([CE_SO] == 1) THEN
   ;------------------------------ CE -- Sobel 
   
   CE S                      ;  
   _4                        ; Input volume 
   _6                        ; Output volume 
   
   PS Z                      ; Pick relevant slice
   _6                        ; Input volume 
   _7                        ; Output slice 
   [zsl]                     ; Slice number 
   
   [imgnum]=[imgnum]+1       ; Increment stack pointer 
   LA                        ; Label the image 
   _7                        ; Input stack image 
   [stkout]@@{****[imgnum]}   ; Output stack 
   CE SOBEL
   
   SYS  
   echo "  N: {***[imgnum]} CE Sobel" 
ENDIF

IF ([CE_FREI] == 1) THEN
   ;------------------------------ CE -- Frei Chen 
   
   CE F                       ; Frei Chen 
   _5                         ; Input slice 
   _7                         ; Output volume 
   
   [imgnum]=[imgnum]+1        ; Increment stack pointer 
   LA                         ; Label the image 
   _7                         ; Input stack image 
   [stkout]@@{****[imgnum]}    ; Output stack 
   CE FREI-CHEN
   
   SYS  
   echo "  N: {***[imgnum]} CE Frei-Chen " 
ENDIF

IF ([CE_PR] == 1) THEN
   ;------------------------------ CE -- Prewitt 
   
   CE PR                      ; Prewitt  
   _4                         ; Input volume 
   _6                         ; Output volume 
   
   PS Z                       ; Pick relevant slice
   _6                         ; Input volume 
   _7                         ; Output slice 
   [zsl]                      ; Slice number 
   
   [imgnum]=[imgnum]+1        ; Increment stack pointer 
   LA                         ; Label the image 
   _7                         ; Input stack image 
   [stkout]@@{****[imgnum]}    ; Output stack 
   CE PREWITT
   
   SYS  
   echo "  N: {***[imgnum]} CE Prewitt" 
 ENDIF

 IF ([FC] == 1) THEN
   ;------------------------------ FC
   
   [levels] = 4
   
   FC                         ; Contouring 
   _5                         ; Input slice  
   _7                         ; Output slice  
   [levels]                   ; Number of Contours
   NO                         ; No overwrite
   
   [imgnum]=[imgnum]+1        ; Increment stack pointer 
   LA                         ; Label the image 
   _7                         ; Input stack image 
   [stkout]@@{****[imgnum]}    ; Output stack 
   FC LEVELS:{**[levels]}
   
   SYS  
   echo "  N: {***[imgnum]} FC Levels: {**[levels]}" 
 ENDIF

 IF ([ED] == 1) THEN
   ;------------------------------ ED 
   
   DO  [Thresh]=1,3 
      DO  [mode]=1,4 
   
         ED                      ; Edge Detection (Wiener) 
         _5                      ; Input slice 
         _7                      ; Output slice 
         [mode]                  ; Filter number 
         [Thresh]                ; Relative Threshold 
   
         [imgnum]=[imgnum]+1     ; Increment stack pointer 
         LA                      ; Label the image 
         _7                      ; Input stack image 
         [stkout]@@{****[imgnum]} ; Output stack 
         ED M:{**[mode]} T:{*[Thresh]} 
   
         SYS
         echo "  N: {***[imgnum]} ED Mode: {**[mode]} Thresh: {*[Thresh]}"
      ENDDO
   ENDDO
 ENDIF

 IF ([CE_WATER] == 1) THEN
   ;------------------------------ CE WATER
   
   CE WATER                   ;  
   _5                         ; Input slice 
   _7                         ; Output slice 
   
   [imgnum]=[imgnum]+1        ; Increment stack pointer 
   LA                         ; Label the image 
   _7                         ; Input stack image 
   [stkout]@@{****[imgnum]}    ; Output stack 
   CE WATERSHED   
   
   SYS  
   echo "  N: {***[imgnum]} CE Watershed" 
ENDIF



IF ([ER_WA] == 1) THEN
   ; ----------------------------------- ER -- Watershed 

   ER WA                      ; Erode to Watershed Skeleton 
   _5                         ; Input Slice 
   _7                         ; Output slice 

   [imgnum]=[imgnum]+1        ; Increment stack pointer 
   LA                         ; Label the image 
   _7                         ; Input stack image 
   [stkout]@@{****[imgnum]}    ; Output stack 
   ER WA 

   SYS  
     echo "  N: {***[imgnum]} ER WA" 
ENDIF

IF ([CE_RIDGE] == 1) THEN
   ; ----------------------------------- CE -- Ridge 
   
   CE RIDGE                ; Erode to Watershed Skeleton 
   _4                      ; Input volume  
   _6                      ; Output volume  

   PS Z                    ; Pick relevant slice from volume
   _6                      ; Input volume 
   _7                      ; Output slice 
   [zsl]                   ; Slice number 
   
   [imgnum]=[imgnum]+1     ; Increment stack pointer 
   LA                      ; Label the image 
   _7                      ; Input stack image 
   [stkout]@@{****[imgnum]} ; Output stack 
   CE RIDGE 

   SYS  
     echo "  N: {***[imgnum]} CE Ridge" 
ENDIF

IF ([ER_EDM] == 1) THEN
   ;------------------------------ ER EDM DIStance Map
   
   [level] = 100
   
   ER EDM                  ;  
   _5                      ; Input slice 
   _7                      ; Output slice  
   [level]                 ; Background Threshold
   
   [imgnum]=[imgnum]+1     ; Increment stack pointer 
   LA                      ; Label the image 
   _7                      ; Input stack image 
   [stkout]@@{****[imgnum]} ; Output stack 
   ER EDM  L:{***[level]}
   
   SYS  
     echo "  N: {***[imgnum]} ER EDM Level: {***[level]}" 
 ENDIF

 IF ([CE_TOP] == 1) THEN
   ;------------------------------ CE -- TopHat 
   
   DO  [iter]=2,6 
      [radius]  = 1  + [iter] * 2 
      [radius1] = [radius] + 2 
   
      CE TOP                  ; TopHat 
      _4                      ; Input volume 
      _6                      ; Output volume 
      [radius],[radius1]      ; Radii 
   
      PS Z                    ; Pick relevant slice
      _6                      ; Input volume 
      _7                      ; Output slice 
      [zsl]                   ; Slice number 
   
      [imgnum]=[imgnum]+1     ; Increment stack pointer 
      LA                      ; Label the image 
      _7                      ; Input stack image 
      [stkout]@@{****[imgnum]} ; Output stack 
      CE TOPHAT R:{***[radius]}
   
      SYS  
        echo "  N: {***[imgnum]} CE TopHat Radius: {***[radius]}" 
   ENDDO
 ENDIF
 ; ----------------------------------- 

 SYS
    echo "  Total Frames: {***[imgnum]}"

 MN S                        ; Montage the output images
   [stkout]@@****             ; Input file template
   1-[imgnum]                ; File numbers
   8,1                       ; Images / row, margin width
   0                         ; Margin value
   [montage]                 ; Output file

 FS
   [montage]                 ; Output file

 SYS
   echo "  Montage in: [montage]" ; echo " "

 EN


 
@


1.1
log
@Initial revision
@
text
@d17 1
a17 4
 ;           Invoke this procedure in SPIDER and it solicits input for: 
 ;               Input volume name, 
 ;               Input window location,
 ;               'CE AD' Denoising Iterations and Time-step
d32 1
a32 6

 ; Toggles to select type of input and types of outputs
 ; Value of '1' is true.

 [FR]        = 0          ; Use 'FR' Interactive input instead of local file input

a55 3
 IF ([FR] == 0) THEN
     [volin] = 'bzvol'    
 ENDIF
d57 4
a60 1
; -----------------------------------  OUTPUT FILES  
d68 7
a74 3
 [wnx]      = 200            ; Window X dimension
 [wny]      = 200            ; Window Y dimension
 [wnz]      =  11            ; Window Z dimension (SHOULD BE ODD!)
a75 1
 IF ([FR] == 0) THEN
d78 5
a82 1
   [slice]  =  66            ; Relevant slice from input volume     
a83 2
   [aditer] =   5            ; Iteration
   [time]   = .02            ; Time-step (0... 0.25)
a84 2
 [sigma]    = 3.0            ; Sigma     (CE AD Standard deviation)
 [lambda]   =  10            ; Lambda    (CE AD Contrast-- integers)
d86 2
a87 1
 ; -------------- END BATCH HEADER -------------------------------------------
d89 2
a90 25
 IF ([FR] .NE. 0) THEN       ; Interactive input parameters
   FR                        ; Input volume
     ? Input volume?[volin] 

   FR
     ? Window location- X,Y,Z?[location]
   RR S [wx][wy],[slice]     ; Split out variables  
     [location]              ; Variable
     1                       ; Positions

   FR
     ? AD Iterations & Time-Step?[iterations]
     RR S [aditer][time]     ; Split out variables 
       [iterations]          ; Variable    
       1                     ; Positions

   SYS
     echo "  "
 ELSE
   SYS
     echo " File:       [volin]"
 ENDIF

 MD
   () OFF
d92 1
d94 1
a94 1
 ; Remove any existing output files
d101 3
a103 3
 FI X [nx],[ny],[nz]
   [volin]                     ; Input volume 
   12,2,1                      ; nx, ny, & nz locations
d105 2
a106 1
 [wz] = [slice]-(INT([wnz]/2)) ; Window upper left Z location
d108 1
a108 6
 SYS
   echo " Size:       {****[nx]} x {****[ny]} x {****[nz]}"
 SYS
   echo " Windowed:   {****[wnx]} x {****[wny]} x {***[wnz]}"
 SYS
   echo "       At:   {****[wx]},  {****[wy]},   {****[wz]}"
d110 11
d122 5
a126 6
 ; Window the input volume  
 WI                            ; Window operation
   [volin]                     ; Input
   _1                          ; Output
   [wnx],[wny],[wnz]           ; Window size
   [wx],[wy],[wz]              ; Window location
d128 3
a130 1
 ; Scale image values over 0...255
d132 1
a132 1
   _1                          ; Input
d136 10
d147 2
a148 2
 ;_2                           ; Input volume
 ;_2                           ; Output volume 
d152 1
a152 1
 FS X [fmax],[fmin],[favg]
d155 1
a155 1
   echo " Avg:        {***[favg]}"; echo "  "
d157 1
a157 3
   echo " Denoising Iter:{***[aditer]}  Time:{%f3.2%[time]}  S:{%f3.1%[sigma]} L: {**[lambda]}" 
 SYS
   echo "  "
a158 1
 [zsl]    = [wnz] / 2          ; Subvolume slice
d161 2
a162 2
 ; Extract relevant slice from processed volume
 PS Z                          ; Pick relevant slice
d164 1
a164 10
   _3                          ; Output slice 
   [zsl]                       ; Slice number 

   _3                          ; Output slice 

CP
   _3                          ; Input slice 
   win_bz_sli_60               ; Output slice 

en
d166 1
d179 1
a179 1
   echo " N: {***[imgnum]} Original" 
d195 1
a195 1

d204 1
a204 5
   echo " N: {***[imgnum]} CE AD Denoised Original" 

CP
   _5                          ; Input slice 
   cead_bz_sli_60               ; Output slice 
a205 1
en
d207 1
a207 2

IF ([CE_MED] == 1) THEN
d230 1
a230 1
        echo " N: {***[imgnum]} CE Median Radius: {***[radius]}" 
d254 1
a254 1
        echo " N: {***[imgnum]} CE GNC Lambda: {***[glambda]}" 
d275 1
a275 1
   echo " N: {***[imgnum]} CE HI" 
d304 1
a304 1
      echo " N: {***[imgnum]} CE LAH Radius: {**[radius]} Bins: {***[bins]}" 
d312 2
a313 2
   DO LB4 [iter]=0,1 
      DO LB5 [mode]=1,6 
d332 1
a332 1
         echo " N: {***[imgnum]} CE Haralick Radius: {**[radius]} Mode: {*[mode]} Off: 2"
d357 1
a357 1
         echo " N: {***[imgnum]} CE Haralick Radius: {**[radius]} Mode: {*[mode]} Off: 4"
d385 1
a385 1
      echo " N: {***[imgnum]} CE Hurst Radius: {***[radius]}" 
d412 1
a412 1
      echo " N: {***[imgnum]} CE Max Radius: {***[radius]}" 
d439 1
a439 1
      echo " N: {***[imgnum]} CE VAR Radius: {***[radius]}" 
d466 1
a466 1
      echo " N: {***[imgnum]} CE Range Radius: {***[radius]}" 
d489 1
a489 1
   echo " N: {***[imgnum]} CE Gradient" 
d515 1
a515 1
      echo " N: {***[imgnum]} CE Laplacian Radius: {***[radius]}" 
d538 1
a538 1
   echo " N: {***[imgnum]} CE Sobel" 
d555 1
a555 1
   echo " N: {***[imgnum]} CE Frei-Chen " 
d577 1
a577 1
   echo " N: {***[imgnum]} CE Prewitt" 
d598 1
a598 1
   echo " N: {***[imgnum]} FC Levels: {**[levels]}" 
d620 1
a620 1
         echo " N: {***[imgnum]} ED Mode: {**[mode]} Thresh: {*[Thresh]}"
d639 1
a639 1
   echo " N: {***[imgnum]} CE Watershed" 
d658 1
a658 1
     echo " N: {***[imgnum]} ER WA" 
d680 1
a680 1
     echo " N: {***[imgnum]} CE Ridge" 
d700 1
a700 1
     echo " N: {***[imgnum]} ER EDM Level: {***[level]}" 
d727 1
a727 1
        echo " N: {***[imgnum]} CE TopHat Radius: {***[radius]}" 
d733 1
a733 1
    echo " Total Frames: {***[imgnum]}"
d746 1
a746 1
   echo " Montage in: [montage]" ; echo " "
@
