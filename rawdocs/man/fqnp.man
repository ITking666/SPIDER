FQ NP     Filter - Quick Fourier, High, low pass, etc, No Padding ||   FQ NP      
                                                                     8/26/13

PURPOSE:  Apply Fourier filters to an image or volume. 
          '<b>' Warning: No padding is applied, this may lead to artifacts
          near boundary of image, we suggest use of 'FQ' to avoid this.'</b>'  

SEE ALSO: BC
          FQ  
          FF  
          FP  
          FT  
          FF PLOT 

USAGE:    FQ NP

          .INPUT FILE:  PIC001
          [Enter name of input file containing real image.]

          .OUTPUT FILE: PIC002
          [Enter name of output file for filtered real image.]

          .FILTER TYPE (1-10): 7                                                                      
          [Enter filter option code.]

           Option "1" - Low-pass truncation.  Filter is a "top-hat" function
                        that truncates the Fourier transform at spatial frequency: '<i>'SPF'</i>'.

           Option "2" - High-pass truncation.  Filter is inverse "top-hat"
                        function that passes the Fourier transform beyond spatial
                        frequency: '<i>'SPF'</i>'.

           Option "3" - Gaussian low-pass.  Filter is the Gaussian function:
                        EXP(-'<i>'F'</i>'**2 / (2 * '<i>'SPF'</i>'**2)), 
                        where '<i>'F'</i>' is the frequency.

           Option "4" - Gaussian high-pass.  Filter is complement of the Gaussian function:
                        1 - EXP(-'<i>'F'</i>'**2 / (2 * '<i>'SPF'</i>'**2)),
                        where '<i>'F'</i>' is the frequency.

           Option "5" - '<a href='"'../img/fermi_lopass.jpg'"'>'Fermi low-pass'</a>'.  Filter is:      
                        1 / (1 + EXP[('<i>'F'</i>' - '<i>'SPF'</i>') / '<i>'T'</i>']) which
                        negotiates between "Top-hat" and Gaussian
                        characteristics, depending on the value of the temperature:
                        '<i>'T'</i>' (see below).

           Option "6" - '<a href='"'../img/fermi_hipass.jpg'"'>'Fermi high-pass'</a>' high-pass.  Filter is: 
                        1 / (1 + EXP[('<i>'F'</i>' - '<i>'SPF'</i>') / '<i>'-T'</i>'])
                        (Same as in Option "5", but with '<i>'T'</i>' replaced by '<i>'-T'</i>').

           Option "7" - Butterworth low-pass. Filter is:  
                        1 / (SQRT(1 + '<i>'F'</i>' / '<i>'RAD'</i>')**(2 * '<i>'ORDER'</i>'))  '<br />'
                        where                                                                  '<br />'
                        '<i>'ORDER'</i>' = [2 * log('<i>'eps'</i>'/SQRT('<i>a</i>'**2-1)) ] / [log('<i>'Flow'</i>'/'<i>'Fup'</i>')]  '<br />'
                        '<i>'RAD'</i>'   = '<i>'Flow'</i>' / (('<i>'eps'</i>')**(2 / '<i>'ORDER'</i>'))                             '<br />'
                        In the Butterworth filter the '<i>'ORDER'</i>' determines
                        the filter fall off and '<i>'RAD'</i>' corresponds to the cut-off radius. '<br />'
                        Frequencies below the lower frequency are preserved,                      '<br />'
                        frequencies above the upper frequency are removed,                        '<br />'
                        with a smooth transition in between lower and upper
                        limiting frequencies.
                        
           Option "8" - Butterworth high-pass. Filter is: 
                        1 - (1 / (SQRT(1 + '<i>'F'</i>' / '<i>'RAD'</i>')**(2 * '<i>'ORDER'</i>'))) '<br />'
                        Frequencies below the lower frequency are removed,    '<br />'
                        frequencies above upper frequency are preserved,      '<br />'
                        with a smooth transition in between lower and upper
                        limiting frequencies.
        
           Option "9" - Raised Cosine low-pass. Filter is:                                            '<br />'
                        0.5 * (COS(PI * ('<i>'F'</i>' - '<i>'Flow'</i>') / ('<i>'Flow'</i>' - '<i>'Fup'</i>')) + 1)  
                        if  '<i>'Flow'</i>' < '<i>'F'</i>' < '<i>'Fup'</i>',                          '<br />'
                        1 if '<i>'F'</i>' < '<i>'Flow'</i>', and  0 if '<i>'F'</i>' > '<i>'Fup'</i>'. '<br />'
     
           Option "10" - Raised Cosine high-pass. Filter is:                                         '<br />' 
                         0.5 * (-COS(PI*('<i>'F'</i>' - '<i>'Flow'</i>') / ('<i>'Flow'</i>' - '<i>'Fup'</i>')) + 1)  
                         if  '<i>'Flow'</i>' < '<i>'F'</i>' < '<i>'Fup'</i>'                          '<br />'
                         1 if '<i>'F'</i>' < '<i>'Flow'</i>', and 1 if '<i>'F'</i>' > '<i>'Fup'</i>'. '<br />'
        
           Option "13" - Raised sinc window (For 2-D images only). '<br />'
    
    For options "1-6 and 13" SPIDER asks:
          '<div class='"'opt_inp'"'>'
          .FILTER RADIUS (IN FREQUENCY OR PIXEL UNITS): 0.12 or 5
          [The filter radius (filter intrinsic frequency) can be input using either
           frequency units or pixel units. If filter radius is given in
           frequency units, they should be in the range: 0.0 - 0.5.
           If the input is > 1.0 it is treated as given in pixel units.]
           This value expressed as a frequency is denoted: '<i>'SPF'</i>'.]
          '</div>'

    For options "7-10" SPIDER asks:
          '<div class='"'opt_inp'"'>'
         .LOWER & UPPER LIMITING FREQUENCIES (IN FREQ OR PIXEL UNITS): 0.1, 0.2 
          [The Filter limiting frequencies can be given either in  frequency units or
          pixel units. If limiting frequencies are given in frequency units, they should 
          be in the range: 0.0 - 0.5. If limiting frequencies are > 1.0 
          they are treated as given in pixel units. Both values must be in the same units. 
          These values expressed as frequencies are denoted: '<i>'Flow'</i>' and '<i>'Fup'</i>'.]
          '</div>'

    For options "5-6" SPIDER asks:
          '<div class='"'opt_inp'"'>'
          .TEMPERATURE (0=CUTOFF): 0.3
          [Enter  a temperature parameter '<i>'T'</i>'
           The filter falls off roughly within this reciprocal distance (in terms of frequency units).]
          '</div>'

NOTES:    1. 'FQ NP' has similar functions to 'FF' except that:                    '<br />'
          a) It only accepts real space images and creates a real filtered image.  '<br />'
          b) It always runs in core, so it is much faster the 'FF' operation.      '<br />'

          2. The FILTER RADIUS and LOWER & UPPER LIMITING FREQUENCIES can be given either in 
             frequency units ('<i>'F'</i>') or pixel units ('<i>'P'</i>'). 
             If the input is > 1.0 it is treated as given in pixel units.          '<br />'                                '<br />'
             Frequency units are absolute units (independent of image size)
             in the range: 0.0 - 0.5 (0.5 is the highest value).                         '<br />'
             The following equations  convert frequency
             units into pixel units for ('<i>'P'</i>' in range: 0 - (NX/2)):       '<br />'
             '<i>'P'</i>' = '<i>'F'</i>' * NX                                      '<br />'
             '<i>'F'</i>' = '<i>'P'</i>' / NX                                      '<br />'

          3. Implemented by:  Paul Penczek and Gregory Kishchenko.
 
SUBROUTINE: FOUR1A, FQ_Q, FQ3_P

CALLER:     FOUR1
