head	1.7;
access;
symbols
	best-code:1.6
	pre-named-reg:1.6
	pre_GPL:1.6
	prec_CA:1.1;
locks; strict;
comment	@# @;


1.7
date	2011.06.14.13.02.31;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.23.21.27.13;	author bimal;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.14.21.40.40;	author bimal;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.14.21.37.24;	author bimal;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.14.21.35.12;	author bimal;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.14.21.30.20;	author bimal;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.06.20.30.09;	author leith;	state Exp;
branches;
next	;


desc
@@


1.7
log
@*** empty log message ***
@
text
@
RT 3DS    RoTate - volume, fast, tri-linear interpolation        RT 3DS
                                                               06/11/11

PURPOSE:  Rotate a volume by three Eulerian angles using
          tri-linear interpolation.

SEE ALSO: RT     
          RT 3  
          RT 3D 
          RT 3A 
          RT 90  
          RT B  
          RT M   

USAGE:    RT 3DS

          .INPUT FILE: PIC001
          [Enter the name of the file to be rotated.]

          .OUTPUT FILE: ROT001
          [Enter the name of the file where the rotated volume is to
          be stored.]

          .PHI, THETA, & PSI: 10.5, 13.7, 45.8 
          [Enter the rotation angles Phi (around Z), 
           Theta (around Y), and
           Psi:  (around Z).] 


NOTES: 1. Program reads first volume into the memory - larger volumes
          may not fit. In this case use 'RT 3' instead. Unfortunately 
          'RT 3' gives slightly incorrect results, does not use the 
          proper interpolation scheme, and has sign of theta reversed.
  
       2. Tri-linear interpolation scheme is used.

       3. Non-matching points are left without a change.

       4. First rotation  is done around Z-axis (clockwise), 
          second rotation is done around Y-axis (clockwise), and  
          third  rotation is done around Z-axis (clockwise). 
          All rotations are done in space coordinate system.

       5. Rotation matrix used:
   '<pre>'
   R = R(psi) * R(theta) * R(phi)

     c  s  0        c  0 -s      c  s  0
    -s  c  0    *   0  1  0   * -s  c  0
     0  0  1        s  0  c      0  0  1
   '</pre>'

       6. In the corners, old values are left.

       7. How to rotate volumes:                   '<br />'
          If both X and Y axis rotations are needed, it may be simpler
          to use two rotations consecutively.      '<br />'
          Pick a slice (either X or Y) from the volume and do a test 
          rotation in 2D using operation: 'RT'.    '<br />'
          Change the sign of the angle you determined using 'RT' and 
          apply the angles as shown here.          '<br />'
          For X rotation:    90, -angle,   -90     '<br />'
          For Y rotation:     0, -angle,    0      '<br />'
          (Note provided by: Mike Marko)
 
       8. Implemented by Paul Penczek.

SUBROUTINES: ROTAS3, ROTS3, BLDR

CALLER:      UTIL3
@


1.6
log
@corrected direction of rotation
@
text
@d2 2
a3 2
RT 3DS    RoTate - volume, fast, simple interpolation          RT 3DS
                                                               05/18/01
d5 1
a5 1
PURPOSE:  Rotates a volume by the three Eulerian angles. Uses
d8 7
a14 8
SEE ALSO: RT     (RoTate - image or volume, use average as background)
          RT 3   (RoTate - volume, slow)
          RT 3D  (RoTate - volume, around arbitrary center)
          RT 3A  (RoTate - volume, around arbitrary center)
          RT 90  (RoTate - image or volume, by 90, 180, or 270 degrees)
          RT B   (RoTate - image or volume, supply background)
          RT M   (Rotate - image or volume, use minimum as background)
          RT SQ  (RoTate - image or volume, shift, use quadratic interpolation)
d26 3
a28 2
          [Enter the rotation angles Phi (around Z), Theta (around Y),
          and Psi: 45.8 (around Z).] 
d33 2
a34 2
          'RT 3' gives slightly incorrect results and does not use the 
          proper interpolation scheme and has sign of theta reversed.
d40 4
a43 4
       4. First rotation is done around Z-axis (clockwise), second
          rotation is done around Y-axis (clockwise) and the 
          third rotation is done around Z-axis (clockwise). All rotations 
          are done in space coordinate system.
d46 2
a47 2
          '<PRE>'
          R = R(psi) * R(theta) * R(phi)
d49 4
a52 4
           c  s  0        c  0 -s      c  s  0
          -s  c  0    *   0  1  0   * -s  c  0
           0  0  1        s  0  c      0  0  1
          '</PRE>'
d56 1
a56 1
       7. How to rotate volumes. '<BR>'
d58 1
a58 1
          to use two rotations consecutively.   '<BR>'
d60 6
a65 6
          rotation in 2D using operation: 'RT'. '<BR>'
          Change the sign of the angle you determimed using 'RT' and 
          apply the angles as shown here.       '<BR>'
          For X rotation:    90, -angle,   -90    '<BR>'
          For Y rotation:     0, -angle,    0     '<BR>'
          (This note provided by: Mike Marko)
@


1.5
log
@*** empty log message ***
@
text
@d40 1
a40 1
       4. First rotation is done around Z-axis (counter clockwise), second
d42 1
a42 1
          third rotation is done around Z-axis (counter clockwise). All rotations 
@


1.4
log
@*** empty log message ***
@
text
@d28 1
a28 1
          and Psi: 45.8 (around Z)]. 
@


1.3
log
@*** empty log message ***
@
text
@d28 1
a28 2
          and Psi: 45.8 (around Z)]. All rotations are done in space 
	  coordinate system.
@


1.2
log
@corrected Euler angle write-up
@
text
@d28 1
a28 1
	  and Psi: 45.8 (around Z)]. All rotations are done in space 
d43 2
a44 1
          third rotation is done around Z-axis (counter clockwise).
@


1.1
log
@Initial revision
@
text
@d27 3
a29 3
          [Enter the rotation angles Phi (around Z), Theta (around 
          the new Y after the first rotation by Phi), and Psi: 45.8
          (around the new Z)]. 
d31 1
d42 2
a43 2
          rotation is done around new Y-axis (clockwise) and the 
          third rotation is done around new Z-axis (counter clockwise).
@
