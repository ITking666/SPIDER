head	1.13;
access;
symbols
	best-code:1.9
	pre-named-reg:1.9
	pre_GPL:1.9
	prec_CA:1.9
	oct21:1.8;
locks; strict;


1.13
date	2014.01.08.16.41.51;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2012.03.13.12.14.34;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2009.09.04.14.36.05;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2008.11.26.13.14.52;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.01.20.27.49;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.02.08.22.08.54;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.08.25.18.34.10;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	96.03.25.16.37.25;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	95.11.08.21.05.16;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	94.08.16.11.36.07;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	94.07.12.16.35.11;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.07.12.16.25.49;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.16.12.15.52;	author leith;	state Exp;
branches;
next	;


desc
@@


1.13
log
@*** empty log message ***
@
text
@
SA P      Sum Alignment - Positive rotation and shift       SA P
                                                         8/01/01

PURPOSE:  Perform vector addition of rotation and shift values
          from two successive cycles of alignment of an image
          series.  The summed values, saved in registers, can then
          be applied to the original images.  Additive interpolation
          errors are thus avoided.                            '<br />'
          This operation is meant for use with the angles and shifts 
          obtained from operations other than 'CC IC' and 'OR'. 
          The angles are already compatible with signs in 'RT SQ'.

SEE ALSO: SA   

USAGE:    SA P [ango],[xo],[yo] 
          [This operation can return up to three optional register variables
          which are the the vector sums for the rotation and shifts.
:     
           '<table class="regvar">'                                      
           '<tr>''<td class="first" align="left">' Variable'</td>' 
                 '<td align="left">' Example  '</td>' 
                 '<td align='left'>' Receives '</td>' '</tr>' 
                          
           '<tr>''<td class="first">' First '</td>' 
                 '<td>'[ango]               '</td>' 
                 '<td>'Angle    '</td>' '</tr>'  
           '<tr>''<td class="first">' Second '</td>' 
                 '<td>'[xo]               '</td>' 
                 '<td>'X shift    '</td>' '</tr>'  
           '<tr>''<td class="first">' Third '</td>' 
                 '<td>'[yo]               '</td>' 
                 '<td>'Y shift    '</td>' '</tr>'  
            '</table>' 

          .INITIAL ROTATION ANGLE, X & Y SHIFTS: [ang],[xs],[ys] 
          [The rotation angle, the x-shift value, and the y-shift 
          value from the initial alignment cycle. These values
          will typically have been retrieved
          from a document file by an UNSAVE ('UD') operation just
          prior to the call to 'SA'.  

          .REFINED ROTATION ANGLE, X & Y SHIFTS: [angr],[xsr],[ysr 
          [The rotation angle, the x-shift value, and the y-shift 
          value from the refinement cycle.  These three values
          can also have been unsaved in the above manner from another 
          document file, or if the 'SA P' is performed in the same 
          session (procedure run) as the second cycle, they may 
          simply be current register contents (see below).


NOTES: 1. Rotational matrix used in 'SA P' has form:                  '<br />'
        
          '&'nbsp;'&'nbsp;'&'nbsp;  cos '&'nbsp;'&'nbsp;'&'nbsp; -sin '<br />'
          '&'nbsp;'&'nbsp;'&'nbsp;  sin '&'nbsp;'&'nbsp;'&'nbsp;  cos '<br />'
 
      2. 'SA P'  may be applied most conveniently within the second
          cycle loop.  The intermediate image series (rotated and
          translated by the amounts found in the first cycle) are
          realigned against a refined reference, and the values are
          stored in [angr],[xsr],[ysr].  The values from cycle 1 are then
          UNSAVEd into [ang],[xs],[ys], and 'SA' is used to obtain 
          [xo],[yo],[zo].
          These output values are finally applied to rotate and
          shift the unaligned original image series.  They should
          also be saved in another document file, using 'SD'.  Note
          that two input and one output series must be on disk at
          one time.  The original images may be deleted individually
          (within the DO-loop) once the corresponding final, aligned
          images have been obtained.
 
       4. After having obtained the resulting angle and shifts the 
          'RT SQ' operation can be applied to rotate and shift
           an image.

SUBROUTINES: SUMALI

CALLER:      DRIV1
@


1.12
log
@*** empty log message ***
@
text
@d2 1
a2 1
SA P      Sum Alignment - Positive rotation and shift        SA P
d5 1
a5 1
PURPOSE:  To perform vector addition of rotation and shift values
d9 1
a9 1
          errors are thus avoided.                  '<br>'
d16 19
a34 1
USAGE:    SA P [xo],[yo],[zo] 
a50 3
          The three registers specified on the operation line are 
          output registers, and receive the vector sums for the 
          rotation and shifts.
d52 1
a52 1
NOTES: 1. Rotational matrix used in 'SA P' has form:       '<br>'
a74 4

       5. In SPIDER 7.10+ input of numbers contained in registers is 
          no longer allowed.  Registers are only for output now execept
          when creating a document file.
@


1.11
log
@named registers
@
text
@d9 4
a12 1
          errors are thus avoided.
d31 1
a31 1
          simply be from current register contents (see below).
d37 1
a37 1
NOTES: 1. Rotational matrix used in SA has form:       '<br>'
d39 2
a40 2
                    c    -s       '<br />'
                    s     c       '<br />'
d42 1
a42 4
          and it works for the angles and shifts obtained in other
          ways so that signs are in agreement with 'RT SQ'.
 
      2. 'SA p'  may be applied most conveniently within the second
d57 7
a63 6
       3. After having obtained resulting angle and shifts the 'RT SQ'
          command is highly reccommended for the final step.

       4. In SPIDER 7.10+ input of numbers contained in registers is 
          no longer allowed.  Registers are only for output.
          (input may still be present for backward compatibility.)
@


1.10
log
@*** empty log message ***
@
text
@d11 1
a11 1
SEE ALSO: SA  (Sum alignment)
d13 1
a13 1
USAGE:    SA P X30,X31,X32
d15 1
a15 1
          .INITIAL ROTATION ANGLE, X & Y SHIFTS: x10,x11,x12 
d22 1
a22 1
          .REFINED ROTATION ANGLE, X & Y SHIFTS: x20,x21,x22 
d34 5
a38 5
NOTES: 1. Rotational matrix used in 'SA P' has form:       '<BR>'

                    c     s                                '<BR>'
                   -s     c                                '<BR>'

d40 1
a40 1
          ways in such a way, that signs are in agreement with 'RT SQ'.
d42 1
a42 1
       2. 'SA P' may be applied most conveniently within the second
d46 3
a48 2
          stored in X20-X22.  The values from cycle 1 are then
          UNSAVED into X10-X12, and 'SA' is used to obtain X30-X32.
d56 1
a56 1

@


1.9
log
@removed register input
@
text
@d13 1
a13 1
USAGE:    SA P,X30,X31,X32
d36 2
a37 2
                    c     s                               '<BR>'
                   -s     c                              '<BR>'
@


1.8
log
@*** empty log message ***
@
text
@d3 1
a3 1
                                                         3/15/96
d13 1
a13 1
USAGE:    SA P,X10,X11,X12,X20,X21,X22,X30,X31,X32
d15 6
a20 5
          [The first three (input) registers specified contain the
          rotation angle, the x-shift value, and the y-shift value
          from the initial alignment cycle.  The second group of
          three (input) registers contain the rotation and x and y 
          shift values from the refinement cycle.
d22 11
a32 11
          The first three will typically have been retrieved
          from a document file by an UNSAVE ('UD') operation just
          prior to the call to 'SA'.  The second three can also have
          been unsaved in this manner from another document file, or,
          if the 'SA' is performed in the same session (batch run) as
          the second cycle, they may simply be the current register
          contents (see below).
          
          The final three registers specified are output
          registers, and receive the vector sums for the rotation
          and shift.
d34 1
a34 1
NOTES: 1. Rotational matrix used in SA P has form:       '<BR>'
d40 1
a40 1
          ways in such a way, that signs are in agreement with RT SQ.
d42 1
a42 1
       2. SA P may be applied most conveniently within the second
d47 1
a47 1
          UNSAVEd into X10-X12, and 'SA' is used to obtain X30-X32.
d58 4
@


1.7
log
@title
@
text
@d60 1
a60 1
CALLER:      SPIDER
@


1.6
log
@*** empty log message ***
@
text
@d2 1
a2 1
SA P      Sum Alignment, Positive rotation and shift        SA P
d11 1
a11 1
SEE ALSO: SA      (Sum alignment)
@


1.5
log
@changes for better html file
@
text
@d3 1
a3 1
                                                         8/15/94
d18 1
a18 1
          three (input) registers contain the rotation and x  and y 
d24 1
a24 1
          been UNSAVEd in this manner from another document file, or,
d33 1
a33 1
NOTES: 1. Rotational matrix used in SA P has form:
d35 2
a36 2
                    c     s
                   -s     c
d55 2
a56 2
       3. After having obtained resulting angle and shifts the RT SQ
          command is highly recommended for the final step.
d59 2
a60 1
CALLER:      DRIVER
@


1.4
log
@cosmetic
@
text
@d18 1
a18 1
          three (input) registers contain the rotation and x- and y-
@


1.3
log
@replaced_tabs
@
text
@d3 1
a3 1
                                                         11/27/89
d11 1
a11 1
SEE ALSO:     SA      (Sum alignment)
d58 2
a59 2
Subroutines: SUMALI
Cotask:      DRIVER
@


1.2
log
@replaced_tabs
@
text
@@


1.1
log
@Initial revision
@
text
@d21 7
a27 7
	  The first three will typically have been retrieved
	  from a document file by an UNSAVE ('UD') operation just
	  prior to the call to 'SA'.  The second three can also have
	  been UNSAVEd in this manner from another document file, or,
	  if the 'SA' is performed in the same session (batch run) as
	  the second cycle, they may simply be the current register
	  contents (see below).
d30 2
a31 2
	  registers, and receive the vector sums for the rotation
	  and shift.
@
