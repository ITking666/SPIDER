head	1.38;
access;
symbols
	best-code:1.17
	pre-named-reg:1.17
	pre_GPL:1.17
	prec_CA:1.16
	oct21:1.15;
locks; strict;


1.38
date	2015.03.09.14.59.41;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2014.02.28.15.30.51;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2013.08.27.14.58.54;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2013.08.26.16.24.20;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2013.04.26.15.01.23;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2012.11.28.19.15.59;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2012.11.07.19.13.36;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2012.11.07.19.05.15;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2012.10.09.18.48.20;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2012.10.04.15.10.25;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2012.08.29.14.52.38;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2012.08.27.17.41.09;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2012.07.26.17.30.32;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2012.07.26.17.28.23;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2012.07.19.16.40.46;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2012.07.19.16.36.54;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2012.07.17.16.25.46;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2009.09.08.16.09.49;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2007.05.15.14.56.53;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2007.03.19.18.52.15;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2006.10.04.19.28.27;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2004.02.09.18.51.47;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2000.09.22.18.08.05;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	97.08.26.13.38.43;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	97.08.25.19.43.01;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	97.08.22.19.26.46;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	97.01.14.19.07.29;	author mladjadj;	state Exp;
branches;
next	1.11;

1.11
date	96.11.22.15.43.23;	author ramani;	state Exp;
branches;
next	1.10;

1.10
date	96.08.29.17.49.21;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	96.08.14.17.18.49;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	96.03.13.21.34.57;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	95.11.08.21.03.50;	author mladjadj;	state Exp;
branches;
next	1.6;

1.6
date	95.04.14.15.45.19;	author ramani;	state Exp;
branches;
next	1.5;

1.5
date	95.02.16.19.36.45;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	94.08.18.14.49.04;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	94.07.12.16.33.23;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.05.20.19.34.26;	author ramani;	state Exp;
branches;
next	1.1;

1.1
date	94.05.16.12.14.57;	author leith;	state Exp;
branches;
next	;


desc
@@


1.38
log
@location of img
@
text
@FQ        Filter - Quick Fourier, High, low pass, etc., Padded  ||   FQ      
                                                              8/26/13

PURPOSE:  Apply Fourier filters to an image or volume. 
          To improve boundary quality the image is padded with the average value to twice the 
          original size during filtration.

SEE ALSO: FQ NP
          BC  
          FF  
          FT  
          FF PLOT  

USAGE:    FQ

          .INPUT FILE: PIC001
          [Enter name of input file containing a real image.]

          .OUTPUT FILE: PIC002
          [Enter name for output file which will contain the filtered real image.]

          '<table border="0" cellpadding="1">'
          '<tr>' '<td>'1: LOW-PASS,            '</td>' '<td>' 2: HIGH-PASS            '</td>' '</tr>'
          '<tr>' '<td>'3: GAUSS.  LOW-PASS,    '</td>' '<td>' 4: GAUSS.  HIGH-PASS    '</td>' '</tr>'
          '<tr>' '<td>'5: FERMI                '</td>' '<td>' 6: FERMI                '</td>' '</tr>'
          '<tr>' '<td>'7: BUTTER. LOW-PASS,    '</td>' '<td>' 8: BUTTER. HIGH-PASS    '</td>' '</tr>'
          '<tr>' '<td>'9: RAISED COS. LOW-PASS,'</td>' '<td>'10: RAISED COS. HIGH-PASS'</td>' '</tr>'
          '</table>'

          .FILTER TYPE (1-10): 7                                                                      
          [Enter filter option code.]

           Option "1" - Low-pass truncation.  Filter is a "top-hat" function
                        that truncates the Fourier transform at spatial frequency: '<i>'SPF'</i>'.

           Option "2" - High-pass truncation.  Filter is inverse "top-hat"
                        function that passes the Fourier transform beyond spatial
                        frequency: '<i>'SPF'</i>'.

           Option "3" - Gaussian low-pass.  Filter is the Gaussian function:
                        EXP(-'<i>'F'</i>'**2 / (2 * '<i>'SPF'</i>'**2)), 
                        where '<i>'F'</i>' is the frequency.

           Option "4" - Gaussian high-pass.  Filter is complement of the Gaussian function:
                        1 - EXP(-'<i>'F'</i>'**2 / (2 * '<i>'SPF'</i>'**2)),
                        where '<i>'F'</i>' is the frequency.

           Option "5" - '<a href='"'../img/fermi_lopass.jpg'"'>'Fermi low-pass'</a>'.  Filter is:      
                        1 / (1 + EXP[('<i>'F'</i>' - '<i>'SPF'</i>') / '<i>'T'</i>']) which
                        negotiates between "Top-hat" and Gaussian
                        characteristics, depending on the value of the temperature:
                        '<i>'T'</i>' (see below).

           Option "6" - '<a href='"'../img/fermi_hipass.jpg'"'>'Fermi high-pass'</a>' high-pass.  Filter is: 
                        1 / (1 + EXP[('<i>'F'</i>' - '<i>'SPF'</i>') / '<i>'-T'</i>'])
                        (Same as in Option "5", but with '<i>'T'</i>' replaced by '<i>'-T'</i>').

           Option "7" - Butterworth low-pass. Filter is:  
                        1 / (SQRT(1 + '<i>'F'</i>' / '<i>'RAD'</i>')**(2 * '<i>'ORDER'</i>'))  '<br />'
                        where                                                                  '<br />'
                        '<i>'ORDER'</i>' = [2 * log('<i>'eps'</i>'/SQRT('<i>a</i>'**2-1)) ] / [log('<i>'Flow'</i>'/'<i>'Fup'</i>')]  '<br />'
                        '<i>'RAD'</i>'   = '<i>'Flow'</i>' / (('<i>'eps'</i>')**(2 / '<i>'ORDER'</i>'))                             '<br />'
                        In the Butterworth filter the '<i>'ORDER'</i>' determines
                        the filter fall off and '<i>'RAD'</i>' corresponds to the cut-off radius. '<br />'
                        Frequencies below the lower frequency are preserved,                      '<br />'
                        frequencies above the upper frequency are removed,                        '<br />'
                        with a smooth transition in between lower and upper
                        limiting frequencies.
                        
           Option "8" - Butterworth high-pass. Filter is: 
                        1 - (1 / (SQRT(1 + '<i>'F'</i>' / '<i>'RAD'</i>')**(2 * '<i>'ORDER'</i>'))) '<br />'
                        Frequencies below the lower frequency are removed,    '<br />'
                        frequencies above upper frequency are preserved,      '<br />'
                        with a smooth transition in between lower and upper
                        limiting frequencies.
        
           Option "9" - Raised Cosine low-pass. Filter is:                                            '<br />'
                        0.5 * (COS(PI * ('<i>'F'</i>' - '<i>'Flow'</i>') / ('<i>'Flow'</i>' - '<i>'Fup'</i>')) + 1)  
                        if  '<i>'Flow'</i>' < '<i>'F'</i>' < '<i>'Fup'</i>',                          '<br />'
                        1 if '<i>'F'</i>' < '<i>'Flow'</i>', and  0 if '<i>'F'</i>' > '<i>'Fup'</i>'. '<br />'
     
           Option "10" - Raised Cosine high-pass. Filter is:                                         '<br />' 
                         0.5 * (-COS(PI*('<i>'F'</i>' - '<i>'Flow'</i>') / ('<i>'Flow'</i>' - '<i>'Fup'</i>')) + 1)  
                         if  '<i>'Flow'</i>' < '<i>'F'</i>' < '<i>'Fup'</i>'                          '<br />'
                         1 if '<i>'F'</i>' < '<i>'Flow'</i>', and 1 if '<i>'F'</i>' > '<i>'Fup'</i>'. '<br />'
   
           Option "13" - Raised sinc window (For 2-D images only). '<br />'
    
    
    For options "1-6 and 13" SPIDER asks:
          '<div class='"'opt_inp'"'>'
          .FILTER RADIUS (IN FREQUENCY OR PIXEL UNITS): 0.12 or 5
          [The filter radius (filter intrinsic frequency) can be input using either
           frequency units or pixel units. If filter radius is given in
           frequency units, they should be in the range: 0.0 - 0.5.
           If the input is > 1.0 it is treated as given in pixel units.]
           This value expressed as a frequency is denoted: '<i>'SPF'</i>'.]
          '</div>'

    For options "7-10" SPIDER asks:
          '<div class='"'opt_inp'"'>'
         .LOWER & UPPER LIMITING FREQUENCIES (IN FREQ OR PIXEL UNITS): 0.1, 0.2 
          [The Filter limiting frequencies can be given either in  frequency units or
          pixel units. If limiting frequencies are given in frequency units, they should 
          be in the range: 0.0 - 0.5. If limiting frequencies are > 1.0 
          they are treated as given in pixel units. Both values must be in the same units. 
          These values expressed as frequencies are denoted: '<i>'Flow'</i>' and '<i>'Fup'</i>'.]
          '</div>'

    For options "5-6"  SPIDER asks:
          '<div class='"'opt_inp'"'>'
          .TEMPERATURE (0=CUTOFF): 0.3
          [Enter  a temperature parameter '<i>'T'</i>'
           The filter falls off roughly within this reciprocal distance (in terms of frequency units).]
          '</div>'

NOTES:    1. 'FQ' is similar to operation 'FF' except that:                        '<br />'
          a) It only accepts real space images and creates a real filtered image.  '<br />'
          b) It always runs in core, so it is much faster the 'FF' operation.      '<br />'

          2. The FILTER RADIUS and LOWER & UPPER LIMITING FREQUENCIES can be given either in 
             frequency units ('<i>'F'</i>') or pixel units ('<i>'P'</i>'). 
             If the input is > 1.0 it is treated as given in pixel units.          '<br />'                                '<br />'
             Frequency units are absolute units (independent of image size)
             in the range: 0.0 - 0.5 (0.5 is the highest value).                         '<br />'
             The following equations  convert frequency
             units into pixel units for ('<i>'P'</i>' in range: 0 - (NX/2)):       '<br />'
             '<i>'P'</i>' = '<i>'F'</i>' * NX                                      '<br />'
             '<i>'F'</i>' = '<i>'P'</i>' / NX                                      '<br />'

          3. Implemented by:  Paul Penczek and Gregory Kishchenko.
 
SUBROUTINE: FOUR1A, FQ_Q, FQ3_P

CALLER:     FOUR1
@


1.37
log
@*** empty log message ***
@
text
@d48 1
a48 1
           Option "5" - '<a href='"'fermi_lopass.jpg'"'>'Fermi low-pass'</a>'.  Filter is:      
d54 1
a54 1
           Option "6" - '<a href='"'fermi_hipass.jpg'"'>'Fermi high-pass'</a>' high-pass.  Filter is: 
@


1.36
log
@*** empty log message ***
@
text
@d86 2
d89 2
a90 1
    For options "1-6" SPIDER asks:
@


1.35
log
@*** empty log message ***
@
text
@d48 1
a48 1
           Option "5" - Fermi low-pass.  Filter is:                             '<br />'
d50 1
a50 1
                        negotiates between "top-hat" and Gaussian
d54 1
a54 1
           Option "6" - Fermi high-pass.  Filter is:                            '<br />'
@


1.34
log
@1.0 cuttoff now
@
text
@d1 2
a2 2
FQ        Filter - Quick Fourier, High, low pass, etc.  ||       FQ      
                                                              4/26/13
d17 1
a17 1
          [Enter name of input file containing real image.]
d19 2
a20 2
          .OUTPUT FILE: FIC001
          [Enter name of output file for filtered real image.]
d30 1
a30 1
          .Filter type (1-10): 7                                                                      
d33 2
a34 2
           Option "1" - Low-pass truncation.  Filter is "top-hat" function
                        that truncates Fourier transform at spatial frequency RAD.
d37 2
a38 2
                        function that passes Fourier transform beyond spatial
                        frequency radius RAD.
d40 7
a46 2
           Option "3" - Gaussian low-pass.  Filter is Gaussian function
                        EXP(-f**2/(2.*RAD**2)), where f is the frequency.
d48 2
a49 4
           Option "4" - Gaussian high-pass.  Filter is complement of Gaussian
                        function:  1.0-EXP(-F**2/(2.*RAD**2)).

           Option "5" - Fermi.  Filter is 1/(1+EXP[(F-RAD)/T]) which
d51 2
a52 1
                        characteristics, depending on the value of T (see below).
d54 3
a56 1
           Option "6" - Fermi  (Same as: "5").
d59 9
a67 6
                              1/(SQRT(1+F/RAD)**(2*ORDER))                                    '<br />'
                        In the actual implementation of the filter the parameters,
                        RAD and ORDER are calculated from the lower and upper limiting frequencies
                        specified by the user.
                        Frequencies below lower frequency are preserved, frequencies above upper
                        frequency are removed, with a smooth transition in between lower and upper
a68 1
                        See NOTE 3 below.
d71 4
a74 6
                        1-(1/(SQRT(1+F/RAD)**(2*ORDER)))
                        In the actual implementation of the filter the parameters,
                        RAD and ORDER are calculated from the lower and upper limiting frequencies
                        specified by the user.
                        Frequencies below lower frequency are removed, frequencies above upper
                        frequency are preserved, with a smooth transition in between lower and upper
d76 10
a85 6
                        See NOTE 3 below.
    
           Option "9" - Raised Cosine low-pass. Filter is: 
                        0.5*(COS(PI*(F-'<i>'F-low'</i>')/('<i>'F-low'</i>'-'<i>'F-up'</i>'))+1) 
                        if '<i>'F-low'</i>'<F<'<i>'F-up'</i>',                                  '<br />'
                        1 if F<'<i>'F-low'</i>',  0 if F>'<i>'F-up'</i>'.                       '<br />'
d87 1
a87 6
           Option "10" - Raised Cosine high-pass. Filter is: 
                              0.5*(-COS(PI*(F-'<i>'F-low'</i>')/('<i>'F-low'</i>'-F-up))+1) 
                              if '<i>'F-low'</i>'<F<'<i>'F-up'</i>',                            '<br />'
			      0 if F<'<i>'F-low'</i>',  1 if F>'<i>'F-up'</i>'.                 '<br />'
    
    For options 1-6:
a88 1

d90 5
a94 4
          [The filter radius (filter intrinsic frequency) can be given either
           in  frequency units or pixel units. If filter function radius is given in
           frequency units, they should be in the range 0.0 <= '<i>'f'</i>' <= 1.0.
           If the response is > 1.0 it is treated as given in pixel units.]
d97 1
a97 1
    For options 7-10:
d102 4
a105 2
          be in the range  0.0 <= f <= 1.0. If limiting frequencies are > 1.0 they are treated 
          as given in pixel units.  Both values must be in the same units.]
d107 1
a107 1
    For the Fermi filter [(5) and (6)], a temperature parameter 'T 'will be solicited:
a108 1

d110 2
a111 2
          [Roughly within this reciprocal distance (in terms of
          frequency units), the filter falls off.]
d114 2
a115 2
NOTES:    1. 'FQ' has similar functions to 'FF' except that:                       '<br />'
          a) It only accepts real space images and leaves the filtered image real. '<br />'
d119 2
a120 2
             frequency units ('<i>'f'</i>') or pixel units ('<i>'p'</i>'). If answer is > 1.0
             it is treated as given in pixel units.
d122 7
a128 21
             in the range 0.0 <= '<i>'f'</i>' <= 1.0 (1.0 is the highest value).
             The following two equations can be used to convert frequency
             units into pixel units for ('<i>'p'</i>'=0  ... (nx/2) ):    '<br />'

             '<i>'p'</i>' = '<i>'f'</i>'   * NX                           '<br />'
             '<i>'f'</i>' = '<i>'p'</i>' / NX                             '<br />'

          3. In the Butterworth filter the ORDER and RAD correspond to the lower and upper limiting
             frequencies.
             In the program RAD and ORDER are calculated from the parameters
             specified by the user using following equations:                       '<br />'
             RAD   = '<i>'F-low'</i>'/((eps)**(2/ORDER))                     '<br />'
             ORDER = [2*log(eps/sqrt(a**2-1))]/[log('<i>'F-low'</i>'/'<i>'F-up'</i>')]    '<br />'
             where '<i>'F-low'</i>' and '<i>'F-up'</i>' are the lower and upper limiting frequencies and 
             parameters "eps" and "a" are given by 0.882 and 10.624 respectively. 
             For reference see '<a href='"'ffplot.html'"'>'FF PLOT'</a>'.

          4. In the Raised Cosine filter, '<i>'F-low'</i>' and '<i>'F-up'</i>' correspond to lower and
             upper limiting frequencies.
	  
          5. Implemented by:  Paul Penczek.
@


1.33
log
@cosmetic, freq vs pixel prompts
@
text
@d2 1
a2 1
                                                              11/29/12
d23 5
a27 6
          '<tr>'
          '<td>'1: LOW-PASS,'</td>'             '<td>' 2: HIGH-PASS            '</td>' '</tr>'
          '<td>'3: GAUSS.  LOW-PASS,'</td>'     '<td>' 4: GAUSS.  HIGH-PASS    '</td>' '</tr>'
          '<td>'5: FERMI'</td>'                 '<td>' 6: FERMI                '</td>' '</tr>'
          '<td>'7: BUTTER. LOW-PASS,'</td>'     '<td>' 8: BUTTER. HIGH-PASS    '</td>' '</tr>'
          '<td>'9: RAISED COS. LOW-PASS,'</td>' '<td>'10: RAISED COS. HIGH-PASS'</td>' '</tr>'
d34 1
a34 2
                        that truncates Fourier transform at spatial frequency
                        RAD.
d53 1
a53 1
                              1/(SQRT(1+F/RAD)**(2*ORDER))          '<br />'
d73 2
a74 1
                        0.5*(COS(PI*(F-'<i>'F-low'</i>')/('<i>'F-low'</i>'-'<i>'F-up'</i>'))+1) if '<i>'F-low'</i>'<F<'<i>'F-up'</i>',   '<br />'
d78 3
a80 2
                              0.5*(-COS(PI*(F-'<i>'F-low'</i>')/('<i>'F-low'</i>'-F-up))+1) if '<i>'F-low'</i>'<F<'<i>'F-up'</i>',   '<br />'
			      0 if F<'<i>'F-low'</i>',  1 if F>'<i>'F-up'</i>'.                        '<br />'
d88 2
a89 2
           frequency units, they should be in the range 0.0 <= '<i>'f'</i>' <= 0.5.
           If the response is > 0.5 it is treated as given in pixel units.]
d97 2
a98 2
          be in the range  0.0 <= f <= 0.5. If limiting frequencies are > 0.5 they is treated 
          as given in pixel units.]
d113 1
a113 1
             frequency units ('<i>'f'</i>') or pixel units ('<i>'p'</i>'). If answer is > 0.5
d116 1
a116 1
             in the range 0.0 <= '<i>'f'</i>' <= 0.5 (0.5 is the highest value).
d121 1
a121 1
             '<i>'f'</i>' = '<i>'p'</i>' / NX                              '<br />'
d130 1
a130 1
             parameters "eps" and "a" are given by 0.882 and 10.624 resp. 
@


1.32
log
@italics
@
text
@d2 1
a2 1
                                                              7/19/12
d5 1
a5 1
          To improve quality the image is padded with the average value to twice the 
d57 5
a61 5
                        RAD and ORDER are calculated from the pass-band frequency
                        and cut-off frequency specified by the user.
                        Frequencies below pass band are
                        preserved, frequencies above stop band are removed, with
                        a smooth transition in between (pass band > stop band).
d66 7
d75 2
a76 2
                        0.5*(COS(PI*(F-'<i>'fp'</i>')/('<i>'fp'</i>'-'<i>'fs'</i>'))+1) if '<i>'fp'</i>'<F<'<i>'fs'</i>',   '<br />'
                        1 if F<'<i>'fp'</i>',  0 if F>'<i>'fs'</i>'.                       '<br />'
d79 2
a80 2
                              0.5*(-COS(PI*(F-'<i>'fp'</i>')/('<i>'fp'</i>'-fs))+1) if '<i>'fp'</i>'<F<'<i>'fs'</i>',   '<br />'
			      0 if F<'<i>'fp'</i>',  1 if F>'<i>'fs'</i>'.                        '<br />'
d85 5
a89 5
          .FILTER RADIUS: 0.12
          [The FILTER RADIUS can be given either in  frequency units or pixel
           units. If answer is > 1.0 it is treated as given in pixel units.
           If filter function radius is given in frequency units, they should
           be in the range 0.0 <= '<i>'f'</i>' <= 0.5.]
d94 5
a98 3
          .PASS-BAND AND STOP-BAND FREQUENCY: 0.1, 0.2
          [Enter filter function radii in frequency units.]
          '</div>'
d112 3
a114 2
          2. The FILTER RADIUS can be given either in frequency units ('<i>'f'</i>') or pixel
             units ('<i>'p'</i>'). If answer is > 1.0 it is treated as given in pixel units.
d118 1
a118 3
             units into pixel units for ('<i>'p'</i>'=0  ... (nx/2) ):              '<br />'
             '<i>'p'</i>' = 2 * '<i>'f'</i>'   * (NX / 2)                           '<br />'
             '<i>'f'</i>' = 0.5 * '<i>'p'</i>' / (NX / 2)                           '<br />'
d120 5
a124 2
          3. In the Butterworth filter the ORDER determines
             the filter fall off and RAD corresponds to the cut-off radius.
d127 3
a129 4
             RAD   = '<i>'fp'</i>'/((eps)**(2/ORDER))                     '<br />'
             ORDER = [2*log(eps/sqrt(a**2-1))]/[log('<i>'fp'</i>'/'<i>'fs'</i>')]    '<br />'

             where '<i>'fp'</i>' and '<i>'fs'</i>' are the pass-band and stop-band frequencies and 
a130 2
             Note that '<i>'fp'</i>' and '<i>'fs'</i>' deviate from 1.0 and 0.0 by about 0.2 and 0.09
             respectively (for a low-pass filter.)
d133 2
a134 2
          4. In the Raised Cosine filter, '<i>'fp'</i>' and '<i>'fs'</i>' correspond to the pass-band
             and stop-band frequencies.
@


1.31
log
@*** empty log message ***
@
text
@d68 2
a69 2
                        0.5*(COS(PI*(F-fp)/(fp-fs))+1) if fp<F<fs,   '<br />'
                        1 if F<fp,  0 if F>fs.                       '<br />'
d72 2
a73 2
                              0.5*(-COS(PI*(F-fp)/(fp-fs))+1) if fp<F<fs,   '<br />'
			      0 if F<fp,  1 if F>fs.                        '<br />'
d82 1
a82 1
           be in the range 0.0 <= f <= 0.5.]
d87 1
a87 1
          .PASS-BAND AND STOP-BAND FREQUENCY: 0.1,0.2
d94 1
a94 1
          .TEMPERATURE (0=CUTOFF): .3
d103 2
a104 2
          2. The FILTER RADIUS can be given either in frequency units (f) or pixel
             units (p). If answer is > 1.0 it is treated as given in pixel units.
d106 1
a106 1
             in the range 0.0 <= f <= 0.5 (0.5 is the highest value).
d108 3
a110 3
             units into pixel units for (p=0  ... (nx/2) ):   '<br />'
             p = 2 * f   * (NX / 2)                           '<br />'
             f = 0.5 * p / (NX / 2)                           '<br />'
d115 3
a117 3
             specified by the user using following equations:  '<br />'
             RAD   = fp/((eps)**(2/ORDER))                     '<br />'
             ORDER = [2*log(eps/sqrt(a**2-1))]/[log(fp/fs)]    '<br />'
d119 1
a119 1
             where fp and fs are the pass-band and stop-band frequencies and 
d121 1
a121 1
             Note that fp and fs deviate from 1.0 and 0.0 by about 0.2 and 0.09
d125 1
a125 1
          4. In the Raised Cosine filter fp and fs correspond to the pass-band
@


1.30
log
@*** empty log message ***
@
text
@d22 1
a22 1
          '<table border="0" cellpadding="3">'
@


1.29
log
@*** empty log message ***
@
text
@d5 1
a5 1
          The image is padded with the average value to twice the 
d8 2
a9 1
SEE ALSO: FQ NP  
@


1.28
log
@*** empty log message ***
@
text
@d23 5
a27 5
          '<td>'1: LOW-PASS,'</td>'             '<td>' 2: HIGH-PASS        '</td>'  '</tr>'
          '<td>'3: GAUSS.  LOW-PASS,'</td>'     '<td>' 4: GAUSS.  HIGH-PASS'</td>'  '</tr>'
          '<td>'5: FERMI'</td>'                 '<td>' 6: FERMI            '</td>'  '</tr>'
          '<td>'7: BUTTER. LOW-PASS,'</td>'     '<td>' 8: BUTTER. HIGH-PASS'</td>'  '</tr>'
          '<td>'9: RAISED COS. LOW-PASS,'</td>' '<td>'10: RAISED COS. HIGH-PASS'</td>'  '</tr>'
d42 1
a42 1
                        EXP(-f**2/(2.*RAD**2)), where F is the frequency.
d78 1
a78 1
          [The FILTER RADIUS can be given either in absolute units or pixel
d81 1
a81 2
           be in the range 0.0<=f<=0.5. For an explanation of frequency units 
           see '<a href='"'ffplot.html'"'>'FF PLOT'</a>'.]
d99 1
a99 1
          a) It accepts only real space images and leaves the filtered image real. '<br />'
d102 8
a109 2
          2. The FILTER RADIUS can be given either in absolute units or pixel
             units. If answer is > 1.0 it is treated as given in pixel units.
d114 3
a116 3
             specified by the user using following equations:'<br />'
             RAD   = fp/((eps)**(2/ORDER))                   '<br />'
             ORDER = [2*log(eps/sqrt(a**2-1))]/[log(fp/fs)]'<br />'
d128 1
a128 1

@


1.27
log
@*** empty log message ***
@
text
@d81 1
a81 1
           be in the range 0.0<=f<=0.5. For an explanation of frequence units 
@


1.26
log
@*** empty log message ***
@
text
@d5 2
a6 1
          Padding with the average is applied during filtration.
a9 1
          FP  
@


1.25
log
@*** empty log message ***
@
text
@d23 4
a26 4
          '<td>'1: LOW-PASS,'</td>'             '<td>' 2: HIGH-PASS,'</td>'         '</tr>'
          '<td>'3: GAUSS.  LOW-PASS,'</td>'     '<td>' 4: GAUSS.  HIGH-PASS,'</td>'   '</tr>'
          '<td>'5: FERMI'</td>'                 '<td>' 6: FERMI             '</td>'  '</tr>'
          '<td>'7: BUTTER. LOW-PASS,'</td>'     '<td>' 8: BUTTER. HIGH-PASS '</td>'  '</tr>'
@


1.24
log
@*** empty log message ***
@
text
@d25 1
a25 1
          '<td>'5: FERMI   LOW-PASS,'</td>'     '<td>' 6: FERMI   LOW-PASS, '</td>'  '</tr>'
d47 1
a47 1
           Option "5" - Fermi low-pass.  Filter is 1/(1+EXP[(F-RAD)/T]) which
d51 1
a51 1
           Option "6" - Fermi low-pass (Same as: "5").
@


1.23
log
@*** empty log message ***
@
text
@d2 1
a2 1
                                                              2/14/12
d4 1
a4 1
PURPOSE:  Apply Fourier filters to am image or volume. 
d24 2
a25 2
          '<td>'3: GAUSS.  LOW-PASS,'</td>'     '<td>' 4: GAUSS. HIGH-PASS,'</td>'   '</tr>'
          '<td>'5: FERMI  LOW-PASS,'</td>'      '<td>' 6: FERMI  LOW-PASS, '</td>'  '</tr>'
d51 1
a51 1
           Option "6" - Fermi low-pass,.
d64 1
a64 1
                              1-(1/(SQRT(1+F/RAD)**(2*ORDER)))
d67 2
a68 2
                              0.5*(COS(PI*(F-fp)/(fp-fs))+1) if fp<F<fs,   '<br />'
			      1 if F<fp,  0 if F>fs.                       '<br />'
a99 1

a100 1

d110 1
a110 3
             
             RAD = fp/((eps)**(2/ORDER))                   '<br />'

d119 1
a119 1
          4. 1.In the Raised Cosine filter fp and fs correspond to the pass-band
d121 1
a121 2
	  .

@


1.22
log
@cosine
@
text
@d25 1
a25 1
          '<td>'5: FERMI   LOW-PASS,'</td>'     '<td>' 6: FERMI  HIGH-PASS, '</td>'  '</tr>'
d51 1
a51 1
           Option "6" - Fermi high-pass.  As low-pass, but T is replaced by -T.
d66 8
d91 1
a91 1
    For the Fermi filters [(5) and (6)], a temperature parameter 'T 'will be solicited:
d123 5
a127 1
          4. Implemented by:  Paul Penczek.
@


1.21
log
@table
@
text
@d2 1
a2 1
                                                              2/14/04
d4 1
a4 2
PURPOSE:  Applies Fourier filters to 2-D or 3-D images. Images 
          need not have power-of-two dimensions (see notes).
d19 1
a19 1
          [Enter name of output file containing filtered real image.]
d23 5
a27 4
          '<td>'1: LOW-PASS,'</td>'          '<td>'2: HIGH-PASS,'</td>'         '</tr>'
          '<td>'3: GAUSS LOW-PASS,'</td>'    '<td>'4: GAUSS HIGH-PASS,'</td>'   '</tr>'
          '<td>'5: FERMI LOW-PASS,'</td>'    '<td>'6: FERMI HIGH-PASS, '</td>'  '</tr>'
          '<td>'7: BUTER. LOW-PASS,'</td>'   '<td>'8: BUTER. HIGH-PASS '</td>'  '</tr>'
d30 1
a30 1
          .Filter type (1-9): 7                                                                      
d51 1
a51 2
           Option "6" - Fermi high-pass.  As low-pass, but T is replaced by
                        -T.
d60 2
a61 1
                        a smooth transition in between (pass band > stop band).                                 See NOTE 3 below.
d67 1
d71 2
a72 2
          units. If answer is > 1.0 it is treated as given in pixel units.
          If filter function radius is given in frequency units, they should
d75 1
d77 2
a78 2
    For options 7-8:

d81 1
d83 2
a84 3

    For the Fermi filters [(5) and (6)], the temperature
    parameter 'T 'will be solicited:
d89 1
d91 1
d93 1
a93 4
NOTES:    1. 'FQ' has similar functions to 'FF' except that:    '<br />'

          a) It accepts only real space images (2- & 3-D) and leaves the 
             filtered image real,                               '<br />'
d95 1
a95 1
          b). it runs only in core, so it is much faster than the 'FF' operation. '<br />'
d98 1
a98 1
          units. If answer is > 1.0 it is treated as given in pixel units.
@


1.20
log
@Frequencies below pass band   bug
@
text
@d22 7
a28 4
          1: LOW-PASS,           2: HIGH-PASS,         '<br />
          3: GAUSS LOW-PASS,     4: GAUSS HIGH-PASS,   '<br />
          5: FERMI LOW-PASS,     6: FERMI HIGH-PASS,   '<br />
          7: BUTER. LOW-PASS,    8: BUTER. HIGH-PASS   '<br />
@


1.19
log
@cosmetic
@
text
@d56 2
a57 2
                        Frequencies above pass band are
                        preserved, frequencies below stop band are removed, with
d66 5
a70 3
          [Enter filter function radius in frequency units. They are
           of the range 0.0<=f<=0.5. For an explanation of this units,
           see 'FF PLOT'.]
d88 1
a88 1
          a) it accepts only real space images (2- & 3-D) and leaves the 
d94 1
a94 1
          units. If answer is >1.0 it is treated as given in pixel units.
@


1.18
log
@*** empty log message ***
@
text
@d1 1
a1 1
FQ        Filter - Quick Fourier, High, low pass, etc.    ||       FQ      
d22 4
a25 4
       1: LOW-PASS,           2: HIGH-PASS,         '<br />
       3: GAUSS LOW-PASS,     4: GAUSS HIGH-PASS,   '<br />
       5: FERMI LOW-PASS,     6: FERMI HIGH-PASS,   '<br />
       7: BUTER. LOW-PASS,    8: BUTER. HIGH-PASS   '<br />
@


1.17
log
@*** empty log message ***
@
text
@d1 1
a1 1
FQ        Filter - Quick ||                                        FQ      
d4 2
a5 2
PURPOSE:  Applies Fourier filters to 2-D or 3-D real pictures. Pictures 
          NEED NOT have power-of-two dimensions (see notes).
d8 5
a12 5
SEE ALSO: FQ NP    (Filter - quick, no padding)
          FF       (Fourier filter) 
          FP       (Fourier interpolation)
          FT       (Fourier transformation)
          FF PLOT  (Fourier filter - design filter)
d17 1
a17 1
          [Enter name of input file containing real picture.]
d20 1
a20 1
          [Enter name of output file containing filtered real picture.]
d22 4
a25 3
          1: low-pass, 2: high-pass, 3: Gauss low-pass, 4: Gauss high-pass
          5: Fermi low-pass, 6: Fermi high-pass, 7: Buter. low-pass,
          8: Buter. high-pass
d28 1
a28 1
          [Enter filter option code.  ]
d52 1
a52 1
                              1/(SQRT(1+F/RAD)**(2*ORDER))'<br>'
d58 1
a58 2
                        a smooth transition in between (pass band > stop band).                        See NOTE 3 below.
                        See NOTE 3 below.
d68 1
a68 1
           see FF PLOT.]
d77 1
a77 1
    parameter T will be solicited:
d84 1
a84 1
NOTES:    1. 'FQ' has similar functions to 'FF' except that:'<br>'
d87 1
a87 1
             filtered image real,'<br>'
d89 1
a89 1
          b). it runs only in core, so it is much faster than the 'FF' operation. '<br>'
d97 1
a97 1
             specified by the user using following equations:'<BR>'
d99 1
a99 1
             RAD = fp/((eps)**(2/ORDER))                   '<br>'
d101 1
a101 1
             ORDER = [2*log(eps/sqrt(a**2-1))]/[log(fp/fs)]'<br>'
d107 1
a107 1
             For reference see  '<a href='"'ffplot.html'"'>FF PLOT</a>'.
@


1.16
log
@||
@
text
@d2 1
a2 1
                                                              8/14/97
d23 2
a24 2
          5: Fermi low-pass, 6: Fermi high-pass, 7: Buter low-pass,
          8: Buter high-pass
d50 2
a51 2
           Option "7" - Butterworth low-pass. Filter is
                              1/(SQRT(1+F/RAD)**(2*ORDER))
d55 4
a58 1
                        See NOTE 5 below.
d60 1
a60 1
           Option "8" - Butterworth high-pass. Filter is 
d84 1
a84 1
NOTES:    'FQ' has similar functions to 'FF' except that:
d86 2
a87 2
          1. it accepts only real space images (2- & 3-D) and leaves the 
             filtered image real,
d89 1
a89 1
          2. it runs only in core, so it is much faster than the 'FF' operation,
d91 1
a91 1
          3. The FILTER RADIUS can be given either in absolute units or pixel
d94 1
a94 1
          4. In the Butterworth filter the ORDER determines
d99 1
a99 1
             RAD = fp/((eps)**(2/ORDER))        '<BR>'
d101 1
a101 1
             ORDER = [2*log(eps/sqrt(a**2-1))]/[log(fp/fs)]'<BR>'
d107 1
a107 1
             For reference see "FF PLOT".
d109 1
a109 1
          5. Implemented by:  Paul Penczek.
@


1.15
log
@*** empty log message ***
@
text
@d1 2
a2 2
FQ        Filter - Quick                                     FQ      
                                                           8/14/97
@


1.14
log
@see also
@
text
@d1 1
a1 1
FQ        Filter Quick                                     FQ      
d8 5
a12 4
SEE ALSO: FQ NP  (filter - quick, no padding)
          FF     (Fourier filter) 
          FP     (Fourier interpolation)
          FT     (Fourier transformation)
d106 1
a106 1
          5. Implemented by Paul Penczek.
@


1.13
log
@*** empty log message ***
@
text
@d2 1
a2 1
                                                           4/14/95
d8 1
a8 1
SEE ALSO: FQ NP  (filter quick - no padding)
@


1.12
log
@rm fl command
@
text
@d8 1
a8 2

SEE ALSO: FQ NP  (filter quick, no padding)
d80 1
a80 1
NOTES:    FQ has similar functions to FF except that:
d85 1
a85 1
          2. it runs only in core, so it is much faster than the FF operation,
d93 1
a93 1
             specified by the user using following equations:
d95 1
a95 1
             RAD = fp/((eps)**(2/ORDER))
d97 1
a97 1
             ORDER = [2*log(eps/sqrt(a**2-1))]/[log(fp/fs)]
d103 1
a103 1
             For reference check "ffplot".
d107 3
a109 2
Subroutine: FOUR1A, FQ_Q, FQ3_P
Cotask:     FOUR1
@


1.11
log
@Ed egelman's request: gaussian filter has x^2/(2*sigma^2) i.e., additional factor of 2. in denominator.
@
text
@d10 1
a10 2
          FF     (Fourier filter)
          FL     (Fourier list)
@


1.10
log
@updated
@
text
@d39 1
a39 1
                        EXP(-f**2/RAD**2), where F is the frequency.
d42 1
a42 1
                        function:  1.0-EXP(-F**2/RAD**2).
@


1.9
log
@*** empty log message ***
@
text
@d5 1
a5 1
          DO NOT have to have power-of-two dimensions (see notes).
d25 1
a25 1
          8: Buter high-pass, 9: Remez
a59 3

           Option "9" - Multiplication by the Remez filter designed with the
                        help of FF PLOT command.]
a72 5
    For option 9:

          .FILTER FILE NAME: FIL001
          [Enter file name containing Remez filter designed by FF PLOT
           option.]
d83 1
d86 1
a87 6
          3. it pads the picture with average automatically (to avoid problems
             with errors produced by circular boundaries) when possible. If this
             is not possible, a warning message is printed out.
          4. it adjusts itself to the actual size of the Remez filter file,
             this means that you can easily filter a 32x64 image with a
             filter file that was created with dimensions 256x256.
d89 1
a89 3
          Mixed-radix FFT is used.

          The FILTER RADIUS can be given either in absolute units or pixel
d92 1
a92 21
          Limitations: for 2-D 1024^2(or any combination of dimensions whose
                       product does not exceed the current memory buffer),
                       for 3-D 128^3    "       "       "       "       ".
        
          Memory buffer is currently set to 300 000 words for interactive
          version and 2 200 000  for batch Spider.

          For 3-D this limitation can be the problem, but for larger cubes one
          can use the RC option and PSF filtering.

          Memory requirements:  FQ    filters 1-6, 2D image (2*NS+2)*2*NR
                                FQ    filters 1-6, 3D image 8*NS*NR*NL
          where   NS, NR, NL are nearest powers of two to NSAM, NROW, and
          NSLICE respectively.
                                FQ    filter    7,           NSF*NRF*NLF
          where  NSF, NRF, NLF are dimensions of the Remez filter file 
          (powers-of-two only!).

          Implemented by Paul Penczek.

          5. In the Butterworth filter the ORDER determines
d107 1
a107 1
SUBROUTINE: FQ_Q, FQ3_P, FQ_QR
d109 2
a110 1
CALLER:     FOUR1, FOUR1A
@


1.8
log
@fixed caller
@
text
@d94 1
a94 1
          3. it padds the picture with average automatically (to avoid problems
d128 1
a128 1
             In the program RAD and ORDER are calcualted from the parameters
@


1.7
log
@changes for better html file
@
text
@d28 1
a28 2
          [Enter filter option code.  For explanation of the
          options, see 'FF'.]
d141 3
a143 2
Subroutine: FQ_Q, FQ3_P, FQ_QR
Cotask:     FOUR1
@


1.6
log
@modified for butterworth filter.
@
text
@d46 2
a47 2
                        negotiates between "top-hat" and Gaussian character-
                        istics, depending on the value of T (see below).
@


1.5
log
@corrected text
@
text
@a0 1

d2 1
a2 1
                                                           5/20/94
d24 2
a25 1
          5: Fermi low-pass, 6: Fermi high-pass, 7: Remez
d27 1
a27 1
          .Filter type (1-7): 7                                                                      
d52 11
a62 1
           Option "7" - Multiplication by the Remez filter designed with the
d72 4
a75 1
    For option 7:
d77 2
d126 15
@


1.4
log
@rewrite of a question prompt
@
text
@d7 1
d76 1
a76 1
NOTES:    FQ basically duplicates functions of FF except that:
d87 1
a87 6
          In 2D case, mixed-radix FFT is used.
          In 3D case, if the image size is not power-of-two the image is 
          padded with the average to the nearest power-of-two dimension.
          If there is enough memory available it is still padded to double
          all dimensions (to avoid circular boundaries problem). After
          filtration the image is cut to the original size.
@


1.3
log
@replaced_tabs
@
text
@d23 6
a28 3
          .(1) LOW P./(2) HIGH P./(3) GAUSS L.P./(4)GAUSS H.P./
                    (5)FERMI L.P./(6)FERMI H.P./(7)REMEZ: 1
          [Enter filter option code.
@


1.2
log
@mixed radix FFT was used.
@
text
@@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
                                                           1/10/94
d83 6
a88 5
          If the image size is not power-of-two the image is padded with
          the average to the nearest power-of-two dimension. If there is
          enough memory available it is still padded to double all dimensions
          (to avoid circular boundaries problem). After filtration the
          image is cut to the original size.
d113 1
a113 1
Subroutine: FQ_Q, FQ3_P
@
