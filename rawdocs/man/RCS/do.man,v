head	1.17;
access;
symbols
	best-code:1.8
	pre-named-reg:1.8
	pre_GPL:1.8
	prec_CA:1.8
	oct21:1.7;
locks; strict;


1.17
date	2015.02.23.17.15.34;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2009.09.15.13.37.14;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2009.09.08.14.12.33;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.18.17.39.39;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2007.01.18.15.11.37;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2006.11.02.17.40.15;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2006.11.01.20.14.59;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.12.17.06.17;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2006.09.11.18.24.48;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.12.21.00.59;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.09.17.17.49.47;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	97.03.19.17.33.00;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	96.04.03.19.24.50;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	95.11.08.21.03.39;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	94.08.15.12.16.58;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.07.12.16.33.03;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.16.12.14.46;	author leith;	state Exp;
branches;
next	;


desc
@@


1.17
log
@*** empty log message ***
@
text
@DO        Start of a loop (Scripting operation)              DO
                                                       2/17/15

PURPOSE:  To allow repetitive execution of  
          sections of the SPIDER operation stream.
          Operations inside a loop can be repeated a defined 
          number of times with a varying index value.
          Modeled after FORTRAN 'DO' syntax.

SEE ALSO: ENDDO
          CYCLE
          EXIT
          LB
  
USAGE:  DO <REG>=<LOWER>,<UPPER>,<INCREMENT> 
        '<dl>'
             '<dd>'~~~~~~~   '</dd>'             
             '<dd>'~~~~~~~   '</dd>'             
        '<dt>'ENDDO     '</dt>' 
        '</dl>'
             
          Where:                                       '<br />'
          1.  <REG> is a loop index variable where the value of the index is
              accumulated.  (SPIDER still accepts an earlier syntax 
              where <REG> was a single letter (a...z or A..Z) which 
              denotes  the loop index).               '<br />'
          2.  <LOWER> is a integer constant that specifies the lower bound of
              the loop index.                             '<br />'
          3.  <UPPER> is a integer constant that specifies the upper bound of
              the loop index.                             '<br />'
          4.  <INCREMENT> is an optional integer constant that 
              specifies an incremental value that is added to the loop index 
              with each cycle of the loop. Default value for 
              <INCREMENT> is 1.
          '<p />'

          EXAMPLE:
          '<dl>'
          '<dt>'DO [imgnum]=5,17         '</dt>'
             '<dd>'~~~~~~~               '</dd>'             
             '<dd>'~~~~~~~               '</dd>'            
          '<dt>'ENDDO                    '</dt>'
          '<p />'

          In the above example, DO will repeat any operations (~~~~~)
          with the loop index variable [imgnum] varying from 5 to 17.
          '<p />'

          Nesting of DO loops is allowed.  For example: 
          '<dl>'
          '<dt>'DO [xval]=2,3            '</dt>'
             '<dd>'~~~~~~~               '</dd>'
             '<dd>'~~~~~~~               '</dd>'             
             '<dd>'                      '</dd>'
             '<dl>'
             '<dt>'DO [yval]=5,15,5      '</dt>'    
                '<dd>'~~~~~~~            '</dd>'             
                '<dd>'~~~~~~~            '</dd>'             
             '<dt>'ENDDO                 '</dt>'
             '</dl>'                                  
             '<dd>'~~~~~~~               '</dd>'
             '<dd>'~~~~~~~               '</dd>'
          '<dt>'ENDDO                    '</dt>'
          '</dl>'             
          will perform the operations within the initial loop 2 times,
          and the operations within the enclosed loop a total of 6 times.    
          '<p />'

NOTES: 1. When nesting DO loops, make sure that different registers are used for <REG>.  

       2. DO loops may be nested up to a maximum of '</i>'MAXPRC'</i>' deep.
          See: '<a href='"'../../src/CMLIMIT.INC'"'>''CMLIMIT.INC'</a>' 
          for current value of '</i>'MAXPRC'</i>'.

       3. Any number of operations may appear between 'DO' and 'ENDDO'.

       4. The lower, upper bounds, and increment of the 'DO LOOP' operation may
          be either string or register variables. For example:           '<br />'
          DO [image] = [start],[end],[incr]                              '<br />'
          is allowed where:  [start] = '1'.                              '<br />'
          We advise against using  non-integers for
          these values as their usage may vary in the future.

       5. Prior to SPIDER release 15.0, 'DO' loops were terminated with
          a label operation '<a href='"'lb.html'"'>''LB''</a>'.  
          This label had to be specifed when
          invoking the loop.  This syntax is found in
          older SPIDER procedures and is still supported but is
          now deprecated.  Example:
 
          '<dl>'
          '<dt>'DO LB4 [num]=1,9      '</dt>'       
             '<dd>'SH                 '</dd>'
             '<dd>'ALL{***[num]}      '</dd>'
             '<dd>'SHI{***[num]}      '</dd>'
             '<dd>'(15, 8)            '</dd>'
          '<dt>'LB4                   '</dt>'                 
          '</dl>'        

       6.  More '<a href='"'../user_doc.html#loops'"'>'information on DO-loops'</a>'.

       7. In legacy SPIDER procedures the default interpretation of input 
          values to operations within a 'DO LOOP' was that values NOT enclosed in sets 
          of '()' were applied over successive steps of the loop. This was a confusing 
          feature, and should never have been part of SPIDER.  See the   
          '<a href='"'../user_doc.html#loops_variables'"'>'user guide'</a>' for 
          an explanation of this capability and the current method how to apply
          differing values on successive steps of the DO LOOP.  It is simpler to just
          ignore this capability since one rarely needs to apply such a limited set of
          different values on successive steps within a DO LOOP.

SUBROUTINE: SPIDER,FINDLBQ,GETLBNO

CALLER:     SPIDER
@


1.16
log
@*** empty log message ***
@
text
@d1 2
a2 2
DO        Start of DO loop (Scripting operation)           DO
                                                       11/7/06
d11 2
d66 1
a66 1
          and the operations within the enclosed loop a total of 6 times .    
d69 1
a69 52
     Variable Value Input In DO-Loops:        
          '<p />'

     '<b>'NOTE: IF THIS FEATURE IS NOT TO BE USED, THEN ALL NUMERICAL INPUT
           VALUES TO EACH OPERATION ARE TO BE ENCLOSED IN PARENTHESES.'</b>' '<br />'
          '<p />'
          The  same  sequence  of operations can be applied with      
          different parameter values to the same image.    
          '<p />'
          For variable parameter input values may  be
          entered  in sequence,  to  be  picked  according to the 
          DO-loop count.  Example:         
          '<p />'
             '<dl>'
             '<dt>'DO [num]=1,3                     '</dt>'                 
                '<dd>'SH                            '</dd>'
                '<dd>'PIC{***[num]}                 '</dd>'
                '<dd>'OUT{***[num]}                 '</dd>'
                '<dd>'4., 5., 2.3, 1.2, -7.1, 8.2   '</dd>'
             '<dt>'ENDDO                            '</dt>'                 
             '</dl>'
          '<p />'
          In this example, 'SH' uses the shift vector (4., 5.) with the
          picture PIC001, (2.3, 1.2) with PIC002, and (-7.1, 8.2) with
          PIC003.

           '<p />'

            In the case of operations requiring  a  pair  of  numbers
        (e.g.,  shift  coordinates),  one  pair has to be provided for
        each run of the DO-loop.  However, if the same floating  point
        number  or  pair of numbers should be used for each run of the
        DO-loop, this may be specified by using a  single  number  (or
        pair of numbers) enclosed in parentheses.  Example:
          '<p />'

          '<dl>'
          '<dt>'DO [num]=5,9             '</dt>'       
             '<dd>'SH                    '</dd>'
             '<dd>'ALL{***[num]}         '</dd>'
             '<dd>'SHI{***[num]}         '</dd>'
             '<dd>'(15,8)                '</dd>'
          '<dt>'ENDDO                    '</dt>'                 
          '</dl>'

          '<p />'

        In this case, the shift parameter values 15,8 are  applied  to
        each image, starting with ALL005 and ending with ALL009.

NOTES: 1. When nesting DO loops, make sure that different
          registers are used for <REG>.  
d77 5
a81 5
       4. The lower, upper bounds, and increment 
          of the 'DO LOOP' operation may
          be either symbolic or register variables. For example: '<br />'
          DO [image]=[start],[end],[incr]           '<br />'
          is allowed. We advise against using  non-integers for
d87 1
a87 1
          invoking the loop.  This earlier syntax is often found in
d101 10
@


1.15
log
@*** empty log message ***
@
text
@d8 1
a8 1
          Modeled after the FORTRAN 'DO' syntax.
d128 1
a128 1
          be ither symbolic or register variables. For example: '<br />'
d130 1
a130 1
          is allowed. We advise angainst using  non-integers for
d137 1
a137 1
          SPIDER procedures and is still supported but is
@


1.14
log
@*** empty log message ***
@
text
@d104 1
a104 1
          '<dt>'DO LB4 [num]=5,9         '</dt>'       
@


1.13
log
@new
@
text
@d1 1
a1 1
DO        Start of DO loop                                DO
d8 1
d121 1
a121 1
          See: '<a href='"'../src/CMLIMIT.INC'"'>''CMLIMIT.INC'</a>' 
@


1.12
log
@increment
@
text
@d2 1
a2 1
                                                          11/1/06
d4 4
a7 2
PURPOSE:  This allows the user to set up DO loops in a procedure.
          Operations inside this loop can then be repeated.
d9 2
a10 1
SEE ALSO: LB
d12 3
a14 4
USAGE:    DO LB25 [image_number]=5,17
          [Enter the label number for the loop, the associated loop 
           variable, its range, and increment value.]
          '<dl>'
d16 16
a31 6
             '<dd>'~~~~~~~   '</dd>'            
           '</dl>'             
          LB25'<br />'
          [Close the loop by entering the label number from the DO
          statement.]

d34 6
a39 23
          The syntax of the DO loop is as follows:   '<br />'
              '<dl>'
              '<dt>'DO LB<N> <REG>=<LOWER>,<UPPER>,<INCREMENT> '</dt>' 
              '<dd>'~~~~~~~   '</dd>'             
              '<dd>'~~~~~~~   '</dd>'             
              '</dl>'             
              LB<N>                                  
          '<p />'

          Where:                                     '<br />'
          1.  N is an integer between 0 and 99 which identifies the
              label of the DO loop.                  '<br />'
          2.  REG is a register variable where the index is
              accumulated.  SPIDER still accepts an earlier syntax 
              where REG was a single letter (a...z or A..Z) which 
              denotes  the do loop index.             '<br />'
          3.  LOWER is a constant that specifies the lower bound of
              the DO loop, between 1 and 999999.      '<br />'
          4.  UPPER is a constant that specifies the upper bound of
              the DO loop, between 1 and 999999.     
          5.  INCREMENT is an optional constant that specifies the incremental
              value that is added to REG with each cycle of the loop.
              Default value for INCREMENT is 1.
d43 1
a43 1
          with the index register varying from 5 to 17.
d46 18
a63 16
          Note that nesting of DO loops is allowed.  For example: '<br />'
                 '<dl>'
                 '<dt>'DO LB1 [xval]=2,3    '</dt>'
                 '<dd>'~~~~~~~              '</dd>'
                 '<dd>'~~~~~~~              '</dd>'             
                 '<dd>''<dl>'
                     '<dt>'DO LB2 [yval]=9,15'</dt>'    
                    '<dd>'~~~~~~~            '</dd>'             
                    '<dd>'~~~~~~~            '</dd>'             
                    '</dl>'                  '</dd>'             
                 '<dd>'LB2                   '</dd>'
                 '<dd>'~~~~~~~               '</dd>'
                 '</dl>'             
              LB1                           '<br />'
          will perform the operations within the LB2 loop 6 times,
          and the operations within the LB1 loop 2 times.    
d69 2
a70 2
     NOTE: IF THIS FEATURE IS NOT TO BE USED, THEN ALL NUMERICAL INPUT
           VALUES TO EACH OPERATION ARE TO BE ENCLOSED IN PARENTHESES.         '<br />'
d72 1
a72 1
          The  same  sequence  of operations can be applied with          '<br />'
d80 1
a80 1
             '<dt>'DO LB3 [number]=1,3 '</dt>'                 
d82 2
a83 2
                '<dd>'PIC{***[number]}              '</dd>'
                '<dd>'OUT{***[number]}              '</dd>'
d85 2
a86 2
                '</dl>'
             LB3                                     
d88 2
a89 2
          In this example, 'SH' uses the shift vector (4.,5.) with the
          picture PIC001, (2.3,1.2) with PIC002, and (-7.1,8.2) with
d93 1
d103 1
a103 1
          '<dt>'DO LB4 [num]=5,9      '</dt>'       
d108 1
a108 1
          '<dt>'LB4 '</dt>'        
a114 1
          '<p />'
d117 1
a117 2
          registers are used for REG. DO loops
          may be nested up to a maximum of 10 deep.
d119 3
a121 1
       2. The user is limited to 100 DO loops per procedure.
d123 1
a123 1
       3. Any number of operations may appear between DO and LB#.
d126 3
a128 3
          of the 'DO loop' operation may
          be variables.  For example:              '<br />'
          DO LB1 [image]=[start],[end],[incr]     '<br />'
d130 17
a146 1
           these values as their definition may vary in the future.
d148 1
a148 1
       5.  More '<a href='"'../user_doc.html#loops'"'>'information on DO-loops'</a>'.
d150 1
a150 1
SUBROUTINE: SPIDER
@


1.11
log
@formatting imporoved
@
text
@d7 2
d10 2
a11 1
          [Enter the range and corresponding variable of the DO loop.]
d17 1
a17 1
          [Enter the label that corresponds to the label in the DO
d19 1
d24 1
a24 1
              '<dt>'DO LB<N> <REG>=<LOWER>,<UPPER> '</dt>' 
d42 3
d82 1
a82 1
                '<dl>'
d104 9
a112 8
                '<dl>'
                '<dt>'DO LB4 [num]=5,9      '</dt>'       
                '<dd>'SH                     '</dd>'
                '<dd>'ALL{***[num]}         '</dd>'
                '<dd>'SHI{***[num]}          '</dd>'
                '<dd>'(15,8)                 '</dd>'
                '</dl>'
             LB4         
d127 2
a128 1
       4. Both lower and upper bounds of the DO loop command may
d130 3
a132 2
          DO LB1 [image]=[start],[end]             '<br />'
          is allowed.
@


1.10
log
@[]
@
text
@d2 1
a2 1
                                                          9/12/06
d5 1
d9 5
a13 10

          '<pre>'
          LI                
          PIC{***[image_number]}
          (1-5)
          .
          .
          .
          .
          LB25
d16 1
d18 8
a25 6
          The syntax of the DO loop is as follows:
              DO LB<N> <REG>=<LOWER>,<UPPER>
              .
              .
              .
              LB<N>
d27 1
a27 1
          Where:
d29 1
a29 1
              label of the DO loop.
d33 1
a33 1
              denotes  the do loop index.
d35 1
a35 1
              the DO loop, between 1 and 999999.
d37 2
a38 4
              the DO loop, between 1 and 999999.

          In the above example, DO will list out to the results file
          the first 5 rows of the files PIC005 through PIC017.
d40 18
a57 14
          Note that nesting of DO loops is allowed.  For example:
              DO LB1 [xval]=2,3
              .
              .
              .
              DO LB2 [yval]=9,15
              .
              .
              .
              LB2
              .
              .
              .
              LB1
d59 2
a60 1
          and the operations within the LB1 loop 2 times.
d62 2
a63 1
     Variable Value Input In DO-Loops:
d66 5
a70 5
           VALUES TO EACH OPERATION ARE TO BE ENCLOSED IN PARENTHESES.

          The  same  sequence  of operations can be applied with 
          different parameter values to the same image.

d73 11
a83 9
          DO-loop count.  Example:

             DO LB1 [number]=1,3
                SH
                PIC{***[number]}
                OUT{***[number]}
                4., 5., 2.3, 1.2, -7.1, 8.2
             LB1

d88 2
a89 1
             In the case of operations requiring  a  pair  of  numbers
d95 1
d97 9
a105 6
             DO LB7 [num]=5,9
                SH
                ALL{***[num]}
                SHI{***[num]}
                (15,8)
             LB7
d109 1
a109 1
          '</pre>'
d120 2
a121 2
          be register variables.  For example:           '<br />'
                  DO LB1 [image]=[start],[end]          '<br />'
@


1.9
log
@updated
@
text
@d2 1
a2 1
                                                          9/19/99
d4 1
a4 2
PURPOSE:  This allows the user to set up DO loops in a batch 
          runstream.
d6 1
a6 1
USAGE:    DO LB25 X12=5,17
d11 2
a12 2
          PIC{***X12}
          1-5
a15 3
          [Enter the batch runstream.]
          .
          .
d31 1
a31 1
          2.  REG is a register between 10 and 99 where the index is
d44 1
a44 1
              DO LB1 X12=2,3
d48 1
a48 1
              DO LB2 X13=9,15
d62 1
a62 1
     NOTE: IF THIS FEATURE IS NOT TO BE USED, THEN (almost) ALL INPUT
a63 6
           (exemptions are those operations that ask for a sequence of
            possibly more than 2 numbers like 'MN' which asks:
            .ENTER FILE NUMBERS: 1-3,5,8,10
           internally in SPIDER the subroutine RDPRAI is used, whereas
           for single and two-variable input RDPRM,RDPRM2, and RDPRMI
           are used, which look for parentheses.
d72 5
a76 5
             DO LB1 X79=1,3
             SH
             PIC{***x79}
             OUT{***x79}
             4., 5., 2.3, 1.2, -7.1, 8.2
d90 5
a94 5
             DO LB7 X80=5,9
             SH
             ALL{***x80}
             SHI{***x80}
             (15,8)
d105 3
a107 1
       2. 'DO' is a batch only operation.
d109 3
a111 16
       3. In the above example, the file ALL{***X80} was specified.
          The register (X80) in the filename corresponds to the 
          same register (X80) in the DO
          statement.  Thus, when the DO loop is executed, the 
          filname (ALL) will be appended with three characters
          from the number stored in register X80.  This allows the 
          user to apply the
          same operations to several files, without repetition.

       4. The user is limited to 100 DO loops per batch runstream.

       5. Any number of operations may appear between DO and LB#.

       6. Both lower and upper bounds of the DO loop command may
          be registers.  For example:               '<br />'
                  DO LB1 x80=X10,X11                '<br />'
d114 1
@


1.8
log
@*** empty log message ***
@
text
@d10 1
a10 1
          '<PRE>'
d40 1
a40 1
              the DO loop, between 1 and 99999.
d42 1
a42 1
              the DO loop, between 1 and 99999.
d109 1
a109 1
          '</PRE>'
d131 2
a132 2
          be registers.  For example:               '<BR>'
                  DO LB1 x80=X10,X11                '<BR>'
@


1.7
log
@loop index is now register
@
text
@d1 1
a1 1
DO        start of DO loop                                DO
@


1.6
log
@changed limit to 99999
@
text
@d2 1
a2 1
                                                          3/19/97
d7 1
a7 1
USAGE:    DO LB25 I=5,17
d12 1
a12 1
          PIC00I
d26 1
a26 1
              DO LB<N> <VAR>=<LOWER>,<UPPER>
d35 4
a38 4
          2.  VAR is the corresponding one-letter variable of the DO
              loop.  (Any letter of the alphabet may be used, unless
              you plan to use the 'SD' or 'UD' operations, in which
              case "X" may not be used.)
d48 1
a48 1
              DO LB1 I=2,3
d52 1
a52 1
              DO LB2 J=9,11
d82 1
a82 1
             DO LB1 I=1,3
d84 2
a85 2
             PIC00I
             OUT00I
d100 1
a100 1
             DO LB7 I=5,9
d102 2
a103 2
             ALL00I
             SHI00I
d112 1
a112 2
          letters are used for VAR.  In the above example, I and J
          may both be used in specifying filenames.  DO loops
d115 1
a115 1
       2. DO is a batch only operation.
d117 7
a123 5
       3. In the above example, the file ACF00I was specified.
          The I in the filename corresponds to the I in the DO
          statement.  Thus, when the DO loop is executed, the I
          in the filename will be changed to the value of I in
          the DO statement.  This allows the user to apply the
d132 1
a132 1
                  DO LB1 I=X10,X11                  '<BR>'
@


1.5
log
@tags needed
@
text
@d2 1
a2 1
                                                          3/04/96
d40 1
a40 1
              the DO loop, between 1 and 999.
d42 1
a42 1
              the DO loop, between 1 and 999.
d130 1
a130 1
          be registers.  For example,                  '<BR>'
@


1.4
log
@changes for better html file
@
text
@d2 1
a2 1
                                                          8/15/94
d10 2
a11 1
          LI
a24 1

d82 6
a87 6
                  DO LB1 I=1,3
                  SH
                  PIC00I
                  OUT00I
                  4., 5., 2.3, 1.2, -7.1, 8.2
                  LB1
d100 6
a105 6
                  DO LB7 I=5,9
                  SH
                  ALL00I
                  SHI00I
                  (15,8)
                  LB7
d109 1
d130 2
a131 2
          be registers.  For example,
                  DO LB1 I=X10,X11
d135 3
a137 2
Subroutine: DRIVER
Caller:     DRIVER
@


1.3
log
@added () explanation, & cosmetic
@
text
@d110 2
a111 2
NOTES: 1. When nesting DO loops, make sure that different let-
          ters are used for VAR.  In the above example, I and J
@


1.2
log
@replaced_tabs
@
text
@d1 2
d4 2
a5 2
DO        start of DO loop                                  DO      
                                                            7/1/85
a6 3
PURPOSE:  This allows the user to set up DO loops in a batch run-
          stream.

d8 1
a8 2
          [Enter the range and corresponding variable of the DO
          loop.]
d64 46
d135 1
a135 1
Cotask:     DRIVER
@


1.1
log
@Initial revision
@
text
@@
