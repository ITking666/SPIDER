head	1.21;
access;
symbols
	healthdept_2018:1.21
	pre_getangas:1.20
	GPL2010:1.20
	pre_GPL2010:1.19
	pre_var_equation:1.15
	pre_fftwrings:1.15
	pre_opfiles:1.15
	src:1.15
	best-code:1.15
	named-reg:1.14
	x-named-regs:1.14
	x:1.14
	v13-00:1.13
	pre_GPL:1.11
	prec_CA:1.11
	noindx:1.11
	Bproc:1.10
	oct21:1.7
	last77:1.6;
locks; strict;
comment	@c @;


1.21
date	2018.10.03.14.33.55;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2010.06.24.13.25.05;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2010.01.06.19.11.29;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2009.11.16.18.00.46;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2009.11.10.19.27.48;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2009.06.26.13.59.25;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.12.15.23.37;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2005.11.15.21.50.43;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.17.20.03.49;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.17.17.59.09;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.09.14.24.58;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.08.28.16.13.20;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2000.08.08.18.13.57;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.12.28.17.29.27;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.09.15.14.55.22;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	98.04.22.14.42.48;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	98.04.17.19.12.30;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	98.03.05.14.34.23;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	97.09.17.15.08.16;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	97.03.10.16.01.42;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.47.16;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.21
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C ARASQ.F       ADAPTED FROM ARAS.FOR FOR CHAR. AUG 89  al
C               CHANGED ERROR MESG.             SEP 97  al
C               USED FILNAMSUB                  DEC 99  ARDEAN LEITH
C               REMOVED FILNAMSUB               APR 01  ARDEAN LEITH
C               [] REG. SUPPORT                 NOV 05  ARDEAN LEITH
C               GLOBAL                          JUN 09  ARDEAN LEITH
C               ERROR MSG. FORMAT               NOV 09  ARDEAN LEITH
C               SKIP GLOBAL BUG                 NOV 09  ARDEAN LEITH
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C ARASQ(STRING,NLET,GLOBAL,IRTFLG)
C
C PURPOSE:       SUBROUTINE TO EVALUATE ARITHMETIC EXPRESSION AND SET
C                REGISTERS FROM OPERATION LINE
C
C PARAMETERS:    STRING        INPUT STRING TO BE EVALUEATED        SENT
C                NLET          LENGTH OF INPUT STRING               SENT
C                GLOBAL        VARIABLE IS TO BE GLOBAL             SENT
C                IRTFLG        ERROR RETURN FLAG (0 IS NORMAL)      RET.
C
C--*********************************************************************

	SUBROUTINE ARASQ(OLDSTR,NLET,MAKEGLOBAL,IRTFLG)

	COMMON/UNITS/LUN,NIN,NOUT

        INCLUDE 'CMLIMIT.INC'

        CHARACTER(LEN=*)      :: OLDSTR
        CHARACTER(LEN=160)    :: NEWSTR
        LOGICAL               :: MAKEGLOBAL,ISGLOBAL

	IRTFLG = 1

C       REMOVE ALL BLANKS
	CALL SHRINKQ(OLDSTR,NLET,NEWSTR,NLET2)
	IF (NLET2 .LE. 0) GOTO 9999
        
        NEQ  = INDEX(NEWSTR(:NLET2),'=')
        IF (NEQ .EQ. 0) THEN
C          NO EQUALS SIGN FOUND, EVALUATE 
           CALL EXPRQ(NEWSTR(:NLET2),NLET2,VALUE,IRTFLG)

           WRITE(NOUT,14) VALUE
14         FORMAT('  ',1pG15.8)

           RETURN
        ENDIF

C       NEQ NOW POINTS TO POSITION OF EQUAL SIGN

C       SKIP ANY GLOBAL FLAG
        IGO = VERIFY (NEWSTR(1:NEQ-1),'GLOBALglobalCc')
        IGO = MAX(1,IGO)

C       EVALUATE LEFT HAND NEQ-1 CHARACTERS FOR REGISTER NUMBER
	IF (NEWSTR(IGO:IGO) .NE. '[' ) GOTO 9999

        IF (MAKEGLOBAL) THEN
           CALL REG_FIND_IREG('GLO',NEWSTR(IGO:NEQ-1),
     &                        ISGLOBAL,IREG,IRTFLG)
!       ELSEIF(NEWSTR(1:3) .EQ. 'LOC' .OR. 
!     &         NEWSTR(1:3) .EQ. 'loc') THEN
!           CALL REG_FIND_IREG('LOC',NEWSTR(IGO:NEQ-1),
!     &                        ISGLOBAL,IREG,IRTFLG)
        ELSE
           CALL REG_FIND_IREG('LOC',NEWSTR(IGO:NEQ-1),
     &                        ISGLOBAL,IREG,IRTFLG)
        ENDIF
        IF (IRTFLG .NE. 0) GOTO 9999

C       NOW EVALUATE RIGHT HAND NLET2-NEQ CHARS
	CALL EXPRQ(NEWSTR(NEQ+1:NLET2),NLET2-NEQ,VALUE,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9999

C       NOW SET REGISTER FROM LEFT HAND NEQ-1 CHARACTERS
        CALL REG_SET_BYNUM(IREG,VALUE,ISGLOBAL,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

	RETURN

9999	WRITE(NOUT,*)'*** ERROR: ARITHMETIC ASSIGNMENT FAILED'
        RETURN

	END

@


1.20
log
@GPL_2010
@
text
@d18 1
a18 1
C=* Email: spider@@wadsworth.org                                        *
@


1.19
log
@REG_FIND_IREG used
@
text
@d13 4
a16 3
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
C=* Copyright 1985-2009  Health Research Inc.,                         *
d27 1
a27 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a28 1
C=*                                                                    *
@


1.18
log
@SKIP GLOBAL BUG
@
text
@d46 1
a46 1
	SUBROUTINE ARASQ(OLDSTR,NLET,GLOBAL,IRTFLG)
d54 1
a54 1
        LOGICAL               :: GLOBAL
d76 1
a76 1
        IGO = VERIFY (NEWSTR(1:NEQ-1),'GLOBALglobal')
d82 11
a92 5
        IBANK = 0     ! TOP BANK
        IF (GLOBAL) IBANK = 1

        CALL REG_GET_VAR(IBANK,NEWSTR(IGO:NEQ-1),.TRUE.,VALDUM,
     &                   IREG,I,IRTFLG)
d100 1
a100 1
        CALL REG_SET_BYNUM(IREG,VALUE,GLOBAL,IRTFLG)
@


1.17
log
@ERROR MSG. FORMAT
@
text
@d11 1
d75 4
d80 1
a80 1
	IF (NEWSTR(1:1) .NE. '[' ) GOTO 9999
d85 1
a85 1
        CALL REG_GET_VAR(IBANK,NEWSTR(1:NEQ-1),.TRUE.,VALDUM,
@


1.16
log
@added flag for global reg setting
@
text
@d4 7
a10 6
C ARASQ.F                 ADAPTED FROM ARAS.FOR FOR CHAR. AUG 89 al
C                         CHANGED ERROR MESG.            SEPT 97 al
C                         USED FILNAMSUB        DEC 99  ARDEAN LEITH
C                         REMOVED FILNAMSUB     APR 01  ARDEAN LEITH
C                         [] REG. SUPPORT       NOV 05  ARDEAN LEITH
C                         GLOBAL                JUN 09  ARDEAN LEITH
d12 5
a16 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d18 1
a18 6
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d23 1
a23 1
C=* This program is distributed in the hope that it will be useful,    *
d29 1
a29 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d94 1
a94 1
9999	WRITE(NOUT,*)'  *** ERROR: ARITHMETIC ASSIGNMENT FAILED'
@


1.15
log
@native named registers
@
text
@d6 1
a6 1
C                         USED FILNAMSUB        DEC 99 ARDEAN LEITH
d9 1
a9 1
C
d12 1
a12 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d36 1
a36 1
C ARASQ(STRING,NLET,IRTFLG)
d43 1
d48 1
a48 1
	SUBROUTINE ARASQ(OLDSTR,NLET,IRTFLG)
d56 1
d62 1
a62 1
	IF (NLET2 .LE. 0) GOTO 1000
d78 4
a81 1
	IF (NEWSTR(1:1) .NE. '[' ) GOTO 1000
d83 3
a85 2
        CALL REG_GET_VAR(0,NEWSTR(1:NEQ-1),.TRUE.,VALDUM,IREG,I,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 1000
d89 1
a89 1
	IF (IRTFLG .NE. 0) GOTO 1000
d92 2
a93 2
        CALL REG_SET_BYNUM(IREG,VALUE,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 1000
d97 1
a97 1
1000	WRITE(NOUT,*)'  *** ERROR: ARITHMETIC ASSIGNMENT FAILED'
@


1.14
log
@named register support
@
text
@d8 1
a8 1
C                         GLOBAL REG. SUPPO     NOV 05  ARDEAN LEITH
d53 2
a54 2
        CHARACTER *(*) OLDSTR
        CHARACTER *89  NEWSTR
d62 2
a63 2
        IEQUAL = INDEX(NEWSTR(:NLET2),'=')
        IF (IEQUAL .EQ. 0) THEN
a72 1
	NEQ = IEQUAL + 1
d76 1
a76 1
	IF (NEWSTR(1:1) .NE. 'X' .AND. NEWSTR(1:1) .NE. 'x') GOTO 1000
d78 1
a78 1
        CALL REGPARSE(NEWSTR(1:NEQ-1),ITEMP,IGO,IEND,.TRUE.,IRTFLG)
d82 1
a82 1
	CALL EXPRQ(NEWSTR(NEQ:NLET2),NLET2-NEQ+1,VALUE,IRTFLG)
d86 2
a87 2
	CALL REG_SET(ITEMP,VALUE,.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 1000
d91 1
a91 1
1000	WRITE(NOUT,*) '*** ERROR: ARITHMETIC ASSIGNMENT FAILED'
@


1.13
log
@GPL License fixed
@
text
@d8 1
d62 1
a62 1
       IEQUAL = INDEX(NEWSTR(:NLET2),'=')
d68 1
a68 1
14         FORMAT(1X,1pG15.8)
d77 1
a77 1
	IF (NEWSTR(1:1) .NE. 'X') GOTO 1000
@


1.12
log
@HRI GPL License used
@
text
@a9 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d13 1
a13 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a32 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
a33 1
C **************************************************************************
@


1.11
log
@rdpr simplification for symbolic parameters & variable subs.
@
text
@d9 1
d11 1
d13 24
d43 1
@


1.10
log
@output --> 1pG15.8
@
text
@d4 4
a7 3
C ARASQ.F                      ADAPTED FROM ARAS.FOR FOR CHAR. AUG 89 al
C                              CHANGED ERROR MESG. SEPT 97 al
C                              USED FILNAMSUB      DEC 99 ARDEAN LEITH
d45 1
a45 8
        ILEFBRAK = INDEX(NEWSTR(:NLET2),'{')
        IF (ILEFBRAK .GT. 0) THEN
C          SUBSTITUTE FOR {***X??) OR {---X??} IN NEWSTR
           CALL FILNAMSUB(NEWSTR,NLET2,.FALSE.,FDUM,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
        ENDIF

        IEQUAL = INDEX(NEWSTR(:NLET2),'=')
@


1.9
log
@used reg_set
@
text
@d56 2
a57 2
           WRITE(NOUT,14)VALUE
14         FORMAT(1X,G15.4)
@


1.8
log
@used filnamsub
@
text
@d33 1
a33 3
C       MAXPARAM: NUMBER OF PARAMETER REGISTERS IN PARAM COMMON
C       REGISTERS 104...129 USED FOR OLD STYLE DO INDEX COUNTERS
        PARAMETER (MAXPARAM=129)
a34 5
C       MAXPARAMSEL: NUMBER OF SELECTED  REGISTERS IN PARAM COMMON
        PARAMETER (MAXPARAMSEL=20)

        COMMON /PARAM/ PARAM(MAXPARAM),NSEL(MAXPARAMSEL)

d53 1
a53 1
C          NO EQUALS SIGN FOUND
d65 1
a65 3
C       EVALUATE LEFT HAND NEQ-1 CHARACTERS, THEN RIGHT HAND 
C           NLET2-NEQ CHARS

d68 2
a69 7
        IF (NEQ-1 .EQ. 2) THEN
            READ(NEWSTR(2:2),605,ERR=1000) ITEMP
605	    FORMAT(I1)
        ELSE
            READ(NEWSTR(2:3),606,ERR=1000) ITEMP
606	    FORMAT(I2)
        ENDIF
d71 1
d75 4
a78 2
	PARAM(ITEMP+1) = VALUE
        IRTFLG         = 0
d85 1
@


1.7
log
@loop index converted to register
@
text
@d2 1
a2 1
C++*****************************************************************************
d6 1
d18 1
a18 1
C ARASQ(STRING,L1,IFLAG)
d20 2
a21 1
C PURPOSE:       SUBROUTINE TO EVALUATE ARITHMETIC EXPRESSION
d23 5
a27 1
C--*****************************************************************************
d29 1
a29 1
	SUBROUTINE ARASQ(OLDSTR,L1,IFLAG)
d45 5
a49 3
	IFLAG=0
	CALL SHRINKQ(OLDSTR,L1,NEWSTR,L2)
	IF (L2 .LE. 0) GOTO 1000
d51 8
a58 1
        IEQUAL = INDEX(NEWSTR(:L2),'=')
d61 2
a62 1
           CALL EXPRQ(NEWSTR(:L2),L2,VALUE,IFLAG)
d65 1
d72 2
a73 1
C       EVALUATE LEFT HAND NEQ-1 CHARACTERS, THEN RIGHT HAND L2-NEQ CHARS
d85 3
a87 2
	CALL EXPRQ(NEWSTR(NEQ:L2),L2-NEQ+1,VALUE,IFLAG)
	IF (IFLAG .NE. 0) GOTO 1000
d89 1
d93 1
@


1.6
log
@nosave
@
text
@a25 1
	COMMON/PARAM/PARAM(103),NSEL(10)
d27 9
d38 1
a38 1
CNO_SAVE
@


1.5
log
@changed output format from f15.4 to   g15.4
@
text
@d30 1
a30 1

d65 1
a65 1
	RETURN
@


1.4
log
@comments now removed by rdprmc
@
text
@d40 1
a40 1
14         FORMAT(1X,F15.4)
@


1.3
log
@changed error message
@
text
@a34 11
C       OMIT COMMENT SECTION AT END OF STRING IF ANY
        ICOMNT = INDEX(NEWSTR(:L2),';')
C       TRAP LINE WITH ONLY A COMMENT ON IT (SHOULD NEVER GET, ANYWAY)
        IF (ICOMNT .EQ. 1) RETURN
        IF (ICOMNT .GT. 1) THEN
C          REMOVE THE SPIDER COMMENT FOLLOWING ;
           L2 = ICOMNT - 1
C          MAY NEED TO SKIP TAB BEFORE COMMENT?
           L2=lnblnk(NEWSTR(1:L2))
        ENDIF

@


1.2
log
@added trap for comment with tab preceeding
@
text
@d4 2
a5 2
C $$ ARASQ.FOR
C                 ADAPTED FROM ARAS.FOR FOR CHAR. AUG 89 al
d17 1
a17 1
C ARASQ(STRING,LENS,IFLAG)
a67 1
C           DECODE(1,605,F1(3))ITEMP1
d75 1
a75 1
1000	WRITE(NOUT,*) ' *** ARITHMETIC ASSIGNMENT FAILED'
@


1.1
log
@Initial revision
@
text
@d34 1
a34 1

d37 8
a44 1
        IF (ICOMNT .GT. 0) L2 = ICOMNT
@
