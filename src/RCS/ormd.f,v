head	1.34;
access;
symbols
	pre_mrcs:1.34
	healthdept_2018:1.34
	pre_getangas:1.30
	GPL2010:1.30
	pre_GPL2010:1.29
	pre_var_equation:1.29
	pre_fftwrings:1.26
	pre_opfiles:1.26
	src:1.26
	best-code:1.26
	x-named-regs:1.26
	x:1.26
	v13-00:1.26
	pre_GPL:1.24
	prec_CA:1.24
	noindx:1.23
	Bproc:1.21
	oct21:1.16
	last77:1.15;
locks; strict;
comment	@c @;


1.34
date	2018.10.03.14.34.11;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2013.01.09.17.55.57;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2013.01.03.16.32.00;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2011.06.17.16.21.02;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2010.06.24.13.26.26;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2008.12.08.15.06.53;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2008.06.06.17.47.37;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2008.06.04.16.15.01;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2005.10.17.20.10.28;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2005.10.17.18.04.47;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2003.02.20.20.55.30;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2002.03.11.14.07.59;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2000.09.29.19.17.43;	author bimal;	state Exp;
branches;
next	1.21;

1.21
date	2000.06.12.19.31.09;	author bimal;	state Exp;
branches;
next	1.20;

1.20
date	2000.01.25.16.23.57;	author bimal;	state Exp;
branches;
next	1.19;

1.19
date	2000.01.18.20.55.42;	author bimal;	state Exp;
branches;
next	1.18;

1.18
date	2000.01.18.20.43.43;	author bimal;	state Exp;
branches;
next	1.17;

1.17
date	99.12.03.20.39.01;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	99.04.16.14.12.18;	author pawel;	state Exp;
branches;
next	1.15;

1.15
date	99.03.01.18.30.23;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	99.03.01.15.00.35;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	98.02.19.15.54.52;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	97.10.17.15.19.08;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	97.10.10.17.50.59;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	97.08.15.15.03.30;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	97.08.15.13.29.07;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	97.01.16.16.55.26;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.01.16.14.21.38;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	96.07.24.15.18.29;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.04.09.19.52.38;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	96.01.16.16.12.25;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	94.09.28.18.57.05;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.08.24;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.58;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.34
log
@email_health_dept
@
text
@C++*********************************************************************
C
C    ORMD.F 
C             OPFILEC                          FEB 2003  ARDEAN LEITH
C             REWRITTEN                        JUN 2008  ARDEAN LEITH
C             APRINGS_INIT_PLANS PARAMS        JUN 2011  ARDEAN LEITH
C             ANGLE BUG                        JAN 2013  ARDEAN LEITH                      
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2013  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  ORMD()
C
C PURPOSE: DETERMINES ROTATIONAL ORIENTATION BETWEEN TWO IMAGES USING 
C          RESAMPLING INTO POLAR COORDINATES. SAME AS: 
C          'AP REF' OR 'AP SH' WITHOUT THE TRANSLATIONAL SEARCH AND
C          IT ONLY ACTS ON A SINGLE PAIR OF IMAGES. 
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE ORMD(ASKPEAKS)

        INCLUDE 'SETNUMRINGS.INC'
        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        CHARACTER (LEN=MAXNAM)    :: FILNAM,REFNAM,OUTANG
        INTEGER, ALLOCATABLE      :: NUMR(:,:)
        REAL, ALLOCATABLE         :: X(:,:)
        CHARACTER (LEN=1)         :: ASK,MODE
        LOGICAL                   :: NEWFILE 
	CHARACTER(LEN=80)         :: COMMEN
        LOGICAL                   :: ASKPEAKS
        CHARACTER (LEN=1)         :: NULL = CHAR(0)

        INTEGER, PARAMETER        :: NPLANS = 14
        INTEGER *8                :: FFTW_PLANS(NPLANS)

        INTEGER, PARAMETER        :: LUNREF   = 20
        INTEGER, PARAMETER        :: LUNEXP   = 21
        INTEGER, PARAMETER        :: LUNDOC   = 70 

C       ASK FOR INPUT FILES
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNAM,LUNEXP,'O',ITYPE,NX,NY,
     &               NZ,MAXIM,'EXPERIMENTAL IMAGE~',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,REFNAM,LUNREF,'O',ITYPE,NX1,NY1,
     &               NZ1,MAXIM,'REFERENCE IMAGE~',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        CALL SIZCHK(UNUSED, NX,NY,NZ,0,  
     &                      NX1,NY1,NZ1,0, IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        ISKIP = 0
        CALL RDPRI3S(MR,NR,ISKIP,NOT_USED,
     &              'FIRST, LAST RING, & RING STEP',IRTFLG)
        IF (ISKIP .LE. 0) THEN
           ISKIP = 1
           CALL RDPRI1S(ISKIP,NOT_USED,'RING STEP',IRTFLG)
        ENDIF
        IF (IRTFLG .NE. 0) GOTO 9999
        ISKIP = MAX(1,ISKIP)

        NRAD = MIN(NX/2-1, NY/2-1) -1

	IF (MR .LE. 0) THEN
	   CALL ERRT(101,'FIRST RING MUST BE > 0',NE)
	   GOTO 9999

	ELSEIF (NR .GE. NRAD)  THEN 
	   CALL ERRT(102,'LAST RING MUST BE < ',NRAD)
	   GOTO 9999
        ENDIF

        MODE = 'F'
        CALL RDPRMC(ASK,NA,.TRUE.,'FULL OR HALF CIRCLE (F/H)',
     &              NULL,IRT)
        IF (IRT .NE. 0) GOTO 9999
        IF (ASK == 'H') MODE = 'H'

        NPEAK = 1
        IF (ASKPEAKS) THEN 
           CALL RDPRI1S(NPEAK,NOT_USED,'NUMBER OF PEAKS',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999
           NPEAK = MAX(1,NPEAK)
        ENDIF
        
        IF (NPEAK > 1) THEN
C          OPEN PEAK OUTPUT DOC FILE (FOR APPENDING)
           NOUTANG = LUNDOC
           CALL OPENDOC(OUTANG,.TRUE.,NLET,LUNDOC,NOUTANG,.TRUE.,
     &           'OUTPUT ANGLE DOCUMENT',.FALSE.,.TRUE.,.TRUE.,
     &            NEWFILE,IRTFLG)

           COMMEN = '       ANGLE,     PEAK-HEIGHT '
           CALL LUNDOCPUTCOM(LUNDOC,COMMEN,IRTFLG)
        ENDIF

C       CREATES NUMR ARRAY HOLDING THE SPECS FOR RADIAL RINGS
        CALL SETNUMRINGS(MR,NR,ISKIP,MODE, 1,
     &                   NUMR,NRING,LCIRC,
     &                   IRTFLG)
        IF (IRTFLG .NE. 0)  GOTO 9999
        MAXRAYS = NUMR(3,NRING) -2  ! ACTUAL LENGTH OF LONGEST RING

        ALLOCATE (X(NX,NY), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'ORMD, X',NX*NY)
           GOTO 9999
        ENDIF

C       INITIALIZE FFTW3 PLANS FOR USE WITHIN OMP || SECTIONS
        CALL APRINGS_INIT_PLANS(NUMR,NRING,
     &                          FFTW_PLANS,NPLANS,NX,NY,IRTFLG)

        CALL ORMD_P(NX,NY, 
     &      NRING,LCIRC,MAXRAYS,NUMR,X,NPEAK,MODE,FFTW_PLANS,
     &      LUNEXP,LUNREF,LUNDOC)

9999    CALL FFTW3_KILLPLANS(FFTW_PLANS,NPLANS,IRTFLG)

        CLOSE(LUNREF)
        CLOSE(LUNEXP)  
        CLOSE(LUNDOC)
  
        IF (ALLOCATED(NUMR)) DEALLOCATE (NUMR)
        IF (ALLOCATED(X))    DEALLOCATE (X)

        END
@


1.33
log
@angle bug rewrite
@
text
@d15 1
a15 1
C=* Email: spider@@wadsworth.org                                        *
@


1.32
log
@prompts changed
@
text
@d4 4
a7 3
C                  OPFILEC                        FEB 03  ARDEAN LEITH
C                  REWRITTEN                      JUN 08  ARDEAN LEITH
C                  APRINGS_INIT_PLANS PARAMS      JUN 11  ARDEAN LEITH
d13 1
a13 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d43 1
d47 15
a61 14
        CHARACTER (LEN=MAXNAM)               :: FILNAM,REFNAM,OUTANG
        INTEGER, ALLOCATABLE, DIMENSION(:,:) :: NUMR
        REAL, ALLOCATABLE, DIMENSION(:,:)    :: X
        CHARACTER (LEN=1)                    :: ASK,NULL,MODE
        LOGICAL                              :: NEWFILE 
	CHARACTER(LEN=80)                    :: COMMEN
        LOGICAL                              :: ASKPEAKS

        INTEGER, PARAMETER                   :: NPLANS = 14
#ifndef SP_32
        INTEGER *8                           :: FFTW_PLANS(NPLANS)
#else
        INTEGER *4                           :: FFTW_PLANS(NPLANS)
#endif
d63 1
a63 5
	DATA  LUNREF,LUNEXP,LUNDOC/50,51,52/

        NULL = CHAR(0)

C       ASK FOR DATA FILES
d65 2
a66 2
        CALL OPFILEC(0,.TRUE.,FILNAM,LUNEXP,'O',ITYPE,NSAM,NROW,
     &               NSLICE,MAXIM,'EXPERIMENTAL IMAGE~',.FALSE.,IRTFLG)
d70 2
a71 2
        CALL OPFILEC(0,.TRUE.,REFNAM,LUNREF,'O',ITYPE,NSAM1,NROW1,
     &               NSLICE1,MAXIM,'REFERENCE IMAGE',.FALSE.,IRTFLG)
d74 3
a76 5
        IF (NSAM .NE. NSAM1 .OR. 
     &      NROW .NE. NROW1 .OR. 
     &      NSLICE .NE. NSLICE1) THEN
            CALL ERRT(102,'FILES MUST HAVE SAME DIMENSIONS:',NSAM)
        ENDIF
d88 1
a88 1
        NRAD = MIN(NSAM/2-1, NROW/2-1) -1
d100 2
a101 1
        CALL RDPRMC(ASK,NA,.TRUE.,'(F)ULL OR (H)ALF CIRCLE',NULL,IRT)
d103 1
a103 1
        IF (ASK .EQ. 'H')  MODE = 'H'
d112 1
a112 1
        IF (NPEAK .GT. 1) THEN
d123 6
a128 33
C       FIND NUMBER OF REFERENCE-RINGS
        NRING = 0
        DO I=MR,NR,ISKIP
            NRING = NRING + 1
        ENDDO

        ALLOCATE(NUMR(3,NRING),STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
            CALL ERRT(46,'NUMR',3*NRING)
            GOTO 9999
        ENDIF

C       INITIALIZE NUMR ARRAY WITH RING RADII
        NRING = 0
        DO I=MR,NR,ISKIP
            NRING = NRING+1
            NUMR(1,NRING) = I
	ENDDO

C       CALCULATE: NUMR & LCIRC 
        CALL ALPRBS_Q(NUMR,NRING,LCIRC,MODE)
        MAXRIN = NUMR(3,NRING)

C       CALCULATE ACTUAL DIMENSION OF AN IMAGE TO BE INTERPOLATED
C       2*(NO. OF RINGS)+(0'TH ELEMENT)+2*(MARGIN OF 1)

c       NRA  = MIN(((NSAM-1)/2)*2+1, ((NROW-1)/2)*2+1, 2*NR+3) al
        NRA  = MIN(((NSAM-1)/2)*2+1, ((NROW-1)/2)*2+1, 2*NR+6)
        LSAM = NSAM
        LROW = NROW
        NSAM = NRA
        NROW = NRA
        ! write(6,*)' Size:',lsam,lrow,'--> ',nsam,nrow
d130 1
a130 1
        ALLOCATE (X(NSAM,NROW), STAT=IRTFLG)
d132 1
a132 1
           CALL ERRT(46,'ORMD, X',NSAM*NROW)
d138 1
a138 1
     &                          FFTW_PLANS,NPLANS,NSAM,NROW,IRTFLG)
d140 2
a141 2
        CALL ORMD_P(NSAM,NROW, LSAM,LROW,
     &      NRING,LCIRC,MAXRIN,NUMR,X,NPEAK,MODE,FFTW_PLANS,
d145 1
@


1.31
log
@APRINGS_INIT_PLANS PARAMS
y
@
text
@d67 1
a67 1
     &               NSLICE,MAXIM,'INPUT',.FALSE.,IRTFLG)
d72 1
a72 1
     &               NSLICE1,MAXIM,'REFERENCE',.FALSE.,IRTFLG)
@


1.30
log
@GPL_2010
@
text
@d4 3
a6 2
C                  OPFILEC                    FEB  03  ARDEAN LEITH
C                  REWRITTEN                  JUNE 08  ARDEAN LEITH
d12 1
a12 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d167 1
a167 1
     &                          FFTW_PLANS,NPLANS,IRTFLG)
@


1.29
log
@*** empty log message ***
@
text
@a7 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d9 5
a13 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d15 1
a15 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.28
log
@or2 & or2m--> orr
@
text
@d176 1
a176 1
9999    CONTINUE
@


1.27
log
@rewrite for FFTW aprings
@
text
@d4 2
a5 1
C                  OPFILEC                         FEB 03 ARDEAN LEITH
d35 5
d43 1
a43 1
        SUBROUTINE ORMD()
d54 1
d111 1
a111 1
        IF (FCHAR(5:5) .EQ. 'M') THEN
d115 4
a118 2

C          OPEN OUTPUT DOC FILE (FOR APPENDING)
@


1.26
log
@GPL License fixed
@
text
@d32 1
a32 2
C
C IMAGE_PROCESSING_ROUTINE
d37 1
a37 1
        SUBROUTINE ORMD
d40 1
a40 2
        COMMON  /F_SPEC/  FINPAT,NLET,FINPIC
        CHARACTER*80  FINPIC,FINPAT
d42 1
a42 1
        INTEGER   MAXRIN
d44 11
a54 3
        REAL, ALLOCATABLE, DIMENSION(:,:) :: X
        COMMON /MXR/ MAXRIN
        CHARACTER*1  MODE,ASK,NULL
d56 1
a56 1
        DATA  INPIC/77/,INREF/76/
d58 1
a58 1
        NULL=CHAR(0)
d62 2
a63 2
        CALL OPFILEC(0,.TRUE.,FINPIC,INPIC,'O',ITYPE,NSAM,NROW,
     &  NSLICE,MAXIM,'INPUT',.FALSE.,IRTFLG)
d67 56
a122 36
        CALL OPFILEC(0,.TRUE.,FINPIC,INREF,'O',ITYPE,NSAM,NROW,
     &  NSLICE,MAXIM,'REFERENCE',.FALSE.,IRTFLG)
       
        IF (IRTFLG .NE. 0) THEN
           CLOSE (INPIC)
           RETURN
        ENDIF

        CALL  RDPRMI(MR,NR,NOT_USED,'FIRST AND LAST RING RADIUS')

        IF(MR.LE.0.OR.NR.GE.MIN0((NSAM/2),(NROW/2)))THEN
           CALL ERRT(31,'OR 2',NE)
           RETURN
        ENDIF

        CALL  RDPRMI(ISKIP,NDUMP,NOT_USED,'SKIP')
        ISKIP=MAX0(1,ISKIP)

        NA=1
        CALL  RDPRMC(ASK,NA,.TRUE.,'(F)ULL OR (H)ALF CIRCLE',NULL,IRT)
        IF(ASK.EQ.'H')  THEN
           MODE='H'
        ELSE
           MODE='F'
        ENDIF
        IF(FCHAR(5:5).EQ.'M') THEN
           CALL  RDPRMI(NPEAK,NDUMP,NOT_USED,'Number of peaks')
           NPEAK=MAX0(1,NPEAK)
        ELSE
           NPEAK=1
        ENDIF

C       FIND TOTAL NUMBER OF RINGS
        NRING=0
        DO    I=MR,NR,ISKIP
           NRING=NRING+1
d125 4
a128 6
        ALLOCATE (NUMR(3,NRING), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'ORMD, NUMR',IER)
           CLOSE(INPIC)
           CLOSE(INREF)
           RETURN
d131 21
a151 19
        NRING=0
        DO    I=MR,NR,ISKIP
           NRING=NRING+1
           NUMR(1,NRING)=I
        ENDDO



C Calculation of actual dimension of an image to be interpolated
C 2*(No. of rings)+(0'th element)+2*(margin of 1)

        NRA=MIN0(((NSAM-1)/2)*2+1,((NROW-1)/2)*2+1,2*NR+3)
        LSAM=NSAM
        LROW=NROW
        NSAM=NRA
        NROW=NRA
        CALL  ALPRBS(NUMR,NRING,LCIRC,MODE)
	
        MAXRIN=NUMR(3,NRING)
d154 20
a173 8
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'ORMD, X',IER)
           DEALLOCATE (NUMR)
           CLOSE(INPIC)
           CLOSE(INREF)
           RETURN
        ENDIF

a174 7
        CALL  ORMD_P(NSAM,NROW,LSAM,LROW,
     &      NRING,LCIRC,MAXRIN,NUMR,X,NPEAK,MODE,INPIC,INREF)

        CLOSE(INPIC)
        CLOSE(INREF)  
        DEALLOCATE (NUMR)
        DEALLOCATE (X)
@


1.25
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a6 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
a30 1
C **************************************************************************
a36 1
C--************************************************************************
@


1.24
log
@opfilec
@
text
@d1 1
d7 1
d9 1
d11 24
d41 1
d48 1
@


1.23
log
@nloop,iloop_removed
@
text
@d4 1
a18 1
C        1         2         3         4         5         6         7
d27 1
a33 1

d38 3
a40 5
C  ASK FOR DATA FILES


       MAXIM = 0
        CALL OPFILE(.TRUE.,FINPIC,INPIC,'O',ITYPE,NSAM,NROW,
d42 1
a42 5
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(4,'ORMD ',NE)
           RETURN
        ENDIF

d44 2
a45 2
      MAXIM = 0
        CALL OPFILE(.TRUE.,FINPIC,INREF,'O',ITYPE,NSAM,NROW,
a48 1
           CALL ERRT(4,'ORMD ',NE)
@


1.22
log
@limit check for last ring radius
@
text
@d60 1
a60 1
        CALL  RDPRMI(MR,NR,NLOOP,ILOOP,'FIRST AND LAST RING RADIUS')
d67 1
a67 1
        CALL  RDPRMI(ISKIP,NDUMP,NLOOP,ILOOP,'SKIP')
d78 1
a78 1
           CALL  RDPRMI(NPEAK,NDUMP,NLOOP,ILOOP,'Number of peaks')
@


1.21
log
@no message for small 1st ring
@
text
@d60 1
a60 1
        CALL  RDPRMI(MR,NR,NLOOP,ILOOP,'FIRST AND LAST RING')
d62 1
a62 1
        IF(MR.LE.0.OR.NR.GE.MIN0(((NSAM-1)/2)*2+1,((NROW-1)/2)*2+1))THEN
@


1.20
log
@*** empty log message ***
@
text
@a65 4
        IF(MR.LT.5)  WRITE(NOUT,7021)  MR
7021    FORMAT(' Small value of the first ring given (',I1,') may'
     &  ' result in numerical errors',/,
     & ' Please verify the results or increase FIRST RING value to 5')
@


1.19
log
@cosmetic
@
text
@a24 1
        COMMON  BUF(1024)
@


1.18
log
@adapted for dynamical memory allocation
@
text
@d24 1
a24 1
        INCLUDE '/net/ithaca/usr1/spider/src/CMBLOCK.INC'
@


1.17
log
@# continue char fails on NT f90
@
text
@d12 1
a12 1
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
d16 1
d18 1
d22 1
a22 1
	SUBROUTINE ORMD(MAXMEM)
d24 9
a32 10
	INCLUDE 'CMBLOCK.INC'
	PARAMETER  (MRING=480)
	COMMON  DUMMY(80),BUF(1024),Q(1)
	COMMON  /F_SPEC/  FINPAT,NLET,FINPIC
	CHARACTER*80  FINPIC,FINPAT
	INTEGER   MAXRIN
	INTEGER   NUMR(3,MRING)
	COMMON /MXR/ MAXRIN
	CHARACTER*1  MODE,ASK,NULL
C         EQUIVALENCE  (Q,NUMR)
a33 1
	DATA  INPIC/77/,INREF/76/
d35 1
a35 1
	NULL=CHAR(0)
d37 2
d41 29
a69 26
	CALL  FILERD(FINPIC,NLET,NULL,'Input',IRTFLG)
C
	CALL  OPENFB(BUF,FINPIC,INPIC,NSAM,NROW,'O',NF,NSL)
	IF(NF.NE.2)  THEN
	WRITE(NOUT,*)  ' File not found'
	RETURN
	ENDIF
C
	CALL  FILERD(FINPIC,NLET,NULL,'Reference',IRTFLG)
C
	CALL  OPENFB(BUF,FINPIC,INREF,NSAM,NROW,'O',NF,NSL)
	IF(NF.NE.2)  THEN
	WRITE(NOUT,*)  ' File not found'
	CLOSE(INPIC)
	RETURN
	ENDIF
C
	CALL  RDPRMI(MR,NR,NLOOP,ILOOP,'FIRST AND LAST RING')
C
	IF(MR.LE.0.OR.NR.GE.MIN0(((NSAM-1)/2)*2+1,((NROW-1)/2)*2+1))THEN
	CALL ERRT(31,'OR 2',NE)
	RETURN
	ENDIF
	IF(MR.LT.5)  WRITE(NOUT,7021)  MR
7021	FORMAT(' Small value of the first ring given (',I1,') may'
     &	' result in numerical errors',/,
d71 39
a109 29
C
	CALL  RDPRMI(ISKIP,NDUMP,NLOOP,ILOOP,'SKIP')
	ISKIP=MAX0(1,ISKIP)
C
	NA=1
	CALL  RDPRMC(ASK,NA,.TRUE.,'(F)ULL OR (H)ALF CIRCLE',NULL,IRT)
	IF(ASK.EQ.'H')  THEN
	MODE='H'
	ELSE
	MODE='F'
	ENDIF
	IF(FCHAR(5:5).EQ.'M') THEN
	CALL  RDPRMI(NPEAK,NDUMP,NLOOP,ILOOP,'Number of peaks')
	NPEAK=MAX0(1,NPEAK)
	ELSE
	NPEAK=1
	ENDIF
C
	NRING=0
	DO    I=MR,NR,ISKIP
	NRING=NRING+1
	IF(NRING.GT.MRING)  THEN
	CALL ERRT(31,'OR 2',IE)
	CLOSE(INPIC)
	CLOSE(INREF)
	RETURN
	ENDIF
	NUMR(1,NRING)=I
	ENDDO
d114 27
a140 42
         NRA=MIN0(((NSAM-1)/2)*2+1,((NROW-1)/2)*2+1,2*NR+3)
         LSAM=NSAM
         LROW=NROW
         NSAM=NRA
         NROW=NRA
         CALL  ALPRBS(NUMR,NRING,LCIRC,MODE)

C   memory division
C     NUMR        1
C     CIRC        2
C A: X                 3
C    BUFIN             4
C          B:
C             CIROLD   4
C             TEMP     6
C
         MAXRIN=NUMR(3,NRING)
         K1=1
c         K2=K1+3*NRING
         K2=K1
         K7=IPALIGN64(K2+LCIRC)
         K41A=IPALIGN64(K7+NSAM*NROW)
         K4B=IPALIGN64(K41A+LSAM)
         K6B=IPALIGN64(K4B+LCIRC)
         K7B=IPALIGN64(K6B+MAXRIN*4)
         K8B=K7B+4*NPEAK
         MEMTOT=1200+K8B
C
	IF (MEMTOT .LE. MAXMEM)  THEN
         CALL  ORMD_P(NSAM,NROW,LSAM,LROW,
     &              NRING,LCIRC,MAXRIN,NUMR,
     &              Q(K2),Q(K7),Q(K41A),Q(K4B),
     &              Q(K6B),Q(K7B),NPEAK,MODE,INPIC,INREF)
	ELSE
         WRITE (NOUT,2500)  MAXMEM , MEMTOT
2500     FORMAT (/,'  MEMORY RESERVATION: YOU HAVE',
     &   ' RESERVED ',I8,',  YOU NEED  ',I8 / )
	CALL ERRT(6,'OR 2',IE)
	CLOSE(INPIC)
	CLOSE(INREF)
	ENDIF
	END
@


1.16
log
@*** empty log message ***
@
text
@d3 1
a3 1
C $$ ORMD.FOR
d19 1
a19 3
C
C $$ ORMD.FOR
C
d21 1
d32 1
d34 1
d36 1
a36 1
C
d38 1
a38 1
C
d95 1
a95 1
C
d97 2
a98 2
C 2*(# of rings)+(0'th element)+2*(margin of 1)
C
d105 1
a105 1
C
d129 3
a131 3
     &   NRING,LCIRC,MAXRIN,NUMR,
     &   Q(K2),Q(K7),Q(K41A),Q(K4B),
     &   Q(K6B),Q(K7B),NPEAK,MODE,INPIC,INREF)
d135 1
a135 1
     #   ' RESERVED ',I8,',  YOU NEED  ',I8 / )
@


1.15
log
@*** empty log message ***
@
text
@d56 10
@


1.14
log
@ff
@
text
@d106 1
a106 1
c         K2=K1+(3*NRING+3)/2
@


1.13
log
@OR 2
@
text
@d28 2
a29 2
	INTEGER*2  MAXRIN
	INTEGER*2  NUMR(3,MRING)
a33 1
CNO_SAVE
@


1.12
log
@R
@
text
@d24 1
d29 1
a29 1
	INTEGER*2  NUMR(3,480)
a30 1
	DOUBLE PRECISION  TOTMIN
d35 1
a35 1
         NULL=CHAR(0)
d39 1
a39 1
         CALL  FILERD(FINPIC,NLET,NULL,'Input',IRTFLG)
d41 44
a84 38
         CALL  OPENFB(BUF,FINPIC,INPIC,NSAM,NROW,'O',NF,NSL)
         IF(NF.NE.2)  THEN
         WRITE(NOUT,*)  ' File not found'
         RETURN
         ENDIF
C
         CALL  FILERD(FINPIC,NLET,NULL,'Reference',IRTFLG)
C
         CALL  OPENFB(BUF,FINPIC,INREF,NSAM,NROW,'O',NF,NSL)
         IF(NF.NE.2)  THEN
         WRITE(NOUT,*)  ' File not found'
         CLOSE(INPIC)
         RETURN
         ENDIF
C
         CALL  RDPRMI(MR,NR,NLOOP,ILOOP,'FIRST AND LAST RING')
         CALL  RDPRMI(ISKIP,NDUMP,NLOOP,ILOOP,'SKIP')
         ISKIP=MAX0(1,ISKIP)
7981     CONTINUE
C     NA=1
C     CALL  RDPRMC(ASK,NA,.TRUE.,'(F)ULL OR (H)ALF CIRCLE',NULL,IRT)
C     IF(ASK.EQ.'F')  THEN
         MODE='F'
C     ELSEIF(ASK.EQ.'H')  THEN
C     MODE='H'
C     ELSE
C     RETURN
C     ENDIF
C     CALL  RDPRMI(JACUP,NDUMP,NLOOP,ILOOP,
C     & 'Precision of peak location (0..100)$')
C     JACUP=MAX0(0,MIN0(100,JACUP))
         JACUP=0
C
         NRING=0
         DO    I=MR,NR,ISKIP
         NRING=NRING+1
         NUMR(1,NRING)=I
	 ENDDO
d114 1
a114 1
         K8B=K7B
d117 1
a117 2
         WRITE (NOUT,2500)  MAXMEM , MEMTOT
         IF (MEMTOT .LE. MAXMEM)  THEN
d119 1
a119 1
     &   NRING,LCIRC,MAXRIN,JACUP,NUMR,
d121 3
a123 10
     &   Q(K6B),MODE,INPIC,INREF,TOTMIN,RANG)
         IF(NSEL(1).NE.0) PARAM(NSEL(1))=RANG
         IF(NSEL(2).NE.0) PARAM(NSEL(2))=TOTMIN
         WRITE(NOUT,2700)  RANG,TOTMIN
2700     FORMAT('    Angle = ',F10.4,'    Peak = ',G12.5)
C     WRITE (NOUT,2600)
         ELSE
         WRITE(NOUT,*)  '  Sorry, not enough memory !'
         ENDIF
         RETURN
d126 5
a130 3
C 2600 FORMAT (/ ' ',80('-')//' ',
C     #      'End of computation',//' ',80('-')/)
         END
@


1.11
log
@*** empty log message ***
@
text
@d41 1
a41 1
         CALL  OPENFB(BUF,FINPIC,INPIC,NSAM,NROW,'R',NF,NSL)
d49 1
a49 1
         CALL  OPENFB(BUF,FINPIC,INREF,NSAM,NROW,'R',NF,NSL)
@


1.10
log
@*** empty log message ***
@
text
@d75 1
a75 1
         DO  1  I=MR,NR,ISKIP
d77 2
a78 1
1        NUMR(1,NRING)=I
@


1.9
log
@ipalign64
@
text
@d28 1
a28 1
	INTEGER*2  NUMR(3,1000)
@


1.8
log
@fixed
@
text
@d102 5
a106 17
	K2=K2/2
	K2=2*K2+1
         K7=K2+LCIRC
	K7=K7/2
        K7=K7*2+1	
         K41A=K7+NSAM*NROW
	K41A=K41A/2
        K41A=K41A*2+1
         K4B=K41A+LSAM
	K4B=K4B/2
        K4B=K4B*2+1
         K6B=K4B+LCIRC
	K6B=K6B/4
        K6B=K6B*4+5
         K7B=K6B+MAXRIN*4
	K7B=K7B/4
        K7B=K7B*4+5
a107 2
	K8B=K8B/2
        K8B=K8B*2+1
@


1.7
log
@corrected
@
text
@d22 10
a31 9
         SUBROUTINE ORMD(MAXMEM)
         INCLUDE 'CMBLOCK.INC'
         COMMON  DUMMY(80),BUF(1024),Q(1)
         COMMON  /F_SPEC/  FINPAT,NLET,FINPIC
         CHARACTER*80  FINPIC,FINPAT
         INTEGER*2  MAXRIN
         INTEGER*2  NUMR(3,1000)
         DOUBLE PRECISION  TOTMIN
         CHARACTER*1  MODE,ASK,NULL
d33 1
a33 1
         DATA  INPIC/77/,INREF/76/
d103 1
a103 1
	K2=2*K1+1
a123 2
C
C
d126 1
a126 1
         CALL  ORMD_P(NSAM,NROW,LSAM,LROW
@


1.6
log
@fixed
@
text
@d29 1
d113 2
a114 2
	K6B=K6B/2
        K6B=K6B*2+1
d116 2
a117 2
	K7B=K7B/2
        K7B=K7B*2+1
d127 1
a127 1
         CALL  ORMD_P(NSAM,NROW,LSAM,LROW,NIMA,
@


1.5
log
@there is a problem with placing NUMR in common, did not have time
to figure it.
@
text
@d120 1
a120 1
         MEMTOT=1200+MAX0(K5A,K8B)
@


1.4
log
@nosave
@
text
@a22 1
#ifdef SP_UNIX
a23 3
#else
         INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d30 1
a30 1
         EQUIVALENCE  (Q,NUMR)
a91 1
C    WORK              5
d98 4
a101 1
         K2=K1+(3*NRING+1)/2
d103 11
a113 9
         K3A=K7
         K41A=K3A+NSAM*NROW
         K4A=K41A+LSAM
         K5A=K4A
         K3B=K5A
         K4B=K3B
         K5B=K4B+LCIRC
         K0B=K5B
         K6B=K0B
d115 2
d118 2
d128 1
a128 1
     &   Q(K2),Q(K3A),Q(K4A),Q(K41A),Q(K4B),
@


1.3
log
@imsl removed
@
text
@d36 1
@


1.2
log
@cpp_lines_added
@
text
@d57 2
a58 2
         CALL  RDPRMI(MR,NR,NLOOP,ILOOP,'FIRST AND LAST RING$')
         CALL  RDPRMI(ISKIP,NDUMP,NLOOP,ILOOP,'SKIP$')
d62 1
a62 1
C     CALL  RDPRMC(ASK,NA,.TRUE.,'(F)ULL OR (H)ALF CIRCLE$',NULL,IRT)
a73 5
         CALL  RDPRMI(KXORD,KYORD,NLOOP,ILOOP,'X,Y order of splines$')
         IF(KXORD.EQ.0)  WRITE(NOUT,*)
     &   '  Warning, quadratic interpolation will be used !'
C     KXORD=MAX0(2,KXORD)
C     KYORD=MAX0(2,KYORD)
a99 18
         NXKNOT=NSAM+KXORD
         NYKNOT=NROW+KYORD
C
C  MEMORY for IMSL
C
         J2=1+NSAM*NROW
         J3=J2+NSAM
         J4=J3+NXKNOT
         J5=J4+NROW
         J6=J5+NYKNOT
         N1=MAX0(2*NSAM,2*NROW)
         N2=NSAM*NROW+MAX0((2*KXORD-1)*NSAM,(2*KYORD-1)*NROW)+
     &   MAX0((3*KXORD-2)*NSAM,(3*KYORD-2)*NROW)+
     &   2*MAX0(NSAM,NROW)
         N3=3*MAX(KXORD,KYORD)+KYORD
         MEMIMSL=MAX0(N1,N2+MAX0(NSAM,NROW),N3)+J6
         IF(KXORD.EQ.0)  MEMIMSL=0
C
d107 1
a107 1
         K5A=K4A+MEMIMSL
d124 1
a124 1
     &   Q(K6B),MODE,KXORD,KYORD,INPIC,INREF,TOTMIN,RANG)
@


1.1
log
@Initial revision
@
text
@d23 3
d27 1
@
