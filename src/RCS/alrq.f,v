head	1.16;
access;
symbols
	pre_mrcs:1.16
	healthdept_2018:1.16
	pre_getangas:1.15
	GPL2010:1.15
	pre_GPL2010:1.14
	pre_var_equation:1.14
	pre_fftwrings:1.14
	pre_opfiles:1.14
	src:1.14
	best-code:1.14
	x-named-regs:1.14
	x:1.14
	v13-00:1.14
	pre_GPL:1.13
	prec_CA:1.12
	noindx:1.12
	Bproc:1.12
	oct21:1.10
	last77:1.8;
locks; strict;
comment	@c @;


1.16
date	2018.10.03.14.33.54;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.24.13.25.02;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.17.20.59.12;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2005.02.09.18.42.38;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.01.18.20.47.52;	author bimal;	state Exp;
branches;
next	1.11;

1.11
date	99.12.07.15.14.55;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	99.07.30.18.49.42;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	99.06.03.20.50.43;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	99.02.26.22.02.16;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	98.11.03.20.12.09;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.10.01.20.16.43;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	97.08.08.14.55.09;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.10.11.17.25.26;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.02.02.21.02.45;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.02.01.18.16.58;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.47.14;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.16
log
@email_health_dept
@
text
@
C ++********************************************************************
C
C   ALRQ.F                                                             *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C ALRQ(XIM,NSAM,NROW,NUMR,CIRC,LCIRC,NRING,MODE,IDUM)                                                                     *
C                                                                      *
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS: CONVERT TO POLAR COORDINATES
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE ALRQ(XIM,NSAM,NROW,NUMR,CIRC,LCIRC,NRING,MODE,IDUM)

        DIMENSION         XIM(NSAM,NROW),CIRC(LCIRC)
        INTEGER           NUMR(3,NRING)
        CHARACTER*1       MODE
        DOUBLE PRECISION  PI,DFI

        NS2 = NSAM/2+1
        NR2 = NROW/2+1
        PI  = 2*DATAN(1.0D0)

c$omp   parallel do private(i,j,inr,yq,l,lt,nsim,dfi,kcirc,
c$omp&  xold,yold,fi,x,y)
        DO I=1,NRING

C          RADIUS OF THE RING
           INR = NUMR(1,I)
           YQ  = INR
           L   = NUMR(3,I)
           IF (MODE .EQ. 'H')  THEN
              LT = L/2
           ELSEIF (MODE .EQ. 'F')  THEN
              LT = L/4
           ENDIF

           NSIM           = LT-1
           DFI            = PI/(NSIM+1)
           KCIRC          = NUMR(2,I)
           XOLD           = 0.0
           YOLD           = INR
           CIRC(KCIRC)    = QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
           XOLD           = INR
           YOLD           = 0.0
           CIRC(LT+KCIRC) = QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)

           IF (MODE .EQ. 'F')  THEN
              XOLD              = 0.0
              YOLD              = -INR
              CIRC(LT+LT+KCIRC) =
     &                QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
              XOLD                 = -INR
              YOLD                 = 0.0
              CIRC(LT+LT+LT+KCIRC) =
     &                QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
           ENDIF

           DO  J=1,NSIM
              FI               = DFI*J
              X                = SIN(FI)*YQ
              Y                = COS(FI)*YQ

              XOLD             = X
              YOLD             = Y
              CIRC(J+KCIRC)    = QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
              XOLD             =  Y
              YOLD             = -X
              CIRC(J+LT+KCIRC) =
     &              QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)

              IF (MODE .EQ. 'F')  THEN
                 XOLD                = -X
                 YOLD                = -Y
                 CIRC(J+LT+LT+KCIRC) =
     &               QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
                 XOLD                   = -Y
                 YOLD                   =  X
                 CIRC(J+LT+LT+LT+KCIRC) =
     &                  QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
              ENDIF
           ENDDO
        ENDDO
c$omp   end parallel do 

        END

@


1.15
log
@GPL_2010
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.14
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.13
log
@cosmetic & end parallel do for altrix
@
text
@d7 23
a29 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.12
log
@cosmetic
@
text
@d3 1
a5 1
C                                                                      *
d15 1
a15 1
C                                                                      *
d19 1
a19 1
C  PARAMETERS: 
a20 3
C IMAGE_PROCESSING_ROUTINE
C                                                                      *
C        0         2         3         4         5         6         7 *
d24 5
a28 5
        SUBROUTINE  ALRQ
     &  (XIM,NSAM,NROW,NUMR,CIRC,LCIRC,NRING,MODE,IPIC)
        DIMENSION  XIM(NSAM,NROW),CIRC(LCIRC)
        INTEGER  NUMR(3,NRING)
        CHARACTER*1  MODE
a29 6
C
C  INTERPOLATION INTO POLAR COORDINATES
CC no need to set to zero, all elements are defined
Cc$omp parallel do private(i)
C       DO  10  I=1,LCIRC
C 10    CIRC(I)=0.0
d31 3
d35 2
a36 5
        NS2=NSAM/2+1
        NR2=NROW/2+1
        PI=2*DATAN(1.0D0)
c$omp parallel do private(i,j,inr,yq,l,lt,nsim,dfi,kcirc,
c$omp& xold,yold,fi,x,y)
d39 8
a46 7
C  RADIUS OF THE RING
           INR=NUMR(1,I)
           YQ=INR

           L=NUMR(3,I)
           IF(MODE.EQ.'H')  THEN
              LT=L/2
d48 20
a67 19
           IF(MODE.EQ.'F')  THEN
              LT=L/4
           ENDIF
           NSIM=LT-1
           DFI=PI/(NSIM+1)
           KCIRC=NUMR(2,I)
           XOLD=0.0
           YOLD=INR
        CIRC(KCIRC)=QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
           XOLD=INR
           YOLD=0.0
        CIRC(LT+KCIRC)=QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
           IF(MODE.EQ.'F')  THEN
              XOLD=0.0
              YOLD=-INR
        CIRC(LT+LT+KCIRC)=QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
              XOLD=-INR
              YOLD=0.0
        CIRC(LT+LT+LT+KCIRC)=QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
d69 1
d71 21
a91 17
              FI=DFI*J
              X=SIN(FI)*YQ
              Y=COS(FI)*YQ

              XOLD=X
              YOLD=Y
        CIRC(J+KCIRC)=QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
              XOLD=Y
              YOLD=-X
        CIRC(J+LT+KCIRC)=QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
              IF(MODE.EQ.'F')  THEN
                 XOLD=-X
                 YOLD=-Y
        CIRC(J+LT+LT+KCIRC)=QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
                 XOLD=-Y
                 YOLD=X
        CIRC(J+LT+LT+LT+KCIRC)=QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
d95 1
@


1.11
log
@header
@
text
@d3 1
a5 1
C                                                                      *
d19 3
a21 1
C  PARAMETERS:                                                         *
d27 6
a32 6
 	SUBROUTINE  ALRQ
     &	(XIM,NSAM,NROW,NUMR,CIRC,LCIRC,NRING,MODE,IPIC)
	DIMENSION  XIM(NSAM,NROW),CIRC(LCIRC)
	INTEGER  NUMR(3,NRING)
	CHARACTER*1  MODE
	DOUBLE PRECISION  PI,DFI
d37 7
a43 6
C	DO  10  I=1,LCIRC
C 10	CIRC(I)=0.0
C
	NS2=NSAM/2+1
	NR2=NROW/2+1
	PI=2*DATAN(1.0D0)
d46 2
a47 2
	DO I=1,NRING
C
d49 51
a99 50
	INR=NUMR(1,I)
	YQ=INR
C
	L=NUMR(3,I)
	IF(MODE.EQ.'H')  THEN
	LT=L/2
	ENDIF
	IF(MODE.EQ.'F')  THEN
	LT=L/4
	ENDIF
	NSIM=LT-1
	DFI=PI/(NSIM+1)
	KCIRC=NUMR(2,I)
	XOLD=0.0
	YOLD=INR
	CIRC(KCIRC)=QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
	XOLD=INR
	YOLD=0.0
	CIRC(LT+KCIRC)=QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
	IF(MODE.EQ.'F')  THEN
	XOLD=0.0
	YOLD=-INR
	CIRC(LT+LT+KCIRC)=QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
	XOLD=-INR
	YOLD=0.0
	CIRC(LT+LT+LT+KCIRC)=QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
	ENDIF
	DO  J=1,NSIM
	FI=DFI*J
	X=SIN(FI)*YQ
	Y=COS(FI)*YQ
C
	XOLD=X
	YOLD=Y
	CIRC(J+KCIRC)=QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
	XOLD=Y
	YOLD=-X
	CIRC(J+LT+KCIRC)=QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
	IF(MODE.EQ.'F')  THEN
	XOLD=-X
	YOLD=-Y
	CIRC(J+LT+LT+KCIRC)=QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
	XOLD=-Y
	YOLD=X
	CIRC(J+LT+LT+LT+KCIRC)=QUADRI(XOLD+NS2,YOLD+NR2,NSAM,NROW,XIM)
	ENDIF
	ENDDO
	ENDDO
C
	END
@


1.10
log
@*** empty log message ***
@
text
@d1 24
@


1.9
log
@OpenMP
@
text
@a6 1
CNO_SAVE
@


1.8
log
@ff
@
text
@d11 1
a11 1
Cc$doacross local(i)
d18 2
a19 1
c$doacross local(i,j,inr,yq,l,lt,nsim,dfi,kcirc,xold,yold,fi,x,y)
@


1.7
log
@*** empty log message ***
@
text
@d4 1
a4 1
	INTEGER*2  NUMR(3,NRING)
@


1.6
log
@*** empty log message ***
@
text
@a69 1
c 20	CONTINUE
@


1.5
log
@*** empty log message ***
@
text
@d19 1
a19 1
	DO  20  I=1,NRING
d49 1
a49 1
	DO  20  J=1,NSIM
d68 3
a70 1
 20	CONTINUE
@


1.4
log
@*** empty log message ***
@
text
@d10 4
a13 4
C
c$doacross local(i)
	DO  10  I=1,LCIRC
 10	CIRC(I)=0.0
@


1.3
log
@nosave mp
@
text
@d11 1
@


1.2
log
@nosave
@
text
@d17 1
a17 1
	IP=0
a48 1
	IP=IP+1
@


1.1
log
@Initial revision
@
text
@d7 1
@
