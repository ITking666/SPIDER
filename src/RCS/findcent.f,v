head	1.32;
access;
symbols
	healthdept_2018:1.32
	pre_getangas:1.20
	GPL2010:1.19
	pre_GPL2010:1.18
	pre_var_equation:1.18
	pre_fftwrings:1.18
	pre_opfiles:1.18
	src:1.18
	best-code:1.18
	x-named-regs:1.18
	x:1.18
	v13-00:1.18
	pre_GPL:1.16
	prec_CA:1.14
	noindx:1.13
	Bproc:1.13
	oct21:1.7
	last77:1.7;
locks; strict;
comment	@c @;


1.32
date	2018.10.03.14.34.06;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2016.02.05.15.10.13;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2012.03.30.14.13.48;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2012.03.28.15.06.44;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2012.03.28.14.18.32;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2012.03.27.17.59.33;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2012.03.22.14.07.39;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2012.03.21.14.16.27;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2012.03.21.12.52.30;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2012.03.21.12.43.28;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2012.01.24.14.32.20;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2012.01.23.16.46.29;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2010.11.29.18.39.10;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2010.06.24.13.25.13;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.17.20.35.21;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.17.18.25.53;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2005.07.01.15.53.44;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.30.19.39.16;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.20.21.41.07;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.08.17.15.59.33;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.08.10.15.10.05;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.07.07.18.13.08;	author bimal;	state Exp;
branches;
next	1.10;

1.10
date	99.12.27.18.07.59;	author bimal;	state Exp;
branches;
next	1.9;

1.9
date	99.12.27.18.02.26;	author bimal;	state Exp;
branches;
next	1.8;

1.8
date	99.11.10.23.09.10;	author yuchen;	state Exp;
branches;
next	1.7;

1.7
date	97.10.29.16.06.12;	author hedget;	state Exp;
branches;
next	1.6;

1.6
date	97.10.17.15.18.41;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	97.10.01.21.38.02;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	97.07.11.13.06.01;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.01.12.22.08.40;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.02.58;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.47.35;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.32
log
@email_health_dept
@
text
@C **********************************************************************
C
C FINDCENT.F
C                 ADDED CENT_SYM           JAN 2012 GREGORY KISHCHENKO *
C                 RENAMED FROM CENT        MAR 2012 ARDEAN LEITH       *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2016  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  FINDCENT()
C
C  PURPOSE: DETERMINE CENTER OF OBJECT USING PHASE OR SYMMETRY INFO                         
C
C **********************************************************************

         SUBROUTINE FINDCENT()

         IMPLICIT NONE

         INCLUDE 'CMBLOCK.INC'
         INCLUDE 'CMLIMIT.INC' 
 
         CHARACTER(LEN=MAXNAM)  :: FILNAM
         REAL, ALLOCATABLE      :: AIMG(:,:),F1(:,:)

         INTEGER, PARAMETER     :: LUN1 = 21

         INTEGER                :: ICOMM,MYPID,MPIERR
         INTEGER                :: MAXIM,ITYPE,NX,NY,NZ
         INTEGER                :: IRTFLG,M,NS,NR,NC,NXLD,NE
         REAL                   :: SNS,SNR,SNC
         LOGICAL                :: SHIFTIT = .FALSE.

         CALL SET_MPI(ICOMM,MYPID,MPIERR)  ! SETS ICOMM AND MYPID

         MAXIM = 0
         CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,NX,NY,NZ,
     &                MAXIM,'INPUT',.FALSE.,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN
         
         IF (ITYPE == 1) THEN
C           IMAGE ----------------------------------------- IMAGE

            IF (FCHAR(4:4) == 'S') THEN
C              FIND QUASI-SYMMETRY CENTER ----------------- IMAGE SYM

               IF (NZ > 1) THEN 
                  CALL ERRT(101,'OPERATION DOES NOT WORK ON VOLUMES',NE)
                  GOTO 505
               ENDIF

               NXLD = NX + 2 - MOD(NX,2)

               ALLOCATE (AIMG(NXLD,NY), 
     &                   F1  (NXLD,NY), STAT=IRTFLG)
               IF (IRTFLG .NE. 0) THEN 
                  CALL ERRT(46,'CENT, AIMG,F1',2*NXLD*NY)
                  GOTO 505
               ENDIF

               CALL READV(LUN1,AIMG,NXLD,NY, NX,NY,1) 
          
               CALL CENT_SYM(AIMG,F1,SHIFTIT,
     &                       NXLD, NX,NY,SNS,SNR,IRTFLG)
               IF (IRTFLG .NE. 0) GOTO 505

            ELSE
C              FIND PHASE CENTER --------------------------- IMAGE PH

               ALLOCATE (AIMG(NX,NY), STAT=IRTFLG)
               IF (IRTFLG .NE. 0) THEN 
                  CALL ERRT(46,'CENT, AIMG',NX*NY)
                  GOTO 505
               ENDIF

               CALL READV(LUN1,AIMG,NX,NY, NX,NY,1)
           
               CALL CENT_PH(AIMG, NX,NY,SNS,SNR)

               M   = NX/2+1
               SNS = SNS - M
               M   = NY/2 + 1
               SNR = SNR - M
            ENDIF

            NS  = INT(SNS)
            NR  = INT(SNR)

            IF (VERBOSE .AND. MYPID <= 0 ) THEN
               WRITE(NOUT,*) ' '
               WRITE(NOUT,2222) NS,NR, SNS,SNR
2222           FORMAT('  Approximate center offset:',/,
     &         '             X            Y',/,
     &         '         ', I5,'        ',I5,/,
     &         '          ',F8.2,'     ',F8.2,/)

            ELSEIF (MYPID <= 0) THEN
               WRITE(NOUT,2223) NS,NR, SNS,SNR
2223           FORMAT('  Approximate center offset: ',
     &                '(',I5,','I5,    ')  == ',
     &                '(',F8.2,','F8.2,')')
            ENDIF

            CALL REG_SET_NSEL(1,4,FLOAT(NS),FLOAT(NR),SNS,SNR,
     &                        0.0,IRTFLG)


         ELSEIF(ITYPE .NE. 3 )  THEN
C           FOURIER FILE? ------------------------------
            CALL ERRT(102,
     &      'OPERATION NOT IMPLEMENTED FOR THIS DATA FORMAT',ITYPE)
            GOTO 505

         ELSEIF(ITYPE == 3 .AND. FCHAR(4:4) == 'S' )  THEN
C           VOLUME ------------------------------------
            CALL ERRT(101,
     &          'OPERATION NOT IMPLEMENTED FOR VOLUMES',IRTFLG)
            GOTO 505

         ELSEIF(ITYPE == 3)  THEN
C           VOLUME ------------------------------------------- VOLUME

            CALL CENT_3PH(LUN1,NX,NY,NZ, SNS,SNR,SNC)

            M   = NX/2+1
            SNS = SNS-M
            M   = NY/2+1
            SNR = SNR-M
            M   = NZ/2+1
            SNC = SNC-M
            NS  = INT(SNS)
            NR  = INT(SNR)
            NC  = INT(SNC)

            IF (VERBOSE .AND. MYPID <= 0) WRITE(NOUT,*) ' '
            IF (VERBOSE .AND. MYPID <= 0 ) THEN
               WRITE(NOUT,3333) NS,NR,NC, SNS,SNR,SNC
3333        FORMAT('  Approximate center offset:',/,
     &      '         X             Y             Z',/,
     &      '     ', I5,'         ',I5,'         ',I5,/,
     &      '        ',F8.2,'      ',F8.2,'      ',F8.2,/)
            ELSEIF (MYPID <= 0) THEN
               WRITE(NOUT,3334) NS,NR,NC, SNS,SNR,SNC
3334           FORMAT('  Approximate center offset: ',
     &                '(',I5,','I5,','I5,    ')  == ', 
     &                '(',F8.2,','F8.2,','F8.2,')')
            ENDIF

            CALL REG_SET_NSEL(1,5,FLOAT(NS), FLOAT(NR), FLOAT(NC),
     &                            SNS, SNR, IRTFLG)
            CALL REG_SET_NSEL(6,1,SNC, 0.0, 0.0, 0.0, 0.0,IRTFLG)
         ENDIF

505      CLOSE(LUN1)
         IF (ALLOCATED(AIMG)) DEALLOCATE(AIMG)
         IF (ALLOCATED(F1))   DEALLOCATE(F1)

         END
@


1.31
log
@does not work on vols
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.30
log
@center offset in output msg.
@
text
@d1 1
a1 1
C++*********************************************************************
d10 1
a10 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d30 1
a30 2
C  PURPOSE: DETERMINATION OF CENTER OF OBJECT USING PHASE OR SYMMETRY
C           INFO                         
d32 1
a32 1
C--*********************************************************************
d48 1
a48 1
         INTEGER                :: IRTFLG,M,NS,NR,NC,NXLD
d64 5
@


1.29
log
@f8.2
@
text
@d106 1
a106 1
2222           FORMAT('  Approximate center:',/,
d113 1
a113 1
2223           FORMAT('  Approximate center: ',
d152 1
a152 1
3333        FORMAT('  Approximate center:',/,
d158 1
a158 1
3334           FORMAT('  Approximate center: ',
@


1.28
log
@added shiftit to cent_sym.f
./
@
text
@d109 1
a109 1
     &         '          ',F8.3,'     ',F8.3,/)
d115 1
a115 1
     &                '(',F8.3,','F8.3,')')
d155 1
a155 1
     &      '        ',F8.3,'      ',F8.3,'      ',F8.3,/)
d160 1
a160 1
     &                '(',F8.3,','F8.3,','F8.3,')')
@


1.27
log
@*** empty log message ***
@
text
@d51 1
d77 2
a78 1
               CALL CENT_SYM(AIMG,F1,NXLD, NX,NY,SNS,SNR,IRTFLG)
@


1.26
log
@, in format, cosmetic
@
text
@d3 1
a3 1
C CENT.F
d5 1
d28 1
a28 1
C  CENT()
d35 1
a35 1
         SUBROUTINE CENT()
d60 2
a61 1
C           IMAGE -----------------------------------------
d63 1
a63 1
C              QUASISYMMETRY
d80 1
a80 1
C              PHASE COG
d90 1
a90 1
               CALL CENT_D(AIMG, NX,NY,SNS,SNR)
d93 3
a95 3
               SNS = SNS-M
               M   = NY/2+1
               SNR = SNR-M
a100 1
            IF (VERBOSE .AND. MYPID <= 0) WRITE(NOUT,*) ' '
d102 1
d119 1
d124 1
d130 1
d133 1
a133 1
C           VOLUME -------------------------------------
d135 1
a135 1
            CALL CENT_3(LUN1,NX,NY,NZ, SNS,SNR,SNC)
@


1.25
log
@output formatting
@
text
@d59 1
a59 1
C           IMAGE
d68 1
a68 1
                  CALL ERRT(46,'CENT, AIMG..',2*NXLD*NY)
d71 3
a73 1
               CALL READV(LUN1,AIMG,NXLD,NY, NX,NY,1)           
d78 1
d86 2
a87 1
               CALL READV(LUN1,AIMG,NX,NY, NX,NY,1)           
d106 1
d110 1
a110 1
     &                '(',I5,','I5,    ')  == '
d114 2
a115 2
            CALL REG_SET_NSEL(1,4,FLOAT(NS),FLOAT(NR),SNS,SNR,0.0,
     &                        IRTFLG)
d117 2
a118 2
         ELSEIF(ITYPE /= 3 )  THEN
C           FOURIER FILE?
d120 1
a120 1
     &          'OPERATION NOT IMPLEMENTED FOR THIS DATA FORMAT',ITYPE)
d123 1
a123 1
C           VOLUME
d128 1
a128 1
C           VOLUME
d152 1
a152 1
     &                '(',I5,','I5,','I5,    ')  == '
a158 1

@


1.24
log
@output formatting
@
text
@d96 12
a107 5
            IF (MYPID <= 0) WRITE(NOUT,2222) NS,NR, SNS,SNR
2222        FORMAT('  Approximate center:',/,
     &      '             X            Y',/,
     &      '         ', I5,'        ',I5,/,
     &      '          ',F8.3,'     ',F8.3,/)
d138 2
a139 1
            IF (MYPID <= 0) WRITE(NOUT,3333) NS,NR,NC, SNS,SNR,SNC
d144 6
@


1.23
log
@output formatting
@
text
@d95 1
d97 4
a100 4
2222        FORMAT(/,'  Approximate center',/,
     &      '              X                Y',/,
     &      '          ', I5,'            ',I5,/,
     &      '          ',F8.3,'         ',F8.3,/)
d130 2
a131 2
            IF (VERBOSE .AND. MYPID .LE. 0) WRITE(NOUT,*) ' '
            IF (MYPID .LE. 0) WRITE(NOUT,3333) NS,NR,NC, SNS,SNR,SNC
d133 3
a135 3
     &      '              X                Y                Z',/,
     &      '          ', I5,'            ',I5,'            ',I5,/,
     &      '          ',F8.3,'         ',F8.3,'         ',F8.3,/)
@


1.22
log
@comment
@
text
@d129 1
d131 1
a131 1
3333        FORMAT(/,'  Approximate center',/,
@


1.21
log
@cs sym added
@
text
@d27 4
a30 4
C  CENT
Cen

C  PURPOSE: DETERMINATION OF CENTER OF GRAVITY                         *
d34 1
a34 1
         SUBROUTINE CENT
d129 1
a129 1
            IF (MYPID .LE. 0) WRITE(NOUT,3333) NS,NR,NC,SNS,SNR,SNC
@


1.20
log
@mpi  & cosmetic
@
text
@d4 1
a4 1
C
d9 1
a9 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d28 3
d36 2
d41 2
a42 3
         CHARACTER(LEN=MAXNAM)             :: FILNAM
         CHARACTER(LEN=1)                  :: NULL = CHAR(0)
         REAL, ALLOCATABLE, DIMENSION(:,:) :: AIMG
d44 6
a49 1
         DATA  LUN1/21/
d54 1
a54 1
         CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM,NROW,NSLICE,
d58 1
a58 1
         IF (IFORM .EQ. 1) THEN
d60 4
d65 25
a89 4
            ALLOCATE (AIMG(NSAM,NROW), STAT=IRTFLG)
            IF (IRTFLG.NE.0) THEN 
               CALL ERRT(46,'CENT, AIMG',NSAM*NROW)
               GOTO 505
a91 8
            CALL READV(LUN1,AIMG,NSAM,NROW,NSAM,NROW,NSLICE)           

            CALL CENT_D(AIMG,NSAM,NROW,SNS,SNR)

            M   = NSAM/2+1
            SNS = SNS-M
            M   = NROW/2+1
            SNR = SNR-M
d95 2
a96 2
            IF (MYPID .LE. 0) WRITE(NOUT,2222) NS,NR,SNS,SNR
2222        FORMAT(/,'  Approximated center of gravity',/,
d104 4
a107 1
            DEALLOCATE (AIMG)
d109 1
a109 1
         ELSEIF(ITYPE .EQ. 3)  THEN
d111 2
d114 4
a117 1
            CALL CENT_3(LUN1,NSAM,NROW,NSLICE,SNS,SNR,SNC)
d119 1
a119 1
            M   = NSAM/2+1
d121 1
a121 1
            M   = NROW/2+1
d123 1
a123 1
            M   = NSLICE/2+1
d130 1
a130 1
3333        FORMAT(/,'  Approximated center of gravity',/,
d136 1
a136 1
     &                          SNS, SNR, IRTFLG)
a138 4
            CLOSE(LUN1)
            RETURN
         ELSE
145         CALL ERRT(2,'CENT  ',NE)
d142 3
@


1.19
log
@GPL_2010
@
text
@d36 2
a37 2
         CHARACTER(LEN=MAXNAM)   ::  FILNAM

a39 2
         CHARACTER *1  NULL

d42 1
a42 10
#ifdef USE_MPI    
         include 'mpif.h'
         INTEGER  MYPID, COMM, IERR 
         COMM = MPI_COMM_WORLD
         CALL MPI_COMM_RANK(COMM, MYPID, IERR) 
#else 
         MYPID = -1
#endif

         NULL=CHAR(0)
d49 2
a50 1
         IF (IFORM.EQ.1) THEN
d54 1
a54 1
               CALL ERRT(46,'CENT, AIMG',IER)
d60 1
a60 1
            CALL  CENT_D(AIMG,NSAM,NROW,SNS,SNR)
d68 2
a69 7
#ifdef USE_MPI
            IF (MYPID .EQ. 0) THEN
               WRITE(NOUT,2222)  NS,NR,SNS,SNR
            ENDIF
#else
            WRITE(NOUT,2222)  NS,NR,SNS,SNR
#endif
d71 3
a73 3
     &      '              x                y',/,
     &      '          ', i5,'            ',i5,/,
     &      '          ',f8.3,'         ',f8.3,/)
a77 1
            CLOSE(LUN1)
a78 1
5           RETURN
d80 2
a81 1
         ELSEIF(ITYPE.EQ.3)  THEN
d83 1
a83 1
            CALL  CENT_3(LUN1,NSAM,NROW,NSLICE,SNS,SNR,SNC)
d85 11
a95 17
            M=NSAM/2+1
            SNS=SNS-M
            M=NROW/2+1
            SNR=SNR-M
            M=NSLICE/2+1
            SNC=SNC-M
            NS=INT(SNS)
            NR=INT(SNR)
            NC=INT(SNC)

#ifdef USE_MPI
            IF (MYPID .EQ. 0) THEN
               WRITE(NOUT,3333)  NS,NR,NC,SNS,SNR,SNC
            ENDIF
#else
            WRITE(NOUT,3333)  NS,NR,NC,SNS,SNR,SNC
#endif
d97 3
a99 3
     &      '              x                y                z',/,
     &      '          ', i5,'            ',i5,'            ',i5,/,
     &      '          ',f8.3,'         ',f8.3,'         ',f8.3,/)
@


1.18
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.17
log
@HRI GPL License used
@
text
@a5 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 6

C * COPYRIGHT (C)1985, 2005. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.16
log
@output formatting
@
text
@d7 24
@


1.15
log
@mpi
@
text
@d1 1
a1 1
C++************************************************************************
d5 8
a12 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
C **************************************************************************
d16 1
a16 1
C--************************************************************************
d30 1
d39 1
d58 7
a64 6
            M=NSAM/2+1
            SNS=SNS-M
            M=NROW/2+1
            SNR=SNR-M
            NS=INT(SNS)
            NR=INT(SNR)
d72 1
a72 1
2222        FORMAT(//'    Approximated center of gravity',/,
a76 4
C           IF(NSEL(1).NE.0)  PARAM(NSEL(1))=NS
C           IF(NSEL(2).NE.0)  PARAM(NSEL(2))=NR
C           IF(NSEL(3).NE.0)  PARAM(NSEL(3))=SNS
C           IF(NSEL(4).NE.0)  PARAM(NSEL(4))=SNR
d86 2
a87 2
            CALL  CENT_3
     &      (LUN1,NSAM,NROW,NSLICE,SNS,SNR,SNC)
d97 1
d105 1
a105 1
3333        FORMAT(//'    Approximated center of gravity',/,
@


1.14
log
@opfilec
@
text
@d31 8
d63 5
d69 1
d99 5
d105 1
@


1.13
log
@reg_set_nsel params changed
@
text
@d22 4
d27 1
a27 1
         CHARACTER *81 FILNAM
d34 1
a34 1
         CALL OPFILE(.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM,NROW,NSLICE,
d36 1
a36 5
         IF (IRTFLG .NE. 0) THEN
            CALL ERRT(4,'CENT ',NE)
            CLOSE (LUN1)
            RETURN
         ENDIF
a90 6
C           IF(NSEL(1).NE.0)  PARAM(NSEL(1))=NS
C           IF(NSEL(2).NE.0)  PARAM(NSEL(2))=NR
C           IF(NSEL(3).NE.0)  PARAM(NSEL(3))=NC
C           IF(NSEL(4).NE.0)  PARAM(NSEL(4))=SNS
C           IF(NSEL(5).NE.0)  PARAM(NSEL(5))=SNR
C           IF(NSEL(6).NE.0)  PARAM(NSEL(6))=SNC
@


1.12
log
@used reg_set_nsel
@
text
@d3 1
a3 1
C $$ CENT.FOR
d15 1
a16 1
C
d65 2
a66 1
            CALL REG_SET_NSEL(1,FLOAT(NS),FLOAT(NR),SNS,SNR,0.0,IRTFLG)
d97 1
a97 1
            CALL REG_SET_NSEL(1,FLOAT(NS), FLOAT(NR), FLOAT(NC),
d99 1
a99 1
            CALL REG_SET_NSEL(6,SNC, 0.0, 0.0, 0.0, 0.0,IRTFLG)
@


1.11
log
@*** empty log message ***
@
text
@d18 1
a18 3
C
C $$ CENT.FOR
C
d20 1
d26 1
a27 1
         DATA  LUN1/21/
d31 1
a31 1
     &   MAXIM,'INPUT',.FALSE.,IRTFLG)
d37 2
a39 4
         
         IF(IFORM.EQ.1) THEN
          
         	
d47 1
a47 1
C
d60 7
a66 4
            IF(NSEL(1).NE.0)  PARAM(NSEL(1))=NS
            IF(NSEL(2).NE.0)  PARAM(NSEL(2))=NR
            IF(NSEL(3).NE.0)  PARAM(NSEL(3))=SNS
            IF(NSEL(4).NE.0)  PARAM(NSEL(4))=SNR
d72 1
a72 2
         
C
d89 11
a99 6
            IF(NSEL(1).NE.0)  PARAM(NSEL(1))=NS
            IF(NSEL(2).NE.0)  PARAM(NSEL(2))=NR
            IF(NSEL(3).NE.0)  PARAM(NSEL(3))=NC
            IF(NSEL(4).NE.0)  PARAM(NSEL(4))=SNS
            IF(NSEL(5).NE.0)  PARAM(NSEL(5))=SNR
            IF(NSEL(6).NE.0)  PARAM(NSEL(6))=SNC
@


1.10
log
@*** empty log message ***
@
text
@d23 1
a23 1
         REAL, ALLOCATABLE, DIMENSION(:) :: AIMG
d41 1
a41 1
            K1=1
d43 1
a43 1
            ALLOCATE (AIMG(NROW*NSAM), STAT=IRTFLG)
d48 2
a49 4
            DO    J=1,NROW
               CALL  REDLIN(LUN1,AIMG(K1+(J-1)*NSAM),NSAM,J)
            ENDDO
            
d51 1
a51 1
            CALL  CENT_D(AIMG(K1),NSAM,NROW,SNS,SNR)
@


1.9
log
@adapted for dynamical memory allocation
@
text
@d22 1
a22 1
         INCLUDE '/net/ithaca/usr1/spider/src/CMBLOCK.INC'
@


1.8
log
@a
@
text
@d12 1
a12 1
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
d21 3
a23 3
         SUBROUTINE CENT(MAXMEM)
         INCLUDE 'CMBLOCK.INC'
         COMMON  Q(1)
d30 74
a103 64
         CALL FILERD(FILNAM,NLETI,NULL,'INPUT',IRTFLG)
         IF (IRTFLG .EQ. -1) GOTO 5
         CALL OPENF(FILNAM,LUN1,NSAM,NROW,'O',NF,NSLICE)
         GOTO (130,110),NF
110      IF(IFORM.NE.1) GOTO 501
         K1=1
         K2=K1+NSAM*NROW
C
         DO    J=1,NROW
         CALL  REDLIN(LUN1,Q(K1+(J-1)*NSAM),NSAM,J)
	 ENDDO
         CLOSE(LUN1)
C
         CALL  CENT_D(Q(K1),NSAM,NROW,SNS,SNR)
         M=NSAM/2+1
         SNS=SNS-M
         M=NROW/2+1
         SNR=SNR-M
         NS=INT(SNS)
         NR=INT(SNR)
         WRITE(NOUT,2222)  NS,NR,SNS,SNR
2222     FORMAT(//'    Approximated center of gravity',/,
     &   '              x                y',/,
     &   '          ', i5,'            ',i5,/,
     &   '          ',f8.3,'         ',f8.3,/)
         IF(NSEL(1).NE.0)  PARAM(NSEL(1))=NS
         IF(NSEL(2).NE.0)  PARAM(NSEL(2))=NR
         IF(NSEL(3).NE.0)  PARAM(NSEL(3))=SNS
         IF(NSEL(4).NE.0)  PARAM(NSEL(4))=SNR
5        RETURN
501      IF(IFORM.NE.3)  GOTO  145
         K1=1
         K2=K1+NSAM
         K3=K2+NSAM
         K4=K3+NROW
         K5=K4+NSLICE
C
         CALL  CENT_3
     &   (LUN1,Q(K1),Q(K2),Q(K3),Q(K4),NSAM,NROW,NSLICE,SNS,SNR,SNC)
         CLOSE(LUN1)
         M=NSAM/2+1
         SNS=SNS-M
         M=NROW/2+1
         SNR=SNR-M
         M=NSLICE/2+1
         SNC=SNC-M
         NS=INT(SNS)
         NR=INT(SNR)
         NC=INT(SNC)
         WRITE(NOUT,3333)  NS,NR,NC,SNS,SNR,SNC
3333     FORMAT(//'    Approximated center of gravity',/,
     &   '              x                y                z',/,
     &   '          ', i5,'            ',i5,'            ',i5,/,
     &   '          ',f8.3,'         ',f8.3,'         ',f8.3,/)
         IF(NSEL(1).NE.0)  PARAM(NSEL(1))=NS
         IF(NSEL(2).NE.0)  PARAM(NSEL(2))=NR
         IF(NSEL(3).NE.0)  PARAM(NSEL(3))=NC
         IF(NSEL(4).NE.0)  PARAM(NSEL(4))=SNS
         IF(NSEL(5).NE.0)  PARAM(NSEL(5))=SNR
         IF(NSEL(6).NE.0)  PARAM(NSEL(6))=SNC
         RETURN
130      CALL ERRT(4,'CENT  ',NE)
         GOTO 505
145      CALL ERRT(2,'CENT  ',NE)
@


1.7
log
@modified intrinsic function call for f90 compatibility
@
text
@d29 1
a29 1
CNO_SAVE
@


1.6
log
@R
@
text
@d48 2
a49 2
         NS=JNINT(SNS)
         NR=JNINT(SNR)
d76 3
a78 3
         NS=JNINT(SNS)
         NR=JNINT(SNR)
         NC=JNINT(SNC)
@


1.5
log
@*** empty log message ***
@
text
@d32 1
a32 1
         CALL OPENF(FILNAM,LUN1,NSAM,NROW,'R',NF,NSLICE)
@


1.4
log
@*** empty log message ***
@
text
@d38 3
a40 2
         DO  101  J=1,NROW
101      CALL  REDLIN(LUN1,Q(K1+(J-1)*NSAM),NSAM,J)
@


1.3
log
@nosave
@
text
@a21 1
#ifdef SP_UNIX
a22 3
#else
         INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
@


1.2
log
@cpp_lines_added
@
text
@d33 1
a33 1

@


1.1
log
@Initial revision
@
text
@d22 3
d26 1
@
