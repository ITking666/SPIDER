head	1.6;
access;
symbols
	best-code:1.6
	x-named-regs:1.5
	x:1.5
	v13-00:1.5
	pre_GPL:1.4
	prec_CA:1.4
	noindx:1.4
	Bproc:1.4
	oct21:1.3
	last77:1.3;
locks; strict;
comment	@c @;


1.6
date	2006.03.07.19.51.06;	author leith;	state dead;
branches;
next	1.5;

1.5
date	2005.10.17.21.02.38;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.11.10.23.10.03;	author yuchen;	state Exp;
branches;
next	1.3;

1.3
date	97.09.30.22.08.59;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.10.10.18.58.50;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.51.09;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.6
log
@unused now
@
text
@
C
C++*********************************************************************
C
C   
C
C **********************************************************************
C *  AUTHOR :                                                              *
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
C=*                                                                    *
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* This program is distributed in the hope that it will be useful,    *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
C **********************************************************************
C
C
C	AUTHOR: MAHIEDDINE LADJADJ          11/1/93
C
C
C       NFAC    NUMBER OF EIGENVECTORS REQUESTED
C       NUMIM   NUMBER OF IMAGES
C       NACT    NUMBER OF ACTIVE IMAGES
C       NPIX    NUMBER OF PIXELS PER IMAGE
C
C         
C--*********************************************************************

        SUBROUTINE PCA_STOCHA(JBASE,NPIX,NUMIM,KFAC,NACT,NITER, 
     &                    LUV,PJ,S,U,TRACE,SOMP,V,BB, 
     &                    D,AD,INB,NB,NTMP)


        DIMENSION  S(NPIX, JBASE), PJ(NPIX), U(NPIX), LUV(NUMIM), 
     &           BB(NPIX, JBASE),  V(NPIX),  D(NPIX),  AD(JBASE, JBASE)
        LOGICAL  S_ON_DISK, INB(JBASE),LDUM
C
C       NAR  =  CENTERING FREQUENCY
C
        DATA  EPS/1.0E - 4/, NAR/10/, KITER/8/

        S_ON_DISK = .FALSE.
        TRACE  =  0  
        DO J  =  1, NPIX                                                        
          V(J)   =  0.0
          PJ(J)  =  0.0
        END DO
        CALL REW(NB,  1)
        SOMP  =  0.0 
C
C       CALCULATION OF WEIGHTS         
C
        DO I  =  1, NUMIM                                        
          READ(NB) (U(J), J = 1, NPIX),  PIA,  VAR,  INO

          IF(LUV(I) .NE. 0) THEN
            SOMP  =   SOMP  +  PIA                                              
            DO  J  =  1, NPIX
              PJ(J)  =  PJ(J)  +  U(J)                                    
            END DO
C
C           COMPUTE THE VARIANCE, FIRST PART
C
            DO J  =  1, NPIX
              V(J)  =  V(J)  +  (U(J) * U(J))
            END DO
          END IF
        END DO                                  
C
C 	ALL THE IMAGES ARE READ .
C
C       COMPUTE THE VARIANCE
C
        DO J  =  1, NPIX
          PJ(J) = PJ(J)/NACT
          V(J)  =  V(J) - PJ(J)*PJ(J)*NACT
        END DO
        DO J  =  1, NPIX
          TRACE  =  TRACE  +  V(J)
        END DO
C
C	RANDOM NUMBERS IN  S MATRIX.
C
        DO J  =  1, NPIX
          DO L  =  1, JBASE
            S(J, L)  =  SEN3A(BID)
          END DO
        END DO                                               

        CALL PCA_GSMOD(NPIX,  NPIX,  JBASE,  S,  KR,  V)
        
        do  l = 1, jbase                    
          inb(l) = .true.
        END DO
        NIT = 0
	LDUM=.TRUE.
        DO WHILE (LDUM)
          NIT = NIT + 1
          print * , ' Iteration #', nit  
          CALL PCA_ITPOW(NUMIM, NPIX, JBASE, NAR, PJ, S, BB, U, V, 
     &                SOMP, TRACE, NB, LUV, inb)

          IF(NIT. GE. KITER - 1) THEN
            IF((NIT.GT.KITER) .AND. (MOD(NIT - 12, 4) .NE. 0)) THEN
              CONTINUE
            ELSE
              jcase = 0
              do   l = 1, jbase
                if(inb(l))  jcase = jcase + 1
              END DO
              CALL PCA_CPROJ(NUMIM,JBASE,NPIX,S,V,BB,U,AD, 
     &                      SOMP,PJ,NB,LUV,jcase,inb)
              jcase = 0
              do l = 1, jbase
                if(inb(l))  then
                  jcase = jcase + 1
                  d(l) = v(jcase)
                endif
              END DO
              IF(S_ON_DISK)  THEN
                REWIND NTMP
                AVE = 1.0
                DO  L  =  1, KFAC
                  V(L)  =  0.0                          
                  READ(NTMP) (U(J), J = 1, NPIX)
                  DO  J  =  1, NPIX
                    V(L)  =  V(L)  +  S(J, L) * U(J)
                  END DO
                  if((1.0 - abs(v(l))).lt.eps)  then
                    inb(l) = .false.
                  else
                    AVE = amin1(AVE, ABS(V(L)))
                  endif
                END DO

                PRINT  501, AVE
501             FORMAT('   ***   Cosines of eigenvectors   *** ', /, 
     $	           '       Minimum cosine            =  ', F8.5)
                PRINT  502, (V(L), L = 1, KFAC)
502             FORMAT( 8(2X, F8.5))
                print  505, (inb(l), l = 1, jbase)
505             format(8(9x, l1))
    
                IF((1.0 - AVE).LT.EPS)  GOTO  80
              ENDIF
              REWIND NTMP
              DO L  =  1, JBASE
                WRITE(NTMP) (S(J, L), J = 1, NPIX)
              END DO
              S_ON_DISK = .TRUE.
            END IF
          END IF
        END DO

80      CONTINUE                                        
        END
@


1.5
log
@GPL License fixed
@
text
@@


1.4
log
@a
@
text
@d3 1
a3 1
C++************************************************************************
d7 1
a7 1
C **************************************************************************
d9 24
a32 7
C *  COPYRIGHT (C)1987 , WADSWORTH CENTER FOR LABORATORIES AND             *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
@


1.3
log
@*** empty log message ***
@
text
@d41 1
a41 1
CNO_SAVE
@


1.2
log
@nosave
@
text
@d36 1
a36 1
        LOGICAL  S_ON_DISK, INB(jbase)
d96 2
a97 2

        DO WHILE (1)
@


1.1
log
@Initial revision
@
text
@d41 1
a41 1

a155 2

        RETURN
@
