head	1.15;
access;
symbols
	healthdept_2018:1.15
	pre_getangas:1.11
	GPL2010:1.11
	pre_GPL2010:1.10
	pre_var_equation:1.10
	pre_fftwrings:1.10
	pre_opfiles:1.10
	src:1.10
	best-code:1.10
	x-named-regs:1.10
	x:1.10
	v13-00:1.10
	pre_GPL:1.8
	prec_CA:1.8
	noindx:1.7
	Bproc:1.7
	oct21:1.6
	last77:1.6;
locks; strict;
comment	@c @;


1.15
date	2018.10.03.14.34.02;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2011.12.21.17.31.44;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2011.10.24.18.19.28;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2011.10.24.18.05.25;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2010.06.24.13.25.11;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.17.20.02.42;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.17.17.58.13;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.23.20.50.10;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.12.07.15.25.37;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.02.11.15.32.56;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	99.02.10.15.52.08;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	98.11.05.18.51.08;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.02.16.20.07.42;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.02.15.18.06.27;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.07.11.19.33.45;	author pawel;	state Exp;
branches;
next	;


desc
@@


1.15
log
@email_health_dept
@
text
@
C ++********************************************************************
C                                                                      *
C  CANG         ADDED DOSS                         JUL 03 ARDEAN LEITH *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2011  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  CANG(PHI,THETA,PSI,DOSS,SS,DM)                                      *
C                                                                      *
C  PURPOSE:    CONVERTS EULER ANGLES TO ROTATION MATRIX                *
C                                                                      *
C  PARAMETERS: PHI,THETA,PSI     ANGLES                           SENT *
C              DOSS              FLAG TO RETURN SS ANGLES         SENT *
C              SS                ANGLES                           RET  *
C              DM                ROTATION MATRIX                  RET  *
C                                                                      *
C  CALLED BY:  buildm.f, bp3f.f, bprp.f, builds.f, bpcg.f              *
C                                                                      *
C  SEE ALSO:   bldr.f, hiang,f                                         *
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE CANG(PHI,THETA,PSI,DOSS,SS,DM)

        REAL              :: PHI,THETA,PSI
        LOGICAL           :: DOSS
        DOUBLE PRECISION  :: CPHI,SPHI,CTHE,STHE,CPSI,SPSI
        REAL              :: DM(9),SS(6)

	DOUBLE PRECISION  :: QUADPI, DGR_TO_RAD
	PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
	PARAMETER (DGR_TO_RAD = (QUADPI/180))

        CPHI = DCOS(DBLE(PHI)   * DGR_TO_RAD)
        SPHI = DSIN(DBLE(PHI)   * DGR_TO_RAD)
        CTHE = DCOS(DBLE(THETA) * DGR_TO_RAD)
        STHE = DSIN(DBLE(THETA) * DGR_TO_RAD)
        CPSI = DCOS(DBLE(PSI)   * DGR_TO_RAD)
        SPSI = DSIN(DBLE(PSI)   * DGR_TO_RAD)

        IF (DOSS) THEN
C          WANT TO RETURN SS 
	   SS(1) = SNGL(CPHI)
	   SS(2) = SNGL(SPHI)
	   SS(3) = SNGL(CTHE)
	   SS(4) = SNGL(STHE)
	   SS(5) = SNGL(CPSI)
	   SS(6) = SNGL(SPSI)
        ENDIF

        DM(1) =  CPHI*CTHE*CPSI - SPHI*SPSI
        DM(2) =  SPHI*CTHE*CPSI + CPHI*SPSI
        DM(3) = -STHE*CPSI
        DM(4) = -CPHI*CTHE*SPSI - SPHI*CPSI
        DM(5) = -SPHI*CTHE*SPSI + CPHI*CPSI
        DM(6) =  STHE*SPSI
        DM(7) =  STHE*CPHI
        DM(8) =  STHE*SPHI
        DM(9) =  CTHE

        END

#ifdef NEVER
        SUBROUTINE BLDR(R,PSI,THETA,PHI)

        DOUBLE  PRECISION :: R(3,3)
        REAL              :: PSI,THETA,PHI 

        DOUBLE  PRECISION :: CPHI,SPHI,CTHETA,STHETA,CPSI,SPSI
	DOUBLE PRECISION  :: QUADPI,DGR_TO_RAD

	PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
	PARAMETER (DGR_TO_RAD = (QUADPI/180))

        CPHI   = DCOS(DBLE(PHI)   * DGR_TO_RAD)
        SPHI   = DSIN(DBLE(PHI)   * DGR_TO_RAD)
        CTHETA = DCOS(DBLE(THETA) * DGR_TO_RAD)
        STHETA = DSIN(DBLE(THETA) * DGR_TO_RAD)
        CPSI   = DCOS(DBLE(PSI)   * DGR_TO_RAD)
        SPSI   = DSIN(DBLE(PSI)   * DGR_TO_RAD)

        R(1,1) =  CPHI*CTHETA*CPSI - SPHI*SPSI
        R(2,1) = -CPHI*CTHETA*SPSI - SPHI*CPSI
        R(3,1) =  CPHI*STHETA
        R(1,2) =  SPHI*CTHETA*CPSI + CPHI*SPSI
        R(2,2) = -SPHI*CTHETA*SPSI + CPHI*CPSI
        R(3,2) =  SPHI*STHETA
        R(1,3) = -STHETA*CPSI
        R(2,3) =  STHETA*SPSI
        R(3,3) =  CTHETA

        END
#endif
@


1.14
log
@cosmetics
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.13
log
@*** empty log message ***
@
text
@d10 1
a10 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d28 1
a28 1
C   CANG(PHI,THETA,PSI,DOSS,SS,DM)                                                                   *
d30 1
a30 1
C  PURPOSE:                                                            *
d32 8
a39 1
C  PARAMETERS:                                                         *
d46 6
a51 2
        DOUBLE PRECISION  CPHI,SPHI,CTHE,STHE,CPSI,SPSI
	DOUBLE PRECISION  QUADPI,DGR_TO_RAD
a53 2
        DIMENSION  DM(9),SS(6)
        LOGICAL   :: DOSS
d55 6
a60 6
        CPHI = DCOS(DBLE(PHI)*DGR_TO_RAD)
        SPHI = DSIN(DBLE(PHI)*DGR_TO_RAD)
        CTHE = DCOS(DBLE(THETA)*DGR_TO_RAD)
        STHE = DSIN(DBLE(THETA)*DGR_TO_RAD)
        CPSI = DCOS(DBLE(PSI)*DGR_TO_RAD)
        SPSI = DSIN(DBLE(PSI)*DGR_TO_RAD)
d72 2
a73 2
        DM(1) = CPHI*CTHE*CPSI-SPHI*SPSI
        DM(2) = SPHI*CTHE*CPSI+CPHI*SPSI
d75 37
a111 6
        DM(4) = -CPHI*CTHE*SPSI-SPHI*CPSI
        DM(5) = -SPHI*CTHE*SPSI+CPHI*CPSI
        DM(6) = STHE*SPSI
        DM(7) = STHE*CPHI
        DM(8) = STHE*SPHI
        DM(9) = CTHE
d114 1
@


1.12
log
@comments & cosmetic
@
text
@d28 1
a28 1
C  CANG(PHI,THETA,PSI, DOSS,SS,DM)                                                                   *
d30 3
a32 2
C  PURPOSE: CONVERTS SPIDER CONVENTION EULER ANGLES TO A 3x3 ROTATION  *
C           MATRIX                                                     *
a33 5
C  PARAMETERS: DM              ROTATION MATRIX              (RETURNED)
C              PHI,THETA,PSI   EULER ANGLES                 (SENT)
C 
C  NOTE:  SAME AS BLDR.F EXCEPT FOR SIGNS OF SOME TERMS
C
d37 1
a37 8
      SUBROUTINE CANG(PHI,THETA,PSI,DOSS,SS,DM)

      REAL              :: PHI,THETA,PSI
      LOGICAL           :: DOSS
      REAL              :: SS(6),DM(9)

      DOUBLE PRECISION  :: CPHI,SPHI,CTHE,STHE,CPSI,SPSI
      DOUBLE PRECISION  :: QUADPI,DGR_TO_RAD
d39 6
a44 3
      DOUBLE PRECISION, PARAMETER ::
     &            QUADPI = 3.141592653589793238462643383279502884197)
      DOUBLE PRECISION, PARAMETER :: DGR_TO_RAD = (QUADPI/180)
d46 2
a47 2
        CPHI = DCOS(DBLE(PHI)  *DGR_TO_RAD)
        SPHI = DSIN(DBLE(PHI)  *DGR_TO_RAD)
d50 2
a51 2
        CPSI = DCOS(DBLE(PSI)  *DGR_TO_RAD)
        SPSI = DSIN(DBLE(PSI)  *DGR_TO_RAD)
d63 2
a64 2
        DM(1) =  CPHI*CTHE*CPSI-SPHI*SPSI
        DM(2) =  SPHI*CTHE*CPSI+CPHI*SPSI
a65 1

d68 4
a71 5
        DM(6) =  STHE*SPSI

        DM(7) =  STHE*CPHI
        DM(8) =  STHE*SPHI
        DM(9) =  CTHE
@


1.11
log
@GPL_2010
@
text
@d28 1
a28 1
C   CANG(PHI,THETA,PSI,DOSS,SS,DM)                                                                   *
d30 2
a31 3
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS:                                                         *
d33 5
d41 8
a48 1
        SUBROUTINE CANG(PHI,THETA,PSI,DOSS,SS,DM)
d50 3
a52 6
        DOUBLE PRECISION  CPHI,SPHI,CTHE,STHE,CPSI,SPSI
	DOUBLE PRECISION  QUADPI,DGR_TO_RAD
	PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
	PARAMETER (DGR_TO_RAD = (QUADPI/180))
        DIMENSION  DM(9),SS(6)
        LOGICAL   :: DOSS
d54 2
a55 2
        CPHI = DCOS(DBLE(PHI)*DGR_TO_RAD)
        SPHI = DSIN(DBLE(PHI)*DGR_TO_RAD)
d58 2
a59 2
        CPSI = DCOS(DBLE(PSI)*DGR_TO_RAD)
        SPSI = DSIN(DBLE(PSI)*DGR_TO_RAD)
d71 2
a72 2
        DM(1) = CPHI*CTHE*CPSI-SPHI*SPSI
        DM(2) = SPHI*CTHE*CPSI+CPHI*SPSI
d74 1
d77 5
a81 4
        DM(6) = STHE*SPSI
        DM(7) = STHE*CPHI
        DM(8) = STHE*SPHI
        DM(9) = CTHE
@


1.10
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.9
log
@HRI GPL License used
@
text
@a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.8
log
@reang --> buildm (incorporating cang call)
@
text
@d8 24
@


1.7
log
@header
@
text
@d4 1
a5 1
C                                                                      *
d15 1
a15 1
C                                                                      *
a20 1
C        0         2         3         4         5         6         7 *
d24 1
a24 1
        SUBROUTINE  CANG(PHI,THETA,PSI,SS,DM)
d31 28
a59 22
        CPHI=DCOS(DBLE(PHI)*DGR_TO_RAD)
	SS(1)=SNGL(CPHI)
        SPHI=DSIN(DBLE(PHI)*DGR_TO_RAD)
	SS(2)=SNGL(SPHI)
        CTHE=DCOS(DBLE(THETA)*DGR_TO_RAD)
	SS(3)=SNGL(CTHE)
        STHE=DSIN(DBLE(THETA)*DGR_TO_RAD)
	SS(4)=SNGL(STHE)
        CPSI=DCOS(DBLE(PSI)*DGR_TO_RAD)
	SS(5)=SNGL(CPSI)
        SPSI=DSIN(DBLE(PSI)*DGR_TO_RAD)
	SS(6)=SNGL(SPSI)

        DM(1)=CPHI*CTHE*CPSI-SPHI*SPSI
        DM(2)=SPHI*CTHE*CPSI+CPHI*SPSI
        DM(3)=-STHE*CPSI
        DM(4)=-CPHI*CTHE*SPSI-SPHI*CPSI
        DM(5)=-SPHI*CTHE*SPSI+CPHI*CPSI
        DM(6)=STHE*SPSI
        DM(7)=STHE*CPHI
        DM(8)=STHE*SPHI
        DM(9)=CTHE
@


1.6
log
@*** empty log message ***
@
text
@d1 24
d26 1
d32 1
a32 1
C
d45 1
a45 1
C
@


1.5
log
@trig
@
text
@d3 1
a3 1
	DOUBLE PRECISION  QUADPI,DRG_TO_RAD
d5 1
a5 1
	PARAMETER (DRG_TO_RAD = (QUADPI/180))
d8 1
a8 1
        CPHI=DCOS(DBLE(PHI)*DRG_TO_RAD)
d10 1
a10 1
        SPHI=DSIN(DBLE(PHI)*DRG_TO_RAD)
d12 1
a12 1
        CTHE=DCOS(DBLE(THETA)*DRG_TO_RAD)
d14 1
a14 1
        STHE=DSIN(DBLE(THETA)*DRG_TO_RAD)
d16 1
a16 1
        CPSI=DCOS(DBLE(PSI)*DRG_TO_RAD)
d18 1
a18 1
        SPSI=DSIN(DBLE(PSI)*DRG_TO_RAD)
@


1.4
log
@*** empty log message ***
@
text
@d3 3
a6 4
#ifdef SP_F90
	DOUBLE PRECISION  DCOSD,DSIND,DATAN2D
#endif
CNO_SAVE
d8 1
a8 1
        CPHI=DCOSD(DBLE(PHI))
d10 1
a10 1
        SPHI=DSIND(DBLE(PHI))
d12 1
a12 1
        CTHE=DCOSD(DBLE(THETA))
d14 1
a14 1
        STHE=DSIND(DBLE(THETA))
d16 1
a16 1
        CPSI=DCOSD(DBLE(PSI))
d18 1
a18 1
        SPSI=DSIND(DBLE(PSI))
@


1.3
log
@nosave mp
@
text
@d4 3
@


1.2
log
@nosave
@
text
@d1 3
a3 3
	SUBROUTINE  CANG(PHI,THETA,PSI,DM)
	DOUBLE PRECISION  CPHI,SPHI,CTHE,STHE,CPSI,SPSI
 	DIMENSION  DM(9)
d6 12
a17 6
	CPHI=DCOSD(DBLE(PHI))
	SPHI=DSIND(DBLE(PHI))
	CTHE=DCOSD(DBLE(THETA))
	STHE=DSIND(DBLE(THETA))
	CPSI=DCOSD(DBLE(PSI))
	SPSI=DSIND(DBLE(PSI))
d19 6
a24 6
	DM(1)=CPHI*CTHE*CPSI-SPHI*SPSI
	DM(2)=SPHI*CTHE*CPSI+CPHI*SPSI
	DM(3)=-STHE*CPSI
	DM(4)=-CPHI*CTHE*SPSI-SPHI*CPSI
	DM(5)=-SPHI*CTHE*SPSI+CPHI*CPSI
	DM(6)=STHE*SPSI
d28 1
a28 1
	END
@


1.1
log
@Initial revision
@
text
@d4 1
@
