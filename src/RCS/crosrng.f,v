head	1.19;
access;
symbols
	healthdept_2018:1.19
	pre_getangas:1.17
	GPL2010:1.17
	pre_GPL2010:1.16
	pre_var_equation:1.16
	pre_fftwrings:1.15
	pre_opfiles:1.15
	src:1.15
	best-code:1.15
	x-named-regs:1.15
	x:1.15
	v13-00:1.15
	pre_GPL:1.13
	prec_CA:1.13
	noindx:1.13
	Bproc:1.12
	oct21:1.9
	last77:1.9;
locks; strict;
comment	@c @;


1.19
date	2018.10.03.14.34.03;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2013.01.09.17.16.42;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2010.06.24.13.25.22;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2008.06.06.15.32.26;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.17.20.30.31;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.17.18.21.39;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2001.01.30.17.05.18;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	2000.08.04.20.42.43;	author bimal;	state Exp;
branches;
next	1.11;

1.11
date	2000.01.18.20.50.11;	author bimal;	state Exp;
branches;
next	1.10;

1.10
date	99.11.10.23.09.13;	author yuchen;	state Exp;
branches;
next	1.9;

1.9
date	99.03.01.14.17.14;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	98.01.08.21.13.34;	author hedget;	state Exp;
branches;
next	1.7;

1.7
date	98.01.08.20.20.03;	author hedget;	state Exp;
branches;
next	1.6;

1.6
date	97.10.31.19.19.51;	author hedget;	state Exp;
branches;
next	1.5;

1.5
date	97.10.03.21.09.03;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	97.09.30.20.06.40;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.04.02.20.04.12;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.02.01.18.11.57;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.48.01;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.19
log
@email_health_dept
@
text
@C++*********************************************************************
C
C  CROSRNG.F 
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  CROSRNG(CIRC1,CIRC2, LCIRC,NRING,T,Q,MAXRIN,
C            JACUP,NUMR,QN,TOT,MODE)
C
C PURPOSE: CROSS CORRELATION OF RADIAL RINGS FOR USE IN ROTATIONAL
C          ALIGNMENT. CHECKS ONLY UN-MIRRORED POSITION
C
C PARAMETERS:
C    CIRC1  - FT OF RINGS MULTIPLIED BY WEIGHTS           (SENT)
C    CIRC2  - FT OF RINGS MULTIPLIED BY WEIGHTS           (SENT)
C    LCIRC  - SIZE OF CIRCS ARRAYS                        (SENT)
C    NRING  - NUMBER OF RINGS                             (SENT)
C    MAXRIN - LONGEST RING                                (SENT)
C    NUMR   - RING LOCATION POINTERS                      (SENT)
C    Q      - CC ARRAY                                    (RETURNED)
C    QMAX   - CC MAX                                      (RETURNED)
C    POS_MAX - POSITION OF CC MAX                         (RETURNED)
C    TT     - USED FOR SGI FFT (UNUSED NOW)               (SENT)
C    NEG    - FLAG FOR CONJUGATE (MIRROR) OF 1'ST RING    (SENT)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE CROSRNG(CIRC1,CIRC2, LCIRC,NRING, T,Q, MAXRIN,
     &                     JACUP,NUMR,QN,TOT,MODE)

        INTEGER  NUMR(3,NRING),MAXRIN
        DIMENSION  CIRC1(LCIRC),CIRC2(LCIRC)
        DOUBLE PRECISION  T(MAXRIN),Q(MAXRIN)
        DOUBLE PRECISION  QN,QT,PI,T7(-3:3)
        CHARACTER*1  MODE

        PI = 4.0*DATAN(1.0D0)
        IF (MODE .EQ. 'F')  PI=2*PI
        IP = -LOG2(MAXRIN)

        Q = 0.0D0

        DO I=1,NRING
           WR = REAL(NUMR(1,I)) * PI/REAL(NUMR(3,I)) * 
     &          REAL(MAXRIN) / REAL(NUMR(3,I))

           T(1) = DBLE(CIRC1(NUMR(2,I))) * CIRC2(NUMR(2,I))
           IF (NUMR(3,I) .EQ. MAXRIN) THEN
              T(2) = DBLE(CIRC1(NUMR(2,I)+1)) * CIRC2(NUMR(2,I)+1)
              DO J=3,MAXRIN,2
                 JC = J + NUMR(2,I)-1
                 T(J)   =  DBLE(CIRC1(JC))   * CIRC2(JC)   + 
     &                     DBLE(CIRC1(JC+1)) * CIRC2(JC+1)
                 T(J+1) = -DBLE(CIRC1(JC))   * CIRC2(JC+1)  + 
     &                     DBLE(CIRC1(JC+1)) * CIRC2(JC)
              ENDDO

              Q = Q + T * WR
           ELSE
              T(NUMR(3,I)+1) = DBLE(CIRC1(NUMR(2,I)+1)) * 
     &                              CIRC2(NUMR(2,I)+1)/2.0
              T(2) = 0.0
              DO J=3,NUMR(3,I),2
                 JC=J+NUMR(2,I)-1
                 T(J)   =  DBLE(CIRC1(JC)) * CIRC2(JC)   + 
     &                     DBLE(CIRC1(JC+1))*CIRC2(JC+1)
                 T(J+1) = -DBLE(CIRC1(JC)) * CIRC2(JC+1) + 
     &                     DBLE(CIRC1(JC+1))*CIRC2(JC)
              ENDDO

              Q(1:NUMR(3,I)+1) = Q(1:NUMR(3,I)+1) + 
     &                           T(1:NUMR(3,I)+1) * WR
           ENDIF
        ENDDO

        CALL  FFTR_D(Q,IP)

        QN = -1.0D20
        DO J=1,MAXRIN
           IF (Q(J) .GE. QN)  THEN
              QN   = Q(J)
              JTOT = J
           ENDIF
        ENDDO

        IF (JACUP .EQ. 0) THEN
           TOT = JTOT
        ELSE
           DO K=-3,3
              J     = MOD(JTOT+K+MAXRIN-1,MAXRIN)+1
              T7(K) = Q(J)
           ENDDO
           CALL PRB1D(T7,7,POS)

           K = INT(100.0 / REAL(JACUP+1))
           TOT = REAL(JTOT) + REAL(IFIX(POS)) +
     &           REAL(K) * REAL(INT(POS*100.0 / REAL(K))) / 100.0
        ENDIF

        END


C       --------------- CROSRNG_NEW --------------------------------

        SUBROUTINE CROSRNG_NEW(CIRCR,CIRCE,LCIRC, 
     &                         NRING,MAXRIN,NUMR,
     &                         FFTW3PLAN, USE_MIR,
     &                         Q, QMAX,POS_MAX, MAXL)

C       USES NUMR TABLE FOR MAPPING INTO Q ARRAY 
C       USES SIMPLIFIED LOGIC FOR BOUNDARY VALUES, FLOATING PT. ARITH.

        IMPLICIT NONE

        REAL,            INTENT(IN)   :: CIRCR(LCIRC), CIRCE(LCIRC)
        INTEGER,         INTENT(IN)   :: LCIRC,NRING,MAXRIN
        INTEGER,         INTENT(IN)   :: NUMR(3,NRING)
        INTEGER *8                    :: FFTW3PLAN(*)
        REAL,            INTENT(OUT)  :: Q(MAXRIN+2)
        REAL,            INTENT(OUT)  :: QMAX
        INTEGER,         INTENT(OUT)  :: MAXL
        REAL,            INTENT(OUT)  :: POS_MAX
        LOGICAL,         INTENT(IN)   :: USE_MIR

        INTEGER                       :: I,IGO,IGOM1,NVAL,J1,J,JC

C       ZERO WHOLE Q ARRAY,  STRAIGHT  = CIRCR * CONJG(CIRCE)
        Q = 0.0
     
        DO I=1,NRING
           IGO   = NUMR(2,I)
           IGOM1 = IGO - 1
           NVAL  = NUMR(3,I)       
           J1    = 1

           IF (USE_MIR) THEN
C             FIRST RING SET IS CONJUGATED (MIRRORED)
              DO J=J1,NVAL,2
                 JC     = J + IGOM1

                 Q(J)   = Q(J)   + (CIRCR(JC))   * CIRCE(JC)   -
     &                             (CIRCR(JC+1)) * CIRCE(JC+1)
                 Q(J+1) = Q(J+1) - (CIRCR(JC))   * CIRCE(JC+1) -
     &                             (CIRCR(JC+1)) * CIRCE(JC)
              ENDDO
           ELSE
C             FIRST RING SET IS NON-CONJUGATED (NOT MIRRORED)
              DO J=J1,NVAL,2
                 JC     = J + IGOM1

                 Q(J)   = Q(J)   + (CIRCR(JC))   * CIRCE(JC)   +
     &                             (CIRCR(JC+1)) * CIRCE(JC+1)
                 Q(J+1) = Q(J+1) - (CIRCR(JC))   * CIRCE(JC+1) +
     &                             (CIRCR(JC+1)) * CIRCE(JC)
              ENDDO
           ENDIF
        ENDDO

        CALL CROSRNG_COM_R(Q,MAXRIN,FFTW3PLAN,QMAX,POS_MAX,MAXL)
 
        END

@


1.18
log
@removed CROSRNG_COM_NEW call in: CROSRNG_NEW, rewrote: CROSRNG_NEW
@
text
@d11 1
a11 1
C=* Email: spider@@wadsworth.org                                        *
@


1.17
log
@GPL_2010
@
text
@d126 4
a129 2
        SUBROUTINE CROSRNG_NEW(CIRC1,CIRC2,LCIRC, NRING,MAXRIN,NUMR,
     &                         Q,QMAX,POS_MAX, TT,NEG, FFTW3PLAN,MODE)
d134 1
a134 11
        INTEGER, INTENT(IN)           :: NUMR(3,NRING)
        REAL, INTENT(IN)              :: CIRC1(LCIRC), CIRC2(LCIRC)
        REAL, INTENT(OUT)             :: Q(MAXRIN+2)
        DOUBLE PRECISION, INTENT(IN)  :: TT(*)
        LOGICAL, INTENT(IN)           :: NEG
        CHARACTER(LEN=1),INTENT(IN)   :: MODE

        LOGICAL                       :: NEG_USED
        REAL                          :: POS_MAX
        DOUBLE PRECISION              :: QMAX
        DOUBLE PRECISION              :: PI
d136 9
a144 1
        NEG_USED = NEG
d146 1
a146 2
        PI = 4.0 * DATAN(1.0D0)
        IF (MODE .EQ. 'F')  PI = 2*PI
d148 1
a148 1
C       ZERO WHOLE Q ARRAY,  STRAIGHT  = CIRC1 * CONJG(CIRC2)
d157 1
a157 15
           WR    = REAL(NUMR(1,I)) * PI/REAL(NUMR(3,I)) * 
     &             REAL(MAXRIN) / REAL(NUMR(3,I))
           
#ifndef SP_LIBFFTW3
C          NATIVE OR SGI FFT
           Q(1) = Q(1) + (CIRC1(IGO)) * CIRC2(IGO)
           IF (NVAL .NE. MAXRIN) THEN
              Q(NVAL+1) = Q(NVAL+1) + (CIRC1(IGO+1)) * CIRC2(IGO+1) 
           ELSE
              Q(2)      = Q(2)      + (CIRC1(IGO+1)) * CIRC2(IGO+1)             
           ENDIF
           J1 = 3
#endif

           IF (NEG_USED) THEN
d162 4
a165 4
                 Q(J)   = Q(J)   + (CIRC1(JC))   * CIRC2(JC)   -
     &                             (CIRC1(JC+1)) * CIRC2(JC+1)
                 Q(J+1) = Q(J+1) - (CIRC1(JC))   * CIRC2(JC+1) -
     &                             (CIRC1(JC+1)) * CIRC2(JC)
d172 4
a175 4
                 Q(J)   = Q(J)   + (CIRC1(JC))   * CIRC2(JC)   +
     &                             (CIRC1(JC+1)) * CIRC2(JC+1)
                 Q(J+1) = Q(J+1) - (CIRC1(JC))   * CIRC2(JC+1) +
     &                             (CIRC1(JC+1)) * CIRC2(JC)
d180 1
a180 1
        CALL CROSRNG_COM_NEW(Q,LCIRC,MAXRIN,QMAX,POS_MAX,TT,FFTW3PLAN)
@


1.16
log
@has rewrite for FFTW aprings
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.15
log
@GPL License fixed
@
text
@d3 1
a3 1
C $$ CROSRNG.FOR
d7 1
a7 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d31 2
a32 1
C IMAGE_PROCESSING_ROUTINE
d34 15
a48 1
C        1         2         3         4         5         6         7
a51 5
C
C $$ CROSRNG.FOR
C
        SUBROUTINE  CROSRNG
     &  (CIRC1,CIRC2,LCIRC,NRING,T,Q,MAXRIN,JACUP,NUMR,QN,TOT,MODE)
d53 2
a54 1
C  INPUT - Fourier transforms of rings!!!
d62 19
a80 17
        PI=4.0*DATAN(1.0D0)
        IF(MODE.EQ.'F')  PI=2*PI
        IP=-LOG2(MAXRIN)

        Q=0.0D0

        DO    I=1,NRING
           WR=REAL(NUMR(1,I))*PI/REAL(NUMR(3,I))
     &       *REAL(MAXRIN)/REAL(NUMR(3,I))

           T(1)=DBLE(CIRC1(NUMR(2,I)))*CIRC2(NUMR(2,I))
           IF(NUMR(3,I).EQ.MAXRIN)  THEN
              T(2)=DBLE(CIRC1(NUMR(2,I)+1))*CIRC2(NUMR(2,I)+1)
              DO    J=3,MAXRIN,2
                 JC=J+NUMR(2,I)-1
        T(J)=DBLE(CIRC1(JC))*CIRC2(JC)+DBLE(CIRC1(JC+1))*CIRC2(JC+1)
        T(J+1)=-DBLE(CIRC1(JC))*CIRC2(JC+1)+DBLE(CIRC1(JC+1))*CIRC2(JC)
d82 2
a83 1
              Q=Q+T*WR
d85 4
a88 3
        T(NUMR(3,I)+1)=DBLE(CIRC1(NUMR(2,I)+1))*CIRC2(NUMR(2,I)+1)/2.0
              T(2)=0.0
              DO    J=3,NUMR(3,I),2
d90 4
a93 2
        T(J)=DBLE(CIRC1(JC))*CIRC2(JC)+DBLE(CIRC1(JC+1))*CIRC2(JC+1)
        T(J+1)=-DBLE(CIRC1(JC))*CIRC2(JC+1)+DBLE(CIRC1(JC+1))*CIRC2(JC)
d95 3
a97 2
C  ###
              Q(1:NUMR(3,I)+1)=Q(1:NUMR(3,I)+1)+T(1:NUMR(3,I)+1)*WR
d100 1
a100 1
C
d102 6
a107 6
C
        QN=-1.0D20
        DO    J=1,MAXRIN
           IF(Q(J).GE.QN)  THEN
              QN=Q(J)
              JTOT=J
d110 3
a112 3
C
        IF(JACUP.EQ.0)  THEN
           TOT=JTOT
d114 3
a116 3
           DO    K=-3,3
              J=MOD(JTOT+K+MAXRIN-1,MAXRIN)+1
              T7(K)=Q(J)
d118 5
a122 5
           CALL  PRB1D(T7,7,POS)
           K=INT(100.0/REAL(JACUP+1))
           TOT=REAL(JTOT)
     &      +REAL(IFIX(POS))
     &       +REAL(K)*REAL(INT(POS*100.0/REAL(K)))/100.0
d124 77
d202 1
@


1.14
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a5 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
a29 1
C **************************************************************************
a36 1
C--************************************************************************
@


1.13
log
@*** empty log message ***
@
text
@d1 1
d6 1
d8 1
d10 24
d40 1
d48 1
@


1.12
log
@replaced log2_p with log2
@
text
@d39 1
a39 3
        DO    J=1,MAXRIN
           Q(J)=0.0D0
        ENDDO
d53 1
a53 3
              DO    J=1,MAXRIN
                 Q(J)=Q(J)+T(J)*WR
              ENDDO
d63 1
a63 3
              DO    J=1,NUMR(3,I)+1
                 Q(J)=Q(J)+T(J)*WR
              ENDDO
@


1.11
log
@cosmetic
@
text
@d37 1
a37 1
        IP=-LOG2_P(MAXRIN)
@


1.10
log
@a
@
text
@d12 1
a12 1
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
d15 1
d17 1
d24 3
a26 3
	SUBROUTINE  CROSRNG
     &	(CIRC1,CIRC2,LCIRC,NRING,T,Q,MAXRIN,JACUP,NUMR,QN,TOT,MODE)
C
d28 38
a65 38
C
	INTEGER  NUMR(3,NRING),MAXRIN
	DIMENSION  CIRC1(LCIRC),CIRC2(LCIRC)
	DOUBLE PRECISION  T(MAXRIN),Q(MAXRIN)
	DOUBLE PRECISION  QN,QT,PI,T7(-3:3)
	CHARACTER*1  MODE

	PI=4.0*DATAN(1.0D0)
	IF(MODE.EQ.'F')  PI=2*PI
	IP=-LOG2_P(MAXRIN)
C
	DO    J=1,MAXRIN
	Q(J)=0.0D0
	ENDDO
C
	DO    I=1,NRING
	WR=REAL(NUMR(1,I))*PI/REAL(NUMR(3,I))
     &		*REAL(MAXRIN)/REAL(NUMR(3,I))
C
	T(1)=DBLE(CIRC1(NUMR(2,I)))*CIRC2(NUMR(2,I))
	IF(NUMR(3,I).EQ.MAXRIN)  THEN
	T(2)=DBLE(CIRC1(NUMR(2,I)+1))*CIRC2(NUMR(2,I)+1)
	DO    J=3,MAXRIN,2
	JC=J+NUMR(2,I)-1
	T(J)=DBLE(CIRC1(JC))*CIRC2(JC)+DBLE(CIRC1(JC+1))*CIRC2(JC+1)
	T(J+1)=-DBLE(CIRC1(JC))*CIRC2(JC+1)+DBLE(CIRC1(JC+1))*CIRC2(JC)
	ENDDO
	DO    J=1,MAXRIN
	Q(J)=Q(J)+T(J)*WR
	ENDDO
	ELSE
	T(NUMR(3,I)+1)=DBLE(CIRC1(NUMR(2,I)+1))*CIRC2(NUMR(2,I)+1)/2.0
	T(2)=0.0
	DO    J=3,NUMR(3,I),2
	JC=J+NUMR(2,I)-1
	T(J)=DBLE(CIRC1(JC))*CIRC2(JC)+DBLE(CIRC1(JC+1))*CIRC2(JC+1)
	T(J+1)=-DBLE(CIRC1(JC))*CIRC2(JC+1)+DBLE(CIRC1(JC+1))*CIRC2(JC)
	ENDDO
d67 30
a96 30
	DO    J=1,NUMR(3,I)+1
	Q(J)=Q(J)+T(J)*WR
	ENDDO
	ENDIF
 	ENDDO
C
	CALL  FFTR_D(Q,IP)
C
	QN=-1.0D20
	DO    J=1,MAXRIN
	IF(Q(J).GE.QN)  THEN
	QN=Q(J)
	JTOT=J
	ENDIF
	ENDDO
C
	IF(JACUP.EQ.0)  THEN
	TOT=JTOT
	ELSE
	DO    K=-3,3
        J=MOD(JTOT+K+MAXRIN-1,MAXRIN)+1
	T7(K)=Q(J)
	ENDDO
	CALL  PRB1D(T7,7,POS)
	K=INT(100.0/REAL(JACUP+1))
	TOT=REAL(JTOT)
     &	    +REAL(IFIX(POS))
     &	+REAL(K)*REAL(INT(POS*100.0/REAL(K)))/100.0
	ENDIF
	END
@


1.9
log
@ff
@
text
@d32 1
a32 1
CNO_SAVE
@


1.8
log
@change wasn't very f77 compatible, fixed it
@
text
@d27 1
a27 1
	INTEGER*2  NUMR(3,NRING),MAXRIN,CMP
d35 1
a35 2
	IP=MAXRIN
	IP=-LOG2_P(IP)
d85 1
a85 5
C
C Use of additional variable to convert type 
C
        CMP = JTOT+K+MAXRIN-1
        J=MOD(CMP,MAXRIN)+1
@


1.7
log
@added type change call for f90 compatibility
@
text
@d27 1
a27 1
	INTEGER*2  NUMR(3,NRING),MAXRIN
d86 5
a90 1
	J=MOD(INT(JTOT+K+MAXRIN-1,2),MAXRIN)+1
@


1.6
log
@crosrng.f
modified intrinsic function call for f90 compatibility
@
text
@d86 1
a86 1
	J=MOD(JTOT+K+MAXRIN-1,MAXRIN)+1
@


1.5
log
@*** empty log message ***
@
text
@d90 1
a90 1
	K=JNINT(100.0/REAL(JACUP+1))
d93 1
a93 1
     &	+REAL(K)*REAL(JNINT(POS*100.0/REAL(K)))/100.0
@


1.4
log
@*** empty log message ***
@
text
@d38 3
a40 2
	DO  11  J=1,MAXRIN
11	Q(J)=0.0D0
d42 1
a42 1
	DO  1  I=1,NRING
d49 1
a49 1
	DO  3  J=3,MAXRIN,2
d53 4
a56 3
 3	CONTINUE
	DO  4  J=1,MAXRIN
4	Q(J)=Q(J)+T(J)*WR
d60 1
a60 1
	DO  31  J=3,NUMR(3,I),2
d64 1
a64 1
 31	CONTINUE
d66 3
a68 2
	DO  44  J=1,NUMR(3,I)+1
44	Q(J)=Q(J)+T(J)*WR
d70 1
a70 1
 1	CONTINUE
d75 1
a75 1
	DO  20  J=1,MAXRIN
d80 1
a80 1
20	CONTINUE
d85 1
a85 1
	DO  81  K=-3,3
d87 2
a88 1
81	T7(K)=Q(J)
@


1.3
log
@no change
@
text
@d42 2
a43 2
	WR=FLOAT(NUMR(1,I))*PI/FLOAT(NUMR(3,I))
     &		*FLOAT(MAXRIN)/FLOAT(NUMR(3,I))
d86 2
a87 2
	K=JNINT(100.0/FLOAT(JACUP+1))
	TOT=FLOAT(JTOT)
d89 1
a89 1
     &	+FLOAT(K)*FLOAT(JNINT(POS*100.0/FLOAT(K)))/100.0
@


1.2
log
@nosave
@
text
@d1 21
@


1.1
log
@Initial revision
@
text
@d11 1
d42 1
a42 1
C###
@
