head	1.21;
access;
symbols
	pre_mrcs:1.21
	healthdept_2018:1.21
	pre_getangas:1.18
	GPL2010:1.17
	pre_GPL2010:1.16
	pre_var_equation:1.16
	pre_fftwrings:1.16
	pre_opfiles:1.16
	src:1.16
	best-code:1.16
	x-named-regs:1.16
	x:1.16
	v13-00:1.16
	pre_GPL:1.14
	prec_CA:1.14
	noindx:1.13
	Bproc:1.12
	oct21:1.4
	last77:1.4;
locks; strict;
comment	@c @;


1.21
date	2018.10.03.14.34.02;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2014.09.18.13.43.10;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2012.02.10.20.33.50;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2010.12.01.17.02.04;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2010.06.24.13.25.12;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.17.20.44.51;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.17.18.35.15;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.20.21.41.05;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.11.14.08.37;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.08.17.15.59.31;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.08.10.15.22.27;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.01.18.19.47.07;	author bimal;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.18.19.36.35;	author bimal;	state Exp;
branches;
next	1.8;

1.8
date	99.12.28.19.54.32;	author bimal;	state Exp;
branches;
next	1.7;

1.7
date	99.12.27.17.59.04;	author bimal;	state Exp;
branches;
next	1.6;

1.6
date	99.12.07.15.25.46;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.11.10.23.09.10;	author yuchen;	state Exp;
branches;
next	1.4;

1.4
date	97.10.01.21.38.00;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.01.12.22.07.08;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.02.57;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.47.34;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.21
log
@email_health_dept
@
text
@
C ++********************************************************************
C                                                                      *
C CENGR3.F                                      6/01/83  Joachim Frank *
C           LONG FILENAMES                       JAN 89  ArDean Leith  *
C           ERROR TRAPS                          FEB 12  ArDean Leith  *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2012  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  CENGR3(LUN1)                                                        *
C                                                                      *
C  PURPOSE:                                                            *
C    CALCULATES CENTER OF GRAVITY AND RADIUS OF GYRATION OF A DENSITY  *
C    MASS STORED IN A THREE-D FILE. FOR REFERENCE, SEE INTERNATIONAL   *
C    TABLES OF CRYSTALLOGRAPHY, VOL.III P. 327.     --- JF 6/01/83     *
C                                                                      *
C  PARAMETERS:  LUN1     INPUT UNIT                                    *
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE CENGR3(LUN1)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC' 
 
        INTEGER                 :: LUN1

        CHARACTER(LEN=MAXNAM)   :: FILNAM
        REAL, ALLOCATABLE       :: AIMG(:)
 
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &               NX,NY,NZ,MAXIM,
     &               'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
	
        IF (ITYPE .NE. 3 .AND. ITYPE .NE. 1)  THEN
           CLOSE(LUN1)
           CALL  ERRT(2,'CG, CENGR3',NE)
           RETURN
        ENDIF

        CALL RDPRM1S(TH, NOT_USED,'THRESHOLD',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        ALLOCATE (AIMG(NX), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'CENGR3, AIMG',NX)
           RETURN
        ENDIF

C       FIRST CALCULATE CENTER OF GRAVITY
        XM = 0.0
        YM = 0.0
        ZM = 0.0
        BT = 0.0

        DO L=1,NZ
           I1 = (L-1) * NY
           DO  I=1,NY
              CALL REDLIN(LUN1,AIMG,NX,I+I1)
              DO  K=1,NX
                 IF (AIMG(K) > TH) THEN
                    B  = AIMG(K)
                    BT = B  + BT
                    XM = XM + B * K
                    YM = YM + B * I
                    ZM = ZM + B * L
                 ENDIF  
              ENDDO
           ENDDO
        ENDDO

        IF (BT == 0.0) THEN 
           CALL ERRT(101,'NO CG FOUND FOR THIS THRESHOLD',NE)
           GOTO 999
        ENDIF

        ZM = ZM / BT
        YM = YM / BT
        XM = XM / BT
                

        IF (ITYPE == 3) THEN
C          NOW CALCULATE RADIUS OF GYRATION, RG
           BT = 0.0
           RG = 0.0
           DO  L=1,NZ
              I1 = (L-1)*NY
              DO I=1,NY
                 REST = (YM-I)**2 + (ZM-L) **2

                 CALL REDLIN(LUN1,AIMG,NX,I+I1)

                 DO K=1,NX
                    IF (AIMG(K) > TH) THEN
                       RG = RG + AIMG(K) * ((XM-K) ** 2+REST)
                       BT = BT + AIMG(K)
                    ENDIF
                 ENDDO
              ENDDO
           ENDDO
           IF (BT == 0.0) THEN 
              CALL ERRT(101,
     &           'NO RADIUS OF GYRATION FOUND FOR THIS THRESHOLD',NE)
              GOTO 999
           ENDIF

           RG = SQRT(RG / BT)
        ENDIF        

        XM = XM - NX/2 -1   
        YM = YM - NY/2 -1 
        ZM = ZM - NZ/2 -1 

        IF (ITYPE == 3) THEN
           WRITE(NOUT,201) XM,YM,ZM, RG
201        FORMAT('  Center Of Gravity:',
     &            '  X= ',F7.2,'  Y= ',F7.2,'  Z= ',F7.2,/,
     &     '  Radius Of Gyration= ',F12.2,/)

           CALL REG_SET_NSEL(1,4,XM,YM,ZM,RG, 0.0,IRTFLG)

        ELSE
           WRITE(NOUT,202) XM,YM
202        FORMAT('  Center Of Gravity:   X = ',F8.2,'  Y = ',F8.2,/)

           CALL REG_SET_NSEL(1,2,XM,YM, 0.0,0.0,0.0,IRTFLG)
        ENDIF

999     IF (ALLOCATED(AIMG)) DEALLOCATE (AIMG)

        END

@


1.20
log
@output formatting
@
text
@d14 1
a14 1
C=* Email: spider@@wadsworth.org                                        *
@


1.19
log
@error traps, nx, cosmetic
@
text
@d138 1
a138 1
           WRITE(NOUT,201) XM,YM,ZM,RG
d140 2
a141 2
     &     '           X = ',F7.2,'  Y = ',F7.2,'  Z = ',F7.2,/,
     &     '   Radius Of Gyration = ',F12.2,/)
@


1.18
log
@output formatting & cosmetic & errors
@
text
@d4 3
a6 2
C CENGR3.F                                                               *
C                                       LONG FILENAMES JAN 89 al
d12 1
a12 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d30 1
a30 1
C  CENGR3(LUN3)                                                        *
d37 1
a37 1
C  PARAMETERS:  LUN3     INPUT UNIT                                    *
d42 1
a42 1
        SUBROUTINE CENGR3(LUN3)
d47 2
a49 1
        CHARACTER(LEN=1)        :: NULL = CHAR(0)
d53 2
a54 2
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN3,'O',ITYPE,
     &               NSAM,NROW,NSLICE,MAXIM,
d59 1
a59 1
           CLOSE(LUN3)
d64 8
a71 1
        CALL RDPRM(TH,NOT_USED,'THRESHOLD')
d79 6
a84 13
        ALLOCATE (AIMG(NSAM), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'CENGR3, AIMG',NSAM)
           CLOSE(LUN3)
           RETURN
        ENDIF

        DO L=1,NSLICE
           I1 = (L-1) * NROW
           DO  I=1,NROW
              CALL REDLIN(LUN3,AIMG,NSAM,I+I1)
              DO  K=1,NSAM
                 IF (AIMG(K) .GT. TH) THEN
d95 5
d104 3
a106 2
C       NOW CALCULATE RADIUS OF GYRATION, RG
        IF (ITYPE .EQ. 3) THEN
d109 9
a117 7
           DO  L=1,NSLICE
              I1 = (L-1)*NROW
              DO I=1,NROW
                 REST = (YM-I)**2+(ZM-L)**2
                 CALL REDLIN(LUN3,AIMG,NSAM,I+I1)
                 DO K=1,NSAM
                    IF (AIMG(K) .GT. TH) THEN
d124 7
a130 1
           RG = SQRT(RG/BT)
d133 3
a135 3
        XM = XM - NSAM/2   -1   
        YM = YM - NROW/2   -1 
        ZM = ZM - NSLICE/2 -1 
d137 1
a137 1
        IF (ITYPE .EQ. 3) THEN
d152 1
a152 1
        DEALLOCATE (AIMG)
@


1.17
log
@GPL_2010
@
text
@d29 1
a29 1
C  CENGR3(LUN3)                                                             *
d32 6
a37 8
C     CALCULATES CENTER OF GRAVITY AND RADIUS OF GYRATION OF A DENSITY
C    MASS STORED IN A THREE-D FILE. FOR REFERENCE, SEE INTERNATIONAL
C    TABLES OF CRYSTALLOGRAPHY, VOL.III P. 327.     --- JF 6/01/83
C
C  PARAMETERS:                                                         *
C
C  SUPPORT_ROUTINE
C
d46 4
a49 6
        CHARACTER(LEN=MAXNAM)   ::  FILNAM
        COMMON /COMMUN/FILNAM
        REAL, ALLOCATABLE, DIMENSION(:) :: AIMG

        CHARACTER     NULL

d58 1
a58 1
           CALL  ERRT(2,'CG 3',NE)
d65 4
a68 4
        XM=0.0
        YM=0.0
        ZM=0.0
        BT=0.0
d72 2
a73 1
           CALL ERRT(46,'CG 3, AIMG',IER)
d76 3
a78 2
        DO  L=1,NSLICE
           I1=(L-1)*NROW
d82 6
a87 6
                 IF (AIMG(K).GT.TH) THEN
                    B=AIMG(K)
                    BT=B+BT
                    XM=XM+B*K
                    YM=YM+B*I
                    ZM=ZM+B*L
a91 4
        ZM=ZM/BT
        YM=YM/BT
        XM=XM/BT
        
d93 4
d98 3
a100 3
        IF (ITYPE.EQ.3) THEN
           BT=0.0
           RG=0.0
d102 3
a104 3
              I1=(L-1)*NROW
              DO  I=1,NROW
                 REST=(YM-I)**2+(ZM-L)**2
d107 3
a109 3
                    IF (AIMG(K).GT.TH) THEN
                       RG=RG+AIMG(K)*((XM-K)**2+REST)
                       BT=BT+AIMG(K)
d114 1
a114 1
           RG=SQRT(RG/BT)
d117 9
a125 10
        XM=XM-NSAM/2-1
        YM=YM-NROW/2-1
        ZM=ZM-NSLICE/2-1


        IF (ITYPE.EQ.3) THEN
           WRITE(NOUT,201)XM,YM,ZM,RG
201        FORMAT(' ** COMPONENTS OF CENTER OF GRAVITY:'//,
     &     '           X = ',F7.2,'  Y = ',F7.2,'  Z = ',F7.2,
     &     //'      RADIUS OF GYRATION = ',F12.2/)
d127 1
a127 1
           CALL REG_SET_NSEL(1,4,XM,YM,ZM,RG,0.0,IRTFLG)
d130 2
a131 3
           WRITE(NOUT,202)XM,YM
202        FORMAT(' ** COMPONENTS OF CENTER OF GRAVITY:'//,
     &     '           X = ',F7.2,'  Y = ',F7.2)
d133 1
a133 1
           CALL REG_SET_NSEL(1,2,XM,YM,0.0,0.0,0.0,IRTFLG)
@


1.16
log
@GPL License fixed
@
text
@a7 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d9 5
a13 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d15 1
a15 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.15
log
@HRI GPL License used
@
text
@a7 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d11 1
a11 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a30 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.14
log
@opfilec
@
text
@d9 24
@


1.13
log
@nloop,iloop_removed
@
text
@a26 1
C        1         2         3         4         5         6         7 *
d33 3
a35 1
       
a38 1
        CHARACTER *81 FILNAM
d42 4
a45 6
        CALL OPFILE(.TRUE.,FILNAM,LUN3,'O',ITYPE,NSAM,NROW,NSLICE,MAXIM,
     &   'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(4,'CG 3',NE)
           RETURN    
        ENDIF
a116 4
C          IF (NSEL(1).NE.0)PARAM(NSEL(1))=XM
C          IF (NSEL(2).NE.0)PARAM(NSEL(2))=YM
C          IF (NSEL(3).NE.0)PARAM(NSEL(3))=ZM
C          IF (NSEL(4).NE.0)PARAM(NSEL(4))=RG
a123 2
C          IF (NSEL(1).NE.0)PARAM(NSEL(1))=XM
C          IF (NSEL(2).NE.0)PARAM(NSEL(2))=YM
@


1.12
log
@reg_set_nsel params changed
@
text
@d55 1
a55 1
        CALL RDPRM(TH,NLOOP,ILOOP,'THRESHOLD')
@


1.11
log
@used reg_st_nsel
@
text
@d4 1
a4 1
C CENGR3                                                               *
d123 1
a123 1
           CALL REG_SET_NSEL(1,XM,YM,ZM,RG,0.0,IRTFLG)
d132 1
a132 1
           CALL REG_SET_NSEL(1,XM,YM,0.0,0.0,0.0,IRTFLG)
@


1.10
log
@cosmetic
@
text
@d4 2
a5 1
C                                                                      *
d16 1
a16 1
C                                                                      *
d19 3
a21 3
C                                                                      *
C
C                                       LONG FILENAMES JAN 89 al
a22 5
C
C CALCULATES CENTER OF GRAVITY AND RADIUS OF GYRATION OF A DENSITY
C MASS STORED IN A THREE-D FILE. FOR REFERENCE, SEE INTERNATIONAL
C TABLES OF CRYSTALLOGRAPHY, VOL.III P. 327.     --- JF 6/01/83
C
d25 1
a25 2
C
C SUPPORT_ROUTINE
a56 1

d116 8
a123 2
     1     '           X = ',F7.2,'  Y = ',F7.2,'  Z = ',F7.2,
     2     //'      RADIUS OF GYRATION = ',F12.2/)
a124 4
           IF (NSEL(1).NE.0)PARAM(NSEL(1))=XM
           IF (NSEL(2).NE.0)PARAM(NSEL(2))=YM
           IF (NSEL(3).NE.0)PARAM(NSEL(3))=ZM
           IF (NSEL(4).NE.0)PARAM(NSEL(4))=RG
d128 1
a128 1
     1     '           X = ',F7.2,'  Y = ',F7.2)
d130 3
a132 2
           IF (NSEL(1).NE.0)PARAM(NSEL(1))=XM
           IF (NSEL(2).NE.0)PARAM(NSEL(2))=YM
@


1.9
log
@cosmetic
@
text
@d38 1
a38 1
        INCLUDE CMBLOCK.INC
@


1.8
log
@adapted to do operation CG
@
text
@d38 1
a38 1
        INCLUDE '/net/ithaca/usr1/spider/src/CMBLOCK.INC' 
@


1.7
log
@adapted for dynamical memory allocation
@
text
@d38 1
a38 1
        INCLUDE 'CMBLOCK.INC' 
d48 7
a54 4
     &   'THREED',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 205

        IF(ITYPE.NE.3)  THEN
d56 1
a56 1
           CALL  ERRT(2,'CG 3S',NE)
d60 1
a60 1
        CALL RDPRM(TH,NLOOP,ILOOP,'THRESHOLD$')
d62 2
a63 1
C FIRST CALCULATE CENTER OF GRAVITY
d71 1
a71 1
           CALL ERRT(46,'CG 3S, AIMG',IER)
d79 7
a85 8
                 IF (AIMG(K).LT.TH)GOTO 70
                 B=AIMG(K)
                 IF (FCHAR(5:5).EQ.'S')B=1.
                 BT=B+BT
                 XM=XM+B*(K)
                 YM=YM+B*(I)
                 ZM=ZM+B*(L)
70               CONTINUE
d92 1
d94 15
a108 14
C NOW CALCULATE RADIUS OF GYRATION, RG
        BT=0.0
        RG=0.0
        DO  L=1,NSLICE
           I1=(L-1)*NROW
           DO  I=1,NROW
              REST=(YM-I)**2+(ZM-L)**2
              CALL REDLIN(LUN3,AIMG,NSAM,I+I1)
              DO K=1,NSAM
                 IF (AIMG(K).LT.TH)GOTO 170
                 IF (FCHAR(5:5) .EQ. 'S')AIMG(K)=1.
                 RG=RG+AIMG(K)*((XM-K)**2+REST)
                 BT=BT+AIMG(K)
170              CONTINUE
d111 3
a113 2
        ENDDO
        RG=SQRT(RG/BT)
d117 16
a132 10
C
        WRITE(NOUT,201)XM,YM,ZM,RG
201     FORMAT(' ** COMPONENTS OF CENTER OF GRAVITY:'//,
     1 '           X = ',F7.2,'  Y = ',F7.2,'  Z = ',F7.2,
     2 //'      RADIUS OF GYRATION = ',F12.2/)

        IF (NSEL(1).NE.0)PARAM(NSEL(1))=XM
        IF (NSEL(2).NE.0)PARAM(NSEL(2))=YM
        IF (NSEL(3).NE.0)PARAM(NSEL(3))=ZM
        IF (NSEL(4).NE.0)PARAM(NSEL(4))=RG
d134 4
d139 1
a139 1
205     CONTINUE
@


1.6
log
@header
@
text
@d28 5
a32 2
C                                                                      *
C        0         2         3         4         5         6         7 *
d36 1
a36 1
	SUBROUTINE CENGR3(LUN3)
d38 2
a39 2
	INCLUDE 'CMBLOCK.INC' 
	COMMON BUF(1)
d41 1
d46 10
a55 1
        NULL=CHAR(0)
d57 1
a57 2
	CALL FILERD(FILNAM,NLET,NULL,'THREED',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
a58 4
	CALL OPENF(FILNAM,LUN3,NSAM,NROW,'OLD',NF,NSLICE)
	IF(NF.NE.2)RETURN
	CALL RDPRM(TH,NLOOP,ILOOP,'THRESHOLD$')

d60 29
a88 22
	XM=0.0
	YM=0.0
	ZM=0.0
	BT=0.0
	DO  L=1,NSLICE
	I1=(L-1)*NROW
	DO   I=1,NROW
	CALL REDLIN(LUN3,BUF,NSAM,I+I1)
	DO 70  K=1,NSAM
	IF (BUF(K).LT.TH)GOTO 70
	B=BUF(K)
	IF (FCHAR(5:5).EQ.'S')B=1.
	BT=B+BT
	XM=XM+B*(K)
	YM=YM+B*(I)
	ZM=ZM+B*(L)
70	CONTINUE
	ENDDO
	ENDDO
	ZM=ZM/BT
	YM=YM/BT
	XM=XM/BT
d91 20
a110 19
	BT=0.0
	RG=0.0
	DO  L=1,NSLICE
	I1=(L-1)*NROW
	DO  I=1,NROW
	REST=(YM-I)**2+(ZM-L)**2
	CALL REDLIN(LUN3,BUF,NSAM,I+I1)
	DO 170 K=1,NSAM
	IF (BUF(K).LT.TH)GOTO 170
	IF (FCHAR(5:5) .EQ. 'S')BUF(K)=1.
	RG=RG+BUF(K)*((XM-K)**2+REST)
	BT=BT+BUF(K)
170	CONTINUE
	ENDDO
	ENDDO
	RG=SQRT(RG/BT)
	XM=XM-NSAM/2-1
	YM=YM-NROW/2-1
	ZM=ZM-NSLICE/2-1
d112 2
a113 2
	WRITE(NOUT,201)XM,YM,ZM,RG
201	FORMAT(' ** COMPONENTS OF CENTER OF GRAVITY:'//,
d117 9
a125 5
	IF (NSEL(1).NE.0)PARAM(NSEL(1))=XM
	IF (NSEL(2).NE.0)PARAM(NSEL(2))=YM
	IF (NSEL(3).NE.0)PARAM(NSEL(3))=ZM
	IF (NSEL(4).NE.0)PARAM(NSEL(4))=RG
	END
@


1.5
log
@a
@
text
@d2 18
d27 5
d34 1
@


1.4
log
@*** empty log message ***
@
text
@d19 1
a19 1
CNO_SAVE
@


1.3
log
@nosave
@
text
@a10 2

#ifdef SP_UNIX
a11 4
#else
	INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif

d32 1
a32 1
	DO 100 L=1,NSLICE
d34 1
a34 1
	DO 80  I=1,NROW
d45 2
a46 2
80	CONTINUE
100	CONTINUE
d54 1
a54 1
	DO 200 L=1,NSLICE
d56 1
a56 1
	DO 180 I=1,NROW
d65 2
a66 2
180	CONTINUE
200	CONTINUE
a80 2

	RETURN
@


1.2
log
@cpp_lines_added
@
text
@d25 1
a25 1

@


1.1
log
@Initial revision
@
text
@d12 3
d16 1
@
