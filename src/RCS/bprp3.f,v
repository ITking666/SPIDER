head	1.98;
access;
symbols
	healthdept_2018:1.98
	pre_getangas:1.85
	pre_GPL2010:1.84
	pre_var_equation:1.83
	pre_fftwrings:1.81
	pre_opfiles:1.81
	src:1.81
	best-code:1.81
	x-named-regs:1.81
	x:1.81
	v13-00:1.81
	pre_GPL:1.80
	prec_CA:1.75
	noindx:1.70
	Bproc:1.64
	oct21:1.48
	last77:1.45;
locks; strict;
comment	@c @;


1.98
date	2014.01.12.19.53.39;	author leith;	state Exp;
branches;
next	1.97;

1.97
date	2013.04.17.19.59.37;	author leith;	state Exp;
branches;
next	1.96;

1.96
date	2013.01.04.15.23.15;	author leith;	state Exp;
branches;
next	1.95;

1.95
date	2013.01.04.15.19.47;	author leith;	state Exp;
branches;
next	1.94;

1.94
date	2012.08.28.19.04.03;	author leith;	state Exp;
branches;
next	1.93;

1.93
date	2012.04.18.12.49.18;	author leith;	state Exp;
branches;
next	1.92;

1.92
date	2012.04.09.16.04.07;	author leith;	state Exp;
branches;
next	1.91;

1.91
date	2012.02.28.17.37.30;	author leith;	state Exp;
branches;
next	1.90;

1.90
date	2012.02.23.14.36.29;	author leith;	state Exp;
branches;
next	1.89;

1.89
date	2012.01.03.13.50.56;	author leith;	state Exp;
branches;
next	1.88;

1.88
date	2011.11.08.16.17.06;	author leith;	state Exp;
branches;
next	1.87;

1.87
date	2011.11.08.15.03.45;	author leith;	state Exp;
branches;
next	1.86;

1.86
date	2011.05.17.12.59.26;	author leith;	state Exp;
branches;
next	1.85;

1.85
date	2010.10.19.18.58.52;	author leith;	state Exp;
branches;
next	1.84;

1.84
date	2009.11.04.14.31.48;	author leith;	state Exp;
branches;
next	1.83;

1.83
date	2008.10.31.16.41.59;	author leith;	state Exp;
branches;
next	1.82;

1.82
date	2008.10.22.11.44.50;	author leith;	state Exp;
branches;
next	1.81;

1.81
date	2005.10.17.16.55.43;	author leith;	state Exp;
branches;
next	1.80;

1.80
date	2005.06.03.18.33.39;	author cyang;	state Exp;
branches;
next	1.79;

1.79
date	2005.03.03.02.31.26;	author cyang;	state Exp;
branches;
next	1.78;

1.78
date	2004.09.30.16.45.30;	author leith;	state Exp;
branches;
next	1.77;

1.77
date	2004.08.23.20.03.02;	author leith;	state Exp;
branches;
next	1.76;

1.76
date	2004.02.05.14.26.39;	author leith;	state Exp;
branches;
next	1.75;

1.75
date	2003.09.16.15.32.17;	author leith;	state Exp;
branches;
next	1.74;

1.74
date	2003.07.28.15.01.25;	author leith;	state Exp;
branches;
next	1.73;

1.73
date	2003.07.23.20.50.23;	author leith;	state Exp;
branches;
next	1.72;

1.72
date	2003.07.18.16.39.08;	author leith;	state Exp;
branches;
next	1.71;

1.71
date	2003.02.19.20.51.58;	author leith;	state Exp;
branches;
next	1.70;

1.70
date	2002.06.10.18.41.55;	author leith;	state Exp;
branches;
next	1.69;

1.69
date	2002.06.05.21.08.08;	author pawel;	state Exp;
branches;
next	1.68;

1.68
date	2002.05.03.22.14.53;	author pawel;	state Exp;
branches;
next	1.67;

1.67
date	2002.03.11.14.08.24;	author leith;	state Exp;
branches;
next	1.66;

1.66
date	2001.02.05.17.14.32;	author pawel;	state Exp;
branches;
next	1.65;

1.65
date	2001.02.05.17.02.42;	author pawel;	state Exp;
branches;
next	1.64;

1.64
date	2000.08.17.16.48.30;	author leith;	state Exp;
branches;
next	1.63;

1.63
date	2000.08.10.17.40.01;	author leith;	state Exp;
branches;
next	1.62;

1.62
date	2000.07.24.14.50.56;	author leith;	state Exp;
branches;
next	1.61;

1.61
date	2000.05.19.13.54.40;	author leith;	state Exp;
branches;
next	1.60;

1.60
date	2000.05.12.19.30.46;	author leith;	state Exp;
branches;
next	1.59;

1.59
date	2000.04.17.19.05.29;	author leith;	state Exp;
branches;
next	1.58;

1.58
date	2000.04.17.18.20.19;	author leith;	state Exp;
branches;
next	1.57;

1.57
date	2000.03.27.22.14.33;	author bimal;	state Exp;
branches;
next	1.56;

1.56
date	2000.01.27.15.57.04;	author leith;	state Exp;
branches;
next	1.55;

1.55
date	2000.01.25.15.37.46;	author bimal;	state Exp;
branches;
next	1.54;

1.54
date	2000.01.24.21.23.52;	author bimal;	state Exp;
branches;
next	1.53;

1.53
date	2000.01.18.19.53.20;	author bimal;	state Exp;
branches;
next	1.52;

1.52
date	2000.01.18.19.44.34;	author bimal;	state Exp;
branches;
next	1.51;

1.51
date	2000.01.06.16.46.08;	author bimal;	state Exp;
branches;
next	1.50;

1.50
date	99.11.10.18.33.56;	author pawel;	state Exp;
branches;
next	1.49;

1.49
date	99.11.10.16.56.02;	author pawel;	state Exp;
branches;
next	1.48;

1.48
date	99.08.10.17.18.26;	author pawel;	state Exp;
branches;
next	1.47;

1.47
date	99.07.30.15.25.46;	author pawel;	state Exp;
branches;
next	1.46;

1.46
date	99.07.30.15.25.03;	author pawel;	state Exp;
branches;
next	1.45;

1.45
date	99.03.18.21.00.16;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	98.12.07.16.21.24;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	98.12.03.20.37.04;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	98.12.03.17.04.09;	author pawel;	state Exp;
branches;
next	1.41;

1.41
date	98.12.02.19.09.34;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	98.12.01.14.48.27;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	98.11.30.19.20.05;	author pawel;	state Exp;
branches;
next	1.38;

1.38
date	98.11.30.17.49.45;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	98.11.30.17.28.44;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	98.11.24.13.23.33;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	98.11.05.19.13.34;	author pawel;	state Exp;
branches;
next	1.34;

1.34
date	98.10.21.13.42.18;	author pawel;	state Exp;
branches;
next	1.33;

1.33
date	98.04.24.19.55.41;	author pawel;	state Exp;
branches;
next	1.32;

1.32
date	98.04.06.20.08.04;	author pawel;	state Exp;
branches;
next	1.31;

1.31
date	98.04.06.19.35.31;	author pawel;	state Exp;
branches;
next	1.30;

1.30
date	98.04.01.23.01.10;	author pawel;	state Exp;
branches;
next	1.29;

1.29
date	97.10.31.19.40.53;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	97.10.17.15.19.22;	author pawel;	state Exp;
branches;
next	1.27;

1.27
date	97.10.02.13.08.06;	author pawel;	state Exp;
branches;
next	1.26;

1.26
date	97.04.23.13.23.36;	author pawel;	state Exp;
branches;
next	1.25;

1.25
date	97.04.23.13.02.41;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	97.04.15.17.24.52;	author pawel;	state Exp;
branches;
next	1.23;

1.23
date	97.02.15.15.47.35;	author pawel;	state Exp;
branches;
next	1.22;

1.22
date	97.02.10.18.25.23;	author pawel;	state Exp;
branches;
next	1.21;

1.21
date	97.02.07.21.04.08;	author pawel;	state Exp;
branches;
next	1.20;

1.20
date	96.12.03.15.38.09;	author mladjadj;	state Exp;
branches;
next	1.19;

1.19
date	96.12.02.22.10.53;	author mladjadj;	state Exp;
branches;
next	1.18;

1.18
date	96.12.02.22.05.47;	author mladjadj;	state Exp;
branches;
next	1.17;

1.17
date	96.10.30.22.13.30;	author pawel;	state Exp;
branches;
next	1.16;

1.16
date	96.08.14.18.49.06;	author pawel;	state Exp;
branches;
next	1.15;

1.15
date	96.04.18.12.28.02;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	95.12.08.22.24.04;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	95.11.13.15.40.40;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	95.10.05.15.02.21;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	95.08.09.13.55.49;	author mladjadj;	state Exp;
branches;
next	1.10;

1.10
date	95.08.07.14.07.58;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	95.07.27.21.15.58;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	95.07.11.18.04.13;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	95.03.02.22.07.39;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	95.01.30.20.54.22;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	95.01.30.20.14.17;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.01.26.21.27.59;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.01.26.14.42.34;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.10.14;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.16;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.98
log
@enter
@
text
@C **********************************************************************
c  BPRP3
C         CORRECTIONS APPLIED ON THE VOL. SIDE      01/10/94
C         COMPRESSION OF ANGLES                     08/14/96
C         SYMMETRIES CORRECTED                      01/2001
C         REAL SPACE SYM. AFTER ITERATIVE PROCESS   05/02
C         OPFILEC                                   FEB 03 ARDEAN LEITH
C         ADDED REG_SET FOR ITER                    AUG 00 ARDEAN LEITH
C         BUILDM PARAMETERS                         JUL 03 ARDEAN LEITH
C         MPI                                       FEB 04 Chao Yang
C         REFACTORED                                OCT 08 ARDEAN LEITH
C         MPI REFACTORED                            OCT 08 ARDEAN LEITH
C         OUTPUT SHORTENED                          NOV 09 ARDEAN LEITH
C         ORDER OF PSI,THETA,PHI LISTED WRONG       OCT 10 ARDEAN LEITH
C         REPS RENAMED BPRP                         MAY 11 ARDEAN LEITH
C         ILIST ALLOCATED                           MAY 11 ARDEAN LEITH
C         PREPCUB                                   NOV 11 ARDEAN LEITH
C         BCKPJ_LIN                                 DEC 12 ARDEAN LEITH
C         BP RP 3                                   APR 12 ARDEAN LEITH
C         BP RP 3 NO OVERALL VOL                    AUG 12 ARDEAN LEITH
C         DKLP                                      JAN 13 ARDEAN LEITH *
C         NEWFILE IMGNUM == -1 BUG on gfort         APR 13 ARDEAN LEITH *
C
C=**********************************************************************
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright (C)2002,2013 P. A. Penczek & ArDean Leith                *
C=* University of Texas - Houston Medical School                       *
C=* Email:  pawel.a.penczek@@uth.tmc.edu                                *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C=**********************************************************************
C
C  BPRP3
C
C  PURPOSE: REPROJECTIONS 3D, RICHARDSON'S METHOD, 
C           RECONSTRUCTION KEPT IN SQUARE TO INTRODUCE OTHER CONSTRAINTS.
C           AVERAGE OUTSIDE THE WINDOW IS SUBTRACTED
C           MIN, MAX RELATE TO THE PROJECTIONS.  SYMMETRIES IMPOSED.
C
C  CALLS: BPRP_2  (internal)
C         RPRQ 
C         ASTA 
C         PREPCUB 
C         BCKPJ_LIN 
C         PRJCQ_N 
C         BPRP_3  (internal)
C         SMT3_Q 
C         DOMIN3_S 
C         DOMAX3_S 
C         DOCORS3_S 
C         BMAX_C 
C         BMIN_C 
C         FMAX_Q 
C         FMIN_Q 
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE BPRP3()

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'
        INCLUDE 'F90ALLOC.INC'

        REAL, POINTER         :: PANG(:,:)
        REAL, POINTER         :: ANGSYM(:,:)
        REAL, ALLOCATABLE     :: SM(:,:),ANG(:,:), DM(:,:)
        REAL, ALLOCATABLE     :: CB(:,:,:)
        REAL, ALLOCATABLE     :: BCKN(:)
        REAL, ALLOCATABLE     :: BCKE(:)

        INTEGER, ALLOCATABLE  :: IPCUBE(:,:)
        INTEGER, ALLOCATABLE  :: LB(:) 

        INTEGER, ALLOCATABLE  :: ILIST(:),ILIST1(:),ILIST2(:)
 
        LOGICAL               :: WANT3,USELISTS,FBS_WANTED
        LOGICAL               :: MD,SAYIT,DO_OVERALL
        CHARACTER(LEN=MAXNAM) :: ANGDOC,FILPAT    ! MAXNAM FROM CMLIMIT
        CHARACTER(LEN=MAXNAM) :: SYMDOC           ! MAXNAM FROM CMLIMIT
        CHARACTER(LEN=MAXNAM) :: FILVOL 
        CHARACTER(LEN=1)      :: ANSW
        CHARACTER(LEN=1)      :: NULL = CHAR(0)
        DOUBLE PRECISION      :: ABA
        LOGICAL               :: ASKNAM = .TRUE.
        LOGICAL               :: FOUROK = .FALSE.

        INTEGER, PARAMETER    :: LUNPROJ = 20 
        INTEGER, PARAMETER    :: LUNDOC  = 80 
        INTEGER, PARAMETER    :: LUNXM   = 0    ! SELFILE NOT ALLOWED
        INTEGER, PARAMETER    :: LUNANG  = 81 
        INTEGER, PARAMETER    :: LUNVOL  = 21
        INTEGER, PARAMETER    :: LUNVOL1 = 22
        INTEGER, PARAMETER    :: LUNVOL2 = 23

        CALL SET_MPI(ICOMM,MYPID,MPIERR) ! SETS ICOMM AND MYPID
 
C       MEMORY FOR LISTS OF IMAGES    
        NILMAX  = NIMAXPLUS      ! FROM CMLIMIT
        ALLOCATE(ILIST1(NILMAX),
     &           ILIST2(NILMAX),
     &           ILIST(NILMAX),
     &           STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(46,'BPRP3; ILIST....',3*NILMAX)
           RETURN
        ENDIF 

C       OPEN FIRST INPUT FILE
C       RETURNS: NANG = NUMBER OF ANGLES = NUMBER OF PROJECTIONS
        CALL OPFILES(0,LUNPROJ,LUNDOC,LUNXM,  
     &             ASKNAM,FILPAT,NLET, 'O',
     &             IFORM ,NX,NY,NZ,NSTACK,
     &             'TEMPLATE FOR IMAGE FILES~',
     &             FOUROK, ILIST,NILMAX, 
     &             NDUM,NANG,IMG1, IRTFLG) 
        IF (IRTFLG .NE. 0) RETURN
        
        IF (FILPAT(NLET:NLET) == '@@') THEN
           CALL ERRT(101,
     &        'OPERATION DOES NOT WORK ON WHOLE STACKS',NE)
           GOTO 9999
        ENDIF  

        MAXNUM = MAXVAL(ILIST(1:NANG))

C       NANG - TOTAL NUMBER OF IMAGES
        IF (MYPID <= 0) WRITE(NOUT,90) NANG
90      FORMAT('  NUMBER OF IMAGES:',I8)
        
        WANT3    = (FCHAR(4:7) .EQ. 'RP 3')   ! WANT THREE VOLUMES
        USELISTS = (FCHAR(4:8) .EQ. 'RP 3L')  ! WANT THREE LISTS

#ifdef USE_MPI
        IF (WANT3) THEN   ! WANT THREE VOLUMES
           CALL ERRT(101,
     &     'OPERATION <BP RP 3> NOT AVAILABLE FOR MPI, USE <BP RP>',NE)
           GOTO 9999
        ENDIF
#endif

        !write(6,*)want3,uselists,fchar(4:8)
        IF (WANT3 .AND. USELISTS) THEN 
           CALL FILELIST(.FALSE.,LUNDOC,NULL,NLETP,
     &                   ILIST1,NILMAX,NANG1,
     &                   'IMAGES FOR FIRST SAMPLE VOLUME',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

           CALL FILELIST(.FALSE.,LUNDOC,NULL,NLETP,
     &                   ILIST2,NILMAX,NANG2,
     &                   'IMAGES FOR SECOND SAMPLE VOLUME',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

        ELSEIF (WANT3) THEN
C          RANDOMLY DIVIDE ILIST INTO 2 LISTS: ILIST1,ILIST2 
           CALL MAKETWOLISTS(ILIST,NANG,ILIST1,NANG1,ILIST2,NANG2)

           WRITE(NOUT,*) ' Random lists:',NANG1, NANG2
        ENDIF

        RI = (NX / 2) - 2    ! DEFAULT VALUE
        CALL RDPRM1S(RI,N_UNUSED,
     &              'RADIUS OF RECONSTRUCTED OBJECT',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999
        IRI = RI

        NDIM  = NX   ! LINEAR DIMENSION OF PROJECTIONS & RESTORATION
        LDP   = NDIM / 2 + 1
        LDPNM = LDP 

C       IDUM IS A DUMMY VARIABLE, VALUE OF ,NDIM2 IS DETERMINED HERE
        MD = .FALSE.
        CALL PREPCUB_S(NDIM,NDIM2,IDUM,RI,MD,LDP)
 
C       USE NDIM2 TO ALLOCATE: IPCUBE 
C       TOTAL MEMORY IS VOLUMES: CB, BCKN, BCKE...
C       PLUS TWO 2D PROJECTIONS.
C       CB   - BACK-PROJECTED ORIGINAL PROJECTIONS, READ FROM FILE
C       BCKE - WORKING VOLUME
C       BCKN - CURRENT RECONSTRUCTION
        ALLOCATE (IPCUBE(5,NDIM2), 
     &            BCKN(NDIM*NDIM*NDIM), 
     &            BCKE(NDIM*NDIM*NDIM), 
     &            CB  (NDIM,NDIM,NDIM), 
     &            ANG (3,NANG),
     &            DM  (9,NANG),
     &            LB  (NANG), 
     &            STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           MWANT = 5*NDIM2 + NDIM*NDIM*NDIM + 3*NANG + 9*NANG +
     &             NANG + NDIM*NDIM*NDIM 
           CALL ERRT(46,'BPRP, IPCUBE...',MWANT)
           GOTO 9999
        ENDIF

C       MAKES LIST OF VOXEL LOCS ON EACH LINE VOLUME WITHIN RADIUS          *
        MD = .TRUE.
        CALL PREPCUB_S(NDIM,NDIM2,IPCUBE,RI,MD,LDP)  ! RETURNS: IPCUBE

C       RETRIEVE ARRAY WITH ANGLES DATA IN IT
        MAXXT = 4
        MAXYT = MAXNUM
        CALL GETDOCDAT('ANGLES DOC',.TRUE.,ANGDOC,
     &                  LUNANG,.FALSE.,MAXXT,
     &                  MAXYT,PANG,IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(101,'CAN NOT OPEN ANGLES FILE',NE)
           GOTO 9999
        ENDIF  

C       RETRIEVE ARRAY WITH SYMMETRIES DATA IN IT
        MAXXS = 0
        NSYM  = 0
        CALL GETDOCDAT('SYMMETRIES DOC',.TRUE.,SYMDOC,
     &                 LUNANG,.TRUE.,MAXXS,
     &                 NSYM,ANGSYM,IRTFLG)
        IF (IRTFLG .NE. 0) NSYM = 1

        ALLOCATE(SM(9,NSYM), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'BP RP; SM',IER)
           GOTO 9999
        ENDIF
 
        IF (NSYM > 1)  THEN
           CALL BUILDS(SM,NSYM,ANGSYM(1,1),IRTFLG)
           DEALLOCATE(ANGSYM)

           WRITE(NOUT,2021) NSYM
2021       FORMAT(/,'  NUMBER OF SYMMETRIES:',I7,/)
        ENDIF

C       OPEN OUTPUT VOLUME
        MAXIM = 0
        IFORM = 3
        CALL OPFILEC(0,.TRUE.,FILVOL,LUNVOL,'U',
     &               IFORM,NDIM,NDIM,NDIM,
     &               MAXIM,'RECONSTRUCTED VOLUME',
     &               .FALSE.,IRTFLG)
        DO_OVERALL = (FILVOL(1:1) .NE. '*')
        IF (IRTFLG .NE. 0 .AND. DO_OVERALL ) GOTO 9999

        IF (WANT3) THEN
           MAXIM = 0
           IFORM = 3
           CALL OPFILEC(0,.TRUE.,FILVOL,LUNVOL1,'U',
     &                  IFORM,NDIM,NDIM,NDIM,
     &                  MAXIM,'FIRST SAMPLE VOLUME',
     &                 .FALSE.,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

           MAXIM = 0
           CALL OPFILEC(0,.TRUE.,FILVOL,LUNVOL2,'U',
     &               IFORM,NDIM,NDIM,NDIM,
     &               MAXIM,'SECOND SAMPLE VOLUME',
     &                .FALSE.,IRTFLG)
           IF (IRTFLG .NE. 0)  GOTO 9999
        ENDIF

        ALA = 1.0e-4
        AIM = 0
        CALL  RDPRM2S(ALA,AIM, NOT_USED,   
     &               'LAMBDA, CORRECTION LIMIT',IRTFLG)
        IF (IRTFLG .NE. 0)  GOTO 9999

        MAXIT = 100
        MODE  = 8
        CALL  RDPRI2S(MAXIT,MODE,NOT_USED,
     &                'ITERATION LIMIT, MODE',IRTFLG)
        IF (IRTFLG .NE. 0)  GOTO 9999

        TMIN = FMIN   ! DEFAULT FROM COMMON
        TMAX = FMAX
        CALL  RDPRM2S(TMIN,TMAX, NOT_USED, 
     &                'MINIMUM, MAXIMUM',IRTFLG)
        IF (IRTFLG .NE. 0)  GOTO 9999

        FBSFLAG = 0
        CALL RDPRM2S(SMOOTH, FBSFLAG,NOT_USED,
     &              'SMOOTHING CONST (0.0-0.999)',IRTFLG)
        IF (IRTFLG .NE. 0)  GOTO 9999

        FBS_WANTED = (FBSFLAG > 0)  ! NOT DOCUMENTED!!!!!  

C       FIND NUMBER OF OMP THREADS
        CALL GETTHREADS(NUMTH)

C       CB   - KEEPS BACK-PROJECTED ORIGINAL PROJECTIONS, 
C              READ FROM THE DISK
C       BCKE - WORKING VOLUME
C       BCKN - CURRENT RECONSTRUCTION

        IF (DO_OVERALL) THEN
           WRITE(NOUT,92)'  CREATING VOLUME ---------------------------'
92         FORMAT(/,A)

C          RETRIEVE ANGLES, ANG ARRAY, AND DM FROM PANG
           SAYIT = (MYPID <= 0) .AND. VERBOSE
           CALL BPRP_DM(NANG,PANG,ILIST,ANG,DM,SAYIT,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

C          READS IMAGES AND BACKPROJECTS INTO: CB
           CALL BPRP_2(NDIM,NANG,CB,ILIST,IPCUBE,NDIM2,DM,
     &              RI,FILPAT,MAXIM, 
     &              ABA,SM,NSYM,LUNPROJ,LUNVOL,
     &              BNORM, LDP,LDPNM,FBS_WANTED,  IRTFLG)


C          COMPRESS ANGLES INTO DM - ALTERS: ANG,NANG1,DM & LO!!
           CALL HIANG(ANG,NANG,DM,LB,LO)
           NANG = LO

           IF (MYPID <= 0) WRITE(NOUT,2027) NANG
2027       FORMAT('  EFFECTIVE NUMBER OF ANGLES:',I7)

#if defined ( USE_MPI) && defined (MPI_DEBUG) 
           T0 = MPI_WTIME()
#endif

           CALL BPRP_3(BCKN,BCKE,NDIM,IPCUBE,NDIM2,
     &              DM,LB,NANG,IRI,ABA,
     &              SM,NSYM,NUMTH,LUNVOL,ITERDONE,BNORM,
     &              LDP,LDPNM,ALA,AIM,MAXIT,MODE,TMIN,TMAX,SMOOTH)

#if defined ( USE_MPI) && defined (MPI_DEBUG) 
           T1 = MPI_WTIME()  - T0
           IF (MYPID == 0) THEN
              WRITE(6,222) T1
 222          FORMAT('  BPRP TIME:',ES11.3)
           ENDIF 
#endif

C          SAVE OVERALL OUTPUT VOLUME
           CALL WRTVOL(LUNVOL,NDIM,NDIM, 1,NDIM,BCKN,IRTFLG)
           CLOSE(LUNVOL)
        ENDIF

C       SET ITERDONE IN REG NSEL(1)
        CALL REG_SET_NSEL(1,1,REAL(ITERDONE),0.0, 0.0, 
     &                    0.0, 0.0,IRTFLG)

        IF (WANT3) THEN

           WRITE(NOUT,*) ' '
           WRITE(NOUT,*) 
     &          ' CREATING FIRST SAMPLED VOLUME ------------------'

C          OPEN NEXT INPUT PROJECTION
           K      = 1
           IMGNUM = 0
           CALL NEXTFILE(K,       ILIST1, 
     &                   FOUROK,  0,
     &                   NANG1,   MAXIM,   
     &                   LUNPROJ, 0, 
     &                   FILPAT,  'O',
     &                   IMGNUM,  IRTFLG)
 
C          RETRIEVE ANGLES, ANG ARRAY, AND DM FROM PANG

           CALL BPRP_DM(NANG1,PANG,ILIST1,ANG,DM,SAYIT,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

C          READS IMAGES AND BACKPROJECTS THEM INTO: CB
           CALL BPRP_2(NDIM,NANG1,CB,ILIST1,IPCUBE,NDIM2,DM,
     &                 RI,FILPAT,MAXIM, 
     &                 ABA,SM,NSYM,LUNPROJ,LUNVOL1,
     &                 BNORM, LDP,LDPNM,FBS_WANTED,  IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

C          COMPRESS ANGLES INTO DM - ALTERS: ANG,NANG1,DM & LO!!
           CALL HIANG(ANG,NANG1,DM,LB,LO)
           NANG1 = LO
           IF (MYPID <= 0) WRITE(NOUT,2027) NANG1

           CALL BPRP_3(BCKN,BCKE,NDIM,IPCUBE,NDIM2,
     &              DM,LB,NANG1,IRI,ABA,
     &              SM,NSYM,NUMTH,LUNVOL1,ITERDONE,BNORM,
     &              LDP,LDPNM,ALA,AIM,MAXIT,MODE,TMIN,TMAX,SMOOTH)


C          SAVE FIRST OUTPUT SAMPLED VOLUME
           CALL WRTVOL(LUNVOL1,NDIM,NDIM, 1,NDIM,BCKN,IRTFLG)

           WRITE(NOUT,*) ' '
           WRITE(NOUT,*) 
     &         ' CREATING SECOND SAMPLED VOLUME ------------------'

C          OPEN NEXT INPUT PROJECTION
           K      = 1
           IMGNUM = 0
           CALL NEXTFILE(K,       ILIST2, 
     &                   FOUROK,  0,
     &                   NANG2,   MAXIM,   
     &                   LUNPROJ, 0, 
     &                   FILPAT,  'O',
     &                   IMGNUM,  IRTFLG)

C          RETRIEVE ANGLES, ANG ARRAY, AND DM FROM PANG
           CALL BPRP_DM(NANG2,PANG,  ILIST2,ANG,DM,SAYIT,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

C          READS IMAGES AND BACKPROJECTS THEM INTO: CB
           CALL BPRP_2(NDIM,NANG2,CB,ILIST2,IPCUBE,NDIM2,DM,
     &                 RI,FILPAT,MAXIM, 
     &                 ABA,SM,NSYM,LUNPROJ,LUNVOL2,
     &                 BNORM, LDP,LDPNM,FBS_WANTED,  IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

C          COMPRESS ANGLES INTO DM - ALTERS:  ANG,NANG2,DM & LO!!
           CALL HIANG(ANG,NANG2,DM,LB,LO)
           NANG2 = LO
           IF (MYPID <= 0) WRITE(NOUT,2027) NANG2

           CALL BPRP_3(BCKN,BCKE,NDIM,IPCUBE,NDIM2,
     &              DM,LB,NANG2,IRI,ABA,
     &              SM,NSYM,NUMTH,LUNVOL2,ITERDONE,BNORM,
     &              LDP,LDPNM,ALA,AIM,MAXIT,MODE,TMIN,TMAX,SMOOTH)

C          SAVE 2ND OUTPUT SAMPLED VOLUME
           CALL WRTVOL(LUNVOL2,NDIM,NDIM, 1,NDIM,BCKN,IRTFLG)
        ENDIF
        WRITE(NOUT,*) ' '


9999    IF (ALLOCATED(BCKN))   DEALLOCATE(BCKN)
        IF (ALLOCATED(BCKE))   DEALLOCATE(BCKE)
        IF (ALLOCATED(CB))     DEALLOCATE(CB)
        IF (ALLOCATED(LB))     DEALLOCATE(LB)
        IF (ALLOCATED(DM))     DEALLOCATE(DM)
        IF (ALLOCATED(ANG))    DEALLOCATE(ANG)
        IF (ALLOCATED(IPCUBE)) DEALLOCATE(IPCUBE)
        IF (ALLOCATED(ILIST))  DEALLOCATE(ILIST)
        IF (ALLOCATED(ILIST1)) DEALLOCATE(ILIST1)
        IF (ALLOCATED(ILIST2)) DEALLOCATE(ILIST2)
        IF (ALLOCATED(SM))     DEALLOCATE(SM)
        IF (ASSOCIATED(PANG))  DEALLOCATE(PANG)
                
        CLOSE(LUNVOL) 
        CLOSE(LUNVOL1) 
        CLOSE(LUNVOL2) 
        CLOSE(LUNPROJ) 
  
        END

C++****************************** BPRP_DM *****************************

        SUBROUTINE BPRP_DM(NANG,ANGBUF,ILIST,ANG,DM,SAYIT,IRTFLG)

        IMPLICIT NONE

        INCLUDE 'CMBLOCK.INC'

        INTEGER               :: NANG
        REAL                  :: ANGBUF(4,NANG)
        INTEGER               :: ILIST(NANG)
        REAL                  :: ANG(3,NANG)
        REAL                  :: DM(9,NANG)
        INTEGER               :: IRTFLG

        INTEGER               :: K,ITMP,ICOUNT,J
        LOGICAL               :: SAYIT
        REAL                  :: SSDUM

        IRTFLG = 1

        DO K=1,NANG

C          LOAD ANGLES FOR THIS IMAGE
C          ORDER IN DOCUMENT FILE IS PSI, THETA, PHI AND ANGLES ARE IN 
C          DEGREES! IN ANG ARRAY IT IS OTHER WAY AROUND

           ITMP   = ILIST(K)
           ICOUNT = ANGBUF(1,ITMP)
           IF (ICOUNT <= 0) THEN
C             MISSING KEY
              CALL ERRT(102,'MISSING ANGLES FOR IMAGE',ITMP)
              RETURN
           ENDIF

           ANG(3,K) = ANGBUF(2,ITMP)  ! NOTE ORDER REVERSAL!
           ANG(2,K) = ANGBUF(3,ITMP)
           ANG(1,K) = ANGBUF(4,ITMP)

C          CREATE ROTATION MATRIX: DM
           CALL CANG(ANG(1,K),ANG(2,K),ANG(3,K),
     &              .FALSE.,SSDUM,DM(1,K))
 
           IF (SAYIT) THEN
              WRITE(NOUT,333) K,(ANG(J,K),J=3,1,-1)
333           FORMAT('  IMAGE #:',I7,
     &               '  PSI:',F6.1,' THETA:',F6.1,' PHI:',F6.1)
           ENDIF
         ENDDO
         IRTFLG = 0
         END

C++*********************************************************************
C                                                                      
C  BPRP_2.F   ADDED REG_SET FOR ITER             AUG 2000 ARDEAN LEITH
C             REFACTORED REDPRS-->BPRP_2         APR 2012 ARDEAN LEITH
C                                                                      
C++*********************************************************************
C
C  PURPOSE:  LOADS PROJECTIONS. FINDS BACKGROUND OUTSIDE
C            OF PROJECTED CIRCLE.  BACK-PROJECTS IMAGES INTO VOLUME.
C            DETERMINES AVERAGE OUTSIDE OF CIRCLE WHICH WILL LATER BE
C            SUBTRACTED FROM FINAL VOLUME.  BILINEAR INTERPOLATION      
C                                                                      
C++*********************************************************************

        SUBROUTINE BPRP_2(N,NANG,CB,ILIST,IPCUBE,NN,DM,
     &                    RI,FILPAT,MAXIM, 
     &                    ABA,SM,NSYM,LUNPROJ,LUNVOL,
     &                    BNORM, LDP,LDPNM,FBS_WANTED,  IRTFLG)
 
        USE TYPE_KINDS
        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        INTEGER               :: N,NANG
        REAL                  :: CB(N,N,N),ANG(3,NANG)
        INTEGER               :: ILIST(NANG),IPCUBE(5,NN)
        INTEGER               :: NN
        REAL                  :: DM(3,3,NANG)
        REAL                  :: RI
        REAL                  :: ANGBUF(4,NANG)
        CHARACTER(LEN=*)      :: FILPAT
        INTEGER               :: MAXIM
        DOUBLE PRECISION      :: ABA
        REAL                  :: SM(3,3,NSYM)
        INTEGER               :: NSYM
        INTEGER               :: LUNPROJ,LUNVOL 
        REAL                  :: BNORM
        INTEGER               :: LDP,LDPNM
        LOGICAL               :: FBS_WANTED
        INTEGER               :: IRTFLG

        REAL                  :: DMS(3,3)
        CHARACTER(LEN=MAXNAM) :: FILNAM
        DOUBLE PRECISION      :: SUS,SSQ
        LOGICAL               :: FOUROK = .FALSE.
        REAL                  :: ADUM

C       AUTOMATIC
	REAL                  :: PROJ(N,N)

        INTEGER(KIND=I_8)     :: KLP_8
        DOUBLE PRECISION      :: DKLP,DKLP_LOC

#ifndef USE_MPI
C       AUTOMATIC ARRAY
        REAL                  :: PROJT(4,N*N)

        REAL, ALLOCATABLE     :: PROJPAD(:,:) ! PADDED 2D PROJ ARRAY
        REAL, ALLOCATABLE     :: XDER   (:,:) ! X  DERIVATIVE OF PROJ
        REAL, ALLOCATABLE     :: YDER   (:,:) ! Y  DERIVATIVE OF PROJ
        REAL, ALLOCATABLE     :: XYDER  (:,:) ! XY DERIVATIVE OF PROJ
#endif

#ifdef USE_MPI
        INCLUDE 'mpif.h'
        INTEGER               :: ISTAT(MPI_STATUS_SIZE)
        REAL   , ALLOCATABLE  :: CB_LOC(:,:,:)
        REAL   , ALLOCATABLE  :: PRJLOC(:,:,:), PRJBUF(:,:,:)
        INTEGER, ALLOCATABLE  :: PSIZE(:)
        INTEGER, ALLOCATABLE  :: NBASE(:)
        DOUBLE PRECISION      :: ABA_LOC

        ICOMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(ICOMM, MYPID, MPIERR)
        CALL MPI_COMM_SIZE(ICOMM, NPROCS, MPIERR)

        ALLOCATE(PSIZE(NPROCS),
     &           NBASE(NPROCS),
     &           CB_LOC(N,N,N), 
     &           STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           MWANT = 2*NPROCS + N*N*N
           CALL ERRT(46,'BPRP_2; PSIZE...',MWANT)
           RETURN
        ENDIF

        CB_LOC = 0.0

C       DATA DISTRIBUTION
        CALL SETPART(NANG, PSIZE, NBASE)
        NANG_LOC = PSIZE(MYPID+1) 

#ifdef MPI_DEBUG
        WRITE(6,111) NBASE(MYPID+1), MYPID
 111    FORMAT('  BPRP_2: NBASE: ', I5, ' MYPID:', I5)
        CALL FLUSHFILE(6)
#endif

        ABA      = 0.0D0
        DKLP     = 0
	CB       = 0.0      ! ARRAY INITIALIZATION

        ABA_LOC  = 0.0D0
        DKLP_LOC = 0

        ALLOCATE(PRJLOC(N,N,NANG_LOC), PRJBUF(N,N,PSIZE(1)), 
     &            STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(46,'BPRP_2; PRJLOC, PRJBUF',IER)
           RETURN
        ENDIF

        DO IPROC = 1, NPROCS
           NLOC = PSIZE(IPROC)

C          READ A SUBSET OF IMAGES (ONLY ONE PROCESSOR READS)
 
           DO K=1,NLOC
              KGLB = K + NBASE(IPROC)
              NLET = 0
              CALL FILGET(FILPAT,FILNAM,NLET,ILIST(KGLB),IRTFLG)
              IF (IRTFLG .NE. 0) GOTO 999
                                     
              MAXIM = 0
              CALL OPFILEC(0,.FALSE.,FILNAM,LUNPROJ,'O',IFORM,
     &                     LSAM,LROW,NSL,
     &                     MAXIM,'DUMMY',.FALSE.,IRTFLG)
              IF (IRTFLG .NE. 0) GOTO 999
                                                                                
              DO K2=1,N
                 CALL  REDLIN1P(LUNPROJ,PRJBUF(1,K2,K),N,K2)
              ENDDO
              IF (MYPID == 0) CLOSE(LUNPROJ)
           ENDDO

C          DISTRIBUTE IMAGES

           IF (IPROC .GT. 1) THEN
              IF (MYPID == 0) THEN
                 CALL SEND_MPI('BPRP_2','PRJBUF', PRJBUF, N*N*NLOC, 
     &                        'R',IPROC-1,IPROC-1, ICOMM)

              ELSE IF (MYPID .EQ. IPROC-1) THEN
                 CALL MPI_RECV(PRJLOC, N*N*NLOC   , MPI_REAL,
     &                         0     , MPI_ANY_TAG, ICOMM    ,
     &                         ISTAT , MPIERR)
                 IF (MPIERR .NE. 0) THEN
                     WRITE(6,*) ' BPRP_2: RECV FAILED'
                     STOP
                 ENDIF
              ENDIF
           ELSE IF (MYPID .EQ. 0) THEN
               CALL  SCOPY(N*N*NLOC,PRJBUF,1,PRJLOC,1)
           ENDIF 
        ENDDO

        DO K = 1, NANG_LOC
           KGLB = K + NBASE(MYPID+1)

C          ESTIMATE AVERAGE OUTSIDE THE CIRCLE
           CALL ASTA_D(PRJLOC(1,1,K),N,RI,ABA_LOC,DKLP_LOC)

           DO  ISYM=1,NSYM
              IF (NSYM .GT. 1)  THEN
C                SYMMETRIES, MULTIPLY MATRICES
                 DMS = MATMUL(SM(:,:,ISYM), DM(:,:,KGLB))
              ELSE
                 DMS = DM(:,:,KGLB)
              ENDIF

C             BACKPROJECTS PRJLOC INTO CB_LOC. BILINEAR INTERPOLATION   
              CALL RPRQ(N,PRJLOC(1,1,K),CB_LOC,IPCUBE,NN,DMS, 
     &                  LDP,LDPNM,IRTFLG)
              IF (IRTFLG .NE. 0) THEN
                 WRITE(6,*) ' BPRP_2: RPRQ FAILED'
                 STOP
              ENDIF
           ENDDO
        ENDDO
        N3 = N*N*N
        IF (ALLOCATED(PRJLOC)) DEALLOCATE(PRJLOC)

#ifdef MPI_DEBUG
        write(6,*) '  redprs: mpi_allreduce on cb..., mypid: ', mypid
#endif
        CALL ALLREDUCE_MPI('BPRP_2','CB', CB_LOC,CB,
     &                          N3, 'R','S',ICOMM)
        CALL ALLREDUCE_MPI('BPRP_2','ABA', ABA_LOC,ABA,
     &                           1, 'D','S',ICOMM)
        CALL ALLREDUCE_MPI('BPRP_2','DKLP', DKLP_LOC,DKLP,
     &                           1, 'D','S',ICOMM)

#ifdef MPI_DEBUG
        WRITE(6,*) '  BPRP_2: DONE MPI_ALLREDUCE..., MYPID: ', MYPID
#endif

C       --------------- END OF: MPI CODE   --------------------------
#else
C       --------------- START NON-MPI CODE --------------------------

        MYPID = -1
        ABA   = 0.0D0
        DKLP  = 0
	CB    = 0.0      ! ARRAY INITIALIZATION

        K = 1
        DO                ! LOOP OVER ALL INPUT PROJECTIONS

           ! LOAD NEXT PROJECTION (SQUARE) ALREADY OPENED
           CALL REDVOL(LUNPROJ,N,N,1,1,PROJ,IRTFLG)
  
C          ESTIMATE AVERAGE OUTSIDE THE CIRCLE
           CALL ASTA_D(PROJ,N,RI,ABA,DKLP)

           DO  ISYM=1,NSYM
              IF (NSYM > 1 )  THEN
C                SYMMETRIES, MULTIPLY MATRICES
                 DMS = MATMUL(SM(:,:,ISYM),DM(:,:,K))
              ELSE
                 DMS = DM(:,:,K)
              ENDIF

C             BACKPROJECTS PROJ INTO CB USING BILINEAR INTERPOLATION   
              CALL RPRQ(N,PROJ,CB,IPCUBE,NN,DMS, LDP,LDPNM,IRTFLG)
	   ENDDO

C          OPEN NEXT INPUT PROJECTION
           IMGNUM = 0
           CALL NEXTFILE(K,       ILIST, 
     &                   FOUROK,  0,
     &                   NANG,    MAXIM,   
     &                   LUNPROJ, 0, 
     &                   FILPAT,  'O',
     &                   IMGNUM,  IRTFLG)
 
           IF (IRTFLG .EQ. -1) EXIT      !  END OF INPUT STACK
           IF (IRTFLG .NE. 0) RETURN
        ENDDO

#endif
C       --------------- END OF:   NON-MPI CODE --------------------


C       CLOSE DOCUMENT FILE (LUNANG??) ??????????
        IF (MYPID <= 0) CLOSE(77)

        ABA   = ABA / DKLP
        KLP_8 = DKLP

C       PRINT STATISTICS
        IF (MYPID <= 0) WRITE(NOUT,2044) KLP_8,ABA
2044    FORMAT ('  TOTAL POINTS IN PROJECTIONS:',I10,
     &          '  AVERAGE OUTSIDE THE WINDOW: ',  ES10.3)

C       SUBTRACT AVERAGE FROM BACKPROJECTED VOL.
        BNORM = 0.0
        QT    = ABA * NANG * NSYM

        DO KN=1,NN
           J = IPCUBE(4,KN)
           K = IPCUBE(5,KN)
           DO I=IPCUBE(3,KN),IPCUBE(3,KN)+IPCUBE(2,KN)-IPCUBE(1,KN)
              CB(I,J,K) = CB(I,J,K) - QT
              BNORM     = BNORM + CB(I,J,K) * CB(I,J,K)
           ENDDO

           CALL WRTLIN(LUNVOL,CB(1,J,K),N,(K-1)*N+J)
        ENDDO

        IRTFLG = 0

999     CONTINUE
#ifdef USE_MPI
        IF (ALLOCATED(CB_LOC)) DEALLOCATE(CB_LOC)
        IF (ALLOCATED(PSIZE))  DEALLOCATE(PSIZE)
        IF (ALLOCATED(NBASE))  DEALLOCATE(NBASE)
#endif
        END


C++*********************************************************************
C
C  BPRP_3.F     SPEEDED UP                     FEB 2000 ARDEAN LEITH
C               LDP PARAMETERS                 FEB 2009 ARDEAN LEITH
C               ALA... PARAMETERS              APR 2012 ARDEAN LEITH
C
C--*********************************************************************
C
C   BPRP_3(BCKN,N,IPCUBE,NN,DM,LB,NANG,IRI,ABA,YM, 
C          NSYM,NUMTH,INPIC, LDP,LDPNM,
C          ALA,AIM,MAXIT,MODE,TMIN,TMAX,SMOOTHT)
C
C  PARAMETERS:
C       NUMTH - NUMTHREDS FOR MP  
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE BPRP_3(BCKN,BCKE,N,IPCUBE,NN,DM,LB,NANG,IRI,ABA,
     &                    SM,NSYM,NUMTH,INPIC,ITERDONE,BNORM, 
     &               LDP,LDPNM,ALA,AIM,MAXIT,MODE,TMIN,TMAX,SMOOTHT)


        INCLUDE 'CMBLOCK.INC'

        REAL                  :: BCKN(N,N,N)
        REAL                  :: BCKE(N,N,N)
        REAL                  :: SM(3,3,NSYM),DM(3,3,NANG)
        INTEGER               :: IPCUBE(5,NN),LB(NANG)

C       CB,PROJ & PROJT ARE AUTOMATIC ARRAYS
        REAL ::  CB(N),PROJT(4,N*N),PROJ(N*N,NUMTH),DMS(3,3,NUMTH)

C       MASK IS AN AUTOMATIC ARRAY
        LOGICAL*1             :: MASK(N,N)
        DOUBLE PRECISION      :: ABA

        LOGICAL*1             :: ACTIVE_MIN, ACTIVE_MAX

#ifdef USE_MPI
        INCLUDE 'mpif.h'
        INTEGER               :: MPISTAT(MPI_STATUS_SIZE)
        REAL                  :: ALA, SQ, SQOLD, QT
        INTEGER, ALLOCATABLE  :: PSIZE(:)
        INTEGER, ALLOCATABLE  :: NBASE(:)
        INTEGER, ALLOCATABLE  :: LB_LOC(:)
        REAL,    ALLOCATABLE  :: DM_LOC(:,:,:)
        REAL,    ALLOCATABLE  :: BCKE_SUM(:,:,:)
        DOUBLE PRECISION      :: TSUM, TSUM0, TSUM1

        ICOMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(ICOMM, MYPID , MPIERR)
        CALL MPI_COMM_SIZE(ICOMM, NPROCS, MPIERR)
#else
        MYPID = -1
#endif

        TMIN = TMIN - ABA
        TMAX = TMAX - ABA

        IF (MYPID .LE. 0) WRITE(NOUT,2059) TMIN,TMAX
2059    FORMAT('  MIN & MAX AFTER AVG SUBTRACTION:',
     &            ES10.3,' ... ',ES10.3)

C       CHANGE SMOOTH TO (ZERO,INFINITY) RANGE
        SMOOTH = SMOOTHT / (1.0 - SMOOTHT)

C       PREPARE THE LOGICAL MASK FOR MIN-MAX

        R  = IRI * IRI
        NC = N / 2 + 1
c$omp   parallel do private(j,i,qt,xx)
        DO J=1,N
           QT = J-NC
           XX = QT * QT
           DO I=1,N
              QT = I - NC
              IF (XX+QT*QT .LT. R) THEN
                 MASK(I,J) = .TRUE.
              ELSE
                 MASK(I,J) = .FALSE.
              ENDIF
           ENDDO
        ENDDO

        NMAT = N*N*N
        LTB  = N*N

c$omp   parallel do private(k,j,i)
C       ZEROS BCKE AND BCKN
        DO K=1,N
           DO J=1,N
              DO I=1,N
                 BCKE(I,J,K) = 0.0
                 BCKN(I,J,K) = 0.0
              ENDDO
           ENDDO
        ENDDO
        
        ACTIVE_MIN = .FALSE.
        ACTIVE_MAX = .FALSE.
        SQOLD      = 1.E23

C       ------------------------ START OF: MPI CODE -----------------
#ifdef USE_MPI
        ALLOCATE (BCKE_SUM(N,N,N),
     &            PSIZE(NPROCS),
     &            NBASE(NPROCS),
     &            STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN
           MWANT = 2*NPROCS + N*N*N
           CALL ERRT(46,'BPRP_3, BCKE_SUM...',IER)
           RETURN
        ENDIF
        BCKE_SUM = 0.0

        CALL SETPART(NANG, PSIZE, NBASE)
        NANG_LOC = PSIZE(MYPID+1)

        ALLOCATE(LB_LOC(NANG_LOC),DM_LOC(3, 3, NANG_LOC), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           MWANT = NANG_LOC+ 3*3*NANG_LOC
           CALL ERRT(46,'BPRP_3, LB_LOC',MWANT)
           RETURN
        ENDIF

        IDMTAG  = 1
        LBTAG   = 2
        MASTER  = 0
        IF (MYPID .EQ. 0) THEN

c          === MASTER DISTRIBUTES DM() and LB() ===

           DO IP = 2, NPROCS
              IBEGIN = NBASE(IP) + 1
              CALL MPI_SEND(DM(1,1,IBEGIN), 9*PSIZE(IP), MPI_REAL,
     &                      IP-1          , IDMTAG      , ICOMM    ,
     &                      MPIERR)
              call MPI_SEND(LB(IBEGIN)    , PSIZE(IP)  , MPI_INTEGER,
     &                      IP-1          , LBTAG      , ICOMM       ,
     &                      MPIERR)
           ENDDO
           CALL SCOPY(9*NANG_LOC, DM, 1, DM_LOC, 1)
           CALL SCOPY(NANG_LOC  , LB, 1, LB_LOC, 1)
        ELSE
c
c          === SLAVES RECEIVE FROM THE MASTER ===
C
           CALL MPI_RECV(DM_LOC, 9*NANG_LOC, MPI_REAL, MASTER, 
     &                   IDMTAG , ICOMM      , MPISTAT , MPIERR)
           CALL MPI_RECV(LB_LOC, NANG_LOC  , MPI_INTEGER, MASTER,
     &                   LBTAG , ICOMM      , MPISTAT    , MPIERR)
        ENDIF

#ifdef MPI_DEBUG
        WRITE(6,444) MYPID
 444    FORMAT('  BPRP_3: DATA DISTRIBUTION COMPLETED, MYPID = ',I3) 
        TSUM = 0.0
#endif

        DO  ITER=1,MAXIT
           IF (ITER .GT. 1)  THEN
              DO K=1,N
                 DO J=1,N
                    DO I=1,N
                       BCKE(I,J,K)     = 0.0
                       BCKE_SUM(i,j,k) = 0.0
                    ENDDO
                 ENDDO
              ENDDO
               
C             BCKN -> PROJ -> BCKE

              SBQ  = 0.0
              GMIN = 1.0E23
              GMAX = -1.0E23

C             LOOP OVER SYMMETRIES
	      DO ISYM=1,NSYM
C                LOOP OVER PROJECTIONS (NANG TIMES!)
                 DO K=1,NANG_LOC
                    DO I=1,LTB
                       PROJ(I,1)=0.0
                    ENDDO
c
                    IF(NSYM.GT.1)  THEN
C                      SYMMETRIES, MULTIPLY MATRICES
                       DMS(:,:,1)
     &                 = MATMUL(SM(:,:,ISYM),DM_LOC(:,:,K))
                    ELSE
                       DMS(:,:,1)= DM_LOC(:,:,K)
                    ENDIF
C                   CREATES PROJ FROM BCKN
                    CALL PRJCQ_N(BCKN,NMAT,DMS,PROJ,N,IPCUBE,
     &                           NN,LDP,LDPNM)
C
c                   *** have considered MODE = 0 ONLY ***
c  
                    IF ((MODE.EQ.2.OR.MODE.EQ.3.OR.MODE.EQ.7.OR
     &                   .MODE.EQ.8).AND. .NOT.ACTIVE_MIN)  
     &              CALL FMIN_Q(PROJ,MASK,LTB,GMIN)
     
                    IF ((MODE.EQ.5.OR.MODE.EQ.6.OR.MODE.EQ.7.OR.
     &                   MODE.EQ.8) .AND. .NOT.ACTIVE_MAX)  
     &              CALL FMAX_Q(PROJ,MASK,LTB,GMAX)

C                   HERE BCKPJ_LIN ITSELF IS MP
C                   MULTIPLY PROJECTIONS BY THEIR WEIGHTS
                    IF (LB_LOC(K) .GT. 1)  THEN
                       DO I=1,N*N
                          PROJ(I,1) = PROJ(I,1)*LB_LOC(K)
                       ENDDO
                    ENDIF

                    DO I = 1,N*N - N - 1
                       PT         = PROJ(I,1)
                       PROJT(1,i) = PT
                       PROJT(2,i) = PROJ(I+N,  1) - PT
                       PROJT(3,i) = PROJ(I+1,  1) - PT
                       PROJT(4,i) = PROJ(I+N+1,1) - PROJ(I+1,1)
     &                            - PROJT(2,I)
                    ENDDO

C                   BACKPROJECT FROM PROJT INTO BCKE
                    IF (NSYM .GT. 1)  THEN
C                      SYMMETRIES, MULTIPLY MATRICES
                       DMS(:,:,1) =
     &                     MATMUL(SM(:,:,ISYM),DM_LOC(:,:,K))
                    ELSE
                       DMS(:,:,1) = DM_LOC(:,:,K)
                    ENDIF
                    CALL BCKPJ_LIN(BCKE, NMAT  , DMS,PROJT,
     &                             N   , IPCUBE, NN, LDP,LDPNM)
C                END LOOP OVER PROJECTIONS
                 ENDDO

c                === GLOBAL SUM ===

#ifdef MPI_DEBUG
                 TSUM0 = MPI_WTIME() 
#endif
                 CALL MPI_ALLREDUCE(BCKE   , BCKE_SUM,
     &                              NMAT   , MPI_REAL,
     &                              MPI_SUM, ICOMM    ,
     &                              MPIERR)
                 IF (MPIERR .NE. 0) THEN
                    WRITE(0,*)'REDPRS: FAILED TO ALLREDUCE BCKE_SUM'
                    STOP
                 ENDIF
#ifdef MPI_DEBUG
                 TSUM1 = MPI_WTIME() 
                 TSUM  = TSUM + (TSUM1-TSUM0) 
#endif
C             END LOOP OVER SYMMETRIES
              ENDDO

C             END OF SECTION DONE FOR ITERATIONS > 1 --------------
           ENDIF

C          BEGIN ITERATIONS HERE

C          ALTERS BCKN IN SMT3_Q
c          *** NOT working in MPI yet
           IF (MODE.EQ.1.OR.MODE.EQ.3.OR.MODE.EQ.6.OR.MODE.EQ.8) 
     &          CALL SMT3_Q(T,ALA,BCKN,BCKN,N,N,N,IPCUBE,NN)
           SQ = 0.0

C          ONLY PROCESSOR READS CB IN THE FOLLOWING           

           DO KN=1,NN
              J = IPCUBE(4,KN)
              K = IPCUBE(5,KN)
              CALL  REDLIN1P(INPIC,CB,N,(K-1)*N+J)

              DO I=IPCUBE(3,KN), IPCUBE(3,KN)+IPCUBE(2,KN)
     &            -IPCUBE(1,KN)
                 QT          = CB(I) - BCKE_SUM(I,J,K)
                 SQ          = SQ + QT* QT
                 BCKN(I,J,K) = BCKN(I,J,K) + ALA * QT
              ENDDO
           ENDDO

           CALL MPI_BCAST(BCKN, NMAT, MPI_REAL, 0, ICOMM, IERR)
           CALL MPI_BCAST(QT, 1, MPI_REAL, 0, ICOMM, IERR)
           CALL MPI_BCAST(SQ, 1, MPI_REAL, 0, ICOMM, IERR)

           IF (MYPID .LE. 0)  WRITE(NOUT,2041) SQ, SQ/BNORM
2041       FORMAT('  SQUARED STRUCTURE CORRECTION:',ES12.4,2X,ES12.4)

           IF (MODE .NE. 0)  THEN
C             MODE > 0
              IF (ITER .GT. 1)  THEN
                 IF ((MODE.EQ.2.OR.MODE.EQ.3.OR.MODE.EQ.7.OR.MODE.EQ.8)
     &              .AND. .NOT.ACTIVE_MIN)  THEN
                    WRITE(NOUT,2061) GMIN
2061                FORMAT('  MINIMUM IN PROJECTIONS:',ES10.3) 
                    IF (GMIN .LT. TMIN)  THEN
                       CALL BMIN_C(BCKN,NMAT,IPCUBE,NN,BMIN)
                       WRITE(NOUT,2051)  BMIN
2051                  FORMAT('  MIN CONSTRAINT ACTIVATED, VALUE IN 3D:',
     &                        ES10.3)
                       ACTIVE_MIN = .TRUE.
                    ENDIF
                 ENDIF
C
                 IF ((MODE.EQ.5.OR.MODE.EQ.6.OR.MODE.EQ.7.OR.MODE.EQ.8) 
     &               .AND. .NOT.ACTIVE_MAX)  THEN
                    WRITE(NOUT,2062) GMAX
2062                FORMAT('  MAXIMUM IN PROJECTIONS:',ES10.3) 
                    IF (GMAX .GT. TMAX)  THEN
                       CALL BMAX_C(BCKN,NMAT,IPCUBE,NN,BMAX)
                       WRITE(NOUT,2052)  BMAX
2052                  FORMAT('  MAX CONSTRAINT ACTIVATED, VALUE IN 3D:',
     &                          ES10.3)
                       ACTIVE_MAX = .TRUE.
                    ENDIF
                 ENDIF
              ENDIF

C             ENFORCE MIN CONSTRAINTS
              IF (ACTIVE_MIN) CALL DOMIN3_S(BCKN,NMAT,IPCUBE,NN,BMIN)

C             ENFORCE MAX CONSTRAINTS
              IF (ACTIVE_MAX) CALL DOMAX3_S(BCKN,NMAT,IPCUBE,NN,BMAX)
C             END OF MODE>0
           ENDIF

           ITERDONE = ITER

C          CHECK STOPPING CRITERIA
           IF (SQ .GT. AIM .AND. ITER .LT. MAXIT)  THEN
              IF (SQ .LT. SQOLD) THEN
                 SQOLD = SQ
              ELSE
C               PERFORM ADDITIONAL SYMMETRIZATION IN REAL SPACE
                IF (NSYM .GT. 1)  THEN
                   DO K=1,N
                      DO J=1,N
                         DO I=1,N
                            BCKE(I,J,K) = BCKN(I,J,K)
                            BCKN(I,J,K) = 0.0
                         ENDDO
                      ENDDO
                   ENDDO

                   IF (MOD(N,2) .EQ. 0)  THEN
                      KNX = N/2-1
                   ELSE
                      KNX = N/2
                   ENDIF
                   KLX = -N/2
                   CALL SYMVOL(BCKE,BCKN,KLX,KNX,KLX,KNX,KLX,KNX,SM,
     &                         NSYM)
                ENDIF
                GOTO 999
              ENDIF
           ELSE
              IF (NSYM .GT. 1)  THEN
                 DO K=1,N
                    DO J=1,N
                       DO I=1,N
                          BCKE(I,J,K) = BCKN(I,J,K)
                          BCKN(I,J,K) = 0.0
                       ENDDO
                    ENDDO
                 ENDDO
                 IF (MOD(N,2) .EQ. 0)  THEN
                    KNX = N/2-1
                 ELSE
                    KNX = N/2
                 ENDIF
                 KLX = -N/2
                 CALL SYMVOL(BCKE,BCKN,KLX,KNX,KLX,KNX,KLX,KNX,SM,NSYM)
              ENDIF
              GOTO 999
           ENDIF
C       END ITERATION
        ENDDO

C       ------------------------ END OF: MPI CODE --------------------
#else

        DO  ITER=1,MAXIT

           IF (ITER .GT. 1)  THEN
c$omp         parallel do private(k,j,i)
              DO K=1,N
                 DO J=1,N
                    DO I=1,N
                       BCKE(I,J,K) = 0.0
                    ENDDO
                 ENDDO
              ENDDO
               
C             BCKN -> PROJ -> BCKE
              SBQ  = 0.0
              GMIN = 1.0E23
              GMAX = -1.0E23

C         LOOP OVER SYMMETRIES
	  DO  ISYM=1,NSYM
C             LOOP OVER PROJECTIONS (NANG TIMES!)
              DO K=1,NANG,NUMTH
                 L_EN  = MIN0(NANG,K+NUMTH-1)
                 L_NUM = MIN0(NUMTH,NANG-K+1)

c$omp            parallel do private(i,j)
                 DO J=1,L_NUM
                     DO I=1,LTB
                        PROJ(I,J) = 0.0
                     ENDDO
                 ENDDO

             DO  L_TH=1,L_NUM
               IF (NSYM .GT. 1)  THEN
C                 SYMMETRIES, MULTIPLY MATRICES
                  DMS(:,:,L_TH) = MATMUL(SM(:,:,ISYM),DM(:,:,K+L_TH-1))
               ELSE
                  DMS(:,:,L_TH) = DM(:,:,K+L_TH-1)
               ENDIF
	     ENDDO
c$omp            parallel do private(l_th),shared(nmat,n,nn)
                 DO L_TH=1,L_NUM

C                  CREATES PROJ FROM BCKN
                   CALL PRJCQ_N(BCKN,NMAT,DMS(1,1,L_TH),
     &                       PROJ(1,L_TH),N,IPCUBE,NN,LDP,LDPNM)
                 ENDDO
C  
                 DO L_TH=1,L_NUM
C                   LOOP OVER ALL PROCESSORS

                    IF ((MODE.EQ.2.OR.MODE.EQ.3.OR.MODE.EQ.7.OR
     &                  .MODE.EQ.8).AND. .NOT.ACTIVE_MIN)  
     &              CALL FMIN_Q(PROJ(1,L_TH),MASK,LTB,GMIN)
     
                    IF ((MODE.EQ.5.OR.MODE.EQ.6.OR.MODE.EQ.7.OR.
     &                   MODE.EQ.8) .AND. .NOT.ACTIVE_MAX)  
     &              CALL FMAX_Q(PROJ(1,L_TH),MASK,LTB,GMAX)
                 ENDDO

C                HERE BCKPJ_LIN ITSELF IS MP  
                 DO L_TH=1,L_NUM
C                   LOOP OVER ALL PROCESSORS
C                   MULTIPLY PROJECTIONS BY THEIR WEIGHTS
                    IF (LB(K+L_TH-1) .GT. 1)  THEN
c$omp                  parallel do private(i)
                       DO I=1,N*N
                           PROJ(I,L_TH) = PROJ(I,L_TH) * LB(K+L_TH-1)
                       ENDDO
                    ENDIF

c$omp               parallel do private(i,pt)
                    DO I = 1,N*N - N - 1
                       PT         = PROJ(I, L_TH)
                       PROJT(1,I) = PT
                       PROJT(2,I) = PROJ(I+N,  L_TH) - PT
                       PROJT(3,I) = PROJ(I+1,  L_TH) - PT 
                       PROJT(4,I) = PROJ(I+N+1,L_TH) - PROJ(I+1,L_TH) - 
     &                              PROJT(2,I)
                    ENDDO

C                   BACKPROJECT FROM PROJT INTO BCKE
                    IF (NSYM.GT.1)  THEN
C                      SYMMETRIES, MULTIPLY MATRICES
                       DMS(:,:,1)=MATMUL(SM(:,:,ISYM),DM(:,:,K+L_TH-1))
                    ELSE
                       DMS(:,:,1)=DM(:,:,K+L_TH-1)
                    ENDIF
                    CALL BCKPJ_LIN(BCKE,NMAT,DMS(1,1,1),PROJT,
     &                             N,IPCUBE,NN, LDP,LDPNM)
                 ENDDO
C             END LOOP OVER PROJECTIONS
              ENDDO
C            END LOOP OVER SYMMETRIES
             ENDDO

C             END OF SECTION DONE FOR ITERATIONS > 1 --------------
           ENDIF


C          BEGIN ITERATIONS HERE

C          ALTERS BCKN IN SMT3_Q
           IF (MODE.EQ.1.OR.MODE.EQ.3.OR.MODE.EQ.6.OR.MODE.EQ.8) 
     &          CALL SMT3_Q(SMOOTH,ALA,BCKN,BCKN,N,N,N,IPCUBE,NN)
           SQ = 0.0
           DO KN=1,NN
              J = IPCUBE(4,KN)
              K = IPCUBE(5,KN)
              CALL  REDLIN(INPIC,CB,N,(K-1)*N+J)
              DO I=IPCUBE(3,KN), IPCUBE(3,KN)+IPCUBE(2,KN)
     &                -IPCUBE(1,KN)
                 QT          = CB(I) - BCKE(I,J,K)
                 SQ          = SQ + QT* QT
                 BCKN(I,J,K) = BCKN(I,J,K) + ALA * QT
              ENDDO
           ENDDO

           WRITE(NOUT,2041) ITER, SQ,SQ/BNORM
2041       FORMAT('  ITERATION:',I6,
     &        '   SQUARED STRUCTURE CORRECTION:',ES12.4,2X,ES12.4)

          IF (MODE .NE. 0)  THEN
C             MODE > 0
              IF (ITER .GT. 1)  THEN
                 IF((MODE.EQ.2.OR.MODE.EQ.3.OR.MODE.EQ.7.OR.MODE.EQ.8)
     &              .AND. .NOT.ACTIVE_MIN)  THEN
                    WRITE(NOUT,2061) GMIN
2061                FORMAT('  MINIMUM IN PROJECTIONS =',1PE10.3) 
                    IF (GMIN .LT. TMIN)  THEN
                       CALL BMIN_C(BCKN,NMAT,IPCUBE,NN,BMIN)
                       WRITE(NOUT,2051)  BMIN
2051                  FORMAT('  MIN CONSTRAINT ACTIVATED, VALUE IN 3D:',
     &                        ES10.3)
                       ACTIVE_MIN=.TRUE.
                    ENDIF
                 ENDIF
C
                 IF ((MODE.EQ.5.OR.MODE.EQ.6.OR.MODE.EQ.7.OR.MODE.EQ.8) 
     &               .AND. .NOT.ACTIVE_MAX)  THEN
                    WRITE(NOUT,2062) GMAX
2062                FORMAT('  MAXIMUM IN PROJECTIONS:',ES10.3) 
                    IF (GMAX .GT. TMAX)  THEN
                       CALL BMAX_C(BCKN,NMAT,IPCUBE,NN,BMAX)
                       WRITE(NOUT,2052)  BMAX
2052                  FORMAT('  MAX CONSTRAINT ACTIVATED, VALUE IN 3D:',
     &                          ES10.3)
                       ACTIVE_MAX = .TRUE.
                    ENDIF
                 ENDIF
              ENDIF

C             ENFORCE MIN CONSTRAINTS
              IF (ACTIVE_MIN) CALL DOMIN3_S(BCKN,NMAT,IPCUBE,NN,BMIN)

C             ENFORCE MAX CONSTRAINTS
              IF (ACTIVE_MAX) CALL DOMAX3_S(BCKN,NMAT,IPCUBE,NN,BMAX)
C             END OF MODE>0
           ENDIF

           ITERDONE = ITER

C          CHECK STOPPING CRITERIA
           IF (SQ .GT. AIM .AND. ITER .LT. MAXIT)  THEN
              IF (SQ .LT. SQOLD) THEN
                 SQOLD = SQ
              ELSE

C               Perform additional symmetrization in real space
		IF (NSYM .GT. 1)  THEN
c$omp             parallel do private(k,j,i)
                  DO K=1,N
                     DO J=1,N
                       DO I=1,N
                         BCKE(I,J,K) = BCKN(I,J,K)
                         BCKN(I,J,K) = 0.0
                       ENDDO
                     ENDDO
                  ENDDO
                 IF (MOD(N,2) .EQ. 0)  THEN
                    KNX = N/2-1
                 ELSE
                    KNX = N/2
                 ENDIF
                 KLX = -N/2
	        CALL SYMVOL(BCKE,BCKN,KLX,KNX,KLX,KNX,KLX,KNX,SM,NSYM)
	      ENDIF 
              GOTO 999
           ENDIF
        ELSE

	   IF (NSYM .GT. 1)  THEN
c$omp         parallel do private(k,j,i)
               DO K=1,N
                  DO J=1,N
                    DO I=1,N
                       BCKE(I,J,K) = BCKN(I,J,K)
                       BCKN(I,J,K) = 0.0
                    ENDDO
                  ENDDO
              ENDDO

              IF (MOD(N,2) == 0)  THEN
                 KNX = N/2-1
              ELSE
                 KNX = N/2
              ENDIF
              KLX = -N/2

	      CALL SYMVOL(BCKE,BCKN,KLX,KNX,KLX,KNX,KLX,KNX,SM,NSYM)

           ENDIF 
           GOTO 999
        ENDIF

C       END ITERATION
        ENDDO
#endif
C       ------------------------ END OF: NON-MPI CODE ----------------

        IF (NSYM .GT. 1)  THEN
c$omp      parallel do private(k,j,i)
           DO K=1,N
              DO J=1,N
                 DO I=1,N
                    BCKE(I,J,K) = BCKN(I,J,K)
                    BCKN(I,J,K) = 0.0
                 ENDDO
              ENDDO
           ENDDO

           IF (MOD(N,2) == 0)  THEN
              KNX = N/2-1
           ELSE
              KNX = N/2
           ENDIF

           KLX = -N/2
           CALL SYMVOL(BCKE,BCKN,KLX,KNX,KLX,KNX,KLX,KNX,SM,NSYM)
        ENDIF 

999   CONTINUE

#ifdef USE_MPI
      IF (ALLOCATED(BCKE_SUM)) DEALLOCATE(BCKE_SUM)
      IF (ALLOCATED(DM_LOC))   DEALLOCATE(DM_LOC)
      IF (ALLOCATED(LB_LOC))   DEALLOCATE(LB_LOC)
      IF (ALLOCATED(PSIZE))    DEALLOCATE(PSIZE)
      IF (ALLOCATED(NBASE))    DEALLOCATE(NBASE)
#ifdef MPI_DEBUG
      IF (MYPID == 0) WRITE(6,888) TSUM
 888  FORMAT('  REDUCTION TIME: ', ES11.3) 
#endif
#endif

      END
@


1.97
log
@NEWFILE IMGNUM == -1 BUG on gfort
@
text
@d127 1
a127 1
     &             'ENTER TEMPLATE FOR IMAGE FILES~',
@


1.96
log
@missing type_kinds
@
text
@d22 1
d362 2
a363 1
           K = 1
d402 2
a403 1
           K = 1
d737 1
@


1.95
log
@ASTA_D for DKLP  for more pixels
@
text
@d526 1
@


1.94
log
@DO_OVERALL not capability
@
text
@d21 1
d24 3
a26 3
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
C=* Copyright (C) 2001,2012 P. A. Penczek, ArDean Leith                *
d117 1
a117 1
           CALL ERRT(46,'BPRP; ILIST....',3*NILMAX)
d556 3
d604 3
a606 3
        ABA     = 0.0D0
        KLP     = 0
	CB      = 0.0      ! ARRAY INITIALIZATION
d608 2
a609 2
        ABA_LOC = 0.0D0
        KLP_LOC = 0
d666 1
a666 1
           CALL ASTA(PRJLOC(1,1,K),N,RI,ABA_LOC,KLP_LOC)
d692 1
a692 1
     &                           N3, 'R','S',ICOMM)
d695 2
a696 2
        CALL ALLREDUCE_MPI('BPRP_2','KLP', KLP_LOC,KLP,
     &                           1, 'I','S',ICOMM)
d708 1
a708 1
        KLP   = 0
d718 1
a718 1
           CALL ASTA(PROJ,N,RI,ABA,KLP)
d751 2
a752 1
        ABA = ABA / KLP
d755 1
a755 1
        IF (MYPID <= 0) WRITE(NOUT,2044) KLP,ABA
d757 1
a757 1
     &          '  AVG OUTSIDE WINDOW:',  ES10.3)
@


1.93
log
@typo
@
text
@d20 1
d89 1
a89 1
        LOGICAL               :: MD,SAYIT
d120 1
a120 1
C       OPEN FIRST OVERALL INPUT FILE
d130 1
a130 1
        IF (FILPAT(NLET:NLET) .EQ. '@@') THEN
d251 2
a252 1
        IF (IRTFLG .NE. 0) GOTO 9999
d294 1
a294 1
        FBS_WANTED = (FBSFLAG > 0)  
d304 3
a306 2
        WRITE(NOUT,92)'  CREATING VOLUME ------------------------------'
92      FORMAT(/,A)
d308 4
a311 4
C       RETRIEVE ANGLES, ANG ARRAY, AND DM FROM PANG
        SAYIT = (MYPID <= 0) .AND. VERBOSE
        CALL BPRP_DM(NANG,PANG,ILIST,ANG,DM,SAYIT,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999
d313 2
a314 2
C       READS IMAGES AND BACKPROJECTS INTO: CB
        CALL BPRP_2(NDIM,NANG,CB,ILIST,IPCUBE,NDIM2,DM,
d320 3
a322 3
C       COMPRESS ANGLES INTO DM - ALTERS: ANG,NANG1,DM & LO!!
        CALL HIANG(ANG,NANG,DM,LB,LO)
        NANG = LO
d324 2
a325 2
        IF (MYPID <= 0) WRITE(NOUT,2027) NANG
2027    FORMAT('  EFFECTIVE NUMBER OF ANGLES:',I7)
d328 1
a328 1
        T0 = MPI_WTIME()
d331 1
a331 1
        CALL BPRP_3(BCKN,BCKE,NDIM,IPCUBE,NDIM2,
d337 5
a341 5
        T1 = MPI_WTIME()  - T0
        IF (MYPID == 0) THEN
            WRITE(6,222) T1
 222        FORMAT('  BPRP TIME:',ES11.3)
        ENDIF 
d344 4
a347 3
C       SAVE OVERALL OUTPUT VOLUME
        CALL WRTVOL(LUNVOL,NDIM,NDIM, 1,NDIM,BCKN,IRTFLG)
        CLOSE(LUNVOL)
d1324 1
a1324 1
           IF (SQ.GT.AIM .AND. ITER.LT.MAXIT)  THEN
d1330 1
a1330 1
		IF (NSYM.GT.1)  THEN
@


1.92
log
@rewrite from bprp.f  for 3 volume production
@
text
@d1063 1
a1063 1
2041       FORMAT('  SQUARED STRUCTURE CORRECTION:',ES12.4,2X,ES12.4))
@


1.91
log
@rprqd removed, replaced with rprq instead
@
text
@d2 1
a2 1
c  BPRP.F
d19 1
d24 1
a24 1
C=* Copyright (C) 2001, P. A. Penczek                                  *
d43 1
a43 1
C  BPRP
d48 1
a48 2
C           MIN, MAX RELATE TO THE PROJECTIONS
C           SYMMETRIES IMPOSED ...
d50 1
a50 1
C  CALLS: REDPRS
d56 1
a56 1
C         REPR3Q
d58 2
a59 2
C-        DOMIN3_S 
C-        DOMAX3_S 
d61 2
a62 2
C-        BMAX_C 
C-        BMIN_C 
d69 1
a69 1
        SUBROUTINE BPRP
d75 22
a96 16
        REAL,    POINTER        :: ANGSYM(:,:)
        REAL,    ALLOCATABLE    :: SM(:,:),ANG(:,:),DM(:,:)
        REAL,    ALLOCATABLE    :: BCKN(:,:,:)
        INTEGER, ALLOCATABLE    :: LB(:)
        INTEGER, ALLOCATABLE    :: IPCUBE(:,:)
        INTEGER, ALLOCATABLE    :: ILIST(:)
        CHARACTER(LEN=MAXNAM)   :: ANGDOC
        CHARACTER(LEN=MAXNAM)   :: FILNAM,FILPAT
        DOUBLE PRECISION        :: ABA
        LOGICAL                 :: MD
        DOUBLE PRECISION        :: T0, T1
        
        INTEGER, PARAMETER      ::  LUNANG  = 77 
        INTEGER, PARAMETER      ::  LUNPROJ = 97 
        INTEGER, PARAMETER      ::  LUNVOL  = 98 
        INTEGER, PARAMETER      ::  INPIC   = 99
d98 7
a104 1
        CALL SET_MPI(ICOMM,MYPID,MPIERR)
d106 7
a112 2
        NILMAX = NIMAXPLUS
        ALLOCATE(ILIST(NILMAX),
d115 1
a115 1
           CALL ERRT(46,'BPRP; ILIST....',NILMAX)
d119 8
a126 2
        CALL FILELIST(.TRUE.,INPIC,FILPAT,NLET,ILIST,NILMAX,NANG,
     &                 'ENTER TEMPLATE FOR IMAGE FILES~',IRTFLG)
d128 8
d138 5
a142 2
        IF (MYPID .LE. 0) WRITE(NOUT,2001) NANG
2001    FORMAT('  NUMBER OF IMAGES: ',I7)
d144 23
a166 2
        CALL  RDPRM(RI,NOT_USED,'RADIUS OF RECONSTRUCTED OBJECT')
        IRI = RI
d168 1
a168 4
        ALLOCATE (ANG(3,NANG), DM(9,NANG),STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'BPRP, ANG,DM',12*NANG)
           GOTO 9999
d171 3
a173 3
C       RETRIEVE ANGLES FROM DOC FILE (IN REVERSED ORDER)
        CALL GETDOCLIST('ANGLES DOC',LUNANG,ILIST,NANG,
     &                  1,3,.TRUE.,ANG,IRTFLG)
d175 1
d177 3
a179 4
C       FIND DM
        DO K=1,NANG
           CALL CANG(ANG(1,K),ANG(2,K),ANG(3,K),
     &              .FALSE.,SSDUM,DM(1,K))
d181 24
a204 10
           IF (VERBOSE .AND. MYPID .LE. 0) THEN
              WRITE(NOUT,333) K,(ANG(J,K),J=3,1,-1)
333           FORMAT('  PROJECTION #',I7,
     &               '; PSI=',F6.1,' THETA=',F6.1,' PHI=',F6.1)
           ENDIF
         ENDDO
C       OPEN FIRST IMAGE FILE TO DETERMINE NSAM, NROW, NSL
        NLET = 0
        CALL FILGET(FILPAT,FILNAM,NLET,ILIST,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999
d206 3
a208 5
        MAXIM = 0
        CALL OPFILEC(0,.FALSE.,FILNAM,LUNPROJ,'O',IFORM,NSAM,NROW,NSL,
     &             MAXIM,'DUMMY',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999
        CLOSE(LUNPROJ)
d210 10
a219 4
        NDIM    = NSAM
        NM      = 0
        LDP     = NDIM / 2 + 1
        LDPNM   = LDP + NM
d224 4
a227 3
        CALL GETDOCDAT('SYMMETRIES DOC',.TRUE.,FILNAM,INPIC,
     &                  .TRUE.,MAXXS,NSYM,ANGSYM,IRTFLG)
        IF (IRTFLG .NE. 0)  NSYM = 1
d229 7
a235 6
        IF (NSYM .GT. 1)  THEN
           ALLOCATE(SM(9,NSYM), STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN 
              CALL ERRT(46,'BP RP, SM',IER)
              GOTO 9999
           ENDIF
d240 2
a241 1
2021       FORMAT(/,'  NUMBER OF SYMMETRIES: ',I7,/)
d243 24
a266 6
        ELSE
           ALLOCATE(SM(1,1), STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN 
              CALL ERRT(46,'BP RP, SM-2nd',IER)
              GOTO 9999
           ENDIF
d269 22
a290 3
C       DUM IS A DUMMY VARIABLE
        MD = .FALSE.
        CALL PREPCUB_S(NDIM,NDIMSQ,IDUM,RI,MD,LDP)
d292 1
a292 6
C       USE NDIMSQ TO ALLOCATE (IPCUBE) 
        ALLOCATE(IPCUBE(5,NDIMSQ), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'BPRP, IPCUBE',5*NDIMSQ)
           GOTO 9999
        ENDIF
d294 2
a295 2
        MD = .TRUE.
        CALL PREPCUB_S(NDIM,NDIMSQ,IPCUBE,RI,MD,LDP)
d297 2
a298 4
C       IN THIS VERSION TOTAL MEMORY IS THREE VOLUMES BCKN, BCKE AND 
C       CUBE PLUS 2 2D PROJECTIONS.
C
C       CUBE - KEEPS BACK-PROJECTED ORIGINAL PROJECTIONS, READ FROM THE DISK
d302 2
a303 2
C       FIND NUMBER OF OMP THREADS
        CALL GETTHREADS(NUMTH)
d305 3
a307 7
        IF (MYPID .LE. 0)  WRITE(NOUT,1001)
1001    FORMAT(/,'  REPROJECTION PROGRAM FOR 3-D BACK-PROJECTION',/)
     
        IFORM = 3
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNAM,LUNVOL,'U',IFORM,NDIM,NDIM,NDIM,
     &             MAXIM,'RECONSTRUCTED 3-D',.FALSE.,IRTFLG)
d310 5
a314 4
        CALL REDPRS(NDIM,NANG,ANG,ILIST,IPCUBE,NDIMSQ,DM,
     &         RI,ABA,SM,NSYM,LUNPROJ,LUNVOL,BNORM,FILPAT,
     &         LDP,LDPNM, IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999
a315 5
        ALLOCATE(LB(NANG), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'BPRP, LB',NANG)
           GOTO 9999
        ENDIF
d317 1
a317 1
C       COMPRESS ANGLES - IT CHANGES NANG !!
d321 2
a322 9
        IF (MYPID .LE. 0)  WRITE(NOUT,2027) NANG
2027    FORMAT('  EFFECTIVE NUMBER OF ANGLES: ',I7)

        ALLOCATE(BCKN(NDIM,NDIM,NDIM), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           MWANT = NDIM*NDIM*NDIM
           CALL ERRT(46,'REPS, BCKN',MWANT)
           GOTO 9999
        ENDIF
d328 4
a331 3
        CALL REPR3Q(BCKN,NDIM,IPCUBE,NDIMSQ,
     &               DM,LB,NANG,IRI,ABA,
     &               SM,NSYM,NUMTH,LUNVOL,ITERDONE,BNORM, LDP,LDPNM)
d334 2
a335 3
        T1 = MPI_WTIME()
        T1 = T1 - T0
        IF (MYPID .EQ. 0) THEN
d337 1
a337 1
 222        FORMAT(' BPRP TIME: ', 1PE11.3)
d341 2
a342 1
        CALL WRITEV(LUNVOL,BCKN,NDIM,NDIM,NDIM,NDIM,NDIM)
d346 19
a364 1
        CALL REG_SET_NSEL(1,1,REAL(ITERDONE),0.0, 0.0, 0.0, 0.0,IRTFLG)
d366 67
a432 2
9999    IF (ALLOCATED(SM))     DEALLOCATE(SM)
        IF (ALLOCATED(BCKN))   DEALLOCATE(BCKN)
d435 1
a436 1
        IF (ALLOCATED(ANG))    DEALLOCATE(ANG)
d438 30
d469 3
a471 1
        CALL FLUSHRESULTS()
d473 15
a487 1
        END
d489 12
d503 12
a514 25
C *  REDPRS.F                 ADDED REG_SET FOR ITER AUG 00 ARDEAN LEITH
C=**********************************************************************
C=* From: SPIDER - MODULAR IMAGE PROCESSING SYSTEM                     *
C=* Copyright (C)2001, P. A. Penczek                                   *
C=*                                                                    *
C=* University of Texas - Houston Medical School                       *
C=*                                                                    *
C=* Email:  pawel.a.penczek@@uth.tmc.edu                                *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* This program is distributed in the hope that it will be useful,    *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
C=**********************************************************************
d516 4
a519 3
        SUBROUTINE REDPRS(N,NANG,ANG,ILIST,IPCUBE,NN,DM,
     &              RI,ABA,SM,NSYM,LUNPROJ,LUNVOL,
     &              BNORM,FILPAT, LDP,LDPNM, IRTFLG)
d524 23
a546 9
	REAL, ALLOCATABLE         :: CB(:,:,:)
        REAL                      :: ANG(3,NANG)
        REAL                      :: SM(3,3,NSYM)
        INTEGER                   :: ILIST(NANG),IPCUBE(5,NN)
        REAL                      :: DM(3,3,NANG),DMS(3,3)

        CHARACTER(LEN=*)          :: FILPAT
        CHARACTER(LEN=MAXNAM)     :: FILNAM
        DOUBLE PRECISION          :: ABA,SUS,SSQ
d549 1
a549 1
	REAL                      :: PROJ(N,N)
d551 9
d563 6
a568 6
        INTEGER                   :: ISTAT(MPI_STATUS_SIZE)
        REAL   , ALLOCATABLE      :: CB_LOC(:,:,:)
        REAL   , ALLOCATABLE      :: PRJLOC(:,:,:), PRJBUF(:,:,:)
        INTEGER, ALLOCATABLE      :: PSIZE(:)
        INTEGER, ALLOCATABLE      :: NBASE(:)
        DOUBLE PRECISION          :: ABA_LOC
d578 1
a578 1
        IF (IRTFLG.NE.0) THEN
d580 1
a580 1
           CALL ERRT(46,'REDPRS, PSIZE...',MWANT)
a586 1

d592 1
a592 1
 111    FORMAT('  REDPRS: NBASE = ', I5, ' MYPID = ', I5)
a594 9
#else
        MYPID = -1
#endif

        ALLOCATE(CB(N,N,N), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'REDPRS, CB',N*N*N)
           RETURN
        ENDIF
d596 3
a598 3
        ABA = 0.0D0
        KLP = 0
	CB  = 0.0
a599 2
C       ------------------------ START OF: MPI CODE --------------------
#ifdef USE_MPI
d602 1
d605 2
a606 2
        IF (IRTFLG.NE.0) THEN
           CALL ERRT(46,'REDPRS, PRJLOC, PRJBUF',IER)
d630 1
a630 1
              IF (MYPID .EQ. 0) CLOSE(LUNPROJ)
d636 2
a637 2
              IF (MYPID .EQ. 0) THEN
                 CALL SEND_MPI('REDPRS','PRJBUF', PRJBUF, N*N*NLOC, 
d645 1
a645 1
                     WRITE(6,*) 'REDPRS: RECV FAILED'
d656 2
d659 1
d663 1
a663 1
                 DMS = MATMUL(SM(:,:,ISYM),DM(:,:,KGLB))
d667 2
a668 2
C              CALL RPRQD(N,PRJLOC(1,1,K),CB_LOC,IPCUBE,NN,DMS,RI, 
C                         LDP,LDPNM)
d672 1
a672 1
                 WRITE(6,*) 'REDPRS: RPRQ FAILED'
d681 1
a681 1
        write(6,*) 'redprs: mpi_allreduce on cb..., mypid = ', mypid
d683 1
a683 1
        CALL ALLREDUCE_MPI('REDPRS','CB', CB_LOC,CB,
d685 1
a685 1
        CALL ALLREDUCE_MPI('REPRS','ABA', ABA_LOC,ABA,
d687 1
a687 1
        CALL ALLREDUCE_MPI('REPRS','KLP', KLP_LOC,KLP,
d691 1
a691 1
        WRITE(6,*) 'REDPRS: DONE MPI_ALLREDUCE..., MYPID = ', MYPID
d694 1
a694 1
C       ------------------------ END OF: MPI CODE --------------------
d696 1
d698 4
a701 4
        DO K=1,NANG
           NLET = 0
           CALL FILGET(FILPAT,FILNAM,NLET,ILIST(K),IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 999
d703 2
a704 5
           MAXIM = 0
           CALL OPFILEC(0,.FALSE.,FILNAM,LUNPROJ,'O',IFORM,
     &                  LSAM,LROW,NSL,
     &                  MAXIM,'DUMMY',.FALSE.,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 999
d706 2
a707 4
           DO K2=1,N
              CALL  REDLIN(LUNPROJ,PROJ(1,K2),N,K2)
           ENDDO
           CLOSE(LUNPROJ)
d709 1
d711 1
d713 1
a713 1
              IF (NSYM .GT .1 )  THEN
a718 2
C             CALL RPRQD(N,PROJ,CB,IPCUBE,NN,DMS,RI, LDP,LDPNM)
              CALL RPRQ (N,PROJ,CB,IPCUBE,NN,DMS, LDP,LDPNM,IRTFLG)
d720 2
d723 11
d735 1
d738 3
a740 1
C       CLOSE DOCUMENT FILE (LUNANG??)
d743 2
a744 1
        ABA = ABA/KLP
d746 3
a748 4
        IF (MYPID <= 0) WRITE(NOUT,2044)  KLP,ABA
2044    FORMAT
     &      ('  TOTAL POINTS IN PROJECTIONS =',I10,
     &     /,' AVERAGE OUTSIDE THE WINDOW   =',1PE10.3,/)
d750 3
a752 1
C       SUBTRACT THE AVERAGE
a753 2
        BNORM = 0.0
        QT    = ABA*NANG*NSYM
d758 2
a759 2
              CB(I,J,K) = CB(I,J,K)-QT
              BNORM     = BNORM+CB(I,J,K)*CB(I,J,K)
d761 1
d764 1
d767 1
a767 1
999     IF (ALLOCATED(CB)) DEALLOCATE(CB)
a776 26
C *  REPR3Q.F  
C                                    SPEEDED UP FEB. 2000 ARDEAN LEITH
C=**********************************************************************
C=* From: SPIDER - MODULAR IMAGE PROCESSING SYSTEM                     *
C=* Copyright (C)2001, P. A. Penczek                                   *
C=*                                                                    *
C=* University of Texas - Houston Medical School                       *
C=*                                                                    *
C=* Email:  pawel.a.penczek@@uth.tmc.edu                                *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* This program is distributed in the hope that it will be useful,    *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
C=**********************************************************************
d778 12
a789 2
C   REPR3Q(BCKN,N,IPCUBE,NN,DM,LB,NANG,IRI,ABA,YM, 
C          NSYM,NUMTH,INPIC, LDP,LDPNM)
d794 1
a794 1
        SUBROUTINE REPR3Q(BCKN,N,IPCUBE,NN,DM,LB,NANG,IRI,ABA,
d796 1
a796 1
     &                    LDP,LDPNM)
a797 1
C       NUMTH - NUMTHREDS FOR MP; =NUMTHREADS() FOR ONYX, OTHERWISE=1.
d802 1
a804 1
        REAL, ALLOCATABLE     :: BCKE(:,:,:)
a823 1
#ifdef MPI_DEBUG
a824 1
#endif
d833 2
a834 8
        CALL  RDPRM2(ALA,AIM,NOT_USED,   'LAMBDA, CORRECTION LIMIT')

        CALL  RDPRMI(MAXIT,MODE,NOT_USED,'ITERATION LIMIT, MODE')

        CALL  RDPRM2(TMIN,TMAX,NOT_USED, 'MINIMUM, MAXIMUM')

        TMIN = TMIN-ABA
        TMAX = TMAX-ABA
d837 2
a838 4
2059    FORMAT('  MINIMUM AND MAXIMUM AFTER AVERAGE SUBTRACTION',/,
     &           2(5X,1PE10.3))

        CALL RDPRM(T,NOT_USED,'SMOOTHING CONST (0.0-0.999)')
d840 2
a841 2
C       CHANGE IT TO (ZERO,INFINITY) RANGE
        T = T / (1.0-T)
d845 2
a846 2
        R  = IRI*IRI
        NC = N/2+1
d850 1
a850 1
           XX = QT*QT
a863 6
        ALLOCATE(BCKE(N,N,N), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'REPR3Q, BCKE',N*N*N)
           RETURN
        ENDIF

d887 1
a887 1
           CALL ERRT(46,'REPR3Q, BCKE_SUM...',IER)
d898 1
a898 1
           CALL ERRT(46,'REPR3Q, LB_LOC',MWANT)
d932 1
a932 1
 444    FORMAT('  REPR3Q: DATA DISTRIBUTION COMPLETED, MYPID = ',I3) 
a935 3
        IF (MYPID .EQ. 0)  WRITE(NOUT,971)
971     FORMAT(/'  COMMENCING ITERATION; 1 ')

d1002 2
a1003 2
                       DMS(:,:,1)
     &                 = MATMUL(SM(:,:,ISYM),DM_LOC(:,:,K))
d1005 1
a1005 1
                       DMS(:,:,1)=DM_LOC(:,:,K)
d1022 1
a1022 1
                    WRITE(0,*) 'REDPRS: FAILED TO ALLREDUCE BCKE_SUM'
d1027 1
a1027 1
                 TSUM = TSUM + (TSUM1-TSUM0) 
d1049 2
a1050 1
              DO I=IPCUBE(3,KN),IPCUBE(3,KN)+IPCUBE(2,KN)
d1057 1
d1063 1
a1063 1
2041       FORMAT('  SQUARED CORRECTION OF THE STRUCTURE',2(2X,1PE12.4))
d1071 1
a1071 1
2061                FORMAT('  MINIMUM IN PROJECTIONS =',1PE10.3) 
d1075 2
a1076 2
2051                  FORMAT('  MIN CONSTRAINT ACTIVATED, VALUE IN 3D=',
     &                        1PE10.3)
d1084 1
a1084 1
2062                FORMAT('  MAXIMUM IN PROJECTIONS=',1PE10.3) 
d1088 2
a1089 2
2052                  FORMAT('  MAX CONSTRAINT ACTIVATED, VALUE IN 3D=',
     &                          1PE10.3)
d1106 1
a1106 1
           IF (SQ.GT.AIM .AND. ITER.LT.MAXIT)  THEN
a1156 2
        WRITE(NOUT,975)
975     FORMAT('  COMMENCING ITERATION: 1 ')
d1199 1
d1207 1
d1261 1
a1261 1
     &          CALL SMT3_Q(T,ALA,BCKN,BCKN,N,N,N,IPCUBE,NN)
d1267 1
a1267 1
              DO I=IPCUBE(3,KN),IPCUBE(3,KN)+IPCUBE(2,KN)
d1276 2
a1277 2
2041       FORMAT('  ITERATION: ',I6,
     &        '   SQUARED CORRECTION OF STRUCTURE:',2(2X,1PE12.4))
d1281 1
a1281 1
              IF (ITER.GT.1)  THEN
d1289 2
a1290 2
2051                  FORMAT('  MIN CONSTRAINT ACTIVATED, VALUE IN 3D=',
     &                        1PE10.3)
d1298 1
a1298 1
2062                FORMAT('  MAXIMUM IN PROJECTIONS =',1PE10.3) 
d1302 2
a1303 2
2052                  FORMAT('  MAX CONSTRAINT ACTIVATED, VALUE IN 3D=',
     &                          1PE10.3)
d1359 1
a1359 1
              IF (MOD(N,2) .EQ. 0)  THEN
d1388 1
a1388 1
           IF (MOD(N,2) .EQ. 0)  THEN
d1393 1
d1398 2
a1399 1
999   IF (ALLOCATED(BCKE))  DEALLOCATE (BCKE)
d1401 5
a1405 5
      if (ALLOCATED(BCKE_SUM)) DEALLOCATE(BCKE_SUM)
      if (ALLOCATED(DM_LOC))   DEALLOCATE(DM_LOC)
      if (ALLOCATED(LB_LOC))   DEALLOCATE(LB_LOC)
      if (ALLOCATED(PSIZE))    DEALLOCATE(PSIZE)
      if (ALLOCATED(NBASE))    DEALLOCATE(NBASE)
d1407 2
a1408 2
      IF (MYPID .EQ. 0) WRITE(6,888) TSUM
 888  FORMAT('  REDUCTION TIME = ', 1PE11.3) 
d1411 1
a1412 4




@


1.90
log
@PRJCQ --> PRJCQ_N now (buggy as no LDP passed)
@
text
@d1 1
a1 1
cqC **********************************************************************
d103 1
a103 1
     &                 'ENTER TEMPLATE FOR 2-D IMAGES',IRTFLG)
d434 8
a441 2
              CALL RPRQD(N,PRJLOC(1,1,K),CB_LOC,IPCUBE,NN,DMS,RI, 
     &                   LDP,LDPNM)
d488 3
a490 1
              CALL RPRQD(N,PROJ,CB,IPCUBE,NN,DMS,RI, LDP,LDPNM)
d496 1
a496 1
        IF (MYPID .LE. 0) CLOSE(77)
d500 1
a500 1
        IF (MYPID .LE. 0) WRITE(NOUT,2044)  KLP,ABA
d502 2
a503 2
     &      ('  TOTAL NUMBER OF POINTS IN PROJECTIONS =',I10,
     &     /,' AVERAGE OUTSIDE THE WINDOW            =',1PE10.3,/)
a1198 100
C++*********************************************************************
C *  RPRQD.F  
C=**********************************************************************
C=* From: SPIDER - MODULAR IMAGE PROCESSING SYSTEM                     *
C=* Copyright (C)2001, P. A. Penczek                                   *
C=*                                                                    *
C=* University of Texas - Houston Medical School                       *
C=*                                                                    *
C=* Email:  pawel.a.penczek@@uth.tmc.edu                                *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* This program is distributed in the hope that it will be useful,    *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
C=**********************************************************************
C  RPRQD(N,B,CUBE,IPCUBE,NN,DM,RI, LDP,LDPNM)   
C **********************************************************************

        SUBROUTINE RPRQD(N,B,CUBE,IPCUBE,NN,DM,RI, LDP,LDPNM)

        INCLUDE 'CMBLOCK.INC'

        DIMENSION  B(N,N),CUBE(*),IPCUBE(5,NN),DM(9)
        LOGICAL    ::  ALLOK

C       IPCUBE: 1 - BEGINNING
C         2 - END
C         3 - IX
C         4 - IY
C         5 - IZ

        R=RI*RI

        ALLOK = .TRUE.
        DM1   = DM(1)
        DM4   = DM(4)

c$omp parallel do private(i,j,xb,yb,xbb,ybb,iqx,iqy,dipy),shared(allok)

        DO I=1,NN
           XB = (IPCUBE(3,I)-LDP)*DM(1)+(IPCUBE(4,I)-LDP)*DM(2)+
     &          (IPCUBE(5,I)-LDP)*DM(3)
           YB = (IPCUBE(3,I)-LDP)*DM(4)+(IPCUBE(4,I)-LDP)*DM(5)+
     &          (IPCUBE(5,I)-LDP)*DM(6)

           DO J=IPCUBE(1,I),IPCUBE(2,I)

              XBB = (J - IPCUBE(1,I)) * DM1 + XB
              IQX = IFIX(XBB + FLOAT(LDPNM))

              YBB = (J - IPCUBE(1,I)) * DM4 + YB
              IQY = IFIX(YBB + FLOAT(LDPNM))
              IF (IQX.LT.1 .OR. IQX.GE.N .OR.
     &            IQY.LT.1 .OR. IQY.GE.N) THEN
                 ALLOK = .FALSE.
              ELSE

                 DIPY = YBB + LDPNM - IQY

C                EVEN FASTER VERSION
                 CUBE(J) = CUBE(J) + B(IQX,IQY) + 
     &              DIPY * (B(IQX,IQY+1)   - B(IQX,IQY)) +
     &              (XBB + LDPNM - IQX) * (B(IQX+1,IQY) - B(IQX,IQY) + 
     &              DIPY * (B(IQX+1,IQY+1) - B(IQX+1,IQY) -
     &                      B(IQX,IQY+1)   + B(IQX,IQY)))

C               FASTER VERSION
C               CUBE(J)=CUBE(J)
C    &          +B(IQX,IQY)+DIPY*(B(IQX,IQY+1)-B(IQX,IQY))
C    &          +DIPX*(B(IQX+1,IQY)-B(IQX,IQY)
C    &          +DIPY*(B(IQX+1,IQY+1)-B(IQX+1,IQY)
C    &          -B(IQX,IQY+1)+B(IQX,IQY)))
C
C               ORIGINAL VERSION
C                CUBE(J)=CUBE(J)
C     &                 +(1.0-DIPX)*(1.0-DIPY)*B(MAP(IQX,IQY))
C     &                 +     DIPX *(1.0-DIPY)*B(MAP(IQX+1,IQY))
C     &                 +(1.0-DIPX)*     DIPY *B(MAP(IQX,IQY+1))
C     &                 +     DIPX *     DIPY *B(MAP(IQX+1,IQY+1))

             ENDIF
           ENDDO
        ENDDO

        IF (.NOT. ALLOK) THEN
           CALL ERRT(101,'IQX OR IQY OUT OF RANGE - REDUCE RADIUS!',NE)
        ENDIF
      
        END
@


1.89
log
@used BCKPJ_LIN instead of common par using: bckpj (bckcq)
@
text
@d1 1
a1 1
C **********************************************************************
d50 1
a50 2
C  CALLS:
C         REDPRS
d55 1
a55 1
C         PRJCQ 
d556 2
a557 1
     &                   SM,NSYM,NUMTH,INPIC,ITERDONE,BNORM, LDP,LDPNM)
d750 2
a751 1
                    CALL PRJCQ(BCKN,NMAT,DMS,PROJ,N,IPCUBE,NN)
d981 2
a982 2
                   CALL PRJCQ(BCKN,NMAT,DMS(1,1,L_TH),
     &                       PROJ(1,L_TH),N,IPCUBE,NN)
@


1.88
log
@must use prepcub_s.f
@
text
@d18 1
d55 1
a55 1
C         BCKCQ 
a75 2
        COMMON /PAR/        LDP,NM,LDPNM

d181 1
a181 2
        !CALL PREPCUB_S(NDIM,NDIMSQ,DUM,RI,MD)
         CALL PREPCUB_S(NDIM,NDIMSQ,IDUM,RI,MD,LDP)
a191 1
       !CALL PREPCUB_S(NDIM,NDIMSQ,IPCUBE,RI,MD)
d213 2
a214 1
     &         RI,ABA,SM,NSYM,LUNPROJ,LUNVOL,BNORM,FILPAT,IRTFLG)
d243 1
a243 1
     &               SM,NSYM,NUMTH,LUNVOL,ITERDONE,BNORM)
d302 1
a302 1
     &              BNORM,FILPAT,IRTFLG)
d307 9
a315 9
	REAL, ALLOCATABLE, DIMENSION(:,:,:) :: CB
        REAL                                :: ANG(3,NANG)
        REAL                                :: SM(3,3,NSYM)
        INTEGER                             :: ILIST(NANG),IPCUBE(5,NN)
        REAL                                :: DM(3,3,NANG),DMS(3,3)

        CHARACTER(LEN=*)                    :: FILPAT
        CHARACTER(LEN=MAXNAM)               :: FILNAM
        DOUBLE PRECISION                    :: ABA,SUS,SSQ
d318 1
a318 1
	REAL                                :: PROJ(N,N)
d323 6
a328 6
        INTEGER                                :: ISTAT(MPI_STATUS_SIZE)
        REAL   , ALLOCATABLE, DIMENSION(:,:,:) :: CB_LOC
        REAL   , ALLOCATABLE, DIMENSION(:,:,:) :: PRJLOC, PRJBUF
        INTEGER, ALLOCATABLE, DIMENSION(:)     :: PSIZE
        INTEGER, ALLOCATABLE, DIMENSION(:)     :: NBASE
        DOUBLE PRECISION      ABA_LOC
d435 2
a436 1
              CALL RPRQD(N,PRJLOC(1,1,K),CB_LOC,IPCUBE,NN,DMS,RI)
d447 1
a447 1
       CALL ALLREDUCE_MPI('REPRS','ABA', ABA_LOC,ABA,
d483 1
a483 1
              CALL RPRQD(N,PROJ,CB,IPCUBE,NN,DMS,RI)
d524 1
a524 1
C     SPEEDED UP FEB. 2000 ARDEAN LEITH
d550 2
a551 1
C   REPR3Q(BCKN,N,IPCUBE,NN,DM,LB,NANG,IRI,ABA,YM, NSYM,NUMTH,INPIC)
d557 1
a557 1
     &                   SM,NSYM,NUMTH,INPIC,ITERDONE,BNORM)
d563 4
a566 4
        DIMENSION   BCKN(N,N,N)
        DIMENSION   SM(3,3,NSYM),DM(3,3,NANG)
        DIMENSION   IPCUBE(5,NN),LB(NANG)
        REAL, ALLOCATABLE, DIMENSION(:,:,:) :: BCKE
d569 1
a569 1
        DIMENSION CB(N),PROJT(4,N*N),PROJ(N*N,NUMTH),DMS(3,3,NUMTH)
d572 2
a573 2
        LOGICAL*1         MASK(N,N)
        DOUBLE PRECISION  ABA
d575 1
a575 2
        COMMON /PAR/      LDP,NM,LDPNM
        LOGICAL*1         ACTIVE_MIN, ACTIVE_MAX
d579 7
a585 7
        INTEGER                              :: MPISTAT(MPI_STATUS_SIZE)
        REAL                                  :: ALA, SQ, SQOLD, QT
        INTEGER, ALLOCATABLE, DIMENSION(:)    :: PSIZE
        INTEGER, ALLOCATABLE, DIMENSION(:)    :: NBASE
        INTEGER, ALLOCATABLE, DIMENSION(:)    :: LB_LOC
        REAL,    ALLOCATABLE, DIMENSION(:,:,:):: DM_LOC
        REAL,    ALLOCATABLE, DIMENSION(:,:,:):: BCKE_SUM
d587 1
a587 1
        DOUBLE PRECISION                      :: TSUM, TSUM0, TSUM1
d762 1
a762 1
C                   HERE BCKCQ ITSELF IS MP
d787 2
a788 2
                    CALL BCKCQ(BCKE, NMAT  , DMS, PROJt,
     &                         N   , IPCUBE, NN)
d995 1
a995 1
C                HERE BCKCQ ITSELF IS MP  
d1023 2
a1024 1
                    CALL BCKCQ(BCKE,NMAT,DMS(1,1,1),PROJT,N,IPCUBE,NN)
d1216 1
a1216 1
C  RPRQD   
d1219 1
a1219 1
        SUBROUTINE RPRQD(N,B,CUBE,IPCUBE,NN,DM,RI)
d1224 1
a1224 3
        LOGICAL           ALLOK

        COMMON /PAR/  LDP,NM,LDPNM
@


1.87
log
@PREPCUB_S --> PREPCUB
@
text
@d183 1
a183 1
        CALL PREPCUB(NDIM,NDIM,NDIM,NDIMSQ,IDUM,RI,MD,LDP,LDP,LDP)
d193 2
a194 2
        CALL PREPCUB(NDIM,NDIM,NDIM,NDIMSQ,IPCUBE,RI,MD,LDP,LDP,LDP)
        !CALL PREPCUB_S(NDIM,NDIMSQ,IPCUBE,RI,MD)
@


1.86
log
@renamed from reps,  allocated ilist, cosmetic
@
text
@d17 1
d53 1
a53 1
C         PREPCUB_S 
d182 2
a183 1
        CALL PREPCUB_S(NDIM,NDIMSQ,DUM,RI,MD)
d193 2
a194 1
        CALL PREPCUB_S(NDIM,NDIMSQ,IPCUBE,RI,MD)
@


1.85
log
@ORDER OF PSI,THETA,PHI LISTED WRONG (ANG(J,K),J=3,1,-1)
@
text
@d2 1
a2 1
c  REPS.F
d15 2
d40 1
a40 1
C  REPS
d68 1
a68 1
        SUBROUTINE REPS
a73 10
        REAL,    DIMENSION(:,:), POINTER       :: ANGSYM
        REAL,    ALLOCATABLE, DIMENSION(:,:)   :: SM,ANG,DM
        REAL,    ALLOCATABLE, DIMENSION(:,:,:) :: BCKN
        INTEGER, ALLOCATABLE, DIMENSION(:)     :: LB
        INTEGER, ALLOCATABLE, DIMENSION(:,:)   :: IPCUBE
        CHARACTER(LEN=MAXNAM)                  :: ANGDOC
        CHARACTER(LEN=MAXNAM)                  :: FILNAM,FILPAT
        DOUBLE PRECISION                       :: ABA
        LOGICAL                                :: MD
        
d76 16
a91 1
        DATA  LUNANG,LUNPROJ,LUNVOL,INPIC/77,97,98,99/
a92 1
        DOUBLE PRECISION T0, T1
d95 7
a101 1
        NILMAX = NIMAX
d103 1
a103 1
        CALL FILELIST(.TRUE.,INPIC,FILPAT,NLET,INUMBR,NILMAX,NANG,
d116 1
a116 1
           CALL ERRT(46,'REPS, ANG,DM',12*NANG)
d121 1
a121 1
        CALL GETDOCLIST('ANGLES DOC',LUNANG,INUMBR,NANG,
d138 1
a138 1
        CALL FILGET(FILPAT,FILNAM,NLET,INUMBR,IRTFLG)
d186 1
a186 1
           CALL ERRT(46,'REPS, IPCUBE',5*NDIMSQ)
a192 1
c!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
a198 1
c!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
d212 1
a212 1
        CALL REDPRS(NDIM,NANG,ANG,INUMBR,IPCUBE,NDIMSQ,DM,
d218 1
a218 1
           CALL ERRT(46,'REPS, LB',NANG)
d265 2
@


1.84
log
@ OUTPUT SHORTENED
@
text
@d14 1
d119 1
a119 1
              WRITE(NOUT,333) K,(ANG(J,K),J=1,3)
@


1.83
log
@*** empty log message ***
@
text
@d13 1
d16 3
a18 3
C=* From: SPIDER - MODULAR IMAGE PROCESSING SYSTEM                     *
C=* Copyright (C)2001, P. A. Penczek                                   *
C=*                                                                    *
a19 1
C=*                                                                    *
d22 1
a22 1
C=* This program is free software; you can redistribute it and/or      *
d27 1
a27 1
C=* This program is distributed in the hope that it will be useful,    *
d33 1
a33 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d39 5
a43 5
C  PURPOSE:  REPROJECTIONS 3D, RICHARDSON'S METHOD, 
C          RECONSTRUCTION KEPT IN SQUARE TO INTRODUCE OTHER CONSTRAINTS.
C          AVERAGE OUTSIDE THE WINDOW IS SUBTRACTED
C          MIN, MAX RELATE TO THE PROJECTIONS
C          SYMMETRIES IMPOSED ...
a84 2
#ifdef USE_MPI
        INCLUDE 'mpif.h'
d86 1
a86 7
C
        ICOMM  = MPI_COMM_WORLD
        MPIERR = 0
        CALL MPI_COMM_RANK(ICOMM, MYPID, MPIERR)
#else
        MYPID = -1
#endif
d691 2
a692 1
        end if
d699 3
a702 5
           IF (MYPID .EQ. 0) THEN
              WRITE(NOUT,971) ITER
971           FORMAT(/'  ITERATION ',I6)
           ENDIF

d825 1
a825 2
           IF (MYPID .LE. 0)  WRITE(NOUT,2041) SQ,SQ/BNORM
          
d920 2
a923 2
           WRITE(NOUT,971) ITER
971        FORMAT(/'  ITERATION ',I6)
d930 1
a930 1
                       BCKE(I,J,K)=0.0
d944 2
a945 2
                 L_EN=MIN0(NANG,K+NUMTH-1)
                 L_NUM=MIN0(NUMTH,NANG-K+1)
d950 1
a950 1
                        PROJ(I,J)=0.0
d1037 3
a1039 2
           WRITE(NOUT,2041) SQ,SQ/BNORM
2041       FORMAT('  SQUARED CORRECTION OF THE STRUCTURE',2(2X,1PE12.4))
@


1.82
log
@refactored
@
text
@d212 1
a212 1
     &         RI,ABA,SM,NSYM,NOUT,LUNPROJ,LUNVOL,BNORM,FILPAT,IRTFLG)
d297 1
a297 1
     &              RI,ABA,SM,NSYM,NOUT,LUNPROJ,LUNVOL,
d303 1
a303 1
	REAL, ALLOCATABLE, DIMENSION(:,:,:  :: CB
d446 2
a447 1
 #ifdef MPI_DEBUG
d450 1
@


1.81
log
@Pawels GPL License used
@
text
@d3 11
a13 5
C                 OPFILEC                          FEB 03 ARDEAN LEITH
C                 ADDED REG_SET FOR ITER           AUG 00 ARDEAN LEITH
C                 BUILDM PARAMETERS                JUL 03 ARDEAN LEITH
C                 MPI                              FEB 04 Chao Yang
C++*********************************************************************
d38 8
a45 12
C *  
C **********************************************************************
C  REPROJECTIONS 3D, RICHARDSON'S METHOD, 
C  RECONSTRUCTION KEPT IN THE SQUARE TO INTRODUCE OTHER CONSTRAINTS.
C  AVERAGE OUTSIDE THE WINDOW IS SUBTRACTED
C  MIN, MAX RELATE TO THE PROJECTIONS
C  SYMMETRIES IMPOSED ...
C                             INTERPOLATION CHANGED !
C  CORRECTIONS APPLIED ON THE VOLUME SIDE.   - 01/10/94
C  COMPRESSION OF ANGLES - 08/14/96
C  SYMMETRIES CORRECTED  - 01/2001
C  REAL SPACE SYMMETRIZATION AFTER ITERATIVE PROCESS ADDED - 05/02
d49 5
a53 5
C         RPRQ(NDIM,B,CUBE,IPCUBE,NDIMSQ,PHI,THETA,PSI,DM,RI)
C         ASTA(X,NDIM,RI,ABA,KLP)
C         PREPCUB_S(NDIM,NDIMSQ,IPCUBE,RI,MD)
C         BCKCQ(CUBE,LTC,DM,B,NDIM,IPCUBE,NDIMSQ)
C         PRJCQ(CUBE,LTC,DM,B,NDIM,IPCUBE,NDIMSQ)
d55 8
a62 10
C         SMT3_Q(T,ALA,X,Y,NDIM,NROW,NSLICE,IPCUBE,NDIMSQ)
C-        DOMIN3_S(SQ,NMAT,IPCUBE,NDIMSQ,TMIN)
C-        DOMAX3_S(SQ,NMAT,IPCUBE,NDIMSQ,TMAX)
C         DOCORS3_S(BCKE,BCN,NDIM,NMAT,IPCUBE,NDIMSQ,ALA,ANGS)
C-        BMAX_C(BCKE,NMAT,IPCUBE,NDIMSQ,BMAX)
C-        BMIN_C(BCKE,NMAT,IPCUBE,NDIMSQ,BMIN)
C         FMAX_Q(X,MAP,NDIM,XMAX)
C         FMIN_Q(X,MAP,NDIM,XMIN)
C
C IMAGE_PROCESSING_ROUTINE
d73 9
a81 5
        REAL,    DIMENSION(:,:), POINTER ::         ANGSYM
        REAL,    ALLOCATABLE, DIMENSION(:,:) ::     SM,ANG,DM
        REAL,    ALLOCATABLE, DIMENSION(:,:,:) ::   BCKN
        INTEGER, ALLOCATABLE, DIMENSION(:) ::       LB
        INTEGER, ALLOCATABLE, DIMENSION(:,:) ::     IPCUBE
a82 4
        COMMON  /F_SPEC/    FINPAT,NLET,FINPIC
        CHARACTER*80        FINPIC,FINPAT,FILNAM
        CHARACTER(LEN=MAXNAM)   ::  ANGDOC

a83 2
        DOUBLE PRECISION    ABA
        LOGICAL             MD
d86 1
a88 1
        INTEGER MYPID, COMM, MPIERR
d91 1
a91 1
        COMM   = MPI_COMM_WORLD
d93 1
a93 1
        CALL MPI_COMM_RANK(COMM, MYPID, MPIERR)
d97 1
d100 1
a100 1
        CALL FILELIST(.TRUE.,INPIC,FINPAT,NLET,INUMBR,NILMAX,NANG,
d106 1
a106 1
2001    FORMAT(' NUMBER OF IMAGES: ',I7)
d129 1
a129 1
333           FORMAT(' PROJECTION #',I7,
d134 2
a135 1
        CALL FILGET(FINPAT,FINPIC,NLET,INUMBR,IRTFLG)
d139 1
a139 1
        CALL OPFILEC(0,.FALSE.,FINPIC,LUNPROJ,'O',IFORM,NSAM,NROW,NSL,
d152 1
a152 1
        CALL GETDOCDAT('SYMMETRIES DOC',.TRUE.,FINPIC,INPIC,
d166 1
a166 1
2021       FORMAT(/,' NUMBER OF SYMMETRIES: ',I7,/)
d181 1
a181 1
        ALLOCATE (IPCUBE(5,NDIMSQ), STAT=IRTFLG)
d183 1
a183 1
           CALL ERRT(46,'REPS, IPCUBE',IER)
d202 2
a203 8
#ifdef USE_MPI
        IF (MYPID .EQ. 0) THEN
           WRITE(NOUT,1001)
        ENDIF
#else
        WRITE(NOUT,1001)
#endif
1001    FORMAT(/,' REPROJECTION PROGRAM FOR 3-D BACK-PROJECTION',/)
d211 2
a212 4
c       CALL REDPRQ(NDIM,NANG,ANG,INUMBR,IPCUBE,NDIMSQ,DM,
c     &              RI,ABA,LUNPROJ,LUNVOL,IRTFLG)
        CALL  REDPRS(NDIM,NANG,ANG,INUMBR,IPCUBE,NDIMSQ,DM,
     &         RI,ABA,SM,NSYM,NOUT,LUNPROJ,LUNVOL,IRTFLG)
d215 1
a215 1
        ALLOCATE (LB(NANG), STAT=IRTFLG)
d217 1
a217 1
           CALL ERRT(46,'REPS, LB',IER)
a223 8
#ifdef USE_MPI
        IF (MYPID .EQ. 0) THEN
           WRITE(NOUT,2027) NANG
        endif
#else
        WRITE(NOUT,2027) NANG
#endif
2027    FORMAT(' EFFECTIVE NUMBER OF ANGLES: ',I7)
d225 4
a228 1
        ALLOCATE (BCKN(NDIM,NDIM,NDIM), STAT=IRTFLG)
d230 2
a231 1
           CALL ERRT(46,'REPS, BCKN',IER)
d234 2
a235 2
#ifdef USE_MPI
#ifdef MPI_DEBUG
d238 1
a238 1
#endif
d241 1
a241 1
     &               SM,NSYM,NUMTH,LUNVOL,ITERDONE)
d243 1
a243 2
#ifdef USE_MPI
#ifdef MPI_DEBUG
d248 1
a248 1
 222        FORMAT(1X, ' BPRP TIME: ', 1PE11.3)
d251 1
a251 1
#endif
d254 1
d265 1
a294 1
C **********************************************************************
d297 2
a298 1
     &              RI,ABA,SM,NSYM,NOUT,LUNPROJ,LUNVOL,IRTFLG)
d300 12
a311 3
	REAL, ALLOCATABLE, DIMENSION(:,:,:) :: CB
        DIMENSION     ANG(3,NANG),SM(3,3,NSYM)
        DIMENSION     ILIST(NANG),IPCUBE(5,NN),DM(3,3,NANG),DMS(3,3)
d314 2
a315 2
	DIMENSION     PROJ(N,N)
        CHARACTER*80  FINPIC,FINPAT
a316 3
        COMMON  /F_SPEC/  FINPAT,NLET,FINPIC
        COMMON /NORMB/    BNORM
        DOUBLE PRECISION  ABA,SUS,SSQ
d319 1
a319 3
        INTEGER MYPID, COMM, MPIERR, NPROCS
        INTEGER NANG_LOC, IP, KGLB, IPROC
        INTEGER  ISTAT(MPI_STATUS_SIZE)
d324 1
a324 6
        double precision      ABA_LOC
        INTEGER               KLP_LOC
c
        COMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(COMM, MYPID, MPIERR)
        CALL MPI_COMM_SIZE(COMM, NPROCS, MPIERR)
d326 8
a333 1
        ALLOCATE(PSIZE(NPROCS), STAT=IRTFLG)
d335 2
a336 11
           CALL ERRT(46,'REDPRS, PSIZE',IER)
           RETURN
        ENDIF
        ALLOCATE(NBASE(NPROCS), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN
           CALL ERRT(46,'REDPRS, NBASE',IER)
           RETURN
        ENDIF
        ALLOCATE (CB_LOC(N,N,N), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN
           CALL ERRT(46,'REDPRS, CB_LOC',IER)
d339 1
d341 1
a341 1
C
d343 1
a343 1
C
d346 1
d349 1
a350 1
 111    FORMAT(1x,'REDPRS: NBASE = ', I5, ' MYPID = ', I5)
d352 2
d356 1
a356 3
        IRTFLG = 1
C
        ALLOCATE (CB(N,N,N), STAT=IRTFLG)
d358 1
a358 1
           CALL ERRT(46,'REDPRS, CB',IER)
d365 2
d368 1
a368 1
        ABA_LOC = 0.0d0
d370 1
a370 1
        ALLOCATE (PRJLOC(N,N,NANG_LOC), PRJBUF(N,N,PSIZE(1)), 
d384 2
a385 1
              CALL  FILGET(FINPAT,FINPIC,NLET,ILIST(KGLB),IRTFLG)
d389 1
a389 1
              CALL OPFILEC(0,.FALSE.,FINPIC,LUNPROJ,'O',IFORM,
d404 3
a406 7
                 CALL MPI_SEND(PRJBUF , N*N*NLOC, MPI_REAL,
     &                         IPROC-1, IPROC-1 , COMM    ,
     &                         MPIERR)
                 IF (MPIERR .NE. 0) THEN
                     WRITE(6,*) 'REDPRS: SEND FAILED'
                     STOP
                 ENDIF
d409 1
a409 1
     &                         0     , MPI_ANY_TAG, COMM    ,
d425 1
a425 1
              IF(NSYM.GT.1)  THEN
d427 1
a427 1
                 DMS=MATMUL(SM(:,:,ISYM),DM(:,:,KGLB))
d429 1
a429 1
                 DMS=DM(:,:,KGLB)
d436 1
d438 1
a438 1
        WRITE(6,*) 'REDPRS: MPI_ALLREDUCE ON CB..., MYPID = ', MYPID
d440 7
a446 20
        CALL MPI_ALLREDUCE(CB_LOC , CB  , N3,  MPI_REAL,
     &                     MPI_SUM, COMM, MPIERR)
C
        IF (MPIERR .NE. 0) THEN
           WRITE(0,*) 'REDPRS: FAILED AT ALLREDUCE CB'
           STOP
        ENDIF
        CALL MPI_ALLREDUCE(ABA_LOC, ABA , 1,   MPI_DOUBLE_PRECISION,
     &                     MPI_SUM, COMM, MPIERR)
        IF (MPIERR .NE. 0) THEN
           WRITE(0,*) 'REDPRS: FAILED AT ALLREDUCE ABA'
           STOP
        ENDIF
        CALL MPI_ALLREDUCE(KLP_LOC, KLP , 1,   MPI_INTEGER,
     &                     MPI_SUM, COMM, MPIERR)
        IF (MPIERR .NE. 0) THEN
           WRITE(0,*) 'REDPRS: FAILED AT ALLREDUCE KLP'
           STOP
        ENDIF
#ifdef MPI_DEBUG
d449 1
a449 1

d452 3
a454 2
        DO    K=1,NANG
           CALL  FILGET(FINPAT,FINPIC,NLET,ILIST(K),IRTFLG)
d458 1
a458 1
           CALL OPFILEC(0,.FALSE.,FINPIC,LUNPROJ,'O',IFORM,
d480 1
d488 1
a488 1
     &      (' TOTAL NUMBER OF POINTS IN PROJECTIONS =',I10,
d517 1
a541 5
C **********************************************************************
C
C     SPEEDED UP FEB. 2000 ARDEAN LEITH
C
C **********************************************************************
d543 1
a543 4
C   REPR3Q(BCKN,N,IPCUBE,NN,DM,LB,NANG,IRI,ABA,YM,
C           ,NSYM,NUMTH,INPIC)
C
C IMAGE_PROCESSING_ROUTINE
d549 1
a549 1
     &          SM,NSYM,NUMTH,INPIC,ITERDONE)
d566 1
a566 1
        COMMON /NORMB/    BNORM
d569 1
d572 2
a573 3
        INTEGER MYPID, COMM, NPROCS, MPIERR, MPISTAT(MPI_STATUS_SIZE)
        INTEGER NANG_LOC, IP, DMTAG, LBTAG, MASTER, N2
        REAL    ALA, SQ, SQOLD, QT
d580 1
a580 1
        DOUBLE PRECISION  TSUM, TSUM0, TSUM1
d582 4
a585 4
C
        COMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(COMM, MYPID , MPIERR)
        CALL MPI_COMM_SIZE(COMM, NPROCS, MPIERR)
d591 1
d593 1
d598 3
a600 8
#ifdef USE_MPI
        IF (MYPID .EQ. 0) THEN
           WRITE(NOUT,2059) TMIN,TMAX
        ENDIF
#else
        WRITE(NOUT,2059) TMIN,TMAX
#endif
2059    FORMAT(' MINIMUM AND MAXIMUM AFTER AVERAGE SUBTRACTION',/,
d602 1
d606 1
a606 1
        T = T/(1.0-T)
d610 2
a611 2
        R=IRI*IRI
        NC=N/2+1
d617 1
a617 1
              QT=I-NC
d619 1
a619 1
                 MASK(I,J)=.TRUE.
d621 1
a621 1
                 MASK(I,J)=.FALSE.
d626 2
a627 2
        NMAT=N*N*N
        LTB=N*N
d629 1
a629 1
        ALLOCATE (BCKE(N,N,N), STAT=IRTFLG)
d631 1
a631 1
           CALL ERRT(46,'REPR3Q, BCKE',IER)
d649 2
d652 4
a655 1
        ALLOCATE (BCKE_SUM(N,N,N), STAT=IRTFLG)
d657 2
a658 1
           CALL ERRT(46,'REPR3Q, BCKE_SUM',IER)
a662 11
        ALLOCATE(PSIZE(NPROCS),STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'REPR3Q, PSIZE',IER)
           RETURN
        ENDIF
        ALLOCATE(NBASE(NPROCS),STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'REPR3Q, NBASE',IER)
           RETURN
        ENDIF
C
d665 2
a666 2
C
        ALLOCATE(LB_LOC(NANG_LOC),STAT=IRTFLG)
d668 2
a669 1
           CALL ERRT(46,'REPR3Q, LB_LOC',IER)
d672 4
a675 10
c
        ALLOCATE(DM_LOC(3, 3, NANG_LOC),STAT=IRTFLG )
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'REPR3Q, NANG_LOC',IER)
           RETURN
        ENDIF
C
        DMTAG  = 1
        LBTAG  = 2
        MASTER = 0
d677 1
a677 1
c
d679 1
a679 1
c
d683 1
a683 1
     &                      IP-1          , DMTAG      , COMM    ,
d686 1
a686 1
     &                      IP-1          , LBTAG      , COMM       ,
d696 1
a696 1
     &                   DMTAG , COMM      , MPISTAT , MPIERR)
d698 1
a698 1
     &                   LBTAG , COMM      , MPISTAT    , MPIERR)
d702 1
a702 1
 444    FORMAT(1X, 'REPR3Q: DATA DISTRIBUTION COMPLETED, MYPID = ',I3) 
d709 1
a709 1
971           FORMAT(/' ITERATION ',I6)
d724 3
a726 3
              SBQ=0.0
              GMIN=1.0E23
              GMAX=-1.0E23
d729 1
a729 1
	      DO  ISYM=1,NSYM
d763 1
d771 1
a771 1
                    enddo
d785 1
a785 1
c
d787 1
a787 1
c
d793 1
a793 1
     &                              MPI_SUM, COMM    ,
d815 1
a815 1
           SQ=0.0
d830 7
a836 8
           CALL MPI_BCAST(BCKN, NMAT, MPI_REAL, 0, COMM, IERR)
           CALL MPI_BCAST(QT, 1, MPI_REAL, 0, COMM, IERR)
           CALL MPI_BCAST(SQ, 1, MPI_REAL, 0, COMM, IERR)

           IF (MYPID .EQ. 0) THEN
              WRITE(NOUT,2041) SQ,SQ/BNORM
           endif
2041       FORMAT(' SQUARED CORRECTION OF THE STRUCTURE',2(2X,1PE12.4))
d838 1
a838 1
           IF ( MODE.NE.0)  THEN
d840 2
a841 2
              IF (ITER.GT.1)  THEN
                 IF((MODE.EQ.2.OR.MODE.EQ.3.OR.MODE.EQ.7.OR.MODE.EQ.8)
d844 1
a844 1
2061                FORMAT(' MINIMUM IN PROJECTIONS =',1PE10.3) 
d848 1
a848 1
2051                   FORMAT('MIN CONSTRAINT ACTIVATED, VALUE IN 3D=',
d850 1
a850 1
                       ACTIVE_MIN=.TRUE.
d857 1
a857 1
2062                FORMAT(' MAXIMUM IN PROJECTIONS =',1PE10.3) 
d861 1
a861 1
2052                   FORMAT('MAX CONSTRAINT ACTIVATED, VALUE IN 3D=',
d883 2
a884 2
C               Perform additional symmetrization in real space
                IF (NSYM.GT.1)  THEN
d928 1
d933 2
a934 1
971        FORMAT(/' ITERATION ',I6)
d967 1
a967 1
                  DMS(:,:,L_TH)=MATMUL(SM(:,:,ISYM),DM(:,:,K+L_TH-1))
d969 1
a969 1
                  DMS(:,:,L_TH)=DM(:,:,K+L_TH-1)
d1048 1
a1048 1
2041       FORMAT(' SQUARED CORRECTION OF THE STRUCTURE',2(2X,1PE12.4))
d1056 1
a1056 1
2061                FORMAT(' MINIMUM IN PROJECTIONS =',1PE10.3) 
d1060 1
a1060 1
2051                   FORMAT('MIN CONSTRAINT ACTIVATED, VALUE IN 3D=',
d1069 1
a1069 1
2062                FORMAT(' MAXIMUM IN PROJECTIONS =',1PE10.3) 
d1073 1
a1073 1
2052                   FORMAT('MAX CONSTRAINT ACTIVATED, VALUE IN 3D=',
d1146 1
d1177 1
a1177 1
 888  FORMAT(1X,'REDUCTION TIME = ', 1PE11.3) 
d1182 1
d1209 1
d1211 1
@


1.80
log
@removed MPI_BARRIER to reduce comm overhead
@
text
@d1 1
a1 1
C **************************************************************************
d7 25
a31 5
C++************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.
C *  REPS.F   COPYRIGHT (C)2001, P.A.Penczek
C *  UNIVERSITY OF TEXAS - HOUSTON MEDICAL SCHOOL
C *  pawel.a.penczek@@uth.tmc.edu
d33 1
a33 1
C **************************************************************************
d65 1
a65 1
C--************************************************************************
d280 1
a280 2
C++************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.
d282 25
a306 6
C *  COPYRIGHT (C)2001, P.A.Penczek
C *  University of Texas - Houston Medical School
C *  pawel.a.penczek@@uth.tmc.edu
C *    THE CONTENTS OF THIS DOCUMENT CANNOT BE CHANGED WITHOUT WRITTEN
C *    PERMISSION OF THE AUTHOR                          *
C **************************************************************************
d538 1
a538 2
C++************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.
d540 25
a564 6
C *  COPYRIGHT (C)2001, P.A.Penczek
C *  University of Texas - Houston Medical School
C *  pawel.a.penczek@@uth.tmc.edu
C *    THE CONTENTS OF THIS DOCUMENT CANNOT BE CHANGED WITHOUT WRITTEN
C *    PERMISSION OF THE AUTHOR                          *
C **************************************************************************
d568 1
a568 1
C **************************************************************************
d576 1
a576 1
C--************************************************************************
d1221 1
a1221 2
C++************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.
d1223 25
a1247 6
C *  COPYRIGHT (C)2001, P.A.Penczek
C *  University of Texas - Houston Medical School
C *  pawel.a.penczek@@uth.tmc.edu
C *    THE CONTENTS OF THIS DOCUMENT CANNOT BE CHANGED WITHOUT WRITTEN
C *    PERMISSION OF THE AUTHOR                          *
C **************************************************************************
@


1.79
log
@Added MPI_Wtime to time the MPI reduction time
@
text
@a325 1
        CALL MPI_BARRIER(COMM, MPIERR)
a394 1
        CALL MPI_BARRIER(COMM, MPIERR)
@


1.78
log
@mpi
@
text
@d418 1
d555 3
d691 1
d775 4
a778 1
                 call MPI_ALLREDUCE(BCKE   , BCKE_SUM,
d786 4
d1160 4
@


1.77
log
@cosmetic
@
text
@d70 1
a70 1
        INTEGER MYPID, COMM, IERR
d73 5
a77 2
        COMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(COMM, MYPID, IERR)
d86 1
a86 7
#ifdef USE_MPI
        IF (MYPID .EQ. 0) THEN
           WRITE(NOUT,2001) NANG
        ENDIF
#else
        WRITE(NOUT,2001) NANG
#endif
d108 1
a108 6
           IF (VERBOSE) THEN
#ifdef USE_MPI
              IF (MYPID .EQ. 0) THEN
                 WRITE(NOUT,333) K,(ANG(J,K),J=1,3)
              ENDIF              
#else
a109 1
#endif
a192 8
#ifdef USE_MPI
        IF (MYPID .EQ. 0) THEN
           CALL OPFILEC(0,.TRUE.,FILNAM,LUNVOL,'U',IFORM,NDIM,NDIM,NDIM,
     &                MAXIM,'RECONSTRUCTED 3-D',.FALSE.,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999
        ENDIF
        CALL MPI_BCAST(IBCNT, 1, MPI_INTEGER, 0, COMM, IERR)
#else
a195 1
#endif
a198 1

a283 1

d286 3
a288 2
        INTEGER MYPID, COMM, IERR, NPROCS
        INTEGER NANG_LOC, IP, KGLB
d290 1
d297 2
a298 2
        CALL MPI_COMM_RANK(COMM, MYPID , IERR)
        CALL MPI_COMM_SIZE(COMM, NPROCS, IERR)
d326 1
a326 1
        CALL MPI_BARRIER(COMM, IERR)
a339 1

d343 16
a358 4
        DO K=1,NANG_loc
           KGLB = K + NBASE(MYPID+1)
           CALL  FILGET(FINPAT,FINPIC,NLET,ILIST(kglb),IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 999
d360 5
a364 5
           MAXIM = 0
           CALL OPFILEC(0,.FALSE.,FINPIC,LUNPROJ,'O',IFORM,
     &                  LSAM,LROW,NSL,
     &                  MAXIM,'DUMMY',.FALSE.,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 999
d366 4
a369 2
           DO K2=1,N
              CALL  REDLIN(LUNPROJ,PROJ(1,K2),N,K2)
d371 26
a396 1
           CLOSE(LUNPROJ)
d398 3
a400 1
           CALL ASTA(PROJ,N,RI,ABA_loc,KLP_loc)
d404 1
a404 1
                 DMS=MATMUL(SM(:,:,ISYM),DM(:,:,kglb))
d406 1
a406 1
                 DMS=DM(:,:,kglb)
d408 1
a408 1
              CALL RPRQD(N,PROJ,CB_LOC,IPCUBE,NN,DMS,RI)
d412 1
a414 1
        IERR = 0
d416 3
a418 3
        call MPI_ALLREDUCE(CB_LOC , CB  , N3,  MPI_REAL,
     &                     MPI_SUM, COMM, IERR)
        IF (IERR .NE. 0) THEN
d423 2
a424 2
     &                     MPI_SUM, COMM, IERR)
        IF (IERR .NE. 0) THEN
d429 2
a430 2
     &                     MPI_SUM, COMM, IERR)
        IF (IERR .NE. 0) THEN
a466 1

d468 1
a468 1
        CLOSE(77)
d472 1
a472 7
#ifdef USE_MPI
        IF (MYPID .EQ. 0) THEN
           WRITE(NOUT,2044)  KLP,ABA
        ENDIF
#else
        WRITE(NOUT,2044)  KLP,ABA
#endif
a480 1

a490 3
#ifdef USE_MPI
        CALL MPI_BARRIER(COMM,IERR)
#endif
d494 3
a496 3
        if (ALLOCATED(PSIZE))  DEALLOCATE(PSIZE)
        if (ALLOCATED(NBASE))  DEALLOCATE(NBASE)
        if (ALLOCATED(CB_LOC)) DEALLOCATE(CB_LOC)
d546 1
a546 1
        INTEGER MYPID, COMM, NPROCS, IERR, MPISTAT(MPI_STATUS_SIZE)
d556 4
a559 2
        CALL MPI_COMM_RANK(COMM, MYPID , IERR)
        CALL MPI_COMM_SIZE(COMM, NPROCS, IERR)
a622 1

d668 1
a668 1
     &                      IERR)
d671 1
a671 1
     &                      IERR)
d678 1
a678 1
c
d680 3
a682 3
     &                   DMTAG , COMM      , MPISTAT , IERR)
           call MPI_RECV(LB_LOC, nang_loc  , MPI_INTEGER, MASTER,
     &                   LBTAG , COMM      , MPISTAT    , IERR)
d686 1
a686 1
 444    FORMAT(1x, 'REPR3Q: Data distribution completed, MYPID = ',I3) 
d773 4
a776 4
     &                              IERR)
                 IF (IERR .ne. 0) THEN
                    WRITE(0,*) 'REDPRS: failed to ALLREDUCE BCKE_SUM'
                    stop
d791 12
a802 16
c
c          it is more efficient to have one processor read
c          and THEN broadcast than having multiple processors
c          reading from the same file
c
           IF (MYPID .EQ. 0) THEN
              DO KN=1,NN
                 J = IPCUBE(4,KN)
                 K = IPCUBE(5,KN)
                 CALL  REDLIN(INPIC,CB,N,(K-1)*N+J)
                 DO I=IPCUBE(3,KN),IPCUBE(3,KN)+IPCUBE(2,KN)
     &                -IPCUBE(1,KN)
                    QT          = CB(I) - BCKE_SUM(I,J,K)
                    SQ          = SQ + QT* QT
                    BCKN(I,J,K) = BCKN(I,J,K) + ALA * QT
                 ENDDO
d804 4
a807 4
           endif
           call MPI_BCAST(BCKN, NMAT, MPI_REAL, 0, COMM, IERR)
           call MPI_BCAST(QT, 1, MPI_REAL, 0, COMM, IERR)
           call MPI_BCAST(SQ, 1, MPI_REAL, 0, COMM, IERR)
a902 1
c
@


1.76
log
@mpi
@
text
@d12 1
a12 2
C *  THE CONTENTS OF THIS DOCUMENT CANNOT BE CHANGED WITHOUT WRITTEN
C *  PERMISSION OF THE AUTHOR                          *
d512 1
a512 1
        SUBROUTINE REPR3Q (BCKN,N,IPCUBE,NN,DM,LB,NANG,IRI,ABA,
d682 1
d687 1
a687 1
                       BCKE(I,J,K)=0.0
d743 2
a744 2
C                   BACKPROJECT FROM PROJt INTO BCKE
                    IF(NSYM.GT.1)  THEN
d849 1
a849 1
                 SQOLD=SQ
d861 1
d1017 1
a1017 1
           IF (MODE .NE. 0)  THEN
d1062 1
d1085 1
d1096 1
d1103 1
d1105 1
d1124 1
@


1.75
log
@mpi
@
text
@d6 1
d70 6
a75 5
        include 'mpif.h'
        integer mypid, comm, ierr

        comm = MPI_COMM_WORLD
        call MPI_COMM_RANK(comm, mypid, ierr)
d85 1
a85 1
        if (mypid .eq. 0) then
d87 1
a87 1
        endif
d114 1
a114 1
              if (mypid .eq. 0) then
d116 1
a116 1
              endif
d193 1
a193 1
        if (mypid .eq. 0) then
d195 1
a195 1
        endif
d204 1
a204 1
        if (mypid .eq. 0) then
d208 2
a209 3
        else
           ibcnt = ibcnt + 1
        endif
d233 1
a233 1
        if (mypid .eq. 0) then
d246 5
a250 1

d255 10
d276 1
d306 8
a313 8
        include 'mpif.h'
        integer mypid, comm, ierr, nprocs
        integer nang_loc, nrem, ip, kglb
        real   , allocatable, dimension(:,:,:) :: cb_loc
        integer, allocatable, dimension(:)     :: psize
        integer, allocatable, dimension(:)     :: nbase
        double precision      ABA_loc
        integer               KLP_loc
d315 3
a317 3
        comm = MPI_COMM_WORLD
        call MPI_COMM_RANK(comm, mypid , ierr)
        call MPI_COMM_SIZE(comm, nprocs, ierr)
d319 1
a319 1
        allocate(psize(nprocs), stat=irtflg)
d321 1
a321 1
           CALL ERRT(46,'REDPRS, psize',IER)
d324 1
a324 1
        allocate(nbase(nprocs), stat=irtflg)
d326 1
a326 1
           CALL ERRT(46,'REDPRS, nbase',IER)
d329 1
a329 1
        ALLOCATE (cb_loc(N,N,N), STAT=IRTFLG)
d331 1
a331 1
           CALL ERRT(46,'REDPRS, cb_loc',IER)
d334 6
a339 6
        cb_loc = 0.0
c
c       define data distribution
c
        call setpart(nang, psize, nbase)
        nang_loc = psize(mypid+1) 
d341 3
a343 3
        write(6,111) nbase(mypid+1), mypid
        call flushfile(6)
 111    format(1x,'REDPRS: nbase = ', I5, ' mypid = ', I5)
d345 1
a345 1
        call MPI_BARRIER(comm,ierr)
d361 2
a362 2
        ABA_loc = 0.0d0
        KLP_loc = 0
d364 1
a364 1
           kglb = k + nbase(mypid+1)
d387 1
a387 1
              CALL RPRQD(N,PROJ,cb_loc,IPCUBE,NN,DMS,RI)
d392 2
a393 2
        write(6,*) 'REDPRS: MPI_ALLREDUCE on CB..., mypid = ', mypid
        ierr = 0
d395 18
a412 18
        call MPI_ALLREDUCE(cb_loc , CB  , N3,  MPI_REAL,
     &                     MPI_SUM, comm, ierr)
        if (ierr .ne. 0) then
           write(0,*) 'REDPRS: failed at ALLREDUCE cb'
           stop
        end if
        call MPI_ALLREDUCE(ABA_loc, ABA , 1,   MPI_DOUBLE_PRECISION,
     &                     MPI_SUM, comm, ierr)
        if (ierr .ne. 0) then
           write(0,*) 'REDPRS: failed at ALLREDUCE ABA'
           stop
        end if
        call MPI_ALLREDUCE(KLP_loc, KLP , 1,   MPI_INTEGER,
     &                     MPI_SUM, comm, ierr)
        if (ierr .ne. 0) then
           write(0,*) 'REDPRS: failed at ALLREDUCE KLP'
           stop
        end if
d414 1
a414 1
        write(6,*) 'REDPRS: done MPI_ALLREDUCE..., mypid = ', mypid
d453 1
a453 1
        if (mypid .eq. 0) then
d455 1
a455 1
        endif
d479 1
a479 1
        call MPI_BARRIER(comm,ierr)
d484 3
a486 3
        if (allocated(psize))  deallocate(psize)
        if (allocated(nbase))  deallocate(nbase)
        if (allocated(cb_loc)) deallocate(cb_loc)
d535 13
a547 13
        include 'mpif.h'
        integer mypid, comm, nprocs, ierr, mpistat(MPI_STATUS_SIZE)
        integer nang_loc, ip, dmtag, lbtag, master, n2
        real     ALA, SQ, SQOLD, QT
        integer, allocatable, dimension(:)    :: psize
        integer, allocatable, dimension(:)    :: nbase
        integer, allocatable, dimension(:)    :: lb_loc
        real,    allocatable, dimension(:,:,:):: dm_loc
        real,    allocatable, dimension(:,:,:):: bcke_sum
c
        comm = MPI_COMM_WORLD
        call MPI_COMM_RANK(comm, mypid , ierr)
        call MPI_COMM_SIZE(comm, nprocs, ierr)
d557 1
a557 1
        if (mypid .eq. 0) then
d559 1
a559 1
        endif
d613 1
a613 1
        ALLOCATE (bcke_sum(N,N,N), STAT=IRTFLG)
d615 1
a615 1
           CALL ERRT(46,'REPR3Q, bcke_sum',IER)
d618 1
a618 1
        bcke_sum = 0.0
d620 1
a620 1
        allocate(psize(nprocs),stat=irtflg)
d622 1
a622 1
           CALL ERRT(46,'REPR3Q, psize',IER)
d625 1
a625 1
        allocate(nbase(nprocs),stat=irtflg)
d627 1
a627 1
           CALL ERRT(46,'REPR3Q, nbase',IER)
d630 5
a634 5
c
        call setpart(nang, psize, nbase)
        nang_loc = psize(mypid+1)
c
        allocate(lb_loc(nang_loc),stat=irtflg)
d636 1
a636 1
           CALL ERRT(46,'REPR3Q, lb_loc',IER)
d640 1
a640 1
        allocate(dm_loc(3, 3, nang_loc),stat=irtflg )
d642 1
a642 1
           CALL ERRT(46,'REPR3Q, nang_loc',IER)
d645 5
d651 1
a651 4
        dmtag  = 1
        lbtag  = 2
        master = 0
        if (mypid .eq. 0) then
d653 12
a664 14
c          === master distributes DM() and LB() ===
c
           do ip = 2, nprocs
              ibegin = nbase(ip) + 1
              call MPI_SEND(dm(1,1,ibegin), 9*psize(ip), MPI_REAL,
     &                      ip-1          , dmtag      , comm    ,
     &                      ierr)
              call MPI_SEND(lb(ibegin)    , psize(ip)  , MPI_INTEGER,
     &                      ip-1          , lbtag      , comm    ,
     &                      ierr)
           end do
           call scopy(9*nang_loc, dm, 1, dm_loc, 1)
           call scopy(nang_loc  , lb, 1, lb_loc, 1)
        else
d666 1
a666 1
c          === slaves receive data from the master ===
d668 4
a671 4
           call MPI_RECV(dm_loc, 9*nang_loc, MPI_REAL, master,
     &                   dmtag , comm      , mpistat , ierr)
           call MPI_RECV(lb_loc, nang_loc  , MPI_INTEGER, master,
     &                   lbtag , comm      , mpistat    , ierr)
d674 2
a675 2
        write(6,444) mypid
 444    format(1x, 'REPR3Q: Data distribution completed, mypid = ',I3) 
d679 1
a679 1
           if (mypid .eq. 0) then
d682 1
a682 1
           endif
d688 1
a688 1
                       bcke_sum(i,j,k) = 0.0
d702 1
a702 1
                 DO K=1,NANG_loc
d710 1
a710 1
     &                 = MATMUL(SM(:,:,ISYM),dm_loc(:,:,K))
d712 1
a712 1
                       DMS(:,:,1)= dm_loc(:,:,K)
d729 1
a729 1
                    IF (lb_loc(K) .GT. 1)  THEN
d731 1
a731 1
                          PROJ(I,1) = PROJ(I,1)*lb_loc(K)
d734 7
a740 7
                    do i = 1,n*n - n - 1
                       pt         = proj(i,1)
                       projt(1,i) = pt
                       projt(2,i) = proj(i+n,  1) - pt
                       projt(3,i) = proj(i+1,  1) - pt 
                       projt(4,i) = proj(i+n+1,1) - proj(i+1,1)
     &                            - projt(2,i)
d743 1
a743 1
C                   BACKPROJECT FROM projt INTO BCKE
d747 1
a747 1
     &                 = MATMUL(SM(:,:,ISYM),dm_loc(:,:,K))
d749 1
a749 1
                       DMS(:,:,1)=dm_loc(:,:,K)
d751 1
a751 1
                    CALL BCKCQ(BCKE, NMAT  , DMS, projt,
d756 1
a756 1
c                === global sum ===
d758 6
a763 6
                 call MPI_ALLREDUCE(BCKE   , bcke_sum,
     &                              nmat   , MPI_REAL,
     &                              MPI_SUM, comm    ,
     &                              ierr)
                 if (ierr .ne. 0) then
                    write(0,*) 'REDPRS: failed to ALLREDUCE bcke_sum'
d765 1
a765 1
                 end if
d781 1
a781 1
c          and then broadcast than having multiple processors
d784 1
a784 1
           if (mypid .eq. 0) then
d791 1
a791 1
                    QT          = CB(I) - bcke_sum(I,J,K)
d797 3
a799 3
           call MPI_BCAST(BCKN, NMAT, MPI_REAL, 0, comm, ierr)
           call MPI_BCAST(QT, 1, MPI_REAL, 0, comm, ierr)
           call MPI_BCAST(SQ, 1, MPI_REAL, 0, comm, ierr)
d801 1
a801 1
           if (mypid .eq. 0) then
a804 1
           call flushresults()
a894 5
        if (allocated(bcke_sum)) deallocate(bcke_sum)
        if (allocated(dm_loc))   deallocate(dm_loc)
        if (allocated(lb_loc))   deallocate(lb_loc)
        if (allocated(psize))    deallocate(psize)
        if (allocated(nbase))    deallocate(nbase)
d1128 7
@


1.74
log
@used getdoclist.f
@
text
@d68 7
a74 1

d82 5
d88 1
d111 5
d117 1
a121 1

d190 5
d196 1
d201 9
d213 1
d231 5
d237 1
d249 1
a249 1
 
a251 1
     
d289 43
d344 59
d429 1
d436 5
d442 1
d462 3
d467 5
d518 15
d540 5
d546 1
d596 291
d1096 2
@


1.73
log
@reang --> buildm (incorporating cang call)
@
text
@d53 1
a53 1
        REAL,    DIMENSION(:,:), POINTER ::         PANG,ANGSYM
d82 1
a82 13
C       RETRIEVE ARRAY WITH ANGLES DATA IN IT
        MAXXT = 4
        MAXYT = MAXVAL(INUMBR(1:NANG))

C       ALLOCATE PANG IN GETDOCDAT TO RETRIEVE ANGLES FROM DOC FILE
        CALL GETDOCDAT('ANGLES DOC',.TRUE.,ANGDOC,LUNANG,
     &                 .FALSE.,MAXXT,MAXYT,PANG,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

C       ORDER IN THE DOCUMENT FILE IS PSI, THETA, PHI AND ANGLES ARE IN DEGREES!
C       IN ANG ARRAY IT IS OTHER WAY AROUND

        ALLOCATE (ANG(3,MAXYT), STAT=IRTFLG)
d84 1
a84 1
           CALL ERRT(46,'REPS, ANG',3*MAXYT)
d88 6
d95 7
a101 5
           ITMP   = INUMBR(K)
           ICOUNT = PANG(1,ITMP)
           IF (ICOUNT .LE. 0) THEN
              CALL ERRT(102,'MISSING ANGLE FOR IMAGE',ITMP)
              GOTO 9999
d103 1
a103 14
           ANG(3,K) = PANG(2,ITMP)
           ANG(2,K) = PANG(3,ITMP)
           ANG(1,K) = PANG(4,ITMP)
        ENDDO

        ALLOCATE(DM(9,NANG), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'REPS, DM',IER)
           GOTO 9999
        ENDIF

	CALL BUILDM(INUMBR,DM,NANG,PANG,.FALSE.,SSDUM,IRTFLG)
	DEALLOCATE(PANG)
        NULLIFY(PANG)
a222 1
        IF (ASSOCIATED(PANG))  DEALLOCATE(PANG)
@


1.72
log
@icount in getdocdat
@
text
@d1 5
d8 2
a9 3
C *  REPS.F
C *  COPYRIGHT (C)2001, P.A.Penczek
C *  University of Texas - Houston Medical School
d11 2
a12 3
C *    THE CONTENTS OF THIS DOCUMENT CANNOT BE CHANGED WITHOUT WRITTEN
C *    PERMISSION OF THE AUTHOR                          *
C                  OPFILEC                         FEB  03 ARDEAN LEITH
a13 1
C                 ADDED REG_SET FOR ITER AUG 00 ARDEAN LEITH
d96 1
a96 1
           CALL ERRT(46,'REPS, ANG',IER)
d113 1
a113 1
        IF (IRTFLG.NE.0) THEN 
d118 1
a118 1
	CALL BUILDM(INUMBR,DM,NANG,PANG,IRTFLG)
@


1.71
log
@opfilec
@
text
@d99 3
a101 3
           ITMP = INUMBR(K)
           IKEY = PANG(1,ITMP)
           IF (IKEY .NE. ITMP) THEN
@


1.70
log
@cosmetic & deallocates
@
text
@d9 1
a23 1
C
d58 3
a60 2
        CHARACTER*80        FINPIC,FINPAT,FILNAM,ANGDOC
        CHARACTER*1         NULL,ANS
a66 1
        NULL   = CHAR(0)
d125 1
a125 1
        CALL OPFIL(.FALSE.,FINPIC,LUNPROJ,'O',NSAM,NROW,NSL,
d192 2
a193 1
        CALL OPFIL(.TRUE.,FILNAM,LUNVOL,'U',NDIM,NDIM,NDIM,
d284 2
a285 1
           CALL OPFIL (.FALSE.,FINPIC,LUNPROJ,'O',LSAM,LROW,NSL,
@


1.69
log
@*** empty log message ***
@
text
@d19 2
a20 2
C  Symmetries corrected  - 01/2001
C  Real space symmetrization after iterative process added - 05/02
d22 1
a22 1
C         REPS
d51 2
a52 2
        REAL,    DIMENSION(:,:), POINTER ::      PANG,ANGSYM
        REAL,    ALLOCATABLE, DIMENSION(:,:) ::   SM,ANG,DM
d54 1
a54 1
        INTEGER, ALLOCATABLE, DIMENSION(:) ::       ILIST,LB
d69 1
a69 7
        ALLOCATE (ILIST(NILMAX), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'REPS, ILIST',IER)
           RETURN
        ENDIF

        CALL FILELIST(.TRUE.,INPIC,FINPAT,NLET,ILIST,NILMAX,NANG,
d71 1
a71 1
        IF (IRTFLG .NE. 0) GOTO 9998
d75 1
a75 1
2001    FORMAT(' NUMBER OF IMAGES:',I5)
d82 1
a82 1
        MAXYT = MAXVAL(ILIST(1:NANG))
d87 1
a87 1
        IF (IRTFLG.NE.0) GOTO 9998
d95 1
a95 1
           GOTO 9998
d99 1
a99 1
           ITMP = ILIST(K)
d102 2
a103 3
              WRITE(NOUT,*) '*** MISSING ANGLE FOR IMAGE: ',ITMP
              CALL ERRT(100,'  ',NE)
              GOTO 9996
d110 1
a110 1
        ALLOCATE (DM(9,NANG), STAT=IRTFLG)
d113 1
a113 1
           GOTO 9995
d115 2
a116 2
C
	CALL  BUILDM(ILIST,DM,NANG,PANG,IRTFLG)
d121 2
a122 2
        CALL FILGET(FINPAT,FINPIC,NLET,ILIST,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9996
d127 1
a127 1
        IF (IRTFLG .NE. 0) GOTO 9996
d136 2
a137 2
        MAXXS=0
        NSYM=0
d139 2
a140 2
     &                   .TRUE.,MAXXS,NSYM,ANGSYM,IRTFLG)
        IF(IRTFLG.NE.0)  NSYM=1
d142 1
a142 1
        IF(NSYM.GT.1)  THEN
d144 1
a144 1
           IF (IRTFLG.NE.0) THEN 
d146 1
a146 1
              RETURN
d148 1
a148 1
           CALL  BUILDS(SM,NSYM,ANGSYM(1,1),IRTFLG)
d150 1
d152 1
a152 1
2021    FORMAT(/,' NUMBER OF SYMMETRIES:',I5,/)
d156 3
a158 3
           IF (IRTFLG.NE.0) THEN 
               CALL ERRT(46,'BP RP, SM-2nd',IER)
              RETURN
a161 2


d170 1
a170 1
           GOTO 9996
d194 1
a194 1
        IF (IRTFLG .NE. 0) GOTO 9995
d196 1
a196 1
c        CALL REDPRQ(NDIM,NANG,ANG,ILIST,IPCUBE,NDIMSQ,DM,
a197 3
        CALL  REDPRS(NDIM,NANG,ANG,ILIST,IPCUBE,NDIMSQ,DM,
     &       RI,ABA,SM,NSYM,NOUT,LUNPROJ,LUNVOL,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9993
d199 4
d204 1
a204 1
        IF (IRTFLG.NE.0) THEN 
d206 1
a206 1
           GOTO 9993
d213 1
a213 1
2027    FORMAT(' EFFECTIVE NUMBER OF ANGLES: ',I6)
d216 1
a216 1
        IF (IRTFLG.NE.0) THEN 
d218 1
a218 1
           GOTO 9992
d226 2
a227 1
        CLOSE(LUNVOL)     
d231 1
a231 1
        IF (ALLOCATED(SM))   DEALLOCATE(SM)
d233 5
a237 5
9992    IF (ALLOCATED(LB))     DEALLOCATE(LB)
9993    IF (ALLOCATED(DM))     DEALLOCATE(DM)
9995    IF (ALLOCATED(IPCUBE)) DEALLOCATE(IPCUBE)
9996    IF (ALLOCATED(ANG))    DEALLOCATE(ANG)
9998    IF (ALLOCATED(ILIST))  DEALLOCATE(ILIST)
d239 2
d250 3
a252 2
        SUBROUTINE  REDPRS(N,NANG,ANG,ILIST,IPCUBE,NN,DM,
     &       RI,ABA,SM,NSYM,NOUT,LUNPROJ,LUNVOL,IRTFLG)
d257 2
a258 1
C Automatic
d269 1
a269 1
        IF (IRTFLG.NE.0) THEN 
d274 3
a276 3

        ABA=0.0D0
        KLP=0
a277 2
	CB=0.0

d279 2
a280 2
        CALL  FILGET(FINPAT,FINPIC,NLET,ILIST(K),IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
d285 1
a285 1
           IF (IRTFLG .NE. 0) RETURN
d294 3
a296 3
              IF(NSYM.GT.1)  THEN
C  symmetries, multiply matrices
                 DMS=MATMUL(SM(:,:,ISYM),DM(:,:,K))
d298 1
a298 1
                 DMS=DM(:,:,K)
d300 1
a300 1
            CALL  RPRQD(N,PROJ,CB,IPCUBE,NN,DMS,RI)
d304 1
a304 1
C       CLOSE DOCUMENT FILE
d306 2
a307 1
        ABA=ABA/KLP
d309 1
a309 1
        WRITE(NOUT,2044)   KLP,ABA
d311 2
a312 2
     &      ('  TOTAL NUMBER OF POINTS IN PROJECTIONS =',I10,
     &     /,'  AVERAGE OUTSIDE THE WINDOW            =',1PE10.3,/)
a313 1
C
d316 2
a317 2
        BNORM=0.0
        QT=ABA*NANG*NSYM
d320 5
a324 5
           J=IPCUBE(4,KN)
           K=IPCUBE(5,KN)
           DO    I=IPCUBE(3,KN),IPCUBE(3,KN)+IPCUBE(2,KN)-IPCUBE(1,KN)
              CB(I,J,K)=CB(I,J,K)-QT
              BNORM=BNORM+CB(I,J,K)*CB(I,J,K)
d329 2
a330 1
        IF (ALLOCATED(CB)) DEALLOCATE(CB)
d333 1
d356 1
a356 1
        SUBROUTINE  REPR3Q (BCKN,N,IPCUBE,NN,DM,LB,NANG,IRI,ABA,
d368 3
a370 2
C       CB,PROJ & projt ARE AUTOMATIC ARRAYS
        DIMENSION CB(N),projt(4,n*n),PROJ(N*N,NUMTH),DMS(3,3,NUMTH)
d387 1
a387 1
        CALL  RDPRM(T,NOT_USED,'SMOOTHING CONST (0.0-0.999)')
d390 1
a390 1
        T=T/(1.0-T)
d398 2
a399 2
           QT=J-NC
           XX=QT*QT
d449 3
d453 1
a453 5
              SBQ=0.0
              GMIN=1.0E23
              GMAX=-1.0E23

C Loop over symmetries
d468 2
a469 2
               IF(NSYM.GT.1)  THEN
C  symmetries, multiply matrices
d505 17
a521 18
                    do i = 1,n*n - n - 1
                       pt         = proj(i, L_TH)
                       projt(1,i) = pt
                       projt(2,i) = proj(i+n,  L_TH) - pt
                       projt(3,i) = proj(i+1,  L_TH) - pt 
                       projt(4,i) = proj(i+n+1,L_TH) - proj(i+1,L_TH) - 
     &                              projt(2,i)
                    enddo

C                   BACKPROJECT FROM projt INTO BCKE
                  IF(NSYM.GT.1)  THEN
C  symmetries, multiply matrices
                   DMS(:,:,1)=MATMUL(SM(:,:,ISYM),DM(:,:,K+L_TH-1))
                  ELSE
                   DMS(:,:,1)=DM(:,:,K+L_TH-1)
                  ENDIF
                    CALL BCKCQ(BCKE,NMAT,DMS(1,1,1),projt,
     &                          N,IPCUBE,NN)
d531 1
d537 6
a542 6
           SQ=0.0
              DO KN=1,NN
                 J = IPCUBE(4,KN)
                 K = IPCUBE(5,KN)
                 CALL  REDLIN(INPIC,CB,N,(K-1)*N+J)
                 DO I=IPCUBE(3,KN),IPCUBE(3,KN)+IPCUBE(2,KN)
d544 3
a546 4
                    QT          = CB(I) - BCKE(I,J,K)
                    SQ          = SQ + QT* QT
                    BCKN(I,J,K) = BCKN(I,J,K) + ALA * QT
                 ENDDO
d548 2
d553 1
a553 1
           IF ( MODE.NE.0)  THEN
d596 1
a596 1
                 SQOLD=SQ
d598 31
a628 8
C  Perform additional symmetrization in real space, if necessary
		IF(NSYM.GT.1)  THEN
c$omp   parallel do private(k,j,i)
        DO K=1,N
           DO J=1,N
              DO I=1,N
                 BCKE(I,J,K) = BCKN(I,J,K)
                 BCKN(I,J,K) = 0.0
d630 4
a633 12
           ENDDO
        ENDDO
           IF (MOD(N,2) .EQ. 0)  THEN
              KNX = N/2-1
           ELSE
              KNX = N/2
           ENDIF
           KLX = -N/2
	CALL SYMVOL(BCKE,BCKN,KLX,KNX,KLX,KNX,KLX,KNX,SM,NSYM)
		ENDIF 
                 DEALLOCATE (BCKE)
                 RETURN
d635 5
a639 22
           ELSE
		IF(NSYM.GT.1)  THEN
c$omp   parallel do private(k,j,i)
        DO K=1,N
           DO J=1,N
              DO I=1,N
                 BCKE(I,J,K) = BCKN(I,J,K)
                 BCKN(I,J,K) = 0.0
              ENDDO
           ENDDO
        ENDDO
           IF (MOD(N,2) .EQ. 0)  THEN
              KNX = N/2-1
           ELSE
              KNX = N/2
           ENDIF
           KLX = -N/2
	CALL SYMVOL(BCKE,BCKN,KLX,KNX,KLX,KNX,KLX,KNX,SM,NSYM)
		ENDIF 
              DEALLOCATE (BCKE)
              RETURN
           ENDIF
d641 1
a641 1
C          END ITERATION
d643 8
a650 7
		IF(NSYM.GT.1)  THEN
c$omp   parallel do private(k,j,i)
        DO K=1,N
           DO J=1,N
              DO I=1,N
                 BCKE(I,J,K) = BCKN(I,J,K)
                 BCKN(I,J,K) = 0.0
a652 1
        ENDDO
d659 2
a660 3
	CALL SYMVOL(BCKE,BCKN,KLX,KNX,KLX,KNX,KLX,KNX,SM,NSYM)
        DEALLOCATE (BCKE)
		ENDIF 
d662 3
a664 1
        END
d683 5
a687 5
C IPCUBE: 1 - beginning
C         2 - end
C         3 - ix
C         4 - iy
C         5 - iz
d743 4
a746 6
           WRITE(NOUT,*) '*** IQX or IQY out of range - ',
     &                   ' reduce the radius!'
           CALL ERRT(100,'BP RP',NE)
         ENDIF

         END
@


1.68
log
@additional symmetrization added
@
text
@d622 1
d639 1
d646 1
d664 1
d751 2
@


1.67
log
@nloop,iloop_removed
@
text
@d20 1
d366 1
a366 1
       DIMENSION   SM(3,3,NSYM),DM(3,3,NANG)
a378 2
        ITERDONE   = 0

d592 1
a592 1
           ITERDONE = ITERDONE + 1
d599 19
d622 16
d644 16
a746 2


@


1.66
log
@procedure added reprqd
@
text
@d82 1
a82 1
        CALL  RDPRM(RI,NLOOP,ILOOP,'RADIUS OF RECONSTRUCTED OBJECT')
d380 3
a382 3
        CALL  RDPRM2(ALA,AIM,NLOOP,ILOOP,   'LAMBDA, CORRECTION LIMIT')
        CALL  RDPRMI(MAXIT,MODE,NLOOP,ILOOP,'ITERATION LIMIT, MODE')
        CALL  RDPRM2(TMIN,TMAX,NLOOP,ILOOP, 'MINIMUM, MAXIMUM')
d389 1
a389 1
        CALL  RDPRM(T,NLOOP,ILOOP,'SMOOTHING CONST (0.0-0.999)')
@


1.65
log
@Symmetries corrected
@
text
@d613 86
@


1.64
log
@*** empty log message ***
@
text
@d2 7
a8 11
C
C  REPS.F                 ADDED REG_SET FOR ITER AUG 00 ARDEAN LEITH
C
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
d10 1
a10 1
C
d19 1
d23 1
a23 1
C         REDPRQ
d29 1
a29 1
C         REPR3_Q
d50 5
a54 7
        REAL,    DIMENSION(:,:), POINTER ::            PSYM
        REAL,    DIMENSION(:,:), POINTER ::            PANG
        REAL,    ALLOCATABLE, DIMENSION(:,:) ::        ANG,DM
        REAL,    ALLOCATABLE, DIMENSION(:)  ::         LB
        REAL,    ALLOCATABLE, DIMENSION(:,:,:) ::      BCKN
        INTEGER, ALLOCATABLE, DIMENSION(:) ::          ILIST
        INTEGER, ALLOCATABLE, DIMENSION(:,:) ::        IPCUBE
d92 1
a92 1
        IF (IRTFLG.NE.0) GOTO 9997
d100 1
a100 1
           GOTO 9997
d116 10
d141 17
a157 2
        CALL RDPRMC(ANS, NLETI, .TRUE.,
     &     'DOES YOUR VOLUME HAVE SYMMETRIES? (Y/N)',NULL,IRT)
d159 6
a164 12
        NSYM = 0
        IF (ANS .EQ. 'Y')  THEN
           MAXXT = 0
           CALL GETDOCDAT('SYMMETRIES ANGLES DOC',.TRUE.,FINPIC,INPIC,
     &                    .TRUE.,MAXXT,NSYM,PSYM,IRTFLG)
           IF (IRTFLG.NE.0) GOTO 9996
           
           WRITE(NOUT,2021) NSYM
2021       FORMAT(/,' NUMBER OF SYMMETRIES:',I5,/)
        ELSE 
C          PSYM IS NOW A DUMMY POINTER
           PSYM => PANG
d167 2
d203 4
a206 8
        ALLOCATE (DM(9,NANG), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'REPS, DM',IER)
           GOTO 9995
        ENDIF

        CALL REDPRQ(NDIM,NANG,ANG,ILIST,IPCUBE,NDIMSQ,DM,
     &              RI,ABA,LUNPROJ,LUNVOL,IRTFLG)
d227 1
a227 2
        NSYMT = MAX0(1,NSYM)
        CALL REPR3_Q(BCKN,NDIM,IPCUBE,NDIMSQ,
d229 1
a229 1
     &               PSYM,NSYMT,NSYM,NUMTH,LUNVOL,ITERDONE)
d232 1
d234 1
a234 1
        CALL REG_SET_NSEL(1,1,FLOAT(ITERDONE),0.0, 0.0, 0.0, 0.0,IRTFLG)
d236 1
a241 2
9997    IF (ASSOCIATED(PANG))  DEALLOCATE(PANG)
        NULLIFY(PANG)
d243 12
a254 2
        IF (ANS .EQ. 'Y' .AND. ASSOCIATED(PSYM))  DEALLOCATE(PSYM) 
        NULLIFY(PSYM)
d256 356
a611 2
        CLOSE(LUNVOL)     
        RETURN
@


1.63
log
@added iteration set to register nsel
@
text
@d222 1
a222 1
        CALL REG_SET_NSEL(1,FLOAT(ITERDONE),0.0, 0.0, 0.0, 0.0,IRTFLG)
@


1.62
log
@psym deallocate conditions wrong
@
text
@d3 1
a3 1
C  REPS.F
d218 1
a218 1
     &               PSYM,NSYMT,NSYM,NUMTH,LUNVOL)
d221 2
@


1.61
log
@DO K=1,NANG
@
text
@d230 2
a231 2

        IF (ANS.EQ.'Y' .AND. ALLOCATED(ILIST))  DEALLOCATE(PSYM) 
@


1.60
log
@rewritten
@
text
@d108 1
a108 1
        DO K=1,MAXYT
@


1.59
log
@ipcube dimensions wrong
@
text
@d53 7
a59 6
        REAL,    DIMENSION(:,:), POINTER ::       PANG,PSYM
        REAL,    ALLOCATABLE, DIMENSION(:,:) ::   ANG,DM
        REAL,    ALLOCATABLE, DIMENSION(:)  ::    LB
        REAL,    ALLOCATABLE, DIMENSION(:,:,:) :: BCKN
        INTEGER, ALLOCATABLE, DIMENSION(:) ::     ILIST
        INTEGER, ALLOCATABLE, DIMENSION(:,:) ::   IPCUBE
d68 1
a68 1
        DATA  INPIC/99/
d81 1
a81 1
        IF (IRTFLG .NE. 0) GOTO 9997
a82 2
        MAXNUM = MAXVAL(ILIST(1:NANG))

d92 15
a106 4
        MAXYT = MAXNUM
        CALL GETDOCDAT('ANGLES DOC',.TRUE.,ANGDOC,77,.FALSE.,MAXXT,
     &                       MAXYT,PANG,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9997
d108 13
d126 1
a126 1
        CALL OPFIL(.FALSE.,FINPIC,INPIC,'O',NSAM,NROW,NSL,
d129 1
a129 1
        CLOSE(INPIC)
d136 1
a136 1
        CALL RDPRMC (ANS, NLETI, .TRUE.,
a141 1
           MAXYT = 0
d143 1
a143 1
     &                    .TRUE.,MAXXT,MAXYT,PSYM,IRTFLG)
a144 1
           NSYM = MAXYT
a153 1
        
d155 1
a155 1
        CALL  PREPCUB_S(NDIM,NDIMSQ,DUM,RI,MD)
d180 1
a180 2
1001    FORMAT(/,' REPROJECTION PROGRAM FOR 3-D BACK-PROJECTION',/,
     &           ' F90 VERSION',/)
d183 1
a183 1
        CALL OPFIL(.TRUE.,FILNAM,INPIC,'U',NDIM,NDIM,NDIM,
a186 6
        ALLOCATE (ANG(3,NANG), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'REPS, ANG',IER)
           GOTO 9995
        ENDIF

d190 1
a190 1
           GOTO 9994
d194 1
a194 1
     &              RI,ABA,INPIC,PANG(1,1),IRTFLG)
d218 1
a218 1
     &               PSYM,NSYMT,NSYM,NUMTH,INPIC)
d220 1
a220 1
        CALL WRITEV(INPIC,BCKN,NDIM,NDIM,NDIM,NDIM,NDIM)
d222 12
a233 9
        DEALLOCATE(BCKN)
9992    DEALLOCATE(LB)
9993    DEALLOCATE(DM)
9994    DEALLOCATE(ANG)
9995    DEALLOCATE(IPCUBE)
9996    DEALLOCATE(PANG)
9997    DEALLOCATE(ILIST)
        IF (ANS.EQ.'Y') DEALLOCATE(PSYM)  
        CLOSE(INPIC)     
@


1.58
log
@changed allocation order, many cosmetic changes, ipcube is integer
@
text
@d57 2
a58 1
        INTEGER, ALLOCATABLE, DIMENSION(:) ::     ILIST,IPCUBE
@


1.57
log
@used writev
@
text
@d27 5
a31 5
C         RPRQ(N,B,CUBE,IPCUBE,NN,PHI,THETA,PSI,DM,RI)
C         ASTA(X,N,RI,ABA,KLP)
C         PREPCUB_S(N,NN,IPCUBE,RI,MD)
C         BCKCQ(CUBE,LTC,DM,B,N,IPCUBE,NN)
C         PRJCQ(CUBE,LTC,DM,B,N,IPCUBE,NN)
d33 8
a40 8
C         SMT3_Q(T,ALA,X,Y,NSAM,NROW,NSLICE,IPCUBE,NN)
C-        DOMIN3_S(SQ,NMAT,IPCUBE,NN,TMIN)
C-        DOMAX3_S(SQ,NMAT,IPCUBE,NN,TMAX)
C         DOCORS3_S(BCKE,BCN,N,NMAT,IPCUBE,NN,ALA,ANGS)
C-        BMAX_C(BCKE,NMAT,IPCUBE,NN,BMAX)
C-        BMIN_C(BCKE,NMAT,IPCUBE,NN,BMIN)
C         FMAX_Q(X,MAP,N,XMAX)
C         FMIN_Q(X,MAP,N,XMIN)
d53 5
a57 9

    
        REAL, DIMENSION(:,:), POINTER :: PANG,PSYM
        REAL, ALLOCATABLE, DIMENSION(:,:) :: ANG,DM,QM
        REAL, ALLOCATABLE, DIMENSION(:) :: LB
        REAL, ALLOCATABLE, DIMENSION(:,:,:) :: BCKN
        INTEGER, ALLOCATABLE, DIMENSION(:) :: ILIST
        

d64 1
a64 1
        LOGICAL  MD
d68 1
a68 1
        NULL = CHAR(0)
a70 1

d98 2
a99 2
        CALL FILGET(FINPAT,FINPIC,NLET,ILIST(1),IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9994
d104 1
a104 1
        IF (IRTFLG .NE. 0) GOTO 9994
d107 3
a109 6
        N       = NSAM
        IN      = N
        INANG   = NANG
        M       = N
        NM      = (N - M)  /2
        LDP     = M / 2+1
a111 2
        K_SYM = 1

d120 2
a121 2
     &     .TRUE.,MAXXT,MAXYT,PSYM,IRTFLG)
           IF (IRTFLG.NE.0) GOTO 9994
d134 1
a134 1
        CALL  PREPCUB_S(N,NN,DUM,RI,MD)
d136 2
a137 2
C       USE NN TO ALLOCATE (QM) 
        ALLOCATE (QM(5,NN), STAT=IRTFLG)
d139 2
a140 2
           CALL ERRT(46,'REPS, QM',IER)
           GOTO 9994
d144 1
a144 1
        CALL  PREPCUB_S(N,NN,QM,RI,MD)
a145 1

d147 2
a148 4
C        NMAT = N*N*N

C       IN THIS VERSION TOTAL MEMORY IS THREE VOLUMES BCKN, BCKE AND CUBE
C       PLUS 2 2D PROJECTIONS.
d153 1
d163 1
a163 1
        CALL OPFIL(.TRUE.,FILNAM,INPIC,'U',M,M,M,
d165 1
a165 1
        IF (IRTFLG .NE. 0) GOTO 9990
a166 2


d170 1
a170 1
           GOTO 9990
d176 1
a176 1
           GOTO 8888
d179 1
a179 7
        ALLOCATE (BCKN(N,N,N), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'REPS, DM',IER)
           GOTO 8887
        ENDIF

        CALL REDPRQ(N,NANG,ANG,ILIST,QM,NN,DM,
d181 1
a181 2
        IF (IRTFLG .NE. 0) GOTO 8887

d186 1
a186 1
           GOTO 8886
a189 2

        
d195 6
d202 1
a202 1
        CALL REPR3_Q(BCKN,N,QM,NN,
a204 1
C
d206 1
a206 1
        CALL WRITEV(INPIC,BCKN,M,M,M,M,M)
d208 6
a213 6
        DEALLOCATE(LB)
8886    DEALLOCATE(BCKN)
8887    DEALLOCATE(DM)
8888    DEALLOCATE(ANG)
9990    DEALLOCATE(QM)
9994    DEALLOCATE(PANG)
@


1.56
log
@Used getthreads & cosmetic
@
text
@d57 2
a58 1
        REAL, ALLOCATABLE, DIMENSION(:) :: LB, BCKN
d193 1
a193 1
        ALLOCATE (BCKN(N*N*N), STAT=IRTFLG)
d223 2
a224 5
        DO  K=1,M*M
           MI = (K-1) * M
           CALL WRTLIN(INPIC,BCKN(1+MI),M,K)
        ENDDO

@


1.55
log
@*** empty log message ***
@
text
@d166 3
a168 12
 
#ifdef SP_MP
c$omp parallel private(np)
        np = OMP_GET_NUM_THREADS()
c$omp single
        NUMTH=np
c$omp end single
c$omp end parallel
#else
        NUMTH  = 1
#endif
    
@


1.54
log
@fixed maxnum
@
text
@d85 1
a85 4
 	MAXNUM = 0
        DO I = 1,NANG
           IF (ILIST(I) .GT. MAXNUM) MAXNUM = ILIST(I)
        ENDDO
@


1.53
log
@cosmetic
@
text
@d85 5
a89 2
	MAXNUM = ILIST(NANG)
	
@


1.52
log
@cosmetic
@
text
@d49 3
a51 3
        INCLUDE CMBLOCK.INC
        INCLUDE CMLIMIT.INC
        INCLUDE F90ALLOC.INC
@


1.51
log
@adapted for dynamical memory allocation
@
text
@d49 3
a51 3
        INCLUDE '/net/ithaca/usr1/spider/src/CMBLOCK.INC' 
        INCLUDE '/net/ithaca/usr1/spider/src/CMLIMIT.INC'
        INCLUDE '/net/ithaca/usr1/spider/src/F90ALLOC.INC'
@


1.50
log
@*** empty log message ***
@
text
@d12 1
a12 1
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
d24 1
a24 1
C	  REPS(MAXMEM)
d26 15
a40 15
C	  REDPRQ
C	  RPRQ(N,B,CUBE,IPCUBE,NN,PHI,THETA,PSI,DM,RI)
C	  ASTA(X,N,RI,ABA,KLP)
C	  PREPCUB_S(N,NN,IPCUBE,RI)
C	  BCKCQ(CUBE,LTC,DM,B,N,IPCUBE,NN)
C	  PRJCQ(CUBE,LTC,DM,B,N,IPCUBE,NN)
C	  REPR3_Q
C	  SMT3_Q(T,ALA,X,Y,NSAM,NROW,NSLICE,IPCUBE,NN)
C-	  DOMIN3_S(SQ,NMAT,IPCUBE,NN,TMIN)
C-	  DOMAX3_S(SQ,NMAT,IPCUBE,NN,TMAX)
C	  DOCORS3_S(BCKE,BCN,N,NMAT,IPCUBE,NN,ALA,ANGS)
C-	  BMAX_C(BCKE,NMAT,IPCUBE,NN,BMAX)
C-	  BMIN_C(BCKE,NMAT,IPCUBE,NN,BMIN)
C	  FMAX_Q(X,MAP,N,XMAX)
C	  FMIN_Q(X,MAP,N,XMIN)
d42 2
d47 1
a47 1
	SUBROUTINE REPS(MAXMEM)
d49 31
a79 2
	PARAMETER  (NILMAX=99998)
	COMMON     BUF(1024),ILIST(NILMAX),Q(3)
d81 3
a83 47
        INCLUDE 'CMBLOCK.INC' 
        INCLUDE 'F90ALLOC.INC'

        REAL, DIMENSION(:), POINTER :: ANG,PROJ,CB,BCKE,BCKN
        REAL, DIMENSION(:), POINTER :: LB,DM,MASK
        REAL, DIMENSION(:,:), POINTER :: IPANG

        LOGICAL ::          RUNTIME 
	COMMON  /F_SPEC/    FINPAT,NLET,FINPIC
	CHARACTER*80        FINPIC,FINPAT,FILNAM,ANGDOC
	CHARACTER*1         NULL,ANS
	COMMON /PAR/        LDP,NM,LDPNM
	DOUBLE PRECISION    ABA

	DATA  INPIC/99/

	NULL = CHAR(0)
 
C       N - LINEAR DIMENSION OF PROJECTIONS AND RESTORED CUBE
C       NANG - NUMBER OF ANGLES (PROJECTIONS)
 
 	CALL FILERD(FINPAT,NLET,NULL,
     &	       'ENTER TEMPLATE FOR 2-D IMAGE',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

 	CALL FILERD(FINPIC,NLETI,NULL,'SELECTION DOC',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

	K      = 0
	K2     = 1
	NANG   = 0
        MAXNUM = 0
778	LERR   = -1
	IF (NANG .EQ. NILMAX)  THEN
	    WRITE(NOUT,*) '*** TOO MANY IMAGES, LIST TRUNCATED'
	    GOTO  779
	ENDIF
	KP1 = K+1
	CALL  UNSAV(FINPIC,K,INPIC,KP1,BUF,1,LERR,K2)
	IF (LERR .EQ. 0)  THEN
	   NANG        = NANG + 1
	   ILIST(NANG) = BUF(1)
           IF (ILIST(NANG) .GT. MAXNUM) MAXNUM = ILIST(NANG)
	   K           = K + 1
	   GOTO  778
	ENDIF
779	CLOSE(INPIC)
d85 2
d88 2
a89 2
	WRITE(NOUT,2001) NANG
2001	FORMAT(' NUMBER OF IMAGES:',I5)
d92 1
a92 1
	IRI = RI
d98 2
a99 2
     &                       MAXYT,IPANG,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
d102 2
a103 2
 	CALL FILGET(FINPAT,FINPIC,NLET,ILIST(1),IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
d108 2
a109 2
        IF (IRTFLG .NE. 0) RETURN
	CLOSE(INPIC)
d111 3
a113 3
	N       = NSAM
	IN      = N
	INANG   = NANG
d119 1
a119 3
	MEMWANT = 3 * NANG
        CALL ALLOCMEM(MEMWANT,ANG,.TRUE.,'REPS',IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9001
d121 1
a121 3
	K_SYM = 1

	CALL RDPRMC (ANS, NLETI, .TRUE.,
d125 29
a153 34
	IF (ANS .EQ. 'Y')  THEN
 	   CALL  FILERD(FINPIC,NLETI,NULL,
     &                 'SYMMETRIES ANGLES DOC',IRTFLG)
	   K    = 0
	   K2   = 1
	   NSYM = 0

C          SYMMETRIES ANGLES DOC FILE INPUT LOOP -------------
758	   LERR = -1
	   KP1  = K + 1
	   CALL UNSAV(FINPIC,K,INPIC,KP1,BUF,3,LERR,K2)
	   IF (LERR .EQ. 0)  THEN
	      Q(K_SYM+3*NSYM)   = BUF(1)
	      Q(K_SYM+3*NSYM+1) = BUF(2)
	      Q(K_SYM+3*NSYM+2) = BUF(3)
	      NSYM              = NSYM + 1
	      K                 = K + 1
	      GOTO  758
	   ENDIF
	   CLOSE(INPIC)
C          END DOC FILE INPUT LOOP -------------

	   WRITE(NOUT,2021) NSYM
2021	   FORMAT(/,' NUMBER OF SYMMETRIES:',I5,/)
	ENDIF


	MEMWANT = 9*NANG
        CALL ALLOCMEM(MEMWANT,DM,.TRUE.,'REPS',IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9001

	MEMWANT = NANG
        CALL ALLOCMEM(MEMWANT,LB,.TRUE.,'REPS',IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9001
d155 1
a155 2
	K_IPCUBE = IPALIGN64(K_SYM+3*NSYM)
	CALL  PREPCUB_S(N,NN,Q(K_IPCUBE),RI)
d157 1
a157 1
	NMAT = N*N*N
a165 1
	K_PROJ = IPALIGN64(K_IPCUBE+5*NN)
d175 1
a175 1
	NUMTH  = 1
d177 3
a179 21
	MEMWANT = N*N*NUMTH
        CALL ALLOCMEM(MEMWANT,PROJ,.TRUE.,'REPS',IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9001

	MEMWANT = (N*N+3)/4
        CALL ALLOCMEM(MEMWANT,MASK,.TRUE.,'REPS',IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9001

	MEMWANT = NSAM
        CALL ALLOCMEM(MEMWANT,CB,.TRUE.,'REPS',IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9001

	MEMWANT = NMAT
        CALL ALLOCMEM(MEMWANT,BCKE,.TRUE.,'REPS',IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9001

        CALL ALLOCMEM(MEMWANT,BCKN,.TRUE.,'REPS',IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9001

	WRITE(NOUT,1001)
1001	FORMAT(/,' REPROJECTION PROGRAM FOR 3-D BACK-PROJECTION',/,
d185 3
a187 1
        IF (IRTFLG .NE. 0) GOTO 9997
d189 28
a216 3
	CALL REDPRQ(N,NANG,BCKN,PROJ(1),ANG,ILIST,Q(K_IPCUBE),NN,DM(1),
     &	            RI,ABA,INPIC,IPANG(1,1),IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9997
d219 15
a233 13
	CALL HIANG(ANG,NANG,DM(1),LB(1),LO)
	NANG = LO
	WRITE(NOUT,2027) NANG
2027	FORMAT(' EFFECTIVE NUMBER OF ANGLES: ',I6)

	NSYMT = MAX0(1,NSYM)
	CALL REPR3_Q(CB(1),BCKE(1),BCKN(1),N,Q(K_IPCUBE),NN,
     &               PROJ(1),MASK(1),DM(1),LB(1),NANG,IRI,ABA,
     &               Q(K_SYM),NSYMT,NSYM,NUMTH,INPIC)
C
	DO  K=1,M*M
	   MI = (K-1) * M
   	   CALL WRTLIN(INPIC,BCKN(1+MI),M,K)
a235 12
9997    CLOSE(INPIC)
        CALL DEALLOCMEM_R(ANG,IRTFLG)
        CALL DEALLOCMEM_R(DM,IRTFLG)
        CALL DEALLOCMEM_R(LB,IRTFLG)
        CALL DEALLOCMEM_R(PROJ,IRTFLG)
        CALL DEALLOCMEM_R(MASK,IRTFLG)
        CALL DEALLOCMEM_R(CB,IRTFLG)
        CALL DEALLOCMEM_R(BCKE,IRTFLG)
        CALL DEALLOCMEM_R(BCKN,IRTFLG)

9998    DEALLOCATE(IPANG)
9999	RETURN
d237 11
a247 2
9001    CALL  ERRT(45,'BP RP',NE)
	END
@


1.49
log
@getdocdat changed
@
text
@d54 1
a54 1
        REAL, DIMENSION(:), POINTER :: LB,DM,MASK,IPANG
@


1.48
log
@nasty bug with buffer for symmetry angles fixed
@
text
@a44 2
#ifdef SP_F90
C       F90 SPECIFIC CODE FOLLOWS ------------------------------------
d55 1
d228 1
a228 1
     &	            RI,ABA,INPIC,IPANG(1),IRTFLG)
d257 1
a257 1
9998    CALL DEALLOCMEM_R(IPANG,IRTFLG)
a260 1
        RETURN
a261 222

#else
C       F77 SPECIFIC CODE FOLLOWS -------------------------------------
	SUBROUTINE REPS(MAXMEM)

        INCLUDE 'CMBLOCK.INC' 

	PARAMETER         (NILMAX=99998)
	COMMON            DUMMY(80),BUF(1024),ILIST(NILMAX),Q(3)

        DIMENSION         ANGBUF(1)
        POINTER           (IPANG,ANGBUF) 

        DIMENSION         QB(1)
        POINTER           (IPQ,QB) 
        LOGICAL           RUNTIME 
	COMMON  /F_SPEC/  FINPAT,NLET,FINPIC
	CHARACTER*80      FINPIC,FINPAT,FILNAM,ANGDOC
	CHARACTER*1       NULL,ANS
	COMMON /PAR/      LDP,NM,LDPNM
	DOUBLE PRECISION  ABA
CNO_SAVE

	DATA  INPIC/99/

	NULL = CHAR(0)
 
C       N - LINEAR DIMENSION OF PROJECTIONS AND RESTORED CUBE
C       NANG - NUMBER OF ANGLES (PROJECTIONS)
 
 	CALL  FILERD(FINPAT,NLET,NULL,
     &	  'ENTER TEMPLATE FOR 2-D IMAGE',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

 	CALL FILERD(FINPIC,NLETI,NULL,'SELECTION DOC',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

	K      = 0
	K2     = 1
	NANG   = 0
        MAXNUM = 0
778	LERR   = -1
	IF (NANG .EQ. NILMAX)  THEN
	    WRITE(NOUT,*) '*** TOO MANY IMAGES, LIST TRUNCATED'
	    GOTO  779
	ENDIF
	KP1 = K + 1
	CALL  UNSAV(FINPIC,K,INPIC,KP1,BUF,1,LERR,K2)
	IF (LERR .EQ. 0)  THEN
	   NANG        = NANG+1
	   ILIST(NANG) = BUF(1)
           IF (ILIST(NANG) .GT. MAXNUM) MAXNUM = ILIST(NANG)
	   K           = K + 1
	   GOTO  778
	ENDIF
779	CLOSE(INPIC)

	WRITE(NOUT,2001) NANG
2001	FORMAT(' NUMBER OF IMAGES =',I5)
C       NANG - TOTAL NUMBER OF IMAGES
        CALL RDPRM(RI,NLOOP,ILOOP,'RADIUS OF RECONSTRUCTED OBJECT')
	IRI = RI

C       RETRIEVE ARRAY WITH ANGLES DATA IN IT
        MAXXT = 4
        MAXYT = MAXNUM
        CALL GETDOCDAT('ANGLES DOC',.TRUE.,ANGDOC,77,.FALSE.,MAXXT,
     &                       MAXYT,IPANG,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

C       OPEN FIRST IMAGE FILE TO DETERMINE NSAM, NROW, NSL
 	CALL FILGET(FINPAT,FINPIC,NLET,ILIST(1),IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9998

        MAXIM = 0
        CALL OPFIL(.FALSE.,FINPIC,INPIC,'O',NSAM,NROW,NSL,
     &             MAXIM,'DUMMY',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9998
	CLOSE(INPIC)

	N      = NSAM
	IN     = N
	INANG  = NANG
        M      = N
        NM     = (N-M) / 2
        LDP    = M / 2+1
        LDPNM  = LDP+NM

 	K_ANG  = 1
	K_SYM  = IPALIGN64(K_ANG+3*NANG)

	CALL RDPRMC (ANS, NLETI, .TRUE.,
     &     'DOES YOUR VOLUME HAVE SYMMETRIES? (Y/N)',NULL,IRT)
	IF (ANS .EQ. 'Y')  THEN
 	   CALL  FILERD(FINPIC,NLETI,NULL,
     &         'SYMMETRIES ANGLES DOC',IRTFLG)
	   K    = 0
	   K2   = 1
	   NSYM = 0

C          SYMMETRIES ANGLES DOC FILE INPUT LOOP -------------
758	   LERR = -1
	   KP1  = K+1
	   CALL UNSAV(FINPIC,K,INPIC,KP1,BUF,3,LERR,K2)
	   IF (LERR .EQ. 0)  THEN
	      Q(K_SYM+3*NSYM)   = BUF(1)
	      Q(K_SYM+3*NSYM+1) = BUF(2)
	      Q(K_SYM+3*NSYM+2) = BUF(3)
	      NSYM              = NSYM+1
	      K                 = K + 1
	      GOTO  758
	   ENDIF
C          END DOC FILE INPUT LOOP -------------

	   CLOSE(INPIC)
	   WRITE(NOUT,2021) NSYM
2021	   FORMAT(/,' NUMBER OF SYMMETRIES:',I5,/)
	ELSE
	   NSYM=0
	ENDIF

 	K_DM     = IPALIGN64(K_SYM+3*NSYM)
	K_LB     = IPALIGN64(K_DM+9*NANG)
	K_MAP    = IPALIGN64(K_LB+NANG)

c	K_IPCUBE = K_MAP+(N*N*NANG+1)/2
	K_IPCUBE = K_MAP

	CALL  PREPCUB_S(N,NN,Q(K_IPCUBE),RI)
c!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	NMAT = N*N*N

C       IN THIS VERSION TOTAL MEMORY IS THREE VOLUMES BCKN, BCKE AND CUBE
C       PLUS 2 2D PROJECTIONS.
C
C       CUBE - KEEPS BACK-PROJECTED ORIGINAL PROJECTIONS, READ FROM THE DISK
C       BCKE - WORKING VOLUME
C       BCKN - CURRENT RECONSTRUCTION

	K_PROJ = IPALIGN64(K_IPCUBE+5*NN)
 
	K_X    = 1 
#ifdef SP_MP
c$omp parallel private(np)
        np = OMP_GET_NUM_THREADS()
c$omp single
        NUMTH=np
c$omp end single
c$omp end parallel
#else
	NUMTH  = 1
#endif
	K_PRJE = IPALIGN64(K_X+N*N*NUMTH)
C       IN THIS VERSION SIGMA IS ASSUMED TO BE PROPORTIONAL TO PROJ
C       AND THE CORRESPONDING ARRAY IS NOT USED ANYWHERE.
C	K_SIGMA= K_PRJE
C       PRJE WILL BE LOGICAL*1 MASK
	K_CB   = IPALIGN64(K_PRJE+(N*N+3)/4)
        K_BCKE = IPALIGN64(K_CB+NSAM)
	K_BCKN = IPALIGN64(K_BCKE+NMAT)
	MEMTOT = IPALIGN64(K_BCKN+NMAT)

	WRITE(NOUT,1001)  MEMTOT
1001	FORMAT(/' REPROJECTION PROGRAM FOR 3-D BACK-PROJECTION',/,
     &          ' MEMORY NEEDED: ',I8,/)
     
        CALL CHKMEM(MEMTOT, Q, MAXMEM-(NILMAX+1024+80), 
     &	            RUNTIME,IPQ,IRTFLG)

	IF (IRTFLG .NE. 0) THEN 
	   WRITE(NOUT,1002)  MAXMEM
1002	   FORMAT(' *** SORRY, YOUR BUFFER LENGTH IS ONLY',I9,/,
     1        '  PROGRAM CANNOT BE RUN')
           CALL ERRT(100,'REPS',NERR)
	   GOTO 9999

        ELSEIF (.NOT. RUNTIME)  THEN
           K_X    = IPALIGN64(K_PROJ)
	   K_PRJE = IPALIGN64(K_X+N*N*NUMTH)
	   K_CB   = IPALIGN64(K_PRJE)
           K_BCKE = IPALIGN64(K_CB+NSAM)
           K_BCKN = IPALIGN64(K_BCKE+NMAT)
           MEMTOT = IPALIGN64(K_BCKN+NMAT)
	ENDIF

        IFORM = 3
        CALL OPFIL(.TRUE.,FILNAM,INPIC,'U',M,M,M,
     &             MAXIM,'RECONSTRUCTED 3-D',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9998
        
	CALL  REDPRQ(N,NANG,QB(K_BCKN),
     &	      Q(K_PROJ),Q(K_ANG),ILIST,Q(K_IPCUBE),NN,Q(K_DM),
     &	      RI,ABA,INPIC,ANGBUF,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9998
     
C       COMPRESS ANGLES - IT CHANGES NANG !!
	CALL HIANG(Q(K_ANG),NANG,Q(K_DM),Q(K_LB),LO)

	NANG = LO
	WRITE(NOUT,2027)  NANG
2027	FORMAT(' EFFECTIVE NUMBER OF ANGLES: ',I6)

	NSYMT = MAX0(1,NSYM)
	CALL REPR3_Q
     &	  (QB(K_CB),QB(K_BCKE),QB(K_BCKN),N,Q(K_IPCUBE),NN,
     &     Q(K_PROJ),QB(K_PRJE),Q(K_DM),Q(K_LB),NANG,IRI,ABA,
     &     Q(K_SYM),NSYMT,NSYM,NUMTH,INPIC)

	DO  K=1,M*M
	   MI = (K-1)*M
   	   CALL WRTLIN(INPIC,QB(K_BCKN+MI),M,K)
        ENDDO

9998    IF (RUNTIME) CALL DEALLOCMEM_R(IPQ,IRTFLG) 
	CLOSE(INPIC)

9999    RUNTIME = .TRUE.
        CALL DEALLOCMEM_R(IPANG,IRTFLG)

        RETURN
	END
#endif
@


1.47
log
@omp
@
text
@d151 1
a151 1
	   CALL UNSAV(FINPIC,K,INPIC,KP1,Q,3,LERR,K2)
d153 3
a155 3
	      Q(K_SYM+3*NSYM)   = Q(1)
	      Q(K_SYM+3*NSYM+1) = Q(2)
	      Q(K_SYM+3*NSYM+2) = Q(3)
d367 1
a367 1
	   CALL UNSAV(FINPIC,K,INPIC,KP1,Q,3,LERR,K2)
d369 3
a371 3
	      Q(K_SYM+3*NSYM)   = Q(1)
	      Q(K_SYM+3*NSYM+1) = Q(2)
	      Q(K_SYM+3*NSYM+2) = Q(3)
@


1.46
log
@omp
@
text
@d407 6
a412 1
	NUMTH  = mp_numthreads()
@


1.45
log
@f90
@
text
@d191 6
a196 1
	NUMTH  = mp_numthreads()
@


1.44
log
@?
@
text
@a63 2
C DO NOT COMPILE WITH STATIC
CNO_SAVE
d132 2
a133 2
	CALL ALLOCIT(MEMWANT,RUNTIME,ANG,'BP RP',IRTFLG)
	IF (.NOT. RUNTIME) GOTO 9001
d169 3
a171 2
	CALL ALLOCIT(MEMWANT,RUNTIME,DM,'BP RP',IRTFLG)
	IF (.NOT. RUNTIME)  GOTO  9001
d173 2
a174 2
	CALL ALLOCIT(MEMWANT,RUNTIME,LB,'BP RP',IRTFLG)
	IF (.NOT. RUNTIME)  GOTO  9001
d196 3
a198 2
	CALL ALLOCIT(MEMWANT,RUNTIME,PROJ,'BP RP',IRTFLG)
	IF (.NOT. RUNTIME)  GOTO  9001
d200 3
a202 2
	CALL ALLOCIT(MEMWANT,RUNTIME,MASK,'BP RP',IRTFLG)
	IF (.NOT. RUNTIME)  GOTO  9001
d204 3
a206 2
	CALL ALLOCIT(MEMWANT,RUNTIME,CB,'BP RP',IRTFLG)
	IF (.NOT. RUNTIME)  GOTO  9001
d208 5
a212 4
	CALL ALLOCIT(MEMWANT,RUNTIME,BCKE,'BP RP',IRTFLG)
	IF (.NOT. RUNTIME)  GOTO  9001
	CALL ALLOCIT(MEMWANT,RUNTIME,BCKN,'BP RP',IRTFLG)
	IF (.NOT. RUNTIME)  GOTO  9001
d223 2
a224 2
	CALL REDPRQ(N,NANG,BCKN,PROJ,ANG,ILIST,Q(K_IPCUBE),NN,DM,
     &	            RI,ABA,INPIC,IPANG,IRTFLG)
d228 1
a228 1
	CALL HIANG(ANG,NANG,DM,LB,LO)
d234 2
a235 2
	CALL REPR3_Q(CB,BCKE,BCKN,N,Q(K_IPCUBE),NN,
     &               PROJ,MASK,DM,LB,NANG,IRI,ABA,
d244 8
a251 8
        CALL ALLOCIT(MEMWANT,RUNTIME,ANG, 'BP RP',IRTFLG)
        CALL ALLOCIT(MEMWANT,RUNTIME,DM,  'BP RP',IRTFLG)
        CALL ALLOCIT(MEMWANT,RUNTIME,LB,  'BP RP',IRTFLG)
        CALL ALLOCIT(MEMWANT,RUNTIME,PROJ,'BP RP',IRTFLG)
        CALL ALLOCIT(MEMWANT,RUNTIME,MASK,'BP RP',IRTFLG)
        CALL ALLOCIT(MEMWANT,RUNTIME,CB,  'BP RP',IRTFLG)
        CALL ALLOCIT(MEMWANT,RUNTIME,BCKE,'BP RP',IRTFLG)
        CALL ALLOCIT(MEMWANT,RUNTIME,BCKN,'BP RP',IRTFLG)
d253 1
a253 2
9998    RUNTIME = .TRUE.
        CALL ALLOCIT(0,RUNTIME,IPANG,'BP RP',IRTFLG)
d467 1
a467 1
9998    IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'BP RP',IRTFLG) 
d471 1
a471 1
        CALL ALLOCIT(0,RUNTIME,IPANG,'BP RP',IRTFLG)
@


1.43
log
@f90 & error recovery
@
text
@d444 1
a444 1
     &	      RI,ABA,INPIC,IPANG,IRTFLG)
@


1.42
log
@99998
@
text
@d218 1
a218 1
        IF (IRTFLG .NE. 0) RETURN
d221 3
a223 2
     &	             RI,ABA,INPIC,IPANG)
     
d227 1
a227 1
	WRITE(NOUT,2027)  NANG
d239 2
a240 1
	CLOSE(INPIC)
d255 1
d257 1
d329 1
a329 1
        IF (IRTFLG .NE. 0) RETURN
d334 1
a334 1
        IF (IRTFLG .NE. 0) RETURN
d361 1
a361 1
	   IF (LERR.EQ.0)  THEN
d420 1
d426 1
a426 1
	   RETURN
d428 7
a434 9
	ELSE
	   IF (.NOT. RUNTIME)  THEN
              K_X    = IPALIGN64(K_PROJ)
	      K_PRJE = IPALIGN64(K_X+N*N*NUMTH)
	      K_CB   = IPALIGN64(K_PRJE)
              K_BCKE = IPALIGN64(K_CB+NSAM)
	      K_BCKN = IPALIGN64(K_BCKE+NMAT)
	      MEMTOT = IPALIGN64(K_BCKN+NMAT)
	   ENDIF
d440 1
d443 3
a445 2
     1	   Q(K_PROJ),Q(K_ANG),ILIST,Q(K_IPCUBE),NN,Q(K_DM),
     2	   RI,ABA,INPIC,IPANG)
d456 3
a458 3
     1	  (QB(K_CB),QB(K_BCKE),QB(K_BCKN),N,Q(K_IPCUBE),NN,
     2     Q(K_PROJ),QB(K_PRJE),Q(K_DM),Q(K_LB),NANG,IRI,ABA,
     3     Q(K_SYM),NSYMT,NSYM,NUMTH,INPIC)
d464 2
a465 1
        IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'BP RP',IRTFLG) 
d468 1
a468 2
9999    CONTINUE
        RUNTIME = .TRUE.
@


1.41
log
@changed for f90
@
text
@d49 1
a49 1
	PARAMETER  (NILMAX=99999)
d260 1
a260 1
	PARAMETER         (NILMAX=99999)
@


1.40
log
@maxnum used for maxyt
@
text
@d50 1
a50 1
	COMMON     DUMMY(80),BUF(1024),ILIST(NILMAX),Q(3)
d54 1
d56 2
a57 3
        REAL, DIMENSION(:), POINTER :: LB,DM
        REAL, DIMENSION(:), POINTER :: MASK
        REAL, DIMENSION(:), POINTER :: IPANG
d59 5
a63 5
	COMMON  /F_SPEC/  FINPAT,NLET,FINPIC
	CHARACTER*80      FINPIC,FINPAT,FILNAM,ANGDOC
	CHARACTER*1       NULL,ANS
	COMMON /PAR/      LDP,NM,LDPNM
	DOUBLE PRECISION  ABA
d116 3
a118 1
 	CALL FILGET(FINPAT,FINPIC,NLET,ILIST(1),INTFLG)
d239 3
a241 3
        CALL ALLOCIT(MEMWANT,RUNTIME,ANG,'BP RP',IRTFLG)
        CALL ALLOCIT(MEMWANT,RUNTIME,DM,'BP RP',IRTFLG)
        CALL ALLOCIT(MEMWANT,RUNTIME,LB,'BP RP',IRTFLG)
d244 1
a244 1
        CALL ALLOCIT(MEMWANT,RUNTIME,CB,'BP RP',IRTFLG)
d249 1
a249 1
        CALL ALLOCIT(0,RUNTIME,IPANG,'AF',IRTFLG)
d324 3
a326 1
 	CALL FILGET(FINPAT,FINPIC,NLET,ILIST(1),INTFLG)
d464 1
a464 1
        CALL ALLOCIT(0,RUNTIME,IPANG,'AF',IRTFLG)
@


1.39
log
@buffer 99999
@
text
@d316 1
a316 1
        MAXYT = NANG
@


1.38
log
@bad spelling
@
text
@d49 1
a49 1
	PARAMETER  (NILMAX=10000)
d258 1
a258 1
	PARAMETER         (NILMAX=10000)
@


1.37
log
@bad maxyt value used
@
text
@d291 1
a291 1
        MAXNUM = 0(NANG)
@


1.36
log
@used opfil, getdocdat, & cosmetic
@
text
@d81 5
a85 4
	K    = 0
	K2   = 1
	NANG = 0
778	LERR = -1
d95 1
d110 1
a110 1
        MAXYT = NANG
d288 6
a293 5
	K    = 0
	K2   = 1
	NANG = 0
778	LERR = -1
	IF (NANG.EQ.NILMAX)  THEN
d302 1
@


1.35
log
@f90 version added
@
text
@d3 1
a3 1
C  REPS.FOR
d15 8
a22 9
C  Reprojections 3D, Richardson's method, 
C  reconstruction kept in the square to introduce other constraints.
C  Average outside the window is subtracted
C  min, max relate to the projections
C  Symmetries imposed ...
C                             Interpolation changed !
C  corrections applied on the volume side.
C                                                     01/10/94
C  Compression of angles - 08/14/96
d28 2
a29 2
C	  asta(x,n,ri,aba,klp)
C	  PREPCUB_s(N,NN,IPCUBE,RI)
d32 9
a40 9
C	  repr3_q
C	  smt3_q(t,ala,X,y,NSAM,NROW,nslice,ipcube,nn)
C-	  domin3_s(sq,nmat,ipcube,nn,tmin)
C-	  domax3_s(sq,nmat,ipcube,nn,tmax)
C	  docors3_s(bcke,bcn,n,nmat,ipcube,nn,ala,ANGS)
C-	  bmax_c(bcke,nmat,ipcube,nn,bmax)
C-	  bmin_c(bcke,nmat,ipcube,nn,bmin)
C	  fmax_q(x,map,n,xmax)
C	  fmin_q(x,map,n,xmin)
d46 1
d57 2
a58 1
        LOGICAL           RUNTIME 
d60 1
a60 1
	CHARACTER*80      FINPIC,FINFO,FINPAT
d64 1
d74 13
a86 10
	IUNIT=NOUT
 	CALL  FILERD(FINPAT,NLET,NULL,
     &	  'ENTER TEMPLATE FOR 2-D IMAGE',IRTFLG)
 	CALL  FILERD(FINPIC,NLETI,NULL,'SELECTION DOC',IRTFLG)
	K=0
	K2=1
	NANG=0
778	LERR=-1
	IF (NANG.EQ.NILMAX)  THEN
	    WRITE(NOUT,*) '  TOO MANY IMAGES, LIST TRUNCATED'
d89 1
a89 1
	KP1=K+1
d91 4
a94 4
	IF (LERR.EQ.0)  THEN
	   NANG=NANG+1
	   ILIST(NANG)=BUF(1)
	   K=K+1
d98 2
d101 2
a102 2
2001	FORMAT('  NUMBER OF IMAGES =',I5)
C       NANG - TOTAL NUMBER OF IMAGES
d104 15
a118 12
	IRI=RI
	CALL  FILERD(FINFO,NLET1,NULL,'ANGLES DOC',ITRFLG)
	FINFO=FINFO(1:NLET1)//'.'//DATEXC(1:3)
	OPEN(77,FILE=FINFO,STATUS='OLD')
	READ(77,*)

 	CALL  FILGET(FINPAT,FINPIC,NLET,ILIST(1),INTFLG)
 	CALL  OPENFB(BUF,FINPIC,INPIC,NSAM,NROW,'O',NF,NSL)
 	IF (NF .NE. 2)  THEN
           CALL ERRT(4,'BP RP ',NE)
 	   RETURN
	ENDIF
d120 8
a127 9
	N=NSAM
 
	IN=N
	INANG=NANG
        M=N

        NM=(N-M)/2
        LDP=M/2+1
        LDPNM=LDP+NM
d129 1
a129 1
	MEMWANT=3*NANG
d131 3
a133 2
	IF (.NOT. RUNTIME)  GOTO  9001
	K_SYM=1
d136 4
a139 2
     $     'DOES YOUR VOLUME HAVE SYMMETRIES? (Y/N)',NULL,IRT)
	IF (ANS.EQ.'Y')  THEN
d141 15
a155 13
     &         'SYMMETRIES ANGLES DOC',IRTFLG)
	   K=0
	   K2=1
	   NSYM=0
758	   LERR=-1
	   KP1=K+1
	   CALL  UNSAV(FINPIC,K,INPIC,KP1,Q,3,LERR,K2)
	   IF (LERR.EQ.0)  THEN
	      Q(K_SYM+3*NSYM)=Q(1)
	      Q(K_SYM+3*NSYM+1)=Q(2)
	      Q(K_SYM+3*NSYM+2)=Q(3)
	      NSYM=NSYM+1
	      K=K+1
d159 2
d162 1
a162 3
2021	   FORMAT(/,'  NUMBER OF SYMMETRIES:',I5,/)
	ELSE
	   NSYM=0
d165 2
a166 1
	MEMWANT=9*NANG
d169 1
a169 1
	MEMWANT=NANG
d173 1
a173 1
	K_IPCUBE=IPALIGN64(K_SYM+3*NSYM)
d176 1
a176 1
	NMAT=N*N*N
d185 1
a185 1
	K_PROJ=IPALIGN64(K_IPCUBE+5*NN)
d188 1
a188 1
	NUMTH=mp_numthreads()
d190 1
a190 1
	NUMTH=1
d192 1
a192 1
	MEMWANT=N*N*NUMTH
d195 1
a195 1
	MEMWANT=(N*N+3)/4
d198 1
a198 1
	MEMWANT=NSAM
d201 1
a201 1
	MEMWANT=NMAT
d206 1
d208 2
a209 2
1001	FORMAT(//'  REPROJECTION PROGRAM FOR 3-D BACK-PROJECTION',/,
     &     '           F90 version',I8,/)
d211 7
a217 9
	CALL  FILERD(FINPIC,NLETI,NULL,'RECONSTRUCTED 3-D',ITRFLG)
	IF  (IRTFLG .EQ. -1) RETURN
	IFORM = 3
 	CALL  OPENFB(BUF,FINPIC,INPIC,M,M,'UNKNOWN',NF,M)
	IF  (NF.NE.2)  RETURN
C
	CALL  REDPRQ(N,NANG,BCKN,
     1	   PROJ,ANG,ILIST,Q(K_IPCUBE),NN,DM,
     2	   RI,ABA,NOUT,INPIC)
d220 2
a221 2
	CALL  HIANG(ANG,NANG,DM,LB,LO)
	NANG=LO
d223 1
a223 1
2027	FORMAT('     EFFECTIVE NUMBER OF ANGLES: ',I6)
d225 4
a228 5
	NSYMT=MAX0(1,NSYM)
	CALL  REPR3_Q
     1	  (CB,BCKE,BCKN,N,Q(K_IPCUBE),NN,
     2     PROJ,MASK,DM,LB,NANG,IRI,ABA,
     3     Q(K_SYM),NSYMT,NSYM,NUMTH,INPIC)
d231 2
a232 2
	   MI=(K-1)*M
   	   CALL  WRTLIN(INPIC,BCKN(1+MI),M,K)
d243 5
a247 1
	RETURN
d251 4
d256 2
a257 1
	SUBROUTINE REPS(MAXMEM)
d259 2
a260 2
	PARAMETER  (NILMAX=10000)
	COMMON     DUMMY(80),BUF(1024),ILIST(NILMAX),Q(3)
d262 1
a262 2
        INCLUDE 'CMBLOCK.INC' 
        DIMENSION QB(1)
d266 1
a266 1
	CHARACTER*80      FINPIC,FINFO,FINPAT
a278 1
	IUNIT=NOUT
d281 9
a289 5
 	CALL  FILERD(FINPIC,NLETI,NULL,'SELECTION DOC',IRTFLG)
	K=0
	K2=1
	NANG=0
778	LERR=-1
d291 1
a291 1
	    WRITE(NOUT,*) '  TOO MANY IMAGES, LIST TRUNCATED'
d294 1
a294 1
	KP1=K+1
d296 4
a299 4
	IF (LERR.EQ.0)  THEN
	   NANG=NANG+1
	   ILIST(NANG)=BUF(1)
	   K=K+1
d303 1
d305 1
a305 1
2001	FORMAT('  NUMBER OF IMAGES =',I5)
d307 16
a322 13
        CALL  RDPRM(RI,NLOOP,ILOOP,'RADIUS OF RECONSTRUCTED OBJECT')
	IRI=RI
	CALL  FILERD(FINFO,NLET1,NULL,'ANGLES DOC',ITRFLG)
	FINFO=FINFO(1:NLET1)//'.'//DATEXC(1:3)
	OPEN(77,FILE=FINFO,STATUS='OLD')
	READ(77,*)

 	CALL  FILGET(FINPAT,FINPIC,NLET,ILIST(1),INTFLG)
 	CALL  OPENFB(BUF,FINPIC,INPIC,NSAM,NROW,'O',NF,NSL)
 	IF (NF .NE. 2)  THEN
           CALL ERRT(4,'BP RP ',NE)
 	   RETURN
	ENDIF
d324 8
a331 9
	N=NSAM
 
	IN=N
	INANG=NANG
        M=N

        NM=(N-M)/2
        LDP=M/2+1
        LDPNM=LDP+NM
d333 2
a334 2
 	K_ANG=1
	K_SYM=IPALIGN64(K_ANG+3*NANG)
d337 2
a338 2
     $     'DOES YOUR VOLUME HAVE SYMMETRIES? (Y/N)',NULL,IRT)
	IF (ANS.EQ.'Y')  THEN
d341 8
a348 6
	   K=0
	   K2=1
	   NSYM=0
758	   LERR=-1
	   KP1=K+1
	   CALL  UNSAV(FINPIC,K,INPIC,KP1,Q,3,LERR,K2)
d350 5
a354 5
	      Q(K_SYM+3*NSYM)=Q(1)
	      Q(K_SYM+3*NSYM+1)=Q(2)
	      Q(K_SYM+3*NSYM+2)=Q(3)
	      NSYM=NSYM+1
	      K=K+1
d357 2
d361 1
a361 1
2021	   FORMAT(/,'  NUMBER OF SYMMETRIES:',I5,/)
d366 3
a368 3
 	K_DM=IPALIGN64(K_SYM+3*NSYM)
	K_LB=IPALIGN64(K_DM+9*NANG)
	K_MAP=IPALIGN64(K_LB+NANG)
d370 2
a371 2
c	K_IPCUBE=K_MAP+(N*N*NANG+1)/2
	K_IPCUBE=K_MAP
d373 1
a373 1
	CALL  PREPCUB_s(N,NN,Q(K_IPCUBE),RI)
d375 1
a375 1
	NMAT=N*N*N
d384 1
a384 1
	K_PROJ=IPALIGN64(K_IPCUBE+5*NN)
d386 1
a386 1
	K_X=1 
d388 1
a388 1
	NUMTH=mp_numthreads()
d390 1
a390 1
	NUMTH=1
d392 1
a392 1
	K_PRJE=IPALIGN64(K_X+N*N*NUMTH)
d395 1
a395 1
C	K_SIGMA=K_PRJE
d397 5
a401 4
	K_CB=IPALIGN64(K_PRJE+(N*N+3)/4)
        K_BCKE=IPALIGN64(K_CB+NSAM)
	K_BCKN=IPALIGN64(K_BCKE+NMAT)
	MEMTOT=IPALIGN64(K_BCKN+NMAT)
d403 2
a404 2
1001	FORMAT(//'  REPROJECTION PROGRAM FOR 3-D BACK-PROJECTION',/,
     &     '           MEMORY NEEDED - ',I8,/)
d408 1
a408 1
	IF(IRTFLG.NE.0) THEN 
d414 1
d416 8
a423 8
	   IF(.NOT. RUNTIME)  THEN
              K_X=IPALIGN64(K_PROJ)
	      K_PRJE=IPALIGN64(K_X+N*N*NUMTH)
	      K_CB=IPALIGN64(K_PRJE)
              K_BCKE=IPALIGN64(K_CB+NSAM)
	      K_BCKN=IPALIGN64(K_BCKE+NMAT)
	      MEMTOT=IPALIGN64(K_BCKN+NMAT)
	   END IF
a424 6
	CALL  FILERD(FINPIC,NLETI,NULL,'RECONSTRUCTED 3-D',ITRFLG)
	IF  (IRTFLG .EQ. -1)  GOTO 9999
	IFORM = 3
 	CALL  OPENFB(BUF,FINPIC,INPIC,M,M,'UNKNOWN',NF,M)
	IF  (NF.NE.2)  GOTO 9999

d426 4
d432 1
a432 1
     2	   RI,ABA,NOUT,INPIC)
d435 3
a437 2
	CALL  HIANG(Q(K_ANG),NANG,Q(K_DM),Q(K_LB),LO)
	NANG=LO
d439 1
a439 1
2027	FORMAT('     EFFECTIVE NUMBER OF ANGLES: ',I6)
d441 2
a442 2
	NSYMT=MAX0(1,NSYM)
	CALL  REPR3_Q
d446 1
a446 1
C
d448 2
a449 2
	   MI=(K-1)*M
   	   CALL  WRTLIN(INPIC,QB(K_BCKN+MI),M,K)
d455 4
@


1.34
log
@*** empty log message ***
@
text
@d46 1
a52 2
	 
#ifdef SP_F90
d54 179
a232 2
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: QB
d234 7
a242 1
#endif
d307 1
a307 1
	K_SYM=K_ANG+3*NANG
d335 3
a337 3
 	K_DM=K_SYM+3*NSYM
	K_LB=K_DM+9*NANG
	K_MAP=K_LB+NANG
d353 1
a353 1
	K_PROJ=K_IPCUBE+5*NN
d361 1
a361 1
	K_PRJE=K_X+N*N*NUMTH
d366 4
a369 4
	K_CB=K_PRJE+(N*N+3)/4
        K_BCKE=K_CB+NSAM
	K_BCKN=K_BCKE+NMAT
	MEMTOT=K_BCKN+NMAT
d384 6
a389 6
              K_X=K_PROJ 
	      K_PRJE=K_X+N*N*NUMTH 
	      K_CB=K_PRJE+(N*N+3)/4
              K_BCKE=K_CB+NSAM
	      K_BCKN=K_BCKE+NMAT
	      MEMTOT=K_BCKN+NMAT
a391 4

#ifdef SP_F90
         QB = >IPQ
#endif
d399 1
a399 1
	CALL  REDPRQ(N,NANG,QB(K_CB),
d404 2
a405 1
	CALL  HIANG(Q(K_ANG),NANG,Q(K_DM),Q(K_LB))
d419 1
a419 1
        IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'GALI',IRTFLG) 
d424 1
@


1.33
log
@COMMON DIMREC removed
@
text
@a243 1
        RETURN
@


1.32
log
@*** empty log message ***
@
text
@a64 1
	COMMON /DIMREC/   IDIMREC
a71 3

C       THIS IS 3D RECONSTRUCTION
	IDIMREC=3
@


1.31
log
@f90 alloc
@
text
@a52 1
        DIMENSION QB(1)
d58 1
d60 1
a61 1
#endif
@


1.30
log
@unnecessary %LOC removed
@
text
@d54 5
d61 1
d215 3
@


1.29
log
@STATUS='OLD'
@
text
@a200 5
#ifdef SP_MP
	      NUMTH=mp_numthreads()
#else
	      NUMTH=1
#endif
a205 1
	      IPQ = %LOC(Q)
@


1.28
log
@R
@
text
@d102 1
a102 1
	OPEN(77,FILE=FINFO,STATUS='O')
@


1.27
log
@*** empty log message ***
@
text
@d102 1
a102 1
	OPEN(77,FILE=FINFO,STATUS='OLD')
d106 1
a106 1
 	CALL  OPENFB(BUF,FINPIC,INPIC,NSAM,NROW,'R',NF,NSL)
@


1.26
log
@*** empty log message ***
@
text
@a101 1
#ifdef SP_SUN4
a102 3
#else
	OPEN(77,FILE=FINFO,STATUS='OLD',READONLY)
#endif
@


1.25
log
@changed prompts to uppercase
@
text
@d49 1
a49 1
	COMMON     DUMMY(80),BUF(1024),ILIST(NILMAX),Q(1)
@


1.24
log
@.\.
@
text
@d50 1
d54 2
a55 2
        POINTER   (IPQ,QB) 
        LOGICAL         RUNTIME 
d57 2
a58 3
	CHARACTER*80  FINPIC,FINFO
	CHARACTER*80  FINPAT
	CHARACTER*1  NULL,ANS
d66 2
a67 1
	NULL=CHAR(0)
d71 2
a72 2
C       N - linear dimension of projections and restored cube
C       NANG - number of angles (projections)
d76 4
a79 4
     &	  'Enter template for 2-D image name',IRTFLG)
 	CALL  FILERD(FINPic,NLETi,NULL,'Selection doc',IRTFLG)
	k=0
	k2=1
d82 2
a83 2
	IF (NANG.eq.NILMAX)  THEN
	    WRITE(NOUT,*) '  Too many images, list truncated'
d96 3
a98 3
2001	FORMAT('  Number of images =',i5)
C       NANG - total number of images
        CALL  RDPRM(RI,NLOOP,ILOOP,'Radius of reconstructed object')
d100 1
a100 1
	CALL  FILERD(FINFO,NLET1,NULL,'Angles doc',ITRFLG)
d130 1
a130 1
     $     'Does your volume have symmetries ?',NULL,IRT)
d132 2
a133 1
 	   CALL  FILERD(FINPic,NLETi,NULL,'Symmetries ang doc',IRTFLG)
d149 2
a150 2
	   WRITE(nout,2021) NSYM
2021	   FORMAT(/,'  Number of symmetries =',I5,/)
d166 2
a167 2
c       In this version total memory is three volumes BCKN, BCKE and CUBE
c       plus 2 2d projections.
d169 3
a171 3
c       CUBE - keeps back-projected original projections, read from the disk
C       BCKE - working volume
C       BCKN - current reconstruction
d182 2
a183 2
C       In this version sigma is assumed to be proportional to PROJ
C       and the corresponding array is not used anywhere.
d185 1
a185 1
c       prje will be logical*1 mask
d191 2
a192 2
1001	FORMAT(//'  Reprojection program for 3-D back-projection',/,
     &     '           Memory needed - ',I8,/)
d198 4
a201 3
1002	   FORMAT('  Sorry, your buffer length is only',I9,/,
     1        '  Program cannot be run')
	   GOTO 9999
d219 1
a219 1
	CALL  FILERD(FINPIC,NLETI,NULL,'Reconstructed 3-D',ITRFLG)
d232 2
a233 2
	WRITE(nout,2027)  NANG
2027	FORMAT(5X,'Effective number of angles =',i6)
d238 2
a239 2
     2     Q(K_PROJ),QB(k_prje),q(k_dm),Q(K_LB),nang,iri,aba,
     3     Q(K_SYM),NSYMT,NSYM,NUMTH,inpic)
@


1.23
log
@returned to version 1.20
@
text
@d180 1
a180 1
C       In this version sigma is assumed to be proprotional to PROJ
@


1.22
log
@new memory allocation
@
text
@d47 1
d51 1
d62 2
d65 1
a65 1
CNO_SAVE
d69 1
d72 1
d77 2
a78 2
	K=0
	K2=1
d107 1
d116 1
d120 1
d124 1
a124 7
C
#ifdef SP_MP
	NUMTH=mp_numthreads()
#else
	NUMTH=1
#endif
C
d127 2
a128 1
	CALL RDPRMC (ANS,NLETI,.TRUE.,
d152 1
d156 1
d159 2
a160 4
	CALL  PREPCUB_S(N,NN,Q(K_IPCUBE),RI)
	K_PROJ=K_IPCUBE+5*NN
C MEMINCOM - this is how much has to fit in the COMMON
	MEMINCOM=K_PROJ+N*N*NUMTH
d163 1
d170 3
a172 1
C Pointers  
d174 6
a179 1
	K_PRJE=K_X
d183 1
a183 1
c  PRJE will be logical*1 mask
d191 2
a192 3
C   I have to start Q from MEMINCOM in case there is enough memory -
C   in this way address of QB(1) will point to Q(MEMINCOM)
        CALL CHKMEM(MEMTOT,Q(MEMINCOM),MAXMEM-(NILMAX+1024+80+MEMINCOM), 
d195 3
a197 1
	CALL ERRT(6,'BP RP',NE)
d199 15
d215 1
d221 2
d226 1
d229 1
a229 1
	WRITE(NOUT,2027)  NANG
d231 1
d235 2
a236 2
     2     QB(K_PROJ),QB(K_PRJE),Q(K_DM),Q(K_LB),NANG,IRI,ABA,
     3     Q(K_SYM),NSYMT,NSYM,NUMTH,INPIC)
d242 1
a242 1
        IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'BP RP',IRTFLG) 
d244 1
d246 1
@


1.21
log
@uppercase
@
text
@a46 1

a49 1
	 
d60 1
a61 3

	DATA  INPIC/99/

a64 1
 
a66 1
 
d71 2
a72 2
	k=0
	k2=1
a100 1

a108 1
 
a111 1

d115 7
a121 1

d124 1
a124 2

	CALL RDPRMC (ANS, NLETI, .TRUE.,
a147 1

a150 1

a152 1

d154 3
a158 1

d165 1
a165 3

	K_PROJ=K_IPCUBE+5*NN
 
d167 1
a167 6
#ifdef SP_MP
	NUMTH=mp_numthreads()
#else
	NUMTH=1
#endif
	K_PRJE=K_X+N*N*NUMTH
d171 1
a171 1
c       prje will be logical*1 mask
d179 3
a181 2
     
        CALL CHKMEM(MEMTOT, Q, MAXMEM-(NILMAX+1024+80), 
d184 1
a184 3
	   WRITE(NOUT,1002)  MAXMEM
1002	   FORMAT('  Sorry, your buffer length is only',I9,/,
     1        '  Program cannot be run')
a185 15
	ELSE
	   IF(.NOT. RUNTIME)  THEN
              K_X=K_PROJ 
#ifdef SP_MP
	      NUMTH=mp_numthreads()
#else
	      NUMTH=1
#endif
	      K_PRJE=K_X+N*N*NUMTH 
	      K_CB=K_PRJE+(N*N+3)/4
              K_BCKE=K_CB+NSAM
	      K_BCKN=K_BCKE+NMAT
	      MEMTOT=K_BCKN+NMAT
	      IPQ = %LOC(Q)
	   END IF
a186 1

a191 2


a194 1
     
d197 1
a197 1
	WRITE(nout,2027)  NANG
a198 1

d202 2
a203 2
     2     Q(K_PROJ),QB(k_prje),q(k_dm),Q(K_LB),nang,iri,aba,
     3     Q(K_SYM),NSYMT,NSYM,NUMTH,inpic)
d209 1
a209 1
        IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'GALI',IRTFLG) 
a210 1

@


1.20
log
@add then to if stmt.
@
text
@d160 1
a160 1
	CALL  PREPCUB_s(N,NN,Q(K_IPCUBE),RI)
a245 1
        RETURN
@


1.19
log
@correct chkmem arg.
@
text
@d200 1
a200 1
	   IF(.NOT.RUNTIME) 
@


1.18
log
@use chkmem instead of allocit call
@
text
@d192 1
a192 1
        CALL CHKMEM(MEMTOT, KAF, MAXMEM-(NILMAX+1024+80), 
@


1.17
log
@use numthreads
@
text
@d51 4
a54 5
#ifdef SP_ALLOC
         DIMENSION QB(1)
         POINTER   (IPQ,QB) 
         LOGICAL         RUNTIME
#endif
d172 2
a173 7

#ifdef SP_ALLOC
	K_X=1
#else
        K_X=K_PROJ
#endif

d191 4
a194 6
#ifdef SP_ALLOC
         CALL ALLOCIT(MEMTOT,RUNTIME,IPQ,'GALI',IRTFLG)
	IF(.NOT.RUNTIME)  THEN
#else
	IF (MEMTOT.GT.MAXMEM)  THEN
#endif
d199 15
d222 1
a222 1
#ifdef SP_ALLOC
d226 2
a227 1
c compress angles - it changes NANG !!
d231 1
a231 1
C
d242 1
a242 22
      CALL ALLOCIT(0,RUNTIME,IPQ,'GALI',IRTFLG)
#else
	CALL  REDPRQ(N,NANG,Q(K_CB),
     1	   Q(K_PROJ),Q(K_ANG),ILIST,Q(K_IPCUBE),NN,Q(K_DM),
     2	   RI,ABA,NOUT,INPIC)
c compress angles - it changes NANG !!
	CALL  HIANG(Q(K_ANG),NANG,Q(K_DM),Q(K_LB))
	WRITE(nout,2027)  NANG
2027	FORMAT(5X,'Effective number of angles =',i6)
C
	NSYMT=MAX0(1,NSYM)
	CALL  REPR3_Q
     1	  (Q(K_CB),Q(K_BCKE),Q(K_BCKN),N,Q(K_IPCUBE),NN,
     2     Q(K_PROJ),q(k_prje),q(k_dm),Q(K_LB),nang,iri,aba,
     3     Q(K_SYM),NSYMT,NSYM,NUMTH,inpic)

	DO  K=1,M*M
	   MI=(K-1)*M
   	   CALL  WRTLIN(INPIC,Q(K_BCKN+MI),M,K)
        ENDDO
#endif

d246 1
@


1.16
log
@compression of angles
@
text
@d181 1
a181 1
	NUMTH=4
@


1.15
log
@return to version 1.13.
compression of angles is wrong, don't know why.
@
text
@a0 1

d23 1
a55 1

d219 5
a223 1

d227 1
a227 1
     2     Q(K_PROJ),QB(k_prje),q(k_dm),nang,iri,aba,
d239 5
a243 1

d247 1
a247 1
     2     Q(K_PROJ),q(k_prje),q(k_dm),nang,iri,aba,
@


1.14
log
@compression of angles added
@
text
@d220 1
a220 5
c compress angles - it changes NANG !!
	CALL  HIANG(Q(K_ANG),NANG,Q(K_DM),Q(K_LB))
	WRITE(nout,2027)  NANG
2027	FORMAT(5X,'Effective number of angles =',i6)
C
d224 1
a224 1
     2     Q(K_PROJ),QB(k_prje),q(k_dm),Q(K_LB),nang,iri,aba,
d236 1
a236 5
c compress angles - it changes NANG !!
	CALL  HIANG(Q(K_ANG),NANG,Q(K_DM),Q(K_LB))
	WRITE(nout,2027)  NANG
2027	FORMAT(5X,'Effective number of angles =',i6)
C
d240 1
a240 1
     2     Q(K_PROJ),q(k_prje),q(k_dm),Q(K_LB),nang,iri,aba,
@


1.13
log
@NILMAX=10000
@
text
@d220 5
a224 1

d228 1
a228 1
     2     Q(K_PROJ),QB(k_prje),q(k_dm),nang,iri,aba,
d240 5
a244 1

d248 1
a248 1
     2     Q(K_PROJ),q(k_prje),q(k_dm),nang,iri,aba,
@


1.12
log
@removed readonly on sun
@
text
@d48 1
a48 1
	PARAMETER  (NILMAX=5500)
a49 1
#ifdef SP_UNIX
a50 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
@


1.11
log
@add SP_ALLOC for allocit call
@
text
@d47 1
d107 3
d111 1
d113 1
a113 1
c
d126 1
a126 1
C
d130 1
a130 1
C
d133 2
a134 2
C
	CALL RDPRMC (ANS, NLETi, .TRUE.,
d184 1
a184 1
C
d246 1
a246 1
C
@


1.10
log
@memory fixed
@
text
@d51 4
a57 2
#else
        INCLUDE 'COMMON1:CMBLOCK.INC' 
d174 1
a174 1
#ifdef SP_UNIX
d197 1
a197 1
#ifdef SP_UNIX
d215 1
a215 1
#ifdef SP_UNIX
@


1.9
log
@malloc
@
text
@d156 2
a157 1
	K_IPCUBE=K_MAP+(N*N*NANG+1)/2
@


1.8
log
@cosmetic and header
@
text
@d48 1
a48 1

d51 3
a61 6
	COMMON     DUMMY(80),BUF(1024),ILIST(NILMAX),IN,INANG,NN,NMAT,
     1	  LTB,K_ANG,K_DM,K_LB,K_MAP,K_IPCUBE,
     2	  K_BCKE,K_PROJ,K_bckn,K_PRJE,K_SIGMA,
     3    KDM(7),
     4	  IUNIT,Q(1)

d89 1
a89 1
	CALL  UNSAV(FINPIC,K,INPIC,KP1,Q,1,LERR,K2)
d92 1
a92 1
	   ILIST(NANG)=Q(1)
d110 2
a111 2
	   WRITE(NOUT,*) ' File not found'
	   RETURN
d171 3
d175 1
a175 1
        K_IBN=K_X
d182 1
a182 1
	K_PRJE=K_PROJ+N*N*NUMTH
a184 1
	K_SIGMA=K_PRJE
d187 3
a189 3
	K_BCKE=K_PRJE+(N*N+3)/4
        K_CB=K_BCKE+NMAT
	K_BCKN=K_CB+NSAM
d194 4
d199 1
d212 17
d243 1
a247 1
        RETURN
@


1.7
log
@NUMTH released
@
text
@d1 15
a15 2
	SUBROUTINE REPS(MAXMEM)
c
d17 3
a19 3
c  reconstruction kept in the square to introduce other constraints.
c  Average outside the window is subtracted
c  min, max relate to the projections
d21 2
a22 2
c                             Interpolation changed !
c  corrections applied on the volume side.
d25 22
a46 17
c	SUBROUTINE REPS(MAXMEM)
c	SUBROUTINE  REDPRQ
c	SUBROUTINE  RPRQ(N,B,CUBE,IPCUBE,NN,PHI,THETA,PSI,DM,RI)
c	subroutine  asta(x,n,ri,aba,klp)
c	SUBROUTINE  PREPCUB_s(N,NN,IPCUBE,RI)
c	SUBROUTINE  BCKCQ(CUBE,LTC,DM,B,N,IPCUBE,NN)
c	SUBROUTINE  PRJCQ(CUBE,LTC,DM,B,N,IPCUBE,NN)
c	SUBROUTINE  repr3_q
c	SUBROUTINE  smt3_q(t,ala,X,y,NSAM,NROW,nslice,ipcube,nn)
c-	subroutine   domin3_s(sq,nmat,ipcube,nn,tmin)
c-	subroutine   domax3_s(sq,nmat,ipcube,nn,tmax)
c	subroutine  docors3_s(bcke,bcn,n,nmat,ipcube,nn,ala,ANGS)
c-	subroutine  bmax_c(bcke,nmat,ipcube,nn,bmax)
c-	subroutine  bmin_c(bcke,nmat,ipcube,nn,bmin)
c	subroutine  fmax_q(x,map,n,xmax)
c	subroutine  fmin_q(x,map,n,xmin)
c
d48 1
d54 1
d56 1
a56 1
	CHARACTER*80  FINPIC,finfo
d58 1
a58 1
	CHARACTER*1  NULL,ans
d64 6
a69 4
	COMMON  /DIMREC/  IDIMREC
	COMMON /PAR/  LDP,NM,LDPNM
	double precision  aba
C
d71 1
a71 1
CNO_SAVE
d73 6
a78 6
c This is 3D reconstruction
	idimrec=3
C
C  N - linear dimension of projections and restored cube
C  NANG - number of angles (projections)
C
d87 4
a90 4
	IF(NANG.eq.NILMAX)  THEN
		WRITE(NOUT,*) '  Too many images, list truncated'
		goto  779
	endif
d93 5
a97 5
	IF(LERR.EQ.0)  THEN
	NANG=NANG+1
	ILIST(NANG)=Q(1)
	K=K+1
	GOTO  778
d100 3
a102 3
	write(nout,2001) nang
2001	format('  Number of images =',i5)
C  NANG - total number of images
d104 5
a108 5
	iri=ri
	call  filerd(finfo,nlet1,null,'Angles doc',itrflg)
	finfo=finfo(1:nlet1)//'.'//datexc(1:3)
	open(77,file=finfo,status='old',readonly)
	read(77,*)
d112 3
a114 3
 	IF(NF.NE.2)  THEN
	write(nout,*) ' File not found'
	RETURN
d118 1
a118 1
C
d131 22
a152 16
     $ 'Does your volume have symmetries ?',NULL,IRT)
	if(ans.eq.'Y')  then
 	CALL  FILERD(FINPic,NLETi,NULL,'Symmetries ang doc',IRTFLG)
	k=0
	k2=1
	NSYM=0
758	LERR=-1
	KP1=K+1
	CALL  UNSAV(FINPIC,K,INPIC,KP1,Q,3,LERR,K2)
	IF(LERR.EQ.0)  THEN
	Q(K_SYM+3*NSYM)=Q(1)
	Q(K_SYM+3*NSYM+1)=Q(2)
	Q(K_SYM+3*NSYM+2)=Q(3)
	NSYM=NSYM+1
	K=K+1
	GOTO  758
d154 1
a154 7
	CLOSE(INPIC)
	write(nout,2021) NSYM
2021	format(/,'  Number of symmetries =',i5,/)
	else
	NSYM=0
	endif
C
d158 1
a158 1
C
d160 1
a160 1
C
d163 9
a171 9
	nmat=n*n*n
c
c  In this version total memory is three volumes BCKN, BCKE and CUBE
c  plus 2 2d projections.
C
c  CUBE - keeps back-projected original projections, read from the disk
C  BCKE - working volume
C  BCKN - current reconstruction
C
d173 1
a173 1
C
d183 2
a184 2
C In this version sigma is assumed to be proprotional to PROJ
C and the corresponding array is not used anywhere.
d187 5
a191 5
c prje will be logical*1 mask
	K_BCKE=K_prje+(n*n+3)/4
        K_CB=K_bcke+nmat
	k_bckn=k_cb+nsam
	MEMTOT=k_bckn+nmat
d194 6
a199 6
     1     '           Memory needed - ',I8,/)
	IF(MEMTOT.GT.MAXMEM)  THEN
	WRITE(NOUT,1002)  MAXMEM
1002	FORMAT('  Sorry, your buffer length is only',I9,/,
     1      '  Program cannot be run')
	GOTO 9999
d201 1
a201 1
C
d203 2
a204 2
	IF(IRTFLG.EQ.-1)  GOTO 9999
	IFORM=3
d206 6
a211 6
	IF(NF.NE.2)  GOTO 9999
C
	CALL  REDPRQ(N,NANG,Q(K_cb),
     1	Q(K_PROJ),Q(K_ANG),ILIST,Q(K_IPCUBE),NN,Q(K_DM),
     2	RI,aba,NOUT,inpic)
C
d213 2
a214 2
	call  repr3_q
     1	  (Q(K_CB),Q(K_BCKE),q(k_bckn),n,q(k_ipcube),nn,
d218 5
a222 3
	DO  101  K=1,M*M
	MI=(K-1)*M
101	CALL  WRTLIN(INPIC,Q(K_BCKN+MI),M,K)
d224 3
a226 2
c
9999	CONTINUE
@


1.6
log
@*** empty log message ***
@
text
@d155 1
a155 1
c#ifdef SP_MP
d157 1
a157 1
c#else
d159 1
a159 1
c#endif
@


1.5
log
@nosave
@
text
@d158 1
a158 1
c	NUMTH=1
@


1.4
log
@nosave mp
@
text
@d155 1
d157 3
@


1.3
log
@nosave
@
text
@d155 2
a156 1
	K_PRJE=K_PROJ+N*N
d190 1
a190 1
     3     Q(K_SYM),NSYMT,NSYM,inpic)
@


1.2
log
@cpp_lines_added
@
text
@d49 1
@


1.1
log
@Initial revision
@
text
@d30 3
d34 1
@
