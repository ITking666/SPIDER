head	1.13;
access;
symbols;
locks; strict;
comment	@c @;


1.13
date	2015.11.20.16.29.52;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2015.11.19.19.30.27;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2015.10.22.13.16.26;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2015.10.21.14.42.47;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2015.06.03.18.04.05;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2014.05.30.12.41.49;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2014.05.30.12.40.48;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2014.04.01.15.42.18;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2014.03.17.18.51.19;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2014.03.17.18.38.57;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2014.03.17.14.09.39;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2014.02.25.17.48.13;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2013.04.03.18.08.39;	author leith;	state Exp;
branches;
next	;


desc
@@


1.13
log
@added 7 digit max integer field hack
@
text
@
C++*********************************************************************
C                                                                      
C  STAR2DOC.F  XMIPP STAR FILE SUPPORT           APR 2013 ARDEAN LEITH 
C              LINE END BUG                      FEB 2014 ARDEAN LEITH 
C              REWRITE WITH VAR NAMES            FEB 2014 ARDEAN LEITH 
C              NREGSTAR = MIN(NVARSTARNAME BUG   MAY 2014 ARDEAN LEITH
C              MAXLENVAR = 40 --> 120            OCT 2015 ARDEAN LEITH
C              NVARSTAR BUG                      OCT 2015 ARDEAN LEITH
C              INTEGER OVERFOW HACK              NOV 2015 ARDEAN LEITH
C                                                                 
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2015  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C     STAR2DOC(LUNXM,LUNDOC)
C
C     PURPOSE:      CRUDE CONVERTOR FROM STAR FILE TO DOC FILE
C                         
C     PARAMETERS:   LUNXM,LUNDOC I/O UNITS                      (SENT)
C
C     VARIABLES:     
C        
C     NOTE:         NEEDS MPI MODS IF CALLED UNDER MPI
C
C--*********************************************************************

      SUBROUTINE STAR2DOC(LUNXM,LUNDOC)

      IMPLICIT NONE
      INCLUDE 'CMBLOCK.INC'
      INCLUDE 'CMLIMIT.INC'

      INTEGER                  :: LUNXM   
      INTEGER                  :: LUNDOC  

      CHARACTER(LEN=MAXNAM)    :: FILXM,DOCNAM 

      INTEGER, PARAMETER       :: MAXLENVAR = 120
      INTEGER, PARAMETER       :: NVARSMAX  = 50

      INTEGER                  :: NVARHEAD,NVARSTAR,IHEAD,ISTAR
      INTEGER                  :: NVARSPI, NVARSTARNAME,NREGSTAR 
      INTEGER                  :: NVARSPINAME,IGOT,NSPI

      CHARACTER(LEN=MAXLENVAR) :: VARHEAD     (NVARSMAX)
      CHARACTER(LEN=MAXLENVAR) :: VARSTAR     (NVARSMAX)
      CHARACTER(LEN=MAXLENVAR) :: VARSTARNAME (NVARSMAX)
      INTEGER                  :: NCOLSTAR    (NVARSMAX)
      INTEGER                  :: NCOLSPI     (NVARSMAX)
      INTEGER                  :: NCOLSPINAME (NVARSMAX)
      INTEGER                  :: NCOLSTARNAME(NVARSMAX)
      CHARACTER(LEN=MAXLENVAR) :: VARTMP      (NVARSMAX)
      REAL                     :: DLIST       (NVARSMAX)
    ! DOUBLE PRECISION         :: DLIST       (NVARSMAX)
      CHARACTER(LEN=MAXLENVAR) :: CTOKEN     
      CHARACTER(LEN=240)       :: RECLIN 
      CHARACTER(LEN=240)       :: RECNAM 
      CHARACTER(LEN=10)        :: VALID = '0123456789'
      CHARACTER(LEN=100)       :: FORMOUT

      INTEGER                  :: ILABEL(NVARSMAX) 
      integer                  :: idlist,NBAD

      INTEGER                  :: IENDVAR,IGO,IEND,NCHAR2        
      INTEGER                  :: IFIRST,NCHAR,NGOT,IPUT,IWHICH       
      INTEGER                  :: NLET,ICOMM,MYPID,MPIERR
       
      CHARACTER(LEN=1)         :: NULL = CHAR(0)  
      CHARACTER(LEN=1)         :: CDUM  
      INTEGER                  :: LUNDOCT,ILOC,IT,NLIST,ILAST
      INTEGER                  :: IHI,I,IKEY,IRTFLG,LENREC,IVAR,ITOK

      LOGICAL                  :: ISOPEN,EX,CALLERRT,ASKNAM
      LOGICAL                  :: ADDEXT,GETNAME
      LOGICAL                  :: ISOLD,APPEND,MESSAGE,NEWFILE

      INTEGER                  :: lnblnkn
      LOGICAL                  :: ischar,isdigi

      CALL SET_MPI(ICOMM,MYPID,MPIERR) ! SETS ICOMM AND MYPID

C     OPEN STAR FILE
      LENREC   = 0              ! FORMATTED, SEQ. ACCESS
      ASKNAM   = .TRUE.
      CALLERRT = .TRUE.
      CALL OPAUXFILE(ASKNAM,FILXM,NULL,LUNXM,LENREC,
     &               'O', 'STAR',CALLERRT,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      NVARHEAD = 0
      WRITE(NOUT,*) ' STAR HEADER VARIABLES -------------'

      DO 
C        READ SINGLE HEADER LINE FROM STAR FILE
         READ(LUNXM,'(A)',IOSTAT=IRTFLG) RECLIN
         IF (IRTFLG .NE. 0) RETURN

         NLET = lnblnkn(RECLIN)
         !write(6,*) '  reclin: ', reclin(:nlet)
         IF (NLET <= 0) CYCLE         ! BLANK LINE

C        PARSE STAR FILE HEADER LINE INTO TOKENS
         CALL GET_TOKENS(RECLIN,NLET,MAXLENVAR,2,.FALSE.,' ',
     &                   VARTMP, NGOT, IRTFLG)
         IF (IRTFLG .NE. 0 .OR. NGOT < 1) EXIT

         IF (VARTMP(1)(1:4) == '_rln') THEN
C           GOT A STAR REGISTER VARIABLE NAME
            NVARHEAD          = NVARHEAD + 1
            NCHAR             = lnblnkn(VARTMP(1))
            NCHAR2            = lnblnkn(VARTMP(2))
            VARHEAD(NVARHEAD) = VARTMP(1)(1:NCHAR)
            WRITE(NOUT,90) '  ',VARHEAD(NVARHEAD)(1:NCHAR),
     &                          VARTMP(2)(1:NCHAR2)
90          FORMAT(A,A,1X,A,I0)

         ELSE
            IF ( INDEX('dl_#',VARTMP(1)(1:1)) == 0) EXIT

         ENDIF              
      ENDDO
      WRITE(NOUT,*) ' '

C     GET LIST OF STAR VARIABLES WANTED --------------------------
      IRTFLG = -999   ! DO NOT UPPERCASE RECLIN
      CALL RDPRMC(RECLIN,NLET,.TRUE., 
     &        'STAR FILE REGISTER VARIABLES WANTED', CDUM,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN
      !write(6,*) ' reclin:',reclin(1:nlet)

C     PARSE STAR VARIABLES LINE INTO TOKEN ARRAY
      CALL GET_TOKENS(RECLIN,NLET,MAXLENVAR,NVARSMAX,.FALSE.,' ,',
     &                VARSTAR, NVARSTAR, IRTFLG)
      IF (IRTFLG .NE. 0 .OR. NGOT  < 1) GOTO 9999

      !write(6,*) ' ngot:',ngot,varstar(1:ngot)(1:10)

C     ASSOCIATE STAR VARIABLES WITH COLUMNS IN STAR FILE ---------
      NCOLSTAR = 0     ! ARRAY ZERO
      DO ISTAR = 1,NVARSTAR
         DO IHEAD = 1,NVARHEAD
            IF (VARSTAR(ISTAR) == VARHEAD(IHEAD)) THEN
               NCOLSTAR(ISTAR) = IHEAD
               NCHAR = lnblnkn(VARSTAR(ISTAR))
               WRITE(NOUT,91) '  ',VARSTAR(ISTAR)(1:NCHAR),
     &                        ' From Col: ',NCOLSTAR(ISTAR)
91             FORMAT(A,A,T40,A,I0)
            ENDIF
         ENDDO
         IF (NCOLSTAR(ISTAR) ==  0) THEN
            CALL ERRT(102, 'NO DOC REGISTER FOR STAR VARIABLE',ISTAR)
            GOTO 9999
         ENDIF
      ENDDO
      WRITE(NOUT,*) ' '

C     GET LIST OF SPIDER REGISTERS TO BE FILLED  -----------------
      NVARSPI = NVARSTAR
      IHI     = HUGE(NSPI)
      CALL RDPRAI(NCOLSPI,NVARSMAX,NVARSPI, 1,IHI,
     &        'CORRESPONDING SPIDER DOC REGISTER NUMBERS', CDUM,IRTFLG)
      IF (IRTFLG .NE. 0) GOTO 9999

      IF (NVARSPI .NE.  NVARSTAR) THEN
         CALL ERRT(102,
     &     'NO. OF DOC REGISTERS MUST = NUMBER OF STAR VARIABLES',
     &      NVARSTAR)
         GOTO 9999
      ENDIF
      WRITE(NOUT,*) ' '

C     GET LIST OF STAR FILENAME VARIABLES WANTED -----------------
      IRTFLG = -999   ! DO NOT UPPERCASE RECLIN
      CALL RDPRMC(RECLIN,NLET,.TRUE., 
     &  'STAR FILE NAME VARIABLES WANTED (e.g. _rlnImageName)',
     &  CDUM,IRTFLG)
      IF (IRTFLG .NE. 0) GOTO 9999

      NVARSPINAME  = 0
      NVARSTARNAME = 0
      IF (NLET > 0 .AND. RECLIN(1:1) .NE. '*') THEN
C        PARSE STAR NAME VARIABLES LINE INTO ARRAY
         CALL GET_TOKENS(RECLIN,NLET,MAXLENVAR,NVARSMAX,
     &                .FALSE.,' ,', VARSTARNAME, NVARSTARNAME, IRTFLG)
         IF (IRTFLG .NE. 0) GOTO 9999
 
C        ASSOCIATE STAR FILENAME VARIABLES WITH COLS IN STAR FILE ----
         NVARSPINAME = NVARSTARNAME

         DO ISTAR = 1,NVARSTARNAME
            DO IHEAD = 1,NVARHEAD
               IF (VARSTARNAME(ISTAR) == VARHEAD(IHEAD)) THEN
                  NCOLSTARNAME(ISTAR) = IHEAD
                  NCHAR               = lnblnkn(VARSTARNAME(ISTAR))
                  WRITE(NOUT,91) '  ',VARSTARNAME(ISTAR)(1:NCHAR),
     &                        ' From Col: ',NCOLSTARNAME(ISTAR)
              ENDIF
            ENDDO
         ENDDO
         WRITE(NOUT,*) ' '
 
C        GET LIST OF SPIDER REGISTERS TO BE FILLED  -----------------
         IHI         = HUGE(NVARSPINAME)
         NVARSPINAME = NVARSMAX
         NCOLSPINAME = 0   ! ARRAY ZERO
         CALL RDPRAI(NCOLSPINAME,NVARSMAX,NVARSPINAME, 1,IHI,
     &       'CORRESPONDING SPIDER DOC REGISTER NUMBERS', CDUM,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN

      ENDIF
      WRITE(NOUT,*) ' '

C     OPEN SPIDER OUTPUT DOC FILE
      ADDEXT  = .TRUE.
      GETNAME = .TRUE.
      ISOLD   = .FALSE.
      APPEND  = .TRUE.
      MESSAGE = .TRUE.
      IRTFLG  = -8         ! NO IC USE

      CALL OPENDOC(DOCNAM,ADDEXT,NLET,LUNDOC,LUNDOCT,GETNAME,
     &           'SPIDER DOC',ISOLD,APPEND,MESSAGE,
     &            NEWFILE,IRTFLG)
      IF (IRTFLG == -1) RETURN


      REWIND(LUNXM)           ! RETURN TO BEGINNING

      NREGSTAR = 0
      NLIST          = MAXVAL(NCOLSPI(1:NVARSPI))
      I              = MAXVAL(NCOLSPINAME(1:NVARSPINAME))
      NLIST          = MAX(NLIST,I)
      DLIST(1:NLIST) = 0.0
      IKEY           = 0

      ILABEL = 0  ! ARRAY ZERO
      DO I = 1,NVARSPI
         ILOC         = NCOLSPI(I)
         ILABEL(ILOC) = NCOLSTAR(I)
         !write(6,*) ' Col:',iloc,' Label#:',ilabel(iloc)
      ENDDO

      !write(6,*) 'Nvarspi:',    Nvarspi 
      !write(6,*) 'Nvarspiname:',Nvarspiname
      !write(6,*) 'Ncolstarname(1):', ncolstarname(1) 

      DO I = 1,NVARSPINAME             !  1:3
         ILOC         = NCOLSPINAME(I) !  1,2,3
         ILABEL(ILOC) = NCOLSTARNAME(1)  ! WRONG IF > 1 namevar!!!
         !write(6,*) 'Ncolstarname:',i, ncolstarname(i) 
      ENDDO

      !write(6,'("star col:",100(i5,9x))') ilabel(1:nlist)

      WRITE(RECLIN,'("STAR COL:",100(I5,9X))') ILABEL(1:NLIST)
      NCHAR = lnblnkn(RECLIN)
      CALL LUNDOCPUTCOM(LUNDOCT,RECLIN(:NCHAR),IRTFLG)

      NBAD    = 0

C     LOOP OVER ALL DATA LINES IN STAR FILE
      DO
 
C        READ SINGLE LINE FROM STAR FILE
         READ(LUNXM,'(A)',IOSTAT=IRTFLG) RECLIN
         IF (IRTFLG .NE. 0) RETURN

         !write(6,*) '  reclin: ', reclin(:nlet)
         RECLIN = ADJUSTL(RECLIN)
         NLET   = lnblnkn(RECLIN)
         IF (NLET <= 0) CYCLE         ! SKIP BLANK LINE

         IGOT = SCAN(RECLIN(1:1),'_dl#!')
         IF (IGOT > 0) CYCLE         ! SKIP HEADER LINE

C        PARSE STAR FILE REGISTER LINE INTO TOKENS
         CALL GET_TOKENS(RECLIN,NLET,MAXLENVAR,NVARSMAX,.FALSE.,' ',
     &                   VARTMP, NREGSTAR, IRTFLG)
         IF (IRTFLG .NE. 0) EXIT
         IF (NREGSTAR < 1)  CYCLE        ! SKIP COMMENT LINE

C        INTERPRET TOKENS AS FLOATS, PLACE IN DLIST
         DO ITOK = 1,NVARSPI
            ILOC   = NCOLSPI(ITOK)

            !write(6,*) ' ncolstar:',ncolstar(1:20)
            !write(6,*) ' itok,iloc:',itok,iloc,ncolstar(itok)
            CTOKEN = TRIM(VARTMP(NCOLSTAR(ITOK)))

            !write(6,*) ' Token:',ctoken
            READ(CTOKEN,'(f10.0)') DLIST(ILOC) 
            !write(6,*) ' Token:',ctoken,' dlist:',dlist(ITOK)
         ENDDO

C        EXTRACT ALL INTEGERS FIELDS FROM FILENAME TOKENS

         ! NOTE: NVARSTARNAME MAY BE ZERO
         IT      = 1
         FORMOUT = '(I7,1X,I2,1X,50(G14.7,1X))'

         !write(6,*) ' nvarstarname:',nvarstarname

         DO ITOK = 1,NVARSTARNAME
            IGO    = 0
            RECNAM = ADJUSTL(TRIM(VARTMP(NCOLSTARNAME(ITOK))))
            NCHAR  = lnblnkn(RECNAM)
            !write(6,*) ' recnam:',recnam(1:nchar)

C           PARSE STAR FILE TOKEN INTO SUB-TOKENS
            CALL GET_TOKENS_INTS(RECNAM,NCHAR,MAXLENVAR,NVARSMAX,
     &                     .TRUE.,VALID, VARTMP, NREGSTAR, IRTFLG)
            IF (IRTFLG .NE. 0) EXIT
            IF (NREGSTAR < 1)  EXIT        ! SKIP 
            !write(6,*) ' vartmp(1):', adjustl(trim(vartmp(1)))
            !write(6,*) ' nregstar:',nregstar,'  it:',it

C           INTERPRET TOKENS AS FLOATS, PLACE IN DLIST
            NREGSTAR = MIN(NREGSTAR,(NVARSPINAME - IT +1))
            !write(6,*)' nregstar:',nregstar

            IPUT = 0
            DO I = IT,IT+NREGSTAR-1
               IWHICH = I - IT + 1
               ILOC   = NCOLSPINAME(I)
               CTOKEN = ADJUSTL(VARTMP(IWHICH))
               NCHAR  = lnblnkn(CTOKEN)

               READ(CTOKEN(1:NCHAR),'(I)') IDLIST
               DLIST(ILOC) = IDLIST
 
               !write(6,*)' Token:',ctoken(1:nchar),i,iloc,idlist

               IPUT = IPUT + 1
            ENDDO
            IT = IT + IPUT

         ENDDO       ! END OF: DO I = 1,NVARSTARNAME

C        WRITE OUTPUT LINE IN DOC FILE
         IKEY = IKEY + 1
         !CALL LUNDOCWRTDAT(LUNDOCT,IKEY,DLIST,NLIST,IRTFLG)
         CALL LUNDOCWRTDATF(LUNDOCT,IKEY,DLIST,NLIST,FORMOUT,IRTFLG)
         !write(6,*)'  dlsit:',dlist(1:7)

      ENDDO          ! END OF: DO 

 
9999  CLOSE(LUNDOC)

C     PUT NUMBER OF KEYS IN OPERATION LINE REGISTER
      CALL REG_SET_NSEL(1,1,FLOAT(IKEY),0,0,0,0,IRTFLG)

      IRTFLG =  0

      END
 


@


1.12
log
@integer overflow msg added
@
text
@d320 2
a321 1
         ! write(6,*) ' nvarstarname:',nvarstarname
d329 1
a329 1
            CALL GET_TOKENS(RECNAM,NCHAR,MAXLENVAR,NVARSMAX,
d338 1
a338 1
            !write(6,*)' nregstar,nvarstarname:',nregstar,nvarstarname
a345 24
               IF (NCHAR > 7) THEN
C                 HAVE TO IGNORE FIRST DIGITS?
                  IFIRST = NCHAR-6 

                  IF (NBAD <= 5) THEN
                     WRITE(NOUT,92)CTOKEN(1:NCHAR),CTOKEN(IFIRST:NCHAR)
 92                  FORMAT('  *** OVERFLOW, INTEGER: ',A,' --> ',A)

                     IF (NOUT .NE. 6) THEN
                        WRITE(6,92)CTOKEN(1:NCHAR),CTOKEN(IFIRST:NCHAR)
                     ENDIF

                     IF (NBAD == 5)  THEN
                        WRITE(NOUT,*)  
     &                  ' *** OVERFLOW CONTINUES, LAST WARNING MESSAGE'
                        IF (NOUT .NE. 6) WRITE(6,*)  
     &                  ' *** OVERFLOW CONTINUES, LAST WARNING MESSAGE'
                     ENDIF
                  ENDIF

                  CTOKEN(1:7) = CTOKEN(IFIRST:NCHAR)
                  NCHAR       = 7
                  NBAD        = NBAD + 1
               ENDIF
d347 2
a348 1
               READ(CTOKEN(1:NCHAR),'(F10.0)') DLIST(ILOC)
d350 1
a350 3
!              read(ctoken(1:nchar),'(i)') idlist
!              dlist(iloc) = idlist
               !write(6,*)' Token:',ctoken(1:nchar),i,iloc
d362 1
d366 1
@


1.11
log
@fixed star name variable bug
handles multiple star name fields correctly now
@
text
@d10 1
d73 1
d78 1
d81 1
d278 2
d317 2
a318 1
         IT = 1
d345 29
a375 2
               READ(CTOKEN(1:NCHAR),'(F10.0)') DLIST(ILOC) 
               !write(6,*)' Token:',ctoken(1:NCHAR),' dlist:',iloc,dlist(iloc)
d384 2
a385 1
         CALL LUNDOCWRTDAT(LUNDOCT,IKEY,DLIST,NLIST,IRTFLG)
a387 1

@


1.10
log
@MAXLENVAR = 40 --> 120
@
text
@d9 1
d80 1
a80 1
      INTEGER                  :: IFIRST,NCHAR,NGOT         
d128 2
a129 1
            WRITE(NOUT,90) '  ',VARHEAD(NVARHEAD),VARTMP(2)(1:NCHAR2)
d194 1
a194 1
      NVARSPINAME = 0
d209 1
a209 1
                  NCHAR = lnblnkn(VARSTARNAME(ISTAR))
d212 1
a212 1
               ENDIF
a241 2
      !CALL LUNDOCPUTCOM(NICDOC,' PSI, THETA, AND PHI',IRTFLG)

d253 1
a253 1
         ILOC = NCOLSPI(I)
d255 1
a255 1
         !write(6,*) ' Col:',ILOC,' label:',ilabel(ILOC),ncolspi(i)
a256 2
      DO I = 1,NVARSPINAME
         ILOC = NCOLSPINAME(I)
d258 8
a265 7
         IF (NCOLSTARNAME(I) < 1 .OR. 
     &       NCOLSTARNAME(I) > NLIST) THEN
            ILABEL(ILOC) = ILAST
         ELSE
            ILABEL(ILOC) = NCOLSTARNAME(I)
         ENDIF
         ILAST = ILABEL(ILOC)
d268 2
d298 1
a303 1

d313 1
d316 1
a316 1
            RECNAM = TRIM(VARTMP(NCOLSTARNAME(ITOK)))
d318 1
d325 2
a326 2
            !write(6,*) ' vartmp(1):',vartmp(1)
            !write(6,*) ' vartmp(2):',vartmp(2)
d329 4
a332 1
            NREGSTAR = MIN(NREGSTAR,NVARSTARNAME)
d334 1
d336 9
a344 5
               CTOKEN = TRIM(VARTMP(I))
               !write(6,*) ' Token:',ctoken,I,ncolstarname(i)

               READ(CTOKEN,'(F10.0)') DLIST(ILOC) 
               !write(6,*) ' Token:',ctoken,' dlist:',iloc,dlist(iloc)
a345 1
            ENDDO
d350 1
a351 1
         CALL LUNDOCWRTDAT(LUNDOCT,IKEY,DLIST,NLIST,IRTFLG)
d354 1
d357 1
@


1.9
log
@declared nspi for ifort compiler complaint
@
text
@d8 1
d14 1
a14 1
C=* Copyright 1985-2014  Health Research Inc.,                         *
d55 1
a55 1
      INTEGER, PARAMETER       :: MAXLENVAR = 40
@


1.8
log
@typo
@
text
@d59 1
a59 1
      INTEGER                  :: NVARSPINAME,IGOT
@


1.7
log
@NREGSTAR = MIN(NVARSTARNAME BUG
@
text
@d272 1
a272 1
 C     LOOP OVER ALL DATA LINES IN STAR FILE
@


1.6
log
@rewrite with variables
@
text
@d4 5
a8 4
C    STAR2DOC.F   XMIPP STAR FILE SUPPORT        APR 2013 ARDEAN LEITH 
C                 LINE END BUG                   FEB 2014 ARDEAN LEITH 
C                 REWRITE WITH VAR NAMES         FEB 2014 ARDEAN LEITH 
C                                                                      
d192 1
d272 1
a272 1
C     LOOP OVER ALL DATA LINES IN STAR FILE
d310 1
d325 1
d332 2
a333 1
               !write(6,*) ' Token:',ctoken,' dlist:',dlist(I)
d339 1
@


1.5
log
@cosmetic
@
text
@d4 3
a6 2
C    STAR2DOC.F     XMIPP STAR FILE SUPPORT    APR 2013 ARDEAN LEITH 
C                   LINE END BUG               FEB 2014 ARDEAN LEITH 
d12 1
a12 1
C=* Copyright 1985-2013  Health Research Inc.,                         *
d34 5
a38 1
C     PARAMETERS:   LUNXM,LUNDOC I/O UNITS                     (SENT)
a39 7
C     VARIABLES:    FILXM        SELFILE NAME                   (SENT)
C                   LUNXM        DOC FILE I/O UNIT              (SENT)
C                   NSEL         # SELECTED FILES IN LIST       (RET.)
C                   FILNAM       FIRST FILE IN LIST             (RET.)
C                   NLET         # CHAR IN FILNAM               (RET.)
C                   IRTFLG       ERROR FLAG; 0 IS NORMAL        (RET.)
C  !!! MAY NEED MPI MODS???
d48 2
a49 4
      INTEGER               :: LUNXM   
      INTEGER               :: LUNDOC  

      INTEGER, PARAMETER    :: NCOLS = 80
d51 1
a51 2
      INTEGER               :: LISTSTAR(NCOLS)
      INTEGER               :: LISTSPI(NCOLS)
d53 2
a54 7
      integer               :: liststarfil(ncols)
      integer               :: listspifil(ncols)
      integer               :: numstfil,numspifil
      integer               :: nstarfils(ncols)
        
      INTEGER               :: NSTARCOLS(NCOLS)
      REAL                  :: DLIST(NCOLS)
d56 23
a78 4
      CHARACTER(LEN=MAXNAM) :: FILXM,DOCNAM 

      INTEGER, PARAMETER    :: NREMOVE = 10
      CHARACTER(LEN=MAXNAM) :: REMOVE(NREMOVE),REMOVET
d80 8
a87 13
      CHARACTER(LEN=240)    :: RECLIN 
      CHARACTER(LEN=1)      :: NULL = CHAR(0)  
      CHARACTER(LEN=1)      :: CDUM  
      INTEGER               :: LUNDOCT,NSEL
      INTEGER               :: IHI,NUMST,NUMSP,I,IKEY,NV,IRTFLG,LENREC
      INTEGER               :: NGOTSP

      LOGICAL               :: ISOPEN,EX,CALLERRT,ASKNAM
      LOGICAL               :: ADDEXT,GETNAME
      LOGICAL               :: ISOLD,APPEND,MESSAGE,NEWFILE
      LOGICAL               :: GOTREGLINE
      INTEGER               :: NLET,ICOMM,MYPID,MPIERR,LSPI,MAXSPI
      INTEGER               :: NR,NCR,IR
d89 2
a90 1
      INTEGER               :: lnblnkn
d94 1
d102 37
a138 4
      NUMST = NCOLS
      IHI   = HUGE(IHI)
      CALL RDPRAI(LISTSTAR,NCOLS,NUMST, 1,IHI,
     &            'STAR FILE COLUMNS WANTED', CDUM,IRTFLG)
d140 1
d142 17
a158 10
      NR  = 0
      NCR = 1
      DO WHILE (NCR > 0)
         IRTFLG = -999    ! DO NOT UPPERCASE
         CALL RDPRMC(REMOVET,NCR,.TRUE.,'REMOVE STRING',CDUM,IRTFLG)
         IF (NCR > 0) THEN
            NR               = NR  + 1
            IF (NR > NREMOVE) THEN
               CALL ERRT(102, 'MAX NO. OF REMOVAL STRINGS', NREMOVE)
               RETURN
d160 4
a163 1
            REMOVE(NR) = REMOVET(1:NCR)
d166 16
d183 16
d200 19
a218 6
#ifdef NEVER
      NUMSTFIL = -NCOLS
      CALL RDPRAI(LISTSTARFIL,NCOLS,NUMSTFIL, 1,IHI,
     &            'STAR FILE FILENAME COLUMNS WANTED', CDUM,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN
#endif
d220 2
d223 1
d236 1
d239 1
a239 5
      NUMSP = NCOLS
      IHI   = HUGE(IHI)
      CALL RDPRAI(LISTSPI,NCOLS,NUMSP, 1,IHI,
     &            'SPIDER DOC REGISTER NUMBERS', CDUM,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN
d241 15
a255 6
      IF (NUMST > NUMSP) THEN
         CALL ERRT(102,
     &     'NUMBER OF DOC REGISTERS MUST BE >= NUMBER OF STAR COLS',
     &      NUMSP)
         RETURN
      ENDIF
d257 7
a263 6
      NSTARCOLS = 0   ! ARRAY ZERO

      DO I=1,NUMST
         LSPI = LISTSPI(I)
         NSTARCOLS(LISTSTAR(I)) = LSPI
         !write(6,*) ' star-->spi:', NSTARCOLS(liststar(i))
d266 3
d270 3
a272 4
      MAXSPI = MAXVAL(LISTSPI(1:NUMSP))

      IKEY = 0
      DO 
d274 1
a274 1
         READ(LUNXM,'(A)',END=9999,IOSTAT=IRTFLG) RECLIN
d277 22
a298 2
         NLET = lnblnkn(RECLIN)
         IF (NLET <=0) CYCLE         ! BLANK LINE
d300 2
a301 11
C        ADD BLANK AT END FOR EASY PARSING
         NLET = NLET + 1
         RECLIN(NLET:) = ' '

         !write(6,*) ' R0:', nlet,':',reclin(1:nlet)

         DO IR = 1,NR
            NCR = lnblnkn(REMOVE(IR))
            !write(6,*) ' Remove:', remove(ir)(:ncr)
            CALL SUBCHARS(RECLIN(:NLET),REMOVE(IR)(:ncr),' ',
     &                    NLET,IRTFLG)
a302 9
         !write(6,*) ' R1:', nlet,':',reclin(1:nlet)
         
C        PARSE STAR FILE LINE & RECOVER DOC FILE REGISTERS
         CALL PARSE_STAR(RECLIN,NLET,NCOLS,NUMSP,MAXSPI,
     &                   NSTARCOLS,
     &                   NGOTSP,DLIST,
     &                   GOTREGLINE, IRTFLG)
         IF (IRTFLG .NE. 0) EXIT
         IF (.NOT. GOTREGLINE) CYCLE  ! NO REGISTERS
d304 27
a330 1
         !write(6,*) ' dlist:', dlist(1:ngotsp),ngotsp
d332 1
d334 2
a335 3
         CALL LUNDOCWRTDAT(LUNDOCT,IKEY,DLIST,MAXSPI,IRTFLG)
      ENDDO

a344 131
C      *********************** PARSE_STAR ********************************

       SUBROUTINE PARSE_STAR(RECLIN,NLET,NV,NWANTSP,MAXSPI,
     &                       NSTARCOLS,
     &                       NGOTSP,DLIST,
     &                       GOTREGS, IRTFLG)

C      FINDS LOCATION OF COMMENT AND ANY TRAILING BLANKS BEFORE COMMENT

       IMPLICIT NONE
       INCLUDE 'CMBLOCK.INC'

       CHARACTER(LEN=NLET) :: RECLIN         ! STAR FILE CHAR. LINE
       INTEGER             :: NLET,NV,NWANTSP,MAXSPI
       INTEGER             :: NSTARCOLS(NV)  ! ARRAY STAR COL. WANTED>0
       INTEGER             :: NUMST,NGOTSP   ! # VALUES       (RETURNED)
       REAL                :: DLIST(NV)      ! DOC REG VALUES (RETURNED)
       LOGICAL             :: GOTREGS
       INTEGER             :: IRTFLG         ! ERROR FLAG     (RETURNED)

       CHARACTER(LEN=80)   :: CVAL
       CHARACTER(LEN=1)    :: CTEMP

       INTEGER             :: I,NLETC,IERR,INOT,NWANT,NOTREG,IGOT
       LOGICAL             :: INSIDE = .FALSE.
       
       INTEGER             :: lnblnkn

       NUMST  = 0
       NGOTSP = 0
       NLETC  = 0
       INSIDE = .FALSE.     ! INSIDE A STAR FILE COL.

C      SKIP TILL GET REGISTER LINE
       !write(6,*) ' Nv:',nv
       !write(6,*) ' NSTARCOLS:',NSTARCOLS(1:nv)

       GOTREGS = .FALSE.
       IRTFLG  = 0
       IF (NLET <= 0)  RETURN   ! BLANK LINE

       DO I = 1,NLET
          CTEMP = RECLIN(I:I)
          IF (CTEMP .NE. ' ') THEN
C            GOT FIRST CHAR IN LINE
             IGOT  = SCAN(CTEMP,'_dl#!')
             IF (IGOT > 0) THEN
                IF (VERBOSE) 
     &             WRITE(6,*) ' SKIPPING NON-DATA LINE: ',RECLIN
                RETURN
             ENDIF
             EXIT
          ENDIF
       ENDDO
       GOTREGS = .TRUE.

       !WRITE(6,*) ' Data line: ',RECLIN(1:nlet)

       DLIST(1:MAXSPI) = 0.0    ! ARRAY ZERO

       DO I = 1,NLET
          CTEMP = RECLIN(I:I)
 
          IF ((CTEMP < '!' .OR. CTEMP > '~') ) THEN
C            GOT NON PRINTING CHAR LIKE A BLANK OR LINE ENDED

             IF (INSIDE) THEN
C               ARE ENDING A STAR FILE COLUMN, INTERPRET THE VALUE

C               SEE IF VALID NUMERICAL COL.
                INOT  = VERIFY(CVAL(1:NLETC),'-.Ee0123456789')

C               FIND SPIDER COLUMN FOR THIS STAR FILE COL.
                NUMST  = NUMST + 1
                NWANT = NSTARCOLS(NUMST)  ! SPIDER COL FOR THIS STAR COL.
 
                !write(6,*)' NSTARCOLS:',NSTARCOLS(1:2),' nwant:',nwant

                IF (NWANT > 0 .AND. INOT > 0) THEN
C                  WANT THIS COL. BUT IT CONTAINS INVALID NUMBER

                   IF (NWANT > 0) THEN
C                     WANT THIS COL., BUT BAD VALUE
                      WRITE(NOUT,*) 'BAD COL.:',CVAL(1:NLETC)
                      CALL ERRT(102,'BAD VALUE FOR COL.',NUMST)
                      RETURN
                   ENDIF

                ELSE IF (NWANT > 0) THEN
C                  WANT THIS VALID NUMBER COLUMN

                   !write(6,*) 'nletc:',nletc,'  nwant:',nwant,nwantsp
                   !write(6,*) 'interp:',cval(1:nletc)

                   READ(CVAL(1:NLETC),*,IOSTAT=IERR) DLIST(NWANT) 
                   IF (IERR .NE. 0) THEN
C                     WANT THIS COL., BUT BAD VALUE SOMEHOW
                      WRITE(NOUT,*) 'BAD COL.:',CVAL(1:NLETC)
                      CALL ERRT(102,'BAD VALUE FOR COL.',NUMST)
                      RETURN
                   ENDIF

                   NGOTSP = NGOTSP + 1

                   IF (NGOTSP >= NWANTSP) THEN
C                     GOT ALL WANTED VALUES
                      IRTFLG = 0
                      RETURN
                   ENDIF
 
                ENDIF
 
                NLETC  = 0
                INSIDE = .FALSE.

             ENDIF

          ELSEIF (CTEMP == '#') THEN
C            FINISHED WITH LINE, GOT COMMENT CHAR
             NLETC = 0
             EXIT

          ELSEIF ((CTEMP >= '!' .AND. CTEMP <= '~')) THEN
C            GOT PRINTING CHAR INSIDE A COLUMN
             NLETC             = NLETC + 1
             CVAL(NLETC:NLETC) = CTEMP
             !write(6,*) 'got printing char:',ctemp

             INSIDE  =.TRUE.
         ENDIF
       ENDDO
a345 1
       IRTFLG = 0
a346 2
       END
  
@


1.4
log
@*** empty log message ***
@
text
@d83 1
a83 1
      INTEGER               :: nr,ncr,ir
@


1.3
log
@REMOVE strings option added, set_nsel added,
@
text
@a152 10
#ifdef NEVER
      IF (NUMFILCOLS > 0) THEN
        NUMSPIFIL = -NCOLS
        CALL RDPRAI(LISTSPIFIL,NCOLS,NUMSPIFIL, 1,IHI,
     &            'SPIDER NAME DOC REGISTERS WANTED', CDUM,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
      ENDIF
#endif


d181 1
a181 1
            write(6,*) ' Remove:', remove(ir)(:ncr)
@


1.2
log
@line end bug, scan bug
@
text
@d29 1
a29 1
C     STAR2DOC(IRTFLG)
d31 1
a31 1
C     PURPOSE:      SUPPORT ROUTINES FOR XMIPP
d33 3
a35 1
C     PARAMETERS:   FILXM        SELFILE NAME                   (SENT)
d54 9
a62 1
      INTEGER               :: LISTSTAR(NCOLS),LISTSPI(NCOLS)
d67 4
d83 1
d102 24
d143 1
a143 1
     &            'SPIDER DOC REGISTERS NUMBERS', CDUM,IRTFLG)
d146 1
a146 1
      IF (NUMST .NE. NUMSP) THEN
d148 1
a148 1
     &     'NUMBER OF DOC REGISTERS MUST EQUAL NUMBER OF STAR COLS',
d153 10
d171 1
d176 1
d187 1
a187 1
         !write(6,*) ' RECLIN:', RECLIN(1:nlet)
d189 9
d209 1
a210 1
      ENDDO
d212 3
a215 1
9999  CONTINUE
a216 1
      CLOSE(LUNDOC)
@


1.1
log
@Initial revision
@
text
@d3 4
a6 3
C                                                                      *
C    STAR2DOC.F       XMIPP STAR FILE SUPPORT    APR 2013 ARDEAN LEITH *
C                                                                      *
d132 4
d138 1
a138 2
         
         CALL PARSE_STAR(RECLIN,NLET,NV,NUMSP,MAXSPI,
d145 1
a145 1
         !write(6,*) ' dlist:', dlist(1:nGOTSP)
d149 1
d188 1
a188 1
       NGOTSP  = 0
d193 2
d204 1
a204 1
             IGOT  = SCAN(CTEMP,'_dataloop')
d207 1
a207 1
     &             WRITE(6,*) ' Skipping non-data line:',RECLIN
d215 2
d221 3
a223 3

          IF ((CTEMP < '!' .OR. CTEMP > '~')) THEN
C            GOT NON PRINTING CHAR LIKE A BLANK
d235 2
d285 1
@
