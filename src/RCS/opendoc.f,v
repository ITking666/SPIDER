head	1.48;
access;
symbols
	pre_mrcs:1.48
	healthdept_2018:1.48
	pre_getangas:1.44
	GPL2010:1.44
	pre_GPL2010:1.43
	pre_var_equation:1.43
	pre_fftwrings:1.39
	pre_opfiles:1.39
	src:1.39
	best-code:1.38
	x-named-regs:1.38
	x:1.38
	v13-00:1.38
	pre_GPL:1.36
	prec_CA:1.33
	noindx:1.24
	Bproc:1.15
	oct21:1.14
	last77:1.12;
locks; strict;
comment	@c @;


1.48
date	2018.10.03.14.34.11;	author leith;	state Exp;
branches;
next	1.47;

1.47
date	2013.04.03.18.15.49;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2012.05.17.19.11.11;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2012.01.19.20.22.30;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2010.06.24.13.26.24;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2009.06.12.10.54.49;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2009.06.09.14.30.55;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2009.05.29.12.48.46;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	2008.10.31.15.19.17;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2006.07.25.16.49.14;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2005.10.17.20.05.07;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2005.10.17.18.00.15;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2005.07.01.16.01.38;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2005.04.14.15.48.07;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2004.09.30.16.42.34;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2003.09.04.14.19.22;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2003.07.28.13.45.05;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2003.07.14.17.25.39;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2003.07.09.17.37.10;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2003.07.09.16.30.57;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2003.07.09.13.05.38;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2003.07.08.17.23.06;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2003.07.08.16.57.41;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2003.04.25.18.34.14;	author bbaxter;	state Exp;
branches;
next	1.24;

1.24
date	2002.09.25.19.36.41;	author bbaxter;	state Exp;
branches;
next	1.23;

1.23
date	2002.03.19.16.46.45;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2002.03.19.14.32.43;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2002.03.07.15.37.55;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2001.01.30.19.46.10;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2001.01.25.14.12.24;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2000.12.19.19.50.11;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2000.12.18.17.47.06;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2000.12.04.13.54.06;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2000.04.24.19.55.57;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	99.05.14.17.17.53;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	99.04.21.15.45.49;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.02.04.17.27.09;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	98.08.11.14.57.58;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	98.01.08.21.58.32;	author hedget;	state Exp;
branches;
next	1.9;

1.9
date	97.09.30.21.25.03;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	97.09.10.19.35.19;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.09.09.17.44.27;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.09.09.17.31.32;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	97.02.18.21.07.43;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	96.09.10.15.50.42;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	94.11.21.12.17.33;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.08.15.12.19.49;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.08.11.09.38.23;	author leith;	state Exp;
branches;
next	;


desc
@new
@


1.48
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C OPENDOC.F           CHANGED PARAMETERS         DEC 2000 ARDEAN LEITH
C                     NO LONGER RETURN EXTENSION JAN 2001 ARDEAN LEITH
C                     LUNRET ADDED               JUL 2003 ARDEAN LEITH
C                     MPI                        SEP 2003 CHAO YANG
C                     CSTRING TOO SHORT          JUL 2006 ARDEAN LEITH
C                     'UD MAX' SUPPORT           MAY 2009 ARDEAN LEITH
C                     TIME ERROR IF NO MSG       JUN 2009 ARDEAN LEITH
C                     NO INCORE IF IRTFLG = -8   APR 2013 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2013  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C OPENDOC(DOCNAM,ADDEXT,NLET,LUNDOC,LUNRET,GETNAME,PROMPT,
C        ISOLDFILE,APPEND,MESSAGE,NEWFILE,IRTFLG)
C
C PURPOSE:     OPEN DOCUMENT FILE 
C
C OPENDOC(DOCNAM,ADDEXT,NLET,LUNDOC,LUNRET,GETNAME,PROMPT,
C        ISOLDFILE,APPEND,MESSAGE,NEWFILE,IRTFLG)
C
C PARAMETERS:     DOCNAM        NAME OF DOC FILE                SENT/RET
C                 ADDEXT        LOGICAL FLAG TO ADD .EXT        SENT
C                 NLET          NO. OF CHAR. IN DOCNAM (NO EXT) RETURNED
C                 LUNDOC        IO UNIT FOR DOC FILE            SENT
C                 LUNRET        LUN OR INDEX FOR INCOREDOC FILE SENT/RET.
C                               (< 0 INDICATES INCORE FILE)
C                 GETNAME       FLAG TO REQUEST NAME            SENT
C                 PROMPT        PROMPT TO REQUEST NAME          SENT
C                 ISOLDFILE     FLAG THAT FILE IS EXISTING      SENT
C                 APPEND        FLAG TO OPEN FILE AS APPEND     SENT
C                 MESSAGE       FLAG TO WRITE COMMENT           SENT
C                 NEWFILE       FLAG THAT FILE WAS NEW          RETURNED
C	          IRTFLG        ERROR FLAG (0 IS NORMAL)        RETURNED
C                               (-9 ON INPUT IS DO NOT SAYOPEN) 
C                               (-8 ON INPUT IS DO NOT USE EXISTING
C                                INCORE FILE) 
C
C--*******************************************************************
		
        SUBROUTINE OPENDOC(DOCNAM,ADDEXT,NLET,LUNDOC,LUNRET,GETNAME,
     &                  PROMPT,ISOLDFILE,APPEND,MESSAGE,NEWFILE,IRTFLG)

        IMPLICIT NONE

	INCLUDE 'CMBLOCK.INC' 
	INCLUDE 'CMLIMIT.INC' 
 
	CHARACTER (LEN=*)      :: DOCNAM
	LOGICAL                :: ADDEXT
	INTEGER                :: NLET,LUNDOC,LUNRET
	LOGICAL                :: GETNAME
	CHARACTER (LEN=*)      :: PROMPT
	LOGICAL                :: ISOLDFILE
	LOGICAL                :: APPEND
	LOGICAL                :: MESSAGE
        LOGICAL                :: NEWFILE
	INTEGER                :: IRTFLG

	CHARACTER (LEN=MAXNAM) :: DOCNAMPE
	CHARACTER (LEN=160)    :: CSTRING
        CHARACTER (LEN=12)     :: CDATT
        CHARACTER (LEN=8)      :: CTIMT
        CHARACTER (LEN=1)      :: NULL = CHAR(0)
	LOGICAL                :: EX
        LOGICAL                :: SAYOPEN,ISOPEN

        LOGICAL                :: EXTOK,GOTEXT,ICOK
        INTEGER                :: ICOMM,MYPID,MPIERR,LENP,NLETPE,MT,NE
        INTEGER                :: LUNOP,IOS
 
        INTEGER                :: lnblnkn

        CALL SET_MPI(ICOMM,MYPID,MPIERR) ! SETS ICOMM AND MYMPID

        SAYOPEN = (IRTFLG .NE. -9)
        ICOK    = (IRTFLG .NE. -8)

        IF (GETNAME) THEN
           CALL FILERD(DOCNAM,NLET,NULL,PROMPT,IRTFLG)
           IF (IRTFLG == -1) RETURN
        ELSE
           NLET = lnblnkn(DOCNAM)
        ENDIF
        IRTFLG = 2

        IF (ADDEXT) THEN
C          MERGE DOCNAM WITH DATEXC
           CALL FILNAMANDEXT(DOCNAM,DATEXC,DOCNAMPE,NLETPE,.TRUE.,
     &                       IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
        ELSE
           DOCNAMPE = DOCNAM
           NLETPE   = NLET
        ENDIF

C       SEE IF THIS FILE IS ALREADY OPEN IN-CORE
        CALL ISDOCINCORE(DOCNAM(1:NLET),LUNRET,MT,IRTFLG)
  
        IF (FCHAR(1:2) .EQ. 'UD' .AND. 
     &     (FCHAR(4:5) .NE. 'IC' .AND. 
     &      FCHAR(4:4) .NE. 'N'  .AND. 
     &      FCHAR(4:4) .NE. 'M')) THEN
C          (IF 'UD ??'  BUT NOT 'UD IC'..., DONT USE INCORE EVEN IF PRESENT)
           CONTINUE

        ELSEIF (LUNRET > 0 .AND. ICOK) THEN
C          IN-CORE FILE EXISTS, USE IT INSTEAD OF PHYSICAL FILE
           LUNRET = -LUNRET
           IRTFLG = 0
           RETURN
        ENDIF
        LUNRET = LUNDOC

C       SEE IF PHYSICAL FILE EXISTS
        IF (MYPID <= 0) THEN
           INQUIRE(FILE=DOCNAMPE(1:NLETPE),EXIST=EX,OPENED=ISOPEN,
     &             NUMBER=LUNOP,IOSTAT=IOS)
        ENDIF
#ifdef USE_MPI
c       write(6,*) ' opendoc; bcast ios: ',ios,mypid
        CALL BCAST_MPI('OPENDOC','IOS', IOS,1, 'I',ICOMM)
c       write(6,*) ' opendoc; bcast lunop: ',lunop,mypid
        CALL BCAST_MPI('OPENDOC','LUNOP', LUNOP,1, 'I',ICOMM)
c       write(6,*) ' opendoc; bcast isopen: ',isopen,mypid
        CALL BCAST_MPI('OPENDOC','ISOPEN', ISOPEN,1, 'L',ICOMM)
c       write(6,*) ' opendoc; bcast ex: ',ex,mypid
        CALL BCAST_MPI('OPENDOC','EX', EX,1, 'L',ICOMM)
#endif

        IF (IOS .NE. 0) THEN
	  WRITE(NOUT,*)' *** ERROR INQUIRING FILE: ',DOCNAMPE(1:NLETPE)
           CALL ERRT(100,' ',NE)
           IRTFLG = 1
           RETURN
        ENDIF

        NEWFILE = .NOT. EX

        IF (ISOLDFILE .AND. .NOT. EX) THEN
C          OLD DOC FILE SHOULD EXIST FOR READING, BUT DOES NOT!
	   WRITE(NOUT,*)' *** DOC FILE DOES NOT EXIST: ',
     &                  DOCNAMPE(1:NLETPE)
           CALL ERRT(100,' ',NE)
           IRTFLG = 1
           RETURN

        ELSEIF (ISOLDFILE .AND. EX) THEN
C          SEE IF FILE IS ALREADY OPEN
           IF (ISOPEN) THEN
              IF (MYPID <= 0) THEN
                 CLOSE(LUNOP)
	         WRITE(NOUT,*) ' FILE ALREADY OPEN, HAS BEEN CLOSED!'
              ENDIF
           ENDIF

C          OPEN EXISTING DOC FILE FOR READING
           IF (MYPID .LE. 0) THEN
              OPEN(UNIT=LUNDOC,FILE=DOCNAMPE(1:NLETPE),STATUS='OLD',
     &             IOSTAT=IOS)
           ENDIF
 
        ELSEIF (.NOT. ISOLDFILE .AND. EX) THEN
C          OPEN EXISTING EXISTING DOC FILE FOR WRITING
           IF (APPEND) THEN
              IF (MYPID .LE. 0) THEN
                 OPEN(UNIT=LUNDOC,FILE=DOCNAMPE(1:NLETPE),STATUS='OLD',
     &               ACCESS="SEQUENTIAL",POSITION="APPEND",IOSTAT=IOS)
              ENDIF
          ELSE
              IF (MYPID <= 0) THEN
                 OPEN(UNIT=LUNDOC,FILE=DOCNAMPE(1:NLETPE),STATUS='OLD',
     &               ACCESS='SEQUENTIAL',IOSTAT=IOS)
              ENDIF
           ENDIF

        ELSEIF (.NOT. ISOLDFILE) THEN
C          OPEN NEW DOC FILE FOR WRITING 
           IF (MYPID <= 0) THEN
              OPEN(UNIT=LUNDOC,FILE=DOCNAMPE(1:NLETPE),STATUS='UNKNOWN',
     &             IOSTAT=IOS)
           ENDIF
        ENDIF

        IF (IOS .NE. 0) THEN
	  WRITE(NOUT,*) ' *** ERROR OPENING DOC FILE: ',
     &                  DOCNAMPE(1:NLETPE)
          CALL ERRT(100,' ',NE)
          IRTFLG = 1
          RETURN
        ENDIF

        CALL DATE_2K(CDATT)
        CALL MYTIME(CTIMT)

        IF (NEWFILE .AND. MESSAGE) THEN
C          WRITE HEADER INTO FILE
           IF (MYPID .LE. 0) THEN
              WRITE(LUNDOC,90) PRJEXC(1:3),DATEXC(1:3),
     &                       CDATT(1:11),CTIMT,DOCNAMPE(1:NLETPE)
           ENDIF
 90        FORMAT(' ;' ,A,'/',A,3X,A,' AT ',A,3X,A)
        ENDIF

        IF (SAYOPEN .AND. MYPID .LE. 0) THEN
           IF (NEWFILE) THEN
              WRITE(NOUT,92) CDATT(1:11),CTIMT, DOCNAM(1:NLET)
 92           FORMAT('  ',A,' AT ',A,3X,' OPENED NEW DOC FILE: ',A)
              IF (USE_SPIRE) THEN
                 WRITE(CSTRING,92) CDATT(1:11),CTIMT, DOCNAM(1:NLET)
                 CALL SPIREOUT(CSTRING,IRTFLG)
              ENDIF
           ELSE
              WRITE(NOUT,*) ' OPENED EXISTING DOC FILE: ',DOCNAM(1:NLET)
           ENDIF
        ENDIF

        IRTFLG = 0

	END
@


1.47
log
@NO INCORE IF IRTFLG = -8
@
text
@d19 1
a19 1
C=* Email: spider@@wadsworth.org                                        *
@


1.46
log
@IF (.NOT. ISOLDFILE .AND. MESSAGE now IF (NEWFILE .AND. MESSAGE
@
text
@d4 8
a11 7
C OPENDOC.F            CHANGED PARAMETERS         DEC 2000 ARDEAN LEITH
C                      NO LONGER RETURN EXTENSION JAN 2001 ARDEAN LEITH
C                      NICDOC ADDED               JUL 2003 ARDEAN LEITH
C                      MPI                        SEP 2003 CHAO YANG
C                      CSTRING TOO SHORT          JUL 2006 ARDEAN LEITH
C                      'UD MAX' SUPPORT           MAY 2009 ARDEAN LEITH
C                      TIME ERROR IF NO MSG       JUN 2009 ARDEAN LEITH
d17 1
a17 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d35 1
a35 1
C OPENDOC(DOCNAM,ADDEXT,NLET,NDOC,NICDOC,GETNAME,PROMPT,
d40 1
a40 1
C OPENDOC(DOCNAM,ADDEXT,NLET,NDOC,NICDOC,GETNAME,PROMPT,
d46 2
a47 2
C                 NDOC          UNIT FOR DOC FILE               SENT
C                 NICDOC        INDEX FOR INCOREDOC FILE        SENT/RET.
d57 2
d62 1
a62 1
        SUBROUTINE OPENDOC(DOCNAM,ADDEXT,NLET,NDOC,NICDOC,GETNAME,
d72 1
a72 1
	INTEGER                :: NLET,NDOC,NICDOC
d89 1
a89 1
        LOGICAL                :: EXTOK,GOTEXT
d98 1
d119 1
a119 1
        CALL ISDOCINCORE(DOCNAM(1:NLET),NICDOC,MT,IRTFLG)
d128 1
a128 1
        ELSEIF (NICDOC > 0) THEN
d130 1
a130 1
           NICDOC = -NICDOC
d134 1
a134 1
        NICDOC = NDOC
d180 1
a180 1
              OPEN(UNIT=NDOC,FILE=DOCNAMPE(1:NLETPE),STATUS='OLD',
d188 1
a188 1
                 OPEN(UNIT=NDOC,FILE=DOCNAMPE(1:NLETPE),STATUS='OLD',
d193 1
a193 1
                 OPEN(UNIT=NDOC,FILE=DOCNAMPE(1:NLETPE),STATUS='OLD',
d201 1
a201 1
              OPEN(UNIT=NDOC,FILE=DOCNAMPE(1:NLETPE),STATUS='UNKNOWN',
d220 1
a220 1
              WRITE(NDOC,90) PRJEXC(1:3),DATEXC(1:3),
@


1.45
log
@GE,  IMPLICIT  only
@
text
@d213 1
a213 1
        IF (.NOT. ISOLDFILE .AND. MESSAGE) THEN
@


1.44
log
@GPL_2010
@
text
@d62 2
d67 11
a77 1
	CHARACTER (LEN=*)      :: DOCNAM,PROMPT
d82 9
a90 4
        CHARACTER (LEN=1)      :: NULL
	LOGICAL                :: EX,ADDEXT,ISOLDFILE,GETNAME
	LOGICAL                :: APPEND,MESSAGE
        LOGICAL                :: SAYOPEN,ISOPEN,NEWFILE
a93 2
        NULL    = CHAR(0)

d98 1
a98 1
           IF (IRTFLG .EQ. -1) RETURN
d100 1
a100 1
           NLET = LNBLNKN(DOCNAM)
d124 1
a124 1
        ELSEIF (NICDOC .GT. 0) THEN
d133 1
a133 1
        IF (MYPID .LE. 0) THEN
d150 3
a152 2
          CALL ERRT(100,' ',NE)
          RETURN
d162 1
d168 1
a168 1
              IF (MYPID .LE. 0) THEN
d188 1
a188 1
              IF (MYPID .LE. 0) THEN
d196 1
a196 1
           IF (MYPID .LE. 0) THEN
d206 1
a236 1
	RETURN
@


1.43
log
@SET_MPI(ICOMM,MYPID,MPIERR)
@
text
@a12 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d14 5
a18 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d20 1
a20 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d25 1
a25 1
C=* This program is distributed in the hope that it will be useful,    *
d27 1
a27 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a28 1
C=*                                                                    *
d30 1
a30 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.42
log
@*** empty log message ***
@
text
@d79 1
a79 1
        CALL SET_MPI(ICOMM,MYPID,IRTFLG) ! SETS ICOMM AND MYMPID
@


1.41
log
@UD MAX
@
text
@d10 2
d196 3
a200 2
	   CALL DATE_2K(CDATT)
	   CALL MYTIME(CTIMT)
@


1.40
log
@mpi changes
@
text
@d9 1
d12 1
a12 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d36 4
a39 1
C OPENDOC:    SUBROUTINE TO OPEN DOCUMENT FILE 
d77 1
a77 8
#ifdef USE_MPI
        include 'mpif.h' 
        ICOMM = MPI_COMM_WORLD   
        CALL MPI_COMM_RANK(ICOMM, MYPID, MPIERR)
#else
        MYPID = -1
#endif

d79 1
a79 1
        NULL = CHAR(0)
d81 1
a81 1
        SAYOPEN =  (IRTFLG .NE. -9)
a90 1

a100 2


d104 5
a108 2
        IF (FCHAR(1:2) .EQ. 'UD' .AND. FCHAR(4:5) .NE. 'IC') THEN
C          (IF UD BUT NOT INCORE, DO NOT USE INCORE EVEN IF PRESENT)
a111 2
C          (IF UD BUT NOT INCORE, DO NOT USE INCORE EVEN IF PRESENT)

d125 1
a125 2

c        write(6,*) ' opendoc; bcast ios: ',ios,mypid
d127 1
a127 2

c        write(6,*) ' opendoc; bcast lunop: ',lunop,mypid
d129 1
a129 2

c        write(6,*) ' opendoc; bcast isopen: ',isopen,mypid
d131 1
a131 2

c        write(6,*) ' opendoc; bcast ex: ',ex,mypid
a132 1

@


1.39
log
@cstring
@
text
@d63 9
a71 8
	CHARACTER (LEN=*) ::       DOCNAM,PROMPT
	CHARACTER (LEN=MAXNAM) ::  DOCNAMPE
	CHARACTER (LEN=160) ::     CSTRING
        CHARACTER (LEN=12)  ::     CDATT
        CHARACTER (LEN=8)  ::      CTIMT
        CHARACTER (LEN=1)  ::      NULL
	LOGICAL   ::        EX,ADDEXT,ISOLDFILE,GETNAME,APPEND,MESSAGE
        LOGICAL   ::        SAYOPEN,ISOPEN,NEWFILE
d75 2
a76 4
        INTEGER MYPID, COMM, MPIERR 
        COMM   = MPI_COMM_WORLD   
        MPIERR = 0 
        CALL MPI_COMM_RANK(COMM, MYPID, MPIERR)
d81 1
d94 1
d105 2
d130 13
a142 20
        CALL MPI_BCAST(EX,1,MPI_LOGICAL,0,COMM,MPIERR)
        IF (MPIERR .NE. 0) THEN
           WRITE(0,*) ' OPENDOC: FAILED TO BCAST EX'
           STOP
        ENDIF
        CALL MPI_BCAST(ISOPEN,1,MPI_LOGICAL,0,COMM,MPIERR)
        IF (MPIERR .NE. 0) THEN
           WRITE(0,*) ' OPENDOC: FAILED TO BCAST ISOPEN'
           STOP
        ENDIF
        CALL MPI_BCAST(IOS,1,MPI_INTEGER,0,COMM,MPIERR)
        IF (MPIERR .NE. 0) THEN
           WRITE(0,*) ' OPENDOC: FAILED TO BCAST IOS'
           STOP
        ENDIF
        CALL MPI_BCAST(LUNOP,1,MPI_INTEGER,0,COMM,MPIERR)
        IF (MPIERR .NE. 0) THEN
           WRITE(0,*) ' OPENDOC: FAILED TO BCAST LUNOP'
           STOP
        ENDIF
@


1.38
log
@GPL License fixed
@
text
@d8 1
a8 1
C
d65 1
a65 1
	CHARACTER (LEN=MAXNAM) ::  CSTRING
@


1.37
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a9 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d13 1
a13 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a32 6

C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.36
log
@spire file output
@
text
@d2 1
d12 24
@


1.35
log
@output msg. formatting
@
text
@d48 1
d206 4
@


1.34
log
@mpi
@
text
@a56 1
C                  
d63 1
d132 1
a132 1
	  WRITE(NOUT,*)'*** ERROR INQUIRING FILE: ',DOCNAMPE(1:NLETPE)
d141 1
a141 1
	   WRITE(NOUT,*)'*** DOC FILE DOES NOT EXIST: ',
d151 1
a151 1
	         WRITE(NOUT,*) 'FILE ALREADY OPEN, HAS BEEN CLOSED!'
d184 1
a184 1
	  WRITE(NOUT,*) '*** ERROR OPENING DOC FILE: ',
@


1.33
log
@mpi
@
text
@d56 7
a62 4
        integer mypid, comm, ierr 
c                  
        comm = MPI_COMM_WORLD    
        call MPI_COMM_RANK(comm, mypid , ierr)
d104 2
a105 1
        INQUIRE(FILE=DOCNAMPE(1:NLETPE),EXIST=EX,OPENED=ISOPEN,
d107 23
d149 1
a149 2
#ifdef USE_MPI
              if (mypid .eq. 0) then
d152 2
a153 6
              endif
#else
              CLOSE(LUNOP)
	      WRITE(NOUT,*) 'FILE ALREADY OPEN, HAS BEEN CLOSED!'
#endif
            ENDIF
d156 4
a159 2
           OPEN(UNIT=NDOC,FILE=DOCNAMPE(1:NLETPE),STATUS='OLD',
     &          IOSTAT=IOS)
d164 4
a167 9
#ifdef USE_MPI
              if (mypid .eq. 0) then
              OPEN(UNIT=NDOC,FILE=DOCNAMPE(1:NLETPE),STATUS='OLD',
     &            ACCESS="SEQUENTIAL",POSITION="APPEND",IOSTAT=IOS)
              endif
#else
              OPEN(UNIT=NDOC,FILE=DOCNAMPE(1:NLETPE),STATUS='OLD',
     &            ACCESS="SEQUENTIAL",POSITION="APPEND",IOSTAT=IOS)
#endif
d169 4
a172 9
#ifdef USE_MPI
              if (mypid .eq. 0) then
              OPEN(UNIT=NDOC,FILE=DOCNAMPE(1:NLETPE),STATUS='OLD',
     &            ACCESS='SEQUENTIAL',IOSTAT=IOS)
              endif
#else
              OPEN(UNIT=NDOC,FILE=DOCNAMPE(1:NLETPE),STATUS='OLD',
     &            ACCESS='SEQUENTIAL',IOSTAT=IOS)
#endif
d177 4
a180 10
#ifdef USE_MPI
           if (mypid .eq. 0) then
           OPEN(UNIT=NDOC,FILE=DOCNAMPE(1:NLETPE),STATUS='UNKNOWN',
     &          IOSTAT=IOS)
           endif
#else
           OPEN(UNIT=NDOC,FILE=DOCNAMPE(1:NLETPE),STATUS='UNKNOWN',
     &          IOSTAT=IOS)
#endif

d194 4
a197 9
#ifdef USE_MPI
           if (mypid .eq. 0) then
           WRITE(NDOC,90) PRJEXC(1:3),DATEXC(1:3),
     &                     CDATT(1:11),CTIMT,DOCNAMPE(1:NLETPE)
           endif
#else
           WRITE(NDOC,90) PRJEXC(1:3),DATEXC(1:3),
     &                     CDATT(1:11),CTIMT,DOCNAMPE(1:NLETPE)
#endif
d201 1
a201 11
#ifdef USE_MPI
        IF (SAYOPEN .and. mypid .eq. 0) THEN
           IF (NEWFILE) THEN
              WRITE(NOUT,92) CDATT(1:11),CTIMT, DOCNAM(1:NLET)
 92           FORMAT('  ',A,' AT ',A,3X,' OPENED NEW DOC FILE: ',A)
           ELSE
              WRITE(NOUT,*) ' OPENED EXISTING DOC FILE: ',DOCNAM(1:NLET)
           ENDIF
       ENDIF
#else
        IF (SAYOPEN) THEN
a208 1
#endif
@


1.32
log
@sayopen added
@
text
@d7 1
d9 8
a16 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d54 7
d122 6
d130 2
a131 1
           ENDIF
d140 6
d148 8
a155 1
           ELSE
d158 1
d163 6
d171 1
d186 2
d189 6
a194 1
     &                    CDATT(1:11),CTIMT,DOCNAMPE(1:NLETPE)
d198 10
d216 1
@


1.31
log
@sd ic related changes
@
text
@d36 1
d56 1
a56 2
        SAYOPEN = .TRUE.
        IF (IRTFLG .EQ. -9) SAYOPEN = .FALSE.
a154 2

C        IF (SAYOPEN) WRITE(NOUT,*) ' OPENED DOC FILE: ', DOCNAM(1:NLET)
@


1.30
log
@comments
@
text
@d79 7
a85 1
        IF (NICDOC .GT. 0) THEN
@


1.29
log
@usincoredoc parameters changed
@
text
@d77 1
a77 1
        CALL ISDOCINCORE(DOCNAMPE(1:NLETPE),NICDOC,MT,IRTFLG)
@


1.28
log
@comment
@
text
@d46 1
a46 1
	CHARACTER (LEN=maxnam) ::  DOCNAMPE
d77 1
a77 1
        CALL ISDOCINCORE(DOCNAMPE(1:NLETPE),ICLAST,NICDOC,MT,IRTFLG)
d81 1
a81 2
           ICLAST = NICDOC
           NICDOC    = -NICDOC
@


1.27
log
@spell
@
text
@d27 2
a28 1
C                 Nic           INDEX FOR INCOREDOC FILE        SENT/RET.
@


1.26
log
@incore opendoc
@
text
@d45 1
d49 2
a50 2
	LOGICAL   ::   EX,ADDEXT,ISOLDFILE,GETNAME,APPEND,MESSAGE
        LOGICAL   ::   SAYOPEN,ISOPEN,NEWFILE
a94 1
           ENDIF
@


1.25
log
@added date,time to "open a new doc file" line in results file
@
text
@d4 1
a4 2
C OPENDOC.F               
C                      CHANGED PARAMETERS  DEC 2000 ARDEAN LEITH
d6 1
d20 1
a20 1
C OPENDOC(DOCNAM,ADDEXT,NLET,NDOC,GETNAME,PROMPT,
d27 1
d38 2
a39 2
        SUBROUTINE OPENDOC(DOCNAM,ADDEXT,NLET,NDOC,GETNAME,PROMPT,
     &                     ISOLDFILE,APPEND,MESSAGE,NEWFILE,IRTFLG)
d44 1
a44 2
	CHARACTER *(*) DOCNAM,PROMPT
        CHARACTER (LEN=MAXNAM) ::  DOCNAMPE
d74 13
a86 1
C       SEE IF FILE EXISTS
d88 1
a88 1
     &          NUMBER=LUNOP,IOSTAT=IOS)
d94 1
d96 1
d146 1
a146 1
     &                     CDATT(1:11),CTIMT,DOCNAMPE(1:NLETPE)
d155 1
a155 1
 92           FORMAT('  ',A,' AT ',A,3X,' OPENED DOC FILE N: ',A)
d157 1
a157 1
              WRITE(NOUT,*) ' OPENED DOC FILE O: ', DOCNAM(1:NLET)
@


1.24
log
@added code to end to write to the results file if the doc file is new or old
@
text
@d140 2
a141 1
              WRITE(NOUT,*) ' OPENED DOC FILE N: ', DOCNAM(1:NLET)
@


1.23
log
@formatting of output msg
@
text
@d136 9
a144 1
        IF (SAYOPEN) WRITE(NOUT,*) ' OPENED DOC FILE: ', DOCNAM(1:NLET)
@


1.22
log
@output msg. formmating
@
text
@d136 1
a136 1
        IF (SAYOPEN) WRITE(NOUT,*) '  OPENED DOC FILE: ', DOCNAM(1:NLET)
@


1.21
log
@output echo cosmetics
@
text
@d136 1
a136 1
        IF (SAYOPEN) WRITE(NOUT,*) ' OPENED DOC FILE: ', DOCNAM(1:NLET)
@


1.20
log
@fixed null at end of echo
@
text
@d136 1
a136 1
        IF (SAYOPEN) WRITE(NOUT,*) 'OPENED DOC FILE: ', DOCNAM(1:NLET)
@


1.19
log
@no longer returns added extension
@
text
@d23 11
a33 11
C PARAMETERS:     DOCNAM        NAME OF DOC FILE             SENT
C                 ADDEXT        LOGICAL FLAG TO ADD .EXT     SENT
C                 NLET          NO. OF CHAR. IN DOCNAM       RETURNED
C                 NDOC          UNIT FOR DOC FILE            SENT
C                 GETNAME       FLAG TO REQUEST NAME         SENT
C                 PROMPT        PROMPT TO REQUEST NAME       SENT
C                 ISOLDFILE     FLAG THAT FILE IS EXISTING   SENT
C                 APPEND        FLAG TO OPEN FILE AS APPEND  SENT
C                 MESSAGE       FLAG TO WRITE COMMENT        SENT
C                 NEWFILE       FLAG THAT FILE WAS NEW       RETURNED
C	          IRTFLG        ERROR FLAG (0 IS NORMAL)     RETURNED
d60 1
a60 2
           NLET = INDEX(DOCNAM,NULL) - 1
           IF (NLET .LT. 0) NLET = LEN(DOCNAM)
d66 2
a67 1
           CALL FILNAMANDEXT(DOCNAM,DATEXC,DOCNAMPE,NLET,.TRUE.,IRTFLG)
d71 1
d75 1
a75 1
        INQUIRE(FILE=DOCNAMPE(1:NLET),EXIST=EX,OPENED=ISOPEN,
d79 1
a79 1
	  WRITE(NOUT,*)'*** ERROR INQUIRING DOC FILE: ',DOCNAMPE(1:NLET)
d87 2
a88 1
	   WRITE(NOUT,*)'*** DOC FILE DOES NOT EXIST: ',DOCNAMPE(1:NLET)
d100 2
a101 1
           OPEN(UNIT=NDOC,FILE=DOCNAMPE(1:NLET),STATUS='OLD',IOSTAT=IOS)
d106 1
a106 1
              OPEN(UNIT=NDOC,FILE=DOCNAMPE(1:NLET),STATUS='OLD',
d109 1
a109 1
              OPEN(UNIT=NDOC,FILE=DOCNAMPE(1:NLET),STATUS='OLD',
d115 1
a115 1
           OPEN(UNIT=NDOC,FILE=DOCNAMPE(1:NLET),STATUS='UNKNOWN',
d121 2
a122 1
	  WRITE(NOUT,*) '*** ERROR OPENING DOC FILE: ',DOCNAMPE(1:NLET)
d132 1
a132 1
     &                     CDATT(1:11),CTIMT,DOCNAMPE(1:NLET)
@


1.18
log
@opendoc has prompt parameter now
@
text
@d5 2
a6 1
C                             CHANGED PARAMETERS  DEC 2000 ARDEAN LEITH
d41 1
d44 6
a49 5
        CHARACTER *12  CDATT
        CHARACTER *8   CTIMT
        CHARACTER      NULL
	LOGICAL        EX,ADDEXT,ISOLDFILE,GETNAME,APPEND,MESSAGE
        LOGICAL        SAYOPEN,ISOPEN,NEWFILE
d67 1
a67 1
           CALL FILCAN(DOCNAM,NLET,NULL,NULL,DOCNAM,DATEXC,IRTFLG)
d69 2
d74 1
a74 1
        INQUIRE(FILE=DOCNAM(1:NLET),EXIST=EX,OPENED=ISOPEN,
d78 1
a78 1
	  WRITE(NOUT,*)'*** ERROR INQUIRING DOC FILE: ',DOCNAM(1:NLET)
d86 1
a86 1
	   WRITE(NOUT,*) '*** DOC FILE DOES NOT EXIST: ',DOCNAM(1:NLET)
d98 1
a98 1
           OPEN(UNIT=NDOC,FILE=DOCNAM(1:NLET),STATUS='OLD',IOSTAT=IOS)
d103 1
a103 1
              OPEN(UNIT=NDOC,FILE=DOCNAM(1:NLET),STATUS='OLD',
d106 1
a106 1
              OPEN(UNIT=NDOC,FILE=DOCNAM(1:NLET),STATUS='OLD',
d112 1
a112 1
           OPEN(UNIT=NDOC,FILE=DOCNAM(1:NLET),STATUS='UNKNOWN',
d118 1
a118 1
	  WRITE(NOUT,*) '*** ERROR OPENING DOC FILE: ',DOCNAM(1:NLET)
d128 1
a128 1
     &                     CDATT(1:11),CTIMT,DOCNAM(1:NLET)
@


1.17
log
@time --> mytime
/
@
text
@d5 1
d19 1
a19 1
C OPENDOC(DOCNAM,ADDEXT,NLET,NDOC,GETNAME,
d27 1
d36 1
a36 1
        SUBROUTINE OPENDOC(DOCNAM,ADDEXT,NLET,NDOC,GETNAME,
d41 1
a41 1
	CHARACTER *(*) DOCNAM
d54 1
a54 1
           CALL FILERD(DOCNAM,NLET,NULL,'DOCUMENT',IRTFLG)
@


1.16
log
@(1:NLET) for Linux Char Yang's bug
@
text
@d119 1
a119 1
	   CALL TIME(CTIMT)
@


1.15
log
@SP_F90 removed
@
text
@d52 2
a53 2
          CALL FILERD(DOCNAM,NLET,NULL,'DOCUMENT',IRTFLG)
          IF (IRTFLG .EQ. -1) RETURN
d55 2
a56 2
          NLET = INDEX(DOCNAM,NULL) -1
          IF (NLET .LT. 0) NLET = LEN(DOCNAM)
d67 2
a68 2
        INQUIRE(FILE=DOCNAM,EXIST=EX,OPENED=ISOPEN,NUMBER=LUNOP,
     &          IOSTAT=IOS)
d91 1
a91 1
           OPEN(UNIT=NDOC,FILE=DOCNAM,STATUS='OLD',IOSTAT=IOS)
d96 1
a96 1
              OPEN(UNIT=NDOC,FILE=DOCNAM,STATUS='OLD',
d99 1
a99 1
              OPEN(UNIT=NDOC,FILE=DOCNAM,STATUS='OLD',
d105 2
a106 1
           OPEN(UNIT=NDOC,FILE=DOCNAM,STATUS='UNKNOWN',IOSTAT=IOS)
@


1.14
log
@cdatt --> 11 chara
@
text
@a95 1
#ifdef SP_F90
a97 4
#else
              OPEN(UNIT=NDOC,FILE=DOCNAM,STATUS='OLD',
     &            ACCESS="APPEND",IOSTAT=IOS)
#endif
@


1.13
log
@y2k
@
text
@d125 1
a125 1
     &                     CDATT,CTIMT,DOCNAM(1:NLET)
@


1.12
log
@CNO_SAVE
@
text
@a37 2
CNO_SAVE 

d40 1
a40 1
        CHARACTER *9   CDATT
d122 1
a122 1
	   CALL DATE(CDATT)
@


1.11
log
@error msgs should come before errt call
@
text
@d38 2
@


1.10
log
@added ifdef to make OPEN call f90 compatible
@
text
@d71 1
a72 1
	  WRITE(NOUT,*)'*** ERROR INQUIRING DOC FILE: ',DOCNAM(1:NLET)
d79 1
a80 1
	   WRITE(NOUT,*) '*** DOC FILE DOES NOT EXIST: ',DOCNAM(1:NLET)
d115 1
a116 1
	  WRITE(NOUT,*) '*** ERROR OPENING DOC FILE: ',DOCNAM(1:NLET)
@


1.9
log
@*** empty log message ***
@
text
@d96 1
d98 5
a102 1
     &            ACCESS='APPEND',IOSTAT=IOS)
@


1.8
log
@*** empty log message ***
@
text
@d44 1
a44 1
        LOGICAL        SAYOPEN,ISOPEN
@


1.7
log
@*** empty log message ***
@
text
@d79 1
a79 2
C           CALL ERRT(100,' ',NE)
           IRTFLG = 2
@


1.6
log
@*** empty log message ***
@
text
@d71 1
a71 2
C          CALL ERRT(100,' ',NE)
           IRTFLG = 2
d79 2
a80 1
           CALL ERRT(100,' ',NE)
@


1.5
log
@closed file before opening
@
text
@d71 2
a72 1
          CALL ERRT(100,' ',NE)
@


1.4
log
@can skip open message now
@
text
@d44 1
a44 1
        LOGICAL        SAYOPEN
d67 2
a68 1
        INQUIRE(FILE=DOCNAM,EXIST=EX,IOSTAT=IOS)
d84 6
@


1.3
log
@did not always list doc file name
@
text
@a36 1
#ifdef SP_UNIX
a37 3
#else
	INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
d44 1
d48 3
d117 1
a117 1
        WRITE(NOUT,*) 'OPENED DOC FILE: ', DOCNAM(1:NLET)
@


1.2
log
@bug if extension not present logic
@
text
@d54 3
@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
C UNSAV.FOR                DOCNAM LENGTHENED DEC 9 88 al
C                          REPLACES UNSAVD
d16 1
a16 1
C OPENDOC:    SUBROUTINE TO OPEN EXISTING DOCUMENT FILE 
d19 1
a19 1
C        READIT,APPEND,MESSAGE,NEWFILE,IRTFLG)
d26 1
a26 1
C                 READIT        FLAG TO READ FILE            SENT
d35 1
a35 1
     &                     READIT,APPEND,MESSAGE,NEWFILE,IRTFLG)
d47 1
a47 1
	LOGICAL        EX,ADDEXT,READIT,GETNAME,APPEND,MESSAGE
d73 1
a73 1
        IF (READIT .AND. .NOT. EX) THEN
d79 1
a79 1
        ELSEIF (READIT .AND. EX) THEN
d83 1
a83 1
        ELSEIF (.NOT. READIT .AND. EX) THEN
d93 1
a93 1
        ELSEIF (.NOT. READIT) THEN
d105 1
a105 1
        IF (.NOT. READIT .AND. MESSAGE) THEN
@
