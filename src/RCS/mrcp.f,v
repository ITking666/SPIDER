head	1.23;
access;
symbols
	healthdept_2018:1.23
	pre_getangas:1.19
	GPL2010:1.19
	pre_GPL2010:1.18
	pre_var_equation:1.18
	pre_fftwrings:1.18
	pre_opfiles:1.18
	src:1.18
	best-code:1.18
	x-named-regs:1.18
	x:1.18
	v13-00:1.18
	pre_GPL:1.16
	prec_CA:1.16
	noindx:1.14
	Bproc:1.12
	oct21:1.11
	last77:1.11;
locks; strict;
comment	@c @;


1.23
date	2018.10.03.14.34.10;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2018.05.23.14.38.31;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2016.03.23.15.13.47;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2014.02.15.15.48.24;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2010.06.24.13.26.13;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.17.20.08.15;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.17.18.02.55;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2003.03.10.17.20.39;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.20.21.33.47;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2002.03.11.14.07.58;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.11.01.18.42.05;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.11.10.23.09.38;	author yuchen;	state Exp;
branches;
next	1.11;

1.11
date	99.02.04.16.58.44;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	97.10.10.17.47.49;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	96.07.12.17.49.10;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	96.04.25.19.14.20;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	96.04.15.13.55.48;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	95.01.18.17.13.50;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	95.01.16.12.17.57;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	95.01.13.09.34.30;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	95.01.12.12.32.14;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.07.23;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.17;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.23
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C MRCP.F                    FILENAMES LENGTHENED   JAN 89 ARDEAN LEITH
C                           USED OPFILE            NOV 00 ARDEAN LEITH
C                           YEARS OLD BUG FIXED    MAR 16 ARDEAN LEITH
C                           INTEGER BUG            JUN 18 ARDEAN LEITH
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2018  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  MRCP(LUN1,LUN2,LUN3)
C
C  VARIABLES:      NX          COLUMNS
C                  NY          ROWS
C                  NZ          SLICES
C                  LUN1        INPUT FILE
C                  LUN2        OUTPUT FILE
C                  LUN3        FOR DOC FILE
C                  A           ARRAY FOR SLICE
C                  BUF         IO ARRAY
C
C  NOTE:  CYLINDER X-SECTION IS IN XZ PLANE
C
C--*********************************************************************

        SUBROUTINE MRCP(LUN1,LUN2,LUN3)

        IMPLICIT NONE

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC' 

        INTEGER               :: LUN1,LUN2,LUN3

        INTEGER, PARAMETER    :: MAXREG = 7 
        INTEGER, PARAMETER    :: MAXKEY = 4000 
        REAL                  :: DBUF(MAXREG,MAXKEY,2)

        CHARACTER(LEN=MAXNAM) :: FLN1,DOCF1,FILNAM

        CHARACTER *1          :: NULL = CHAR(0)
        REAL                  :: PLIST(6)
    
        LOGICAL               :: MITO,DIST

        INTEGER               :: NX,NY,NZ,MAXIM,IRTFLG,MWANT,NLET
        INTEGER               :: PHI0
        REAL                  :: RADI,RAD,POINTS,AINC,WINK
        INTEGER               :: IPOINTS,NOT_USED,IRAD
        INTEGER               :: IRADI,NXP,IRX,IRY,NOPEN,NKEY,NREG,I

        INTEGER               :: NLETD,LERR,LAUF,N0,K,IX,IY
        REAL                  :: SUM,PHI,CP,SP,X,Y,XCENTER,YCENTER
        REAL                  :: DX,DY,DDX,DDY,B1,B2,W

        REAL, ALLOCATABLE     :: A(:,:), BUF(:)

        REAL, PARAMETER       :: PI = 3.14159


C       CYLINDRICAL PROJECTION
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,
     &                  NX,NY,NZ,
     &                  MAXIM,'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 999

        MWANT = NX * NZ + NBUFSIZ
        ALLOCATE (BUF(NBUFSIZ), A(NX,NZ), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(46,'MRCP, BUF...',MWANT)
           RETURN
        ENDIF

        CALL FILERD(FLN1,NLET,NULL,'OUTPUT',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 998

        PHI0 = 0
        CALL RDPRM1S(PHI0,NOT_USED,
     &              'STARTING ANGLE (0 = 3 OCLOCK)',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 998

        PHI0 = PI * (PHI0 / 180.0)

        RADI = 5
        RAD  = (NX / 2) -5

        CALL RDPRM2S(RADI,RAD,NOT_USED,'INNER, OUTER RADIUS',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 998

        MITO = .FALSE.
        DIST = .FALSE.
        IF (RADI  <   0.0) THEN
           RADI = - RADI
           MITO = .TRUE.
           WRITE(NOUT,*) 
     &         ' NEGATIVE INNER RADIUS  --> MODIFED MAX. PROJ.'
        ENDIF
        IF (RAD  <   0.0) THEN
           RAD  = - RAD
           DIST = .TRUE.
           WRITE(NOUT,*) 
     &         ' NEGATIVE OUTER RADIUS --> DISTANCE FROM CENTER.'
        ENDIF

        POINTS  = 2 * PI * RAD
        IPOINTS = POINTS
        AINC    = (360.0 / POINTS)                      
        WRITE(NOUT,100) AINC,IPOINTS
100     FORMAT('  ANGULAR INCREMENT: ',F7.2,
     &         ' DEGREES,      X DIMENSION:',I5)
        
88      CALL RDPRM(WINK,NOT_USED,
     &       'NEW ANGULAR INCREMENT OR <CR>')

        IF (WINK .NE. 0) THEN
          AINC    = WINK
          POINTS  = 360.0 / AINC
          IPOINTS = POINTS
          WRITE(NOUT,100) AINC,IPOINTS
          GOTO 88
        ENDIF           

        IRAD   = RAD
        IRADI  = RADI
        AINC   = PI * (AINC / 180.0)
        NXP    = POINTS                 

        IF (NXP > NBUFSIZ) THEN
C          TOO MANY POINTS FOR BUF ARRAY SIZE
           WRITE(NOUT,*) ' *** ONLY: ',NBUFSIZ,' POINTS ALLOWED'
           GOTO 88
        ENDIF

        IFORM = 1
        MAXIM = 0
        CALL OPFILEC(0,.FALSE.,FLN1,LUN2,'U',IFORM,NXP,NY,1,
     &                 MAXIM,' ',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

10      CALL RDPRMI(IRX,IRY,NOT_USED,
     &              'COLUMNS FOR XCENTER & ZCENTER')   
        NOPEN = 0       
        NKEY  = 1
        NREG  = 1
        I     = 1
        CALL FILERD(DOCF1,NLETD,DATEXC,'DOCUMENT',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        CALL UNSDAL(DOCF1,NOPEN,LUN3,I,PLIST,NREG,
     &     DBUF,MAXKEY,MAXREG,NKEY,LERR)
        IF (LERR .NE. 0) GOTO 998

C     GO THROUGH THE VOLUME
      DO  LAUF=1,NY
        XCENTER = DBUF(IRX+1,LAUF,1)
        YCENTER = DBUF(IRY+1,LAUF,1)
        WRITE(NOUT,102) LAUF,XCENTER,YCENTER
102     FORMAT('  SLICE #:',I4,'  CENTER AT: (',F7.2,',',F7.2,')')

C       READ IN SLICE (PERPENDICULAR TO Y)
        DO I = 1,NZ
          N0 = (I-1) * NY + LAUF
          CALL REDLIN(LUN1,BUF,NX,N0)
          DO  K=1,NX
            A(K,I) = BUF(K)
          ENDDO
        ENDDO

C       SLICE IS THERE, NOW  DO THE REAL WORK          
C       LOOP ALONG PHI
        DO  I=1,IPOINTS
          SUM = 0.0
          IF (MITO .OR. DIST) SUM = FMIN

          PHI = PHI0 + I * AINC
          CP  = COS(PHI)
          SP  = SIN(PHI)

          DO  K=IRADI,IRAD
            RAD = K
            X   = RAD * CP + XCENTER
            Y   = RAD * SP + YCENTER

            IF (X >= 1 .AND. X <  NX .AND.
     &          Y >= 1 .AND. Y <  NZ) THEN
C             PIXEL IS WITHIN SLICE
              IX  = INT(X)
              IY  = INT(Y)


              DX  = X - IX
              DY  = Y - IY
              DDX = 1 - DX
              DDY = 1 - DY
              IF (MITO) THEN
C                MODIFED MAXIMUM PROJECTION 
                 SUM = MAX(A(IX,IY), SUM)
 
              ELSEIF (DIST) THEN
C                DISTANCE FROM CENTER OF PROJECTION 
                 IF (A(IX,IY) > 0.0) THEN
C                   HAVE A POSITIVE PIXEL, FIND DISTANCE FROM CENTER
                    SUM = RAD 
                 ENDIF
 
              ELSE
                 B1  = A(IX,IY)   * DDX + A(IX+1,IY)   * DX
                 B2  = A(IX,IY+1) * DDX + A(IX+1,IY+1) * DX
                 W   = B2 * DY + B1 * DDY
                 SUM = SUM + W
              ENDIF
            ENDIF
	  ENDDO

          BUF(I) = SUM
	ENDDO
     
        CALL WRTLIN(LUN2,BUF,NXP,LAUF)
      ENDDO

998   CLOSE(LUN2)
999   CLOSE(LUN1)
      IF (ALLOCATED(BUF))  DEALLOCATE(BUF)
      IF (ALLOCATED(A))    DEALLOCATE(A)

      END

@


1.22
log
@integer bug
@
text
@d14 1
a14 1
C=* Email: spider@@wadsworth.org                                        *
@


1.21
log
@long time bug fixed,  nsam, <, allocate
@
text
@d7 1
a7 1
C
d12 1
a12 1
C=* Copyright 1985-2016  Health Research Inc.,                         *
d73 1
a73 1
        INTEGER               :: DX,DY,DDX,DDY,B1,B2,W
d96 1
a96 1
        PHI0 =0
d132 1
a132 1
     &       'NEW ANGULAR INCREMENT OR <RET>')
d177 1
a177 1
102     FORMAT('  SLICE # ',I3,'  CENTER AT: (',F7.2,',',F7.2,')')
d181 1
a181 1
          N0 = (I-1)*NY+LAUF
d200 2
a201 2
            X   = RAD*CP+XCENTER
            Y   = RAD*SP+YCENTER
d210 4
a213 4
              DX  = X-IX
              DY  = Y-IY
              DDX = 1-DX
              DDY = 1-DY
d226 4
a229 4
                 B1  = A(IX,IY)  *DDX+A(IX+1,IY)  *DX
                 B2  = A(IX,IY+1)*DDX+A(IX+1,IY+1)*DX
                 W   = B2*DY+B1*DDY
                 SUM = SUM+W
@


1.20
log
@formatting of output
@
text
@d4 3
a6 2
C MRCP.F                    FILENAMES LENGTHENED JAN 89 ARDEAN LEITH
C                           USED OPFILE NOV 00 ARDEAN LEITH
d12 1
a12 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d30 1
a30 1
C  MRCP(NSAM,NROW,NSLICE,LUN1,LUN2,LUN3,A,BUF,MAXSAM)
d32 3
a34 3
C  PARAMETERS:     NSAM        COLUMNS
C                  NROW        ROWS
C                  NSLICE      SLICES
a39 1
C                  MAXSAM      MAX LENGTH OF BUF ARRAY (SINCE A FOLLOWS IT)
d45 1
a45 1
        SUBROUTINE MRCP(NSAM,NROW,NSLICE,LUN1,LUN2,LUN3,BUF,A,MAXSAM)
d47 1
a47 2
        PARAMETER (MAXREG=7)
        PARAMETER (MAXKEY=1000)
a50 2
       
C       WARNING BUF AND A ARE IN UNLABELED COMMON IN VTIL2
d52 1
a52 3
        CHARACTER(LEN=MAXNAM)   ::   FLN1,DOCF1
        COMMON /COMMUN/  FLN1,DOCF1
        COMMON /DOC_BUF/ DBUF(MAXREG,MAXKEY,2)
d54 3
a56 3
        CHARACTER *1  NULL
        DIMENSION     PLIST(6),A(NSAM,NSLICE),BUF(MAXSAM)
        LOGICAL       MITO,DIST
d58 1
a58 1
        DATA PI/3.14159/
d60 32
a91 1
        NULL = CHAR(0)
d94 8
a101 1
        IF (IRTFLG .NE. 0) GOTO 999
d103 2
a104 2
        CALL RDPRM(PHI0,NOT_USED,'STARTING ANGLE (0 = 3 OCLOCK)')
        PHI0    = PI * (PHI0 / 180.0)
d106 2
a107 1
        CALL RDPRM2(RADI,RAD,NOT_USED,'INNER, OUTER RADIUS')
d111 1
a111 1
        IF (RADI .LT. 0.0) THEN
d117 1
a117 1
        IF (RAD .LT. 0.0) THEN
d130 3
a132 2

88      CALL RDPRM(WINK,NOT_USED,'NEW ANGULAR INCREMENT OR <RET>')
d145 1
a145 1
        NSAMP  = POINTS                 
d147 1
a147 1
        IF (NSAMP .GT. MAXSAM) THEN
d149 1
a149 1
           WRITE(NOUT,*) ' *** ONLY: ',MAXSAM,' POINTS ALLOWED'
d155 1
a155 1
        CALL OPFILEC(0,.FALSE.,FLN1,LUN2,'U',IFORM,NSAMP,NROW,1,
d173 1
a173 1
      DO  LAUF=1,NROW
d180 4
a183 4
        DO I = 1,NSLICE
          N0 = (I-1)*NROW+LAUF
          CALL REDLIN(LUN1,BUF,NSAM,N0)
          DO  K=1,NSAM
d203 2
a204 2
            IF (X.GE.1 .AND. X.LT.NSAM .AND.
     &          Y.GE.1 .AND. Y.LT.NSLICE) THEN
d220 1
a220 1
                 IF (A(IX,IY) .GT. 0.0) THEN
d237 1
a237 1
        CALL WRTLIN(LUN2,BUF,NSAMP,LAUF)
d242 2
a244 1
      RETURN
@


1.19
log
@GPL_2010
@
text
@d94 1
a94 1
100     FORMAT(' ANGULAR INCREMENT: ',F7.2,
d142 1
a142 1
102     FORMAT(' SLICE # ',I3,'  CENTER AT: (',F7.2,',',F7.2,')')
@


1.18
log
@GPL License fixed
@
text
@a7 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d9 5
a13 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d15 1
a15 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.17
log
@HRI GPL License used
@
text
@a7 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d11 1
a11 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a30 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
a31 1
C **************************************************************************
@


1.16
log
@*** empty log message ***
@
text
@d7 1
d9 1
d11 24
d41 1
@


1.15
log
@opfilec
@
text
@d118 2
a119 4
        CALL FILERD(DOCF1,NLETD,NULL,'DOCUMENT',IRTFLG)
        IF (IRTFLG .LT. 0) GOTO 10

        CALL FILCAN(DOCF1,NLETD,NULL,NULL,DOCF1,DATEXC,IER)
@


1.14
log
@nloop,iloop_removed
@
text
@d35 1
a35 1
       PARAMETER (MAXREG=7)
d39 1
d43 1
a46 1
        CHARACTER *81 FLN1,DOCF1
d108 1
a108 1
        CALL OPFILE(.FALSE.,FLN1,LUN2,'U',IFORM,NSAMP,NROW,1,
@


1.13
log
@used opfile
@
text
@d57 1
a57 1
        CALL RDPRM(PHI0,NLOOP,ILOOP,'STARTING ANGLE (0 = 3 OCLOCK)')
d60 1
a60 1
        CALL RDPRM2(RADI,RAD,NLOOP,ILOOP,'INNER, OUTER RADIUS')
d84 1
a84 1
88      CALL RDPRM(WINK,NLOOP,ILOOP,'NEW ANGULAR INCREMENT OR <RET>')
d111 1
a111 1
10      CALL RDPRMI(IRX,IRY,NLOOP,ILOOP,
@


1.12
log
@a
@
text
@d4 2
a5 1
C MRCP.FOR                   FILENAMES LENGTHENED JAN 89 al
d35 1
a35 3
 

        PARAMETER (MAXREG=7)
d105 5
a109 3
        IFORM = 1      
        CALL OPENF(FLN1,LUN2,NSAMP,NROW,'UNKNOWN',NF1,1)
        IF (NF1 .EQ. 1) RETURN
d123 1
a123 1
     1     DBUF,MAXKEY,MAXREG,NKEY,LERR)
@


1.11
log
@CNO_SAVE
@
text
@d34 1
a34 1
CNO_SAVE 
@


1.10
log
@*** empty log message ***
@
text
@d32 3
a34 1
      SUBROUTINE MRCP(NSAM,NROW,NSLICE,LUN1,LUN2,LUN3,BUF,A,MAXSAM)
@


1.9
log
@points used as integer not float changed
@
text
@d124 1
a124 1
      DO 2 LAUF=1,NROW
d141 1
a141 1
        DO 5 I=1,IPOINTS
d149 1
a149 1
          DO 6 K=IRADI,IRAD
d183 1
a183 1
6         CONTINUE
d186 1
a186 1
5       CONTINUE 
d189 1
a189 1
2     CONTINUE                                        
@


1.8
log
@added distance projecor
@
text
@d86 4
a89 3
          AINC   = WINK
          POINTS = 360.0 / AINC
          WRITE(NOUT,100) AINC,POINTS
d93 4
a96 5
        IPOINTS = POINTS
        IRAD    = RAD
        IRADI   = RADI
        AINC    = PI * (AINC / 180.0)
        NSAMP   = POINTS                 
@


1.7
log
@fixed max projection, improved prompts
@
text
@d47 1
a47 1
        LOGICAL       MITO
d62 1
d66 2
a67 1
           WRITE(NOUT,*) ' NEGATIVE RADIUS --> MODIFED MAX. PROJ.'
d69 6
d80 2
a81 2
100     FORMAT(' ANGULAR INCREMENT ',F7.2,
     &         ' DEGREES      X DIMENSION',I5)
d143 1
a143 1
          IF (MITO) SUM = FMIN
d154 3
a156 1
            IF (X.GE.1.AND.X.LT.NSAM.AND.Y.GE.1.AND.Y.LT.NSLICE) THEN
d167 9
a175 1
                 SUM = MAX(A(IX,IY), SUM) 
@


1.6
log
@changed max proj to non-interpolated
@
text
@a36 1
#ifdef SP_UNIX
a37 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d56 1
a56 1
        CALL RDPRM(PHI0,NLOOP,ILOOP,'STARTING ANGLE')
d72 2
a73 1
100     FORMAT(' ANGULAR INCREMENT ',F7.2,' --> TO ',I5,' POINTS')
d81 1
d92 1
a92 1
           WRITE(NOUT,*) ' *** ONLY ',MAXSAM,' POINTS ALLOWED'
d101 1
a101 1
     &              'COLUMN #s FOR XCENTER & ZCENTER')   
d135 2
d156 2
a157 9
C                MODIFED MAXIMUM PROJECTION
                 SUM = MAX(SUM,MAX(A(IX,IY),0.0)) 
c                 IF (LAUF .EQ. 1 .AND. K .EQ. IRAD) THEN
c                    WRITE(NOUT,*) I, X, Y,MAX(A(IX,IY),0.0), SUM 
c                  ENDIF
c                 B1 = MAX(A(IX,IY),  0.0)*DDX+MAX(A(IX+1,IY),  0.0)* DX
c                 B2 = MAX(A(IX,IY+1),0.0)*DDX+MAX(A(IX+1,IY+1),0.0)* DX
c                 W  = B2*DY+B1*DDY
c                 SUM= MAX(SUM,W)  
@


1.5
log
@added max proj. capability
@
text
@d61 1
a62 1

d89 1
a89 1
        AINC    = AINC / 180.0 * PI
d149 2
d156 9
a164 5
C                MODIFED MAXIMUM PROJECTION 
                 B1 = MAX(A(IX,IY),  0.0)*DDX+MAX(A(IX+1,IY),  0.0)* DX
                 B2 = MAX(A(IX,IY+1),0.0)*DDX+MAX(A(IX+1,IY+1),0.0)* DX
                 W  = B2*DY+B1*DDY
                 SUM= MAX(SUM,W)  
@


1.4
log
@cosmetic
fixed format for angle output
@
text
@d51 1
d62 1
d65 7
d125 1
a125 1
        DO 3 I = 1,NSLICE
d128 1
a128 1
          DO 4 K=1,NSAM
d130 2
a131 2
4         CONTINUE
3       CONTINUE
d145 2
a146 2
            W=0.
            IF(X.GE.1.AND.X.LE.NSAM.AND.Y.GE.1.AND.Y.LE.NSLICE) THEN
d153 12
a164 3
              B1  = A(IX,IY)*DDX+A(IX+1,IY)*DX
              B2  = A(IX,IY+1)*DDX+A(IX+1,IY+1)*DX
              W   = B2*DY+B1*DDY
a165 1
            SUM = SUM+W
@


1.3
log
@cosmetic and set iform
@
text
@d2 1
a2 1
C++*************************************************************************
d30 1
a30 1
C--*******************************************************************
d59 1
a59 1
        CALL RDPRM(PHI0,NLOOP,ILOOP,'START ANGLE')
d61 1
a61 1
        CALL RDPRM2(RADI,RAD,NLOOP,ILOOP,'INNER,OUTER RADIUS')
d63 1
a63 1
        POINTS  = 2*PI*RAD
d67 1
a67 1
100     FORMAT(' ANGULAR INCREMENT ',I5,'  --> TO ',I5,' POINTS')
d73 1
a73 1
          POINTS = 360./AINC
d80 1
a80 1
        AINC    = AINC/180.*PI
d127 2
a128 2
          SUM = 0.
          PHI = PHI0+I*AINC
@


1.2
log
@cpp_lines_added
@
text
@d4 1
a4 2
C $$ MRCYLPROJ.FOR                         
C                            FILENAMES LENGTHENED JAN 89 al
d16 1
a16 1
C  $$ MRCP(NSAM,NROW,NSLICE,LUN1,LUN2,LUN3,A,BUF,MAXSAM)
d50 1
a51 2
        DIMENSION PLIST(6),A(NSAM,NSLICE),BUF(MAXSAM)

a52 1
        NULL=CHAR(0)
d54 2
d59 1
a59 7
        CALL RDPRM(PHI0,NLOOP,ILOOP,'START ANGLE$')
        CALL RDPRM2(RADI,RAD,NLOOP,ILOOP,'INNER,OUTER RADIUS$')
        POINTS = 2*PI*RAD
        AINC   = (360./POINTS)                      
        WRITE(NOUT,100) AINC,POINTS
100     FORMAT(1H ,'ANGULAR INCREMENT ',F7.2,2X,'CORRESP. TO ',  
     $  F7.0,' POINTS')
d61 10
a70 1
88      CALL RDPRM(WINK,NLOOP,ILOOP,'NEW ANGULAR INCREMENT OR <RET>$')
d88 2
a89 1
      
d91 4
a94 2
        CALL RDPRMI(IRX,IRY,NLOOP,ILOOP,
     $  'COLUMN #s FOR XCENTER,ZCENTER$')   
d100 2
d150 1
d152 2
a153 1
5       CONTINUE      
d157 3
a159 2
998   CLOSE (LUN2)
999   CLOSE (LUN1)
@


1.1
log
@Initial revision
@
text
@d38 3
d42 1
@
