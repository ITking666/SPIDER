head	1.25;
access;
symbols
	pre_getangas:1.25
	GPL2010:1.25
	pre_GPL2010:1.24
	pre_var_equation:1.23
	pre_fftwrings:1.23
	pre_opfiles:1.23
	src:1.23
	best-code:1.23
	x-named-regs:1.23
	x:1.23
	v13-00:1.23
	pre_GPL:1.22
	prec_CA:1.22
	noindx:1.20
	Bproc:1.20
	oct21:1.19
	last77:1.18;
locks; strict;
comment	@c @;


1.25
date	2010.06.24.13.27.10;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2009.07.30.11.41.45;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2005.10.17.21.03.59;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2003.01.28.21.42.28;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2003.01.28.21.10.43;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2000.04.12.18.46.01;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	99.09.08.16.58.39;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	99.03.16.20.03.10;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	99.02.11.19.04.21;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	99.02.11.15.56.57;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	99.02.05.16.35.23;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	98.08.04.18.29.43;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	98.01.16.18.59.33;	author liy;	state Exp;
branches;
next	1.12;

1.12
date	97.12.24.15.05.10;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	97.12.23.19.09.08;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	97.12.12.17.40.46;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	97.10.31.22.06.02;	author liy;	state Exp;
branches;
next	1.8;

1.8
date	97.10.31.20.13.08;	author hedget;	state Exp;
branches;
next	1.7;

1.7
date	97.10.22.18.45.47;	author liy;	state Exp;
branches;
next	1.6;

1.6
date	97.07.16.13.50.00;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	97.07.09.19.35.30;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	97.04.04.16.58.24;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	96.09.27.20.43.02;	author liy;	state Exp;
branches;
next	1.2;

1.2
date	94.08.29.19.14.37;	author mladjadj;	state Exp;
branches
	1.2.1.1;
next	1.1;

1.1
date	94.05.13.14.12.13;	author leith;	state Exp;
branches;
next	;

1.2.1.1
date	96.10.03.19.28.32;	author liy;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.25
log
@GPL_2010
@
text
@
C++*********************************************************************
C
C UNIXTOUNIX8.F  WRITTEN                             JUL 93 ARDEAN LEITH
C                REWRITTEN                           FEB 99 ARDEAN LEITH
C                NATIVE BYTE_ORDER                   JUL 09 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    UNIXTOUNIX8(LUNO,LUNN,NMIN,NMAX,FMINT,FMAXT,
C               NSAM,NROW,NSLICE,NORMAL,IPAD,IRTFLG)
C
C    PURPOSE:       CONVERT A UNIX 32 BIT IMAGE FILE TO 8 BIT RAW
C
C    PARAMETERS:
C        LUNO       INPUT IO UNIT                                 (SENT)
C        LUNN       OUTPUT IO UNIT                                (SENT)
C        NMIN,NMAX  NORMALIZATION INTERVAL (USUALLY 0..255)       (SENT)
C        FMIN,FMAX  IMAGE RANGE                                   (SENT)
C        NORMAL     LOGICAL VARIABLE FOR NORMALIZATION WANTED     (SENT)
C        IPAD       PADDING AMT                                   (SENT)
C        IRTFLG     ERROR RETURN FLAG. (0 IS NORMAL)              (RET.)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

	SUBROUTINE UNIXTOUNIX8(LUNO,LUNN,NMIN,NMAX,FMINT,FMAXT,
     &             NSAM,NROW,NSLICE,NORMAL,IPAD,IRTFLG)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'
        COMMON /IOBUF/ BUFO(NBUFSIZ)

        INTEGER   * 1  :: LBUF
        INTEGER * 2    :: I2VAL
	LOGICAL        :: NORMAL

        IRTFLG = 1

        IF (NORMAL) THEN
           FN    = (NMAX - NMIN) / (FMAXT - FMINT)
           FNCON = NMIN - FN * FMINT

        ELSEIF (FMAXT .GT. 255) THEN
C          CAN NOT USE THIS FOR 8 BIT OUTPUT
           WRITE(NOUT,*) ' FMAXT:',FMAXT,
     &              'TOO LARGE FOR 8 BIT UN-NORMALIZED OUTPUT'
           CALL ERRT(100,'UNIXTOUNIX8',IDUM)
           RETURN

        ELSEIF (FMINT .LT. 0) THEN
C          CAN NOT USE THIS FOR 8 BIT OUTPUT
           WRITE(NOUT,*) ' FMINT:',FMINT,
     &              'TOO SMALL FOR 8 BIT UN-NORMALIZED OUTPUT'
           CALL ERRT(100,'UNIXTOUNIX8',IDUM)
           RETURN
        ELSE
           FN    = 1.0
           FNCON = 0.0
        ENDIF
  
        IRECOUT = 0
        DO  I = 1,NROW*NSLICE
C          READ EACH RECORD OF 32 BIT UNIX SPIDER INPUT FILE   
           CALL REDLIN(LUNO,BUFO,NSAM,I)

C          CONVERT FLOATING POINT NUMBERS TO -128...127 LOGICAL *1
           DO J=1,NSAM
	     I2VAL         = BUFO(J) * FN + FNCON
             IRECOUT       = IRECOUT + 1
	     LBUF          = I2VAL
             WRITE(LUNN,90,REC=IRECOUT,IOSTAT=IRTFLGT) LBUF
90           FORMAT(A1)
             IF (IRTFLGT .NE. 0) THEN
                WRITE(NOUT,*) '*** ERROR WRITING PIXEL:',IRECOUT
                CALL ERRT(101,'UNIXTOUNIX8',IDUM)
                RETURN
             ENDIF

           ENDDO

           IF (IPAD .GT. 0) THEN
C            ADD PADDING AFTER EACH LINE
             DO L = 1,IPAD
                LBUF    = 0
                IRECOUT = IRECOUT + 1
                WRITE(LUNN,90,REC=IRECOUT,IOSTAT=IRTFLGT) LBUF
                WRITE(LUNN,REC=IRECOUT,IOSTAT=IRTFLGT) LBUF
                IF (IRTFLGT .NE. 0) THEN
                   WRITE(NOUT,*) '*** ERROR WRITING PIXEL:',IRECOUT
                   CALL ERRT(101,'UNIXTOUNIX8',IDUM)
                   RETURN
                ENDIF
             ENDDO
           ENDIF   
        ENDDO 

        WRITE(NOUT,93) IRECOUT
93      FORMAT(' RAW IMAGE SIZE:', I10,' BYTES'/)

        IRTFLG = 0

        RETURN
	END
 

c***************************
c           it1 = lval1
c           it2 = lval2
c           write(6,*) 'i2val,j,bufo(j):',i2val,j,bufo(j),it1,it2
c           iend = iend + 1
c           if (iend .gt. 20) stop
c******************************
 
@


1.24
log
@for big-endian default
@
text
@a8 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d10 5
a14 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d16 1
a16 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.23
log
@GPL License fixed
@
text
@d4 3
a6 2
C UNIXTOUNIX8.F  -- WRITTEN    JUL 93 ARDEAN LEITH
C                   REWRITTEN  FEB 99 ARDEAN LEITH
d10 1
a10 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d58 3
a60 3
        INTEGER   * 1  LBUF
        INTEGER * 2    I2VAL
	LOGICAL        NORMAL
a95 1
#if defined (__osf__) || defined (SP_NT) || defined (__linux__)
a97 3
#else
             WRITE(LUNN,REC=IRECOUT,IOSTAT=IRTFLGT) LBUF
#endif
a110 1
#if defined (__osf__) || defined (SP_NT) || defined (__linux__)
a111 3
#else
                WRITE(LUNN,REC=IRECOUT,IOSTAT=IRTFLGT) LBUF
#endif
@


1.22
log
@*** empty log message ***
@
text
@d2 1
a2 1
C++************************************************************************
d8 23
a30 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.21
log
@SP_LINUX --> __linux__
@
text
@d97 1
a97 1
#if defined (__osf__) || defined (SP_NT)
@


1.20
log
@SP_LINUX
@
text
@d78 1
a78 1
#if defined (__osf__) || defined (SP_NT) || defined (SP_LINUX)
@


1.19
log
@CMLIMIT.INC
@
text
@d78 1
a78 1
#if defined (__osf__) || defined (SP_NT)
@


1.18
log
@byte on dec f90
@
text
@d37 1
a37 2

        PARAMETER      (NBUFSIZ = 17008)
@


1.17
log
@bad format line
@
text
@d7 8
a14 8
C **************************************************************************
C *  COPYRIGHT (C)1993, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d16 2
a17 1
C    UNIXTOUNIX8(FILOLD,FILNEW,LUNO,LUNN,NMIN NMAX,NORMAL,IRTFLG)
d22 7
a28 6
C        LUNO       INPUT IO UNIT 
C        LUNN       OUTPUT IO UNIT
C        NMIN,NMAX  NORMALIZATION INTERVAL (USUALLY 0..255)
C        NORMAL     LOGICAL VARIABLE FOR NORMALIZATION WANTED
C        IPAD       PADDING AMT
C        IRTFLG     ERROR RETURN FLAG. (0 IS NORMAL)
a29 1
C        0         2         3         4         5         6         7     
a35 1
CNO_SAVE
d79 4
d84 1
a84 1

d98 5
@


1.16
log
@rewritten for f90
@
text
@d105 1
a105 1
93      FORMAT(' RAW IMAGE SIZE: I10,' BYTES'/)
@


1.15
log
@removed vms stuff
@
text
@a1 1

d4 2
a5 3
C UNIXTOUNIX8.F  -- JUL 93 al
C
C 	Modified for F90   --- yl 	10/22/97
d16 1
a16 1
C    UNIXTOUNIX8(FILOLD,FILNEW,LUNO,LUNN,NMIN NMAX,HEADER,NORMAL,IRTFLG)
d18 1
a18 1
C    PURPOSE:       TO CONVERT A UNIX 32 BIT IMAGE FILE TO 8 BIT SPIDER
d21 3
a23 6
C        FILOLD     EXISTING FILE NAME 
C        FILNEW     UNIX  8 BIT SPIDER FILE NAME 
C        LUNO       LOGICAL UNIT NUMBER TO BE ASSIGNED TO FILOLD.
C        LUNN       LOGICAL UNIT NUMBER TO BE ASSIGNED TO FILNEW
C        NMIN,NMAX  NORMAIZATION INTERVAL (USUALLY 0..255)
C        HEADER     LOGICAL VARIABLE FOR HEADER WANTED
d25 1
a25 1
C        ASKPAD     LOGICAL VARIABLE TO ASK FOR PADDING
d32 2
a33 2
	SUBROUTINE UNIXTOUNIX8(FILOLD,FILNEW,LUNO,LUNN,NMIN,NMAX,
     &             NSAM,NROW,NSLICE,HEADER,NORMAL,ASKPAD,IRTFLG)
d38 2
a39 43
        COMMON /LUNARA/ LUNARA(100),LASLAB

        REAL             BUFO(32000)
        INTEGER*1        BBUFO(128000)
        EQUIVALENCE      (BUFO,BBUFO)

        INTEGER*1        LBUF(1024)
	COMMON           LBUF,BUFO

        CHARACTER *(*)   FILOLD,FILNEW
        CHARACTER *81    FILN
        CHARACTER * 1    NULL,ANS
	LOGICAL          HEADER,NORMAL,ASKNAM,ASKPAD
        INTEGER   * 2    I2VAL

        NULL   = CHAR(0)

        IF ((FILOLD .EQ. NULL) .OR.
     &      (NSAM .EQ. 0 .AND. NROW .EQ. 0 .AND.NSLICE .EQ. 0)) THEN
           ASKNAM = (FILOLD .EQ. NULL)

C         OPEN 32 BIT UNIX SPIDER INPUT FILE
10        CALL OPFIL(ASKNAM,FILOLD,LUNO,'O',NSAM,NROW,NSLICE,IFORM,
     &             'ENTER UNIX SPIDER INPUT',.FALSE.,IRTFLG)
          IF (IRTFLG .NE. 0) RETURN
	ENDIF

        IF (IFORM .NE. 1 .AND. IFORM .NE. 3) THEN
          WRITE(NOUT,*)
     &         'WARNING: CONVERTER NOT TESTED FOR THIS FORMAT:',IFORM
        ENDIF

        IF (IMAMI .EQ. 0) THEN
C          MUST NORMALIZE INPUT IMAGE FIRST
           CALL NORM3(LUNO,NSAM,NROW,NSLICE,FMAX,FMIN,AV)
        ENDIF
        
C       GET SPIDER HEADER FROM INPUT FILE
        CALL REDHED(LUNO,BUFO,32000,NSAM,0,IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(101,'CAN NOT READ HEADER',NE)
           RETURN
        ENDIF
d41 3
a43 2
C       SET NEW IFORM FOR 8 BIT UNIX      
        BUFO(5) = 8
d45 1
a45 13
        IPAD = 0
20      IF (ASKPAD) THEN
           NSAMRE  = MOD(NSAM,4)
           CALL RDPRMC(ANS,NC,.TRUE.,
     &        'PAD TO INCREMENT OF 4 IF NECESSARY? (N/Y)',NULL,IRTFLG)
           IF (IRTFLG .EQ. -1) GOTO 10

           IF ((NSAMRE .NE. 0) .AND. (ANS .EQ. 'Y' .OR. ANS .EQ. 'y'))
     &        THEN
C             WANT TO PAD
              IPAD = 4 - NSAMRE
           ENDIF
        ENDIF
d48 2
a49 2
           FN    = (NMAX - NMIN) / (FMAX - FMIN)
           FNCON = NMIN - FN * FMIN
d51 1
a51 1
        ELSEIF (FMAX .GT. 255) THEN
d53 1
a53 1
           WRITE(NOUT,*) ' FMAX:',FMAX,
d55 8
a62 1
           IRTFLG = 1
d69 1
a69 77
C       SET NEW MIN & MAX
        BUFO(8)  = NMIN
        BUFO(7)  = NMAX
        BUFO(9)  = BUFO(9)  * FN + FNCON
        BUFO(10) = BUFO(10) * FN + FNCON
        BUFO(11) = 0.0

C       FIND NUMBER OF RECORDS IN THE LABEL
        LENBYT  = NSAM
        LABRECS = 1024 / LENBYT
        IF (MOD(1024,NSAM) .NE. 0) LABRECS = LABRECS + 1

C       FIND TOTAL NUMBER OF BYTES IN UNIX FILE LABEL
        LENBYT   = NSAM
        LABBYT   = LABRECS * LENBYT
        BUFO(22) = LABBYT
        BUFO(13) = LABRECS 
        BUFO(23) = LENBYT
 
        IF (FILNEW .EQ. NULL) THEN 
C         FILNEW NOT SENT FROM CALLER             
          CALL FILERD(FILNEW,NLET,NULL,'ENTER 8 BIT OUTPUT',IRTFLG)
          IF (IRTFLG .EQ. -1 .AND. ASKPAD) GOTO 20
          IF (IRTFLG .NE. 0) RETURN
        ENDIF
        CALL FILCAN(FILN,NLET,NULL,NULL,FILNEW,DATEXC,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
   
    
C       OPEN NEW 8 BIT OUTPUT FILE

C       FOLLOWING WORKS ON SGI BUT NOT SUPPORTED ON DEC UNIX FOR F77
C       OPEN(LUNN,FILE=FILN,ACCESS='SEQUENTIAL',IOSTAT=IER,
C    &      STATUS='UNKNOWN',FORM='SYSTEM')

#ifdef SP_F90
C	CHANGE THE OPEN COMMAND FOR F90
        OPEN(LUNN,FILE=FILN,ACCESS='SEQUENTIAL',IOSTAT=IER,
     &      STATUS='UNKNOWN',FORM='FORMATTED')
#else
C       FOLLOWING WORKS OK ON SGI F77 BUT NOT ON SGI F90
        OPEN(LUNN,FILE=FILN,ACCESS='DIRECT',IOSTAT=IER,
     &      RECL=1,STATUS='UNKNOWN',FORM='UNFORMATTED')
#endif
        IF (IER .NE. 0) THEN
           WRITE(NOUT,900) FILNEW
900        FORMAT(' *** ERROR OPENING: ',A)
           IRTFLG = 1
           RETURN
        ENDIF

        IF (.NOT. HEADER) THEN
C          SKIP HEADER IN NEW FILE (FOR USE WITH PIXAR, ETC)
           LABBYT       = 0
        ELSE
C          PUT A SPIDER HEADER IN THE NEW FILE
           IF (LABBYT .GT. 1024) THEN
C             FILL HEADER PAD WITH ZEROS
              DO I = 1025,LABBYT
                 BBUFO(I) = 0
              ENDDO
           ENDIF
    
C          PLACE HEADER IN NEW 8 BIT UNIX FILE
	   DO I1 = 1, LABBYT
#ifdef SP_F90
              CALL WRTLIN8(LUNN,BUFO(I1),1,I1)
#else
              CALL WRTSEQ8(LUNN,BUFO(I1),1,IRTFLG)
#endif
	   ENDDO
        ENDIF

#ifdef SP_F90
        LUNARA(LUN) = LABBYT
#endif
        K      = 0
d76 11
a86 8
	     I2VAL   = BUFO(J) * FN + FNCON
	     LBUF(1) = I2VAL
#ifdef SP_F90
             CALL WRTLIN8(LUNN,LBUF(1),1,I*NSAM+J)
#else
	     CALL WRTSEQ8(LUNN,LBUF(1),1,IRTFLG)
#endif
	     IF (IRTFLG .NE. 0) RETURN
d92 8
a99 3
                LBUF(1) = 0
                CALL WRTSEQ8(LUNN,LBUF(1),1,IRTFLG)
                IF (IRTFLG .NE. 0) RETURN
d104 2
a105 24
        WRITE(NOUT,*) ' '
        NCHAR1 = lnblnk(FILN)
        WRITE(NOUT,*) FILN(1:NCHAR1)

        IF (NSLICE .GT. 1 .AND. HEADER) THEN
          WRITE(NOUT,90) NSAM,NROW,NSLICE,LABBYT
90        FORMAT(' SPIDER 8 BIT IMAGE SIZE: (',I5,',',I5,',',I5,
     &           ')  LABEL BYTES:',I6,/)

        ELSEIF (HEADER) THEN
          WRITE(NOUT,91) NSAM,NROW,LABBYT
91        FORMAT(' SPIDER 8 BIT IMAGE SIZE: (',I5,',',I5,
     &           ')  LABEL BYTES:',I6,/)

        ELSEIF (NSLICE .GT. 1) THEN
          WRITE(NOUT,92) NSAM,NROW,NSLICE,LABBYT
92        FORMAT(' RAW IMAGE SIZE: (',I5,',',I5,',',I5,
     &           ')  LABEL BYTES:',I6,/)

        ELSE
          WRITE(NOUT,93) NSAM,NROW,LABBYT
93        FORMAT(' RAW IMAGE SIZE: (',I5,',',I5,')  LABEL BYTES:',I6,/)

        ENDIF
a106 3
C       SET FLAG FOR NORMAL RETURN
        NSAMC  = NSAM
        NROWC  = NROW
@


1.14
log
@*** empty log message ***
@
text
@d1 1
a1 17
 
 
#ifdef SP_VMS 
 
C   THIS ROUTINE SPECIFIC TO UNIX SPIDER AND IS NOT 
C       USED AT VAX SITES
 
       SUBROUTINE unixtounix8
 
       COMMON /UNITS/LUNC,NIN,NOUT
 
       WRITE(NOUT,*) 'DUMMY CALL: unixtounix8'
       RETURN
       END
 
#else
 
a254 1
#endif
@


1.13
log
@brought back the one for f90
@
text
@d59 2
d164 1
a164 1
C       OPEN NEW 8 BIT SEQUENTIAL OUTPUT FILE
d166 1
a166 1
C       FOLLOWING WORKS ON SGI BUT NOT SUPPORTED ON DEC UNIX
d169 2
d172 4
a175 2
C        OPEN(LUNN,FILE=FILN,ACCESS='SEQUENTIAL',IOSTAT=IER,
C     &      STATUS='UNKNOWN',FORM='FORMATTED',CARRIAGECONTROL='NONE')
d178 1
a178 1

d200 3
d204 1
d208 3
d220 3
d224 1
@


1.12
log
@used old code
@
text
@a16 2
#ifdef SP_F90
C   FAILS ON F90????
a17 9
       SUBROUTINE unixtounix8
 
       COMMON /UNITS/LUNC,NIN,NOUT
 
       WRITE(NOUT,*) 'DUMMY CALL: unixtounix8'
       RETURN
       END
#else 
 
d23 2
d60 1
a60 1
        BYTE             BBUFO(128000)
d63 1
a63 1
        BYTE             LBUF(1024)
d167 5
a171 3

        OPEN(LUNN,FILE=FILN,ACCESS='SEQUENTIAL',IOSTAT=IER,
     &      STATUS='UNKNOWN',FORM='FORMATTED',CARRIAGECONTROL='NONE')
d193 3
a195 1
           CALL WRTSEQ8(LUNN,BUFO,LABBYT,IRTFLG)
d205 4
a208 9
             K       = K + 1
             I2VAL   = BUFO(J) * FN + FNCON
             LBUF(K) = I2VAL
             IF (K .EQ. 1024) THEN
C               BUFFER IS FULL, PUT IT OUT TO FILE
                CALL WRTSEQ8(LUNN,LBUF,K,IRTFLG)
                IF (IRTFLG .NE. 0) RETURN
                K = 0
             ENDIF
d214 3
a216 8
                K       = K + 1
                LBUF(K) = 0
                IF (K .EQ. 1024) THEN
C                  BUFFER IS FULL, PUT IT OUT TO FILE
                   CALL WRTSEQ8(LUNN,LBUF,K,IRTFLG)
                   IF (IRTFLG .NE. 0) RETURN
                   K = 0
                ENDIF
a220 6
        IF (K .GT. 0) THEN
C          BUFFER STILL HAS PIXELS IN IT, PUT THEM OUT TO FILE
           CALL WRTSEQ8(LUNN,LBUF,K,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
        ENDIF

a253 1
#endif
@


1.11
log
@recovered earlier working version
@
text
@a16 1
 
d28 1
d104 1
a104 1
        CALL REDHED(LUNO,BUFO,32000,NSAM,IRTFLG)
@


1.10
log
@added NOSTOP parameter to redhed call
@
text
@d18 11
a33 2
C 	Modified for F90   --- yl 	10/22/97
C
d69 1
a69 1
        INTEGER*1        BBUFO(128000)
d72 1
a72 1
        INTEGER*1        LBUF(1024)
d104 1
a104 1
        CALL REDHED(LUNO,BUFO,32000,NSAM,0,IRTFLG)
d176 3
a178 5
C	CHANGE THE OPEN COMMAND FOR F90
C        OPEN(LUNN,FILE=FILN,ACCESS='SEQUENTIAL',IOSTAT=IER,
C     &      STATUS='UNKNOWN',FORM='FORMATTED',CARRIAGECONTROL='NONE')
        OPEN(LUNN,FILE=FILN,ACCESS='DIRECT',IOSTAT=IER,
     &      RECL=1,STATUS='UNKNOWN',FORM='UNFORMATTED')
d200 1
a200 3
	   DO I1 = 1, LABBYT
              CALL WRTSEQ8(LUNN,BUFO(I1),1,IRTFLG)
	   ENDDO
d210 9
a218 4
	     I2VAL   = BUFO(J) * FN + FNCON
	     LBUF(1) = I2VAL
	     CALL WRTSEQ8(LUNN,LBUF(1),1,IRTFLG)
	     IF (IRTFLG .NE. 0) RETURN
d224 8
a231 3
                LBUF(1) = 0
                CALL WRTSEQ8(LUNN,LBUF(1),1,IRTFLG)
                IF (IRTFLG .NE. 0) RETURN
d236 6
d275 1
@


1.9
log
@new for f90
@
text
@d95 1
a95 1
        CALL REDHED(LUNO,BUFO,32000,NSAM,IRTFLG)
@


1.8
log
@added ifdef SP_F90 inorder to compile
@
text
@d1 2
a2 11
#ifdef SP_F90

       SUBROUTINE unixtounix8

       COMMON /UNITS/LUNC,NIN,NOUT

       WRITE(NOUT,*) 'DUMMY CALL: unixtounix8'
       RETURN
       END
#else

d171 1
a171 1
     &      RECL=1,STATUS='UNKNOWN',FORM='FORMATTED')
d193 3
a195 1
           CALL WRTSEQ8(LUNN,BUFO,LABBYT,IRTFLG)
d205 4
a208 9
             K       = K + 1
             I2VAL   = BUFO(J) * FN + FNCON
             LBUF(K) = I2VAL
             IF (K .EQ. 1024) THEN
C               BUFFER IS FULL, PUT IT OUT TO FILE
                CALL WRTSEQ8(LUNN,LBUF,K,IRTFLG)
                IF (IRTFLG .NE. 0) RETURN
                K = 0
             ENDIF
d214 3
a216 8
                K       = K + 1
                LBUF(K) = 0
                IF (K .EQ. 1024) THEN
C                  BUFFER IS FULL, PUT IT OUT TO FILE
                   CALL WRTSEQ8(LUNN,LBUF,K,IRTFLG)
                   IF (IRTFLG .NE. 0) RETURN
                   K = 0
                ENDIF
a220 6
        IF (K .GT. 0) THEN
C          BUFFER STILL HAS PIXELS IN IT, PUT THEM OUT TO FILE
           CALL WRTSEQ8(LUNN,LBUF,K,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
        ENDIF

a253 2
#endif

@


1.7
log
@Remove CARRIAGECONTROL for F90
@
text
@d1 11
a11 2
 
 
d277 2
@


1.6
log
@CNO_SAVE
@
text
@d23 2
d60 1
a60 1
        BYTE             BBUFO(128000)
d63 1
a63 1
        BYTE             LBUF(1024)
d167 5
a171 3

        OPEN(LUNN,FILE=FILN,ACCESS='SEQUENTIAL',IOSTAT=IER,
     &      STATUS='UNKNOWN',FORM='FORMATTED',CARRIAGECONTROL='NONE')
@


1.5
log
@used sequential file access
@
text
@d54 1
@


1.4
log
@removed equivalences that -O3 optimazation ignored
@
text
@d32 1
a32 2
C    UNIXTOUNIX8(FILOLD,FILNEW,LUNO,LUNN,NMIN NMAX,
C                          HEADER,NORMAL,IRTFLG)
d44 1
a44 1
C
a46 1
C
d56 3
a58 3
        REAL             BUFO(16000)
        LOGICAL   * 1    LBUF(16000)
	COMMON BUFO,LBUF
d60 2
a61 2
        COMMON /LUNARA/ LUNARA(100)
        COMMON /IOERR/IERR
d66 1
a66 1
	LOGICAL          ONEPAD,HEADER,NORMAL,ASKNAM,ASKPAD
d69 1
a69 1
        NULL = CHAR(0)
d71 3
a73 1
        IF (FILOLD .EQ. NULL) THEN
d76 1
a76 1
10        CALL OPFIL(.TRUE.,FILOLD,LUNO,'O',NSAM,NROW,NSLICE,IFORM,
d79 1
d81 4
a84 8
	ELSEIF (NSAM .EQ. 0 .AND. NROW .EQ. 0 .AND.
     &  	NSLICE .EQ. 0) THEN
C	  THE FILE IS NOT OPENED
          CALL OPFIL(.FALSE.,FILOLD,LUNO,'O',NSAM,NROW,NSLICE,IFORM,
     &             'ENTER UNIX SPIDER INPUT',.FALSE.,IRTFLG)
          IF (IRTFLG .NE. 0) RETURN
	  
	ENDIF
d91 4
a94 9
        IF (IFORM .NE. 1 .AND. IFORM .NE. 3) THEN
          WRITE(NOUT,*)
     &         'WARNING: CONVERTER NOT TESTED FOR THIS FORMAT:',IFORM
        ENDIF

        IER = 0 
        CALL REDLIN(LUNO,BUFO,NSAM,1-LUNARA(LUNO))
        IF (IERR .NE. 0) THEN
           CALL ERRT(101,'*** CAN NOT READ HEADER',NE)
d101 1
a101 1
        LENBYT = NSAM
d105 1
a105 1
     &        'PAD TO INCREMENT OF 4 IF NECESSARY? (Y/N)',NULL,IRTFLG)
d108 4
a111 5
           IF (NSAMRE .NE. 0) THEN
              IF (ANS .NE. 'N' .AND. ANS .NE. 'n') THEN
C                WANT TO PAD
                 LENBYT = NSAM + (4 - NSAMRE)
              ENDIF
d138 1
d140 1
a140 1
        IF (MOD(1024,LENBYT) .NE. 0) LABRECS = LABRECS + 1
d143 1
d154 10
a163 6

          CALL FILCAN(FILN,NLET,NULL,NULL,FILNEW,DATEXC,IRTFLG)
          IF (IRTFLG .NE. 0) RETURN
        ELSE
          CALL FILCAN(FILN,NLET,NULL,NULL,FILNEW,DATEXC,IRTFLG)
          IF (IRTFLG .NE. 0) RETURN
d165 2
a166 5
        ENDIF
       
C       OPEN NEW UNIX  FILE
        OPEN(LUNN,FILE=FILN,ACCESS='DIRECT',RECL=1024,IOSTAT=IER,
     &       STATUS='UNKNOWN',FORM='UNFORMATTED')
a176 2
           LUNARA(LUNN) = 0
           LABRECS      = 0
a177 2
           L            = 0
           K            = 0
d179 8
a186 2


d188 1
a188 21
           LUNARA(LUNN) = 1
           CALL WRTLIN(LUNN,BUFO(J),64,0)
  
           L    = 0
           K    = LABBYT - 1024
           ONEPAD = .TRUE.
1213       IF (K .GE. 1024) THEN
C             NEED ANOTHER RECORD FOR HEADER PADDING
              IF (ONEPAD) THEN
C                FILL PADDING PART OF LABEL WITH BLANKS
                 DO  II = 1025,LABBYT
                    LBUF(II) = 0
                 ENDDO
                 ONEPAD = .FALSE.
              ENDIF
               L = L + 1
               CALL WRTLIN8(LUNN,LBUF,1024,L)
               K = K - 1024
               GOTO 1213            
           ENDIF
           WRITE(NOUT,*) ' LABEL RECORDS:',LABRECS
d191 1
a191 5
C       ZERO BUFFER FOR ANY PADDING
        LBUF(NSAM+1) = 0
        LBUF(NSAM+2) = 0
        LBUF(NSAM+3) = 0

a199 7
c***************************
c           it1 = lval1
c           it2 = lval2
c           write(6,*) 'i2val,j,bufo(j):',i2val,j,bufo(j),it1,it2
c           iend = iend + 1
c           if (iend .gt. 20) stop
c******************************
d202 3
a204 3
C               RECORD IS FULL, PUT IT OUT TO FILE
                L = L + 1
                CALL WRTLIN8(LUNN,LBUF,1024,L)
d208 14
d225 3
a227 3
C          RECORD STILL HAS PIXELS IN IT, PUT THEM OUT TO FILE
           L = L + 1
           CALL WRTLIN8(LUNN,LBUF,K,L)
d236 1
a236 1
90        FORMAT(' SPIDER 8 BIT IMAGE SIZE: (',I4,',',I4,',',I4,
d241 1
a241 1
91        FORMAT(' SPIDER 8 BIT IMAGE SIZE: (',I4,',',I4,
d246 1
a246 1
92        FORMAT(' RAW IMAGE SIZE: (',I4,',',I4,',',I4,
d251 1
a251 1
93        FORMAT(' RAW IMAGE SIZE: (',I4,',',I4,')  LABEL BYTES:',I6,/)
a254 1

a261 2


d264 8
@


1.3
log
@changed <CP> to <CP TO> or <CP FROM>
@
text
@a55 1
#ifdef SP_UNIX
a56 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d58 2
d62 1
a62 1
        COMMON /LUNARA/ LUNARA(100),LASLAB
a67 1
        REAL             BUFO(16000)
a68 1

a69 4
        LOGICAL   * 1    LBUF(32000),LVAL(2),LVAL1,LVAL2

        EQUIVALENCE      (LVAL,I2VAL),   (LVAL1,LVAL(1))
        EQUIVALENCE      (LVAL2,LVAL(2))
d235 1
a235 1
             LBUF(K) = LVAL2
@


1.2
log
@status=UNK changed to status=UNKNOWN
@
text
@d54 1
a54 1
     &                     HEADER,NORMAL,ASKPAD,IRTFLG)
d81 1
a81 2
        ASKNAM = .FALSE.
        IF (FILOLD .EQ. NULL) ASKNAM = .TRUE.
d83 2
a84 2
C       OPEN 32 BIT UNIX SPIDER INPUT FILE
10      CALL OPFIL(ASKNAM,FILOLD,LUNO,'O',NSAM,NROW,NSLICE,IFORM,
d86 10
a95 1
        IF (IRTFLG .NE. 0) RETURN
@


1.2.1.1
log
@*** empty log message ***
@
text
@d54 1
a54 1
     &             NSAM,NROW,NSLICE,HEADER,NORMAL,ASKPAD,IRTFLG)
d81 2
a82 1
        IF (FILOLD .EQ. NULL) THEN
d84 2
a85 2
C         OPEN 32 BIT UNIX SPIDER INPUT FILE
10        CALL OPFIL(.TRUE.,FILOLD,LUNO,'O',NSAM,NROW,NSLICE,IFORM,
d87 1
a87 10
          IF (IRTFLG .NE. 0) RETURN

	ELSEIF (NSAM .EQ. 0 .AND. NROW .EQ. 0 .AND.
     &  	NSLICE .EQ. 0) THEN
C	  THE FILE IS NOT OPENED
          CALL OPFIL(.FALSE.,FILOLD,LUNO,'O',NSAM,NROW,NSLICE,IFORM,
     &             'ENTER UNIX SPIDER INPUT',.FALSE.,IRTFLG)
          IF (IRTFLG .NE. 0) RETURN
	  
	ENDIF
@


1.1
log
@cpp_lines_added
@
text
@d172 1
a172 1
     &       STATUS='UNK',FORM='UNFORMATTED')
@
