head	1.30;
access;
symbols
	pre_getangas:1.25
	GPL2010:1.25
	pre_GPL2010:1.24
	pre_var_equation:1.24
	pre_fftwrings:1.24
	pre_opfiles:1.23
	src:1.23
	best-code:1.23
	x-named-regs:1.23
	x:1.23
	v13-00:1.22
	pre_GPL:1.20
	prec_CA:1.17
	noindx:1.14
	Bproc:1.10
	oct21:1.9
	last77:1.8;
locks; strict;
comment	@c @;


1.30
date	2015.11.24.17.39.38;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2015.11.23.18.21.29;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2015.11.12.19.38.59;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2015.10.29.17.03.28;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2013.01.07.15.21.32;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2010.06.24.13.27.07;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2007.01.31.17.53.21;	author bbaxter;	state Exp;
branches;
next	1.23;

1.23
date	2005.11.18.20.53.17;	author bimal;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.17.20.00.40;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2005.10.17.17.56.31;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2005.02.09.14.54.49;	author bbaxter;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.26.18.41.51;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2004.03.01.21.20.43;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.29.14.15.37;	author bbaxter;	state Exp;
branches;
next	1.16;

1.16
date	2003.04.04.18.37.45;	author bbaxter;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.20.17.13.16;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2002.03.11.14.07.48;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2002.02.20.15.45.31;	author bbaxter;	state Exp;
branches;
next	1.12;

1.12
date	2001.10.31.19.49.02;	author bbaxter;	state Exp;
branches;
next	1.11;

1.11
date	2000.11.06.13.42.31;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	99.11.10.20.29.00;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	99.09.29.17.32.29;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	97.10.15.15.14.47;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	96.08.28.21.34.33;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	96.08.28.21.28.42;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.04.12.13.41.22;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	96.04.12.13.19.06;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	94.11.14.14.26.03;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.12.00;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.53.27;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.30
log
@note added about geh=0
@
text
@C++*********************************************************************
C
C TRAFC.F
C          INCLUDE COMPLETE SIGN REVERSAL AND INTELLIGIBLE
C          GAUSSIAN PARAMETER                     9/5/94  JF
C          USED OPFILE                            NOV  00 ARDEAN LEITH
C          RECTANGULAR OUTPUTS                    OCT  01 BILL BAXTER
C          OPFILEC                                FEB  03 ARDEAN LEITH
C          WANT_FLIP                              MAR  14 ARDEAN LEITH
C          REFACTORED                             NOV  15 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2015  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C TRAFC(LUN,WANT_FLIP)
C
C OPERATIONS:   'TF C'  = STRAIGHT
C               'TF CT' = PHASE FLIPPING
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

         SUBROUTINE TRAFC(LUN,WANT_FLIP)

         IMPLICIT NONE
         INCLUDE 'CMBLOCK.INC'
         INCLUDE 'CMLIMIT.INC' 
 
         INTEGER               :: LUN   
         LOGICAL               :: WANT_FLIP

         COMPLEX               :: B(NBUFSIZ)  ! from cmlimit.inc

         CHARACTER(LEN=MAXNAM) :: FILNAM
         CHARACTER             :: NULL = CHAR(0)

         REAL                  :: CS,DZ,LAMBDA,FMAXSPFREQ, Q,DS
         REAL                  :: DZA,AZZ,ACR,GEH,FDUM
         REAL                  :: SIGN,SCX,SCY,AK,AZ,AZR,DZZ,TF

         INTEGER               :: I,KX
         INTEGER               :: NLET,LSM,IXC,IYC,NZ,MAXIM,IE,K,KY
   
         INTEGER               :: NDIM,NX,NY,IRTFLG   
         LOGICAL               :: WANT_AST,WANT_GEH,WANT_SIGN
         LOGICAL               :: WANT_SPFREQ,WANT_PIXSIZ

         DOUBLE PRECISION, PARAMETER :: QUADPI=3.1415926535897932384626

         IF (WANT_FLIP) THEN
            CALL FILERD(FILNAM,NLET,NULL,'PHASE FLIPPING CTF OUTPUT',
     &                  IRTFLG)
         ELSE
            CALL FILERD(FILNAM,NLET,NULL,'CTF OUTPUT',IRTFLG)
         ENDIF
         IF (IRTFLG .NE. 0) RETURN

C        GET COMMON TF INPUTS
         NDIM        =  2
         WANT_AST    = .TRUE.
         WANT_GEH    = .NOT. WANT_FLIP   
         WANT_SIGN   = .TRUE.
         WANT_SPFREQ = .TRUE.     ! ASK FOR SPFREQ
         WANT_PIXSIZ = .FALSE.    ! DO NOT ASK FOR PIXEL SIZE

         CALL GET_TF_INPUT(CS,DZ,LAMBDA,
     &                NDIM, NX, NY,
     &                WANT_SPFREQ,FMAXSPFREQ,
     &                WANT_PIXSIZ,FDUM,
     &                Q, DS,
     &                WANT_AST, DZA, AZZ,
     &                WANT_GEH, ACR, GEH,
     &                WANT_SIGN, SIGN,
     &                IRTFLG) 
         IF (IRTFLG .NE. 0) RETURN

         IF (MOD(NX,2) == 0)  THEN
            IFORM = -12
            LSM   = NX + 2
         ELSE
            IFORM = -11
            LSM   = NX + 1
         ENDIF
         IXC  = NX / 2 + 1

         IF (NY == 0)  THEN
            NY   = NX
            IYC  = IXC
         ELSE
            IYC  = NY / 2 + 1
         ENDIF

         NZ     = 1
         MAXIM  = 0
         IRTFLG = 0
         CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'U',IFORM,LSM,NY,NZ,
     &                MAXIM,' ',.TRUE.,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN

C        IE  = 0 SELECTS STRAIGHT TRANSFER FUNCTION IN SUBROUTINE TFD
         IE  = 0

         IF (WANT_FLIP) THEN
C           WANT PHASE FLIPPING TRANSFER
 
C           IGNORE THE GAUSSIAN ENVELOPE FUNCTION
C           this is almost = 1/10000**2 setting? al
            GEH = 0.0

         ELSE
C           WANT FULL CTF TRANSFER FUNCTION

            IF (GEH .NE. 0.0) THEN
               GEH = 1. / GEH**2
            ENDIF
         ENDIF


C        sc  = fmaxspfreq / float(nx / 2) ! for ndim=1
         SCX = 2.0 / NX
         SCY = 2.0 / NY

         ACR = ATAN(ACR / (1.0 - ACR))
         CS  = CS * 1.E7

         DO  K=1,NY
            KY = K-1
            IF (K > IYC) KY = KY-NY

            DO  I=1,LSM,2
               KX = (I-1) / 2

C              Changed AK to handle rectangular images
C              AK = SQRT(FLOAT(KY)**2 + FLOAT(KX)**2)*SC

               AK = FMAXSPFREQ * SQRT((KX*SCX)**2 + (KY*SCY)**2)

C              AZ = QUADPI / 2.
               IF (KX .NE. 0) THEN
                  AZ = ATAN2(FLOAT(KY),FLOAT(KX)) + QUADPI / 2.
               ELSE
                  AZ = QUADPI / 2.
               ENDIF
               
               AZR = AZZ * (QUADPI/180.)
               DZZ = DZ + DZA / 2 * SIN(2 *(AZ - AZR))

               CALL TFD(TF,CS,DZZ,LAMBDA,Q,DS,IE,AK,ACR,GEH)

               IF (WANT_FLIP) THEN
C                 FOR PHASE FLIPPING
                  IF (TF >= 0.0) THEN
                     B(KX+1) = CMPLX( 1.0,0.0) * SIGN
                  ELSE
                     B(KX+1) = CMPLX(-1.0,0.0) * SIGN
                  ENDIF

               ELSE
C                 FOR FULL CTF CORRECTION
                  B(KX+1) = CMPLX(TF*SIGN, 0.0)

               ENDIF
            ENDDO

            CALL WRTLIN(LUN,B,LSM,K)
         ENDDO

         END

@


1.29
log
@GET_TF_INPUT WANT_PIXSIZ params
@
text
@d126 1
@


1.28
log
@refactored
@
text
@d57 1
a57 1
         REAL                  :: DZA,AZZ,ACR,GEH
d65 1
d78 6
a83 4
         NDIM      =  2
         WANT_AST  = .TRUE.
         WANT_GEH  = .NOT. WANT_FLIP   
         WANT_SIGN = .TRUE.
d87 2
a88 1
     &                FMAXSPFREQ,
@


1.27
log
@all tf ops have same prompt syntax
@
text
@d9 2
a10 1
C          WANT_CT                                MAR  04 ARDEAN LEITH
d34 4
a37 1
C TRAFC(LUN,WANT_CT)
d42 1
a42 1
         SUBROUTINE TRAFC(LUN,WANT_CT)
d44 1
d48 5
a53 4

         REAL                  :: LAMBDA,KM
         COMPLEX               :: B
         COMMON                   B(1)
a54 9
         LOGICAL               :: WANT_CT

         PARAMETER (QUADPI = 3.1415926535897932384626)

         CALL FILERD(FILNAM,NLET,NULL,'OUTPUT',IRTFLG)
         IF (IRTFLG .NE. 0) RETURN

         CALL RDPRM(CS,NOT_USED,'SPHERICAL ABERRATION CS [MM]')
         IF (CS < 0.0001)    CS = 0.0001
d56 15
a70 15
         CALL RDPRM2(DZ,LAMBDA,NOT_USED,
     &        'DEFOCUS [A], WAVELENGTH LAMBDA [A]')
 
         CALL RDPRMI(NX,NDUM,NOT_USED,'DIMENSIONS OF OUTPUT ARRAY')

         CALL RDPRM(KM,NOT_USED,'MAXIMUM SPATIAL FREQUENCY [1/A]')

         CALL RDPRM2(Q,DS,NOT_USED,
     &        'SOURCE SIZE [1/A], DEFOCUS SPREAD [A]')

         CALL RDPRM2(DZA,AZZ,NOT_USED,'ASTIGMATISM [A], AZIMUTH [DEG]')

         IF (WANT_CT) THEN
            CALL RDPRM(WGH,NOT_USED,'AMPLITUDE CONTRAST RATIO [0-1]')
            ENV = 0.0
d72 1
a72 5
            CALL RDPRM2(WGH,ENV,NOT_USED,
     &      'AMPL CONTRAST RATIO [0-1], GAUSSIAN ENV. HALFW. [1/A]')
            IF (ENV .NE. 0.0) THEN
               ENV = 1. / ENV**2
            ENDIF
d74 1
d76 15
a90 1
         CALL  RDPRM(SIGN,NOT_USED,'SIGN (+1 or -1.)')
d92 1
a92 1
         IF (MOD(NX,2) .EQ. 0)  THEN
d94 1
a94 1
            LSM   = NX+2
d97 1
a97 1
            LSM   = NX+1
d99 1
d101 1
a101 2
         IXC    = NX/2+1
         IF (NDUM.EQ.0)  THEN
d103 1
a103 1
            IYC    = IXC
d105 1
a105 2
            NY   = NDUM
            IYC    = NY/2+1
d115 19
a133 1
C        SC  = KM/FLOAT(NX/2)
d137 1
a137 3
         IE  = 0
C        IE  = 0 SELECTS TRANSFER FUNCTION OPTION IN SUBROUTINE TFD
         WGH = ATAN(WGH / (1.0 - WGH))
d149 2
a150 1
               AK = KM * SQRT((KX*SCX)**2 + (KY*SCY)**2)
d154 1
a154 1
                  AZ = ATAN2(FLOAT(KY),FLOAT(KX)) + QUADPI/2.
d162 1
a162 1
               CALL TFD(TF,CS,DZZ,LAMBDA,Q,DS,IE,AK,WGH,ENV)
d164 2
a165 1
               IF (WANT_CT) THEN
d167 1
a167 1
                     B(KX+1) = CMPLX( 1.0, 0.0) * SIGN
d169 1
a169 1
                     B(KX+1) = CMPLX(-1.0, 0.0) * SIGN
d171 1
d173 1
d175 1
@


1.26
log
@CS_zero
@
text
@d4 6
a9 4
C                                   USED OPFILE NOV  00 ARDEAN LEITH
C                           RECTANGULAR OUTPUTS OCT  01 BILL BAXTER
C                                   OPFILEC     FEB  03 ARDEAN LEITH
C                                   WANT_CT     MAR  04 ARDEAN LEITH
d15 1
a15 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d33 1
a33 4
C  TRAFC.F
C
C CHANGED 9/5/94 TO INCLUDE COMPLETE SIGN REVERSAL AND INTELLIGIBLE
C          GAUSSIAN PARAMETER JF
d40 1
a40 1
	 INCLUDE 'CMBLOCK.INC'
d43 1
a43 2
         CHARACTER(LEN=MAXNAM)   ::  FILNAM
         COMMON /COMMUN/FILNAM
d45 5
a49 5
         REAL          LAMBDA,KM
         COMMON        B(1)
         COMPLEX       B
         CHARACTER     NULL
         LOGICAL       WANT_CT
a52 2
         NULL = CHAR(0)

d56 2
a57 2
	CALL RDPRM(CS,NOT_USED,'SPHERICAL ABERRATION CS[MM]')
           IF (CS < 0.0001)    CS = 0.0001
d60 1
a60 1
     &        'DEFOCUS(ANGSTROEMS), LAMBDA(ANGSTROEMS)')
d62 1
a62 1
         CALL RDPRMI(NSAM,NDUM,NOT_USED,'DIMENSIONS OF OUTPUT ARRAY')
d64 1
a64 1
         CALL RDPRM(KM,NOT_USED,'MAXIMUM SPATIAL FREQUENCY[A-1]')
d67 1
a67 1
     &        'SOURCE SIZE[A-1], DEFOCUS SPREAD[A]')
d69 1
a69 1
         CALL RDPRM2(DZA,AZZ,NOT_USED,'ASTIGMATISM[A], AZIMUTH[DEG]')
d72 1
a72 1
            CALL RDPRM(WGH,NOT_USED,'AMPL CONTRAST RATIO [0-1]')
d76 1
a76 1
     &      'AMPL CONTRAST RATIO [0-1], GAUSSIAN ENV HALFW [FOU UNITS]')
d78 1
a78 1
               ENV = 1./ENV**2
d84 1
a84 1
         IF (MOD(NSAM,2) .EQ. 0)  THEN
d86 1
a86 1
            LSM   = NSAM+2
d89 1
a89 1
            LSM   = NSAM+1
d92 1
a92 1
         IXC    = NSAM/2+1
d94 1
a94 1
            NROW   = NSAM
d97 2
a98 2
            NROW   = NDUM
            IYC    = NROW/2+1
d101 1
a101 1
         NSLICE = 1
d104 1
a104 1
         CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'U',IFORM,LSM,NROW,NSLICE,
d108 8
a115 8
C        SC=KM/FLOAT(NSAM/2)
         SCX = 2.0 / NSAM
         SCY = 2.0 / NROW

         IE =0
C        IE=0 SELECTS TRANSFER FUNCTION OPTION IN SUBROUTINE TFD
         WGH = ATAN(WGH/(1.0-WGH))
         CS  = CS*1.E7
d117 1
a117 1
         DO  K=1,NROW
d119 2
a120 1
            IF (K.GT.IYC) KY = KY-NROW
d122 1
a122 1
               KX = (I-1)/2
d128 2
a129 2
C              AZ = QUADPI/2.
	       IF (KX.NE.0) THEN
d131 2
a132 2
	       ELSE
	          AZ =  QUADPI/2.
d134 3
a136 5
	       
	       
	       
               AZR = AZZ*(QUADPI/180.)
               DZZ = DZ+DZA/2*SIN(2*(AZ-AZR))
d139 1
d141 2
a142 2
                  IF (TF .GE. 0.0) THEN
                     B(KX+1) = CMPLX(1.0, 0.0) * SIGN
d150 1
@


1.25
log
@GPL_2010
@
text
@d60 2
a61 1
         CALL RDPRM(CS,NOT_USED,'CS(MM)')
@


1.24
log
@added IF WANT_CT for getting ACR,GHW parameters
@
text
@a9 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d11 5
a15 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d17 1
a17 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d22 1
a22 1
C=* This program is distributed in the hope that it will be useful,    *
d24 1
a24 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a25 1
C=*                                                                    *
d27 1
a27 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.23
log
@else part added as per JF
@
text
@d5 1
a39 2
C CHANGED 10/31/01 TO GENERATE RECTANGULAR OUTPUTS. BILL BAXTER
C
d78 10
a87 3
         CALL RDPRM2(WGH,ENV,NOT_USED,
     &     'AMPL CONTRAST RATIO [0-1], GAUSSIAN ENV HALFW [FOU UNITS]')
         ENV = 1./ENV**2
@


1.22
log
@GPL License fixed
@
text
@d129 1
a129 1
               IF (KX.NE.0) THEN
d131 2
d134 3
@


1.21
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a8 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d12 1
a12 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a31 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
a32 1
C **************************************************************************
a42 1
C--************************************************************************
@


1.20
log
@fixed to work for 1D images, removed float extrinsic from lines 94,95
@
text
@d1 1
d9 1
d11 1
d13 24
d43 1
d54 1
@


1.19
log
@irtflg = 0
@
text
@d94 2
a95 2
         SCX = 1.0 / FLOAT(NSAM/2)
         SCY = 1.0 / FLOAT(NROW/2)
@


1.18
log
@added WANT_CT to merge with trafct.f
@
text
@d88 1
@


1.17
log
@uncommented out IF statment before ATAN2.
@
text
@d6 1
d21 1
a21 1
C GAUSSIAN PARAMETER JF
d28 1
a28 1
         SUBROUTINE TRAFC(LUN)
d40 1
d42 1
a42 1
         PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
d50 1
d52 2
a53 1
     &        'DEFOCUS(ANGSTROEMS), LAMBDA(ANGSTROEMS)') 
d55 1
d57 1
d60 1
d62 1
d65 2
a66 1
         ENV=1./ENV**2
d69 1
a69 1
         IF (MOD(NSAM,2).EQ.0)  THEN
d73 2
a74 2
	        IFORM = -11
	        LSM   = NSAM+1
d82 2
a83 2
	        NROW   = NDUM
	        IYC    = NROW/2+1
d89 1
a89 1
     &                   MAXIM,' ',.TRUE.,IRTFLG)
d92 1
a92 1
C         SC=KM/FLOAT(NSAM/2)
d99 1
a99 1
         CS = CS*1.E7
d102 2
a103 2
            KY=K-1
            IF (K.GT.IYC) KY=KY-NROW
d105 1
a105 1
               KX=(I-1)/2
d107 2
a108 2
C      Changed AK to handle rectangular images
C               AK = SQRT(FLOAT(KY)**2 + FLOAT(KX)**2)*SC
d111 6
a116 5
C               AZ = QUADPI/2.
               IF (KX.EQ.0) GOTO 5
               AZ =ATAN2(FLOAT(KY),FLOAT(KX)) + QUADPI/2.
5              AZR=AZZ*(QUADPI/180.)
               DZZ=DZ+DZA/2*SIN(2*(AZ-AZR))
d119 9
a127 2
               B(KX+1)=CMPLX(TF*SIGN,0.0)

@


1.16
log
@changes to parameters to tfd, WGH and CS
@
text
@d103 1
a103 1
C               IF (KX.EQ.0) GOTO 5
@


1.15
log
@opfilec
@
text
@d89 3
@


1.14
log
@nloop,iloop_removed
@
text
@d4 2
a5 1
C                                   USED OPFILE NOV 00 ARDEAN LEITH
d30 4
a37 1
         CHARACTER *81 FILNAM
d79 1
a79 1
         CALL OPFILE(.FALSE.,FILNAM,LUN,'U',IFORM,LSM,NROW,NSLICE,
@


1.13
log
@changed PI to QUADPI
@
text
@d43 2
a44 2
         CALL RDPRM(CS,NLOOP,ILOOP,'CS(MM)')
         CALL RDPRM2(DZ,LAMBDA,NLOOP,ILOOP,
d46 3
a48 3
         CALL RDPRMI(NSAM,NDUM,NLOOP,ILOOP,'DIMENSIONS OF OUTPUT ARRAY')
         CALL RDPRM(KM,NLOOP,ILOOP,'MAXIMUM SPATIAL FREQUENCY[A-1]')
         CALL RDPRM2(Q,DS,NLOOP,ILOOP,
d50 2
a51 2
         CALL RDPRM2(DZA,AZZ,NLOOP,ILOOP,'ASTIGMATISM[A], AZIMUTH[DEG]')
         CALL RDPRM2(WGH,ENV,NLOOP,ILOOP,
d54 1
a54 1
         CALL  RDPRM(SIGN,NLOOP,ILOOP,'SIGN (+1 or -1.)')
@


1.12
log
@Changed to allow rectangular outputs. Also commented out lines
AZ = PI/2. and IF (KX.EQ.0) GOTO 5 and changed assignment of PI
as per PP's request 10/29/01
@
text
@d95 1
a95 1
C               AZ = PI/2.
d97 2
a98 2
               AZ =ATAN2(FLOAT(KY),FLOAT(KX))+PI/2.
5              AZR=AZZ*(PI/180.)
@


1.11
log
@used opfile
@
text
@d21 2
d36 1
a36 1
         DATA PI/3.14159/
d45 2
a46 2
     &        'DEFOCUS(ANGSTROEMS), LAMBDA(ANGSTROEMS)')
         CALL RDPRMI(NSAM,NDUM,NLOOP,ILOOP,'NUMBER OF SP.FREQ.PTS')
d55 2
a56 1
	 IF (MOD(NSAM,2).EQ.0)  THEN
d58 6
a63 6
	    LSM   = NSAM+2
	 ELSE
	    IFORM = -11
	    LSM   = NSAM+1
	 ENDIF
         NROW   = NSAM
d65 9
a73 2
         IYC    = IXC
	 NSLICE = 1
d79 4
a82 1
         SC=KM/FLOAT(NSAM/2)
d91 6
a96 3
               AK = SQRT(FLOAT(KY)**2 + FLOAT(KX)**2)*SC
               AZ = PI/2.
               IF (KX.EQ.0) GOTO 5
d106 1
a106 1
	 ENDDO
@


1.10
log
@*** empty log message ***
@
text
@d3 2
a4 1
C $$ TRAFC.FOR
d16 1
d18 2
d23 1
a23 5
C changed 9/5/94 to include complete sign reversal and intelligible
C Gaussian parameter jf
C
C $$ TRAFC.FOR
C
d25 1
d27 4
a30 3
         REAL LAMBDA,KM
         COMMON B(1)
         COMPLEX B
d33 1
d35 1
a35 1
C
d37 1
d39 2
a40 1
         IF (IRTFLG .EQ. -1) RETURN
d43 1
a43 1
     &   'DEFOCUS(ANGSTROEMS), LAMBDA(ANGSTROEMS)')
d47 2
a48 2
     &   'SOURCE SIZE[A-1], DEFOCUS SPREAD[A]')
      CALL RDPRM2(DZA,AZZ,NLOOP,ILOOP,'ASTIGMATISM[A], AZIMUTH[DEG]')
d50 1
a50 1
     &   'Ampl contrast ratio [0-1], Gaussian env halfw [Fou units]')
d53 16
a68 12
	IF(MOD(NSAM,2).EQ.0)  THEN
        IFORM = -12
	LSM=NSAM+2
	ELSE
	IFORM=-11
	LSM=NSAM+1
	ENDIF
         NROW=NSAM
         IXC=NSAM/2+1
         IYC=IXC
	NSLICE=1
         CALL OPENF(FILNAM,LUN,LSM,NROW,'UNKNOWN',NF,NSLICE)
d70 2
a71 2
         IE=0
C IE=0 SELECTS TRANSFER FUNCTION OPTION IN SUBROUTINE TFD
d73 17
a89 15
         KY=K-1
         IF(K.GT.IYC) KY=KY-NROW
         DO  I=1,LSM,2
         KX=(I-1)/2
C
         AK = SQRT(FLOAT(KY)**2 + FLOAT(KX)**2)*SC
         AZ = PI/2.
         IF(KX.EQ.0) GOTO 5
         AZ=ATAN2(FLOAT(KY),FLOAT(KX))+PI/2.
5        AZR=AZZ*(PI/180.)
         DZZ=DZ+DZA/2*SIN(2*(AZ-AZR))
C
         CALL TFD(TF,CS,DZZ,LAMBDA,Q,DS,IE,AK,WGH,ENV)
         B(KX+1)=CMPLX(TF*SIGN,0.0)
C
d91 1
a91 3
         CALL WRTLIN(LUN,B,LSM,K)
	 ENDDO
C
@


1.9
log
@SIGN added
@
text
@d76 1
a76 1
         CALL TFD(TF,CS,DZZ,LAMBDA,KM,NSAM,Q,DS,IE,AK,WGH,ENV)
@


1.8
log
@*** empty log message ***
@
text
@a32 1
CNO_SAVE
d47 1
d77 1
a77 1
         B(KX+1)=CMPLX(TF,0.0)
@


1.7
log
@bug fixed
@
text
@d63 1
a63 1
         DO 20 K=1,NROW
d66 1
a66 1
         DO 10 I=1,LSM,2
d79 1
a79 1
10       CONTINUE
d81 1
a81 1
20       CONTINUE
@


1.6
log
@new FT version
@
text
@d77 1
a77 1
         B(K)=CMPLX(TF,0.0)
@


1.5
log
@*** empty log message ***
@
text
@d25 1
a25 3
C
        INCLUDE 'CMBLOCK.INC'
C
d48 7
a54 1
         IFORM = -1
d58 2
a59 1
         CALL OPENF(FILNAM,LUN,NSAM,NROW,'UNKNOWN',NF,1)
d63 1
a63 3
         DO 20 I=1,NSAM+2,2
         KX=(I-1)/2
         DO 10 K=1,NROW
d66 2
d80 1
a80 2
         CALL WRTLIN(LUN,B,NROW,I)
         CALL WRTLIN(LUN,B(NROW/2+1),NROW,I+1)
@


1.4
log
@envelope changed
@
text
@d48 1
a48 1
     &   'Amplitude contrast ratio [0-1], Gaussian env halfw [Fou units]')
@


1.3
log
@new version
@
text
@a25 1
#ifdef SP_UNIX
a26 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d35 1
d48 1
a48 1
     &   'Amplitude contrast ratio [0-1], Gaussian env halfwidth')
@


1.2
log
@cpp_lines_added
@
text
@d19 2
d27 1
a27 1
         INCLUDE 'CMBLOCK.INC'
d29 1
a29 1
         INCLUDE 'COMMON1:CMBLOCK.INC'
d51 2
a52 1
     &   'Amplitude contrast ratio [0-1], Gaussian envelope parameter')
d83 1
@


1.1
log
@Initial revision
@
text
@d24 3
d28 1
@
