head	1.56;
access;
symbols
	pre_mrcs:1.53
	healthdept_2018:1.53
	pre_getangas:1.48
	GPL2010:1.47
	pre_GPL2010:1.46
	pre_var_equation:1.46
	pre_fftwrings:1.46
	pre_opfiles:1.43
	src:1.43
	best-code:1.43
	x-named-regs:1.43
	x:1.43
	v13-00:1.43
	pre_GPL:1.42
	prec_CA:1.40
	noindx:1.35
	Bproc:1.28
	oct21:1.27
	last77:1.26;
locks; strict;
comment	@c @;


1.56
date	2020.01.21.16.21.38;	author leith;	state Exp;
branches;
next	1.55;

1.55
date	2020.01.07.19.42.08;	author leith;	state Exp;
branches;
next	1.54;

1.54
date	2019.11.04.17.35.02;	author leith;	state Exp;
branches;
next	1.53;

1.53
date	2018.10.03.14.34.11;	author leith;	state Exp;
branches;
next	1.52;

1.52
date	2014.08.26.16.51.27;	author leith;	state Exp;
branches;
next	1.51;

1.51
date	2014.08.21.15.14.30;	author leith;	state Exp;
branches;
next	1.50;

1.50
date	2014.06.02.12.02.44;	author leith;	state Exp;
branches;
next	1.49;

1.49
date	2012.02.22.16.09.51;	author leith;	state Exp;
branches;
next	1.48;

1.48
date	2010.12.16.16.08.29;	author leith;	state Exp;
branches;
next	1.47;

1.47
date	2010.06.24.13.26.25;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2008.02.28.20.19.32;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2008.02.28.13.47.13;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2008.02.28.12.55.34;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2005.10.17.20.53.32;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2004.04.06.16.01.41;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2004.04.05.14.27.37;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	2003.03.04.15.47.23;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2003.02.26.17.30.09;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2003.02.26.17.21.14;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2003.02.06.15.01.21;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2003.01.23.15.51.21;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2002.11.20.15.19.12;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2002.08.19.18.35.50;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2002.08.12.13.29.15;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2001.01.16.19.40.06;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2000.12.20.16.47.38;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2000.11.06.15.41.52;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2000.10.19.16.51.32;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2000.08.14.20.06.28;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	99.09.13.16.27.33;	author pawel;	state Exp;
branches;
next	1.26;

1.26
date	99.02.19.17.00.20;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	99.01.12.17.15.41;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	98.09.29.15.25.41;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	98.07.24.14.46.06;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	98.01.26.14.44.18;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	98.01.22.16.26.25;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	98.01.21.20.42.04;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	98.01.20.19.24.14;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	98.01.16.19.44.26;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	98.01.12.20.29.57;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	97.12.30.18.29.32;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	97.12.11.21.17.47;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	97.12.10.21.18.33;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	97.12.08.16.58.55;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	97.11.06.15.20.26;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	97.10.07.13.10.28;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	97.07.29.13.06.55;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	96.10.18.17.24.27;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	96.08.23.13.21.40;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	96.08.13.15.02.11;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	96.07.19.12.47.28;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	96.07.18.12.52.52;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	96.07.17.18.14.04;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	96.06.06.17.47.35;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.08.19;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.54;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.56
log
@comment
@
text
@
C++*********************************************************************
C
C OPFILEC.F              AUTHOR: ArDean Leith                        
C                        REMOVED OPENALL CALL    JAN 1999 ArDean Leith
C                        USED LUNHDR             FEB 1999 ArDean Leith
C                        CAN KEEP EXTENSION      NOV 2002 ArDean Leith
C                        INDEXED STACKS          JAN 2003 ArDean Leith
C                        HEADER COPY             FEB 2003 ArDean Leith
C                        OPFIL --> OPFILEC       FEB 2003 ArDean Leith  
C                        REMOVED IRTFLG INPUT    APR 2004 ArDean Leith
C                        DISP 'B'                APR 2004 ArDean Leith
C                        FOURIER ERRT            DEC 2010 ArDean Leith
C                        KEEPEXT LOGIC           JUN 2014 ArDean Leith
C                        INDEX(FILNAM,'.' BUG    AUG 2014 ArDean Leith
C                        MRC SUPPORT             MAY 2019 ArDean Leith
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2019  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  OPFILEC(LUNT,ASKNAM,FILNAM,LUN,DISPT,NX,NY,ITYPE,NZ,
C          MAXIM,PROMPT,FOUROK,IRTFLG)
C
C  PURPOSE:         SOLICITS SPIDER OR MRC FILE NAME AND OPENS FILE
C  
C  PARAMETERS:
C 
C        LUNT       UNIT TO COPY HEADER VALUES FROM              (SENT)
C        ASKNAM     LOGICAL FLAG TO QUERY NAME                   (SENT)
C        FILNAM     FILENAME (WITOUT EXTENSION)              (SENT/RET)
C        LUN        UNIT TO OPEN FILE ON                         (SENT)
C        DISPT      CHARACTER CONTAINING ONE OF THE              (SENT)
C                   FOLLOWING DISPOSITION SPECIFICATIONS:
C                   'O'   -  FILE IS ASSUMED TO EXIST.  DIMENSIONS,
C                            ITYPE AND HEADER INFO (IN COMMON) ARE 
C                            RETURNED TO THE CALLING PROGRAM. 
C                   'B'   -  SAME AS OLD BUT NO LIMIT ON BUFFER LENGTH
C                            FOR OPENCHK. 
C                   'Z/E' -  THE FILE IS ASSUMED TO EXIST.
C                            IF FILE DOES NOT EXIST, THEN BATCH DOES
C                            NOT STOP. (ONLY DIFFERENCE FROM 'O'). 
C                   'N'  -   WANT NEW FILE. NX, NY, NZ, AND
C                            ITYPE MUST BE SENT.
C                   'U'  -   IT IS NOT KNOWN IF THE FILE EXISTS.  
C                            NX, NY, NZ, AND ITYPE MUST 
C                            BE SENT.  IF THE FILE ALREADY EXISTS, IT 
C                            WILL BE REPLACED.
C                   'K & M'-    NO LONGER USED.
C        ITYPE      IFORM FOR FILE                        (SENT OR RET) 
C        NX         IMAGE SIZE                            (SENT OR RET)
C        NY         IMAGE SIZE                            (SENT OR RET)
C        NZ         IMAGE SIZE                            (SENT OR RET)
C        MAXIM      STACK INDICATOR                          (SENT/RET)
C                   ON INPUT (IF NEW):
C                        0 IS FOR SPECIFIC IMAGE           
C                       +1 STACK                               
C                       -1 INDEXED STACK                               
C                   ON INPUT (IF EXISTING):
C                        0 IS FOR SPECIFIC IMAGE ONLY         
C                       <0 or >0 ALLOWS WHOLE STACK OPERATION                              
C                   ON OUTPUT:
C                       -2 NON-STACK IMAGE                
C                       -1 STACKED IMAGE                  
C                     >= 0 IS CURRENT MAX. IMAGE NO. FOR STACK             
C        PROMPT     PROMPT FOR FILNAME                           (SENT)
C                       AT END:  ~  SKIPS FILE ON PROMPT
C                                ~7 CAN OPEN A STACK WITHOUT @@
C                                ~9 KEEPS INCOMING EXTENSION
C                                ~6 KEEPS OLD DATE/TIME
C        FOUROK     CAN USE EXISTING FOURIER FILES?              (SENT)
C        IRTFLG     ERROR FLAG (0 IS NORMAL)                     (RET.)
C                        -1 GOTO PREVIOUS QUESTION
C                         0 NORMAL RETURN
C                         2 CAN'T USE AN EXISTING FOURIER FILE
C                         3 NO @@ ON A BARE STACK FILE
C                         4 OPERATION DOESN'T WORK ON WHOLE STACKS
C
C  CODING:   BASED ON PARAMETERS NX,NY, & NZ A
C            NEW FILE IS OPENED WITH IREC RECORDS, EACH NX*4 
C            BYTES LONG.  IREC ALLOWS SPACE FOR THE 2-D OR 3-D 
C            IMAGE  PLUS HEADER.  A STACK FILE CONTAINS AN OVERALL
C            HEADER PLUS MAXIM * IREC RECORDS. EACH IMAGE IN THE
C            STACK HAS ITS OWN HEADER RECORD(S) WHOSE FORMAT IS THE
C            SAME AS THE OVERALL HEADER RECORDS
C
C  COMMON VARIABLES:
C            IFORM (TYPE)  FILE TYPE SPECIFIER.              ( RET.)
C             +1    R     2-D IMAGE FILE
C             +3    R3    3-D IMAGE (VOLUME) FILE
C             -9    FS    3-D SIMPLE FORMAT FOURIER (MR'S FORMAT)
C             -11   FO    2-D FOURIER TRANSFORM, MIXED RADIX ODD
C             -12   FE    2-D FOURIER TRANSFORM, MIXED RADIX EVEN
C             -21   FE    3-D FOURIER TRANSFORM, MIXED RADIX ODD
C             -22   FE    3-D FOURIER TRANSFORM, MIXED RADIX EVEN
C
C  CALL TREE:
C                        
C                  MRC file
C     OPFILEC ---? -----------> OPENFIL_MRC --> OPENFIL_O_MRC --->
C                |                              OPENFIL_N_MRC --->
C                |
C                |                      Regular
C                | Not a stack          file
C                ?------------> OPENFIL ------>
C                |                 |
C                |                 `----------> INLNBUF
C                |                    Inline    OPENINLN
C                |                    file  
C                |
C                ? Inline stack
C                |-------------> OPNINSTK -->      
C                |
C                ? File stack
C                |-------------> OPENSTK  --> OPENFIL -->
C                   
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE OPFILEC(LUNT,ASKNAM,FILNAM,LUN,DISPT,ITYPE,
     &                  NX,NY,NZ,MAXIM,PROMPT,FOUROK,IRTFLG)

        IMPLICIT NONE

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        CHARACTER (LEN=*) :: FILNAM,PROMPT,DISPT
        INTEGER           :: LUNT,LUN,ITYPE,NX,NY,NZ,MAXIM,IRTFLG
        LOGICAL           :: ASKNAM,FOUROK

        INTEGER           :: LENP,NLETI,NBUFSIZT,IRTFLGT,NE
        INTEGER           :: NSTACK
        CHARACTER (LEN=1) :: DSP,DISP
        LOGICAL           :: OPSTKNOAT,KEEPEXT
        CHARACTER (LEN=1) :: NULL = CHAR(0)

        INTEGER           :: lnblnkn,lnblnk
        LOGICAL           :: ISMRCFILE

C       HACK TO OPEN NEW FILES GREATER THAN NBUFSIZ (DANGEROUS)
        DISP = DISPT
        IF (DISP(1:1) == 'B') DISP = 'U'
        !write(3,*)' In opfilec, itype: ',itype

        LENP = lnblnkn(PROMPT)
C       CAN PASS ~7  AT END OF PROMTP TO OPEN* TO OPEN A STACK WITHOUT @@
        OPSTKNOAT = (PROMPT(LENP-1:LENP) == '~7')

C       CAN PASS ~9  AT END OF PROMTP TO OPEN* TO KEEP INCOMING EXTENSION
        KEEPEXT = (PROMPT(LENP-1:LENP) == '~9')

        KEEPEXT = (KEEPEXT      .AND. 
     &             .NOT. ASKNAM .AND.
     &             (INDEX(FILNAM,'.',BACK = .TRUE.)) > 
     &             (INDEX(FILNAM,'/',BACK = .TRUE.)))

C       SET DEFAULT ERROR RETURN IRTFLG
        IRTFLG = 1

        IF (LUN <= 0 .OR. LUN > 100) THEN
           CALL ERRT(102,'PGM. ERROR: LUN MUST BE 1...100',LUN)
           RETURN
        ENDIF
        !write(3,*)' In opfilec, asknam,keepext: ',asknam,keepext
        !write(3,*)' In opfilec, itype,dispt: ',itype,disp
        !write(3,*)' In opfilec, filnam(:20): ',filnam(1:20)

        IF (ASKNAM) THEN
C          SOLICIT FILE NAME, KEEPS EXTENSION IF PROMPT ENDS WITH: ~9 
           CALL FILERD(FILNAM,NLETI,NULL,PROMPT,IRTFLG)
           IF (IRTFLG == -1) RETURN
        ELSE
           NLETI = lnblnk(FILNAM)
        ENDIF

        DSP = 'O'
        IF (DISP(1:1) .NE. 'O' .AND. 
     &      DISP(1:1) .NE. 'Z' .AND.
     &      DISP(1:1) .NE. 'E') THEN
C          WILL OPEN A NEW FILE

C          HACK TO OPEN FILES GREATER THAN NBUFSIZ (DANGEROUS)
           NBUFSIZT = NBUFSIZ
           IF (DISPT(1:1) == 'B') NBUFSIZT = HUGE(NBUFSIZT)

C          CHECK THAT NECESSARY SIZE... INFO IS HERE
           CALL OPENCHK(NX,NY,NZ,ITYPE,NBUFSIZT,IRTFLGT)
           IF (IRTFLGT .NE. 0) RETURN    
           DSP = 'N'
        ENDIF

        IF (ISMRCFILE(FILNAM)) THEN

C          WANT TO OPEN OLD OR NEW MRC FILE FOR STREAM ACCESS
           CALL OPENFIL_MRC(LUN,FILNAM,NLETI,NX,NY,NZ,NSTACK,ITYPE,
     &                      DSP,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
           IFORM = ITYPE
           MAXIM = NSTACK

           RETURN           ! END OF MRC CODE

        ELSE
C          WANT TO OPEN NEW OR OLD SPIDER FILE

C          CREATE A NEW HEADER OBJECT FOR THIS LUN, SET LUN FOR SPIDER
           CALL LUNNEWHDR(LUN,IRTFLGT)
           IF (IRTFLGT .NE. 0) RETURN

C          PUT FILENAME AND DSP IN OFF-FILE AREA OF THE HEADER OBJECT
           CALL LUNSETFILE(LUN,FILNAM,DSP,IRTFLGT)
           IF (IRTFLGT .NE. 0) RETURN

C          PUT ISBARE IN STATIC AREA OF HEADER OBJECT
           CALL LUNBAREFILE(LUN,FILNAM,IRTFLGT)
           IF (IRTFLGT .NE. 0) RETURN

C          MAKE SURE THE STACK OFFSET IS ALWAYS ZEROED, LUNARB SET ...
           CALL LUNSETLUNS(LUN,0,0,LUN,0,IRTFLGT)
           IF (IRTFLGT .NE. 0) RETURN

           IRTFLG = 0
           IF (INDEX(FILNAM,'@@') == 0) THEN

C             NOT AN IMAGE STACK, BUT MAY BE AN INLINE FILE. 
C             NOTE: THIS IS THE PATH FOR 'REGULAR' SPIDER IMAGE FILES.

              !write(3,*)' In opfilec, call openfil itype:',itype,nstack
              NSTACK = 0
	      CALL OPENFIL(LUNT,FILNAM,LUN,NX,NY,NZ,NSTACK,
     &                     ITYPE,DISP(1:1),KEEPEXT,IRTFLG)

              !write(3,*)' In opfilec, openfil returned filnam:',filnam
              !write(3,*)' In opfilec, nstack,irtflg:',nstack,irtflg

              IF (IRTFLG .NE. 0) RETURN

C             RETURNS NSTACK -2 FOR NON-STACK or MAXIM

              IF (NSTACK >= 0 .AND. .NOT. OPSTKNOAT ) THEN 
C                BARE STACK REFERENCE ALLOWED WITHOUT '@@' FROM 'ST' & 'LI'
C                BARE STACK REFERENCE NOT ALLOWED WITHOUT '@@' NORMALLY
                 CALL ERRT(101,'STACK INDICATOR (@@) MISSING',NE)
                 IRTFLG = 3
                 RETURN
              ENDIF

           ELSEIF (FILNAM(1:1) == '_') THEN
C             INLINE IMAGE STACK ACCESS WANTED
              NSTACK = MAXIM
              CALL OPENINSTK(LUNT,FILNAM,LUN,NX,NY,NZ,
     &                     NSTACK,ITYPE,DISP(1:1),IRTFLG)

           ELSE
C             WANT TO ACCESS A FILE BASED SPIDER IMAGE STACK
              NSTACK = MAXIM
              CALL OPENSTK(LUNT,FILNAM,LUN,NX,NY,NZ,
     &                     NSTACK,ITYPE,DISP(1:1),IRTFLG)

           ENDIF

C
C          RETURN IF THERE IS ANY ERROR OPENING FILE IN OPEN*
           IF (IRTFLG .NE. 0) RETURN

           IF ((DISP(1:1) == 'O'  .OR. 
     &          DISP(1:1) == 'Z'  .OR. 
     &          DISP(1:1) == 'E') .AND.
     &          ITYPE < 0 .AND. .NOT. FOUROK) THEN
C             CAN NOT USE EXISTING FOURIER FILE
             CALL ERRT(101,'OPERATION DOES NOT ACCEPT FOURIER FILES',NE)
             IRTFLG = 2
             RETURN

           ELSEIF (.NOT. OPSTKNOAT .AND. 
     &             MAXIM == 0 .AND. NSTACK >= 0) THEN
C             THIS OPERATION DOES NOT ACCEPT WHOLE STACKS 
             CALL ERRT(101,'OPERATION DOES NOT WORK ON WHOLE STACKS',NE)
              IRTFLG = 4
              RETURN
           ENDIF

           IFORM = ITYPE
           MAXIM = NSTACK

        ENDIF   ! END OF: SPIDER FILE

        END
@


1.55
log
@cosmetic
@
text
@a211 2
        !write(3,*)' In opfilec, filnam: ',filnam(:20)

a217 1

@


1.54
log
@mrc_support
@
text
@d212 1
a212 1
        !write(3,*)' In opfilec, call ismrcfile,filnam: ',filnam
@


1.53
log
@email_health_dept
@
text
@d4 13
a16 12
C OPFILEC.F                AUTHOR: ArDean Leith                        
C                          REMOVED OPENALL CALL    JAN 99 ArDean Leith
C                          USED LUNHDR             FEB 99 ArDean Leith
C                          CAN KEEP EXTENSION      NOV 02 ArDean Leith
C                          INDEXED STACKS          JAN 03 ArDean Leith
C                          HEADER COPY             FEB 03 ArDean Leith
C                          OPFIL --> OPFILEC       FEB 03 ArDean Leith  
C                          REMOVED IRTFLG INPUT    APR 04 ArDean Leith
C                          DISP 'B'                APR 04 ArDean Leith
C                          FOURIER ERRT            DEC 10 ArDean Leith
C                          KEEPEXT LOGIC           JUN 14 ArDean Leith
C                          INDEX(FILNAM,'.' BUG    AUG 14 ArDean Leith
d22 1
a22 1
C=* Copyright 1985-2014  Health Research Inc.,                         *
d43 1
a43 1
C  PURPOSE:         SOLICITS FILE NAME AND OPENS FILE
d47 5
a51 5
C        LUNT       UNIT TO COPY HEADER VALUES FROM               (SENT)
C        ASKNAM     LOGICAL FLAG TO QUERY NAME                    (SENT) 
C        FILNAM     FILENAME (WITOUT EXTENSION)               (SENT/RET)
C        LUN        UNIT TO OPEN FILE ON                          (SENT)
C        DISPT      CHARACTER CONTAINING ONE OF THE               (SENT) 
d68 5
a72 5
C        ITYPE      IFORM FOR FILE                         (SENT OR RET) 
C        NX         IMAGE SIZE                             (SENT OR RET)
C        NY         IMAGE SIZE                             (SENT OR RET)
C        NZ         IMAGE SIZE                             (SENT OR RET)
C        MAXIM      STACK INDICATOR                           (SENT/RET)
d84 1
a84 1
C        PROMPT     PROMPT FOR FILNAME                            (SENT)
d89 2
a90 2
C        FOUROK     CAN USE EXISTING FOURIER FILES?               (SENT)
C        IRTFLG     ERROR FLAG (0 IS NORMAL)                      (RET)
d97 7
a103 7
C    CODING:   BASED ON PARAMETERS NX,NY, & NZ A
C              NEW FILE IS OPENED WITH IREC RECORDS, EACH NX*4 
C              BYTES LONG.  IREC ALLOWS SPACE FOR THE 2-D OR 3-D 
C              IMAGE  PLUS HEADER.  A STACK FILE CONTAINS AN OVERALL
C              HEADER PLUS MAXIM * IREC RECORDS. EACH IMAGE IN THE
C              STACK HAS ITS OWN HEADER RECORD(S) WHOSE FORMAT IS THE
C              SAME AS THE OVERALL HEADER RECORDS
d105 9
a113 9
C    COMMON VARIABLES:
C              IFORM (TYPE)  FILE TYPE SPECIFIER.                ( RET.)
C               +1    R     2-D IMAGE FILE
C               +3    R3    3-D IMAGE (VOLUME) FILE
C               -9    FS    3-D SIMPLE FORMAT FOURIER (MR'S FORMAT)
C               -11   FO    2-D FOURIER TRANSFORM, MIXED RADIX ODD
C               -12   FE    2-D FOURIER TRANSFORM, MIXED RADIX EVEN
C               -21   FE    3-D FOURIER TRANSFORM, MIXED RADIX ODD
C               -22   FE    3-D FOURIER TRANSFORM, MIXED RADIX EVEN
d115 20
a134 16
C     CALL TREE:
C                                                        
C                                          (regular)
C                           (not stack)     (file)
C     OPFILE  ---------?------------------> OPENFIL -------->
C                      |                      |
C                      |                      `----------> INLNBUF
C                      |                        (inline)   OPENINLN
C                      |                        (file  )
C                      |
C                      |
C                      |    (inline stack)
C                      |-------------------> OPNINSTK -->      
C                      |
C                      |    (file stack)
C                      ` ------------------>  OPENSTK --> OPENFIL -->
d142 2
d148 5
d154 1
a154 1
        LOGICAL           :: ASKNAM,FOUROK,OPSTKNOAT,KEEPEXT
d157 3
d163 1
d184 3
d189 1
a189 1
C          SOLICIT FILE NAME, CAN KEEP EXTENSION IF PROMPT ENDS WITH: ~9 
d192 2
d200 1
a200 1
C          WILL OPEN A NEW FILE, CHECK THAT NECESSARY INFO IS HERE
d206 1
a206 2
           !write(6,*)'   Calling opench with nbufsizt: ',NBUFSIZT

d212 3
a214 3
C       CREATE A NEW HEADER OBJECT FOR THIS LUN
        CALL LUNNEWHDR(LUN,IRTFLGT)
        IF (IRTFLGT .NE. 0) RETURN
d216 4
a219 3
C       PUT FILENAME AND DSP IN OFF-FILE AREA OF THE HEADER OBJECT
        CALL LUNSETFILE(LUN,FILNAM,DSP,IRTFLGT)
        IF (IRTFLGT .NE. 0) RETURN
d221 2
a222 3
C       PUT ISBARE IN STATIC AREA OF HEADER OBJECT
        CALL LUNBAREFILE(LUN,FILNAM,IRTFLGT)
        IF (IRTFLGT .NE. 0) RETURN
d224 1
a224 3
C       MAKE SURE THE STACK OFFSET IS ALWAYS ZEROED, LUNARB SET ...
        CALL LUNSETLUNS(LUN,0,0,LUN,0,IRTFLGT)
        IF (IRTFLGT .NE. 0) RETURN
d226 2
a227 2
        IRTFLG = 0
        IF (INDEX(FILNAM,'@@') == 0) THEN
d229 47
a275 2
C          NOT AN IMAGE STACK (MAY BE AN INLINE FILE).  NOTE:
C          THIS IS THE PATH FOR 'REGULAR' SPIDER IMAGE FILES.
d277 5
a281 3
           NSTACK = 0
	   CALL OPENFIL(LUNT,FILNAM,LUN,NX,NY,NZ,NSTACK,
     &                  ITYPE,DISP(1:1),KEEPEXT,IRTFLG)
d283 1
a283 1
           !write(6,*) ' opfilec, openfil returned irtflg:',irtflg,filnam
d285 2
d289 14
a302 7
C          RETURNS NSTACK -2 FOR NON-STACK or MAXIM

           IF (NSTACK >= 0 .AND. .NOT. OPSTKNOAT ) THEN 
C             BARE STACK REFERENCE ALLOWED WITHOUT '@@' FROM 'ST' & 'LI'
C             BARE STACK REFERENCE NOT ALLOWED WITHOUT '@@' NORMALLY
              CALL ERRT(101,'STACK INDICATOR (@@) MISSING',NE)
              IRTFLG = 3
d306 2
a307 37
        ELSEIF (FILNAM(1:1) == '_') THEN
C           INLINE IMAGE STACK ACCESS WANTED
            NSTACK = MAXIM
            CALL OPENINSTK(LUNT,FILNAM,LUN,NX,NY,NZ,
     &                     NSTACK,ITYPE,DISP(1:1),IRTFLG)

        ELSE
C          WANT TO ACCESS A FILE BASED IMAGE STACK
           NSTACK = MAXIM
           CALL OPENSTK(LUNT,FILNAM,LUN,NX,NY,NZ,
     &                  NSTACK,ITYPE,DISP(1:1),IRTFLG)

        ENDIF

C----------------------------------------

C       RETURN IF THERE IS ANY ERROR OPENING FILE IN OPEN*
        IF (IRTFLG .NE. 0) RETURN

        IF ((DISP(1:1) == 'O'  .OR. 
     &       DISP(1:1) == 'Z'  .OR. 
     &       DISP(1:1) == 'E') .AND.
     &          ITYPE < 0 .AND. .NOT. FOUROK) THEN
C          CAN NOT USE EXISTING FOURIER FILE
           CALL ERRT(101,'OPERATION DOES NOT ACCEPT FOURIER FILES',NE)
           IRTFLG = 2
           RETURN

        ELSEIF (.NOT. OPSTKNOAT .AND. 
     &          MAXIM == 0 .AND. NSTACK >= 0) THEN
C          THIS OPERATION DOES NOT ACCEPT WHOLE STACKS 
           CALL ERRT(101,'OPERATION DOES NOT WORK ON WHOLE STACKS',NE)
           IRTFLG = 4
           RETURN
        ENDIF

        IFORM = ITYPE
d309 1
a309 2
C       RETURN NSTACK IN MAXIM 
        MAXIM = NSTACK
@


1.52
log
@KEEPEXT ../file.ext  bug  for 'CP'
@
text
@d23 1
a23 1
C=* Email: spider@@wadsworth.org                                        *
@


1.51
log
@cosmetic
@
text
@d14 3
d142 1
a142 2
        LOGICAL ::           ASKNAM,FOUROK,OPSTKNOAT,KEEPEXT

d155 5
a159 2
        KEEPEXT =  (KEEPEXT .AND. .NOT. ASKNAM .AND.
     &             (INDEX(FILNAM,'.') > 0) )
d218 1
a218 1
          !write(6,*) ' opfilec, openfil returned irtflg:',irtflg,filnam
@


1.50
log
@==, nsam --> nx
@
text
@d11 3
a13 3
C                          REMOVED IRTFLG INPUT    APR 04 ARDEAN LEITH
C                          DISP 'B'                APR 04 ARDEAN LEITH
C                          FOURIER ERRT            DEC 10 ARDEAN LEITH
d18 1
a18 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d65 3
a67 3
C        NX       IMAGE SIZE                             (SENT OR RET)
C        NY       IMAGE SIZE                             (SENT OR RET)
C        NZ     IMAGE SIZE                             (SENT OR RET)
d238 1
@


1.49
log
@comment
@
text
@d36 1
a36 1
C  OPFILEC(LUNT,ASKNAM,FILNAM,LUN,DISPT,NSAM,NROW,ITYPE,NSLICE,
d57 1
a57 1
C                   'N'  -   WANT NEW FILE. NSAM, NROW, NSLICE, AND
d60 1
a60 1
C                            NSAM, NROW, NSLICE, AND ITYPE MUST 
d65 3
a67 3
C        NSAM       IMAGE SIZE                             (SENT OR RET)
C        NROW       IMAGE SIZE                             (SENT OR RET)
C        NSLICE     IMAGE SIZE                             (SENT OR RET)
d93 2
a94 2
C    CODING:   BASED ON PARAMETERS NSAM,NROW, & NSLICE A
C              NEW FILE IS OPENED WITH IREC RECORDS, EACH NSAM*4 
d112 1
a112 2
C
C                                                          
d132 1
a132 1
     &                  NSAM,NROW,NSLICE,MAXIM,PROMPT,FOUROK,IRTFLG)
d137 3
a139 3
        CHARACTER (LEN=*) ::  FILNAM,PROMPT,DISPT
        CHARACTER (LEN=1) ::  NULL,DSP,DISP
        LOGICAL ::            ASKNAM,FOUROK,OPSTKNOAT,KEEPEXT
d141 1
a141 1
	NULL     = CHAR(0)
d145 1
a145 1
        IF (DISP(1:1) .EQ. 'B') DISP = 'U'
d147 1
a147 1
        LENP = LEN(PROMPT)
d149 1
a149 1
        OPSTKNOAT = (PROMPT(LENP-1:LENP) .EQ. '~7')
d152 3
a154 1
        KEEPEXT = (PROMPT(LENP-1:LENP) .EQ. '~9')
d159 2
a160 2
        IF (LUN .LE. 0 .OR. LUN .GT. 100) THEN
           CALL ERRT(101,'PGM. ERROR: LUN MUST BE 1...100',NDUM)
d167 1
a167 1
           IF (IRTFLG .EQ. -1) RETURN
d178 1
a178 2
           IF (DISPT(1:1) .EQ. 'B') NBUFSIZT = HUGE(NBUFSIZT)

d180 1
a180 1
           !write(6,*)'   calling opench with nbufsizt: ',NBUFSIZT
d182 1
a182 1
           CALL OPENCHK(NSAM,NROW,NSLICE,ITYPE,NBUFSIZT,IRTFLGT)
d203 3
a205 2
        IRTFLG      = 0
        IF (INDEX(FILNAM,'@@') .EQ. 0) THEN
d208 1
d210 1
a210 1
	   CALL OPENFIL(LUNT,FILNAM,LUN,NSAM,NROW,NSLICE,NSTACK,
d212 3
d219 1
a219 1
           IF (NSTACK .GE. 0 .AND. .NOT. OPSTKNOAT ) THEN 
d227 1
a227 1
        ELSEIF (FILNAM(1:1) .EQ. '_') THEN
d230 1
a230 1
            CALL OPENINSTK(LUNT,FILNAM,LUN,NSAM,NROW,NSLICE,
d236 1
a236 1
           CALL OPENSTK(LUNT,FILNAM,LUN,NSAM,NROW,NSLICE,
d245 4
a248 4
        IF ((DISP(1:1) .EQ. 'O'  .OR. 
     &       DISP(1:1) .EQ. 'Z'  .OR. 
     &       DISP(1:1) .EQ. 'E') .AND.
     &          ITYPE .LT. 0 .AND. .NOT. FOUROK) THEN
d255 1
a255 1
     &          MAXIM .EQ. 0 .AND. NSTACK .GE. 0) THEN
a266 1
        RETURN
@


1.48
log
@FOURIER ERRT msg
@
text
@d81 2
a82 1
C                       AT END:  ~7 CAN OPEN A STACK WITHOUT @@
d84 1
a84 1
C                                -6 KEEPS OLD DATE/TIME
@


1.47
log
@GPL_2010
@
text
@d5 9
a13 8
C                          REMOVED OPENALL CALL   JAN 99 ArDean Leith
C                          USED LUNHDR            FEB 99 ArDean Leith
C                          CAN KEEP EXTENSION     NOV 02 ArDean Leith
C                          INDEXED STACKS         JAN 03 ArDean Leith
C                          HEADER COPY            FEB 03 ArDean Leith
C                          OPFIL --> OPFILEC      FEB 03 ArDean Leith  
C                          REMOVED IRTFLG INPUT   APR 04 ARDEAN LEITH
C                          DISP 'B'               APR 04 ARDEAN LEITH
d79 1
a79 1
C                     >= 0 IS CURRENT MAX. IMAGE NO. FOR A BARE STACK             
d239 4
a242 3
        IF ((DISP(1:1) .EQ. 'O' .OR. DISP(1:1) .EQ. 'Z' .OR. 
     &           DISP(1:1) .EQ. 'E') .AND.
     &           ITYPE .LT. 0 .AND. .NOT. FOUROK) THEN
d244 1
a244 1
           CALL ERRT(2,'OPFIL ',NE)
@


1.46
log
@disp
@
text
@a13 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d15 5
a19 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d21 1
a21 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d26 1
a26 1
C=* This program is distributed in the hope that it will be useful,    *
d28 1
a28 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a29 1
C=*                                                                    *
d31 1
a31 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.45
log
@dispt
@
text
@d148 1
a148 1
        IF (DISP .EQ. 'B' ) DISP = 'U'
d181 3
@


1.44
log
@added disp b
@
text
@d39 1
a39 1
C  OPFILEC(LUNT,ASKNAM,FILNAM,LUN,DISP,NSAM,NROW,ITYPE,NSLICE,
d50 1
a50 1
C        DISP       CHARACTER CONTAINING ONE OF THE               (SENT) 
d141 1
a141 1
        CHARACTER (LEN=1) ::  NULL,DSP
d147 1
a147 1
        DISP     = DISPT
@


1.43
log
@GPL License fixed
@
text
@d5 6
a10 6
C                          REMOVED OPENALL CALL JAN 99   ArDean Leith
C                          USED LUNHDR FEB 99            ArDean Leith
C                          CAN KEEP EXTENSION NOV 02     ArDean Leith
C                          INDEXED STACKS     JAN 03     ArDean Leith
C                          HEADER COPY        FEB 03     ArDean Leith
C                          OPFIL --> OPFILEC  FEB 03     ArDean Leith  
d12 1
d55 2
d134 1
a134 1
        SUBROUTINE OPFILEC(LUNT,ASKNAM,FILNAM,LUN,DISP,ITYPE,
d140 1
a140 1
        CHARACTER (LEN=*) ::  FILNAM,PROMPT,DISP
d145 4
a148 1
        NBUFSIZT = NBUFSIZ
d172 2
a173 1
        IF (DISP(1:1) .NE. 'O' .AND. DISP(1:1) .NE. 'Z' .AND.
d176 5
@


1.42
log
@NEWDAT bug
@
text
@d2 1
a2 1
C++*************************************************************************
d13 23
a35 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.41
log
@IRTFLG input removed
@
text
@d179 1
a179 1
     &                  ITYPE,DISP(1:1),NEWDAT,KEEPEXT,IRTFLG)
@


1.40
log
@lunara setting
@
text
@d11 1
d64 3
d68 1
a68 6
C        IRTFLG     ERROR FLAG (0 IS NORMAL)                  (SENT/RET)
C                   ON INPUT:
C                        87 CAN OPEN A STACK WITHOUT @@
C                         9 KEEPS INCOMING EXTENSION
C                        -9 KEEPS OLD DATE/TIME
C                   ON OUTPUT:
d122 1
a122 1
        LOGICAL ::            ASKNAM,FOUROK
d127 6
a132 4
C       CAN PASS NEGATIVE -9 IRTFLG TO OPEN* TO KEEP EXISTING DATE/TIME
C         VALUES WHEN OPENING NEW FILE
C       CAN PASS POSITIVE 87 IRTFLG TO OPEN* TO OPEN A STACK WITHOUT @@
        IRTFLGIN = IRTFLG
d134 1
a134 1
C       SET DEFAULT RETURN IRTFLG
d138 1
a138 1
           CALL ERRT(101,'*** PGM. ERROR: LUN MUST BE 1...100',NDUM)
d143 1
a143 2
C          SOLICIT FILE NAME, CAN KEEP EXTENSION IF IRTFLGIN == 9
           IF (IRTFLGIN .EQ. 9) IRTFLG = 9
d170 2
a171 1
        CALL LUNSETLUNS(LUN,0,0,LUN,0,IRTFLG)
a173 3
        IF (IRTFLGIN .LT. 0  .OR. 
     &      IRTFLGIN .EQ. 87 .OR. IRTFLGIN .EQ. 9) IRTFLG = IRTFLGIN

d179 1
a179 1
     &                  ITYPE,DISP(1:1),IRTFLG)
d184 1
a184 1
           IF (NSTACK .GE. 0 .AND. IRTFLGIN .NE. 87) THEN 
d218 1
a218 1
        ELSEIF (IRTFLGIN .NE. 87 .AND. 
@


1.39
log
@notes
@
text
@d169 2
a170 2
C       MAKE SURE THE STACK OFFSET IS ALWAYS ZEROED
        CALL LUNSETLUNSTK(LUN,0,IRTFLG)
@


1.38
log
@added parameter
@
text
@d5 6
a10 6
C                          REMOVED OPENALL CALL JAN 99 -- ArDean Leith
C                          USED LUNHDR FEB 99          -- ArDean Leith
C                          CAN KEEP EXTENSION NOV 02   -- ArDean Leith
C                          INDEXED STACKS     JAN 03   -- ArDean Leith
C                          HEADER COPY        FEB 03   -- ArDean Leith
C
d20 2
a21 2
C  OPFILEC(LUNT,ASKNAM,FILNAM,LUN,DISP,NSAM,NROW,NSLICE,MAXIM,PROMPT,
C          FOUROK,IRTFLG)
d33 2
a34 2
C                     'O' -  FILE IS ASSUMED TO EXIST.  NSAM AND
C                            NROW AND HEADER INFO (IN COMMON) ARE 
d36 3
a38 5
C                   'Z/E' -  THE FILE IS ASSUMED TO EXIST; NSAM AND
C                            NROW AND HEADER INFO (IN COMMON) ARE 
C                            RETURNED TO THE CALLING PROGRAM.
C                            IF FILE DOES NOT EXIST THEN BATCH DOES
C                            NOT STOP!!! (ONLY DIFFERENCE FROM 'O'). 
d40 1
a40 1
C                            ITYPE ARE SENT.
d42 2
a43 2
C                            NON-ZERO NSAM & NROW VALUES HAVE TO BE 
C                            SENT.  IF THE FILE ALREADY EXISTS, IT 
d46 1
a46 1
C        ITYPE      IFORM FOR FILE                            (SENT/RET) 
d98 2
a99 2
C                     (not stack)            (file)
C     OPFILE  ------> OPFIL  --------------> OPENFIL -------->
a111 1
C        1         2         3         4         5         6         7
@


1.37
log
@return on error before            IF (NSTACK .GE. 0 .AND. IRTFLGIN .NE. 87) THEN
,
@
text
@d4 1
a4 1
C OPFIL.F                  AUTHOR: ArDean Leith                        
d9 1
d13 1
a13 1
C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
d20 2
a21 2
C  OPFIL(ASKNAM,FILNAM,LUN,DISP,NSAM,NROW,NSLICE,MAXIM,PROMPT,
C        FOUROK,IRTFLG)
d27 1
d42 1
a42 1
C                            IFORM ARE SENT.
d48 1
d87 1
a87 1
C              IFORM (TYPE)  FILE TYPE SPECIFIER.           (SENT/RET.)
d118 2
a119 2
        SUBROUTINE OPFIL(ASKNAM,FILNAM,LUN,DISP,NSAM,NROW,NSLICE,
     &                   MAXIM,PROMPT,FOUROK,IRTFLG)
d137 1
a137 1
        IRTFLG   = 1
d139 5
d155 2
a156 4
           CALL OPENCHK(NSAM,NROW,NSLICE,IFORM,NBUFSIZT,IRTFLGT)
           IF (IRTFLGT .NE. 0) THEN
              RETURN    
           ENDIF
a159 5
        IF (LUN .LE. 0 .OR. LUN .GT. 100) THEN
           CALL ERRT(101,'*** PGM. ERROR: LUN MUST BE 1...100',NDUM)
           RETURN
        ENDIF

d164 1
a164 1
C       PUT FILENAME AND DSP IN THE HEADER OBJECT
d168 1
a168 1
C       PUT ISBARE IN THE HEADER OBJECT
d183 2
a184 2
	   CALL OPENFIL(FILNAM,LUN,NSAM,NROW,NSLICE,NSTACK,
     &                  IFORM,DISP(1:1),IRTFLG)
d200 2
a201 2
            CALL OPENINSTK(FILNAM,LUN,NSAM,NROW,NSLICE,
     &                     NSTACK,IFORM,DISP(1:1),IRTFLG)
d206 2
a207 2
           CALL OPENSTK(FILNAM,LUN,NSAM,NROW,NSLICE,
     &                  NSTACK,IFORM,DISP(1:1),IRTFLG)
d217 1
a217 1
     &           IFORM .LT. 0 .AND. .NOT. FOUROK) THEN
d230 2
@


1.36
log
@indexed stacks
@
text
@d184 2
@


1.35
log
@can keep extension
@
text
@d8 1
d19 2
a20 2
C  OPFIL(ASKNAM,FILNAM,LUN,DISP,NSAM,NROW,NSLICE,MAXIM,PROMPT,FOUROK,
C        ,IRTFLG)
d50 11
a60 8
C                     0 ON INPUT IS FOR SPECIFIC IMAGE            (SENT)
C                    >0 ON INPUT WITH DISP = "N" IS MAXIM         (SENT)
C                        (MAXIM NOT IMPLEMENTED YET)                              
C                    +1 ON INPUT ALLOWS WHOLE STACK OPERATION     (SENT)                         
C                    -1 ON INPUT ALLOWS WHOLE STACK OPERATION     (SENT)                         
C                    -2 RETURNED IS NON-STACK IMAGE               (RET.)
C                    -1 RETURNED IS STACKED IMAGE                 (RET.)
C                    >= 0 RETURNED IS BARE-STACK SIZE             (RET.) 
d64 10
a73 9
C                    87 ON INPUT: CAN OPEN A STACK WITHOUT @@
C                    88 ON INPUT: CAN OPEN A MALFORMED STACK
C                     9 ON INPUT: KEEPS INCOMING EXTENSION
C                    -9 ON INPUT: KEEPS OLD DATE/TIME
C                    -1 ON OUTPUT GOTO PREVIOUS QUESTION
C                     0 ON OUTPUT NORMAL RETURN
C                     2 ON OUTPUT CAN'T USE AN EXISTING FOURIER FILE
C                     3 ON OUTPUT NO @@ ON A BARE STACK FILE
C                     4 ON OUTPUT OPERATION DOESN'T WORK ON WHOLE STACKS
d121 3
a123 1
        COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100)
a124 4
        CHARACTER *(*)   FILNAM,PROMPT,DISP
        CHARACTER        NULL,DSP
        LOGICAL          ASKNAM,FOUROK

d129 1
a129 1
C       VALUES WHEN OPENING NEW FILE
a130 1
C       CAN PASS POSITIVE 88 IRTFLG TO OPEN* TO OPEN A MALFORMED STACK
d172 1
a172 1
        LUNSTK(LUN) = 0
d175 1
a175 1
        IF (IRTFLGIN .LT. 0  .OR. IRTFLGIN .EQ. 88 .OR. 
d181 1
a181 1
           NSTACK = -2
d183 2
a184 1
     &                  IFORM,IMUSED,DISP(1:1),IRTFLG)
d196 2
a197 2
            NIMAG  = 0
            CALL OPENINSTK(FILNAM,LUN,NSAM,NROW,NSLICE,NIMAG,
d202 2
a203 1
           CALL OPENSTK(FILNAM,LUN,NSAM,NROW,NSLICE,NIMAG,
a204 1
C          RETURNED IRTFLG = 88 SIGNIFIES MALFORMED STACK
d210 1
a210 1
        IF (IRTFLG .NE. 0 .AND. IRTFLG .NE. 88) RETURN
@


1.34
log
@cosmetic
@
text
@d7 1
d62 1
d135 2
a136 1
C          SOLICIT FILE NAME
d173 2
a174 2
        IF (IRTFLGIN .LT. 0 .OR. IRTFLGIN .EQ. 88 .OR. 
     &      IRTFLGIN .EQ. 87) IRTFLG = IRTFLGIN
@


1.33
log
@irtflg from openchk
@
text
@d9 6
a14 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.      AUTHOR: J. FRANK    *
C * COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, RENSSELAER,  *
C * NY.  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH       *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED FOR    *
C * PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF HEALTH    *
C * RESEARCH INC.                                                      *
@


1.32
log
@added lunarb to common /lunara/
@
text
@d143 3
a145 1
           IF (IRTFLGT .NE. 0) RETURN
@


1.31
log
@lun 1...100 uses errt now
@
text
@d114 1
a114 1
        COMMON /LUNARA/  LUNARA(100),LUNSTK(100)
@


1.30
log
@removed openf comment
@
text
@d148 2
a149 2
           WRITE(NOUT,*)'*** PGM. ERROR: LUN MUST BE 1...100, SET TO 99'
           LUN = 99
@


1.29
log
@comment
@
text
@d88 4
a91 4
C                  OPENF(obsolete)                                       
C                      v                             (regular)
C    (gone    )        |       (not stack)            (file)
C     OPENFB ------> OPFIL  --------------> OPENFIL -------->
@


1.28
log
@comment
@
text
@d90 1
a90 1
C    (obsolete)        |       (not stack)            (file)
@


1.27
log
@*** empty log message ***
@
text
@d51 1
@


1.26
log
@lunsethdr used
@
text
@a109 3
C       NO NEED TO COMPILE WITH STATIC
CNO_SAVE

d111 1
d119 2
a120 3
        PARAMETER        (NBUFSIZ = 17008)

	NULL = CHAR(0)
d141 1
a141 1
           CALL OPENCHK(NSAM,NROW,NSLICE,IFORM,NBUFSIZ,IRTFLGT)
@


1.25
log
@merged with openall.f
@
text
@d4 1
a4 1
C OPFIL.F                  AUTHOR: ARDEAN LEITH                        
d6 1
d58 8
a65 2
C                    -9 ON INPUT KEEPS OLD DATE/TIME
C                    88 ON INPUT ALLOWS MALFORMED STACKS
d67 1
a67 1
C    CODING:   BASED ON NEW OR OLD PICTURE PARAMETERS NSAM,NROW, A
a114 1
        COMMON /STACKCOM/NSTACK
d118 1
a118 1
        CHARACTER        NULL
a121 1
        COMMON /IOBUF/   BUF(NBUFSIZ)
d125 1
a125 1
C       CAN PASS NEGATIVE -9 IRTFLG TO OPENFB TO KEEP EXISTING DATE/TIME
d127 2
a128 1
C       CAN PASS POSITIVE 88 IRTFLG TO OPENFB TO OPEN A MALFORMED STACK
d131 3
d140 1
d143 5
a147 1
C         NEED TO OPEN A NEW FILE
d149 3
a151 17
C         IF NSAM OR NROW IS NOT LOGICAL ASK FOR THEM
          IF (NSAM .LE. 0 .OR. NROW .LE. 0) THEN
C            NEED TO FIND NSAM & NROW FOR NEW FILE
             CALL RDPRMI(NSAM,NROW,NLOOP,ILOOP,
     &                   'ENTER DIMENSIONS (NSAM,NROW)')
          ENDIF
          IF (NROW .LE. 0) NROW = NSAM

          IF (IFORM .EQ. 3 .AND. NSLICE .LE. 0) THEN
C            NEED TO INQUIRE AS TO NSLICE
             CALL RDPRMI(NSLICE,NDUM,NLOOP,ILOOP,
     &                  'ENTER NUMBER OF SLICES (NSLICE)')

          ELSEIF (IFORM .EQ. 1 .AND. NSLICE .LE. 0) THEN
C            MAKE SURE NSLICE IS REASONABLE
             NSLICE = 1
          ENDIF
d154 11
a164 1
C       OPEN THE FILE, USES IOBUF BUF HERE NOW, NOT UNLABELED COMMON!
d168 1
d170 2
a171 1
        IF (IRTFLGIN .LT. 0 .OR. IRTFLGIN .EQ. 88) IRTFLG = IRTFLGIN
d177 2
a178 6
	   CALL OPENFIL(BUF,FILNAM,LUN,NSAM,NROW,NSLICE,NSTACK,
     &                  IMUSED,DISP(1:1),IRTFLG)
           IF (NSTACK .GE. 0 .AND. IRTFLGIN .EQ. 88) THEN 
C             BARE STACK REFERENCE ALLOWED WITHOUT '@@' FOR ST
              IRTFLG = 3
              IF (IRTFLGIN .EQ. 88) IRTFLG = 0
d180 3
a182 2
           ELSEIF (NSTACK .GE. 0) THEN 
C             BARE STACK REFERENCE NOT ALLOWED WITHOUT '@@'
d185 1
a185 1
              IF (IRTFLGIN .EQ. 88) IRTFLG = 0
a189 1
C           NOTE: OPENINSTK RETURNS NSTACK VALUE IN COMMON
d191 2
a192 2
            CALL OPENINSTK(BUF,FILNAM,LUN,NSAM,NROW,NSLICE,NIMAG,
     &                     IFORM,DISP(1:1),IRTFLG)
d196 3
a198 3
C          NOTE: OPENSTK RETURNS NSTACK VALUE IN COMMON
           CALL OPENSTK(BUF,FILNAM,LUN,NSAM,NROW,NSLICE,NIMAG,
     &                  IFORM,DISP(1:1),IRTFLG)
d203 2
a204 7
        IF (IRTFLG .EQ. 88) THEN
C          OPENING MALFORMED STACK FOR USE IN "CP FIX"
           RETURN

        ELSEIF (IRTFLGIN .EQ. 88 .AND. IRTFLG .EQ. 3) THEN
C          ALLOWS OPENING STACK WITH @@ FOR USE IN "ST"
           RETURN
d206 6
a211 2
        ELSEIF (IRTFLG .EQ. 1 .OR. IRTFLG. EQ. 3) THEN
C          ERROR OPENING FILE -- OPEN ERROR
d214 2
a215 13
        ELSEIF (IRTFLG .EQ. 0) THEN
C          FILE OPENED OK, CHECK FOR EXISTING FOURIER OK

           IF ((DISP(1:1) .EQ. 'O' .OR. DISP(1:1) .EQ. 'Z' .OR. 
     &          DISP(1:1) .EQ. 'E') .AND.
     &          IFORM .LT. 0 .AND. .NOT. FOUROK) THEN
C             CAN NOT USE AN EXISTING FOURIER FILE
              CALL ERRT(2,'OPFIL ',NE)
              IRTFLG = 1
              RETURN  
           ENDIF

        ELSEIF (MAXIM .EQ. 0 .AND. NSTACK .GE. 0) THEN
d218 1
a218 1
           IRTFLG = 1
d222 2
a223 3
C       RETURN NSTACK IN MAXIM ONLY IF EVERYTHING IS OK
        MAXIM   = NSTACK
        IRTFLG  = 0
@


1.24
log
@can open stack without @@ if irtflg = 88
@
text
@d4 2
a5 1
C OPFIL.F                                         AUTHOR: ARDEAN LEITH                        
d80 15
a94 15
C         OPENF                                        
C          v                                         (regular)
C          |                    (not stack)            (file)
C         OPFIL ---> OPENALL  --------------> OPENFIL -------->
C          |            |                      |
C          ^            |                      `----------> INLNBUF
C         OPENFB        |                        (inline)   OPENINLN
C                       |                        (file  )
C                       |
C                       |
C                       |    (inline stack)
C                       |-------------------> OPNINSTK -->      
C                       |
C                       |    (file stack)
C                       ` ------------------>  OPENSTK --> OPENFIL -->
d109 1
a123 2
        NF       = 0
        IF (IRTFLG .LT. 0 .OR. IRTFLG .EQ. 88) NF = IRTFLG
a154 1
        CALL OPENALL(BUF,FILNAM,LUN,NSAM,NROW,NSLICE,DISP,NF)
d156 41
a196 3
        IF (NF .EQ. 88) THEN
C          OPENING MALFORMED STACK FOR USE IN "CP FIX" 
           IRTFLG = NF
d199 2
a200 3
        ELSEIF (IRTFLGIN .EQ. 88 .AND. NF .EQ. 3) THEN
C          ALLOWS OPENING STACK WITH @@ FOR USE IN "ST" 
           IRTFLG = 0
d203 1
a203 1
        ELSEIF (NF .EQ. 1 .OR. NF .EQ. 3) THEN
a204 1
           IRTFLG = NF
d207 1
a207 1
        ELSEIF (NF .EQ. 2) THEN
d226 1
a226 1
C       RETURN NSTACK
@


1.23
log
@trap for nslice = 0 input for iform = 1
@
text
@d121 2
a122 1
        NF = 0
d162 6
a167 1
        ELSEIF (NF .EQ. 1) THEN
@


1.22
log
@iobuf size is now 17008
@
text
@d146 4
@


1.21
log
@used openall to replace openfb
@
text
@d113 1
a113 1
        PARAMETER        (NBUFSIZ = 17000)
@


1.20
log
@needed disp = z test
@
text
@d15 1
a15 1
C  OPFIL(ASKNAM,FILNAM,LUN,DISP,NSAM,NROW,NSLICE,NSTACKT,PROMPT,FOUROK,
d18 1
a18 1
C  PURPOSE:   SOLICITS FILE NAME AND OPENS FILE
d20 38
a57 16
C  PARAMETERS: ASKNAM            LOGICAL FLAG TO QUERY FILE NAME   (SENT) 
C              FILNAM            FILENAME (WITOUT EXTENSION)   (SENT/RET)
C              LUN               UNIT TO OPEN FILE ON              (SENT)
C              DISP              SEE OPENFB FOR OPTIONS            (SENT)
C              NSAM,NROW,NSLICE  IMAGE SIZE                    (SENT/RET)
C              NSTACKT           STACK INDICATOR               (SENT/RET)
C                                0 ON INPUT IS FOR SPECIFIC IMAGE
C                                -2 RETURNED IS NON-STACK IMAGE
C                                -1 RETURNED IS STACKED IMAGE
C                                >= 0 RETURNED IS BARE-STACK SIZE  
C              PROMPT            PROMPT                            (SENT)
C              FOUROK            CAN USE EXISTING FOURIER FILES?   (SENT)
C                   
C              IRTFLG            ERROR FLAG (0 IS NORMAL)      (SENT/RET)
C                                 -9 ON INPUT KEEPS OLD DATE/TIME
C                                 88 ON INPUT ALLOWS MALFORMED STACKS
d59 36
d100 1
a100 1
     &                   NSTACKT,PROMPT,FOUROK,IRTFLG)
d149 2
a150 2
C       OPEN THE FILE USE IOBUF BUF HERE NOW NOT UNLABELED COMMON
        CALL OPENFB(BUF,FILNAM,LUN,NSAM,NROW,DISP,NF,NSLICE)
d174 1
a174 1
        ELSEIF (NSTACKT .EQ. 0 .AND. NSTACK .GE. 0) THEN
d181 2
a182 1
        NSTACKT = NSTACK
@


1.19
log
@used iobuf instead of unlabeled common
@
text
@d72 2
a73 1
        IF (DISP(1:1) .NE. 'O') THEN
d107 2
a108 1
           IF (DISP(1:1) .EQ. 'O' .AND.
@


1.18
log
@bad extra nstackt setting removed
@
text
@d55 2
a56 1
        COMMON           BUF(1)
d77 3
a79 3
C           NEED TO FIND NSAM & NROW FOR NEW FILE
            CALL RDPRMI(NSAM,NROW,NLOOP,ILOOP,
     &                  'ENTER DIMENSIONS (NSAM,NROW)')
d84 3
a86 3
C           NEED TO INQUIRE AS TO NSLICE
            CALL RDPRMI(NSLICE,NDUM,NLOOP,ILOOP,
     &                 'ENTER NUMBER OF SLICES (NSLICE)')
d90 1
a90 2
        
C       OPEN THE FILE
d108 4
a111 4
C            CAN NOT USE AN EXISTING FOURIER FILE
             CALL ERRT(2,'OPFIL ',NE)
             IRTFLG = 1
             RETURN  
@


1.17
log
@for nstack retrieval of max img. number
@
text
@a91 1
        NSTACKT = NSTACK
@


1.16
log
@comments only
@
text
@d26 4
d89 1
a89 1

d114 6
d122 2
a123 1
        IRTFLG = 0
@


1.15
log
@positive 88 is flag
@
text
@d7 6
a12 6
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
d15 1
a15 1
C  OPFIL(ASKNAM,FILNAM,LUN,DISP,NSAM,NROW,NSLICE,IDUMMY,PROMPT,FOUROK,
d20 8
a27 10
C  PARAMETERS:  ASKNAM            LOGICAL FLAG TO ASK FOR FILE NAME
C               FILNAM            FILENAME (WITOUT EXTENSION)
C               LUN               UNIT TO OPEN FILE ON
C               DISP              'U' FILE MAY EXIST
C                                 'N' NEW FILE
C                                 (SOME OTHER DISP'S ARE ALSO USED)
C               NSAM,NROW,NSLICE  IMAGE SIZE 
C               NSTACK            STACK INDICATOR
C               PROMPT            PROMPT
C               FOUROK            CAN USE EXISTING FOURIER FILES
d29 1
a29 1
C               IRTFLG            ERROR FLAG (0 IS NORMAL)
@


1.14
log
@nstack used
@
text
@d59 1
a59 1
C       CAN PASS NEGATIVE 88 IRTFLG TO OPENFB TO OPEN A MALFORMED STACK
@


1.13
log
@used openfb now
@
text
@d27 1
a27 1
C               IDUMMY            UNUSED (TOO MANY PROBLEMS WITH IFORM)
d40 1
a40 1
     &                   IDUMMY,PROMPT,FOUROK,IRTFLG)
d47 1
a47 3
        CHARACTER *(*)  FILNAM,PROMPT,DISP
        CHARACTER       NULL
        LOGICAL         ASKNAM,FOUROK
d49 3
a51 1
        COMMON          BUF(1)
d53 2
d90 1
@


1.12
log
@R removed
@
text
@d20 2
a21 2
C  PARAMETERS:  ASKNAM            LOGICAL FALG TO ASK FOR FILE NAME
C               FILNAM            FILENAME
d29 1
a29 1
C               FOUROK            CAN USE EXIISTING FOURIER FILES
d33 1
d42 3
d51 2
d55 1
a55 1
C       CAN PASS NEGATIVE -9 IRTFLG TO OPENF TO KEEP EXISTING DATE/TIME
d57 1
a57 1

d59 1
a59 1
        IF (IRTFLG .LT. 0) NF = IRTFLG
d87 6
a92 1
        CALL OPENF(FILNAM,LUN,NSAM,NROW,DISP,NF,NSLICE) 
d94 1
a94 1
        IF (NF .EQ. 1) THEN
d96 1
a96 1
           IRTFLG = 1
@


1.11
log
@comments
@
text
@d61 1
a61 1
        IF (DISP(1:1) .NE. 'O' .AND. DISP(1:1) .NE. 'R') THEN
d91 1
a91 1
           IF ((DISP(1:1) .EQ. 'O' .OR. DISP(1:1) .EQ. 'R') .AND.
@


1.10
log
@added nrow default to nsam (if nrow= 0)
@
text
@d4 1
a4 1
C OPFIL.FOR                        
d6 8
a13 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
a23 1
C                                 'R' READ-ONLY
d25 1
@


1.9
log
@disp * now
@
text
@d71 1
@


1.8
log
@moved nf=-9 to fix bug
@
text
@d44 2
a45 2
        CHARACTER *(*)  FILNAM,PROMPT
        CHARACTER       NULL,DISP
d62 1
a62 1
        IF (DISP .NE. 'O' .AND. DISP .NE. 'R') THEN
d91 1
a91 1
           IF ((DISP .EQ. 'O' .OR. DISP .EQ. 'R') .AND.
@


1.7
log
@can keep old date/time with irtflg , 0
@
text
@d28 1
a28 1
C               IDUMMY            UNUSED (TOO many problems with iformt)
d33 1
d50 6
a80 2
        NF = 0
        IF (IRTFLG .LT. 0) NF = IRTFLG
a84 1
           CALL ERRT(4,'OPFIL ',NE)
@


1.6
log
@used iform from cmblock not iformt in praameters
@
text
@a48 1

d74 2
@


1.5
log
@went back to pre iform change
@
text
@d16 1
a16 1
C  OPFIL(ASKNAM,FILNAM,LUN,DISP,NSAM,NROW,NSLICE,IFORM,PROMPT,FOUROK,
d28 1
a28 1
C               IFORM             IMAGE FORMAT (NEEDED ON NEW FILES)
d39 1
a39 1
     &                   IFORMT,PROMPT,FOUROK,IRTFLG)
d66 1
a66 1
          IF (IFORMT .EQ. 3 .AND. NSLICE .LE. 0) THEN
d87 2
a88 2
     &          IFORMT .LT. 0 .AND. .NOT. FOUROK) THEN
C            CAN NOT USE A EXISTING FOURIER FILE
@


1.4
log
@iform was not set from iformt
@
text
@d16 1
a16 1
C  OPFIL(ASKNAM,FILNAM,LUN,DISP,NSAM,NROW,NSLICE,IFORMT,PROMPT,FOUROK,
d28 1
a28 1
C               IFORMT            IMAGE FORMAT (NEEDED ON NEW FILES)
a74 1
        IFORM = IFORMT
@


1.3
log
@altered prompts for size
@
text
@d16 1
a16 1
C  OPFIL(ASKNAM,FILNAM,LUN,DISP,NSAM,NROW,NSLICE,IFORM,PROMPT,FOUROK,
d28 1
a28 1
C               IFORM             IMAGE FORMAT (NEEDED ON NEW FILES)
a40 1
#ifdef SP_UNIX
a41 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d75 1
@


1.2
log
@cpp_lines_added
@
text
@d67 1
a67 1
     &                  'ENTER DIMS NSAM,NROW')
d72 2
a73 1
            CALL RDPRMI(NSLICE,NDUM,NLOOP,ILOOP,'NSLICE')
@


1.1
log
@Initial revision
@
text
@d41 3
d45 1
@
