head	1.19;
access;
symbols
	pre_mrcs:1.19
	healthdept_2018:1.19
	pre_getangas:1.17
	GPL2010:1.17
	pre_GPL2010:1.16
	pre_var_equation:1.16
	pre_fftwrings:1.16
	pre_opfiles:1.16
	src:1.16
	best-code:1.16
	x-named-regs:1.16
	x:1.16
	v13-00:1.16
	pre_GPL:1.14
	prec_CA:1.14
	noindx:1.14
	Bproc:1.13
	oct21:1.12
	last77:1.11;
locks; strict;
comment	@c @;


1.19
date	2018.10.03.14.34.06;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2013.05.01.15.40.50;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2010.06.24.13.25.41;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.17.20.07.15;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.17.18.02.02;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2001.10.15.12.40.34;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.03.06.20.27.14;	author bimal;	state Exp;
branches;
next	1.12;

1.12
date	99.06.04.21.02.17;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	97.10.06.20.43.45;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	97.04.24.21.22.40;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	97.02.14.19.22.05;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	96.10.15.20.18.17;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	96.06.13.14.37.48;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	95.03.02.15.14.12;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	95.01.27.18.18.07;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.01.27.15.34.12;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.01.26.14.12.33;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.12.05.21.32.32;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.48.58;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.19
log
@email_health_dept
@
text
@C++*********************************************************************
C
C FMR_2.F  should be rewritten!!
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C  For order of elements see fmr_1.
C
C CALLERS: crsm_2.f
C             SHOULD BE REPLACED!! BUT NOT WORTH THE EFFORT??
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

#ifdef SP_MP
        SUBROUTINE  FMR_2(X,NX,NY,DUMMY,INV)

        PARAMETER (LENBUF=8200)
        DIMENSION  X(NX,NY),WORK(LENBUF),DUMMY(*)
        LOGICAL*1  IFND

        IF (MAX(NX,2*NY) > LENBUF)  THEN
           CALL  ERRT(6,' FMR_2 ',NE)
           INV = 0
           RETURN
        ENDIF
#else

        SUBROUTINE  FMR_2(X,NX,NY,WORK,INV)
        DIMENSION   X(NX,NY),WORK(*)
        LOGICAL*1   IFND
#endif

        IFND = MOD(NX,2).EQ.0

        IF (IFND)  THEN
           LBD=2
        ELSE
           LBD=1
        ENDIF

        INS=INV*NX

C       work(max0(NX,2*NY))

        IF (INV.GE.0)  THEN
c$omp      parallel do private(i,work),shared(invt) 
           DO I=1,NY
              INVT=INV
              CALL  FMR_1(X(1,I),NX,WORK,INVT)
           ENDDO

           IF (INVT.LE.0)  THEN
              INV=INVT
              RETURN
           ENDIF
        ENDIF

c$omp   parallel do  private(i,j,work),shared(invt) 
        DO I=1,LBD
           DO J=1,NY
              WORK(NY+J)=X(I,J)
           ENDDO

           INVT = INV
           CALL  FMR_1(WORK(NY+1),NY,WORK,INVT)

           DO J=1,NY
              X(I,J)=WORK(NY+J)
           ENDDO
        ENDDO

        IF (INVT .EQ. 0)  THEN
           INV = 0
           RETURN
        ENDIF
c$omp   parallel do  private(i),shared(invt) 
        DO I=3,NX-1,2
           INVT = INS
           CALL FFTMCF(X(I,1),X(I+1,1),NY,NY,NY,INVT)
        ENDDO

        IF (INVT .EQ. 0)  THEN
           INV = 0
           RETURN
        ENDIF

        IF (.NOT.IFND)  CALL FFTMCF (X(NX,1),X(2,1),NY,NY,NY,INS)
        IF (INV .EQ. 1) RETURN

C       NORMALIZE FOR INVERSE
        Q = 1.0 / FLOAT(NY)

c$omp   parallel do  private(j,i) 
        DO J=1,NY
           DO I=LBD+1,NX
              X(I,J)=X(I,J)*Q
           ENDDO
        ENDDO

c$omp   parallel do  private(i,work),shared(invt) 
        DO I=1,NY
           INVT = INV
           CALL FMR_1(X(1,I),NX,WORK,INVT)
        ENDDO

        IF (INVT .LE. 0)  INV = INVT

        END
@


1.18
log
@cosmetic and comments
@
text
@d3 1
a3 1
C FMR_2.F
d11 1
a11 1
C=* Email: spider@@wadsworth.org                                        *
@


1.17
log
@GPL_2010
@
text
@d28 3
a30 2
CC IMAGE_PROCESSING_ROUTINE                                                                     
C        0         2         3         4         5         6         7 
d35 1
a35 1
        SUBROUTINE  FMR_2(X,NSAM,NROW,DUMMY,INV)
d38 1
a38 1
        DIMENSION  X(NSAM,NROW),WORK(LENBUF),DUMMY(*)
d41 1
a41 1
        IF (MAX0(NSAM,2*NROW).GT.LENBUF)  THEN
d47 3
a49 2
        SUBROUTINE  FMR_2(X,NSAM,NROW,WORK,INV)
        DIMENSION   X(NSAM,NROW),WORK(*)
d53 2
a54 1
        IFND=MOD(NSAM,2).EQ.0
a59 1
        INS=INV*NSAM
d61 3
a63 1
C       work(max0(nsam,2*nrow))
d67 1
a67 1
           DO I=1,NROW
d69 1
a69 1
              CALL  FMR_1(X(1,I),NSAM,WORK,INVT)
d71 1
d80 2
a81 2
           DO J=1,NROW
              WORK(NROW+J)=X(I,J)
d83 1
d85 4
a88 3
           CALL  FMR_1(WORK(NROW+1),NROW,WORK,INVT)
           DO J=1,NROW
              X(I,J)=WORK(NROW+J)
d91 3
a93 2
        IF (INVT.EQ.0)  THEN
           INV=0
d97 3
a99 3
        DO I=3,NSAM-1,2
           INVT=INS
           CALL  FFTMCF(X(I,1),X(I+1,1),NROW,NROW,NROW,INVT)
d101 3
a103 2
        IF (INVT.EQ.0)  THEN
           INV=0
d106 3
a108 3
        IF (.NOT.IFND)  CALL FFTMCF
     &          (X(NSAM,1),X(2,1),NROW,NROW,NROW,INS)
        IF (INV.EQ.1)  RETURN
d111 2
a112 1
        Q=1.0/FLOAT(NROW)
d114 2
a115 2
        DO J=1,NROW
           DO I=LBD+1,NSAM
d121 1
a121 1
        DO I=1,NROW
d123 1
a123 1
           CALL  FMR_1(X(1,I),NSAM,WORK,INVT)
d125 3
a127 1
        IF (INVT.LE.0)  INV = INVT
@


1.16
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.15
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a5 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
a29 1
C **************************************************************************
a35 1
C--************************************************************************
@


1.14
log
@cosmetic
@
text
@d1 1
d6 1
d8 1
d10 24
d40 1
d47 1
@


1.13
log
@cosmetic
@
text
@d3 1
a3 1
C $$ FMR_2.FOR
d20 1
a20 3
C
C $$ FMR_2.FOR
C
d23 1
d27 2
a28 2
C
        IF(MAX0(NSAM,2*NROW).GT.LENBUF)  THEN
d30 1
a30 1
           INV=0
d35 2
a36 2
        DIMENSION  X(NSAM,NROW),WORK(*)
        LOGICAL*1  IFND
d38 1
a38 1
C
d40 1
a40 1
        IF(IFND)  THEN
d46 6
a51 6
C
C  work(max0(nsam,2*nrow))
C
        IF(INV.GE.0)  THEN
c$omp parallel do private(i,work),shared(invt) 
           DO    I=1,NROW
d55 1
a55 1
           IF(INVT.LE.0)  THEN
d60 4
a63 3
c$omp parallel do  private(i,j,work),shared(invt) 
        DO    I=1,LBD
           DO    J=1,NROW
d66 1
a66 1
           INVT=INV
d68 1
a68 1
           DO    J=1,NROW
d72 1
a72 1
        IF(INVT.EQ.0)  THEN
d76 2
a77 2
c$omp parallel do  private(i),shared(invt) 
        DO    I=3,NSAM-1,2
d81 1
a81 1
        IF(INVT.EQ.0)  THEN
d85 1
a85 1
        IF(.NOT.IFND)  CALL FFTMCF
d87 2
a88 1
        IF(INV.EQ.1)  RETURN
d91 3
a93 3
c$omp parallel do  private(j,i) 
        DO    J=1,NROW
           DO    I=LBD+1,NSAM
d97 4
a100 3
c$omp parallel do  private(i,work),shared(invt) 
        DO    I=1,NROW
           INVT=INV
d103 1
a103 1
        IF(INVT.LE.0)  INV=INVT
@


1.12
log
@OpenMP
@
text
@d12 1
a12 1
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
d16 3
a18 1
C
d24 10
a33 10
	SUBROUTINE  FMR_2(X,NSAM,NROW,DUMMY,INV)
	PARAMETER (LENBUF=8200)
	DIMENSION  X(NSAM,NROW),WORK(LENBUF),DUMMY(*)
	LOGICAL*1  IFND
C
	IF(MAX0(NSAM,2*NROW).GT.LENBUF)  THEN
	CALL  ERRT(6,' FMR_2 ',NE)
	INV=0
	RETURN
	ENDIF
d35 3
a37 3
	SUBROUTINE  FMR_2(X,NSAM,NROW,WORK,INV)
	DIMENSION  X(NSAM,NROW),WORK(*)
	LOGICAL*1  IFND
d40 7
a46 7
	IFND=MOD(NSAM,2).EQ.0
	IF(IFND)  THEN
	LBD=2
	ELSE
	LBD=1
	ENDIF
	INS=INV*NSAM
d52 8
a59 7
	DO    I=1,NROW
        INVT=INV
 	CALL  FMR_1(X(1,I),NSAM,WORK,INVT)
	ENDDO
        IF(INVT.LE.0)  THEN
          INV=INVT
          RETURN
a60 1
	ENDIF
d62 13
a74 13
	DO    I=1,LBD
	DO    J=1,NROW
	WORK(NROW+J)=X(I,J)
	ENDDO
	INVT=INV
	CALL  FMR_1(WORK(NROW+1),NROW,WORK,INVT)
	DO    J=1,NROW
	X(I,J)=WORK(NROW+J)
	ENDDO
	ENDDO
	IF(INVT.EQ.0)  THEN
        INV=0
        RETURN
d77 7
a83 7
	DO    I=3,NSAM-1,2
	INVT=INS
        CALL  FFTMCF(X(I,1),X(I+1,1),NROW,NROW,NROW,INVT)
	ENDDO
	IF(INVT.EQ.0)  THEN
        INV=0
        RETURN
d85 5
a89 5
 	IF(.NOT.IFND)  CALL FFTMCF
     &		(X(NSAM,1),X(2,1),NROW,NROW,NROW,INS)
	IF(INV.EQ.1)  RETURN
C NORMALIZE FOR INVERSE
	Q=1.0/FLOAT(NROW)
d91 5
a95 5
	DO    J=1,NROW
	DO    I=LBD+1,NSAM
	X(I,J)=X(I,J)*Q
	ENDDO
	ENDDO
d97 4
a100 4
	DO    I=1,NROW
        INVT=INV
	CALL  FMR_1(X(1,I),NSAM,WORK,INVT)
	ENDDO
d102 1
a102 1
	END
@


1.11
log
@*** empty log message ***
@
text
@a36 1
CNO_SAVE	
d48 2
a49 2
         IF(INV.LT.0)  GOTO  2
c$doacross  local(i,work),share(invt) 
d55 2
a56 2
        INV=INVT
        RETURN
d58 2
a59 2
2	 CONTINUE 
c$doacross  local(i,j,work),share(invt) 
d74 1
a74 1
c$doacross  local(i),share(invt) 
d88 1
a88 1
c$doacross  local(j,i) 
d94 1
a94 1
c$doacross  local(i,work),share(invt) 
@


1.10
log
@had to modify previous version - optimization O3 failed
@
text
@d51 1
a51 1
	DO  10  I=1,NROW
d53 2
a54 1
 10	CALL  FMR_1(X(1,I),NSAM,WORK,INVT)
d61 4
a64 3
	DO  13  I=1,LBD
	DO  131  J=1,NROW
131	WORK(NROW+J)=X(I,J)
d67 4
a70 3
	DO  132  J=1,NROW
132	X(I,J)=WORK(NROW+J)
13	CONTINUE
d76 1
a76 1
	DO  14  I=3,NSAM-1,2
d78 2
a79 1
14       CALL  FFTMCF(X(I,1),X(I+1,1),NROW,NROW,NROW,INVT)
d90 5
a94 3
	DO  2002  J=1,NROW
	DO  2002  I=LBD+1,NSAM
2002	X(I,J)=X(I,J)*Q
d96 1
a96 1
	DO  20  I=1,NROW
d98 2
a99 1
20	CALL  FMR_1(X(1,I),NSAM,WORK,INVT)
@


1.9
log
@bug INVT fixed
@
text
@d22 1
a22 1
         SUBROUTINE  FMR_2(X,NSAM,NROW,DUMMY,INV)
d24 1
a24 1
         DIMENSION  X(NSAM,NROW),WORK(LENBUF),DUMMY(*)
d33 2
a34 2
         SUBROUTINE  FMR_2(X,NSAM,NROW,WORK,INV)
         DIMENSION  X(NSAM,NROW),WORK(*)
d49 1
a49 2
         IF(INV)  2,2,1
1       CONTINUE 
d61 7
a67 7
         DO  131  J=1,NROW
131      WORK(NROW+J)=X(I,J)
         INVT=INV
         CALL  FMR_1(WORK(NROW+1),NROW,WORK,INVT)
         DO  132  J=1,NROW
132      X(I,J)=WORK(NROW+J)
13      CONTINUE
d73 1
a73 1
         DO  14  I=3,NSAM-1,2
d76 1
a76 1
        IF(INVT.EQ.0)  THEN
d84 1
a84 1
         Q=1.0/FLOAT(NROW)
d86 9
a94 5
         DO  2002  J=1,NROW
         DO  2002  I=LBD+1,NSAM
2002     X(I,J)=X(I,J)*Q
	GOTO 1
         END
@


1.8
log
@parallel code fixed
@
text
@d76 1
a76 1
14       CALL  FFTMCF(X(I,1),X(I+1,1),NROW,NROW,NROW,INS)
@


1.7
log
@buffer increased to 8200
@
text
@d51 1
a51 1
c$doacross  local(i,work) 
d53 6
a58 4
         CALL  FMR_1(X(1,I),NSAM,WORK,INV)
         IF(INV.EQ.0)  RETURN
10       CONTINUE
	IF(INV.EQ.-1)  RETURN
d60 1
a60 1
c$doacross  local(i,j,work) 
d64 2
a65 2
         CALL  FMR_1(WORK(NROW+1),NROW,WORK,INV)
         IF(INV.EQ.0)  RETURN
d68 6
a73 2
13       CONTINUE
c$doacross  local(i) 
d75 1
d77 5
a81 1
	IF(.NOT.IFND)  CALL FFTMCF
@


1.6
log
@nosave moved
@
text
@d23 1
a23 1
	PARAMETER (LENBUF=4096)
@


1.5
log
@fixed
@
text
@a25 1
CNO_SAVE
d37 1
a37 1
	
@


1.4
log
@lenbuf increased
@
text
@d35 1
a35 1
         DIMENSION  X(NSAM,NROW),DUMMY(*)
@


1.3
log
@nosave mp
@
text
@d23 2
a24 1
         DIMENSION  X(NSAM,NROW),WORK(2048),DUMMY(*)
d28 1
a28 1
	IF(MAX0(NSAM,2*NROW).GT.2048)  THEN
@


1.2
log
@faster algorithm
@
text
@d21 12
d34 1
a34 1
         DIMENSION  X(NSAM,NROW),WORK(*)
d36 2
d50 3
a52 1
1        DO  10  I=1,NROW
d57 3
a59 1
2	DO  13  I=1,LBD
d67 1
d75 1
@


1.1
log
@Initial revision
@
text
@d14 1
a16 1
C
d23 9
d40 2
a41 2
         IF(MOD(NSAM,2))  11,11,12
11       DO  13  I=1,2
d49 1
a49 2
         INS=NSAM
         DO  14  I=3,NSAM,2
d51 5
a55 15
         RETURN
12       CONTINUE
         DO  121  J=1,NROW
121      WORK(NROW+J)=X(1,J)
         CALL  FMR_1(WORK(NROW+1),NROW,WORK,INV)
         IF(INV.EQ.0)  RETURN
         DO  122  J=1,NROW
122      X(1,J)=WORK(NROW+J)
         INS=NSAM
         DO  124  I=3,NSAM-2,2
124      CALL  FFTMCF(X(I,1),X(I+1,1),NROW,NROW,NROW,INS)
         INS=NSAM
         CALL  FFTMCF(X(NSAM,1),X(2,1),NROW,NROW,NROW,INS)
         RETURN
2        Q=1.0/FLOAT(NROW)
d57 1
a57 1
         DO  2002  I=3,NSAM
d59 1
a59 30
         IF(MOD(NSAM,2))  21,21,22
21       DO  23  I=1,2
         DO  231  J=1,NROW
231      WORK(NROW+J)=X(I,J)
         CALL  FMR_1(WORK(NROW+1),NROW,WORK,INV)
         IF(INV.EQ.0)  RETURN
         DO  232  J=1,NROW
232      X(I,J)=WORK(NROW+J)
23       CONTINUE
         INS=-NSAM
         DO  24  I=3,NSAM,2
24       CALL  FFTMCF(X(I,1),X(I+1,1),NROW,NROW,NROW,INS)
         GOTO  25
22       CONTINUE
         DO  2003  J=1,NROW
2003     X(2,J)=X(2,J)*Q
         DO  241  J=1,NROW
241      WORK(NROW+J)=X(1,J)
         CALL  FMR_1(WORK(NROW+1),NROW,WORK,INV)
         IF(INV.EQ.0)  RETURN
         DO  242  J=1,NROW
242      X(1,J)=WORK(NROW+J)
         INS=-NSAM
         DO  224  I=3,NSAM-2,2
224      CALL  FFTMCF(X(I,1),X(I+1,1),NROW,NROW,NROW,INS)
         CALL  FFTMCF(X(NSAM,1),X(2,1),NROW,NROW,NROW,INS)
25       DO  20  I=1,NROW
         CALL  FMR_1(X(1,I),NSAM,WORK,INV)
         IF(INV.EQ.0)  RETURN
20       CONTINUE
@
