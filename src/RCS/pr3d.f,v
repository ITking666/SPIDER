head	1.67;
access;
symbols
	pre_mrcs:1.67
	healthdept_2018:1.67
	pre_getangas:1.49
	GPL2010:1.48
	pre_GPL2010:1.47
	pre_var_equation:1.46
	pre_fftwrings:1.46
	pre_opfiles:1.46
	src:1.46
	best-code:1.46
	x-named-regs:1.46
	x:1.46
	v13-00:1.46
	pre_GPL:1.44
	prec_CA:1.42
	noindx:1.41
	Bproc:1.40
	oct21:1.33
	last77:1.31;
locks; strict;
comment	@c @;


1.67
date	2018.10.03.14.34.12;	author leith;	state Exp;
branches;
next	1.66;

1.66
date	2016.04.06.13.24.46;	author leith;	state Exp;
branches;
next	1.65;

1.65
date	2016.04.06.13.23.46;	author leith;	state Exp;
branches;
next	1.64;

1.64
date	2016.04.05.16.10.35;	author leith;	state Exp;
branches;
next	1.63;

1.63
date	2016.04.05.15.21.34;	author leith;	state Exp;
branches;
next	1.62;

1.62
date	2016.02.08.16.31.57;	author leith;	state Exp;
branches;
next	1.61;

1.61
date	2014.05.15.16.21.41;	author leith;	state Exp;
branches;
next	1.60;

1.60
date	2012.09.25.12.40.27;	author leith;	state Exp;
branches;
next	1.59;

1.59
date	2012.09.13.17.17.02;	author leith;	state Exp;
branches;
next	1.58;

1.58
date	2012.03.05.20.44.30;	author leith;	state Exp;
branches;
next	1.57;

1.57
date	2012.03.05.19.33.01;	author leith;	state Exp;
branches;
next	1.56;

1.56
date	2012.02.29.17.03.51;	author leith;	state Exp;
branches;
next	1.55;

1.55
date	2012.02.27.19.59.06;	author leith;	state Exp;
branches;
next	1.54;

1.54
date	2012.02.24.14.13.24;	author leith;	state Exp;
branches;
next	1.53;

1.53
date	2012.02.23.15.34.59;	author leith;	state Exp;
branches;
next	1.52;

1.52
date	2012.02.22.19.00.12;	author leith;	state Exp;
branches;
next	1.51;

1.51
date	2011.06.03.18.14.50;	author leith;	state Exp;
branches;
next	1.50;

1.50
date	2011.02.18.16.05.42;	author leith;	state Exp;
branches;
next	1.49;

1.49
date	2011.01.05.17.37.15;	author leith;	state Exp;
branches;
next	1.48;

1.48
date	2010.06.24.13.26.31;	author leith;	state Exp;
branches;
next	1.47;

1.47
date	2009.11.04.14.34.09;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2005.10.17.20.05.38;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2005.10.17.18.00.40;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2005.08.17.13.58.41;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2004.11.19.18.34.31;	author cyang;	state Exp;
branches;
next	1.42;

1.42
date	2003.02.20.19.53.43;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2002.03.11.14.07.56;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	2000.08.09.19.52.18;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2000.08.09.14.02.17;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2000.07.17.17.45.34;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2000.04.14.14.00.21;	author bimal;	state Exp;
branches;
next	1.36;

1.36
date	2000.02.28.19.04.53;	author bimal;	state Exp;
branches;
next	1.35;

1.35
date	2000.02.25.22.16.19;	author pawel;	state Exp;
branches;
next	1.34;

1.34
date	2000.02.03.15.37.31;	author bimal;	state Exp;
branches;
next	1.33;

1.33
date	99.04.09.21.33.36;	author pawel;	state Exp;
branches;
next	1.32;

1.32
date	99.04.08.16.51.51;	author pawel;	state Exp;
branches;
next	1.31;

1.31
date	98.11.06.16.09.22;	author pawel;	state Exp;
branches;
next	1.30;

1.30
date	98.10.27.17.50.53;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	98.02.12.16.28.31;	author pawel;	state Exp;
branches;
next	1.28;

1.28
date	97.10.24.21.32.03;	author hedget;	state Exp;
branches;
next	1.27;

1.27
date	97.10.10.18.58.58;	author pawel;	state Exp;
branches;
next	1.26;

1.26
date	97.08.07.15.37.15;	author pawel;	state Exp;
branches;
next	1.25;

1.25
date	96.09.06.13.54.40;	author pawel;	state Exp;
branches;
next	1.24;

1.24
date	96.09.04.15.20.03;	author pawel;	state Exp;
branches;
next	1.23;

1.23
date	96.06.28.15.24.50;	author ramani;	state Exp;
branches;
next	1.22;

1.22
date	96.04.04.15.19.38;	author pawel;	state Exp;
branches;
next	1.21;

1.21
date	96.01.19.15.20.50;	author ramani;	state Exp;
branches;
next	1.20;

1.20
date	96.01.05.18.52.18;	author ramani;	state Exp;
branches;
next	1.18;

1.18
date	95.12.21.18.11.06;	author ramani;	state Exp;
branches;
next	1.17;

1.17
date	95.09.06.18.57.28;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	95.08.09.13.53.25;	author mladjadj;	state Exp;
branches;
next	1.15;

1.15
date	95.07.28.12.50.01;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	95.07.27.18.02.49;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	95.07.26.20.24.46;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	95.07.13.19.19.50;	author ramani;	state Exp;
branches;
next	1.11;

1.11
date	95.06.27.20.16.27;	author mladjadj;	state Exp;
branches;
next	1.10;

1.10
date	95.06.22.18.53.15;	author mladjadj;	state Exp;
branches;
next	1.9;

1.9
date	95.01.18.17.26.39;	author ramani;	state Exp;
branches;
next	1.8;

1.8
date	95.01.17.19.26.23;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	94.12.21.14.19.41;	author ramani;	state Exp;
branches;
next	1.6;

1.6
date	94.12.20.16.18.28;	author ramani;	state Exp;
branches;
next	1.5;

1.5
date	94.12.01.14.12.49;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	94.11.28.10.55.49;	author ramani;	state Exp;
branches;
next	1.3;

1.3
date	94.11.28.09.43.22;	author ramani;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.09.01;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.51.26;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.67
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C PR3D.F           ADDED FOURIER INPUT             JUL 00 ARDEAN LEITH
C                  OPFILEC                         FEB 03 ARDEAN LEITH
C                  OUTPUT FORMAT, ERROR TRAP       NOV 09 ARDEAN LEITH
C                  OUTPUT FORMAT, SIZCHK           FEB 11 ARDEAN LEITH
C                  FSC                             FEB 12 ARDEAN LEITH
C                  MASK                            SEP 12 ARDEAN LEITH
C                  FSCCUT                          SEP 12 ARDEAN LEITH
C                  WANTSQRTS                       MAY 14 ARDEAN LEITH
C                  MASK WRITOUT                    FEB 16 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2016  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C PURPOSE:  CALCULATE 3-D PHASE RESIDUE OUTSIDE MISSING CONE, 
C           PR OF FOURIER RINGS(RADIUS, DIRECTION RELATIVE TO Z) AND 
C           OF FOURIER SHELLS (RADIUS). 
C
C OPERATIONS:  'RF 3' and 'FSC'
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE PR3D(FSCOP)

        IMPLICIT NONE
        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC' 
 
        LOGICAL               :: FSCOP

        CHARACTER(LEN=MAXNAM) :: FILNAM1,FILNAM2 ,FILNAMM

        REAL, ALLOCATABLE     :: AIMG(:,:,:),BIMG(:,:,:),EIMG(:,:,:)
        REAL, ALLOCATABLE     :: CSUM1(:), CSUM(:)
        REAL, ALLOCATABLE     :: PR(:,:), AMP(:,:), AVSUM(:,:)
        REAL, ALLOCATABLE     :: CSUM2(:)
        INTEGER, ALLOCATABLE  :: LR(:)

        REAL                  :: FSCCUT
        REAL                  :: SSANG, WI, PIXSIZ,FMAXSPFREQ
        REAL                  :: RADMASK
        LOGICAL               :: WANTSQRTS 

        CHARACTER(LEN=1)      :: SER
        CHARACTER(LEN=1)      :: NULL = CHAR(0)

        INTEGER               :: ICOMM,MYPID,MPIERR

        INTEGER               :: ITYPE1,NX1,NY1,NZ1,IRTFLG,NE,LSD1,INC 
        INTEGER               :: NX,ITYPE2,NX2,NY2,NZ2,LSD2 
        REAL                  :: UNUSED,SCALE1,SCALE2,FACT,DSCALE,Y1  
        INTEGER               :: LSD, NY, NZ, NOT_USED, NUMC 
        INTEGER               :: MWANT,ITYPE3,K,J,I,INV 
        REAL                  :: XCEN, YCEN, ZCEN, TNM, RADMASKSQI,EEE 
  
        INTEGER               :: MAXIM
        INTEGER, PARAMETER    :: NSCALE  = 20
        INTEGER, PARAMETER    :: LUN1    = 21
        INTEGER, PARAMETER    :: LUN2    = 22
        INTEGER, PARAMETER    :: LUNGP   = 23
        INTEGER, PARAMETER    :: LUNDOC  = 89
        INTEGER, PARAMETER    :: LUNMASK = 24

        CALL SET_MPI(ICOMM,MYPID,MPIERR)

        WANTSQRTS = (FSCOP == .TRUE.)

C       INPUT FIRST IMAGE
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNAM1,LUN1,'O',ITYPE1,
     &               NX1,NY1,NZ1,MAXIM,
     &               'FIRST INPUT VOLUME~',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (NZ1 < 2) THEN
C          ONLY FOR VOLUMES
           CALL ERRT(101,'OPERATION ONLY FOR VOLUMES',NE)
           GOTO 9998
        ELSEIF (ITYPE1 < 0) THEN
C          FOURIER INPUT FILE
           LSD1 = NX1
           NX   = NX1 - MOD(-ITYPE1,10)
        ELSE
C          REAL INPUT FILE
           LSD1 = NX1 + 2 - MOD(NX1,2)
           NX   = NX1
        ENDIF

C       INPUT SECOND IMAGE
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNAM2,LUN2,'O',ITYPE2,
     &               NX2,NY2,NZ2,MAXIM,
     &               'SECOND INPUT VOLUME~',.TRUE.,IRTFLG)

        IF (IRTFLG .NE. 0) THEN
           GOTO 9998
        ELSEIF (ITYPE2 < 0) THEN
C          SECOND FILE IS A FOURIER INPUT FILE
           LSD2 = NX2
        ELSE
           LSD2 = NX2 + 2 - MOD(NX2,2)
        ENDIF

        CALL SIZCHK(UNUSED,LSD1,NY1,NZ1,0,
     &                     LSD2,NY2,NZ2,0,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        LSD        = LSD1
        NY         = NY1  
        NZ         = NZ1
        PIXSIZ     = 1 
        FMAXSPFREQ = 0.5 / PIXSIZ
        WI         = 0.5
        RADMASK    = 0
        FSCCUT     = 0.5 

        IF (FSCOP) THEN 
           SCALE1 = 0.2     ! SCALE FACTOR1
           SCALE2 = 2.0     ! SCALE FACTOR2
           SER    = 'C'     ! CONE
           SSANG  = 90.0    ! MAX. TILT ANGLE
           FACT   = 3       ! FACTOR FOR NOISE COMPARISON

           IF (ITYPE1 > 0 .AND. ITYPE2 > 0) THEN
              CALL RDPRM2S(WI, RADMASK, NOT_USED, 
     &          'SHELL WIDTH (RECIPROCAL SPACE UNITS), MASKING RADIUS',
     &          IRTFLG)
           ELSE
              CALL RDPRM1S(WI, NOT_USED, 
     &          'SHELL WIDTH (RECIPROCAL SPACE UNITS)',IRTFLG)
           ENDIF
           IF (IRTFLG .NE. 0) GOTO 9999

           PIXSIZ = 1 
           CALL RDPRM2S(PIXSIZ, FSCCUT, NOT_USED, 
     &                 'VOXEL SIZE (A) & RESOLUTION CUTOFF',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

           FMAXSPFREQ = 0.5 / PIXSIZ

        ELSE 
           CALL RDPRM1S(WI, NOT_USED, 
     &        'SHELL WIDTH (RECIPROCAL SPACE UNITS)',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

           CALL RDPRM2S(SCALE1,SCALE2,NOT_USED,
     &                'SCALE FACTOR (LOWER,UPPER)',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

           CALL RDPRMC(SER,NUMC,.TRUE.,
     &                 'MISSING CONE/WEDGE ANGLE (C/W)',
     &                 NULL,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

           SSANG  = 90.0    ! MAX. TILT ANGLE

           CALL RDPRM1S(SSANG,NOT_USED,
     &       'MAXIMUM TILT ANGLE (90 FOR MOST SINGLE PARTICLE RECONS.)',
     &       IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

           IF (SER .NE. 'C' .AND. SER .NE. 'W') SSANG = 90.0

           FACT   = 3       ! DEFAULT FACTOR FOR NOISE COMPARISON
           CALL RDPRM1S(FACT,NOT_USED,
     &               'NOISE COMPARISON FACTOR',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999
        ENDIF

        DSCALE = (SCALE2-SCALE1) / FLOAT(NSCALE-1)


        Y1     = FLOAT(MAX(NX,NY,NZ))
        INC    = INT(Y1/WI) / 2+1

        ALLOCATE (AIMG(LSD,NY,NZ),
     &            BIMG(LSD,NY,NZ), 
     &            STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           MWANT = 2*LSD*NY*NZ  
           CALL ERRT(46,'PR3D; AIMG & BIMG',MWANT)
           GOTO 9999
        ENDIF

        CALL READV(LUN1,AIMG, LSD,NY,NX1,NY,NZ)
        CALL READV(LUN2,BIMG, LSD,NY,NX2,NY,NZ)

        IF (RADMASK > 0) THEN
C          SUPERGAUSSIAN MASKING WANTED

           XCEN       = (NX/2) + 1
           YCEN       = (NY/2) + 1
           ZCEN       = (NZ/2) + 1
	   TNM        = ALOG(1.0 / TINY(TNM))
           RADMASKSQI = 1.0 / (RADMASK**2)

           IF ( FCHAR(4:5) == 'MA' ) THEN
C            WANT MASK IMAGE OUTPUT
             MAXIM  = 0
             ITYPE3 = 3
             CALL OPFILEC(0,.TRUE.,FILNAMM,LUNMASK,'U',ITYPE3,
     &               NX,NY,NZ,MAXIM,
     &               'OUTPUT MASK VOLUME~',.FALSE.,IRTFLG)
             IF (IRTFLG .NE. 0) GOTO 9999

             ALLOCATE (EIMG(NX,NY,NZ), STAT=IRTFLG)
             IF (IRTFLG .NE. 0) THEN
                 MWANT = NX*NY*NZ  
                 CALL ERRT(46,'PR3D; EIMG',MWANT)
                 GOTO 9999
             ENDIF
           ENDIF

           DO K = 1,NZ
              DO J = 1,NY
                 DO I = 1,NX
	           EEE = 0.5 * ((I - XCEN) **2 * RADMASKSQI +
     &                          (J - YCEN) **2 * RADMASKSQI +
     &                          (K - ZCEN) **2 * RADMASKSQI)

	           IF (EEE  >= TNM) THEN
	              AIMG(I,J,K) = 0.0
	              BIMG(I,J,K) = 0.0
                      IF ( FCHAR(4:5) == 'MA' ) EIMG(I,J,K) = 0.0
	           ELSE  
	              EEE         = -0.5 * (2*EEE)**2
                      AIMG(I,J,K) = EXP(EEE) * AIMG(I,J,K)
                      BIMG(I,J,K) = EXP(EEE) * BIMG(I,J,K)
                      IF ( FCHAR(4:5) == 'MA' ) EIMG(I,J,K) = EXP(EEE)
	           ENDIF
                ENDDO
             ENDDO
           ENDDO
           IF ( FCHAR(4:5) == 'MA' ) THEN
C             WANT MASK IMAGE OUTPUT
              CALL WRTVOL(LUNMASK,NX,NY,1,NZ,EIMG,IRTFLG)
	      CLOSE(LUNMASK)
           ENDIF
        ENDIF

        IF (ITYPE1 > 0) THEN
C          FIRST INPUT FILE IS REAL SPACE, NOT FOURIER

           INV = 1
           CALL FMRS_3(AIMG,NX1,NY,NZ,INV)
           IF (INV == 0) THEN
              CALL ERRT(101,'FFT ERROR',NE)
              GOTO 9999
           ENDIF
        ENDIF
	
        IF (ITYPE2 > 0) THEN
C          SECOND INPUT FILE IS REAL SPACE, NOT FOURIER

           INV = 1
           CALL FMRS_3(BIMG,NX2,NY,NZ,INV)
           IF (INV == 0)THEN
              CALL ERRT(101,'FFT ERROR',NE)
              GOTO 9999
           ENDIF 
        ENDIF

        ALLOCATE(PR(NSCALE,INC), AMP(NSCALE,INC), CSUM1(INC),
     &           LR(INC),CSUM(INC),CSUM2(INC), AVSUM(NSCALE,INC),
     &           STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           MWANT = 3*NSCALE*INC + 4*INC
           CALL ERRT(46,'PR3D; PR...',MWANT)
           GOTO 9999
        ENDIF

C       CALCULATIONS
        CALL PR3DB(AIMG,BIMG,PR,AMP,CSUM1,LR,CSUM,CSUM2,
     &      AVSUM,LSD,NX,NY,NZ,DSCALE,NSCALE,SCALE1,
     &      SSANG,INC,Y1,WI,SER)

C       WRITE RESULT INTO DOC FILE AND RESULT FILE
        CALL  RFACTSD2(PR,AMP,CSUM1,LR,CSUM,CSUM2,AVSUM,
     &                 NSCALE,INC,WI,FACT,.FALSE.,
     &                 LUNDOC,FSCOP,FMAXSPFREQ,LUNGP,FSCCUT,
     &                 WANTSQRTS)


       
9999	IF (ALLOCATED(AIMG))  DEALLOCATE (AIMG)
        IF (ALLOCATED(BIMG))  DEALLOCATE (BIMG)
        IF (ALLOCATED(EIMG))  DEALLOCATE (EIMG)
        IF (ALLOCATED(PR))    DEALLOCATE (PR)
        IF (ALLOCATED(AMP))   DEALLOCATE (AMP)
        IF (ALLOCATED(CSUM1)) DEALLOCATE (CSUM1)
        IF (ALLOCATED(LR))    DEALLOCATE (LR)
        IF (ALLOCATED(CSUM))  DEALLOCATE (CSUM)
        IF (ALLOCATED(CSUM2)) DEALLOCATE (CSUM2)
        IF (ALLOCATED(AVSUM)) DEALLOCATE (AVSUM)

9998    CLOSE(LUN1)
        CLOSE(LUN2)
        CLOSE(LUNDOC)
        CLOSE(LUNGP)
        CLOSE(LUNMASK)

        END


#ifdef NEVER
c*************
        INV = -1
        CALL FMRS_3(AIMG,NX,NY,NZ,INV)
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNAM1,LUN1,'U',ITYPE1,NX,NY,
     &          NZ,MAXIM,'OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
        CALL WRITEV(LUN1,AIMG,LSD,NY,NX,NY,NZ)
	CLOSE(LUN1)
c*********************
#endif

@


1.66
log
@cosmetic
@
text
@d20 1
a20 1
C=* Email: spider@@wadsworth.org                                        *
@


1.65
log
@retrieved masking capability and 'FSC MA' output
@
text
@a298 13
#ifdef NEVER
c*************
        INV = -1
        CALL FMRS_3(AIMG,NX,NY,NZ,INV)
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNAM1,LUN1,'U',ITYPE1,NX,NY,
     &          NZ,MAXIM,'OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
        CALL WRITEV(LUN1,AIMG,LSD,NY,NX,NY,NZ)
	CLOSE(LUN1)
c*********************
#endif

d326 13
@


1.64
log
@removed 'FSC MA' and soft mask capability
@
text
@d75 2
a76 1
        INTEGER               :: MWANT,K,J,I,INV 
d84 1
d148 2
a149 4
     &          'SHELL WIDTH (RECIPROCAL SPACE UNITS)', IRTFLG)
             IF (RADMASK > 0) THEN
                CALL ERRT(101,'USE "FSC MA" OPERATION INSTEAD',NE)
             ENDIF                
d210 53
d299 13
d335 1
a337 13

#ifdef NEVER
c*************
        INV = -1
        CALL FMRS_3(AIMG,NX,NY,NZ,INV)
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNAM1,LUN1,'U',ITYPE1,NX,NY,
     &          NZ,MAXIM,'OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
        CALL WRITEV(LUN1,AIMG,LSD,NY,NX,NY,NZ)
	CLOSE(LUN1)
c*********************
#endif
@


1.63
log
@added masking
@
text
@d75 1
a75 2
        INTEGER               :: MWANT,ITYPE3,K,J,I,INV 
        REAL                  :: XCEN, YCEN, ZCEN, TNM, RADMASKSQI,EEE 
a82 1
        INTEGER, PARAMETER    :: LUNMASK = 24
d146 4
a149 2
     &          'SHELL WIDTH (RECIPROCAL SPACE UNITS), MASKING RADIUS',
     &          IRTFLG)
a209 53
        IF (RADMASK > 0) THEN
C          SUPERGAUSSIAN MASKING WANTED

           XCEN       = (NX/2) + 1
           YCEN       = (NY/2) + 1
           ZCEN       = (NZ/2) + 1
	   TNM        = ALOG(1.0 / TINY(TNM))
           RADMASKSQI = 1.0 / (RADMASK**2)

           IF ( FCHAR(4:5) == 'MA' ) THEN
C            WANT MASK IMAGE OUTPUT
             MAXIM  = 0
             ITYPE3 = 3
             CALL OPFILEC(0,.TRUE.,FILNAMM,LUNMASK,'U',ITYPE3,
     &               NX,NY,NZ,MAXIM,
     &               'OUTPUT MASK VOLUME~',.FALSE.,IRTFLG)
             IF (IRTFLG .NE. 0) GOTO 9999

             ALLOCATE (EIMG(NX,NY,NZ), STAT=IRTFLG)
             IF (IRTFLG .NE. 0) THEN
                 MWANT = NX*NY*NZ  
                 CALL ERRT(46,'PR3D; EIMG',MWANT)
                 GOTO 9999
             ENDIF
           ENDIF

           DO K = 1,NZ
              DO J = 1,NY
                 DO I = 1,NX
	           EEE = 0.5 * ((I - XCEN) **2 * RADMASKSQI +
     &                          (J - YCEN) **2 * RADMASKSQI +
     &                          (K - ZCEN) **2 * RADMASKSQI)

	           IF (EEE  >= TNM) THEN
	              AIMG(I,J,K) = 0.0
	              BIMG(I,J,K) = 0.0
                      IF ( FCHAR(4:5) == 'MA' ) EIMG(I,J,K) = 0.0
	           ELSE  
	              EEE         = -0.5 * (2*EEE)**2
                      AIMG(I,J,K) = EXP(EEE) * AIMG(I,J,K)
                      BIMG(I,J,K) = EXP(EEE) * BIMG(I,J,K)
                      IF ( FCHAR(4:5) == 'MA' ) EIMG(I,J,K) = EXP(EEE)
	           ENDIF
                ENDDO
             ENDDO
           ENDDO
           IF ( FCHAR(4:5) == 'MA' ) THEN
C             WANT MASK IMAGE OUTPUT
              CALL WRTVOL(LUNMASK,NX,NY,1,NZ,EIMG,IRTFLG)
	      CLOSE(LUNMASK)
           ENDIF
        ENDIF

a245 13
#ifdef NEVER
c*************
        INV = -1
        CALL FMRS_3(AIMG,NX,NY,NZ,INV)
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNAM1,LUN1,'U',ITYPE1,NX,NY,
     &          NZ,MAXIM,'OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
        CALL WRITEV(LUN1,AIMG,LSD,NY,NX,NY,NZ)
	CLOSE(LUN1)
c*********************
#endif

a268 1
        CLOSE(LUNMASK)
d271 13
@


1.62
log
@added 'FSC MASK' output
@
text
@d317 2
d338 2
@


1.61
log
@wantsqrts
@
text
@d12 1
d18 1
a18 1
C=* Copyright 1985-2014  Health Research Inc.,                         *
d47 1
d53 1
a53 1
        CHARACTER(LEN=MAXNAM) :: FILNAM1,FILNAM2 
d55 1
a55 1
        REAL, ALLOCATABLE     :: AIMG(:,:,:),BIMG(:,:,:)
d71 7
d79 6
a84 5
        INTEGER, PARAMETER    :: NSCALE = 20
        INTEGER, PARAMETER    :: LUN1   = 21
        INTEGER, PARAMETER    :: LUN2   = 22
        INTEGER, PARAMETER    :: LUNGP  = 23
        INTEGER, PARAMETER    :: LUNDOC = 89
d219 17
d246 1
d251 1
d255 6
a260 1
          ENDDO
d320 1
d333 1
@


1.60
log
@fsc cutoff
@
text
@d11 2
d17 1
a17 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d62 2
d78 2
d281 2
a282 1
     &                 LUNDOC,FSCOP,FMAXSPFREQ,LUNGP,FSCCUT)
@


1.59
log
@mask
@
text
@d9 2
a10 1
C                  MASK                           SEP  12 ARDEAN LEITH
d57 1
d121 1
d141 2
a142 2
           CALL RDPRM1S(PIXSIZ, NOT_USED, 
     &                 'VOXEL SIZE (ANGSTROMS)',IRTFLG)
d191 2
a192 15
        IF (ITYPE1 > 0) THEN
C          FIRST INPUT FILE IS REAL SPACE, NOT FOURIER
           CALL READV(LUN1,AIMG,LSD,NY,NX1,NY,NZ)
        ELSE
C          FIRST INPUT IS FOURIER ALREADY
           CALL READV(LUN1,AIMG, LSD,NY,NX1,NY,NZ)
        ENDIF
	
        IF (ITYPE2 > 0) THEN
C          SECOND INPUT FILE IS REAL SPACE, NOT FOURIER
           CALL READV(LUN2,BIMG, LSD,NY,NX2,NY,NZ)
        ELSE
C          SECOND INPUT IS FOURIER ALREADY
           CALL READV(LUN2,BIMG, LSD,NY,NX2,NY,NZ)
        ENDIF
d214 3
a216 3
	              EEE         = 0.5 * (2*EEE)**2
                      AIMG(I,J,K) = EXP(-EEE) * AIMG(I,J,K)
                      BIMG(I,J,K) = EXP(-EEE) * BIMG(I,J,K)
d257 1
a257 1
     &      SSANG,INC,Y1,WI,SER,IRADMASK)
d275 1
a275 1
     &                 LUNDOC,FSCOP,FMAXSPFREQ,LUNGP)
@


1.58
log
@reciprocal space shell units
@
text
@d9 1
d57 1
d117 2
d127 8
a134 4
           WI = 0.5
           CALL RDPRM1S(WI, NOT_USED, 
     &        'SHELL WIDTH (IN RECIPROCAL SPACE UNITS)',
     &        IRTFLG)
d139 1
a139 1
     &                 'VOXEL SIZE (IN ANGSTROMS)',IRTFLG)
d141 2
a142 1
           FMAXSPFREQ = 0.5/PIXSIZ
a144 1
           WI = 0.5
d146 1
a146 2
     &        'SHELL WIDTH (IN RECIPROCAL SPACE UNITS)',
     &        IRTFLG)
d159 1
d191 44
a241 3
        ELSE
C          FIRST INPUT IS FOURIER ALREADY
           CALL READV(LUN1,AIMG, LSD,NY,NX1,NY,NZ)
a245 1
           CALL READV(LUN2,BIMG, LSD,NY,NX2,NY,NZ)
a252 3
        ELSE
C          SECOND INPUT IS FOURIER ALREADY
           CALL READV(LUN2,BIMG, LSD,NY,NX2,NY,NZ)
d267 1
a267 1
     &      SSANG,INC,Y1,WI,SER)
@


1.57
log
@unused var removed
@
text
@d55 1
a55 1
        REAL                  :: SSANG, WIP,WI, PIXSIZ,FMAXSPFREQ
d123 4
a126 3
           WIP = 2
           CALL RDPRM1S(WIP, NOT_USED, 
     &                 'SHELL WIDTH (IN VOXELS)',IRTFLG)
a127 1
           WI = 1.0 / WIP    ! TO RECIPROCAL SPACE SAMPLING UNITS
@


1.56
log
@fmaxspfreq bug
@
text
@a140 1
           WIP = 1.0 /WI ! TO PIXEL UNITS
@


1.55
log
@pixel size
@
text
@d55 1
a55 1
        REAL                  :: SSANG, WIP,WI, PIXSIZ
d110 5
a114 3
        LSD = LSD1
        NY  = NY1  
        NZ  = NZ1
d133 1
d241 1
a241 1
     &                 LUNDOC,FSCOP,PIXSIZ,LUNGP)
@


1.54
log
@prompt
@
text
@d55 1
a55 1
        REAL                  :: SSANG, WI,FMAXSPFREQ
d121 2
a122 2
           WI = 2
           CALL RDPRM1S(WI, NOT_USED, 
d125 1
a125 1
           WI = 1.0 / WI    ! TO RECIPROCAL SPACE SAMPLING UNITS
d127 3
a129 3
           FMAXSPFREQ = 1 
           CALL RDPRM1S(FMAXSPFREQ, NOT_USED, 
     &                 'MAXIMUM SPATIAL FREQUENCY',IRTFLG)
a131 1

d138 1
d151 1
a151 1
     &       'MAXIMUM TILT ANGLE (90 FOR MOST SINGLE PARTICLE VOLS.)',
d238 1
a238 1
     &                 LUNDOC,FSCOP,FMAXSPFREQ,LUNGP)
@


1.53
log
@LUNGP  = 23, LUNDOC = 89
@
text
@d136 1
a136 1
     &        'SHELL WIDTH (IN RECIPROCAL SPACE SAMPLING UNITS)',
@


1.52
log
@for fsc
@
text
@d65 2
a66 1
        INTEGER, PARAMETER    :: LUNGP  = 22
d237 1
a237 1
     &                 NSCALE,INC,WI,FACT,NOUT,.FALSE.,
@


1.51
log
@formatting of output
@
text
@d8 1
d13 1
a13 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d34 3
a36 1
C 
d40 1
a40 1
        SUBROUTINE PR3D
d45 1
a45 7
        CHARACTER(LEN=MAXNAM)               :: FILNAM1,FILNAM2

        REAL, ALLOCATABLE, DIMENSION(:,:,:) :: AIMG,BIMG
        REAL, ALLOCATABLE, DIMENSION(:)     :: CSUM1, CSUM
        REAL, ALLOCATABLE, DIMENSION(:,:)   :: PR, AMP, AVSUM
        REAL, ALLOCATABLE, DIMENSION(:)     :: CSUM2
        INTEGER, ALLOCATABLE, DIMENSION(:)  :: LR
d47 1
a47 2
        REAL                                :: SSANG, WI
        CHARACTER(LEN=1)                    :: NULL,SER
d49 17
a65 3
        PARAMETER       (NSCALE=20)

        DATA  LUN1,LUN2/21,22/
a68 2
        NULL   = CHAR(0)

d71 3
a73 2
        CALL OPFILEC(0,.TRUE.,FILNAM1,LUN1,'O',ITYPE1,NSAM1,NROW1,
     &          NSLICE1,MAXIM,'FIRST VOLUME',.TRUE.,IRTFLG)
d76 1
a76 1
        IF (NSLICE1 < 2) THEN
d78 2
a79 4
           CLOSE(LUN1)
           CALL ERRT(2,'RF 3',NE)
           RETURN

d82 2
a83 3
           LSD1 = NSAM1
           NSAM = NSAM1 - MOD(-ITYPE1,10)

d86 2
a87 2
           LSD1 = NSAM1 + 2 - MOD(NSAM1,2)
           NSAM = NSAM1
d92 3
a94 2
        CALL OPFILEC(0,.TRUE.,FILNAM2,LUN2,'O',ITYPE2,NSAM2,NROW2,
     &          NSLICE2,MAXIM,'SECOND VOLUME',.TRUE.,IRTFLG)
d98 1
a98 2

        ELSEIF (ITYPE2 .LT. 0) THEN
d100 1
a100 2
           LSD2  = NSAM2

d102 1
a102 1
           LSD2  = NSAM2 + 2 - MOD(NSAM2,2)
d105 2
a106 2
        CALL SIZCHK(UNUSED,LSD1,NROW1,NSLICE1,0,
     &                     LSD2,NROW2,NSLICE2,0,IRTFLG)
d109 52
a160 4
        CALL RDPRM(WI, NOT_USED, 'RING WIDTH')

        CALL RDPRM2(SCALE1,SCALE2,NOT_USED,
     &             'SCALE FACTOR (LOWER,UPPER)')
a163 7
        CALL RDPRMC(SER,NUMC,.TRUE.,'MISSING CONE/WEDGE ANGLE (C/W)',
     &              NULL,IRT)

        CALL RDPRM(SSANG,NOT_USED,'MAXIMUM TILT ANGLE')
        IF (SER.NE.'C' .AND. SER.NE.'W') SSANG = 90.0

        CALL RDPRM(FACT,NOT_USED,'FACTOR FOR NOISE COMPARISON')
d165 2
a166 3
        NSLICE = NSLICE1
        NROW   = NROW1
        LSD    = LSD1
d168 2
a169 5
        Y1     = FLOAT(MAX0(NSAM,NROW,NSLICE))
        INC    = INT(Y1/WI)/2+1

        ALLOCATE (AIMG(LSD,NROW,NSLICE),
     &            BIMG(LSD,NROW,NSLICE), 
d172 2
a173 2
           MWANT = 2*LSD*NROW*NSLICE  
           CALL ERRT(46,'RF 3, AIMG & BIMG',MWANT)
d179 1
a179 1
           CALL READV(LUN1,AIMG,LSD,NROW,NSAM1,NROW,NSLICE)
d182 3
a184 3
           CALL FMRS_3(AIMG,NSAM1,NROW,NSLICE,INV)
           IF (INV .EQ. 0) THEN
              CALL ERRT(38,'RF 3 ',NE)
d189 1
a189 1
           CALL READV(LUN1,AIMG,LSD,NROW,NSAM1,NROW,NSLICE)
d194 1
a194 1
           CALL READV(LUN2,BIMG,LSD,NROW,NSAM2,NROW,NSLICE)
d197 3
a199 3
           CALL FMRS_3(BIMG,NSAM2,NROW,NSLICE,INV)
           IF (INV .EQ. 0)THEN
              CALL ERRT(38,'RF 3',NE)
d204 1
a204 1
           CALL READV(LUN2,BIMG,LSD,NROW,NSAM2,NROW,NSLICE)
d210 1
a210 1
        IF (IRTFLG.NE.0) THEN 
d212 1
a212 1
           CALL ERRT(46,'PR3D;  PR...',MWANT)
d218 1
a218 1
     &      AVSUM,LSD,NSAM,NROW,NSLICE,DSCALE,NSCALE,SCALE1,
d223 2
a224 6
           INV = -1
           CALL FMRS_3(AIMG,NSAM,NROW,NSLICE,INV)
           IF (INV .EQ. 0) THEN
              CALL ERRT(38,'RF 3 ',NE)
              GOTO 9999
           ENDIF
d226 2
a227 2
        CALL OPFILEC(0,.TRUE.,FILNAM1,LUN1,'U',ITYPE1,NSAM,NROW,
     &          NSLICE,MAXIM,'OUTPUT',.TRUE.,IRTFLG)
d229 1
a229 1
        CALL WRITEV(LUN1,AIMG,LSD,NROW,NSAM,NROW,NSLICE)
a233 10
        IF (MYPID .LE. 0)
     &  WRITE(NOUT,*) ' 3D PHASE RESIDUE AND FOURIER SHELL CORRELATION'

        IF (MYPID .LE. 0) WRITE(NOUT,5600) WI
5600    FORMAT('  RING WIDTH: ',1PG12.5)

        IF (VERBOSE .AND.  MYPID .LE. 0) WRITE(NOUT,5700)
5700    FORMAT(10X,'|NORM-FREQ      |DPH|            |FSC|',
     &             '      |FSCCRIT|      |VOXELS|')      

d236 2
a237 3
     &                 NSCALE,INC,WI,FACT,NOUT,.FALSE.)

        IF (MYPID .LE. 0) WRITE(NOUT,*)' '
d251 2
a253 1
        RETURN
@


1.50
log
@OUTPUT FORMAT, SIZCHK
@
text
@d1 1
d32 1
a32 1
C           OF FOURIER SHELLS(RADIUS). 
d200 1
a200 1
5600    FORMAT('  RING WIDTH= ',1PG12.5)
d203 2
a204 2
5700    FORMAT(10X,'|NORM-FREQ      |DPH|         |FSC|',
     &             '    |FSCCRIT|     |VOXELS|')      
d208 2
a209 1
     &                 NSCALE,INC,WI,FACT,NOUT)
@


1.49
log
@results output formatting
@
text
@d6 1
d11 1
a11 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d44 2
a45 2
        REAL, ALLOCATABLE, DIMENSION(:)     :: CSUM1,CSUM
        REAL, ALLOCATABLE, DIMENSION(:,:)   :: PR,AMP,AVSUM
d50 1
a50 1
        CHARACTER(LEN=2)                    :: NULL,SER
d58 2
d66 2
a67 1
        IF (NSLICE1 .LT. 2) THEN
d72 1
a72 1
        ELSEIF (ITYPE1 .LT. 0) THEN
d89 1
a89 2
           CLOSE(LUN1)
           RETURN
d99 3
a101 5
        IF (LSD1.NE.LSD2 .OR. NROW1.NE.NROW2 .OR. 
     &      NSLICE1 .NE. NSLICE2) THEN        
           CALL ERRT(1,'RF 3',NE)
           GOTO 9999
        ENDIF
d109 1
a109 1
        NULL   = CHAR(0)
d125 2
a126 1
        ALLOCATE (AIMG(LSD,NROW,NSLICE),BIMG(LSD,NROW,NSLICE), 
d128 1
a128 1
        IF (IRTFLG.NE.0) THEN
d134 1
a134 1
        IF (ITYPE1 .GT. 0) THEN
a147 1
	CLOSE(LUN1)
d149 1
a149 1
        IF (ITYPE2 .GT. 0) THEN
a162 1
	CLOSE(LUN1)
d164 1
a164 1
        ALLOCATE(PR(NSCALE,INC), AMP(NSCALE,INC),CSUM1(INC),
d169 1
a169 1
           CALL ERRT(46,'RF 3,  PR...',MWANT)
d173 1
a194 1
C       WRITE RESULT INTO DOC FILE AND RESULT FILE
d199 1
a199 1
5600    FORMAT('  RING WIDTH = ',1PG12.5)
d202 2
a203 2
5700    FORMAT(10X,'|NORM-FREQ|  |RING RADIUS|  ',
     &           '|DPH|  |FSC|  |FSCCRIT|  |VOXELS|')          
d205 1
a208 1

d219 3
@


1.48
log
@GPL_2010
@
text
@d194 3
a196 3
C     WRITE RESULT INTO DOC FILE AND RESULT FILE
      IF (MYPID .LE. 0)
     &  WRITE(NOUT,*) '3D PHASE RESIDUE AND FOURIER SHELL CORRELATION'
d198 2
a199 2
      IF (MYPID .LE. 0) WRITE(NOUT,5600) WI
5600  FORMAT(' RING WIDTH = ',G12.5)
d201 2
a202 2
      IF (VERBOSE .AND.  MYPID .LE. 0) WRITE(NOUT,5700)
5700  FORMAT(10X,'|NORM-FREQ|  |RING RADIUS|  ',
d205 1
a205 1
      CALL  RFACTSD2(PR,AMP,CSUM1,LR,CSUM,CSUM2,AVSUM,
d207 1
@


1.47
log
@OUTPUT FORMAT, MWANT ERROR TRAPs
@
text
@d7 4
a10 3
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
C=* Copyright 1985-2009  Health Research Inc.,                         *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
@


1.46
log
@GPL License fixed
@
text
@d3 1
a3 1
C PR3D.F           ADDED FOURIER INPUT          JULY 2000 ARDEAN LEITH
d5 1
a5 1
C
d7 5
a11 7
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
C=*                                                                    *
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
d13 1
a13 1
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d28 3
a30 3
C TO CALCULATE THE 3-D PHASE RESIDUE OUTSIDE MISSING CONE, PR OF FOURIER
C RINGS(RADIUS, DIRECTION RELATIVE TO Z) AND OF FOURIER SHELLS(RADIUS) IS
C CALCULATED. 
a31 2
C IMAGE_PROCESSING_ROUTINE
C
d40 1
a40 1
        CHARACTER(LEN=MAXNAM)   ::   FILNAM1,FILNAM2
d42 5
a46 5
        REAL, ALLOCATABLE, DIMENSION(:,:,:)::  AIMG,BIMG
        REAL, ALLOCATABLE, DIMENSION(:) ::     CSUM1,CSUM
        REAL, ALLOCATABLE, DIMENSION(:,:) ::   PR,AMP,AVSUM
        REAL, ALLOCATABLE, DIMENSION(:) ::     CSUM2
        INTEGER, ALLOCATABLE, DIMENSION(:) ::  LR
d48 2
a49 2
        REAL            SSANG, WI
        CHARACTER*1     NULL,SER
d52 1
d54 2
a55 10
#ifdef USE_MPI
        INCLUDE 'mpif.h'
        INTEGER MYPID, COMM, MPIERR
C
        COMM   = MPI_COMM_WORLD
        MPIERR = 0
        CALL MPI_COMM_RANK(COMM, MYPID, MPIERR)
#else
        MYPID = -1
#endif
d60 1
a60 1
     &          NSLICE1,MAXIM,'FIRST INPUT',.TRUE.,IRTFLG)
d82 1
a82 1
     &          NSLICE2,MAXIM,'SECOND INPUT',.TRUE.,IRTFLG)
d105 1
a105 1
     &             'SCALE FACTOR(LOWER,UPPER)')
d107 1
a107 1
        DSCALE = (SCALE2-SCALE1)/FLOAT(NSCALE-1)
d114 1
d126 3
a128 2
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF 3, AIMG & BIMG',IER)
d168 2
a169 1
           CALL ERRT(46,'RF 3,  ARRAYS',IER)
d199 1
a199 5
5600  FORMAT(1X,'RING WIDTH = ',G12.5)

      IF (MYPID .LE. 0) WRITE(NOUT,5700)
5700  FORMAT(10X,'|NUMBER|','|RING RADIUS',
     &           '|DPH|','|FSC|','|FSCCRIT|','|VOXELS|')          
d201 3
a203 2
      IF (MYPID .LE. 0) WRITE(NOUT,5800)
5800  FORMAT(10X,'        ',' NORMALIZED|')
@


1.45
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a6 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
a30 1
C **************************************************************************
a39 1
C--************************************************************************
@


1.44
log
@pp's determ. changes
@
text
@d1 1
d7 1
d9 1
d11 24
d41 1
d51 1
@


1.43
log
@Only allow the master processor to write to the NOUT unit
@
text
@a107 1
        IF (SER.NE.'C' .AND. SER.NE.'W') SER = 'C'
d110 1
d141 2
a142 1

d157 1
d171 17
d206 1
a206 3
9999    CLOSE(LUN1)
        CLOSE(LUN2)
        IF (ALLOCATED(AIMG))  DEALLOCATE (AIMG)
@


1.42
log
@opfilec
@
text
@d43 10
d170 2
a171 1
      WRITE(NOUT,*) '3D PHASE RESIDUE AND FOURIER SHELL CORRELATION'
d173 1
a173 1
      WRITE(NOUT,5600) WI
d176 1
a176 1
      WRITE(NOUT,5700)
d180 1
a180 1
      WRITE(NOUT,5800)
@


1.41
log
@nloop,iloop_removed
@
text
@d3 2
a4 1
C PR3D.F                ADDED FOURIER INPUT JULY 2000 ARDEAN LEITH
a21 1
C        1         2         3         4         5         6         7
d28 3
a38 1
        CHARACTER *81   FILNAM1,FILNAM2
d46 1
a46 1
        CALL OPFILE(.TRUE.,FILNAM1,LUN1,'O',ITYPE1,NSAM1,NROW1,
d68 1
a68 1
        CALL OPFILE(.TRUE.,FILNAM2,LUN2,'O',ITYPE2,NSAM2,NROW2,
@


1.40
log
@debug output removed
@
text
@d87 1
a87 1
        CALL RDPRM(WI, NLOOP, ILOOP, 'RING WIDTH')
d89 1
a89 1
        CALL RDPRM2(SCALE1,SCALE2,NLOOP,ILOOP,
d98 2
a99 2
        CALL RDPRM(SSANG,NLOOP,ILOOP,'MAXIMUM TILT ANGLE')
        CALL RDPRM(FACT,NLOOP,ILOOP,'FACTOR FOR NOISE COMPARISON')
@


1.39
log
@mixed fourier allowed
@
text
@a168 1
         write(nout,*) 'newest version running'
d170 1
a170 1
        CALL  RFACTSD2(PR,AMP,CSUM1,LR,CSUM,CSUM2,AVSUM,
@


1.38
log
@fourier input allowed
@
text
@a41 1

a42 1

d44 2
a45 2
        CALL OPFILE(.TRUE.,FILNAM1,LUN1,'O',ITYPE1,NSAM,NROW,
     &          NSLICE,MAXIM,'FIRST INPUT',.TRUE.,IRTFLG)
d48 1
a48 1
        IF (NSLICE .LT. 2) THEN
d52 10
a64 1

d73 7
a79 3
        ELSEIF (ITYPE1 .NE. ITYPE2) THEN
           CALL ERRT(2,'RF',NE)
           GOTO 9999
d81 3
a83 3
        ELSEIF (NSAM.NE.NSAM2 .OR. NROW.NE.NROW2 .OR. 
     &          NSLICE .NE. NSLICE2) THEN        
           CALL ERRT(1,'RF',NE)
d92 2
a93 2
        DSCALE=(SCALE2-SCALE1)/FLOAT(NSCALE-1)
        NULL = CHAR(0)
d96 2
a97 1
        IF (SER.NE.'C' .AND. SER.NE.'W') SER='C'
d101 3
a103 7
        IF (ITYPE1 .LT. 0) THEN
C          FOURIER INPUT FILES
           LSD  = NSAM
           NSAM = NSAM - MOD(-ITYPE2,10)
        ELSE
           LSD = NSAM+2-MOD(NSAM,2)
        ENDIF
d105 2
a106 2
        Y1  = FLOAT(MAX0(NSAM,NROW,NSLICE))
        INC = INT(Y1/WI)/2+1
a114 3
        CALL READV(LUN1,AIMG,LSD,NROW,NSAM,NROW,NSLICE)
        CALL READV(LUN2,BIMG,LSD,NROW,NSAM,NROW,NSLICE)

d116 2
a117 1
C          INPUT FILES ARE REAL SPACE, NOT FOURIER
d120 2
a121 2
           CALL FMRS_3(AIMG,NSAM,NROW,NSLICE,INV)
           IF (INV.EQ.0) THEN
d125 8
d135 3
a137 3
           CALL FMRS_3(BIMG,NSAM,NROW,NSLICE,INV)
           IF (INV.EQ.0)THEN
              CALL ERRT(38,'RF 3 ',NE)
d140 3
d169 1
@


1.37
log
@*** empty log message ***
@
text
@d3 1
a3 1
C PR3D.F
d30 5
a34 4
        REAL, ALLOCATABLE, DIMENSION(:) :: CSUM1,CSUM
        REAL, ALLOCATABLE, DIMENSION(:,:) :: PR,AMP,AVSUM
        REAL, ALLOCATABLE, DIMENSION(:) :: CSUM2
        INTEGER, ALLOCATABLE, DIMENSION(:) ::LR
d43 2
a44 1
C   ----------------------INPUT FIRST IMAGE
d46 6
a51 6
        CALL OPFIL(.TRUE.,FILNAM1,LUN1,'O',NSAM,NROW,NSLICE,
     &             MAXIM,'FIRST INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(4,'RF 3',NE)
           RETURN
        ELSEIF (IFORM .NE. 3) THEN
d55 3
a57 1
C   ----------------------INPUT SECOND IMAGE
d59 2
a60 2
        CALL OPFIL(.TRUE.,FILNAM2,LUN2,'O',NSAM2,NROW2,NSLICE2,
     &             MAXIM,'SECOND INPUT',.FALSE.,IRTFLG)
d63 1
a63 1
           CALL ERRT(4,'RF 3',NE)
d65 9
a73 3
        ELSEIF (IFORM .NE. 3) THEN
           CALL ERRT(2,'RF 3',NE)
           RETURN
a75 4
        IF(NSAM.NE.NSAM2.OR.NROW.NE.NROW2.OR.NSLICE.NE.NSLICE2) THEN    
           CALL ERRT(1,'RF 3',NE)
           RETURN
        ENDIF
d89 7
a95 3
        LSD=NSAM+2-MOD(NSAM,2)
        Y1=FLOAT(MAX0(NSAM,NROW,NSLICE))
        INC=INT(Y1/WI)/2+1
d97 2
a98 5
        ALLOCATE (AIMG(LSD,NROW,NSLICE), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF 3, AIMG',IER)
           RETURN
        ENDIF
d100 2
a101 1
        ALLOCATE (BIMG(LSD,NROW,NSLICE), STAT=IRTFLG)
d103 2
a104 2
           CALL ERRT(46,'RF 3, BIMG',IER)
           RETURN
a107 1
        CLOSE (LUN1)
a108 21
        CLOSE (LUN2)

        INV=1
        CALL FMRS_3(AIMG,NSAM,NROW,NSLICE,INV)
        IF (INV.EQ.0) THEN
           CALL ERRT(38,'RF 3 ',NE)
           RETURN
        ENDIF

        INV=1
        CALL FMRS_3(BIMG,NSAM,NROW,NSLICE,INV)
        IF (INV.EQ.0)THEN
            CALL ERRT(38,'RF 3 ',NE)
            RETURN
        ENDIF 

        ALLOCATE (PR(NSCALE,INC), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF, PR',IER)
           RETURN
        ENDIF
d110 2
a111 29
        ALLOCATE (AMP(NSCALE,INC), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF, AMP',IER)
           RETURN
        ENDIF

        ALLOCATE (CSUM1(INC), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF, CSUM1',IER)
           RETURN
        ENDIF

        ALLOCATE (LR(INC), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF, LR',IER)
           RETURN
        ENDIF

        ALLOCATE (CSUM(INC), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF, CSUM',IER)
           RETURN
        ENDIF

        ALLOCATE (CSUM2(INC), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF, CSUM2',IER)
           RETURN
        ENDIF
d113 18
a130 1
        ALLOCATE (AVSUM(NSCALE,INC), STAT=IRTFLG)
d132 2
a133 2
           CALL ERRT(46,'RF, AVSUM',IER)
           RETURN
d140 1
a140 1
C   ---------------TO WRITE RESULT INTO DOC FILE AND RESULT FILE
d142 1
d145 1
d148 2
a149 1
     $ '|DPH|','|FSC|','|FSCCRIT|','|VOXELS|')          
d152 1
d154 14
a167 1
     &  NSCALE,INC,WI,FACT,NOUT)
d169 1
a169 10
        DEALLOCATE (AIMG)
        DEALLOCATE (BIMG)
        DEALLOCATE (PR)
        DEALLOCATE (AMP)
        DEALLOCATE (CSUM1)
        DEALLOCATE (LR)
        DEALLOCATE (CSUM)
        DEALLOCATE (CSUM2)
        DEALLOCATE (AVSUM)
        
a170 1

@


1.36
log
@readv parameter
@
text
@d99 1
a99 1
        CALL READV(LUN1,AIMG,LSD,NROW,NSLICE,NSAM,NROW,NSLICE)
d101 1
a101 1
        CALL READV(LUN2,BIMG,LSD,NROW,NSLICE,NSAM,NROW,NSLICE)
@


1.35
log
@typo fixed
@
text
@d99 1
a99 1
        CALL READV(LUN1,AIMG,LSD,NROW,NSLICE,LSD,NROW,NSLICE)
d101 1
a101 1
        CALL READV(LUN2,BIMG,LSD,NROW,NSLICE,LSD,NROW,NSLICE)
@


1.34
log
@adapted for dynamical memory allocation
@
text
@d100 1
d102 1
a102 2
        CLOSE (LIN1)
        CLOSE (LIN2)
@


1.33
log
@*** empty log message ***
@
text
@d19 3
d25 1
a25 1
	SUBROUTINE PR3D(MAXDIM)
d27 15
a41 16
	INCLUDE 'CMBLOCK.INC'
	PARAMETER       (NSCALE=20)
	COMMON          BUF(1)
#ifdef SP_F90
        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: Q
#else
	DIMENSION       Q(1)
	POINTER         (IPQ,Q) 
#endif
	LOGICAL         RUNTIME
	REAL            SSANG, WI
	CHARACTER *81   FILNAM1,FILNAM2
	CHARACTER*1     NULL,SER
	DATA  LUN1,LUN2/21,22/
d46 1
a46 1
	IF (IRTFLG .NE. 0) THEN
d49 4
a52 4
	ELSEIF (IFORM .NE. 3) THEN
	   CALL ERRT(2,'RF 3',NE)
	   RETURN
	ENDIF
d58 1
a58 1
	IF (IRTFLG .NE. 0) THEN
d61 4
a64 4
	ELSEIF (IFORM .NE. 3) THEN
	   CALL ERRT(2,'RF 3',NE)
	   RETURN
	ENDIF
d66 2
a67 2
        IF(NSAM.NE.NSAM2.OR.NROW.NE.NROW2.OR.NSLICE.NE.NSLICE2) THEN	
	   CALL ERRT(1,'RF 3',NE)
d70 1
a70 1
	CALL RDPRM(WI, NLOOP, ILOOP, 'RING WIDTH')
d72 1
a72 1
	CALL RDPRM2(SCALE1,SCALE2,NLOOP,ILOOP,
d75 2
a76 2
	DSCALE=(SCALE2-SCALE1)/FLOAT(NSCALE-1)
	NULL = CHAR(0)
d79 2
a80 2
	IF (SER.NE.'C' .AND. SER.NE.'W') SER='C'
	CALL RDPRM(SSANG,NLOOP,ILOOP,'MAXIMUM TILT ANGLE')
d83 79
a161 49
	LSD=NSAM+2-MOD(NSAM,2)
	Y1=FLOAT(MAX0(NSAM,NROW,NSLICE))
	INC=INT(Y1/WI)/2+1
	K1=1
	K2=K1+LSD*NROW*NSLICE
	K3=K2+LSD*NROW*NSLICE
	K4=K3+INC*NSCALE
	K5=K4+INC*NSCALE
	K6=K5+INC
	K7=K6+INC
	K8=K7+INC
	K9=K8+INC
        MEMWANT=K9+INC*NSCALE
        CALL CHKMEM(MEMWANT,BUF,MAXDIM,RUNTIME,IPQ,IRTFLG)
        IF (IRTFLG.NE.0)  THEN
	   CALL ERRT(6,'RF 3',NE)
           RETURN
        ENDIF
#ifdef SP_F90
         Q = >IPQ
#endif
        DO  J = 1, NSLICE
          DO  I = 1, NROW
             L = (J-1)*NROW+I
	     CALL REDLIN(LUN1,Q(K1+((I-1)+(J-1)*NROW)*LSD),NSAM,L)
          ENDDO
        ENDDO
        CLOSE(LUN1)
        DO   J = 1, NSLICE
          DO  I = 1, NROW
            L = (J-1)*NROW+I
	    CALL REDLIN(LUN2,Q(K2+((I-1)+(J-1)*NROW)*LSD),NSAM,L)
          ENDDO
        ENDDO
	CLOSE(LUN2)
	INV=1
	CALL FMRS_3(Q(K1),NSAM,NROW,NSLICE,INV)
	IF (INV.EQ.0) THEN
	   CALL ERRT(38,'RF 3 ',NE)
	   RETURN
	ENDIF
	INV=1
	CALL FMRS_3(Q(K2),NSAM,NROW,NSLICE,INV)
	IF (INV.EQ.0)THEN
	    CALL ERRT(38,'RF 3 ',NE)
	    RETURN
	ENDIF 
	CALL PR3DB(Q(K1),Q(K2),Q(K3),Q(K4),Q(K5),Q(K6),Q(K7),Q(K8),
     &      Q(K9),LSD,NSAM,NROW,NSLICE,DSCALE,NSCALE,SCALE1,
d170 1
a170 1
     $ '|DPH|','|FSC|','|FSCCRIT|','|VOXELS|')		
d173 1
a173 1
	CALL  RFACTSD2(Q(K3),Q(K4),Q(K5),Q(K6),Q(K7),Q(K8),Q(K9),
d175 13
a187 2
	IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'RF 3',IRTFLG)
	END
@


1.32
log
@silly fix for O3
@
text
@d39 1
a39 9
	DIMENSION       DLIST(6)
	EQUIVALENCE     (JDUM,DUM)

	DATA  LUN1,LUN2/21,22/, NDOC/88/
CNO_SAVE

	NULL = CHAR(0)
	PI   = 4.0*ATAN(1.00)

a43 1

d49 1
a49 1
	   GOTO 9999
d58 1
a58 1
           GOTO 9999
d61 1
a61 1
	   GOTO 9998
d66 1
a66 1
           GOTO 9998
d74 1
a83 1

d97 1
a97 1
           GOTO 9998
d120 1
a120 1
	   GOTO 9998
d125 2
a126 2
	   CALL ERRT(38,'RF 3 ',NE)
	    GOTO 9998
d133 1
a133 6
      NLIST=6
      WRITE(NOUT,*) 'THIS PROGRAM IS DEVELOPED FOR 3D RESOLUTION  '
      WRITE(NOUT,*) 'ESTIMATION BY THE METHOD OF PHASE RESIDUES AND' 
      WRITE(NOUT,*) 'FOURIER SHELL CORRELATION'
      WRITE(NOUT,*) 'FOLLOWING IS THE RESULT OF PR AND FSC '
      WRITE(NOUT,*) '(ALSO IN DOC FILE)'
d140 3
a142 52
5800  FORMAT(10X,'        ',' NORMALIZED|')		
       DO 6000 L=1,INC 
         DUM=Q(K6+L-1)
	 IF(DUM.EQ.0.0)   GO TO 6000
	 DLIST(1)=L
         DLIST(2)=FLOAT(L-1)/FLOAT(INC-1)*0.5
         DLIST(5)=FACT/SQRT(FLOAT(JDUM))
	 IF(DLIST(5).GT.1.0)   DLIST(5)=1.0
	 DLIST(6)=JDUM

	 NSCM=0
C  This is necessary, otherwise O3 fails.
	 RFMIN1=Q(K9+(L-1)*NSCALE)/Q(K4+(L-1)*NSCALE)
	 RFMIN=RFIMN1
	 NSCM=1
	 IFOUND=0
	 LCUR=L
	 DO  NSC=2,NSCALE
	   RFM=Q(K9+(L-1)*NSCALE+(NSC-1))/Q(K4+(L-1)*NSCALE+(NSC-1))
	   IF (RFM.LT.RFMIN) THEN
	      NSCM=NSC
	      RFMIN=RFM
	      IFOUND=1
	   ENDIF
	 ENDDO

	IF (IFOUND .EQ. 0)  THEN
	   WRITE(NOUT,436)   LCUR
436	   FORMAT(' *** NO MINIMUM IN RFACT CURVE FOUND FOR RING = ',I5)
	ENDIF

C       NSCM IS THE NUMBER OF THE ELEMENT IN EACH ARRAY WITH THE CORRECT
C       SCALING. SCALE IS THE CORRECT SCALING.

	BK1=Q(K4+(L-1)*NSCALE+NSCM)
	BK2=Q(K3+(L-1)*NSCALE+NSCM)
	IF(BK1.NE.0.)THEN
	   DLIST(3)=SQRT(BK2/BK1)
	ENDIF
	BK3=Q(K8+L-1)
	BK4=Q(K5+L-1)
	BK5=Q(K7+L-1)
	IF (BK3.NE.0.AND.BK4.NE.0.) THEN
	   DLIST(4)=BK5/SQRT(BK4*BK3)
	ENDIF

756	CALL SAVD(NDOC, DLIST, NLIST, IRTFLG)
	WRITE(NOUT,6100)L,(DLIST(K),K=2,5),JDUM
6100    FORMAT (1X,I4,4(2X,F12.5),4X,I6)
6000	CONTINUE
	CALL SAVDC
	CLOSE(NDOC)
a143 5

9998    CLOSE(LUN2)
9999    CLOSE(LUN1)

        RETURN
@


1.31
log
@f90
@
text
@d165 3
a167 1
	 RFMIN=Q(K9+(L-1)*NSCALE)/Q(K4+(L-1)*NSCALE)
@


1.30
log
@cosmetic & used opfil
@
text
@a24 1

d27 5
d34 1
d108 3
@


1.29
log
@freq fixed
@
text
@d3 1
a3 1
C PR3D.FOR
d23 1
d25 6
a30 5
	PARAMETER  (NSCALE=20)
	COMMON       BUF(1)
	DIMENSION    Q(1)
	POINTER      (IPQ,Q) 
	LOGICAL      RUNTIME
d33 1
a33 1
	CHARACTER*1       NULL,SER
d35 2
a36 1
	EQUIVALENCE (JDUM,DUM)
d39 4
a42 2
	NULL=CHAR(0)
	PI=4.0*ATAN(1.00)
d44 10
a53 9
	CALL FILERD (FILNAM1,NLET,NULL,'FIRST INPUT',IRTFLG)
	CALL OPENFB(BUF,FILNAM1,LUN1,NSAM,NROW,'OLD',NF,NSLICE)
	IF (NF.EQ.1) THEN
         CALL ERRT(4,'RF 3',NE)
         RETURN
	ENDIF
	IF(IFORM.NE.3)THEN
	CALL ERRT(2,'RF 3',NE)
	RETURN
d56 10
a65 5
	CALL FILERD (FILNAM2,NLET,NULL,'SECOND INPUT',IRTFLG)
	CALL OPENFB(BUF,FILNAM2,LUN2,NSAM2,NROW2,'OLD',NF,NSLICE2)
	IF (NF.EQ.1) THEN
	CALL ERRT(4,'RF 3',NE)
	RETURN
d67 5
a71 11
C
	IF(IFORM.NE.3)THEN
	CALL ERRT(2,'RF 3',NE)
	RETURN
	ENDIF
      IF(NSAM.NE.NSAM2.OR.NROW.NE.NROW2.OR.NSLICE.NE.NSLICE2) THEN	
	 CALL ERRT(1,'RF 3',NE)
         CLOSE(LUN1)
         CLOSE(LUN2)
         RETURN
      ENDIF
d73 1
a73 1
C
d75 2
a76 2
     &  'SCALE FACTOR(LOWER,UPPER)')
C
d78 3
a80 3
      CALL RDPRMC(SER,NUMC,.TRUE.,'MISSING CONE/WEDGE ANGLE (C/W)',
     &  NULL,IRT)
	IF(SER.NE.'C'.AND.SER.NE.'W')	   SER='C'
d82 2
a83 2
      CALL RDPRM(FACT,NLOOP,ILOOP,'FACTOR FOR NOISE COMPARISON')
C
d87 1
a87 1
C
d99 1
a99 3
          IF (IRTFLG.NE.0)  THEN
	   CLOSE(LUN1)
	   CLOSE(LUN2)
d101 2
a102 2
	   RETURN
	  ENDIF
d106 1
a106 1
	CALL REDLIN(LUN1,Q(K1+((I-1)+(J-1)*NROW)*LSD),NSAM,L)
d108 2
a109 2
       ENDDO
       CLOSE(LUN1)
d113 1
a113 1
	CALL REDLIN(LUN2,Q(K2+((I-1)+(J-1)*NROW)*LSD),NSAM,L)
d121 1
a121 1
	   RETURN
d127 1
a127 1
	   RETURN
d130 3
a132 2
     &  Q(K9),LSD,NSAM,NROW,NSLICE,DSCALE,NSCALE,SCALE1,
     &  SSANG,INC,Y1,WI,SER)
d147 1
a147 1
	DO 6000 L=1,INC 
d149 1
a149 1
	IF(DUM.EQ.0.0)   GO TO 6000
d153 20
a172 14
	IF(DLIST(5).GT.1.0)   DLIST(5)=1.0
	DLIST(6)=JDUM
C
	NSCM=0
	RFMIN=Q(K9+(L-1)*NSCALE)/Q(K4+(L-1)*NSCALE)
	NSCM=1
	IFOUND=0
	LCUR=L
	DO  NSC=2,NSCALE
	RFM=Q(K9+(L-1)*NSCALE+(NSC-1))/Q(K4+(L-1)*NSCALE+(NSC-1))
	IF(RFM.LT.RFMIN) THEN
	NSCM=NSC
	RFMIN=RFM
	IFOUND=1
d174 4
a177 10
	ENDDO
C
	IF(IFOUND.EQ.0)  THEN
	WRITE(NOUT,436)   LCUR
436	FORMAT(' *** NO MINIMUM IN RFACT CURVE FOUND FOR RING = ',I5)
	ENDIF
C
C NSCM IS THE NUMBER OF THE ELEMENT IN EACH ARRAY WITH THE CORRECT
C SCALING. SCALE IS THE CORRECT SCALING.
C
d181 1
a181 1
	DLIST(3)=SQRT(BK2/BK1)
d186 2
a187 2
	IF(BK3.NE.0.AND.BK4.NE.0.)THEN
	DLIST(4)=BK5/SQRT(BK4*BK3)
d189 1
d196 6
a201 1
	IF(RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'RF 3',IRTFLG)
@


1.28
log
@modified intrinisic function for f90 compatibility
@
text
@d147 1
a147 1
         DLIST(2)=(FLOAT(L-1)*WI+(WI/2))/Y1
@


1.27
log
@*** empty log message ***
@
text
@d81 1
a81 1
	INC=JINT(Y1/WI)/2+1
@


1.26
log
@corrected
@
text
@d157 1
a157 1
	DO 540 NSC=2,NSCALE
d164 1
a164 1
540	CONTINUE
@


1.25
log
@close ndoc
@
text
@d24 11
a34 11
	PARAMETER(NSCALE=20)
      COMMON       BUF(1)
      DIMENSION    Q(1)
      POINTER      (IPQ,Q) 
      LOGICAL      RUNTIME
      REAL            SSANG, WI
      CHARACTER *81   FILNAM1,FILNAM2
      CHARACTER*1       NULL,SER
      DIMENSION       DLIST(6)
      EQUIVALENCE (JDUM,DUM)
      DATA  LUN1,LUN2/21,22/, NDOC/88/
d36 2
a37 2
      NULL=CHAR(0)
      PI=4.0*ATAN(1.00)
d39 3
a41 3
      CALL FILERD (FILNAM1,NLET,NULL,'FIRST INPUT',IRTFLG)
      CALL OPENFB(BUF,FILNAM1,LUN1,NSAM,NROW,'OLD',NF,NSLICE)
      IF (NF.EQ.1) THEN
d44 1
a44 1
      ENDIF
d50 6
a55 6
      CALL FILERD (FILNAM2,NLET,NULL,'SECOND INPUT',IRTFLG)
      CALL OPENFB(BUF,FILNAM2,LUN2,NSAM2,NROW2,'OLD',NF,NSLICE2)
      IF (NF.EQ.1) THEN
      CALL ERRT(4,'RF 3',NE)
      RETURN
      ENDIF
d61 1
a61 1
      IF (NSAM.NE.NSAM2.OR.NROW.NE.NROW2.OR.NSLICE.NE.NSLICE2) THEN	
d67 1
a67 1
       CALL RDPRM(WI, NLOOP, ILOOP, 'RING WIDTH')
d75 2
a76 2
      IF(SER.NE.'C'.AND.SER.NE.'W')	   SER='C'
      CALL RDPRM(SSANG,NLOOP,ILOOP,'MAXIMUM TILT ANGLE')
d78 2
a79 4
c
	K1=1
	K2=K1+NSAM*NROW*NSLICE
	K3=K2+NSAM*NROW*NSLICE
d82 4
d88 1
a88 1
	K6=K5+INC*NSCALE
d90 3
a92 3
	K8=K7+INC*NSCALE
	K9=K8+INC*NSCALE
        MEMWANT=MAX0(K9+INC*NSCALE,K3+2*max0(nsam,nrow,nslice))
d103 1
a103 2
             CALL REDLIN(LUN1,Q(K1+((I-1)+(J-1)
     &                   *NROW)*NSAM),NSAM,L)
d110 1
a110 2
            CALL REDLIN(LUN2,Q(K2+((I-1)+(J-1)
     &                         *NROW)*NSAM),NSAM,L)
d115 1
a115 1
	CALL F3MR(Q(K1),NSAM,NROW,NSLICE,INV,Q(K3))
d121 1
a121 1
	CALL F3MR(Q(K2),NSAM,NROW,NSLICE,INV,Q(K3))
d126 2
a127 2
	CALL PR3DB(Q(K1),Q(K2),Q(K3),Q(K4),Q(K5),Q(K6),Q(K7),
     &  Q(K8),Q(K9),NSAM,NROW,NSLICE,DSCALE,NSCALE,SCALE1,
d143 1
a143 1
      DO 6000 L=1,INC 
d145 1
a145 1
	IF(DUM.EQ.0.0)GO TO 6000
d149 1
a149 1
	IF(DLIST(5).GT.1.0)DLIST(5)=1.0
d157 1
a157 1
	DO 540 NSC=1,NSCALE
d166 1
a166 1
	IF(IFOUND.EQ.0)THEN
d179 4
a182 4
	BK3=Q(K8+(L-1)*NSCALE+NSCM)
	BK4=Q(K5+(L-1)*NSCALE+NSCM)
	BK5=Q(K7+(L-1)*NSCALE+NSCM)
	IF(BK3.NE.0.OR.BK4.NE.0.)THEN
@


1.24
log
@problem with scale fixed
@
text
@a187 1
	IF(NSCM.EQ.0)GO TO 999
d189 2
a190 1
999 	CALL SAVDC
@


1.23
log
@added a question for factor for noise comparison.
@
text
@d22 2
a23 3
      SUBROUTINE PR3D(MAXDIM)
      
      INCLUDE 'CMBLOCK.INC'
d25 1
a25 3

#ifdef SP_ALLOC
      COMMON       BUF(1024)
a28 3
#else
      COMMON          BUF(1024),Q(1)
#endif
d34 1
a34 2
      DATA  LUN1/11/, NDOC/88/

a35 1

a36 1

a40 1

d45 11
d61 7
a67 4

      CALL FILERD (FILNAM2,NLET,NULL,'SECOND INPUT',IRTFLG)

      CALL RDPRM(WI, NLOOP, ILOOP, 'RING WIDTH')
a72 2


d75 1
a75 5

      IF(SER.NE.'C'.AND.SER.NE.'W')THEN
	   SER='C'
      ENDIF

a81 1

a83 1

d90 3
a92 9

        MEMWANT=max0(K9+INC*NSCALE,K3+2*max0(nsam,nrow,nslice))

#ifdef SP_ALLOC
        CALL ALLOCIT(MEMWANT,RUNTIME,IPQ,'RF 3',IRTFLG)
        IF (.NOT.RUNTIME)  THEN
#else
	IF (MEMWANT .GT. MAXDIM) THEN
#endif
d94 1
d97 1
a97 2
	ENDIF

a104 1

a105 21

C   ----------------------INPUT SECOND IMAGE

      CALL OPENFB(BUF,FILNAM2,LUN1,NSAM2,NROW2,'OLD',NF,NSLICE2)

      IF (NF.EQ.1) THEN
      CALL ERRT(4,'RF 3',NE)
      RETURN
      ENDIF
C
	IF(IFORM.NE.3)THEN
	CALL ERRT(2,'RF 3',NE)
	RETURN
	ENDIF

      IF (NSAM.NE.NSAM2.OR.NROW.NE.NROW2.OR.NSLICE.NE.NSLICE2) THEN	
	 CALL ERRT(1,'RF 3',NE)
         CLOSE(LUN1)
         RETURN
      ENDIF
 
d109 1
a109 1
            CALL REDLIN(LUN1,Q(K2+((I-1)+(J-1)
d113 1
a113 3

	CLOSE(LUN1)

a125 1

a128 1

d150 1
a150 1
	dlist(6)=jdum
d154 2
d159 1
a159 1
	IF(RFM.GE.RFMIN)GO TO 540
d162 2
d166 2
a167 2
	IF(NSCM.EQ.0)THEN
	WRITE(NOUT,436)LCUR
a168 1
	GO TO 756
d182 1
a182 1
	IF( BK3.NE.0.OR.BK4.NE.0.)THEN
d185 1
a185 2
	 
756         CALL SAVD(NDOC, DLIST, NLIST, IRTFLG)
d189 4
a192 10
6000  CONTINUE

999      CALL SAVDC
       CLOSE(NDOC)

#ifdef SP_ALLOC
      CALL ALLOCIT(0,RUNTIME,IPQ,'RF 3',IRTFLG)
#endif
      RETURN
      END
@


1.22
log
@error 38
@
text
@d79 2
a80 1

d184 2
a185 1
         DLIST(5)=3./SQRT(FLOAT(JDUM))
@


1.21
log
@changes w.r.t doc. file
@
text
@d150 1
a150 1
	   CALL ERRT(1,'F3MR ',NE)
d156 1
a156 1
	   CALL ERRT(1,'F3MR ',NE)
@


1.20
log
@added scale search
@
text
@d197 3
a199 2
	PRINT*,'*** NO MINIMUM IN RFACT CURVE FOUND FOR RING ',LCUR
	RETURN
d217 1
a217 1
         CALL SAVD(NDOC, DLIST, NLIST, IRTFLG)
d220 1
d223 2
a224 2
      CALL SAVDC
      CLOSE(NDOC)
@


1.18
log
@changed FRC to old formula
@
text
@d25 1
d55 5
d64 6
d87 3
a89 3
	K4=K3+INC
	K5=K4+INC
	K6=K5+INC
d91 2
a92 1
	K8=K7+INC
d94 1
a94 1
        MEMWANT=max0(K8+INC,K3+2*max0(nsam,nrow,nslice))
d125 5
d161 2
a162 1
     &      q(k8),NSAM,NROW,NSLICE,SSANG,INC,Y1,WI,SER)
d168 2
a169 2
      WRITE(NOUT,*) 'FOURIER RING CORRELATION'
      WRITE(NOUT,*) 'FOLLOWING IS THE RESULT OF PR AND FRC '
d174 2
a175 2
5700  FORMAT(10X,'|NUMBER|','RING RADIUS|',
     $ 'PR BY SHELLS|','  FRC|','  FRCCRIT|','# OF VOXELS|')		
d177 2
a178 6
5800  FORMAT(11X,'        ','  NORMALIZED')		
      DO 6000 L=2,INC 
         DLIST(1)=L
         DLIST(2)=float(L-1)*WI/Y1
         DLIST(3)=Q(K3+L-1)
         DLIST(4)=Q(K5+L-1)
d180 3
a182 1
         DLIST(6)=JDUM
d184 32
d217 3
a219 2
6000  WRITE(NOUT,6100)L,(DLIST(K),K=2,5),JDUM
6100  FORMAT (1X,I4,4(2X,F12.5),4X,I6)
@


1.17
log
@cpp wrong for alloc, cosmetic
@
text
@d81 1
a81 1
        MEMWANT=max0(K8+INC*2,K3+2*max0(nsam,nrow,nslice))
d143 1
a143 1
     &         Q(K8),NSAM,NROW,NSLICE,SSANG,INC,Y1,WI,SER)
d164 1
a164 2
         DLIST(5)=3./SQRT(PI*WI*(FLOAT(L)-0.5))
         DUM=Q(K7+L-1)
d166 1
@


1.16
log
@add SP_ALLOC for allocit call
@
text
@d3 1
a3 1
C $$ PR3D.FOR
d14 1
d18 1
a18 1
C *********************************************************
d21 1
a21 4
C
C $$ PR3D.FOR
C
C
d24 2
a25 5
#ifdef SP_UNIX
        INCLUDE 'CMBLOCK.INC'
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d27 4
a30 4
         COMMON          BUF(1024)
         DIMENSION Q(1)
         POINTER   (IPQ,Q) 
      LOGICAL         RUNTIME
d38 3
a40 2
	EQUIVALENCE (JDUM,DUM)
        DATA  LUN1/11/, NDOC/88/
d42 1
a42 1
C
d44 2
a45 1
	PI=4.0*ATAN(1.00)
d49 1
a49 1
C
d51 2
a52 2
      CALL ERRT(4,'RF 3',NE)
      RETURN
d54 1
a54 1
C
d56 4
a59 4
C
         CALL RDPRM(WI, NLOOP, ILOOP, 'RING WIDTH')
C
  	CALL RDPRMC(SER,NUMC,.TRUE.,'MISSING CONE/WEDGE ANGLE(C/W)',
d61 7
a67 7
C
	IF(SER.NE.'C'.AND.SER.NE.'W')THEN
	SER='C'
	ENDIF
C
	CALL RDPRM(SSANG,NLOOP,ILOOP,'MAXIMUM TILT ANGLE')
C
d71 1
a71 1
C
d74 1
a74 1
C
d80 1
a80 1
C
d82 4
a85 3
#ifdef SP_UNIX
         CALL ALLOCIT(MEMWANT,RUNTIME,IPQ,'RF 3',IRTFLG)
         IF(.NOT.RUNTIME)  THEN
d87 1
a87 1
	IF(MEMWANT.GT.MAXDIM) THEN
d89 3
a91 3
	 CLOSE(LUN1)
	 CALL ERRT(6,'RF 3',NE)
	 RETURN
d93 10
a102 11
C
C
              DO   J = 1, NSLICE
                DO  I = 1, NROW
                  L = (J-1)*NROW+I
                  CALL REDLIN(LUN1,Q(K1+((I-1)+(J-1)
     &                         *NROW)*NSAM),NSAM,L)
                END DO
              END DO
C
	CLOSE(LUN1)
d105 1
d107 1
a107 1
C
d112 1
a112 1
C
d118 5
a122 5
C
              DO   J = 1, NSLICE
                DO  I = 1, NROW
                  L = (J-1)*NROW+I
                  CALL REDLIN(LUN1,Q(K2+((I-1)+(J-1)
d124 3
a126 3
                END DO
              END DO
C
d128 1
a128 1
C
d131 3
a133 3
	IF(INV.EQ.0)THEN
	CALL ERRT(1,'F3MR ',NE)
	RETURN
d137 3
a139 3
	IF(INV.EQ.0)THEN
	CALL ERRT(1,'F3MR ',NE)
	RETURN
d141 1
a141 1
C
d143 2
a144 2
     &  Q(K8),NSAM,NROW,NSLICE,SSANG,INC,Y1,WI,SER)
C
d160 8
a167 8
       DLIST(1)=L
       DLIST(2)=float(L-1)*WI/Y1
       DLIST(3)=Q(K3+L-1)
	DLIST(4)=Q(K5+L-1)
	DLIST(5)=3./SQRT(PI*WI*(FLOAT(L)-0.5))
	DUM=Q(K7+L-1)
       DLIST(6)=JDUM
       CALL SAVD(NDOC, DLIST, NLIST, IRTFLG)
d169 2
d172 2
a173 3
	CLOSE(NDOC)
6100  FORMAT (1X,I4,4(2X,F12.5),4X,I6)
C
d177 1
@


1.15
log
@ifs corrected
@
text
@d24 2
a26 1
      SUBROUTINE PR3D(IDUM)
d28 4
a36 2
      SUBROUTINE PR3D(MAXDIM)
        INCLUDE 'COMMON1:CMBLOCK.INC'
d175 1
a175 1
#ifdef SP_UNIX
@


1.14
log
@nosave, malloc
@
text
@a84 4
	 CLOSE(LUN1)
	 CALL ERRT(6,'RF 3',NE)
	 RETURN
         ENDIF
d87 1
a91 1
#endif
@


1.13
log
@version with memory allocation
@
text
@d1 13
a13 1
C********************************************************************
d18 4
d23 1
a23 1
      SUBROUTINE PR3D(MAXDuM)
d25 1
d27 4
d32 1
d34 1
a35 3
 
      COMMON          BUF(1024)
C,Q(1)
a39 3
         DIMENSION Q(1)
         POINTER   (IPQ,Q) 
      LOGICAL         RUNTIME
a42 1
	maxdim=100
d81 3
a83 5
        MEMWANT=max0(K8,K3+2*max0(nsam,nrow,nslice))
	IF(MEMWANT.GT.MAXDIM) THEN
c         CALL ALLOCIT(MEMWANT,RUNTIME,IPQ,'RF 3',IRTFLG)
         ipq=MALLOC(4*MEMWANT)
	runtime=ipq.ne.0
d85 1
a85 1
	 close(lun1)
d89 5
d95 1
a144 1
C
d176 3
a178 2
c      CALL ALLOCIT(0,RUNTIME,IPQ,'RF 3',IRTFLG)
	call free(ipq)
@


1.12
log
@changed to 3 sigma and new f.s. formula .
@
text
@d7 1
a7 1
      SUBROUTINE PR3D(MAXDIM)
d14 2
a15 1
      COMMON          BUF(1024),Q(1)
d17 1
a17 1
      CHARACTER *81   FILNAM1
d20 3
d25 3
a27 1

d31 1
a31 3
8000	  CALL FILERD (FILNAM1,NLET,NULL,'FIRST INPUT',IRTFLG)
      IF (FILNAM1(1:1).EQ.'*') GOTO 9999    

d35 2
a36 3
         WRITE (NOUT,8100)
8100     FORMAT (' ** NON-EXISTING FILE. RE-START OR GIVE * TO QUIT ')
         GOTO 8000
d39 13
d56 8
d65 10
a74 4
	IF(K3+2*max0(nsam,nrow,nslice).GT.MAXDIM) THEN
	close(lun1)
	CALL ERRT(6,'RF 3',NE)
	RETURN
d89 1
a89 3
8500  CALL FILERD (FILNAM1,NLET,NULL,'SECOND INPUT',IRTFLG)
      IF (FILNAM1(1:1).EQ.'*') GOTO 9999    
      CALL OPENFB(BUF,FILNAM1,LUN1,NSAM2,NROW2,'OLD',NF,NSLICE2)
d92 2
a93 2
         WRITE (NOUT,8100)
         GOTO 8500
d97 3
a99 3
         WRITE (NOUT,8600)
8600     FORMAT (' **IMAGES NOT SAME SIZE! RE-START OR GIVE * TO QUIT ')
         GOTO 8500
a111 11
         CALL RDPRM(WI, NLOOP, ILOOP, 'RING WIDTH')
C
  	CALL RDPRMC(SER,NUMC,.TRUE.,'MISSING CONE/WEDGE ANGLE(C/W)',
     &  NULL,IRT)
C
	IF(SER.NE.'C'.AND.SER.NE.'W')THEN
	SER='C'
	ENDIF
C
	CALL RDPRM(SSANG,NLOOP,ILOOP,'MAXIMUM TILT ANGLE')
C
a125 14
	Y1=FLOAT(MAX0(NSAM,NROW,NSLICE))
	INC=JINT(Y1/WI)/2+1
C
	K4=K3+INC
	K5=K4+INC
	K6=K5+INC
	K7=K6+INC
	K8=K7+INC
C
	IF(K8.GT.MAXDIM)THEN
	CALL ERRT(6,'RF 3',NE)
	RETURN
	ENDIF
C
d156 3
a158 1
9999  RETURN
@


1.11
log
@clear hollorith continuation line prob
@
text
@a0 1

d9 1
a9 1
      INCLUDE 'CMBLOCK.INC'
d11 1
a11 1
      INCLUDE 'COMMON1:CMBLOCK.INC'
d13 1
a13 2


d145 1
a145 1
	DLIST(5)=2./SQRT(PI*WI*(FLOAT(L)-0.5))
@


1.10
log
@line too long
@
text
@d130 5
a134 5
      WRITE(NOUT,*) 'THIS PROGRAM IS DEVELOPED FOR 3D RESOLUTION  
     $  ESTIMATION BY THE METHOD OF PHASE RESIDUES AND 
     $  FOURIER RING CORRELATION'
      WRITE(NOUT,*) 'FOLLOWING IS THE RESULT OF PR AND FRC 
     & (ALSO IN DOC FILE)'
@


1.9
log
@*** empty log message ***
@
text
@d130 3
a132 2
      WRITE(NOUT,*) 'THIS PROGRAM IS DEVELOPED FOR 3D RESOLUTION ESTIMATION 
     $  BY THE METHOD OF PHASE RESIDUES AND FOURIER RING CORRELATION'
@


1.8
log
@memory check inserted ...
@
text
@d137 2
a138 2
5700  FORMAT(10X,'|RING RADIUS|','RING RADIUS|',
     $ 'PR BY SHELLS|','  FRC|','  FRCCRIT','# OF VOXELS|')		
d140 1
a140 1
5800  FORMAT(11X,'  IN VOXELS ','  NORMALIZED')		
@


1.7
log
@fourier ring correlation added
@
text
@d43 6
@


1.6
log
@*** empty log message ***
@
text
@d137 1
a137 1
       DLIST(2)=(L-1)*WI/Y1
d144 1
a144 1
6000  WRITE(NOUT,6100)L,(DLIST(K),K=2,3,4,5),JDUM
@


1.5
log
@prompt fixed
@
text
@d20 1
a20 1
      DIMENSION       DLIST(5)
d25 1
d110 3
d114 1
a114 1
	IF(K5.GT.MAXDIM)THEN
d119 2
a120 2
	CALL PR3DB(Q(K1),Q(K2),Q(K3),Q(K4),Q(K5),NSAM,NROW,
     &  NSLICE,SSANG,INC,Y1,WI,SER)
d123 1
a123 1
      NLIST=4
d125 3
a127 2
     $  BY THE METHOD OF PHASE RESIDUES'
      WRITE(NOUT,*) 'FOLLOWING IS THE RESULT OF PR (ALSO IN DOC FILE)'
d132 1
a132 1
     $ 'PR BY SHELLS|',' # OF VOXELS|')		
d135 1
a135 1
      DO 6000 L=1,INC 
d139 4
a142 2
	DUM=Q(K5+L-1)
       DLIST(4)=JDUM
d144 1
a144 1
6000  WRITE(NOUT,6100)l,(DLIST(K),K=2,3),JDUM
d147 1
a147 1
6100  FORMAT (1X,I4,6X,2G12.5,6X,i6)
@


1.4
log
@*** empty log message ***
@
text
@a1 2
      SUBROUTINE PR3D(MAXDIM)

d5 1
a5 1
C ACHIEVED. 
d7 2
a68 2
C
C
d79 1
a80 2
         CALL RDPRM(WI, NLOOP, ILOOP, 'RING WIDTH$')
C
d88 1
a88 2
	CALL RDPRM(SSANG,NLOOP,ILOOP,'MISSING ANGLE')
C	
a108 1
C
@


1.3
log
@accomodates mixed radix volumes and also for missing wedges.
@
text
@d21 1
d109 1
a109 1
	INC=JINT(Y1/WI)
d115 1
a115 1
	IF(K5.GT.MAXMEM)THEN
d124 1
a124 1
      NLIST=5
d135 6
a140 6
      DO 6000 L=1, INC 
       DLIST(1)=100*M+L
       DLIST(2)=L
       DLIST(3)=(L-1)*WI/Y1
       DLIST(4)=Q(K3+L-1)
       DLIST(5)=Q(K5+L-1)
d142 1
a142 2
6000  WRITE(NOUT,6100)INT(DLIST(1)),INT(DLIST(2)),(DLIST(K),K=3,4),
     $	INT(DLIST(5))
d145 1
a145 1
6100  FORMAT (1X,I4,6X,I4,6X,2G12.5,6X,I4)
@


1.2
log
@cpp_lines_added
@
text
@d16 1
a16 2
      COMMON          DUMMY(80),BDUM(1024),Q(1)
      INTEGER         DIMEN3
d18 4
a21 4
      CHARACTER *81   FILNAM1, FILNAM2
      CHARACTER       NULL
      DIMENSION       DLIST(7)
        DATA  LUN1/11/, LUN2/12/, NDOC/88/
d24 2
a25 2
C   ----------------------input first image
8000  CALL FILERD (FILNAM1,NLET,NULL,'FIRST INPUT',IRTFLG)
d28 1
a28 1
      CALL OPENFB(BDUM,FILNAM1,LUN1,NSAM,NROW,'OLD',NF,NSLICE)
d36 15
a50 5
      IF (NSAM.NE.NROW.OR.NROW.NE.NSLICE) THEN
         WRITE (NOUT,8200)
8200     FORMAT (' ** GIVE CUBIC IMAGES! RE-START OR GIVE * TO QUIT ')
         GOTO 8000
      ENDIF
d52 4
a55 4
C   ----------------------input second image
8500  CALL FILERD (FILNAM2,NLET,NULL,'SECOND INPUT',IRTFLG)
      IF (FILNAM2(1:1).EQ.'*') GOTO 9999    
      CALL OPENFB(BDUM,FILNAM2,LUN2,NSAM2,NROW2,'OLD',NF,NSLICE2)
d68 20
a87 6
C   ------------- input missing cone angle and ring width
      CALL RDPRM(SSANG, NLOOP, ILOOP, 'missing cone angle$')
      CALL RDPRM(WI, NLOOP, ILOOP, 'ring width$')
      CALL RDPRM(WA, NLOOP, ILOOP, 'angular increment$')
  	IF (WA.EQ.0) THEN
	WA=10
a88 1
      MAXA=INT((90-SSANG)/WA)+1
d90 2
a91 20
C   --------------memory alocation
      DIMEN3 = NSAM*NROW*NSLICE
      K1     = 1
      K2     = K1+DIMEN3
      K3     = K2+DIMEN3	
      K4     = K3+NSAM/2
      K5     = K4+(NSAM/2)*MAXA
      K6     = K5+(NSAM/2)*MAXA
      K7     = K6+NSAM/2
      K8     = K7+(NSAM/2)*MAXA
      MEMTOT=K8+1200
      IF (MEMTOT.GT.MAXDIM) THEN
      CALL ERRT(6, 'PR3D',NE)
      RETURN
      ENDIF
C   ---------------read two images to matrix Q(K1) and Q(K2)
        DO  5500  I=1,NROW*NSLICE
        J=K1+(I-1)*NSAM
5500    CALL  REDLIN(LUN1,Q(J),NSAM,I)
        CLOSE(LUN1)
d93 12
a104 4
        DO  5501  I=1,NROW*NSLICE
        L=K2+(I-1)*NSAM
5501    CALL  REDLIN(LUN2,Q(L),NSAM,I)
        CLOSE(LUN2)
d106 21
a126 7
	CALL  PR3DB(Q(K1),Q(K2),Q(K3),Q(K4),Q(K5),MIN,MAX,Q(K6),Q(K7),DIMEN3,
     $              SSANG,WI,WA,MAXA,NSAM,NROW,NSLICE)
C   ---------------to write result into doc file and result file
      NLIST=7
      WRITE(NOUT,*) 'This program is developed for 3D resolution estimation 
     $  by the method of phase residue'
      WRITE(NOUT,*) 'following is the result of PR (also in DOC file)'
d128 1
a128 1
5600  FORMAT(1X,'ring width = ',G12.5)
d130 2
a131 2
5700  FORMAT(10X,'|ring radius|','ring radius|',
     $ 	'direction|','PR by torus|','PR by shells|',' voxel No.|')		
d133 2
a134 6
5800  FORMAT(11X,'  in voxel  ','  normalized','     theta')		
      DO 6000 M=1, MAXA 
      LK4=K4+(M-1)*NSAM/2
      LK5=K5+(M-1)*NSAM/2
      DO 6000 L=MIN, MAX 

d137 3
a139 5
       DLIST(3)=FLOAT(L)/FLOAT(NSAM)
       DLIST(4)=FLOAT(M-1)*WA
       DLIST(5)=Q(LK4+L-1)
       DLIST(6)=Q(K3+L-1)
       DLIST(7)=Q(LK5+L-1)
d141 2
a142 2
6000  WRITE(NOUT,6100)INT(DLIST(1)),INT(DLIST(2)),(DLIST(K),K=3,6),
     $	INT(DLIST(7))
d145 1
a145 1
6100  FORMAT (1X,I4,6X,I4,6X,4G12.5,4X,I4)
@


1.1
log
@Initial revision
@
text
@d9 3
d13 1
@
