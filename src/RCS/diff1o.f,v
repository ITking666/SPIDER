head	1.29;
access;
symbols
	healthdept_2018:1.29
	pre_getangas:1.26
	GPL2010:1.26
	pre_GPL2010:1.25
	pre_var_equation:1.25
	pre_fftwrings:1.25
	pre_opfiles:1.25
	src:1.25
	best-code:1.25
	x-named-regs:1.24
	x:1.24
	v13-00:1.24
	pre_GPL:1.22
	prec_CA:1.22
	noindx:1.21
	Bproc:1.18
	oct21:1.15
	last77:1.14;
locks; strict;
comment	@c @;


1.29
date	2018.10.03.14.34.04;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2014.07.30.13.41.39;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2014.01.12.19.53.45;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2010.06.24.13.25.25;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2006.01.06.14.52.08;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2005.10.17.20.38.28;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2005.10.17.18.28.52;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2003.02.20.21.24.39;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2002.03.11.14.08.30;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2000.12.18.17.46.47;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2000.11.05.19.49.51;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2000.08.10.15.15.57;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	99.12.07.15.37.01;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	99.11.10.23.09.14;	author yuchen;	state Exp;
branches;
next	1.15;

1.15
date	99.04.21.15.56.38;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	99.02.04.15.34.37;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	98.04.03.16.17.18;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	98.03.19.21.39.42;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	98.03.11.19.54.18;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	97.10.06.17.04.13;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	97.09.30.20.14.45;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	97.02.13.20.27.42;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	97.02.13.20.24.00;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	95.06.06.14.07.25;	author mladjadj;	state Exp;
branches;
next	1.5;

1.5
date	94.12.05.15.53.17;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	94.07.12.15.49.36;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	94.07.12.15.44.17;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.04.19;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.48.17;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.29
log
@email_health_dept
@
text
@
C ++********************************************************************
C                                                                      
C    DIFF1O                                                          
C                   USED OPFILE                    NOV 00 ARDEAN LEITH
C                   OPFILEC                        FEB 03 ARDEAN LEITH
C                   MAXNAM                         JUL 14 ARDEAN LEITH
C                                                                      
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      
C  DIFF1O(IRTFLG)                                                      
C                                                                      
C  PURPOSE:                                                            
C           OPTION: LATTICE :: EICONIX OR PE DENSITOMETER AND LEXIDATA
C           INTERACTIVE SELECTION OF DIFFRACTION SPOTS WITH LATTICE
C           REFINEMENT AND CORRECTION FOR LOCAL BACKGROUND. 
C
C           OPTION: SINGLE :: : EICONIX OR PE DENSITOMETER AND LEXIDATA
C           SELECTION OF A SINGLE SPOT; INFORMATION OUTPUT TO TERMINAL.
C
C           OPTION RING :: EICONIX OR PE DENSITOMETER AND LEXIDATA
C           SELECTION OF UP TO 20 POINTS ON ONE RING OF A POWDER
C           PATTERN AND LEAST-SQUARES FIT TO CENTER AND RADIUS.
C
C           THIS IS REALLY ANCIENT!! al 2014
C
C23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
C **********************************************************************

        SUBROUTINE DIFF1O(IRTFLG)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        COMMON /FRAME/IFRAME
        COMMON /POINTR/IPOINT
        COMMON /LATTRX/XM(3,4),YM(3,4)
        COMMON /EDGSUM/PN(3,4)
        COMMON /SIZE/ISIZ

        DIMENSION     PLIST(7)

        CHARACTER*8   CTIME
        CHARACTER*12  CDATE

        CHARACTER(LEN=MAXNAM) :: FILNAM,DOCNAM

        CHARACTER *3  ANS,ANSP
        CHARACTER     NULL
 
        REAL VDUM
        DATA  VDUM/0.0/

        DATA JKEY/0/
 
        NULL = CHAR(0)
        LUN1   = 10
        LUNDOC = 13
        IDUM=0 

1000    CALL RDPRMC(ANS,NC,.TRUE.,'OPTION L/S/R ',NULL,IRTFLG)
        IF (IRTFLG.NE.0) RETURN
        
        CALL RDPRMI(ISIZ,ID,NOT_USED,'SIZE FACTOR')
        IF (ISIZ.EQ.0) RETURN

        IF (ANS(1:1).EQ.'R') THEN
           CALL WFTCIRC(X1,Y,RR)
           WRITE(NOUT,2001) X1,Y,RR
2001       FORMAT(' THE CENTER OF THIS RING IS AT ',E12.5,1X,E12.5,/,
     &           ', AND THE RADIUS IS ',E12.5)
           WRITE(NDAT,2001) X1,Y,RR
           RETURN

        ELSEIF (ANS(1:1).EQ.'S') THEN
           MAXIM = 0
           CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
     &                   MAXIM,'INPUT',.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           CALL SINGLE(NSAM,NROW)
           CLOSE(LUN1)
           RETURN

        ELSE IF(ANS(1:1).NE.'L') THEN
           RETURN
        ENDIF

1       MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
     &                   MAXIM,'INPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

910     CONTINUE
        CALL RDPRMC(ANS,NC,.TRUE.,
     &     'DO YOU WANT A WINDOW POSITION DOCUMENT? (Y/N)',
     &     NULL,IRTFLG)

        CALL RDPRMC(ANSP,NC,.TRUE.,
     &     'DO YOU WANT A PATTERSON FUNCTION DOCUMENT? (Y/N)',
     &     NULL,IRTFLG)

C       INITIALIZE LATTIC SUBROUTINE
        CALL LATICE(0,IDUM,IDUM,VDUM,VDUM,VDUM,VDUM,VDUM,
     &              VDUM,VDUM,VDUM,VDUM,VDUM)
 
        CALL RDPRMI(IXDIA,IYDIA,NOT_USED,'WINDOW SIZE')
        IF (IXDIA .EQ. 0) GO TO 1000
        IF (IYDIA .EQ. 0) IYDIA = IXDIA

        CALL RDPRMI(MODE,ID,NOT_USED,
     &   'MODE: MAX (1)/ CNTR OF DEN (2) // NO BK CORR (-)')
333     CONTINUE

C       FIND INITIAL VALUES FOR LATTICE VECTORS

20      CALL FILERD(DOCNAM,NLET,NULL,'REFLECTION DOC.',IRTFLG)
        IF (IRTFLG .EQ. -1) GOTO 333

        NOPEN = 0
        DO IKEY = 1,3
          CALL UNSAV(DOCNAM,NOPEN,LUNDOC,IKEY,PLIST,5,LERR,1)
          NOPEN = 1
          IF (LERR .NE. 0) GOTO 20

          IH    = PLIST(2)
          IK    = PLIST(3)
          IXPOS = PLIST(4)*ISIZ
          IYPOS = PLIST(5)*ISIZ

          CALL SPOTWT(MODE,LUN1,IXPOS,IYPOS,IXDIA,IYDIA,PA,PB,PC,
     &         NEGC,KOX,KOY,CAVG,CMX,BKG,AAVG,AMX,NSAM,NROW,CTOT)

          WRITE(NOUT,4029)KOX,KOY,CAVG,CMX
4029      FORMAT(' CENTER AT:',2(I5,2X),' WINDOW AVG,MAX',
     &             F10.5,', ',F10.5)
          SX = FLOAT(KOX)
          SY = FLOAT(KOY)
C          CALL LATICE(1,IH,IK,SX,SY,CAVG,,,,,,,)
          CALL LATICE(1,IH,IK,SX,SY,CAVG,VDUM,VDUM,
     &              VDUM,VDUM,VDUM,VDUM,VDUM)
 

        ENDDO

C       ALL REFLECTIONS OBTAINED
C        CALL LATICE(2,,,,,,CX,CY,AX,AY,BX,BY,ANGLE)
        CALL LATICE(2,IDUM,IDUM,VDUM,VDUM,VDUM,
     &              CX,CY,AX,AY,BX,BY,ANGLE)
 
        WRITE(NOUT,4035)CX,CY,AX,AY,BX,BY,ANGLE
4035    FORMAT(' LAT. CNTR CX,CY:',2(F10.4,', '),' AX,AY:',
     &     2(F10.4,', '),/,' BX,BY:',2(F10.4,', '),' ANGLE:',F7.2)

400     CONTINUE     
C       OPTIMIZATION STEP
        CALL RDPRMI(IRAD,IMN,NOT_USED,'MAX RADIUS,MIN RADIUS')
        IF (IRAD .EQ. 0) GO TO 910

        RADMX  = FLOAT(IRAD)
        RADMIN = FLOAT(IMN)
        IF (RADMX.LE.RADMIN) THEN
           WRITE(NOUT,*) ' MAX RADIUS LESS THAN MIN RADIUS; TRY AGAIN!'
        GO TO 400
        ENDIF
C       LET REFERENCE REFLECTION BE ' S '
        CALL RDPRMI(ISH,ISK,NOT_USED,'REFLN. INDEX FOR REL. INT.')

        DO  IPASS=1,2
          ARAD = SQRT(AX*AX+AY*AY)
          BRAD = SQRT(BX*BX+BY*BY)
          NHR  = RADMX/ARAD
          NKR  = RADMX/BRAD
C          CALL LATICE(0,,,,,,,,,,,,)
          CALL LATICE(0,IDUM,IDUM,VDUM,VDUM,VDUM,VDUM,VDUM,
     &              VDUM,VDUM,VDUM,VDUM,VDUM)
 
          CALL DATE_2K(CDATE)
          CALL MYTIME(CTIME)

          WRITE(NDAT,432)CDATE,CTIME
432       FORMAT(/'***********   ON  ',A11,'   AT  ',A8,'********',/)

          WRITE(NDAT,4036) IPASS,MODE,IXDIA,IYDIA,IRAD,IMN,CX,CY,
     &                     AX,AY,BX,BY,ANGLE,ISH,ISK
4036      FORMAT('  PASS #:',I2,
     &    ' MODE OF SPOT MEASURING:',I2,' IXDIA,IYDIA:',2I4,
     &    ' MAX,MIN RADIUS ', 2I6,/
     &    '  LATTICE CENTER X,Y:',2(F8.1,' '),'A VECTOR:',2(G10.3,' '),
     &    ' B VECTOR:',2(G10.3,' '),/ ' ANGLE: ',F7.2,
     &    '  INTENSITIES REL. TO  ',2I4,/)

          WRITE(NDAT,4037)
4037      FORMAT('    H   K     R.I.      AVER(COR)    MAX(COR) ',
     &     '   BKG      AVER(UNCOR)  MAX(UNCOR)  CEN X CEN Y',
     &     '  IN X, IN Y,   R,  CTOT')
          SX  = AX*ISH+BX*ISK
          SY  = AY*ISH+BY*ISK
          ISX = IFIX(SX+CX+0.5)
          ISY = IFIX(SY+CY+0.5)
          CALL SPOTWT(MODE,LUN1,ISX,ISY,IXDIA,IYDIA,PA,PB,PC
     &     ,NEGC,KOX,KOY,CAVG,CMX,BKG,AAVG,AMX,NSAM,NROW,CTOT)
          SINT = CAVG
C
          DO  KP=1,NKR+1
            DO 4050 IHP=1,NHR+1

C             COUNTER FOR R.I. AVERAGING
              ICOUNT = 0
              RISUM  = 0.

C             GROUP THE INDICIES BY ABSOLUTE VALUE

              DO 4048 ISC=1,4
                IF (ISC .NE. 1) GO TO 4041
                IH = IHP-1
                IK = KP-1

C               CHECK THAT THE INDEXED SPOT IS IN ALLOWED LIMITS, IF NO SKIP IT

                XPOS = AX*IH+BX*IK
                YPOS = AY*IH+BY*IK
                R    = SQRT(XPOS*XPOS+YPOS*YPOS)
                IF (R .LT. RADMX .AND. R .GT. RADMIN) GO TO 4051
C               SPOT OUT OF MIN MAX RADIUS BOUNDS
                GO TO 4050

4041            IF(ISC.NE.2)GO TO 4043
                IH = -IHP+1
                IK = -KP+1
                GO TO 4051

4043            IF (ISC .NE. 3) GO TO 4045
                IF (IH .EQ. 0 .OR. IK .EQ. 0) GO TO 4049
                IH = -IHP+1
                IK = KP-1
                GO TO 4051

4045            IH = IHP-1
                IK = -KP+1

4051            XPOS  = AX*IH+BX*IK
                YPOS  = AY*IH+BY*IK
                IXPOS = IFIX(XPOS+CX+0.5)
                IYPOS = IFIX(YPOS+CY+0.5)

                IF (IXPOS .GT. 0 .AND. IXPOS .LE. NSAM) GO TO 4052

C               INDEXED SPOT OUT OF RANGE OF FILE
                GO TO 4048

4052            IF (IYPOS .LE.0 .OR. IYPOS .GT. NROW) GO TO 4048

C               MEASURE, ENTER INTO LATTICE OPTIMIZATION AND RECORD SPOT DATA
        CALL SPOTWT(MODE,LUN1,IXPOS,IYPOS,IXDIA,IYDIA,PA,PB,PC
     &           ,NEGC,KOX,KOY,CAVG,CMX,BKG,AAVG,AMX,NSAM,NROW,CTOT)
        IF (ANS(1:1).EQ.'Y'.AND.IPASS.EQ.2) THEN
           JKEY = JKEY+1
           PLIST(1) = JKEY
           PLIST(2) = IH
           PLIST(3) = IK
           PLIST(4) = IXPOS
           PLIST(5) = IYPOS
           PLIST(6) = IXDIA
           PLIST(7) = IYDIA
           CALL SAVD(30,PLIST,7,IRTFLG)
           IF(ANSP(1:1).EQ.'Y') THEN
              PLIST(4) = CTOT
              CALL SAVD(31,PLIST,4,IRTFLG)
           ENDIF
         ENDIF

         RELATI = CAVG/SINT
         ICOUNT = ICOUNT+1
         RISUM  = RISUM+RELATI
         RIAVG  = RISUM/ICOUNT
         WRITE(NDAT,4150)IH,IK,RELATI,CAVG,CMX,BKG,AAVG,AMX,KOX,
     &                 KOY,IXPOS, IYPOS,R,CTOT
4150     FORMAT(1X,2I4,2X,6(G10.4,', '),2I5,',',2I5,',',F7.1
     &              ,', ',F8.2)

         CALL LATICE(1,IH,IK,FLOAT(KOX),FLOAT(KOY),CAVG*R,VDUM,VDUM,
     &              VDUM,VDUM,VDUM,VDUM,VDUM)

C        DISTANCE WEIGHTED POSITIONING -----INSTALLED
4048     CONTINUE

C        ******** CHECK COUNTER IF USED
4049     IF (ICOUNT .EQ. 0) GO TO 4050

         WRITE(NDAT,4151) RIAVG
4151     FORMAT('  AVERAGE R. I. =  ',G10.4,/)
4050     CONTINUE
         ENDDO


          WRITE(NDAT,4152) JKEY
4152      FORMAT('  TOTAL NUMBER OF WINDOWS = ',I6)

C         PARAM(35) = JKEY
          CALL REG_SET(34,FLOAT(JKEY),NULL,IRTFLG)
C         THIS PUTS JKEY INTO SPIDER REGISTER X34
  
C         COMPUTE OPTIMUM LATTICE VECTORS FOR NEXT ITERATION
          IF (IPASS .NE. 2)
     &         CALL LATICE(2,IDUM,IDUM,VDUM,VDUM,VDUM,
     &                  CX,CY,AX,AY,BX,BY,ANGLE)
        ENDDO
        CLOSE(30)
        CLOSE(31)

        CLOSE(LUN1)
        GO TO 910

        END





@


1.28
log
@detab , LEN=MAXNAM
@
text
@d15 1
a15 1
C=* Email: spider@@wadsworth.org                                        *
@


1.27
log
@enter
@
text
@d3 6
a8 5
C                                                                      *
C    DIFF1O                                                          *
C                                   USED OPFILE NOV 00 ARDEAN LEITH
C                                   OPFILEC    FEB 03 ARDEAN LEITH
C                                                                      *
d13 1
a13 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d30 7
a36 7
C                                                                      *
C  DIFF1O(IRTFLG)                                                      *
C                                                                      *
C  PURPOSE:                                                            *
C		OPTION: LATTICE :: EICONIX OR PE DENSITOMETER AND LEXIDATA
C		INTERACTIVE SELECTION OF DIFFRACTION SPOTS WITH LATTICE
C		REFINEMENT AND CORRECTION FOR LOCAL BACKGROUND. 
d38 2
a39 2
C               OPTION: SINGLE :: : EICONIX OR PE DENSITOMETER AND LEXIDATA
C		SELECTION OF A SINGLE SPOT; INFORMATION OUTPUT TO TERMINAL.
d41 5
a45 3
C		OPTION RING :: EICONIX OR PE DENSITOMETER AND LEXIDATA
C		SELECTION OF UP TO 20 POINTS ON ONE RING OF A POWDER
C		PATTERN AND LEAST-SQUARES FIT TO CENTER AND RADIUS.
d53 1
d55 4
a58 4
	COMMON /FRAME/IFRAME
	COMMON /POINTR/IPOINT
	COMMON /LATTRX/XM(3,4),YM(3,4)
	COMMON /EDGSUM/PN(3,4)
d63 4
a66 2
	CHARACTER*8   CTIME
	CHARACTER*12  CDATE
a67 1
        CHARACTER *81 FILNAM,DOCNAM
d73 1
d77 1
a77 1
 	LUN1   = 10
d79 1
a79 1
	IDUM=0 
d81 3
a83 3
1000	CALL RDPRMC(ANS,NC,.TRUE.,'OPTION L/S/R ',NULL,IRTFLG)
	IF (IRTFLG.NE.0) RETURN
	
d87 4
a90 4
	IF (ANS(1:1).EQ.'R') THEN
  	   CALL WFTCIRC(X1,Y,RR)
	   WRITE(NOUT,2001) X1,Y,RR
2001	   FORMAT(' THE CENTER OF THIS RING IS AT ',E12.5,1X,E12.5,/,
d92 1
a92 1
	   WRITE(NDAT,2001) X1,Y,RR
d95 1
a95 1
	ELSEIF (ANS(1:1).EQ.'S') THEN
d101 1
a101 1
	   CALL SINGLE(NSAM,NROW)
d103 1
a103 1
	   RETURN
d105 1
a105 1
	ELSE IF(ANS(1:1).NE.'L') THEN
d107 1
a107 1
	ENDIF
d109 1
a109 1
1	MAXIM = 0
d128 2
a129 2
	IF (IXDIA .EQ. 0) GO TO 1000
	IF (IYDIA .EQ. 0) IYDIA = IXDIA
d131 1
a131 1
	CALL RDPRMI(MODE,ID,NOT_USED,
d133 1
a133 1
333	CONTINUE
d138 1
a138 1
	IF (IRTFLG .EQ. -1) GOTO 333
d171 2
a172 2
	WRITE(NOUT,4035)CX,CY,AX,AY,BX,BY,ANGLE
4035	FORMAT(' LAT. CNTR CX,CY:',2(F10.4,', '),' AX,AY:',
d177 2
a178 2
	CALL RDPRMI(IRAD,IMN,NOT_USED,'MAX RADIUS,MIN RADIUS')
	IF (IRAD .EQ. 0) GO TO 910
d180 2
a181 2
	RADMX  = FLOAT(IRAD)
	RADMIN = FLOAT(IMN)
d187 1
a187 1
	CALL RDPRMI(ISH,ISK,NOT_USED,'REFLN. INDEX FOR REL. INT.')
d189 1
a189 1
	DO  IPASS=1,2
d202 1
a202 1
432	  FORMAT(/'***********   ON  ',A11,'   AT  ',A8,'********',/)
d204 1
a204 1
	  WRITE(NDAT,4036) IPASS,MODE,IXDIA,IYDIA,IRAD,IMN,CX,CY,
d206 1
a206 1
4036	  FORMAT('  PASS #:',I2,
d309 1
a309 1
4049	 IF (ICOUNT .EQ. 0) GO TO 4050
d314 1
a314 1
	 ENDDO
d328 1
a328 1
	ENDDO
d333 1
a333 1
	GO TO 910
d335 1
a335 1
	END
@


1.26
log
@GPL_2010
@
text
@d75 1
a75 1
1000	CALL RDPRMC(ANS,NC,.TRUE.,'ENTER OPTION--L,S,R ',NULL,IRTFLG)
@


1.25
log
@reg_set param
@
text
@a8 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d10 5
a14 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d16 1
a16 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.24
log
@GPL License fixed
@
text
@d273 1
a273 1
                CALL SPOTWT(MODE,LUN1,IXPOS,IYPOS,IXDIA,IYDIA,PA,PB,PC
d275 21
a295 21
        IF(ANS(1:1).EQ.'Y'.AND.IPASS.EQ.2) THEN
        JKEY = JKEY+1
        PLIST(1) = JKEY
        PLIST(2) = IH
        PLIST(3) = IK
        PLIST(4) = IXPOS
        PLIST(5) = IYPOS
        PLIST(6) = IXDIA
        PLIST(7) = IYDIA
        CALL SAVD(30,PLIST,7,IRTFLG)
        IF(ANSP(1:1).EQ.'Y') THEN
        PLIST(4) = CTOT
        CALL SAVD(31,PLIST,4,IRTFLG)
        ENDIF
        ENDIF

        RELATI = CAVG/SINT
        ICOUNT = ICOUNT+1
        RISUM  = RISUM+RELATI
        RIAVG  = RISUM/ICOUNT
        WRITE(NDAT,4150)IH,IK,RELATI,CAVG,CMX,BKG,AAVG,AMX,KOX,
d297 1
a297 1
4150    FORMAT(1X,2I4,2X,6(G10.4,', '),2I5,',',2I5,',',F7.1
d300 1
a300 1
        CALL LATICE(1,IH,IK,FLOAT(KOX),FLOAT(KOY),CAVG*R,VDUM,VDUM,
d302 1
d308 13
a320 9
              WRITE(NDAT,4151) RIAVG
4151	      FORMAT(' ********* AVE. R. I. =  ',G10.4,/)
4050        CONTINUE
	  ENDDO
        WRITE(NDAT,4152) JKEY
4152    FORMAT('  TOTAL NUMBER OF WINDOWS = ',I6)
C       PARAM(35) = JKEY
        CALL REG_SET(34,FLOAT(JKEY),.TRUE.,IRTFLG)
C       THIS PUTS JKEY INTO SPIDER REGISTER X34
@


1.23
log
@HRI GPL License used
@
text
@a8 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d12 1
a12 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a31 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.22
log
@opfilec
@
text
@d10 24
@


1.21
log
@nloop,iloop_removed
@
text
@d6 1
a19 1
C                                                                      *
d30 1
a30 1
C        0         2         3         4         5         6         7     
d78 1
a78 1
           CALL OPFILE(.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
d91 1
a91 1
        CALL OPFILE(.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
d103 1
a107 1

d150 1
a150 1
     $              CX,CY,AX,AY,BX,BY,ANGLE)
a151 1

d155 1
@


1.20
log
@time --> mytime
@
text
@d65 1
a65 1
        CALL RDPRMI(ISIZ,ID,NLOOP,ILOOP,'SIZE FACTOR')
d108 1
a108 1
        CALL RDPRMI(IXDIA,IYDIA,NLOOP,ILOOP,'WINDOW SIZE')
d112 1
a112 1
	CALL RDPRMI(MODE,ID,NLOOP,ILOOP,
d158 1
a158 1
	CALL RDPRMI(IRAD,IMN,NLOOP,ILOOP,'MAX RADIUS,MIN RADIUS')
d168 1
a168 1
	CALL RDPRMI(ISH,ISK,NLOOP,ILOOP,'REFLN. INDEX FOR REL. INT.')
@


1.19
log
@used opfile
@
text
@d46 2
a47 5
	INTEGER       ITIME(4),IDATE(5)
	CHARACTER*16  CTIME
	CHARACTER*20  CDATE
        EQUIVALENCE   (ITIME,CTIME)
        EQUIVALENCE   (IDATE,CDATE)
d68 1
a68 1
	IF(ANS(1:1).EQ.'R') THEN
d72 1
a72 1
     1           ', AND THE RADIUS IS ',E12.5)
d76 1
a76 1
	ELSE IF(ANS(1:1).EQ.'S') THEN
d160 1
d163 2
a164 2
        IF(RADMX.LE.RADMIN) THEN
        WRITE(NOUT,*) ' MAX RADIUS LESS THAN MIN RADIUS; TRY AGAIN!'
d180 1
a180 1
          CALL TIME(CTIME)
d182 2
a183 2
          WRITE(NDAT,432)IDATE,ITIME
432	  FORMAT(/'***********   ON  ',5A2,'   AT  ',4A2,'********',/)
d186 1
a186 1
     1    AX,AY,BX,BY,ANGLE,ISH,ISK
d188 4
a191 4
     1    ' MODE OF SPOT MEASURING:',I2,' IXDIA,IYDIA:',2I4,
     2    ' MAX,MIN RADIUS ', 2I6,/
     3    '  LATTICE CENTER X,Y:',2(F8.1,' '),'A VECTOR:',2(G10.3,' '),
     4    ' B VECTOR:',2(G10.3,' '),/ ' ANGLE: ',F7.2,
d196 2
a197 2
     1     '   BKG      AVER(UNCOR)  MAX(UNCOR)  CEN X CEN Y',
     2     '  IN X, IN Y,   R,  CTOT')
@


1.18
log
@used reg_set
@
text
@d4 2
a6 1
C                                                                      *
a35 3
C       I DO NOT KNOW IF SAVE IS NEEDED FEB 99 al
        SAVE

d80 5
a84 7
           CALL FILERD(FILNAM,NLET,NULL,'INPUT',IRTFLG)
           IF(IRTFLG.EQ.-1) RETURN
           CALL OPENF(FILNAM,LUN1,NSAM,NROW,'OLD',NF,NSLICE)
           IF(NF.NE.2) THEN
              WRITE(NOUT,*) '**** FILE OPEN ERROR IN DIFF1O '
             RETURN
           ENDIF
d93 4
a96 8
1	CALL FILERD(FILNAM,NLET,NULL,'INPUT',IRTFLG)
	IF (IRTFLG .EQ. -1) RETURN

	CALL OPENF(FILNAM,LUN1,NSAM,NROW,'OLD',NF,NSLICE)
	IF (NF .NE. 2) THEN
           WRITE(NOUT,*) ' **** FILE OPEN ERROR IN DIFF1'
           RETURN
        ENDIF
d100 2
a101 2
     1     'DO YOU WANT A WINDOW POSITION DOCUMENT? (Y/N)',
     2     NULL,IRTFLG)
d104 2
a105 2
     1     'DO YOU WANT A PATTERSON FUNCTION DOCUMENT? (Y/N)',
     2     NULL,IRTFLG)
@


1.17
log
@header.
@
text
@d15 1
a16 1
C                                                                      *
d289 1
a289 1
     1                 KOY,IXPOS, IYPOS,R,CTOT
d291 1
a291 1
     1              ,', ',F8.2)
d306 2
a307 1
        PARAM(35) = JKEY
d312 2
a313 2
     $         CALL LATICE(2,IDUM,IDUM,VDUM,VDUM,VDUM,
     $                  CX,CY,AX,AY,BX,BY,ANGLE)
d317 1
@


1.16
log
@a
@
text
@d2 17
a18 3
C ****************************************************************************
C
C   DIFF1O
a33 2

 
@


1.15
log
@y2k
@
text
@d21 1
a21 1
CNO_SAVE 
@


1.14
log
@CNO_SAVE
@
text
@d177 1
a177 1
          CALL DATE(CDATE)
@


1.13
log
@data idum removed
@
text
@d21 5
d68 1
d80 1
d84 1
d96 3
a98 2
     1  'DO YOU WANT A WINDOW POSITION DOCUMENT? (Y/N)',
     2  NULL,IRTFLG)
d100 2
a101 2
     1  'DO YOU WANT A PATTERSON FUNCTION DOCUMENT? (Y/N)',
     2  NULL,IRTFLG)
a102 1
C        CALL LATICE(0,,,,,,,,,,,,)
a279 1
C       CALL LATICE(1,IH,IK,FLOAT(KOX),FLOAT(KOY),CAVG*R,,,,,,,)
a297 1
C          IF (IPASS .NE. 2)  CALL LATICE(2,,,,,,CX,CY,AX,AY,BX,BY,ANGLE)
@


1.12
log
@*** empty log message ***
@
text
@a40 1
        INTEGER IDUM
d42 1
a42 1
        DATA IDUM/0/, VDUM/0.0/
d48 1
a48 1

@


1.11
log
@bad column overflow
@
text
@a276 1
x
@


1.10
log
@*** empty log message ***
@
text
@d265 7
a271 7
                RELATI = CAVG/SINT
                ICOUNT = ICOUNT+1
                RISUM  = RISUM+RELATI
                RIAVG  = RISUM/ICOUNT
                WRITE(NDAT,4150)IH,IK,RELATI,CAVG,CMX,BKG,AAVG,AMX,KOX,
     1              KOY,IXPOS, IYPOS,R,CTOT
4150            FORMAT(1X,2I4,2X,6(G10.4,', '),2I5,',',2I5,',',F7.1
d273 3
a275 2
C                CALL LATICE(1,IH,IK,FLOAT(KOX),FLOAT(KOY),CAVG*R,,,,,,,)
                CALL LATICE(1,IH,IK,FLOAT(KOX),FLOAT(KOY),CAVG*R,VDUM,VDUM,
d277 3
a279 4
  

C               DISTANCE WEIGHTED POSITIONING -----INSTALLED
4048          CONTINUE
d281 2
a282 2
C             ******** CHECK COUNTER IF USED
4049	      IF (ICOUNT .EQ. 0) GO TO 4050
@


1.9
log
@*** empty log message ***
@
text
@d161 1
a161 1
	DO 4080 IPASS=1,2
d197 1
a197 1
          DO 4060 KP=1,NKR+1
d286 1
a286 1
4060      CONTINUE
d297 1
a297 1
4080	CONTINUE
@


1.8
log
@bad cdate definition
@
text
@d147 1
a147 1
     &       2(F10.4,', '),/,' BX,BY:',2(F10.4,', '),' ANGLE:'F7.2)
@


1.7
log
@bad parameters in date & time call (new compiler)
@
text
@d32 2
a33 2
	CHARACTER*16  CTIME(4)
	CHARACTER*20  CDATE(5)
@


1.6
log
@removing the ISML call from SP R command
@
text
@a20 1
#ifdef SP_UNIX
a21 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d30 1
d32 5
d38 1
a38 2
        CHARACTER *3  ANS
        CHARACTER *3  ANSP
d170 2
a171 2
          CALL DATE(IDATE)
          CALL TIME(ITIME)
@


1.5
log
@use SP_UNIX to avoid imsl DUMINF call
@
text
@d49 1
a49 4
#ifdef SP_UNIX
c	option R is an IMSL(VAX) call
1000	CALL RDPRMC(ANS,NC,.TRUE.,'ENTER OPTION--L,S ',NULL,IRTFLG)
#else
a50 2
#endif

d57 6
a62 13

#ifdef SP_UNIX
  	  CALL WFTCIRC(X1,Y,RR)
	  R = SQRT(RR)
	  WRITE(NOUT,2001) X1,Y,R
2001	  FORMAT(' THE CENTER OF THIS RING IS AT ',F10.4,1X,F10.4,
     1    ', AND THE RADIUS IS ',F10.4)
	  WRITE(NDAT,2001) X1,Y,R
          RETURN
#else
	  RETURN
#endif

d64 10
a73 10
          CALL FILERD(FILNAM,NLET,NULL,'INPUT',IRTFLG)
          IF(IRTFLG.EQ.-1) RETURN
          CALL OPENF(FILNAM,LUN1,NSAM,NROW,'OLD',NF,NSLICE)
          IF(NF.NE.2) THEN
            WRITE(NOUT,*) '**** FILE OPEN ERROR IN DIFF1O '
            RETURN
          ENDIF
	  CALL SINGLE(NSAM,NROW)
          CLOSE(LUN1)
	  RETURN
d75 1
a75 1
          RETURN
@


1.4
log
@filed arg list of latice with dummy variables
@
text
@d49 4
d54 2
d62 13
a74 7
	CALL WFTCIRC(X1,Y,RR)
	R = SQRT(RR)
	WRITE(NOUT,2001) X1,Y,R
2001	FORMAT(' THE CENTER OF THIS RING IS AT ',F10.4,1X,F10.4,
     1  ', AND THE RADIUS IS ',F10.4)
	WRITE(NDAT,2001) X1,Y,R
	RETURN
d76 10
a85 10
        CALL FILERD(FILNAM,NLET,NULL,'INPUT',IRTFLG)
        IF(IRTFLG.EQ.-1) RETURN
        CALL OPENF(FILNAM,LUN1,NSAM,NROW,'OLD',NF,NSLICE)
        IF(NF.NE.2) THEN
        WRITE(NOUT,*) '**** FILE OPEN ERROR IN DIFF1O '
        RETURN
        ENDIF
	CALL SINGLE(NSAM,NROW)
        CLOSE(LUN1)
	RETURN
d87 1
a87 1
        RETURN
a307 1
4
d315 5
@


1.3
log
@filed arg list of latice with dummy variables
@
text
@d41 1
a41 1
        INTEGER VDUM
@


1.2
log
@cpp_lines_added
@
text
@d40 3
a42 1
        DATA NULL/0/
d44 2
a45 1

d94 4
a97 1
        CALL LATICE(0,,,,,,,,,,,,)
d131 4
a134 1
          CALL LATICE(1,IH,IK,SX,SY,CAVG,,,,,,,)
d139 4
a142 1
        CALL LATICE(2,,,,,,CX,CY,AX,AY,BX,BY,ANGLE)
d165 4
a168 1
          CALL LATICE(0,,,,,,,,,,,,)
d272 4
a275 1
                CALL LATICE(1,IH,IK,FLOAT(KOX),FLOAT(KOY),CAVG*R,,,,,,,)
d292 5
a296 1
          IF (IPASS .NE. 2) CALL LATICE(2,,,,,,CX,CY,AX,AY,BX,BY,ANGLE)
@


1.1
log
@Initial revision
@
text
@d21 3
d25 1
@
