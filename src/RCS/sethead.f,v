head	1.7;
access;
symbols
	pre_mrcs:1.5
	healthdept_2018:1.5
	pre_getangas:1.1;
locks; strict;
comment	@c @;


1.7
date	2019.12.03.19.43.35;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2019.11.04.17.36.11;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2018.10.03.14.34.16;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2014.08.25.12.29.29;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.04.18.51.02;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.26.16.25.12;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2010.11.26.18.41.22;	author leith;	state Exp;
branches;
next	;


desc
@@


1.7
log
@removed unused variables
@
text
@C++*********************************************************************
C                                                                      *
C  SETHEAD.F     NEW                            NOV  2010 ArDean Leith *                       
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2019  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C***********************************************************************
C
C   SETHEAD(LUN,NX,NY,NZ.IRTFLG)    
C
C   PURPOSE: SETS VALUES OF HEADER VARIABLE(S) BY NAME
C            I/O FILE ALREADY OPEN ON: LUN
C
C   PARAMETERS:  LUN       I/O UNIT                           (SENT)
C                NX..      FILE SIZE                          (SENT)
C                IRTFLG    ERROR FLAG                         (RET.)
C                          0  IS NORMAL
C                          1 INQUIRY WAS NOT AS EXPECTED
C
C***********************************************************************

      SUBROUTINE SETHEAD(LUN,NX,NY,NZ,IRTFLG)

      IMPLICIT NONE

      INCLUDE 'CMBLOCK.INC' 
      INCLUDE 'CMLIMIT.INC' 

      INTEGER                 :: LUN,NX,NY,NZ,IRTFLG 

      CHARACTER(LEN=160)      :: RESPONSE,ARGNOW,MSG
      CHARACTER(LEN=1)        :: NULL = CHAR(0)

      INTEGER, PARAMETER      :: MAXREGNAM = 10
      CHARACTER(LEN=MAXREGNAM):: REGNAME

C     MAXNSEL IS CURRENTLY SAME AS IN REG_SET.F !!!
      INTEGER, PARAMETER      :: MAXNSEL = 24  ! SEARCH & REGISTER LIST
      INTEGER                 :: LOCATION(MAXNSEL)
      INTEGER                 :: IREGSELS(MAXNSEL)
      REAL                    :: VALUES(MAXNSEL)
      CHARACTER(LEN=8)        :: NAMES(MAXNSEL)
      LOGICAL                 :: IS_MRC
      INTEGER                 :: I,IVALS,NGOT,IHEDLOC
      INTEGER                 :: ICOMM,MYPID,MPIERR 
        
      CALL SET_MPI(ICOMM,MYPID,IRTFLG)   ! RETURNS MPI PROCESS ID OR -1

      CALL LUNGETIS_MRC(LUN,IS_MRC,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET LIST OF ALL VARIABLE NUMBERS TO BE SET IN: LOCATION 
      IF (IS_MRC) THEN
         CALL INQUIREHEAD_LOC_MRC(LOCATION,NAMES,IVALS,IRTFLG)
      ELSE
         CALL INQUIREHEAD_LOC(    LOCATION,NAMES,IVALS,IRTFLG)
      ENDIF     
      IF (IRTFLG .NE. 0) RETURN
      ! write(6,*)' Matching values; ',ivals

C     GET LIST OF VARIABLE VALUES IN: VALUES 
      CALL RDPRA('VALUE(S)',IVALS,0,.FALSE.,VALUES,NGOT,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      IF (IVALS .NE. NGOT) THEN
         CALL ERRT(102,'INCONSISTENT # OF VARIABLES',NGOT)
         RETURN
      ENDIF


      DO I=1,IVALS    ! LOOP OVER ALL  WANTED HEADER VALUES
        IHEDLOC = LOCATION(I)     ! HEADER LOCATION WANTED
        !write(6,*)' In sethead - i,values(i): ',i,values(i)

C       SET HEADER VALUE FOR THIS HEADER LOCATION  
        IF (IS_MRC) THEN
C         MRC FILE
          CALL LUNSETVALS_R_MRC(LUN,IHEDLOC,1,VALUES(I),IRTFLG)
        ELSE
C         SPIDER FILE
          CALL SETLAB_R(LUN,IHEDLOC,1,VALUES(I),.FALSE.,IRTFLG)
        ENDIF
        ! write(6,*) ' IHEDLOC: ',IHEDLOC,VALUES(I)
        IF (IRTFLG .NE. 0) RETURN


C       KLUDGE FOR NZ < 0
        IF (LOCATION(I) == 1 .AND. VALUES(I) < 0) 
     &      VALUES(I) = ABS(VALUES(I))

        IF (VERBOSE .AND. (MYPID <= 0) ) THEN
C          ECHO HEADER VALUE & REGISTER SETTING
           ! WRITE(NOUT,91) IHEDLOC,NAME(IHEDLOC),VALUES(I)
91         FORMAT('  HEADER VARIABLE: ',I3,'  NAME: ',A,' = ',1PG11.3)
        ENDIF  ! END OF: IF (VERBOSE .AND. (MYPID <= 0) ) THEN
      ENDDO    ! END OF: DO I=1,IVALS  
  
      IF (IS_MRC) THEN
C       WRITING TO MRC FILE (SPIDER DONE IN SETLAB_R)
        CALL LUNWRTHED_MRC(LUN,IRTFLG)
      ENDIF

      END

C     ---------------- SETHEADEM2 -----------------------------------

C     PURPOSE: ALLOWS FIXING BAD FILES FROM: EM2EM O

      SUBROUTINE SETHEADEM2(LUN,NY,IRTFLG)

      IMPLICIT NONE

      INCLUDE 'CMBLOCK.INC' 
 
      INTEGER :: LUNARA,LUNSTK,LUNARB,LUNFLIP
      COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100),LUNFLIP(100)

      INTEGER :: LUN,NY,IRTFLG

      INTEGER :: NRECS,IMGNUM,NOT_USED,LABREC,NDUM,LABBYT,LENBYT
      INTEGER :: IRECOLD
      REAL    :: OLDIMGNUM

      INTEGER :: ICOMM,MYPID

      CALL SET_MPI(ICOMM,MYPID,IRTFLG)   ! RETURNS MPI PROCESS ID OR -1

C     RETRIEVE IMAGE NUMBER
      CALL LUNGETVALS(LUN,27,1,OLDIMGNUM,    IRTFLG)
      IMGNUM = IFIX(OLDIMGNUM)

C     RETRIEVE OLD IREC  AND LABREC FROM HEADER
      CALL LUNGETLAB(LUN,LABREC,NDUM,IRECOLD,LABBYT,LENBYT,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     FIND CORRECT IREC (NUMBER OF RECORDS IN IMAGE + HEADER)
      IREC = NY + LABREC

C     SET CORRECT IREC IN STACKED IMAGE HEADER LOCATION: 3
      CALL LUNSETVALS(LUN,3, 1,FLOAT(IREC),     IRTFLG)

C     SET CORRECT ISTACK IN STACKED IMAGE HEADER LOCATION: 24
      CALL LUNSETVALS(LUN,24,1, 0.0,IRTFLG)

C     SET UNUSED VALUE IN STACKED IMAGE HEADER LOCATION: 25
      CALL LUNSETVALS(LUN,25,1, 0.0 ,IRTFLG)

      IF (VERBOSE .AND. (MYPID <= 0) ) THEN
C         ECHO HEADER VALUE CHANGE

         WRITE(NOUT,'(/,A,I0,A,I0,A,I0,A,I0,/)')
     &              '  Image: ',        IMGNUM,
     &              '   Stack offset:', LUNSTK(LUN),
     &              '   Header irec: ', IRECOLD,
     &              ' --> ',            IREC        

      ENDIF 
   
      IRTFLG = 0
      END




@


1.6
log
@mrc_support
@
text
@a64 3
      INTEGER                 :: JENIS(56),IVAL
      REAL                    :: FVAL
 
@


1.5
log
@email_health_dept
@
text
@d3 1
a3 1
C  SETHEAD.F     NEW                            NOV  2010 ARDEAN LEITH *                       
d9 1
a9 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d25 1
a25 1
C **********************************************************************
d38 1
a38 1
C--*********************************************************************
d42 2
a45 4
 
      LOGICAL                   :: STRIP
      CHARACTER(LEN=160)        :: RESPONSE,ARGNOW,MSG
      CHARACTER(LEN=1)          :: NULL = CHAR(0)
d47 1
a47 2
      INTEGER, PARAMETER        :: MAXREGNAM = 10
      CHARACTER(LEN=MAXREGNAM)  :: REGNAME
d49 2
a50 6
C     MAXNSEL IS CURRENTLY SAME AS IN REG_SET.F !!!
      INTEGER, PARAMETER        :: MAXNSEL = 24  ! SEARCH & REGISTER LIST
      INTEGER                   :: LOCATION(MAXNSEL)
      INTEGER                   :: IREGSELS(MAXNSEL)
      REAL                      :: VALUES(MAXNSEL)
      CHARACTER(LEN=8)          :: NAMES(MAXNSEL)
d52 2
d55 13
d70 1
a70 1
      CALL INQUIREHEAD_LOC(LOCATION,NAMES,IVALS,IRTFLG)
d73 8
a80 1
C     NOW HAVE LIST OF ALL VARIABLE NUMBERS TO BE SET IN: LOCATION 
a90 2
      ! write(6,*) ' matching values',ivals

a92 1

d94 1
d97 10
a106 2
        CALL SETLAB(LUN,NX,UNUSED,IHEDLOC,1,VALUES(I),'U',IRTFLG)
        !write(6,*) ' IHEDLOC: ',IHEDLOC,VALUES(I)
d114 1
a114 1
           !WRITE(NOUT,91) IHEDLOC,NAME(IHEDLOC),VALUES(I)
d116 1
a116 1
        ENDIF  ! END OF: IF (VERBOSE .AND. (MYPID .LE. 0) ) THEN
d119 5
a123 1
 
d126 1
d128 1
a180 1

@


1.4
log
@SETHEADEM2 added
@
text
@d11 1
a11 1
C=* Email: spider@@wadsworth.org                                        *
@


1.3
log
@nx
@
text
@d103 55
@


1.2
log
@used inquirehead.f pgm to get names
@
text
@d27 1
a27 1
C   SETHEAD(LUN,NSAM,NROW,NSLICE.IRTFLG)    
d33 1
a33 1
C                NSAM..    FILE SIZE                          (SENT)
d40 1
a40 1
      SUBROUTINE SETHEAD(LUN,NSAM,NROW,NSLICE,IRTFLG)
a64 1

d84 1
a84 1
        CALL SETLAB(LUN,NSAM,UNUSED,IHEDLOC,1,VALUES(I),'U',IRTFLG)
d87 2
a88 2
C       KLUDGE FOR NSLICE < 0
        IF (LOCATION(I) .EQ. 1 .AND. VALUES(I) .LT. 0) 
d91 1
a91 1
        IF (VERBOSE .AND. (MYPID .LE. 0) ) THEN
@


1.1
log
@Initial revision
@
text
@d49 9
a57 2
      INTEGER, PARAMETER        :: MAXHEDNAM = 50
      CHARACTER(LEN=8)          :: NAME(MAXHEDNAM)    ! HEADER NAME ARRAY
a58 4
C     CURRENTLY SAME AS IN REG_SET.F !!!
      INTEGER, PARAMETER        :: MAXNSEL = 24       ! SEARCH  LIST
      INTEGER                   :: LOCATION(MAXNSEL)  ! LOCATIONS
      REAL                      :: VALUES(MAXNSEL)    ! REAL VALUES
d62 1
a62 61
      DO I=1,MAXHEDNAM
        NAME(I) = ''
      ENDDO

C     NAMES ALSO DEFINED IN: INQUIREHEAD.F!! (SHOULD BE CONSOLIDATED)

      NAME(1)  =  'NSLICE'
      NAME(2)  =  'NROW'
      NAME(3)  =  'IREC'
      NAME(4)  =  'UNUSED'
      NAME(5)  =  'IFORM'
      NAME(6)  =  'IMAMI'
      NAME(7)  =  'FMAX'
      NAME(8)  =  'FMIN'
      NAME(9)  =  'AV'
      NAME(10) =  'SIG'
      NAME(11) =  'UNUSED'
      NAME(12) =  'NSAM'
      NAME(13) =  'LABREC'
      NAME(14) =  'IANGLE'
      NAME(15) =  'PHI'
      NAME(16) =  'THETA'
      NAME(17) =  'PSI'
      NAME(18) =  'XOFF'
      NAME(19) =  'YOFF'
      NAME(20) =  'ZOFF'
      NAME(21) =  'SCALE'
      NAME(22) =  'LABBYT'
      NAME(23) =  'LENBYT'
      NAME(24) =  'ISTACK'
      NAME(25) =  'UNUSED'
      NAME(26) =  'MAXIM'
      NAME(27) =  'IMGNUM'
      NAME(28) =  'LASTINDX'
      NAME(29) =  'UNUSED'
      NAME(30) =  'UNUSED'
      NAME(31) =  'KANGLE'
      NAME(32) =  'PHI1'
      NAME(33) =  'THETA1'
      NAME(34) =  'PSI1'
      NAME(35) =  'PHI2'
      NAME(36) =  'THETA2'
      NAME(37) =  'PSI2'
      NAME(38) =  'PIXSIZ'
      NAME(39) =  'EV'
      NAME(40) =  'UNUSED'
      NAME(41) =  'UNUSED'
      NAME(42) =  'UNUSED'
      NAME(43) =  'UNUSED'
      NAME(44) =  'UNUSED'
      NAME(45) =  'UNUSED'
      NAME(46) =  'UNUSED'
      NAME(47) =  'UNUSED'
      NAME(48) =  'UNUSED'
      NAME(49) =  'UNUSED'
      NAME(50) =  'UNUSED'

C     PUT LIST OF VARIABLE NUMBERS IN: LOCATION 

      STRIP     = .TRUE.
      CALL RDPRMC(RESPONSE,NLETA,STRIP,'HEADER VARIABLE(S)',NULL,IRTFLG)
a64 63
      IFIRST = 1
      IVALS  = 0
      DO WHILE (IFIRST .LT. NLETA) 
         CALL GETNEXTTOKEN(RESPONSE,IFIRST,IGO,IEND)
         IF (IGO .LE. 0) EXIT
         ARGNOW = RESPONSE(IGO:IEND)
         IFIRST = IEND + 1         ! START OF NEXT TOKEN
         NT     = IEND - IGO + 1   ! CHAR. IN ARGNOW

         ! write(6,*) ' token: ',argnow(1:nt)

         IVAR = 0
         DO I = 1,MAXHEDNAM
            ILOC = INDEX(NAME(I),ARGNOW(1:NT))
            IF (ILOC .GT. 0) THEN
C              POSSIBLE MATCH

               LENVAR = lnblnk(NAME(I))
               ! write(6,*) ' matches: ',name(i),nt,lenvar

               IF (NT .EQ. LENVAR) THEN
                  IVAR = I
                  EXIT       ! COMPLETE MATCH
               ELSEIF (IVAR .GT. 0) THEN
C                 DOUBLE MATCH
                  MSG = 'HEADER VARIABLE NAME: "'// ARGNOW(1:NT) // 
     &                  '" IS NOT UNIQUE, USE LONGER NAME'
                  LENT = lnblnk(MSG)
                  CALL ERRT(101,MSG(1:LENT),NE)
                  RETURN
               ENDIF            
               IVAR = I

               IF (IVAR <  6 .OR. 
     &            (IVAR > 11 .AND. IVAR < 14) .OR.
     &            (IVAR > 21 .AND. IVAR < 29)) THEN 
                  IF (MYPID .LE. 0) THEN
                     WRITE(NOUT,92) IHEDLOC,NAME(IHEDLOC)
92                   FORMAT('  ALTERING HEADER VARIABLE: ',I3,
     &                      '  NAME: ',A,' MAY BE DANGEROUS?')
                  ENDIF
               ENDIF
            ENDIF
         ENDDO

         IF (IVAR .LE. 0) THEN
            MSG = 'UNKNOWN HEADER VARIABLE: "' // ARGNOW(1:NT) //'"' 
            CALL ERRT(101,MSG,NE)
            IRTFLG = 1
            RETURN

         ELSEIF (IVAR .GT. 0) THEN
C           GOT A MATCHING HEADER VARIABLE
            IVALS = IVALS + 1
            IF (IVALS .GT. MAXNSEL) THEN
                CALL ERRT(102,
     &                 'TOO MANY VARIABLES REQUESTED, LIMIT',MAXNSEL)
                IRTFLG = 1
                RETURN
            ENDIF
            LOCATION(IVALS) = IVAR
         ENDIF
      ENDDO  ! END OF: DO WHILE (IFIRST .LT. NLETA) 
@
