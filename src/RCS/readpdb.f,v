head	1.29;
access;
symbols
	pre_mrcs:1.29
	healthdept_2018:1.29
	pre_getangas:1.25
	GPL2010:1.25
	pre_GPL2010:1.24
	pre_var_equation:1.24
	pre_fftwrings:1.24
	pre_opfiles:1.24
	src:1.24
	best-code:1.24
	x-named-regs:1.24
	x:1.24
	v13-00:1.24
	pre_GPL:1.22
	prec_CA:1.22
	noindx:1.21
	Bproc:1.19
	oct21:1.18
	last77:1.17;
locks; strict;
comment	@c @;


1.29
date	2018.10.03.14.34.14;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2013.06.05.15.26.07;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2012.04.16.13.54.08;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2012.01.06.15.17.41;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2010.06.24.13.26.42;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2005.10.17.20.44.41;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2005.10.17.18.35.05;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2003.02.20.17.55.16;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2002.03.21.19.02.49;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2002.03.11.14.08.36;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	99.11.22.19.22.35;	author pawel;	state Exp;
branches;
next	1.18;

1.18
date	99.09.09.14.50.51;	author pawel;	state Exp;
branches;
next	1.17;

1.17
date	99.03.22.20.55.22;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	98.04.06.20.06.07;	author pawel;	state Exp;
branches;
next	1.15;

1.15
date	98.04.06.19.32.47;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	97.10.14.21.19.25;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	97.06.30.21.19.07;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	97.04.25.13.12.39;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	96.12.03.15.13.19;	author mladjadj;	state Exp;
branches;
next	1.10;

1.10
date	96.04.01.16.09.28;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	96.02.08.15.42.12;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	96.01.17.20.37.02;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	96.01.17.15.38.04;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	95.07.12.19.55.12;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	95.02.22.14.58.43;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	94.11.18.18.45.17;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	94.11.18.14.54.47;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.10.21.15.19.45;	author mladjadj;	state Exp;
branches;
next	1.1;

1.1
date	94.10.21.15.09.35;	author mladjadj;	state Exp;
branches;
next	;


desc
@convert pdb file to spider volume by june zhu
@


1.29
log
@email_health_dept
@
text
@
C **********************************************************************
C  READPDB.F       ADDED TEMPERATURE               MAR 02 ARDEAN LEITH
C                  HG11 ATOM                       APR 12 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2012  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C 
C  READPDB
C
C  PURPOSE:  READ PDB FILE, GET COORDINATES,
C            GENERATE A SPIDER FORMAT VOLUME
C 
C **********************************************************************

	SUBROUTINE READPDB
	
        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

	REAL, ALLOCATABLE     :: BUF(:,:,:)
        CHARACTER(LEN=MAXNAM) :: PDBFILE,SPIDERFILE,RECLIN
        CHARACTER(LEN=10)     :: HEAD 
        CHARACTER(LEN=4)      :: ATOM 
        CHARACTER(LEN=1)      :: NULL,CENTER,CTEMP
	LOGICAL               :: ZNUM,TEMP

	ZNUM = .FALSE.

	NATOM = 0
	TMASS = 0.0
   	NULL  = CHAR(0)
        LUN1  = 8
	LUN2  = 10
	XMAX  = -1.0E23
	XMIN  = 1.0E23
	YMAX  = -1.0E23
	YMIN  = 1.0E23
	ZMAX  = -1.0E23
	ZMIN  = 1.0E23
	UX    = 0.0
	UY    = 0.0
	UZ    = 0.0
	
C       OPEN PDB FILE (WHICH IS READABLE ASCII) AS FORMATTED SEQ.       
        LENREC = 0
        CALL OPAUXFILE(.TRUE.,PDBFILE,NULL,LUN1,LENREC,'O',
     &                 'PDB INPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

15	READ(LUN1,20) RECLIN
20	FORMAT(A80)

C       GET MIN AND MAX OF X,Y,Z  AND CALCULATE OFFSET

35	IF (RECLIN(1:4) .EQ. 'ATOM') THEN

	   READ (RECLIN,50) HEAD,ATOM,X,Y,Z,OCCUPANCY,TEMPERATURE
	   IF (OCCUPANCY > 1.0 ) ZNUM = .TRUE.

C          COORDINATE SYSTEM IS DIFFERENT IN O AND SPIDER 
           W = X
           X = Y
           Y = W
           Z = -Z

	   XMAX  = MAX(XMAX,X)
	   XMIN  = MIN(XMIN,X)
	   YMAX  = MAX(YMAX,Y)
	   YMIN  = MIN(YMIN,Y)
	   ZMAX  = MAX(ZMAX,Z)
	   ZMIN  = MIN(ZMIN,Z)

           UX    = UX + X
           UY    = UY + Y
           UZ    = UZ + Z
           NATOM = NATOM+1

	   GOTO 15

	ELSEIF (RECLIN(1:3) .NE. 'END') THEN
	   GOTO 15
	ENDIF

        IF (NATOM <= 0)  THEN
          CALL ERRT(101,'NO ATOMS IN THE PDB FILE',NE)
          GOTO 9999
        ENDIF

C       SET CELL DIMENSION

	SX = (XMAX-XMIN) + 3.0
	SY = (YMAX-YMIN) + 3.0
	SZ = (ZMAX-ZMIN) + 3.0

	WRITE(NOUT,91) SX,SY,SZ
91      FORMAT('  Cell size: ',F7.1,',',F7.1,',',F7.1)

	REWIND (LUN1)

C       INPUT SAMPLE SIZE
        PIXEL = 1.0
	CALL RDPRM1S(PIXEL,NOT_USED,'VOXEL SIZE [A]',IRTFLG)

        CALL RDPRMC(CENTER,NCHAR,.TRUE.,'CENTER? (Y/N)',
     &               NULL,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

	IF (CENTER .NE. 'Y')  THEN
          UX = 0.0
          UY = 0.0
          UZ = 0.0
        ELSE
          UX = UX / NATOM
          UY = UY / NATOM
          UZ = UZ / NATOM
        ENDIF

        CALL RDPRMC(CTEMP,NCHAR,.TRUE.,
     &      'ATOMS OR TEMPERATURE? (A/T)',NULL,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

	TEMP = (CTEMP == 'T')
 
        XNEED = (UX-XMIN-PIXEL) * 2
        YNEED = (UY-YMIN-PIXEL) * 2
        ZNEED = (UZ-ZMIN-PIXEL) * 2

	NX    = NINT(XNEED) + 1
	NY    = NINT(YNEED) + 1
	NZ    = NINT(ZNEED) + 1

	WRITE(NOUT,506) NX,NY,NZ
506	FORMAT('  Minimum size needed for this volume: ',3I6)

        CALL RDPRI3S(NX,NY,NZ,NOT_USED,
     &              'SPIDER VOLUME SIZE; NX, NY & NZ',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

	ALLOCATE(BUF(NX,NY,NZ),STAT=IRTFLG)
	IF (IRTFLG .NE. 0) THEN
           CALL  ERRT(46,'READPDB; BUF',NX*NY*NZ)
           GOTO 9999
        ENDIF
	
	I       = NX/2+1
	XOFFSET = PIXEL*I
	I       = NY/2+1
	YOFFSET = PIXEL*I
	I       = NZ/2+1
	ZOFFSET = PIXEL*I

#ifdef NEVER
        YMIN-UY < (-1.  * YOFFSET)
        YMIN-UY < (-1.  * PIXEL*I)
        YMIN-UY < (-1.  * PIXEL*(NY/2+1))
        YMIN-UY <  -1.  * (PIXEL*NY/2 + PIXEL) 
       -YMIN+UY <          PIXEL*NY/2 + PIXEL
       (-YMIN+UY-PIXEL) * 2 / PIXEL <  NY 
       NY >= (-YMIN+UY-PIXEL) * 2
       NY >= (UY-YMIN-PIXEL) * 2
        TMPY = (UY-YMIN-PIXEL) * 2
        WRITE(6,*)' NY, TMPY:',XMIN-UX,' >= ',TMPY
#endif
C       CHECK IF THE VOLUME IS LARGE ENOUGH TO CONTAIN THE OBJECT
        IF (XMIN-UX < (-1. * XOFFSET) .OR. 
     &      YMIN-UY < (-1. * YOFFSET) .OR.
     &      ZMIN-UZ < (-1. * ZOFFSET)) THEN

            WRITE(6,*)' XMIN-UX < -XOFFSET:',XMIN-UX,' < ',-XOFFSET
            WRITE(6,*)' YMIN-UY < -YOFFSET:',YMIN-UY,' < ',-YOFFSET
            WRITE(6,*)' ZMIN-UZ < -ZOFFSET:',ZMIN-UZ,' < ',-ZOFFSET

            CALL ERRT(101,'VOLUME TOO SMALL TO CONTAIN OBJECT',NE)
            GOTO 9999
        ENDIF
 
        TMPX = FLOAT(NX-1) * PIXEL - XOFFSET
        TMPY = FLOAT(NY-1) * PIXEL - YOFFSET
        TMPZ = FLOAT(NZ-1) * PIXEL - ZOFFSET

        IF (XMAX-UX > TMPX .OR. 
     &      YMAX-UY > TMPY .OR.
     &      ZMAX-UZ > TMPZ) THEN

            WRITE(6,*)' XMAX-UX > TMPX:',XMAX-UX,' > ',TMPX
            WRITE(6,*)' YMAX-UY > TMPY:',YMAX-UY,' > ',TMPY
            WRITE(6,*)' ZMAX-UZ > TMPZ:',ZMAX-UZ,' > ',TMPZ

            CALL ERRT(101,'VOLUME TOO SMALL TO CONTAIN OBJECT.',NE)
            GOTO 9999
        ENDIF

C       ZERO WHOLE BUF
        BUF = 0.0

        IFORM = 3
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,SPIDERFILE,LUN2,'U',IFORM,
     &              NX,NY,NZ, MAXIM,'SPIDER OUTPUT', .FALSE.,IRTFLG)
	IF (IRTFLG == 1) GOTO 9999
	
C       READ IN ATOMS
        NATOM = 0
        TMAX  = -100

40	CONTINUE
	READ(LUN1,20) RECLIN

	IF (RECLIN(1:4) .EQ. 'ATOM' ) THEN

!HEAD--NNNNxATOMxAAAx?????????? X      Y       Z        OCC   TEMP

 	   READ(RECLIN,50)HEAD,ATOM,X,Y,Z,OCCUPANCY,TEMPERATURE
50	   FORMAT(A6,5X,1X,A3,2X,3X,1X,1X,4X,1X,3X,3F8.3,2F6.2)
	
C            WRITE(NOUT,*)'ATOM #',NATOM,'  ',ATOM,' AT ',X,Y,Z,
C    &                    OCCUPANCY,TEMPERATURE
C            WRITE(6, *) ' N ATOM:',ATOM

	     IF (TEMP) THEN
                VATOM = TEMPERATURE
                TMAX  = MAX(TMAX,TEMPERATURE)

	     ELSEIF (.NOT. ZNUM) THEN
		IF (ATOM(2:2) .EQ. 'H' .OR.
     &              ATOM(1:1) .EQ. 'H'  ) THEN
		   VATOM = 1.0

		ELSEIF (ATOM(2:2) == 'C') THEN
		   VATOM = 6.0

		ELSEIF (ATOM(2:2) == 'N') THEN
		   VATOM = 7.0

		ELSEIF (ATOM(2:2) == 'O') THEN
		   VATOM = 8.0

	        ELSEIF (ATOM(2:2) == 'S') THEN
		   VATOM = 16.0

		ELSEIF (ATOM(2:2) == 'P') THEN
		   VATOM = 15.0

		ELSEIF (ATOM(2:2) == 'X' .AND. ATOM(1:3) == 'OXT')
     &             THEN   !TRNA THREE PRIME TERMINAL
		   VATOM = 8.0

		ELSE
                   WRITE(NOUT, *) ' SPECIAL ATOM:',ATOM,
     &                ':   ENCOUNTERED IN:'
                   WRITE(NOUT,*) RECLIN 
                   CALL ERRT(101,'UNSUPPORTED SPECIAL ATOM',NDUM)
	           GOTO 9999
		ENDIF

C	        VATOM = VATOM*OCCUPANCY
	     ELSE 
	        VATOM = OCCUPANCY
	     ENDIF

C            COORDINATE SYSTEM IS DIFFERENT IN O AND SPIDER 
	     W = X
	     X = Y
	     Y = W
	     Z = -Z

             X = X-UX
             Y = Y-UY
             Z = Z-UZ

C            TRILINEAR INTERPOLATION
	     IX = IFIX((X+XOFFSET)/PIXEL)
	     AX = (X+XOFFSET)/PIXEL-FLOAT(IX)
	     IY = IFIX((Y+YOFFSET)/PIXEL)
	     AY = (Y+YOFFSET)/PIXEL-FLOAT(IY)
	     IZ = IFIX((Z+ZOFFSET)/PIXEL)
	     AZ = (Z+ZOFFSET)/PIXEL-FLOAT(IZ)
             IF (TEMP) THEN
                BUF(IX,IY,IZ) = VATOM
             ELSE

                DO I3=1,0,-1
                   DO I2=1,0,-1
                     DO I1=1,0,-1
                        BUF(IX-I1+1,IY-I2+1,IZ-I3+1) =
     &                    BUF(IX-I1+1,IY-I2+1,IZ-I3+1) +
     &                    VATOM*(REAL(I1)-(2*I1-1)*AX)*
     &                    (REAL(I2)-(2*I2-1)*AY)*
     &                    (REAL(I3)-(2*I3-1)*AZ)    
                     ENDDO 
                   ENDDO 
                 ENDDO 
             ENDIF

             NATOM = NATOM + 1
	     TMASS = TMASS + VATOM
	     GOTO 40

	 ELSEIF (RECLIN(1:3) .NE. 'END') THEN
	     GOTO 40
	 ENDIF

         CALL WRTVOL(LUN2,NX,NY, 1,NZ, BUF,IRTFLG)

         IF (TEMP) WRITE(NOUT,*) ' Max. temperature:',TMAX

         WRITE(NOUT,90) NATOM,TMASS
90       FORMAT('  Number of atoms placed:',I8,
     &           '   Total mass:',ES10.3)

9999     CLOSE(LUN2)
         CLOSE(LUN1)
    	 IF (ALLOCATED(BUF)) DEALLOCATE(BUF) 

	 END
@


1.28
log
@better size guidance, prompts
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.27
log
@HG11 ATOM, much refactoring
@
text
@d86 10
a95 9
	   XMAX  = AMAX1(XMAX,X)
	   XMIN  = AMIN1(XMIN,X)
	   YMAX  = AMAX1(YMAX,Y)
	   YMIN  = AMIN1(YMIN,Y)
	   ZMAX  = AMAX1(ZMAX,Z)
	   ZMIN  = AMIN1(ZMIN,Z)
           UX    = UX+X
           UY    = UY+Y
           UZ    = UZ+Z
d104 1
a104 1
        IF (NATOM .LE. 0)  THEN
d115 2
a116 1
	WRITE(NOUT,*)' CELL SIZE: ',SX,SY,SZ
d121 2
a122 1
	CALL RDPRM(PIXEL,NOT_USED,'PIXEL SIZE (IN Angstroms)')
d124 1
a124 1
        CALL RDPRMC(CENTER,NCHAR,.TRUE.,'CENTER (Y/N)?',
d139 1
a139 1
     &      'ATOMS OR TEMPERATURE (A/T)?',NULL,IRTFLG)
d144 7
a150 3
	NX   = NINT(SX/PIXEL)+1
	NY   = NINT(SY/PIXEL)+1
	NZ   = NINT(SZ/PIXEL)+1
d153 1
a153 1
506	FORMAT('  Minimum size for this volume: ',3I6)
d156 1
a156 1
     &              'VOLUME SIZE; NX, NY & NZ',IRTFLG)
d171 13
a183 1
	
d185 8
a192 2
        IF (XMIN-UX .LT. (-1.*XOFFSET) .OR. YMIN-UY .LT. (-1.*YOFFSET)
     &              .OR. ZMIN-UZ .LT. (-1.*ZOFFSET)) THEN
d197 12
a208 6
        TMPX = FLOAT(NX-1)*PIXEL-XOFFSET
        TMPY = FLOAT(NY-1)*PIXEL-YOFFSET
        TMPZ = FLOAT(NZ-1)*PIXEL-ZOFFSET
        IF (XMAX-UX .GT. TMPX .OR. 
     &      YMAX-UY .GT. TMPY .OR.
     &      ZMAX-UZ .GT. TMPZ) THEN
d214 1
a214 1
        BUF   = 0.0
d308 2
a309 1
     &                    (REAL(I2)-(2*I2-1)*AY)*(REAL(I3)-(2*I3-1)*AZ)    
d325 1
a325 1
         IF (TEMP) WRITE(NOUT,*) ' MAX. TEMPERATURE:',TMAX
d327 3
a329 3
         WRITE(NOUT,90)  NATOM,TMASS
90       FORMAT('  NUMBER OF ATOMS PLACED:',I8,
     &           '   TOTAL MASS:',ES10.3)
@


1.26
log
@nx in prompt
@
text
@d3 2
a4 1
C  READPDB.F       ADDED TEMPERATURE MAR 02 ARDEAN LEITH
d10 1
a10 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d28 1
a28 1
C  READPDM
d31 1
a31 1
C            GENERATE A 3-D SPIDER FORMAT VOLUME
d40 6
a45 6
	REAL, ALLOCATABLE, DIMENSION(:,:,:) ::  BUF
        CHARACTER(LEN=MAXNAM):: PDBFILE,SPIDERFILE,RECLIN
        CHARACTER(LEN=10)::     HEAD*10
        CHARACTER(LEN=3)::      ATOM*3
        CHARACTER(LEN=1)::      NULL,CENTER,CTEMP
	LOGICAL ::              ZNUM,TEMP
d48 1
d76 1
d78 1
a78 1
	   IF (OCCUPANCY .GT. 1.0 ) ZNUM = .TRUE.
d86 11
a96 10
	   XMAX=AMAX1(XMAX,X)
	   XMIN=AMIN1(XMIN,X)
	   YMAX=AMAX1(YMAX,Y)
	   YMIN=AMIN1(YMIN,Y)
	   ZMAX=AMAX1(ZMAX,Z)
	   ZMIN=AMIN1(ZMIN,Z)
           UX=UX+X
           UY=UY+Y
           UZ=UZ+Z
           NATOM=NATOM+1
d110 4
a113 3
	SX=(XMAX-XMIN)+3.0
	SY=(YMAX-YMIN)+3.0
	SZ=(ZMAX-ZMIN)+3.0
d116 1
a116 1
	REWIND   LUN1
d119 5
a123 2
        TEMP = .FALSE.
	CALL RDPRM(PIXEL,NOT_USED,'PIXEL SIZE [A]')
a124 1
        CALL RDPRMC(CENTER,NCHAR,.TRUE.,'CENTER (Y/N)?',NULL,IRTFLG)
d126 3
a128 3
          UX=0.0
          UY=0.0
          UZ=0.0
d130 3
a132 3
          UX=UX/NATOM
          UY=UY/NATOM
          UZ=UZ/NATOM
d137 3
a139 1
	TEMP = (CTEMP .EQ. 'T')
d141 4
a144 3
	NX = NINT(SX/PIXEL)+1
	NY = NINT(SY/PIXEL)+1
	NZ = NINT(SZ/PIXEL)+1
d146 1
a146 1
506	FORMAT(' Minimum size of the volume: ',3I6)
d148 3
a150 1
        CALL RDPRI3S(NX,NY,NZ,NOT_USED,'VOLUME NX, NY & NZ',IRTFLG)
d153 3
a155 3
	IF (IRTFLG.NE.0) THEN
           CALL  ERRT(46,'CP FROM PDB, BUF',IER)
           GOTO 9997
d158 6
a163 6
	I=NX/2+1
	XOFFSET=PIXEL*I
	I=NY/2+1
	YOFFSET=PIXEL*I
	I=NZ/2+1
	ZOFFSET=PIXEL*I
d169 1
a169 1
            GOTO 9997
d172 6
a177 5
        TMPX=FLOAT(NX-1)*PIXEL-XOFFSET
        TMPY=FLOAT(NY-1)*PIXEL-YOFFSET
        TMPZ=FLOAT(NZ-1)*PIXEL-ZOFFSET
        IF (XMAX-UX .GT. TMPX .OR. YMAX-UY .GT. TMPY
     &              .OR. ZMAX-UZ .GT. TMPZ) THEN
d179 1
a179 1
            GOTO 9997
d183 1
a183 1
        BUF = 0.0
d189 1
a189 1
	IF (IRTFLG .EQ. 1) GOTO 9997
d193 1
a193 1
        TMAX = -100
d197 1
d199 3
d203 3
a205 2
50	   FORMAT(A6,5X,1X,A3,2X,3X,1X,1X,4X,1X,3X,3F8.3,2F6.2)	
C	   WRITE(NOUT,*)'ATOM #',NATOM,'  ',ATOM,' AT ',X,Y,Z,
d207 1
d214 23
a236 16
		IF (ATOM(2:2) .EQ. 'H') THEN
		   VATOM=1.0
		ELSEIF (ATOM(2:2) .EQ. 'C') THEN
		   VATOM=6.0
		ELSEIF (ATOM(2:2) .EQ. 'N') THEN
		   VATOM=7.0
		ELSEIF (ATOM(2:2) .EQ. 'O') THEN
		   VATOM=8.0
	        ELSEIF (ATOM(2:2) .EQ. 'S') THEN
		   VATOM=16.0
		ELSEIF (ATOM(2:2) .EQ. 'P') THEN
		   VATOM=15.0
		ELSEIF (ATOM(2:2) .EQ. 'X' .AND. ATOM(1:3) .EQ. 'OXT')
     &             THEN
C                  TRNA THREE PRIME TERMINAL
		   VATOM=8.0
d238 5
a242 3
		   WRITE(NOUT, *) ' SPECIAL ATOM ENCOUNTERED IN: '
		   WRITE(NOUT,*) RECLIN 
	           GOTO 9997
d244 1
d275 1
a275 1
     &                    BUF(IX-I1+1,IY-I2+1,IZ-I3+1)+
d287 1
a287 1
	  ELSEIF (RECLIN(1:3) .NE. 'END') THEN
d289 1
a289 1
	  ENDIF
d291 1
a291 5
	 DO I=1,NZ
           DO J=1,NY
              CALL WRTLIN(LUN2,BUF(1,J,I),NX,(I-1)*NY+J)
           ENDDO
         ENDDO
d293 1
a293 1
         IF (TEMP) WRITE(NOUT,*)  ' MAX. TEMPERATURE:',TMAX
d295 3
a297 3
         WRITE(NOUT,8701)  NATOM,TMASS
8701     FORMAT(' NUMBER OF ATOMS PLACED: ',I8,
     &              '  TOTAL MASS:',1PE10.3)
d299 2
a300 1
9997     CLOSE(LUN2)
a301 1
9999     CLOSE(LUN1)
d303 1
a303 1
	END
@


1.25
log
@GPL_2010
@
text
@d138 1
a138 2
        CALL RDPRI3S(NX,NY,NZ,NOT_USED,
     &               'VOLUME NSAM, NROW & NSLICE',IRTFLG)
@


1.24
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.23
log
@HRI GPL License used
@
text
@a2 1
C**************************************************************************
a5 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 6

C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a36 1
C **************************************************************************
@


1.22
log
@opfilec
@
text
@d2 1
d8 24
d44 1
@


1.21
log
@added temperature setting
@
text
@d162 1
a162 1
        CALL OPFILE(.TRUE.,SPIDERFILE,LUN2,'U',IFORM,
a168 1

@


1.20
log
@nloop,iloop_removed
@
text
@d3 2
a4 1
C  READPDB.F 
d7 1
a7 1
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
d13 6
a18 4
C*
C* READ PDB FILE, GET COORDINATES,
C* GENERATE A 3-D SPIDER FORMAT VOLUME
C*
d24 2
d27 21
a47 19
        CHARACTER *81 PDBFILE, SPIDERFILE,RECLIN,HEAD*10,ATOM*3
        CHARACTER *1  NULL,CENTER
	LOGICAL       ZNUM

	ZNUM=.FALSE.
	NATOM=0
	TMASS=0.0
   	NULL=CHAR(0)
        LUN1=8
	LUN2=10
	XMAX=-1.0E23
	XMIN=1.0E23
	YMAX=-1.0E23
	YMIN=1.0E23
	ZMAX=-1.0E23
	ZMIN=1.0E23
	UX=0.0
	UY=0.0
	UZ=0.0
d52 1
a52 1
     &                 'INPUT PDB',.TRUE.,IRTFLG)
d62 8
a69 7
	   IF(OCCUPANCY .GT. 1.0 ) ZNUM=.TRUE.
C            COORDINATE SYSTEM IS DIFFERENT IN O AND SPIDER 
	     W=X
	     X=Y
	     Y=W
	     Z=-Z
C
d86 2
a87 2
        IF(NATOM.EQ.0)  THEN
          WRITE(NOUT,*)  ' NO ATOMS in the pdb file'
d96 1
a96 1
	WRITE(NOUT,*)'CELL SIZE ',SX,SY,SZ
d101 1
d103 1
d105 4
a108 4
	IF(CENTER.NE.'Y')  THEN
         UX=0.0
         UY=0.0
         UZ=0.0
d110 3
a112 3
         UX=UX/NATOM
         UY=UY/NATOM
         UZ=UZ/NATOM
d115 12
a126 7
	NX=NINT(SX/PIXEL)+1
	NY=NINT(SY/PIXEL)+1
	NZ=NINT(SZ/PIXEL)+1
	WRITE(NOUT,506)  NX,NY,NZ
506	FORMAT(' Minimum size of the volume is:',3I6)
        CALL  RDPRMI(NX,NY,NOT_USED,'VOLUME NSAM, NROW')
        CALL  RDPRMI(NZ,I,NOT_USED, 'VOLUME NSLICE')
d129 4
a132 1
	IF(IRTFLG.NE.0) CALL  ERRT(46,'CP FROM PDB, BUF',IER)
a141 1

d143 3
a145 3
     &                           .OR. ZMIN-UZ .LT. (-1.*ZOFFSET)) THEN
            CALL ERRT(101,' VOLUME TOO SMALL TO CONTAIN THE OBJECT.',NE)
            GOTO 9998
d152 3
a154 3
     &                     .OR. ZMAX-UZ .GT. TMPZ) THEN
            CALL ERRT(101,' VOLUME TOO SMALL TO CONTAIN THE OBJECT.',NE)
            GOTO 9998
d156 4
a159 3
C
	   BUF=0.0
C
d164 1
a164 1
	IF (IRTFLG .EQ. 1) GOTO 9998
d167 3
a169 1
        NATOM=0
d172 1
a172 1
	READ(LUN1,20)RECLIN
d178 6
a183 1
	     IF(.NOT.ZNUM) THEN
d201 1
a201 1
		   WRITE(NOUT, *) 'SPECIAL ATOM ENCOUNTERED IN:'
d207 1
a207 1
	        VATOM=OCCUPANCY
d209 1
d211 9
a219 9
	     W=X
	     X=Y
	     Y=W
	     Z=-Z
C
           X=X-UX
           Y=Y-UY
           Z=Z-UZ
C
d221 24
a244 17
	     IX=IFIX((X+XOFFSET)/PIXEL)
	     AX=(X+XOFFSET)/PIXEL-FLOAT(IX)
	     IY=IFIX((Y+YOFFSET)/PIXEL)
	     AY=(Y+YOFFSET)/PIXEL-FLOAT(IY)
	     IZ=IFIX((Z+ZOFFSET)/PIXEL)
	     AZ=(Z+ZOFFSET)/PIXEL-FLOAT(IZ)
             DO  I3=1,0,-1
              DO  I2=1,0,-1
               DO  I1=1,0,-1
             BUF(IX-I1+1,IY-I2+1,IZ-I3+1)=BUF(IX-I1+1,IY-I2+1,IZ-I3+1)+
     &           VATOM*(REAL(I1)-(2*I1-1)*AX)*
     &           (REAL(I2)-(2*I2-1)*AY)*(REAL(I3)-(2*I3-1)*AZ)    
               ENDDO 
              ENDDO 
             ENDDO 
             NATOM=NATOM+1
	     TMASS=TMASS+VATOM
d246 1
d249 17
a265 15
	  ELSE
	  DO I=1,NZ
	     DO J=1,NY
 	       CALL WRTLIN(LUN2,BUF(1,J,I),NX,(I-1)*NY+J)
	     ENDDO
	  ENDDO

	  WRITE(NOUT,8701)  NATOM,TMASS
8701	  FORMAT(2X,'NUMBER OF ATOMS PLACED =',I8,
     &              '  TOTAL MASS =',1PE10.3)
	ENDIF 

9997    CLOSE(LUN2)
9998	DEALLOCATE(BUF) 
9999    CLOSE(LUN1)
@


1.19
log
@cosmetic changes
@
text
@d93 1
a93 1
	CALL RDPRM(PIXEL,NLOOP,ILOOP,'PIXEL SIZE [A]')
d110 2
a111 2
        CALL  RDPRMI(NX,NY,NLOOP,ILOOP,'VOLUME NSAM, NROW')
        CALL  RDPRMI(NZ,I,NLOOP,ILOOP, 'VOLUME NSLICE')
@


1.18
log
@code corrected, option CENTER added
@
text
@d158 4
a161 4
	   IF (.NOT. ZNUM) THEN
	      IF (ATOM(2:2) .EQ. 'H') THEN
		VATOM=1.0
		   ELSEIF (ATOM(2:2) .EQ. 'C') THEN
d181 1
a181 1
	      ELSE 
d183 1
a183 1
	      ENDIF
@


1.17
log
@used opauxfile, opfile, fixed line lengths
@
text
@d18 1
a18 1
	SUBROUTINE READPDB(MAXMEM)
d21 1
a21 12
  
	COMMON BAF(1)
 
#ifdef SP_F90
        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: BUF
#else
        DIMENSION BUF(1)
        POINTER   (IPQ,BUF) 
#endif
        LOGICAL       RUNTIME 
d23 2
a24 2
        CHARACTER *1  NULL
	LOGICAL       EX,ZNUM
d32 9
a40 6
	XMAX=-9999.9
	XMIN=9999.9
	YMAX=-9999.9
	YMIN=9999.9
	ZMAX=-9999.9
	ZMIN=9999.9
d43 1
a43 1
5       LENREC = 0
d55 7
a61 1
	   IF(OCCUPANCY .GT. 1 ) ZNUM=.TRUE.
d68 4
d78 5
d94 11
d108 2
a111 1
	MEMWANT = NX*NY*NZ
d113 2
a114 8
        CALL CHKMEM(MEMWANT, BAF, MAXMEM-(2048),RUNTIME,IPQ,IRTFLG)
	IF (IRTFLG .NE. 0) THEN 
	   CALL ERRT(101,' VOLUME TOO LARGE, INCREASE PIXEL SIZE.',NE)
	   GOTO 9999
	ENDIF
#ifdef SP_F90
         BUF = >IPQ
#endif
d125 2
a126 2
        IF (XMIN .LT. (-1.*XOFFSET) .OR. YMIN .LT. (-1.*YOFFSET)
     &                              .OR. ZMIN .LT. (-1.*ZOFFSET)) THEN
d134 2
a135 2
        IF (XMAX .GT. TMPX .OR. YMAX .GT. TMPY
     &                     .OR. ZMAX .GT. TMPZ) THEN
d139 3
a141 5

	DO I=1,NX*NY*NZ
	   BUF(I)=0.0
	ENDDO

d149 1
a183 1

d189 5
d200 10
a209 26
	     AZ=(Z+ZOFFSET)/PIXEL-FLOAT(IZ)	     
             BUF(((IZ-1)*NY+(IY-1))*NX+IX)=
     &            BUF(((IZ-1)*NY+(IY-1))*NX+IX)+
     &            VATOM*(1.-AX)*(1.-AY)*(1.-AZ)
             BUF(((IZ)*NY+(IY-1))*NX+IX)=
     &            BUF(((IZ)*NY+(IY-1))*NX+IX)+
     &            VATOM*(1.-AX)*(1.-AY)*(AZ)
             BUF(((IZ-1)*NY+(IY))*NX+IX)=
     &            BUF(((IZ-1)*NY+(IY))*NX+IX)+
     &            VATOM*(1.-AX)*(AY)*(1.-AZ)
             BUF(((IZ)*NY+(IY))*NX+IX)=
     &            BUF(((IZ)*NY+(IY))*NX+IX)+
     &            VATOM*(1.-AX)*(AY)*(AZ)
             BUF(((IZ-1)*NY+(IY-1))*NX+IX+1)=
     &            BUF(((IZ-1)*NY+(IY-1))*NX+
     &            IX+1)+VATOM*AX*(1.-AY)*(1.-AZ)
             BUF(((IZ)*NY+(IY-1))*NX+IX+1)=
     &            BUF(((IZ)*NY+(IY-1))*NX+IX+1)+
     &            VATOM*(AX)*(1.-AY)*(AZ)
             BUF(((IZ-1)*NY+(IY))*NX+IX+1)=
     &            BUF(((IZ-1)*NY+(IY))*NX+IX+1)+
     &            VATOM*(AX)*(AY)*(1.-AZ)
             BUF(((IZ)*NY+(IY))*NX+IX+1)=
     &            BUF(((IZ)*NY+(IY))*NX+IX+1)+
     &            VATOM*(AX)*(AY)*(AZ)
 
d218 1
a218 2
 	       CALL WRTLIN(LUN2,BUF(1+(I-1)*NY*NX+(J-1)*NX),NX,
     &                     (I-1)*NY+J)
d228 1
a228 1
9998	IF (RUNTIME) CALL DEALLOCMEM_R(IPQ,IRTFLG) 
a230 1
        RETURN
@


1.16
log
@*** empty log message ***
@
text
@d1 1
d3 9
a11 11
C $$ READPDB.FOR
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
C*******************************************
a12 1
C*
d16 2
a17 1
C********************************************
d20 4
a23 2
        INCLUDE 'CMBLOCK.INC'  
	COMMON ADUM(2048),BAF(1) 
d32 5
a36 5
        LOGICAL   RUNTIME 
        CHARACTER *81 PDBFILE, SPIDERFILE,RECLIN,HEAD*10, NULL*1,ATOM*3
	LOGICAL EX,ZNUM
CNO_SAVE
C
d50 6
a55 17
C5       WRITE(NOUT,6)
C6	FORMAT(' INPUT PDB FILE: ',$)
C        READ(NIN,10)PDBFILE
C10	FORMAT(A80)

C       READ IN FILE NAME TEMPLATE
5       IRTFLG=-999
	CALL RDPRMC(PDBFILE,NLET,.TRUE.,'INPUT PDB FILE:',NULL,IRTFLG)
        IF (IRTFLG .EQ. -1) RETURN
 
        INQUIRE(FILE=PDBFILE,EXIST=EX)
        IF(.NOT. EX) THEN
	   WRITE(NOUT,12)PDBFILE 
12	   FORMAT('FILE',A20,' NOT EXIT.')
     	   GOTO 5
	ENDIF
	OPEN(LUN1,FILE=PDBFILE,STATUS='OLD')
d59 1
a59 3

C*******GET MIN AND MAX OF X,Y,Z
C       AND CALCULATE OFFSET
d61 2
a62 2
35	IF(RECLIN(1:4) .EQ. 'ATOM') THEN
	   READ(RECLIN,50) HEAD,ATOM,X,Y,Z,OCCUPANCY,TEMPERATURE
d71 2
a72 1
	ELSEIF(RECLIN(1:3) .NE. 'END') THEN
d75 2
a76 1
C    SET CELL DIMENSION
d82 1
a82 1
C
d84 2
a85 2
C
C*******INPUT SAMPLE SIZE
d90 8
a97 11
        CALL  RDPRMI(NX,NY,NLOOP,ILOOP,' VOLUME NSAM, NROW')
        CALL  RDPRMI(NZ,I,NLOOP,ILOOP,' VOLUME NSLICE')
	MEMWANT=NX*NY*NZ

	
        CALL CHKMEM(MEMWANT, BAF, MAXMEM-(2048), 
     &	            RUNTIME,IPQ,IRTFLG)
	IF(IRTFLG.NE.0) THEN 
	   CLOSE(LUN1)
	   WRITE(NOUT,*)' VOLUME IS TOO LARGE, INCREASE PIXEL SIZE.'
	   RETURN
d112 4
a115 5
        IF(XMIN .LT. (-1.*XOFFSET) .OR. YMIN .LT. (-1.*YOFFSET)
     &         .OR. ZMIN .LT. (-1.*ZOFFSET)) THEN
            CLOSE(LUN1)
            WRITE(NOUT,*)' VOLUME IS TOO SMALL TO CONTAIN THE OBJECT.'
            RETURN
d121 4
a124 5
        IF(XMAX .GT. TMPX .OR. YMAX .GT. TMPY
     &        .OR. ZMAX .GT. TMPZ) THEN
           CLOSE(LUN1)
           WRITE(NOUT,*)' VOLUME IS TOO SMALL TO CONTAIN THE OBJECT.'
           RETURN
a126 1

d131 5
a135 4
	CALL FILERD(SPIDERFILE,NLET,NULL,'SPIDER OUTPUT',IRTFLG)
        IFORM=3
	CALL OPENFB(ADUM,SPIDERFILE,LUN2,NX,NY,'UNKNOWN',NF,NZ)
	IF(NF .EQ. 1) RETURN
d137 1
a137 1
C*******READ IN ATOMS
d141 1
a141 1
	IF(RECLIN(1:4) .EQ. 'ATOM' ) THEN
d146 2
a147 2
	    IF(.NOT. ZNUM) THEN
		IF(ATOM(2:2) .EQ. 'H') THEN
d149 14
a162 13
		ELSEIF(ATOM(2:2) .EQ. 'C') THEN
		VATOM=6.0
		ELSEIF(ATOM(2:2) .EQ. 'N') THEN
		VATOM=7.0
		ELSEIF(ATOM(2:2) .EQ. 'O') THEN
		VATOM=8.0
	        ELSEIF(ATOM(2:2) .EQ. 'S') THEN
		VATOM=16.0
		ELSEIF(ATOM(2:2) .EQ. 'P') THEN
		VATOM=15.0
		ELSEIF(ATOM(2:2) .EQ. 'X' .AND. ATOM(1:3) .EQ. 'OXT') THEN
C******         TRNA THREE PRIME TERMINAL
		VATOM=8.0
d164 3
a166 5
		WRITE(NOUT, *) 'SPECIAL ATOM ENCOUNT AT'
	        WRITE(NOUT,*) RECLIN 
	        CLOSE(LUN1)
                CLOSE(LUN2)
        	RETURN
d168 6
a173 5
C	    VATOM=VATOM*OCCUPANCY
	    ELSE 
	    VATOM=OCCUPANCY
	    ENDIF
/* COORDINATE SYSTEM IS DIFFERENT IN O AND SPIDER */
d178 1
a178 1
C******* TRILINEAR INTERPOLATION
d213 1
a213 1
	  ELSEIF(RECLIN(1:3) .NE. 'END') THEN
d216 4
a219 3
	  DO   I=1,NZ
	     DO   J=1,NY
 	       CALL WRTLIN(LUN2,BUF(1+(I-1)*NY*NX+(J-1)*NX),NX,(I-1)*NY+J)
d222 1
a222 3
	  CLOSE(LUN1)
          CALL SETPRM(LUN2,NX,NY,0,0,0,'R3')
          CLOSE(LUN2)
d224 2
a225 1
8701	  FORMAT(2X,'NUMBER OF ATOMS PLACED =',I8,'  TOTAL MASS =',1PE10.3)
d227 6
a232 2
	
        IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'CP PDB',IRTFLG) 
@


1.15
log
@f90 alloc
@
text
@d22 1
a22 1
	COMMON ADUM(2048),KAF(1) 
d105 1
a105 1
        CALL CHKMEM(MEMWANT, KAF, MAXMEM-(2048), 
@


1.14
log
@*** empty log message ***
@
text
@d23 5
d30 1
d112 3
@


1.13
log
@Do not covert file name to uppercase
@
text
@d222 5
a226 3
	  DO 100 I=1,NZ
	     DO 100 J=1,NY
100	     CALL WRTLIN(LUN2,BUF(1+(I-1)*NY*NX+(J-1)*NX),NX,(I-1)*NY+J)
@


1.12
log
@*** empty log message ***
@
text
@d49 2
a50 1
5       CALL RDPRMC(PDBFILE,NLET,.TRUE.,'INPUT PDB FILE:',NULL,IRTFLG)
@


1.11
log
@use chkmem instead of allocit call
@
text
@d15 2
a16 2
C* read pdb file, get coordinates,
C* generate a 3-D SPIDER format volume
d20 1
d42 10
a51 5
        IBCNT=IBCNT+1
5       WRITE(NOUT,6)
6	FORMAT(' INPUT PDB FILE: ',$)
        READ(NIN,10)PDBFILE
10	FORMAT(A80)
d54 3
a56 3
	WRITE(NOUT,12)PDBFILE 
12	FORMAT('FILE',A20,' NOT EXIT.')
  	GOTO 5
d59 1
a59 1
15	READ(LUN1,20)RECLIN
d67 9
a75 9
	READ(RECLIN,50)HEAD,ATOM,X,Y,Z,OCCUPANCY,TEMPERATURE
	IF(OCCUPANCY .GT. 1 ) ZNUM=.TRUE.
	XMAX=AMAX1(XMAX,X)
	XMIN=AMIN1(XMIN,X)
	YMAX=AMAX1(YMAX,Y)
	YMIN=AMIN1(YMIN,Y)
	ZMAX=AMAX1(ZMAX,Z)
	ZMIN=AMIN1(ZMIN,Z)
	GOTO 15
d77 1
a77 1
	GOTO 15
d93 2
a94 2
        CALL  RDPRMI(NX,NY,NLOOP,ILOOP,' Volume NSAM, NROW')
        CALL  RDPRMI(NZ,I,NLOOP,ILOOP,' Volume NSLICE')
d98 1
a98 1
        CALL CHKMEM(MEMwant, KAF, MAXMEM-(2048), 
d147 4
a150 4
	  READ(RECLIN,50)HEAD,ATOM,X,Y,Z,OCCUPANCY,TEMPERATURE
50	  FORMAT(A6,5X,1X,A3,2X,3X,1X,1X,4X,1X,3X,3F8.3,2F6.2)	
C	  WRITE(NOUT,*)'ATOM #',NATOM,'  ',ATOM,' AT ',X,Y,Z,OCCUPANCY,
C    &  TEMPERATURE
d164 1
a164 1
		ELSEIF(ATOM(2:2) .EQ. 'X' .AND. atom(1:3) .eq. 'OXT') THEN
d178 40
a217 32
/* coordinate system is different in O and SPIDER */
	  w=x
	  x=y
	  y=w
	  z=-z
C******* trilinear interpolation
	  IX=IFIX((X+XOFFSET)/PIXEL)
	  ax=(x+xoffset)/pixel-float(ix)
	  IY=IFIX((Y+YOFFSET)/PIXEL)
	  ay=(Y+YOFFSET)/PIXEL-float(iy)
	  IZ=IFIX((Z+ZOFFSET)/PIXEL)
	  az=(Z+ZOFFSET)/PIXEL-float(iz)
          BUF(((IZ-1)*NY+(IY-1))*NX+IX)=BUF(((IZ-1)*NY+(IY-1))*NX+IX)+
     &    VATOM*(1.-ax)*(1.-ay)*(1.-az)
          BUF(((IZ)*NY+(IY-1))*NX+IX)=BUF(((IZ)*NY+(IY-1))*NX+IX)+
     &    VATOM*(1.-ax)*(1.-ay)*(az)
          BUF(((IZ-1)*NY+(IY))*NX+IX)=BUF(((IZ-1)*NY+(IY))*NX+IX)+
     &    VATOM*(1.-ax)*(ay)*(1.-az)
          BUF(((IZ)*NY+(IY))*NX+IX)=BUF(((IZ)*NY+(IY))*NX+IX)+
     &    VATOM*(1.-ax)*(ay)*(az)
          BUF(((IZ-1)*NY+(IY-1))*NX+IX+1)=BUF(((IZ-1)*NY+(IY-1))*NX+
     &    IX+1)+VATOM*ax*(1.-ay)*(1.-az)
          BUF(((IZ)*NY+(IY-1))*NX+IX+1)=BUF(((IZ)*NY+(IY-1))*NX+IX+1)+
     &    VATOM*(ax)*(1.-ay)*(az)
          BUF(((IZ-1)*NY+(IY))*NX+IX+1)=BUF(((IZ-1)*NY+(IY))*NX+IX+1)+
     &    VATOM*(ax)*(ay)*(1.-az)
          BUF(((IZ)*NY+(IY))*NX+IX+1)=BUF(((IZ)*NY+(IY))*NX+IX+1)+
     &    VATOM*(ax)*(ay)*(az)
C  
          NATOM=NATOM+1
	  TMASS=TMASS+VATOM
	  GOTO 40
d219 1
a219 1
	  GOTO 40
d222 2
a223 2
	  DO 100 J=1,NY
100	  CALL WRTLIN(LUN2,BUF(1+(I-1)*NY*NX+(J-1)*NX),NX,(I-1)*NY+J)
d227 2
a228 2
	WRITE(NOUT,8701)  NATOM,TMASS
8701	FORMAT(2X,'Number of atoms placed =',I8,'  Total mass =',1PE10.3)
@


1.10
log
@center fixed.
@
text
@d20 5
a24 9
        INCLUDE 'CMBLOCK.INC' 
#ifdef SP_ALLOC
	common adum(2048)
         DIMENSION BUF(1)
         POINTER   (IPQ,BUF) 
         LOGICAL         RUNTIME
#else
	common adum(2048),buf(1)
#endif
d90 8
a97 9
#ifdef SP_ALLOC
         CALL ALLOCIT(MEMWANT,RUNTIME,IPQ,'CP PDB',IRTFLG)
         IF(.NOT.RUNTIME)  THEN
#else
        IF(MEMWANT.GT.MAXMEM-2048) THEN
#endif
	CLOSE(LUN1)
	WRITE(NOUT,*)' VOLUME IS TOO LARGE, INCREASE PIXEL SIZE.'
	RETURN
d99 1
d106 2
a107 1
c check if the volume is large enough to contain the object
d109 5
a113 5
        if(xmin .lt. (-1.*xoffset) .or. ymin .lt. (-1.*yoffset)
     &  .or. zmin .lt. (-1.*zoffset)) then
        CLOSE(LUN1)
        WRITE(NOUT,*)' VOLUME IS TOO SMALL TO CONTAIN THE OBJECT.'
        RETURN
d116 8
a123 8
        tmpx=float(nx-1)*pixel-xoffset
        tmpy=float(ny-1)*pixel-yoffset
        tmpz=float(nz-1)*pixel-zoffset
        if(xmax .gt. tmpx .or. ymax .gt. tmpy
     &  .or. zmax .gt. tmpz) then
        CLOSE(LUN1)
        WRITE(NOUT,*)' VOLUME IS TOO SMALL TO CONTAIN THE OBJECT.'
        RETURN
d128 1
a128 1
	BUF(I)=0.0
d215 3
a217 4
	ENDIF
#ifdef SP_ALLOC
      CALL ALLOCIT(0,RUNTIME,IPQ,'CP PDB',IRTFLG)
#endif
@


1.9
log
@allocit
@
text
@a86 1
	PIXEL=2.
d104 6
a109 3
	XOFFSET=PIXEL*(INT(NX/2)+1)
	YOFFSET=PIXEL*(INT(NY/2)+1)
	ZOFFSET=PIXEL*(INT(NZ/2)+1)
d181 6
a186 6
	  IX=IFIX((X+XOFFSET)/PIXEL)+1
	  ax=(x+xoffset)/pixel+1.-float(ix)
	  IY=IFIX((Y+YOFFSET)/PIXEL)+1
	  ay=(Y+YOFFSET)/PIXEL+1.-float(iy)
	  IZ=IFIX((Z+ZOFFSET)/PIXEL)+1
	  az=(Z+ZOFFSET)/PIXEL+1.-float(iz)
@


1.8
log
@error corrected
@
text
@d21 6
d28 1
d94 7
a100 1
	IF(NX*NY*NZ .GT. maxmem-2048) THEN
d217 3
a219 1
	IRTFLG=0
@


1.7
log
@arbitrary volume size added
@
text
@d160 5
@


1.6
log
@major corrections, previous version wrong.
@
text
@d15 2
a16 2
C* read pdb file, get coordinates then generate a 3-D voloume of SPIDER format
C* 
a19 1
#ifdef SP_UNIX
a20 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
a75 3
	XOFFSET=(SX-(XMIN+XMAX))/2.
	YOFFSET=(SY-(YMIN+YMAX))/2.
	ZOFFSET=(SZ-(ZMIN+ZMAX))/2.
d85 2
d92 23
@


1.5
log
@correction of the trilinear interpolation by J. Zhu
@
text
@d20 5
a24 2

	INCLUDE 'CMBLOCK.INC'
a26 1
	DIMENSION A(1000)
d28 2
a29 2


d31 2
a32 1
	NATOM=1
d64 6
a69 6
	IF(X .GT. XMAX) XMAX=X
	IF(X .LT. XMIN) XMIN=X
	IF(Y .GT. YMAX) YMAX=Y
	IF(Y .LT. YMIN) YMIN=Y
	IF(Z .GT. ZMAX) ZMAX=Z
	IF(Z .LT. ZMIN) ZMIN=Z
d76 3
a78 3
	SX=(XMAX-XMIN)+3
	SY=(YMAX-YMIN)+3
	SZ=(ZMAX-ZMIN)+3
d83 3
a85 3
	CLOSE(LUN1)
	OPEN(LUN1,FILE=PDBFILE,STATUS='OLD')

d88 1
a88 1
	CALL RDPRM(PIXEL,NLOOP,ILOOP,'PIXEL SIZE [A]$')
d98 1
a98 1
	BUF(I)=0
d103 1
a103 1
	CALL OPENF(SPIDERFILE,LUN2,NX,NY,'UNKNOWN',NF,NZ)
d117 1
a117 1
		VATOM=0.001
d119 1
a119 1
		VATOM=0.006
d121 1
a121 1
		VATOM=0.007
d123 1
a123 1
		VATOM=0.008
d125 1
a125 1
		VATOM=0.016
d127 1
a127 1
		VATOM=0.015
d130 1
a130 1
		VATOM=0.008
d140 1
a140 1
	    VATOM=OCCUPANCY/1000.
d142 2
a143 2
C******* trilienear interpolation
	  IX=NINT((X+XOFFSET)/PIXEL)+1
d145 1
a145 1
	  IY=NINT((Y+YOFFSET)/PIXEL)+1
d147 1
a147 1
	  IZ=NINT((Z+ZOFFSET)/PIXEL)+1
d149 1
a149 1
          BUF((IZ-1)*NY*NX+(IY-1)*NX+IX)=BUF((IZ-1)*NY*NX+(IY-1)*NX+IX)+
d151 1
a151 1
          BUF((IZ)*NY*NX+(IY-1)*NX+IX)=BUF((IZ)*NY*NX+(IY-1)*NX+IX)+
d153 1
a153 1
          BUF((IZ-1)*NY*NX+(IY)*NX+IX)=BUF((IZ-1)*NY*NX+(IY)*NX+IX)+
d155 1
a155 1
          BUF((IZ)*NY*NX+(IY)*NX+IX)=BUF((IZ)*NY*NX+(IY)*NX+IX)+
d157 1
a157 1
          BUF((IZ-1)*NY*NX+(IY-1)*NX+IX+1)=BUF((IZ-1)*NY*NX+(IY-1)*NX+
d159 1
a159 1
          BUF((IZ)*NY*NX+(IY-1)*NX+IX+1)=BUF((IZ)*NY*NX+(IY-1)*NX+IX+1)+
d161 1
a161 1
          BUF((IZ-1)*NY*NX+(IY)*NX+IX+1)=BUF((IZ-1)*NY*NX+(IY)*NX+IX+1)+
d163 1
a163 1
          BUF((IZ)*NY*NX+(IY)*NX+IX+1)=BUF((IZ)*NY*NX+(IY)*NX+IX+1)+
d165 1
a165 2
  
	
d167 1
d174 1
a174 4
	  DO 120 K=1,NX
120	  A(K)=BUF(K+(I-1)*NY*NX+(J-1)*NX)
	  CALL WRTLIN(LUN2,A,NX,(I-1)*NY+J)
100	  CONTINUE
d178 2
a181 1
	RETURN
@


1.4
log
@spider calls and uppercasing
@
text
@a0 8
#ifdef SP_DISTRIB
      SUBROUTINE READPDB(MAXDIM)

      COMMON /UNITS/LUNC,NIN,NOUT
      WRITE(NOUT,*) 'DUMMY CALL: READPDB'
      RETURN
      END
#else
d15 1
a15 1
C* READ PDB FILE, GET COORDINATES THEN GENERATE A 3-D VOLOUME OF SPIDER FORMAT
a17 1
c0123456789012345678901234567890123456789012345678901234567890123456789
d19 1
a19 1
	SUBROUTINE READPDB(MAXDIM)
a20 1
#ifdef SP_UNIX
d22 1
a22 5
#else
	INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
	COMMON ADUM(2048),BUF(1)

d27 1
d42 1
a42 1
        READ(NIN,10) PDBFILE
d46 3
a48 3
	  WRITE(NOUT,12)PDBFILE 
12	  FORMAT('*** FILE',A,' DOES NOT EXIST.')
  	  GOTO 5
d52 2
a53 1
20	FORMAT(A)
d59 9
a67 9
	  READ(RECLIN,50)HEAD,ATOM,X,Y,Z,OCCUPANCY,TEMPERATURE
	  IF(OCCUPANCY .GT. 1 ) ZNUM=.TRUE.
	  IF(X .GT. XMAX) XMAX=X
	  IF(X .LT. XMIN) XMIN=X
	  IF(Y .GT. YMAX) YMAX=Y
	  IF(Y .LT. YMIN) YMIN=Y
	  IF(Z .GT. ZMAX) ZMAX=Z
	  IF(Z .LT. ZMIN) ZMIN=Z
	  GOTO 15
d69 1
a69 1
	  GOTO 15
d71 1
a72 1
C    SET CELL DIMENSION
d76 1
a76 1
	WRITE(NOUT,*) 'CELL SIZE ',SX,SY,SZ
d89 4
a92 4
	IF(NX*NY*NZ .GT. MAXDIM) THEN
	  CLOSE(LUN1)
	  WRITE(NOUT,*)' VOLUME IS TOO LARGE, REDUCE PIXEL SIZE.'
	  RETURN
d95 1
a95 1
	  BUF(I)=0
d104 1
d111 1
a111 1
C    &                  TEMPERATURE
d113 2
a114 2
                IF(ATOM(2:2) .EQ. 'H') THEN
		  VATOM=0.001
d116 1
a116 1
		  VATOM=0.006
d118 1
a118 1
		  VATOM=0.007
d120 1
a120 1
		  VATOM=0.008
d122 1
a122 1
		  VATOM=0.016
d124 4
a127 5
		  VATOM=0.015
		ELSEIF(ATOM(2:2) .EQ. 'X' .AND. 
     $              ATOM(1:3) .EQ. 'OXT') THEN
C                 TRNA THREE PRIME TERMINAL
		  VATOM=0.008
d129 5
a133 5
		  WRITE(NOUT, *) 'SPECIAL ATOM ENCOUNT AT'
	          WRITE(NOUT,*) RECLIN 
	          CLOSE(LUN1)
                  CLOSE(LUN2)
        	  RETURN
d135 1
a135 1
C	        VATOM=VATOM*OCCUPANCY
d137 1
a137 1
	      VATOM=OCCUPANCY/1000.
d139 28
a166 8
	    IX=NINT((X+XOFFSET)/PIXEL)+1
	    IY=NINT((Y+YOFFSET)/PIXEL)+1
	    IZ=NINT((Z+ZOFFSET)/PIXEL)+1
            BUF((IZ-1)*NY*NX+(IY-1)*NX+IX) = VATOM +
     &                    BUF((IZ-1)*NY*NX + (IY-1)*NX + IX)
            NATOM=NATOM+1
	    GOTO 40
	ELSEIF(RECLIN(1:3) .NE. 'END') THEN
d168 7
a174 9
	ELSE
	  DO  I=1,NZ
	    DO  J=1,NY
	      DO  K=1,NX
	        A(K)=BUF(K+(I-1)*NY*NX+(J-1)*NX)
              END DO
	      CALL WRTLIN(LUN2,A,NX,(I-1)*NY+J)
            END DO
          END DO
a181 1
#endif
@


1.3
log
@rewritten file from jun
@
text
@d23 1
a23 1
C* read pdb file, get coordinates then generate a 3-D voloume of SPIDER format
d26 1
d30 1
d32 5
a36 1
	common adum(2048),buf(1)
d55 1
a55 1
        READ(NIN,10)PDBFILE
d60 1
a60 1
12	  FORMAT('FILE',A20,' NOT EXIT.')
d65 1
a65 2
20	FORMAT(A80)

d83 1
a84 1

d88 1
a88 1
	WRITE(NOUT,*)'CELL SIZE ',SX,SY,SZ
d101 4
a104 4
	IF(NX*NY*NZ .GT. maxdim) THEN
	CLOSE(LUN1)
	WRITE(NOUT,*)' VOLUME IS TOO LARGE, REDUCE PIXEL SIZE.'
	RETURN
d107 1
a107 1
	BUF(I)=0
a115 1

d136 3
a138 2
		ELSEIF(ATOM(2:2) .EQ. 'X' .AND. atom(1:3) .eq. 'OXT') THEN
C******         TRNA THREE PRIME TERMINAL
@


1.2
log
@new version from june zhu
@
text
@d2 1
a2 1
      SUBROUTINE READPDB
a8 1

d24 1
a24 1
C*
d27 1
a27 1
	SUBROUTINE READPDB(IRTFLG)
d30 3
a32 3
C       COMMOM BUF(6000000)
        CHARACTER *81 PDBFILE, SPIDERFILE,RECLIN,HEAD*10, NULL*1,ATOM*1
	DIMENSION BUF(10000000),A(1000)
d34 1
d53 3
a55 3
	WRITE(NOUT,12)PDBFILE
12	FORMAT('FILE',A20,' NOT EXIT.')
  	GOTO 5
d66 9
a74 9
	READ(RECLIN,50)HEAD,ATOM,X,Y,Z,OCCUPANCY,TEMPERATURE
	IF(OCCUPANCY .GT. 1 ) ZNUM=.TRUE.
	IF(X .GT. XMAX) XMAX=X
	IF(X .LT. XMIN) XMIN=X
	IF(Y .GT. YMAX) YMAX=Y
	IF(Y .LT. YMIN) YMIN=Y
	IF(Z .GT. ZMAX) ZMAX=Z
	IF(Z .LT. ZMIN) ZMIN=Z
	GOTO 15
d76 1
a76 1
	GOTO 15
d96 1
a96 1
	IF(NX*NY*NZ .GT. 10000000) THEN
d109 1
a109 1

d116 1
a116 1
50	  FORMAT(A6,5X,1X,1X,A1,3X,3X,1X,1X,4X,1X,3X,3F8.3,2F6.2)
d118 1
a118 1
C    &  TEMPERATURE
d120 13
a132 13
		IF(ATOM .EQ. 'H') THEN
		VATOM=0.001
		ELSEIF(ATOM .EQ. 'C') THEN
		VATOM=0.006
		ELSEIF(ATOM .EQ. 'N') THEN
		VATOM=0.007
		ELSEIF(ATOM .EQ. 'O') THEN
		VATOM=0.008
	        ELSEIF(ATOM .EQ. 'S') THEN
		VATOM=0.016
		ELSEIF(ATOM .EQ. 'P') THEN
		VATOM=0.015
		ELSEIF(ATOM .EQ. 'X' .AND. NATOM .EQ. 1) THEN
d134 1
a134 1
		VATOM=0.008
d136 5
a140 5
		WRITE(NOUT, *) 'SPECIAL ATOM ENCOUNT AT'
	        WRITE(NOUT,*) RECLIN
	        CLOSE(LUN1)
                CLOSE(LUN2)
        	RETURN
d142 3
a144 3
C	    VATOM=VATOM*OCCUPANCY
	    ELSE
	    VATOM=OCCUPANCY/1000.
d146 8
a153 8
	  IX=NINT((X+XOFFSET)/PIXEL)+1
	  IY=NINT((Y+YOFFSET)/PIXEL)+1
	  IZ=NINT((Z+ZOFFSET)/PIXEL)+1
          BUF((IZ-1)*NY*NX+(IY-1)*NX+IX)=BUF((IZ-1)*NY*NX+(IY-1)*NX+IX)+
     &    VATOM
          NATOM=NATOM+1
	  GOTO 40
	  ELSEIF(RECLIN(1:3) .NE. 'END') THEN
d155 9
a163 7
	  ELSE
	  DO 100 I=1,NZ
	  DO 100 J=1,NY
	  DO 120 K=1,NX
120	  A(K)=BUF(K+(I-1)*NY*NX+(J-1)*NX)
	  CALL WRTLIN(LUN2,A,NX,(I-1)*NY+J)
100	  CONTINUE
@


1.1
log
@Initial revision
@
text
@d24 1
a24 1
C* read pdb file, get coordinates then generate a 3-D volume of SPIDER format
d31 1
d33 2
a34 3
	DIMENSION BUF(1700000),A(1000)
	LOGICAL EX,FLAGCELLDIM,FLAGATOM,ZNUM

a35 2
	FLAGCELLDIM=.TRUE.
	FLAGATOM=.TRUE.
a60 9
C********READ CELL DIMENSION
C       DIFFERENCE FOR CRYSTALOGRAPHY AND NMR
C	IF(RECLIN(1:6) .NE. 'CRYST1' .AND. FLAGCELLDIM) GOTO 15
C	IF(.NOT. FLAGCELLDIM) GOTO 35
C	FLAGCELLDIM=.FALSE.
C	READ(RECLIN,30)HEAD,SX,SY,SZ,ARPH,BETA,GAMA
C30	FORMAT(A6,3F9.3,3F7.2)
C	IF(SX .EQ. 1. .AND. SY .EQ. 1 .AND. SZ .EQ. 1) THEN
C	WRITE(NOUT,*)'CELL SIZE: ',SX,SY,SZ
a65 1
	FLAGATOM=.FALSE.
d67 1
a67 1
	IF(OCCUPANCY .GT. 1) ZNUM=.TRUE.
d75 1
a75 1
	ELSEIF(FLAGATOM) THEN
d91 1
a91 1

d96 5
d111 1
a111 1
	FLAGATOM=.TRUE.
a114 1
	  FLAGATOM=.FALSE.
d118 1
a118 1
C     &  TEMPERATURE
d121 1
a121 1
		    VATOM=0.001
d123 1
a123 1
		    VATOM=0.006
d125 1
a125 1
		    VATOM=0.007
d127 1
a127 1
		    VATOM=0.008
d129 1
a129 1
		    VATOM=0.016
d131 1
a131 1
		    VATOM=0.015
d133 2
a134 2
C******             TRNA THREE PRIME TERMINAL
		    VATOM=0.008
d136 5
a140 2
		    WRITE(NOUT, *) 'SPECIAL ATOM ENCOUNT'
		    RETURN
d142 1
a142 1
	        VATOM=VATOM*OCCUPANCY
d144 1
a144 1
	        VATOM=OCCUPANCY/1000.
d153 1
a153 1
	  ELSEIF(FLAGATOM) THEN
a169 1

@
