head	1.63;
access;
symbols
	healthdept_2018:1.63
	pre_getangas:1.60
	GPL2010:1.58
	pre_GPL2010:1.57
	pre_var_equation:1.57
	pre_fftwrings:1.57
	pre_opfiles:1.57
	src:1.57
	best-code:1.55
	x-named-regs:1.55
	x:1.55
	v13-00:1.55
	pre_GPL:1.53
	prec_CA:1.53
	noindx:1.48
	Bproc:1.41
	oct21:1.39
	last77:1.38;
locks; strict;
comment	@c @;


1.63
date	2018.10.03.14.34.11;	author leith;	state Exp;
branches;
next	1.62;

1.62
date	2012.02.10.20.05.24;	author leith;	state Exp;
branches;
next	1.61;

1.61
date	2012.02.10.19.32.12;	author leith;	state Exp;
branches;
next	1.60;

1.60
date	2010.10.21.18.29.05;	author leith;	state Exp;
branches;
next	1.59;

1.59
date	2010.10.21.17.47.24;	author leith;	state Exp;
branches;
next	1.58;

1.58
date	2010.06.24.13.26.24;	author leith;	state Exp;
branches;
next	1.57;

1.57
date	2006.12.27.16.08.36;	author leith;	state Exp;
branches;
next	1.56;

1.56
date	2006.05.12.16.24.49;	author leith;	state Exp;
branches;
next	1.55;

1.55
date	2005.10.17.20.33.28;	author leith;	state Exp;
branches;
next	1.54;

1.54
date	2005.10.17.18.24.11;	author leith;	state Exp;
branches;
next	1.53;

1.53
date	2003.02.28.14.43.16;	author leith;	state Exp;
branches;
next	1.52;

1.52
date	2003.02.21.19.52.39;	author leith;	state Exp;
branches;
next	1.51;

1.51
date	2003.02.18.16.04.15;	author leith;	state Exp;
branches;
next	1.50;

1.50
date	2003.01.23.16.49.14;	author leith;	state Exp;
branches;
next	1.49;

1.49
date	2003.01.23.15.51.26;	author leith;	state Exp;
branches;
next	1.48;

1.48
date	2002.08.19.18.42.42;	author leith;	state Exp;
branches;
next	1.47;

1.47
date	2002.08.15.19.15.08;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2002.08.14.13.38.31;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2002.08.13.20.30.47;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2002.03.11.14.08.21;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2001.03.19.14.11.31;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2001.01.16.19.40.02;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2000.04.12.18.45.14;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	99.11.10.23.10.02;	author yuchen;	state Exp;
branches;
next	1.39;

1.39
date	99.04.14.17.55.57;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	99.03.29.20.16.05;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	99.03.02.19.43.23;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	99.03.02.17.25.28;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	99.03.01.19.17.47;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	99.02.19.17.00.00;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	99.01.12.17.16.52;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	99.01.08.16.42.08;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	98.04.07.18.54.58;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	98.04.07.16.16.17;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	98.04.07.15.46.29;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	98.04.07.14.17.42;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	98.04.07.12.30.29;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	98.02.24.17.06.23;	author liy;	state Exp;
branches;
next	1.25;

1.25
date	98.02.24.16.47.09;	author liy;	state Exp;
branches;
next	1.24;

1.24
date	98.01.27.17.12.05;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	98.01.21.20.42.56;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	98.01.20.19.49.51;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	98.01.12.20.29.53;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	97.12.22.14.45.01;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	97.12.19.19.31.59;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	97.12.12.17.40.33;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	97.12.10.21.19.43;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	97.10.17.18.55.59;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	97.10.16.21.09.18;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	97.10.15.18.06.37;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	97.10.14.14.46.29;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	97.10.07.19.28.34;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	97.10.03.18.47.00;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	97.05.16.18.17.41;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	97.01.14.19.10.16;	author mladjadj;	state Exp;
branches;
next	1.8;

1.8
date	96.12.18.20.47.38;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	96.12.17.20.26.10;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	96.12.16.21.17.05;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	96.12.16.14.19.59;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	96.12.11.18.45.39;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	96.11.25.19.30.56;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	96.11.22.20.52.56;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	96.11.22.17.58.19;	author leith;	state Exp;
branches;
next	;


desc
@new
@


1.63
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C OPENINSTK.F   -- NEW NOVEMBER 1996   AUTHOR: ArDean Leith
C                  CHANGED IRTFLG DEFAULT        JAN 99 -- ArDean Leith
C                  REWRITTEN                     JAN 99 -- ArDean Leith 
C                  USED LUNHDR                   FEB 99 -- ArDean Leith 
C                  INLINE VOLUME STACKS          AUG 02 -- ArDean Leith                         
C                  INDEXED STACKS                JAN 03 -- ArDean Leith
C                  HEADER COPY                   FEB 03 -- ArDean Leith
C                  OPENINLY *8                   OCT 10 -- ArDean Leith
C                  ERROR MSG                     FEB 12 -- ArDean Leith
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2012  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    OPENINSTK(LUNT,FILNAM,LUN,NX,NY,NZ,NSTACK,ITYPE, DISP,IRTFLG)
C
C    PURPOSE:       TO OPEN A NEW OR EXISTING INLINE STACK. CAN OPEN
C                   OVERALL (BARE) STACK OR SPECIEFIED IMAGE WITHIN
C                   AN INLINE STACK
C
C    PARAMETERS:
C        LUNT       UNIT TO COPY HEADER VALUES FROM              (SENT)
C        FILNAM     CHARACTER ARRAY, CONTAINING FILE NAME        (SENT)
C        LUN        LOGICAL UNIT NUMBER FOR FILNAM I/O.          (SENT)
C        NX,NY      DIMENSIONS OF FILE                      (SENT/RET.)
C        NZ         NUMBER OF PLANES                        (SENT/RET.)
C        NSTACK     STACK INDICATOR                         (SENT/RET.)
C                   ON INPUT:
C                      >0 : REGULAR STACK FILE (IF NEW)
C                      <0 : INDEXED STACK FILE (IF NEW)
C                   ON OUTPUT:                               
C                      -2 : NOT STACK = ERROR
C                      -1 : STACKED IMAGE
C                       0 : REGULAR BARE STACK, CONTAINS NO IMAGE(S)
C                      >0 : INDEXED BARE STACK, VALUE IS MAX. IMAGE
C        ITYPE      IFORM                                   (SENT/RET.)                    
C        DISP       FILE DISPOSITION, SEE OPFIL FOR VALUES       (SENT)
C        IRTFLG     ERROR RETURN FLAG.                      (SENT/RET.)
C                   IRTFLG = 0    NORMAL RETURN
C                   IRTFLG = 1    ERROR RETURN
C
C    CALL TREE:  SEE OPFIL
C
C23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
C--*********************************************************************
C  2,195,511,375 10

	SUBROUTINE OPENINSTK(LUNT,FILNAM,LUN,NX,NY,NZ,
     &                       NSTACK,ITYPE,DISP,IRTFLG)

C       USE INLINE BUFFER COMMON AREA
        INCLUDE 'INLN_INFO.INC'

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'LABLOCK.INC'

        INTEGER                      :: LUNT
        CHARACTER (LEN=*)            :: FILNAM,DISP
        INTEGER                      :: LUN,NX,NY,NZ,NSTACK,ITYPE,IRTFLG

	LOGICAL                      :: STACKOPN,ISDIGI,CALLERRT

        INTEGER, PARAMETER           :: I_8 = SELECTED_INT_KIND(12)
	INTEGER(KIND=I_8)            :: NWORDS8   ! FROM INLN_INFO
        INTEGER(KIND=I_8), PARAMETER :: ZERO_8 = 0


C       SHOULD NOT STOP IF DISP == 'Z' AND REDHED FAILS
        CALLERRT =  (DISP(1:1) .NE. 'Z') 

C       SET ERROR RETURN
        IRTFLG   = 1

        NSTACKIN = NSTACK

C       MAKE SURE USER WANTS TO USE A INLINE STACK      
        ILOCAT = INDEX(FILNAM,'@@')

        IEND = ILOCAT + 1
        IF (ISDIGI(FILNAM(ILOCAT + 2:ILOCAT+2))) IEND = IEND + 1
        IF (ILOCAT .LE. 2 .OR. FILNAM(1:1) .NE. '_') THEN
           WRITE(NOUT,*)'*** BAD SYNTAX FOR INLINE STACK:',FILNAM
           CALL ERRT(100,'OPENINSTK',NE)
           RETURN
        ENDIF

C       RETRIVE INLINE BUFFER NUMBER FROM FILE NAME
        CALL INLNBUF(FILNAM(1:IEND),NLET,INLNED,IRTFLGT)
        IF (IRTFLGT .NE. 0)  RETURN

        IF (ISDIGI(FILNAM(ILOCAT + 1:ILOCAT + 1))) THEN
C          FIND IMAGE NUMBER WITHIN STACK FILE 
           CALL GETFILENUM(FILNAM(ILOCAT:),IMGNUM,NDIGITS,
     &                     .TRUE.,IRTFLGT)
           IF (IRTFLGT .NE. 0) RETURN
           IF (IMGNUM .LE. 0) THEN
              CALL ERRT(101,'STACKS START WITH IMAGE: 1',NE)
              RETURN
           ENDIF

C          FOR SPECIFIC IMAGE RETURN NSTACK = -1
           NSTACK = -1
        ELSE
C          SET DEFAULT IMGNUM FOR BARESTACK 
           IMGNUM   = 0
C          (BARE STACKS RETURN NSTACK >= 0)
           NSTACK   = 0
        ENDIF

C       SEE IF INLINE STACK EXISTS NOW
        STACKOPN = (NSAMBUF(INLNED) > 0)


C -------------------------------- NEW --------------------------------

10	IF (DISP(1:1)  ==  'U' .OR. DISP(1:1)  ==  'N') THEN
C         WANT TO MAKE A NEW STACK OR NEW IMAGE WITHIN EXISTING STACK
   
          IF (.NOT. STACKOPN) THEN
C            INLINE STACK DOES NOT EXIST YET, CREATE NEW INLINE STACK 

             IF (IMGNUM  ==  0 .AND. STACKOPN) THEN
C	        ACCESS THE WHOLE STACK, NOT A PARTICULAR IMAGE BUT SINCE
C               DISP IS NEW AND STACK IS ALREADY OPEN THIS IS REALLY
C               ASKING TO CREATE A NEW STACK IN AN EXISTING STACK. 

C               CLOSE OLD STACK (THIS DESTROYS DATA IN IT!!)
                CALL OPENINLN(LUN,INLNED,.TRUE.,0,ZERO_8,
     &                       .FALSE.,IRTFLGT)
             ENDIF

             CALL RDPRI1S(NIMAGE,NOT_USED,
     &              'NUMBER OF IMAGES/VOLUMES ALLOWED IN STACK',IRTFLGT)
             IF (IRTFLGT .NE. 0) RETURN

             IF (NSTACKIN .LT. 0) THEN
                 CALL RDPRI1S(ISTACK,NOT_USED,
     &           'HIGHEST IMAGE/VOLUME NUMBER ALLOWED IN STACK',IRTFLGT)
                 IF (IRTFLGT .NE. 0) RETURN
                 IF (ISTACK .LT. 1) THEN
                     CALL ERRT(101,'MIN. NO. FOR INDEXED STACK IS 1',NE)
                     RETURN                        
                  ENDIF
                  ISTACK = - ISTACK
             ELSE
                  ISTACK = 2
             ENDIF

C            CREATE NEW OVERALL HEADER 
             CALL LUNSETHDR(0,LUN,NX,NY,NZ,
     &                      ITYPE,ISTACK,IRTFLGT)
             IF (IRTFLGT .NE. 0) RETURN

C            SAVE ISTACK & MAXIM IN STATIC PART OF HEADER OBJECT
             CALL LUNSETSTKALL(LUN,ISTACK,IRTFLGT) ! sets (259) & (260)
             CALL LUNSETMAXALL(LUN,0,IRTFLGT)

C            GET RECORD INFO
             CALL LUNGETLAB(LUN,LABREC,INDXREC,NRECS,LABBYT,
     &                      LENBYT,IRTFLGT)
             IF (IRTFLGT .NE. 0) RETURN

C            SET UP INLINE BUFFER AND TIE IT TO LUN
C            NWORDS = (LABREC + INDXREC +NIMAGE  * NRECS) * (LENBYT / 4) 
             NWORDS8 = (LABREC + INDXREC +NIMAGE  * NRECS) 
             NWORDS8 = NWORDS8  * (LENBYT / 4) 
 
             CALL OPENINLN(LUN,INLNED,.TRUE.,NX,NWORDS8,
     &                     .TRUE.,IRTFLGT)
             IF (IRTFLGT .NE. 0)  RETURN

C            WRITE OVERALL HEADER RECORD(S) INTO INLINE STACK	    
             CALL LUNWRTHED(LUN,NX,0,IRTFLGT)
             IF (IRTFLGT .NE. 0) RETURN

             IRECBUF(INLNED)   = IREC  
             LABRECBUF(INLNED) = LABREC  

             IF (ISTACK .LT. 0) THEN
C               CLEAR STACK INDEX IN NEW FILE
                CALL LUNCLRINDX(LUN,NX,IRTFLGT)
             ENDIF

             IF (IMGNUM  ==  0) THEN
C               DO NOT HAVE AN IMAGE TO PLACE IN THE STACK YET
C	        ACCESS THE WHOLE STACK NOT A PARTICULAR IMAGE

                CALL LUNSETISBARE(LUN,.TRUE.,IRTFLGT)
                IF (IRTFLGT .NE. 0) RETURN
                GOTO 7777
             ENDIF

          ELSE 
C            PUTTING IMAGE INTO EXISTING INLINE FILE 

C            USE EXISTING INLINE BUFFER, TIE IT TO LUN & GET NX
             CALL OPENINLN(LUN,INLNED,.FALSE.,NX,ZERO_8,
     &                    .TRUE.,IRTFLGT)
             IF (IRTFLGT .NE. 0)  RETURN
          ENDIF
       
C         RECOVER OVERALL HEADER FROM INLINE STACK FILE
          CALL LUNREDHED(LUN,NX,0,.TRUE.,IRTFLGT)
          IF (IRTFLGT .NE. 0) RETURN

          CALL LUNGETSTK(LUN,ISTACK,MAXIM,IRTFLG)   !gets (24) & (26)

C         COPY ISTACK & MAXIM INTO STATIC PART OF HEADER OBJECT 
          CALL LUNSETSTKALL(LUN,ISTACK,IRTFLGT)     !sets (259) & (260)
          CALL LUNSETMAXALL(LUN,MAXIM,IRTFLGT)

          CALL LUNGETTYPE(LUN,ITYPEF,IRTFLGT)

          CALL LUNGETSIZE(LUN,NXF,NYF,NZF,IRTFLGT)

          CALL LUNGETLAB(LUN,LABRECF,INDXREC,NRECF,NDUM,NDUM,IRTFLGT)

          IF (ISTACK  ==  0) THEN
C             INLINE BUFFER DOES NOT CONTAIN A STACK
              CALL ERRT(101,'INLINE BUFFER DOES NOT CONTAIN A STACK',NE)
              RETURN

          ELSEIF (NXF   .NE. NX .OR. NYF .NE. NY .OR.
     &            NZF .NE. NZ) THEN
C             EXISTING FILE HAS DIFFERING DIMENSIONS
              CALL ERRT(102,
     &                  'IMAGE DIMENSIONS NOT SAME AS IN INLINE STACK',
     &                  INLNED)
              RETURN

          ELSEIF (ITYPE .NE. ITYPEF) THEN
C            EXISTING STACK FILE FORMAT NOT SAME AS IMAGE FORMAT
             WRITE(NOUT,96) ITYPE,ITYPEF
96           FORMAT('IMAGE FORMAT: ',I5,
     &              ' NOT COMPATIBLE WITH EXISTING STACK FORMAT: ',I5)
             CALL ERRT(100,'OPENINSTK',NE)
             RETURN
          ENDIF

          IF (IMGNUM  ==  0) THEN
C	     ACCESS THE WHOLE STACK NOT A PARTICULAR IMAGE
             CALL LUNSETISBARE(LUN,.TRUE.,IRTFLGT)
             IF (IRTFLGT .NE. 0) RETURN
             GOTO 7777
          ENDIF

          IF (IMGNUM .GT. MAXIM) THEN
C            UPDATE OVERALL HEADER WITH MAX. IMAGE NUMBER IN USE
             CALL LUNSETMAXIM(LUN,IMGNUM,IRTFLGT)  ! sets(26)
             IF (IRTFLGT .NE. 0) RETURN
          ENDIF

          IF (ISTACK .LT. 0) THEN
C            MAKING A NEW INDEXED STACKED FILE, SET STORAGE LOCATION
             CALL LUNWRTINDX(LUN,IMGNUM,NX,IRTFLGT)
             IF (IRTFLGT .NE. 0) RETURN
          ENDIF

          IF (IMGNUM .GT. MAXIM .OR. ISTACK .LT. 0) THEN
C            SAVE OVERALL HEADER TO PRESERVE IMGNUM & LASTINDX
             CALL LUNWRTHED(LUN,NX,0,IRTFLGT)
          ENDIF

C         SET MAXIM VALUE IN HEADER OBJECT STATIC AREA
          MAXIM = MAX(IMGNUM,MAXIM)
          CALL LUNSETMAXALL(LUN,MAXIM,IRTFLG)

C         CREATE HEADER FOR NEW STACKED IMAGE NOW
C         KEEPS STATIC HEADER SETTINGS
          ISTACK = 0
          CALL LUNSETHDR(LUNT,LUN,NX,NY,NZ,ITYPE,ISTACK,IRTFLGT)
          IF (IRTFLGT .NE. 0) RETURN

          CALL LUNSETMAXIM(LUN,0,IRTFLGT)

C         SET IMUSED FLAG FOR STACKED IMAGE HEADER
          CALL LUNSETINUSE(LUN,IMGNUM,IRTFLGT)
          IF (IRTFLGT .NE. 0) RETURN

C         PLACE NEW IMAGE HEADER INTO PROPER STACK LOCATION
          CALL LUNWRTHED(LUN,NX,IMGNUM,IRTFLGT)
          IF (IRTFLGT .NE. 0) RETURN

C -------------------------------- OLD --------------------------------
           
	ELSEIF (DISP(1:1)  ==  'O' .OR. DISP(1:1)  ==  'K' .OR.
     &          DISP(1:1)  ==  'Z' .OR. 
     &          DISP(1:1)  ==  'E' .OR. DISP(1:1)  ==  'M') THEN
C          WANT AN EXISTING IMAGE FROM EXISTING STACK OR AN
C          EXISTING BARE STACK HEADER

           IF (.NOT. STACKOPN) THEN
C             INLINE STACK DOES NOT EXIST YET, ERROR
              WRITE(NOUT,*) '*** INLINE STACK DOES NOT EXIST'
C	      FOR DISP=Z, DO NOT STOP BATCH JOBS BY CALLING ERRT
              IF (CALLERRT) CALL ERRT(100,'OPENINSTK',NE)
              RETURN
           ENDIF

C          USE EXISTING INLINE BUFFER, TIE IT TO LUN & GET NX
           CALL OPENINLN(LUN,INLNED,.FALSE.,NX,ZERO_8,.TRUE.,IRTFLGT)
           IF (IRTFLGT .NE. 0)  RETURN

C          GET OVERALL HEADER 
           CALL LUNREDHED(LUN,NX,0,CALLERRT,IRTFLGT)
           IF (IRTFLGT .NE. 0) RETURN
          
C          RECOVER MAXIM FROM OVERALL HEADER & PLACE IN STATIC AREA 
           CALL LUNCOPYMAXIM(LUN,MAXIM,IRTFLGT)

C          RECOVER ISTACK FROM OVERALL HEADER & PLACE IN STATIC AREA 
           CALL LUNCOPYSTK(LUN,ISTACK,IRTFLGT)

           IF (IMGNUM .NE. 0) THEN
C             GET SPECIFIED IMAGE HEADER 
              CALL LUNREDHED(LUN,NX,IMGNUM,CALLERRT,IRTFLGT)
              IF (IRTFLGT .NE. 0) THEN
                 IF (CALLERRT) THEN
                    CALL ERRT(102,'STACK LACKS IMAGE NUMBER',IMGNUM)
                 ENDIF
                 RETURN
              ENDIF
           ENDIF

C          RECOVER IMAGE PARAMETERS FROM STACKED IMAGE HEADER
           CALL LUNGETSIZE(LUN,NX,NY,NZ,IRTFLGT)

           IF (IMGNUM  ==  0) THEN
C             FOR OVERALL STACK RETURN NSTACK = MAX IMAGE (BUF(26))
              NSTACK = MAXIM
           ELSE

C             SEE IF THIS IMAGE IS USED IN THE STACK
              CALL LUNGETINUSE(LUN,IMGNUMT,IRTFLGT)

              IF (IMGNUM .NE. IMGNUMT) THEN
C                NO EXISTING IMAGE WITHIN STACK, (THIS IMAGE UNUSED)
                 IF (CALLERRT) THEN
                    CALL ERRT(102,'THIS IMAGE NOT USED IN STACK',IMGNUM)
                 ENDIF
                 RETURN
              ENDIF 
           ENDIF
           CALL LUNGETTYPE(LUN,ITYPE,IRTFLG)

        ELSE
          WRITE(NOUT,*)'*** PGM. ERROR: UNKNOWN DISP IN OPENINSTK:',DISP
          CALL ERRT(100,'OPENINSTK',NE)
          RETURN
        ENDIF

C ------------------------------- BOTH --------------------------------

C       SET OFFSETS FOR REDLIN/WRTLIN ON THIS LUN
        CALL LUNSETIMGOFF(LUN,IMGNUM,NX,IRTFLGT)
        IF (IRTFLGT .NE. 0) RETURN

C       WRITE OUT FILE OPENING INFO
7777    CALL LUNSAYINFO(LUN,IRTFLGT)

C       SET COMMON BLOCK VARIABLES
        CALL LUNSETCOMMON(LUN,IRTFLGT)

C       SET FLAG FOR NORMAL RETURN	
        IRTFLG = 0
        RETURN

	END

@


1.62
log
@NSAMBUF not NXBUF bug
@
text
@d19 1
a19 1
C=* Email: spider@@wadsworth.org                                        *
@


1.61
log
@IMAGE DIMENSIONS NOT SAME AS STACK msg
@
text
@d131 1
a131 1
        STACKOPN = (NXBUF(INLNED) > 0)
d248 1
a248 1
     &                  ,INLNED)
d256 1
a256 1
             CALL ERRT(100,'OPENINSTK',NE)zzzz
@


1.60
log
@zero_8 defined
@
text
@d12 1
d17 1
a17 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d35 1
a35 2
C    OPENINSTK(LUNT,FILNAM,LUN,NSAM,NROW,NSLICE,NSTACK,ITYPE,
C              DISP,IRTFLG)
d42 1
a42 1
C        LUNT       UNIT TO COPY HEADER VALUES FROM               (SENT)
d45 2
a46 2
C        NSAM,NROW  DIMENSIONS OF FILE                      (SENT/RET.)
C        NSLICE     NUMBER OF PLANES                        (SENT/RET.)
d68 1
a68 1
	SUBROUTINE OPENINSTK(LUNT,FILNAM,LUN,NSAM,NROW,NSLICE,
d77 1
d79 2
d131 1
a131 1
        STACKOPN = (NSAMBUF(INLNED) .GT. 0)
d136 1
a136 1
10	IF (DISP(1:1) .EQ. 'U' .OR. DISP(1:1) .EQ. 'N') THEN
d142 1
a142 1
             IF (IMGNUM .EQ. 0 .AND. STACKOPN) THEN
d170 1
a170 1
             CALL LUNSETHDR(0,LUN,NSAM,NROW,NSLICE,
d188 1
a188 1
             CALL OPENINLN(LUN,INLNED,.TRUE.,NSAM,NWORDS8,
d193 1
a193 1
             CALL LUNWRTHED(LUN,NSAM,0,IRTFLGT)
d201 1
a201 1
                CALL LUNCLRINDX(LUN,NSAM,IRTFLGT)
d204 1
a204 1
             IF (IMGNUM .EQ. 0) THEN
d216 2
a217 2
C            USE EXISTING INLINE BUFFER, TIE IT TO LUN & GET NSAM
             CALL OPENINLN(LUN,INLNED,.FALSE.,NSAM,ZERO_8,
d223 1
a223 1
          CALL LUNREDHED(LUN,NSAM,0,.TRUE.,IRTFLGT)
d234 1
a234 1
          CALL LUNGETSIZE(LUN,NSAMF,NROWF,NSLICEF,IRTFLGT)
d238 1
a238 1
          IF (ISTACK .EQ. 0) THEN
d243 2
a244 2
          ELSEIF (NSAMF   .NE. NSAM .OR. NROWF .NE. NROW .OR.
     &            NSLICEF .NE. NSLICE) THEN
d246 3
a248 1
              CALL ERRT(101,'IMAGE DIMENSIONS NOT SAME AS STACK',NE)
d256 1
a256 1
             CALL ERRT(100,'OPENINSTK',NE)
d260 1
a260 1
          IF (IMGNUM .EQ. 0) THEN
d275 1
a275 1
             CALL LUNWRTINDX(LUN,IMGNUM,NSAM,IRTFLGT)
d281 1
a281 1
             CALL LUNWRTHED(LUN,NSAM,0,IRTFLGT)
d291 1
a291 1
          CALL LUNSETHDR(LUNT,LUN,NSAM,NROW,NSLICE,ITYPE,ISTACK,IRTFLGT)
d301 1
a301 1
          CALL LUNWRTHED(LUN,NSAM,IMGNUM,IRTFLGT)
d306 3
a308 3
	ELSEIF (DISP(1:1) .EQ. 'O' .OR. DISP(1:1) .EQ. 'K' .OR.
     &          DISP(1:1) .EQ. 'Z' .OR. 
     &          DISP(1:1) .EQ. 'E' .OR. DISP(1:1) .EQ. 'M') THEN
d320 2
a321 2
C          USE EXISTING INLINE BUFFER, TIE IT TO LUN & GET NSAM
           CALL OPENINLN(LUN,INLNED,.FALSE.,NSAM,ZERO_8,.TRUE.,IRTFLGT)
d325 1
a325 1
           CALL LUNREDHED(LUN,NSAM,0,CALLERRT,IRTFLGT)
d336 1
a336 1
              CALL LUNREDHED(LUN,NSAM,IMGNUM,CALLERRT,IRTFLGT)
d346 1
a346 1
           CALL LUNGETSIZE(LUN,NSAM,NROW,NSLICE,IRTFLGT)
d348 1
a348 1
           IF (IMGNUM .EQ. 0) THEN
d359 1
a359 1
                    CALL ERRT(101,'THIS IMAGE NOT USED IN STACK',NE)
d375 1
a375 1
        CALL LUNSETIMGOFF(LUN,IMGNUM,NSAM,IRTFLGT)
@


1.59
log
@OPENINLY *8
@
text
@d77 6
a82 2
        CHARACTER (LEN=*)     :: FILNAM,DISP
	LOGICAL               :: STACKOPN,ISDIGI,CALLERRT
a83 2
        INTEGER, PARAMETER    :: I_8 = SELECTED_INT_KIND(12)
	INTEGER(KIND=I_8)     :: NWORDS8   ! FROM INLN_INFO
@


1.58
log
@GPL_2010
@
text
@d4 8
a11 8
C OPENINSTK.F   -- NEW NOVEMBER 1996  AUTHOR: ArDean Leith
C                  CHANGED IRTFLG DEFAULT   JAN 99 -- ArDean Leith
C                  REWRITTEN                JAN 99 --  ArDean Leith 
C                  USED LUNHDR              FEB 99 --  ArDean Leith 
C                  INLINE VOLUME STACKS     AUG 02 --  ArDean Leith                         
C                  INDEXED STACKS           JAN 03 --  ArDean Leith
C                  HEADER COPY              FEB 03 -- ArDean Leith
C
d66 1
d77 5
a81 2
        CHARACTER (LEN=*) ::      FILNAM,DISP
	LOGICAL  ::               STACKOPN,ISDIGI,CALLERRT
d143 2
a144 1
                CALL OPENINLN(LUN,INLNED,.TRUE.,0,0,.FALSE.,IRTFLGT)
d179 6
a184 3
             NWORDS = (LABREC + INDXREC +NIMAGE  * NRECS) * (LENBYT / 4) 
  
             CALL OPENINLN(LUN,INLNED,.TRUE.,NSAM,NWORDS,.TRUE.,IRTFLGT)
d212 2
a213 1
             CALL OPENINLN(LUN,INLNED,.FALSE.,NSAM,0,.TRUE.,IRTFLGT)
d314 1
a314 1
           CALL OPENINLN(LUN,INLNED,.FALSE.,NSAM,0,.TRUE.,IRTFLGT)
@


1.57
log
@writes into opened stack instad of overwrites stack
@
text
@a12 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d14 5
a18 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d20 1
a20 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d25 1
a25 1
C=* This program is distributed in the hope that it will be useful,    *
d27 1
a27 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a28 1
C=*                                                                    *
d30 1
a30 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.56
log
@added error msg if no image found
@
text
@d134 1
a134 1
          IF (.NOT. STACKOPN .OR. IMGNUM .EQ. 0) THEN
d169 1
a169 1
             CALL LUNSETSTKALL(LUN,ISTACK,IRTFLGT)
d216 1
a216 1
          CALL LUNGETSTK(LUN,ISTACK,MAXIM,IRTFLG)
d219 1
a219 1
          CALL LUNSETSTKALL(LUN,ISTACK,IRTFLGT)
d248 7
d257 1
a257 1
             CALL LUNSETMAXIM(LUN,IMGNUM,IRTFLGT)
@


1.55
log
@GPL License fixed
@
text
@d318 6
a323 1
              IF (IRTFLGT .NE. 0) RETURN
@


1.54
log
@HRI GPL License used
@
text
@a12 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d16 1
a16 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a35 6

C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.53
log
@itype not set for old files
@
text
@d14 24
@


1.52
log
@lunt paramater
@
text
@d323 2
@


1.51
log
@opfilec
@
text
@d54 1
a54 1
	SUBROUTINE OPENINSTK(FILNAM,LUN,NSAM,NROW,NSLICE,
@


1.50
log
@*** empty log message ***
@
text
@d9 2
a10 1
C                  INDEXED STACKS           JAN. 03 --  ArDean Leith
d21 2
a22 1
C    OPENINSTK(FILNAM,LUN,NSAM,NROW,NSLICE,NSTACK,ITYPE,DISP,IRTFLG)
d29 1
d147 2
a148 1
             CALL LUNSETHDR(LUN,NSAM,NROW,NSLICE,ITYPE,ISTACK,IRTFLGT)
d255 1
a255 1
          CALL LUNSETHDR(LUN,NSAM,NROW,NSLICE,ITYPE,ISTACK,IRTFLGT)
@


1.49
log
@indexed stacks
@
text
@d197 1
a197 1
C         COPY ISTACK INTO STATIC PART OF HEADER OBJECT 
d199 1
@


1.48
log
@*** empty log message ***
@
text
@d9 2
d12 6
a17 6
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
d20 1
a20 2
C    OPENINSTK(FILNAM,LUN,NSAM,NROW,NSLICE,NIMAGE,
C              NSTACK,ITYPE,DISP,IRTFLG)
d27 16
a42 13
C        FILNAM     CHARACTER ARRAY, CONTAINING FILE NAME       (SENT)
C        LUN        LOGICAL UNIT NUMBER FOR FILNAM I/O.         (SENT)
C        NSAM,NROW  DIMENSIONS OF FILE                     (SENT/RET.)
C        NSLICE     NUMBER OF PLANES                       (SENT/RET.)
C        NIMAGE     NUMBER OF IMAGES ALLOWED IN NEW STACK      (SENT )
C        NSTACK     STACK INDICATOR                             (RET.)
C                   -2 IS NOT STACK
C                   -1 STACKED IMAGE
C                    0 BARE STACK, CONTAINS NO IMAGE(S)
C                   >0 BARE STACK, VALUE IS MAX. IMAGE
C        ITYPE      IFORM                                  (SENT/RET.)                    
C        DISP       FILE DISPOSITION, SEE OPFIL FOR VALUES      (SENT)
C        IRTFLG     ERROR RETURN FLAG.
d46 1
d51 1
a51 1
	SUBROUTINE OPENINSTK(FILNAM,LUN,NSAM,NROW,NSLICE,NIMAGE,
d60 2
a61 1
        COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100)
d63 2
a64 4
        CHARACTER *(*)   FILNAM,DISP
        CHARACTER * 1    NULL
        CHARACTER * 2    TYPE
	LOGICAL          STACKOPN,ISDIGI,CALLERRT
d66 2
a67 1
        NULL = CHAR(0)
d69 1
a69 2
C       SET ERROR RETURN
        IRTFLG = 1
d72 5
a76 4
        ILOC = INDEX(FILNAM,'@@')
        IEND = ILOC + 1
        IF (ISDIGI(FILNAM(ILOC + 2:ILOC+2))) IEND = IEND + 1
        IF (ILOC .LE. 2 .OR. FILNAM(1:1) .NE. '_') THEN
d86 1
a86 1
        IF (ISDIGI(FILNAM(ILOC + 1:ILOC + 1))) THEN
d88 2
a89 1
           CALL GETFILENUM(FILNAM(ILOC:),IMGNUM,NDIGITS,.TRUE.,IRTFLGT)
d95 1
a107 2
C       SHOULD NOT STOP IF DISP == 'Z' AND REDHED FAILS
        CALLERRT =  (DISP(1:1) .NE. 'Z') 
a115 10
             IF (NIMAGE .LE. 0) THEN
                IF (NSLICE .GT. 1) THEN
                   CALL RDPRI1S(NIMAGE,NOT_USED,
     &                    'NUMBER OF VOLUMES ALLOWED IN STACK',IRTFLGT)
                ELSE
                   CALL RDPRI1S(NIMAGE,NOT_USED,
     &                    'NUMBER OF IMAGES ALLOWED IN STACK',IRTFLGT)
                ENDIF
                IF (IRTFLGT .NE. 0) RETURN
             ENDIF
a116 10
C            SET STACKED IMAGE INDICATOR (ISTACK = 2) 
             ISTACK = 2
             CALL LUNSETHDR(LUN,NSAM,NROW,NSLICE,ITYPE,ISTACK,IRTFLGT)
             IF (IRTFLGT .NE. 0) RETURN

C            SET IMAGE USE IMAGE INDICATOR FOR NEW STACK OVERALL HEADER
             INUSE  = -1
             CALL LUNSETINUSE(LUN,INUSE,IRTFLGT)
             IF (IRTFLGT .NE. 0) RETURN

d126 25
d152 2
a153 1
             CALL LUNGETLAB(LUN,LABREC,NRECS,LABBYT,LENBYT,IRTFLGT)
d157 1
a157 1
             NWORDS = (LABREC + NIMAGE  * NRECS) * (LENBYT / 4) 
d163 1
a163 1
             CALL LUNWRTHED(LUN,0,IRTFLGT)
d169 5
d177 1
d183 1
a183 1
          ELSE
d192 1
a192 1
          CALL LUNREDHED(LUN,NSAM,.TRUE.,IRTFLGT)
d195 4
a198 4
          CALL LUNGETSIZE(LUN,NSAMF,NROWF,NSLICEF,ISTACKF,IRTFLGT)
          CALL LUNGETTYPE(LUN,ITYPEF,ISTACKF,IRTFLGT)
          CALL LUNGETLAB(LUN,LABRECF,NRECF,NDUM,NDUM,IRTFLGT)
          CALL LUNGETSTK(LUN,ISTACKF,INUSE,MAXIM,IRTFLGT)
d200 7
a206 1
          IF (ISTACKF .EQ. 0) THEN
d227 1
a227 1
C            UPDATE OVERALL HEADER WITH MAXIMUM IMAGE NUMBER IN USE
d229 6
a234 1
             CALL LUNWRTHED(LUN,0,IRTFLGT)
d238 4
a241 4
C         INITIALIZE HEADER FOR NEW STACKED IMAGE (ISTACK = 2)
C         KEEPS ISBARE SETTING
          CALL LUNSETHDR(LUN,NSAM,NROW,NSLICE,ITYPE,2,IRTFLGT)
          IF (IRTFLGT .NE. 0) RETURN
d243 8
a250 2
C         SET INUSE FLAG FOR STACKED IMAGE HEADER
          CALL LUNSETINUSE(LUN,1,IRTFLGT)
d253 1
a253 2
C         COPY MAXIM FROM OVERALL HEADER
          CALL LUNSETMAXIM(LUN,MAXIM,IRTFLGT)
d255 2
a256 2
C         PLACE THIS IMAGE HEADER INTO STACK LOCATION
          CALL LUNWRTHED(LUN,IMGNUM,IRTFLGT)
d259 3
d283 2
a284 2
C          GET OVERALL HEADER (NEEDED BY LUNIMGREDHED)
           CALL LUNREDHED(LUN,NSAM,CALLERRT,IRTFLGT)
d287 5
a291 2
C          RECOVER MAXIM FROM OVERALL HEADER 
           CALL LUNGETMAXIM(LUN,MAXIM,IRTFLGT)
d294 2
a295 2
C             GET SPECIFIED IMAGE HEADER (MAY BE OVERALL HEADER!)
              CALL LUNIMGREDHED(LUN,NSAM,CALLERRT,IMGNUM,IRTFLGT)
d299 2
a300 2
C          COPY MAXIM FROM OVERALL HEADER INTO THIS IMAGE HEADER
           CALL LUNSETMAXIM(LUN,MAXIM,IRTFLGT)
a301 6
C          RECOVER IMAGE PARAMETERS FROM IMAGE HEADER
           CALL LUNGETSIZE(LUN,NSAM,NROW,NSLICE,ISTACK,IRTFLGT)

C          SEE IF THIS IMAGE IS USED IN THE STACK
           CALL LUNGETSTK(LUN,ISTACK,INUSE,MAXIM,IRTFLGT)

d305 1
a305 8

           ELSEIF (INUSE .EQ. 0) THEN
C             NO EXISTING IMAGE WITHIN STACK, (THIS IMAGE UNUSED)
              IF (CALLERRT) THEN
                 CALL ERRT(101,'THIS IMAGE NOT USED IN STACK',NE)
              ENDIF
              RETURN
           ENDIF 
d307 2
a308 2
C          SET IMGNUM LOCATION IN HEADER OBJECT (IN CASE CP USED!)
           CALL LUNSETIMGNUM(LUN,IMGNUM,IRTFLGT)
d310 8
d327 1
a327 1
        CALL LUNSETOFFSET(LUN,IRTFLGT)
@


1.47
log
@inline vol. stacks
@
text
@d8 1
a8 1
C                  INLINE VOLUME STACKS     AUB 02 --  ArDean Leith                         
@


1.46
log
@_34@@
@
text
@d8 1
a8 1
C                                
d112 5
a116 1
                CALL RDPRI1S(NIMAGE,NOT_USED,
d118 1
@


1.45
log
@getfilenum parameter added
@
text
@d69 2
d78 1
a78 1
        CALL INLNBUF(FILNAM(1:ILOC-1),NLET,INLNED,IRTFLGT)
@


1.44
log
@nloop,iloop_removed
@
text
@d81 1
a81 1
           CALL GETFILENUM(FILNAM(ILOC:),IMGNUM,.TRUE.,IRTFLGT)
@


1.43
log
@rdpri1s
@
text
@d110 1
a110 1
                CALL RDPRI1S(NIMAGE,NLOOP,ILOOP,
@


1.42
log
@added lunarb to common /lunara/
@
text
@d110 1
a110 1
                CALL RDPRIS(NIMAGE,IDUM,NLOOP,ILOOP,
@


1.41
log
@f90 removed
@
text
@a48 1

d55 1
a55 1
        COMMON /LUNARA/  LUNARA(100),LUNSTK(100)
@


1.40
log
@a
@
text
@a49 2
#ifdef SP_F90
C     ----------- F90 SPECIFIC CODE FOLLOWS ------------------
a51 16

C     ----------- F90 SPECIFIC CODE ENDS ------------------
#else
C     ----------- F77 SPECIFIC CODE FOLLOWS ------------------
C       DO NOT CHANGE NUMINLN WITHOUT SEARCH FOR OTHER OCCURANCES!
        PARAMETER        (NUMINLN = 9)
#if defined(SP_SUN4) || defined(SP_NT)
        INTEGER * 4     LOCBUF
#else
        INTEGER * 8     LOCBUF
#endif
        COMMON /LUNARC/  LOCBUF(NUMINLN), NWORDBUF(NUMINLN), 
     &                   NSAMBUF(NUMINLN),IRECBUF(NUMINLN),
     &                   LABRECBUF(NUMINLN)
C     ----------- F77 SPECIFIC CODE ENDS ------------------
#endif
@


1.39
log
@maxim now retrieved into current img. object
@
text
@d49 1
a49 1
CNO_SAVE
@


1.38
log
@USE INLN_INFO ALTERED
@
text
@d219 1
a219 1
            IF (IRTFLGT .NE. 0) RETURN
d231 3
d263 3
d272 3
d294 1
a294 1
           CALL LUNSETIMGNUM(LUN,IMGNUM,IRTFLG)
@


1.37
log
@had to set imgnum in old files in case copy used
@
text
@d53 2
a54 1
        USE INLN_INFO
@


1.36
log
@badd blank in irtflg
@
text
@d281 4
a284 1
           ENDIF
@


1.35
log
@imgredhed used
@
text
@d95 1
a95 1
        IF (IRTFLG T.NE. 0)  RETURN
@


1.34
log
@lunsethdr used
@
text
@d255 2
a256 2
C          GET SPECIFIED IMAGE HEADER (MAY BE OVERALL HEADER!)
           CALL LUNIMGREDHED(LUN,NSAM,CALLERRT,IMGNUM,IRTFLGT)
d258 6
d265 1
a265 1
C          RECOVER IMAGE PARAMETERS FROM SPECIFIC IMAGE HEADER
d272 1
a272 1
C             FOR OVERALL STACK RETURN NSTACK = MAX IMAGE (BUF(26)
a273 1
           ENDIF
d275 2
a276 3
C          SEE IF THIS IMAGE IS USED IN THE STACK
           IF (IMGNUM .GT. 0 .AND. INUSE .EQ. 0) THEN
C             NO EXISTING IMAGE WITHIN STACK
@


1.33
log
@changed irtflg return value
@
text
@d4 1
a4 1
C OPENINSTK.F   -- NEW NOVEMBER 1996  AUTHOR: ARDEAN LEITH
d6 3
a8 1
C                                          
d18 2
a19 2
C    OPENINSTK(BUF,FILNAM,LUN,NSAM,NROW,NSLICE,NIMAGE,
C              ITYPE,DISP,IRTFLG)
d21 3
a23 1
C    PURPOSE:       TO OPEN A NEW OR EXISTING INLINE STACK.
a25 1
C        BUF        WORKING BUFFER FOR READ/WRITE               (SENT)
d31 5
a41 5
C  COMMON VARIABLES:
C        NSTACK    STACK INDICATOR                              (RET.)
C                  -2 IS NOT STACK
C                  -1 STACKED IMAGE
C                  >=0 IS WHOLE STACK AND VALUE IS MAX. NO. IMAGES 
d46 2
a47 2
	SUBROUTINE OPENINSTK(BUF,FILNAM,LUN,NSAM,NROW,NSLICE,NIMAGE,
     &                       ITYPE,DISP,IRTFLG)
a72 2
        COMMON /STACKCOM/NSTACK

a74 1
        DIMENSION        BUF(*)
d76 1
a76 2
        CHARACTER * 81   FILDUM
        CHARACTER * 1    NULL,DSP
d78 1
a78 3
	LOGICAL          STACKOPN,ISDIGI

        DATA NBUFSIZ/17000/
a84 3
C       MAKE SURE THE STACK OFFSET IS ALWAYS ZEROED
        LUNSTK(LUN) = 0

d94 2
a95 2
        CALL INLNBUF(FILNAM(1:ILOC-1),NLET,INLNED,IRTFLG)
        IF (IRTFLG .NE. 0)  RETURN
d99 3
a101 8
C           READ(FILNAM(ILOC+1:),*,IOSTAT=IER) IMGNUM -adjusted for osf--liy
           CALL FILCAD(FILNAM(ILOC:),FILDUM,IMGNUM,IER)

           IF (IER .NE. 0) THEN
C             ERROR CONVERTING STACK NUMBER
              CALL ERRT(101,'UNABLE TO INTERPRET IMAGE NUMBER',NE)
              RETURN
           ELSEIF (IMGNUM .LE. 0) THEN
d108 1
a109 1
C          SET DEFAULT IMGNUM FOR BARESTACK 
d118 1
a118 2
        NOSTOP = 0
        IF (DISP(1:1) .EQ. 'Z') NOSTOP = 1
a124 6
C         CHECK TO SEE IF NECESSARY INPUT INFO IS AVAILABLE & CORRECT
          CALL OPENCHK(NSAM,NROW,NSLICE,ITYPE,NBUFSIZ,IRTFLG)
          IF (IRTFLG .NE. 0) RETURN

          DSP    = 'N'

d129 2
a130 2
     &                    'NUMBER OF IMAGES ALLOWED IN STACK',IRTFLG)
                IF (IRTFLG .NE. 0) RETURN
d133 4
a136 30
C            ADJUST NUMBER OF HEADER RECORDS TO HAVE >=256*4 BYTES IN HEADER
             LENBYT = NSAM * 4
             LABREC = 1024 / LENBYT
             IF (MOD(1024,LENBYT) .NE. 0) LABREC = LABREC + 1
             LABBYT = LABREC * LENBYT

C            CREATE OVERALL STACK HEADER
             BUF(1) = NSLICE
             BUF(2) = NROW
             IREC   = NROW * NSLICE + LABREC
             BUF(3) = IREC
C            BUF(4) UNUSED (USED TO CONTAIN NHISTREC)
             BUF(4) = 0
C            BUF(5)IS FOR IFORM (ITYPE)
             BUF(5) = ITYPE
             IMAMI  = 0
             BUF(6) = IMAMI
          
             DO K= 7,212
C               ZERO REMAINING HEADER VARIABLES
                BUF(K)=0
             ENDDO

             BUF(12) = NSAM
             BUF(13) = LABREC
             BUF(22) = LABBYT 
             BUF(23) = LENBYT

C            SET STACKED IMAGE INDICATOR
             BUF(24) = 2        
d139 3
a141 2
             IMUSED  = -1
             BUF(25) = IMUSED
a142 3
C            SET CURRENT DATE AND TIME & TITLE
             CALL DATTIMTIT(BUF,.FALSE.,NEWDAT,LENTIT,IRTFLG)
 
d149 1
a149 1
                CALL OPENINLN(LUN,INLNED,.TRUE.,0,0,.FALSE.,IRTFLG)
d152 4
d157 5
a161 7
             NWORDS = (LABREC + NIMAGE  * IREC) * (LENBYT / 4)   
             CALL OPENINLN(LUN,INLNED,.TRUE.,NSAM,NWORDS,.TRUE.,IRTFLG)
             IF (IRTFLG .NE. 0)  RETURN

C            SET FINAL HEADER OFFSET VALUE FOR USE BY REDLIN/WRTLIN
             LUNARA(LUN) = LABREC
        
d163 2
a164 1
             CALL WRTHED(LUN,BUF,NSAM,IRTFLG)
d172 3
a174 1
               GOTO 7777
d181 2
a182 2
             CALL OPENINLN(LUN,INLNED,.FALSE.,NSAM,0,.TRUE.,IRTFLG)
             IF (IRTFLG .NE. 0)  RETURN
d186 2
a187 2
          CALL REDHED(LUN,BUF,NBUFSIZ,NSAM,0,IRTFLG)
          IF (IRTFLG .NE. 0) RETURN
d189 4
a192 6
          NSTACKF = BUF(24)         
          ITYPEF  = BUF(5)
          NSAMF   = BUF(12)
          NROWF   = BUF(2)
          NSLICEF = BUF(1)
          LABRECF = BUF(13)
d194 1
a194 1
          IF (NSTACKF .EQ. 0) THEN
d214 1
a214 1
          IF (IMGNUM .GT. BUF(26)) THEN
d216 3
a218 2
             BUF(26) = IMGNUM
             CALL WRTHED(LUN,BUF,NSAM,IRTFLG)
d221 8
a228 2
C         GET IRECF FROM STACK FILE HEADER
          IRECF   = BUF(3)
a229 20
C         SET IMAGE SPECIFIC LOCATIONS IN IMAGE HEADER
          IMAMI   = 0
          BUF(6)  = IMAMI
          IANGLE  = 0
          BUF(14) = IANGLE
          KANGLE  = 0
          BUF(30) = KANGLE
          IMUSED  = 1
          BUF(25) = IMUSED         

C         PUT CURRENT DATE AND TIME INTO BUF
          CALL DATTIMTIT(BUF,.FALSE.,.TRUE.,LENTIT,IRTFLG)

C         SET FINAL HEADER OFFSET VALUE FOR USE BY REDLIN/WRTLIN
          LUNARA(LUN) = LABRECF

C         ALL IMAGES HAVE SAME IREC AS STACK HEADER!
C         SET OFFSET INTO LUNSTK
          LUNSTK(LUN) = (IMGNUM - 1) * IRECF + LABRECF

d231 2
a232 1
          CALL WRTHED(LUN,BUF,NSAM,IRTFLG)
d241 1
a241 3
C          EXISTING BARE STACK

           DSP = 'O'
d246 2
a247 5

C	      FOR DISP=Z, DO NOT STOP THE BATCH JOB BY CALLING ERRT
              IF (DISP(1:1) .EQ. 'Z' .AND. 
     &           (IPROC .NE. 0 .OR. COPT  .EQ. 'B')) RETURN
              CALL ERRT(100,'OPENINSTK',NE)
d252 2
a253 2
           CALL OPENINLN(LUN,INLNED,.FALSE.,NSAM,0,.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0)  RETURN
d255 6
a260 11
C          ALL IMAGES HAVE SAME IREC AS HEADER
           IREC        = IRECBUF(INLNED)
           LABREC      = LABRECBUF(INLNED)
           LUNARA(LUN) = LABREC

C          SET OFFSET INTO LUNSTK TO POINT TO CURRENT IMAGE
	   IF (IMGNUM .EQ. 0) THEN
	      LUNSTK(LUN) = 0
           ELSE
              LUNSTK(LUN) = (IMGNUM - 1) * IREC + LABREC
	   ENDIF
d262 2
a263 3
C          GET SPECIFIED IMAGE HEADER (MAY BE OVERALL HEADER!)
           CALL REDHED(LUN,BUF,NBUFSIZ,NSAM,NOSTOP,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
d267 1
a267 1
              NSTACK = BUF(26)
a269 4
C          RECOVER IMAGE PARAMETERS FROM SPECIFIC IMAGE HEADER
           CALL OPENGETHDR(BUF,NDUM,NROW,NSLICE,NDUM,IFORM,
     &                     NDUM,NDUM,LABBYT,IDUM,IMUSED,LENTIT)

d271 1
a271 1
           IF (IMGNUM .GT. 0 .AND. IMUSED .EQ. 0) THEN
d273 1
a273 1
              IF (DISP(1:1) .NE. 'Z') THEN
d287 4
d292 4
a295 2
7777    CALL OPENINFO(FILNAM,NLET,NSAM,NROW,NSLICE,IMGNUM,NSTACK,
     &                LENTIT,DSP,LABBYT,IRTFLG)
a301 44

C ----------------------------- OPENCHK -----------------------------

      SUBROUTINE OPENCHK(NSAM,NROW,NSLICE,ITYPE,NSAMAX,IRTFLG)

      INCLUDE 'CMBLOCK.INC'
	
C     CHECK THAT INPUT PARAMETERS ARE OK

      IRTFLG = 0

      IF (NSAM .LE. 0 .OR. NROW .LE. 0) THEN
C        FOR NEW FILES, NON-ZERO NSAM, NROW NEED TO BE SUPPLIED
         CALL ERRT(101,'NSAM OR NROW NOT GIVEN',NE)
         RETURN

      ELSEIF (NSAM .GT. NSAMAX) THEN
C        EXCESSIVE ROW LENGTH 
         WRITE(NOUT,*) '*** ROWLENGTH MUST BE <=:',NSAMAX
         CALL ERRT(100,'OPENCHK',NE)
         RETURN

      ELSEIF (NSLICE .EQ. 0) THEN
C        NEW FILES NEED A NON ZERO SLICE NUMBER
         NSLICE = 1

      ELSEIF (NSLICE .LT. 0) THEN
C        WANT TO CREATE OBSOLETE SHORT HEADER FILE
         WRITE(NOUT,*) 
     &            'WARNING:  SHORT HEADER FILES NO LONGER SUPPORTED.'
         NSLICE = -NSLICE
      ENDIF

      IF (ITYPE .EQ. -1 .OR. ITYPE .EQ. -3 .OR. ITYPE .EQ. -7) THEN
C        WANT TO CREATE OBSOLETE FOURIER FILE
         CALL ERRT(101,
     &         'CAN NOT CREATE OBSOLETE FOURIER FORMAT FILE',NE)
         RETURN
      ENDIF

      IRTFLG = 0
      RETURN

      END
@


1.32
log
@added paremeter to opengethdr call
@
text
@d5 2
a6 1
C                                           
d17 1
a17 1
C              ITYPE,DISP,NF)
d29 4
a32 4
C        DISP       FILE DISPOSITION, SEE OPENFB FOR VALUES    (SENT)
C        NF         ERROR RETURN FLAG.
C                   NF = 2    NORMAL RETURN
C                   NF = 1    ERROR RETURN
a42 12
#ifdef SP_VMS
      SUBROUTINE OPENINSTK(BUF,FILNAM,LUN,NSAM,NROW,NSLICE,NIMAGE,
     &                     ITYPE,DISP,NF)
      INCLUDE 'CMBLOCK.INC'
      WRITE(NOUT,*) '*** INLINE STACKS ONLY AVAILABLE ON UNIX SPIDER.'
      CALL ERRT(100,'OPENINSTK',NE)  
      NF = 1
      RETURN
      END
#else


d44 1
a44 1
     &                       ITYPE,DISP,NF)
d86 1
a86 1
        NF     = 1
d362 1
a362 1
        NF = 2
a393 4
#ifdef SP_VMS
         CALL ERRT(100,'SHORT HEADER FILES NO LONGER SUPPORTED',NE)
         RETURN
#else
a396 1
#endif
a409 2

#endif
@


1.31
log
@needed trap for stackopen
@
text
@d349 1
a349 1
     &                     NDUM,LABBYT,IDUM,IMUSED,LENTIT)
@


1.30
log
@cosmetic
@
text
@d200 1
a200 1
             IF (IMGNUM .EQ. 0) THEN
@


1.29
log
@bug
@
text
@a59 1

a61 1

a62 1

a74 1

@


1.28
log
@ifdef SP_SUN4 added
@
text
@d71 1
a71 1
        INTEGER * 4     LOCLUN
d73 1
a73 1
        INTEGER * 8     LOCLUN
@


1.27
log
@f90 changes
@
text
@d70 2
a71 2
#ifdef SP_NT
        INTEGER LOCBUF
d73 1
a73 1
        INTEGER * 8      LOCBUF
@


1.26
log
@corrected saving errors
@
text
@d58 2
d61 2
a62 2
        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'LABLOCK.INC'
d64 1
a64 1
        COMMON /STACKCOM/NSTACK
d66 2
a67 2
        COMMON /LUNARA/  LUNARA(100),LUNSTK(100)

d78 10
@


1.25
log
@change READ for osf
@
text
@d385 2
a386 1
      ELSEI                                   EXCESSIVE ROW LENGTH 
d396 3
a398 1
C        WANT TO CREATE OBSOLETE SHORT HEADER                                  ERRT(100,'SHORT HEADER FILES NO LONGER SUPPORTED',NE)
d401 2
a402 1
         WRITE(NOUT                                  SHORT HEADER FILES NO LONGER SUPPORTED.'
d410 1
a410 1
     &         'CAN NOT CREAT                                NE)
@


1.24
log
@*** empty log message ***
@
text
@d79 1
d108 2
a109 1
           READ(FILNAM(ILOC+1:),*,IOSTAT=IER) IMGNUM
d385 1
a385 2
      ELSEIF (NSAM .GT. NSAMAX) THEN
C        EXCESSIVE ROW LENGTH 
d395 1
a395 3
C        WANT TO CREATE OBSOLETE SHORT HEADER FILE
#ifdef SP_VMS
         CALL ERRT(100,'SHORT HEADER FILES NO LONGER SUPPORTED',NE)
d398 1
a398 2
         WRITE(NOUT,*) 
     &            'WARNING:  SHORT HEADER FILES NO LONGER SUPPORTED.'
d406 1
a406 1
     &         'CAN NOT CREATE OBSOLETE FOURIER FORMAT FILE',NE)
@


1.23
log
@used opengethdr
@
text
@d68 3
d72 1
@


1.22
log
@used opengethdr.f
@
text
@d334 2
a335 2
           CALL OPENGETHDR(BUF,NDUM,NROW,NSLICE,NDUM,
     &                      IFORM,LENBYT,IMUSED,LENTIT)
d338 1
a338 1
           IF (IMUSED .EQ. 0) THEN
d356 1
a356 1
     &                LENTIT,DSP,LENBYT,IRTFLG)
@


1.21
log
@for nstack retrieval of max img. number
@
text
@a72 3
        CHARACTER *81    FILSOPN(100)
        COMMON /LUNFILES/FILSOPN

d140 1
a140 1
          IF (.NOT. STACKOPN) THEN
d185 9
a251 12

	  ELSEIF (IMGNUM .EQ. 0) THEN
C	     ACCESS THE WHOLE STACK, NOT A PARTICULAR IMAGE BUT SINCE
C            DISP IS NEW AND STACK IS ALREADY OPEN THIS IS REALLY
C            ASKING TO CREATE A NEW STACK IN AN EXISTING STACK THAT
C            MAY BE OF DIFFERENT SIZE!!
 
             WRITE(NOUT,97) 
97           FORMAT(' *** MUST DELETE EXISTING INLINE STACK, ',
     &              'BEFORE CREATING NEW ONE')
             CALL ERRT(100,'OPENINSTK',NE)
             RETURN
d333 4
a337 1
           IMUSED   = BUF(25)
a345 36
C          RECOVER IMAGE PARAMETERS FROM SPECIFIC IMAGE HEADER
           NROW     = BUF(2)
           NSLICE   = ABS(BUF(1)) + 0.5
C          BUF(4) USED TO CONTAIN NHISTREC (UNUSED NOW)
           NHISTREC = 0
           ITYPE    = BUF(5)+0.5
           IMAMI    = BUF(6)+0.5
           FMAX     = BUF(7)
           FMIN     = BUF(8)
           AV       = BUF(9)
           SIG      = BUF(10)
           IHIST    = 0
           IANGLE   = BUF(14)
           PHI      = BUF(15)
           THETA    = BUF(16)
           PSI      = BUF(17)
           XOFF     = BUF(18)
           YOFF     = BUF(19)
           ZOFF     = BUF(20)
           SCALE    = BUF(21)
           LENBYT   = BUF(23)
           KANGLE   = BUF(30)
           PHI2     = BUF(31)
           THETA2   = BUF(32)
           PSI2     = BUF(33)
           PHI1     = BUF(34)
           THETA1   = BUF(35)
           PSI1     = BUF(36)

           DO I = 1,64
             HDR_VALS(I) = BUF(36+I)
           ENDDO

C          GET CURRENT DATE AND TIME FROM BUF
           CALL DATTIMTIT(BUF,.TRUE.,.FALSE.,LENTIT,IRTFLG)

d364 1
a364 1
C --------------------------------------------------------------------
a413 1

@


1.20
log
@comments
comments
@
text
@d18 1
a18 1
C    PURPOSE:       TO OPEN A NEW OR  EXISTING INLINE STACK.
a26 1
C                    (-1 IS OVERALL STACK) 
d28 4
a31 2
C        DISP(1:1)  CHARACTER  CONTAINING ONE OF THE FOLLOWING  (SENT)
C                   DISPOSITION SPECIFICATIONS:
d33 5
a37 14
C                   'O'   -     THE FILE IS ASSUMED TO EXIST; NSAM AND
C                               NROW AND HEADER INFO (IN COMMON) ARE 
C                               RETURNED TO THE CALLING PROGRAM. 
C                   'U'    - IT IS NOT KNOWN IF THE FILE EXISTS.  
C                                 IF IT DOES NOT EXIST, NON-ZERO NSAM &
C                               NROW VALUES HAVE TO BE AVAILABLE; THE
C                               FILE IS CREATED WITH THESE DIMENSIONS.
C                                 IF THE FILE ALREADY EXISTS, IT WILL BE 
C                               REPLACED.
C                   'Z'    -    THE FILE IS ASSUMED TO EXIST; NSAM AND
C                               NROW AND HEADER INFO (IN COMMON) ARE 
C                               RETURNED TO THE CALLING PROGRAM.
C                               IF FILE DOES NOT EXIST THEN BATCH DOES
C                               NOT STOP!!! (ONLY DIFFERENCE FROM 'O'). 
a38 12
C        DISP(2:2)  CHARACTER  POSSIBLY CONTAINING THE FOLLOWING VALUE:
C
C                   'S'   -     SAVE FILE NAME IN LIST OF OPENED FILES
C                               ON CURRENT LUN. 
C
C        NF                     ERROR RETURN FLAG.
C                               NF = 2    NORMAL RETURN
C                               NF = 1    ERROR RETURN
C
C  VARIABLES:
C        NSTACK    STACK INDICATOR (-1 IS WHOLE STACK, 0 IS NOT STACK)
C
a77 1
        CHARACTER * 81   FILN
d80 1
a80 1
	LOGICAL          STACKOPN,MAKEONLY,ISDIGI
a87 1
        NSTACK = 0
a91 3
C	MAKE SURE USER WANTS TO USE AN IN-LINE FILE.
        IF (FILNAM(1:1) .NE. '_') RETURN

d94 1
a94 1
        IF (ILOC .LE. 2) THEN
a99 3
C       GET FILENAME WITHOUT @@IMAGENUM
        FILN = FILNAM(1:ILOC-1) // CHAR(0) 

d101 1
a101 1
        CALL INLNBUF(FILN,NLET,INLNED,IRTFLG)
a103 3
C       SEE IF JUST WANT TO MAKE A STACK
        MAKEONLY = .FALSE.

d116 2
a118 1
C          SET IMGNUM FOR BARESTACK
d120 3
a122 2
           MAKEONLY = .TRUE.
           NSTACK   = -1
d180 1
a180 2
             NSTACK  = 2
             BUF(24) = NSTACK        
d194 1
a194 1
C            SET FINAL OFFSET VALUE FOR USE BY REDLIN/WRTLIN
d203 1
a203 1
             IF (MAKEONLY) THEN
d206 1
a206 3
	        LUNSTK(LUN) = 0
                NSTACK      = -1
                GOTO 7777
d245 13
d260 4
a263 5
	  IF (IMGNUM .EQ. 0) THEN
C	     ACCESS THE WHOLE STACK NOT A PARTICULAR IMAGE
	     LUNSTK(LUN) = 0
             NSTACK      = -1
             GOTO 7777
a265 1

d285 1
a285 2
C         THIS ASSUMES ALL IMAGES HAVE SAME IREC AS STACK HEADER!

a292 1

d298 2
a299 1
C          WANT AN EXISTING IMAGE FROM EXISTING STACK
d318 1
a318 1
C          ASSUME ALL IMAGES HAVE SAME IREC AS HEADER
d330 1
a330 1
C          GET SPECIFIED IMAGE HEADER (MAY BE OVERALL HEADER)
d334 5
d352 1
a352 1
C          BUF(4) USED TO CONTAIN NHISTREC
d369 1
d393 3
a395 64
7777    IF (LEN(DISP) .GT. 1 .AND. DISP(2:2) .EQ. 'S') THEN
            FILSOPN(LUN) = FILN(2:2) // NULL
        ELSE
            FILSOPN(LUN) = ' '
        ENDIF

    	IF (ITYPE .EQ. -2) THEN
            TYPE = 'P '
        ELSEIF (ITYPE .EQ. -9) THEN
            TYPE = 'FS'
        ELSEIF (ITYPE .EQ. -11) THEN
            TYPE = 'O2'
        ELSEIF (ITYPE .EQ. -12) THEN
            TYPE = 'E2'
        ELSEIF (ITYPE .EQ. -21) THEN
            TYPE = 'O3'
        ELSEIF (ITYPE .EQ. -22) THEN
            TYPE = 'E3'
	ELSEIF (ITYPE .EQ. 0)  THEN
            TYPE = 'D '
        ELSEIF (ITYPE .EQ. 1)  THEN
            TYPE = 'S2'
        ELSEIF (ITYPE .EQ. 3)  THEN
            TYPE = 'S3'
        ELSEIF (ITYPE .EQ. 3)  THEN
            TYPE = 'R3'
        ELSE
            TYPE = 'R '
        ENDIF

	IF (N_VERBOSE .EQ. 1 .AND. IFOUND .NE. -4) THEN
C         PRINT STACK OPENING INFORMATION
          IF (LENTIT .GT. 0 .AND. LENTIT + NLET .LT. 70) THEN
             WRITE(NOUT,901) CTIT(:LENTIT)
901          FORMAT('     / ',A)
          ELSEIF (LENTIT .GT. 0) THEN
             LENT = MIN(80,LENTIT)
             WRITE(NOUT,902) CTIT(1:LENT)
             IF (LENTIT .GT. 80) WRITE(NOUT,902) CTIT(81:LENTIT)
902          FORMAT(A)
          ENDIF

          IF (MAKEONLY) THEN
             WRITE(NOUT,2097) TYPE,NSAM,NROW,NSLICE,CDAT,CTIM,DSP
2097	     FORMAT(' (',A,')',3I5,' (@@',6X,')  CREATED ',A,' AT ',A,
     &               2X,A)
          ELSEIF (NSLICE .GT. 1) THEN
             WRITE(NOUT,2098) TYPE,NSAM,NROW,NSLICE,IMGNUM,CDAT,CTIM,DSP
2098	     FORMAT(' (',A,')',3I5,' (@@',I6,')  CREATED ',A,' AT ',A,
     &               2X,A)
          ELSE
             WRITE(NOUT,2099)TYPE,NSAM,NROW,IMGNUM,CDAT,CTIM,DSP
2099         FORMAT(' (',A,')',2I5,' (@@',I6,')  CREATED ',A,' AT ',A,
     &              2X,A)
          ENDIF
        ENDIF

        PARAM(2) = NSAM
	PARAM(3) = NROW
	PARAM(4) = FMAX
	PARAM(5) = FMIN
	PARAM(6) = AV
	PARAM(7) = SIG
	PARAM(8) = NSLICE
@


1.19
log
@nstack returned oK for bare stack, many logic improvements
@
text
@d26 3
a28 2
C        NIMAGE     NUMBER OF IMAGES IN STACK              (SENT/RET.)
C                    (-1 IS OVERALL STACK)                     
d55 3
@


1.18
log
@added NOSTOP parameter to redhed call
@
text
@d4 1
a4 1
C OPENINSTK.F   -- NEW NOVEMBER 1996  ARDEAN LEITH
d7 6
a12 7
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK        *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND     *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.  *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS *
C *    OR USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN        *
C *    APPROVAL OF THE CENTER FOR LABORATORIES AND RESEARCH            *
d21 8
a28 6
C        BUF        WORKING BUFFER FOR READ/WRITE
C        FILNAM     CHARACTER ARRAY, CONTAINING FILE NAME 
C        LUN        LOGICAL UNIT NUMBER TO BE ASSIGNED TO FILNAM.
C        NSAM,NROW  DIMENSIONS OF FILE - INPUT OR OUTPUT PARAMETERS
C                       OF OPEN, DEPENDING ON DISP.
C        DISP(1:1)  CHARACTER  CONTAINING ONE OF THE FOLLOWING 
a54 3
C        NSLICE                 NUMBER OF PLANES, EACH CONTAINING 
C                               NSAM * NROW ELEMENTS.
C
d78 3
a80 1
        COMMON /LUNARA/ LUNARA(100),LUNSTK(100)
d83 5
a87 5
        PARAMETER       (NUMINLN = 9)
        INTEGER * 8     LOCBUF
        COMMON /LUNARC/ LOCBUF(NUMINLN), NWORDBUF(NUMINLN), 
     &                  NSAMBUF(NUMINLN),IRECBUF(NUMINLN),
     &                  LABRECBUF(NUMINLN)
d89 1
a89 1
        CHARACTER *81   FILSOPN(100)
d92 6
a97 6
        DIMENSION      BUF(*)
        CHARACTER *(*) FILNAM,DISP
        CHARACTER * 81 FILN
        CHARACTER * 1  NULL,DSP
        CHARACTER * 2  TYPE
	LOGICAL        STACKOPN,MAKEONLY
a98 2
        LOGICAL        ISDIGI

d104 2
a105 1
        NF = 1
d110 1
a110 1
C	MAKE SURE USER WANTS TO USE THE IN-LINE STACK.
d113 1
a113 1
C       MAKE SURE USER WANTS TO USE A STACK      
d129 1
a129 3
        
        IMGNUM   = 0
        MAKEONLY = .TRUE.
d131 2
a132 4
        LENF = lnblnk(FILNAM)
        IF (FILNAM(LENF:LENF) .EQ. CHAR(0)) LENF = LENF - 1
        IF (LENF .GT. ILOC) THEN
C          FIND IMAGE NUMBER WITHIN STACK 
d134 14
a147 1
           IF (IER .EQ. 0) MAKEONLY = .FALSE.
d149 1
a149 1
 
d153 4
d159 1
a159 1
10	IF (DISP .EQ. 'U' .OR. DISP .EQ. 'N') THEN
a165 2
C         SET STACK INDICATOR
          NSTACK = 2
a176 2

C            STANDARD SPIDER FLOATING POINT FILES
d182 1
a182 3
             IREC = NROW * NSLICE + LABREC

C            CREATE STACK HEADER
d185 1
d189 1
a189 1
C            BUF(5)IS FOR IORM
d205 1
d210 1
a210 1
             BUF(25) = IMUSED         
d231 3
a242 1

d275 8
d299 3
a306 3
C         SET FINAL OFFSET VALUE FOR USE BY REDLIN/WRTLIN
          LUNARA(LUN) = LABRECF

d311 1
d314 3
a316 3
	ELSEIF (DISP .EQ. 'O' .OR. DISP .EQ. 'K' .OR.
     &          DISP .EQ. 'Z' .OR. 
     &          DISP .EQ. 'E' .OR. DISP .EQ. 'M') THEN
d319 2
d326 2
a327 2
              IF (DISP .EQ. 'Z' .AND. 
     $           (IPROC .NE. 0 .OR. COPT  .EQ. 'B')) RETURN
d336 1
a336 2
C          SET OFFSET INTO LUNSTK, ALL IMAGES SHOULD HAVE IREC 
C          SAME AS THE HEADER          
a338 1
           LUNSTK(LUN) = (IMGNUM - 1) * IREC + LABREC
d341 9
a349 2
C          GET SPECIFIED IMAGE HEADER FROM STACK LOCATION
           CALL REDHED(LUN,BUF,NBUFSIZ,NSAM,0,IRTFLG)
d352 3
a354 3
C          SEE IF THIS IMAGE IS IN THE STACK
           IMUSED = BUF(25)
           IF (IMUSED .LE. 0) THEN
d356 3
a358 1
              CALL ERRT(101,'THIS IMAGE NOT USED IN STACK',NE)
d362 1
a362 2
C          RECOVER IMAGE PARAMETERS

a395 2

           DSP = 'O'
@


1.17
log
@removed improper overall header locations, changed nstack
@
text
@d236 1
a236 1
          CALL REDHED(LUN,BUF,NBUFSIZ,NSAM,IRTFLG)
d323 1
a323 1
           CALL REDHED(LUN,BUF,NBUFSIZ,NSAM,IRTFLG)
@


1.16
log
@makeonly if imgnum fails
@
text
@d55 1
a55 4
C                               NSAM * NROW ELEMENTS. IF NSLICE IS <0 
C                               (ON VMS VERSION) A SHORT HEADER 
C                               FORMAT FILE WAS DESIRED (NO LONGER 
C                               SUPPORTED).
a56 1
C
d154 1
a154 1
C         FIND STACK TYPE OF INPUT
d156 1
a156 2
          IF (NSLICE .GT. 1) NSTACK = 3
          DSP = 'N'
d180 1
a180 1
C            BUF(4) USED TO CONTAIN NHISTREC
d182 1
d187 2
a188 2
             DO K= 6,212
C               ZERO UNUSED BUF VARIABLES
d200 2
a201 2
C            SET IMAGE USE IMAGE INDICATOR
             IMUSED  = 0
a203 23
C            ADDED JULY 88 al
             IF (IANGLE .NE. 0) THEN
                BUF(14) = IANGLE
                BUF(15) = PHI
                BUF(16) = THETA
                BUF(17) = PSI
             ENDIF

             IF (KANGLE .NE.0) THEN
                BUF(30) = KANGLE
                BUF(31) = PHI2
                BUF(32) = THETA2
                BUF(33) = PSI2
                BUF(34) = PHI1
                BUF(35) = THETA1
                BUF(36) = PSI1
             ENDIF

C            COPY MOST RECENT HDR_VALS INTO LOCATIONS 37..101
             DO I = 1,64
                BUF(36+I) = HDR_VALS(I)
             ENDDO

d246 1
a246 1
          IF (NSTACKF .LE. 0) THEN
a262 9

          ELSEIF (NSTACK .NE. NSTACKF) THEN
C            EXISTING STACK FILE FORMAT NOT SAME AS IMAGE FORMAT
             WRITE(NOUT,97) NSTACK,NSTACKF
97           FORMAT('NUMBER OF SLICES/IMAGE: ',I5,
     &         ' NOT COMPATIBLE WITH EXISTING STACK SLICES/IMAGE: ',I5)

             CALL ERRT(100,'OPENINSTK',NE)
             RETURN
@


1.15
log
@test for makeonly changed
@
text
@d134 3
a136 1
        MAKEONLY = .FALSE.
d143 1
a143 8

           IF (IER .NE. 0) THEN
              CALL ERRT(101,'UNABLE TO INTERPRET IMAGE NUMBER',NE)
              RETURN
           ENDIF
        ELSE
           IMGNUM = 0
           MAKEONLY =.TRUE.
@


1.14
log
@null init. * logical for isdigi for f90
@
text
@d133 8
a140 2
C       FIND IMAGE NUMBER WITHIN STACK 
        READ(FILNAM(ILOC+1:),*,IOSTAT=IER) IMGNUM
d142 7
a148 3
        IF (IER .NE. 0) THEN
           CALL ERRT(101,'UNABLE TO INTERPRET IMAGE NUMBER',NE)
           RETURN
a149 6

C       SEE IF JUST WANT TO MAKE A STACK
        MAKEONLY = .FALSE.
        IF ((LEN(FILNAM) .LE. ILOC) .OR. 
     &     (IMGNUM .EQ. 0 .AND. .NOT.
     &      ISDIGI(FILNAM(ILOC+1:ILOC+1)))) MAKEONLY =.TRUE.
@


1.13
log
@for f90
@
text
@d103 1
a103 1
        LOGICAL        FUNCTION ISDIGI
d105 3
a107 1
        DATA NULL /0/,NBUFSIZ/17000/
@


1.12
log
@added neederrt parameter to openinln call
@
text
@d103 2
d132 2
a133 2
        READ(FILNAM(ILOC+1:),8000,IOSTAT=IER) IMGNUM
8000    FORMAT(I)
@


1.11
log
@removed READONLY stuff
@
text
@d17 1
a17 1
C    &                       ITYPE,DISP,NF)
d233 1
a233 1
             CALL OPENINLN(LUN,INLNED,.TRUE.,NSAM,NWORDS,IRTFLG)
d254 1
a254 1
             CALL OPENINLN(LUN,INLNED,.FALSE.,NSAM,0,IRTFLG)
d345 1
a345 1
           CALL OPENINLN(LUN,INLNED,.FALSE.,NSAM,0,IRTFLG)
@


1.10
log
@altered disp=z handling
@
text
@d4 1
a4 1
C OPENINSTK.FOR  -- NEW NOVEMBER 1996  ARDEAN LEITH
a32 5
C                   'R'   -     THE FILE IS ASSUMED TO EXIST; NSAM AND
C                               NROW AND HEADER INFO (IN COMMON) ARE 
C                               RETURNED TO THE CALLING PROGRAM.
C                               FILE IS OPENED AS READONLY - MULTIREAD
C                               IS POSSIBLE. 
d69 1
d329 1
a329 1
     &          DISP .EQ. 'Z' .OR. DISP .EQ. 'R' .OR.
@


1.9
log
@added include CMBLOCK.INC to the 2 routine
@
text
@d44 6
d332 3
a334 2
     	ELSEIF (DISP(1:1) .EQ. 'O' .OR. DISP(1:1) .EQ. 'M' .OR. 
     &          DISP(1:1) .EQ. 'K' .OR. DISP(1:1) .EQ. 'R')THEN
d339 6
a344 1
              CALL ERRT(101,'INLINE STACK DOES NOT EXIST',NE)
d410 3
a412 2
           CALL ERRT(101,'PGM. ERROR: UNKNOWN DISP IN OPENINSTK',NE)
           RETURN
@


1.8
log
@needed lunara set whenever file opened
@
text
@d479 2
@


1.7
log
@cosmetic
@
text
@d234 1
a234 1
C            SET FINAL LUNARA OFFSET VALUE FOR USE BY REDLIN/WRTLIN
d317 3
d345 1
@


1.6
log
@no more image 0 in the stack
@
text
@d88 3
a90 1
     &                  NSAMBUF(NUMINLN),IRECBUF(NUMINLN)
d230 1
a230 2
             NWORDS = NIMAGE  * (IREC * LENBYT / 4) + 
     &                LABREC * LENBYT / 4  
a233 3
C            WRITE OVERALL HEADER RECORDS INTO INLINE STACK	    
             CALL WRTHED(LUN,BUF,NSAM,IRTFLG)

d237 5
a241 1
             IRECBUF(INLNED) = IREC  
d257 1
a257 1
C         RECOVER HEADER FROM INLINE STACK FILE
d266 1
d315 1
a315 1
          LUNSTK(LUN) = (IMGNUM - 1) * IRECF
d337 1
a337 1
C          SET OFFSET INTO LUNSTK,ALL IMAGES SHOULD HAVE IREC 
d340 2
a341 1
           LUNSTK(LUN) = (IMGNUM - 1) * IREC
@


1.5
log
@reeadonly disp needed.
@
text
@d228 1
a228 1
             NWORDS = NIMAGE * (IREC * LENBYT / 4) + 
d312 1
a312 1
          LUNSTK(LUN) = IMGNUM * IRECF
d337 1
a337 1
           LUNSTK(LUN) = IMGNUM * IREC
@


1.4
log
@bad nword calculation fixed
@
text
@d321 1
a321 1
     &          DISP(1:1) .EQ. 'K')THEN
@


1.3
log
@added makeonly stuff
@
text
@d228 2
a229 1
             NWORDS = NIMAGE * (IREC * LENBYT / 4)
@


1.2
log
@fixed
@
text
@d97 1
a97 1
	LOGICAL        STACKOPN
d133 6
d154 1
d240 5
d275 8
a282 1
          ELSEIF (ITYPE .NE. ITYPEF .OR. NSTACK .NE. NSTACKF) THEN
d284 5
a288 1
             CALL ERRT(101,'IMAGE FORMAT NOT COMPATIBLE WITH STACK',NE)
a315 1
          DSP = 'N'
d395 1
a395 1
        IF (LEN(DISP) .GT. 1 .AND. DISP(2:2) .EQ. 'S') THEN
d437 5
a441 1
          IF (NSLICE .GT. 1) THEN
@


1.1
log
@Initial revision
@
text
@d1 62
d73 1
d88 1
a88 1
     &                  NSAMBUF(NUMINLN)
d230 2
a231 1
          
a310 4
C          RECOVER OVERALL HEADER FROM THE STACK FILE
           CALL REDHED(LUN,BUF,NBUFSIZ,NSAM,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

d313 1
a313 1
           IREC = BUF(3)
d408 1
a408 1
          ELSE
@
