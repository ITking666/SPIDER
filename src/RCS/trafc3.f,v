head	1.27;
access;
symbols
	healthdept_2018:1.27
	pre_getangas:1.22
	GPL2010:1.21
	pre_GPL2010:1.20
	pre_var_equation:1.20
	pre_fftwrings:1.20
	pre_opfiles:1.20
	src:1.20
	best-code:1.20
	x-named-regs:1.20
	x:1.20
	v13-00:1.20
	pre_GPL:1.18
	prec_CA:1.18
	noindx:1.16
	Bproc:1.14
	oct21:1.13
	last77:1.10;
locks; strict;
comment	@c @;


1.27
date	2018.10.03.14.34.24;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2015.11.23.18.21.59;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2015.11.17.18.06.26;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2015.10.29.17.02.29;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2013.01.07.15.21.32;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2010.11.04.14.47.05;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2010.06.24.13.27.07;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2005.10.17.20.39.34;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.17.18.29.58;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2003.04.04.18.39.05;	author bbaxter;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.20.14.58.28;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2002.03.11.14.08.30;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2000.10.19.14.47.14;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	99.11.10.20.28.51;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	99.10.14.22.28.36;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	99.10.14.22.23.56;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	99.09.29.17.32.36;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	97.10.15.15.14.47;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	97.01.06.21.39.57;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	96.08.28.21.34.44;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	95.03.21.15.21.36;	author mladjadj;	state Exp;
branches;
next	1.6;

1.6
date	95.03.02.21.30.53;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	95.02.22.18.56.03;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	95.02.22.14.59.07;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	94.11.14.14.26.10;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.12.01;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.53.28;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.27
log
@email_health_dept
@
text
@C++*********************************************************************
C
C TRAFC3.F
C          INCLUDE COMPLETE SIGN REVERSAL AND INTELLIGIBLE
C          GAUSSIAN PARAMETER                     9/5/94  JF
C          FIXED                                  3/2/95  PP 
C          OPFILEC                                FEB 03  ARDEAN LEITH
C          CMLIMIT & PROMPTS                      NOV 10  ARDEAN LEITH
C          REFACTORED                             NOV 15  ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2015  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C TRAFC3(LUN,WANT_FLIP)
C 
C
C OPERATION: 'TF C3'  = STRAIGHT
C PURPOSE:   CREATE A CUBIC COMPLEX CTF  FILE THAT CAN BE USED FOR
C            CTF CORRECTION.
C
C OPERATION: 'TF C3'  = STRAIGHT
C PURPOSE:   CREATE A CUBIC BINARY FILE (-1,1) THAT CAN BE USED FOR
C            PHASE FLIPPING CTF CORRECTION OF A VOLUME.
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

         SUBROUTINE TRAFC3(LUN,WANT_FLIP)

         IMPLICIT NONE
         INCLUDE 'CMBLOCK.INC'
         INCLUDE 'CMLIMIT.INC'

         INTEGER               :: LUN   
         LOGICAL               :: WANT_FLIP

         COMPLEX               :: B(NBUFSIZ)  ! from cmlimit.inc

         CHARACTER(LEN=MAXNAM) :: FILNAM
         REAL                  :: LAMBDA,FMAXSPFREQ,SIGN
         CHARACTER(LEN=1)      :: NULL = CHAR(0)  

         REAL                  :: CS,DZ,Q,DS,DZA,AZZ,ACR,GEH,SC
         REAL                  :: AK,AZ,AZR,DZZ,TF,FDUM 
         INTEGER               :: NLET,IRTFLG,NDIM,NX,NY,NZ,LSM,MAXIM
         INTEGER               :: IE,NS2,NR2,NL2,K,IZ,J,IY,I,IX
         LOGICAL               :: WANT_AST,WANT_GEH,WANT_SIGN
         LOGICAL               :: WANT_SPFREQ,WANT_PIXSIZ
 
         DOUBLE PRECISION, PARAMETER :: PI = 3.1415926

         CALL FILERD(FILNAM,NLET,NULL,'OUTPUT',IRTFLG)
         IF (IRTFLG == -1) RETURN

C        GET COMMON TF INPUTS
         NDIM        = 1   
         WANT_AST    = .TRUE.
         WANT_GEH    = .NOT. WANT_FLIP   
         WANT_SIGN   = .TRUE.
         WANT_SPFREQ = .TRUE.     ! ASK FOR SPFREQ
         WANT_PIXSIZ = .FALSE.    ! DO NOT ASK FOR PIXEL SIZE

         CALL GET_TF_INPUT(CS,DZ,LAMBDA,
     &                NDIM, NX, NY,
     &                WANT_SPFREQ,FMAXSPFREQ,
     &                WANT_PIXSIZ,FDUM,
     &                Q, DS,
     &                WANT_AST, DZA,AZZ,
     &                WANT_GEH, ACR, GEH,
     &                WANT_SIGN, SIGN,
     &                IRTFLG) 
         IF (IRTFLG .NE. 0) RETURN

         NY = NX
         NZ = NY
         IF (MOD(NX,2) == 0)  THEN
            IFORM = -22
            LSM   = NX+2
         ELSE
            IFORM = -21
            LSM   = NX+1
         ENDIF

         MAXIM = 0
         CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'U',IFORM,LSM,NY,NZ,
     &               MAXIM,' ',.FALSE.,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN

         IF (WANT_FLIP) THEN
C           WANT PHASE FLIPPING TRANSFER
 
C           IGNORE SOURCE SIZE AND DEFOCUS SPREAD
            Q  = 0.0
            DS = 0.0

C           IGNORE THE GAUSSIAN ENVELOPE FUNCTION
            GEH = 0.0

         ELSE
C           WANT FULL CTF TRANSFER FUNCTION

            GEH = 1. / GEH**2
         ENDIF

         SC = FMAXSPFREQ / FLOAT(NX/2)

C        IE  = 0 SELECTS STRAIGHT TRANSFER FUNCTION IN SUBROUTINE TFD
         IE  = 0

         ACR = ATAN(ACR / (1.0 - ACR))
         CS  = CS * 1.E7

         NS2 = NX/2
         NR2 = NY/2
         NL2 = NZ/2
C
         DO K=1,NZ
           IZ = K-1
           IF (IZ > NL2) IZ = IZ-NZ

           DO J=1,NY
              IY = J-1
              IF (IY > NR2) IY = IY-NY

              DO I=1,LSM
                 IX = (I-1)/2

                 AK = SQRT(FLOAT(IX*IX)+FLOAT(IY*IY) + FLOAT(IZ*IZ))*SC
                 IF (AK .NE. 0.0) THEN
                    AZ = 0.0
                 ELSE
                    AZ = PI / 2.
                 ENDIF

                 AZR = AZZ * (PI / 180.)
                 DZZ = DZ + DZA / 2 * SIN(2 * (AZ-AZR))

                 CALL TFD(TF,CS,DZZ,LAMBDA,Q,DS,IE,AK,ACR,GEH)

                  IF (WANT_FLIP) THEN
C                    WANT PHASE FLIPPING TRANSFER FILE
                     IF (TF >= 0.0) THEN
                        B(IX+1) = CMPLX( 1.0,0.0) * SIGN
                     ELSE
                        B(IX+1) = CMPLX(-1.0,0.0) * SIGN
                     ENDIF
                  ELSE
C                    WANT STRAIGHT TRANSFER  FILE
                     B(IX+1) = CMPLX(TF*SIGN,0.0)
                  ENDIF
              ENDDO

              CALL WRTLIN(LUN,B,LSM,J+(K-1)*NY)

           ENDDO
         ENDDO

         END
@


1.26
log
@GET_TF_INPUT WANT_PIXSIZ params
@
text
@d17 1
a17 1
C=* Email: spider@@wadsworth.org                                        *
@


1.25
log
@cosmetic & varible name changes, formatting
@
text
@d63 1
a63 1
         REAL                  :: AK,AZ,AZR,DZZ,TF 
d67 1
d75 6
a80 4
         WANT_AST  = .TRUE.
         WANT_GEH  = .NOT. WANT_FLIP   
         WANT_SIGN = .TRUE.
         NDIM      = 1   
d84 2
a85 1
     &                FMAXSPFREQ,
@


1.24
log
@all tf ops have same prompt syntax
@
text
@d4 7
a10 2
C              OPFILEC                             FEB 03  ARDEAN LEITH
C              CMLIMIT & PROMPTS                   NOV 10  ARDEAN LEITH
d15 1
a15 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d33 6
a38 1
C TRAFC3(LUN)
d40 3
a42 3
C  CHANGED 9/5/94 TO INCLUDE COMPLETE SIGN REVERSAL AND INTELLIGIBLE
C  GAUSSIAN PARAMETER jf
C  FIXED, PP 3/2/95
d47 1
a47 1
         SUBROUTINE TRAFC3(LUN)
d49 1
d53 2
a54 2
         COMMON        B(1)
         COMPLEX                :: B
d56 1
a56 5
         CHARACTER(LEN=MAXNAM)  :: FILNAM
         REAL                   :: LAMBDA,KM,SIGN
         CHARACTER(LEN=1)       :: NULL = CHAR(0)  

         DATA PI/3.1415926/
d58 11
d71 1
a71 1
         IF (IRTFLG .EQ. -1) RETURN
d73 15
a87 21
        CALL RDPRM(CS,NOT_USED,'SPHERICAL ABERRATION CS [MM]')
           IF (CS < 0.0001)    CS = 0.0001

         CALL RDPRM2(DZ,LAMBDA,NOT_USED, 'DEFOCUS [A], LAMBDA [A]')

         CALL RDPRMI(NSAM,NDUM,NOT_USED,
     &               'NUMBER OF SPATIAL FREQ. POINTS')

         CALL RDPRM(KM,NOT_USED,'MAXIMUM SPATIAL FREQUENCY [1/A]')

         CALL RDPRM2(Q,DS,NOT_USED,
     &       'SOURCE SIZE [1/A], DEFOCUS SPREAD [A]')

         CALL RDPRM2(DZA,AZZ,NOT_USED,'ASTIGMATISM [A], AZIMUTH [DEG]')

         CALL RDPRM2(WGH,ENV,NOT_USED,
     &       'AMPL CONTRAST RATIO [0-1], GAUSSIAN ENV HALFW [1/A]')
 
         ENV = 1. / ENV**2

         CALL  RDPRM(SIGN,NOT_USED,'SIGN [+1 OR -1]')
d89 3
a91 4
         IFORM  = -7
         NROW   = NSAM
         NSLICE = NROW
         IF (MOD(NSAM,2) .EQ. 0)  THEN
d93 1
a93 1
            LSM   = NSAM+2
d96 1
a96 1
            LSM   = NSAM+1
d100 1
a100 1
         CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'U',IFORM,LSM,NROW,NSLICE,
d104 17
a120 1
         SC = KM / FLOAT(NSAM/2)
d122 1
a122 1
C        IE=0 SELECTS TRANSFER FUNCTION OPTION IN SUBROUTINE TFD
d124 2
a125 1
         WGH = ATAN(WGH / (1.0-WGH))
d128 3
a130 3
         NS2 = NSAM/2
         NR2 = NROW/2
         NL2 = NSLICE/2
d132 1
a132 1
        DO K=1,NSLICE
d134 3
a136 2
           IF (IZ .GT. NL2) IZ = IZ-NSLICE
           DO J=1,NROW
d138 2
a139 1
              IF (IY .GT. NR2) IY = IY-NROW
d143 1
a143 1
                 AK = SQRT(FLOAT(IX*IX)+FLOAT(IY*IY)+FLOAT(IZ*IZ))*SC
d145 1
a145 1
                    AZ=0.0
d147 1
a147 1
                    AZ = PI/2.
d149 1
a149 1
C                AZ  = ATAN2(0.0,AK)
d151 1
a151 1
                 DZZ = DZ + DZA / 2*SIN(2*(AZ-AZR))
d153 1
a153 1
                 CALL TFD(TF,CS,DZZ,LAMBDA,Q,DS,IE,AK,WGH,ENV)
d155 11
a165 1
                 B(IX+1) = CMPLX(TF*SIGN,0.0)
d167 3
a169 1
              CALL WRTLIN(LUN,B,LSM,J+(K-1)*NROW)
@


1.23
log
@CS_zero
@
text
@d28 1
d30 2
a31 2
C changed 9/5/94 to include complete sign reversal and intelligible
C Gaussian parameter jf
d35 1
a35 1
C--*********************************************************************
d40 1
a40 1
	 INCLUDE 'CMLIMIT.INC'
a41 1
	 COMPLEX                :: B
d43 1
d45 1
a45 1
         CHARACTER(LEN=MAXNAM)  ::  FILNAM
d47 1
a47 1
      	 CHARACTER(LEN=1)       :: NULL = CHAR(0)  
d55 1
a55 1
	CALL RDPRM(CS,NOT_USED,'SPHERICAL ABERRATION CS[MM]')
d71 1
a71 1
     &      'AMPL CONTRAST RATIO [0-1], GAUSSIAN ENV HALFW [1/A]')
d80 1
a80 1
	 IF (MOD(NSAM,2) .EQ. 0)  THEN
d82 5
a86 5
	    LSM   = NSAM+2
	 ELSE
	    IFORM = -21
	    LSM   = NSAM+1
	 ENDIF
d96 3
a98 3
	 IE  = 0
	 WGH = ATAN(WGH / (1.0-WGH))
	 CS  = CS * 1.E7
d104 8
a111 8
	DO K=1,NSLICE
	   IZ = K-1
	   IF (IZ .GT. NL2) IZ = IZ-NSLICE
	   DO J=1,NROW
	      IY = J-1
	      IF (IY .GT. NR2) IY = IY-NROW
	      DO I=1,LSM
	         IX = (I-1)/2
d129 1
a129 1
	 ENDDO
@


1.22
log
@CMLIMIT & PROMPTS
@
text
@d54 2
a55 1
         CALL RDPRM(CS,NOT_USED,'CS [MM]')
@


1.21
log
@GPL_2010
@
text
@d4 2
a5 2
C                  OPFILEC                         FEB  03 ARDEAN LEITH
C
d39 3
d43 4
a46 4
	 COMPLEX       B
         CHARACTER *81 FILNAM
         REAL          LAMBDA,KM,SIGN
         CHARACTER     NULL
a49 1
         NULL = CHAR(0)
d54 9
a62 5
         CALL RDPRM(CS,NOT_USED,'CS(MM)')
         CALL RDPRM2(DZ,LAMBDA,NOT_USED,
     &       'DEFOCUS(ANGSTROEMS), LAMBDA(ANGSTROEMS)')
         CALL RDPRMI(NSAM,NDUM,NOT_USED,'NUMBER OF SP.FREQ.PTS')
         CALL RDPRM(KM,NOT_USED,'MAXIMUM SPATIAL FREQUENCY[A-1]')
d64 4
a67 2
     &       'SOURCE SIZE[A-1], DEFOCUS SPREAD[A]')
         CALL RDPRM2(DZA,AZZ,NOT_USED,'ASTIGMATISM[A], AZIMUTH[DEG]')
d69 10
a78 7
     &      'AMPL CONTRAST RATIO [0-1], GAUSSIAN ENV HALFW [FOU UNITS]')
         ENV=1./ENV**2
         CALL  RDPRM(SIGN,NOT_USED,'SIGN (+1 OR -1.)')
         IFORM = -7
         NROW=NSAM
         NSLICE=NROW
	 IF (MOD(NSAM,2).EQ.0)  THEN
d80 1
a80 1
	    LSM=NSAM+2
d82 2
a83 2
	    IFORM=-21
	    LSM=NSAM+1
d91 1
a91 1
         SC=KM/FLOAT(NSAM/2)
d94 7
a100 7
	 IE=0
	 WGH = ATAN(WGH/(1.0-WGH))
	 CS = CS*1.E7

         NS2=NSAM/2
         NR2=NROW/2
         NL2=NSLICE/2
d103 2
a104 2
	   IZ=K-1
	   IF (IZ.GT.NL2)  IZ=IZ-NSLICE
d106 2
a107 2
	      IY=J-1
	      IF(IY.GT.NR2)  IY=IY-NROW
d109 2
a110 2
	         IX=(I-1)/2
C
d112 1
a112 1
                 IF (AK.NE.0.0) THEN
d117 4
a120 3
C                AZ=ATAN2(0.0,AK)
                 AZR=AZZ*(PI/180.)
                 DZZ=DZ+DZA/2*SIN(2*(AZ-AZR))
d122 2
a123 1
                        B(IX+1)=CMPLX(TF*SIGN,0.0)
d128 1
@


1.20
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.19
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a6 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
a30 1
C **************************************************************************
a38 1
C--************************************************************************
@


1.18
log
@changes to parameters to tfd, WGH and CS
@
text
@d1 1
d7 1
d9 1
d11 24
d41 1
d50 1
@


1.17
log
@opfilec
@
text
@d72 2
@


1.16
log
@nloop,iloop_removed
@
text
@d3 2
a4 1
C $$ TRAFC3.FOR
d62 1
d64 1
a64 1
         CALL OPFILE(.FALSE.,FILNAM,LUN,'U',IFORM,LSM,NROW,NSLICE,
@


1.15
log
@openfb--> opfile & cosmetic.
@
text
@d39 2
a40 2
         CALL RDPRM(CS,NLOOP,ILOOP,'CS(MM)')
         CALL RDPRM2(DZ,LAMBDA,NLOOP,ILOOP,
d42 3
a44 3
         CALL RDPRMI(NSAM,NDUM,NLOOP,ILOOP,'NUMBER OF SP.FREQ.PTS')
         CALL RDPRM(KM,NLOOP,ILOOP,'MAXIMUM SPATIAL FREQUENCY[A-1]')
         CALL RDPRM2(Q,DS,NLOOP,ILOOP,
d46 2
a47 2
         CALL RDPRM2(DZA,AZZ,NLOOP,ILOOP,'ASTIGMATISM[A], AZIMUTH[DEG]')
         CALL RDPRM2(WGH,ENV,NLOOP,ILOOP,
d50 1
a50 1
         CALL  RDPRM(SIGN,NLOOP,ILOOP,'SIGN (+1 OR -1.)')
@


1.14
log
@*** empty log message ***
@
text
@a15 3
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--************************************************************************
a18 1
C $$ TRAFC3.FOR
d20 3
d24 1
d26 2
a27 2
         COMMON B(1)
	 COMPLEX  B
d29 1
a29 1
         REAL LAMBDA,KM,SIGN
d31 1
d33 1
a33 1
C
d35 1
d38 1
d41 1
a41 1
     &   'DEFOCUS(ANGSTROEMS), LAMBDA(ANGSTROEMS)')
d45 2
a46 2
     &   'SOURCE SIZE[A-1], DEFOCUS SPREAD[A]')
      CALL RDPRM2(DZA,AZZ,NLOOP,ILOOP,'ASTIGMATISM[A], AZIMUTH[DEG]')
d48 1
a48 1
     &   'Ampl contrast ratio [0-1], Gaussian env halfw [Fou units]')
d50 1
a50 1
         CALL  RDPRM(SIGN,NLOOP,ILOOP,'SIGN (+1 or -1.)')
d54 12
a65 8
	IF(MOD(NSAM,2).EQ.0)  THEN
        IFORM = -22
	LSM=NSAM+2
	ELSE
	IFORM=-21
	LSM=NSAM+1
	ENDIF
         CALL OPENFB(B,FILNAM,LUN,LSM,NROW,'UNKNOWN',NF,NSLICE)
d67 4
a70 4
C
C IE=0 SELECTS TRANSFER FUNCTION OPTION IN SUBROUTINE TFD
	IE=0
C
d75 23
a97 23
	DO    K=1,NSLICE
	IZ=K-1
	IF(IZ.GT.NL2)  IZ=IZ-NSLICE
	DO    J=1,NROW
	IY=J-1
	IF(IY.GT.NR2)  IY=IY-NROW
	DO    I=1,LSM
	IX=(I-1)/2
C
        AK=SQRT(FLOAT(IX*IX)+FLOAT(IY*IY)+FLOAT(IZ*IZ))*SC
	IF(AK.NE.0.0) THEN
        AZ=0.0
        ELSE
	AZ = PI/2.
        ENDIF
C	AZ=ATAN2(0.0,AK)
	AZR=AZZ*(PI/180.)
	DZZ=DZ+DZA/2*SIN(2*(AZ-AZR))
	CALL TFD(TF,CS,DZZ,LAMBDA,Q,DS,IE,AK,WGH,ENV)
        B(IX+1)=CMPLX(TF*SIGN,0.0)
	 ENDDO
         CALL  WRTLIN(LUN,B,LSM,J+(K-1)*NROW)
	 ENDDO
@


1.13
log
@no-mp
@
text
@d86 1
a86 1
	CALL TFD(TF,CS,DZZ,LAMBDA,KM,NSAM,Q,DS,IE,AK,WGH,ENV)
@


1.12
log
@||
@
text
@a73 1
c$omp parallel do private(i,ix,ak,azr,dzz,tf)
@


1.11
log
@*** empty log message ***
@
text
@d74 1
@


1.10
log
@*** empty log message ***
@
text
@a32 1
CNO_SAVE
d47 1
a47 1
         CALL  RDPRM(sign,nloop,iloop,'SIGN (+1 or -1.)')
d87 1
a87 1
        B(IX+1)=CMPLX(TF,0.0)*SIGN
@


1.9
log
@IE=o fixed
@
text
@d69 1
a69 1
	DO  1  K=1,NSLICE
d72 1
a72 1
	DO  1  J=1,NROW
d75 1
a75 1
	DO  2  I=1,LSM
d89 1
a89 1
2        CONTINUE
d91 2
a92 1
1        CONTINUE
@


1.8
log
@new FT format
@
text
@d62 3
@


1.7
log
@changed a RDPRM2 prompt
@
text
@a24 2
C
#ifdef SP_UNIX
a25 4
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
C
d27 1
a28 1
         LOGICAL  REAL,IFS,IFR,IFL
d52 8
a59 1
         CALL OPENFB(B,FILNAM,LUN,NSAM,NROW,'UNKNOWN',NF,NSLICE)
a64 3
	IFS=MOD(NSAM,2).EQ.0
	IFR=MOD(NROW,2).EQ.0
	IFL=MOD(NSLICE,2).EQ.0
d67 2
a68 1
	K1=K-1
d70 4
a73 35
	J1=J-1
	DO  2  I=1,NSAM
	IF(I.LT.3)  THEN
	    IX=(I-1)*NS2
		IF(J.LT.3)  THEN
		IY=J1*NR2
		   IF(K.LT.3)  THEN
		   IZ=K1*NL2
                   REAL=(IFS.OR.(MOD(I,2).EQ.1)).AND.
     &                  (IFR.OR.(MOD(J,2).EQ.1)).AND.
     &                  (IFL.OR.(MOD(K,2).EQ.1))
		   ELSE
		   IZ=K1/2
                   REAL=(IFS.OR.(MOD(I,2).EQ.1)).AND.
     &                  ((MOD(K,2).EQ.1))
		   ENDIF
		ELSE
		IY=J1/2
		IZ=K1
		IF(IZ.GT.NL2)  IZ=IZ-NSLICE
                    REAL=(IFS.OR.(MOD(I,2).EQ.1)).AND.
     &                   ((MOD(J,2).EQ.1))
		ENDIF
	ELSE
	    IX=(I-1)/2
	    IY=J1
	    IF(IY.GT.NR2)  IY=IY-NROW
	    IZ=K1
	    IF(IZ.GT.NL2)  IZ=IZ-NSLICE
            IF(MOD(I,2).EQ.1)  THEN
            REAL=.TRUE.
            ELSE
            REAL=.FALSE.
            ENDIF
	ENDIF
a74 1
	IF(REAL)  THEN
d84 2
a85 5
	CALL TFD(B(I),CS,DZZ,LAMBDA,KM,NSAM,Q,DS,IE,AK,WGH,ENV)
        B(I)=B(I)*SIGN
	ELSE
	B(I)=0.0
	ENDIF
d87 1
a87 1
         CALL  WRTLIN(LUN,B,NSAM,J+(K-1)*NROW)
@


1.6
log
@fixed
@
text
@d52 1
a52 1
     &   'Amplitude contrast ratio [0-1], Gaussian env halfwidth [A-1]')
@


1.5
log
@delete write(nout,*) new version
@
text
@d21 1
a21 1
C
d34 2
a35 2
         LOGICAL  REAL
         REAL LAMBDA,KM, sign
d37 1
a37 1
         DATA PI/3.14159/
d39 1
a43 1
	 cs=cs*1.e7
d54 1
a54 1
         call rdprm(sign,nloop,iloop,'SIGN (+1 or -1.)')
d64 58
a121 47
C
	 do i=1,nsam
	 b(i)=0
	 enddo
         DO  1  K=1,NSLICE
         K1=K-1
         DO  1  J=1,NROW
         J1=J-1
         DO  2  I=1,NSAM,2
         IF(I.LT.3)  THEN
         IX=(I-1)*NS2
         IF(J.LT.3)  THEN
         IY=J1*NR2
         IF(K.LT.3)  THEN
         IZ=K1*NL2
         GOTO  3
         ELSE
         REAL=MOD(K1,2).EQ.0
         IZ=K1/2
         GOTO  3
         ENDIF
         ELSE
         IY=J1/2
         IZ=K1
         IF(IZ.GT.NL2)  IZ=IZ-NSLICE
         GOTO  3
         ENDIF
         ELSE
         IX=(I-1)/2
         IY=J1
         IF(IY.GT.NR2)  IY=IY-NROW
         IZ=K1
         IF(IZ.GT.NL2)  IZ=IZ-NSLICE
         ENDIF
3        CONTINUE
C
         AK=SQRT(FLOAT(IX*IX)+FLOAT(IY*IY)+FLOAT(IZ*IZ))*SC
         AZ = PI/2.
         AZR=AZZ*(PI/180.)
         DZZ=DZ+DZA/2*SIN(2*(AZ-AZR))
C
      	O1=PI*(0.5*CS*LAMBDA**3*aK**4-DZz*LAMBDA*AK**2)-wgh
	O2=-2.0*PI**2*q**2*(ak**3*CS*LAMBDA**3-DZz*ak*LAMBDA)**2
	O3=-1.*PI**2*ds**2*ak**4*LAMBDA**2/(16.*ALOG(2.))
	O5=EXP(-(ak/env)**2)
	q1=SIN(O1)*EXP(O2+O3)*O5
         B(I)=Q1*sign
@


1.4
log
@initializing of variables  by J. Zhu
@
text
@a38 1
	 write(nout,*) 'new version'
@


1.3
log
@new version
@
text
@a25 1
C
d27 1
a27 1
        INCLUDE 'CMBLOCK.INC'
d39 1
d44 1
d66 3
d73 1
a73 1
         DO  2  I=1,NSAM
a78 1
         REAL=.TRUE.
a86 1
         REAL=MOD(J1,2).EQ.0
a92 1
         REAL=MOD(I-1,2).EQ.0
a99 5
         IF(REAL)  THEN
         IF(I.EQ.1 .AND. J.EQ.1 .AND. K.EQ.1) THEN
         B(1)=-WGH
         GOTO  2
         ENDIF
a102 2
C     IF(AK.EQ.0.0) GOTO 5
C     AZ=ATAN2(0.0,AK)
d106 5
a110 1
         CALL TFD(Q1,CS,DZZ,LAMBDA,KM,NSAM,Q,DS,IE,AK,WGH,ENV)
a111 3
         ELSE
         B(I)=0.0
         ENDIF
a115 1

@


1.2
log
@cpp_lines_added
@
text
@d19 2
d26 1
d28 1
a28 1
         INCLUDE 'CMBLOCK.INC'
d30 1
a30 1
         INCLUDE 'COMMON1:CMBLOCK.INC'
d36 1
a36 1
         REAL LAMBDA,KM
d52 3
a54 1
     &   'Amplitude contrast ratio [0-1], Gaussian envelope parameter')
d113 1
a113 1
         B(I)=Q1
d121 1
@


1.1
log
@Initial revision
@
text
@d24 3
d28 1
@
