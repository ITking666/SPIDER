head	1.10;
access;
symbols
	healthdept_2018:1.10
	pre_getangas:1.9
	GPL2010:1.9
	pre_GPL2010:1.8
	pre_var_equation:1.8
	pre_fftwrings:1.8
	pre_opfiles:1.8
	src:1.8
	best-code:1.8
	x-named-regs:1.7
	x:1.7
	v13-00:1.7
	pre_GPL:1.5
	prec_CA:1.5
	noindx:1.5;
locks; strict;
comment	@c @;


1.10
date	2018.10.03.14.34.08;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.24.13.25.57;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.30.16.20.10;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.17.20.42.07;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.17.18.32.30;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.06.14.53.47;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.26.17.27.16;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.26.17.12.30;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.25.19.21.03;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.22.16.41.35;	author leith;	state Exp;
branches;
next	;


desc
@@


1.10
log
@email_health_dept
@
text
@C++*********************************************************************
C
C  INQUIREALLOC.F                 NEW ROUTINE  JAN 2001 ArDean Leith
C                                 REWRITE      JAN 2006 ArDean Leith
C                                
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   INQUIREIF    DETERMINES AMOUNT OF ALLOCABLE MEMORY
C
C   PARAMETERS:  RSTART   STARTING GB AMOUNT
C                IGOT     ALLOCATABLE AMOUNT MB
C                SAYIT    LOGICAL FLAG TO LIST AMOUNT

C--*********************************************************************

        SUBROUTINE INQUIREALLOC(RSTART,IGOT,SAYIT,IRTFLG)

        INCLUDE 'CMBLOCK.INC'
 
        LOGICAL    :: SAYIT
#ifndef SP_32
        INTEGER *8    IASK8,IOK
#else
        INTEGER    :: IASK8,IOK
#endif
        INTEGER    :: IASK4

        DOUBLE PRECISION                   :: RASK,RGOT,GASK
        INTEGER, ALLOCATABLE, DIMENSION(:) :: IBUF

        IRTFLG = 1

C       -n32 ALLOCATION ON SGI LIMITED TO:  2147483647 

C       CONVERT FROM GB TO BYTE UNITS
        RASK  = RSTART * DBLE(1e9) 
        IASK8 = RASK

        CALL BIGALLOC(IASK8,IOK,.TRUE.,.FALSE.,IRTFLG)
        IOK   = MIN(IOK,IASK8)

        GASK  = DBLE(IOK) / DBLE(1e9) 
        WRITE(NOUT,*) ' STARTING WITH REQUEST FOR GBYTES: ',GASK

C       CONVERT STARTING REQUEST TO 4 BYTE (INTEGER) UNITS
        IASK8 = DBLE(IOK) / DBLE(4) 

        DO
           GASK  = DBLE(4) * DBLE(IASK8) /  DBLE(1e9) 
           WRITE(NOUT,*) ' REQUESTING GBYTES: ',GASK
           IF (NOUT .NE. NDAT) WRITE(NDAT,*)' REQUESTING GBYTES: ',GASK 

           ALLOCATE(IBUF(IASK8),STAT=IRTFLG)

           IF (IRTFLG .EQ. 0) THEN
              WRITE(NOUT,*)' ALLOCATED GBYTES: ',GASK
              IF (NOUT .NE. NDAT) WRITE(NDAT,*)
     &                     ' ALLOCATED GBYTES: ',GASK 
              RGOT = DBLE(IASK8) * DBLE(4) /  DBLE(1e9)
              IGOT = RGOT
              EXIT
           ELSE
              RASK  = DBLE(IASK8) * DBLE(0.8) 
              IASK8 = RASK
              IGOT  = 0
           ENDIF
        ENDDO     
  
        IF (ALLOCATED(IBUF)) DEALLOCATE(IBUF)

        RETURN
        END






@


1.9
log
@GPL_2010
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.8
log
@rewrite
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.7
log
@GPL License fixed
@
text
@d4 1
d34 3
a36 1
C   PARAMETERS:  SAYIT    LOGICAL FLAG TO LIST AMOUNT
d40 1
a40 1
        SUBROUTINE INQUIREALLOC(ISTART,IGOT,SAYIT,IRTFLG)
a43 1
        INTEGER, ALLOCATABLE, DIMENSION(:) ::    IBUF
d46 1
a46 1
        INTEGER *8       IASK8,IOK
d48 1
a48 1
        INTEGER *4       IASK8,IOK
d50 4
a53 1
        INTEGER *4 :: IASK4
d57 4
a60 2
C       CONVERT TO BYTE UNITS
        RASK  = FLOAT(ISTART) * 1000000.0 
d66 2
a67 3
        RASK  = FLOAT(IOK) / 1000000.0
        IASK8 = RASK
        WRITE(NOUT,*) ' STARTING WITH REQUEST FOR MBYTES: ',IASK8
d70 1
a70 2
        RASK  = FLOAT(IOK) * 0.25 
        IASK8 = RASK
d73 4
d78 13
a90 3
           IF (IRTFLG .EQ. 0) EXIT
           RASK  = RASK * 0.8 
           IASK8 = RASK
a92 9
        RGOT = FLOAT(IASK8) * 4.0 / 1000000.0
        IGOT = RGOT

        IF (SAYIT) THEN
           WRITE(NOUT,90) IGOT
           IF (NOUT .NE. NDAT) WRITE(NDAT,90) 
90         FORMAT('ALLOCATABLE MBYTES: ',I10)
        ENDIF

a93 1
        IF (IRTFLG .NE. 0) IGOT = 0
@


1.6
log
@HRI GPL License used
@
text
@a5 2
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      **
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 6

C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
@


1.5
log
@SP_32 for NT
@
text
@d6 1
d8 24
@


1.4
log
@*** empty log message ***
@
text
@d26 5
a30 1
        INTEGER *8 :: IASK8,IOK
@


1.3
log
@*** empty log message ***
@
text
@d36 1
@


1.2
log
@*** empty log message ***
@
text
@d24 4
a27 4
        INTEGER, ALLOCATABLE, DIMENSION(:) ::  IBUF
        LOGICAL :: SAYIT
        INTEGER *8 IASK8
        INTEGER *4 IASK4
d31 3
a33 13
c        IASK8 =  HUGE(IASK8) 
c        WRITE(NOUT,*) ' HUGE(IASK8)= ',IASK8
c        IASK4 =  HUGE(IASK4) 
c        WRITE(NOUT,*) ' HUGE(IASK4)= ',IASK4

C       CONVERT TO 4 BYTE INTEGER UNITS
        RASK  =  0.25 * ISTART * 1000000 
        IASK8 = RASK  
        IF (RASK .GT. HUGE(IASK8)) THEN
           CALL ERRT(102,'INTEGER OVERFLOW, USING',IASK)
           IASK8 =  HUGE(IASK8)
           RASK  =  IASK8 
        ENDIF
d35 10
a47 1
           IF (ALLOCATED(IBUF)) DEALLOCATE(IBUF)
@


1.1
log
@Initial revision
@
text
@d53 1
a53 1
        RGOT = FLOAT(IASK8) * 4 / 1000000
@
