head	1.21;
access;
symbols
	pre_mrcs:1.21
	healthdept_2018:1.21
	pre_getangas:1.18
	GPL2010:1.18
	pre_GPL2010:1.17
	pre_var_equation:1.17
	pre_fftwrings:1.17
	pre_opfiles:1.17
	src:1.17
	best-code:1.17
	x-named-regs:1.17
	x:1.17
	v13-00:1.17
	pre_GPL:1.15
	prec_CA:1.15
	noindx:1.14
	Bproc:1.11
	oct21:1.10
	last77:1.8;
locks; strict;
comment	@c @;


1.21
date	2018.10.03.14.51.09;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2014.07.30.16.35.58;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2014.07.29.16.35.55;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2010.06.24.13.27.17;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.17.19.53.14;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.17.17.50.23;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.19.21.24.17;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2002.03.11.14.07.40;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2001.03.29.16.19.23;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.10.19.15.00.35;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.12.07.16.35.52;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	99.04.28.17.56.52;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	99.04.28.17.39.30;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	98.02.03.14.58.55;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.10.15.17.10.18;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.10.02.14.31.22;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	97.10.02.13.09.22;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	96.07.08.17.14.26;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	96.05.07.16.54.28;	author ramani;	state Exp;
branches;
next	1.2;

1.2
date	96.04.23.19.31.27;	author mladjadj;	state Exp;
branches;
next	1.1;

1.1
date	96.04.23.15.08.47;	author mladjadj;	state Exp;
branches;
next	;


desc
@automatic particle picking
@


1.21
log
@email_health_dept
@
text
@
C ++********************************************************************
C                                                             
C  WPDP                                                              
C                  LEN=MAXNAM                      JUL 14 ARDEAN LEITH  
C                                                            
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  WPDP(ILIST,QQ,WWN,VART,NSAM1,NROW1,NW,N2,MVAR,NIMA)                 *
C                                                                      *
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE WPDP(ILIST,NQQ,WWN,VART,NSAM1,NROW1,NW,N2,MVAR,NIMA)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

	DIMENSION  ILIST(*)
        COMMON     Q(1)

        !CHARACTER*80  FINPAT,FINPIC,FILD
        !COMMON /FPIC/ FINPAT,FINPIC,NLETW

        CHARACTER(LEN=MAXNAM) ::  FINPAT,FINPIC,FILD
        COMMON /FPIC/             FINPAT,FINPIC,NLETW

        COMMON /DIMSS1/ K_Q,K_P,K_D,K_3,K_4,K_5,K_6,K_7,K_8,K_9

        INTEGER*2        M1,MD,NMAX,JV(9)
        DOUBLE PRECISION TMEAN(9),D(9,2),AR(3,2),E(3)
	PARAMETER        (NLIST=2)
	DIMENSION        DLIST(NLIST)
        DIMENSION        WWN(NSAM1,NROW1),QQ(NSAM1,NW),VART(MVAR)
	LOGICAL          FOUND

        DATA INPIC/55/,NDOC/38/,LUN50/50/

        CALL RDPRMI(NNSAM,NNROW,NOT_USED,'SIZE OF MINI WINDOW')

        CALL FILERD(FILD,NLET5,DATEXC,'DISCRIMINANT FUNCTION',IRTFLG)
        IF (FILD(1:1) .EQ. '*') RETURN

        OPEN(LUN50,FILE=FILD,STATUS='OLD',FORM='UNFORMATTED')  
 
C       READ THE DISCRIMINANT FUNCTION
        READ(LUN50)M1,MD,NMAX
        READ(LUN50)(TMEAN(K),K=1,M1)
        DO  JJ=1,M1
           READ(LUN50) (D(JJ,K),K=1,MD)
        ENDDO
        DO  IJ=1,NMAX
           READ(LUN50) (AR(IJ,K),K=1,MD)
        ENDDO
        READ(LUN50) (E(IJ),IJ=1,NMAX)
        READ(LUN50) (JV(IJ),IJ=1,M1)
	CLOSE(LUN50)

	FOUND = .FALSE.
	NI    = 0
	DO  K1=1,NIMA
           CALL  FILGET(FINPAT,FINPIC,NLETW,ILIST(K1),INTFLAG)
           MAXIM = 0
           CALL OPFILEC(0,.FALSE.,FINPIC,INPIC,'O',IFORM,
     &               LSAM,LROW,NSLICE,
     &               MAXIM,' ',.FALSE.,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           DO K2=1,LROW
              CALL REDLIN(INPIC,WWN(1,K2),LSAM,K2)
           ENDDO
           CLOSE(INPIC)

C          DO A MEDIAN FILTRATION AND THEN CALCULATE STATISTICS

           LENGTH = 7
           LENGTH = LENGTH/2+1
           K      = LENGTH*LENGTH
           CALL MEED(WWN,Q(K_3),NW,LENGTH,Q(K_D),K)

           CALL TOMA(NW,NW,NNSAM,NNROW,Q(K_D),VART,MVAR)      
           GR = 0.0        

           CALL POJ(NW,Q(K_D),Q(K_7),Q(K_8),Q(K_3),Q(K_5),Q(K_6),
     &           Q(K_4),N2,VV)

           CALL CLSS(M1,MD,NMAX,TMEAN,D,AR,E,JV,GR,VART,MVAR,VV,LL)

           IF (LL .EQ. 1)THEN
              NI       = NI+1 
              DLIST(1) = NI
              DLIST(2) = ILIST(K1)
              CALL SAVD(NDOC,DLIST,NLIST,IRTFLG)
           ENDIF
           FOUND = .TRUE.
	ENDDO

	IF (FOUND) THEN
	   CALL SAVDC
	   CLOSE(NDOC)
	ELSE
	   WRITE(NOUT,*)' No good particles found.'
	ENDIF

        END
@


1.20
log
@CHARACTER(LEN=MAXNAM) ::  FINPAT,FINPIC,FILD bug
.;
@
text
@d13 1
a13 1
C=* Email: spider@@wadsworth.org                                        *
@


1.19
log
@LEN=MAXNAM on FPIC common
@
text
@d29 1
a29 1
C  WPDP(ILIST,QQ,WWN,VART,NSAM1,NROW1,NW,N2,MVAR,NIMA)                       *
d49 1
a49 1
        CHARACTER(LEN=MAXNAM) ::  FINPAT,FINPIC
@


1.18
log
@GPL_2010
@
text
@d3 4
a6 3
C                                                                      *
C  WPDP                                                                    *
C                                                                      *
d41 1
d46 5
a50 2
        CHARACTER*80  FINPAT,FINPIC,FILD
        COMMON /FPIC/ FINPAT,FINPIC,NLETW
d54 1
a54 1
        INTEGER*2     M1,MD,NMAX,JV(9)
d56 4
a59 4
	PARAMETER    (NLIST=2)
	DIMENSION     DLIST(NLIST)
        DIMENSION     WWN(NSAM1,NROW1),QQ(NSAM1,NW),VART(MVAR)
	LOGICAL       FOUND
@


1.17
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.16
log
@HRI GPL License used
@
text
@a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.15
log
@opfilec
@
text
@d8 24
@


1.14
log
@nloop,iloop_removed
@
text
@d33 1
d70 2
a71 1
           CALL OPFILE(.FALSE.,FINPIC,INPIC,'O',IFORM,LSAM,LROW,NSLICE,
@


1.13
log
@bad ilist bug
@
text
@d44 1
a44 1
        CALL RDPRMI(NNSAM,NNROW,NLOOP,ILOOP,'SIZE OF MINI WINDOW')
@


1.12
log
@openfb--> opfile & cosmetic
@
text
@d4 1
a5 1
C                                                                      *
d15 1
a15 1
C  WPDP(QQ,WWN,VART,NSAM1,NROW1,NW,N2,MVAR,NIMA)                       *
a20 1
C        0         2         3         4         5         6         7 *
d24 3
a26 1
        SUBROUTINE WPDP(QQ,WWN,VART,NSAM1,NROW1,NW,N2,MVAR,NIMA)
d28 2
a29 3
        INTEGER*2  M1,MD,NMAX,JV(9)
        PARAMETER (NILMAX=20000)
        COMMON    BUF(1024),ILIST(NILMAX),Q(1)
d31 1
d34 2
a36 1
        INCLUDE 'CMBLOCK.INC'
a40 1
        CHARACTER*80  FINPAT,FINPIC,FILD
d47 2
a48 1
        IF (FILD(1:1).EQ.'*') RETURN
d55 1
a55 1
          READ(LUN50) (D(JJ,K),K=1,MD)
d58 1
a58 1
          READ(LUN50) (AR(IJ,K),K=1,MD)
d64 2
a65 2
	FOUND=.FALSE.
	NI=0
d67 3
a69 3
         CALL  FILGET(FINPAT,FINPIC,NLETW,ILIST(K1),INTFLAG)
         MAXIM = 0
         CALL OPFILE(.FALSE.,FINPIC,INPIC,'O',IFORM,LSAM,LROW,NSLICE,
d71 1
a71 1
         IF (IRTFLG .NE. 0) RETURN
d73 4
a76 4
         DO    K2=1,LROW
            CALL  REDLIN(INPIC,WWN(1,K2),LSAM,K2)
   	 ENDDO
	 CLOSE(INPIC)
d78 1
a78 1
C        DO A MEDIAN FILTRATION AND THEN CALCULATE STATISTICS
d80 4
a83 4
         LENGTH=7
         LENGTH=LENGTH/2+1
         K=LENGTH*LENGTH
         CALL MEED(WWN,Q(K_3),NW,LENGTH,Q(K_D),K)
d85 2
a86 2
         CALL TOMA(NW,NW,NNSAM,NNROW,Q(K_D),VART,MVAR)      
         GR=0.0        
d88 1
a88 1
         CALL POJ(NW,Q(K_D),Q(K_7),Q(K_8),Q(K_3),Q(K_5),Q(K_6),
d91 1
a91 1
         CALL CLSS(M1,MD,NMAX,TMEAN,D,AR,E,JV,GR,VART,MVAR,VV,LL)
d93 7
a99 7
         IF(LL.EQ.1)THEN
           NI=NI+1 
           DLIST(1)=NI
           DLIST(2)=ILIST(K1)
           CALL  SAVD(NDOC,DLIST,NLIST,IRTFLG)
         ENDIF
	 FOUND=.TRUE.
d102 2
a103 2
	IF(FOUND)  THEN
	   CALL  SAVDC
d106 1
a106 1
	   WRITE(NOUT,*)' No good particles found'
@


1.11
log
@header
@
text
@d15 1
a16 1
C                                                                      *
d25 1
a25 2
        SUBROUTINE WPDP(QQ,WWN,VART,
     &	NSAM1,NROW1,NW,N2,MVAR,NIMA)
d27 1
a27 1
        INTEGER*2 M1,MD,NMAX,JV(9)
d29 2
a30 2
        COMMON  BUF(1024),ILIST(NILMAX),Q(1)
C
d35 4
a38 5
	PARAMETER  (NLIST=2)
	DIMENSION  DLIST(NLIST)
        DIMENSION WWN(NSAM1,NROW1),QQ(NSAM1,NW),VART(MVAR)
	LOGICAL  FOUND
C
d40 1
a40 1
        CHARACTER*1 NULL
d42 1
a42 1
C
d45 1
a45 1
        CALL FILERD(FILD,NLET5,NULL,'DISCRIMINANT FUNCTION',IRTFLG)
d47 3
a49 3
        CALL FILCAN(FILD,NLET5,NULL,NULL,FILD,DATEXC,IER)
        OPEN(LUN50,FILE=FILD,STATUS='OLD',FORM='UNFORMATTED')   
C Read the discriminant function
d53 1
a53 1
          READ(LUN50)(D(JJ,K),K=1,MD)
d56 1
a56 1
          READ(LUN50)(AR(IJ,K),K=1,MD)
d58 2
a59 2
        READ(LUN50)(E(IJ),IJ=1,NMAX)
        READ(LUN50)(JV(IJ),IJ=1,M1)
d61 1
a61 1
C
d66 4
a69 6
         CALL  OPENFB(BUF,FINPIC,INPIC,LSAM,LROW,'O',NF,NSL)
         IF(NF.NE.2)  THEN
         WRITE(NOUT,2032)  FINPIC
2032     FORMAT(' File not found ',A80,/,' Operation abandoned')
         RETURN
         ENDIF
d72 1
a72 1
         CALL  REDLIN(INPIC,WWN(1,K2),LSAM,K2)
d75 23
a97 25
C
C DO A MEDIAN FILTRATION AND THEN CALCULATE STATISTICS
C
        LENGTH=7
        LENGTH=LENGTH/2+1
        K=LENGTH*LENGTH
        CALL MEED(WWN,Q(K_3),NW,LENGTH,Q(K_D),K)

C
        CALL TOMA(NW,NW,NNSAM,NNROW,Q(K_D),VART,MVAR)      
        GR=0.0        

        CALL POJ(NW,Q(K_D),Q(K_7),Q(K_8),Q(K_3),Q(K_5),Q(K_6),
     &  Q(K_4),N2,VV)

        CALL CLSS(M1,MD,NMAX,TMEAN,D,AR,E,JV,GR,VART,MVAR
     &  ,VV,LL)

        IF(LL.EQ.1)THEN
        NI=NI+1 
         DLIST(1)=NI
         DLIST(2)=ILIST(K1)
         CALL  SAVD(NDOC,DLIST,NLIST,IRTFLG)
        ENDIF
	FOUND=.TRUE.
d99 1
d101 2
a102 2
	CALL  SAVDC
	CLOSE(NDOC)
d104 1
a104 2
	WRITE(NOUT,111)
111	FORMAT(' No good particles found')
d106 1
@


1.10
log
@*** empty log message ***
@
text
@d1 24
d27 1
@


1.9
log
@*** empty log message ***
@
text
@d2 1
a2 1
     &	NSAM1,NROW1,NW,N2,MVAR,NIMA,NOUT)
@


1.8
log
@new version
@
text
@d2 1
a2 1
     &	NSAM1,NROW1,NW,N2,MVAR,NIMA)
d4 1
a4 1
        PARAMETER (NILMAX=10000)
d14 1
a18 1
CNO_SAVE
d26 1
a26 1
   
d38 2
a39 1

d72 1
a72 1
        IF(LL.EQ.1)THEN 
d78 1
d80 1
d83 4
a87 1

@


1.7
log
@*** empty log message ***
@
text
@d1 5
a5 3
	SUBROUTINE WPDP(PKK,QQ,WWN,VART,NSAM1,NROW1,NW,NPK,MRD,N2,MVAR)
	INTEGER*2 M1,MD,NMAX,JV(9)
	COMMON  BUF(1024),Q(1)
d8 2
a9 3

	COMMON /DIMSS1/ K_Q,K_P,K_D,K_3,K_4,K_5,K_6,K_7,K_8,K_9
	REAL*8 TMEAN(9),D(9,2),AR(3,2),E(3)
d11 8
a18 21
	DIMENSION WWN(NW,NW),QQ(NSAM1,NW),VART(MVAR)
        DIMENSION  PKK(4,NPK)
C
        CHARACTER*80  FINPAT,FINPIC,DOCNM1
     &  ,FILD
	CHARACTER*1 NULL

        DATA LUN14/55/,LUN50/60/,NDOC1/38/

	NULL=CHAR(0)

        CALL FILERD(FINPAT,NLETW,NULL,
     &  'ENTER TEMPLATE FOR UNTILTED WINDOW SERIES',IRTFLG)

	IF(MRD.NE.1)THEN
C
         CALL FILERD(DOCNM1,NLETD1,NULL,
     &  'DOC FILE FOR STORING VALID COORDINATES',IRTFLG)
C
         CALL FILCAN(DOCNM1,NLETD1,NULL,NULL,DOCNM1,DATEXC,IER)
         OPEN(NDOC1,FILE=DOCNM1,STATUS='UNKNOWN')
a19 1
C
d22 1
a22 1
        CALL FILERD(FILD,NLET5,NULL,'DISCRIMINANT FUNCTION?',IRTFLG)
d25 1
a25 1
        OPEN(LUN50,FILE=FILD,STATUS='OLD',FORM='UNFORMATTED')	
d29 9
a37 10
        DO  J=1,M1
          READ(LUN50)(D(J,K),K=1,MD)
	ENDDO
        DO  I=1,NMAX
          READ(LUN50)(AR(I,K),K=1,MD)
	ENDDO
        READ(LUN50)(E(I),I=1,NMAX)
        READ(LUN50)(JV(I),I=1,M1)

	ENDIF
a38 1
	I=0
d40 20
a59 3
	DO 1 L=1,NPK

	NX=PKK(1,L)-NW/2
a60 3
	NY=PKK(2,L)-NW/2
	IF(NX.LT.1.OR.NY.LT.1.)GO TO 1
	IF(NX.GE.(NSAM1-NW+1).OR.NY.GE.(NROW1-NW+1))GO TO 1
d62 2
a63 1
	I=I+1
d65 2
a66 7
	IF(I.EQ.1) THEN
	   DO  JR=NY,(NY+NW-1)
	      CALL REDLIN(LUN14,QQ(1,JR-NY+1),NSAM1,JR)
	   ENDDO
	   GO TO 50

	ELSE
d68 1
a68 54
	IF(PKK(2,L).EQ.PKK(2,L-1))GO TO 50

	IF ((PKK(2,L)-PKK(2,L-1)).GE.NW) THEN
	   DO  JR=NY,(NY+NW-1)
	      CALL REDLIN(LUN14,QQ(1,JR-NY+1),NSAM1,JR)
	   ENDDO
	   GO TO 50
	END IF
	
	NIW=PKK(2,L)-PKK(2,L-1)+1

C SHIFT BUFFER

	DO  JR=NIW,NW
	DO  II=1,NSAM1
	  QQ(II,JR-NIW+1)=QQ(II,JR)
	ENDDO
	ENDDO
	NB=NW-NIW+1
	NIB=PKK(2,L-1)+(NW/2)
	DO  JR=NIB,(PKK(2,L)+NW/2-1)
	NB=NB+1
	CALL REDLIN(LUN14,QQ(1,NB),NSAM1,JR)
	ENDDO
	ENDIF
	
C WINDOWING OUT


50	DO  JK=1,NW
	DO  IK=1,NW
	  WWN(IK,JK)=QQ(IK+INT(PKK(1,L))-(NW/2),JK)
	ENDDO
	ENDDO

	IF(MRD.EQ.1)THEN
        CALL OT(I,NW,WWN)
	IF(I.EQ.NPK)THEN
	RETURN
	ENDIF	
	ELSE
C
C DO A MEDIAN FILTRATION AND THEN CALCULATE STATISTICS
C
	LENGTH=7
	LENGTH=LENGTH/2+1
	K=LENGTH*LENGTH
	CALL MEED(WWN,Q(K_3),NW,LENGTH,Q(K_D),K)
C
	CALL TOMA(NW,NW,NNSAM,NNROW,Q(K_D),VART,MVAR)	   
	GR=0.0
	CALL POJ(NW,Q(K_D),Q(K_7),Q(K_8),Q(K_3),Q(K_5),Q(K_6),
     &  Q(K_4),N2,VV)
	CALL CLSS(M1,MD,NMAX,TMEAN,D,AR,E,JV,GR,VART,MVAR
d71 10
a80 20
	IF(LL.EQ.1)THEN 

	NI=NI+1 
                                           
        WRITE(NDOC1,4566)NI,2,(PKK(K,L),K=1,2)
4566    FORMAT(1X,I4,1X,I1,2G12.5)

        CALL OT(NI,NW,WWN)
	ENDIF
	ENDIF
1	CONTINUE
	CLOSE(LUN50)
	CLOSE(2)
C	CLOSE(NDOC)
	CLOSE(NDOC1)
C
C HERE WE DO A FIT OF THE UNTILTED COORDINATES AND THE NEW TILTED 
C COORDINATES TO DETERMINE THE ANGLES THETA,PHI AND GAMMA.
C
	END
@


1.6
log
@*** empty log message ***
@
text
@d42 6
a47 6
        DO 46 J=1,M1
        READ(LUN50)(D(J,K),K=1,MD)
46      CONTINUE
        DO 48 I=1,NMAX
        READ(LUN50)(AR(I,K),K=1,MD)
48      CONTINUE
d66 3
a68 2
	   DO 2 JR=NY,(NY+NW-1)
2	      CALL REDLIN(LUN14,QQ(1,JR-NY+1),NSAM1,JR)
d76 3
a78 2
	   DO 31 JR=NY,(NY+NW-1)
31	      CALL REDLIN(LUN14,QQ(1,JR-NY+1),NSAM1,JR)
d86 5
a90 3
	DO 7 JR=NIW,NW
	DO 7 II=1,NSAM1
7	QQ(II,JR-NIW+1)=QQ(II,JR)
d93 1
a93 1
	DO 8 JR=NIB,(PKK(2,L)+NW/2-1)
d95 2
a96 1
8	CALL REDLIN(LUN14,QQ(1,NB),NSAM1,JR)
d102 5
a106 3
50	DO 3 JK=1,NW
	DO 3 IK=1,NW
3	WWN(IK,JK)=QQ(IK+INT(PKK(1,L))-(NW/2),JK)
@


1.5
log
@*** empty log message ***
@
text
@d127 1
a127 1
4566    FORMAT(1X,I4,X,I1,2G12.5)
a140 1
	RETURN
@


1.4
log
@rm jump inside a do loop
@
text
@d38 1
a38 2
        OPEN(LUN50,FILE=FILD,STATUS='OLD',FORM='UNFORMATTED',
     &  READONLY)	
@


1.3
log
@fixed for vax errors
@
text
@d67 3
a69 3
90	DO 2 JR=NY,(NY+NW-1)
2	CALL REDLIN(LUN14,QQ(1,JR-NY+1),NSAM1,JR)
	GO TO 50
d75 6
a80 2
	IF ((PKK(2,L)-PKK(2,L-1)).GE.NW)GO TO 90

@


1.2
log
@unknown
@
text
@d2 1
a2 1
	INTEGER*2 M1,MD,NMAX,JV(9),NPT
d13 1
a13 1
        CHARACTER*80  FILNAM1,DOCNAM,FINPAT,FINPIC,DOCNM1
d15 1
a15 1
	CHARACTER*1 NULL,ANS
d17 1
a17 2
        DATA LUN14/55/,LUN5/52/,INPIC/69/,INPICT/68/,LUN50/60/
     &  ,NDOC1/38/
d35 1
a35 2
        CALL FILERD(FILD,NLET5,NULL,'FILENAME WITH DISCRIMINANT
     &  FUNCTION',IRTFLG)
@


1.1
log
@automatic particle picking
@
text
@d31 1
a31 1
         OPEN(NDOC1,FILE=DOCNM1,STATUS='NEW')
@
