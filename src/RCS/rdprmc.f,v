head	1.35;
access;
symbols
	pre_mrcs:1.35
	healthdept_2018:1.35
	pre_getangas:1.32
	GPL2010:1.32
	pre_GPL2010:1.31
	pre_var_equation:1.30
	pre_fftwrings:1.30
	pre_opfiles:1.30
	src:1.30
	best-code:1.27
	named-reg:1.25
	x-named-regs:1.24
	x:1.24
	v13-00:1.23
	pre_GPL:1.21
	prec_CA:1.17
	noindx:1.16
	Bproc:1.7
	oct21:1.6
	last77:1.6;
locks; strict;
comment	@c @;


1.35
date	2018.10.03.14.34.14;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2014.08.29.13.33.55;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2012.09.20.13.16.42;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2010.06.24.13.26.41;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2009.08.28.14.35.21;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2006.10.26.15.37.02;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2006.09.05.18.28.39;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2006.07.31.15.13.49;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2006.03.17.20.12.55;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2006.02.21.16.25.34;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2005.12.12.15.29.49;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2005.11.15.21.51.17;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2005.10.17.20.10.04;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.17.18.04.27;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2005.05.24.17.32.58;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2005.04.06.16.31.26;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2005.03.30.19.36.42;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2003.11.24.17.25.05;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.04.13.24.47;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2002.06.28.16.22.54;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2002.06.26.19.40.01;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2002.03.22.15.13.55;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.20.16.14.43;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.07.16.51.59;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.07.16.41.57;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.06.13.07.21;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.29.13.02.19;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.17.14.03.39;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.11.04.17.16.31;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	98.03.05.15.36.11;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	97.09.16.13.57.50;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	97.01.06.18.36.46;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	96.09.19.18.27.47;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.09.55;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.04;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.35
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C    RDPRMC.F -- CREATED FROM RDPRMB.F          08/15/89 ARDEAN LEITH
C                REWRITTEN                       03/4/98 ARDEAN LEITH
C                LENGTHENED ANST                11/17/00 ARDEAN LEITH
C                SKIP BLANK LINE ECHO VERBOSE    03/7/02 ARDEAN LEITH
C                IQ P SPECIAL LINES             06/26/02 ARDEAN LEITH
C                NLOG                           11/26/03 ARDEAN LEITH
C                NO INITIAL BLANKS ON ECHO      03/30/05 ARDEAN LEITH
C                .OPERATION.... BUG             05/25/05 ARDEAN LEITH
C                RDPR PARAMETERS                04/14/05 ARDEAN LEITH
C                TO NOUT ALWAYS                 02/21/06 ARDEAN LEITH
C                IF (FCHAR(1:2) == 'FR'         07/31/06 ARDEAN LEITH
C                DEBRAKREG                      09/05/06 ARDEAN LEITH
C                IF (FCHAR(1:4) == 'FR N'       08/28/09 ARDEAN LEITH
C                NECHO                          09/20/12 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  RDPRMC(ANS,NCHAR,STRIP,PROMPT,CDUM,IRTFLG)
C
C  PURPOSE: READ AN ALPHANUMERIC STRING, CHECK FOR ANY SPECIAL OPERATION,
C           RETURN STRING MINUS ANY LEADING OR TRAILING BLANKS, AND NUMBER
C           OF CHARACTERS IN STRING AND A ERROR FLAG.  NORMALLY CONVERTS
C           INPUT TO UPPER CASE.  STRIPS OFF ANY TRAILING SPIDER COMMENT
C
C  PARAMETERS:  ANS       ANSWER                                    RET.
C               NCHAR     NUMBER OF CHARACTERS IN THE ANSWER        RET.
C               STRIP     LOGICAL FLAG TO STRIP BLANKS FROM ANS    SENT
C               PROMPT    SOLICITATION MESSAGE                     SENT
C               CDUM                                             (UNUSED)
C               IRTFLG    RETURN FLAG                          SENT/RET.
C                           (0 IS NORMAL, -1 IS GOTO PREVIOUS
C                           QUESTION, 1 IS END-OF_FILE) 
C                           IRTFLG: -999 ON INPUT
C                           DOES NOT CONVERT INPUT TO UPPERCASE
C
C  CALLED BY:   VERY MANY SPIDER ROUTINES
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE RDPRMC(ANS,NCHAR,STRIP,PROMPT,CDUM,IRTFLG)

	INCLUDE 'CMBLOCK.INC' 

        CHARACTER(LEN=*)     :: ANS,PROMPT,CDUM
        CHARACTER(LEN=161)   :: ANST
        LOGICAL              :: STRIP,GETANS
        LOGICAL              :: UPPER,WANTSUB,SAYPRMT,SAYANS,ENDATSEMI

        CALL SET_MPI(ICOMM,MYPID,MPIERR) ! SETS ICOMM AND MYPID

C       SEE IF WANT TO KEEP LOWER CASE INPUT UNALTERED
        GETANS    = .TRUE.
        UPPER     = (IRTFLG .NE. -999)

C       WANT TO SUBSTITUTE FOR VARIABLES NOW?
        WANTSUB   = .TRUE. 
        IF ((FCHAR(1:2) == 'FR' .AND. NALPH <= 2) .OR.
     &      (FCHAR(1:4) == 'FR T')  .OR. 
     &      (FCHAR(1:4) == 'FR N')  .OR.
     &      (FCHAR(1:2) == 'AR')) WANTSUB = .FALSE.
 
        SAYPRMT   = .NOT. SILENT
        SAYANS    = .FALSE.
        ENDATSEMI = .TRUE.

        IRTFLG = 0

C       MOVE BLANKS TO THE ANSWER STRING, NECESSARY FOR SOME SPIDER CODE
        LENA = LEN(ANS)
        ANS(1:LENA) = ' '
    
C       PRINT PROMPT, READ ANSWER STRING, SKIP ANY INPUT WHICH HAS
C       COMMENT IN FIRST COL. AND READ ANOTHER INPUT LINE
        CALL RDPR(PROMPT,NCHAR,ANST,GETANS,
     &            UPPER,WANTSUB,SAYPRMT,SAYANS,ENDATSEMI,STRIP,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (NCHAR <= 0) THEN
C          IF NULL ANSWER STRING, MUST RETURN ZERO LENGTH ANSWER
           IF (MYPID <= 0) THEN
              WRITE(NOUT,*) ' '
	      IF (NLOG .NE. 0) THEN
                 WRITE(NLOG,*) ' '
                 NECHO = NECHO + 1
              ENDIF
           ENDIF
           RETURN
        ENDIF

C       SET RETURNED ANSWER, TRUNCATE TO FIT LENGTH OF ANS IN CALL
        IF (NCHAR > LENA) NCHAR       = LENA
        IF (NCHAR > 0)   ANS(1:NCHAR) = ANST(1:NCHAR)

        NLET = NCHAR
	IF (.NOT. SILENT .AND. MYPID <= 0) THEN
           IF (NCHAR > 0) THEN
C             CONVERT [_x**] BACK TO X** FOR ECHO
              CALL DEBRAKXREG(ANST,NLET)

              IF (COPT == 'I') THEN 
                 WRITE(NOUT,92) ANST(1:NLET)
 92              FORMAT(5X,A)
              ELSE
                 WRITE(NOUT,90) ANST(1:NLET)
 90              FORMAT('  ',A)
              ENDIF
           ENDIF
        ENDIF
        IF (NLOG .NE. 0 .AND. MYPID <= 0 .AND. NLET > 0) THEN 
            WRITE(NLOG,*) ANST(1:NLET)
            NECHO = NECHO + 1
         ENDIF

        IF (ANS(1:1) == '^' .AND. NCHAR == 1) IRTFLG = -1

	END
@


1.34
log
@==
@
text
@d25 1
a25 1
C=* Email: spider@@wadsworth.org                                        *
@


1.33
log
@necho
@
text
@d14 1
a14 1
C                IF (FCHAR(1:2) .EQ. 'FR'       07/31/06 ARDEAN LEITH
d16 1
a16 1
C                IF (FCHAR(1:4) .EQ. 'FR N'     08/28/09 ARDEAN LEITH
d23 1
a23 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d81 4
a84 4
        IF ((FCHAR(1:2) .EQ. 'FR' .AND. NALPH .LE. 2) .OR.
     &      (FCHAR(1:4) .EQ. 'FR T')  .OR. 
     &      (FCHAR(1:4) .EQ. 'FR N')  .OR.
     &      (FCHAR(1:2) .EQ. 'AR')) WANTSUB = .FALSE.
d102 1
a102 1
        IF (NCHAR .LE. 0) THEN
d104 1
a104 1
           IF (MYPID .LE. 0) THEN
d115 2
a116 2
        IF (NCHAR .GT. LENA) NCHAR       = LENA
        IF (NCHAR .GT. 0)   ANS(1:NCHAR) = ANST(1:NCHAR)
d119 2
a120 2
	IF (.NOT. SILENT .AND. MYPID .LE. 0) THEN
           IF (NCHAR .GT. 0) THEN
d124 1
a124 1
              IF (COPT .EQ. 'I') THEN 
d138 1
a138 1
        IF (ANS(1:1) .EQ. '^' .AND. NCHAR .EQ. 1) IRTFLG = -1
@


1.32
log
@GPL_2010
@
text
@d17 1
d23 1
a23 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d106 4
a109 1
	      IF (NLOG .NE. 0) WRITE(NLOG,*) ' '
d133 4
a136 2
        IF (NLOG .NE. 0 .AND. MYPID .LE. 0 .AND. NLET .GT. 0) 
     &      WRITE(NLOG,*) ANST(1:NLET)
@


1.31
log
@special code for: FR N
@
text
@d19 4
a22 3
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
C=* Copyright 1985-2009  Health Research Inc.                          *
d33 1
a33 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a34 1
C=*                                                                    *
d36 1
a36 1
C=* along with this program. If not, see <http://www.gnu.org/licenses> *       
@


1.30
log
@*** empty log message ***
@
text
@d16 2
a17 1

d19 5
a23 5
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
C=*                                                                    *
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d25 1
a25 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d30 1
a30 1
C=* This program is distributed in the hope that it will be useful,    *
d36 1
a36 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d72 1
a72 7
#ifdef USE_MPI
        include 'mpif.h'
        icomm = MPI_COMM_WORLD
        call MPI_COMM_RANK(icomm, mypid, ierr)
#else
        mypid = -1
#endif
d77 2
d80 5
a84 3
        IF (FCHAR(1:2) .EQ. 'AR') WANTSUB = .FALSE.
        IF (FCHAR(1:2) .EQ. 'FR' .AND. NALPH .LE. 2) WANTSUB = .FALSE.
        IF (FCHAR(1:4) .EQ. 'FR T') WANTSUB = .FALSE.
@


1.29
log
@added debrakreg echo
@
text
@d89 1
@


1.28
log
@IF (FCHAR(1:2) .EQ. 'FR'
@
text
@d14 2
a15 1
C               IF (FCHAR(1:2) .EQ. 'FR'        07/31/06 ARDEAN LEITH
d118 1
d120 11
a130 6
           IF (COPT .EQ. 'I') THEN 
              WRITE(NOUT,92) ANS(1:NCHAR)
 92           FORMAT(5X,A)
           ELSE
              WRITE(NOUT,90) ANS(1:NCHAR)
 90           FORMAT('  ',A)
d133 2
a134 1
        IF (NLOG .NE. 0.AND. MYPID .LE. 0) WRITE(NLOG,*) ANS(1:NCHAR)
@


1.27
log
@wantsub not for ar operation
@
text
@d5 11
a15 10
C             -- REWRITTEN                       03/4/98 ARDEAN LEITH
C             -- LENGTHENED ANST                11/17/00 ARDEAN LEITH
C             -- SKIP BLANK LINE ECHO VERBOSE    03/7/02 ARDEAN LEITH
C             -- IQ P SPECIAL LINES             06/26/02 ARDEAN LEITH
C             -- NLOG                           11/26/03 ARDEAN LEITH
C             -- NO INITIAL BLANKS ON ECHO      03/30/05 ARDEAN LEITH
C             -- .OPERATION.... BUG             05/25/05 ARDEAN LEITH
C             -- RDPR PARAMETERS                04/14/05 ARDEAN LEITH
C             -- TO NOUT ALWAYS                 02/21/06 ARDEAN LEITH
C
d87 1
@


1.26
log
@nout echo even if verbose now
@
text
@d85 1
@


1.25
log
@native named registers
@
text
@d13 1
d105 1
a105 1
	      IF (NLOG .NE. 0) WRITE(NLOG,91) ' '
d110 4
d116 1
a116 1
              WRITE(NOUT,92) ANST(1:NCHAR)
d118 2
a119 2
           ELSEIF (VERBOSE) THEN
              WRITE(NOUT,90) ANST(1:NCHAR)
d123 1
a123 8

C       IF A LOG FILE EXISTS, WRITE ANSWER STRING THERE
	IF (NLOG .NE. 0 .AND. MYPID .LE. 0)WRITE(NLOG,91) ANST(1:NCHAR)
 91     FORMAT(A)

C       SET RETURNED ANSWER, TRUNCATE TO FIT LENGTH OF ANS IN CALL
        IF (NCHAR .GT. LENA) NCHAR = LENA
        IF (NCHAR .GT. 0) ANS(1:NCHAR) = ANST(1:NCHAR)
a126 1
        RETURN
@


1.24
log
@named register support
@
text
@a66 1

d81 1
d83 1
a83 1
        WANTSUB   = (FCHAR(1:2)  .NE. 'FR') 
d85 1
a85 1
        SAYANS    = (PROMPT(1:9) .EQ. 'OPERATION')
a86 1
        GETANS    = .TRUE.
d97 1
a97 1
     &            UPPER,WANTSUB,SAYPRMT,SAYANS,ENDATSEMI, IRTFLG)
d109 7
a115 48
C       I1 IS STARTING CHAR NO. OF DESIRED ANSWER, I2 IS ENDING CHAR NO.
        NCHART = NCHAR
        I1     = 1
        I2     = NCHAR

        IF (STRIP) THEN
C          REMOVE LEADING AND TRAILING NON-PRINTING CHAR. FROM ANSWER

           DO WHILE (I2 .GE. 2 .AND.
     &              (ANST(I2:I2) .LT. '!' .OR. ANST(I2:I2) .GT. '~'))
C             TRAILING CHARACTER IS BLANK, NON-PRINTING, TAB, NULL, ETC.
              I2 = I2 - 1
           ENDDO

           DO WHILE (I1 .LE. I2 .AND.
     &              (ANST(I1:I1) .LT. '!' .OR. ANST(I1:I1) .GT. '~'))
C             LEADING CHARACTER IS BLANK, NON-PRINTING, TAB, NULL, ETC.
              I1 = I1 + 1
           ENDDO
           NCHAR  = I2 - I1 + 1
        ENDIF

	IF (FCHAR(:4) .EQ. 'IQ P') THEN
C          ECHO COMMENT ONLY
           IF (MYPID .LE. 0) THEN
              LOCSEMI = INDEX(ANST(1:NCHART),';') 
              IF (LOCSEMI .GT. 0) THEN
                  WRITE(NOUT,*) ANST(LOCSEMI:NCHART)
              ELSE
                  WRITE(NOUT,*) ' '
              ENDIF
           ENDIF

	ELSEIF (NTRACE .LT. 0 .OR. .NOT. SILENT) THEN
C          INPUT TRACE WANTED OR .NOT. SILENT
C          ECHO IF INTERACTIVE OR VERBOSE OR NON-OPERATION OR NCHAR>0

           IF (MYPID .LE. 0) THEN
              IF ((PROMPT(1:9) .NE. 'OPERATION') .AND.
     &            (COPT .EQ. 'I' .OR. VERBOSE)) THEN
                 IF (COPT .EQ. 'I') THEN 
                    WRITE(NOUT,92) ANST(I1:I2)
 92                 FORMAT(5X,A)
                 ELSE
                    WRITE(NOUT,90) ANST(I1:I2)
 90                 FORMAT('  ',A)
                 ENDIF
              ENDIF
d119 2
a120 2
C       IF A LOG FILE EXISTS, ALSO WRITE THE ANSWER STRING THERE
	IF (NLOG .NE. 0 .AND. MYPID .LE. 0)WRITE(NLOG,91) ANST(1:NCHART)
d125 1
a125 1
        IF (NCHAR .GT. 0)    ANS(1:NCHAR) = ANST(I1:I2)
@


1.23
log
@GPL License fixed
@
text
@d4 2
a5 2
C    RDPRMC.F -- CREATED FROM RDPRMB.F           8/15/89 ARDEAN LEITH
C             -- REWRITTEN                        3/4/98 ARDEAN LEITH
d7 2
a8 2
C             -- SKIP BLANK LINE ECHO VERBOSE     3/7/02 ARDEAN LEITH
C             -- IQ P SPECIAL LINES              6/26/02 ARDEAN LEITH
d10 3
a12 2
C             -- NO INITIAL BLANKS ON ECHO       3/30/05 ARDEAN LEITH
C             -- .OPERATION.... BUG              5/25/05 ARDEAN LEITH
d60 2
a61 1
C--*******************************************************************
d67 6
a72 3
        CHARACTER *(*)  ANS,PROMPT,CDUM
        CHARACTER * 161 ANST
        LOGICAL         UPPER,STRIP,SAYIT
d82 7
a88 1
        UPPER  = (IRTFLG .NE. -999)
d97 2
a98 2
        SAYIT = .NOT. SILENT
        CALL RDPR(PROMPT,NCHAR,ANST,UPPER,SAYIT,IRTFLG)
d148 3
a150 5
              IF ((PROMPT(1:9) .NE. 'OPERATION') .OR.
     &            (NCHAR .GT. 0) .OR. 
     &            (COPT .EQ. 'I' .OR. 
     &             VERBOSE)) THEN
                 IF (COPT .EQ. 'I') THEn 
d152 1
d155 1
a158 2
 92        FORMAT(5X,A)
 90   	   FORMAT(A)
d162 1
a162 2
	IF (NLOG .NE. 0 .AND. MYPID .LE. 0) 
     &      WRITE(NLOG,91) ANST(1:NCHART)
d167 1
a167 1
        IF (NCHAR .GT. 0) ANS(1:NCHAR) = ANST(I1:I2)
@


1.22
log
@HRI GPL License used
@
text
@a2 1
C++*************************************************************************
a13 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d17 1
a17 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a36 6

C * COPYRIGHT (C)1985, 2005. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.21
log
@OPERATION run on in results file if batch mode fixed
@
text
@d2 1
d16 24
@


1.20
log
@echo in interatctive offset 5 spaces
@
text
@d11 1
d15 1
a15 1
C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
d121 3
a123 1
     &            (COPT .EQ. 'I' .OR. VERBOSE)) THEN
@


1.19
log
@NO INITIAL BLANKS ON ECHO
@
text
@d120 7
a126 2
     &            (COPT .EQ. 'I' .OR. VERBOSE))
     &           WRITE(NOUT,90) ANST(I1:I2)
d128 1
a128 1
C90   	   FORMAT(5X,A)
@


1.18
log
@NLOG
@
text
@d10 1
d52 2
a53 3
        integer mypid, comm, ierr
        comm = MPI_COMM_WORLD
        call MPI_COMM_RANK(comm, mypid, ierr)
a71 1
        NCHART = NCHAR
d74 27
a100 2
           ANST(1:1) = ' '
           NCHART = 1
a104 2
           LOCSEMI = INDEX(ANST(1:NCHART),';') 

d106 1
d120 2
a121 2
     &            ((COPT .EQ. 'I') .OR. (NCHAR .GT. 0) .OR. VERBOSE))
     &           WRITE(NOUT,90) ANST(1:NCHART)
d123 2
a124 1
 90   	   FORMAT(5X,A)
a131 26
C       IF NULL ANSWER STRING, MUST RETURN ZERO LENGTH ANSWER
        IF (NCHAR .LE. 0) RETURN


C       I1 IS STARTING CHAR NO. OF DESIRED ANSWER, I2 IS ENDING CHAR NO.
        I1 = 1
        I2 = NCHAR

        IF (STRIP) THEN
C          REMOVE LEADING AND TRAILING NON-PRINTING CHAR. FROM ANSWER

           DO WHILE (I2 .GE. 2 .AND.
     &              (ANST(I2:I2) .LT. '!' .OR. ANST(I2:I2) .GT. '~'))
C             TRAILING CHARACTER IS BLANK, NON-PRINTING, TAB, NULL, ETC.
              I2 = I2 - 1
           ENDDO

           DO WHILE (I1 .LE. I2 .AND.
     &              (ANST(I1:I1) .LT. '!' .OR. ANST(I1:I1) .GT. '~'))
C             LEADING CHARACTER IS BLANK, NON-PRINTING, TAB, NULL, ETC.
              I1 = I1 + 1
           ENDDO
        ENDIF

        NCHAR  = I2 - I1 + 1

@


1.17
log
@mpi
@
text
@d9 1
d54 2
d82 7
a88 7
#ifdef USE_MPI
           if (mypid .eq. 0) then
#endif
           IF (LOCSEMI .GT. 0) THEN
               WRITE(NOUT,*) ANST(LOCSEMI:NCHART)
           ELSE
               WRITE(NOUT,*) ' '
d90 1
a90 3
#ifdef USE_MPI
           endif
#endif
d94 6
a99 11
#ifdef USE_MPI
           if (mypid .eq. 0) then
           IF ((PROMPT(1:9) .NE. 'OPERATION') .OR.
     &         ((COPT .EQ. 'I') .OR. (NCHAR .GT. 0) .OR. VERBOSE))
     &        WRITE(NOUT,90) ANST(1:NCHART)
           endif
#else
           IF ((PROMPT(1:9) .NE. 'OPERATION') .OR.
     &         ((COPT .EQ. 'I') .OR. (NCHAR .GT. 0) .OR. VERBOSE))
     &        WRITE(NOUT,90) ANST(1:NCHART)
#endif
a100 1
c90   	   FORMAT(5X,'%%%-1',A)
d104 2
a105 6
#ifdef USE_MPI
	IF (NPROC .NE. 0 .and. mypid .eq. 0) 
     &      WRITE(NPROC,91) ANST(1:NCHART)
#else
	IF (NPROC .NE. 0) WRITE(NPROC,91) ANST(1:NCHART)
#endif
@


1.16
log
@sympar
.
@
text
@d48 6
d79 3
d87 3
d93 2
d98 6
d109 4
d114 1
a150 1

@


1.15
log
@iq par special lines
@
text
@d70 2
a71 1
	IF (FCHAR(:4) .EQ. 'IQ P' .AND. COPT .EQ. 'B') THEN
d82 1
a82 1
     &         (COPT .EQ. 'I') .OR. (NCHAR .GT. 0) .OR. VERBOSE)
d85 1
@


1.14
log
@skip empty operation: prompt in batch results file
@
text
@d8 1
d70 8
a77 1
	IF (NTRACE .LT. 0 .OR. .NOT. SILENT) THEN
d86 1
a86 1
C       IF A LOG FILE EXISTS WRITE THE ANSWER STRING THERE
@


1.13
log
@SKIP BLANK LINE ECHO VERBOSE bug fixed
@
text
@d72 1
a72 1
           IF ((PROMPT(1:11) .NE. 'OPERATION:') .OR.
@


1.12
log
@bad if continuation
@
text
@d72 1
a72 1
           IF ((PROMPT(1:11) .NE. '.OPERATION:') .OR.
@


1.11
log
@verbose altered
@
text
@d74 1
a74 1
              WRITE(NOUT,90) ANST(1:NCHART)
@


1.10
log
@NECHO --> NOUT
@
text
@d4 13
a16 12
C    RDPRMC.F -- CREATED 8/15/89 al FROM RDPRMB.F ARDEAN LEITH
C             -- REWRITTEN 3/4/98 ARDEAN LEITH
C             -- LENGTHENED ANST 11/17/00 ARDEAN LEITH
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d23 1
a23 1
C           INPUT TO UPPER CASE.  STRIPS OFF any TRAILING SPIDER COMMENT
d25 10
a34 8
C  PARAMETERS:  ANS       ANSWER
C               NCHAR     NUMBER OF CHARACTERS IN THE ANSWER
C               STRIP     LOGICAL FLAG TO STRIP BLANKS FROM ANS
C               PROMPT    SOLICITATION MESSAGE
C               CDUM      (UNUSED)
C               IRTFLG    RETURN FLAG (0 IS NORMAL, -1 IS GOTO PREVIOUS
C                              QUESTION, 1 IS END-OF_FILE ON INPUT
C                              -999 DOES NOT CONVERT INPUT TO UPPERCASE
d36 1
a36 1
C  CALLED BY:   MANY SPIDER ROUTINES
a37 2
C  CALLS:       MENULU  
C
d71 4
a74 1
           WRITE(NOUT,90) ANST(1:NCHART)
@


1.9
log
@comment is already not in nchar
@
text
@d70 1
a70 1
           WRITE(NECHO,90) ANST(1:NCHART)
@


1.8
log
@lengthened anst
@
text
@a85 4
C       OMIT COMMENT SECTION AT END OF STRING (IF ANY) FROM ANSWER RET.
        ISEMI = INDEX(ANST,';')
        IF (ISEMI .GE. 2 .AND. ISEMI .LE. NCHAR) I2 = ISEMI - 1

@


1.7
log
@strips spaces after input but before ; correct now
@
text
@d4 3
a6 3
C    RDPRMC.FOR -- CREATED 8/15/89 al FROM RDPRMB.FOR
C               -- REWRITTEN 3/4/98 al
C
d43 3
a45 3
        CHARACTER *(*) ANS,PROMPT,CDUM
        CHARACTER * 81 ANST
        LOGICAL        UPPER,STRIP,SAYIT
@


1.6
log
@ strips comments now, menulu removed
@
text
@a40 1
CNO_SAVE
d88 1
a88 1
        IF (ISEMI .GE. 2) I2 = ISEMI - 1
@


1.5
log
@used ans in echo now
@
text
@d5 1
d22 1
a22 1
C           INPUT TO UPPER CASE.
a45 1
        CHARACTER * 75 QUOTE
d49 2
a50 1
        UPPER = (IRTFLG .NE. -999)
d56 2
a57 1
C       PRINT PROMPT, READ ANSWER STRING, SKIP COMMENTS
d62 18
a79 1
C       IF NULL ANSWER STRING, RETURN ZERO LENGTH ANSWER
d82 9
d92 13
a104 24
C         REMOVE LEADING AND TRAILING BLANKS AND NULLS
          I2 = lnblnk(ANST(1:NCHAR))
          IF (I2 .LE. 0) THEN
C            ANSWER IS ALL BLANKS, TREAT AS A NULL ANSWER
             NCHAR = 0
             RETURN
          ENDIF

          DO  I1 = 1,I2
             IF (ANST(I1:I1) .NE. ' ') GOTO 60
          ENDDO

   60     CONTINUE
C         I1 IS STARTING CHAR NO. OF NONBLANK ANSWER, I2 IS ENDING CHAR NO.
          NCHAR  = I2 - I1 + 1

C         SET RETURNED ANSWER, TRUNCATE TO FIT LENGTH OF ANS IN CALL
          IF (NCHAR .GT. LENA) NCHAR = LENA
          ANS(1:NCHAR) = ANST(I1:I2)

        ELSE
C         DO NOT REMOVE LEADING AND TRAILING BLANKS
          IF (NCHAR .GT. LENA) NCHAR = LENA
          ANS(1:NCHAR) = ANST(1:NCHAR)
d107 1
a107 17
	IF (NTRACE .GE. 0 .OR. PROMPT(1:2) .NE. 'OP') THEN
C          TRACE TURNED OFF, JUST ECHO THE ANSWERS 
           IF (.NOT. SILENT) WRITE(NECHO,91) ANS(1:NCHAR)
 91   	   FORMAT(5X,A)

        ELSE
C          TRACE TURNED ON, ECHO THE ANSWER AND MENU QUOTE
C          LOOKS FOR UPPER CASE VERSION OF ANS TO MATCH .MAN FILENAME
           CALL MENULU(ANS,2,QUOTE,NQUOT)
           IF (NQUOT .GT. 0) THEN
              NQUOT = MIN(NQUOT,50)
              WRITE(NECHO,94) ANS(1:NCHAR), QUOTE(1:NQUOT)
 94           FORMAT(5X,A,' --  ',A)
           ELSE
              WRITE(NECHO,91) ANS(1:NCHAR)
           ENDIF
        ENDIF
d109 3
a111 3
C       IF A LOG FILE EXISTS WRITE THE ANSWER STRING THERE
	IF (NPROC .NE. 0) WRITE(NPROC,93) ANS(1:NCHAR)
93      FORMAT(A)
@


1.4
log
@used rdpr for ; handling
@
text
@d92 1
a92 1
           IF (.NOT. SILENT) WRITE(NECHO,91) ANST(1:NCHAR)
d101 1
a101 1
              WRITE(NECHO,94) ANST(1:NCHAR), QUOTE(1:NQUOT)
d104 1
a104 1
              WRITE(NECHO,91) ANST(1:NCHAR)
@


1.3
log
@silent added
@
text
@d16 1
a16 1
C    RDPRMC(ANS,NCHAR,STRIP,PROMPT,CDUM,IRTFLG)
d18 4
a21 4
C    PURPOSE: READ AN ALPHANUMERIC STRING, CHECK FOR ANY SPECIAL OPERATION,
C             RETURN STRING MINUS ANY LEADING OR TRAILING BLANKS, AND NUMBER
C             OF CHARACTERS IN STRING AND A ERROR FLAG.  NORMALLY CONVERTS
C             INPUT TO UPPER CASE.
d23 8
a30 8
C    PARAMETERS:    ANS       ANSWER
C                   NA        NUMBER OF CHARACTERS IN THE ANSWER
C                   STRIP     LOGICAL FLAG TO STRIP BLANKS FROM ANS
C                   PROMPT    SOLICITATION MESSAGE
C                   CDUM      (UNUSED)
C                   IRTFLG    RETURN FLAG (0 IS NORMAL, -1 IS GOTO PREVIOUS
C                                  QUESTION, 1 IS END-OF_FILE ON INPUT
C                             -999 DOES NOT COVERT INPUT TO UPPERCASE
d32 1
a32 1
C    CALLED BY:     MANY SPIDER ROUTINES
d34 1
a34 1
C    CALLS:         MENULU  
d38 1
a38 1
        SUBROUTINE RDPRMC(ANS,NA,STRIP,PROMPT,CDUM,IRTFLG)
d40 1
a42 2
        LOGICAL        STRIP

d46 4
a49 14
        CHARACTER * 16 FMT2
	CHARACTER * 1  NULL
        LOGICAL        UPPER

C       COL NO:     123456789012345678901234567890
        DATA FMT2 /'($,'' .'',A  '': '')'/

	NULL = CHAR(0)
        IF (IRTFLG .EQ. -999) THEN
C          WANT TO ACCEPT LOWER CASE INPUT AS WELL AS UPPER
           UPPER = .FALSE.
        ELSE
           UPPER = .TRUE.
        ENDIF
d51 8
a58 2
C       SET NORMAL RETURN FLAG
        IRTFLG = 0
d60 2
a61 23
C       PROCESS PROMPT
        NP = INDEX(PROMPT,'$') - 1
        IF (NP .LE. 0) NP = LEN(PROMPT)

C       PRINT THE PROMPT
  20    WRITE(FMT2(10:11),8001) NP
	IF (.NOT. SILENT) WRITE(NOUT,FMT2) PROMPT(1:NP)
8001    FORMAT(I2)

C       MOVE BLANKS TO THE ANSWER STRING
  22    LENA = LEN(ANS)
        ANS(1:LENA) = ' '    
        
C       READ ANSWER STRING
        CALL READCH(PROMPT(:NP),NIN,NCHAR,ANST,UPPER,IRTFLG)

        IF (IRTFLG .EQ. 1) THEN
C          RETURN OR STOP ON END_OF_FILE
           CALL ERRT(17,'RDPRMC',NE)
           NCHAR = 0
           RETURN
        ENDIF
        ANST(NCHAR+1:NCHAR+1) = NULL
d64 11
a74 17
C..       REMOVE LEADING AND TRAILING BLANKS AND NULLS
          DO 50 I = 1,NCHAR
            IF (ANST(I:I) .NE. ' ') THEN
              I1 = I
              I2 = I
              DO 51 J = NCHAR,I,-1
                IF (ANST(J:J) .NE. ' ') THEN
                  I2 = J
                  GOTO 60
                ENDIF
   51         CONTINUE
            ENDIF
   50     CONTINUE
C         ANSWER IS ALL BLANKS, TREAT AS A NULL ANSWER
          NA = 0
          RETURN

d78 1
a78 1
          NA  = I2 - I1 + 1
d81 2
a82 2
          IF (LENA .LT. NA) NA = LENA
          ANS(1:NA) = ANST(I1:I2)
d86 2
a87 15
          I1 = 1
          I2 = NCHAR
          NA = NCHAR
          IF (LENA .LT. NA) NA = LENA
          ANS(1:NA) = ANST(1:NA)
        ENDIF

C       UPDATE THE BATCH COUNTER
	IBCNT = IBCNT+1


        IF (NCHAR .LE. 0) THEN
C          NULL ANSWER STRING, RETURN ZERO LENGTH ANSWER
           NA = 0
           RETURN
d91 3
a93 3
C         TRACE TURNED OFF, JUST ECHO THE ANSWERS 
          IF (.NOT. SILENT) WRITE(NECHO,3) ANST(1:NA)
3     	  FORMAT(5X,A)
d101 1
a101 1
              WRITE(NECHO,94) ANST(1:NA), QUOTE(1:NQUOT)
d104 1
a104 1
              WRITE(NECHO,3) ANST(1:NA)
a107 1

d109 1
a109 1
	IF (NPROC .NE. 0) WRITE(NPROC,93) ANS(1:NA)
d112 2
a113 1
        IF (ANS(1:1) .EQ. '^' .AND. NA .EQ. 1) IRTFLG = -1
a114 1

@


1.2
log
@cpp_lines_added
@
text
@d20 2
a21 1
C             OF CHARACTERS IN STRING AND A ERROR FLAG.
d27 1
a27 1
C                   HELPFI    NAME OF RELEVANT HELP FILE
d30 1
a39 1
#ifdef SP_UNIX
a40 3
#else
	INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
a60 2
C*C        ALWAYS ALLOW UPPER AND LOWER CASE INPUT...
C*         UPPER = .FALSE.
d71 1
a71 1
	WRITE(NOUT,FMT2) PROMPT(1:NP)
a78 4
C	CHANGE 3/23/93 BY MAHIEDDINE LADJADJ
C        CALL READCH(NIN,NCHAR,ANST(1:NCHAR),UPPER,IRTFLG)
C       CHANGE 3/29/93 TO ADD ON-LINE HELP
C
d137 1
a137 1
          WRITE(NECHO,3) ANST(1:NA)
@


1.1
log
@Initial revision
@
text
@d38 3
d42 1
@
