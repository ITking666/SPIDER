head	1.12;
access;
symbols
	pre_getangas:1.12
	GPL2010:1.12
	pre_GPL2010:1.11
	pre_var_equation:1.11
	pre_fftwrings:1.11
	pre_opfiles:1.11
	src:1.11
	best-code:1.11
	x-named-regs:1.11
	x:1.11
	v13-00:1.11
	pre_GPL:1.9
	prec_CA:1.9
	noindx:1.9
	Bproc:1.5
	oct21:1.4
	last77:1.4;
locks; strict;
comment	@c @;


1.12
date	2010.06.24.13.26.35;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.17.20.21.36;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.17.18.14.07;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.13.15.33.31;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.06.15.31.57;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.06.15.10.19;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.05.13.18.16;	author bimal;	state Exp;
branches;
next	1.5;

1.5
date	99.11.10.23.11.16;	author yuchen;	state Exp;
branches;
next	1.4;

1.4
date	97.10.10.18.59.59;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.10.22.15.08.37;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	96.08.30.18.08.15;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	96.08.27.14.06.05;	author pawel;	state Exp;
branches;
next	;


desc
@simple 3D PW
@


1.12
log
@GPL_2010
@
text
@C++*********************************************************************
C
C PW3SR.F                       HALF BUG FIXED FEB 02 ArDean Leith
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C PW3SR(Q,NSAM,NROW,NSLICE,MODE)
C
C PURPOSE: POWER SPECTRUM OF VOLUME
C
C IMAGE_PROCESSING_ROUTINE
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE PW3SR(Q,NSAM,NROW,NSLICE,MODE)

        DIMENSION    Q(NSAM+2-MOD(NSAM,2),NROW,NSLICE)
        CHARACTER*1  MODE
        LOGICAL*1    IFND,IFNL

        NNNN  = NSAM+2-MOD(NSAM,2)
        IFND  = MOD(NROW,2).EQ.0
        IFNL  = MOD(NSLICE,2).EQ.0
        NSC   = NSAM/2+1

        SCL = 2.0/FLOAT(NSAM)/FLOAT(NROW)/FLOAT(NSLICE)

        DO K=1,NSLICE
	   IF (MODE .EQ. '2')  THEN
              DO J=1,NROW
                 DO I=NNNN-1,1,-2
                    Q(NNNN-1-(NNNN-1-I)/2,J,K) =
     &               SCL*SCL*(Q(I+1,J,K)*Q(I+1,J,K)+Q(I,J,K)*Q(I,J,K))
                 ENDDO
              ENDDO

	   ELSE
              DO J=1,NROW
                 DO I=NNNN-1,1,-2
                    Q(NNNN-1-(NNNN-1-I)/2,J,K) =
     &               SCL*SQRT(Q(I+1,J,K)*Q(I+1,J,K)+Q(I,J,K)*Q(I,J,K))
                 ENDDO
              ENDDO
	   ENDIF
        ENDDO

        DO K=1,NSLICE
           DO J=1,NROW/2
              JJ = J+NROW/2+MOD(NROW,2)
              DO I=NSC,NNNN-1
                 TEMP      = Q(I,J,K)
                 Q(I,J,K)  = Q(I,JJ,K)
                 Q(I,JJ,K) = TEMP
              ENDDO
           ENDDO
        ENDDO

        IF (.NOT. IFND)  THEN
           DO K=1,NSLICE
              DO I=NSC,NNNN-1
                 TEMP = Q(I,NROW/2+1,K)
                 DO J=NROW/2+1,NROW-1
                    Q(I,J,K) = Q(I,J+1,K)
                 ENDDO
                 Q(I,NROW,K) = TEMP
              ENDDO
           ENDDO
        ENDIF   

        DO K=1,NSLICE/2
           KK=K+NSLICE/2+MOD(NSLICE,2)
           DO J=1,NROW
              DO I=NSC,NNNN-1
                 TEMP      = Q(I,J,K)
                 Q(I,J,K)  = Q(I,J,KK)
                 Q(I,J,KK) = TEMP
              ENDDO
           ENDDO
        ENDDO

        IF (.NOT. IFNL)  THEN
           DO J=1,NROW
              DO I=NSC,NNNN-1
                 TEMP=Q(I,J,NSLICE/2+1)
                 DO K=NSLICE/2+1,NSLICE-1
                    Q(I,J,K)   = Q(I,J,K+1)
                 ENDDO
                 Q(I,J,NSLICE) = TEMP
              ENDDO
           ENDDO
        ENDIF   

        NSC = NNNN/2-1
        NSL = NSLICE/2
        IF (IFND)  THEN
           IF (IFNL)  THEN
              KB=2
              DO I=1,NSC
                 II=NNNN-I
                 Q(I,1,1) = Q(II,1,1)
              ENDDO
           ELSE
              KB=1
           ENDIF

           JB = 2
           DO K=KB,NSLICE
              KK=NSLICE-K+KB
              DO I=1,NSC
                 II       = NNNN-I
                 Q(I,1,K) = Q(II,1,KK)
              ENDDO
           ENDDO
        ELSE
           JB=1
        ENDIF

        IF (IFNL)  THEN
           KB=2
           DO J=JB,NROW
              JJ=NROW-J+JB
              DO I=1,NSC
                 II       = NNNN-I
                 Q(I,J,1) = Q(II,JJ,1)     
              ENDDO
           ENDDO
        ELSE
           KB=1
        ENDIF
        DO K=KB,NSLICE
           KK = NSLICE-K+KB
           DO J=JB,NROW
              JJ=NROW-J+JB
              DO I=1,NSC
                 II       = NNNN-I
                 Q(I,J,K) = Q(II,JJ,KK)
              ENDDO
           ENDDO
        ENDDO

        IF (MODE .EQ. 'L') CALL AL10(Q,NNNN*NROW*NSLICE)

	Q(NSAM/2+1,NROW/2+1,NSLICE/2+1) = Q(NSAM/2,NROW/2,NSLICE/2)

        END
@


1.11
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.10
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a5 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 6

C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a38 1
C--************************************************************************
@


1.9
log
@half blank bug fixed
@
text
@d1 1
d8 24
d46 1
@


1.8
log
@*** empty log message ***
@
text
@d3 1
a3 1
C $$ PW3SR.FOR
d5 8
a12 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
C **************************************************************************
d14 1
d16 1
a19 1
C        1         2         3         4         5         6         7
d22 4
a25 5
C
C $$ PW3SR.FOR
C
        SUBROUTINE  PW3SR(Q,NSAM,NROW,NSLICE,MODE)
        DIMENSION   Q(NSAM+2-MOD(NSAM,2),NROW,NSLICE)
d27 1
a27 1
        LOGICAL*1 IFND,IFNL
d29 15
d45 6
a50 38
        NNNN = NSAM+2-MOD(NSAM,2)
        IFND=MOD(NROW,2).EQ.0
        IFNL=MOD(NSLICE,2).EQ.0
        NSC=NSAM/2+1
C
C       DO  1  K=1,NSLICE
C       DO  1  J=1,NROW
C       NR=J+(K-1)*NROW
C1      CALL  REDLIN(LUN1,Q(1,J,K),NSAM,NR)
C       INV=+1
C       CALL  FMRS_3(Q,NSAM,NROW,NSLICE,INV)

        SCL=2.0/FLOAT(NSAM)/FLOAT(NROW)/FLOAT(NSLICE)
        DO    K=1,NSLICE
	IF(MODE.EQ.'2')  THEN
           DO    J=1,NROW
              DO    I=NNNN-1,1,-2
                 Q(NNNN-1-(NNNN-1-I)/2,J,K)=
     &          SCL*SCL*(Q(I+1,J,K)*Q(I+1,J,K)+Q(I,J,K)*Q(I,J,K))
              ENDDO
           ENDDO
           DO    J=1,NROW
              DO    I=NNNN-1,1,-2
                 Q(NNNN-1-(NNNN-1-I)/2,J,K)=
     &          SCL*SCL*(Q(I+1,J,K)*Q(I+1,J,K)+Q(I,J,K)*Q(I,J,K))
              ENDDO
           ENDDO
	ELSE
           DO    J=1,NROW
              DO    I=NNNN-1,1,-2
                 Q(NNNN-1-(NNNN-1-I)/2,J,K)=
     &          SCL*SQRT(Q(I+1,J,K)*Q(I+1,J,K)+Q(I,J,K)*Q(I,J,K))
              ENDDO
           ENDDO
           DO    J=1,NROW
              DO    I=NNNN-1,1,-2
                 Q(NNNN-1-(NNNN-1-I)/2,J,K)=
     &          SCL*SQRT(Q(I+1,J,K)*Q(I+1,J,K)+Q(I,J,K)*Q(I,J,K))
d52 1
a52 2
           ENDDO
	ENDIF
d55 7
a61 7
        DO    K=1,NSLICE
           DO    J=1,NROW/2
              JJ=J+NROW/2+MOD(NROW,2)
              DO    I=NSC,NNNN-1
                 TEMP=Q(I,J,K)
                 Q(I,J,K)=Q(I,JJ,K)
                 Q(I,JJ,K)=TEMP
d66 6
a71 6
        IF(.NOT.IFND)  THEN
           DO    K=1,NSLICE
              DO    I=NSC,NNNN-1
                 TEMP=Q(I,NROW/2+1,K)
                 DO    J=NROW/2+1,NROW-1
                    Q(I,J,K)=Q(I,J+1,K)
d73 1
a73 1
                 Q(I,NROW,K)=TEMP
d78 1
a78 1
        DO    K=1,NSLICE/2
d80 5
a84 5
           DO    J=1,NROW
              DO    I=NSC,NNNN-1
                 TEMP=Q(I,J,K)
                 Q(I,J,K)=Q(I,J,KK)
                 Q(I,J,KK)=TEMP
d89 3
a91 3
        IF(.NOT.IFNL)  THEN
           DO    J=1,NROW
              DO    I=NSC,NNNN-1
d93 2
a94 2
                 DO    K=NSLICE/2+1,NSLICE-1
                    Q(I,J,K)=Q(I,J,K+1)
d96 1
a96 1
                 Q(I,J,NSLICE)=TEMP
d101 4
a104 4
        NSC=NNNN/2-1
        NSL=NSLICE/2
        IF(IFND)  THEN
           IF(IFNL)  THEN
d106 1
a106 1
              DO    I=1,NSC
d108 1
a108 1
                 Q(I,1,1)=Q(II,1,1)
d113 3
a115 2
           JB=2
           DO    K=KB,NSLICE
d117 3
a119 3
              DO    I=1,NSC
                 II=NNNN-I
                 Q(I,1,K)=Q(II,1,KK)
d125 2
a126 1
        IF(IFNL)  THEN
d128 1
a128 1
           DO    J=JB,NROW
d130 3
a132 3
              DO    I=1,NSC
                 II=NNNN-I
                 Q(I,J,1)=Q(II,JJ,1)     
d138 3
a140 3
        DO    K=KB,NSLICE
           KK=NSLICE-K+KB
           DO    J=JB,NROW
d142 3
a144 3
              DO    I=1,NSC
                 II=NNNN-I
                 Q(I,J,K)=Q(II,JJ,KK)
d149 1
a149 1
        IF(MODE.EQ.'L')  CALL  AL10(Q,NNNN*NROW*NSLICE)
d151 2
a152 6
	Q(NSAM/2+1,NROW/2+1,NSLICE/2+1)=Q(NSAM/2,NROW/2,NSLICE/2)
C
C       DO  3  K=1,NSLICE
C       DO  3  J=1,NROW
C       NR=J+(K-1)*NROW
C3      CALL  WRTLIN(LUN2,Q(1,J,K),NSAM,NR)
@


1.7
log
@option 2 added
@
text
@d55 1
a55 1
     &          SCL*SCL(Q(I+1,J,K)*Q(I+1,J,K)+Q(I,J,K)*Q(I,J,K))
@


1.6
log
@adapted to dynamical memory allocation
@
text
@a0 2

C
d45 20
d71 1
d168 1
a168 1
C         IF(MODE.NE.'L')  Q(NSAM/2+1,NROW/1+1,NSLICE/2+1)=0.0
a174 1

@


1.5
log
@a
@
text
@d1 1
d19 4
d27 60
a86 22
	SUBROUTINE  PW3SR(Q,NNNN,NSAM,NROW,NSLICE,MODE)
	DIMENSION   Q(NNNN,NROW,NSLICE)
	CHARACTER*1  MODE
	LOGICAL*1 IFND,IFNL

	IFND=MOD(NROW,2).EQ.0
	IFNL=MOD(NSLICE,2).EQ.0
	NSC=NSAM/2+1
C
C	DO  1  K=1,NSLICE
C	DO  1  J=1,NROW
C	NR=J+(K-1)*NROW
C1	CALL  REDLIN(LUN1,Q(1,J,K),NSAM,NR)
C	INV=+1
C	CALL  FMRS_3(Q,NSAM,NROW,NSLICE,INV)
C
	SCL=2.0/FLOAT(NSAM)/FLOAT(NROW)/FLOAT(NSLICE)
	DO    K=1,NSLICE
	DO    J=1,NROW
	DO    I=NNNN-1,1,-2
	Q(NNNN-1-(NNNN-1-I)/2,J,K)=
     &		SCL*SQRT(Q(I+1,J,K)*Q(I+1,J,K)+Q(I,J,K)*Q(I,J,K))
d88 61
a148 97
   	ENDDO
  	ENDDO
C
	DO    K=1,NSLICE
	DO    J=1,NROW/2
	JJ=J+NROW/2+MOD(NROW,2)
	DO    I=NSC,NNNN-1
	TEMP=Q(I,J,K)
	Q(I,J,K)=Q(I,JJ,K)
	Q(I,JJ,K)=TEMP
	ENDDO
	ENDDO
	ENDDO
C
	IF(.NOT.IFND)  THEN
	DO    K=1,NSLICE
	DO    I=NSC,NNNN-1
	TEMP=Q(I,NROW/2+1,K)
	DO    J=NROW/2+1,NROW-1
	Q(I,J,K)=Q(I,J+1,K)
	ENDDO
	Q(I,NROW,K)=TEMP
	ENDDO
	ENDDO
	ENDIF	
C
	DO    K=1,NSLICE/2
	KK=K+NSLICE/2+MOD(NSLICE,2)
	DO    J=1,NROW
	DO    I=NSC,NNNN-1
	TEMP=Q(I,J,K)
	Q(I,J,K)=Q(I,J,KK)
	Q(I,J,KK)=TEMP
	ENDDO
	ENDDO
	ENDDO
C
	IF(.NOT.IFNL)  THEN
	DO    J=1,NROW
	DO    I=NSC,NNNN-1
	TEMP=Q(I,J,NSLICE/2+1)
	DO    K=NSLICE/2+1,NSLICE-1
	Q(I,J,K)=Q(I,J,K+1)
	ENDDO
	Q(I,J,NSLICE)=TEMP
	ENDDO
	ENDDO
	ENDIF	
C
	NSC=NNNN/2-1
	NSL=NSLICE/2
	IF(IFND)  THEN
	IF(IFNL)  THEN
	KB=2
	DO    I=1,NSC
	II=NNNN-I
	Q(I,1,1)=Q(II,1,1)
	ENDDO
	ELSE
	KB=1
	ENDIF
	JB=2
	DO    K=KB,NSLICE
	KK=NSLICE-K+KB
	DO    I=1,NSC
	II=NNNN-I
	Q(I,1,K)=Q(II,1,KK)
	ENDDO
	ENDDO
	ELSE
	JB=1
	ENDIF
	IF(IFNL)  THEN
	KB=2
	DO    J=JB,NROW
	JJ=NROW-J+JB
	DO    I=1,NSC
	II=NNNN-I
	Q(I,J,1)=Q(II,JJ,1)	
	ENDDO
	ENDDO
	ELSE
	KB=1
	ENDIF
	DO    K=KB,NSLICE
	KK=NSLICE-K+KB
	DO    J=JB,NROW
	JJ=NROW-J+JB
	DO    I=1,NSC
	II=NNNN-I
	Q(I,J,K)=Q(II,JJ,KK)
	ENDDO
	ENDDO
	ENDDO
C
	IF(MODE.EQ.'L')  CALL  AL10(Q,NNNN*NROW*NSLICE)
C
d151 6
a156 5
C	DO  3  K=1,NSLICE
C	DO  3  J=1,NROW
C	NR=J+(K-1)*NROW
C3	CALL  WRTLIN(LUN2,Q(1,J,K),NSAM,NR)
	END
@


1.4
log
@*** empty log message ***
@
text
@d26 1
a26 1
CNO_SAVE
@


1.3
log
@log fixed
@
text
@d39 4
a42 4
	DO  101  K=1,NSLICE
	DO  101  J=1,NROW
	DO  101  I=NNNN-1,1,-2
101	Q(NNNN-1-(NNNN-1-I)/2,J,K)=
d44 3
d48 2
a49 2
	DO  100  K=1,NSLICE
	DO  100  J=1,NROW/2
d51 1
a51 1
	DO  100  I=NSC,NNNN-1
d54 4
a57 1
100	Q(I,JJ,K)=TEMP
d60 2
a61 2
	DO  103  K=1,NSLICE
	DO  103  I=NSC,NNNN-1
d63 6
a68 3
	DO  104  J=NROW/2+1,NROW-1
104	Q(I,J,K)=Q(I,J+1,K)
103	Q(I,NROW,K)=TEMP
d71 1
a71 1
	DO  200  K=1,NSLICE/2
d73 2
a74 2
	DO  200  J=1,NROW
	DO  200  I=NSC,NNNN-1
d77 4
a80 1
200	Q(I,J,KK)=TEMP
d83 2
a84 2
	DO  203  J=1,NROW
	DO  203  I=NSC,NNNN-1
d86 6
a91 3
	DO  204  K=NSLICE/2+1,NSLICE-1
204	Q(I,J,K)=Q(I,J,K+1)
203	Q(I,J,NSLICE)=TEMP
d99 1
a99 1
	DO  206  I=1,NSC
d101 2
a102 1
206	Q(I,1,1)=Q(II,1,1)
d107 1
a107 1
	DO  106  K=KB,NSLICE
d109 1
a109 1
	DO  106  I=1,NSC
d111 3
a113 1
106	Q(I,1,K)=Q(II,1,KK)
d119 1
a119 1
	DO  207  J=JB,NROW
d121 1
a121 1
	DO  207  I=1,NSC
d123 3
a125 1
207	Q(I,J,1)=Q(II,JJ,1)	
d129 1
a129 1
	DO  107  K=KB,NSLICE
d131 1
a131 1
	DO  107  J=JB,NROW
d133 1
a133 1
	DO  107  I=1,NSC
d135 4
a138 1
107	Q(I,J,K)=Q(II,JJ,KK)
@


1.2
log
@bug fixed
@
text
@d41 2
a42 2
	DO  102  I=NNNN-1,1,-2
102	Q(NNNN-1-(NNNN-1-I)/2,J,K)=
a43 1
101	IF(MODE.EQ.'L')  CALL  AL10(Q(NSAM/2,J,K),NSAM/2)
d117 1
@


1.1
log
@Initial revision
@
text
@d74 2
a75 2
	TEMP=Q(I,J,NLICE/2+1)
	DO  204  K=NLICE/2+1,NSLICE-1
@
