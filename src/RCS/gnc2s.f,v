head	1.10;
access;
symbols
	pre_mrcs:1.10
	healthdept_2018:1.10
	pre_getangas:1.9
	GPL2010:1.9
	pre_GPL2010:1.8
	pre_var_equation:1.8
	pre_fftwrings:1.8
	pre_opfiles:1.8
	src:1.8
	best-code:1.8
	x-named-regs:1.8
	x:1.8
	v13-00:1.8
	pre_GPL:1.6
	prec_CA:1.6
	noindx:1.6
	Bproc:1.6
	oct21:1.3
	last77:1.3;
locks; strict;
comment	@c @;


1.10
date	2018.10.03.14.34.07;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.24.13.25.51;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.17.20.13.23;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.17.18.07.16;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.12.27.15.53.26;	author bimal;	state Exp;
branches;
next	1.5;

1.5
date	99.12.06.18.37.03;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.11.10.23.09.20;	author yuchen;	state Exp;
branches;
next	1.3;

1.3
date	97.10.09.14.27.33;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.02.17.19.30.00;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.49.23;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.10
log
@email_health_dept
@
text
@C ++********************************************************************
C                                                                      *
C  GNC2S                                                               *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  GNC2S                                                              *
C                                                                      *
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS:                                                         *
C
C IMAGE_PROCESSING_ROUTINE
C
C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012
C **********************************************************************

        SUBROUTINE  GNC2S(X1,U1,N,M,QL,H0,EPS,LUNO)

        DIMENSION  X1(N,M),U1(N,M)
        COMMON  /GP_D/  C,QL2,R,Q
        REAL, ALLOCATABLE, DIMENSION(:,:) :: U2
        DO    I=1,N
        DO    J=1,M
        U1(I,J)=X1(I,J)
        ENDDO
        ENDDO
C
        CS=0.25
        ALPHA=H0*H0*QL/2.0
        W=2.0*(1.0-1.0/SQRT(2.0)/QL)
        QL2=QL*QL
C
        WRITE(LUNO,71)  QL,H0,EPS,ALPHA
 71     FORMAT(//' GNC ALGORITHM 2-D'
     *  ,/,' PARAMETERS: LAMBDA    H0       EPS       ALPHA'
     *  ,/,12X,F5.0,3X,3G10.3,/)
C
        P=1.0

 
        ALLOCATE (U2(N,M), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'GNC2S, U2',IER)
           RETURN
        ENDIF


 100    CONTINUE
C
        C=CS/P
        R=SQRT(ALPHA*(2.0/C+1.0/QL2))
        Q=ALPHA/QL2/R
	
	

C
C  Start from (1,1)
        U2(1,1)=U1(1,1)-W*(2.0*(U1(1,1)-X1(1,1))+
     1          GP(U1(1,1)-U1(2,1))+
     2          GP(U1(1,1)-U1(1,2)))/
     3          (2.0+4.0*QL2)
C
        WT=W/(2.0+6.0*QL2)
        DO    J=2,M-1
        U2(1,J)=U1(1,J)-WT*(2.0*(U1(1,J)-X1(1,J))+
     1          GP(U1(1,J)-U2(1,J-1))+
     2          GP(U1(1,J)-U1(2,J))+
     3          GP(U1(1,J)-U1(1,J+1)))
        ENDDO
C
        U2(1,M)=U1(1,M)-W*(2.0*(U1(1,M)-X1(1,M))+
     1          GP(U1(1,M)-U2(1,M-1))+
     2          GP(U1(1,M)-U1(2,M)))/
     3          (2.0+4.0*QL2)
C
        WT=W/(2.0+6.0*QL2)
        DO    I=2,N-1
        U2(I,1)=U1(I,1)-WT*(2.0*(U1(I,1)-X1(I,1))+
     1          GP(U1(I,1)-U2(I-1,1))+
     2          GP(U1(I,1)-U1(I,2))+
     3          GP(U1(I,1)-U1(I+1,1)))
        ENDDO
C
        U2(N,1)=U1(N,1)-W*(2.0*(U1(N,1)-X1(N,1))+
     1          GP(U1(N,1)-U2(N-1,1))+
     2          GP(U1(N,1)-U1(N,2)))/
     3          (2.0+4.0*QL2)
C
        WT=W/(2.0+8.0*QL2)
        DO    I=2,N-1
        DO    J=2,M-1
        U2(I,J)=U1(I,J)-WT*(2.0*(U1(I,J)-X1(I,J))+
     1          GP(U1(I,J)-U2(I-1,J))+
     2          GP(U1(I,J)-U2(I,J-1))+
     3          GP(U1(I,J)-U1(I+1,J))+
     4          GP(U1(I,J)-U1(I,J+1)))
        ENDDO
        ENDDO
C
        WT=W/(2.0+6.0*QL2)
        DO    I=2,N-1
        U2(I,M)=U1(I,M)-WT*(2.0*(U1(I,M)-X1(I,M))+
     1          GP(U1(I,M)-U2(I-1,M))+
     2          GP(U1(I,M)-U2(I,M-1))+
     3          GP(U1(I,M)-U1(I+1,M)))
        ENDDO

C
        WT=W/(2.0+6.0*QL2)
        DO    J=2,M-1
        U2(N,J)=U1(N,J)-WT*(2.0*(U1(N,J)-X1(N,J))+
     1          GP(U1(N,J)-U2(N,J-1))+
     2          GP(U1(N,J)-U2(N-1,J))+
     3          GP(U1(N,J)-U1(N,J+1)))
        ENDDO
C
        U2(N,M)=U1(N,M)-W*(2.0*(U1(N,M)-X1(N,M))+
     1          GP(U1(N,M)-U2(N-1,M))+
     2          GP(U1(N,M)-U2(N,M-1)))/
     3          (2.0+4.0*QL2)
C
        ER=ERC(U1,U2,N*M)
        IF(ER.LT.EPS)  GOTO  1000
C
C  Start from (1,M)
        U2(1,M)=U1(1,M)-W*(2.0*(U1(1,M)-X1(1,M))+
     1          GP(U1(1,M)-U1(1,M-1))+
     2          GP(U1(1,M)-U1(2,M)))/
     3          (2.0+4.0*QL2)
C
        WT=W/(2.0+6.0*QL2)
        DO    J=M-1,2,-1
        U2(1,J)=U1(1,J)-WT*(2.0*(U1(1,J)-X1(1,J))+
     1          GP(U1(1,J)-U1(1,J-1))+
     2          GP(U1(1,J)-U1(2,J))+
     3          GP(U1(1,J)-U2(1,J+1)))
        ENDDO
C
        U2(1,1)=U1(1,1)-W*(2.0*(U1(1,1)-X1(1,1))+
     1          GP(U1(1,1)-U1(2,1))+
     2          GP(U1(1,1)-U2(1,2)))/
     3          (2.0+4.0*QL2)
C
        WT=W/(2.0+6.0*QL2)
        DO    I=2,N-1
        U2(I,M)=U1(I,M)-WT*(2.0*(U1(I,M)-X1(I,M))+
     1          GP(U1(I,M)-U2(I-1,M))+
     2          GP(U1(I,M)-U1(I,M-1))+
     3          GP(U1(I,M)-U1(I+1,M)))
        ENDDO
C
        U2(N,M)=U1(N,M)-W*(2.0*(U1(N,M)-X1(N,M))+
     1          GP(U1(N,M)-U1(N-1,M))+
     2          GP(U1(N,M)-U2(N,M-1)))/
     3          (2.0+4.0*QL2)
C
        WT=W/(2.0+8.0*QL2)
        DO    I=2,N-1
        DO    J=M-1,2,-1
        U2(I,J)=U1(I,J)-WT*(2.0*(U1(I,J)-X1(I,J))+
     1          GP(U1(I,J)-U2(I-1,J))+
     2          GP(U1(I,J)-U1(I,J-1))+
     3          GP(U1(I,J)-U1(I+1,J))+
     4          GP(U1(I,J)-U2(I,J+1)))
        ENDDO
        ENDDO
C
        WT=W/(2.0+6.0*QL2)
        DO    J=M-1,2,-1
        U2(N,J)=U1(N,J)-WT*(2.0*(U1(N,J)-X1(N,J))+
     1          GP(U1(N,J)-U1(N,J-1))+
     2          GP(U1(N,J)-U2(N-1,J))+
     3          GP(U1(N,J)-U2(N,J+1)))
        ENDDO
C
        WT=W/(2.0+6.0*QL2)
        DO    I=2,N-1
        U2(I,1)=U1(I,1)-WT*(2.0*(U1(I,1)-X1(I,1))+
     1          GP(U1(I,1)-U2(I-1,1))+
     2          GP(U1(I,1)-U2(I,2))+
     3          GP(U1(I,1)-U1(I+1,1)))
        ENDDO
C
        U2(N,1)=U1(N,1)-W*(2.0*(U1(N,1)-X1(N,1))+
     1          GP(U1(N,1)-U2(N-1,1))+
     2          GP(U1(N,1)-U2(N,2)))/
     3          (2.0+4.0*QL2)
C
        ER=ERC(U1,U2,N*M)
        IF(ER.LT.EPS)  GOTO  1000
C
C  Start from (N,M)
        U2(N,M)=U1(N,M)-W*(2.0*(U1(N,M)-X1(N,M))+
     1          GP(U1(N,M)-U1(N-1,M))+
     2          GP(U1(N,M)-U1(N,M-1)))/
     3          (2.0+4.0*QL2)
C
        WT=W/(2.0+6.0*QL2)
        DO    J=M-1,2,-1
        U2(N,J)=U1(N,J)-WT*(2.0*(U1(N,J)-X1(N,J))+
     1          GP(U1(N,J)-U1(N,J-1))+
     2          GP(U1(N,J)-U1(N-1,J))+
     3          GP(U1(N,J)-U2(N,J+1)))
        ENDDO
C
        WT=W/(2.0+6.0*QL2)
        DO    I=N-1,2,-1
        U2(I,M)=U1(I,M)-WT*(2.0*(U1(I,M)-X1(I,M))+
     1          GP(U1(I,M)-U1(I-1,M))+
     2          GP(U1(I,M)-U1(I,M-1))+
     3          GP(U1(I,M)-U2(I+1,M)))
        ENDDO
C
        U2(1,M)=U1(1,M)-W*(2.0*(U1(1,M)-X1(1,M))+
     1          GP(U1(1,M)-U1(1,M-1))+
     2          GP(U1(1,M)-U2(2,M)))/
     3          (2.0+4.0*QL2)
C
        U2(N,1)=U1(N,1)-W*(2.0*(U1(N,1)-X1(N,1))+
     1          GP(U1(N,1)-U1(N-1,1))+
     2          GP(U1(N,1)-U2(N,2)))/
     3          (2.0+4.0*QL2)
C
        WT=W/(2.0+8.0*QL2)
        DO    I=N-1,2,-1
        DO    J=M-1,2,-1
        U2(I,J)=U1(I,J)-WT*(2.0*(U1(I,J)-X1(I,J))+
     1          GP(U1(I,J)-U1(I-1,J))+
     2          GP(U1(I,J)-U1(I,J-1))+
     3          GP(U1(I,J)-U2(I+1,J))+
     4          GP(U1(I,J)-U2(I,J+1)))
        ENDDO
        ENDDO
C
        WT=W/(2.0+6.0*QL2)
        DO    I=N-1,2,-1
        U2(I,1)=U1(I,1)-WT*(2.0*(U1(I,1)-X1(I,1))+
     1          GP(U1(I,1)-U1(I-1,1))+
     2          GP(U1(I,1)-U2(I,2))+
     3          GP(U1(I,1)-U2(I+1,1)))
        ENDDO
C
        WT=W/(2.0+6.0*QL2)
        DO    J=M-1,2,-1
        U2(1,J)=U1(1,J)-WT*(2.0*(U1(1,J)-X1(1,J))+
     1          GP(U1(1,J)-U1(1,J-1))+
     2          GP(U1(1,J)-U2(2,J))+
     3          GP(U1(1,J)-U2(1,J+1)))
        ENDDO
C
        U2(1,1)=U1(1,1)-W*(2.0*(U1(1,1)-X1(1,1))+
     1          GP(U1(1,1)-U2(2,1))+
     2          GP(U1(1,1)-U2(1,2)))/
     3          (2.0+4.0*QL2)
C
        ER=ERC(U1,U2,N*M)
        IF(ER.LT.EPS)  GOTO  1000
C
C  Start from (N,1)
        U2(N,1)=U1(N,1)-W*(2.0*(U1(N,1)-X1(N,1))+
     1          GP(U1(N,1)-U1(N-1,1))+
     2          GP(U1(N,1)-U1(N,2)))/
     3          (2.0+4.0*QL2)
C
        WT=W/(2.0+6.0*QL2)
        DO    I=N-1,2,-1
        U2(I,1)=U1(I,1)-WT*(2.0*(U1(I,1)-X1(I,1))+
     1          GP(U1(I,1)-U1(I-1,1))+
     2          GP(U1(I,1)-U1(I,2))+
     3          GP(U1(I,1)-U2(I+1,1)))
        ENDDO
C
        WT=W/(2.0+6.0*QL2)
        DO    J=2,M-1
        U2(N,J)=U1(N,J)-WT*(2.0*(U1(N,J)-X1(N,J))+
     1          GP(U1(N,J)-U2(N,J-1))+
     2          GP(U1(N,J)-U1(N-1,J))+
     3          GP(U1(N,J)-U1(N,J+1)))
        ENDDO
C
        U2(N,M)=U1(N,M)-W*(2.0*(U1(N,M)-X1(N,M))+
     1          GP(U1(N,M)-U1(N-1,M))+
     2          GP(U1(N,M)-U2(N,M-1)))/
     3          (2.0+4.0*QL2)
C
        U2(1,1)=U1(1,1)-W*(2.0*(U1(1,1)-X1(1,1))+
     1          GP(U1(1,1)-U2(2,1))+
     2          GP(U1(1,1)-U1(1,2)))/
     3          (2.0+4.0*QL2)
C
        WT=W/(2.0+8.0*QL2)
        DO    I=N-1,2,-1
        DO    J=2,M-1
        U2(I,J)=U1(I,J)-WT*(2.0*(U1(I,J)-X1(I,J))+
     1          GP(U1(I,J)-U1(I-1,J))+
     2          GP(U1(I,J)-U2(I,J-1))+
     3          GP(U1(I,J)-U2(I+1,J))+
     4          GP(U1(I,J)-U1(I,J+1)))
        ENDDO
        ENDDO
C
        WT=W/(2.0+6.0*QL2)
        DO    J=2,M-1
        U2(1,J)=U1(1,J)-WT*(2.0*(U1(1,J)-X1(1,J))+
     1          GP(U1(1,J)-U2(1,J-1))+
     2          GP(U1(1,J)-U2(2,J))+
     3          GP(U1(1,J)-U1(1,J+1)))
        ENDDO
C
        WT=W/(2.0+6.0*QL2)
        DO    I=N-1,2,-1
        U2(I,M)=U1(I,M)-WT*(2.0*(U1(I,M)-X1(I,M))+
     1          GP(U1(I,M)-U1(I-1,M))+
     2          GP(U1(I,M)-U2(I,M-1))+
     3          GP(U1(I,M)-U2(I+1,M)))
        ENDDO
C
        U2(1,M)=U1(1,M)-W*(2.0*(U1(1,M)-X1(1,M))+
     1          GP(U1(1,M)-U2(1,M-1))+
     2          GP(U1(1,M)-U2(2,M)))/
     3          (2.0+4.0*QL2)
C
        ER=ERC(U1,U2,N*M)
        IF(ER.LT.EPS)  GOTO  1000
        GOTO  100
 1000   WRITE(LUNO,24)  P,ER
C       PRINT *,P,ER
        P=P/2.0
        IF(P.GE.1.0/2.0/QL)  GOTO  100

        DEALLOCATE(U2)
        RETURN
 24     FORMAT(10X,'STEP=',F12.6,'  ERROR=',G10.3)
        
        END
@


1.9
log
@GPL_2010
@
text
@d11 1
a11 1
C=* Email: spider@@wadsworth.org                                        *
@


1.8
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.7
log
@HRI GPL License used
@
text
@a5 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.6
log
@adapted for dynamical memory allocation
@
text
@d7 24
@


1.5
log
@header
@
text
@d19 5
a23 1
C                                                                      *
d26 29
a54 1
	SUBROUTINE  GNC2S(X1,U1,U2,N,M,QL,H0,EPS,LUNO)
a55 2
	DIMENSION  X1(N,M),U1(N,M),U2(N,M)
	COMMON  /GP_D/  C,QL2,R,Q
d57 1
a57 22
	DO    I=1,N
	DO    J=1,M
  	U1(I,J)=X1(I,J)
	ENDDO
	ENDDO
C
	CS=0.25
	ALPHA=H0*H0*QL/2.0
	W=2.0*(1.0-1.0/SQRT(2.0)/QL)
	QL2=QL*QL
C
	WRITE(LUNO,71)  QL,H0,EPS,ALPHA
 71	FORMAT(//' GNC ALGORITHM 2-D'
     *	,/,' PARAMETERS: LAMBDA    H0       EPS       ALPHA'
     *	,/,12X,F5.0,3X,3G10.3,/)
C
	P=1.0
 100	CONTINUE
C
	C=CS/P
	R=SQRT(ALPHA*(2.0/C+1.0/QL2))
	Q=ALPHA/QL2/R
d59 7
d67 49
a115 49
    	U2(1,1)=U1(1,1)-W*(2.0*(U1(1,1)-X1(1,1))+
     1		GP(U1(1,1)-U1(2,1))+
     2		GP(U1(1,1)-U1(1,2)))/
     3		(2.0+4.0*QL2)
C
	WT=W/(2.0+6.0*QL2)
	DO    J=2,M-1
     	U2(1,J)=U1(1,J)-WT*(2.0*(U1(1,J)-X1(1,J))+
     1		GP(U1(1,J)-U2(1,J-1))+
     2		GP(U1(1,J)-U1(2,J))+
     3		GP(U1(1,J)-U1(1,J+1)))
	ENDDO
C
    	U2(1,M)=U1(1,M)-W*(2.0*(U1(1,M)-X1(1,M))+
     1		GP(U1(1,M)-U2(1,M-1))+
     2		GP(U1(1,M)-U1(2,M)))/
     3		(2.0+4.0*QL2)
C
	WT=W/(2.0+6.0*QL2)
	DO    I=2,N-1
    	U2(I,1)=U1(I,1)-WT*(2.0*(U1(I,1)-X1(I,1))+
     1		GP(U1(I,1)-U2(I-1,1))+
     2		GP(U1(I,1)-U1(I,2))+
     3		GP(U1(I,1)-U1(I+1,1)))
	ENDDO
C
    	U2(N,1)=U1(N,1)-W*(2.0*(U1(N,1)-X1(N,1))+
     1		GP(U1(N,1)-U2(N-1,1))+
     2		GP(U1(N,1)-U1(N,2)))/
     3		(2.0+4.0*QL2)
C
	WT=W/(2.0+8.0*QL2)
	DO    I=2,N-1
	DO    J=2,M-1
 	U2(I,J)=U1(I,J)-WT*(2.0*(U1(I,J)-X1(I,J))+
     1		GP(U1(I,J)-U2(I-1,J))+
     2		GP(U1(I,J)-U2(I,J-1))+
     3		GP(U1(I,J)-U1(I+1,J))+
     4		GP(U1(I,J)-U1(I,J+1)))
	ENDDO
	ENDDO
C
	WT=W/(2.0+6.0*QL2)
	DO    I=2,N-1
    	U2(I,M)=U1(I,M)-WT*(2.0*(U1(I,M)-X1(I,M))+
     1		GP(U1(I,M)-U2(I-1,M))+
     2		GP(U1(I,M)-U2(I,M-1))+
     3		GP(U1(I,M)-U1(I+1,M)))
	ENDDO
d118 12
a129 12
	WT=W/(2.0+6.0*QL2)
	DO    J=2,M-1
    	U2(N,J)=U1(N,J)-WT*(2.0*(U1(N,J)-X1(N,J))+
     1		GP(U1(N,J)-U2(N,J-1))+
     2		GP(U1(N,J)-U2(N-1,J))+
     3		GP(U1(N,J)-U1(N,J+1)))
	ENDDO
C
    	U2(N,M)=U1(N,M)-W*(2.0*(U1(N,M)-X1(N,M))+
     1		GP(U1(N,M)-U2(N-1,M))+
     2		GP(U1(N,M)-U2(N,M-1)))/
     3		(2.0+4.0*QL2)
d131 2
a132 2
	ER=ERC(U1,U2,N*M)
	IF(ER.LT.EPS)  GOTO  1000
d135 62
a196 62
    	U2(1,M)=U1(1,M)-W*(2.0*(U1(1,M)-X1(1,M))+
     1		GP(U1(1,M)-U1(1,M-1))+
     2		GP(U1(1,M)-U1(2,M)))/
     3		(2.0+4.0*QL2)
C
	WT=W/(2.0+6.0*QL2)
	DO    J=M-1,2,-1
    	U2(1,J)=U1(1,J)-WT*(2.0*(U1(1,J)-X1(1,J))+
     1		GP(U1(1,J)-U1(1,J-1))+
     2		GP(U1(1,J)-U1(2,J))+
     3		GP(U1(1,J)-U2(1,J+1)))
	ENDDO
C
    	U2(1,1)=U1(1,1)-W*(2.0*(U1(1,1)-X1(1,1))+
     1		GP(U1(1,1)-U1(2,1))+
     2		GP(U1(1,1)-U2(1,2)))/
     3		(2.0+4.0*QL2)
C
	WT=W/(2.0+6.0*QL2)
	DO    I=2,N-1
    	U2(I,M)=U1(I,M)-WT*(2.0*(U1(I,M)-X1(I,M))+
     1		GP(U1(I,M)-U2(I-1,M))+
     2		GP(U1(I,M)-U1(I,M-1))+
     3		GP(U1(I,M)-U1(I+1,M)))
	ENDDO
C
    	U2(N,M)=U1(N,M)-W*(2.0*(U1(N,M)-X1(N,M))+
     1		GP(U1(N,M)-U1(N-1,M))+
     2		GP(U1(N,M)-U2(N,M-1)))/
     3		(2.0+4.0*QL2)
C
	WT=W/(2.0+8.0*QL2)
	DO    I=2,N-1
	DO    J=M-1,2,-1
 	U2(I,J)=U1(I,J)-WT*(2.0*(U1(I,J)-X1(I,J))+
     1		GP(U1(I,J)-U2(I-1,J))+
     2		GP(U1(I,J)-U1(I,J-1))+
     3		GP(U1(I,J)-U1(I+1,J))+
     4		GP(U1(I,J)-U2(I,J+1)))
	ENDDO
	ENDDO
C
	WT=W/(2.0+6.0*QL2)
	DO    J=M-1,2,-1
    	U2(N,J)=U1(N,J)-WT*(2.0*(U1(N,J)-X1(N,J))+
     1		GP(U1(N,J)-U1(N,J-1))+
     2		GP(U1(N,J)-U2(N-1,J))+
     3		GP(U1(N,J)-U2(N,J+1)))
	ENDDO
C
	WT=W/(2.0+6.0*QL2)
	DO    I=2,N-1
    	U2(I,1)=U1(I,1)-WT*(2.0*(U1(I,1)-X1(I,1))+
     1		GP(U1(I,1)-U2(I-1,1))+
     2		GP(U1(I,1)-U2(I,2))+
     3		GP(U1(I,1)-U1(I+1,1)))
	ENDDO
C
    	U2(N,1)=U1(N,1)-W*(2.0*(U1(N,1)-X1(N,1))+
     1		GP(U1(N,1)-U2(N-1,1))+
     2		GP(U1(N,1)-U2(N,2)))/
     3		(2.0+4.0*QL2)
d198 2
a199 2
	ER=ERC(U1,U2,N*M)
	IF(ER.LT.EPS)  GOTO  1000
d202 62
a263 62
    	U2(N,M)=U1(N,M)-W*(2.0*(U1(N,M)-X1(N,M))+
     1		GP(U1(N,M)-U1(N-1,M))+
     2		GP(U1(N,M)-U1(N,M-1)))/
     3		(2.0+4.0*QL2)
C
	WT=W/(2.0+6.0*QL2)
	DO    J=M-1,2,-1
    	U2(N,J)=U1(N,J)-WT*(2.0*(U1(N,J)-X1(N,J))+
     1		GP(U1(N,J)-U1(N,J-1))+
     2		GP(U1(N,J)-U1(N-1,J))+
     3		GP(U1(N,J)-U2(N,J+1)))
	ENDDO
C
	WT=W/(2.0+6.0*QL2)
	DO    I=N-1,2,-1
    	U2(I,M)=U1(I,M)-WT*(2.0*(U1(I,M)-X1(I,M))+
     1		GP(U1(I,M)-U1(I-1,M))+
     2		GP(U1(I,M)-U1(I,M-1))+
     3		GP(U1(I,M)-U2(I+1,M)))
	ENDDO
C
    	U2(1,M)=U1(1,M)-W*(2.0*(U1(1,M)-X1(1,M))+
     1		GP(U1(1,M)-U1(1,M-1))+
     2		GP(U1(1,M)-U2(2,M)))/
     3		(2.0+4.0*QL2)
C
    	U2(N,1)=U1(N,1)-W*(2.0*(U1(N,1)-X1(N,1))+
     1		GP(U1(N,1)-U1(N-1,1))+
     2		GP(U1(N,1)-U2(N,2)))/
     3		(2.0+4.0*QL2)
C
	WT=W/(2.0+8.0*QL2)
	DO    I=N-1,2,-1
	DO    J=M-1,2,-1
 	U2(I,J)=U1(I,J)-WT*(2.0*(U1(I,J)-X1(I,J))+
     1		GP(U1(I,J)-U1(I-1,J))+
     2		GP(U1(I,J)-U1(I,J-1))+
     3		GP(U1(I,J)-U2(I+1,J))+
     4		GP(U1(I,J)-U2(I,J+1)))
	ENDDO
	ENDDO
C
	WT=W/(2.0+6.0*QL2)
	DO    I=N-1,2,-1
    	U2(I,1)=U1(I,1)-WT*(2.0*(U1(I,1)-X1(I,1))+
     1		GP(U1(I,1)-U1(I-1,1))+
     2		GP(U1(I,1)-U2(I,2))+
     3		GP(U1(I,1)-U2(I+1,1)))
	ENDDO
C
	WT=W/(2.0+6.0*QL2)
	DO    J=M-1,2,-1
    	U2(1,J)=U1(1,J)-WT*(2.0*(U1(1,J)-X1(1,J))+
     1		GP(U1(1,J)-U1(1,J-1))+
     2		GP(U1(1,J)-U2(2,J))+
     3		GP(U1(1,J)-U2(1,J+1)))
	ENDDO
C
    	U2(1,1)=U1(1,1)-W*(2.0*(U1(1,1)-X1(1,1))+
     1		GP(U1(1,1)-U2(2,1))+
     2		GP(U1(1,1)-U2(1,2)))/
     3		(2.0+4.0*QL2)
d265 2
a266 2
	ER=ERC(U1,U2,N*M)
	IF(ER.LT.EPS)  GOTO  1000
d269 76
a344 74
    	U2(N,1)=U1(N,1)-W*(2.0*(U1(N,1)-X1(N,1))+
     1		GP(U1(N,1)-U1(N-1,1))+
     2		GP(U1(N,1)-U1(N,2)))/
     3		(2.0+4.0*QL2)
C
	WT=W/(2.0+6.0*QL2)
	DO    I=N-1,2,-1
    	U2(I,1)=U1(I,1)-WT*(2.0*(U1(I,1)-X1(I,1))+
     1		GP(U1(I,1)-U1(I-1,1))+
     2		GP(U1(I,1)-U1(I,2))+
     3		GP(U1(I,1)-U2(I+1,1)))
	ENDDO
C
	WT=W/(2.0+6.0*QL2)
	DO    J=2,M-1
    	U2(N,J)=U1(N,J)-WT*(2.0*(U1(N,J)-X1(N,J))+
     1		GP(U1(N,J)-U2(N,J-1))+
     2		GP(U1(N,J)-U1(N-1,J))+
     3		GP(U1(N,J)-U1(N,J+1)))
	ENDDO
C
    	U2(N,M)=U1(N,M)-W*(2.0*(U1(N,M)-X1(N,M))+
     1		GP(U1(N,M)-U1(N-1,M))+
     2		GP(U1(N,M)-U2(N,M-1)))/
     3		(2.0+4.0*QL2)
C
    	U2(1,1)=U1(1,1)-W*(2.0*(U1(1,1)-X1(1,1))+
     1		GP(U1(1,1)-U2(2,1))+
     2		GP(U1(1,1)-U1(1,2)))/
     3		(2.0+4.0*QL2)
C
	WT=W/(2.0+8.0*QL2)
	DO    I=N-1,2,-1
	DO    J=2,M-1
 	U2(I,J)=U1(I,J)-WT*(2.0*(U1(I,J)-X1(I,J))+
     1		GP(U1(I,J)-U1(I-1,J))+
     2		GP(U1(I,J)-U2(I,J-1))+
     3		GP(U1(I,J)-U2(I+1,J))+
     4		GP(U1(I,J)-U1(I,J+1)))
	ENDDO
	ENDDO
C
	WT=W/(2.0+6.0*QL2)
	DO    J=2,M-1
    	U2(1,J)=U1(1,J)-WT*(2.0*(U1(1,J)-X1(1,J))+
     1		GP(U1(1,J)-U2(1,J-1))+
     2		GP(U1(1,J)-U2(2,J))+
     3		GP(U1(1,J)-U1(1,J+1)))
	ENDDO
C
	WT=W/(2.0+6.0*QL2)
	DO    I=N-1,2,-1
    	U2(I,M)=U1(I,M)-WT*(2.0*(U1(I,M)-X1(I,M))+
     1		GP(U1(I,M)-U1(I-1,M))+
     2		GP(U1(I,M)-U2(I,M-1))+
     3		GP(U1(I,M)-U2(I+1,M)))
	ENDDO
C
    	U2(1,M)=U1(1,M)-W*(2.0*(U1(1,M)-X1(1,M))+
     1		GP(U1(1,M)-U2(1,M-1))+
     2		GP(U1(1,M)-U2(2,M)))/
     3		(2.0+4.0*QL2)
C
	ER=ERC(U1,U2,N*M)
	IF(ER.LT.EPS)  GOTO  1000
	GOTO  100
 1000	WRITE(LUNO,24)  P,ER
C	PRINT *,P,ER
	P=P/2.0
	IF(P.GE.1.0/2.0/QL)  GOTO  100
	RETURN
 24	FORMAT(10X,'STEP=',F12.6,'  ERROR=',G10.3)
	END
C
@


1.4
log
@a
@
text
@d1 20
@


1.3
log
@*** empty log message ***
@
text
@d6 1
a6 1
CNO_SAVE
@


1.2
log
@nosave
@
text
@d7 5
a11 3
	DO  4  I=1,N
	DO  4  J=1,M
 4	U1(I,J)=X1(I,J)
d37 2
a38 2
	DO  121  J=2,M-1
 121   	U2(1,J)=U1(1,J)-WT*(2.0*(U1(1,J)-X1(1,J))+
d42 1
d50 2
a51 2
	DO  122  I=2,N-1
 122   	U2(I,1)=U1(I,1)-WT*(2.0*(U1(I,1)-X1(I,1))+
d55 1
d63 3
a65 3
	DO  101  I=2,N-1
	DO  101  J=2,M-1
 101	U2(I,J)=U1(I,J)-WT*(2.0*(U1(I,J)-X1(I,J))+
d70 2
d74 2
a75 2
	DO  123  I=2,N-1
 123   	U2(I,M)=U1(I,M)-WT*(2.0*(U1(I,M)-X1(I,M))+
d79 2
d83 2
a84 2
	DO  124  J=2,M-1
 124   	U2(N,J)=U1(N,J)-WT*(2.0*(U1(N,J)-X1(N,J))+
d88 1
d105 2
a106 2
	DO  321  J=M-1,2,-1
 321   	U2(1,J)=U1(1,J)-WT*(2.0*(U1(1,J)-X1(1,J))+
d110 1
d118 2
a119 2
	DO  323  I=2,N-1
 323   	U2(I,M)=U1(I,M)-WT*(2.0*(U1(I,M)-X1(I,M))+
d123 1
d131 3
a133 3
	DO  301  I=2,N-1
	DO  301  J=M-1,2,-1
 301	U2(I,J)=U1(I,J)-WT*(2.0*(U1(I,J)-X1(I,J))+
d138 2
d142 2
a143 2
	DO  324  J=M-1,2,-1
 324   	U2(N,J)=U1(N,J)-WT*(2.0*(U1(N,J)-X1(N,J))+
d147 1
d150 2
a151 2
	DO  322  I=2,N-1
 322   	U2(I,1)=U1(I,1)-WT*(2.0*(U1(I,1)-X1(I,1))+
d155 1
d172 2
a173 2
	DO  224  J=M-1,2,-1
 224   	U2(N,J)=U1(N,J)-WT*(2.0*(U1(N,J)-X1(N,J))+
d177 1
d180 2
a181 2
	DO  223  I=N-1,2,-1
 223   	U2(I,M)=U1(I,M)-WT*(2.0*(U1(I,M)-X1(I,M))+
d185 1
d198 3
a200 3
	DO  201  I=N-1,2,-1
	DO  201  J=M-1,2,-1
 201	U2(I,J)=U1(I,J)-WT*(2.0*(U1(I,J)-X1(I,J))+
d205 2
d209 2
a210 2
	DO  222  I=N-1,2,-1
 222   	U2(I,1)=U1(I,1)-WT*(2.0*(U1(I,1)-X1(I,1))+
d214 1
d217 2
a218 2
	DO  221  J=M-1,2,-1
 221   	U2(1,J)=U1(1,J)-WT*(2.0*(U1(1,J)-X1(1,J))+
d222 1
d239 2
a240 2
	DO  422  I=N-1,2,-1
 422   	U2(I,1)=U1(I,1)-WT*(2.0*(U1(I,1)-X1(I,1))+
d244 1
d247 2
a248 2
	DO  424  J=2,M-1
 424   	U2(N,J)=U1(N,J)-WT*(2.0*(U1(N,J)-X1(N,J))+
d252 1
d265 3
a267 3
	DO  401  I=N-1,2,-1
	DO  401  J=2,M-1
 401	U2(I,J)=U1(I,J)-WT*(2.0*(U1(I,J)-X1(I,J))+
d272 2
d276 2
a277 2
	DO  421  J=2,M-1
 421   	U2(1,J)=U1(1,J)-WT*(2.0*(U1(1,J)-X1(1,J))+
d281 1
d284 2
a285 2
	DO  423  I=N-1,2,-1
 423   	U2(I,M)=U1(I,M)-WT*(2.0*(U1(I,M)-X1(I,M))+
d289 1
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1

@
