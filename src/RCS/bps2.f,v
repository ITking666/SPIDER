head	1.25;
access;
symbols
	healthdept_2018:1.25
	pre_getangas:1.20
	GPL2010:1.20
	pre_GPL2010:1.19
	pre_var_equation:1.19
	pre_fftwrings:1.19
	pre_opfiles:1.19
	src:1.19
	best-code:1.19
	x-named-regs:1.19
	x:1.19
	v13-00:1.19
	pre_GPL:1.17
	prec_CA:1.17
	noindx:1.16
	Bproc:1.12
	oct21:1.9
	last77:1.9;
locks; strict;
comment	@c @;


1.25
date	2018.10.03.14.33.56;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2014.02.07.18.15.50;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2014.02.03.13.20.43;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2014.02.03.13.14.08;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2014.01.12.19.50.40;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2010.06.24.13.25.10;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.17.19.56.06;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.17.17.52.45;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.20.21.24.43;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2002.09.23.16.16.02;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.11.14.07.42;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.08.19.01.21;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.10.19.16.39.48;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.12.07.15.25.32;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.12.03.16.41.37;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	99.11.10.23.09.09;	author yuchen;	state Exp;
branches;
next	1.9;

1.9
date	97.10.17.15.18.32;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	97.10.01.21.06.48;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.08.15.16.02.23;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	95.10.03.13.16.50;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	95.02.16.17.01.43;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	94.10.07.15.34.12;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	94.07.25.20.19.42;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.02.44;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.47.28;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.25
log
@email_health_dept
@
text
@
C ++********************************************************************
C                                                                      *
C  UNIX-SPIDER VERSION
C  SIMPLIFIED VERSION                              01/05/94
C                  OPFILEC                         FEB 03 ARDEAN LEITH
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  BPS2(MAXMEM)                                                                    *
C                                                                      *
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C  REPROJECTIONS 3D - SLICES, RICHARDSONS METHOD, 
C  RECONSTRUCTION KEPT IN THE SQUARE TO INTRODUCE OTHER CONSTRAINTS.
C  RECONSTRUCTION FROM NROWL TO NROWH.
C  AVERAGE OUTSIDE THE WINDOW IS SUBTRACTED
C  MIN, MAX RELATE TO THE PROJECTIONS
C  GEOMETRY  CYLINDRICAL
C  
CC23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

	SUBROUTINE BPS2(MAXMEM)

        INCLUDE 'CMBLOCK.INC' 
        INCLUDE 'CMLIMIT.INC' 

	CHARACTER*1  NULL
 
	CHARACTER(LEN=MAXNAM) :: FINPAT,FINPIC

	PARAMETER  (NILMAX=93,NILMXX=560)
	COMMON     DUMMY(80),BUF(1024),ILIST(NILMXX),
     &    NSAM,NROW,INANG,NN,NMAT,
     &	  LTB,LTBN,K_ANG,K_DM,K_LB,K_MAP,K_IPCUBE,
     &	  K_BCKE,K_PROJ,K_BCKN,K_PRJE,K_SIGMA,
     &    KDM(7),
     &	  IUNIT,Q(1)

	COMMON /PAR/  LDPX,LDPY,LDPZ,LDPNMX,LDPNMY

	DOUBLE PRECISION  ABA

        DATA              INPIC/100/,IOFF/6/

	NULL = CHAR(0)

C       N - LINEAR DIMENSION OF PROJECTIONS AND RESTORED CUBE
C       NANG - NUMBER OF ANGLES (PROJECTIONS)

        WRITE(NOUT,*)' SINGLE-TILT ITERATIVE 3D RECONSTRUCTION'
	IUNIT = NOUT

 	CALL  FILERD(FINPAT,NLET,NULL,
     &	     'TEMPLATE FOR 2-D PROJECTIONS',IRTFLG)

	CALL  FILERD(FINPIC,NLETI,NULL,'SELECTION DOC',IRTFLG)

	K    = 0
	K2   = 1
	NANG = 0
778	LERR = -1
	IF (NANG .EQ. NILMAX)  THEN
            WRITE(NOUT,*) ' TOO MANY IMAGES, LIST TRUNCATED'
            GOTO  779
	ENDIF

	KP1 = K+1
	CALL  UNSAV(FINPIC,K,INPIC,KP1,Q,1,LERR,K2)
	IF (LERR .EQ. 0)  THEN
	   NANG        = NANG+1
	   ILIST(NANG) = Q(1)
	   K           = K+1
	   GOTO  778
	ENDIF
779	CLOSE(INPIC)

C       NANG - TOTAL NUMBER OF IMAGES

	WRITE(NOUT,2001) NANG
2001	FORMAT('  NUMBER OF IMAGES: ',I0)

C       GET THE ANGLES
 	K_ANG = 1
 	CALL  FILERD(FINPIC,NLETI,NULL,'ANGLES DOC',IRTFLG)

	K2 = 1
        DO K=0,NANG-1
	  LERR=-1
	  CALL  UNSAV(FINPIC,K,INPIC,ILIST(K+1),BUF,2,LERR,K2)
	  IF (LERR .EQ. 0)  THEN
	     Q(K_ANG+K) = BUF(2)
          ELSE
             CALL  ERRT(101,'READING THE ANGLES DOC FILE',NE)
             CLOSE(INPIC)
             RETURN
          ENDIF
	ENDDO
	CLOSE(INPIC)

        CALL RDPRMI(IRI,NSLICE,NOT_USED,
     &	   'RADIUS OF RECONSTRUCTED OBJECT, SLICE HEIGHT')
        RI = IRI

        CALL  RDPRMI(NROWL,NROWH,NOT_USED,'RECONSTRUCTION RANGE IN Y')

C       OPEN ALL THE PROJECTION FILES ....
	DO  K=1,NANG
 	   CALL  FILGET(FINPAT,FINPIC,NLET,ILIST(K),INTFLG)
           MAXIM = 0
           CALL OPFILEC(0,.FALSE.,FINPIC,IOFF+K,'O',IFORM,NSAM,NROW,NSL,
     &               MAXIM,' ',.FALSE.,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
	ENDDO

	IF(NROWL.LT.1.OR.NROWL.GT.NROW.OR.NROWH.LT.1.OR.NROWH.GT.NROW
     &		     .OR.NROWL.GT.NROWH)  THEN
	   NROWL = 1
	   NROWH = NROW
	ENDIF
	LCYL = NROWH-NROWL+1

	INANG = NANG

	LDPX   = NSAM/2+1
	LDPY   = NROW/2+1
	LDPZ   = NSLICE/2+1
	LDPNMX = NSAM/2+1
	LDPNMY = NROW/2+1

 	K_DM     = IPALIGN64(K_ANG+NANG)
	K_LB     = IPALIGN64(K_DM+9*NANG)
	K_MAP    = K_LB
	K_IPCUBE = K_MAP

	CALL PREPSL_2(NSAM,NSLICE,NN,NMAT,Q(K_IPCUBE),RI)

	NMAT    = NSAM*NSLICE

	K_PROJ  = IPALIGN64(K_IPCUBE+5*NN)

        K_X     = IPALIGN64(K_PROJ+NSAM*NANG)
        K_IBN   = K_X

	MEMTOT  = K_IBN
C	MEMTOT  = IPALIGN64(K_IBN+NANG*N*N)

	IF (MEMTOT .GT. MAXMEM)  THEN
	   WRITE(NOUT,1001)  MEMTOT
	   WRITE(NOUT,1002)  MAXMEM
	   GOTO 9999
	ENDIF
C       LTB  will be found in READPRO = NANG*Nsam*Nrow

	CALL REDPRO2(NSAM,NROWL,NROWH,NANG,
     &	  Q(K_PROJ),Q(K_ANG),LTB,LTBN,ILIST,Q(K_IPCUBE),NN,Q(K_DM),
     &	  RI,ABA,NOUT)

	K_PRJE = IPALIGN64(K_PROJ+LTB)

C       IN THIS VERSION SIGMA IS ASSUMED TO BE PROPROTIONAL TO PROJ
C       AND THE CORRESPONDING ARRAY IS NOT USED ANYWHERE.

	K_SIGMA = K_PRJE
C	K_SIGMA = K_PRJE+LTB 
C       LTBN    = NSAM*NANG
	K_BCKE  = IPALIGN64(K_PRJE+LTBN)
	K_BCKN  = IPALIGN64(K_BCKE+NMAT*3)
        K_CB    = K_BCKE
	MEMTOT  = IPALIGN64(K_BCKN+NMAT)

	WRITE(NOUT,1001)  MEMTOT
1001	FORMAT(/,'  REPROJECTION MEMORY NEEDED: ',I0,/)
	IF (MEMTOT > MAXMEM)  THEN
	   WRITE(NOUT,1002) MAXMEM
1002	   FORMAT('  YOUR BUFFER LENGTH IS ONLY: ',I0,/,
     &            '  PROGRAM CANNOT RUN')
	   GOTO 9999
	ENDIF

	IFORM = 3
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FINPAT,INPIC,'U',IFORM,NSAM,LCYL,NSLICE,
     &               MAXIM,'OUTPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

	CALL  REPR2_S
     &	  (Q(K_BCKE),Q(K_BCKN),NSAM,LCYL,NSLICE,NROWL,NROWH,NANG,
     &     Q(K_IPCUBE),NN,Q(K_PROJ),Q(K_PRJE),
     &		IRI,LTB,LTBN,ABA,INPIC)
	CLOSE(INPIC)
 
C       CLOSE ALL THE PROJECTION FILES ...
	DO K=1,NANG
           CLOSE(IOFF+K)
	ENDDO
C
9999	CONTINUE
	END
@


1.24
log
@formatting ,prompts,cosmetic
@
text
@d13 1
a13 1
C=* Email: spider@@wadsworth.org                                        *
@


1.23
log
@prompts
@
text
@d66 1
a66 1
        DATA  INPIC/100/,IOFF/6/
d73 1
a73 1
        WRITE(NOUT,*)'  SINGLE-TILT ITERATIVE 3D RECONSTRUCTION'
d78 1
d80 5
a84 4
	K=0
	K2=1
	NANG=0
778	LERR=-1
d89 2
a90 1
	KP1=K+1
d103 1
a103 1
2001	FORMAT(' NUMBER OF IMAGES: ',I0)
d113 1
a113 1
	  IF (LERR.EQ.0)  THEN
d125 2
a126 1
        RI=IRI
d130 1
a130 1
	DO    K=1,NANG
d158 1
a158 1
	CALL  PREPSL_2(NSAM,NSLICE,NN,NMAT,Q(K_IPCUBE),RI)
d177 3
a179 3
	CALL  REDPRO2(NSAM,NROWL,NROWH,NANG,
     &	Q(K_PROJ),Q(K_ANG),LTB,LTBN,ILIST,Q(K_IPCUBE),NN,Q(K_DM),
     &	RI,ABA,NOUT)
d195 4
a198 5
1001	FORMAT(//' REPROJECTION PROGRAM FOR 3-D BACK-PROJECTION',/,
     &     '           MEMORY NEEDED: ',I0,/)
	IF (MEMTOT .GT. MAXMEM)  THEN
	   WRITE(NOUT,1002)  MAXMEM
1002	   FORMAT(' YOUR BUFFER LENGTH IS ONLY',I0,/,
@


1.22
log
@cosmetic, common removal, prompts
@
text
@d113 1
a113 1
             CALL  ERRT(101,'READING THE ANG. DOC FILE',NE)
@


1.21
log
@enter
@
text
@d4 2
a5 1
C                                                                      *
d35 7
a41 9
c  UNIX-Spider version
C  Reprojections 3D - slices, Richardsons method, 
c  reconstruction kept in the square to introduce other constraints.
c  Reconstruction from nrowl to nrowh.
c  Average outside the window is subtracted
c  min, max relate to the projections
c  Geometry  cylindrical
c  Simplified version
C                01/05/94
a46 1
	PARAMETER  (NILMAX=93,NILMXX=560)
d48 2
a49 3
	COMMON  /F_SPEC/  FINPAT,FINPIC,NLET
	CHARACTER*80  FINPIC
	CHARACTER*80  FINPAT
d51 4
d58 1
a58 1
     &	  K_BCKE,K_PROJ,K_bckn,K_PRJE,K_SIGMA,
d61 1
d63 1
d68 1
a68 1
	NULL=CHAR(0)
d73 3
a75 2
        WRITE(NOUT,*)' SINGLE-TILT ITERATIVE 3D RECONSTRUCTION PROGRAM'
	IUNIT=NOUT
d77 1
a77 1
     &	  'TEMPLATE FOR 2-D IMAGE NAME',IRTFLG)
d83 2
a84 2
	IF (NANG.EQ.NILMAX)  THEN
            WRITE(NOUT,*) ' Too many images, list truncated'
d89 4
a92 4
	IF (LERR.EQ.0)  THEN
	   NANG=NANG+1
	   ILIST(NANG)=Q(1)
	   K=K+1
d100 1
a100 1
2001	FORMAT(' NUMBER OF IMAGES: ',i5)
d103 4
a106 3
 	K_ANG=1
 	CALL  FILERD(FINPIC,NLETI,NULL,'ANGULAR DOC',IRTFLG)
	K2=1
d108 9
a116 9
	LERR=-1
	CALL  UNSAV(FINPIC,K,INPIC,ILIST(K+1),BUF,2,LERR,K2)
	IF (LERR.EQ.0)  THEN
	   Q(K_ANG+K) = BUF(2)
        ELSE
           CALL  ERRT(100, 'SOMETHING WRONG IN THE ANG. DOC FILE',NE)
           CLOSE(INPIC)
           RETURN
        ENDIF
d121 1
a121 1
     &	   'RADIUS OF RECONSTRUCTED OBJECT, HEIGHT OF THE SLICE')
d123 1
a123 2
        CALL  RDPRMI(NROWL,NROWH,NOT_USED,
     &	   'RECONSTRUCTION FROM NROW1 TO NROW2')
d136 2
a137 2
	   NROWL=1
	   NROWH=NROW
d139 1
a139 1
	LCYL=NROWH-NROWL+1
d141 1
a141 1
	INANG=NANG
d143 10
a152 10
	LDPX=NSAM/2+1
	LDPY=NROW/2+1
	LDPZ=NSLICE/2+1
	LDPNMX=NSAM/2+1
	LDPNMY=NROW/2+1

 	K_DM=IPALIGN64(K_ANG+NANG)
	K_LB=IPALIGN64(K_DM+9*NANG)
	K_MAP=K_LB
	K_IPCUBE=K_MAP
d156 3
a158 1
	NMAT=NSAM*NSLICE
d160 2
a161 1
	K_PROJ=IPALIGN64(K_IPCUBE+5*NN)
d163 2
a164 2
        K_X=IPALIGN64(K_PROJ+NSAM*NANG)
        K_IBN=K_X
d166 1
a166 3
	MEMTOT=K_IBN
C	MEMTOT=IPALIGN64(K_IBN+NANG*N*N)
	IF(MEMTOT.GT.MAXMEM)  THEN
d171 1
a171 1
C  LTB  will be found in READPRO = NANG*Nsam*Nrow
d175 14
a188 1
     &	RI,aba,NOUT)
a189 10
	K_PRJE=IPALIGN64(K_PROJ+LTB)
C In this version sigma is assumed to be proprotional to PROJ
C and the corresponding array is not used anywhere.
	K_SIGMA=K_PRJE
C	K_SIGMA=K_PRJE+LTB 
c ltbn = nsam*nang
	K_BCKE=IPALIGN64(K_prje+LTBN)
	k_bckn=IPALIGN64(k_bcke+nmat*3)
        K_CB=K_bcke
	MEMTOT=IPALIGN64(k_bckn+nmat)
d191 3
a193 3
1001	FORMAT(//'  Reprojection program for 3-D back-projection',/,
     &     '           Memory needed - ',I8,/)
	IF (MEMTOT.GT.MAXMEM)  THEN
d195 2
a196 2
1002	   FORMAT(' Sorry, your buffer length is only',I9,/,
     &            '  Program cannot be run')
d203 1
a203 1
     &               MAXIM,'3-D OUTPUT',.FALSE.,IRTFLG)
d213 1
a213 1
	DO    K=1,NANG
@


1.20
log
@GPL_2010
@
text
@d73 1
a73 1
     &	  'ENTER TEMPLATE FOR 2-D IMAGE NAME',IRTFLG)
@


1.19
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.18
log
@HRI GPL License used
@
text
@a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.17
log
@opfilec
@
text
@d8 24
@


1.16
log
@prepsl_s now prepsl_2
@
text
@d5 1
d30 1
a30 2
C        0         2         3         4         5         6         7 *
C23456789012345678901234567890123456789012345678901234567890123456789012
d67 1
a67 1
            WRITE(NOUT,*) '  Too many images, list truncated'
d112 1
a112 1
           CALL OPFILE(.FALSE.,FINPIC,IOFF+K,'O',IFORM,NSAM,NROW,NSL,
d181 1
a181 1
        CALL OPFILE(.TRUE.,FINPAT,INPIC,'U',IFORM,NSAM,LCYL,NSLICE,
@


1.15
log
@nloop,iloop_removed
@
text
@d137 1
a137 1
	CALL  PREPSL_S(NSAM,NSLICE,NN,NMAT,Q(K_IPCUBE),RI)
@


1.14
log
@bad opfile askname
@
text
@d102 1
a102 1
        CALL RDPRMI(IRI,NSLICE,NLOOP,ILOOP,
d105 1
a105 1
        CALL  RDPRMI(NROWL,NROWH,NLOOP,ILOOP,
@


1.13
log
@openfb--> opfile & cosmetic
@
text
@a4 1
C                                                                      *
d14 1
a14 1
C                                                                      *
d67 3
a69 3
		WRITE(NOUT,*) '  Too many images, list truncated'
		GOTO  779
	endif
d83 1
a83 1
2001	FORMAT('  Number of images =',i5)
d93 1
a93 1
	   Q(K_ANG+K)=BUF(2)
d95 1
a95 1
           WRITE(NOUT,*)  ' SOMETHING WRONG IN THE ANGULAR DOC FILE'
a108 1

d112 2
a113 2
           CALL OPFILE(.TRUE.,FINPIC,IOFF+K,'O',IFORM,NSAM,NROW,NSL,
     &               MAXIM,'3-D OUTPUT',.FALSE.,IRTFLG)
d118 1
a118 1
     &		.OR.NROWL.GT.NROWH)  THEN
d139 1
a139 1
	nmat=nsam*nslice
d143 1
a143 1
        K_X=IPALIGN64(K_PROJ+Nsam*NANG)
d149 3
a151 3
	WRITE(NOUT,1001)  MEMTOT
	WRITE(NOUT,1002)  MAXMEM
	GOTO 9999
d174 2
a175 2
1002	   FORMAT('  Sorry, your buffer length is only',I9,/,
     &      '  Program cannot be run')
@


1.12
log
@header
@
text
@a20 6
C        0         2         3         4         5         6         7 *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

	SUBROUTINE BPS2(MAXMEM)

d30 5
d53 1
d55 2
a56 1
	NULL=CHAR(0)
d58 1
a58 4
C  N - linear dimension of projections and restored cube
C  NANG - number of angles (projections)
C
        write(nout,*)' Single-tilt iterative 3D reconstruction program'
d61 4
a64 4
     &	  'Enter template for 2-D image name',IRTFLG)
	CALL  FILERD(FINPic,NLETI,NULL,'Selection doc',IRTFLG)
	k=0
	k2=1
d81 1
a81 1
C  NANG - total number of images
d86 1
a86 2
C GET THE ANGLES

d88 1
a88 1
 	CALL  FILERD(FINPIC,NLETI,NULL,'Angular doc',IRTFLG)
d90 1
a90 1
        DO k=0,NANG-1
d92 1
a92 1
	CALL  UNSAV(FINPIC,K,INPIC,ILIST(k+1),BUF,2,LERR,K2)
d94 1
a94 1
	   Q(K_ANG+k)=BUF(2)
d96 1
a96 1
           WRITE(NOUT,*)  ' Something wrong in the angular doc file'
a100 1
c 758    CONTINUE
d104 2
a105 2
     &	   'Radius of reconstructed object, height of the slice')
        ri=iri
d107 1
a107 1
     &	   'Reconstruction from nrow1 to nrow2')
d109 1
a109 1
C  Open all the projection files ....
d111 7
a117 9
	do    k=1,nang
 	CALL  FILGET(FINPAT,FINPIC,NLET,ILIST(k),INTFLG)
 	CALL  OPENFB(BUF,FINPIC,IOFF+K,NSAM,NROW,'O',NF,NSL)
 	IF (NF.NE.2)  THEN
	WRITE(NOUT,*) ' File not found'
	RETURN
	ENDIF
	enddo
c 77	continue
d121 2
a122 2
	NROWL=1
	NROWH=NROW
d140 1
a140 1
c!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
d142 1
a142 1
C
d156 1
a156 1
C
d160 1
a160 1
C
d180 7
a186 7
C
	CALL  FILERD(FINPAT,NLETI,NULL,'3-D output',ITRFLG)
	IF(IRTFLG.EQ.-1)  GOTO 9999
	IFORM=3
 	CALL  OPENFB(BUF,FINPAT,INPIC,NSAM,LCYL,'UNKNOWN',NF,NSLICE)
	IF(NF.NE.2)  GOTO 9999
C
d193 1
a193 2
c close all the projection files ...

d195 1
a195 1
	CLOSE(IOFF+K)
@


1.11
log
@for nt f90
@
text
@d2 23
@


1.10
log
@a
@
text
@d5 1
a5 1
C  Reprojections 3D - slices, Richardson's method, 
d21 5
a25 5
     A    NSAM,NROW,INANG,NN,NMAT,
     1	  LTB,LTBN,K_ANG,K_DM,K_LB,K_MAP,K_IPCUBE,
     2	  K_BCKE,K_PROJ,K_bckn,K_PRJE,K_SIGMA,
     3    KDM(7),
     4	  IUNIT,Q(1)
d141 2
a142 2
     1	Q(K_PROJ),Q(K_ANG),LTB,LTBN,ILIST,Q(K_IPCUBE),NN,Q(K_DM),
     2	RI,aba,NOUT)
d156 1
a156 1
     1     '           Memory needed - ',I8,/)
d160 1
a160 1
     1      '  Program cannot be run')
d171 3
a173 3
     1	  (Q(K_BCKE),Q(K_BCKN),NSAM,LCYL,NSLICE,NROWL,NROWH,NANG,
     2     Q(K_IPCUBE),NN,Q(K_PROJ),Q(K_PRJE),
     3		IRI,LTB,LTBN,ABA,INPIC)
@


1.9
log
@R
@
text
@d30 1
a30 1
CNO_SAVE
@


1.8
log
@*** empty log message ***
@
text
@d94 1
a94 1
 	CALL  OPENFB(BUF,FINPIC,IOFF+K,NSAM,NROW,'R',NF,NSL)
@


1.7
log
@ipalign64
@
text
@d70 1
a70 1
        DO 758 k=0,NANG-1
d80 2
a81 1
 758    CONTINUE
d92 1
a92 1
	do  77  k=1,nang
d99 2
a100 1
77	continue
d178 3
a180 2
	DO  78  K=1,NANG
78	CLOSE(IOFF+K)
@


1.6
log
@removed unused variables, cosmetic
@
text
@d14 1
a14 2
	PARAMETER  (NILMAX=93,NILMXX=500)
#ifdef SP_UNIX
a15 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
d115 2
a116 2
 	K_DM=K_ANG+NANG
	K_LB=K_DM+9*NANG
d124 1
a124 1
	K_PROJ=K_IPCUBE+5*NN
d126 1
a126 1
        K_X=K_PROJ+Nsam*NANG
d130 1
a130 1
C	MEMTOT=K_IBN+NANG*N*N
d142 1
a142 1
	K_PRJE=K_PROJ+LTB
d148 2
a149 2
	K_BCKE=K_prje+LTBN
	k_bckn=k_bcke+nmat*3
d151 1
a151 1
	MEMTOT=k_bckn+nmat
@


1.5
log
@nosave nilmxx=500
@
text
@d1 1
d3 1
a3 1
C
d13 1
a13 1
C
d21 1
a21 1
	CHARACTER*80  FINPIC,finfo
d31 2
a32 2
	double precision  aba
C
d35 1
a35 1
c
d37 1
a37 1
C
d45 1
a45 1
	CALL  FILERD(FINPic,NLETi,NULL,'Selection doc',IRTFLG)
d50 1
a50 1
	IF(NANG.eq.NILMAX)  THEN
d52 1
a52 1
		goto  779
d56 5
a60 5
	IF(LERR.EQ.0)  THEN
	NANG=NANG+1
	ILIST(NANG)=Q(1)
	K=K+1
	GOTO  778
d63 1
a63 1
c
d65 6
a70 6
c
	write(nout,2001) nang
2001	format('  Number of images =',i5)
c
c get the angles
c
d72 3
a74 3
 	CALL  FILERD(FINPIC,NLETi,NULL,'Angular doc',IRTFLG)
	k2=1
        do 758 k=0,nang-1
d76 7
a82 7
	CALL  UNSAV(FINPIC,K,INPIC,ilist(k+1),BUF,2,LERR,K2)
	IF(LERR.EQ.0)  THEN
	Q(K_ANG+k)=BUF(2)
        else
           write(nout,*)  ' Something wrong in the angular doc file'
           close(inpic)
           return
d84 1
a84 1
 758    continue
d86 3
a88 3
c
        CALL RDPRMI(iri,nslice,NLOOP,ILOOP,
     &	'Radius of reconstructed object, height of the slice')
d90 3
a92 3
        CALL  RDPRMI(nrowl,nrowh,NLOOP,ILOOP,
     &	'Reconstruction from nrow1 to nrow2')
C
d94 1
a94 1
c
d98 2
a99 2
 	IF(NF.NE.2)  THEN
	write(nout,*) ' File not found'
d103 8
a110 8
c
	if(nrowl.lt.1.or.nrowl.gt.nrow.or.nrowh.lt.1.or.nrowh.gt.nrow
     &		.or.nrowl.gt.nrowh)  then
	nrowl=1
	nrowh=nrow
	endif
	lcyl=nrowh-nrowl+1
C
d112 1
a112 1
C
d118 1
a118 1
C
d123 2
a124 2
C
	CALL  PREPSL_s(NSAM,NSLICE,NN,NMAT,Q(K_IPCUBE),RI)
d129 1
a129 1
C
d132 1
a132 1
C
d159 3
a161 3
	IF(MEMTOT.GT.MAXMEM)  THEN
	WRITE(NOUT,1002)  MAXMEM
1002	FORMAT('  Sorry, your buffer length is only',I9,/,
d163 1
a163 1
	GOTO 9999
d172 4
a175 4
	call  repr2_s
     1	  (Q(K_BCKE),q(k_bckn),nsam,LCYL,nslice,nrowl,nrowh,nang,
     2     q(k_ipcube),nn,Q(K_PROJ),Q(K_PRJE),
     3		iri,ltb,LTBN,aba,inpic)
d177 1
a177 1
c 
d179 3
a181 3
c
	do  78  k=1,nang
78	close(ioff+k)
@


1.4
log
@number of projections changed to 50000
@
text
@d13 1
a13 1
	PARAMETER  (NILMAX=93,NILMXX=50000)
d33 1
@


1.3
log
@nilmax=300
@
text
@d13 1
a13 1
	PARAMETER  (NILMAX=93,NILMXX=300)
@


1.2
log
@cpp_lines_added
@
text
@d13 1
a13 1
	PARAMETER  (NILMAX=93)
d23 1
a23 1
	COMMON     DUMMY(80),BUF(1024),ILIST(NILMAX),
@


1.1
log
@Initial revision
@
text
@d14 3
d18 1
@
