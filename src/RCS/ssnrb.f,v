head	1.28;
access;
symbols
	pre_mrcs:1.28
	healthdept_2018:1.28
	pre_getangas:1.22
	GPL2010:1.18
	pre_GPL2010:1.17
	pre_var_equation:1.17
	pre_fftwrings:1.17
	pre_opfiles:1.17
	src:1.17
	best-code:1.17
	x-named-regs:1.17
	x:1.17
	v13-00:1.17
	pre_GPL:1.16
	prec_CA:1.16
	noindx:1.15
	Bproc:1.13
	oct21:1.11
	last77:1.10;
locks; strict;
comment	@c @;


1.28
date	2018.10.03.14.34.23;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2012.05.24.17.53.05;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2012.05.24.14.29.58;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2012.05.23.16.12.57;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2012.05.23.13.57.16;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2012.05.22.16.39.08;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2011.01.10.14.09.50;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2011.01.03.20.03.58;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2011.01.03.19.17.50;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2011.01.03.16.47.36;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2010.06.24.13.27.01;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.17.21.04.49;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2003.02.19.18.01.49;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2001.09.18.23.45.29;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	2001.07.12.16.31.44;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	2000.02.03.16.00.53;	author bimal;	state Exp;
branches;
next	1.12;

1.12
date	99.12.06.20.55.55;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.06.04.21.02.19;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	98.02.12.17.28.47;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	97.10.24.20.34.46;	author hedget;	state Exp;
branches;
next	1.8;

1.8
date	97.10.24.20.06.33;	author hedget;	state Exp;
branches;
next	1.7;

1.7
date	97.10.17.15.19.32;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.10.15.14.29.11;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	97.01.14.20.40.56;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	97.01.14.16.04.11;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.10.06.16.05.47;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.10.05.16.38.31;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.53.05;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.28
log
@email_health_dept
@
text
@
C ++********************************************************************
C                                                                      *
C SSNRB.F                                                               *
C              OPFILEC                             FEB  03 ARDEAN LEITH
C              OPFILES REWRITE                     DEC  10 ARDEAN LEITH
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2012  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C SSNRB()
C
C PARAMETERS:     
C
C OPERATION: 'RF SN'
C
C PURPOSE:  COMPUTE THE SPECTRAL SIGNAL-TO-NOISE RATIO (SSNR) OF A  
C           SERIES OF IMAGES.
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

         SUBROUTINE SSNRB()

         INCLUDE 'CMBLOCK.INC'
         INCLUDE 'CMLIMIT.INC'

         CHARACTER(LEN=MAXNAM)         :: FILPAT1,FILMASK
         DOUBLE PRECISION, ALLOCATABLE :: FPOWER(:,:)
         DOUBLE COMPLEX,   ALLOCATABLE :: FAMPL(:,:)
         REAL, ALLOCATABLE             :: B(:,:), RMSK(:,:)
         CHARACTER(LEN=MAXNAM)         :: DOCNAM

         REAL                          :: DLIST(5)
         INTEGER, ALLOCATABLE          :: LR(:) 
         DOUBLE PRECISION, ALLOCATABLE :: SIGNAL(:), SIGDIF(:)
         CHARACTER (LEN=1)             :: NULL = CHAR(0)
         CHARACTER (LEN=100)           :: COMMENT
         LOGICAL                       :: NEWFILE
         LOGICAL                       :: FOUROK = .FALSE.
         LOGICAL                       :: ASKNAM = .TRUE.

         INTEGER, PARAMETER            :: LUN1   = 20
         INTEGER, PARAMETER            :: LUNM   = 21
         INTEGER, PARAMETER            :: LUNDOC = 80
         INTEGER, PARAMETER            :: LUNXM1 = 81

	 REAL                          :: SNR
	 REAL                          :: SIGNALSUM
	 REAL                          :: SIGDIFSUM

C        OPEN FIRST INPUT FILE, NOT FOURIER
         MAXIM1  = 0
         NILMAX  = NIMAX         ! INUMBR FROM CMLIMIT
         CALL OPFILES(0,LUN1,LUNDOC,LUNXM1,  
     &             ASKNAM,FILPAT1,NLET1, 'O',
     &             IFORM1,NX1,NY1,NZ1,MAXIM1,
     &             NULL,
     &             FOUROK, INUMBR,NILMAX, 
     &             NDUM,NGOT1,IMG1, IRTFLG) 
         IF (IRTFLG .NE. 0) RETURN

C        OPEN MASK FILE (NOT FOURIER)
         MAXIMM = 0.0
         CALL OPFILEC(0,ASKNAM,FILMASK,LUNM,'O',IFORMM,
     &                NXM,NYM,NZM,
     &                MAXIMM,'MASK',FOUROK,IRTFLG)
         IF (IRTFLG .NE. 0)  RETURN

         CALL SIZCHK(UNUSED,NX1,NY1,NZ1,0,
     &                      NXM,NYM,NZM,0,IRTFLG)
         IF (IRTFLG .NE. 0) GOTO 999

C        TOTAL NUMBER OF IMAGES
         WRITE(NOUT,2001) NGOT1
 2001    FORMAT('  NUMBER OF IMAGES: ',I5)

         WI = 1.0
         CALL RDPRM1S(WI,NOT_USED,'RING WIDTH',IRTFLG)
         IF (IRTFLG .NE. 0) GOTO 999

         Y1     = FLOAT(MAX(NX1,NY1))
         INC    = INT(Y1/WI) / 2 + 1
         NXLD   = NX1 + 2 - MOD(NX1,2)

         ALLOCATE (RMSK  (NXLD,  NY1),
     &             FPOWER(NXLD/2,NY1), 
     &             FAMPL (NXLD/2,NY1), 
     &             B     (NXLD,  NY1),  
     &             LR    (INC),  
     &             SIGNAL(INC),  
     &             SIGDIF(INC), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           MWANT = NX1*NY1  + 2 * NXLD/2*NY1 +  
     &             NXLD*NY1 + 3 * INC
           CALL ERRT(46,'RF SN, RMSK...',MWANT)
           GOTO 999
        ENDIF

C       READ MASK INTO: RMSK
        CALL READV(LUNM,RMSK,NXLD,NY1, NXM,NYM,1)

C       INITIALIZE THE SUMS
        FPOWER = 0.0D0
        FAMPL     = CMPLX(0.0,0.0)

        NINDX1 = 1

        DO                      ! LOOP OVER ALL IMAGES 

C          READ  CURRENT IMAGE INTO: B
           CALL READV(LUN1,B,NXLD,NY1, NX1,NY1,1)

C          MASK MULTIPLY
c$omp      parallel do private(i,j)
           DO J=1,NY1
              DO I=1,NX1
                 B(I,J) = B(I,J) * RMSK(I,J)
              ENDDO
           ENDDO

C          FORWARD FFT
           INV = +1
           CALL FMRS_2(B,NX1,NY1,INV)

           IF (INV .NE. 1) GOTO 999

c$omp      parallel do private(i,j)
           DO J=1,NY1

              DO I=0,NXLD/2-1

              FAMPL (I+1,J) = FAMPL(I+1,J) + 
     &                        CMPLX(B(2*I+1,J),B(2*I+2,J))
              FPOWER(I+1,J) = FPOWER(I+1,J) + 
     &                        B(2*I+1,J) * DBLE(B(2*I+1,J)) + 
     &                        B(2*I+2,J) * DBLE(B(2*I+2,J))
              ENDDO
           ENDDO

           !write(6,*)'FPOWER(15,15) =',FPOWER(15,15)
           !write(6,*)'FAMPL(15,15)  =',REAL(FAMPL(15,15)),AIMAG(FAMPL(15,15))

C          OPEN NEXT INPUT FILE, UPDATES NINDX1 
           CALL NEXTFILE(NINDX1, INUMBR, 
     &                   FOUROK, LUNXM1,
     &                   NGOT1,  MAXIM1,  
     &                   LUN1,0, FILPAT1, 'O',
     &                   IMG1,   IRTFLG)
           IF (IRTFLG .EQ. -1) EXIT      ! END OF INPUT STACK
           IF (IRTFLG .NE. 0) GOTO 999   ! ERROR  

           CALL LUNGETSIZE(LUN1,NX,NY,NZ,IRTFLG)
           CALL SIZCHK(UNUSED,NX1,NY1,  1,0,
     &                        NX, NY, NZ,0,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 999   ! BAD SIZE

        ENDDO

        SIGNAL = 0.0D0  ! ARRAY INIT
        SIGDIF = 0.0D0  ! ARRAY INIT
        LR     = 0

        DO  J=1,NY1
           JJ = J-1
           IF (JJ > NY1/2)  JJ = JJ - NY1

           DO  I=1,NXLD/2
              IF (I == 1 .AND. JJ < 0) CYCLE

              PII = 0.5*SQRT((FLOAT(JJ)/ FLOAT(NY1/2))**2 +
     &                       (FLOAT(I-1)/FLOAT(NX1/2))**2)

              IF (PII <= 0.5)  THEN
                 L         = MIN(MAX(NINT(PII*Y1/WI)+1,1),INC)

                 LR(L)     = LR(L) + 1

                 SIGNAL(L) = SIGNAL(L) + ABS(FAMPL(I,J))**2

                 SIGDIF(L) = SIGDIF(L) + FPOWER(I,J) - 
     &                       ABS(FAMPL(I,J))**2 / NGOT1
              ENDIF
           ENDDO            
        ENDDO            

C       SAVE RESULTS
        CALL OPENDOC(DOCNAM,.TRUE.,NLET,LUNDOC,NDOC,ASKNAM,
     &           'OUTPUT DOCUMENT',.FALSE.,.FALSE.,.TRUE.,
     &            NEWFILE,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 999  

C                  123456789 123456789 123456789 123456789 
        COMMENT = 'RADIUS NORM.RAD        SSNR   '     //
     &            '      NVALS       VARIANCE    '
        CALL LUNDOCPUTCOM(NDOC,COMMENT(1:60),IRTFLG)

        DO L=1,INC
           IF (LR(L) .NE. 0)  THEN
              DLIST(1) = L

              DLIST(2) = FLOAT(L-1) / FLOAT(INC-1) * 0.5

C              DLIST(3) = AMAX1(0.0, SNGL((FLOAT(NGOT1-1) / NGOT1**2) *
C     &                   SIGNAL(L) / SIGDIF(L)) - 1.0)
              DLIST(3) = AMAX1(0.0, SNGL((FLOAT(NGOT1-1) / NGOT1) *
     &                   SIGNAL(L) / SIGDIF(L)) - 1.0)

              DLIST(4) = LR(L)

C             N1       = LR(L)
C             N2       = (NGOT1-1) * LR(L)
C             DLIST(5) = SQRT(2.*((N2+N1-2) * (1+2*DLIST(3)) +
C     &                   N1 * DLIST(3)**2) / FLOAT(N1*(N2-4)))

              DLIST(5) = SQRT((2 + 4*DLIST(3))/NGOT1 +
     &        (2 + 4*DLIST(3) + 
     &         2*DLIST(3)**2)/(NGOT1*(LR(L)-1)))


              CALL LUNDOCWRTDAT(NDOC,L,DLIST(2),4,IRTFLG)
           ENDIF
        ENDDO

	SIGNALSUM = 0
	SIGDIFSUM = 0

        SNR = 0
        DO L=1,INC
	   SIGNALSUM = SIGNALSUM + SIGNAL(L)
	   SIGDIFSUM = SIGDIFSUM + SIGDIF(L)
        ENDDO

        SNR = (SIGNALSUM/SIGDIFSUM) / FLOAT(NGOT1)
        WRITE(NOUT,*) '  Integral SNR= ',SNR

999     CLOSE(LUNDOC)
        CLOSE(LUNM)
        CLOSE(LUN1)

        IF (ALLOCATED(FPOWER)) DEALLOCATE (FPOWER) 
        IF (ALLOCATED(FAMPL))  DEALLOCATE (FAMPL)
        IF (ALLOCATED(RMSK))   DEALLOCATE (RMSK) 
        IF (ALLOCATED(B))      DEALLOCATE (B)

        END 
@


1.27
log
@Integral SNR=
@
text
@d14 1
a14 1
C=* Email: spider@@wadsworth.org                                        *
@


1.26
log
@gpk changes
@
text
@d253 1
a253 1
        WRITE(NOUT,*) '  Total SNR= ',SNR
@


1.25
log
@ DLIST(5) = SQRT((2 + 4*DLIST(3))/NGOT1.....
@
text
@d66 4
d222 3
a224 1
              DLIST(3) = AMAX1(0.0, SNGL((FLOAT(NGOT1-1) / NGOT1**2) *
d229 3
a231 3
C              N1       = LR(L)
C              N2       = (NGOT1-1) * LR(L)
C              DLIST(5) = SQRT(2.*((N2+N1-2) * (1+2*DLIST(3)) +
d243 12
d260 1
a260 1
        IF (ALLOCATED(FAMPL))     DEALLOCATE (FAMPL)
@


1.24
log
@changed var. calc.
@
text
@d228 1
a228 1
              DLIST(5) = SQRT((2 + 4*DLIST(3))/LR(L) +
d230 2
a231 1
     &         2*DLIST(3)**2)/(LR(L)*(DLIST(4)-1)))
@


1.23
log
@bug fixed
@
text
@d218 1
a218 2
              DLIST(3) = AMAX1(0.0, SNGL((FLOAT(NGOT1-1) / 
     &                        (NGOT1**2)) *
d223 8
a230 4
              N1       = LR(L)
              N2       = (NGOT1-1) * LR(L)
              DLIST(5) = SQRT(2.*((N2+N1-2) * (1+2*DLIST(3)) +
     &                   N1 * DLIST(3)**2) / FLOAT(N1*(N2-4)))
@


1.22
log
@used inumbr for nimax
@
text
@d12 1
a12 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d47 2
a48 2
         DOUBLE PRECISION, ALLOCATABLE :: SUMCMP(:,:)
         DOUBLE COMPLEX,   ALLOCATABLE :: FA(:,:)
d54 1
a54 1
         DOUBLE PRECISION, ALLOCATABLE :: SIGNAL(:), FR(:)
d56 1
a56 1
         CHARACTER (LEN=60)            :: COMMENT
d71 1
a71 1
     &             IFORM1,NSAM1,NROW1,NSLICE1,MAXIM1,
d80 1
a80 1
     &                NSAMM,NROWM,NSLICEM,
d84 2
a85 2
         CALL SIZCHK(UNUSED,NSAM1,NROW1,NSLICE1,0,
     &                      NSAMM,NROWM,NSLICEM,0,IRTFLG)
d96 1
a96 2

         Y1     = FLOAT(MAX(NSAM1,NROW1))
d98 1
a98 1
         NNNN   = NSAM1 + 2 - MOD(NSAM1,2)
d100 7
a106 7
         ALLOCATE (RMSK(NSAM1,NROW1),
     &            SUMCMP(NNNN/2,NROW1), 
     &            FA(NNNN/2,NROW1), 
     &            B(NNNN,NROW1),  
     &            LR(INC),  
     &            SIGNAL(INC),  
     &            FR(INC), STAT=IRTFLG)
d108 3
a110 3
           MWANT = NSAM1*NROW1 + NNNN/2*NROW1 +  NNNN/2*NROW1 + 
     &             NNNN*NROW1  + 3* INC
           CALL ERRT(46,'RF SN, RMSK',MWANT)
d113 3
a115 3
  
C       READ MASK
        CALL REDVOL(LUNM,NSAM1,NROW1,1,1,RMSK,IRTFLG)
d118 2
a119 2
        SUMCMP = 0.0D0
        FA     = CMPLX(0.0,0.0)
d125 2
a126 2
C          READ  CURRENT IMAGE
           CALL REDVOL(LUN1,NSAM1,NROW1,1,1,B,IRTFLG)
d130 2
a131 2
           DO J=1,NROW1
              DO I=1,NSAM1
d138 2
a139 1
           CALL FMRS_2(B,NSAM1,NROW1,INV)
d142 10
a151 7
c$omp      parallel do private(i,j,ix)
           DO J=1,NROW1
              DO I=1,NNNN,2
                 IX           = (I+1)/2
                 FA(IX,J)     = FA(IX,J) + CMPLX(B(I,J),B(I+1,J))
                 SUMCMP(IX,J) = SUMCMP(IX,J) + B(I,J) *
     &                          DBLE(B(I,J))+B(I+1,J) * DBLE(B(I+1,J))
d155 3
d167 3
a169 3
           CALL LUNGETSIZE(LUN1,NSAM,NROW,NSLICE,IRTFLG)
           CALL SIZCHK(UNUSED,NSAM1,NROW1,  1,0,
     &                        NSAM, NROW, NSLICE,0,IRTFLG)
d173 3
a175 4
      
        
        SIGNAL = 0.0D0
        FR     = 0.0D0
d178 1
a178 1
        DO 149 J=1,NROW1
d180 4
a183 5
           IF (JJ .GT. NROW1/2)  JJ = JJ-NROW1
           DO 149 I=1,NNNN/2
              IF (I.EQ.1 .AND. JJ.LT.0) GOTO 149
              PII = 0.5*SQRT((FLOAT(JJ)/FLOAT(NROW1/2))**2 +
     &              (FLOAT(I-1)/FLOAT(NSAM1/2))**2)
d185 4
a188 1
              IF (PII .LE. 0.5)  THEN
d190 1
d192 5
a196 3
                 SIGNAL(L) = SIGNAL(L) + ABS(FA(I,J))**2
                 FR(L)     = FR(L) + SUMCMP(I,J) - 
     &                       ABS(FA(I,J))**2 / NGOT1
d198 2
a199 1
149     CONTINUE            ! DOES GOTO CYCLE INNER OR OUTER LOOP? al
d207 4
a210 4
C                  123456789 123456789 123456789 123456789 123456789 123456789
        COMMENT = 'RADIUS NORM.-RAD.    SSNR         NRING       VAR.'
          
        CALL LUNDOCPUTCOM(NDOC,COMMENT(1:51),IRTFLG)
d213 1
a213 1
           IF (LR(L).NE.0)  THEN
d215 1
d217 5
a221 2
              DLIST(3) = AMAX1(0.0,SNGL((FLOAT(NGOT1-1)/NGTO1)*
     &                    SIGNAL(L) / FR(L))-1.0)
d223 1
d226 1
a226 1
              DLIST(5) = SQRT(2.*((N2+N1-2)*(1+2*DLIST(3)) +
a229 1
              !!CALL SAVD(NDOC,DLIST,NDLI,IRTFLG)
d237 2
a238 2
        IF (ALLOCATED(SUMCMP)) DEALLOCATE (SUMCMP) 
        IF (ALLOCATED(FA))     DEALLOCATE (FA)
@


1.21
log
@lundoc bug
@
text
@a46 1
         INTEGER                       :: ILIST1(NIMAX)  ! FROM CMLIMIT
d68 1
a68 1
         NILMAX  = NIMAX
d73 1
a73 1
     &             FOUROK, ILIST1,NILMAX, 
d153 1
a153 1
           CALL NEXTFILE(NINDX1, ILIST1, 
@


1.20
log
@*** empty log message ***
@
text
@d192 1
a192 1
        CALL OPENDOC(DOCNAM,.TRUE.,NLET,NDOC,LUNDOC,ASKNAM,
d200 1
a200 1
        CALL LUNDOCPUTCOM(LUNDOC,COMMENT(1:51),IRTFLG)
d214 1
a214 1
              CALL LUNDOCWRTDAT(LUNDOC,L,DLIST(2),4,IRTFLG)
@


1.19
log
@consolidated with ssnr,  used opfiles also
@
text
@d4 1
a4 1
C SSNR.F                                                               *
d29 1
a29 1
C SSNRB
@


1.18
log
@GPL_2010
@
text
@d1 4
a4 3
C++*********************************************************************
C
C SSNRB.F
d6 2
a7 1
C
d29 5
d35 2
a36 3
C SSNRB(INC,Y1,WI,ILIST,NANG,NNNN,NSAM,NROW,LUN9)
C 
C IMAGE_PROCESSING_ROUTINE
d39 6
a44 1
C **********************************************************************
d46 68
a113 22
        SUBROUTINE SSNRB(INC,Y1,WI,ILIST,NANG,NNNN,NSAM,NROW,LUN9)
     
        INCLUDE 'CMBLOCK.INC'
        PARAMETER (NDLI=5)

        COMMON  /F_SPEC/  FINPAT,FINPIC,NLET
        DOUBLE PRECISION, ALLOCATABLE, DIMENSION(:,:) :: SUMCMP
        DOUBLE COMPLEX, ALLOCATABLE, DIMENSION(:,:) :: FA
        REAL, ALLOCATABLE, DIMENSION(:,:) :: B,RMSK

C       LR, SIGNAL AND FR ARE AUTOMATIC ARRAYS

        DIMENSION DLIST(NDLI), LR(INC),ILIST(NANG)
        DOUBLE PRECISION SIGNAL(INC),FR(INC)
        CHARACTER*80  FINPAT,FINPIC
 
        DATA  LUNI/99/

        ALLOCATE (RMSK(NSAM,NROW), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF SN, RMSK',IER)
           RETURN
d116 2
a117 4
        DO    J=1,NROW
          CALL REDLIN(LUN9,RMSK(1,J),NSAM,J)
        ENDDO
        CLOSE(LUN9)
d119 3
a121 5
        ALLOCATE (SUMCMP(NNNN/2,NROW), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF SN, SUMCMP',IER)
           RETURN
        ENDIF
d123 1
a123 5
        ALLOCATE (FA(NNNN/2,NROW), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF SN, FA',IER)
           RETURN
        ENDIF
d125 1
a125 5
        ALLOCATE (B(NNNN,NROW), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF SN, B',IER)
           RETURN
        ENDIF
d127 2
d130 5
a134 20
C       INITIALIZE THE SUMS
 
        SUMCMP=0.0D0
        FA=CMPLX(0.0,0.0)

        DO  K=1,NANG
C          READ ONE PROJECTION
           CALL  FILGET(FINPAT,FINPIC,NLET,ILIST(K),INTFLAG)
           MAXIM = 0
           CALL OPFILEC(0,.FALSE.,FINPIC,LUNI,'O',IFORM,LSAM,LROW,NSL,
     &             MAXIM,'DUMMY',.FALSE.,IRTFLG)

           IF (IRTFLG .NE. 0) THEN
               WRITE(NOUT,2032) FINPIC
2032           FORMAT(' FILE SKIPPED: ',A)
           ELSE
 
C             READ  IMAGE
              DO I=1,NROW
                 CALL  REDLIN(LUNI,B(1,I),NSAM,I)
d136 14
a149 6
              CLOSE(LUNI)
c$omp         parallel do private(i,j)
              DO J=1,NROW
                 DO I=1,NSAM
                    B(I,J)=B(I,J)*RMSK(I,J)
                 ENDDO
d151 1
d153 13
a165 7
              INV=+1
              CALL  FMRS_2(B,NSAM,NROW,INV)
              IF(INV.NE.1)  THEN
                 CLOSE(LUNI)
                 CALL  ERRT(38,'FB',NE)
                 RETURN
              ENDIF
a166 10
c$omp         parallel do private(i,j,ix)
              DO J=1,NROW
                 DO I=1,NNNN,2
                    IX=(I+1)/2
                    FA(IX,J)=FA(IX,J)+CMPLX(B(I,J),B(I+1,J))
                    SUMCMP(IX,J)=SUMCMP(IX,J)+
     &                 B(I,J)*DBLE(B(I,J))+B(I+1,J)*DBLE(B(I+1,J))
                 ENDDO
              ENDDO
           ENDIF
d169 1
d174 3
a176 3
        DO 149 J=1,NROW
           JJ=J-1
           IF (JJ.GT.NROW/2)  JJ=JJ-NROW
d178 10
a187 8
              IF (I.EQ.1.AND.JJ.LT.0) GOTO 149
              PII=0.5*SQRT((FLOAT(JJ)/FLOAT(NROW/2))**2+
     &        (FLOAT(I-1)/FLOAT(NSAM/2))**2)
              IF (PII.LE.0.5)  THEN
                 L=MIN0(MAX0(NINT(PII*Y1/WI)+1,1),INC)
                 LR(L)=LR(L)+1
                 SIGNAL(L)=SIGNAL(L)+ABS(FA(I,J))**2
                 FR(L)=FR(L)+SUMCMP(I,J)-ABS(FA(I,J))**2/NANG
d189 1
a189 1
149     CONTINUE
d192 24
a215 12
        DO   L=1,INC
           IF(LR(L).NE.0)  THEN
              DLIST(1)=L
              DLIST(2)=FLOAT(L-1)/FLOAT(INC-1)*0.5
              DLIST(3)=
     &        AMAX1(0.0,SNGL((FLOAT(NANG-1)/NANG)*SIGNAL(L)/FR(L))-1.0)
              DLIST(4)=LR(L)
              N1=LR(L)
              N2=(NANG-1)*LR(L)
             DLIST(5)=SQRT(2.*((N2+N1-2)*(1+2*DLIST(3))+N1*DLIST(3)**2)
     &        /FLOAT(N1*(N2-4)))
              CALL  SAVD(LUN9,DLIST,NDLI,IRTFLG)
d219 8
a226 2
        CLOSE(LUN9)
        CALL SAVDC
a227 4
        DEALLOCATE (SUMCMP) 
        DEALLOCATE (FA)
        DEALLOCATE (RMSK) 
        DEALLOCATE (B)
@


1.17
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.16
log
@opfilec
@
text
@d1 1
a1 1
C++*************************************************************************
d6 25
a30 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981-1995, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
d37 1
a37 1
C **************************************************************************
@


1.15
log
@sign of JJ corrected
@
text
@d4 1
d17 1
a17 2
C       
C
a19 1
C        1         2         3         4         5         6         7
d23 1
a23 1
        SUBROUTINE  SSNRB(INC,Y1,WI,ILIST,NANG,NNNN,NSAM,NROW,LUN9)
d71 1
a71 1
C INITIALIZE THE SUMS
a74 1
        MAXIM = 0.0
d77 1
a77 1
C READ ONE PROJECTION
d79 2
a80 1
           CALL OPFIL(.FALSE.,FINPIC,LUNI,'O',LSAM,LROW,NSL,
d82 1
d84 2
a85 2
               WRITE(NOUT,2032)  FINPIC
2032           FORMAT(' FILE SKIPPED ',A80)
d88 2
a89 5

C
C  READ  IMAGE
C
              DO    I=1,NROW
d93 3
a95 3
c$omp parallel do private(i,j)
              DO    J=1,NROW
                 DO    I=1,NSAM
d108 3
a110 3
c$omp parallel do private(i,j,ix)
              DO    J=1,NROW
                 DO    I=1,NNNN,2
d112 3
a114 3
          FA(IX,J)=FA(IX,J)+CMPLX(B(I,J),B(I+1,J))
          SUMCMP(IX,J)=SUMCMP(IX,J)+
     &    B(I,J)*DBLE(B(I,J))+B(I+1,J)*DBLE(B(I+1,J))
d120 3
a122 3
        SIGNAL=0.0D0
        FR=0.0D0
        LR=0
d126 1
a126 1
           IF(JJ.GT.NROW/2)  JJ=JJ-NROW
d128 1
a128 1
              IF(I.EQ.1.AND.JJ.LT.0) GOTO 149
d131 1
a131 1
              IF(PII.LE.0.5)  THEN
d135 1
a135 1
        FR(L)=FR(L)+SUMCMP(I,J)-ABS(FA(I,J))**2/NANG
d138 2
a139 1
C SAVE RESULTS
d145 1
a145 1
     &  AMAX1(0.0,SNGL((FLOAT(NANG-1)/NANG)*SIGNAL(L)/FR(L))-1.0)
d149 1
a149 1
        DLIST(5)=SQRT(2.*((N2+N1-2)*(1+2*DLIST(3))+N1*DLIST(3)**2)
d154 1
d156 1
a156 1
        CALL  SAVDC
@


1.14
log
@expression for L (Ring number) corrected (to be the same as for RF and RF 3).
@
text
@d129 1
a129 1
           IF(JJ.GT.NROW/2)  JJ=NROW-JJ
@


1.13
log
@adapted for dynamical memory allocation
@
text
@d135 1
a135 1
                 L=MIN0(MAX0(INT(PII*Y1/WI),1),INC)
@


1.12
log
@header
@
text
@d15 2
a16 2
C SSNRB(BUF,B,LR,RMSK,SIGNAL,FR,
C 	 SUMCMP,FA,INC,Y1,WI,ILIST,NANG,NNNN,NSAM,NROW,LUN9)
d18 4
d24 1
a24 2
	SUBROUTINE  SSNRB(BUF,B,LR,RMSK,SIGNAL,FR,
     &	 SUMCMP,FA,INC,Y1,WI,ILIST,NANG,NNNN,NSAM,NROW,LUN9)
d28 44
a71 16
	DIMENSION DLIST(NDLI)
	DIMENSION   B(NNNN,NROW),RMSK(NSAM,NROW),LR(INC)
	DOUBLE PRECISION SUMCMP(NNNN/2,NROW),SIGNAL(INC),FR(INC)
	DOUBLE COMPLEX FA(NNNN/2,NROW)
	DIMENSION  ILIST(NANG),BUF(1024)
	COMMON  /F_SPEC/  FINPAT,FINPIC,NLET
	CHARACTER*80  FINPAT,FINPIC
	CHARACTER*1 NULL
         DATA  LUNI/99/
C
	NULL=CHAR(0)
	DO    J=1,NROW
	  CALL REDLIN(LUN9,RMSK(1,J),NSAM,J)
	ENDDO
	CLOSE(LUN9)
C --
d73 6
a78 8
	DO    J=1,NROW
 	DO    I=1,NNNN/2
	SUMCMP(I,J)=0.0D0
	FA(I,J)=CMPLX(0.0,0.0)
	ENDDO
	ENDDO
C
         DO  K=1,NANG
d80 9
a88 6
         CALL  FILGET(FINPAT,FINPIC,NLET,ILIST(K),INTFLAG)
         CALL  OPENFB(BUF,FINPIC,LUNI,LSAM,LROW,'O',NF,NSL)
        IF(NF.NE.2)  THEN
         WRITE(NOUT,2032)  FINPIC
2032     FORMAT(' FILE SKIPPED ',A80)
	ELSE
d92 4
a95 4
	DO    I=1,NROW
	  CALL  REDLIN(LUNI,B(1,I),NSAM,I)
	ENDDO
	CLOSE(LUNI)
d97 14
a110 14
	DO    J=1,NROW
	DO    I=1,NSAM
	  B(I,J)=B(I,J)*RMSK(I,J)
	ENDDO
	ENDDO
C
	INV=+1
        CALL  FMRS_2(B,NSAM,NROW,INV)
	IF(INV.NE.1)  THEN
	CLOSE(LUNI)
	CALL  ERRT(38,'FB',NE)
	RETURN
	ENDIF
C
d112 29
a140 31
	 DO    J=1,NROW
 	  DO    I=1,NNNN,2
	  IX=(I+1)/2
	  FA(IX,J)=FA(IX,J)+CMPLX(B(I,J),B(I+1,J))
	  SUMCMP(IX,J)=SUMCMP(IX,J)+
     &		B(I,J)*DBLE(B(I,J))+B(I+1,J)*DBLE(B(I+1,J))
	  ENDDO
	 ENDDO
        ENDIF
	ENDDO
C
	DO    L=1,INC
	SIGNAL(L)=0.0D0
	FR(L)=0.0D0
	LR(L)=0
	ENDDO

	DO 149 J=1,NROW
	JJ=J-1
	IF(JJ.GT.NROW/2)  JJ=NROW-JJ
	DO 149 I=1,NNNN/2
	IF(I.EQ.1.AND.JJ.LT.0) GOTO 149
	PII=0.5*SQRT((FLOAT(JJ)/FLOAT(NROW/2))**2+
     &		(FLOAT(I-1)/FLOAT(NSAM/2))**2)
	IF(PII.LE.0.5)  THEN
	L=MIN0(MAX0(INT(PII*Y1/WI),1),INC)
	LR(L)=LR(L)+1
	SIGNAL(L)=SIGNAL(L)+ABS(FA(I,J))**2
	FR(L)=FR(L)+SUMCMP(I,J)-ABS(FA(I,J))**2/NANG
	ENDIF
149	CONTINUE
d142 22
a163 17
	DO   L=1,INC
	IF(LR(L).NE.0)  THEN
        DLIST(1)=L
	DLIST(2)=FLOAT(L-1)/FLOAT(INC-1)*0.5
        DLIST(3)=
     &	AMAX1(0.0,SNGL((FLOAT(NANG-1)/NANG)*SIGNAL(L)/FR(L))-1.0)
        DLIST(4)=LR(L)
	N1=LR(L)
	N2=(NANG-1)*LR(L)
	DLIST(5)=SQRT(2.*((N2+N1-2)*(1+2*DLIST(3))+N1*DLIST(3)**2)
     &		/FLOAT(N1*(N2-4)))
        CALL  SAVD(LUN9,DLIST,NDLI,IRTFLG)
	ENDIF
	ENDDO
	CLOSE(LUN9)
	CALL  SAVDC
	END
@


1.11
log
@OpenMP
@
text
@d3 1
a3 1
C SSNRB.FOR
d15 2
a16 1
C SSNRB:
d19 1
@


1.10
log
@freq fixed
@
text
@a31 1
CNO_SAVE
d47 1
a47 1
         DO  2202  K=1,NANG
d51 1
a51 1
         IF(NF.NE.2)  THEN
d54 1
a54 2
         GOTO  2202
         ENDIF
d62 1
a62 1
c$doacross local(i,j)
d77 6
a82 6
c$doacross local(i,j,ix)
	DO    J=1,NROW
 	DO    I=1,NNNN,2
	IX=(I+1)/2
	FA(IX,J)=FA(IX,J)+CMPLX(B(I,J),B(I+1,J))
	SUMCMP(IX,J)=SUMCMP(IX,J)+
d84 3
a86 1
	ENDDO
a87 1
2202	CONTINUE
@


1.9
log
@modified intrinisic functions to work under f90
@
text
@d101 2
a102 2
	PII=SQRT((FLOAT(JJ)*0.5/FLOAT(NROW/2+1))**2+
     &		(FLOAT(I-1)*0.5/FLOAT(NSAM/2+1))**2)
d114 1
a114 1
	DLIST(2)=(FLOAT(L-1)*WI+(WI/2.0))/Y1
@


1.8
log
@modified intrinisic function to work for f90
@
text
@d104 1
a104 1
	L=MIN0(MAX0(JNINT(PII*Y1/WI),1),INC)
d106 2
a107 2
	SIGNAL(L)=SIGNAL(L)+ZABS(FA(I,J))**2
	FR(L)=FR(L)+SUMCMP(I,J)-ZABS(FA(I,J))**2/NANG
@


1.7
log
@R
@
text
@d44 1
a44 1
	FA(I,J)=DCMPLX(0.0,0.0)
d83 1
a83 1
	FA(IX,J)=FA(IX,J)+DCMPLX(DBLE(B(I,J)),DBLE(B(I+1,J)))
@


1.6
log
@*** empty log message ***
@
text
@d51 1
a51 1
         CALL  OPENFB(BUF,FINPIC,LUNI,LSAM,LROW,'R',NF,NSL)
@


1.5
log
@change /net.../cmblock.inc' to cmblock
@
text
@d35 3
a37 2
	DO  172  J=1,NROW
172	CALL REDLIN(LUN9,RMSK(1,J),NSAM,J)
d41 2
a42 2
	DO  179  J=1,NROW
 	DO  179  I=1,NNNN/2
d44 3
a46 1
179	FA(I,J)=DCMPLX(0.0,0.0)
d60 3
a62 2
	DO  81  I=1,NROW
81	CALL  REDLIN(LUNI,B(1,I),NSAM,I)
d65 5
a69 3
	DO  82  J=1,NROW
	DO  82  I=1,NSAM
82	B(I,J)=B(I,J)*RMSK(I,J)
d80 2
a81 2
	DO  1  J=1,NROW
 	DO  1  I=1,NNNN,2
d86 2
a87 1
1	CONTINUE
d90 1
a90 1
	DO  148  L=1,INC
d93 2
a94 1
148	LR(L)=0
d111 1
a111 1
	DO  31 L=1,INC
d124 1
a124 1
31	CONTINUE
@


1.4
log
@new version, PP.
@
text
@d20 2
a21 1
         INCLUDE '/net/ithaca/usr1/spider/src/CMBLOCK.INC'
@


1.3
log
@nosave
@
text
@d18 63
a80 3

	SUBROUTINE SSNRB(BUF,ILIST,NSAM,NROW,NUMT,KL,NSAMH,NROWH,
     &           IW,FABS,FA,FB,SIGNAL,NOISE,AR,FR,NRING,VAR,MASK,NOUT)
d82 36
a117 130
	DIMENSION FABS(0:NSAMH,-NROWH:NROWH-1), BUF(1024),
     $     ILIST(NUMT),NRING(KL)
	COMPLEX FA(0:NSAMH,-NROWH:NROWH-1), FB(0:NSAMH, -NROWH:NROWH-1)
	REAL NOISE(KL),SIGNAL(KL),AR(KL),FR(KL),VAR(KL),MASK(NSAM,NROW)
	INTEGER H,H1
	COMMON /F_SPEC/ NLET,FINPAT,FINPIC
	CHARACTER*80 FINPIC
	CHARACTER*81 FINPAT
	DIMENSION DLIST(5)

	DATA INPIC/77/,NDOC/88/
CNO_SAVE
	DO 581 I=1,NROW
581	CALL REDLIN(INPIC,MASK(1,I),NSAM,I)
	CLOSE(INPIC)

	DO 20 I=1,KL
          SIGNAL(I)=0.0
          NOISE(I)=0.0
          VAR(I)=0.0
20	NRING(I)=0
	
	DO 10 H=0,NSAMH
          DO 10 K=-NROWH, NROWH-1
            FABS(H,K)=0.0
10	FA(H,K)=(0.0, 0.0)

	NUM=0
	DO 500 IFIL=1,NUMT
          CALL FILGET(FINPAT, FINPIC, NLET, ILIST(IFIL), INTFLAG)
          CALL OPENFB(BUF, FINPIC, INPIC, NSAM, NROW, 'R', NF, NSL)	
          IF(NF.NE.2) goto  500
		NUM=NUM+1

          DO 501 I=1,NROW
501       CALL REDLIN(INPIC,FB(0,I-NROWH-1),NSAM,I)
          CLOSE(INPIC)
          CALL SSNRMS(FB,MASK,NSAM,NROW) 
          CALL FFTR2_Q(FB, NSAM, NROW,1)

          DO 502 K=-NROWH, NROWH-1
            DO 502 H=0, NSAMH
              FA(H,K)=FA(H,K)+FB(H,K)
502     FABS(H,K)=FABS(H,K)+CABS(FB(H,K))**2
500	CONTINUE

        FNUMT=NUM
	MIN=INT(IW/2)+1
	MAX=NROWH-MIN
	DO 4600 K=-NROWH, NROWH-1
          IF (K.GE.0) THEN
            K1=-NROWH+K
          ELSE
            K1=NROWH+K
          ENDIF
          DO 4600 H=0,NSAMH
            H1=H
            R=SQRT(FLOAT(H*H+K*K))
            DO 4600 I=MIN,MAX
              WH=I+FLOAT(IW)/2
              WL=I-FLOAT(IW)/2
              IF (R.GE.WH .OR. R.LT.WL) GOTO 4600
              IF (H.NE.0 .AND. H.NE.NSAMH) THEN
                SIGNAL(I)=SIGNAL(I)+2*CABS(FA(H1,K1))**2
                NOISE(I)=NOISE(I)+2*(FABS(H1,K1)-
     &                   CABS(FA(H1,K1))**2/FNUMT)
                NRING(I)=NRING(I)+2
              ELSE
                SIGNAL(I)=SIGNAL(I)+CABS(FA(H1,K1))**2
                NOISE(I)=NOISE(I)+FABS(H1,K1)-
     &                   CABS(FA(H1,K1))**2/FNUMT
                NRING(I)=NRING(I)+1
              ENDIF
4600	CONTINUE

C   TO GET FR(MAX) FROM SIGNAL(MAX) & NOISE(MAX)

	DO 5611 I=MIN, MAX
          FR(I)=((FNUMT-1)/FNUMT)*SIGNAL(I)/NOISE(I)
          IF(FR(I).GT.1) THEN
            AR(I)=FR(I)-1
          ELSE	
            AR(I)=0
          END IF
          FN1=FLOAT(NRING(I))/2
          FN2=(FNUMT-1)*FN1
          IF (FN2.LE.4) GOTO 5611
          VAR(I)=(2*((FN2+FN1-2)*(1+2*AR(I))+FN1*AR(I)**2))/
     &              (FN1*(FN2-4))
          VAR(I)=SQRT(VAR(I))
5611	CONTINUE

C       SAVE RESULTS IN DOC FILE

	NLIST=5
	WRITE(NOUT,*)' "RF SN":This COMMAND is developed by Weiping for'
        WRITE(NOUT,*)' resolution estimation by the method of SSNR '
 	WRITE(NOUT,*)' (Spectral Signal-Noise Ratio),         Dec. 89'
	WRITE(NOUT,*)' following is result of SSNR (also in DOC file)'
        WRITE(NOUT,7800) IW       
7800    FORMAT(' ring width = ', I2)	
	WRITE(NOUT,7900)
7900    FORMAT(' ring radius  ring radius       SSNR    ',
     $        ' No. of points','  theor. Var.')
	WRITE(NOUT,7901)
7901    FORMAT(13x,'(normalized freq)',11x,'in each ring')
  	             
	DO 8000 J=1, MAX-MIN+1
          I=J+MIN-1
          DLIST(1)=I
          DLIST(2)=FLOAT(I)/FLOAT(NSAM)
          DLIST(3)=AR(I)
          DLIST(4)=NRING(I)
          DLIST(5)=VAR(I)
8000	WRITE(NOUT,8100)INT(DLIST(1)),(DLIST(K), K=2,3),INT(DLIST(4)),
     $                  DLIST(5)
8100	FORMAT (1X,I4,8X,F8.3,8X,G12.5,5X,I4,4X,G12.5)
  	             
	DO 8200 J=1, MAX-MIN+1
          I=J+MIN-1
          DLIST(1)=I
          DLIST(2)=FLOAT(I)/FLOAT(NSAM)
          DLIST(3)=AR(I)
          DLIST(4)=NRING(I)
          DLIST(5)=VAR(I)
8200    CALL SAVD(NDOC, DLIST, NLIST, IRTFLG)

	CLOSE(NDOC)
	CALL SAVDC
        RETURN
@


1.2
log
@defined h1 as integer for sun compiler
@
text
@d33 1
a33 1

@


1.1
log
@Initial revision
@
text
@d1 17
d19 2
a20 2
	SUBROUTINE SSNRB(BUF,ILIST,NSAM,NROW,NUMT,KL,NSAMH,NROWH,IW,FABS,
     $                   FA,FB,SIGNAL,NOISE,AR,FR,NRING,VAR,MASK,NOUT)
d26 1
a26 1
	INTEGER H
d117 4
a120 4
	WRITE(NOUT,*) ' "RF SN":This COMMAND is developed by Weiping for'
        WRITE(NOUT,*) ' resolution estimation by the method of SSNR '
 	WRITE(NOUT,*) ' (Spectral Signal-Noise Ratio),         Dec. 89'
	WRITE(NOUT,*) ' following is the result of SSNR (also in DOC file)'
d122 1
a122 1
7800    FORMAT(1X,'ring width = ', I2)	
d124 1
a124 1
7900    FORMAT(1X,'ring radius  ring radius       SSNR    ',
d127 1
a127 1
7901    FORMAT(1X,12x,'(normalized freq)',11x,'in each ring')
d148 1
d151 1
@
