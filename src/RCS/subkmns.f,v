head	1.23;
access;
symbols
	healthdept_2018:1.23
	pre_getangas:1.21
	GPL2010:1.21
	pre_GPL2010:1.20
	pre_var_equation:1.19
	pre_fftwrings:1.19
	pre_opfiles:1.19
	src:1.19
	best-code:1.19
	x-named-regs:1.19
	x:1.19
	v13-00:1.19
	pre_GPL:1.18
	prec_CA:1.15
	noindx:1.15
	Bproc:1.13
	oct21:1.9
	last77:1.9;
locks; strict;
comment	@c @;


1.23
date	2018.10.03.14.34.23;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2012.03.20.18.20.20;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2010.06.24.13.27.03;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2009.09.16.11.59.41;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.17.20.55.07;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2004.05.03.18.08.44;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2003.11.25.15.03.33;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2003.10.16.16.46.17;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.11.14.08.50;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2001.01.04.17.29.14;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.08.17.16.52.35;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.08.10.15.47.32;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.24.19.11.01;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	99.11.10.23.11.22;	author yuchen;	state Exp;
branches;
next	1.9;

1.9
date	98.04.06.19.42.26;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	98.01.26.22.21.37;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.08.25.19.18.34;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	96.11.06.18.54.42;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.11.06.18.18.42;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.10.10.19.27.58;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.10.04.19.09.36;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.11.37;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.53.13;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.23
log
@email_health_dept
@
text
@C++*********************************************************************
C
C SUBKMNS.F                      USED REG_GET AUG 00 ARDEAN LEITH
C                                USED ALLOCATE JAN 01 ARDEAN LEITH
C                                _PIX NOT _EIG MAY 04 ARDEAN LEITH
C                                 
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C PURPOSE:
C       READS THE NAME OF THE FILE (IMC***, PIX***, EIG***)
C       TO GET NUMBER (AND THEIR COORDINATES) OF OBJECTS TO BE PARTITIONED
C
C--*********************************************************************

         SUBROUTINE SUBKMNS(LUNF,LUND)

         INCLUDE 'CMBLOCK.INC'
         INCLUDE 'CMLIMIT.INC'

         REAL, ALLOCATABLE, DIMENSION(:) :: Q
         CHARACTER(LEN=MAXNAM)           :: FILNAM
         CHARACTER(LEN=1)                :: NULL
         LOGICAL                         :: USE_DISK
 
        NULL = CHAR(0)

        WRITE(NOUT,*) ' YOU MAY USE A _SEQ, _PIX, or _IMC FILE'
        WRITE(NOUT,*) ' '

        CALL FILERD(FILNAM,NLET,NULL,
     &              'CORAN/PCA FILE (e.g. CORAN_IMC)~',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (INDEX(FILNAM,'_SEQ') .GT. 0) THEN
            CALL OPAUXFILE(.FALSE.,FILNAM,DATEXC,-LUNF,0,
     &                 'O',' ',.TRUE.,IRTFLG)
        ELSE
            CALL OPAUXFILE(.FALSE.,FILNAM,DATEXC,LUNF,0,
     &                 'O',' ',.TRUE.,IRTFLG)
        ENDIF
        IF (IRTFLG .NE. 0) RETURN

        IF (INDEX(FILNAM,'_SEQ') .GT. 0) THEN
            ITYPE = 1
            WRITE(NOUT,*)' In sequential coordinates file ---'
            READ(LUNF)  NOBJ, NFTOT

        ELSEIF(INDEX(FILNAM,'_IMC') .GT. 0) THEN
            ITYPE = 2
            WRITE(NOUT,*)' In image coordinates file ---'
            READ(LUNF,*)  NOBJ, NFTOT

        ELSE
            ITYPE = 3
            WRITE(NOUT,*)' In pixel coordinates file ---'
            READ(LUNF,*)  NOBJ, NFTOT
        ENDIF

        WRITE(NOUT,*)' Number of objects:', NOBJ
        WRITE(NOUT,*)' Number of factors:', NFTOT
        WRITE(NOUT,*)'  '

        CALL RDPRI1S(KCLASS,NOT_USED,'NUMBER OF CLASSES',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

C       CALCULATE NUMBER OF FACTORS : NFAC (RETURNED BY RDPRAI)
        NFAC = NIMAX
        CALL RDPRAI(INUMBR, NIMAX, NFAC, 0,9999999,
     &               'FACTOR NUMBERS', NULL, IRTFLG)

C	SIZE OF W() = Q(K_W) ARRAY IS: NFAC
	K_W    = 1
        K_CM   = K_W    + NFAC
        K_IC   = K_CM   + KCLASS * NFAC
        K_NC   = K_IC   + NOBJ
	K_NIMI = K_NC   + KCLASS
        K_WSS  = K_NIMI + NOBJ 
        K_AT   = K_WSS  + KCLASS
        K_COO  = K_AT   + NFAC
        K_X    = K_COO  + NFTOT
        MEMTOT = K_X    + NFAC * NOBJ

        ALLOCATE(Q(MEMTOT),STAT=IRTFLG)

        IF (IRTFLG .EQ. 0) THEN
C         GOT ENOUGH SPACE
          USE_DISK = .FALSE.
          IX_DIM   = NOBJ
        ELSE
	  MEMTOT = K_X + NFAC
          ALLOCATE(Q(MEMTOT),STAT=IRTFLG)
          IF (IRTFLG .NE. 0)  THEN
             CALL  ERRT(46,'Q',MEMTOT)
             RETURN
	  ENDIF

C	  NOT EVERYTHING FITS IN MEMORY. USE DISK SPACE.
C	  COPY ONLY ONE LINE IN X(1)
	  USE_DISK = .TRUE.
          IX_DIM    = 1
          WRITE(NOUT, *)'  WARNING - SLOW ON-DISK VERSION USED'
        ENDIF

        DO  I=0,NFAC-1
          Q(K_W + I) = 1.0
        ENDDO       

        DO I=0,NFAC-1
           W1 = 1.0
           CALL  RDPRM1S(W1,NOT_USED,'FACTOR WEIGHT',IRTFLG)
           IF (W1 == 0.0)  EXIT   ! WANT ALL SAME = 1.0
           Q(K_W + I) = W1
        ENDDO

        IF (W1 == 0.0) THEN
           WRITE(NOUT, 90)
90         FORMAT('  ALL FACTOR WEIGHTS: 1.0')

        ELSE
           WRITE(NOUT, 91) (Q(K_W + I), I = 0, NFAC-1)
91         FORMAT('  FACTOR WEIGHTS USED:', 10(F10.4, 1X))
        ENDIF

        ISEED = 1457
        CALL  RDPRI1S(ISEED,NOT_USED,
     &       'FOR RANDOM SEEDS GIVE NON-ZERO STARTING NUMBER',IRTFLG)
	ISEED = MOD(IABS(ISEED),340189)

        CALL SUBKMEANS(Q(K_X), Q(K_CM), Q(K_NIMI),
     &                  Q(K_IC), Q(K_NC), Q(K_WSS), Q(K_AT),
     &                  NOBJ, NFAC, KCLASS, Q(K_W), NFTOT, Q(K_COO),
     &                  INUMBR, BB, WW, DB, IX_DIM, USE_DISK,ISEED,
     &                  LUNF,LUND,ITYPE)

        C = BB * WW
        H = (BB / (KCLASS - 1)) / (WW / (NOBJ - KCLASS))

        WRITE (NDAT, 41)  NOBJ, NFAC, KCLASS
41      FORMAT(/,
     &         /,'   K - M E A N S   C L U S T E R   A N A L Y S I S',/,
     &         /,'   NUMBER OF OBJECTS: ',I8
     &         /,'   NUMBER OF FACTORS: ',I8
     &         /,'   NUMBER OF GROUPS : ',I8)

        CALL PRNTXX(Q(K_NC), Q(K_WSS), KCLASS, NDAT)

        WRITE(NDAT,42)  BB, WW, C, H, DB
42      FORMAT(/,
     &     '   Tr(B)                                              :',
     &            G12.5,/,
     &     '   Tr(W)                                              :',
     &            G12.5,/,
     &     '   Coleman criterion   B*W                            :',
     &            G12.5,/,
     &     '   Harabasz criterion (B/(kclass-1))/(W/(nobj-kclass)):',
     &            G12.5,/,
     &     '   Davies-Bouldin criterion                           :',
     &            G12.5,/)

        WRITE(NDAT, *)
        CALL REG_SET_NSEL(1,5,BB,WW,C,H,DB,IRTFLG)

9999    IF (ALLOCATED(Q)) DEALLOCATE(Q)

        END

C--*************************** PRNTXX ******************************

         SUBROUTINE PRNTXX(NC,WSS,K,NDAT)

         DIMENSION   NC(K),WSS(K)

         DATA  L/8/

         K1 = 1
         K2 = MIN(K,L)

         WRITE(NDAT,5)
5        FORMAT( /,'   NUMBER OF OBJECTS IN EACH CLUSTER AND',
     &             ' WITHIN SUM OF SQUARES.')

101      WRITE(NDAT,1)  (I,I=K1,K2)
1        FORMAT(/8(I7,5X))

         WRITE(NDAT,2)  (NC(I),I=K1,K2)
2        FORMAT(8(I7,5X))

         WRITE(NDAT,3)  (WSS(I),I=K1,K2)
3        FORMAT(8(2X,G10.3))

         K1 = K1 + L
         IF (K1 .GT. K)  RETURN

         K2 = MIN(K2+L,K)
         GOTO  101

         END
@


1.22
log
@output factor for all 1.0 simplified echo
@
text
@d13 1
a13 1
C=* Email: spider@@wadsworth.org                                        *
@


1.21
log
@GPL_2010
@
text
@d129 3
a131 2
           CALL  RDPRM(W1,NOT_USED,'FACTOR WEIGHT')
           IF (W1 .EQ. 0.0)  EXIT
d135 8
a142 2
201     WRITE(NOUT, 22) (Q(K_W + I), I = 0, NFAC-1)
22      FORMAT('  FACTOR WEIGHTS USED:', 10(F10.4, 1X))
a153 1

@


1.20
log
@*** empty log message ***
@
text
@d8 4
a11 3
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
C=* Copyright 1985-2009  Health Research Inc.,                         *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
@


1.19
log
@GPL License fixed
@
text
@d8 5
a12 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d14 1
a14 6
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d51 1
a51 1
     &              'CORAN/PCA FILE (e.g. CORAN_IMC~)',IRTFLG)
d190 1
a190 1
         K2 = MIN0(K,L)
d200 1
a200 1
2        FORMAT(8(i7,5x))
d207 2
a208 1
         K2 = MIN0(K2+L,K)
@


1.18
log
@_PIX not _EIG
@
text
@d1 1
a1 1
C++************************************************************************
d8 23
a30 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
d37 1
a37 1
C--************************************************************************
@


1.17
log
@INUMBR bug
@
text
@d5 1
d34 1
a34 1
        WRITE(NOUT,*) ' YOU MAY USE A _SEQ, _EIG, or _IMC FILE'
@


1.16
log
@CA & CL rewrite
@
text
@a72 2
C	SIZE OF INUM() = Q(K_INUM) ARRAY IS: NFAC

d74 1
a74 1
        CALL RDPRAI(INUM, NIMAX, NFAC, 0,9999999,
d79 4
a82 4
        K_CM   = K_W + NFAC
        K_IC   = K_CM +  KCLASS * NFAC
        K_NC   = K_IC + NOBJ
	K_NIMI = K_NC + KCLASS
d84 4
a87 4
        K_AT   = K_WSS + KCLASS
        K_COO  = K_AT + NFAC
        K_X    = K_COO + NFTOT
        MEMTOT = K_X + NFAC * NOBJ
d131 1
a131 1
     &                  INUM, BB, WW, DB, IX_DIM, USE_DISK,ISEED,
@


1.15
log
@nloop,iloop_removed
@
text
@d6 8
a13 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
C **************************************************************************
d17 1
a17 1
C       TO GET THE NUMBER (AND THEIR COORDINATES) OF OBJECTS TO BE PARTITIONED
d21 1
a21 1
        SUBROUTINE SUBKMNS(MAXMEM)
d23 2
a24 3
        INCLUDE 'CMBLOCK.INC'
        PARAMETER  (NUMAX=10000)
        COMMON     INUM(NUMAX)
d26 6
a31 5
        CHARACTER*81  FILPAT, EXTNAME, CLUSTI
        CHARACTER*140 CLUST
        CHARACTER*1   NULL
        CHARACTER*3   NAMEF
        INTEGER       X_DIM
d33 2
a34 1
        REAL, ALLOCATABLE, DIMENSION(:) :: Q
d36 3
a38 3
        LOGICAL  USE_DISK

        NULL = CHAR(0)
d40 3
a42 8
        CALL  RDPRMI(ITYPE,I,NOT_USED,
     &        'ENTER DATA FILENAME TYPE (SEQ(1), IMC(2) or PIX(3))')
        CALL  RDPRMI(ICODE,I,NOT_USED,
     &        'ENTER COORDINATES FILE CODE')
	IF (ITYPE .EQ. 1) THEN
           FILPAT(1:3) = 'SEQ'
        ELSE IF(ITYPE .EQ. 2) THEN
           FILPAT(1:3) = 'IMC'
d44 2
a45 1
           FILPAT(1:3) = 'PIX'
d47 11
a58 3
        IF(ICODE .GE. 1000) THEN
           FILPAT(4:11) = '****'//NULL//NULL//NULL//NULL 
           NLET = 7
d60 3
a62 2
           FILPAT(4:11) = '***'//NULL//NULL//NULL//NULL//NULL
           NLET = 6
d65 5
a69 2
        IRTFLG = 0
        CALL FILGET(FILPAT, CLUSTI, NLET, ICODE, IRTFLG)
a70 14
        CALL  FILCAN(CLUST,NF,NULL, NULL, CLUSTI, DATEXC, IER)
        IF (IER .NE. 0) RETURN

C       ONLY NEW VERSION OF CLUSTER FILE ALLOWED
C	THE FILES READ ARE EITHER SEQ*, PIX* OR IMC*. TYPES
C	CREATED BY CORAN OR PCA.

        OPEN(FILE=CLUST, UNIT=111, STATUS='OLD', FORM='UNFORMATTED')
        READ(111)  NOBJ, NFTOT
        WRITE(NOUT, 33)  NOBJ, NFTOT, CLUST(1:NLET)
33      FORMAT(/,
     &        '   Number of objects and number of factors',2I10,/,
     &        '   in the file:',A80 )
        CALL  RDPRMI(KCLASS, I,NOT_USED,'NUMBER OF CLASSES')
d75 2
a76 2
        NFAC = NUMAX
        CALL RDPRAI( INUM, NUMAX, NFAC, 0,9999999,
a79 1

d82 1
a82 1
        K_IC   =  K_CM +  KCLASS * NFAC
d93 2
a94 2
        IF (IRTFLG.EQ.0)  THEN
C         ENOUGH SPACE
d96 1
a96 1
          X_DIM    = NOBJ
d101 2
a102 2
              CALL  ERRT(102,'UNABLE TO ALLOCATE Q',MEMTOT)
              RETURN
d108 1
a108 1
          X_DIM    = 1
d112 1
a112 1
        DO  I = 0, NFAC-1
d114 1
a114 1
        END DO       
d116 12
a127 11
        DO I = 0, NFAC-1
          CALL  RDPRM(W1,NOT_USED,'FACTOR WEIGHT')
          IF (W1 .EQ. 0.0)  GOTO  201
          Q(K_W + I) = W1
        END DO

201     WRITE(NOUT, 22)  (Q(K_W + I), I = 0, NFAC-1)
22      FORMAT(' FACTOR WEIGHTS USED:', 10(F10.4, 1X))

        CALL  RDPRMI(ISEED,I,NOT_USED,
     &   'For random seeds give non-zero starting number')
d130 1
a130 1
          CALL  SUBKMEANS(Q(K_X), Q(K_CM), Q(K_NIMI),
d133 2
a134 1
     &                  INUM, BB, WW, DB, X_DIM, USE_DISK,ISEED)
d139 1
d141 5
a145 4
41      FORMAT(//,' K - M e a n s   C l u s t e r   A n a l y s i s',
     &         /,'   Number of objects   =  ',i8
     &         /,'   Number of factors   =  ',i8
     &         /,'   Number of groups    =  ',i8)
a147 11
        WRITE(NDAT, 42)  BB, WW, C, H, DB
42      FORMAT(/,'Tr(B)                                              = '
     &         ,g12.5,
     &         /,'Tr(W)                                              = '
     &         ,g12.5,
     &         /,'Coleman criterion   B*W                            = '
     &         ,g12.5,
     &         /,'Harabasz criterion (B/(kclass-1))/(W/(nobj-kclass))= '
     &         ,g12.5,
     &         /,'Davies-Bouldin criterion                           = '
     &         ,g12.5)
d149 13
d168 31
@


1.14
log
@used allocate
@
text
@d40 1
a40 1
        CALL  RDPRMI(ITYPE,I,NLOOP,ILOOP,
d42 1
a42 1
        CALL  RDPRMI(ICODE,I,NLOOP,ILOOP,
d76 1
a76 1
        CALL  RDPRMI(KCLASS, I,NLOOP,ILOOP,'NUMBER OF CLASSES')
d124 1
a124 1
          CALL  RDPRM(W1,NLOOP,ILOOP,'FACTOR WEIGHT')
d132 1
a132 1
        CALL  RDPRMI(ISEED,I,NLOOP,ILOOP,
@


1.13
log
@reg_set_nsel params changed
@
text
@d4 2
a5 1
C
a19 1
C
d25 2
a26 2
         PARAMETER  (NUMAX=10000)
        COMMON    INUM(NUMAX),BAF(1)
d32 1
a32 8
        REAL          BB, WW
        INTEGER K_W,K_INUM,K_X, K_CM, NOBJ,
     &          K_IND, K_IC, K_NC, K_WSS, K_AT, K_COO, MEMTOT,
     &		NLET, KCLASS,NFAC, NFTOT,I,ITYPE,ICODE,X_DIM

        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: Q
d34 2
a35 1
        LOGICAL  RUNTIME
d39 1
d45 1
a45 1
          FILPAT(1:3) = 'SEQ'
d47 1
a47 1
          FILPAT(1:3) = 'IMC'
d49 3
a51 2
          FILPAT(1:3) = 'PIX'
        END IF
d53 2
a54 2
          FILPAT(4:11) = '****'//NULL//NULL//NULL//NULL 
          NLET = 7
d56 3
a58 3
          FILPAT(4:11) = '***'//NULL//NULL//NULL//NULL//NULL
          NLET = 6
        END IF
a62 1
	NULL=CHAR(0)
d65 1
a65 1
C
d69 1
a69 1
C
d77 1
a77 1
C
d80 1
a80 1
C       
d83 2
a84 2
     $               'FACTOR NUMBERS', NULL, IRTFLG)
C
d86 10
a95 10
C
	K_W = 1
        K_CM = K_W + NFAC
        K_IC =  K_CM +  KCLASS * NFAC
        K_NC = K_IC + NOBJ
	K_NIMI=K_NC + KCLASS
        K_WSS = K_NIMI + NOBJ 
        K_AT = K_WSS + KCLASS
        K_COO = K_AT + NFAC
        K_X = K_COO + NFTOT
d97 5
a101 4
        MAXM=MAXMEM-NUMAX
        CALL CHKMEM(MEMTOT,BAF,MAXM,RUNTIME,IPQ,IRTFLG)
        IF(IRTFLG.EQ.0)  THEN
C  ENOUGH SPACE
d103 1
a103 1
          X_DIM = NOBJ
d105 7
a111 6
	  MEMTOT=K_X + NFAC
          CALL CHKMEM(MEMTOT,BAF,MAXM-NUMAX,RUNTIME,IPQ,IRTFLG)
          IF (IRTFLG.NE.0)  THEN
                CALL  ERRT(6,'CL KM',NE)
                RETURN
	  ELSE
d114 3
a116 6
	    USE_DISK = .TRUE.
            X_DIM = 1
            WRITE(NOUT, 2700)
2700        FORMAT('  WARNING - SLOW ON-DISK VERSION USED')
	
          ENDIF
a118 2
        Q = >IPQ

d125 1
a125 1
          IF(W1 .EQ. 0.0)  GOTO  201
a131 1
C
d134 2
a135 2
	ISEED=MOD(IABS(ISEED),340189)
C
d140 1
a140 1
C
d150 1
a150 1
        CALL  PRNTXX(Q(K_NC), Q(K_WSS), KCLASS, NDAT)
a163 5
C       IF(NSEL(1).NE.0)  PARAM(NSEL(1)) = BB
C       IF(NSEL(2).NE.0)  PARAM(NSEL(2)) = WW
C       IF(NSEL(3).NE.0)  PARAM(NSEL(3)) = C
C       IF(NSEL(4).NE.0)  PARAM(NSEL(4)) = H
C       IF(NSEL(5).NE.0)  PARAM(NSEL(5)) = DB
d166 1
a166 1
        IF (RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'CL KM',IRTFLG)
@


1.12
log
@used reg_set_nsela
@
text
@d178 1
a178 1
        CALL REG_SET_NSEL(1,BB,WW,C,H,DB,IRTFLG)
d180 2
a181 1
         IF(RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'CL KM',IRTFLG)
@


1.11
log
@SP_F90 removed
@
text
@d3 1
a4 2
C SUBKMNS.F 
C
d15 2
a16 2
C       PURPOSE:
C       THIS ROUTINE READS THE NAME OF THE FILE (IMC***, PIX***, EIG***)
a18 3
C       CALLS:
C	  FILERD, FILCAN, RDPRAI, RDPRM, RDPRMI, SUBKMEANS, PRNTXX
C
d173 7
a179 5
        IF(NSEL(1).NE.0)  PARAM(NSEL(1)) = BB
        IF(NSEL(2).NE.0)  PARAM(NSEL(2)) = WW
        IF(NSEL(3).NE.0)  PARAM(NSEL(3)) = C
        IF(NSEL(4).NE.0)  PARAM(NSEL(4)) = H
        IF(NSEL(5).NE.0)  PARAM(NSEL(5)) = DB
@


1.10
log
@a
@
text
@d4 1
a4 1
C   $$SUBKMNS.FOR
a5 1
C
d27 1
d31 1
a31 1
C
d34 3
a36 3
        CHARACTER*1  NULL
        CHARACTER*3  NAMEF
        REAL BB, WW
d38 3
a40 3
     $          K_IND, K_IC, K_NC, K_WSS, K_AT, K_COO, MEMTOT,
     $		NLET, KCLASS,NFAC, NFTOT,I,ITYPE,ICODE,X_DIM
#ifdef SP_F90
a43 6
#else
        DIMENSION    Q(1)
        POINTER      (IPQ,Q) 
#endif
        LOGICAL         RUNTIME
        LOGICAL USE_DISK
d45 3
d50 1
a50 1
     $        'ENTER DATA FILENAME TYPE (SEQ(1), IMC(2) or PIX(3))')
d52 1
a52 1
     $        'ENTER COORDINATES FILE CODE')
d115 1
a115 1
          IF(IRTFLG.NE.0)  THEN
d124 1
a124 2
2700        FORMAT
     &    ('  WARNING - SLOW ON-DISK VERSION USED')
d128 3
a130 4
#ifdef SP_F90
         Q = >IPQ
#endif
C
@


1.9
log
@f90 alloc
@
text
@d50 1
a50 1
CNO_SAVE
@


1.8
log
@trprai call fixed
@
text
@d40 5
d47 1
d132 3
@


1.7
log
@corrected
@
text
@d89 1
a89 1
     $               'FACTOR NUMBERS', NUMM, IRTFLG)
@


1.6
log
@corrected
@
text
@a5 1
C	MAHIEDDINE LADJADJ.
d102 1
a102 1
        MEMTOT = K_X + NOBJ * NFAC
d108 1
a108 1
          X_DIM = NFAC
d143 1
a143 1
	ISEED=IABS(ISEED)
@


1.5
log
@dynamic memory alloc
@
text
@d31 1
a31 1
        COMMON  Q(1)   
d38 2
a39 2
        INTEGER IEXT,INBR,K_W,K_INUM,K_002, K_X, K_CM, NOBJ,
     $          K_SWT, K_IND, K_IC, K_NC, K_WSS, K_AT, K_COO, MEMTOT,
d41 1
a41 1
        DIMENSION    INUM(NUMAX),Q(1)
d105 2
a106 2
        CALL CHKMEM(MEMTOT,Q,MAXM,RUNTIME,IPQ,IRTFLG)
             IF(IRTFLG.EQ.0)  THEN
d110 7
a116 1
        ELSE IF(K_X + NFAC) .LE. MAXMEM-NUMAX) THEN
d119 4
a122 4
	  USE_DISK = .TRUE.
          X_DIM = 1
          WRITE(NOUT, 2700)
2700      FORMAT
d124 2
a125 3
        ELSE
                CALL  ERRT(6,'CL KM',NE)
          RETURN
d149 1
a149 1
     &                  Q(K_INUM), BB, WW, DB, X_DIM, USE_DISK,ISEED)
@


1.4
log
@nosave
@
text
@a28 1
#ifdef SP_UNIX
d30 1
a30 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d32 1
a32 1

d41 3
d83 1
d88 2
a89 3
        K_INUM = 1
        NFAC = MAXMEM
        CALL RDPRAI( Q(K_INUM), MAXMEM, NFAC, 0,9999999,
d94 2
a95 22
	K_W = K_INUM + NFAC
        K_002 = K_W + NFAC
        DO  I = 0, NFAC-1
          Q(K_W + I) = 1.0
        END DO       

        DO I = 0, NFAC-1
          CALL  RDPRM(W1,NLOOP,ILOOP,'FACTOR WEIGHT')
          IF(W1 .EQ. 0.0)  GOTO  201
          Q(K_W + I) = W1
        END DO

201     WRITE(NOUT, 22)  (Q(K_W + I), I = 0, NFAC-1)
22      FORMAT(' FACTOR WEIGHTS USED:', 10(F10.4, 1X))

C
        CALL  RDPRMI(KCLASS, I,NLOOP,ILOOP,'NUMBER OF CLASSES')
        CALL  RDPRMI(ISEED,I,NLOOP,ILOOP,
     &   'For random seeds give non-zero starting number')
	ISEED=IABS(ISEED)
C
        K_CM = K_002
d104 4
a107 8
       
        WRITE (NOUT, 2500)  MAXMEM ,  MEMTOT
2500    FORMAT (/ ' MEMORY RESERVATION:  YOU HAVE',
     #         ' RESERVED ', I9,',  YOU NEED  ', I9 / )

        IF (MEMTOT  .LE. MAXMEM)  THEN
C	  EVERYTHING FITS IN MEMORY. COPY WHOLE DATA IN X()
C
d110 1
a110 1
        ELSE IF((K_X + NFAC) .LE. MAXMEM) THEN
a114 1
        ELSE
d117 3
a119 1
     &    ('  MEMORY BUFFER TOO SMALL - SORRY, PROGRAM CANNOT BE RUN!')
d123 18
d174 1
@


1.3
log
@change open(name= to open(file=
@
text
@d45 1
a45 1

@


1.2
log
@cpp_lines_added
@
text
@d77 1
a77 1
        OPEN(NAME=CLUST, UNIT=111, STATUS='OLD', FORM='UNFORMATTED')
@


1.1
log
@Initial revision
@
text
@d29 3
d33 1
@
