head	1.36;
access;
symbols
	healthdept_2018:1.36
	pre_getangas:1.35
	GPL2010:1.35
	pre_GPL2010:1.34
	pre_var_equation:1.34
	pre_fftwrings:1.34
	pre_opfiles:1.34
	src:1.34
	best-code:1.34
	x-named-regs:1.34
	x:1.34
	v13-00:1.34
	pre_GPL:1.32
	prec_CA:1.32
	noindx:1.32
	Bproc:1.23
	oct21:1.21
	last77:1.17;
locks; strict;
comment	@c @;


1.36
date	2018.10.03.14.34.15;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2010.06.24.13.26.48;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2005.10.17.20.03.55;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2005.10.17.17.59.14;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2002.07.23.17.08.13;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2002.07.08.15.16.57;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2002.05.07.18.15.14;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2002.05.06.20.31.22;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2002.05.06.14.33.54;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2002.05.03.17.57.26;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2002.04.10.19.35.56;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2002.04.09.16.06.32;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2002.03.11.14.07.54;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2000.03.22.17.25.52;	author bimal;	state Exp;
branches;
next	1.22;

1.22
date	99.12.20.18.25.04;	author bimal;	state Exp;
branches;
next	1.21;

1.21
date	99.10.15.14.15.49;	author bimal;	state Exp;
branches;
next	1.20;

1.20
date	99.10.14.18.23.03;	author bimal;	state Exp;
branches;
next	1.19;

1.19
date	99.10.08.17.57.50;	author bimal;	state Exp;
branches;
next	1.18;

1.18
date	99.10.08.17.23.27;	author bimal;	state Exp;
branches;
next	1.17;

1.17
date	99.03.25.20.24.02;	author pawel;	state Exp;
branches;
next	1.16;

1.16
date	98.04.06.20.11.08;	author pawel;	state Exp;
branches;
next	1.15;

1.15
date	98.04.06.19.38.17;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	98.04.06.13.41.13;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	97.10.17.15.19.26;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	97.10.14.21.19.40;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	96.12.04.20.35.12;	author mladjadj;	state Exp;
branches;
next	1.10;

1.10
date	96.12.02.22.16.52;	author mladjadj;	state Exp;
branches;
next	1.9;

1.9
date	96.02.16.15.41.25;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	96.02.15.18.11.43;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	96.02.08.15.37.37;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	95.08.22.19.25.49;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	95.08.21.17.09.57;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.08.09.13.57.44;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	95.07.28.13.06.28;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.10.27;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.25;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.36
log
@email_health_dept
@
text
@C++*********************************************************************
C
C ROTAS3.F                        REWRITTEN APRIL 2002 ArDean Leith
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C IMAGE_PROCESSING_ROUTINE
C
C  ROTAS3(LUN1,LUN2,NSAM,NROW,NSLICE,MODE)
C
C  PARAMETERS:     MODE                                        (SENT)
C                  3D   - QUADRATIC INTERPOLATION
C                  3A   - QUADRATIC WITH SPECIFIED ORIGIN
C                  3DL  - LINEAR INTERPOLATION
C                  3AL  - LINEAR WITH SPECIFIED ORIGIN
C
C  PURPOSE:        3D ROTATION USING EULER ANGLES OF VOLUME. 
C                  CHOOSES LINEAR OR TRI-QUADRATIC INTERPOLATION
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE ROTAS3(LUN1,LUN2,NSAM,NROW,NSLICE,MODE) 
    
        INCLUDE 'CMBLOCK.INC'
  
        REAL, ALLOCATABLE, DIMENSION(:,:,:) :: AIMG
        CHARACTER(LEN=3)                    ::  MODE

C       3-D  ROTATION

        ALLOCATE (AIMG(NSAM,NROW,NSLICE), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'RT 3, AIMG',IER)
           RETURN
        ENDIF

        CALL REDVOL(LUN1,NSAM,NROW,1,NSLICE,AIMG,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

C       GET EULER ANGLES
        PHI   = 0.0
        THETA = 0.0
        PSI   = HUGE(PSI)

        CALL  RDPRM3S(PHI,THETA,PSI,NOT_USED,'PHI, THETA, & PSI',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (PSI .EQ. HUGE(PSI)) THEN
           PSI = 0.0
           CALL  RDPRM1S(PSI,NOT_USED,'PSI',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
        ENDIF


        IF (MODE(2:2) .EQ. 'A')  THEN
C          USER SPECIFIES CENTER OF ROTATION
           NZ = HUGE(NZ)
           CALL  RDPRI3S(NX,NY,NZ,NOT_USED,
     &                 'X, Y & Z FOR CENTER OF ROTATION',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           IF (NZ .EQ. HUGE(NZ)) THEN
              CALL  RDPRI1S(NZ,NOT_USED,'Z FOR CENTER OF ROTATION',
     &                      IRTFLG)
              IF (IRTFLG .NE. 0) RETURN
           ENDIF

           KLX = -NX+1
           KNX = NSAM-NX
           KLY = -NY+1
           KNY = NROW-NY
           KLZ = -NZ+1
           KNZ = NSLICE-NZ
 
        ELSE
           IF (MOD(NSAM,2) .EQ. 0)  THEN
              KNX = NSAM/2-1
           ELSE
              KNX = NSAM/2
           ENDIF
           KLX = -NSAM/2
           IF (MOD(NROW,2) .EQ. 0)  THEN
              KNY = NROW/2-1
           ELSE
              KNY = NROW/2
           ENDIF
           KLY = -NROW/2
           IF (MOD(NSLICE,2) .EQ. 0)  THEN
              KNZ = NSLICE/2-1
           ELSE
              KNZ = NSLICE/2
           ENDIF
           KLZ = -NSLICE/2
        ENDIF

        IF (THETA.EQ.0.0 .AND .PHI.EQ.0.0 .AND. PSI.EQ.0.0)  THEN
C          NO ROTATION NEEDED
           CALL WRTVOL(LUN2,NSAM,NROW,1,NSLICE,AIMG,IRTFLG)

        ELSEIF (MODE(3:3) .EQ. 'S') THEN
C          LINEAR INTERLPOLATION
           CALL ROTS3(LUN2,AIMG,KLX,KNX,KLY,KNY,KLZ,KNZ,PSI,THETA,PHI)

        ELSE
C          TRI-QUADRATIC INTERLPOLATION (DEFAULTED IN MAY 2002)
           CALL ROTS3Q(LUN2,AIMG,KLX,KNX,KLY,KNY,KLZ,KNZ,PSI,THETA,PHI)
        ENDIF

        IF (ALLOCATED(AIMG)) DEALLOCATE(AIMG)
        
        RETURN
        END


@


1.35
log
@GPL_2010
@
text
@d11 1
a11 1
C=* Email: spider@@wadsworth.org                                        *
@


1.34
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.33
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a5 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 6

C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a45 1
C--************************************************************************
@


1.32
log
@wrtvol param added
/
@
text
@d1 1
d8 24
d53 1
@


1.31
log
@0 0 0 bug
@
text
@d106 1
a106 1
           CALL WRTVOL(LUN2,NSAM,NROW,NSLICE,AIMG,IRTFLG)
@


1.30
log
@changed calls
@
text
@d104 5
a108 1
        IF (MODE(3:3) .EQ. 'S') THEN
d111 1
@


1.29
log
@RT 3?L --> RT 3?S
@
text
@d7 1
a7 1
C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
d35 1
a35 1
        CHARACTER(LEN=3)      ::  MODE
d48 1
d51 1
a51 1
        PSI   = 0.0
d53 1
a53 1
        CALL  RDPRM2S(PHI,THETA,NOT_USED,'PHI, THETA',IRTFLG)
d56 5
a60 2
        CALL  RDPRM1S(PSI,NOT_USED,'PSI',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
d65 8
a72 6
           IF (MODE(3:3) .EQ. 'L') THEN
              CALL  RDPRM3S(NX,NY,NZ,NOT_USED,
     &                 'CENTER OF ROTATION NX, NY, NZ',IRTFLG)
           ELSE
              CALL  RDPRM2S(NX,NY,NOT_USED,
     &                 'CENTER OF ROTATION NX, NY',IRTFLG)
a73 2
              CALL  RDPRM1S(NZ,NOT_USED,
     &                  'CENTER OF ROTATION NZ',IRTFLG)
a74 1
           IF (IRTFLG .NE. 0) RETURN
d82 1
a106 1

d112 1
a112 1
        IF (ALLOCATED(AIMG)) DEALLOCATE (AIMG)
@


1.28
log
@now triquad default
@
text
@d100 1
a100 1
        IF (MODE(3:3) .EQ. 'L') THEN
@


1.27
log
@redvol parameters changed
@
text
@d19 4
d25 1
a25 1
C                  TRI-QUADRATIC INTERPOLATION
d30 2
a31 1
        SUBROUTINE ROTAS3(LUN1,LUN2,NSAM,NROW,NSLICE,MODE)     
d52 4
a55 9
        IF (MODE(3:3) .EQ. 'Q') THEN
C          ROTATE AROUND CENTER OF IMAGE/VOLUME
           CALL  RDPRM3S(PHI,THETA,PSI,NOT_USED,
     &                   'PHI, THETA, & PSI',IRTFLG)
        ELSE
           CALL  RDPRM2S(PHI,THETA,NOT_USED,'PHI, THETA',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
           CALL  RDPRM1S(PSI,NOT_USED,'PSI',IRTFLG)
        ENDIF
d59 1
a59 1
        IF (MODE .EQ. 'A')  THEN
d61 1
a61 1
           IF (MODE(3:3) .EQ. 'Q') THEN
d100 3
a102 3
        IF (MODE(3:3) .EQ. 'Q') THEN
C          QUADRATIC INTERLPOLATION
           CALL ROTS3Q(LUN2,AIMG,KLX,KNX,KLY,KNY,KLZ,KNZ,PSI,THETA,PHI)
d105 2
a106 2
C          TRILINEAR INTERLPOLATION
           CALL ROTS3(LUN2,AIMG,KLX,KNX,KLY,KNY,KLZ,KNZ,PSI,THETA,PHI)
@


1.26
log
@bad lowercase q
@
text
@d40 1
a40 1
        CALL REDVOL(LUN1,NSAM,NROW,NSLICE,AIMG,IRTFLG)
@


1.25
log
@added RT 3DQ
@
text
@d100 1
a100 1
        IF (MODE(3:3) .EQ. 'q') THEN
@


1.24
log
@nloop,iloop_removed
@
text
@d3 1
a3 1
C $$ RT3D.FOR
d5 9
a13 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
C **************************************************************************
d15 8
d26 5
d32 1
a32 25
        SUBROUTINE ROTAS3(MODE)
     
        INCLUDE 'CMBLOCK.INC'  
        REAL, ALLOCATABLE, DIMENSION(:,:,:) :: AIMG
        CHARACTER *81 FILNAM
        CHARACTER *1  MODE
        DATA  LUN1,LUN2/8,9/
        CHARACTER *6 NAME
        CHARACTER *12 NAME2     

C  3-D  ROTATION

        NAME = 'RT 3'//MODE//' '
        NAME2 ='RT 3'//MODE//', AIMG '
        MAXIM = 0
        CALL OPFILE(.TRUE.,FILNAM,LUN1,'O',ITYPE,NSAM,NROW,NSLICE,MAXIM,
     &   'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO  130

        IF(IFORM.NE.3)  GOTO 145
 
        MAXIM = 0
        CALL OPFILE(.TRUE.,FILNAM,LUN2,'U',ITYPE,NSAM,NROW,NSLICE,MAXIM,
     &  'OUTPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 135
d35 3
a37 3
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,NAME2,IER)
           GOTO 105
d40 2
a41 1
       CALL READV(LUN1,AIMG,NSAM,NROW,NSAM,NROW,NSLICE)
d43 12
a54 5
        CALL  RDPRM2(PHI,THETA,NOT_USED,'Phi, Theta')
        CALL  RDPRM(PSI,NOT_USED,'Psi')
        IF(MODE.EQ.'A')  THEN
           CALL  RDPRMI(NX,NY,NOT_USED,'Center of rotation NX, NY')
           CALL  RDPRMI(NZ,J,NOT_USED,'Center of rotation NZ')
d56 1
d58 21
a78 7
        IF(MODE.EQ.'A')  THEN
           KLX=-NX+1
           KNX=NSAM-NX
           KLY=-NY+1
           KNY=NROW-NY
           KLZ=-NZ+1
           KNZ=NSLICE-NZ
d80 2
a81 2
           IF(MOD(NSAM,2).EQ.0)  THEN
              KNX=NSAM/2-1
d83 1
a83 1
              KNX=NSAM/2
d85 3
a87 3
           KLX=-NSAM/2
           IF(MOD(NROW,2).EQ.0)  THEN
              KNY=NROW/2-1
d89 1
a89 1
              KNY=NROW/2
d91 3
a93 3
           KLY=-NROW/2
           IF(MOD(NSLICE,2).EQ.0)  THEN
              KNZ=NSLICE/2-1
d95 1
a95 1
              KNZ=NSLICE/2
d97 10
a106 1
           KLZ=-NSLICE/2
a107 2
        CALL ROTS3(LUN2,AIMG,KLX,KNX,KLY,KNY,KLZ,KNZ,PSI,THETA,PHI)
        CONTINUE 
d109 2
a110 3
100     DEALLOCATE (AIMG)
105     CLOSE(LUN2)
110     CLOSE(LUN1)        
a111 6
130     CALL ERRT(4,NAME,NE)
        RETURN        
135     CALL ERRT(4,NAME,NE)
        GOTO 110
145     CALL ERRT(2,NAME,NE)
        GOTO 110
@


1.23
log
@used readv
@
text
@d53 2
a54 2
        CALL  RDPRM2(PHI,THETA,NLOOP,ILOOP,'Phi, Theta')
        CALL  RDPRM(PSI,NLOOP,ILOOP,'Psi')
d56 2
a57 2
           CALL  RDPRMI(NX,NY,NLOOP,ILOOP,'Center of rotation NX, NY')
           CALL  RDPRMI(NZ,J,NLOOP,ILOOP,'Center of rotation NZ')
@


1.22
log
@allocation statement
@
text
@d17 2
a18 4
C
C $$ RT3D.FOR
C
C
d20 1
a20 1
C      
d28 1
a28 1
C 
d30 1
a30 1
C
d37 1
a37 1
C
d39 1
a39 1
C  
d44 1
a44 1
C
d50 3
a52 6
C
        DO    K=1,NSLICE
           DO    J=1,NROW
              CALL  REDLIN(LUN1,AIMG(1,J,K),NSAM,J+(K-1)*NROW)
           ENDDO
        ENDDO
d59 1
a59 1
C
d89 1
a89 1
C
@


1.21
log
@Edited header to indicate image processing routine
@
text
@d47 1
a47 1
        ALLOCATE (AIMG(NROW,NSAM,NSLICE), STAT=IRTFLG)
@


1.20
log
@Edited header to indicate image processing routine
@
text
@d14 1
a14 1
C IMAGE PROCESSING ROUTINE
@


1.19
log
@corrected path for CMBLOCK.INC
@
text
@d14 1
a14 1
C
@


1.18
log
@Introduced allocate and opfile
@
text
@d23 1
a23 1
        INCLUDE '/net/ithaca/usr1/spider/src/CMBLOCK.INC'  
@


1.17
log
@*** empty log message ***
@
text
@d21 10
a30 17
      SUBROUTINE ROTAS3(MAXMEM,MODE)
      
      INCLUDE 'CMBLOCK.INC'  
#ifdef SP_F90
        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: Q
#else
      DIMENSION Q(1)
      POINTER   (IPQ,Q) 
#endif
      LOGICAL         RUNTIME 
      COMMON          BUF(1024),BAF(1) 
      CHARACTER *81 FILNAM
      CHARACTER *1  NULL,MODE
      DATA  LUN1,LUN2/8,9/
	NULL=CHAR(0)
d32 73
a104 71
      CALL FILERD(FILNAM,NLETI,NULL,'INPUT',IRTFLG)
      IF (IRTFLG .EQ. -1) GOTO 5
      CALL OPENFB(BUF,FILNAM,LUN1,NSAM,NROW,'O',NF,NSLICE)
      GOTO (130,110),NF
110   IF(IFORM.NE.3)  GOTO 145
      MEMWANT=NSAM*(NROW*NSLICE+1)
      CALL CHKMEM(MEMWANT , BAF, MAXMEM-(1024), 
     &	            RUNTIME,IPQ,IRTFLG)
      IF(IRTFLG.NE.0) THEN 
         CALL ERRT(6,'RT 3A ',NE)
         GOTO  5
      ENDIF
#ifdef SP_F90
         Q = >IPQ
#endif
      CALL FILERD(FILNAM,NLETO,NULL,'OUTPUT',IRTFLG)
      IF (IRTFLG .EQ. -1) GOTO 4
      CALL OPENFB(BUF,FILNAM,LUN2,NSAM,NROW,'UNKNOWN',NF,NSLICE)
      GOTO (130,951),NF
C
951	CONTINUE
	CALL  RDPRM2(PHI,THETA,NLOOP,ILOOP,'Phi, Theta')
	CALL  RDPRM(PSI,NLOOP,ILOOP,'Psi')
	IF(MODE.EQ.'A')  THEN
	CALL  RDPRMI(NX,NY,NLOOP,ILOOP,'Center of rotation NX, NY')
	CALL  RDPRMI(NZ,J,NLOOP,ILOOP,'Center of rotation NZ')
	ENDIF
	DO    J=1,NROW*NSLICE
	CALL  REDLIN(LUN1,Q(1+(J-1)*NSAM),NSAM,J)
	ENDDO
	KK=1+NSAM*NROW*NSLICE
C
	IF(MODE.EQ.'A')  THEN
        KLX=-NX+1
        KNX=NSAM-NX
        KLY=-NY+1
        KNY=NROW-NY
        KLZ=-NZ+1
        KNZ=NSLICE-NZ
	ELSE
	IF(MOD(NSAM,2).EQ.0)  THEN
	KNX=NSAM/2-1
	ELSE
	KNX=NSAM/2
	ENDIF
	KLX=-NSAM/2
	IF(MOD(NROW,2).EQ.0)  THEN
	KNY=NROW/2-1
	ELSE
	KNY=NROW/2
	ENDIF
	KLY=-NROW/2
	IF(MOD(NSLICE,2).EQ.0)  THEN
	KNZ=NSLICE/2-1
	ELSE
	KNZ=NSLICE/2
	ENDIF
	KLZ=-NSLICE/2
	ENDIF
	CALL  ROTS3
     &	(LUN2,Q(1),Q(KK),KLX,KNX,KLY,KNY,KLZ,KNZ,PSI,THETA,PHI)
4	CONTINUE 
        if (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'RT 3A',IRTFLG) 
C
5       CLOSE(LUN1)
	CLOSE(LUN2)
	RETURN
130   CALL ERRT(4,'RT 3A ',NE)
      GOTO 5
145   CALL ERRT(2,'RT 3A ',NE)
      GOTO 5
d106 2
@


1.16
log
@*** empty log message ***
@
text
@a36 2
	
CNO_SAVE
d99 1
a99 1
     &	(LUN2,Q,Q(KK),KLX,KNX,KLY,KNY,KLZ,KNZ,PSI,THETA,PHI)
@


1.15
log
@f90 alloc
@
text
@d33 1
a33 1
      COMMON          BUF(1024),KAF(1) 
d47 1
a47 1
      CALL CHKMEM(MEMWANT , KAF, MAXMEM-(1024), 
@


1.14
log
@*** empty log message ***
@
text
@d24 5
d31 1
d52 4
a55 1
         ENDIF
@


1.13
log
@R
@
text
@d94 1
a94 1
        if (runtime) CALL ALLOCIT(0,RUNTIME,IPQ,'RT 3A',IRTFLG) 
@


1.12
log
@*** empty log message ***
@
text
@d37 1
a37 1
      CALL OPENFB(BUF,FILNAM,LUN1,NSAM,NROW,'R',NF,NSLICE)
@


1.11
log
@ memwant instead of memtot
@
text
@d59 3
a61 2
	DO  101  J=1,NROW*NSLICE
101	CALL  REDLIN(LUN1,Q(1+(J-1)*NSAM),NSAM,J)
@


1.10
log
@use chkmem instead of allocit call
@
text
@d41 1
a41 1
      CALL CHKMEM(MEMTOT, KAF, MAXMEM-(1024), 
@


1.9
log
@bldr called to build rotation matrix
@
text
@d22 6
a27 9
      INCLUDE 'CMBLOCK.INC'
#ifdef SP_ALLOC
         COMMON          BUF(1024)
         DIMENSION Q(1)
         POINTER   (IPQ,Q) 
         LOGICAL         RUNTIME
#else
      COMMON          BUF(1024),Q(1)
#endif
d30 2
a31 1
	DATA  LUN1,LUN2/8,9/
d40 4
a43 7
        MEMWANT=NSAM*(NROW*NSLICE+1)
#ifdef SP_ALLOC
         CALL ALLOCIT(MEMWANT,RUNTIME,IPQ,'RT 3A',IRTFLG)
         IF(.NOT.RUNTIME)  THEN
#else
        IF(MEMWANT.GT.MAXMEM) THEN
#endif
d92 2
a93 4
4	CONTINUE
#ifdef SP_ALLOC
      CALL ALLOCIT(0,RUNTIME,IPQ,'RT 3A',IRTFLG)
#endif
@


1.8
log
@arbitrary center
@
text
@a32 1
	DOUBLE PRECISION THETA,PHI,PSI
d58 2
a59 5
	CALL  RDPRM2(P1,T1,NLOOP,ILOOP,'Phi, Theta')
	CALL  RDPRM(P2,NLOOP,ILOOP,'Psi')
	THETA=T1/360.0D0*8.0D0*DATAN(1.0D0)
	PHI=P1/360.0D0*8.0D0*DATAN(1.0D0)
	PSI=P2/360.0D0*8.0D0*DATAN(1.0D0)
d96 1
a96 1
     &	(LUN2,Q,Q(KK),KLX,KNX,KLY,KNY,KLZ,KNZ,THETA,PHI,PSI)
@


1.7
log
@printout fixed
@
text
@d21 1
a21 2
      SUBROUTINE ROTAS3(MAXMEM)
#ifdef SP_UNIX
a22 3
#else
      INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
d32 1
a32 1
      CHARACTER *1  NULL
d45 1
a45 1
         CALL ALLOCIT(MEMWANT,RUNTIME,IPQ,'RT 3D',IRTFLG)
d50 1
a50 1
         CALL ERRT(6,'RT 3D ',NE)
d64 4
d72 8
d98 1
d103 1
a103 1
      CALL ALLOCIT(0,RUNTIME,IPQ,'RT 3D',IRTFLG)
d109 1
a109 1
130   CALL ERRT(4,'RT 3D ',NE)
d111 1
a111 1
145   CALL ERRT(2,'RT 3D ',NE)
@


1.6
log
@insufficient memory reported
@
text
@d94 1
a94 1
      CALL ALLOCIT(0,RUNTIME,IPQ,'RF 3',IRTFLG)
@


1.5
log
@VMS related bug fixed
@
text
@d54 1
@


1.4
log
@add SP_ALLOC for allocit call
@
text
@d52 1
a52 1
        IF(MEMWANT.GT.MAXDIM) THEN
@


1.3
log
@nosave, malloc
@
text
@d24 4
d31 1
a31 1
      LOGICAL         RUNTIME
a32 1
      INCLUDE 'COMMON1:CMBLOCK.INC'
d48 1
a48 1
#ifdef SP_UNIX
d92 1
a92 1
#ifdef SP_UNIX
@


1.2
log
@cpp_lines_added
@
text
@d1 20
d24 4
d30 1
a31 1
      COMMON Q(1)
a34 1

d36 1
d41 1
a41 1
      CALL OPENF(FILNAM,LUN1,NSAM,NROW,'R',NF,NSLICE)
d44 9
a52 4
	IF(NSAM*(NROW*NSLICE+1).GT.MAXMEM)  THEN
	CALL  ERRT(6,'ROTA  ',NE)
	GOTO  5
	ENDIF
d54 2
a55 2
      IF (IRTFLG .EQ. -1) GOTO 5
      CALL OPENF(FILNAM,LUN2,NSAM,NROW,'UNKNOWN',NF,NSLICE)
d59 2
a60 2
	CALL  RDPRM2(P1,T1,NLOOP,ILOOP,'Phi, Theta$')
	CALL  RDPRM(P2,NLOOP,ILOOP,'Psi$')
d88 4
d96 1
a96 1
130   CALL ERRT(4,'ROTA  ',NE)
d98 1
a98 1
145   CALL ERRT(2,'ROTA  ',NE)
@


1.1
log
@Initial revision
@
text
@d2 3
d6 1
@
