head	1.21;
access;
symbols
	pre_getangas:1.20
	GPL2010:1.20
	pre_GPL2010:1.19
	pre_var_equation:1.19
	pre_fftwrings:1.19
	pre_opfiles:1.19
	src:1.19
	best-code:1.19
	x-named-regs:1.19
	x:1.19
	v13-00:1.19
	pre_GPL:1.17
	prec_CA:1.17
	noindx:1.16
	Bproc:1.15
	oct21:1.6
	last77:1.6;
locks; strict;
comment	@c @;


1.21
date	2013.06.11.19.00.20;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2010.06.24.13.26.35;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.17.20.02.12;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.17.17.57.48;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.20.19.40.35;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2002.03.11.14.07.51;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2000.08.17.16.48.22;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2000.08.10.15.40.28;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.02.04.19.16.19;	author bimal;	state Exp;
branches;
next	1.12;

1.12
date	2000.02.02.20.18.59;	author bimal;	state Exp;
branches;
next	1.11;

1.11
date	2000.02.02.20.17.13;	author bimal;	state Exp;
branches;
next	1.10;

1.10
date	2000.02.02.14.39.40;	author bimal;	state Exp;
branches;
next	1.9;

1.9
date	99.12.06.15.20.04;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.12.06.13.40.34;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.11.10.23.11.16;	author yuchen;	state Exp;
branches;
next	1.6;

1.6
date	97.10.17.15.19.11;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.02.15.18.11.51;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.08.09.17.12.51;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.08.09.17.01.52;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.09.27;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.51.47;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.21
log
@updated
@
text
@C++*********************************************************************
C    QALI.F
C                  USED OPFILE                     DEC 99 AL
C                  OPFILEC                         FEB 03 ARDEAN LEITH
C                  PROMPTS                         JUN 13 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2013  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C *     
C **********************************************************************
C     3D ORIENTATION SEARCH  02/14/9D
C     ROTATION MATRIX CORRECTED
C     ROTATION AROUND ARBITRARY POINT MODE='A'
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C **********************************************************************

        SUBROUTINE QALI(MODE)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC' 

        COMMON /POINT/ XPO,YPO
        REAL,  POINTER          :: XPO(:,:,:)
        REAL,  POINTER          :: YPO(:,:,:)

        CHARACTER(LEN=MAXNAM)   :: FILNAM
        CHARACTER * 1           :: MODE
        CHARACTER * 1           :: NULL = CHAR(0)
        REAL                    :: PIT(4)

        DOUBLE PRECISION        :: AA,AB
        COMMON  /QNORMA/   AA,AB
        COMMON  /DIMSPEC/  R


        DATA  LUN1,LUN2/77,78/

C       ASK FOR DATA FILE
        NT = NOUT

        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
     &               MAXIM,'REFERENCE VOLUME~',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0)  GOTO 9999

        IF (IFORM.NE.3 .OR. 
     &     (.NOT.(NSAM == NROW .AND. NROW == NSLICE))) THEN
           CALL  ERRT(101,'MUST BE CUBIC VOLUME ',NE)
           GOTO 9999
        ENDIF

        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN2,'O',IFORM,NSM,NRW,NSL,
     &               MAXIM,'EXPERIMENTAL VOLUME~',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        CALL SIZCHK(NULL,NSAM,NROW,NSLICE,0, NSM,NRW,NSL,0, IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        CALL  RDPRI1S(NRAD,NOT_USED,'MASK RADIUS',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        R = NRAD

        IF (MODE == 'A')  THEN
           NZ = -999999
           CALL RDPRI3S(NX,NY,NZ,NOT_USED,
     &             'ROTATION CENTER  X,Y,Z',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

           IF (NZ == -999999) THEN
             CALL  RDPRI1S(NZ,NOT_USED,'ROTATION CENTER Z',IRTFLG)
             IF (IRTFLG .NE. 0) GOTO 9999
           ENDIF
        ENDIF

        PIT(3) = -999999
        CALL RDPRM3S(PIT(1),PIT(2),PIT(3),NOT_USED,
     &             'INITIAL EULERIAN ANGLES  PHI,THETA,PSI',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        IF (PIT(3) == -999999) THEN
           CALL  RDPRM1S(PIT(3),NOT_USED,
     &           'INITIAL EULERIAN ANGLE; PSI',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999
        ENDIF
 
           NSM = NSAM
           NRM = NROW
           NLM = NSLICE

           IF (MODE == 'A')  THEN
              KLX = -NX+1
              KNX = NSAM-NX
              KLY = -NY+1
              KNY = NROW-NY
              KLZ = -NZ+1
              KNZ = NSLICE-NZ

           ELSE
              KLX = -NSAM/2
              IF (MOD(NSAM,2) == 0)  THEN
                 KNX = NSAM/2-1
              ELSE
                 KNX = -KLX
              ENDIF

              KLY = -NROW/2
              IF (MOD(NROW,2) == 0)  THEN
                 KNY = NROW/2-1
              ELSE
                 KNY = -KLY
              ENDIF

              KLZ = -NSLICE/2
              IF (MOD(NSLICE,2) == 0)  THEN
                 KNZ = NSLICE/2-1
              ELSE
                 KNZ = -KLZ
              ENDIF
           ENDIF

           ALLOCATE (XPO(KLX:KNX,KLY:KNY,KLZ:KNZ), 
     &               YPO(KLX:KNX,KLY:KNY,KLZ:KNZ), STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN 
              MWANT = (KNX-KLX) * (KLY-KNY) *(KLZ-KNZ) 
              CALL ERRT(46,'QALI, XPO...',MWANT)
              GOTO 9998
           ENDIF

        CALL READV(LUN1,XPO,NSAM,NROW,NSAM,NROW,NSLICE)

        CALL READV(LUN2,YPO,NSAM,NROW,NSAM,NROW,NSLICE)

        WRITE(NOUT,90) 
90      FORMAT(/,
     &   '  Iteration   Phi     Theta       Psi    Distance         R')

        CALL QNRF(XPO,YPO,KLX,KNX,KLY,KNY,KLZ,KNZ,R,AA,AB)
       
        CALL UQU(PIT)  ! RETURNS PIT IN COMMON

        WRITE(NOUT,91) 
91      FORMAT(/,'  Final   Phi       Theta       Psi        R')

        WRITE(NT,92)  (PIT(L),L=1,4)
92      FORMAT(8X,F9.4, 1X,F9.4, 1X,F9.4, 1X,F10.7)

        CALL REG_SET_NSEL(1,4,PIT(1),PIT(2),PIT(3),PIT(4),0.0,IRTFLG)

        WRITE (NDAT,93)
93      FORMAT (/,' ',30('-'),' END OF COMPUTATION ',30('-'),/)

9998    IF (ASSOCIATED(XPO)) DEALLOCATE (XPO)
	IF (ASSOCIATED(YPO)) DEALLOCATE (YPO)

9999    CLOSE(LUN1)
        CLOSE(LUN2)

        END

@


1.20
log
@GPL_2010
@
text
@d5 2
d11 1
a11 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
a32 2
C     IMAGE_PROCESSING_ROUTINE
C
d41 3
a43 2
        REAL, DIMENSION(:,:,:), POINTER   ::   XPO
        REAL, DIMENSION(:,:,:), POINTER   ::   YPO
d45 4
a48 1
        COMMON /POINT/ XPO,YPO
d50 2
a51 2
        CHARACTER(LEN=MAXNAM)   ::  FILNAM
        CHARACTER*1   MODE
d53 1
a53 1
        COMMON  /PARM/  NT,PIT(4)
d58 1
a58 1
        NT=NOUT
d62 2
a63 5
     &               MAXIM,'REFERENCE 3D',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0)  THEN
           CLOSE (LUN1)
           RETURN
        ENDIF
d65 4
a68 5
        IF (IFORM.NE.3
     &     .OR. (.NOT.(NSAM.EQ.NROW .AND. NROW.EQ.NSLICE))) THEN
           CALL  ERRT(1,'OR 3Q ',NE)
           CLOSE (LUN2)
           RETURN
d73 8
a80 5
     &               MAXIM,'SECOND',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CLOSE (LUN2)
           RETURN
        ENDIF
d82 12
a93 4
        IF (NSAM.NE.NSM.OR.NROW.NE.NRW.OR.NSLICE.NE.NSL)  THEN
           CALL  ERRT(1,'OR 3Q ',NE)
           CLOSE (LUN2)
           RETURN
d96 9
a104 5
        CALL  RDPRMI(NRAD,NDUMP,NOT_USED,'RADIUS OF THE MASK')
        R=NRAD
        IF (MODE.EQ.'A')  THEN
           CALL  RDPRMI(NX,NY,NOT_USED,'CENTER OF ROTATION NX, NY')
           CALL  RDPRMI(NZ,NDUMP,NOT_USED,'CENTER OF ROTATION NZ')
a105 3
        WRITE(NOUT,*) ' INITIAL EULERIAN ANGLES'
        CALL  RDPRM2(PIT(1),PIT(2),NOT_USED,'PHI, THETA')
        CALL  RDPRM(PIT(3),NOT_USED,'PSI')
d107 12
a118 10
           NSM=NSAM
           NRM=NROW
           NLM=NSLICE
           IF (MODE.EQ.'A')  THEN
              KLX=-NX+1
              KNX=NSAM-NX
              KLY=-NY+1
              KNY=NROW-NY
              KLZ=-NZ+1
              KNZ=NSLICE-NZ
d120 3
a122 3
              KLX=-NSAM/2
              IF (MOD(NSAM,2).EQ.0)  THEN
                 KNX=NSAM/2-1
d124 1
a124 1
                 KNX=-KLX
d126 4
a129 3
              KLY=-NROW/2
              IF (MOD(NROW,2).EQ.0)  THEN
                 KNY=NROW/2-1
d131 1
a131 1
                 KNY=-KLY
d133 4
a136 3
              KLZ=-NSLICE/2
              IF (MOD(NSLICE,2).EQ.0)  THEN
                 KNZ=NSLICE/2-1
d138 1
a138 1
                 KNZ=-KLZ
d142 6
a147 15
           ALLOCATE (XPO(KLX:KNX,KLY:KNY,KLZ:KNZ), STAT=IRTFLG)
           IF (IRTFLG.NE.0) THEN 
              CALL ERRT(46,'QALI, XPO',IER)
              CLOSE(LUN1)
              CLOSE(LUN2)
              RETURN
           ENDIF

           ALLOCATE (YPO(KLX:KNX,KLY:KNY,KLZ:KNZ), STAT=IRTFLG)
           IF (IRTFLG.NE.0) THEN 
              CALL ERRT(46,'QALI, YPO',IER)
	      DEALLOCATE (XPO)
              CLOSE(LUN1)
              CLOSE(LUN2)
              RETURN
a150 1
        CLOSE(LUN1)
a152 1
        CLOSE(LUN2)
d154 5
a158 1
        CALL  QNRF(XPO,YPO,KLX,KNX,KLY,KNY,KLZ,KNZ,R)
d160 7
a166 1
        CALL  UQU
a167 4
C       IF (NSEL(1).NE.0) PARAM(NSEL(1))=PIT(1)
C       IF (NSEL(2).NE.0) PARAM(NSEL(2))=PIT(2)
C       IF (NSEL(3).NE.0) PARAM(NSEL(3))=PIT(3)
C       IF (NSEL(4).NE.0) PARAM(NSEL(4))=PIT(4)
d170 2
a171 3
        WRITE (NDAT,2600)
2600    FORMAT (//' ',80('-')//' ',
     &              'END OF COMPUTATION',//' ',80('-'))
d173 2
a174 2
	DEALLOCATE (XPO)
	DEALLOCATE (YPO)
d176 1
a176 1
        CLOSE(LUN1)
@


1.19
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.18
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a5 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                   
a30 1
C **************************************************************************
a38 1
C **************************************************************************
@


1.17
log
@opfilec
@
text
@d1 1
d6 1
d8 1
d10 24
d41 1
d50 1
@


1.16
log
@nloop,iloop_removed
@
text
@d3 2
a4 1
C                                   USED OPFILE DEC 99 AL
d19 1
a19 1
C IMAGE_PROCESSING_ROUTINE
a20 1
C        1         2         3         4         5         6         7
d27 1
d34 1
a34 1
        CHARACTER*80  FILNAM
d45 1
a45 1
        CALL OPFILE(.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
d60 1
a60 1
        CALL OPFILE(.TRUE.,FILNAM,LUN2,'O',IFORM,NSM,NRW,NSL,
@


1.15
log
@*** empty log message ***
@
text
@d72 1
a72 1
        CALL  RDPRMI(NRAD,NDUMP,NLOOP,ILOOP,'RADIUS OF THE MASK')
d75 2
a76 2
           CALL  RDPRMI(NX,NY,NLOOP,ILOOP,'CENTER OF ROTATION NX, NY')
           CALL  RDPRMI(NZ,NDUMP,NLOOP,ILOOP,'CENTER OF ROTATION NZ')
d79 2
a80 2
        CALL  RDPRM2(PIT(1),PIT(2),NLOOP,ILOOP,'PHI, THETA')
        CALL  RDPRM(PIT(3),NLOOP,ILOOP,'PSI')
@


1.14
log
@used reg_set
@
text
@d144 1
a144 1
        CALL REG_SET_NSEL(1,PIT(1),PIT(2),PIT(3),PIT(4),0.0,IRTFLG)
@


1.13
log
@*** empty log message ***
@
text
@a27 1

a32 1

a39 2


d75 1
a75 1
          CALL  RDPRMI(NX,NY,NLOOP,ILOOP,'CENTER OF ROTATION NX, NY')
a112 1

a120 1

a129 1
            
a137 1

d140 5
d146 2
a147 6
           IF (NSEL(1).NE.0) PARAM(NSEL(1))=PIT(1)
           IF (NSEL(2).NE.0) PARAM(NSEL(2))=PIT(2)
           IF (NSEL(3).NE.0) PARAM(NSEL(3))=PIT(3)
           IF (NSEL(4).NE.0) PARAM(NSEL(4))=PIT(4)
           WRITE (NDAT,2600)
2600       FORMAT (//' ',80('-')//' ',
a148 1

@


1.12
log
@*** empty log message ***
@
text
@d137 1
a137 1
        CALL READV(LUN1,XPO,NSAM,NROW,NSLICE,NSAM,NROW,NSLICE)
d140 1
a140 1
        CALL READV(LUN2,YPO,NSAM,NROW,NSLICE,NSAM,NROW,NSLICE)
@


1.11
log
@adapted for dynamical memory allocation
@
text
@d26 1
a26 1
        INCLUDE '/net/ithaca/usr1/spider/src/CMBLOCK.INC'
@


1.10
log
@*** empty log message ***
@
text
@d17 5
d24 1
a24 1
        SUBROUTINE QALI(MAXMEM,MODE)
d26 1
a26 1
        INCLUDE 'CMBLOCK.INC'
d28 7
a34 1
        COMMON        DUMMY(80),BUF(1024),Q(1)
d37 1
a37 2
        COMMON  /DIMSPEC/  NSM,NRM,NLM,KLX,KNX,R,L1,L2,L3,L4
     &				,KLY,KNY,KLZ,KNZ
d42 2
d50 4
a53 1
        IF (IRTFLG .NE. 0) GOTO 5
d58 2
a59 4
           GOTO  5
        ELSEIF (2*NSAM*NROW*NSLICE .GT. MAXMEM)  THEN
           CALL  ERRT(6,'OR 3Q  ',NE)
           GOTO  5
d65 4
a68 1
        IF (IRTFLG .NE. 0) GOTO 5
d72 2
a73 1
           GOTO 5
d78 1
a78 1
	IF (MODE.EQ.'A')  THEN
d81 1
a81 1
	ENDIF
d85 1
a85 9
        L1=1
        L2=L1+NSAM*NROW*NSLICE
        MEMTOT=L2+NSAM*NROW*NSLICE

        WRITE (NDAT,2500)  MAXMEM , MEMTOT
 2500   FORMAT (/,'  MEMORY RESERVATION: YOU HAVE',
     &            ' RESERVED ',I8,',  YOU NEED  ',I8 / )

         IF (MEMTOT .LE. MAXMEM)  THEN
d89 1
a89 1
	   IF (MODE.EQ.'A')  THEN
d96 1
a96 1
	   ELSE
d115 34
a148 2
	   ENDIF
           CALL  QALI_P(LUN1,LUN2,NSAM,NROW,NSLICE,Q(L1),Q(L2))
d156 1
a156 2
           RETURN
        ENDIF
d158 2
d161 1
a161 1
5       CLOSE(LUN1)
d163 1
a163 1
        RETURN
d165 1
@


1.9
log
@bad )
@
text
@d23 1
a23 1
        COMMON        Q(1)
d68 1
a68 1
        L1=1104+1
@


1.8
log
@# continuations removed, used opfile
@
text
@d41 1
a41 1
     &     .OR.(.NOT.(NSAM.EQ.NROW .AND. NROW.EQ.NSLICE))   THEN
d44 1
a44 2
        ENDIF
        IF (2*NSAM*NROW*NSLICE.GT.MAXMEM)  THEN
@


1.7
log
@a
@
text
@d1 18
d20 1
a20 3
c  3D orientation search  02/14/9d
c     rotation matrix corrected
c     Rotation around arbitrary point MODE='A'
d22 2
a23 1
        COMMON  DUMMY(80),BUF(1024),Q(1)
d25 1
a25 1
        CHARACTER*1  NULL,MODE
d29 1
d32 1
a32 3
C
C  ASK FOR DATA FILE
C
d34 14
a47 10
        NULL=CHAR(0)
      CALL FILERD(FILNAM,NLETI,NULL,'Reference 3D',IRTFLG)
      IF (IRTFLG .EQ. -1) GOTO 5
        CALL  OPENFB(BUF,FILNAM,LUN1,NSAM,NROW,'O',NF,NSLICE)
      GOTO (130,110),NF
110   IF(IFORM.NE.3
     &  .OR.(.NOT.(NSAM.EQ.NROW .AND. NROW.EQ.NSLICE))
     &    )  THEN
        CALL  ERRT(1,'OR 3Q ',NE)
        GOTO  5
d49 9
a57 3
        IF(2*NSAM*NROW*NSLICE.GT.MAXMEM)  THEN
        CALL  ERRT(6,'OR 3Q  ',NE)
        GOTO  5
d59 2
a60 9
      CALL FILERD(FILNAM,NLETI,NULL,'Second',IRTFLG)
      IF (IRTFLG .EQ. -1) GOTO 5
        CALL  OPENFB(BUF,FILNAM,LUN2,NSM,NRW,'O',NF,NSL)
      GOTO (130,210),NF
210     IF(NSAM.NE.NSM.OR.NROW.NE.NRW.OR.NSLICE.NE.NSL)  THEN
        CALL  ERRT(1,'OR 3Q ',NE)
        GOTO 5
        ENDIF
        CALL  RDPRMI(NRAD,NDUMP,NLOOP,ILOOP,'Radius of the mask')
d62 3
a64 3
	IF(MODE.EQ.'A')  THEN
        CALL  RDPRMI(NX,NY,NLOOP,ILOOP,'Center of rotation NX, NY')
        CALL  RDPRMI(NZ,NDUMP,NLOOP,ILOOP,'Center of rotation NZ')
d66 3
a68 3
        WRITE(NOUT,*) ' Initial Eulerian angles'
        CALL  RDPRM2(PIT(1),PIT(2),NLOOP,ILOOP,'Phi, Theta')
        CALL  RDPRM(PIT(3),NLOOP,ILOOP,'Psi')
d72 1
a72 1
C
d74 43
a116 17
        IF (MEMTOT .LE. MAXMEM)  THEN
        NSM=NSAM
        NRM=NROW
        NLM=NSLICE
	IF(MODE.EQ.'A')  THEN
        KLX=-NX+1
        KNX=NSAM-NX
        KLY=-NY+1
        KNY=NROW-NY
        KLZ=-NZ+1
        KNZ=NSLICE-NZ
	ELSE
        KLX=-NSAM/2
        IF(MOD(NSAM,2).EQ.0)  THEN
        KNX=NSAM/2-1
        ELSE
        KNX=-KLX
d118 2
a119 21
        KLY=-NROW/2
        IF(MOD(NROW,2).EQ.0)  THEN
        KNY=NROW/2-1
        ELSE
        KNY=-KLY
        ENDIF
        KLZ=-NSLICE/2
        IF(MOD(NSLICE,2).EQ.0)  THEN
        KNZ=NSLICE/2-1
        ELSE
        KNZ=-KLZ
        ENDIF
	ENDIF
        CALL  QALI_P(LUN1,LUN2,NSAM,NROW,NSLICE,Q(L1),Q(L2))
        IF(NSEL(1).NE.0) PARAM(NSEL(1))=PIT(1)
        IF(NSEL(2).NE.0) PARAM(NSEL(2))=PIT(2)
        IF(NSEL(3).NE.0) PARAM(NSEL(3))=PIT(3)
        IF(NSEL(4).NE.0) PARAM(NSEL(4))=PIT(4)
        WRITE (NDAT,2600)
        RETURN
        ENDIF
a122 7
130     CALL  ERRT(4,'OR 3Q ',NE)
        GOTO  5
C
 2500 FORMAT (/,'  MEMORY RESERVATION: YOU HAVE',
     #    ' RESERVED ',I8,',  YOU NEED  ',I8 / )
 2600 FORMAT (//' ',80('-')//' ',
     #      'END OF COMPUTATION',//' ',80('-'))
@


1.6
log
@R
@
text
@d13 1
a13 1
CNO_SAVE
@


1.5
log
@arbitrary center
@
text
@d21 1
a21 1
        CALL  OPENFB(BUF,FILNAM,LUN1,NSAM,NROW,'R',NF,NSLICE)
d35 1
a35 1
        CALL  OPENFB(BUF,FILNAM,LUN2,NSM,NRW,'R',NF,NSL)
@


1.4
log
@nosave
@
text
@d1 2
a2 2
        SUBROUTINE QALI(MAXMEM)
c  3D orientation search  01/25/93
d4 1
a4 2
c
#ifdef SP_UNIX
a5 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d8 3
a10 2
        CHARACTER*1  NULL
        COMMON  /DIMSPEC/  NSM,NRM,NLM,KL,KN,R,L1,L2,L3,L4
d26 1
a26 1
        CALL  ERRT(1,'QALI ',NE)
d30 1
a30 1
        CALL  ERRT(6,'QALI  ',NE)
d38 1
a38 1
        CALL  ERRT(1,'QALI ',NE)
d41 1
a41 1
        CALL  RDPRMI(NRAD,NDUMP,NLOOP,ILOOP,'Radius of the mask$')
d43 4
d48 2
a49 2
        CALL  RDPRM2(PIT(1),PIT(2),NLOOP,ILOOP,'Phi, Theta$')
        CALL  RDPRM(PIT(3),NLOOP,ILOOP,'Psi$')
d54 1
a54 1
      WRITE (NDAT,2500)  MAXMEM , MEMTOT
d59 9
a67 1
        KL=-NSAM/2
d69 1
a69 1
        KN=NSAM/2-1
d71 1
a71 1
        KN=-KL
d73 13
d97 1
a97 1
130     CALL  ERRT(4,'QALI ',NE)
@


1.3
log
@malloc cannot work, pointers are passed through commons to fcnq.
don't use this version.
@
text
@a9 6
#ifdef SP_ALLOC
        COMMON  DUMMY(80),BUF(1024)
         DIMENSION Q(1)
         POINTER   (IPQ,Q) 
         LOGICAL         RUNTIME
#else
a10 1
#endif
a48 10
#ifdef SP_ALLOC
        L1=1
        L2=L1+NSAM*NROW*NSLICE
        MEMTOT=L2+NSAM*NROW*NSLICE
         CALL ALLOCIT(MEMTOT,RUNTIME,IPQ,'QALI',IRTFLG)
        WRITE (NDAT,2500)  MEMTOT
 2500 FORMAT (/,'  DYNAMICAL MEMORY ALLOCATION: YOU HAVE',
     #    ' RESERVED ',I8 / )
	IF(RUNTIME)  THEN
#else
a51 4
        WRITE (NDAT,2500)  MAXMEM , MEMTOT
 2500 FORMAT (/,'  MEMORY RESERVATION: YOU HAVE',
     #    ' RESERVED ',I8,',  YOU NEED  ',I8 / )
         IF (MEMTOT .LT. MAXMEM)  THEN
d53 2
a54 2
#endif
C
a68 3
#ifdef SP_ALLOC
        CALL ALLOCIT(0,RUNTIME,IPQ,'QALI',IRTFLG)
#endif
d78 2
@


1.2
log
@cpp_lines_added
@
text
@d10 6
d17 1
d23 1
d56 10
d69 4
d74 2
a75 2
      WRITE (NDAT,2500)  MAXMEM , MEMTOT
        IF (MEMTOT .LE. MAXMEM)  THEN
d90 3
a101 2
 2500 FORMAT (/,'  MEMORY RESERVATION: YOU HAVE',
     #    ' RESERVED ',I8,',  YOU NEED  ',I8 / )
@


1.1
log
@Initial revision
@
text
@d5 3
d9 1
@
