head	1.27;
access;
symbols
	healthdept_2018:1.27
	pre_getangas:1.23
	GPL2010:1.22
	pre_GPL2010:1.21
	pre_var_equation:1.21
	pre_fftwrings:1.21
	pre_opfiles:1.20
	src:1.20
	best-code:1.20
	x-named-regs:1.19
	x:1.19
	v13-00:1.19
	pre_GPL:1.17
	prec_CA:1.15
	noindx:1.14
	Bproc:1.11
	oct21:1.9
	last77:1.4;
locks; strict;
comment	@c @;


1.27
date	2018.10.03.14.34.12;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2014.01.09.15.55.31;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2011.10.27.13.36.14;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2011.02.22.19.23.52;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2011.02.11.20.16.24;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2010.06.24.13.26.27;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2007.01.31.21.00.26;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2005.12.16.01.50.34;	author cyang;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.17.20.26.37;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.17.18.18.21;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2004.01.05.17.42.23;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2003.11.24.14.25.01;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.11.15.56.51;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2002.04.01.16.43.42;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2001.03.01.19.26.30;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.10.23.18.19.18;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.08.17.18.09.55;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.08.10.15.12.36;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.09.08.16.59.29;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.05.18.18.13.58;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	99.04.12.13.12.29;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.04.12.13.05.57;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.04.08.19.47.10;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.02.04.17.28.54;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	97.10.10.18.57.53;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	96.07.18.15.42.03;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.51.03;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.27
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C  PATCH.F      USED REG_SET                        AUG 00 ARDEAN LEITH
C               ADDED 3D to 'PA' & 'IN'             FEB 01 ARDEAN LEITH
C               0,0 BUG                             FEB 03 ARDEAN LEITH
C               1,1 'PD' SPEEDUP                    NOV 03 ARDEAN LEITH
C               1,1 BACKGROUND BUG                  JAN 07 ARDEAN LEITH
C               BORDER CALC BUG                     FEB 11 ARDEAN LEITH
C               WRITE  PAD INTO REGISTER ALWA       FEB 11 ARDEAN LEITH      
C               IREC BUG WHEN OUTSIDE               OCT 11 ARDEAN LEITH      
C               FMIN BUG on 'IN S'                  JAN 14 ARDEAN LEITH      
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   PATCH(LUN2,LUN1,NSAM2,NROW2,NSAM1,NROW1,LOCX,LOCY,IN,AVS,OPT)
C
C   PURPOSE: PATCH, PAD OR INSERT IMAGE
C
C      THIS SUBROUTINE TAKES IMAGE STORED ON LUN1 AND ADDS IT ONTO OR
C      INSERTS IT INTO IMAGE STORED ON LUN2 AT A SPECIFIED LOCATION.
C
C   PARAMETERS:
C        LUN2          SMALL INPUT IMAGE                     (SENT)
C        LUN1          BIG INPUT IMAGE (= OUTPUT IMAGE)      (SENT)
C        NSAM1,NROW1   SIZE OF BIG IMAGE 1                   (SENT)
C        NSLIC1                                              (SENT)
C        NSAM2,NROW2   SIZE OF IMAGE 2 (NSAM2 <= NSAM1)      (SENT)
C        NSLIC2                        (NROW2 <= NROW1)      (SENT)
C        LOCX,LOCY   UL COORDINATES OF PATCH IN BIG IMAGE  (SENT)
C        IN            0   PATCH                       'PA'  (SENT)
C                      1   INSERT                      'IN'
C                      2   CREATE IMAGE WITH VALUE AVS 'PD'
C                          AND IMAGE FROM LUN2 INSERTED.       
C 		       3   SAME AS 2 WITH CIRCULAR PAD  'PD'
C        AVS           PADDING VALUE                         (SENT)
C        OPT           FCHAR(4:4)                            (SENT)
C        FMIN2,FMAX2   MIN & MAX FOR SMALL INPUT FILE        (SENT)
C
C--********************************************************************

      SUBROUTINE PATCH(LUN2,LUN1,NSAM2,NROW2,NSLIC2,
     &                           NSAM1,NROW1,NSLIC1,
     &                           LOCX,LOCY,LOCZ,
     &                           IN,AVS,OPT,
     &                           FMIN2,FMAX2,USEBORDER)

      INCLUDE 'CMBLOCK.INC'    
      INCLUDE 'CMLIMIT.INC'

      COMMON /IOBUF/ BUF(NBUFSIZ)

      INTEGER            :: IN
      CHARACTER          :: OPT
      REAL               :: AVS,FMIN2,FMAX2 
      LOGICAL            :: USEBORDER

C     AUTOMATIC ARRAYS
      REAL               :: BUF1(NSAM1)
      REAL               :: BUF2(NSAM1)

      DOUBLE PRECISION   :: RRRBOR

      CALL SET_MPI(ICOMM,MYPID,MPIERR) ! SETS ICOMM AND MYPID

C     SKIP DIRECTLY TO CIRCULAR PADDING IF DESIRED --------------
      IF (IN == 3) GOTO 300


      NSAMP  = NSAM1 + 1

C     TRUNCATE INSERTION AT BOUNDARIES
      KS = LOCX
      IF (KS <= 0)    KS = 1
      KE = KS + NSAM2 - 1
      IF (KE > NSAM1) KE = NSAM1

      NS = LOCY
      IF (NS <= 0)    NS = 1
      NE = NS + NROW2 - 1
      IF (NE > NROW1) NE = NROW1

      IZGO = LOCZ        
      IF (IZGO <= 0)     IZGO = 1
      IZEND = IZGO + NSLIC2 - 1 
      IF (IZEND > NSLIC1) IZEND = NSLIC1

C     FOR UNCHANGED CODE FOR PADDING ETC.
      KKS = IZGO        
      KKE = IZEND 

      IF (IN == 0) THEN
C        FOR PATCH OPERATION --------------------------------------'PA'

         DO ISLICE = LOCZ,NSLIC1
           IF (ISLICE < 1) CYCLE
           ISLICE2 = ISLICE - LOCZ + 1
           IF (ISLICE2 > NSLIC2) CYCLE

           DO IROW = LOCY, NROW1
              IF (IROW < 1) CYCLE
              IROW2 = IROW - LOCY + 1
              IF (IROW2 > NROW2) CYCLE

              IREC1 = (ISLICE-1) *NROW1 + IROW
              IREC2 = (ISLICE2-1)*NROW2 + IROW2
 
              CALL REDLIN(LUN1,BUF1,NSAM1,IREC1)
              CALL REDLIN(LUN2,BUF2,NSAM2,IREC2)

              DO K = KS,KE
C                 ADD THE TWO PIXELS
                  BUF1(K) = BUF1(K) + BUF2(K-KS+1)
              ENDDO

              CALL WRTLIN(LUN1,BUF1,NSAM1,IREC1)
            ENDDO
         ENDDO
         RETURN

      ELSEIF (IN == 1) THEN
C       FOR INSERT OPERATION --------------------------------------'IN'

60	IF (OPT == 'S') THEN 
           SCALE  = (FMAX - FMIN) / (FMAX2 - FMIN2)
           SCALE2 = FMIN - FMIN2 * SCALE

           !write(6,*) ' '
           !write(6,*) ' fmin, fmin2: ', fmin,fmin2
           !write(6,*) ' fmax, fmax2: ', fmax,fmax2
           !write(6,*) ' scale,scale2:',scale,scale2

         ELSEIF (OPT == 'M') THEN
	   FMINS = FMIN
	   FMAXS = FMAX
	   SCALE = 2.0 / (FMAXS-FMINS)
         ENDIF
        !write(6,*) ' islice2,irow2,irec2:',islice2,irow2,irec2
        !write(6,*) ' izgo,izend, ns,ne:',izgo,izend, ns,ne


         DO ISLICE = LOCZ,NSLIC1
           IF (ISLICE < 1) CYCLE
           ISLICE2 = ISLICE - LOCZ + 1
           IF (ISLICE2 > NSLIC2) CYCLE

           DO IROW = LOCY, NROW1
              IF (IROW < 1) CYCLE
              IROW2 = IROW - LOCY + 1
              IF (IROW2 > NROW2) CYCLE

              IREC1 = (ISLICE-1) *NROW1 + IROW
              IREC2 = (ISLICE2-1)*NROW2 + IROW2
 
              !write(6,*) ' islice2,irow2,irec2:',islice2,irow2,irec2

              CALL REDLIN(LUN1,BUF1,NSAM1,IREC1)
              CALL REDLIN(LUN2,BUF2,NSAM2,IREC2)

              IF (OPT .NE. 'S' .AND. OPT .NE. 'M') THEN
C                SIMPLE 'IN'
                 DO K = KS,KE
C                   REPLACE THE PIXEL
                    BUF1(K) = BUF2(K-KS+1)
                 ENDDO

              ELSE
C                'IN S'  OR   'IN M' ('IN M' IS UNDOCUMENTED!)

  	         DO K = KS,KE
C 	            BUF(K) = FMIN + (BUF(NSAMP+K-KS) - FMIN2) * 
C    &                       (FMAX - FMIN) / (FMAX2 - FMIN2)
C                   SCALE = (FMAX - FMIN) / (FMAX2 - FMIN2)
C 	            BUF(K) = FMIN + (BUF(NSAMP+K-KS) - FMIN2) * SCALE
C 	            BUF(K) = FMIN + BUF(NSAMP+K-KS) * SCALE - FMIN2 * SCALE
C                   SCALE2 = FMIN - FMIN2 * SCALE

C                   REPLACE THE PIXEL
                    BUF1(K) = BUF2(K-KS+1) * SCALE + SCALE2
                 ENDDO
              ENDIF

              CALL WRTLIN(LUN1,BUF1,NSAM1,IREC1)
           ENDDO
        ENDDO
        
        RETURN
      ENDIF

C     FOR PADDING ----------------------------------------------- "PD' 
C     MODIFIED FOR 3D PADDING (11/11/86. JMC)
C     FIRST FILL WITH AVS ALL THE PLANES BETWEEN 1 AND (LOCZ-1)
C     AVS MAY BE THE AVERAGE IN THE OUTER TWO-PLANES OF THE VOLUME

C     IT APPEARS THAT AVS WAS ALSO USED TO SIGNAL (AVS .LT. 99999). 
C     BAD BUG IF ACTUAL AVS WAS > 99999 Nov 03 al

      IF (USEBORDER) THEN 
C        CALCULATE THE MEAN (=AVS) OF THE 2 OUTSIDE VOXELS OF THE FILE 
C        (IT IS DONE THIS WAY TO AVOID PASSING A NEW VARIABLE IN A 
C         PROGRAM THAT IS CALLED SOMEWHERE ELSE ALSO).

         KKKCOU = 0
         RRRBOR = 0

         IF (NSLIC2 .NE. 1) THEN
C           3D VOLUME

C                      END-SLICES          END-COLUMNS
            KKKCOU = (2*NSAM2)*NROW2*2 + (4*NROW2)*(NSLIC2-4)
C                 END-SLICES       END-ROWS            END-COLUMNS
            KKK=NSAM2*NROW2*4 + (NSLIC2-4)*NSAM2*4 +(4*NROW2)*(NSLIC2-4)

            DO  KKSLIC=1,2           ! LOOP OVER END 2 SLICES
               IREC1 = (KKSLIC-1)*NROW2 
               IRECN = (NSLIC2-KKSLIC)*NROW2 
               DO  KKROW=1,NROW2
                  CALL REDLIN(LUN2,BUF,         NSAM2,IREC1+KKROW)
                  CALL REDLIN(LUN2,BUF(NSAM2+1),NSAM2,IRECN+KKROW)

                  RRRBOR = RRRBOR + SUM(BUF(1:2*NSAM2))
	       ENDDO
	    ENDDO

            DO  KKSLIC=3,NSLIC2-2   ! LOOP OVER NON-END SLICES
               IREC1 = (KKSLIC-1)*NROW2 
               IRECN = (NSLIC2-KKSLIC)*NROW2 

               DO  KKROW=1,2        ! LOOP OVER END 2 ROWS
                  CALL REDLIN(LUN2,BUF,         NSAM2,IREC1+KKROW) 
                  CALL REDLIN(LUN2,BUF(NSAM2+1),NSAM2,IRECN+KKROW)

                  RRRBOR = RRRBOR + SUM(BUF(1:2*NSAM2))
               ENDDO

               DO  KKROW=1,NROW2    ! LOOP OVER END COLUMNS
                  CALL REDLIN(LUN2,BUF,         NSAM2,IREC1+KKROW)
 
                  RRRBOR = RRRBOR+BUF(1)+BUF(2)+BUF(NSAM2-1)+BUF(NSAM2)
	       ENDDO
	    ENDDO

          ELSE
C           2D IMAGE NOT A VOLUME
C                 END-ROWS    END-COLUMNS
            KKK = NSAM2*4  +  4*(NROW2-4)

            DO  KKROW=1,2           ! LOOP OVER END ROWS     
               CALL REDLIN(LUN2,BUF,NSAM2,         KKROW)
               CALL REDLIN(LUN2,BUF(NSAM2+1),NSAM2,NROW2-(KKROW-1))

               RRRBOR = RRRBOR + SUM(BUF(1:2*NSAM2))
	    ENDDO

            DO  KKROW=3,(NROW2-2)  ! LOOP OVER NON-END ROWS 
               CALL REDLIN(LUN2,BUF,NSAM2,KKROW)
               RRRBOR = RRRBOR + BUF(1)+BUF(2)+BUF(NSAM2)+BUF(NSAM2-1)
	    ENDDO
         ENDIF

C        COMPUTE AVERAGE
         AVST = RRRBOR / KKK

         IF (MYPID <= 0) WRITE (NOUT,3555) AVST,KKK
3555     FORMAT('  OUTER AVERAGE: ',1PG15.5,'  VOXELS:',I8)

      ELSE
 
         AVST = AVS
      ENDIF     ! END OF: IF (USEBORDER) 

C     WRITE THE PAD INTO OPTIONAL REGISTER  
      CALL REG_SET_NSEL(1,1, AVST,0.0,0.0,0.0,0.0,IRTFLG)
 
      IF (LOCX == 1 .AND. LOCY == 1 .AND. LOCZ == 1 .AND.
     &    NSAM2  <= NSAM1  .AND. NROW2 <= NROW1 .AND. 
     &    NSLIC2 <= NSLIC1 .AND. IN == 2) THEN
C         FAST & SIMPLE PAD AROUND UPPER LEFT CORNER

C         SET PAD TO AVST
          IF (NSAM2 .LT. NSAM1) BUF(NSAM2+1:NSAM1) = AVST

          IREC1 = 0
          DO ISLICE2 = 1,NSLIC2
             IGO2 = (ISLICE2 -1) * NROW2 + 1
             DO IREC2 = IGO2,IGO2+NROW2-1
                CALL REDLIN(LUN2,BUF,NSAM2,IREC2)
                IREC1 = IREC1 + 1
                CALL WRTLIN(LUN1,BUF,NSAM1,IREC1)
             ENDDO

             IF (NROW2 .LT. NROW1) THEN
C               STILL HAVE SOME PAD ROWS LEFT FOR OUTPUT
                BUF(1:NSAM1) = AVST

                DO IREC = 1,NROW1-NROW2 
                   IREC1 = IREC1 + 1
                   CALL WRTLIN(LUN1,BUF,NSAM1,IREC1)
                ENDDO
             ENDIF
          ENDDO

          IF (NSLIC2 .LT. NSLIC1) THEN
C            STILL HAVE SOME PAD SLICES LEFT FOR OUTPUT
             BUF(1:NSAM1) = AVST

             DO IREC = NROW1 * NSLIC2 + 1, NROW1 * NSLIC1
                CALL WRTLIN(LUN1,BUF,NSAM1,IREC)
             ENDDO
          ENDIF
          RETURN
      ENDIF

      NSAMP  = NSAM1 + 1
      NS     = LOCY
      NE     = NS + NROW2 - 1

      IF (KKS .NE. 1) THEN
         KKS1 = KKS-1
         DO  JJ=1,NSAM1
             BUF(JJ) = AVST
         ENDDO
         DO  KK=1,KKS1
            DO  K=1,NROW1
               CALL WRTLIN(LUN1,BUF,NSAM1,K+(NROW1*(KK-1)))
	    ENDDO
         ENDDO
      ENDIF

C     THE PLANES BETWEEN LOCZ AND LOCZ WILL BE REALLY PADDED

      DO 130 KK=KKS, KKE

         IF (NS.NE.1) THEN
            NS1=NS-1
            DO  I=1,NS1
               DO  K=1,NSAM1
                   BUF(K) = AVST
	       ENDDO
               CALL WRTLIN(LUN1,BUF,NSAM1,I+(NROW1*(KK-1)))
	    ENDDO
         ENDIF

         DO  I = NS,NE
            IF (KS==1) GOTO 160
            KS1 = KS - 1
            DO  K = 1,KS1
              BUF(K) = AVST
	    ENDDO
160         CALL REDLIN
     &         (LUN2,BUF(NSAMP),NSAM2,(I-NS+1)+(NROW2*(KK-KKS)))
            DO  K = KS,KE
               BUF(K) = BUF(NSAMP+K-KS)
	    ENDDO
            IF (KE. EQ. NSAM1) GOTO 179
            KE1 = KE + 1
            DO  K = KE1,NSAM1
               BUF(K) = AVST
	    ENDDO
179         CALL WRTLIN(LUN1,BUF,NSAM1,I+(NROW1*(KK-1)))
	 ENDDO

         IF (NE==NROW1) GOTO 130
         IE1 = NE + 1
         DO  I = IE1,NROW1
            DO  K = 1,NSAM1
               BUF(K) = AVST
	    ENDDO
         CALL WRTLIN(LUN1,BUF,NSAM1,I+(NROW1*(KK-1)))
	 ENDDO

130   CONTINUE

C     FILL THE REST OF THE PLANES BETWEEN LOCZ AND NSLIC1 WITH AVST 
       IF (KKE.NE.NSLIC1) THEN

          KKE1=KKE+1
          DO  I=1,NSAM1
             BUF(I) = AVST
          ENDDO

          DO  KK=KKE1,NSLIC1
            DO  K=1,NROW1
               CALL WRTLIN(LUN1,BUF,NSAM1,K+(NROW1*(KK-1)))
	    ENDDO
         ENDDO
      ENDIF
      RETURN


300   NSAMP  = NSAM1 + 1
      NS     = LOCY
      NE     = NS + NROW2 - 1


C INDEX ASSIGNMENTS FOR CIRCULAR PADDING --------------------------- PD
C
C	     KS2        KE2              KS1        KE1
C	NS2  I----------------------------------------I
C	     I          .                .
C	     I          .                .
C	     I          .                .
C	NE2  I...........                .............
C	     I
C	     I
C	     I
C	NS1  I...........
C	     I          .
C	     I          .
C	NE1  I------------------------------------------I
C
C
      NE2 = 0
      NS2 = 0
      IF (NS.LT.0) NS = NS+NROW1
      NS1 = NS
      NE1 = NS+NROW2-1
      NPASS = 1
      IF (NE1 <= NROW1) GOTO 320
      NS2 = 1
      NE2 = NE1-NROW1
      NE1 = NROW1
320   KS = LOCX
      KE2 = 1
      KS2 = 0
      IF (KS.LT.0) KS = KS+NSAM1
      KS1 = KS
      KE1 = KS+NSAM2-1
      IF (KE1<=NSAM1) GOTO 3205
      KS2 = 1
      KE2 = KE1 - NSAM1
      KE1 = NSAM1
3205  ISTART = NS2
      IEND = NE2
      IFILLS = NE2+1
      IFILLE = NS1-1
      IRECOF = NROW1-LOCY+1
      NPASS = 1
321   IF (ISTART==IEND) GOTO 350
      DO 340 I = ISTART,IEND
         IRECIN = I-ISTART+IRECOF+1
         CALL REDLIN(LUN2,BUF(NSAMP),NSAM2,IRECIN)
         IF (KS2==0) GOTO 330
         NOFFS = NSAMP+KE2-2*KS2
         DO  K = KS2,KE2
           BUF(K) = BUF(K+NOFFS+1)
	 ENDDO

         DO  K = KE2+1,KS1-1
           BUF(K) = AVST
	 ENDDO
330      NOFFS = NSAMP-KS1
         DO  K = KS1,KE1
           BUF(K) = BUF(K+NOFFS)
	 ENDDO

         IF (KE1==NSAM1) GOTO 340
         DO  K = KE1+1,NSAM1
           BUF(K) = AVST
	 ENDDO

340   CALL WRTLIN(LUN1,BUF,NSAM1,I)

350   IF (IFILLS==IFILLE) GOTO 390
      DO  I = IFILLS,IFILLE
         DO  K = 1,NSAM1
           BUF(K) = AVST
	 ENDDO
      CALL WRTLIN(LUN1,BUF,NSAM1,I)
      ENDDO

390   GOTO (400,410),NPASS
400   NPASS  = 2
      ISTART = NS1
      IEND   = NE1
      IFILLS = NE1 +1
      IFILLE = NROW1
      IRECOF = 0
      GOTO 321

410   RETURN
      END



@


1.26
log
@FMIN BUG on 'IN S'
@
text
@d19 1
a19 1
C=* Email: spider@@wadsworth.org                                        *
@


1.25
log
@irec bug in PA & IN if outside on some boundaries
@
text
@d12 1
d17 1
a17 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d86 1
a86 1
      IF (IN .EQ. 3) GOTO 300
d111 1
a111 1
      IF (IN .EQ. 0) THEN
d140 1
a140 1
      ELSEIF (IN .EQ. 1) THEN
d143 2
a144 2
60	IF (OPT .EQ. 'S') THEN 
           SCALE = (FMAX - FMIN) / (FMAX2 - FMIN2)
d147 6
a152 1
        ELSEIF (OPT .EQ. 'M') THEN
d156 3
a158 3
        ENDIF

        !write(6,*) ' IZGO,IZEND, NS,NE:',IZGO,IZEND, NS,NE
d205 1
d283 1
a283 1
         IF (MYPID .LE. 0) WRITE (NOUT,3555) AVST,KKK
d294 3
a296 3
      IF (LOCX .EQ. 1 .AND. LOCY .EQ. 1 .AND. LOCZ .EQ. 1 .AND.
     &    NSAM2  .LE. NSAM1  .AND. NROW2 .LE. NROW1 .AND. 
     &    NSLIC2 .LE. NSLIC1 .AND. IN .EQ. 2) THEN
d364 1
a364 1
            IF (KS.EQ.1) GOTO 160
d382 1
a382 1
         IF (NE.EQ.NROW1) GOTO 130
d438 1
a438 1
      IF (NE1 .LE. NROW1) GOTO 320
d448 1
a448 1
      IF (KE1.LE.NSAM1) GOTO 3205
d458 1
a458 1
321   IF (ISTART.EQ.IEND) GOTO 350
d462 1
a462 1
         IF (KS2.EQ.0) GOTO 330
d476 1
a476 1
         IF (KE1.EQ.NSAM1) GOTO 340
d483 1
a483 1
350   IF (IFILLS.EQ.IFILLE) GOTO 390
@


1.24
log
@WRITE  PAD INTO REGISTER ALWAYS
@
text
@d11 1
d34 1
a34 1
C   PATCH(LUN2,LUN1,NSAM2,NROW2,NSAM1,NROW1,NSAMS,NROWS,IN,AVS,OPT)
d48 1
a48 1
C        NSAMS,NROWS   UL COORDINATES OF PATCH IN BIG IMAGE  (SENT)
d62 1
a62 1
     &                           NSAMS,NROWS,NSLICS,
d91 2
a92 7
      NS     = NROWS
      IF (NS .LE. 0)     NS = 1
      NE     = NS + NROW2 - 1
      IF (NE .GT. NROW1) NE = NROW1

      KS = NSAMS
      IF (KS .LE. 0)     KS = 1
d94 1
a94 1
      IF (KE .GT. NSAM1) KE = NSAM1
d96 13
a108 4
      KKS = NSLICS        
      IF (KKS .LE. 0)      KKS = 1
      KKE = KKS + NSLIC2 - 1 
      IF (KKE .GT. NSLIC1) KKE = NSLIC1
a111 1
         IREC2 = 1
d113 9
a121 2
         DO ISLICE = KKS,KKE
            DO IROW = NS, NE
d123 7
a129 4
               IREC1 = (ISLICE-1)*NROW1+IROW
               CALL REDLIN(LUN1,BUF1,NSAM1,IREC1)
               CALL REDLIN(LUN2,BUF2,NSAM2,IREC2)
               DO K = KS,KE
d132 1
a132 1
               ENDDO
d134 1
a134 2
               CALL WRTLIN(LUN1,BUF1,NSAM1,IREC1)
               IREC2 = IREC2 + 1
d152 7
a158 1
        IREC2 = 1
d160 9
a168 2
        DO ISLICE = KKS,KKE
           DO IROW = NS, NE
a169 1
              IREC1 = (ISLICE-1)*NROW1+IROW
a196 1
              IREC2 = IREC2 + 1
d204 1
a204 1
C     FIRST FILL WITH AVS ALL THE PLANES BETWEEN 1 AND (NSLICS-1)
d287 1
a287 1
      IF (NSAMS .EQ. 1 .AND. NROWS .EQ. 1 .AND. NSLICS .EQ. 1 .AND.
d327 1
a327 1
      NS     = NROWS
d342 1
a342 1
C     THE PLANES BETWEEN NSLICS AND NSLICS WILL BE REALLY PADDED
d386 1
a386 1
C     FILL THE REST OF THE PLANES BETWEEN NSLICS AND NSLIC1 WITH AVST 
d404 1
a404 1
      NS     = NROWS
d435 1
a435 1
320   KS = NSAMS
d449 1
a449 1
      IRECOF = NROW1-NROWS+1
d495 1
@


1.23
log
@BORDER CALC missed en rows within slices
@
text
@d4 7
a10 7
C  PATCH.F                 USED REG_SET            AUG 00 ARDEAN LEITH
C                          ADDED 3D to 'PA' & 'IN' FEB 01 ARDEAN LEITH
C                          0,0 BUG                 FEB 03 ARDEAN LEITH
C                          1,1 'PD' SPEEDUP        NOV 03 ARDEAN LEITH
C                          1,1 BACKGROUND BUG      JAN 07 ARDEAN LEITH
C                          BORDER CALC BUG         FEB 11 ARDEAN LEITH
C                         
a82 1

a230 6
C           COMPUTE AVERAGE
            AVST = RRRBOR / KKK

            IF (MYPID .LE. 0) WRITE (NOUT,3555) AVST,KKK
3555        FORMAT('  OUTER AVERAGE: ',1PG15.5,'  VOXELS:',I8)

d247 4
d252 2
a253 2
C           COMPUTE AVERAGE
            AVST = RRRBOR / KKK
a254 6
            IF (MYPID .LE. 0) WRITE (NOUT,3555) AVST,KKK
3556        FORMAT('  OUTER AVERAGE: ',1PG15.5,'  PIXELS:',I8)
         ENDIF
 
C        WRITE THE OUTER AVERAGE INTO OPTIONAL REGISTER  
         CALL REG_SET_NSEL(1,1, AVST,0.0,0.0,0.0,0.0,IRTFLG)
d258 1
a258 2
      ENDIF

d260 3
@


1.22
log
@GPL_2010
@
text
@d9 2
a10 1
C                          
d15 1
a15 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d41 15
a55 18
C        LUN2          SMALL INPUT IMAGE 
C        LUN1          BIG INPUT IMAGE (= OUTPUT IMAGE)
C        NSAM1,NROW1   DIMENSIONS OF BIG IMAGE 1
C        NSLIC1
C        NSAM2,NROW2   DIMENSIONS OF IMAGE 2 (NSAM2 < OR = NSAM1)
C        NSLIC2                              (NROW2 < OR = NROW1)
C        NSAMS,NROWS   TOP LEFT COORDINATES OF PATCH WITH RESPECT TO
C                      BIG IMAGE
C        IN            0   PATCH                              'PA'
C                      1   INSERT                             'IN'
C                      2   PAD: CREATE IMAGE ON LUN1 WITH VALUE AVS 
C                          AND IMAGE FROM LUN2 INSERTED.      'PD'
C                          IT WORKS FOR 3-D FILES. 
C		       3   SAME AS FOR 2 BUT WITH CIRCULAR    'PD'
C                          CONTINUATION
C        AVS           PADDING VALUE 
C        OPT           FCHAR(4:4)
C        FMIN2,FMAX2   MIN & MAX FOR SMALL INPUT FILE
d70 12
a81 14
      REAL, DIMENSION(NSAM1) :: BUF1
      REAL, DIMENSION(NSAM2) :: BUF2
      LOGICAL                :: USEBORDER

      CHARACTER   OPT
#ifdef USE_MPI
      include 'mpif.h'
      INTEGER MYPID, ICOMM, MPIERR
      ICOMM   = MPI_COMM_WORLD
      MPIERR = 0
      CALL MPI_COMM_RANK(ICOMM, MYPID, MPIERR)
#else 
      MYPID = -1
#endif
d196 10
a205 2
C           VOLUME
            DO  KKSLIC=1,2
d207 4
a210 7
                  CALL REDLIN(LUN2,BUF,NSAM2,(KKSLIC-1)*NROW2+KKROW)
                  CALL REDLIN(LUN2,BUF(NSAM2+1),NSAM2,(NSLIC2-KKSLIC)*
     &                        NROW2+KKROW)
                  DO  KKSAM=1,2*NSAM2
                     RRRBOR = RRRBOR + BUF(KKSAM)                    
                     KKKCOU = KKKCOU + 1 
	          ENDDO
d213 16
a228 5
            DO  KKSLIC=3,NSLIC2-2
               DO  KKROW=1,NROW2
                  CALL REDLIN(LUN2,BUF,NSAM2,(KKSLIC-1)*NROW2+KKROW) 
                  RRRBOR = BUF(1)+BUF(2)+BUF(NSAM2-1)+BUF(NSAM2)+RRRBOR
                  KKKCOU = KKKCOU + 4
d231 7
d239 6
a244 3
C           IMAGE NOT A VOLUME
            DO  KKROW=1,2      
               CALL REDLIN(LUN2,BUF,NSAM2,KKROW)
d246 2
a247 4
               DO  KKSAM=1,2*NSAM2
                  RRRBOR = RRRBOR+BUF(KKSAM)
                  KKKCOU = KKKCOU + 1
	       ENDDO
d249 2
a250 1
            DO  KKROW=3,(NROW2-2) 
d252 1
a252 2
               RRRBOR = RRRBOR+BUF(1)+BUF(2)+BUF(NSAM2)+BUF(NSAM2-1)
               KKKCOU = KKKCOU + 4                      
a253 2
          ENDIF
          AVST = RRRBOR / KKKCOU
d255 2
a256 3
C         JUST TO KNOW THE OUTER AVERAGE
          IF (MYPID .LE. 0) WRITE (NOUT,3555) AVST
3555      FORMAT('  OUTER AVERAGE: ',1PG15.5)
d258 5
a262 1
C        WRITE INTO REGISTER THE OUTER AVERAGE 
d264 2
a265 1
      ELSE 
@


1.21
log
@row/col promp wrong,  1,1 pad background wrong
@
text
@a10 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2007  Health Research Inc.                      *
d12 5
a16 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d18 1
a18 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d23 1
a23 1
C=* This program is distributed in the hope that it will be useful,    *
d25 1
a25 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a26 1
C=*                                                                    *
d28 1
a28 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.20
log
@sync write to stdout for MPI
@
text
@d8 2
a9 1
C
d12 1
a12 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d258 1
a258 1
          IF (NROW2 .LT. NROW1) BUF(NSAM2+1:NSAM1) = AVST
@


1.19
log
@GPL License fixed
@
text
@d80 10
d241 1
a241 1
          WRITE (NOUT,3555) AVST
@


1.18
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a9 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d13 1
a13 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a32 6

C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.17
log
@bug in border pad if upper left corner of img
@
text
@d2 1
d12 24
@


1.16
log
@speed up for upper-left corner (1,1) special case
@
text
@d41 1
a41 1
C        AVS           OUTSIDE VALUE, 
d65 1
a65 1
      IF (IN .EQ. 3) GOTO 90
d67 1
a158 2


d164 60
d229 2
a230 2
C         SET PAD TO AVS
          IF (NROW2 .LT. NROW1) BUF(NSAM2+1:NSAM1) = AVS
d243 1
a243 1
                BUF(1:NSAM1) = AVS
d254 1
a254 1
             BUF(1:NSAM1) = AVS
d263 1
a263 3


90    NSAMP  = NSAM1 + 1
d267 8
a274 22
C     IT APPEARS THAT AVS WAS ALSO USED TO SIGNAL (AVS .LT. 99999). 
C     BAD BUG IF ACTUAL AVS WAS > 99999 Nov 03 al
C     IF (AVS .LT. 99999) GOTO 118 
      IF (.NOT. USEBORDER) GOTO 118 


C     IF NOT CALCULATE THE MEAN OF THE 2 OUTSIDE VOXELS OF THE FILE 
C     (IT IS DONE THIS WAY TO AVOID PASSING A NEW VARIABLE IN A 
C      PROGRAM THAT IS CALLED SOMEWHERE ELSE ALSO).

      KKKCOU = 0
      RRRBOR = 0
      IF (NSLIC2 .NE. 1) THEN
         DO  KKSLIC=1,2
            DO  KKROW=1,NROW2
               CALL REDLIN (LUN2,BUF,NSAM2,(KKSLIC-1)*NROW2+KKROW)
               CALL REDLIN (LUN2,BUF(NSAM2+1),NSAM2,(NSLIC2-KKSLIC)*
     &                     NROW2+KKROW)
               DO  KKSAM=1,2*NSAM2
                  RRRBOR = RRRBOR+BUF(KKSAM)                    
                  KKKCOU = KKKCOU+1 
	       ENDDO
d276 2
a277 24
	 ENDDO
         DO  KKSLIC=3,NSLIC2-2
            DO  KKROW=1,NROW2
               CALL REDLIN (LUN2,BUF,NSAM2,(KKSLIC-1)*NROW2+KKROW) 
               RRRBOR = BUF(1)+BUF(2)+BUF(NSAM2-1)+BUF(NSAM2)+RRRBOR
               KKKCOU = KKKCOU+4
	    ENDDO
	 ENDDO
       ELSE
         DO  KKROW=1,2      
            CALL REDLIN (LUN2,BUF,NSAM2,KKROW)
            CALL REDLIN (LUN2,BUF(NSAM2+1),NSAM2,NROW2-(KKROW-1))
            DO  KKSAM=1,2*NSAM2
               RRRBOR = RRRBOR+BUF(KKSAM)
               KKKCOU = KKKCOU+1
	    ENDDO
	 ENDDO
         DO  KKROW=3,(NROW2-2) 
            CALL REDLIN (LUN2,BUF,NSAM2,KKROW)
            RRRBOR=RRRBOR+BUF(1)+BUF(2)+BUF(NSAM2)+BUF(NSAM2-1)
            KKKCOU=KKKCOU+4                      
	 ENDDO
       ENDIF
       AVS = (RRRBOR/KKKCOU)
a278 22
C      JUST TO KNOW THE OUTER AVERAGE
       WRITE (NOUT,3555) AVS
3555   FORMAT('  OUTER AVERAGE: ',F15.5)

C     WRITE INTO REGISTER THE OUTER AVERAGE 
      CALL REG_SET_NSEL(1,1, AVS,0.0,0.0,0.0,0.0,IRTFLG)
   
118   IF (IN .EQ. 3) GOTO 300


      IF (KKS.EQ.1) GOTO 125
      KKS1=KKS-1
      DO  JJ=1,NSAM1
          BUF(JJ)=AVS
      ENDDO
      DO  KK=1,KKS1
         DO  K=1,NROW1
            CALL WRTLIN (LUN1,BUF,NSAM1,K+(NROW1*(KK-1)))
	 ENDDO
      ENDDO
125   CONTINUE     

d283 7
a289 5
         IF (NS.EQ.1) GOTO 150
         NS1=NS-1
         DO  I=1,NS1
            DO  K=1,NSAM1
                BUF(K)=AVS
d291 1
a291 3
            CALL WRTLIN (LUN1,BUF,NSAM1,I+(NROW1*(KK-1)))
	 ENDDO
150      CONTINUE
d297 1
a297 1
              BUF(K)= AVS
d304 1
a304 1
            IF (KE.EQ.NSAM1) GOTO 179
d307 1
a307 1
               BUF(K) = AVS
d316 1
a316 1
               BUF(K) = AVS
d323 2
a324 1
C     FILL THE REST OF THE PLANES BETWEEN NSLICS AND NSLIC1 WITH AVS 
d326 4
a329 1
       IF (KKE.EQ.NSLIC1) GOTO 175
d331 6
a336 12
       KKE1=KKE+1
       DO  I=1,NSAM1
          BUF(I)=AVS
       ENDDO

      DO  KK=KKE1,NSLIC1
         DO  K=1,NROW1
            CALL WRTLIN (LUN1,BUF,NSAM1,K+(NROW1*(KK-1)))
	 ENDDO
      ENDDO

175   CONTINUE     
d340 3
d345 1
a345 1
C INDEX ASSIGNMENTS FOR CIRCULAR PADDING ---------------------------
d362 1
a362 1
300   NE2 = 0
d368 1
a368 1
      IF (NE1.LE.NROW1) GOTO 320
d399 1
a399 1
           BUF(K) = AVS
d408 1
a408 1
           BUF(K) = AVS
d416 1
a416 1
           BUF(K) = AVS
@


1.15
log
@0.0 bug
@
text
@d7 1
d31 1
a31 2
C                                            (NROW2 < OR = NROW1)
C        NSLIC2
d51 1
a51 1
     &                           FMIN2,FMAX2)
d60 1
d165 41
a208 1
      IF (AVS .LT. 99999) GOTO 118 
d210 6
d220 3
a222 3
      KKKCOU=0
      RRRBOR=0
      IF (NSLIC2.NE.1) THEN
d229 2
a230 2
                  RRRBOR=RRRBOR+BUF(KKSAM)                    
                  KKKCOU=KKKCOU+1 
d237 2
a238 2
               RRRBOR=BUF(1)+BUF(2)+BUF(NSAM2-1)+BUF(NSAM2)+RRRBOR
               KKKCOU=KKKCOU+4
d246 2
a247 2
               RRRBOR=RRRBOR+BUF(KKSAM)
               KKKCOU=KKKCOU+1
d256 1
a256 1
       AVS=(RRRBOR/KKKCOU)
d265 1
a265 1
118   IF (IN.EQ.3) GOTO 300
d280 1
a280 1
C     THE PLANES BETWEEN NSLICS AND NSLICS WILL BE REALLY PADED
d432 2
@


1.14
log
@OUTPUT FORMATTING
@
text
@d6 2
a7 1
C                             
d10 1
a10 1
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
d70 1
a71 1
      IF (NS .LE. 0)     NS = 1
d75 1
a76 1
      IF (KS .LE. 0)     KS = 1
d80 1
a81 1
      IF (KKS .LE. 0)      KKS = 1
a215 1
C     IF (NSEL(1) .GT. 0) PARAM(NSEL(1)) = AVS 
@


1.13
log
@3d added
@
text
@d212 1
a212 1
3555   FORMAT(' OUTER AVERAGE=',F15.5)
@


1.12
log
@cosmetic
@
text
@d4 11
a14 1
C  PATCH.F                            USED REG_SET AUG 00 ARDEAN LEITH
a15 10
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
C
d33 2
a34 2
C        IN            0   PATCH
C                      1   INSERT
d36 4
a39 3
C                          AND IMAGE FROM LUN2 INSERTED.
C                          IT WORKS FOR 3-D FILES.
C		       3   SAME AS FOR 2 BUT WITH CIRCULAR CONTINUATION
d48 2
a49 1
     &                           NSAMS,NROWS,NSLICS,IN,AVS,OPT,
d57 3
d62 4
a65 3
      NROW2H = NROW2/2
      NSAM2H = NSAM2/2
      NSAMP  = NSAM1+1
d67 1
d69 1
a69 5
      NE     = NS + NROW2-1

C     SKIP DIRECTLY TO CIRCULAR PADDING IF DESIRED
      IF (IN .EQ. 3) GOTO 90

d79 1
a79 1
      KKE = KKS + NSLIC2-1 
d84 16
a99 6
C        FOR PATCH OPERATION
         DO  I = NS,NE
            CALL REDLIN(LUN1,BUF,NSAM1,I)
            CALL REDLIN(LUN2,BUF(NSAMP),NSAM2,I-NS+1)
            DO K = KS,KE
               BUF(K) = BUF(K)+BUF(NSAMP+K-KS)
a100 1
            CALL WRTLIN(LUN1,BUF,NSAM1,I)
d105 1
a105 1
C       FOR INSERT OPERATION
d110 1
d117 35
a151 20
        DO I = NS,NE
           CALL REDLIN(LUN1,BUF,NSAM1,I)
           CALL REDLIN(LUN2,BUF(NSAMP),NSAM2,I-NS+1)
           IF (OPT .NE. 'S' .AND. OPT .NE. 'M') THEN
              DO K = KS,KE
                 BUF(K) = BUF(NSAMP+K-KS)
              ENDDO
           ELSE
  	      DO K = KS,KE
C 	         BUF(K) = FMIN + (BUF(NSAMP+K-KS) - FMIN2) * 
C    &                    (FMAX - FMIN) / (FMAX2 - FMIN2)
C                SCALE = (FMAX - FMIN) / (FMAX2 - FMIN2)
C 	         BUF(K) = FMIN + (BUF(NSAMP+K-KS) - FMIN2) * SCALE
C 	         BUF(K) = FMIN + BUF(NSAMP+K-KS) * SCALE - FMIN2 * SCALE
C                SCALE2 = FMIN - FMIN2 * SCALE
  	         BUF(K) = BUF(NSAMP+K-KS) * SCALE + SCALE2

              ENDDO
           ENDIF
           CALL WRTLIN(LUN1,BUF,NSAM1,I)
d154 2
a156 1
      ENDIF
d158 1
a158 1
C     FOR NON-CIRCULAR PADDING -------------------------------------
d163 3
a165 1
90    CONTINUE
@


1.11
log
@reg_set_nsel params changed
@
text
@d4 1
a4 1
C  PATCH.F                   USED REG_SET AUG 00 ARDEAN LEITH
d99 3
a101 3
	   FMINS=FMIN
	   FMAXS=FMAX
	   SCALE=2./(FMAXS-FMINS)
@


1.10
log
@used reg_set_nsel
@
text
@d4 1
a4 1
C  PATCH.F 
d185 1
a185 1
      CALL REG_SET_NSEL(1,AVS,0.0,0.0,0.0,0.0,IRTFLG)
@


1.9
log
@CMLIMIT.INC
@
text
@d4 1
a4 1
C  PATCH.FOR
d184 3
a186 1
      IF (NSEL(1) .GT. 0) PARAM(NSEL(1)) = AVS    
@


1.8
log
@option B for 3D fixed
@
text
@d51 1
a52 1
      PARAMETER      (NBUFSIZ = 17008)
@


1.7
log
@() wrong
@
text
@d147 1
a147 1
               CALL REDLIN (LUN2,BUF(NSAM2+1),NSAM2,(NSLIC2-(KKSLIC-1))*
@


1.6
log
@ns1 --> nsel(1)
@
text
@d184 1
a184 1
      IF (NSEL(1) .GT. 0) PARAM((NSEL(1))=AVS    
@


1.5
log
@fixed in s" operation bug
@
text
@d184 1
a184 1
      IF (NS1.NE.0) PARAM(NS1)=AVS    
@


1.4
log
@CNO_SAVE
@
text
@d16 1
a16 1
C   PATCH(LUN2,LUN1,NSAM2,NROW2,NSAM1,NROW1,NSAMS,NROWS,IN,AV,OPT)
d24 3
a26 3
C        LUN1          INPUT IMAGE
C        LUN2          SECOND INPUT IMAGE (= OUTPUT IMAGE)
C        NSAM1,NROW1   DIMENSIONS OF IMAGE 1
d29 1
a30 1
C                                            (NROW2 < OR = NROW1)
d32 1
a32 1
C        NSLIC2        BIG IMAGE
d35 1
a35 1
C                      2   PAD: CREATE IMAGE ON LUN1 WITH VALUE AV 
d38 4
a41 2
C			3  SAME AS FOR 2 BUT WITH CIRCULAR CONTINUATION
C        AV            OUTSIDE VALUE, 
d43 1
a43 1
C--*******************************************************************
d46 3
a48 4
     1                 NSAM1,NROW1,NSLIC1,NSAMS,NROWS,NSLICS,IN,AV,OPT)

      
CNO_SAVE 
d50 1
a50 3
      COMMON BUF(1)
      COMMON/MASTER/NSAMC,NROWC,IREC,NLABEL,IFORM,IMAMI,FMAX,FMIN,
     1  AVC,SIG,IHIST
d52 2
a53 2
      COMMON /UNITS/LUNC,NIN,NOUT
      COMMON /PARAM/PARAM(103),NS1
a54 1
      INTEGER*4   I4,KKKCOU
d96 2
a97 6
	   FMINS = AV-3*SIG
	   IF (FMINS.LT.FMIN) FMINS=FMIN
	   FMAXS = AV+3*SIG
	   IF (FMAXS.GT.FMAX) FMAXS=FMAX
	   SCALE = 2./(FMAXS-FMINS)

d113 8
a120 3
  	         BUF(K) = (BUF(NSAMP+K-KS)-FMINS)*SCALE
  	         IF (BUF(K).LT.0.)BUF(K) = 0.0
  	         IF (BUF(K).GT.2.)BUF(K) = 2.0
d131 2
a132 2
C     FIRST FILL WITH AV ALL THE PLANES BETWEEN 1 AND (NSLICS-1)
C     AV MAY BE THE AVERAGE IN THE OUTER TWO-PLANES OF THE VOLUME
d135 1
a135 1
      IF (AV .LT. 99999) GOTO 118 
d148 1
a148 1
     1                     NROW2+KKROW)
d177 1
a177 1
       AV=(RRRBOR/KKKCOU)
d180 1
a180 1
       WRITE (NOUT,3555) AV
d184 1
a184 1
      IF (NS1.NE.0) PARAM(NS1)=AV    
d191 1
a191 1
          BUF(JJ)=AV
d200 1
a200 1
C  THE PLANES BETWEEN NSLICS AND NSLICS WILL BE REALLY PADED
d208 1
a208 1
                BUF(K)=AV
d218 1
a218 1
              BUF(K)= AV
d221 1
a221 1
     1         (LUN2,BUF(NSAMP),NSAM2,(I-NS+1)+(NROW2*(KK-KKS)))
d228 1
a228 1
               BUF(K) = AV
d237 1
a237 1
               BUF(K) = AV
d244 1
a244 1
C     FILL THE REST OF THE PLANES BETWEEN NSLICS AND NSLIC1 WITH AV 
d250 1
a250 1
          BUF(I)=AV
d319 1
a319 1
           BUF(K) = AV
d328 1
a328 1
           BUF(K) = AV
d336 1
a336 1
           BUF(K) = AV
@


1.3
log
@*** empty log message ***
@
text
@d47 2
@


1.2
log
@ns or ks wrong for 0, lots of cosmetic
@
text
@d143 2
a144 2
         DO 500 KKSLIC=1,2
            DO 501 KKROW=1,NROW2
d148 1
a148 1
               DO 502 KKSAM=1,2*NSAM2
d151 5
a155 5
502            CONTINUE              
501         CONTINUE
500      CONTINUE
         DO 503 KKSLIC=3,NSLIC2-2
            DO 504 KKROW=1,NROW2
d159 2
a160 2
504         CONTINUE                       
503      CONTINUE
d162 1
a162 1
         DO 505 KKROW=1,2      
d165 1
a165 1
            DO 506 KKSAM=1,2*NSAM2
d168 3
a170 3
506         CONTINUE
505      CONTINUE
         DO 507 KKROW=3,(NROW2-2) 
d174 1
a174 1
507      CONTINUE
d189 1
a189 1
      DO 126 JJ=1,NSAM1
d191 3
a193 3
126   CONTINUE
      DO 127 KK=1,KKS1
         DO 128 K=1,NROW1
d195 2
a196 2
128   CONTINUE
127   CONTINUE
d205 2
a206 2
         DO 110 I=1,NS1
            DO 100 K=1,NSAM1
d208 1
a208 1
100         CONTINUE     
d210 1
a210 1
110      CONTINUE
d213 1
a213 1
         DO 180 I = NS,NE
d216 3
a218 2
            DO 155 K = 1,KS1
155           BUF(K)= AV
d221 1
a221 1
            DO 165 K = KS,KE
d223 1
a223 1
165         CONTINUE
d226 3
a228 2
            DO 170 K = KE1,NSAM1
170            BUF(K) = AV
d230 1
a230 1
180      CONTINUE 
d234 6
a239 4
         DO 200 I = IE1,NROW1
            DO 190 K = 1,NSAM1
190            BUF(K) = AV
200         CALL WRTLIN(LUN1,BUF,NSAM1,I+(NROW1*(KK-1)))
d248 3
a250 2
       DO 176 I=1,NSAM1
176       BUF(I)=AV
d252 5
a256 4
      DO 177 KK=KKE1,NSLIC1
         DO 178 K=1,NROW1
178         CALL WRTLIN (LUN1,BUF,NSAM1,K+(NROW1*(KK-1)))
177   CONTINUE
d313 7
a319 5
         DO 325 K = KS2,KE2
325      BUF(K) = BUF(K+NOFFS+1)

         DO 326 K = KE2+1,KS1-1
326      BUF(K) = AV
d321 3
a323 2
         DO 335 K = KS1,KE1
335      BUF(K) = BUF(K+NOFFS)
d326 3
a328 2
         DO 336 K = KE1+1,NSAM1
336      BUF(K) = AV
d333 6
a338 4
      DO 380 I = IFILLS,IFILLE
         DO 360 K = 1,NSAM1
360      BUF(K) = AV
380   CALL WRTLIN(LUN1,BUF,NSAM1,I)
@


1.1
log
@Initial revision
@
text
@d18 1
a18 2
C   PURPOSE:
C   PATCH:    PATCH, PAD OR INSERT IMAGE
d44 1
a44 1
     1 NSAM1,NROW1,NSLIC1,NSAMS,NROWS,NSLICS,IN,AV,OPT)
d55 1
a55 1
      CHARACTER   OPT,OPTS,OPTM
a56 2
      DATA OPTS/'S'/,OPTM/'M'/

d60 1
d64 6
a69 3
      IF (IN.EQ.3) GOTO 90
      IF (NS.LT.0) NS = 1
      IF (NE.GT.NROW1) NE = NROW1
d71 4
a74 3
      KE = KS+NSAM2-1
      IF (KS.LE.0) KS = 1
      IF (KE.GT.NSAM1) KE = NSAM1
d76 30
a105 21
C     MODIFIED FOR 3D PADDING
      KKE = KKS+NSLIC2-1  
C     JMC 11/11/86
      IF (KKS.LE.0) KKS = 1
      IF (KKE.GT.NSLIC1) KKE = NSLIC1

      GOTO (60,90),IN
      DO 50 I = NS,NE
        CALL REDLIN(LUN1,BUF,NSAM1,I)
        CALL REDLIN(LUN2,BUF(NSAMP),NSAM2,I-NS+1)
        DO 40 K = KS,KE
40      BUF(K) = BUF(K)+BUF(NSAMP+K-KS)
50    CALL WRTLIN(LUN1,BUF,NSAM1,I)
      RETURN

60	IF (OPT .EQ. OPTS) THEN 
	FMINS = AV-3*SIG
	IF (FMINS.LT.FMIN) FMINS=FMIN
	FMAXS = AV+3*SIG
	IF (FMAXS.GT.FMAX) FMAXS=FMAX
	SCALE = 2./(FMAXS-FMINS)
d108 17
a124 5
        IF (OPT .EQ. OPTM) THEN
        FMINS=FMIN
        FMAXS=FMAX
        SCALE=2./(FMAXS-FMINS)
        ENDIF
d126 1
a126 14
65    DO 80 I = NS,NE
        CALL REDLIN(LUN1,BUF,NSAM1,I)
        CALL REDLIN(LUN2,BUF(NSAMP),NSAM2,I-NS+1)
	IF (OPT .EQ. OPTS .OR. OPT .EQ. OPTM) GOTO 71
        DO 70 K = KS,KE
70      BUF(K) = BUF(NSAMP+K-KS)
	GOTO 80
71	DO 75 K = KS,KE
  	BUF(K) = (BUF(NSAMP+K-KS)-FMINS)*SCALE
	IF (BUF(K).LT.0.)BUF(K)=0.
	IF (BUF(K).GT.2.)BUF(K) =2.
75	CONTINUE
80    CALL WRTLIN(LUN1,BUF,NSAM1,I)
      RETURN
d128 1
d134 6
a139 7
      IF (AV.LT.99999) GOTO 118 
C                               IF NOT CALCULATE THE MEAN AROUND THE 2
C                               OUTSIDER VOXEL OF THE FILE 
C                               (It is done this way to avoid passing
C                               a new variable in a program that is
C                               called somewhere else also).
C
d177 1
d181 1
a181 1
C
d185 2
a186 2
C
C
d198 1
a198 1
C
d200 1
a200 1
C
d238 1
a238 1
C
d240 1
a240 1
C
d254 5
a258 2
C
C INDEX ASSIGNMENTS FOR CIRCULAR PADDING
d303 17
a319 16
      IRECIN = I-ISTART+IRECOF+1
C     WRITE(NOUT,9999)I,IRECIN
C9999  FORMAT(1X,2I8)
      CALL REDLIN(LUN2,BUF(NSAMP),NSAM2,IRECIN)
      IF (KS2.EQ.0) GOTO 330
       NOFFS = NSAMP+KE2-2*KS2
      DO 325 K = KS2,KE2
325   BUF(K) = BUF(K+NOFFS+1)
      DO 326 K = KE2+1,KS1-1
326   BUF(K) = AV
330   NOFFS = NSAMP-KS1
      DO 335 K = KS1,KE1
335   BUF(K) = BUF(K+NOFFS)
      IF (KE1.EQ.NSAM1) GOTO 340
      DO 336 K = KE1+1,NSAM1
336   BUF(K) = AV
d321 1
d324 2
a325 2
      DO 360 K = 1,NSAM1
360   BUF(K) = AV
d327 1
d329 1
a329 1
400   NPASS = 2
d331 1
a331 1
      IEND = NE1
d336 1
@
