head	1.27;
access;
symbols
	healthdept_2018:1.27
	pre_getangas:1.16
	GPL2010:1.15
	pre_GPL2010:1.14
	pre_var_equation:1.14
	pre_fftwrings:1.14
	pre_opfiles:1.14
	src:1.14
	best-code:1.14
	x-named-regs:1.14
	x:1.14
	v13-00:1.14
	pre_GPL:1.13
	prec_CA:1.13
	noindx:1.13
	Bproc:1.12
	oct21:1.4
	last77:1.3;
locks; strict;
comment	@c @;


1.27
date	2018.10.03.14.33.56;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2012.01.03.13.52.32;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2011.12.22.14.54.08;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2011.12.21.17.32.18;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2011.12.20.13.45.29;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2011.12.20.13.27.05;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2011.12.19.15.05.01;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2011.12.14.17.10.41;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2011.12.12.16.54.35;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2011.12.09.13.32.58;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2011.12.08.17.29.36;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2011.01.03.14.00.13;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.24.13.25.07;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.17.20.55.52;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.10.16.13.08.56;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.16.13.11.17;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.04.14.28.22;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.04.13.49.40;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	2000.02.24.16.21.13;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.12.18.43.35;	author bimal;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.06.16.57.49;	author bimal;	state Exp;
branches;
next	1.6;

1.6
date	99.12.07.15.15.10;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.11.10.23.09.08;	author yuchen;	state Exp;
branches;
next	1.4;

1.4
date	99.06.03.20.50.44;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	97.10.01.21.06.21;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.01.26.21.28.40;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.47.22;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.27
log
@email_health_dept
@
text
@C ++********************************************************************
C                                                                      *
C   BCKPJ.F    SPEEDED UP                       FEB 2000 ARDEAN LEITH  *
C              COMMON PAR REMOVED               DEC 2010 ARDEAN LEITH  *
C              FBS                              OCT 2011 G. KISHCHENKO *
C              FBS2                             DEC 2011 ARDEAN LEITH  *
C              RENAMED FROM: BCKCQ              JAN 2012 ARDEAN LEITH  *                                                                   *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2012  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  BCKPJ_LIN(CUBE,NNN,DM,B,N,IPCUBE,NN,LDP,LDPNM)                        *
C  BCKPJ_FBS(CUBE,NNN,DM,PROJ,XDER,YDER,XYDER,
C            NXLD,NX,IPCUBE,NN, LDP,LDPNM)
C                                                                      *
C  PURPOSE:    BACKPROJECTS B INTO CUBE.                               *
C                                                                      *
C  PARAMETERS: CUBE                                          SENT/RET. *
C              NNN      DIMENSIONS OF CUBE ARRAY             SENT      *
C              DM       TRANSFORM MATRIX                     SENT      *
C              B        IMAGE (AND IMAGE LOC +1 DIFFERENCE   SENT      *
C              N        DIMENSIONS OF B                      SENT      *
C              IPCUBE   SCAN LINE INDICES                    SENT      *
C              NN       2ND DIMENSION OF IPCUBE              SENT      *
C              LDP                                           SENT      *
C              LDPNM                                         SENT      *
C                                                                      *
C  IPCUBE:     1 - BEGINNING VOXEL ON THIS LINE                        *
C              2 - ENDING VOXEL ON THIS LINE                           *
C              3 - IX     BEGINNING VOXEL COORDINATES                  *
C              4 - IY                                                  *
C              5 - IZ                                                  *
C                                                                      *
C  CONTAINS:   BCKPJ_LIN   BILINEAR INTERP                            *
C              BCKPJ_FBS    FBS INTERP                                 *
C              BCKPJ        BILINEAR INTERP WITH COMMON PAR            *
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE BCKPJ_LIN(CUBE,NNN,DM,B,N,IPCUBE,NN, LDP,LDPNM)

        IMPLICIT NONE

        REAL    :: CUBE(NNN)
        INTEGER :: NNN
        REAL    :: DM(9), B(4,N,N)
        INTEGER :: N,NN
        INTEGER :: IPCUBE(5,NN)
        INTEGER :: LDP,LDPNM

        INTEGER :: I,J,JT,IQX,IQY
        REAL    :: XB,YB,XBB,YBB

#ifdef SP_MP
c$omp   parallel do private(i,j,xb,yb,xbb,ybb,iqx,iqy,jt)
        DO I=1,NN

           XB = ((IPCUBE(3,I)-LDP)*DM(1)  + (IPCUBE(4,I)-LDP) * DM(2) +
     &           (IPCUBE(5,I)-LDP)*DM(3)) + LDPNM
           YB = ((IPCUBE(3,I)-LDP)*DM(4)  + (IPCUBE(4,I)-LDP) * DM(5) +
     &           (IPCUBE(5,I)-LDP)*DM(6)) + LDPNM

           DO J=IPCUBE(1,I),IPCUBE(2,I)

	      JT   = J - IPCUBE(1,I)

	      XBB  = XB + JT * DM(1)
	      YBB  = YB + JT * DM(4)

              IQX  = IFIX(XBB)
              IQY  = IFIX(YBB)

              CUBE(J) = CUBE(J) + 
     &                       B(1,IQX,IQY) + (YBB-IQY) * B(2,IQX,IQY) + 
     &          (XBB-IQX) * (B(3,IQX,IQY) + (YBB-IQY) * B(4,IQX,IQY) )

           ENDDO
        ENDDO
#else
        DO I=1,NN
           XB = ((IPCUBE(3,I)-LDP)*DM(1)  +(IPCUBE(4,I)-LDP)*DM(2) +
     &           (IPCUBE(5,I)-LDP)*DM(3)) + LDPNM
           YB = ((IPCUBE(3,I)-LDP)*DM(4)  +(IPCUBE(4,I)-LDP)*DM(5) +
     &           (IPCUBE(5,I)-LDP)*DM(6)) + LDPNM

           DO J=IPCUBE(1,I),IPCUBE(2,I)

              IQX  = IFIX(XB)
              IQY  = IFIX(YB)

              CUBE(J) = CUBE(J) + 
     &                      B(1,IQX,IQY) + (YB-IQY) * B(2,IQX,IQY) + 
     &          (XB-IQX) * (B(3,IQX,IQY) + (YB-IQY) * B(4,IQX,IQY) )

              XB = XB + DM(1)
              YB = YB + DM(4)
           ENDDO
        ENDDO
#endif
        END

C       --------------------- BCKPJ_FBS -------------------------------

        SUBROUTINE BCKPJ_FBS(CUBE,NNN,DM,
     &                       PROJ,XDER,YDER,XYDER,
     &                       NXLD,NX,IPCUBE,NN, LDP,LDPNM)
C       2D FOURIER-BASED SPLINE INTERPOLATION

        IMPLICIT NONE

        REAL,    INTENT(OUT) :: CUBE(NNN)
        INTEGER              :: NNN
        REAL,    INTENT(IN)  :: DM(9)
        REAL,    INTENT(IN)  :: PROJ (NX  ,NX)
        REAL,    INTENT(IN)  :: XDER (NXLD,NX)
        REAL,    INTENT(IN)  :: YDER (NXLD,NX)
        REAL,    INTENT(IN)  :: XYDER(NXLD,NX)
        INTEGER              :: NXLD,NX,NN
        INTEGER, INTENT(IN)  :: IPCUBE(5,NN)
        INTEGER              :: LDP, LDPNM

        REAL    :: XB,YB
        INTEGER :: I, J

        REAL    :: fbs2

c$omp   parallel do private(i,j,xb,yb)
        DO I=1,NN
           XB = ((IPCUBE(3,I)-LDP)*DM(1)  + (IPCUBE(4,I)-LDP)*DM(2) +
     &          ( IPCUBE(5,I)-LDP)*DM(3)) + LDPNM
           YB = ((IPCUBE(3,I)-LDP)*DM(4)  + (IPCUBE(4,I)-LDP)*DM(5) +
     &          ( IPCUBE(5,I)-LDP)*DM(6)) + LDPNM

           DO J=IPCUBE(1,I),IPCUBE(2,I)

              CUBE(J) = CUBE(J) + 
     &                  FBS2(XB,YB, NXLD,NX,NX, PROJ,NX,
     &                       XDER,YDER,XYDER, .TRUE.)

              XB = XB + DM(1)
              YB = YB + DM(4)
           ENDDO
        ENDDO

        END



C       --------------------- NEVER -------------------------------


#ifdef NEVER
              XBB  = (J-IPCUBE(1,I)) * DM1 + XB
              YBB  = (J-IPCUBE(1,I)) * DM4 + YB
              IQX  = IFIX(XBB+FLOAT(LDPNM))
              IQY  = IFIX(YBB+FLOAT(LDPNM))
              DIPX = XBB+LDPNM-IQX
              DIPY = YBB+LDPNM-IQY
              IF (iqx .ne. iqx1 .or. iqy .ne. iqy1 .or.
     &            dipx1 .ne. dipx .or. dipy .ne. dipy1) then
                  write(6,*) 'simailar test failed'
                  write(6,*) iqx,iqy, ' != ',iqx1,iqy1
                  write(6,*) dipx,dipy, ' != ',dipx1,dipy1
                  stop 'simalar test failed'
              endif

#endif

#ifdef NEVER
              XBB  = (J-IPCUBE(1,I)) * DM1 + XB
              YBB  = (J-IPCUBE(1,I)) * DM4 + YB
              IQX  = IFIX(XBB+FLOAT(LDPNM))
              IQY  = IFIX(YBB+FLOAT(LDPNM))
              DIPX = XBB+LDPNM-IQX
              DIPY = YBB+LDPNM-IQY
              IF (iqx .ne. iqx1 .or. iqy .ne. iqy1 .or.
     &            dipx1 .ne. dipx .or. dipy .ne. dipy1) then
                  write(6,*) 'simailar test failed'
                  write(6,*) iqx,iqy, ' != ',iqx1,iqy1
                  write(6,*) dipx,dipy, ' != ',dipx1,dipy1
                  stop 'simalar test failed'
              endif


C             REFORMATTED FASTER VERSION :
              CUBE(J) = CUBE(J) +
     &               B(IQX,  IQY) + 
     &         DIPY*(B(IQX,  IQY+1) - B(IQX,  IQY)) + 
     &         DIPX*(B(IQX+1,IQY)   - B(IQX,  IQY)  +
     &         DIPY*(B(IQX+1,IQY+1) - B(IQX+1,IQY)  -
     &              (B(IQX,  IQY+1) - B(IQX,  IQY))  ))

C             FASTER VERSION :
              CUBE(J)=CUBE(J)
     &        +B(IQX,IQY)+DIPY*(B(IQX,IQY+1)-B(IQX,IQY))
     &        +DIPX*(B(IQX+1,IQY)-B(IQX,IQY)
     &        +DIPY*(B(IQX+1,IQY+1)-B(IQX+1,IQY)
     &        -B(IQX,IQY+1)+B(IQX,IQY)))

C             SLOWER VERSION :
C     &                 +(1.0-DIPX)*(1.0-DIPY)*B(MAP(IQX,IQY))
C     &                 +     DIPX *(1.0-DIPY)*B(MAP(IQX+1,IQY))
C     &                 +(1.0-DIPX)*     DIPY *B(MAP(IQX,IQY+1))
C     &                 +     DIPX *     DIPY *B(MAP(IQX+1,IQY+1))

#endif
@


1.26
log
@renamed from: bckcq_, removed bckpj,
@
text
@d14 1
a14 1
C=* Email: spider@@wadsworth.org                                        *
@


1.25
log
@cosmetic
@
text
@d3 5
a7 5
C   BCKCQ.F             SPEEDED UP              FEB 2000 ARDEAN LEITH  *
C                       COMMON PAR REMOVED      DEC 2010 ARDEAN LEITH  *
C                       FBS                     OCT 2011 G. KISHCHENKO *
C                       FBS2                    DEC 2011 ARDEAN LEITH  *
C                                                                      *
d12 1
a12 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d30 3
a32 1
C  BCKCQ_N(CUBE,NNN,DM,B,N,IPCUBE,NN,LDP,LDPNM)                        *
d52 3
a54 3
C  CONTAINS:   BCKCQ_N      BILINEAR INTERP                            *
C              BCKCQ_FBS    FBS INTERP                                 *
C              BCKCQ        BILINEAR INTERP WITH COMMON PAR            *
d59 1
a59 1
        SUBROUTINE BCKCQ_N(CUBE,NNN,DM,B,N,IPCUBE,NN, LDP,LDPNM)
d121 1
a121 1
C       --------------------- BCKCQ_FBS -------------------------------
d123 1
a123 1
        SUBROUTINE BCKCQ_FBS(CUBE,NNN,DM,
a164 67

C       --------------------- BCKCQ -------------------------------
C       STILL NEED PAR FOR SOME ROUTINE!!!

        SUBROUTINE BCKCQ(CUBE,NNN,DM,B,NX,IPCUBE,NN)

        IMPLICIT NONE

        REAL         :: CUBE(NNN)
        INTEGER      :: NNN
        REAL         :: DM(9),B(4,NX,NX)
        INTEGER      :: NX
        INTEGER      :: IPCUBE(5,NN)
        INTEGER      :: NN

        INTEGER      :: LDP,NM,LDPNM
        COMMON /PAR/  LDP,NM,LDPNM

        INTEGER      :: I,J,JT,IQX,IQY
        REAL         :: XB,YB,XBB,YBB

#ifdef SP_MP
c$omp   parallel do private(i,j,xb,yb,xbb,ybb,iqx,iqy,jt)
        DO   I=1,NN
           XB = ((IPCUBE(3,I)-LDP)*DM(1)+(IPCUBE(4,I)-LDP)*DM(2)+
     &          ( IPCUBE(5,I)-LDP)*DM(3)) + LDPNM
           YB = ((IPCUBE(3,I)-LDP)*DM(4)+(IPCUBE(4,I)-LDP)*DM(5)+
     &          ( IPCUBE(5,I)-LDP)*DM(6)) + LDPNM

           DO    J=IPCUBE(1,I),IPCUBE(2,I)
	      JT  = J-IPCUBE(1,I)

	      XBB = XB+JT*DM(1)
	      YBB = YB+JT*DM(4)

              IQX = IFIX(XBB)
              IQY = IFIX(YBB)

              CUBE(J) = CUBE(J) + 
     &                       B(1,IQX,IQY) + (YBB-IQY) * B(2,IQX,IQY) + 
     &          (XBB-IQX) * (B(3,IQX,IQY) + (YBB-IQY) * B(4,IQX,IQY) )

           ENDDO
        ENDDO
#else
        DO   I=1,NN
           XB = ((IPCUBE(3,I)-LDP)*DM(1)+(IPCUBE(4,I)-LDP)*DM(2)+
     &          ( IPCUBE(5,I)-LDP)*DM(3)) + LDPNM
           YB = ((IPCUBE(3,I)-LDP)*DM(4)+(IPCUBE(4,I)-LDP)*DM(5)+
     &          ( IPCUBE(5,I)-LDP)*DM(6)) + LDPNM

           DO    J=IPCUBE(1,I),IPCUBE(2,I)

              IQX  = IFIX(XB)
              IQY  = IFIX(YB)

              CUBE(J) = CUBE(J) + 
     &                      B(1,IQX,IQY) + (YB-IQY) * B(2,IQX,IQY) + 
     &          (XB-IQX) * (B(3,IQX,IQY) + (YB-IQY) * B(4,IQX,IQY) )

              XB = XB + DM(1)
              YB = YB + DM(4)
           ENDDO
        ENDDO
#endif
        END

@


1.24
log
@cosmetics and renamed vars
@
text
@d4 3
a6 3
C                       COMMON PAR REMOVED      DEC 2010 ARDEAN LEITH  *                                                                  *
C                       FBS                     OCT 2011 G. KISHCHENKO *                                                                  *
C                       FBS2                    DEC 2011 ARDEAN LEITH  *                                                                  *
d36 1
a36 1
C              DM       TRANSFORM MATRIX                     SENT      *                                                 *
@


1.23
log
@comments
@
text
@d30 1
a30 1
C  BCKCQ_N(CUBE,LTC,DM,B,N,IPCUBE,NN,LDP,LDPNM)                        *
d35 1
a35 1
C              LTC      DIMENSIONS OF CUBE ARRAY             SENT      *
d37 1
a37 1
C              B        IMAGE                                SENT      *
d57 1
a57 1
        SUBROUTINE BCKCQ_N(CUBE,LTC,DM,B,N,IPCUBE,NN, LDP,LDPNM)
d61 3
a63 3
        REAL    :: CUBE(LTC)
        INTEGER :: LTC
        REAL    :: DM(9),B(4,N,N)
d121 1
a121 1
        SUBROUTINE BCKCQ_FBS(CUBE,LTC,DM,
d128 2
a129 2
        REAL,    INTENT(OUT) :: CUBE(LTC)
        INTEGER              :: LTC
d167 1
a167 1
        SUBROUTINE BCKCQ(CUBE,LTC,DM,B,NX,IPCUBE,NN)
d171 2
a172 2
        REAL         :: CUBE(LTC)
        INTEGER      :: LTC
@


1.22
log
@comments
@
text
@d32 1
a32 1
C  PURPOSE:         BACKPROJECTS B INTO CUBE.                          *
d34 19
a52 9
C  PARAMETERS:      CUBE                                     SENT/RET. *
C                   LTC      DIMENSIONS OF CUBE ARRAY        SENT      *
C                   DM                                                 *
C                   B                                        SENT      *
C                   N        DIMENSIONS OF B                 SENT      *
C                   IPCUBE   SCAN LINE INDICES               SENT      *
C                   NN       2ND DIMENSION OF IPCUBE         SENT      *
C                   LDP                                      SENT      *
C                   LDPNM                                    SENT      *
a53 4
C  CONTAINS:  BCKCQ_N      BILINEAR INTERP                             *
C             BCKCQ_FBS    FBS INTERP                                  *
C             BCKCQ        BILINEAR INTERP WITH COMMON PAR             *
c                                                                      *
@


1.21
log
@fbs2 parameter added, cosmetic
@
text
@d32 1
a32 1
C  PURPOSE:         BACKPROJECTS B INTO CUBE                           *
d44 4
@


1.20
log
@XDER (NXLD,NX), cosmetic var. renaming
@
text
@d30 1
a30 1
C  BCKCQ_N(CUBE,LTC,DM,B,N,IPCUBE,NN,LDP,LDPNM)                                    *
d63 2
a64 1
        DO   I=1,NN
d71 6
a76 3
	      JT   = J-IPCUBE(1,I)
	      XBB  = XB+JT*DM(1)
	      YBB  = YB+JT*DM(4)
d87 5
a91 5
        DO   I=1,NN
           XB = ((IPCUBE(3,I)-LDP)*DM(1)+(IPCUBE(4,I)-LDP)*DM(2)+
     &          (IPCUBE(5,I)-LDP)*DM(3)) + LDPNM
           YB = ((IPCUBE(3,I)-LDP)*DM(4)+(IPCUBE(4,I)-LDP)*DM(5)+
     &          (IPCUBE(5,I)-LDP)*DM(6)) + LDPNM
d93 1
a93 1
           DO    J=IPCUBE(1,I),IPCUBE(2,I)
d112 2
a113 2
     &                      PROJ,XDER,YDER,XYDER,
     &                      NXLD,NX,IPCUBE,NN, LDP,LDPNM)
d136 1
a136 1
           XB = ((IPCUBE(3,I)-LDP)*DM(1)+(IPCUBE(4,I)-LDP)*DM(2) +
d138 1
a138 1
           YB = ((IPCUBE(3,I)-LDP)*DM(4)+(IPCUBE(4,I)-LDP)*DM(5) +
d144 1
a144 1
     &                  FBS2(XB,YB, NXLD,NX,NX, PROJ,
d159 10
a168 2
        DIMENSION     DM(9),CUBE(LTC),B(4,NX,NX)
        INTEGER       IPCUBE(5,NN)
d171 3
d184 1
d187 1
@


1.19
log
@fbs2 CHKBOUND
@
text
@d49 2
d58 3
d108 2
a109 2
     &                      PROJT0,PROJT2,PROJT3,PROJT4,
     &                      N,IPCUBE,NN, LDP,LDPNM)
d114 11
a124 10
        INTEGER :: N, NN, I, J
        INTEGER :: IPCUBE(5,NN)
        INTEGER :: LDP, LDPNM
        INTEGER :: LTC
        REAL    :: CUBE(LTC)
        REAL    :: DM(9)
        REAL    :: PROJT0(0:N-1, 0:N-1)
        REAL    :: PROJT2(0:N-1, 0:N-1)
        REAL    :: PROJT3(0:N-1, 0:N-1)
        REAL    :: PROJT4(0:N-1, 0:N-1)
d126 2
d130 1
d132 4
a135 4
           XB = ((IPCUBE(3,I)-LDP)*DM(1)+(IPCUBE(4,I)-LDP)*DM(2)+
     &          (IPCUBE(5,I)-LDP)*DM(3)) + LDPNM
           YB = ((IPCUBE(3,I)-LDP)*DM(4)+(IPCUBE(4,I)-LDP)*DM(5)+
     &          (IPCUBE(5,I)-LDP)*DM(6)) + LDPNM
d139 3
a141 3
           CUBE(J) =  CUBE(J) + 
     &                   FBS2(XB, YB, N, N, PROJT0,
     &                        PROJT2, PROJT3, PROJT4,.TRUE.)
d153 1
a153 1
        SUBROUTINE BCKCQ(CUBE,LTC,DM,B,N,IPCUBE,NN)
d155 1
a155 1
        DIMENSION     DM(9),CUBE(LTC),B(4,N,N)
d163 1
a163 1
     &          (IPCUBE(5,I)-LDP)*DM(3)) + LDPNM
d165 1
a165 1
     &          (IPCUBE(5,I)-LDP)*DM(6)) + LDPNM
d168 5
a172 5
	      JT=J-IPCUBE(1,I)
	      XBB=XB+JT*DM(1)
	      YBB=YB+JT*DM(4)
              IQX  = IFIX(XBB)
              IQY  = IFIX(YBB)
d175 1
a175 1
     &                      B(1,IQX,IQY) + (YBB-IQY) * B(2,IQX,IQY) + 
d183 1
a183 1
     &          (IPCUBE(5,I)-LDP)*DM(3)) + LDPNM
d185 1
a185 1
     &          (IPCUBE(5,I)-LDP)*DM(6)) + LDPNM
d202 2
@


1.18
log
@FBS_FAST --> FBS2
@
text
@d120 1
a120 1
        REAL    :: FBS2
d132 1
a132 1
     &                        PROJT2, PROJT3, PROJT4)
@


1.17
log
@gpk's changes
@
text
@d6 1
d120 1
a120 1
        REAL    :: FBS_FAST
d131 2
a132 2
     &                   FBS_FAST (XB, YB, N, N, PROJT0,
     &                           PROJT2, PROJT3, PROJT4)
@


1.16
log
@COMMON PAR REMOVED for BCKCQ_N
@
text
@a0 1

d3 3
a5 2
C   BCKCQ.F             SPEEDED UP               FEB 2000 ARDEAN LEITH *
C                       COMMON PAR REMOVED       DEC 2010 ARDEAN LEITH *                                                                  *
d11 1
a11 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d29 1
a29 1
C  BCKCQ(CUBE,LTC,DM,B,N,IPCUBE,NN)                                    *
d38 1
a38 1
C                   IPCUBE                                   SENT      *
d40 2
d48 4
a51 1
        REAL    :: DM(9),CUBE(LTC),B(4,N,N)
d53 1
d99 6
d106 1
d108 12
a119 14
#ifdef NEVER
              XBB  = (J-IPCUBE(1,I)) * DM1 + XB
              YBB  = (J-IPCUBE(1,I)) * DM4 + YB
              IQX  = IFIX(XBB+FLOAT(LDPNM))
              IQY  = IFIX(YBB+FLOAT(LDPNM))
              DIPX = XBB+LDPNM-IQX
              DIPY = YBB+LDPNM-IQY
              IF (iqx .ne. iqx1 .or. iqy .ne. iqy1 .or.
     &            dipx1 .ne. dipx .or. dipy .ne. dipy1) then
                  write(6,*) 'simailar test failed'
                  write(6,*) iqx,iqy, ' != ',iqx1,iqy1
                  write(6,*) dipx,dipy, ' != ',dipx1,dipy1
                  stop 'simalar test failed'
              endif
d121 5
d127 1
a127 7
C             REFORMATTED FASTER VERSION :
              CUBE(J) = CUBE(J) +
     &               B(IQX,  IQY) + 
     &         DIPY*(B(IQX,  IQY+1) - B(IQX,  IQY)) + 
     &         DIPX*(B(IQX+1,IQY)   - B(IQX,  IQY)  +
     &         DIPY*(B(IQX+1,IQY+1) - B(IQX+1,IQY)  -
     &              (B(IQX,  IQY+1) - B(IQX,  IQY))  ))
d129 3
a131 6
C             FASTER VERSION :
              CUBE(J)=CUBE(J)
     &        +B(IQX,IQY)+DIPY*(B(IQX,IQY+1)-B(IQX,IQY))
     &        +DIPX*(B(IQX+1,IQY)-B(IQX,IQY)
     &        +DIPY*(B(IQX+1,IQY+1)-B(IQX+1,IQY)
     &        -B(IQX,IQY+1)+B(IQX,IQY)))
d133 4
a136 5
C             SLOWER VERSION :
C     &                 +(1.0-DIPX)*(1.0-DIPY)*B(MAP(IQX,IQY))
C     &                 +     DIPX *(1.0-DIPY)*B(MAP(IQX+1,IQY))
C     &                 +(1.0-DIPX)*     DIPY *B(MAP(IQX,IQY+1))
C     &                 +     DIPX *     DIPY *B(MAP(IQX+1,IQY+1))
d138 1
a138 1
#endif
d140 2
d143 1
a143 1
        SUBROUTINE  BCKCQ(CUBE,LTC,DM,B,N,IPCUBE,NN)
d193 59
@


1.15
log
@GPL_2010
@
text
@d4 2
a5 1
C   BCKCQ.F              SPEEDED UP  FEB 2000 ARDEAN LEITH             *
a40 3
C IMAGE_PROCESSING_ROUTINE                                             *
C                                                                      *
C        0         2         3         4         5         6         7 *
d44 1
a44 1
        SUBROUTINE  BCKCQ(CUBE,LTC,DM,B,N,IPCUBE,NN)
d46 2
a47 3
        DIMENSION     DM(9),CUBE(LTC),B(4,N,N)
        INTEGER       IPCUBE(5,NN)
        COMMON /PAR/  LDP,NM,LDPNM
d52 9
a60 9
           XB = ((IPCUBE(3,I)-LDP)*DM(1)+(IPCUBE(4,I)-LDP)*DM(2)+
     &          (IPCUBE(5,I)-LDP)*DM(3)) + LDPNM
           YB = ((IPCUBE(3,I)-LDP)*DM(4)+(IPCUBE(4,I)-LDP)*DM(5)+
     &          (IPCUBE(5,I)-LDP)*DM(6)) + LDPNM

           DO    J=IPCUBE(1,I),IPCUBE(2,I)
	      JT=J-IPCUBE(1,I)
	      XBB=XB+JT*DM(1)
	      YBB=YB+JT*DM(4)
d65 1
a65 1
     &                      B(1,IQX,IQY) + (YBB-IQY) * B(2,IQX,IQY) + 
d133 51
@


1.14
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.13
log
@pawels omp changes
@
text
@d7 23
a29 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.12
log
@duplicate xbb removed from OMP private
@
text
@d40 1
a40 1
c$omp   parallel do private(i,j,xb,yb,xbb,iqx,iqy,jt)
d123 1
@


1.11
log
@|| fixed
@
text
@d40 1
a40 1
c$omp   parallel do private(i,j,xb,yb,xbb,xbb,iqx,iqy,jt)
@


1.10
log
@parallel region fixed
@
text
@d40 1
a40 1
c$omp   parallel do private(i,j,xb,yb,iqx,iqy,jt)
d49 4
a52 2
              IQX  = IFIX(XB+JT*DM(1))
              IQY  = IFIX(YB+JT*DM(4))
d55 2
a56 2
     &                      B(1,IQX,IQY) + (YB-IQY) * B(2,IQX,IQY) + 
     &          (XB-IQX) * (B(3,IQX,IQY) + (YB-IQY) * B(4,IQX,IQY) )
@


1.9
log
@tuning
@
text
@d39 2
a40 1
c$omp   parallel do private(i,j,xb,yb,iqx,iqy)
d48 3
d52 15
d78 1
@


1.8
log
@*** empty log message ***
@
text
@d4 1
a4 1
C   BCKCQ.F                                                            *
d15 1
d17 1
d19 7
a25 1
C  PURPOSE:                                                            *
a26 2
C  PARAMETERS:                                                         *
C
d28 1
a28 1
C
d35 2
a36 2
        DIMENSION  DM(9),CUBE(LTC),B(n,n)
        INTEGER  IPCUBE(5,NN)
d39 1
a39 1
c$omp parallel do private(i,j,xb,yb,xbb,ybb,iqx,iqy,dipx,dipy)
d41 5
a45 4
           XB=(IPCUBE(3,I)-LDP)*DM(1)+(IPCUBE(4,I)-LDP)*DM(2)+
     &     (IPCUBE(5,I)-LDP)*DM(3)
           YB=(IPCUBE(3,I)-LDP)*DM(4)+(IPCUBE(4,I)-LDP)*DM(5)+
     &     (IPCUBE(5,I)-LDP)*DM(6)
d47 7
a53 6
              XBB=(J-IPCUBE(1,I))*DM(1)+XB
              IQX=IFIX(XBB+FLOAT(LDPNM))
              YBB=(J-IPCUBE(1,I))*DM(4)+YB
              IQY=IFIX(YBB+FLOAT(LDPNM))
              DIPX=XBB+LDPNM-IQX
              DIPY=YBB+LDPNM-IQY
d55 2
a56 10
              CUBE(J)=CUBE(J)
c     1                 +(1.0-DIPX)*(1.0-DIPY)*B(MAP(IQX,IQY))
c     2                 +     DIPX *(1.0-DIPY)*B(MAP(IQX+1,IQY))
c     3                 +(1.0-DIPX)*     DIPY *B(MAP(IQX,IQY+1))
c     4                 +     DIPX *     DIPY *B(MAP(IQX+1,IQY+1))
C faster version :
     1        +B(IQX,IQY)+DIPY*(B(IQX,IQY+1)-B(IQX,IQY))
     2        +DIPX*(B(IQX+1,IQY)-B(IQX,IQY)
     3        +DIPY*(B(IQX+1,IQY+1)-B(IQX+1,IQY)
     4        -B(IQX,IQY+1)+B(IQX,IQY)))
a58 2
C       XB=XB+DM(1)
C1      YB=YB+DM(4)
d61 40
@


1.7
log
@header
@
text
@d4 1
a5 1
C                                                                      *
d62 1
@


1.6
log
@header
@
text
@d20 3
a22 1
C                                                                      *
d27 1
a27 1
	SUBROUTINE  BCKCQ(CUBE,LTC,DM,B,N,IPCUBE,NN)
d30 2
a31 2
	INTEGER  IPCUBE(5,NN)
	COMMON /PAR/  LDP,NM,LDPNM
d34 12
a45 12
	DO   I=1,NN
	XB=(IPCUBE(3,I)-LDP)*DM(1)+(IPCUBE(4,I)-LDP)*DM(2)+
     &	  (IPCUBE(5,I)-LDP)*DM(3)
	YB=(IPCUBE(3,I)-LDP)*DM(4)+(IPCUBE(4,I)-LDP)*DM(5)+
     &	  (IPCUBE(5,I)-LDP)*DM(6)
	DO    J=IPCUBE(1,I),IPCUBE(2,I)
	XBB=(J-IPCUBE(1,I))*DM(1)+XB
	IQX=IFIX(XBB+FLOAT(LDPNM))
	YBB=(J-IPCUBE(1,I))*DM(4)+YB
	IQY=IFIX(YBB+FLOAT(LDPNM))
	DIPX=XBB+LDPNM-IQX
	DIPY=YBB+LDPNM-IQY
d47 1
a47 1
	CUBE(J)=CUBE(J)
d53 9
a61 9
     1	   +B(IQX,IQY)+DIPY*(B(IQX,IQY+1)-B(IQX,IQY))
     2	   +DIPX*(B(IQX+1,IQY)-B(IQX,IQY)
     3		+DIPY*(B(IQX+1,IQY+1)-B(IQX+1,IQY)
     4		-B(IQX,IQY+1)+B(IQX,IQY)))
	ENDDO
	ENDDO
C	XB=XB+DM(1)
C1	YB=YB+DM(4)
	END
@


1.5
log
@a
@
text
@d1 24
d26 1
d44 1
a44 1
C
@


1.4
log
@OpenMP
@
text
@d5 1
a5 1
CNO_SAVE
@


1.3
log
@*** empty log message ***
@
text
@d6 1
a6 1
c$doacross local(i,j,xb,yb,xbb,ybb,iqx,iqy,dipx,dipy)
@


1.2
log
@nosave mp
@
text
@d7 1
a7 1
	DO  1  I=1,NN
d12 1
a12 1
	DO  1  J=IPCUBE(1,I),IPCUBE(2,I)
d30 2
a31 1
1	CONTINUE
@


1.1
log
@Initial revision
@
text
@d5 2
d13 6
a18 4
	IQX=IFIX(XB+FLOAT(LDPNM))
	IQY=IFIX(YB+FLOAT(LDPNM))
	DIPX=XB+LDPNM-IQX
	DIPY=YB+LDPNM-IQY
d30 3
a32 2
	XB=XB+DM(1)
1	YB=YB+DM(4)
@
