head	1.3;
access;
symbols
	pre_mrcs:1.3
	healthdept_2018:1.3
	pre_getangas:1.3
	pre_GPL2010:1.3
	pre_var_equation:1.3
	pre_fftwrings:1.3
	pre_opfiles:1.3
	src:1.3
	best-code:1.3
	x-named-regs:1.3
	x:1.3
	v13-00:1.3
	pre_GPL:1.3
	prec_CA:1.1;
locks; strict;
comment	@c @;


1.3
date	2004.09.30.16.45.32;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.03.13.55.34;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.04.13.08.24;	author leith;	state Exp;
branches;
next	;


desc
@mpi
@


1.3
log
@mpi
@
text
@
C     PURPOSE: PARTION SIZE N DATA EVENLY AMONG NPROC PROCESSORS

      SUBROUTINE SETPART(N, PSIZE, NBASE)

      IMPLICIT NONE
      INTEGER    N,NLOC, NREM, IPROC, IERR, NPROCS
      INTEGER    PSIZE(*), NBASE(*)
      INTEGER    MYPID, COMM

#ifdef  USE_MPI
      INCLUDE 'mpif.h'

      COMM = MPI_COMM_WORLD
      CALL MPI_COMM_SIZE(COMM, NPROCS, IERR)

      NLOC = N / NPROCS
      NREM = N - NLOC*NPROCS

      DO IPROC = 1, NPROCS
         PSIZE(IPROC) = NLOC
         IF (IPROC .LE. NREM) PSIZE(IPROC) = PSIZE(IPROC) + 1
      ENDDO

      NBASE(1) = 0

      DO IPROC = 2, NPROCS
         NBASE(IPROC) = NBASE(IPROC-1) + PSIZE(IPROC-1)
      ENDDO
#endif

      RETURN
      END
C-----------------------------------------------------------------------
#ifdef USE_MPI
C     INCLUDE BLAS HERE
C
      subroutine scopy(n,sx,incx,sy,incy)
c
c     copies a vector, x, to a vector, y.
c     uses unrolled loops for increments equal to 1.
c     jack dongarra, linpack, 3/11/78.
c
      real sx(1),sy(1)
      integer i,incx,incy,ix,iy,m,mp1,n
c
      if(n.le.0)return
      if(incx.eq.1.and.incy.eq.1)go to 20
c
c        code for unequal increments or equal increments
c          not equal to 1
c
      ix = 1
      iy = 1
      if(incx.lt.0)ix = (-n+1)*incx + 1
      if(incy.lt.0)iy = (-n+1)*incy + 1
      do 10 i = 1,n
        sy(iy) = sx(ix)
        ix = ix + incx
        iy = iy + incy
   10 continue
      return
c
c        code for both increments equal to 1
c
c
c        clean-up loop
c
   20 m = mod(n,7)
      if( m .eq. 0 ) go to 40
      do 30 i = 1,m
        sy(i) = sx(i)
   30 continue
      if( n .lt. 7 ) return
   40 mp1 = m + 1
      do 50 i = mp1,n,7
        sy(i) = sx(i)
        sy(i + 1) = sx(i + 1)
        sy(i + 2) = sx(i + 2)
        sy(i + 3) = sx(i + 3)
        sy(i + 4) = sx(i + 4)
        sy(i + 5) = sx(i + 5)
        sy(i + 6) = sx(i + 6)
   50 continue
      return
      end
#endif
@


1.2
log
@ifdef  added\
@
text
@d34 54
@


1.1
log
@Initial revision
@
text
@d1 33
a33 27
      subroutine setpart(n, psize, nbase)
      implicit none
      integer    n
c
c     --- partion size n data evenly amont nproc processors ---
c
      integer nloc, nrem, iproc, ierr, nprocs
      integer psize(*), nbase(*)
c
      include 'mpif.h'
      integer mypid, comm
c
      comm = MPI_COMM_WORLD
      call MPI_COMM_SIZE(comm, nprocs, ierr)
c
      nloc = n / nprocs
      nrem = n - nloc*nprocs
      do iproc = 1, nprocs
         psize(iproc) = nloc
         if (iproc .le. nrem) psize(iproc) = psize(iproc) + 1
      end do
      nbase(1) = 0
      do iproc = 2, nprocs
         nbase(iproc) = nbase(iproc-1) + psize(iproc-1)
      end do
      return
      end
@
