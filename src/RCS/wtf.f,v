head	1.22;
access;
symbols
	healthdept_2018:1.22
	pre_getangas:1.21
	GPL2010:1.21
	pre_GPL2010:1.20
	pre_var_equation:1.20
	pre_fftwrings:1.20
	pre_opfiles:1.20
	src:1.20
	best-code:1.19
	x-named-regs:1.19
	x:1.19
	v13-00:1.19
	pre_GPL:1.17
	prec_CA:1.15
	noindx:1.10
	Bproc:1.9
	oct21:1.7
	last77:1.6;
locks; strict;
comment	@c @;


1.22
date	2018.10.03.14.51.09;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2010.06.24.13.27.19;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2006.06.21.16.03.37;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.17.20.44.56;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.17.18.35.21;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2004.10.22.14.57.38;	author bimal;	state Exp;
branches;
next	1.16;

1.16
date	2004.10.22.14.52.38;	author bimal;	state Exp;
branches;
next	1.15;

1.15
date	2003.09.29.17.57.42;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.04.16.43.30;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2003.05.29.18.18.59;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.13.15.39.18;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.28.17.24.40;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2001.01.02.18.03.46;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.12.06.19.21.57;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.11.10.23.11.25;	author yuchen;	state Exp;
branches;
next	1.7;

1.7
date	99.06.03.20.51.01;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.10.15.17.10.23;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	97.07.24.18.27.13;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	97.02.07.19.12.45;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	97.02.07.18.52.57;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	97.01.24.18.44.28;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	95.02.16.20.05.12;	author pawel;	state Exp;
branches;
next	;


desc
@called in bp3d.
@


1.22
log
@email_health_dept
@
text
@
C ++********************************************************************
C                                                                      *
C  WTF.F              ADDED ISELECT PARAMETER              6/03/03 al                                                               *
C                     IF (ABS(Y) .LT.                      6/21/06 pp                                            *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  WTF(ISELECT,PROJ,W,NNNN,NSAM,NROW,SS,NANG,SNR,K)                            *
C                                                                      *
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS:   ISELECT     SELECTED PROJECTIONS LIST           (SENT)
C  PARAMETERS:   USESELECT   USE SELECTION LIST                  (SENT)
C                PROJ                                       (SENT/RET.)
C                W                                               (WORK)
C                NNNN                                            (SENT)
C                NSAM,NROW                                       (SENT)
C                SS                                              (SENT)
C                NANG                                            (SENT)
C                SNR                                             (SENT)
C                K         CURRENT PROJ/ANGLE NUMBER             (SENT)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE WTF(ISELECT,USESELECT,PROJ,W,NNNN,NSAM,NROW,SS,
     &                 NANG,SNR,K)

        REAL    :: SS(6,NANG),PROJ(NNNN,NROW),W(NNNN/2,NROW)
        INTEGER :: ISELECT(NANG)
        LOGICAL :: USESELECT

c$omp   parallel do private(i,j)
	DO J=1,NROW
	   DO I=1,NNNN/2
	      W(I,J) = 0.0
	   ENDDO
	ENDDO

	NR2 = NROW/2

	DO LT=1,NANG

           L = LT
           IF (USESELECT) L = ISELECT(LT)

           OX = SS(6,K)*SS(4,L)*(-SS(1,L)*SS(2,K)+ SS(1,K)*SS(2,L)) + 
     &      SS(5,K)*(-SS(3,L)*SS(4,K)+SS(3,K)*SS(4,L)*(SS(1,K)*SS(1,L) 
     &      + SS(2,K)*SS(2,L)))

           OY = SS(5,K)*SS(4,L)*(-SS(1,L)*SS(2,K)+ SS(1,K)*SS(2,L)) - 
     &       SS(6,K)*(-SS(3,L)*SS(4,K)+SS(3,K)*SS(4,L)*(SS(1,K)*SS(1,L) 
     &      + SS(2,K)*SS(2,L)))

	   IF (OX .NE. 0.0 .OR. OY.NE.0.0) THEN
C             THIS TEST MORE OFTEN TRUE SO PUT IT FIRST FOR SPEED
c$omp         parallel do private(i,j,jy,y,qt)
              DO J=1,NROW
                 JY = (J-1)
                 IF (JY .GT. NR2) JY=JY-NROW
                 DO I=1,NNNN/2
                    Y = OX * (I-1) + OY * JY

C                   CAN NEGLECT SMALL QT's 
c                   IF (Y .LT. 2.3) THEN EXP(-4*Y*Y) = 6.8e-10
c                   IF (Y .LT. 1.8) THEN EXP(-4*Y*Y) = 2.4e-6
c                   IF (Y .LT. 1.7) THEN EXP(-4*Y*Y) = 9.5e-6
c                   IF (Y .LT. 1.6) THEN EXP(-4*Y*Y) = 3.7e-5
c                   IF (Y .LT. 1.5) THEN EXP(-4*Y*Y) = 1.0e-4

                    IF (ABS(Y) .LT. 1.6) THEN
C                      SYSTEM FAULTS ON VERY SMALL QT's ON ALTIX
                       QT     = EXP(-4*Y*Y)
                       W(I,J) = W(I,J) + QT
                    ENDIF
                 ENDDO
	      ENDDO
	   ELSE
c$omp         parallel do private(i,j)
	      DO J=1,NROW
	         DO I=1,NNNN/2
                    W(I,J) = W(I,J) + 1.0
                 ENDDO
              ENDDO
	   ENDIF
	ENDDO

  	INV = +1
	CALL FMRS_2(PROJ,NSAM,NROW,INV)
        IF (INV .EQ. 0)THEN
           CALL ERRT(38,'WTF',NE)
           RETURN
        ENDIF

	WNRM = W(1,1)
c$omp   parallel do private(i,j,kx,ww)
	DO  J=1,NROW
	   DO  I=1,NNNN,2
	      KX          = (I+1)/2
	      WW          = W(KX,J)/WNRM/((W(KX,J)/WNRM)**2+SNR)
	      PROJ(I,J)   = PROJ(I,J)*WW
	      PROJ(I+1,J) = PROJ(I+1,J)*WW
	   ENDDO
	ENDDO

	INV = -1
	CALL FMRS_2(PROJ,NSAM,NROW,INV)

	END
@


1.21
log
@GPL_2010
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.20
log
@IF (ABS(Y) .LT per pp's request
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.19
log
@GPL License fixed
@
text
@d4 2
a5 2
C  WTF.F              ADDED ISELECT PARAMETER              6/3/03 al                                                               *
C                                                                      *
d37 1
d95 2
a96 2
                    IF (Y .LT. 1.6) THEN
C                      SYSTEM FAULTS ON VERY SMALL QT's ON ALTRIX
@


1.18
log
@HRI GPL License used
@
text
@a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.17
log
@no change
@
text
@d8 24
@


1.16
log
@no change
@
text
@a1 1

@


1.15
log
@partition bug
@
text
@d2 1
@


1.14
log
@for partition
@
text
@d32 2
a33 1
        SUBROUTINE WTF(ISELECT,PROJ,W,NNNN,NSAM,NROW,SS,NANG,SNR,K)
d35 3
a37 2
        DIMENSION  SS(6,NANG),PROJ(NNNN,NROW),W(NNNN/2,NROW)
        DIMENSION  ISELECT(NANG)
d49 3
a51 1
           L = ISELECT(LT)
@


1.13
log
@neglect exp(-4*y*y) where y<1.6 now
@
text
@d4 1
a4 1
C  WTF.F                                                               *
d15 1
a15 1
C  WTF(PROJ,W,NNNN,NSAM,NROW,SS,NANG,SNR,K)                            *
d19 10
a28 2
C  PARAMETERS:                                                         *
C                                                                      *
d32 1
a32 1
        SUBROUTINE  WTF(PROJ,W,NNNN,NSAM,NROW,SS,NANG,SNR,K)
d35 1
d46 3
a48 1
	DO L=1,NANG
d93 1
a93 1
           CALL ERRT(38,'BMQ',NE)
d101 2
a102 2
	      KX = (I+1)/2
	      WW = W(KX,J)/WNRM/((W(KX,J)/WNRM)**2+SNR)
@


1.12
log
@bad OX test fixed
@
text
@d54 9
a62 1
                    IF (Y .LT. 2.3) THEN
@


1.11
log
@trap for large qt
@
text
@d46 1
a46 1
	   IF (OX .GT. 0.0 .OR. OY.GT.0.0) THEN
@


1.10
log
@cosmetic
@
text
@d46 2
a47 8
	   IF (OX.EQ.0.0 .AND. OY.EQ.0.0)  THEN
c$omp         parallel do private(i,j)
	      DO J=1,NROW
	         DO I=1,NNNN/2
                    W(I,J)=W(I,J)+1.0
                 ENDDO
              ENDDO
	   ELSE
d51 1
a51 1
                 IF (JY .GT. NR2)  JY=JY-NROW
d53 6
a58 3
                    Y      = OX*(I-1)+OY*JY
                    QT     = EXP(-4*Y*Y)
                    W(I,J) = W(I,J)+QT
d61 7
@


1.9
log
@header
@
text
@d4 1
a5 1
C                                                                      *
d15 1
a15 1
C                                                                      *
a20 1
C        0         2         3         4         5         6         7 *
d28 5
a32 4
c$omp parallel do private(i,j)
	DO    J=1,NROW
	DO    I=1,NNNN/2
	  W(I,J)=0.0
d34 31
d66 10
a75 21
C
	NR2=NROW/2
C
	DO    L=1,NANG
       OX =SS(6,K)*SS(4,L)*(-SS(1,L)*SS(2,K)+ SS(1,K)*SS(2,L)) + 
     1      SS(5,K)*(-SS(3,L)*SS(4,K)+SS(3,K)*SS(4,L)*(SS(1,K)*SS(1,L) 
     2      + SS(2,K)*SS(2,L)))

       OY = SS(5,K)*SS(4,L)*(-SS(1,L)*SS(2,K)+ SS(1,K)*SS(2,L)) - 
     1      SS(6,K)*(-SS(3,L)*SS(4,K)+SS(3,K)*SS(4,L)*(SS(1,K)*SS(1,L) 
     2      + SS(2,K)*SS(2,L)))
C
	IF(OX.EQ.0.0.AND.OY.EQ.0.0)  THEN
c$omp parallel do private(i,j)
	DO    J=1,NROW
	DO    I=1,NNNN/2
	  W(I,J)=W(I,J)+1.0
	ENDDO
	ENDDO
	ELSE
c$omp parallel do private(i,j,jy,y,qt)
d77 6
a82 6
	JY=(J-1)
        IF(JY.GT.NR2)  JY=JY-NROW
	DO  I=1,NNNN/2
	Y=OX*(I-1)+OY*JY
	QT=EXP(-4*Y*Y)
	W(I,J)=W(I,J)+QT
d84 4
a87 22
	ENDDO
c
	ENDIF
	ENDDO
77	INV=+1
	CALL   FMRS_2(PROJ,NSAM,NROW,INV)
          IF(INV.EQ.0)THEN
          CALL ERRT(38,'BMQ',NE)
          RETURN
	  ENDIF
	WNRM=W(1,1)
c$omp parallel do private(i,j,kx,ww)
	DO  J=1,NROW
	DO  I=1,NNNN,2
	KX=(I+1)/2
	WW=W(KX,J)/WNRM/((W(KX,J)/WNRM)**2+SNR)
	PROJ(I,J)=PROJ(I,J)*WW
	PROJ(I+1,J)=PROJ(I+1,J)*WW
	ENDDO
	ENDDO
	INV=-1
	CALL   FMRS_2(PROJ,NSAM,NROW,INV)
@


1.8
log
@a
@
text
@d1 24
d26 1
@


1.7
log
@OpenMP
@
text
@d3 1
a3 1
CNO_SAVE
@


1.6
log
@*** empty log message ***
@
text
@d4 1
a4 1
c$doacross local(i,j)
d23 1
a23 1
c$doacross local(i,j)
d30 1
a30 1
c$doacross local(i,j,jy,y,qt)
d50 1
a50 1
c$doacross local(i,j,kx,ww)
@


1.5
log
@call fmrs_2 - will use libfft
@
text
@d5 5
a9 3
	DO  1  J=1,NROW
	DO  1  I=1,NNNN/2
1	W(I,J)=0.0
d13 1
a13 1
	DO  5  L=1,NANG
d24 5
a28 3
	DO  34  J=1,NROW
	DO  34  I=1,NNNN/2
34	W(I,J)=W(I,J)+1.0
d31 1
a31 1
	DO 35 J=1,NROW
d34 1
a34 1
	DO 35 I=1,NNNN/2
d38 2
a39 1
35	CONTINUE
d42 1
a42 1
5	CONTINUE
d51 2
a52 2
	DO 36 J=1,NROW
	DO 36 I=1,NNNN,2
d56 3
a58 1
36	PROJ(I+1,J)=PROJ(I+1,J)*WW
@


1.4
log
@nosave
@
text
@d39 1
a39 1
	CALL   FMRS_2R(PROJ,NNNN,NSAM,NROW,INV)
d53 1
a53 1
	CALL   FMRS_2R(PROJ,NNNN,NSAM,NROW,INV)
@


1.3
log
@new version
@
text
@d3 1
@


1.2
log
@new version
@
text
@d1 2
a2 8
	SUBROUTINE  WTF(PROJ,W,NSAM,NROW,SS,NANG,SNR,K,WORK)
        DIMENSION  SS(6,NANG),PROJ(NSAM,NROW),W(NSAM,NROW),WORK(*)
	LOGICAL  IFS,IFR
CNO_SAVE
C
	IFS=MOD(NSAM,2).EQ.0
	IFR=MOD(NROW,2).EQ.0
C
d5 1
a5 1
	DO  1  I=1,NSAM
a7 1
	NS2=NSAM/2
d22 1
a22 1
	DO  34  I=1,NSAM
d25 1
a25 1
c$doacross local(i,j,j1,ix,iy,y,qt)
d27 4
a30 29
	J1=(J-1)
	DO 35 I=1,NSAM
	IF(I.LT.3)THEN
	IX=(I-1)*NS2
		IF(J.LT.3)THEN
		   IF(.NOT.IFS)  THEN
			IF(.NOT.IFR)  THEN
			IF(I.NE.1.AND.J.NE.1)  GOTO  35
			ELSE
			IF(I.EQ.2)  GOTO  35
			ENDIF
		   ELSE
			IF(.NOT.IFR)  THEN
			IF(J.EQ.2)  GOTO  35
			ENDIF			
		   ENDIF
		 IY=J1*NR2
		ELSE
		IF(MOD(J,2).EQ.0)  GOTO  35
		IY=J1/2
		ENDIF
	ELSE
	IF(MOD(I,2).EQ.0)  GOTO  35
	IX=(I-1)/2
	IY=J1
	IF(IY.GT.NR2)  IY=IY-NROW
	ENDIF
C
	Y=OX*IX+OY*IY
d37 6
a42 3
	INV=+1
	CALL  FMR_2(PROJ,NSAM,NROW,WORK,INV)
C
d44 7
a50 27
c$doacross local(j,i,kx,ky)
	DO 45 J=1,NROW
	DO 45 I=1,NSAM
	KX=I
	KY=J
	IF(I.LT.3)THEN
		IF(J.LT.3)THEN
		IF(.NOT.IFS)  THEN
			IF(.NOT.IFR)  THEN
			IF(I.NE.1.AND.J.NE.1)  KX=NSAM
			ELSE
			IF(I.EQ.2)  KX=NSAM
			ENDIF
		ELSE
			IF(.NOT.IFR)  THEN
			IF(J.EQ.2)  KY=NROW
			ENDIF			
		ENDIF
		ELSE
		IF(MOD(J,2).EQ.0)  KY=KY-1
		ENDIF
	ELSE
	IF(MOD(I,2).EQ.0)  KX=KX-1
	ENDIF
C
	PROJ(I,J)=PROJ(I,J)*W(KX,KY)/WNRM/((W(KX,KY)/WNRM)**2+SNR)
45	CONTINUE
d52 1
a52 1
	CALL  FMR_2(PROJ,NSAM,NROW,WORK,INV)
@


1.1
log
@Initial revision
@
text
@a16 46
#ifdef SP_MP
	DO 35 J=1,NROW
	J1=(J-1)
	DO 35 I=1,NSAM
	IF(I.LT.3)THEN
	IX=(I-1)*NS2
		IF(J.LT.3)THEN
		   IF(.NOT.IFS)  THEN
			IF(.NOT.IFR)  THEN
			IF(I.NE.1.AND.J.NE.1)  GOTO  35
			ELSE
			IF(I.EQ.2)  GOTO  35
			ENDIF
		   ELSE
			IF(.NOT.IFR)  THEN
			IF(J.EQ.2)  GOTO  35
			ENDIF			
		   ENDIF
		 IY=J1*NR2
		ELSE
		IF(MOD(J,2).EQ.0)  GOTO  35
		IY=J1/2
		ENDIF
	ELSE
	IF(MOD(I,2).EQ.0)  GOTO  35
	IX=(I-1)/2
	IY=J1
	IF(IY.GT.NR2)  IY=IY-NROW
	ENDIF
C
	QT=0.0
c$doacross local(l,ox,oy,y),share(ss),reduction(qt)
	DO  5  L=1,NANG
       OX =SS(6,K)*SS(4,L)*(-SS(1,L)*SS(2,K)+ SS(1,K)*SS(2,L)) + 
     1      SS(5,K)*(-SS(3,L)*SS(4,K)+SS(3,K)*SS(4,L)*(SS(1,K)*SS(1,L) 
     2      + SS(2,K)*SS(2,L)))

       OY = SS(5,K)*SS(4,L)*(-SS(1,L)*SS(2,K)+ SS(1,K)*SS(2,L)) - 
     1      SS(6,K)*(-SS(3,L)*SS(4,K)+SS(3,K)*SS(4,L)*(SS(1,K)*SS(1,L) 
     2      + SS(2,K)*SS(2,L)))
	Y=OX*IX+OY*IY
	QT=QT+EXP(-4*Y*Y)
5	CONTINUE	
	W(I,J)=QT
35	CONTINUE
#else
d27 1
d32 1
d63 2
a64 1
	W(I,J)=W(I,J)+EXP(-4*Y*Y)
a68 2

#endif
@
