head	1.17;
access;
symbols
	pre_getangas:1.9
	GPL2010:1.9
	pre_GPL2010:1.8
	pre_var_equation:1.8
	pre_fftwrings:1.7
	pre_opfiles:1.7
	src:1.7
	best-code:1.7
	x-named-regs:1.7
	x:1.7
	v13-00:1.7
	pre_GPL:1.5
	prec_CA:1.2;
locks; strict;
comment	@c @;


1.17
date	2015.12.14.18.12.41;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2014.01.12.19.02.06;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2012.01.26.15.39.35;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2011.12.16.13.42.33;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2011.12.14.19.59.50;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2011.12.12.20.02.51;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2011.11.08.15.44.53;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2011.06.17.16.19.47;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.24.13.27.18;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2008.05.19.12.02.53;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.17.20.47.43;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.17.18.38.07;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.08.17.53.55;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.07.21.41.15;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.30.16.37.34;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.17.16.20.32;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.17.14.37.28;	author leith;	state Exp;
branches;
next	;


desc
@@


1.17
log
@CONSECUTIVE OUTPUT NUMBERING available
@
text
@C++*********************************************************************
C                                                                      *
C  WRITPRO_N.F    SPEEDED UP                    FEB 2000 ARDEAN LEITH  *
C                 VERBOSE OUTPUT                NOV 2000 ARDEAN LEITH  *
C                 PUT ANGLES IN HEADER          JUN 2001 ARDEAN LEITH  *
C                 OPFILEC                       FEB 2003 ARDEAN LEITH  *
C                 PJ_RRINGS                     FEB 2005 ARDEAN LEITH  *
C                 APRINGS_NEW                   APR 2008 ARDEAN LEITH  *
C                 APRINGS_INIT_PLANS PARAMS     JUN 2011 ARDEAN LEITH  *
C                 WPRO_FBS                      DEC 2011 G. KISHCHENKO *
C                 CONSECUTIVE                   DEC 2015 ARDEAN LEITH  *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2015  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C WRITPRO_N(PROJ,LUNPROJ,NX,NY,NUMTH,BCKE,NNN,                         *
C         IPCUBE,NN,RI,ISELECT,NANG,MAXKEY,ANGBUF)                     *
C         LUNRINGS,MODE,MR,NR,ISKIP,LDPX,LDPY,LDPZ,IRTFLG              *
C                                                                      *
C PARAMETERS:                                                          *
C             PROJ        ARRAY OF PROJECTIONS                   RET   *
C             NUMTH       NUMBER OF OMP THREADS                  SENT  *
C             BCKE        VOLUME                                 SENT  *
C             RI          RADIUS                                 SENT  *
C                                                                      *
C PURPOSE: COMPUTES A PROJECTION OF A 3D VOLUME ACCORDING TO THE       *
C          THREE EULERIAN ANGLES CAN ALSO SAVE REFERENCE RINGS IN      *
C          POLAR FORM                                                  *
C                                                                      *
C IPCUBE: A RUN LENGTH LIST OF VOXELS ON EACH LINE IN THE              *
C         VOLUME  WHICH ARE WITHIN A SPECIFED RADIUS SPHERE IN VOL.    *
C                1 - BEGINNING VOXEL ON LINE                           *
C                2 - ENDING VOXEL ON LINE                              *
C                3 - IX FOR VOXEL                                      *
C                4 - IY FOR VOXEL                                      *
C                5 - IZ FOR VOXEL                                      *
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

         SUBROUTINE WRITPRO_N(PROJ,LUNPROJ, NX,NY,NZ, NUMTH,
     &                BCKE,NNN,IPCUBE,NN,RI,ISELECT,NANG,MAXKEY,ANGBUF,
     &                LUNRINGS,MODE,MR,NR,ISKIP,LDPX,LDPY,LDPZ,
     &                FBS_WANTED,WANT_CONSEQ,IRTFLG)

        USE TYPE_KINDS                                          

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        REAL                  :: PROJ(NX,NY,NUMTH)
        INTEGER               :: LUNPROJ, NX,NY,NZ, NUMTH
        REAL                  :: BCKE(NX,NY,NZ)
        INTEGER               :: NNN
        REAL                  :: IPCUBE(5,NN)
        REAL                  :: RI
        INTEGER               :: NN,NANG,MAXKEY
        INTEGER               :: ISELECT(MAXKEY)
        REAL                  :: ANGBUF(3,MAXKEY)
        INTEGER               :: LUNRINGS
        CHARACTER(LEN=*)      :: MODE
        INTEGER               :: MR,NR,ISKIP,LDPX,LDPY,LDPZ
        LOGICAL               :: FBS_WANTED,WANT_CONSEQ
        INTEGER               :: IRTFLG

        REAL                  :: BUFOUT(4)

        CHARACTER(LEN=MAXNAM) :: PROJNAM,PROJPAT,REFNAM
        LOGICAL               :: REFRINGS

        INTEGER, ALLOCATABLE  :: NUMR(:,:)
        REAL, ALLOCATABLE     :: WR(:)

        REAL, ALLOCATABLE     :: XYZ  (:,:,:)   ! BCKE --> XYZ
        REAL, ALLOCATABLE     :: X1   (:,:,:)
        REAL, ALLOCATABLE     :: Y1   (:,:,:)
        REAL, ALLOCATABLE     :: Z1   (:,:,:)
        REAL, ALLOCATABLE     :: XY2  (:,:,:)
        REAL, ALLOCATABLE     :: XZ2  (:,:,:)
        REAL, ALLOCATABLE     :: YZ2  (:,:,:)

        INTEGER, PARAMETER   :: NPLANS = 14
        INTEGER(KIND=I_8)    :: FFTW_PLANS(NPLANS)

        CALL SET_MPI(ICOMM,MYPID,MPIERR) ! SETS ICOMM AND MYPID

        REFRINGS = (LUNRINGS > 0) 
        IF (REFRINGS) THEN

C          FIND NUMBER OF REFERENCE-RINGS
           NRING = ((NR - MR) / ISKIP) + 1

C          FILL NUMR WITH RING ADDRESSES
           ALLOCATE(NUMR(3,NRING), WR(NRING),STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN
              CALL ERRT(46,'NUMR & WR',4*NRING)
              GOTO 9999
           ENDIF

C          NUMBR(1,*) IS RING NUMBER
           NRING = 0
           DO I=MR,NR,ISKIP
              NRING         = NRING + 1
              NUMR(1,NRING) = I
           ENDDO

C          CALCULATES DATA FOR NUMR & LCIRC
           CALL ALPRBS_Q(NUMR,NRING,LCIRC,MODE)

C          RINGWE RETURNS WR
           CALL RINGWE_NEW(WR,NUMR,NRING,NUMR(3,NRING))
           IF (MODE .EQ. 'H') WR = WR * 0.5

C          INITIALIZE FFTW3 PLANS FOR USE WITHIN OMP || SECTIONS
           CALL APRINGS_INIT_PLANS(NUMR,NRING,
     &                          FFTW_PLANS,NPLANS,0,0,IRTFLG)
         ENDIF

C        GET PROJPAT TEMPLATE ONLY (NOT ILIST)
         NMAX = 0
         CALL FILSEQP(PROJPAT,NLET,ILIST,NMAX,NIMA,
     &        'TEMPLATE FOR OUTPUT PROJECTIONS',IRTFLG)
         IF (IRTFLG .NE. 0)  GOTO 9999

         IF (REFRINGS)  THEN
C           OPEN REF RINGS FILE USING SPIDER FORMAT
            MAXIM = 0
            CALL OPFILEC(0,.TRUE.,REFNAM,LUNRINGS,'U',IFORM,
     &            LCIRC,NANG,1,MAXIM,'REFERENCE RINGS',.FALSE.,IRTFLG)
            IF (IRTFLG .NE. 0)  GOTO 9999
         ENDIF

         IF (VERBOSE .AND. MYPID <= 0) WRITE(NOUT,*) ' '

         IF (FBS_WANTED) THEN

            NXLD = NX + 2 - MOD(NX,2)  ! PAD FOR FFTW

C           CREATE SPACE FOR DERIVATIVES
            ALLOCATE (XYZ  (NXLD,NY,NZ),
     &                X1   (NXLD,NY,NZ),
     &                Y1   (NXLD,NY,NZ),
     &                Z1   (NXLD,NY,NZ),
     &                XY2  (NXLD,NY,NZ),
     &                XZ2  (NXLD,NY,NZ),
     &                YZ2  (NXLD,NY,NZ), STAT=IRTFLG)
            IF (IRTFLG .NE. 0) THEN             
               CALL ERRT(46,'WRITPRO_N; XYZ...',7*NXLD*NY*NZ)
               GOTO 9999                          
            ENDIF

C           COPY BCKE INTO XYZ AND PAD EACH ROW
            DO K=1,NZ
               DO J=1,NY
                  DO I=1,NX
                    XYZ(I,J,K) = BCKE(I,J,K)
                  ENDDO
               ENDDO
            ENDDO

C           CALCULATE DERIVATIVES USING 3D FFT
C           RETURNS: XYZ, X1, Y1, Z1, XY2, XZ2, YZ2
            CALL FBS3_PREP(XYZ, NXLD,NX,NY,NZ,
     &                     X1,Y1,Z1,XY2,XZ2,YZ2)

         ENDIF   ! END OF: IF (FBS_WANTED

         IFORM = 1
         NSL   = 1
         IANG  = 1
         DO WHILE (IANG <= NANG)

C           BREAK INTO NUMTH CHUNKS, CALCULATE PROJECTIONS
            NEEDED = MIN(IANG+NUMTH-1,NANG)

            IF (FBS_WANTED) THEN

c$omp          parallel do private(i,ifile)
               DO I=IANG,NEEDED
                  IFILE  = ISELECT(I)

                  CALL WPRO_FBS(PROJ(1,1,I-IANG+1),
     &               NXLD,NX,NY,NZ,  BCKE,
     &               X1,Y1,Z1,XY2,XZ2,YZ2,XYZ,
     &               IPCUBE,NN,
     &               ANGBUF(3,IFILE),ANGBUF(2,IFILE),ANGBUF(1,IFILE),
     &               RI, LDPX,LDPY,LDPZ)
               ENDDO
            ELSE
c$omp          parallel do private(i,ifile)
               DO I=IANG,NEEDED
                  IFILE  = ISELECT(I)

                  CALL WPRO_N(PROJ(1,1,I-IANG+1),
     &               NX,NY,NZ,BCKE,
     &               NNN,IPCUBE,NN,
     &               ANGBUF(3,IFILE),ANGBUF(2,IFILE),ANGBUF(1,IFILE),
     &               RI, LDPX,LDPY,LDPZ)
               ENDDO
            ENDIF

C           WRITE PROJECTIONS TO OUTPUT FILES
            DO I=IANG,NEEDED
               IFILE = ISELECT(I)
               IF (WANT_CONSEQ) THEN
                  IFOUT = I
               ELSE
                  IFOUT = IFILE
               ENDIF

C              CREATE OUTPUT FILENAME
               CALL FILGET(PROJPAT,PROJNAM,NLET,IFOUT,IRTFLG)

C              OPEN NEXT PROJECTION OUTPUT FILE
               MAXIM = 0
               CALL OPFILEC(0,.FALSE.,PROJNAM,LUNPROJ,'U',IFORM,
     &                      NX,NY,NSL,MAXIM,' ',.FALSE.,IRTFLG)

               CALL WRTVOL(LUNPROJ,NX,NY,1,1,
     &                     PROJ(1,1,I-IANG+1),IRTFLG)

               IF (VERBOSE .AND. MYPID <= 0) THEN
                  WRITE(NOUT,90) IFOUT,
     &               ANGBUF(1,IFILE),ANGBUF(2,IFILE),ANGBUF(3,IFILE)
90                FORMAT('  PROJECTION:',I6,
     &                   '  PSI:',F6.1,' THETA:',F6.1,' PHI:',F6.1)
               ENDIF

C              PUT ANGLES IN HEADER ALSO
               BUFOUT(1) = ANGBUF(1,IFILE)  !PSI
               BUFOUT(2) = ANGBUF(2,IFILE)
               BUFOUT(3) = ANGBUF(3,IFILE)
               BUFOUT(4) = 1.0
               CALL LUNSETVALS(LUNPROJ,IAPLOC+1,4,BUFOUT,IRTFLG)

               CLOSE(LUNPROJ)
            ENDDO

            IF (REFRINGS)  THEN
C              CALCULATE & WRITE REFERENCE RINGS 
               CALL PJ_RRINGS(NX,NY,
     &                        NRING,LCIRC,NUMR,MODE, 
     &                        NUMTH,LUNRINGS,WR,FFTW_PLANS,
     &                        PROJ,IANG,NEEDED,IRTFLG)
            ENDIF

            IANG = IANG + NUMTH
         ENDDO

9999     IF (REFRINGS) THEN
            IF (ALLOCATED(NUMR))  DEALLOCATE(NUMR)
            IF (ALLOCATED(WR))    DEALLOCATE(WR)
         ENDIF

         IF (ALLOCATED(X1))    DEALLOCATE(X1)
         IF (ALLOCATED(Y1))    DEALLOCATE(Y1)
         IF (ALLOCATED(Z1))    DEALLOCATE(Z1)
         IF (ALLOCATED(XY2))   DEALLOCATE(XY2)
         IF (ALLOCATED(XZ2))   DEALLOCATE(XZ2)
         IF (ALLOCATED(YZ2))   DEALLOCATE(YZ2)
         IF (ALLOCATED(XYZ))   DEALLOCATE(XYZ)

         END



C       ---------------------- PJ_RRINGS  --------------------------

        SUBROUTINE PJ_RRINGS(NX,NY,
     &                       NRING,LCIRC,NUMR, MODE, 
     &                       NUMTH,LUNRINGS,WR, FFTW_PLANS,
     &                       PROJ, IANG1,IANG2, IRTFLG)

        USE TYPE_KINDS                                          

        IMPLICIT NONE

        INTEGER               :: NX,NY,NRING,LCIRC
        INTEGER               :: NUMR(3,NRING)
        CHARACTER(LEN=1)      :: MODE
        INTEGER               :: NUMTH,LUNRINGS
        REAL                  :: WR(NRING) 
        INTEGER(KIND=I_8)     :: FFTW_PLANS(*) ! FFTW_PLANS STRUCTURE
        REAL                  :: PROJ(NX,NY,NUMTH)
        INTEGER               :: IANG1,IANG2,IRTFLG

C       AUTOMATIC ARRAYS
        REAL                  :: CIRCREF(LCIRC,NUMTH)

        INTEGER               :: IMI,IT
        REAL                  :: CNS2,CNR2

        IRTFLG = 0

C       CALCULATE CENTER FOR APRINGS
        CNS2 = NX / 2 + 1 
        CNR2 = NY / 2 + 1

c$omp   parallel do private(imi,it)
        DO IMI=IANG1,IANG2
           IT = IMI - IANG1 + 1

C          NORMALIZE IMAGE VALUES UNDER THE MASK OVER VARIANCE RANGE
C          INTERPOLATE TO POLAR COORDINATES, CREATE FOURIER OF: CIRCREF
C          WEIGHT CIRCREF USING WR
           CALL APRINGS_ONE_NEW(NX,NY, CNS2,CNR2,
     &                          PROJ(1,1,IT),.FALSE.,
     &                          MODE,NUMR,NRING,LCIRC,WR,FFTW_PLANS,
     &                          CIRCREF(1,IT),IRTFLG)
        ENDDO

C       SAVE CIRCREF IN FILE OPENED ON LUNRINGS
        DO IMI=IANG1,IANG2
           IT  = IMI - IANG1 + 1
           CALL WRTLIN(LUNRINGS,CIRCREF(1,IT),LCIRC,IMI)

c          write(6,*) 'oCIRC(1-100):',CIRCREF(1,1),CIRCREF(100,1)

        ENDDO

        END


#ifdef NEVER
C       I TRIED THIS BUT IT WAS A BIT SLOWER !!!!!!!!!!!--------------
C       -------------- PJ_RRINGSNEW-----------------------------------

        SUBROUTINE PJ_RRINGSNEW(NX,NY,
     &                       NRING,LCIRC,NUMR,MODE, 
     &                       NUMTH,LUNRINGS,WR,
     &                       PROJ,IANG1,IANG2,IRTFLG)

        INCLUDE 'CMBLOCK.INC' 
        INCLUDE 'CMLIMIT.INC' 

        CHARACTER(LEN=1)                    :: MODE

C       EXTERNAL ARRAYS
        INTEGER,DIMENSION(3,NRING)          :: NUMR
        REAL,DIMENSION(NX,NY,NUMTH)     :: PROJ
        REAL,DIMENSION(NRING)               :: WR

C       AUTOMATIC ARRAYS
        REAL,DIMENSION(LCIRC,NUMTH)         :: CIRCREF

        IRTFLG = 0

C       PREPARE CIRCULAR RINGS DATA FOR REFERENCE IMAGES
c$omp   parallel do private(IMI,IT)
        DO IMI=IANG1,IANG2
           IT = IMI - IANG1 + 1     !PROJ & CIRCREF INDEX
C          NORMALIZE, INTERPOLATE INTO POLAR COORDINATES, FFT, & WEIGHT
           CALL APRINGS_ONE(NX,NY,WR,
     &                      PROJ(1,1,IT),CIRCREF(1,IT),
     &                      MODE,NUMR,NRING,LCIRC, IRTFLG)
        ENDDO

C       SAVE CIRCREF IN FILE OPENED ON LUNRINGS
        DO IMI=IANG1,IANG2
           IT  = IMI - IANG1 + 1
           CALL WRTLIN(LUNRINGS,CIRCREF(1,IT),LCIRC,IMI)

           if (imi.eq.1) THEN
              write(6,*) 'n(1-100):',CIRCREF(1,1),CIRCREF(100,1),numth
           endif
        ENDDO
        END

#endif


@


1.16
log
@enter
@
text
@d11 1
d17 1
a17 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d63 1
a63 1
     &                FBS_WANTED,IRTFLG)
d82 1
a82 1
        LOGICAL               :: FBS_WANTED
d122 1
a122 1
              NRING = NRING + 1
d124 1
a124 1
	   ENDDO
d130 1
a130 1
	   CALL RINGWE_NEW(WR,NUMR,NRING,NUMR(3,NRING))
d141 1
a141 1
     &        'TEMPLATE FOR 2-D PROJECTION',IRTFLG)
d152 1
a152 1
         IF (VERBOSE .AND. MYPID .LE. 0) WRITE(NOUT,*) ' '
d156 1
a156 1
            NXLD   = NX + 2 - MOD(NX,2)  ! PAD FOR FFTW
d190 1
a190 1
         DO WHILE (IANG .LE. NANG)
d223 6
a228 1
               IFILE  = ISELECT(I)
d231 1
a231 1
               CALL FILGET(PROJPAT,PROJNAM,NLET,IFILE,IRTFLG)
d241 2
a242 2
               IF (VERBOSE .AND. MYPID .LE. 0) THEN
                  WRITE(NOUT,90) IFILE,
d303 1
a303 1
	REAL                  :: PROJ(NX,NY,NUMTH)
d319 1
a319 1
	DO IMI=IANG1,IANG2
d334 1
a334 1
	   CALL WRTLIN(LUNRINGS,CIRCREF(1,IT),LCIRC,IMI)
d340 1
a340 1
	END
d352 2
a353 2
	INCLUDE 'CMBLOCK.INC' 
	INCLUDE 'CMLIMIT.INC' 
d359 1
a359 1
	REAL,DIMENSION(NX,NY,NUMTH)     :: PROJ
d369 1
a369 1
	DO IMI=IANG1,IANG2
d372 1
a372 1
	   CALL APRINGS_ONE(NX,NY,WR,
d380 1
a380 1
	   CALL WRTLIN(LUNRINGS,CIRCREF(1,IT),LCIRC,IMI)
d386 1
a386 1
	END
@


1.15
log
@FBS_WANTED
@
text
@d140 1
a140 1
     &        'ENTER TEMPLATE FOR 2-D PROJECTION',IRTFLG)
@


1.14
log
@comments
@
text
@d61 2
a62 1
     &                LUNRINGS,MODE,MR,NR,ISKIP,LDPX,LDPY,LDPZ,IRTFLG)
d70 1
d72 1
d74 2
d78 1
d80 3
d92 1
a92 1
        REAL, ALLOCATABLE     :: XYZ  (:,:,:) ! BCKE --> XYZ
d153 1
a153 1
         IF (USE_FBS_INTERP) THEN
d166 1
a166 1
               CALL ERRT(46,'WPRO_FBS, XYZ...',7*NXLD*NY*NZ)
d184 1
a184 1
         ENDIF   ! END OF: IF (USE_FBS_INTERP
d194 1
a194 1
            IF (USE_FBS_INTERP) THEN
@


1.13
log
@rewrite for fbs omp support, renamed vars, cosmetic
@
text
@d51 1
a51 1
C                2 - LENGTH OF RUN                                     *
@


1.12
log
@added wpro_fbs.call
@
text
@d34 1
a34 1
C WRITPRO_N(PROJ,LUNPROJ,NSAM,NROW,NUMTH,BCKE,NNN,                     *
d39 4
a42 2
C                NUMTH       NUMBER OF OMP THREADS                SENT *
C                RI          RADIUS                               SENT *
d59 1
a59 1
         SUBROUTINE WRITPRO_N(PROJ,LUNPROJ,NSAM,NROW,NSLICE,NUMTH,
d63 1
a63 2
         INCLUDE 'CMBLOCK.INC'
         INCLUDE 'CMLIMIT.INC'
d65 28
a92 21
         INTEGER                  :: ISELECT(MAXKEY)
         REAL                     :: ANGBUF(3,MAXKEY)
         REAL                     :: PROJ(NSAM,NROW,NUMTH)
         REAL                     :: BCKE(NNN)
         REAL                     :: IPCUBE(5,NN)
         REAL                     :: BUFOUT(4)

         CHARACTER(LEN=*)         :: MODE
         CHARACTER(LEN=MAXNAM)    :: PROJNAM,PROJPAT,REFNAM
         LOGICAL                  :: REFRINGS

         INTEGER, ALLOCATABLE     :: NUMR(:,:)
         REAL, ALLOCATABLE        :: WR(:)


        INTEGER, PARAMETER        :: NPLANS = 14
#ifndef SP_32
        INTEGER *8                :: FFTW_PLANS(NPLANS)
#else
        INTEGER *4                :: FFTW_PLANS(NPLANS)
#endif
d96 1
a96 1
        REFRINGS = (LUNRINGS .GT. 0) 
d144 33
a178 1
 
d181 2
a184 1
C           BREAK INTO NUMTH CHUNKS, CALCULATE PROJECTIONS
d192 3
a194 2
     &               NSAM,NROW,NSLICE,BCKE,
     &               NNN,IPCUBE,NN,
d196 1
a196 1
     &               RI,LDPX,LDPY,LDPZ)
d204 1
a204 1
     &               NSAM,NROW,NSLICE,BCKE,
d207 1
a207 1
     &               RI,LDPX,LDPY,LDPZ)
d221 1
a221 1
     &                      NSAM,NROW,NSL,MAXIM,' ',.FALSE.,IRTFLG)
d223 1
a223 1
               CALL WRTVOL(LUNPROJ,NSAM,NROW,1,1,
d233 1
a233 1
C              PUT ANGLES IN HEADER
d245 1
a245 1
               CALL PJ_RRINGS(NSAM,NROW,
d259 8
a266 1
         RETURN
d273 17
a289 4
        SUBROUTINE PJ_RRINGS(NSAM,NROW,
     &                       NRING,LCIRC,NUMR,MODE, 
     &                       NUMTH,LUNRINGS,WR,FFTW_PLANS,
     &                       PROJ,IANG1,IANG2,IRTFLG)
d291 2
a292 6
        CHARACTER(LEN=1)                    :: MODE

C       EXTERNAL ARRAYS
        INTEGER,DIMENSION(3,NRING)          :: NUMR
	REAL,DIMENSION(NSAM,NROW,NUMTH)     :: PROJ
        REAL,DIMENSION(NRING)               :: WR
d294 2
a295 5
C       FFTW_PLANS CONTAINS POINTERS TO STRUCTURES 
        INTEGER*8, INTENT(IN)               :: FFTW_PLANS(*)

C       AUTOMATIC ARRAYS
        REAL,DIMENSION(LCIRC,NUMTH)         :: CIRCREF
d300 2
a301 2
        CNS2 = NSAM / 2 + 1 
        CNR2 = NROW / 2 + 1
d303 1
a303 1
c$omp   parallel do private(IMI,IT)
d310 1
a310 1
           CALL APRINGS_ONE_NEW(NSAM,NROW, CNS2,CNR2,
d332 1
a332 1
        SUBROUTINE PJ_RRINGSNEW(NSAM,NROW,
d344 1
a344 1
	REAL,DIMENSION(NSAM,NROW,NUMTH)     :: PROJ
d357 1
a357 1
	   CALL APRINGS_ONE(NSAM,NROW,WR,
@


1.11
log
@SET_MPI, LDPX,LDPY,LDPZ to wpro_n
@
text
@d2 11
a12 10
C
C  WRITPRO_N.F      SPEEDED UP                    FEB 2000 ARDEAN LEITH
C                   VERBOSE OUTPUT                NOV 2000 ARDEAN LEITH
C                   PUT ANGLES IN HEADER          JUN 2001 ARDEAN LEITH
C                   OPFILEC                       FEB 2003 ARDEAN LEITH
C                   PJ_RRINGS                     FEB 2005 ARDEAN LEITH
C                   APRINGS_NEW                   APR 2008 ARDEAN LEITH
C                   APRINGS_INIT_PLANS PARAMS     JUN 2011 ARDEAN LEITH
C
CC **********************************************************************
d33 13
a45 13
C
C WRITPRO_N(PROJ,LUNPROJ,NSAM,NROW,NUMTH,BCKE,NNN,
C         IPCUBE,NN,RI,ISELECT,NANG,MAXKEY,ANGBUF)
C         LUNRINGS,MODE,MR,NR,ISKIP,LDPX,LDPY,LDPZ,IRTFLG
C
C PARAMETERS:
C                NUMTH       NUMBER OF OMP THREADS                SENT
C                RI          RADIUS                               SENT
C
C PURPOSE: COMPUTES A PROJECTION OF A 3D VOLUME ACCORDING TO THE 
C          THREE EULERIAN ANGLES CAN ALSO SAVE REFERENCE RINGS IN 
C          POLAR FORM
C
d134 1
a134 3
         IF (VERBOSE .AND. MYPID .LE. 0) THEN
            WRITE(NOUT,*) ' '
         ENDIF
d144 1
a144 3
c$omp       parallel do private(i,ifile)
            DO I=IANG,NEEDED
               IFILE  = ISELECT(I)
d146 22
a167 5
               CALL WPRO_N(PROJ(1,1,I-IANG+1),NSAM,NROW,NSLICE,BCKE,
     &            NNN,IPCUBE,NN,
     &            ANGBUF(3,IFILE),ANGBUF(2,IFILE),ANGBUF(1,IFILE),
     &            RI,LDPX,LDPY,LDPZ)
            ENDDO
a274 2


@


1.10
log
@APRINGS_INIT_PLANS PARAMS
@
text
@d35 1
a35 1
C         LUNRINGS,MODE,MR,NR,ISKIP,IRTFLG
d45 8
d58 1
a58 1
     &                LUNRINGS,MODE,MR,NR,ISKIP,IRTFLG)
d63 10
a72 10
         INTEGER, DIMENSION(MAXKEY)           :: ISELECT
         REAL,    DIMENSION(3,MAXKEY)         :: ANGBUF
         REAL,    DIMENSION(NSAM,NROW,NUMTH)  :: PROJ
         REAL,    DIMENSION(NNN)              :: BCKE
         REAL,    DIMENSION(5,NN)             :: IPCUBE
         REAL,    DIMENSION(4)                :: BUFOUT

         CHARACTER(LEN=*)                     :: MODE
         CHARACTER(LEN=MAXNAM)                :: PROJNAM,PROJPAT,REFNAM
         LOGICAL                              :: REFRINGS
d74 2
a75 2
         INTEGER, ALLOCATABLE, DIMENSION(:,:) :: NUMR
         REAL, ALLOCATABLE, DIMENSION(:)      :: WR
d78 1
a78 1
        INTEGER, PARAMETER                    :: NPLANS = 14
d80 1
a80 1
        INTEGER *8                            :: FFTW_PLANS(NPLANS)
d82 1
a82 1
        INTEGER *4                            :: FFTW_PLANS(NPLANS)
d85 1
a85 7
#ifdef USE_MPI
        include 'mpif.h'
        ICOMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(ICOMM, MYPID, IERR)
#else    
        MYPID = -1 
#endif  
d121 1
a121 1
         CALL  FILSEQP(PROJPAT,NLET,ILIST,NMAX,NIMA,
d151 2
a152 1
     &            ANGBUF(3,IFILE),ANGBUF(2,IFILE),ANGBUF(1,IFILE),RI)
d178 1
a178 1
               BUFOUT(1) = ANGBUF(1,IFILE)
@


1.9
log
@GPL_2010
@
text
@d3 8
a10 7
C  WRITPRO_N.F              SPEEDED UP           FEB 2000 ARDEAN LEITH
C                           VERBOSE OUTPUT       NOV 2000 ARDEAN LEITH
C                           PUT ANGLES IN HEADER JUN 2001 ARDEAN LEITH
C                           OPFILEC              FEB 2003 ARDEAN LEITH
C                           PJ_RRINGS            FEB 2005 ARDEAN LEITH
C                           APRINGS_NEW          APR 2008 ARDEAN LEITH

d15 1
a15 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d114 1
a114 1
     &                          FFTW_PLANS,NPLANS,IRTFLG)
@


1.8
log
@FFTW3 plan changes
@
text
@a10 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d12 5
a16 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d18 1
a18 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d23 1
a23 1
C=* This program is distributed in the hope that it will be useful,    *
d25 1
a25 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a26 1
C=*                                                                    *
d28 1
a28 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.7
log
@GPL License fixed
@
text
@d8 1
d12 1
a12 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d73 7
d109 1
a109 1
           CALL ALPRBS(NUMR,NRING,LCIRC,MODE)
d112 1
a112 1
	   CALL RINGWE(WR,NUMR,NRING,NUMR(3,NRING))
d114 4
d191 1
a191 1
     &                        NUMTH,LUNRINGS,WR,
d212 1
a212 1
     &                       NUMTH,LUNRINGS,WR,
a214 3
	INCLUDE 'CMBLOCK.INC' 
	INCLUDE 'CMLIMIT.INC' 

d222 3
d230 3
a232 5
C       CALCULATE DIMENSIONS FOR NORMASS
        NSB = -NSAM/2
        NSE = -NSB-1+MOD(NSAM,2)
        NRB = -NROW/2
        NRE = -NRB-1+MOD(NROW,2)
d238 7
a244 13
C          NORMALIZE UNDER THE MASK
   	   CALL NORMASS(PROJ(1,1,IT),NSB,NSE,NRB,NRE,
     &                  NUMR,NUMR(1,NRING))

C          INTERPOLATE RECTANGULAR COORDINATES INTO POLAR COORDINATES 
	   CALL ALRQS(PROJ(1,1,IT),NSAM,NROW,NUMR,
     &                CIRCREF(1,IT), LCIRC,NRING,MODE)

C          FOURIER OF CIRCREF
	   CALL FRNGS(CIRCREF(1,IT),LCIRC,NUMR,NRING)

C          WEIGHTS CIRCREF USING WR
	   CALL APPLYWS(CIRCREF(1,IT),LCIRC,NUMR,WR,NRING,MAXRIN)
d252 1
a252 3
c          if (imi.eq.1) then
c             write(6,*) 'oCIRC(1-100):',CIRCREF(1,1),CIRCREF(100,1)
c          endif
d260 1
a260 1
C       I TRIED THIS BUT IT WAS A BIT SLOWER !!!!!!!!!!!
@


1.6
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a9 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d13 1
a13 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a32 6

C * COPYRIGHT (C)1985, 2005. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a48 1
C--************************************************************************
@


1.5
log
@removed Apmaster_1.f
@
text
@d1 1
d12 24
d56 1
@


1.4
log
@PJ 3Q RR supported
@
text
@a88 4

C          FIND DIVAS & NUMTH
	   CALL APMASTER_1(MODE,DIVAS,NR,NUMTH,NSAM,NROW,NDUM,NDUM,
     &                     TTDUM,0)
@


1.3
log
@mpi
@
text
@d3 2
a4 2
C  WRITPRO.F                SPEEDED UP     FEB 2000 ARDEAN LEITH
C                           VERBOSE OUTPUT NOV 2000 ARDEAN LEITH
d6 11
a16 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
C **************************************************************************
d18 1
a18 1
C WRITPRO_N(PROJ,INPAT,NSAM,NROW,NUMTH,BCKE,NNN,
d20 1
d27 2
a28 3
C          THREE EULERIAN ANGLES
C
C IMAGE_PROCESSING_ROUTINE
d33 3
a35 2
         SUBROUTINE WRITPRO_N(PROJ,INPAT,NSAM,NROW,NSLICE,NUMTH,
     &                BCKE,NNN,IPCUBE,NN,RI,ISELECT,NANG,MAXKEY,ANGBUF)
d40 13
a52 6
         INTEGER, DIMENSION(MAXKEY)          :: ISELECT
         REAL,    DIMENSION(3,MAXKEY)        :: ANGBUF
         REAL,    DIMENSION(NSAM,NROW,NUMTH) :: PROJ
         REAL,    DIMENSION(NNN)             :: BCKE
         REAL,    DIMENSION(5,NN)            :: IPCUBE
         REAL,    DIMENSION(4)               :: BUFOUT
a53 1
         CHARACTER(LEN=MAXNAM)   ::  FINP
a54 2
         CHARACTER*80    FINPAT,FINPIC,FINDOC
         COMMON /F_SPEC/ FINPAT,FINPIC,FINDOC
d56 38
a93 7
         INCLUDE 'mpif.h'
         INTEGER MYPID, COMM, MPIERR
         COMM = MPI_COMM_WORLD
         CALL MPI_COMM_RANK(COMM, MYPID, MPIERR)
#else
         MYPID = -1
#endif
d95 1
a95 3
         CALL FLUSHRESULTS

C        GET FINPAT TEMPLATE ONLY (NOT ILIST)
d97 1
a97 1
         CALL FILSEQP(FINPAT,NLET,ILIST,NMAX,NIMA,
d99 13
d119 2
d124 1
d128 1
a128 1
            END DO
a133 7
               IF (VERBOSE .AND. MYPID .LE. 0) THEN
                  WRITE(NOUT,333) IFILE,
     &               ANGBUF(1,IFILE),ANGBUF(2,IFILE),ANGBUF(3,IFILE)
333               FORMAT(' PROJECTION #',I7,
     &                '  PSI=',F6.1,' THETA=',F6.1,' PHI=',F6.1)
               ENDIF

d135 1
a135 1
               CALL FILGET(FINPAT,FINP,NLET,IFILE,IRTFLG)
d137 1
a137 1
C              OPEN FILE
d139 1
a139 1
               CALL OPFILEC(0,.FALSE.,FINP,INPAT,'U',IFORM,
d142 9
a150 3
               DO J=1,NROW
                  CALL WRTLIN(INPAT,PROJ(1,J,I-IANG+1),NSAM,J)
               ENDDO
d157 1
a157 1
               CALL LUNSETVALS(INPAT,IAPLOC+1,4,BUFOUT,IRTFLG)
d159 1
a159 1
               CLOSE(INPAT)
d162 8
d171 1
d173 4
a176 1
         ENDDO
d180 114
@


1.2
log
@aliasing
@
text
@d48 8
d82 1
a82 1
               IF (VERBOSE) THEN
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
C WRITPRO(PROJ,INPAT,NSAM,NROW,NUMTH,BCKE,NNN,
d31 2
a32 2
         SUBROUTINE WRITPRO(PROJ,INPAT,NSAM,NROW,NSLICE,NUMTH,BCKE,NNN,
     &                      IPCUBE,NN,RI,ISELECT,NANG,MAXKEY,ANGBUF)
a48 1
#ifdef SP_IBMSP3
a49 1
#endif
d53 1
a53 1
         CALL  FILSEQP(FINPAT,NLET,ILIST,NMAX,NIMA,
d65 1
a65 1
               CALL WPRO(PROJ(1,1,I-IANG+1),NSAM,NROW,NSLICE,BCKE,
@
