head	1.9;
access;
symbols
	pre_getangas:1.9
	GPL2010:1.9
	pre_GPL2010:1.8
	pre_var_equation:1.8
	pre_fftwrings:1.7
	pre_opfiles:1.7
	src:1.7
	best-code:1.7
	x-named-regs:1.7
	x:1.7
	v13-00:1.7
	pre_GPL:1.5
	prec_CA:1.4
	noindx:1.4
	Bproc:1.4
	oct21:1.3
	last77:1.3;
locks; strict;
comment	@c @;


1.9
date	2010.06.24.13.26.55;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.26.13.48.06;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.18.18.55.21;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.18.14.50.14;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.16.18.15.56;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.11.10.23.11.19;	author yuchen;	state Exp;
branches;
next	1.3;

1.3
date	99.02.05.14.10.20;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	97.10.15.14.29.00;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.46;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.9
log
@GPL_2010
@
text
@C **********************************************************************
C SHELK.F
C                                                             07.06.80 *        
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  PURPOSE:  SORT VECTOR X() IN ASCENDING ORDER                                  *        
C            WARNING: ORIGINAL VECTOR(X) GETS CLOBBERED UPON RETURN         
C            BUT THE ORIGINAL LOCATIONS ARE SAVED IN VECTOR KX()                 *        
C            REFERENCES:
C            (1) J.BOOTHROYD  SHELLSORT ALGORITHM.201 
C                COMM.ACM  VOL.6  (1963),NO.8,PP.445   
C            (2) D.A.SHELL  A HIGH-SPEED SORTING PROCEDURE         
C                COMM.ACM  VOL.2(1959),PP.30-32                                       *        
C                                                                    
C*---------------------------------------------------------------------*        

      SUBROUTINE SHELK(N, X, KX )
                                            
C     I DO NOT KNOW IF SAVE IS NEEDED FEB 99 al
      SAVE

      DIMENSION  X(N) , KX(N) 
                                                  
      DO   J = 1,N                                                          
         KX(J) = J                                                                 
      ENDDO

      I     = 1                                                                 
   20 I     = I + I                                                             
      IF (I .LE. N) GO TO  20                                          
      M     = I - 1                                                             
   30 M     = M / 2                                                             
      IF (M .EQ. 0) GO TO  70                                          
      K     = N - M  
                                                           
      DO 60 J = 1,K                                                          
         JM = J + M                                                             
   40    JM = JM - M                                                            
         IF (JM .LE. 0) GO TO  60                                          
         L = JM + M                                                            
         IF (X(L) .GE. X(JM)) GO TO  60                                          
         PIV   = X(JM)                                                             
         X(JM) = X(L)                                                              
         X(L)  = PIV                                                               
         KPIV  = KX(JM)                                                            
         KX(JM)= KX(L)                                                             
         KX(L) = KPIV                                                              
         GO TO  40 
                                         
   60   CONTINUE                                                                
        GO TO  30 
                                         
   70   RETURN                                                                  
        END   
@


1.8
log
@*** empty log message ***
@
text
@a4 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d6 5
a10 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d12 1
a12 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d17 1
a17 1
C=* This program is distributed in the hope that it will be useful,    *
d19 1
a19 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a20 1
C=*                                                                    *
d22 1
a22 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.7
log
@GPL
@
text
@d1 3
a3 1

d29 10
a38 10


C*---------------------------------------------------------------------*        
C  SORT VECTOR X() IN ASCENDING ORDER                                  *        
C  WARNING: ORIGININAL VECTOR(X) GETS CLOBBERED UPON RETURN            *        
C  BUT THE ORIGINAL LOCATIONS ARE SAVED IN VECTOR KX()                 *        
C  REFERENCES   (1) J.BOOTHROYD/SHELLSORT ALGORITHM.201/COMM.ACM/VOL.6 *        
C  (1963),NO.8,PP.445/  (2) D.A.SHELL/A HIGH-SPEED SORTING PROCEDURE/  *        
C  COMM.ACM/VOL.2(1959),PP.30-32/                                      *        
C==07.06.80                                                            *        
@


1.6
log
@GPL License added
@
text
@d1 76
@


1.5
log
@CA rewrite
@
text
@a0 50


C*---------------------------------------------------------------------*        
C  SORT VECTOR X() IN ASCENDING ORDER                                  *        
C  WARNING: ORIGININAL VECTOR(X) GETS CLOBBERED UPON RETURN            *        
C  BUT THE ORIGINAL LOCATIONS ARE SAVED IN VECTOR KX()                 *        
C  REFERENCES   (1) J.BOOTHROYD/SHELLSORT ALGORITHM.201/COMM.ACM/VOL.6 *        
C  (1963),NO.8,PP.445/  (2) D.A.SHELL/A HIGH-SPEED SORTING PROCEDURE/  *        
C  COMM.ACM/VOL.2(1959),PP.30-32/                                      *        
C==07.06.80                                                            *        
C*---------------------------------------------------------------------*        

      SUBROUTINE SHELK(N, X, KX )
                                            
C     I DO NOT KNOW IF SAVE IS NEEDED FEB 99 al
      SAVE

      DIMENSION  X(N) , KX(N) 
                                                  
      DO   J = 1,N                                                          
         KX(J) = J                                                                 
      ENDDO

      I     = 1                                                                 
   20 I     = I + I                                                             
      IF (I .LE. N) GO TO  20                                          
      M     = I - 1                                                             
   30 M     = M / 2                                                             
      IF (M .EQ. 0) GO TO  70                                          
      K     = N - M  
                                                           
      DO 60 J = 1,K                                                          
         JM = J + M                                                             
   40    JM = JM - M                                                            
         IF (JM .LE. 0) GO TO  60                                          
         L = JM + M                                                            
         IF (X(L) .GE. X(JM)) GO TO  60                                          
         PIV   = X(JM)                                                             
         X(JM) = X(L)                                                              
         X(L)  = PIV                                                               
         KPIV  = KX(JM)                                                            
         KX(JM)= KX(L)                                                             
         KX(L) = KPIV                                                              
         GO TO  40 
                                         
   60   CONTINUE                                                                
        GO TO  30 
                                         
   70   RETURN                                                                  
        END   
@


1.4
log
@a
@
text
@a2 14
C *NAME* = SHELK.FOR                   31-JAN-86      13:23:13                  
C----------------------------------=*=----------------------------------        
C           COPYRIGHT 1986 - JEAN-PIERRE BRETAUDIERE                            
C THE UNIVERSITY OF TEXAS HEALTH SCIENCE CENTER AT HOUSTON                      
C MEDICAL SCHOOL - DEPARTMENT OF PATHOLOGY AND LABORATORY MEDICINE              
C P.O. BOX 20708, HOUSTON, TX 77225.                                            
C DISCLAIMER: NO GUARANTEES OF PERFORMANCE ACCOMPANY THIS SOFTWARE,             
C NOR IS ANY RESPONSIBILITY ASSUMED ON THE PART OF THE AUTHOR                   
C OR THE INSTITUTION.  ALL THE SOFTWARE HAS BEEN TESTED EXTENSIVELY             
C AND EVERY EFFORT HAS BEEN MADE TO INSURE ITS RELIABILITY.                     
C THE FOLLOWING SOFTWARE MAY NOT BE COMMUNICATED TO A THIRD PARTY               
C UNDER ANY FORM WITHOUT WRITTEN PERMISSION OF THE AUTHOR.                      
C PLEASE REPORT ANY BUG(S) TO JPB AT (713) 792 52 00.                           
C OR THRU ARPANET AT  ......!rice!ots!ut-path!suprim                            
d13 1
a13 1
      SUBROUTINE  SHELK ( N, X, KX )
a14 2
 

d18 6
a23 4
      DIMENSION  X(N) , KX(N)                                                   
        DO   J = 1,N                                                          
      KX(J) = J                                                                 
   	ENDDO
d26 1
a26 1
        IF (I .LE. N)        GO TO  20                                          
d29 17
a45 15
        IF (M .EQ. 0)        GO TO  70                                          
      K     = N - M                                                             
        DO 60  J = 1,K                                                          
      JM    = J + M                                                             
   40 JM    = JM - M                                                            
        IF (JM .LE. 0)       GO TO  60                                          
      L     = JM + M                                                            
        IF (X(L) .GE. X(JM)) GO TO  60                                          
      PIV   = X(JM)                                                             
      X(JM) = X(L)                                                              
      X(L)  = PIV                                                               
      KPIV  = KX(JM)                                                            
      KX(JM)= KX(L)                                                             
      KX(L) = KPIV                                                              
                             GO TO  40                                          
d47 2
a48 1
                             GO TO  30                                          
d50 1
a50 1
        END                                                                     
@


1.3
log
@CNO_SAVE
@
text
@d29 1
a29 1
CNO_SAVE 
@


1.2
log
@*** empty log message ***
@
text
@d26 8
a33 1
      SUBROUTINE  SHELK ( N, X, KX )                                            
@


1.1
log
@Initial revision
@
text
@d28 1
a28 1
        DO 10  J = 1,N                                                          
d30 1
a30 1
   10   CONTINUE                                                                
@
