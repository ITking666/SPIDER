head	1.7;
access;
symbols
	pre_mrcs:1.7
	healthdept_2018:1.7
	pre_getangas:1.4
	pre_GPL2010:1.4
	pre_var_equation:1.4
	pre_fftwrings:1.4
	pre_opfiles:1.4
	src:1.4
	best-code:1.4
	x-named-regs:1.4
	x:1.4
	v13-00:1.4
	pre_GPL:1.4
	prec_CA:1.4
	noindx:1.4
	Bproc:1.4
	oct21:1.3
	last77:1.3;
locks; strict;
comment	@c @;


1.7
date	2015.02.05.18.34.21;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2015.01.15.17.08.54;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2015.01.15.17.06.38;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.11.10.23.09.35;	author yuchen;	state Exp;
branches;
next	1.3;

1.3
date	99.02.04.16.32.29;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	99.01.08.15.13.43;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	95.06.06.14.08.33;	author mladjadj;	state Exp;
branches;
next	;


desc
@removing the ISML call by bill TIVOL
@


1.7
log
@cosmetic rewrite
@
text
@
C++*********************************************************************
C
C LMDIF1(FCN,M,N,X,FVEC,TOL,INFO, IWA,WA,LWA)
C
C CALL TREE:   'SP' -->  DIFF1O --> LATTICE --> SOLVE
C                               --> WFTCIRC --> LMDIF1  --> LMDIF
C
C PURPOSE: MINIMIZE THE SUM OF THE SQUARES OF M NONLINEAR
C          FUNCTIONS IN N VARIABLES BY A MODIFICATION OF THE
C          LEVENBERG-MARQUARDT ALGORITHM. THIS IS DONE BY USING THE MORE
C          GENERAL LEAST-SQUARES SOLVER LMDIF. USER MUST PROVIDE A
C          SUBROUTINE WHICH CALCULATES THE FUNCTIONS. THE JACOBIAN IS
C          THEN CALCULATED BY A FORWARD-DIFFERENCE APPROXIMATION.
c
c     The subroutine statement is:
c
c       subroutine lmdif1(fcn,m,n,x,fvec,tol,info,iwa,wa,lwa)
c
c     Where:
c
c       fcn is the name of the user-supplied subroutine which
c         calculates the functions. fcn must be declared
c         in an external statement in the user calling
c         program, and should be written as follows.
c
c         subroutine       fcn(m,n,x,fvec,iflag)
c         integer          m,n,iflag
c         double precision x(n),fvec(m)
c         ----------
c         calculate the functions at x and
c         return this vector in fvec.
c         ----------
c         end
c
c         the value of iflag should not be changed by fcn unless
c         the user wants to terminate execution of lmdif1.
c         in this case set iflag to a negative integer.
c
c       m is a positive integer input variable set to the number
c         of functions.
c
c       n is a positive integer input variable set to the number
c         of variables. n must not exceed m.
c
c       x is an array of length n. on input x must contain
c         an initial estimate of the solution vector. on output x
c         contains the final estimate of the solution vector.
c
c       fvec is an output array of length m which contains
c         the functions evaluated at the output x.
c
c       tol is a nonnegative input variable. termination occurs
c         when the algorithm estimates either that the relative
c         error in the sum of squares is at most tol or that
c         the relative error between x and the solution is at
c         most tol.
c
c       info is an integer output variable. if the user has
c         terminated execution, info is set to the (negative)
c         value of iflag. see description of fcn. otherwise,
c         info is set as follows.
c
c         info = 0  improper input parameters.
c
c         info = 1  algorithm estimates that the relative error
c                   in the sum of squares is at most tol.
c
c         info = 2  algorithm estimates that the relative error
c                   between x and the solution is at most tol.
c
c         info = 3  conditions for info = 1 and info = 2 both hold.
c
c         info = 4  fvec is orthogonal to the columns of the
c                   jacobian to machine precision.
c
c         info = 5  number of calls to fcn has reached or
c                   exceeded 200*(n+1).
c
c         info = 6  tol is too small. no further reduction in
c                   the sum of squares is possible.
c
c         info = 7  tol is too small. no further improvement in
c                   the approximate solution x is possible.
c
c       iwa is an integer work array of length n.
c
c       wa  is a work array of length lwa.
c
c       lwa is a positive integer input variable not less than
c         m*n+5*n+m.
c
c     Subprograms called:
c
c       User-supplied ...... fcn
c
c       Minpack-supplied ... lmdif
c
c     Argonne National Laboratory. Minpack Project. March 1980.
c     Burton S. Garbow, Kenneth E. Hillstrom, Jorge J. More
c
C23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
C--*********************************************************************

      SUBROUTINE LMDIF1(FCN,M,N,X,FVEC,TOL,INFO,IWA,WA,LWA)

      IMPLICIT NONE

      INTEGER          :: M,N,INFO,LWA
      INTEGER          :: IWA(N)
      DOUBLE PRECISION :: TOL
      DOUBLE PRECISION :: X(N),FVEC(M),WA(LWA)

      EXTERNAL         :: FCN

      INTEGER          :: MAXFEV,MODE,MP5N,NFEV,NPRINT
      DOUBLE PRECISION :: EPSFCN,FACTOR,FTOL,GTOL,XTOL,ZERO
     
      DATA  FACTOR,ZERO /1.0D2, 0.0D0/

      INFO = 0

C     CHECK THE INPUT PARAMETERS FOR ERRORS.
      IF (N   <= 0 .OR. M < N .OR. TOL < ZERO .OR.
     $    LWA < (M*N + 5*N + M))  RETURN

      MAXFEV = 200 * (N + 1)
      FTOL   = TOL
      XTOL   = TOL
      GTOL   = ZERO
      EPSFCN = ZERO
      MODE   = 1
      NPRINT = 0
      MP5N   = M + 5 * N

      CALL LMDIF(FCN,M,N,X,FVEC,FTOL,XTOL,GTOL,MAXFEV,EPSFCN,WA(1),
     *           MODE,FACTOR,NPRINT,INFO,NFEV,WA(MP5N+1),M,IWA,
     *           WA(N+1),WA(2*N+1),WA(3*N+1),WA(4*N+1),WA(5*N+1))

      IF (INFO == 8) INFO = 4

      END


      
@


1.6
log
@*** empty log message ***
@
text
@d4 1
a4 1
C LMDIF.F   
d6 1
a6 3
C PURPOSE:      
C
C CALL TREE:   'SP' -->  DIFF1O --> LATTICE
d9 6
a14 19
CC23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
C--*********************************************************************

      subroutine lmdif1(fcn,m,n,x,fvec,tol,info,iwa,wa,lwa)
      integer m,n,info,lwa
      integer iwa(n)
      double precision tol
      double precision x(n),fvec(m),wa(lwa)
      external fcn
c     **********
c
c     subroutine lmdif1
c
c     the purpose of lmdif1 is to minimize the sum of the squares of
c     m nonlinear functions in n variables by a modification of the
c     levenberg-marquardt algorithm. this is done by using the more
c     general least-squares solver lmdif. the user must provide a
c     subroutine which calculates the functions. the jacobian is
c     then calculated by a forward-difference approximation.
d16 1
a16 1
c     the subroutine statement is
d20 1
a20 1
c     where
d27 2
a28 2
c         subroutine fcn(m,n,x,fvec,iflag)
c         integer m,n,iflag
a33 1
c         return
d88 1
a88 1
c       wa is a work array of length lwa.
d93 1
a93 1
c     subprograms called
d95 1
a95 1
c       user-supplied ...... fcn
d97 1
a97 1
c       minpack-supplied ... lmdif
d99 2
a100 2
c     argonne national laboratory. minpack project. march 1980.
c     burton s. garbow, kenneth e. hillstrom, jorge j. more
d102 44
a145 31
c     **********
      integer maxfev,mode,mp5n,nfev,nprint
      double precision epsfcn,factor,ftol,gtol,xtol,zero
      data factor,zero /1.0d2,0.0d0/
      info = 0
c
c     check the input parameters for errors.
c
      if (n .le. 0 .or. m .lt. n .or. tol .lt. zero
     $    .or. lwa .lt. (m*n + 5*n + m)) go to 10
c
c     call lmdif.
c
      maxfev = 200*(n + 1)
      ftol = tol
      xtol = tol
      gtol = zero
      epsfcn = zero
      mode = 1
      nprint = 0
      mp5n = m + 5*n
      call lmdif(fcn,m,n,x,fvec,ftol,xtol,gtol,maxfev,epsfcn,wa(1),
     *           mode,factor,nprint,info,nfev,wa(mp5n+1),m,iwa,
     *           wa(n+1),wa(2*n+1),wa(3*n+1),wa(4*n+1),wa(5*n+1))
      if (info .eq. 8) info = 4
   10 continue
      return
c
c     last card of subroutine lmdif1.
c
      end
@


1.5
log
@call tree
@
text
@d6 1
a6 1
C PURPOSE:       CALLED BY LMDIF THAT IS USED IN WFTCIRC
d10 1
a10 1

@


1.4
log
@a
@
text
@d8 4
a11 1
C23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
a12 2

 
@


1.3
log
@CNO_SAVE
@
text
@d11 1
a11 1
CNO_SAVE 
@


1.2
log
@header
@
text
@d11 2
@


1.1
log
@removing the ISML call by bill TIVOL
@
text
@d1 10
@
