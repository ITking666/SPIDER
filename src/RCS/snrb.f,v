head	1.9;
access;
symbols
	healthdept_2018:1.9
	pre_getangas:1.8
	pre_GPL2010:1.8
	pre_var_equation:1.6
	pre_fftwrings:1.6
	pre_opfiles:1.6
	src:1.6
	best-code:1.6
	x-named-regs:1.6
	x:1.6
	v13-00:1.6
	pre_GPL:1.5
	prec_CA:1.5
	noindx:1.5;
locks; strict;
comment	@c @;


1.9
date	2018.10.03.14.34.23;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2009.09.24.10.47.05;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2009.09.15.14.37.19;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.17.16.56.43;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.19.16.22.48;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2002.11.19.16.19.06;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.19.16.01.44;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.22.17.38.01;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.10.19.26.43;	author pawel;	state Exp;
branches;
next	;


desc
@@


1.9
log
@email_health_dept
@
text
@
C **********************************************************************
C *  SNRB.F
C=**********************************************************************
C=* Copyright (C)2002, L. Joyeux & P. A. Penczek                       *
C=* University of Texas - Houston Medical School                       *
C=* Email:  pawel.a.penczek@@uth.tmc.edu                                *
C=*                                                                    *
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
C=* Copyright 1985-2009  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C=**********************************************************************

      SUBROUTINE SNRB

      IMPLICIT   NONE

      INCLUDE 'CMBLOCK.INC' 
      INCLUDE 'CMLIMIT.INC' 
      INCLUDE 'F90ALLOC.INC'

      REAL, DIMENSION(:,:), POINTER :: PANG, FREQ
      CHARACTER (LEN=1)             :: ANS,NULL 
      CHARACTER (LEN=MAXNAM)        :: FILE

      INTEGER          MAXXT, MAXYT, IRTFLG, NA
      REAL             FP, FS
      LOGICAL          FITLOW
      
      MAXXT = 0
      MAXYT = 0
      CALL GETDOCDAT('FSC DOC',.TRUE.,FILE,
     &      77,.TRUE.,MAXXT,MAXYT,PANG,IRTFLG)

      ALLOCATE(FREQ(2,MAXYT))
      FREQ(1,:) = PANG(2,:)
      FREQ(2,:) = PANG(4,:)

      DEALLOCATE(PANG)
      
      NULL = CHAR(0)
      CALL RDPRMC(ANS,NA,.TRUE.,
     &       'LOW PASS / HIGH PASS (L/H)',NULL,IRTFLG)    
     
      FP = 0.1
      FS = 0.9
      FITLOW = (ANS .EQ. 'L') .OR. (ANS .EQ. 'L')
      CALL FITBUFFCT(FREQ, MAXYT, FP, FS, FITLOW)

      CALL REG_SET_NSEL(1,2,FP,FS,0.0, 0.0, 0.0, IRTFLG)

      DEALLOCATE(FREQ)
      RETURN
      END
      
CCCCCCCCCCCCCCCCCCCCCC
      
      SUBROUTINE FITBUFFCT(FREQ, NB, FP, FS, FITLOW)
      IMPLICIT   NONE
      
      INTEGER    NB
      REAL      FREQ(2,NB), FP, FS
      REAL      EPS,AA
      REAL      DELTA, MIN, BUT
      LOGICAL   FITLOW
      INTEGER  MINJ, MINI, I, J, K
      REAL      FPN, FSN
      REAL      BUTDIFF
      
      DELTA = 0.05

      MIN = BUTDIFF(FREQ, NB, FP, FS, FITLOW)

      DO K=1,20
         DO
            MINI = 0
            MINJ = 0
            DO I=-1,1
               DO J=-1,1
                  FPN = FP+DELTA*I
                  FSN = FS+DELTA*J
                  IF(FPN.LE.0 .OR. FSN.GE.1.0) GOTO 100
                  BUT = BUTDIFF(FREQ, NB, FPN, FSN , FITLOW)
                  IF(BUT<MIN) THEN
                     MINI = I
                     MINJ = J
                     MIN = BUT
                  END IF
100               CONTINUE
               END DO
            END DO
C            WRITE(NOUT,*) __FILE__, __LINE__, " MINI MINJ ", MINI, MINJ
            IF(MINI.EQ.0 .AND. MINJ.EQ.0) GOTO 200
            FP = FP + DELTA*MINI
            FS = FS + DELTA*MINJ
         END DO
200      DELTA = DELTA / SQRT(2.0)
C         WRITE(NOUT,*) __FILE__, __LINE__, " FP FS ", FP, FS
      END DO
      
      RETURN 
      END
      
CCCCCCCCCCCCCCCCCCCCCC
      
      FUNCTION BUTDIFF(FREQ, NB, FP, FS, FITLOW)
      IMPLICIT   NONE

      REAL BUTDIFF
      INTEGER    NB
      REAL      FREQ(2,NB), FP, FS, DIFF
      LOGICAL   FITLOW

       REAL   EPS, AA
      PARAMETER(EPS=0.882)
      PARAMETER(AA=10.624)      
      INTEGER I
      REAL   ORD, RAD
      REAL   A, B

      ORD = 2*ALOG10(EPS/SQRT(AA**2-1))/ALOG10(FP/FS)
      RAD = FP/EPS**(2/ORD)
      
      IF(FITLOW) THEN
         A = 0
         B = 1
      ELSE
         A = 1
         B = -1
      END IF
      
      BUTDIFF = 0 
      DO I=1, NB
         DIFF = FREQ(2,I) - (A+B/SQRT(1+(FREQ(1,I)/RAD)**ORD))
         IF(DIFF>0) DIFF = DIFF * 5
         BUTDIFF = BUTDIFF + DIFF**2
      END DO
      
      RETURN
      END
#if 0
BUF(X)=SQRT(1/(1+(X/RAD(FP,FS))**ORD(FP,FS)))
RAD(FP,FS)=FP/EPS**(2/ORD(FP,FS))
ORD(FP,FS)=2*LOG10(EPS/SQRT(AA**2-1))/LOG10(FP/FS)
H(X)=(SGN(X)+1)/2
FSC2SNR(X)=X/(1-X)
S0(X)=H(X)*X
#endif
      
@


1.8
log
@maxnam needed
@
text
@d13 1
a13 1
C=* Email: spider@@wadsworth.org                                        *
@


1.7
log
@*** empty log message ***
@
text
@d35 1
@


1.6
log
@Pawels GPL License used
@
text
@a4 1
C=* From: SPIDER - MODULAR IMAGE PROCESSING SYSTEM                     *
a5 1
C=*                                                                    *
d7 1
d9 5
a13 1
C=* Email:  pawel.a.penczek@@uth.tmc.edu                                *
d15 1
a15 1
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
a28 2
C 
C **********************************************************************
d37 3
a39 1
      REAL, DIMENSION(:,:), POINTER ::   PANG, FREQ
a40 2
      CHARACTER*1      ANS,NULL
      CHARACTER*80     FILE
@


1.5
log
@null = char(0)
@
text
@d2 1
a2 2
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.
d4 24
a27 3
C *  COPYRIGHT (C)2002, L.Joyeux&P.A.Penczek
C *  University of Texas - Houston Medical School
C *  pawel.a.penczek@@uth.tmc.edu
d29 1
a29 1
C **************************************************************************
@


1.4
log
@#if
null = char(0)
@
text
@d37 1
a37 1
      NULL = 0
@


1.3
log
@NULL NOT INTEGER
@
text
@d137 1
a137 1
#IF 0
d144 1
a144 1
#ENDIF
@


1.2
log
@doubly defined variables not allowed in DEC fortran
@
text
@d8 1
a8 2
C *    THE CONTENTS OF THIS DOCUMENT CANNOT BE CHANGED WITHOUT WRITTEN
C *    PERMISSION OF THE AUTHOR                          *
d10 1
d12 1
d18 1
a18 6
      REAL, DIMENSION(:,:), POINTER ::   PANG, Freq
      CHARACTER*1      ans
      CHARACTER*80   File
      INTEGER         MAXXT, MAXYT, IRTFLG, NA, NULL
      REAL            Fp, Fs
      LOGICAL         fitlow
d20 5
d30 6
a35 6
      ALLOCATE(Freq(2,MAXYT))
      Freq(1,:) = PANG(2,:)
      Freq(2,:) = PANG(4,:)
C      WRITE(NOUT,1000) Freq
C1000   FORMAT(2F12.5)
      DEALLOCATE(Pang)
d41 4
a44 4
      Fp = 0.1
      Fs = 0.9
      fitlow = (ANS .EQ. 'L') .OR. (ANS .EQ. 'l')
      CALL FITBUFFCT(Freq, MAXYT, Fp, Fs, fitlow)
d46 1
a46 1
      CALL REG_SET_NSEL(1,2,Fp,Fs,0.0, 0.0, 0.0, IRTFLG)
d48 1
a48 1
      DEALLOCATE(Freq)
d54 1
a54 1
      SUBROUTINE FITBUFFCT(Freq, Nb, Fp, Fs, fitlow)
d57 2
a58 2
      INTEGER    Nb
      REAL      Freq(2,Nb), Fp, Fs
d60 5
a64 5
      REAL      Delta, min, but
      LOGICAL   fitlow
      INTEGER  minj, mini, i, j, k
      REAL      Fpn, Fsn
      REAL      ButDiff
d66 1
a66 1
      Delta = 0.05
d68 1
a68 1
      min = ButDiff(Freq, Nb, Fp, Fs, fitlow)
d70 1
a70 1
      DO k=1,20
d72 12
a83 12
            mini = 0
            minj = 0
            DO i=-1,1
               DO j=-1,1
                  Fpn = Fp+Delta*i
                  Fsn = Fs+Delta*j
                  IF(Fpn.LE.0 .OR. Fsn.GE.1.0) GOTO 100
                  but = ButDiff(Freq, Nb, Fpn, Fsn , fitlow)
                  IF(but<min) THEN
                     mini = i
                     minj = j
                     min = but
d88 4
a91 4
C            WRITE(NOUT,*) __FILE__, __LINE__, " mini minj ", mini, minj
            IF(mini.EQ.0 .AND. minj.EQ.0) GOTO 200
            Fp = Fp + delta*mini
            Fs = Fs + delta*minj
d93 2
a94 2
200      delta = delta / SQRT(2.0)
C         WRITE(NOUT,*) __FILE__, __LINE__, " Fp Fs ", Fp, Fs
d102 1
a102 1
      FUNCTION BUTDIFF(Freq, Nb, Fp, Fs, fitlow)
d106 3
a108 3
      INTEGER    Nb
      REAL      Freq(2,Nb), Fp, Fs, diff
      LOGICAL   fitlow
d110 1
a110 1
       REAL   Eps, AA
d113 10
a122 10
      INTEGER i
      REAL   ord, rad
      REAL   a, b

      ord = 2*ALOG10(eps/SQRT(AA**2-1))/ALOG10(fp/fs)
      rad = fp/eps**(2/ord)
      
      IF(fitlow) THEN
         a = 0
         b = 1
d124 2
a125 2
         a = 1
         b = -1
d129 4
a132 4
      DO i=1, Nb
         diff = Freq(2,i) - (a+b/SQRT(1+(Freq(1,i)/rad)**ord))
         IF(diff>0) diff = diff * 5
         BUTDIFF = BUTDIFF + diff**2
d137 8
a144 8
#if 0
buf(x)=sqrt(1/(1+(x/rad(fp,fs))**ord(fp,fs)))
rad(fp,fs)=fp/eps**(2/ord(fp,fs))
ord(fp,fs)=2*log10(eps/sqrt(aa**2-1))/log10(fp/fs)
h(x)=(sgn(x)+1)/2
fsc2snr(x)=x/(1-x)
s0(x)=h(x)*x
#endif
@


1.1
log
@Initial revision
@
text
@d56 1
a57 1
      INTEGER    Nb
d105 1
a106 1
      INTEGER    Nb
a112 2
      LOGICAL   fitlow
      REAL   fp,fs
@
