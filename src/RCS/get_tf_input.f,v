head	1.7;
access;
symbols
	healthdept_2018:1.7;
locks; strict;
comment	@c @;


1.7
date	2018.10.03.14.34.07;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2015.11.24.19.09.51;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2015.11.23.18.35.14;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2015.11.23.18.22.41;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2015.11.23.14.36.57;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2015.11.12.19.40.14;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2015.11.12.19.37.24;	author leith;	state Exp;
branches;
next	;


desc
@@


1.7
log
@email_health_dept
@
text
@C++*********************************************************************
C
C GET_TF_INPUT.F
C                  EXTRACTED                      NOV 15  ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2015  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C+**********************************************************************
C GET_TF_INPUT
C
C PURPOSE:    ASK STANDARD INPUT FOR 'TF' & 'CTF' OPERATIONS.
C
C OPERATIONS: 'TF D','TF L','TF LIS','TF C','TF C3','TF CT','TF CT3'
C
C CALLED IN:  trafct3  trafct3  trafl
C 
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

       SUBROUTINE GET_TF_INPUT(CS,DZ,FLAMBDA,
     &                         NDIM,NX,NY,
     &                         WANT_SPFREQ,FMAXSPFREQ,
     &                         WANT_PIXSIZ,PIXSIZ,
     &                         Q,DS,
     &                         WANT_AST,DZA,AZZ,
     &                         WANT_GEH,ACR,GEH,
     &                         WANT_SIGN,SIGN,
     &                         IRTFLG)   

      IMPLICIT NONE
      INCLUDE 'CMBLOCK.INC'

      REAL    :: CS,DZ,FLAMBDA, FMAXSPFREQ,PIXSIZ
      REAL    :: Q,DS,DZA,AZZ,ACR,GEH,SIGN
      INTEGER :: NDIM,NX,NY,IRTFLG
      LOGICAL :: WANT_SPFREQ,WANT_PIXSIZ,WANT_AST,WANT_GEH,WANT_SIGN

      REAL    :: FVAL,FKEV
      INTEGER :: NOT_USED,NE

       CALL RDPRM1S(CS,NOT_USED,
     &                  'SPHERICAL ABERRATION CS [MM]',IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

       IF (CS < 0.0001)  CS = 0.0001

       FVAL = 300
       CALL RDPRM2S(DZ,FVAL,NOT_USED,
     &              'DEFOCUS [A], ELECTRON VOLTAGE [Kev]', IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

C      ACCEPT LAMBDA AS INPUT ALSO
       CALL KEV_OR_LAMBDA(FVAL,FKEV,FLAMBDA,IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

       NX = 0
       IF (NDIM <= 1) THEN
         CALL RDPRI1S(NX,NOT_USED,
     &              'NUMBER OF SPATIAL FREQUENCY POINTS',IRTFLG)

       ELSE
          NY = 0
          CALL RDPRI2S(NX,NY,NOT_USED,
     &         'NUMBER OF SPATIAL FREQUENCY POINTS IN X & Y',IRTFLG)
       ENDIF
       IF (IRTFLG .NE. 0) RETURN
       IF (NX <= 0 ) THEN
          CALL ERRT(102,'BAD NUMBER OF SPATIAL FREQ. POINTS', NX)
          IRTFLG = 1
          RETURN
       ENDIF

       IF (WANT_SPFREQ) THEN
          CALL RDPRM1S(FMAXSPFREQ,NOT_USED,
     &              'MAX SPATIAL FREQUENCY [1/A]',IRTFLG)
          IF (IRTFLG .NE. 0) RETURN
          IF (FMAXSPFREQ <= 0 ) THEN
             CALL ERRT(101,'MAX SPATIAL FREQUENCY <= 0', NE)
             IRTFLG = 1
             RETURN
          ENDIF
       ENDIF

       IF (WANT_PIXSIZ) THEN
          CALL RDPRM1S(PIXSIZ,NOT_USED, 'PIXEL SIZE [A]', IRTFLG)
          IF (IRTFLG .NE. 0) RETURN
          IF (PIXSIZ <= 0 ) THEN
             CALL ERRT(101,'PIXEL SIZE <= 0', NE)
             IRTFLG = 1
             RETURN
          ENDIF

          !write(6,*) ' Inputted fmaxspfreq: ',fmaxspfreq
          !write(6,*) ' Computed fmaxspfreq: ',1/(2*pixsiz)

          FMAXSPFREQ = 1.0 / (2 * PIXSIZ)
          ! 1/ (2* .8)
          ! pixsiz range     (.2 .... 1000)
          ! FMAXSPFREQ range (.625 ............ .00001) 
       ENDIF

       Q  = 0.0
       DS = 0.0
       CALL RDPRM2S(Q,DS,NOT_USED,
     &              'SOURCE SIZE [1/A], DEFOCUS SPREAD [A]',IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

       DZA = 0.0
       AZZ = 0.0       
       IF (WANT_AST) THEN
          CALL RDPRM2S(DZA,AZZ,NOT_USED,
     &               'ASTIGMATISM [A], AZIMUTH [DEG]',IRTFLG)
          IF (IRTFLG .NE. 0) RETURN
       ENDIF

       GEH = 0.0
       IF (WANT_GEH) THEN
          CALL RDPRM2S(ACR,GEH,NOT_USED,
     &       'AMPLITUDE CONTRAST RATIO [0-1], GAUSSIAN ENV. HALFWIDTH',
     &        IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
       ELSE
          CALL RDPRM1S(ACR,NOT_USED,
     &                 'AMPLITUDE CONTRAST RATIO [0-1]',IRTFLG)
          IF (IRTFLG .NE. 0) RETURN
       ENDIF
       IF (ACR < 0.0 .OR. ACR > 1.0) THEN
           WRITE(NOUT,90) 'BAD VALUE FOR ACR: ',ACR
90         FORMAT('  ',A,F6.2)
           CALL ERRT(101,'BAD ACR', NX)
           IRTFLG = 1
       ENDIF

       IF (WANT_SIGN) THEN
          CALL RDPRM1S(SIGN,NOT_USED,'SIGN (+1 OR -1.)',IRTFLG)
          IF (IRTFLG .NE. 0) RETURN

          IF (SIGN .NE. 1.00 .AND. SIGN .NE. -1.00) THEN
              WRITE(NOUT,90) 'WARNING!  BAD VALUE FOR SIGN: ',SIGN
              IRTFLG = 1
          ENDIF
       ENDIF

       END

C     -------------------  KEV_OR_LAMBDA ----------------
     
      SUBROUTINE KEV_OR_LAMBDA(FVAL,FKEV,FLAMBDA,IRTFLG)

      IMPLICIT NONE
      INCLUDE 'CMBLOCK.INC'

      REAL    :: FVAL,FKEV,FLAMBDA
      INTEGER :: IRTFLG

      INTEGER :: NVAL

      IRTFLG = 0

      IF (FVAL < 1) THEN
C         MUST BE WAVELENGTH
          FLAMBDA = FVAL

          WRITE(NOUT,91) FLAMBDA
91        FORMAT('  Lambda: ',F6.4)

          !FLAMBDA = 12.398 / SQRT(FKEV*(1022+FKEV))
          !FLAMBDA * SQRT(FKEV*(1022+FKEV)) = 12.398
          !SQRT(FKEV*(1022+FKEV)) = 12.398 / FLAMBDA
          !     FKEV *(1022+FKEV)  = (12.398 / FLAMBDA)**2
          ! FKEV * 1022 + FKEV * FKEV  = (12.398 / FLAMBDA)**2
          ! QUADRATIC EQUATION MUST BE SOLVED NOT WORTH IT UN-NEEDED
          ! FKEV = -10000000000  ! BAD VALUE FLAG??

      ELSEIF (FVAL == 0 .OR. FVAL == 1) THEN
         NVAL = FVAL
         CALL ERRT(102,'IMPOSSIBLE VALUE FOR KEV OR LAMBDA',NVAL)
         IRTFLG = 1

      ELSE 
C        MUST BE KEV (RELATIVISTIC ELECTRONS)
         FKEV    = FVAL
         FLAMBDA = 12.398 / SQRT(FKEV * (1022+FKEV))

         WRITE(NOUT,92) FKEV, FLAMBDA
92       FORMAT('  Kev: ',F6.2,' --> Wavelength lambda: ',F6.4)
      ENDIF


      !write(6,93) FVAL, FKEV, FLAMBDA
93    format('  FVAL:',F7.2,' -->  KEV:',F6.2,'  LAMBDA:',F6.4)

      END
@


1.6
log
@changed geh prompt.
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.5
log
@WANT_SPFREQ parameter added
@
text
@d4 1
a4 1
C                  EXTRACTED                      FEB  15 ARDEAN LEITH
d29 1
a29 1
C PURPOSE: ASK STANDARD INPUT FOR 'TF' & 'CTF' OPERATIONS.
d31 1
a31 1
C OPERATIONS:   'TF CT3'
d33 1
a33 1
C CALLED IN: trafct3  trafct3  trafl
d137 2
a138 2
     &        'AMPL CONTRAST RATIO [0-1], GAUSSIAN ENV. HALFW. [1/A]',
     &       IRTFLG)
d142 1
a142 1
     &                  'AMPLITUDE CONTRAST RATIO [0-1]',IRTFLG)
@


1.4
log
@GET_TF_INPUT WANT_PIXSIZ params
@
text
@d111 2
a112 2
          write(6,*) ' Inputted fmaxspfreq: ',fmaxspfreq
          write(6,*) ' Computed fmaxspfreq: ',1/(2*pixsiz)
@


1.3
log
@typo in comment
@
text
@d40 2
a41 1
     &                         FMAXSPFREQ,
d51 2
a52 1
      REAL    :: CS,DZ,FLAMBDA,FMAXSPFREQ,Q,DS,DZA,AZZ,ACR,GEH,SIGN
d54 1
a54 1
      LOGICAL :: WANT_AST,WANT_GEH,WANT_SIGN
d91 2
a92 1
       CALL RDPRM1S(FMAXSPFREQ,NOT_USED,
d94 24
a117 5
       IF (IRTFLG .NE. 0) RETURN
       IF (FMAXSPFREQ <= 0 ) THEN
          CALL ERRT(101,'MAX SPATIAL FREQUENCY <= 0', NE)
          IRTFLG = 1
          RETURN
@


1.2
log
@put kev_or_lambda in here
@
text
@d179 1
a179 1
         FLAMBDA = 12.398 / SQRT(FKEV*(1022+FKEV))
d182 1
a182 1
92       FORMAT('  Kev: ',F6.2,' --> Wavelenght lambda: ',F6.4)
@


1.1
log
@Initial revision
@
text
@d141 49
@
