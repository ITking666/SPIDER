head	1.23;
access;
symbols
	healthdept_2018:1.23
	pre_getangas:1.13
	GPL2010:1.13
	pre_GPL2010:1.12
	pre_var_equation:1.12
	pre_fftwrings:1.12
	pre_opfiles:1.12
	src:1.12
	best-code:1.12
	x-named-regs:1.12
	x:1.12
	v13-00:1.12
	pre_GPL:1.10
	prec_CA:1.5;
locks; strict;
comment	@c @;


1.23
date	2018.10.03.14.34.12;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2015.12.16.18.51.49;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2015.12.16.18.30.49;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2015.12.14.18.13.09;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2014.01.12.19.24.21;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2012.04.16.18.06.21;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2012.02.16.16.18.07;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2012.01.26.15.39.49;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2011.11.08.15.36.49;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2011.11.07.20.08.02;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2010.06.24.13.26.29;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.17.19.59.00;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.17.17.55.10;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.07.21.39.51;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2005.01.27.16.31.11;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.30.16.45.28;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.05.14.27.38;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.28.19.15.57;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.25.20.17.28;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.25.16.38.41;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.24.16.07.49;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.22.18.38.31;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.17.14.37.24;	author leith;	state Exp;
branches;
next	;


desc
@@


1.23
log
@email_health_dept
@
text
@C++*********************************************************************
C                                                                      *
C PJ3Q_N.F  SPEEDED UP                           FEB 2000 ARDEAN LEITH *
C           LUNDOCREDANG PARAMETERS CHANGED      DEC 2000 ARDEAN LEITH *
C           OPENDOC PARAMETERS                   DEC 2000 ARDEAN LEITH *
C           REWRITTEN                            SEP 2003 PAWEL        *
C           REFRINGS OPTION                      FEB 2005 ARDEAN LEITH *
C           FBS_WANTED                           JAN 2012 ARDEAN LEITH *                                                      *
C           CONSECUTIVE OUTPUT NUMBERING FLAG    DEC 2015 ARDEAN LEITH *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2015  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C PJ3Q_N(FBS_WANTED,REFRINGS)
C
C PURPOSE:  COMPUTES PROJECTIONS OF A 3D VOLUME ACCORDING TO 
C           THREE EULERIAN ANGLES. DOES A WHOLE IMAGE SERIES. CAN
C           CREATE 'REFERENCE RINGS' FILE(S) ALSO 
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

         SUBROUTINE PJ3Q_N(FBS_WANTED,REFRINGS) 
 
         INCLUDE 'CMBLOCK.INC'
         INCLUDE 'CMLIMIT.INC'

         LOGICAL                  :: FBS_WANTED,REFRINGS
 
         CHARACTER(LEN=MAXNAM)    :: FINPAT,FINPIC,ANS
         CHARACTER(LEN=1)         :: MODE
         LOGICAL                  :: MD,WANT_CONSEQ

         REAL, ALLOCATABLE        :: BCKE(:)
         INTEGER, ALLOCATABLE     :: IPCUBE(:,:)
         REAL, ALLOCATABLE        :: PROJ(:,:,:)
         REAL, ALLOCATABLE        :: ANGBUF(:,:)

         INTEGER                  :: ICOMM,MYPID,MPIERR,MAXIM,IRTFLG
         INTEGER                  :: NCHAR,FIRSTBL
         REAL                     :: R1

         INTEGER, PARAMETER       :: INVOL     = 98
         INTEGER, PARAMETER       :: INPRJ     = 97
         INTEGER, PARAMETER       :: INDOCAT   = 96
         INTEGER, PARAMETER       :: INDOCS    = 95 
         INTEGER, PARAMETER       :: LUNRINGST = 94 

         CALL SET_MPI(ICOMM,MYPID,MPIERR) ! SETS ICOMM AND MYPID

C        OPEN INPUT VOLUME
         MAXIM  = 0
         IRTFLG = 0
         CALL OPFILEC(0,.TRUE.,FINPAT,INVOL,'O',
     &               IFORM,NX,NY,NZ,
     &               MAXIM,'INPUT VOLUME~',.FALSE.,IRTFLG)
         IF (IRTFLG .NE. 0)  RETURN

         IF (NX .NE. NY .OR. NZ .NE. NX) THEN
            WRITE(NOUT,91) 
91          FORMAT(' WARNING NON-CUBIC VOLUME MAY GIVE INVALID RESULTS')
         ENDIF

         RI   = (MIN(NX,NY,NZ)/2) - 2
         IRTFLG = -999            ! DO NOT UPPERCASE
         CALL RDPRMC(ANS,NCHAR,.TRUE.,
     &       'OBJECT RADIUS, CONSECUTIVE OUTPUT FILE NUMBERS (Y/N)',
     &        CDUM,IRTFLG)
         IF (IRTFLG .NE. 0)  RETURN

         WANT_CONSEQ = .FALSE. 
         FIRSTBL = INDEX(ANS(1:NCHAR),' ')
         IF (FIRSTBL == 0) FIRSTBL = INDEX(ANS(1:NCHAR),',')
         IF (FIRSTBL > 0 .AND. FIRSTBL < NCHAR) THEN
            ICOMMA = INDEX(ANS(1:FIRSTBL),',')  ! comma before blank
            IF (ICOMMA < FIRSTBL) FIRSTBL = ICOMMA

C           FIND 2'ND RESPONSE
            CALL SSUPCAS(ANS(FIRSTBL:NCHAR))
            WANT_CONSEQ = (INDEX(ANS(FIRSTBL:NCHAR),'Y') > 0)
            NCHAR = FIRSTBL -1
         ENDIF

         ANS(1:NCHAR+1) = '~' // ANS(1:NCHAR)
         CALL RDPRM1S(RI,NOT_USED,ANS(1:NCHAR+1),IRTFLG)
 
         !write(6,*)' ri:',ri,' Want_conseq:',want_conseq
 
C        FIND NUMBER OF OMP THREADS
         CALL GETTHREADS(NUMTH)

         NVOX = NX * NY * NZ

C        INITIALIZE NN  AND FIND NN 

         LDPX = NX / 2 + 1
         LDPY = NY / 2 + 1
         LDPZ = NZ / 2 + 1

         NN   = 1
         MD   = .FALSE.
         CALL PREPCUB(NX,NY,NZ, NN,IDUM,
     &                RI,MD,LDPX,LDPY,LDPZ) 

C        USE NVOX TO ALLOCATE (BCKE) 
         MAXKEY = NIMAX
         ALLOCATE(BCKE(NVOX),
     &            IPCUBE(5,NN),
     &            ANGBUF(3,MAXKEY),STAT=IRTFLG)
         IF (IRTFLG .NE. 0) THEN 
            MWANT = NVOX + 5 * NN + 3 * MAXKEY
            CALL ERRT(46,'PJ 3Q, BCKE...',MWANT)
            GOTO 9999   
         ENDIF

C        READ BCKE
         CALL READV(INVOL,BCKE,NX,NY,NX,NY,NZ)
         CLOSE(INVOL)

C        PREPARE IPCUBE
         MD = .TRUE.
         CALL PREPCUB(NX,NY,NZ, NN,IPCUBE,
     &                RI,MD,LDPX,LDPY,LDPZ) 

         ALLOCATE(PROJ(NX,NY,NUMTH),STAT=IRTFLG)
         IF (IRTFLG .NE. 0) THEN 
            MWANT = NX * NY  * NUMTH
            CALL ERRT(46,'PJ 3Q, PROJ',MWANT)
            GOTO 9999   
         ENDIF

C        READ SELECTION DOC FILE 
C        NANG - NUMBER OF ANGLES (PROJECTIONS)
         CALL FILELIST(.FALSE.,INDOCS,FINPAT,NLETA,INUMBR,MAXKEY,NANG,
     &        'ANGLE NUMBERS OR SELECTION DOC. FILE NAME',IRTFLG)
         IF (IRTFLG .NE. 0)  GOTO 9999         

C        OPEN ANGLES DOC FILE
         CALL OPENDOC(FINPIC,.TRUE.,NLETI,INDOCAT,INDOCA,.TRUE.,
     &     'ANGLES DOC',.TRUE.,.FALSE.,.FALSE.,NEWFILE,IRTFLG)
         IF (IRTFLG .NE. 0)  GOTO 9999

C        READ ANGLES FROM ANGLES DOC FILE.
C        ORDER IN THE DOCUMENT FILE IS PSI, THETA, PHI AND ANGLES ARE 
C        IN DEGREES! 

         CALL LUNDOCREDANG(INDOCA,ANGBUF,MAXKEY,NGOTY,MAXGOTY,IRTFLG)
         IF (IRTFLG .NE. 0) GOTO 9999
         IF (NGOTY < NANG) THEN 
            CALL ERRT(102,'ONLY GOT ANGLES FOR IMAGES',NGOTY)
            GOTO 9999   
         ENDIF

         REFRINGS = (FCHAR(7:7) == 'R') 
         LUNRINGS = 0
         IF (REFRINGS) THEN
C           WANT TO CREATE REFERENCE RINGS FILE
                     
            MR    = 5
            NR    = MIN(NX,NY)
            ISKIP = 0
            CALL RDPRI3S(MR,NR,ISKIP,NOT_USED,
     &                'FIRST, LAST RING, & RING SKIP',IRTFLG)
            IF (IRTFLG .NE. 0) GO TO 9999
            LUNRINGS = LUNRINGST

            MODE     = 'F'
         ENDIF

C        PROJECT NOW
         CALL WRITPRO_N(PROJ,INPRJ,NX,NY,NZ,NUMTH,BCKE,NVOX,
     &                 IPCUBE,NN,RI,INUMBR,NANG,MAXKEY,ANGBUF,
     &                 LUNRINGS,MODE,MR,NR,ISKIP,LDPX,LDPY,LDPZ,
     &                 FBS_WANTED,WANT_CONSEQ,IRTFLG)

         IF (MYPID .LE. 0) THEN
            IF (FBS_WANTED) THEN
               WRITE(NOUT,92) NANG
92          FORMAT('  PJ 3F FINISHED FOR: ',I7,'   PROJECTIONS -----',/)
            ELSE
               WRITE(NOUT,93) NANG
93          FORMAT('  PJ 3Q FINISHED FOR: ',I7,'   PROJECTIONS -----',/)
            ENDIF

            CALL FLUSHRESULTS()
         ENDIF

9999     IF(ALLOCATED(ANGBUF)) DEALLOCATE(ANGBUF)
         IF(ALLOCATED(PROJ))   DEALLOCATE(PROJ)
         IF(ALLOCATED(IPCUBE)) DEALLOCATE(IPCUBE)
         IF(ALLOCATED(BCKE))   DEALLOCATE(BCKE)

         CLOSE(INDOCAT)
         CLOSE(INDOCS)
         IF (REFRINGS) CLOSE(LUNRINGS)

         END

@


1.22
log
@comma before blank bug in ans
@
text
@d16 1
a16 1
C=* Email: spider@@wadsworth.org                                        *
@


1.21
log
@.not_used.   bug
@
text
@d93 3
@


1.20
log
@CONSECUTIVE OUTPUT NUMBERING available
/
@
text
@d100 1
a100 1
         CALL RDPRM1S(RI,'NOT_USED',ANS(1:NCHAR+1),IRTFLG)
@


1.19
log
@enter
@
text
@d3 7
a9 6
C PJ3Q_N.F      SPEEDED UP                       FEB 2000 ARDEAN LEITH *
C               LUNDOCREDANG PARAMETERS CHANGED  DEC 2000 ARDEAN LEITH *
C               OPENDOC PARAMETERS               DEC 2000 ARDEAN LEITH *
C               REWRITTEN                        SEP 2003 PAWEL        *
C               REFRINGS OPTION                  FEB 2005 ARDEAN LEITH *
C               FBS_WANTED                       JAN 2012 ARDEAN LEITH *                                                      *
d14 1
a14 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d48 1
a48 1
         CHARACTER(LEN=MAXNAM)    :: FINPAT,FINPIC
d50 1
a50 1
         LOGICAL                  :: MD
d58 1
d83 4
a86 1
         CALL RDPRM1S(RI,NOT_USED,'OBJECT RADIUS',IRTFLG)
d89 15
d107 1
a107 1
         NVOX = NX*NY*NZ
d111 3
a113 3
         LDPX = NX  /2+1
         LDPY = NY  /2+1
         LDPZ = NZ/2+1
d132 1
a132 1
	 CALL READV(INVOL,BCKE,NX,NY,NX,NY,NZ)
d164 1
a164 1
         IF (NGOTY .LT. NANG) THEN 
d169 1
a169 1
         REFRINGS =  (FCHAR(7:7) .EQ. 'R') 
d189 1
a189 1
     &                 FBS_WANTED,IRTFLG)
a211 1
         RETURN
@


1.18
log
@INTEGER, PARAMETER       :: INVOL.....
@
text
@d130 1
a130 1
     &        'ENTER ANGLE NUMBERS OR SELECTION DOC. FILE NAME',IRTFLG)
@


1.17
log
@OBJECT RADIUS prompt
@
text
@d59 5
a63 5
         LOGICAL, PARAMETER       :: INVOL     = 98
         LOGICAL, PARAMETER       :: INPRJ     = 97
         LOGICAL, PARAMETER       :: INDOCAT   = 96
         LOGICAL, PARAMETER       :: INDOCS    = 95 
         LOGICAL, PARAMETER       :: LUNRINGST = 94 
@


1.16
log
@FBS_WANTED
@
text
@d81 1
a81 1
         CALL RDPRM1S(RI,NOT_USED,'RADIUS OF THE OBJECT',IRTFLG)
@


1.15
log
@passed LDPX,LDPY,LDPZ to writpro_n now
@
text
@d8 1
a8 1
C                                                                      *
d13 1
a13 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d31 1
a31 1
C PJ3Q_N
d40 2
a41 2
         SUBROUTINE PJ3Q_N

d45 2
d49 1
a49 1
         LOGICAL                  :: REFRINGS,MD
d56 2
a57 1
         INTEGER                  :: ICOMM,MYPID,MPIERR
d59 5
a63 1
         DATA  INVOL,INPRJ,INDOCAT,INDOCS,LUNRINGST/98,97,96,95,94/
d71 1
a71 1
     &               IFORM,NSAM,NROW,NSLICE,
d75 1
a75 1
         IF (NSAM .NE. NROW .OR. NSLICE .NE. NSAM) THEN
d80 1
a80 1
         RI   = (MIN(NSAM,NROW,NSLICE)/2) - 2
d87 1
a87 1
         NVOX = NSAM*NROW*NSLICE
d91 3
a93 3
         LDPX = NSAM  /2+1
         LDPY = NROW  /2+1
         LDPZ = NSLICE/2+1
d97 1
a97 1
         CALL PREPCUB(NSAM,NROW,NSLICE, NN,IDUM,
d112 1
a112 1
	 CALL READV(INVOL,BCKE,NSAM,NROW,NSAM,NROW,NSLICE)
d117 1
a117 1
         CALL PREPCUB(NSAM,NROW,NSLICE, NN,IPCUBE,
d120 1
a120 1
         ALLOCATE(PROJ(NSAM,NROW,NUMTH),STAT=IRTFLG)
d122 1
a122 1
            MWANT = NSAM * NROW  * NUMTH
d155 1
a155 1
            NR    = MIN(NSAM,NROW)
d166 1
a166 1
         CALL WRITPRO_N(PROJ,INPRJ,NSAM,NROW,NSLICE,NUMTH,BCKE,NVOX,
d168 2
a169 1
     &                 LUNRINGS,MODE,MR,NR,ISKIP,LDPX,LDPY,LDPZ,IRTFLG)
d172 8
a179 2
            WRITE(NOUT,90) NANG
90          FORMAT('  PJ 3Q FINISHED FOR: ',I7,'   PROJECTIONS -----',/)
@


1.14
log
@used prepcub, cosmetic
@
text
@d2 7
a8 7
C
C PJ3Q_N.F      SPEEDED UP                         FEB 2000 ARDEAN LEITH
C               LUNDOCREDANG PARAMETERS CHANGED    DEC 2000 ARDEAN LEITH
C               OPENDOC PARAMETERS                 DEC 2000 ARDEAN LEITH
C               REWRITTEN                          SEP 2003 PAWEL
C               REFRINGS OPTION                    FEB 05 ARDEAN LEITH
C
a44 2
         COMMON /PAR/     LDPX,LDPY,LDPZ

a112 2
         write(6,*) ipcube(1:5,1:10)

d161 1
a161 1
     &                 LUNRINGS,MODE,MR,NR,ISKIP,IRTFLG)
@


1.13
log
@GPL_2010
@
text
@d47 10
a56 8
         CHARACTER(LEN=MAXNAM)                  :: FINPAT,FINPIC
         CHARACTER(LEN=1)                       :: NULL,MODE
         LOGICAL                                :: REFRINGS,MD

         REAL, ALLOCATABLE, DIMENSION(:)        :: BCKE
         INTEGER, ALLOCATABLE, DIMENSION(:,:)   :: IPCUBE
         REAL, ALLOCATABLE, DIMENSION(:,:,:)    :: PROJ
         REAL, ALLOCATABLE, DIMENSION(:,:)      :: ANGBUF
d60 1
a60 13
#ifdef USE_MPI
         include 'mpif.h'
         ICOMM = MPI_COMM_WORLD
         CALL MPI_COMM_RANK(ICOMM, MYPID, MPIERR)
#else
         MYPID = -1 
#endif

         MAXKEY = NIMAX

         NULL = CHAR(0)

C        NANG - NUMBER OF ANGLES (PROJECTIONS)
d65 3
a67 2
         CALL OPFILEC(0,.TRUE.,FINPAT,INVOL,'O',IFORM,NSAM,NROW,NSLICE,
     &               MAXIM,'3-D INPUT',.FALSE.,IRTFLG)
d70 4
a73 1
         CALL  RDPRM(RI,NOT_USED,'RADIUS OF THE OBJECT')
d75 3
a77 3
         LDPX = NSAM/2+1
         LDPY = NROW/2+1
         LDPZ = NSLICE/2+1
d82 1
a82 1
         NMAT = NSAM*NROW*NSLICE
a84 1
C        DUM1 IS A DUMMY VARIABLE
d86 8
a93 3
         NN = 1
         MD = .FALSE.
         CALL PREPCUB_Q_N(NSAM,NN,DUM1,RI,MD,LDPX,LDPY,LDPZ) 
d95 5
a99 2
C        USE NMAT TO ALLOCATE (BCKE) 
         ALLOCATE(BCKE(NMAT),IPCUBE(5,NN),ANGBUF(3,MAXKEY),STAT=IRTFLG)
d101 1
a101 1
            MWANT = NMAT + 5 * NN + 3 * MAXKEY
d112 4
a115 1
         CALL PREPCUB_Q_N(NSAM,NN,IPCUBE,RI,MD,LDPX,LDPY,LDPZ) 
d125 1
d155 1
a155 1
     &                  'FIRST, LAST RING, & RING SKIP',IRTFLG)
d163 1
a163 1
         CALL WRITPRO_N(PROJ,INPRJ,NSAM,NROW,NSLICE,NUMTH,BCKE,NMAT,
@


1.12
log
@GPL License fixed
@
text
@a9 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d11 5
a15 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d17 1
a17 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d22 1
a22 1
C=* This program is distributed in the hope that it will be useful,    *
d24 1
a24 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a25 1
C=*                                                                    *
d27 1
a27 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.11
log
@HRI GPL License used
@
text
@a9 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d13 1
a13 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a32 6

C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.10
log
@RR support, passed: LDPX,LDPY,LDPZ to prepcub..)
@
text
@d11 24
@


1.9
log
@output note format
@
text
@d1 1
a1 1
C++************************************************************************
d7 1
d9 8
a16 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
C **************************************************************************
d21 2
a22 3
C           THREE EULERIAN ANGLES. DOES A WHOLE IMAGE SERIES. 
C
C IMAGE_PROCESSING_ROUTINE
d25 1
a25 1
C--************************************************************************
d34 3
a36 5
         CHARACTER(LEN=MAXNAM)         :: FINPAT,FINPIC
         COMMON  /F_SPEC/ FINPAT,FINPIC

         CHARACTER(LEN=1)                       :: NULL
         LOGICAL                                :: MD
d43 2
a44 1
         DATA  INVOL,INPRJ,INDOCAT,INDOCS/98,97,96,95/
d46 3
a48 4
         INCLUDE 'mpif.h'
         INTEGER MYPID, COMM, IERR
         COMM = MPI_COMM_WORLD
         CALL MPI_COMM_RANK(COMM, MYPID, IERR)
d50 1
a50 1
         MYPID = -1
d52 1
d82 1
a82 1
         CALL PREPCUB_Q_N(NSAM,NN,DUM1,RI,MD) 
d92 1
a92 2
         MD = .TRUE.
C        READ BCKE AND PREPARE IPCUBE
d96 3
a98 1
         CALL PREPCUB_Q_N(NSAM,NN,IPCUBE,RI,MD) 
d109 1
a109 1
     &                 'DUMMY',IRTFLG)
d114 1
a114 1
     &            'ANGLES DOC',.TRUE.,.FALSE.,.FALSE.,NEWFILE,IRTFLG)
d128 16
d146 2
a147 1
     &                 IPCUBE,NN,RI,INUMBR,NANG,MAXKEY,ANGBUF)
d149 5
a153 3
         IF (MYPID .LE. 0) WRITE(NOUT,90) NANG
90       FORMAT('  PJ 3Q FINISHED FOR: ',I7,'   PROJECTIONS --------',/)
         CALL FLUSHRESULTS()
d162 1
@


1.8
log
@mpi
@
text
@d134 1
a134 1
90       FORMAT(' PJ 3Q FINISHED FOR: ',I7,'   PROJECTIONS --------',/)
@


1.7
log
@mpi
@
text
@d52 2
d133 1
a133 7
#ifdef USE_MPI
         IF (MYPID .EQ. 0) THEN
            WRITE(NOUT,90) NANG
         ENDIF
#else
         WRITE(NOUT,90) NANG
#endif
@


1.6
log
@irtflg = 0 & other minor
@
text
@d47 6
a52 1

d131 5
d137 1
@


1.5
log
@bad lundocredang call
@
text
@d35 2
a36 2
         CHARACTER(LEN=MAXNAM)         :: FINPAT,FINPIC,FINDOC
         COMMON  /F_SPEC/ FINPAT,FINPIC,FINDOC
d55 2
a56 1
         MAXIM = 0
d77 1
a77 1
         CALL  PREPCUB_Q_N(NSAM,NN,DUM1,RI,MD) 
d80 2
a81 2
         ALLOCATE (BCKE(NMAT),IPCUBE(5,NN),ANGBUF(3,MAXKEY),STAT=IRTFLG)
         IF (IRTFLG.NE.0) THEN 
d83 1
a83 1
            CALL ERRT(46,'PJ 3Q, BCKE',NMAT)
a90 1
         CALL  PREPCUB_Q_N(NSAM,NN,IPCUBE,RI,MD) 
d92 2
d95 5
a99 1
         IF (IRTFLG .NE. 0) GOTO 9999 
d123 1
a123 1
         CALL  WRITPRO_N(PROJ,INPRJ,NSAM,NROW,NSLICE,NUMTH,BCKE,NMAT,
@


1.4
log
@bad opendoc paramaeters
@
text
@d109 1
a109 1
         CALL LUNDOCREDANG(INDOCA,ANGBUF,3,MAXKEY,.TRUE.,NGOT,IRTFLG)
d111 4
@


1.3
log
@bad prepcub call should be prepcub_q_n
@
text
@d46 1
a46 1
         DATA  INVOL,INPRJ,INDOCA,INDOCS/98,97,96,95/
d101 2
a102 2
         CALL OPENDOC(FINPIC,.TRUE.,NLETI,INDOCA,.TRUE.,'ANGLES DOC',
     &            .TRUE.,.FALSE.,.FALSE.,NEWFILE,IRTFLG)
d125 1
a125 1
         CLOSE(INDOCA)
@


1.2
log
@pawels aliasing changes
@
text
@d3 1
a3 1
C PJ3Q.F        SPEEDED UP                         FEB 2000 ARDEAN LEITH
d6 1
d18 1
a18 1
C PJ3Q
d76 1
a76 1
         CALL  PREPCUB_Q(NSAM,NN,DUM1,RI,MD) 
@


1.1
log
@Initial revision
@
text
@d27 1
a27 1
         SUBROUTINE PJ3Q()
d31 1
d34 1
a34 1
         CHARACTER*80     FINPAT,FINPIC,FINDOC
d37 2
a38 3
         CHARACTER*1      NULL
         COMMON           BUF(1024)
         LOGICAL  MD
d40 1
a40 1
         REAL, ALLOCATABLE, DIMENSION(:)     :: BCKE
d42 2
a43 3
         REAL, ALLOCATABLE, DIMENSION(:,:,:) :: PROJ
         INTEGER, ALLOCATABLE, DIMENSION(:)  :: ISELECT
         REAL, ALLOCATABLE, DIMENSION(:,:)   :: ANGBUF
d78 1
a78 8
         ALLOCATE (BCKE(NMAT), STAT=IRTFLG)
         IF (IRTFLG.NE.0) THEN 
            CALL ERRT(46,'PJ 3Q, BCKE',IER)
            RETURN   
         ENDIF

C        USE NN TO ALLOCATE (IPCUBE) 
         ALLOCATE (IPCUBE(5,NN), STAT=IRTFLG)
d80 3
a82 2
            CALL ERRT(46,'PJ 3Q, IPCUBE',IER)
            GOTO 9999  
d89 1
a89 1
         CALL  PREPCUB_Q(NSAM,NN,IPCUBE,RI,MD) 
d92 1
a92 1
         IF (IRTFLG .NE. 0) GOTO 9998 
a93 3
         ALLOCATE(ISELECT(MAXKEY),STAT=IRTFLG)
         IF (IRTFLG .NE. 0) GOTO 9997 

d95 1
a95 1
         CALL FILELIST(.FALSE.,INDOCS,FINPAT,NLETA,ISELECT,MAXKEY,NANG,
d97 1
a97 3
         IF (IRTFLG .NE. 0) THEN
            GOTO 9996         
         ENDIF
d102 1
a102 1
         IF (IRTFLG .NE. 0)  GOTO 9996
a107 3
         ALLOCATE(ANGBUF(3,MAXKEY),STAT=IRTFLG)
         IF (IRTFLG .NE. 0) GOTO 9996 

d109 1
a109 1
         IF (IRTFLG .NE. 0) GOTO 9995
d112 2
a113 2
         CALL  WRITPRO(PROJ,INPRJ,NSAM,NROW,NSLICE,NUMTH,BCKE,NMAT,
     &                 IPCUBE,NN,RI,ISELECT,NANG,MAXKEY,ANGBUF)
d119 4
a122 5
9995     DEALLOCATE(ANGBUF)
9996     DEALLOCATE(ISELECT)
9997     DEALLOCATE(PROJ)
9998     DEALLOCATE(IPCUBE)
9999     DEALLOCATE(BCKE)
d126 1
@
