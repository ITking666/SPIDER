head	1.27;
access;
symbols
	pre_mrcs:1.27
	healthdept_2018:1.26
	pre_getangas:1.25
	GPL2010:1.25
	pre_GPL2010:1.24
	pre_var_equation:1.24
	pre_fftwrings:1.24
	pre_opfiles:1.24
	src:1.24
	best-code:1.24
	x-named-regs:1.24
	x:1.24
	v13-00:1.24
	pre_GPL:1.22
	prec_CA:1.16
	noindx:1.14
	Bproc:1.14
	oct21:1.11
	last77:1.9;
locks; strict;
comment	@c @;


1.27
date	2018.10.03.14.59.55;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2018.10.03.14.51.09;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2010.06.24.13.27.19;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2005.10.17.20.45.01;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2005.10.17.18.35.26;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2004.11.04.16.02.45;	author bimal;	state Exp;
branches;
next	1.21;

1.21
date	2004.11.01.21.36.47;	author bimal;	state Exp;
branches;
next	1.20;

1.20
date	2004.11.01.20.38.36;	author bimal;	state Exp;
branches;
next	1.19;

1.19
date	2004.11.01.20.28.39;	author bimal;	state Exp;
branches;
next	1.18;

1.18
date	2004.11.01.20.08.15;	author bimal;	state Exp;
branches;
next	1.17;

1.17
date	2004.11.01.20.03.20;	author bimal;	state Exp;
branches;
next	1.16;

1.16
date	2003.09.29.17.57.59;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.04.16.43.32;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2000.01.25.16.29.46;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	99.12.06.19.21.53;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.12.03.13.45.51;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.06.03.20.51.01;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	99.04.29.14.34.10;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	99.02.11.17.00.51;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	99.02.11.15.45.26;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	98.09.28.13.20.53;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	98.09.28.13.13.49;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	98.01.23.21.07.52;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	97.10.15.17.10.25;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	97.07.24.18.26.47;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	97.05.09.14.17.54;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	97.02.07.18.45.55;	author pawel;	state Exp;
branches;
next	;


desc
@weighting function in 2D according to MvH
@


1.27
log
@formatting
@
text
@
C ++********************************************************************
C                                                                      *
C WTM.F          ADDED ISELECT PARAMETER         SEP 03 ARDEAN LEITH   *
C                PARTITION BUG                   SEP 03 ARDEAN LEITH   *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  WTM(ISELECT,PROJ,W,NNNN,NSAM,NROW,SS,NANG,DIAMETER,K)               *
C                                                                      *
C  PURPOSE:     WEIGHTING FUNCTION IN 2D ACCORDING TO MVH              *
C                                                                      *
C  PARAMETERS:  ISELECT,    SELECTED PROJECTIONS LIST           (SENT) *
C               PROJ                                       (SENT/RET.) *
C               W                                               (WORK) *
C               NNNN                                            (SENT) *
C               NSAM,NROW                                       (SENT) *
C               SS                                              (SENT) *
C               NANG                                            (SENT) *
C               DIAMETER                                        (SENT) *
C               K         CURRENT PROJ/ANGLE NUMBER             (SENT) *
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE WTM(ISELECT,USESELECT,PROJ,W,NNNN,NSAM,NROW,SS,NANG,
     &                 DIAMETER,NUMP)

        REAL    :: SS(6,NANG),PROJ(NNNN,NROW),W(NNNN/2,NROW)
	REAL    :: CC(3),VV(3),CP(2),VP(2),RI(3,3)
        INTEGER :: ISELECT(NANG)
        LOGICAL :: USESELECT

	PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
	PARAMETER (DGR_TO_RAD = (QUADPI/180))
	PARAMETER (RAD_TO_DGR = (180.0/QUADPI))

C        R(1,1)=CPHI*CTHETA*CPSI-SPHI*SPSI
C        R(2,1)=-CPHI*CTHETA*SPSI-SPHI*CPSI
C        R(3,1)=CPHI*STHETA
C        R(1,2)=SPHI*CTHETA*CPSI+CPHI*SPSI
C        R(2,2)=-SPHI*CTHETA*SPSI+CPHI*CPSI
C        R(3,2)=SPHI*STHETA
C        R(1,3)=-STHETA*CPSI
C        R(2,3)=STHETA*SPSI
C        R(3,3)=CTHETA

         RI(1,1)=SS(1,NUMP)*SS(3,NUMP)*SS(5,NUMP)-SS(2,NUMP)*SS(6,NUMP)
         RI(2,1)=-SS(1,NUMP)*SS(3,NUMP)*SS(6,NUMP)-SS(2,NUMP)*SS(5,NUMP)
         RI(3,1)=SS(1,NUMP)*SS(4,NUMP)
         RI(1,2)=SS(2,NUMP)*SS(3,NUMP)*SS(5,NUMP)+SS(1,NUMP)*SS(6,NUMP)
         RI(2,2)=-SS(2,NUMP)*SS(3,NUMP)*SS(6,NUMP)+SS(1,NUMP)*SS(5,NUMP)
         RI(3,2)=SS(2,NUMP)*SS(4,NUMP)
         RI(1,3)=-SS(4,NUMP)*SS(5,NUMP)
         RI(2,3)=SS(4,NUMP)*SS(6,NUMP)
         RI(3,3)=SS(3,NUMP)

	NR2=NROW/2

	THICK=NSAM/DIAMETER/2.0
c$omp   parallel do private(i,j)
	DO J=1,NROW
           DO I=1,NNNN/2
C             SET W TO 1 - PROJECTION WITH ITSELF
              W(I,J) = 1.0
           ENDDO
	ENDDO

	DO  LT=1,NANG

        L = LT
        IF (USESELECT) L = ISELECT(LT)

	IF (L .NE. NUMP)  THEN
	  CC(1)=SS(2,L)*SS(4,L)*SS(3,NUMP)-SS(3,L)*SS(2,NUMP)*SS(4,NUMP)
	  CC(2)=SS(3,L)*SS(1,NUMP)*SS(4,NUMP)-SS(1,L)*SS(4,L)*SS(3,NUMP)
	  CC(3)=SS(1,L)*SS(4,L)*SS(2,NUMP)*SS(4,NUMP)-
     &		SS(2,L)*SS(4,L)*SS(1,NUMP)*SS(4,NUMP)

	  CCN=AMAX1(AMIN1(SQRT(CC(1)**2+CC(2)**2+CC(3)**2),1.0),-1.0)
	  ALPHA=RAD_TO_DGR*ASIN(CCN)
	  IF (ALPHA.GT.180.0) ALPHA=ALPHA-180.0
	  IF (ALPHA.GT.90.0) ALPHA=180.0-ALPHA
	  IF (ALPHA.LT.1.0E-6)  THEN
c$omp        parallel do private(i,j)
	     DO J=1,NROW
	        DO I=1,NNNN/2
                   W(I,J)=W(I,J)+1.0
                ENDDO
             ENDDO
	  ELSE
             FM=THICK/(ABS(SIN(ALPHA*DGR_TO_RAD)))
             CC   = CC/CCN
             VV(1)= SS(2,L)*SS(4,L)*CC(3)-SS(3,L)*CC(2)
             VV(2)= SS(3,L)*CC(1)-SS(1,L)*SS(4,L)*CC(3)
             VV(3)= SS(1,L)*SS(4,L)*CC(2)-SS(2,L)*SS(4,L)*CC(1)
             CP   = 0.0
             VP   = 0.0
             DO LL=1,2
                DO M=1,3
                   CP(LL) = CP(LL)+RI(LL,M)*CC(M)
                   VP(LL) = VP(LL)+RI(LL,M)*VV(M)
                ENDDO
             ENDDO
             TMP = CP(1)*VP(2)-CP(2)*VP(1)

C            PREVENT TMP TO BE TOO SMALL, SIGN IS IRRELEVANT
             TMP = AMAX1(1.0E-4,ABS(TMP))

c$omp        parallel do private(i,j,jy,fv,rt)
             DO  J=1,NROW
                JY = (J-1)
                IF (JY.GT.NR2)  JY=JY-NROW
                DO  I=1,NNNN/2
                   FV     = ABS((JY*CP(1)-(I-1)*CP(2))/TMP)
                   RT     = 1.0-FV/FM
                   W(I,J) = W(I,J)+AMAX1(RT,0.0)
                ENDDO
             ENDDO
          ENDIF
	ENDIF

        ENDDO

	INV = +1
        CALL FMRS_2(PROJ,NSAM,NROW,INV)
        IF (INV .EQ. 0)THEN
           CALL ERRT(38,'WTM',NE)
           RETURN
        ENDIF

c$omp   parallel do private(i,j,ww)
        DO  J=1,NROW
           DO  I=1,NNNN,2
              WW          = 1.0/W((I+1)/2,J)
              PROJ(I,J)   = PROJ(I,J)*WW
              PROJ(I+1,J) = PROJ(I+1,J)*WW
           ENDDO
	ENDDO

        INV = -1
        CALL FMRS_2(PROJ,NSAM,NROW,INV)
        END
@


1.26
log
@email_health_dept
@
text
@d4 2
a5 2
C WTM.F          ADDED ISELECT PARAMETER         SEP 03 ARDEAN LEITH                                                                *
C                PARTITION BUG                   SEP 03 ARDEAN LEITH
d29 1
a29 1
C  WTM(ISELECT,PROJ,W,NNNN,NSAM,NROW,SS,NANG,DIAMETER,K)                            *
d31 1
a31 2
C  PURPOSE:                                                            *
C              WEIGHTING FUNCTION IN 2D ACCORDING TO MVH
d33 9
a41 9
C   PARAMETERS:  ISELECT,    SELECTED PROJECTIONS LIST           (SENT)
C                PROJ                                       (SENT/RET.)
C                W                                               (WORK)
C                NNNN                                            (SENT)
C                NSAM,NROW                                       (SENT)
C                SS                                              (SENT)
C                NANG                                            (SENT)
C                DIAMETER                                        (SENT)
C                K         CURRENT PROJ/ANGLE NUMBER             (SENT)
@


1.25
log
@GPL_2010
@
text
@d13 1
a13 1
C=* Email: spider@@wadsworth.org                                        *
@


1.24
log
@GPL License fixed
@
text
@a7 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d9 5
a13 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d15 1
a15 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.23
log
@HRI GPL License used
@
text
@a7 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d11 1
a11 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a30 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.22
log
@no change
@
text
@d9 24
@


1.21
log
@no change
@
text
@a1 1

@


1.20
log
@no change
@
text
@d2 1
@


1.19
log
@no change
@
text
@d1 1
@


1.18
log
@no change
@
text
@a0 1

@


1.17
log
@no change
@
text
@d1 1
@


1.16
log
@partition bug
@
text
@a0 1

@


1.15
log
@for partition
@
text
@d4 2
a5 1
C WTM.F          ADDED ISELECT PARAMETER              6/3/03 al                                                                    *
d34 1
a34 1
        SUBROUTINE WTM(ISELECT,PROJ,W,NNNN,NSAM,NROW,SS,NANG,
d37 5
a41 2
        DIMENSION  SS(6,NANG),PROJ(NNNN,NROW),W(NNNN/2,NROW)
	DIMENSION  CC(3),VV(3),CP(2),VP(2),RI(3,3)
d78 3
a80 1
        L = ISELECT(LT)
@


1.14
log
@fm fixed again
@
text
@d4 1
a5 1
C                                                                      *
d15 1
a15 1
C                                                                      *
a18 1
C
d20 9
a28 1
C  PARAMETERS:                                                         *
a29 1
C        0         2         3         4         5         6         7 *
d33 2
a34 1
        SUBROUTINE WTM(PROJ,W,NNNN,NSAM,NROW,SS,NANG,DIAMETER,NUMP)
d42 9
a50 9
C         R(1,1)=CPHI*CTHETA*CPSI-SPHI*SPSI
C         R(2,1)=-CPHI*CTHETA*SPSI-SPHI*CPSI
C         R(3,1)=CPHI*STHETA
C         R(1,2)=SPHI*CTHETA*CPSI+CPHI*SPSI
C         R(2,2)=-SPHI*CTHETA*SPSI+CPHI*CPSI
C         R(3,2)=SPHI*STHETA
C         R(1,3)=-STHETA*CPSI
C         R(2,3)=STHETA*SPSI
C         R(3,3)=CTHETA
d65 6
a70 6
c$omp parallel do private(i,j)
	DO    J=1,NROW
	 DO    I=1,NNNN/2
c set w to 1 - projection with itself
	  W(I,J)=1.0
	 ENDDO
d73 7
a79 6
c	if(nang.gt.0) goto 77
	DO  L=1,NANG
	IF(L.NE.NUMP)  THEN
	CC(1)=SS(2,L)*SS(4,L)*SS(3,NUMP)-SS(3,L)*SS(2,NUMP)*SS(4,NUMP)
	CC(2)=SS(3,L)*SS(1,NUMP)*SS(4,NUMP)-SS(1,L)*SS(4,L)*SS(3,NUMP)
	CC(3)=SS(1,L)*SS(4,L)*SS(2,NUMP)*SS(4,NUMP)-
d81 42
a122 40
	ccn=amax1(amin1(sqrt(cc(1)**2+cc(2)**2+cc(3)**2),1.0),-1.0)
	alpha=RAD_TO_DGR*asin(ccn)
	if(alpha.gt.180.0) alpha=alpha-180.0
	if(alpha.gt.90.0) alpha=180.0-alpha
	if(alpha.lt.1.0e-6)  then
c$omp parallel do private(i,j)
	 DO  J=1,NROW
	  DO  I=1,NNNN/2
	   w(i,j)=w(i,j)+1.0
	  ENDDO
	 ENDDO
	else
         fm=THICK/(abs(sin(alpha*DGR_TO_RAD)))
	 cc=cc/ccn
	 vv(1)=SS(2,L)*SS(4,L)*cc(3)-SS(3,L)*cc(2)
	 vv(2)=SS(3,L)*cc(1)-SS(1,L)*SS(4,L)*cc(3)
	 vv(3)=SS(1,L)*SS(4,L)*cc(2)-SS(2,L)*SS(4,L)*cc(1)
	 cp=0.0
	 vp=0.0
	 do    LL=1,2
	  do    m=1,3
	   cp(LL)=cp(LL)+ri(LL,m)*cc(m)
	   vp(LL)=vp(LL)+ri(LL,m)*vv(m)
	  enddo
	 enddo
	 tmp=cp(1)*vp(2)-cp(2)*vp(1)
C prevent tmp to be too small, sign is irrelevant
	 tmp=amax1(1.0E-4,abs(tmp))
C
c$omp parallel do private(i,j,jy,fv,rt)
	 DO  J=1,NROW
	  JY=(J-1)
          IF(JY.GT.NR2)  JY=JY-NROW
	  DO  I=1,NNNN/2
	   fv=abs((JY*cp(1)-(I-1)*cp(2))/tmp)
	   rt=1.0-fv/fm
	   W(I,J)=W(I,J)+AMAX1(rt,0.0)
	  ENDDO
	 ENDDO
	endif
d124 2
a125 1
	ENDDO
d127 4
a130 4
	INV=+1
	CALL   FMRS_2(PROJ,NSAM,NROW,INV)
          IF(INV.EQ.0)THEN
           CALL ERRT(38,'BMQ',NE)
d132 9
a140 8
	  ENDIF
c$omp parallel do private(i,j,ww)
	DO  J=1,NROW
	 DO  I=1,NNNN,2
	  WW=1.0/W((I+1)/2,J)
	  PROJ(I,J)=PROJ(I,J)*WW
	  PROJ(I+1,J)=PROJ(I+1,J)*WW
	 ENDDO
d142 4
a145 3
	INV=-1
	CALL   FMRS_2(PROJ,NSAM,NROW,INV)
	END
@


1.13
log
@header
@
text
@d60 1
a60 1
	DO    I=1,NNNN/2
d62 2
a63 1
	W(I,J)=1.0
a64 1
	ENDDO
d67 2
a68 2
	DO  5  L=1,NANG
	IF(L.EQ.NUMP)  GOTO  5
a76 1
        fm=THICK/(abs(sin(alpha*DGR_TO_RAD)))
d79 5
a83 5
	DO  J=1,NROW
	DO  I=1,NNNN/2
	w(i,j)=w(i,j)+1.0
	ENDDO
	ENDDO
d85 14
a98 15
	do    M=1,3
	cc(M)=cc(M)/ccn
	enddo
	vv(1)=SS(2,L)*SS(4,L)*cc(3)-SS(3,L)*cc(2)
	vv(2)=SS(3,L)*cc(1)-SS(1,L)*SS(4,L)*cc(3)
	vv(3)=SS(1,L)*SS(4,L)*cc(2)-SS(2,L)*SS(4,L)*cc(1)
	do    LL=1,2
	cp(LL)=0.0
	vp(LL)=0.0
	do    m=1,3
	cp(lL)=cp(lL)+ri(lL,m)*cc(m)
	vp(lL)=vp(lL)+ri(lL,m)*vv(m)
	enddo
	enddo
	tmp=cp(1)*vp(2)-cp(2)*vp(1)
d100 2
a101 2
	tmp=amax1(1.0E-4,abs(tmp))

d103 11
a113 9
	DO  J=1,NROW
	JY=(J-1)
        IF(JY.GT.NR2)  JY=JY-NROW
	DO  I=1,NNNN/2

	fv=abs((JY*cp(1)-(I-1)*cp(2))/tmp)
	rt=1.0-fv/fm
	W(I,J)=W(I,J)+AMAX1(rt,0.0)
	ENDDO
a114 2
	endif
5	CONTINUE
d116 1
a116 1
77	INV=+1
d119 2
a120 2
          CALL ERRT(38,'BMQ',NE)
          RETURN
d124 5
a128 5
	DO  I=1,NNNN,2
	WW=1.0/W((I+1)/2,J)
	PROJ(I,J)=PROJ(I,J)*WW
	PROJ(I+1,J)=PROJ(I+1,J)*WW
	ENDDO
@


1.12
log
@cosmetic
@
text
@d1 18
a18 1
C WEIGHTING FUNCTION IN 2D ACCORDING TO MVH
d20 7
@


1.11
log
@OpenMP
@
text
@d1 1
a1 1
C weighting function in 2D according to MvH
d4 1
d10 1
a10 1
C
d30 1
a30 1
C
d32 1
a32 1
C
d41 1
a41 1
C
d79 1
a79 1
C
d85 1
a85 1
C
d93 1
a93 1
C
@


1.10
log
@correction arround ccn=
@
text
@d33 1
a33 1
c$doacross local(i,j)
d41 1
d50 5
a54 2
	if(abs(alpha).lt.1.0e-6)  then
c$doacross local(i,j)
a60 1
        fm=THICK/(abs(sin(alpha*DGR_TO_RAD)))
d79 1
a79 1
c$doacross local(i,j,jy,fv,rt)
d93 1
a93 1
	INV=+1
d99 1
a99 1
c$doacross local(i,j,ww)
@


1.9
log
@*** empty log message ***
@
text
@a40 1
c	if(nang.gt.0) goto 77
d49 1
a49 4
	if(alpha.gt.180.0) alpha=alpha-180.0
	if(alpha.gt.90.0) alpha=180.0-alpha
        fm=THICK/(abs(sin(alpha*DGR_TO_RAD)))
	if(alpha.lt.1.0e-6)  then
d57 1
d90 1
a90 1
77	INV=+1
@


1.8
log
@trig
@
text
@d52 1
a52 1
        fm=THICK/(abs(sind(alpha)*DGR_TO_RAD))
@


1.7
log
@*** empty log message ***
@
text
@d6 3
a8 1
CNO_SAVE
d49 1
a49 1
	alpha=asind(ccn)
d52 1
a52 1
        fm=THICK/(abs(sind(alpha)))
@


1.6
log
@weighting fixed
@
text
@d46 1
a46 1
	ccn=amax0(amin0(sqrt(cc(1)**2+cc(2)**2+cc(3)**2),1.0),-1.0)
@


1.5
log
@fixed call to FMRS_2
@
text
@d46 1
a46 1
	ccn=sqrt(cc(1)**2+cc(2)**2+cc(3)**2)
@


1.4
log
@*** empty log message ***
@
text
@d106 1
a106 1
	CALL   FMRS_2R(PROJ,NSAM,NROW,INV)
@


1.3
log
@call fmrs_2 - will use libfft
@
text
@d32 2
a33 2
	DO  1  J=1,NROW
	DO  1  I=1,NNNN/2
d35 3
a37 1
1	W(I,J)=1.0
d53 5
a57 3
	DO 6 J=1,NROW
	DO 6 I=1,NNNN/2
6	w(i,j)=w(i,j)+1.0
d59 3
a61 2
	do  7  M=1,3
7	cc(M)=cc(M)/ccn
d65 1
a65 1
	do  8  LL=1,2
d68 1
a68 1
	do  8  m=1,3
d70 3
a72 1
8	vp(lL)=vp(lL)+ri(lL,m)*vv(m)
d78 1
a78 1
	DO 35 J=1,NROW
d81 1
a81 1
	DO 35 I=1,NNNN/2
d86 2
a87 1
35	CONTINUE
d98 2
a99 2
	DO 36 J=1,NROW
	DO 36 I=1,NNNN,2
d102 3
a104 1
36	PROJ(I+1,J)=PROJ(I+1,J)*WW
@


1.2
log
@division by zero for delta(theta)=90 prevented
@
text
@d84 1
a84 1
	CALL   FMRS_2R(PROJ,NNNN,NSAM,NROW,INV)
d96 1
a96 1
	CALL   FMRS_2R(PROJ,NNNN,NSAM,NROW,INV)
@


1.1
log
@Initial revision
@
text
@d67 2
@
