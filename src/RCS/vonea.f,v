head	1.7;
access;
symbols
	pre_getangas:1.5
	GPL2010:1.5
	pre_GPL2010:1.4
	pre_var_equation:1.4
	pre_fftwrings:1.4
	pre_opfiles:1.4
	src:1.4;
locks; strict;
comment	@c @;


1.7
date	2012.04.19.14.05.38;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2012.04.16.19.06.34;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.24.13.27.15;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.21.15.30.42;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.17.15.56.45;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.12.19.28.06;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.11.15.48.13;	author leith;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ATAN2(XD,YD) * RAD_TO_DGR  was wrong
@
text
@C ++********************************************************************
C                                                                      *
C   VONEA                                                              *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   SUBROUTINE VONEA
C
C   PURPOSE: 
C
C   VARIABLES: 
C               
C **********************************************************************

      SUBROUTINE VONEA()

      INCLUDE 'CMBLOCK.INC'
      INCLUDE 'CMLIMIT.INC'

      LOGICAL                         :: HALF,NEWFILE,DEBUGGING
      REAL, ALLOCATABLE               :: THETA(:),PHI(:)
      REAL, DIMENSION(6)              :: DLIST
      CHARACTER (LEN=MAXNAM)          :: DOCNAM
      CHARACTER (LEN=1)               :: ANSW

      REAL, PARAMETER        :: QUADPI = 3.14159265358979323846 
      REAL, PARAMETER        :: RAD_TO_DGR = (180.0/QUADPI)

      DEBUGGING = .FALSE.

      CALL  RDPRI1S(NPTS,NOT_USED,'NUMBER OF PROJECTIONS',IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      CALL RDPRMC(ANSW,NLET,.TRUE.,'HALF SPHERE (Y/N)',NULL,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      HALF = (ANSW .EQ. 'Y')
      IF (HALF) NPTS = 2 * NPTS
 
      ALLOCATE(THETA(NPTS),PHI(NPTS),STAT=IRTFLG)
      IF (IRTFLG .NE. 0) THEN
         CALL  ERRT(46,'VONEA',NPTS*2)
         GOTO 9999
      ENDIF

      NDOCT = 99
      CALL OPENDOC(DOCNAM,.TRUE.,NLET,NDOCT,NDOC,.TRUE.,
     &           'ANGULAR DOCUMENT',.FALSE.,.TRUE.,.TRUE.,
     &            NEWFILE,IRTFLG)
      IF (IRTFLG .EQ. -1) GOTO 9999

      CALL LUNDOCPUTCOM(NDOC,' PSI, THETA, AND PHI',IRTFLG)

      PSI  = 0.0

      SVAL =  3.6 / SQRT(FLOAT(NPTS))
      PHIT =  0.0

      PHI(1)   =  0.0
      THETA(1) =  0.0

      DO K = 2 , NPTS-1
         ZVAL = -1 + 2 * FLOAT(K) / FLOAT(NPTS)
         RVAL = SQRT(1 - ZVAL * ZVAL)
         PHIT = PHIT + SVAL / RVAL

         XD   = COS(PHIT) * RVAL
         YD   = SIN(PHIT) * RVAL
         ZD   = ZVAL

#if defined (SP_GFORTRAN)
         PHI  (NPTS - K + 1) = ATAN2(XD,YD) * RAD_TO_DGR
         THETA(NPTS - K + 1) = ACOS(ZVAL)   * RAD_TO_DGR
#else
         PHI  (NPTS - K + 1) = ATAN2D(XD,YD)
         THETA(NPTS - K + 1) = ACOSD(ZVAL)
#endif
         IF (DEBUGGING)WRITE(6,90) ZVAL,RVAL,PHIT,XD,YD,PHI(K),THETA(K)
90       FORMAT(3(F8.2,' '),' - ',2(F8.2,' ')' - ',3(F8.2,' '))
      ENDDO

      PHI(NPTS)   =  0.0
      THETA(NPTS) =  180

       NGOT = NPTS

       IF (HALF) THEN
C         REMOVE BOTTEM HALF OF SPHERE
          NGOT = 0
          DO I = 1,NPTS
             IF ( THETA(I) .GT. 90.0) CYCLE
             NGOT        = NGOT + 1
             PHI(NGOT)   = PHI(I)
             THETA(NGOT) = THETA(I)
          ENDDO
       ENDIF

      DO KEY = 1,NGOT
C         WRITE(6,91)PHI(KEY), THETA(KEY)
91        FORMAT(2(F8.2,' '),' - ',3(F8.2,' ')' ',3(F8.2,' '))

          DLIST(1) = PSI
          DLIST(2) = THETA(KEY)
          DLIST(3) = PHI(KEY)

         CALL LUNDOCWRTDAT(NDOC,KEY,DLIST,3,IRTFLG)

          IF (DEBUGGING) THEN
c             WRITE(6,92) KEY, PSI, THETA(KEY), PHI(KEY)
92           FORMAT(' Psi, Theta & Phi:',i3,'): ',
     &                F8.2,', ',F8.2,', ',F8.2)
          ENDIF
       ENDDO

       IF (HALF) THEN
          WRITE(NOUT,93) NGOT
93        FORMAT(' ACTUAL PROJECTIONS IN HEMISPHERE: ',I7)
       ENDIF

       CALL REG_SET_NSEL(1,1,FLOAT(NGOT),0.0,0.0,0.0,0.0,IRTFLG)

       IRTFLG = 0
9999   IF (ALLOCATED(THETA)) DEALLOCATE(THETA)
       IF (ALLOCATED(PHI))   DEALLOCATE(PHI)
       CLOSE(NDOCT)

       END



@


1.6
log
@#if defined (SP_GFORTRAN)
PHI  (NPTS - K + 1) = ATAN2(XD*DGR_TO_RAD, YD*DGR_TO_RAD)
THETA(NPTS - K + 1) = ACOS(ZVAL*DGR_TO_RAD)
@
text
@d47 1
a47 1
      REAL, PARAMETER        :: DGR_TO_RAD = (QUADPI/180)
d92 2
a93 2
         PHI  (NPTS - K + 1) = ATAN2(XD*DGR_TO_RAD, YD*DGR_TO_RAD)
         THETA(NPTS - K + 1) = ACOS(ZVAL*DGR_TO_RAD)
@


1.5
log
@GPL_2010
@
text
@d41 1
a41 1
      REAL, ALLOCATABLE, DIMENSION(:) :: THETA,PHI
d46 3
d91 5
a95 1
         PHI(NPTS - K + 1)   = ATAN2D(XD,YD)
d97 1
a97 1

@


1.4
log
@common debug -> debug1 compiler balks
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.3
log
@*** empty log message ***
@
text
@d44 1
a44 1
      LOGICAL                         :: HALF,NEWFILE,DEBUG
d50 1
a50 1
      DEBUG = .FALSE.
d95 1
a95 1
         IF (DEBUG) WRITE(6,90) ZVAL,RVAL,PHIT,XD,YD,PHI(K),THETA(K)
d125 1
a125 1
          IF (DEBUG) THEN
@


1.2
log
@new
@
text
@d84 7
a90 6
         ZVAL     = -1 + 2 * FLOAT(K) / FLOAT(NPTS)
         RVAL     = SQRT(1 - ZVAL * ZVAL)
         PHIT     = PHIT + SVAL / RVAL

         XD       = COS(PHIT) * RVAL
         YD       = SIN(PHIT) * RVAL
@


1.1
log
@new
@
text
@d3 1
a3 1
C   VONEA                                                      *
d44 1
a44 1
      LOGICAL                         :: HALF,NEWFILE,SPIRAL,MOVE,DEBUG
d46 3
a48 6
      DOUBLE PRECISION, ALLOCATABLE   :: X(:),Y(:),Z(:)
      REAL, DIMENSION(2)              :: DLIST
      DOUBLE PRECISION                :: VEC1(3), VEC2(3)

      CHARACTER (LEN=MAXNAM)  :: DOCNAM
      CHARACTER (LEN=1)       :: ANSW
d59 1
a59 3
      IF (HALF) NPTS = 2* NPTS
      SPIRAL = .TRUE.
      MOVE   = .FALSE.
d61 1
a61 2
      ALLOCATE(THETA(NPTS),PHI(NPTS),X(NPTS),Y(NPTS),Z(NPTS),
     &         STAT=IRTFLG)
d63 1
a63 1
         CALL  ERRT(46,'VONEA',NPTS*10)
a66 5
      ITER = 100

      CALL PTS_ON_SPHERE(NPTS,ITER,X,Y,Z,HALF,SPIRAL,MOVE,NGOT,IRTFLG)
      IF (IRTFLG .NE. 0) GOTO 9999

d73 40
a112 1
      CALL LUNDOCPUTCOM(NDOC,' PHI AND THETA',IRTFLG)
d115 2
d118 3
a120 23
C         ROTATION AROUND Z
          VEC1(1) = 0.0
          VEC1(2) = 1.0
          VEC1(3) = 0.0

          VEC2(1) = X(KEY)
          VEC2(2) = Y(KEY)
          VEC2(3) = 0.0

          CALL INCANGVT(VEC1,VEC2,COSANG,PHI(KEY),IRTFLG)

C         ROTATION AROUND X
          VEC1(1) = 0.0
          VEC1(2) = 0.0
          VEC1(3) = 1.0

          VEC2(1) = 0.0
          VEC2(2) = Y(KEY)
          VEC2(3) = Z(KEY)
          CALL INCANGVT(VEC1,VEC2, COSANG, THETA(KEY),IRTFLG)
           
cc        write(6,90)x(KEY),y(KEY),Z(KEY), phi(KEY),theta(KEY)
90        format(3(f8.2,' '),' ',3(f8.2,' ')' ',3(f8.2,' '))
d122 1
a122 3
          DLIST(1) = PHI(KEY)
          DLIST(2) = THETA(KEY)
          CALL LUNDOCWRTDAT(NDOC,KEY,DLIST,2,IRTFLG)
d125 3
a127 2
             WRITE(6,92) KEY, PHI(KEY),THETA(KEY)
92           FORMAT(' Phi & Theta:',i3,'): ',F8.2,', ',F8.2)
d132 2
a133 2
          WRITE(NOUT,91) NGOT
91        FORMAT(' ACTUAL PROJECTIONS IN HEMISPHERE: ',I7)
a140 3
       IF (ALLOCATED(X))     DEALLOCATE(X)
       IF (ALLOCATED(Y))     DEALLOCATE(Y)
       IF (ALLOCATED(Z))     DEALLOCATE(Z)
a146 31
C ***************************  INCANGVT  ******************************

        SUBROUTINE INCANGVT(VEC1,VEC2,COSANG,ANG,IRTFLG)
  
        DOUBLE PRECISION ::  VEC1(3),VEC2(3),DIS1,DIS2,DIS13,DTINY

        DTINY = TINY(DTINY)
        
        DIS1 = VEC1(1)*VEC1(1) + VEC1(2)*VEC1(2) + VEC1(3)*VEC1(3)
        DIS2 = VEC2(1)*VEC2(1) + VEC2(2)*VEC2(2) + VEC2(3)*VEC2(3)

C       FIND ANGLE BETWEEN LINES  
        DIS13 = DIS1 * DIS2

        IF (ABS(DIS13) .LT. DTINY) THEN
C          REJECT DUPLICATED POINTS OR GET DIVISION BY ZERO!
           COSANG = 1.0
           ANG    = 0.0
           IRTFLG = 1

        ELSE 
C          COSANG =  DOT(VEC1,VEC2) / SQRT(DIS13)
           COSANG = (VEC1(1)*VEC2(1) + 
     &               VEC1(2)*VEC2(2) + 
     &               VEC1(3)*VEC2(3))  / SQRT(DIS13)
           ANG    =  ACOSD(COSANG)
           IRTFLG = 0
        ENDIF

        END
 
@

