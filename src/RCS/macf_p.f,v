head	1.18;
access;
symbols
	pre_mrcs:1.18
	healthdept_2018:1.18
	pre_getangas:1.17
	GPL2010:1.17
	pre_GPL2010:1.16
	pre_var_equation:1.16
	pre_fftwrings:1.15
	pre_opfiles:1.14
	src:1.14
	best-code:1.14
	x-named-regs:1.14
	x:1.14
	v13-00:1.14
	pre_GPL:1.12
	prec_CA:1.12
	noindx:1.12
	Bproc:1.10
	oct21:1.7
	last77:1.6;
locks; strict;
comment	@c @;


1.18
date	2018.10.03.14.34.09;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2010.06.24.13.26.06;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2009.04.28.13.15.35;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2008.02.19.16.33.45;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.17.20.39.04;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.17.18.29.27;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.10.16.13.04.22;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.09.18.22.24.49;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	2000.05.18.15.45.00;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	99.11.05.16.48.03;	author bimal;	state Exp;
branches;
next	1.8;

1.8
date	99.11.05.14.54.24;	author bimal;	state Exp;
branches;
next	1.7;

1.7
date	99.06.03.20.50.54;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	98.02.18.21.59.24;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	97.10.10.17.47.18;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	96.04.04.15.07.05;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.01.25.15.55.13;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.06.55;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.49.58;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.18
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C MACF_P.F
C                        ACRS_ CALLS ADDED LS      FEB 2008 ArDean Leith
C                        ACRS PARAMETERS           APR 2009 ArDean Leith
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C PURPOSE:         CROSS CORRELATION - MASKED AND NORMALIZED 

C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE MACF_P(NSAM,NROW,X, LSD,IRA,MODE,SMD)

        INCLUDE 'CMBLOCK.INC'

        DIMENSION          X(LSD,2*NROW)
        DOUBLE PRECISION   AVE
        CHARACTER*1        MODE,SMD

        R=IRA
        NS2=NSAM/2+1
        NR2=NROW/2+1

c$omp    parallel do private(j,i)
         DO J=1,2*NROW
          DO I=NSAM+1,2*NSAM
           X(I,J)=0.0
	  ENDDO	 
	 ENDDO
	
c$omp    parallel do private(j,i)
         DO J=NROW+1,2*NROW
          DO I=1,NSAM
           X(I,J)=0.0
	  ENDDO
	 ENDDO
         AVE=0.0
         ILE=0

c$omp    parallel do private(j,i,a,tr) reduction(+:AVE,ILE)
         DO J=1,NROW
          A=FLOAT(J-NR2)**2
           DO I=1,NSAM
            TR=SQRT(FLOAT(I-NS2)**2+A)
            IF (TR.GT.R)  THEN
             X(I,J)=0.0
            ELSE
             AVE=AVE+X(I,J)
             ILE=ILE+1
            ENDIF
	   ENDDO
	 ENDDO
         AVE=AVE/ILE
	
c$omp    parallel do private(j,i,a,tr)
         DO J=1,NROW
          A=FLOAT(J-NR2)**2
          DO I=1,NSAM
           TR=SQRT(FLOAT(I-NS2)**2+A)
           IF (TR.LE.R)  X(I,J)=X(I,J)-AVE
	  ENDDO
	 ENDDO 

         INS=1
         CALL FMRS_2(X,2*NSAM,2*NROW,INS)
         IF (INS.EQ.0)  THEN
            CALL ERRT(38,'AC MS ',NE)
            RETURN
         ENDIF

         LS = (2*NSAM)+2 
 	 IF (SMD .EQ. 'S')  THEN
            CALL ACRS_2S(X, LS,2*NSAM,2*NROW)
	 ELSE
            CALL ACRS_2(X, LS,2*NSAM,2*NROW)
	 ENDIF

         IF (MODE .EQ. 'F')  THEN
            NRL=1
            NRU=2*NROW
            NSL=1
            NSU=2*NSAM
         ELSE
            NRL=NR2
            NRU=NROW+NR2-1
            NSL=NS2
            NSU=NSAM+NS2-1
         ENDIF
	 D1=1./REAL(NINT(3.1415926*R*R)*ILE)
c$omp    parallel do private(j,i,qt,a,t,m),shared(d1)
         DO J=NRL,NRU
            QT=FLOAT(J-(NROW+1))**2
            DO I=NSL,NSU
               A=SQRT(FLOAT(I-(NSAM+1))**2+QT)/2.0
               IF(A.EQ.0.0)  THEN
                  X(I,J)=X(I,J)*D1
               ELSE
                  IF(R.GT.A)  THEN
                     T=2.0*ATAN(SQRT((R/A)**2-1.0))
C                    Should be NINT without +0.5, but omp won't take it...
                     M=INT(R*R*(T-SIN(T))+0.5)

C                   NORMALIZATION IS APPLIED TO THESE AC COEFF. WHICH WERE
C                   ESTIMATED FROM AT LEAST  5 PIXELS
C                   OTHERWISE AC COEFFS. ARE SET TO ZERO.

                    IF (M.GE.5)  THEN
                       X(I,J)=X(I,J)/FLOAT(M)*ILE
                    ELSE
                       X(I,J)=0.0
                    ENDIF
                 ELSE
                    X(I,J)=0.0
                 ENDIF
              ENDIF
	   ENDDO	
	ENDDO
        END

@


1.17
log
@GPL_2010
@
text
@d13 1
a13 1
C=* Email: spider@@wadsworth.org                                        *
@


1.16
log
@*** empty log message ***
@
text
@a7 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d9 5
a13 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d15 1
a15 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.15
log
@ccrs_ added parameter
@
text
@d6 1
d9 1
a9 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d33 2
a34 1
C IMAGE_PROCESSING_ROUTINE
a36 1
C
d39 1
a39 1
        SUBROUTINE  MACF_P(NSAM,NROW,X,LSD,IRA,MODE,SMD)
d52 2
a53 2
         DO    J=1,2*NROW
          DO    I=NSAM+1,2*NSAM
d59 2
a60 2
         DO    J=NROW+1,2*NROW
          DO    I=1,NSAM
d68 1
a68 1
         DO    J=1,NROW
d70 1
a70 1
           DO    I=1,NSAM
d72 1
a72 1
            IF(TR.GT.R)  THEN
d83 1
a83 1
         DO    J=1,NROW
d85 1
a85 1
          DO    I=1,NSAM
d87 1
a87 1
           IF(TR.LE.R)  X(I,J)=X(I,J)-AVE
d92 1
a92 1
         CALL  FMRS_2(X,2*NSAM,2*NROW,INS)
d99 2
a100 2
 	 IF (SMD.EQ.'S')  THEN
            CALL ACRS_2S(X,X, LS,2*NSAM,2*NROW)
d102 1
a102 1
            CALL ACRS_2 (X,X, LS,2*NSAM,2*NROW)
@


1.14
log
@GPL License fixed
@
text
@d5 1
a5 1
C
d50 1
a50 1
c$omp parallel do private(j,i)
d57 1
a57 1
c$omp parallel do private(j,i)
d65 2
a66 1
c$omp parallel do private(j,i,a,tr) reduction(+:AVE,ILE)
d81 1
a81 1
c$omp parallel do private(j,i,a,tr)
a88 1
C     CALL  AUTCOR(X,2*NSAM,2*NROW)
d92 1
a92 1
         IF(INS.EQ.0)  THEN
d97 3
a99 2
	 IF (SMD.EQ.'S')  THEN
            CALL  ACRS_2S(X,X,2*NSAM,2*NROW)
d101 1
a101 1
            CALL  ACRS_2(X,X,2*NSAM,2*NROW)
d115 2
a116 2
	D1=1./REAL(NINT(3.1415926*R*R)*ILE)
c$omp parallel do private(j,i,qt,a,t,m),shared(d1)
@


1.13
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a6 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
a30 1
C **************************************************************************
a36 1
C--************************************************************************
@


1.12
log
@pawels changes
@
text
@d2 1
d7 1
d9 1
d11 24
d41 1
d48 1
@


1.11
log
@*** empty log message ***
@
text
@d1 1
d4 1
a4 1
C $$ MACF_P.FOR
d21 1
a21 3
C
C $$ MACF_P.FOR
C
d23 1
d25 5
a29 4
C
        DIMENSION         X(LSD,2*NROW)
        DOUBLE PRECISION  AVE
        CHARACTER*1         MODE,SMD
d73 1
a73 1
C
d77 2
a78 2
          CALL ERRT(38,'AC MS ',NE)
          RETURN
d80 3
a82 2
	 IF(SMD.EQ.'S')  THEN
          CALL  ACRS_2S(X,X,2*NSAM,2*NROW)
d84 1
a84 1
          CALL  ACRS_2(X,X,2*NSAM,2*NROW)
d86 1
a86 1
C
d88 4
a91 4
         NRL=1
         NRU=2*NROW
         NSL=1
         NSU=2*NSAM
d93 4
a96 4
         NRL=NR2
         NRU=NROW+NR2-1
         NSL=NS2
         NSU=NSAM+NS2-1
d98 3
a100 3
	
c$omp parallel do private(j,i,qt,a,t,m)
         DO    J=NRL,NRU
d102 1
a102 1
            DO    I=NSL,NSU
d105 1
a105 1
                  X(I,J)=X(I,J)/NINT(3.1415926*R*R)*ILE
d109 8
a116 7
                     M=NINT(R*R*(T-SIN(T)))
C
C  NORMALIZATION IS APPLIED TO THESE AC COEFF. WHICH WERE
C  ESTIMATED FROM AT LEAST  5 PIXELS
C  OTHERWISE AC COEFFS. ARE SET TO ZERO.
C
                    IF(M.GE.5)  THEN
d128 1
@


1.10
log
@reduction corrected
@
text
@d23 1
a23 1
        SUBROUTINE  MACF_P(NSAM,NROW,X,LSD,IRA,MODE)
d28 1
a28 1
        CHARACTER*1         MODE
d79 5
a83 1
         CALL  ACRS_2(X,X,2*NSAM,2*NROW)
@


1.9
log
@*** empty log message ***
@
text
@a25 3
  

    
a28 2


a33 1
	
d35 1
a35 1
         DO    I=NSAM+1,2*NSAM
d37 1
a37 1
	 ENDDO	 
d42 1
a42 1
         DO    I=1,NSAM
d44 1
a45 1
	 ENDDO
d48 1
a48 1
c$omp parallel do private(j,i,a,tr) reduction(+:AVE), reduction(+:ILE)
d50 10
a59 10
         A=FLOAT(J-NR2)**2
         DO    I=1,NSAM
         TR=SQRT(FLOAT(I-NS2)**2+A)
         IF(TR.GT.R)  THEN
         X(I,J)=0.0
         ELSE
         AVE=AVE+X(I,J)
         ILE=ILE+1
         ENDIF
	 ENDDO
d65 5
a69 5
         A=FLOAT(J-NR2)**2
         DO    I=1,NSAM
         TR=SQRT(FLOAT(I-NS2)**2+A)
         IF(TR.LE.R)  X(I,J)=X(I,J)-AVE
	 ENDDO
d76 2
a77 2
         CALL ERRT(38,'AC MS ',NE)
         RETURN
@


1.8
log
@adapted for dynamical memory allocation
@
text
@d24 1
a24 1
        INCLUDE '/net/ithaca/usr1/spider/src/CMBLOCK.INC'
@


1.7
log
@OpenMP
@
text
@d15 1
d17 1
d23 2
a24 2
         SUBROUTINE  MACF_P(LUN1,LUN2,NSAM,NROW,X,LSD,IRA,MODE)
         INCLUDE 'CMBLOCK.INC'
d26 12
a37 10
         DIMENSION         X(LSD,2*NROW)
         DOUBLE PRECISION  AVE
         CHARACTER*1         MODE
CNO_SAVE
         R=IRA
         NS2=NSAM/2+1
         NR2=NROW/2+1
         DO    J=1,NROW
          CALL  REDLIN(LUN1,X(1,J),NSAM,J)
	 ENDDO
d39 1
d45 1
d54 1
d68 1
d98 1
a98 1
C
d101 9
a109 9
         QT=FLOAT(J-(NROW+1))**2
         DO    I=NSL,NSU
         A=SQRT(FLOAT(I-(NSAM+1))**2+QT)/2.0
         IF(A.EQ.0.0)  THEN
         X(I,J)=X(I,J)/NINT(3.1415926*R*R)*ILE
         ELSE
         IF(R.GT.A)  THEN
         T=2.0*ATAN(SQRT((R/A)**2-1.0))
         M=NINT(R*R*(T-SIN(T)))
d115 12
a126 21
         IF(M.GE.5)  THEN
         X(I,J)=X(I,J)/FLOAT(M)*ILE
         ELSE
         X(I,J)=0.0
         ENDIF
         ELSE
         X(I,J)=0.0
         ENDIF
         ENDIF
	 ENDDO	
	 ENDDO
         IF (MODE .EQ. 'F')  THEN
         DO    J=1,2*NROW
          CALL  WRTLIN(LUN2,X(1,J),2*NSAM,J)
	 ENDDO
         ELSE
         DO    J=NR2,NROW+NR2-1
          CALL  WRTLIN(LUN2,X(NS2,J),NSAM,J-NR2+1)
	 ENDDO
         ENDIF
         END
@


1.6
log
@new fft
@
text
@d34 1
a34 1
c$doacross local(j,i)
d40 1
a40 1
c$doacross local(j,i)
d61 1
a61 1
c$doacross local(j,i,a,tr)
d91 1
a91 1
c$doacross local(j,i,qt,a,t,m)
@


1.5
log
@*** empty log message ***
@
text
@d21 1
a21 1
         SUBROUTINE  MACF_P(LUN1,LUN2,NSAM,NROW,X,WORK,IRA,MODE)
d24 1
a24 1
         DIMENSION         X(2*NSAM,2*NROW),WORK(*)
d26 1
a26 1
         CHARACTER         MODE
d34 1
d40 1
d61 1
d66 1
a66 1
         IF(TR.LE.R)  X(I,J)=-AVE+X(I,J)
d72 1
a72 1
         CALL  FMR_2(X,2*NSAM,2*NROW,WORK,INS)
d77 1
a77 1
         CALL  CRSFN2(X,X,X,2*NSAM,2*NROW,WORK)
d91 1
@


1.4
log
@error 38
@
text
@d31 13
a43 8
         DO  1  J=1,NROW
1        CALL  REDLIN(LUN1,X(1,J),NSAM,J)
         DO  2  J=1,2*NROW
         DO  2  I=NSAM+1,2*NSAM
2        X(I,J)=0.0
         DO  3  J=NROW+1,2*NROW
         DO  3  I=1,NSAM
3        X(I,J)=0.0
d46 1
a46 1
         DO  5  J=1,NROW
d48 1
a48 1
         DO  5  I=1,NSAM
d56 2
a57 1
5        CONTINUE
d59 1
a59 1
         DO  6  J=1,NROW
d61 1
a61 1
         DO  6  I=1,NSAM
d64 2
a65 1
6        CONTINUE
d88 1
a88 1
         DO  21  J=NRL,NRU
d90 1
a90 1
         DO  21  I=NSL,NSU
d112 2
a113 1
21       CONTINUE
d115 7
a121 5
         DO  4  J=1,2*NROW
4        CALL  WRTLIN(LUN2,X(1,J),2*NSAM,J)
         ELSE
         DO  8  J=NR2,NROW+NR2-1
8        CALL  WRTLIN(LUN2,X(NS2,J),NSAM,J-NR2+1)
@


1.3
log
@nosave
@
text
@d64 1
a64 1
         CALL ERRT(10,'ACMS ',NE)
@


1.2
log
@cpp_lines_added
@
text
@a21 1
#ifdef SP_UNIX
a22 3
#else
         INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d27 1
a27 1
C
@


1.1
log
@Initial revision
@
text
@d22 3
d26 1
@
