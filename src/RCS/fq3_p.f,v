head	1.34;
access;
symbols
	pre_getangas:1.29
	GPL2010:1.29
	pre_GPL2010:1.28
	pre_var_equation:1.28
	pre_fftwrings:1.28
	pre_opfiles:1.28
	src:1.28
	best-code:1.28
	x-named-regs:1.28
	x:1.28
	v13-00:1.28
	pre_GPL:1.26
	prec_CA:1.24
	noindx:1.24
	Bproc:1.20
	oct21:1.19
	last77:1.18;
locks; strict;
comment	@c @;


1.34
date	2014.11.17.17.08.50;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2013.04.26.15.24.46;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2012.12.21.18.50.53;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2012.11.28.19.13.36;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2012.11.08.12.59.33;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2010.06.24.13.25.45;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2005.10.17.20.16.21;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2005.10.17.18.09.43;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2005.09.19.16.17.27;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2004.02.27.13.38.09;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2002.08.19.18.01.43;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2002.08.09.18.36.12;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2002.03.11.14.08.02;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2000.12.05.09.59.33;	author bimal;	state Exp;
branches;
next	1.20;

1.20
date	2000.01.06.17.32.07;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	99.06.03.20.50.52;	author pawel;	state Exp;
branches;
next	1.18;

1.18
date	98.03.05.15.49.27;	author pawel;	state Exp;
branches;
next	1.17;

1.17
date	98.03.05.15.38.29;	author pawel;	state Exp;
branches;
next	1.16;

1.16
date	98.02.26.16.48.25;	author pawel;	state Exp;
branches;
next	1.15;

1.15
date	98.02.12.17.17.19;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	97.10.06.20.43.51;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	97.07.30.13.18.43;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	96.11.22.15.33.39;	author ramani;	state Exp;
branches;
next	1.11;

1.11
date	96.08.29.21.21.41;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	96.08.29.17.49.41;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	96.07.10.13.53.38;	author mladjadj;	state Exp;
branches;
next	1.8;

1.8
date	96.04.04.15.21.26;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	96.03.28.19.22.04;	author ramani;	state Exp;
branches;
next	1.6;

1.6
date	96.01.16.15.38.06;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	95.06.27.20.18.34;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	95.04.13.14.10.06;	author ramani;	state Exp;
branches;
next	1.3;

1.3
date	94.12.28.15.50.26;	author ramani;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.05.27;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.49.00;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.34
log
@cosmetic
@
text
@
C++*********************************************************************
C
C FQ3_P.F    NSAM --> NX,==                     OCT 2012 ARDEAN LEITH
C            FREQ + PIXELS, COSMETIC            NOV 2012 G. KISHCHENKO 
C            FREQ UNIT CUTOFF = 1               ARP 2013 ARDEAN LEITH 
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2013 Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  FQ3_P(LUN,LUNO,B, LSD,N2S,N2R,N2L,NX,NY,NZ,IOPT)
C
C  PURPOSE: QUICK FILTERING OF THE REAL-SPACE FILE BY IN-CORE FFT
C 
C        LUN         LOGICAL UNIT NUMBER OF REAL-SPACE FILE TO BE FILTERED
C        LUNO        LOGICAL UNIT NUMBER OF REAL-SPACE OUTPUT FILE 
C	 B   	     BUFFER
C        NX,NY,NZ    DIMENSIONS OF REAL-SPACE FILE
C        N2S = 2*NX
C        N2R = 2*NY
C	 N2L = 2*NZ
C        IOPT        TYPE OF THE FILTER
C
C23456789012345678901234567890123456789012345678901234567890123456789012 
C--*********************************************************************

	SUBROUTINE FQ3_P(LUN,LUNO,B,LSD,N2S,N2R,N2L, NX,NY,NZ, IOPT)


        INCLUDE 'CMBLOCK.INC'

	REAL             :: B(LSD,N2R,N2L)
	DOUBLE PRECISION :: AVE
	REAL             :: F,F2
	REAL             :: FP, FS
	REAL             :: FP2, FS2

C       READ  IMAGE
	DO K=1,NZ
	   DO I=1,NY
	      NR = (K-1)*NY+I
	      CALL REDLIN(LUN,B(1,I,K),NX,NR)
	   ENDDO
	ENDDO

C       BORDER PADDING

	IF (N2S.NE.NX .AND. N2R.NE.NY .AND. N2L.NE.NZ)  THEN

          AVE = (SUM(B(1:NX,1:NY,1))     + SUM(B(1:NX,1:NY,NZ))   +
     &           SUM(B(1:NX,1,2:NZ-1))   + SUM(B(1:NX,NY,2:NZ-1)) +
     &           SUM(B(1,2:NY-1,2:NZ-1)) + SUM(B(NX,2:NY-1,2:NZ-1)))
     &		/REAL(4*(NX+NY+NZ)-16)

c$omp      parallel do private(i,j,k),reduction(+:ave)
	   DO K=1,NZ
	      DO J=1,NY
	         DO I=1,NX
	            AVE = AVE + B(I,J,K)
	         ENDDO
	      ENDDO
	   ENDDO

	   AVE = AVE/FLOAT(NX)/FLOAT(NY)/FLOAT(NZ)

c$omp      parallel do private(i,j,k)
	   DO K=1,NZ
	      DO J=1,N2R
	         DO I=NX+1,N2S
	            B(I,J,K) = AVE
	         ENDDO
	      ENDDO
	      DO J=NY+1,N2R
	         DO I=1,NX
	            B(I,J,K) = AVE
	         ENDDO
	      ENDDO
	   ENDDO

c$omp      parallel do private(i,j,k)
	   DO K=NZ+1,N2L
	      DO J=1,N2R
	         DO I=1,N2S
	            B(I,J,K) = AVE
	         ENDDO
	      ENDDO
	   ENDDO
	ENDIF

	INV = 1
	CALL FMRS_3(B,N2S,N2R,N2L,INV)
	IF (INV == 0) THEN
	   IOPT = -1
	   RETURN
	ENDIF

	IF (IOPT==7 .OR. IOPT==8 .OR. IOPT==9 .OR. IOPT==10) THEN
C          BUTTERWORTH FILTER OR  RAISED COSINE FILTER **************
	   EPS   =  0.882
	   AA    = 10.624

           CALL RDPRM2S(FP,FS,NOT_USED,
     &        'LOWER & UPPER LIMITING FREQ. (IN FREQ OR PIXEL UNITS)',
     &         IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

	   IF (FP > 1.0) THEN
              FP2 = FP / NX
              FS2 = FS / NX
           ELSE
              FP2 = FP
              FS2 = FS
	   ENDIF

	   ORD   = 2. * ALOG10(EPS / SQRT(AA**2-1.0))
	   ORD   = ORD / ALOG10(FP2 / FS2)
	   PARM1 = FP2 / (EPS)**(2. / ORD)

	ELSE

           PARM1 = 0.25
	   CALL RDPRM1S(PARM1,NOT_USED,
     &         'FILTER RADIUS (IN FREQUENCY OR PIXEL UNITS)',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           IF (PARM1<0.0 .OR. PARM1>1.0) PARM1 = 0.5 * PARM1 / (NX/2)

	   IF (IOPT==5 .OR. IOPT==6)  THEN
C             FERMI DISTRIBUTION FILTER ********************

              TEMP = 0.0
	      CALL RDPRM1S(TEMP,NOT_USED,
     &                    'TEMPERATURE (0=CUTOFF)',IRTFLG)
              IF (IRTFLG .NE. 0) RETURN

C             EXPONENTIAL FOR HIGH-PASS OPTION
	      IF (IOPT == 6) TEMP = -TEMP
	   ENDIF
        ENDIF

	NR2  = N2R / 2
	NL2  = N2L / 2
	X1   = FLOAT(N2S / 2)**2
	Y1   = FLOAT(NR2)**2
	Z1   = FLOAT(NL2)**2
	PARM = PARM1**2

C       KEEP ZERO TERM FOR HIGH PASS OPTIONS
	AVG = B(1,1,1)

c$omp   parallel do private(i,j,k,ix,iy,iz,f)
	DO K=1,N2L
	   IZ = K-1
	   IF (IZ > NL2)  IZ = IZ-N2L

	   DO J=1,N2R
	      IY = J-1
	      IF (IY > NR2)  IY = IY-N2R

	      DO  I=1,LSD,2
	         IX = (I-1) / 2

                 SELECT CASE(IOPT)

                 CASE (1)    ! LOWPASS *****************************
                 IF (0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 + 
     &               FLOAT(IZ*IZ)/Z1) > PARM)  THEN
	            B(I,J,K)   = 0.0
	            B(I+1,J,K) = 0.0
	         ENDIF


                 CASE (2)    !  HIGH PASS **************************

                IF ( 0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+
     &              FLOAT(IZ*IZ)/Z1) <= PARM)  THEN
	            B(I,J,K)   = 0.0
	            B(I+1,J,K) = 0.0
	         ENDIF


                 CASE (3)    !  GAUSSIAN LOW PASS ******************

 	         F = 0.125*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+
     &                      FLOAT(IZ*IZ)/Z1)/PARM

	         IF (F < 16.0)  THEN
	            F          = EXP(-F)
	            B(I,J,K)   = B(I,J,K)*F
	            B(I+1,J,K) = B(I+1,J,K)*F
	         ELSE
                    B(I,J,K)   = 0.0
                    B(I+1,J,K) = 0.0
	         ENDIF


                 CASE (4)    !  GAUSSIAN HIGH PASS *****************

                 F = 0.125* (FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+
     &                       FLOAT(IZ*IZ)/Z1)/PARM

	         IF (F < 16.0)  THEN
	            F          = (1.0-EXP(-F))
	            B(I,J,K)   = B(I,J,K)*F
	            B(I+1,J,K) = B(I+1,J,K)*F
	         ENDIF


                 CASE (5,6)  !  FERMI DISTRIBUTION FILTER **********

                 F = (0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+
     &                FLOAT(IZ*IZ)/Z1)-PARM1)/TEMP

	         F          = AMIN1(AMAX1(F,-10.0),10.0)
	         F          = (1.0/(1.0+EXP(F)))
	         B(I,J,K)   = B(I,J,K)*F
	         B(I+1,J,K) = B(I+1,J,K)*F


                 CASE (7)    !  BUTTERWORTH  LOWPASS FILTER ********

                 F = 0.5*SQRT(
     &	            FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)

	         F          = SQRT(1.0/(1.0+(F/PARM1)**ORD))

	         B(I,J,K)   = B(I,J,K)   * F
	         B(I+1,J,K) = B(I+1,J,K) * F


                 CASE (8)    !  BUTTERWORTH HIGHPASS FILTER *********

                 F = 0.5*SQRT(
     &	            FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)

	         F          = 1.0 - SQRT(1.0/(1.0+(F/PARM1)**ORD))

	         B(I,J,K)   = B(I,J,K)   * F
	         B(I+1,J,K) = B(I+1,J,K) * F


                 CASE (9)    !  RAISED COSINE LOWPASS FILTER *******

                 F = 0.5*SQRT(
     &               FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)

	         IF (FP > 1.0) THEN
                    FP2 = FP / NX
                    FS2 = FS / NX
                 ELSE
	            FP2 = FP
	            FS2 = FS
	         ENDIF

	         F = (F-FP2) / (FS2-FP2)
                 IF (F < 0) THEN
	            F2 = 1
                 ELSEIF (F > 1) THEN
	            F2 = 0
                 ELSE
	            F2 = 0.5 * (COS(PI*F)+1)
	         ENDIF

                 B(I,J,K)   = B(I,J,K)  *F2
                 B(I+1,J,K) = B(I+1,J,K)*F2


                 CASE (10)    !  RAISED COSINE HIGHPASS FILTER *******

                 F = 0.5*SQRT(
     &               FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)

	         IF (FP > 1.0) THEN
                    FP2 = FP / NX
                    FS2 = FS / NX
                 ELSE
	            FP2 = FP
	            FS2 = FS
	         ENDIF

	         F = (F-FP2) / (FS2-FP2)
                 IF (F < 0) THEN
                    F2 = 0
                 ELSEIF (F > 1) THEN
	            F2 = 1
                 ELSE
	            F2 = 0.5 * (-COS(PI*F)+1)
	         ENDIF

	         B(I,J,K)   = B(I,J,K)   * F2
	         B(I+1,J,K) = B(I+1,J,K) * F2

                 END SELECT

              ENDDO
	   ENDDO
	ENDDO

C       RESTORE ZERO TERM FOR HIGH PASS OPTIONS
	IF (IOPT == 2 .OR. IOPT == 4 .OR. 
     &      IOPT == 6 .OR. IOPT == 8)
     &      B(1,1,1) = AVG

C       REVERSE FFT 
	INV = -1
	CALL  FMRS_3(B,N2S,N2R,N2L,INV)

	IF (INV == 0) THEN
	   CALL ERRT(38,'FQ',NE)
	   RETURN
	ENDIF

C       WRITE  IMAGE
	DO K=1,NZ
	   DO I=1,NY
              NR = (K-1)*NY+I
	      CALL WRTLIN(LUNO,B(1,I,K),NX,NR)
	   ENDDO
	ENDDO

	END

@


1.33
log
@FREQ UNIT CUTOFF = 1
@
text
@d69 3
a71 3
          AVE = (SUM(B(1:NX,1:NY,1))+SUM(B(1:NX,1:NY,NZ)) +
     &           SUM(B(1:NX,1,2:NZ-1))+SUM(B(1:NX,NY,2:NZ-1)) +
     &           SUM(B(1,2:NY-1,2:NZ-1))+SUM(B(NX,2:NY-1,2:NZ-1)))
a146 1

d150 1
d156 1
a156 1
	      IF(IOPT == 6) TEMP = -TEMP
d243 1
d250 1
a250 1
                 CASE (8)    !  BUTTERWORTH HIGIPASS FILTER *********
d255 2
a256 1
	         F          = (1.0-SQRT(1.0/(1.0+(F/PARM1)**ORD)))
@


1.32
log
@case 7 off
@
text
@d6 1
d12 1
a12 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d126 1
a126 1
	   IF (FP > 0.5) THEN
d128 1
d131 1
a132 5
           IF (FS > 0.5) THEN
              FS2 = FS / NX
           ELSE
              FS2 = FS
           ENDIF
d135 2
a136 2
	   ORD   = ORD/ALOG10(FP2 / FS2)
	   PARM1 = FP2/(EPS)**(2. / ORD)
d145 1
a145 1
           IF (PARM1<0.0 .OR. PARM1>0.5) PARM1 = 0.5 * PARM1 / (NX/2)
d254 1
a254 1
	         F = (1.0-SQRT(1.0/(1.0+(F/PARM1)**ORD)))
d264 3
a266 2
	         IF (FP > 0.5) THEN
                    FP2 = FP/NX
a268 4
	         ENDIF
	         IF (FS > 0.5) THEN
                    FS2 = FS/NX
                 ELSE
d290 3
a292 2
	         IF (FP > 0.5) THEN
                    FP2 = FP/NX
a294 4
	         ENDIF
	         IF (FS > 0.5) THEN
                    FS2 = FS/NX
                 ELSE
d306 1
d309 1
d311 1
@


1.31
log
@ freq vs pixel specifications, cosmetic rewrite, prompts
@
text
@d230 1
a230 1
                 CASE (5)    !  FERMI DISTRIBUTION FILTER ***********
d241 1
a241 1
                 CASE (6)    !  BUTTERWORTH  LOWPASS FILTER ********
d251 1
a251 1
                 CASE (7)    !  BUTTERWORTH HIGIPASS FILTER *********
d261 1
a261 1
                 CASE (8)    !  RAISED COSINE LOWPASS FILTER *******
d290 1
a290 1
                 CASE (9)    !  RAISED COSINE HIGHPASS FILTER *******
@


1.30
log
@nsam, ==, cosmetic
@
text
@d4 2
a5 1
C FQ3_P.F    NSAM --> NX,==                      OCT 2012 ARDEAN LEITH
d29 1
a29 1
C  FQ3_P(LUN,LUNF,B,LSD,N2S,N2R,N2L,NX,NY,NZ,IOPT)
a34 1
C        IOPT        TYPE OF THE FILTER
d40 1
d50 5
a54 2
	REAL              :: B(LSD,N2R,N2L)
	DOUBLE PRECISION  :: AVE
d66 1
a66 1
	IF (N2S.NE.NX.AND.N2R.NE.NY.AND.N2L.NE.NZ)  THEN
d115 9
a123 1
C       BUTTERWORTH FILTER***********************
d125 10
a134 7
	IF (IOPT==7 .OR. IOPT==8)  THEN
	   EPS   = 0.882
	   AA    =  10.624

	   CALL RDPRM2S(FP,FS,NOT_USED,
     &          'PASS-BAND FREQUENCY & STOP-BAND FREQUENCY',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
d137 2
a138 2
	   ORD   = ORD/ALOG10(FP / FS)
	   PARM1 = FP/(EPS)**(2. / ORD)
d142 3
a144 1
	   CALL RDPRM1S(PARM1,NOT_USED,'FILTER RADIUS',IRTFLG)
d147 1
a147 1
           IF (PARM1<0.0 .OR. PARM1>0.5) PARM1 = 0.5*PARM1/(NX/2)
a148 1
C          FERMI DISTRIBUTION FILTER ********************
d151 1
d154 1
a154 1
     &                    'TEMPERATURE(0=CUTOFF)',IRTFLG)
d180 2
a181 1
	      DO  2  I=1,LSD,2
d184 1
a184 1
	         GOTO(100,200,300,400,500,500,600,700),IOPT
d186 2
a187 2
C                LOWPASS ********************************
100              IF (0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 + 
a191 1
	         GOTO  2
a192 1
C                HIGH PASS ******************
d194 3
a196 1
200              IF ( 0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+
a200 1
	         GOTO  2
a201 1
C                GAUSSIAN LOW PASS ***************************
d203 3
a205 1
300	         F = 0.125*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+
a215 1
	         GOTO  2
a216 1
C                GAUSSIAN HIGH PASS ******************************
d218 3
a220 1
400   	         F = 0.125* (FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+
a227 1
	         GOTO  2
a228 1
C                FERMI DISTRIBUTION FILTER ********************
d230 3
a232 1
500	         F = (0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+
a238 1
	         GO TO 2
a239 1
C                BUTTERWORTH  LOWPASS FILTER **********************
d241 3
a243 1
600              F = 0.5*SQRT(
a248 1
	         GO TO 2
a249 1
C                BUTTERWORTH HIGIPASS FILTER *********************
d251 3
a253 1
700	         F = 0.5*SQRT(
d260 58
a317 1
2	      CONTINUE
a320 1

d322 3
a324 2
	IF (IOPT==2 .OR. IOPT==4 .OR. IOPT==6 .OR. IOPT==8)
     &       B(1,1,1) = AVG
d326 1
a326 1
C       WRITE  IMAGE
d335 1
@


1.29
log
@GPL_2010
@
text
@d2 3
a4 1
C++*******************************************************************
a5 2
C FQ3_P.F 
C           
d10 1
a10 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d28 1
a28 1
C  FQ3_P(LUN,LUNF,B,LSD,N2S,N2R,N2L,NSAM,NROW,NSLICE,IOPT)
d36 4
a39 6
C        NSAM,NROW,NSLICE   DIMENSIONS OF REAL-SPACE FILE
C        N2S=2*NSAM
C        N2R=2*NROW
C	 N2L=2*NSLICE
C
C IMAGE_PROCESSING_ROUTINE
d41 2
a42 1
C23456789012345678901234567890123456789012345678901234567890123456789012 C--*********************************************************************
d44 1
a44 2
	SUBROUTINE FQ3_P
     &       (LUN,LUNO,B,LSD,N2S,N2R,N2L,NSAM,NROW,NSLICE,IOPT)
d49 2
a50 2
	DIMENSION         B(LSD,N2R,N2L)
	DOUBLE PRECISION  AVE
d53 4
a56 5

	DO K=1,NSLICE
	   DO I=1,NROW
	      NR=(K-1)*NROW+I
	      CALL  REDLIN(LUN,B(1,I,K),NSAM,NR)
d62 1
a62 1
	IF (N2S.NE.NSAM.AND.N2R.NE.NROW.AND.N2L.NE.NSLICE)  THEN
d64 4
a67 4
	  AVE=(SUM(B(1:NSAM,1:NROW,1))+SUM(B(1:NSAM,1:NROW,NSLICE))
     &	  +SUM(B(1:NSAM,1,2:NSLICE-1))+SUM(B(1:NSAM,NROW,2:NSLICE-1))
     & +SUM(B(1,2:NROW-1,2:NSLICE-1))+SUM(B(NSAM,2:NROW-1,2:NSLICE-1)))
     &		/REAL(4*(NSAM+NROW+NSLICE)-16)
d70 4
a73 4
	   DO K=1,NSLICE
	      DO J=1,NROW
	         DO I=1,NSAM
	            AVE=AVE+B(I,J,K)
d78 1
a78 1
	   AVE = AVE/FLOAT(NSAM)/FLOAT(NROW)/FLOAT(NSLICE)
d81 1
a81 1
	   DO K=1,NSLICE
d83 2
a84 2
	         DO I=NSAM+1,N2S
	            B(I,J,K)=AVE
d87 3
a89 3
	      DO J=NROW+1,N2R
	         DO I=1,NSAM
	            B(I,J,K)=AVE
d95 1
a95 1
	   DO K=NSLICE+1,N2L
d98 1
a98 1
	            B(I,J,K)=AVE
d106 1
a106 1
	IF (INV .EQ. 0)THEN
d113 1
a113 1
	IF (IOPT.EQ.7 .OR. IOPT.EQ.8)  THEN
d116 8
a123 5
	   CALL RDPRM2(FP,FS,NOT_USED,
     &          'PASS-BAND FREQUENCY & STOP-BAND FREQUENCY')
	   ORD   = 2.*ALOG10(EPS/SQRT(AA**2-1.0))
	   ORD   = ORD/ALOG10(FP/FS)
	   PARM1 = FP/(EPS)**(2./ORD)
d127 4
a130 2
	   CALL RDPRM(PARM1,NOT_USED,'FILTER RADIUS')
        IF (PARM1.LT.0.0.OR.PARM1.GT.0.5)  PARM1=0.5*PARM1/(NSAM/2)
d133 6
a138 2
	   IF (IOPT.EQ.5 .OR. IOPT.EQ.6)  THEN
	    CALL RDPRM(TEMP,NOT_USED,'TEMPERATURE(0=CUTOFF)')
d141 1
a141 1
	      IF(IOPT.EQ.6) TEMP=-TEMP
d145 3
a147 3
	NR2  = N2R/2
	NL2  = N2L/2
	X1   = FLOAT(N2S/2)**2
d158 1
a158 1
	   IF (IZ.GT.NL2)  IZ=IZ-N2L
d162 1
a162 1
	      IF (IY.GT.NR2)  IY=IY-N2R
d164 2
a165 1
	         IX = (I-1)/2
d169 2
a170 2
100     IF (0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)
     &	       .GT. PARM)  THEN
d178 2
a179 2
200   IF( 0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)
     &	       .LE. PARM)  THEN
d187 4
a190 2
300	F=0.125*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/PARM
	         IF (F.LT.16.0)  THEN
d202 4
a205 2
400   	F=0.125* (FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/PARM
	         IF (F.LT.16.0)  THEN
d214 4
a217 3
500	         F=(0.5*SQRT(
     &	    FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)-PARM1)/TEMP
	         F = AMIN1(AMAX1(F,-10.0),10.0)
d225 1
a225 1
600              F=0.5*SQRT(
d228 3
a230 2
	         B(I,J,K)   = B(I,J,K)*F
	         B(I+1,J,K) = B(I+1,J,K)*F
d237 1
d239 2
a240 2
	         B(I,J,K)   = B(I,J,K)*F
	         B(I+1,J,K) = B(I+1,J,K)*F
d248 1
a248 1
	IF (IOPT.EQ.2 .OR. IOPT.EQ.4 .OR. IOPT.EQ.6 .OR. IOPT.EQ.8)
a251 1

d255 1
a255 1
	IF (INV.EQ.0)THEN
d260 4
a263 4
	DO K=1,NSLICE
	   DO I=1,NROW
              NR = (K-1)*NROW+I
	      CALL  WRTLIN(LUNO,B(1,I,K),NSAM,NR)
@


1.28
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.27
log
@HRI GPL License used
@
text
@a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.26
log
@if else & cosmetic
@
text
@d8 24
@


1.25
log
@pawel fround error in gaussian
@
text
@d15 1
a15 1
C FQ3_P: QUICK FILTERING OF THE REAL-SPACE FILE BY IN-CORE FFT
d17 2
a18 1
C  FQ3_P(LUN,LUNF,B,LSD,N2S,N2R,N2L,NSAM,NROW,NSLICE,IOPT)
d30 1
a30 3
C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012  
C--*******************************************************************
d37 2
a38 1
	DIMENSION  B(LSD,N2R,N2L)
d43 2
a44 2
	DO    K=1,NSLICE
	   DO    I=1,NROW
d52 1
a52 1
	IF(N2S.NE.NSAM.AND.N2R.NE.NROW.AND.N2L.NE.NSLICE)  THEN
d58 1
d60 3
a62 3
	   DO    K=1,NSLICE
	      DO    J=1,NROW
	         DO    I=1,NSAM
d67 3
a69 1
	   AVE=AVE/FLOAT(NSAM)/FLOAT(NROW)/FLOAT(NSLICE)
d71 3
a73 3
	   DO    K=1,NSLICE
	      DO    J=1,N2R
	         DO    I=NSAM+1,N2S
d77 2
a78 2
	      DO    J=NROW+1,N2R
	         DO    I=1,NSAM
d83 1
d85 3
a87 3
	   DO    K=NSLICE+1,N2L
	      DO    J=1,N2R
	         DO    I=1,N2S
d94 4
a97 4
	INV=1
	CALL  FMRS_3(B,N2S,N2R,N2L,INV)
	IF(INV.EQ.0)THEN
	   IOPT=-1
d103 3
a105 3
	IF(IOPT.EQ.7.OR.IOPT.EQ.8)  THEN
	   EPS=0.882
	   AA=10.624
d108 3
a110 3
	   ORD=2.*ALOG10(EPS/SQRT(AA**2-1.0))
	   ORD=ORD/ALOG10(FP/FS)
	   PARM1=FP/(EPS)**(2./ORD)
d112 1
a112 1
	ELSEIF(IOPT.GE.1.OR.IOPT.LE.6)  THEN
d114 2
a115 2
	   CALL  RDPRM(PARM1,NOT_USED,'FILTER RADIUS')
        IF(PARM1.LT.0.0.OR.PARM1.GT.0.5)  PARM1=0.5*PARM1/(NSAM/2)
d118 1
a118 1
	   IF(IOPT.EQ.5.OR.IOPT.EQ.6)  THEN
d126 7
a132 6
	NR2=N2R/2
	NL2=N2L/2
	X1=FLOAT(N2S/2)**2
	Y1=FLOAT(NR2)**2
	Z1=FLOAT(NL2)**2
	PARM=PARM1**2
d134 1
a134 1
	AVG=B(1,1,1)
d137 7
a143 6
	DO    K=1,N2L
	   IZ=K-1
	   IF(IZ.GT.NL2)  IZ=IZ-N2L
	   DO    J=1,N2R
	      IY=J-1
	      IF(IY.GT.NR2)  IY=IY-N2R
d145 1
a145 1
	         IX=(I-1)/2
d149 1
a149 1
100     IF(0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)
d151 2
a152 2
	            B(I,J,K)=0.0
	            B(I+1,J,K)=0.0
d158 1
a158 2
200   IF(
     &  0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)
d160 2
a161 2
	            B(I,J,K)=0.0
	            B(I+1,J,K)=0.0
d167 5
a171 6
300	F=0.125*
     &	  (FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/PARM
	         IF(F.LT.16.0)  THEN
	            F=EXP(-F)
	            B(I,J,K)=B(I,J,K)*F
	            B(I+1,J,K)=B(I+1,J,K)*F
d173 2
a174 2
                    B(I,J,K)=0.0
                    B(I+1,J,K)=0.0
d180 5
a184 6
400   	F=0.125*
     &    (FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/PARM
	         IF(F.LT.16.0)  THEN
	            F=(1.0-EXP(-F))
	            B(I,J,K)=B(I,J,K)*F
	            B(I+1,J,K)=B(I+1,J,K)*F
d191 5
a195 5
     &	  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)-PARM1)/TEMP
	         F=AMIN1(AMAX1(F,-10.0),10.0)
	         F=(1.0/(1.0+EXP(F)))
	         B(I,J,K)=B(I,J,K)*F
	         B(I+1,J,K)=B(I+1,J,K)*F
d201 4
a204 4
     &	  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)
	         F=SQRT(1.0/(1.0+(F/PARM1)**ORD))
	         B(I,J,K)=B(I,J,K)*F
	         B(I+1,J,K)=B(I+1,J,K)*F
d209 5
a213 5
700	         F=0.5*SQRT(
     &	  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)
	         F=(1.0-SQRT(1.0/(1.0+(F/PARM1)**ORD)))
	         B(I,J,K)=B(I,J,K)*F
	         B(I+1,J,K)=B(I+1,J,K)*F
d218 2
d221 2
a222 2
	IF (IOPT.EQ.2.OR.IOPT.EQ.4.OR.IOPT.EQ.6.OR.IOPT.EQ.8)
     &       B(1,1,1)=AVG
d226 1
a226 1
	INV=-1
d228 1
d234 3
a236 3
	DO    K=1,NSLICE
	   DO    I=1,NROW
              NR=(K-1)*NROW+I
d240 1
@


1.24
log
@pawels's changes & cosmetic
@
text
@d162 2
a163 2
300	F=
     &	  (FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/(2.*PARM)
d176 2
a177 2
400   	F=
     & (FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/(2.*PARM)
@


1.23
log
@pawels bug fix sent to here
@
text
@d6 8
a13 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d50 1
a50 1
C       AVERAGE PADDING
d53 6
a58 2
	   AVE=0.0
c$omp parallel do private(i,j,k),reduction(+:ave)
d67 1
a67 1
c$omp parallel do private(i,j,k)
d80 1
a80 1
c$omp parallel do private(i,j,k)
d115 1
a115 1
	    CALL RDPRM(TEMP,NOT_USED,'TEMPERATURE(0=CUTOFF)$')
d131 1
a131 1
c$omp parallel do private(i,j,k,ix,iy,iz,f)
@


1.22
log
@nloop,iloop_removed
@
text
@d1 1
d4 1
a4 1
C $$ FQ3_P.FOR 
d80 1
a80 1
	         DO    I=1,NSAM
@


1.21
log
@adapted to dynamical memory allocation
@
text
@d98 1
a98 1
	   CALL RDPRM2(FP,FS,NLOOP,ILOOP,
d106 1
a106 1
	   CALL  RDPRM(PARM1,NLOOP,ILOOP,'FILTER RADIUS')
d111 1
a111 1
	    CALL RDPRM(TEMP,NLOOP,ILOOP,'TEMPERATURE(0=CUTOFF)$')
@


1.20
log
@ibm did not like long lines and ?? inside ' '
@
text
@d17 1
a17 1
C  FQ3_P(LUN,LUNF,B,N2S,N2R,N2L,NSAM,NROW,NSLICE,IOPT)
d26 5
a30 1
C  
d36 2
a37 1
	INCLUDE 'CMBLOCK.INC'
d41 1
a41 1
C  READ  IMAGE
d44 4
a47 3
	DO    I=1,NROW
	NR=(K-1)*NROW+I
	CALL  REDLIN(LUN,B(1,I,K),NSAM,NR)
d49 3
a51 4
	ENDDO
C
C  AVERAGE PADDING
C
d53 1
a53 1
	AVE=0.0
d55 8
a62 8
	DO    K=1,NSLICE
	DO    J=1,NROW
	DO    I=1,NSAM
	AVE=AVE+B(I,J,K)
	ENDDO
	ENDDO
	ENDDO
	AVE=AVE/FLOAT(NSAM)/FLOAT(NROW)/FLOAT(NSLICE)
d64 12
a75 12
	DO    K=1,NSLICE
	DO    J=1,N2R
	DO    I=NSAM+1,N2S
	B(I,J,K)=AVE
	ENDDO
	ENDDO
	DO    J=NROW+1,N2R
	DO    I=1,NSAM
	B(I,J,K)=AVE
	ENDDO
	ENDDO
	ENDDO
d77 7
a83 7
	DO    K=NSLICE+1,N2L
	DO    J=1,N2R
	DO    I=1,NSAM
	B(I,J,K)=AVE
	ENDDO
	ENDDO
	ENDDO
d85 1
a85 1
C
d89 2
a90 2
	IOPT=-1
	RETURN
d93 1
a93 1
C BUTTERWORTH FILTER***********************
d96 3
a98 3
	      EPS=0.882
	      AA=10.624
	     CALL RDPRM2(FP,FS,NLOOP,ILOOP,
d100 3
a102 3
	     ORD=2.*ALOG10(EPS/SQRT(AA**2-1.0))
	     ORD=ORD/ALOG10(FP/FS)
	     PARM1=FP/(EPS)**(2./ORD)
d106 5
a110 6
	 CALL  RDPRM(PARM1,NLOOP,ILOOP,'FILTER RADIUS')
	 IF(PARM1.LT.0.0.OR.PARM1.GT.0.5)  PARM1=0.5*PARM1/(NSAM/2)
C
C FERMI DISTRIBUTION FILTER ********************
	  IF(IOPT.EQ.5.OR.IOPT.EQ.6)  THEN
C
d113 3
a115 3
C  EXPONENTIAL FOR HIGH-PASS OPTION
	    IF(IOPT.EQ.6) TEMP=-TEMP
	  ENDIF
d124 1
a124 1
C  KEEP ZERO TERM FOR HIGH PASS OPTIONS
d129 8
a136 8
	IZ=K-1
	IF(IZ.GT.NL2)  IZ=IZ-N2L
	DO    J=1,N2R
	IY=J-1
	IF(IY.GT.NR2)  IY=IY-N2R
	DO  2  I=1,LSD,2
	IX=(I-1)/2
	GOTO(100,200,300,400,500,500,600,700),IOPT
d138 2
a139 2
C LOWPASS ********************************
100   IF(0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)
d141 4
a144 4
	B(I,J,K)=0.0
	B(I+1,J,K)=0.0
	ENDIF
	GOTO  2
d146 1
a146 1
C HIGH PASS ******************
d151 4
a154 4
	B(I,J,K)=0.0
	B(I+1,J,K)=0.0
	ENDIF
	GOTO  2
d156 1
a156 1
C GAUSSIAN LOW PASS ***************************
d160 9
a168 9
	IF(F.LT.16.0)  THEN
	F=EXP(-F)
	B(I,J,K)=B(I,J,K)*F
	B(I+1,J,K)=B(I+1,J,K)*F
	ELSE
        B(I,J,K)=0.0
        B(I+1,J,K)=0.0
	ENDIF
	GOTO  2
d170 1
a170 1
C GAUSSIAN HIGH PASS ********************************
d174 6
a179 6
	IF(F.LT.16.0)  THEN
	F=(1.0-EXP(-F))
	B(I,J,K)=B(I,J,K)*F
	B(I+1,J,K)=B(I+1,J,K)*F
	ENDIF
	GOTO  2
d181 1
a181 1
C FERMI DISTRIBUTION FILTER ********************
d183 1
a183 1
500	F=(0.5*SQRT(
d185 5
a189 5
	F=AMIN1(AMAX1(F,-10.0),10.0)
	F=(1.0/(1.0+EXP(F)))
	B(I,J,K)=B(I,J,K)*F
	B(I+1,J,K)=B(I+1,J,K)*F
	GO TO 2
d191 1
a191 1
C BUTTERWORTH  LOWPASS FILTER **********************
d193 1
a193 1
600     F=0.5*SQRT(
d195 4
a198 4
	F=SQRT(1.0/(1.0+(F/PARM1)**ORD))
	B(I,J,K)=B(I,J,K)*F
	B(I+1,J,K)=B(I+1,J,K)*F
	GO TO 2
d200 1
a200 1
C BUTTERWORTH HIGIPASS FILTER *********************
d202 1
a202 1
700	F=0.5*SQRT(
d204 3
a206 3
	F=(1.0-SQRT(1.0/(1.0+(F/PARM1)**ORD)))
	B(I,J,K)=B(I,J,K)*F
	B(I+1,J,K)=B(I+1,J,K)*F
d208 2
a209 2
2	CONTINUE
	ENDDO
d211 1
a211 1
C RESTORE ZERO TERM FOR HIGH PASS OPTIONS
d215 1
a215 1
C  WRITE  IMAGE
a227 1
	      ENDDO
d229 1
d231 1
@


1.19
log
@OpenMP
@
text
@d15 1
d17 1
a17 3
C $$ FQ3_P: QUICK FILTERING OF THE REAL-SPACE FILE BY IN-CORE FFT
C
C      CALL FQ3_P(LUN,LUNF,B,N2S,N2R,N2L,NSAM,NROW,NSLICE,IOPT)
d28 1
a28 2
C
C
d30 2
a31 1
     &	(LUN,LUNO,B,LSD,N2S,N2R,N2L,NSAM,NROW,NSLICE,IOPT)
d35 1
d37 1
a37 1
C
d87 1
a87 1
C
d89 1
a89 1
C
d94 1
a94 1
     &       'PASS-BAND FREQUENCY & STOP-BAND FREQUENCY??')
d98 1
a98 1
C
d100 1
a100 1
c
d108 1
a108 1
C
d113 1
a113 1
C
d122 1
a122 1
C
d133 1
d141 1
a141 1
C
d143 1
a143 1
C
d151 1
a151 1
C
d153 1
a153 1
C
d165 1
a165 1
C
d167 1
a167 1
C
d176 1
a176 1
C
d178 1
a178 1
C
d186 1
a186 1
c
d188 1
a188 1
C
d195 1
a195 1
C
d197 1
a197 1
C
d203 1
a203 1
C
d208 3
a210 2
	IF(IOPT.EQ.2.OR.IOPT.EQ.4.OR.IOPT.EQ.6.OR.IOPT.EQ.8)B(1,1,1)=AVG
C
d212 1
a212 1
C
d215 3
a217 3
	IF(INV.EQ.0)THEN
	CALL ERRT(38,'FQ',NE)
	RETURN
d219 1
d221 5
a225 5
	DO    I=1,NROW
	NR=(K-1)*NROW+I
	CALL  WRTLIN(LUNO,B(1,I,K),NSAM,NR)
	ENDDO
	ENDDO
@


1.18
log
@*** empty log message ***
@
text
@a35 1
CNO_SAVE
d49 1
a49 1
c$doacross local(i,j,k),reduction(ave)
d58 1
a58 1
c$doacross local(i,j,k)
d71 1
a71 1
c$doacross local(i,j,k)
d123 1
a123 1
c$doacross local(i,j,k,ix,iy,iz,f)
@


1.17
log
@gaussian fixed
@
text
@d155 1
a155 1
     &	  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/(2.*PARM)
d161 2
a162 2
        B(I,J)=0.0
        B(I+1,J)=0.0
d169 1
a169 1
     & FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/(2.*PARM))
d171 1
a171 1
	F=(1.0-EXP(-F)
d174 1
@


1.16
log
@units fixed
@
text
@d121 2
d144 1
a144 1
200   IF((IX.NE.0 .OR. IY.NE.0 .OR.IZ.NE.0) .AND.
d154 4
a157 2
300	F=EXP(-0.25*(
     &	  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/(2.*PARM))
d160 4
d168 4
a171 3
400   IF(IX.NE.0 .OR. IY.NE.0 .OR.IZ.NE.0)  THEN
	F=(1.0-EXP(-0.25*(
     & FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/(2.*PARM)))
a173 1
	ENDIF
a180 1
	IF(IOPT.EQ.6 .AND. IX.NE.0 .AND.IY.NE.0 .AND. IZ.NE.0)  GOTO 2
d197 1
a197 2
700 	IF(IX.NE.0 .OR. IY.NE.0 .OR.IZ.NE.0)THEN
	F=0.5*SQRT(
a201 1
	ENDIF
d206 2
@


1.15
log
@freq fixed
@
text
@d117 1
a117 1
	X1=FLOAT(NSAM/2)**2
@


1.14
log
@*** empty log message ***
@
text
@d103 1
a103 1
	 IF(PARM1.LT.0.0.OR.PARM1.GT.0.5)  PARM1=0.5*PARM1/(NSAM/2+1)
d117 3
a119 3
	X1=FLOAT(LSD)**2
	Y1=FLOAT(N2R)**2
	Z1=FLOAT(N2L)**2
d133 1
a133 1
100   IF(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1
d143 1
a143 1
     &  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1
d152 1
a152 1
300	F=EXP(-(
d161 1
a161 1
	F=(1.0-EXP(-(
d170 1
a170 1
500	F=(SQRT(
d181 1
a181 1
600     F=SQRT(
d191 1
a191 1
	F=SQRT(
@


1.13
log
@new FFT
@
text
@d39 2
a40 2
	DO  81  K=1,NSLICE
	DO  81  I=1,NROW
d42 3
a44 1
81	CALL  REDLIN(LUN,B(1,I,K),NSAM,NR)
d51 7
a57 4
	DO  221  K=1,NSLICE
	DO  221  J=1,NROW
	DO  221  I=1,NSAM
221	AVE=AVE+B(I,J,K)
d60 12
a71 7
	DO  22  K=1,NSLICE
	DO  21  J=1,N2R
	DO  21  I=NSAM+1,N2S
21	B(I,J,K)=AVE
	DO  22  J=NROW+1,N2R
	DO  22  I=1,NSAM
22	B(I,J,K)=AVE
d73 7
a79 4
	DO  23  K=NSLICE+1,N2L
	DO  23  J=1,N2R
	DO  23  I=1,NSAM
23	B(I,J,K)=AVE
d123 1
a123 1
	DO  1  K=1,N2L
d126 1
a126 1
	DO  1  J=1,N2R
d199 2
a200 1
1	CONTINUE
d210 2
a211 2
	DO  82  K=1,NSLICE
	DO  82  I=1,NROW
d213 3
a215 1
82	CALL  WRTLIN(LUNO,B(1,I,K),NSAM,NR)
@


1.12
log
@Ed egelman's request: gaussian filter has x^2/(2*sigma^2) i.e., additional factor of 2. in denominator.
@
text
@d31 2
a32 2
      SUBROUTINE FQ3_P
     &	(LUN,LUNO,B,WORK,N2S,N2R,N2L,NSAM,NROW,NSLICE,IOPT)
d34 1
a34 1
	DIMENSION  B(N2S,N2R,N2L),WORK(*)
d70 1
a70 1
	CALL  F3MR(B,N2S,N2R,N2L,INV,WORK)
d101 1
a101 2
	
	NS2=N2S/2
d104 1
a104 1
	X1=FLOAT(N2S)**2
d109 1
d111 2
a112 1
	K1=K-1
d114 5
a118 28
	J1=J-1
	DO  2  I=1,N2S
	IF(I.LT.3)  THEN
	    IX=(I-1)*NS2
		IF(J.LT.3)  THEN
		IY=J1*NR2
		    IF(K.LT.3)  THEN
		    IZ=K1*NL2
		    GOTO  3
		    ELSE
		    IZ=K1/2
		    GOTO  3
		    ENDIF
		ELSE
		IY=J1/2
		IZ=K1
		IF(IZ.GT.NL2)  IZ=IZ-N2L
		GOTO  3
		ENDIF
	ELSE
	    IX=(I-1)/2
	    IY=J1
	    IF(IY.GT.NR2)  IY=IY-N2R
	    IZ=K1
	    IF(IZ.GT.NL2)  IZ=IZ-N2L
	ENDIF
3	CONTINUE
      GOTO(100,200,300,400,500,500,600,700),IOPT
d121 4
a124 1
     &	       .GT. PARM)  B(I,J,K)=0.0
d131 4
a134 1
     &	       .LE. PARM)  B(I,J,K)=0.0
d139 1
a139 1
300   B(I,J,K)=B(I,J,K)*EXP(-(
d141 2
d147 2
a148 2
400   IF(IX.NE.0 .OR. IY.NE.0 .OR.IZ.NE.0)
     & B(I,J,K)=B(I,J,K)*(1.0-EXP(-(
d150 3
d157 1
a157 1
500	ARG=(SQRT(
d159 5
a163 3
	ARG=AMIN1(AMAX1(ARG,-10.0),10.0)
	IF(IOPT.EQ.6 .AND. IX.ne.0 .AND.IY.ne.0 .AND. IZ.ne.0)  GOTO 2
	B(I,J,K)=B(I,J,K)*(1.0/(1.0+EXP(ARG)))
d168 1
a168 1
600     ARG=SQRT(
d170 3
a172 1
	B(I,J,K)=B(I,J,K)*SQRT(1.0/(1.0+(ARG/PARM1)**ORD))
d178 1
a178 1
	ARG=SQRT(
d180 3
a182 1
	B(I,J,K)=B(I,J,K)*(1.0-SQRT(1.0/(1.0+(ARG/PARM1)**ORD)))
d191 1
a191 1
	CALL  F3MR(B,N2S,N2R,N2L,INV,WORK)
d200 1
a200 1
      END
@


1.11
log
@include restored
@
text
@d156 1
a156 1
     &	  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/PARM)
d163 1
a163 1
     & FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/PARM))
@


1.10
log
@new version, remez removed
@
text
@d33 1
@


1.9
log
@avoid inside jump with 4009
@
text
@d18 1
a18 1
C      CALL FQ3_P(LUN,LUNF,B,QB,N2S,N2R,N2L,NSAM,NROW,NSLICE,IOPT)
d20 1
a20 1
C        LUNF        FILTER FILE FOR REMEZ FILTER
d22 1
a22 1
C	 B,QB	     BUFFERS
d32 2
a33 2
     &	(LUN,LUNO,LUNF,B,QB,WORK,N2S,N2R,N2L,NSAM,NROW,NSLICE,IOPT)
	DIMENSION  B(N2S,N2R,N2L),QB(N2S),WORK(*)
a34 4
	
	
        INCLUDE 'CMBLOCK.INC'
	
d47 1
d53 1
d61 1
d71 1
a71 1
	CALL ERRT(38,'FQ',NE)
a73 50
C --
C REMEZ FILTER
C
	IF(IOPT.EQ.9)  THEN
C
C
	DO  77  K=1,N2L
	    DO  77  J=1,N2R
		NR=(K-1)*N2R+J
		CALL  REDLIN(LUNF,QB,N2S,NR)
		IF(J.LT.3)  THEN
		  IF(K.LT.3)  THEN
		    B(1,J,K)=B(1,J,K)*QB(1)
		    B(2,J,K)=B(2,J,K)*QB(2)
		  ELSE
		      IF(MOD(K-1,2).EQ.0)  THEN
			IF(J.EQ.1)  THEN
			Z1=QB(1)
			Z2=QB(2)
			ELSE
			Z3=QB(1)
			Z4=QB(2)
			ENDIF
		      ENDIF
		    IF(J.EQ.1)  THEN
		    B(1,J,K)=B(1,J,K)*Z1
		    B(2,J,K)=B(2,J,K)*Z2
		    ELSE     
		    B(1,J,K)=B(1,J,K)*Z3
		    B(2,J,K)=B(2,J,K)*Z4
		    ENDIF
		 ENDIF      
		ELSE
		      IF(MOD(J-1,2).EQ.0)  THEN
			Y1=QB(1)
			Y2=QB(2)
		      ENDIF
		    B(1,J,K)=B(1,J,K)*Y1
		    B(2,J,K)=B(2,J,K)*Y2
		ENDIF      
		    DO  78  I=3,N2S,2
		    B(I,J,K)=B(I,J,K)*QB(I)
78		    B(I+1,J,K)=B(I+1,J,K)*QB(I)
77		CONTINUE
	CLOSE(LUNF)

C++     JUMP OVER ALL THESE LINES
	GOTO 5000	
C
C OTHER FILTERS
d77 1
a77 1
	  ELSEif(IOPT.EQ.7.OR.IOPT.EQ.8)  THEN
a79 1
C
a81 1
C
d86 1
a86 5
C++          JUMPS FEW LINES THEN CONTINUE,
C++ 	     GO TO 4009
C
C
	elseif (iopt.ge.1.or.iopt.le.6)then
d88 2
a89 2
952	CALL  RDPRM(PARM1,NLOOP,ILOOP,'FILTER RADIUS$')
	IF(PARM1.LT.0.0  .OR.  PARM1.GT.0.5)  PARM1=0.5*PARM1/(NSAM/2+1)
d99 1
a99 4
C
C+++    ABOVE LINES FOR 1<=IOPT<=6
C++4009	NS2=N2S/2
        END IF
a190 6

c	ENDIF 
c	iopt=9 jumps here, while all the rest continue from above.  ML
5000	continue


@


1.8
log
@error 38
@
text
@d35 2
a36 1
#ifdef SP_UNIX
d38 1
a38 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d119 4
a122 1
	CLOSE(LUNF)	
d139 2
a140 1
	     GO TO 4009
d157 5
a161 1
4009	NS2=N2S/2
d251 6
a256 1
	ENDIF 
@


1.7
log
@*** empty log message ***
@
text
@d73 1
a73 1
	PRINT*,'ERROR IN FOURIER TRANSFORM'
d251 1
a251 1
	PRINT*,'ERROR IN FOURIER TRANSFORM'
@


1.6
log
@nosave
@
text
@d223 1
a223 1
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0 .AND. IZ.EQ.0)  GOTO 2
@


1.5
log
@clear hollorith continuation line prob
@
text
@d40 1
a40 1

@


1.4
log
@added butterworth filter
@
text
@d130 2
a131 2
	     CALL RDPRM2(FP,FS,NLOOP,ILOOP,'PASS-BAND FREQUENCY &
     &       STOP-BAND FREQUENCY??')
@


1.3
log
@3d mixed radix filtration added
@
text
@d36 1
a36 1
	INCLUDE 'CMBLOCK.INC'
d38 1
a38 1
	INCLUDE 'COMMON1:CMBLOCK.INC'
d40 1
a40 1
C
d79 1
a79 1
	IF(IOPT.EQ.7)  THEN
d120 1
a120 2
	CLOSE(LUNF)
	ELSE
d124 18
d146 1
a146 1
	IF(IOPT.EQ.5.OR.IOPT.EQ.6)  THEN
d148 1
a148 1
	CALL RDPRM(TEMP,NLOOP,ILOOP,'TEMPERATURE(0=CUTOFF)$')
d151 2
a152 2
	IF(IOPT.EQ.6) TEMP=-TEMP
	ENDIF
d154 1
a154 1
	NS2=N2S/2
d192 1
a192 1
      GOTO(100,200,300,400,500,500),IOPT
d225 17
@


1.2
log
@cpp_lines_added
@
text
@d32 2
a33 2
     &	(LUN,LUNO,LUNF,B,QB,N2S,N2R,N2L,NSAM,NROW,NSLICE,IOPT)
	DIMENSION  B(N2S,N2R,N2L),QB(N2S)
d46 1
a46 1
 81	CALL  REDLIN(LUN,B(1,I,K),NSAM,NR)
d70 6
a75 1
	CALL  FFTR3_P(B,N2S,N2R,N2L,1)
d174 1
a174 1
 3	CONTINUE
d208 2
a209 2
 2	CONTINUE
 1	CONTINUE
d214 6
a219 1
	CALL  FFTR3_P(B,N2S,N2R,N2L,-1)
d223 1
a223 1
 82	CALL  WRTLIN(LUNO,B(1,I,K),NSAM,NR)
@


1.1
log
@Initial revision
@
text
@d35 3
d39 1
@
