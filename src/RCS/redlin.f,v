head	1.37;
access;
symbols
	healthdept_2018:1.37
	pre_getangas:1.35
	GPL2010:1.35
	pre_GPL2010:1.34
	pre_var_equation:1.33
	pre_fftwrings:1.30
	pre_opfiles:1.30
	src:1.30
	best-code:1.30
	x-named-regs:1.30
	x:1.30
	v13-00:1.30
	pre_GPL:1.29
	prec_CA:1.28
	noindx:1.26
	Bproc:1.24
	oct21:1.22
	last77:1.22;
locks; strict;
comment	@c @;


1.37
date	2018.10.03.14.34.14;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2011.12.01.17.12.16;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2010.06.24.13.26.43;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2009.12.08.17.05.32;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2008.11.25.15.47.46;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2008.10.31.15.19.36;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2008.10.17.12.45.49;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2005.10.17.20.58.47;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2004.09.30.16.40.15;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2003.03.14.15.15.29;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2003.02.28.19.23.14;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2001.01.23.15.45.49;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2001.01.16.19.40.11;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2000.04.12.18.45.51;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	99.11.10.23.11.17;	author yuchen;	state Exp;
branches;
next	1.22;

1.22
date	99.03.29.20.16.07;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	99.03.12.20.50.17;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	98.04.07.14.19.10;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	98.02.24.15.04.29;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	98.02.02.16.00.03;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	98.01.30.19.34.50;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	98.01.27.17.09.54;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	97.12.10.20.23.41;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	97.12.10.20.21.25;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	97.12.08.16.58.03;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	97.12.08.16.49.49;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	96.11.22.19.40.46;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	96.11.21.19.28.08;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	96.09.26.16.15.28;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	95.08.17.18.26.38;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	95.08.11.17.40.42;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	95.05.23.20.04.50;	author mladjadj;	state Exp;
branches;
next	1.5;

1.5
date	95.05.04.18.04.33;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	95.04.28.16.32.38;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	95.04.17.18.39.40;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	95.03.01.18.41.13;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.10;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.37
log
@email_health_dept
@
text
@
C++*********************************************************************
C   REDLIN.F     USED IOSTAT                    12/8/1997 ArDean Leith
C                F90 CHANGES                    4/7/1998  ArDean Leith
C                ENDEDNESS                      FEB 2003  ArDean Leith
C                MPI CHANGES                    OCT 2008  ArDean Leith
C                REDLIN_SEL                     NOV 2011  ArDean Leith
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2011  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C     REDLIN(LUNT,BUF,NB,NREC)
C
C     PURPOSE:  READ A LINE OF FLOATING POINT NUMBERS FROM FILE
C
C     PARAMETERS:
C        LUNT   LOGICAL UNIT NUMBER OF FILE BEING READ       (SENT)
C        BUF    BUFFER WHERE RECORD IS READ IN               (SENT/RET.)
C        NB     NUMBER OF VALUES IN RECORD TO BE READ        (SENT)
C        NREC   RECORD TO BE READ                            (SENT)
C
C     VARIABLES:
C        IERR   ERROR CODE > 0 IS RETURNED IN CASE OF ERROR. (RETURNED)
C               IERR IS PASSED IN COMMON /IOERR/IERR
C 
C--*******************************************************************

      SUBROUTINE REDLIN(LUNT,BUF,NB,NREC)

C     USE INLINE BUFFER COMMON AREA
      INCLUDE 'INLN_INFO.INC'

      REAL            BUF(NB)
      COMMON /IOERR/  IERR
      COMMON /UNITS/  LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
      COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100),LUNFLIP(100)

      LOGICAL            :: ISOPEN

#ifdef USE_MPI
      LOGICAL            :: ONLYONE_RED,ONLYONE_WRT
      COMMON /COMM_MPI/ONLYONE_RED,ONLYONE_WRT
      include 'mpif.h'

      ICOMM  = MPI_COMM_WORLD
      CALL MPI_COMM_RANK(ICOMM, MYPID, MPIERR)

C     ONLYONE_RED IS ALWAYS .TRUE. EXCEPT FROM dsgr_p.f
      IF (.NOT. ONLYONE_RED) MYPID = -1
#else
      MYPID = -1
#endif

      IF (ISINLINE(LUNT)) THEN
C        USE INLINED BUFFER FOR I/O (SEE OPENINLN.F)
         CALL INLN_REDLIN(LUNT,BUF,NB,NREC)
         RETURN
      ENDIF
      LUN = LUNARB(LUNT)

C     ADD LUNARA(LUN) (FOR LABEL REC) AND LUNSTK (FOR STACK OFFSET)
C     TO NREC TO GET THE CORRECT RECORD NUMBER
      I = NREC + LUNARA(LUN) + LUNSTK(LUNT)

C     USING IOSTAT; IERR IS SET TO ZERO ON EACH SUCCESSFUL READ. DEC 97 al
C     IF USING MPI .AND. ONLYONE_RED IS .FALSE. IT ALWAYS READS
C     OTHERWISE, USING MPI, READS ONLY ON PROCESSOR MYPID = 0 
      IF (MYPID .LE. 0)  READ(LUN,REC=I,IOSTAT=IERR) BUF

#ifdef USE_MPI
      IF (ONLYONE_RED) THEN
C        ALWAYS BROADCASTS IF ONLYONE_RED IS .TRUE. WHEN USING MPI
         CALL BCAST_MPI('REDLIN','BUF', BUF,NB,'R', ICOMM,MPIERR)
         CALL BCAST_MPI('REDLIN','IERR',IERR,1,'I', ICOMM,MPIERR)
      ENDIF
#endif

      IF (LUNFLIP(LUN) .EQ. 1) THEN
         CALL FLIPBYTESI(BUF,NB,IRTFLG)
      ENDIF

      END

C     ----------------------------- REDLIN1P  ------------------------

C     SHOULD REPLACE THIS WITH: REDLIN_SEL!!!

#ifdef USE_MPI
C     THE SAME AS REDLIN EXCEPT NO MPI_BCAST CALLED DEPRECATED!!! USE

      SUBROUTINE REDLIN1P(LUNT,BUF,NB,NREC)

C     USE INLINE BUFFER COMMON AREA
      INCLUDE 'INLN_INFO.INC'

      REAL            BUF(NB)
      COMMON /IOERR/  IERR
      COMMON /UNITS/  LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
      COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100),LUNFLIP(100)

      include 'mpif.h'
      ICOMM   = MPI_COMM_WORLD
      CALL MPI_COMM_RANK(ICOMM, MYPID, MPIERR)

      IF (ISINLINE(LUNT)) THEN
C        USE INLINED BUFFER FOR I/O (SEE OPENINLN.F)
         CALL INLN_REDLIN(LUNT,BUF,NB,NREC)
         RETURN
      ENDIF
      LUN = LUNARB(LUNT)

C     ADD LUNARA(LUN)(FOR LABEL REC) AND LUNSTK( FOR STACK OFFSET)
C     TO NREC TO GET THE CORRECT RECORD NUMBER
      I = NREC + LUNARA(LUN) + LUNSTK(LUNT)

C     USING IOSTAT; IERR IS SET TO ZERO ON EACH SUCCESSFUL READ.  DEC 97 al

      IF (MYPID .LE. 0) READ(LUN,REC=I,IOSTAT=IERR) BUF
      IF (LUNFLIP(LUN) .EQ. 1) CALL FLIPBYTESI(BUF,NB,IRTFLG)

      END
#endif

C     ----------------------------- REDLIN_SEL  ------------------------

      SUBROUTINE REDLIN_SEL(LUNT,NB,NREC,MPIBCAST, BUF,IRTFLG)

      IMPLICIT NONE

C     USE INLINE BUFFER COMMON AREA
      INCLUDE 'INLN_INFO.INC'

      INTEGER    :: LUNT,NB,NREC
      REAL       :: BUF(NB)
      LOGICAL    :: MPIBCAST

      INTEGER    :: LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT,IERR
      INTEGER    :: LUNARA(100),LUNSTK(100),LUNARB(100),LUNFLIP(100)

      COMMON /IOERR/  IERR
      COMMON /UNITS/  LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
      COMMON /LUNARA/ LUNARA,LUNSTK,LUNARB,LUNFLIP

      LOGICAL    :: ISOPEN
      INTEGER    :: MYPID,LUN,I,IRTFLG

#ifdef USE_MPI
      INTEGER    :: ICOMM
      LOGICAL    :: ONLYONE_RED,ONLYONE_WRT
      COMMON /COMM_MPI/ONLYONE_RED,ONLYONE_WRT
      include 'mpif.h'

      ICOMM  = MPI_COMM_WORLD
      CALL MPI_COMM_RANK(ICOMM, MYPID, IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     ONLYONE_RED IS ALWAYS .TRUE. EXCEPT FROM: dsgr_p.f
      IF (.NOT. ONLYONE_RED) MYPID = -1
#else
      MYPID = -1
#endif

      IF (ISINLINE(LUNT)) THEN
C        USE INLINED BUFFER FOR I/O (SEE OPENINLN.F)
         CALL INLN_REDLIN(LUNT,BUF,NB,NREC)
         IRTFLG = 0
         RETURN
      ENDIF
      LUN = LUNARB(LUNT)

C     ADD LUNARA(LUN) (FOR LABEL REC) AND LUNSTK (FOR STACK OFFSET)
C     TO NREC TO GET THE CORRECT RECORD NUMBER
      I = NREC + LUNARA(LUN) + LUNSTK(LUNT)

C     USING IOSTAT; IERR IS SET TO ZERO ON EACH SUCCESSFUL READ. DEC 97 al
C     IF USING MPI .AND. ONLYONE_RED IS .FALSE. IT ALWAYS READS
C     OTHERWISE, USING MPI, READS ONLY ON PROCESSOR MYPID = 0 
      IF (MYPID .LE. 0) READ(LUN,REC=I,IOSTAT=IERR) BUF
      IF (IERR .NE. 0) THEN
         IRTFLG = IERR
         RETURN
      ENDIF

#ifdef USE_MPI
      IF (ONLYONE_RED .OR. MPIBCAST) THEN
C        ALWAYS BROADCASTS IF ONLYONE_RED IS .TRUE. WHEN USING MPI
         CALL BCAST_MPI('REDLIN','BUF', BUF,NB,'R', ICOMM,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN
         CALL BCAST_MPI('REDLIN','IERR',IERR,1,'I', ICOMM,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN
      ENDIF
#endif

      IRTFLG = 0
      IF (LUNFLIP(LUN) .EQ. 1) THEN
         CALL FLIPBYTESI(BUF,NB,IRTFLG)
      ENDIF

      END

@


1.36
log
@REDLIN_SEL to be used to replace: redlin1p
@
text
@d15 1
a15 1
C=* Email: spider@@wadsworth.org                                        *
@


1.35
log
@GPL_2010
@
text
@d3 5
a7 4
C   REDLIN.F               USED IOSTAT        12/8/97    ArDean Leith
C                          F90 CHANGES        4/7/98     ArDean Leith
C                          ENDEDNESS          FEB 03     ArDean Leith
C                          MPI CHANGES        OCT 08     ArDean Leith
d13 1
a13 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d105 2
d108 1
a108 1
C     THE SAME AS REDLIN EXCEPT NO MPI_BCAST CALLED 
d138 1
a138 1
      IF (LUNFLIP(LUN) .EQ. 1)  CALL FLIPBYTESI(BUF,NB,IRTFLG)
d142 78
@


1.34
log
@comments
@
text
@d9 4
a12 3
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
C=* Copyright 1985-2009  Health Research Inc.,                         *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
@


1.33
log
@ BCAST COM
@
text
@d9 5
a13 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d15 1
a15 6
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d62 1
d65 2
d84 2
d90 1
d105 1
a105 1
C     THE SAME AS REDLIN, NO MPI_BCAST USED 
@


1.32
log
@usebcast mpi changes
@
text
@a59 1
C     CHARACTER(LEN=160) :: FILOPEND
d63 2
a64 2
      LOGICAL            :: USEBCAST
      COMMON /COMM_MPI/USEBCAST
d66 1
a66 1
      ICOMM   = MPI_COMM_WORLD
d68 1
d80 1
a80 1
C     ADD LUNARA(LUN)(FOR LABEL REC) AND LUNSTK( FOR STACK OFFSET)
d84 1
a84 3
C     USE OF IOSTAT NOW MEANS THAT IERR IS RESET TO ZERO ON EACH
C     SUCCESSFUL READ.  DEC 97 al

d88 2
a89 2
      IF (USEBCAST) THEN
         CALL BCAST_MPI('REDLIN','BUF',BUF,NB,'R', ICOMM,MPIERR)
d98 1
a98 5
CC    IF (IERR .NE. 0) THEN
CC       INQUIRE(UNIT=LUN,OPENED=ISOPEN,NAME=FILOPEND)
CC       WRITE(NOUT,*) '*** ERROR (',IERR,') READING RECORD: ',I, 
CC   &           ' LENGTH: ',NB,' ON UNIT: ',LUN,' TO FILE: ',FILOPEND
CC    ENDIF
a99 2
      RETURN
      END
d130 1
a130 2
C     USE OF IOSTAT NOW MEANS THAT IERR IS RESET TO ZERO ON EACH
C     SUCCESSFUL READ.  DEC 97 al
d133 1
a134 5
      IF (LUNFLIP(LUN) .EQ. 1) THEN
         CALL FLIPBYTESI(BUF,NB,IRTFLG)
      ENDIF

      RETURN
@


1.31
log
@bcast_mpi used
@
text
@d62 1
d64 2
d87 1
a87 1
      IF (MYPID .LE. 0) READ(LUN,REC=I,IOSTAT=IERR) BUF
d90 4
a93 2
      CALL BCAST_MPI('REDLIN','BUF',BUF,NB,'R', ICOMM,MPIERR)
      CALL BCAST_MPI('REDLIN','IERR',IERR,1,'I', ICOMM,MPIERR)
d108 1
d112 1
@


1.30
log
@GPL License fixed
@
text
@d6 1
d10 1
a10 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d60 2
a61 2
      CHARACTER(LEN=80) :: FILOPEND
      LOGICAL :: ISOPEN
d64 2
a65 4
      INTEGER MYPID, COMM, MPIERR
      COMM   = MPI_COMM_WORLD
      MPIERR = 0 
      CALL MPI_COMM_RANK(COMM, MYPID, MPIERR)
d84 2
d87 2
a88 15
      IF (MYPID .EQ. 0) THEN
         READ(LUN,REC=I,IOSTAT=IERR) BUF
      ENDIF
      CALL MPI_BCAST(BUF,NB,MPI_REAL,0,COMM,MPIERR)
      IF (MPIERR .NE. 0) THEN
         WRITE(0,*) 'REDLIN: FAILED TO BCAST BUF '
         STOP
      ENDIF
      CALL MPI_BCAST(IERR,1,MPI_INTEGER,0,COMM,MPIERR)
      IF (MPIERR .NE. 0) THEN
         WRITE(0,*) 'REDLIN: FAILED TO BCAST IERR '
         STOP
      ENDIF
#else
      READ(LUN,REC=I,IOSTAT=IERR) BUF
a115 3
      CHARACTER(LEN=80) :: FILOPEND
      LOGICAL :: ISOPEN

d117 2
a118 4
      INTEGER MYPID, COMM, MPIERR
      COMM   = MPI_COMM_WORLD
      MPIERR = 0 
      CALL MPI_COMM_RANK(COMM, MYPID, MPIERR)
a139 6
CC    IF (IERR .NE. 0) THEN
CC       INQUIRE(UNIT=LUN,OPENED=ISOPEN,NAME=FILOPEND)
CC       WRITE(NOUT,*) '*** ERROR (',IERR,') READING RECORD: ',I, 
CC   &           ' LENGTH: ',NB,' ON UNIT: ',LUN,' TO FILE: ',FILOPEND
CC    ENDIF

@


1.29
log
@mpi
@
text
@d8 23
a30 6
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
@


1.28
log
@flipbytesi
@
text
@d44 9
d68 15
d84 1
d99 40
d140 5
d146 3
@


1.27
log
@endedness
@
text
@d62 1
a62 1
         CALL FLIPBYTES(BUF,BUF,NB,IRTFLG)
@


1.26
log
@virtual lun
@
text
@d3 3
a5 2
C   REDLIN.F                                 - USED IOSTAT 12/8/97 al
C                                              F90 CHANGES 4/7/98  al
d40 1
a40 1
      COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100)
d42 3
d58 1
d61 4
d66 1
d68 1
a68 1
CC   &                 ' ON I/O UNIT: ',LUN
@


1.25
log
@added lunarb to common /lunara/
@
text
@d15 1
a15 1
C     REDLIN(LUN,BUF,NB,NREC)
d20 1
a20 1
C        LUN    LOGICAL UNIT NUMBER OF FILE BEING READ       (SENT)
d31 1
a31 1
      SUBROUTINE REDLIN(LUN,BUF,NB,NREC)
d41 1
a41 1
      IF (ISINLINE(LUN)) THEN
d43 1
a43 1
         CALL INLN_REDLIN(LUN,BUF,NB,NREC)
d46 1
d50 1
a50 1
      I = NREC + LUNARA(LUN) + LUNSTK(LUN)
@


1.24
log
@f90 only now
@
text
@d39 1
a39 1
      COMMON /LUNARA/ LUNARA(100),LUNSTK(100)
@


1.23
log
@a
@
text
@a30 3
#ifdef SP_F90
C     ----------- F90 SPECIFIC CODE FOLLOWS ------------------

a61 46

#else

C     ----------- F77 SPECIFIC CODE FOLLOWS ------------------


      SUBROUTINE REDLIN(LUN,BUF,NB,NREC)

      REAL            BUF(NB)
      COMMON /IOERR/  IERR
      COMMON /UNITS/  LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
      COMMON /LUNARA/ LUNARA(100),LUNSTK(100)
      COMMON /LUNARB/ LOCLUN(100),NSAMLUN(100),NWORDLUN(100)



#ifdef SP_NT
      INTEGER         LOCLUN
#else
      INTEGER * 8     LOCLUN
#endif

      IF (LOCLUN(LUN) .GT. 0) THEN
C        USER HAS ASKED FOR INLINED BUFFER
         CALL INLN_REDLIN(LUN,BUF,NB,NREC)
         RETURN
      ENDIF

C     ADD LUNARA(LUN)(FOR LABEL REC) AND LUNSTK( FOR STACK OFFSET)
C     TO NREC TO GET THE CORRECT RECORD NUMBER
      I = NREC + LUNARA(LUN) + LUNSTK(LUN)

C     USE OF IOSTAT NOW MEANS THAT IERR IS RESET TO ZERO ON EACH
C     SUCCESSFUL READ.  DEC 97 al
      READ(LUN,REC=I,IOSTAT=IERR) BUF

CC    IF (IERR .NE. 0) THEN
CC       WRITE(NOUT,*) '*** ERROR (',IERR,') READING RECORD: ',I, 
CC   &                 ' ON I/O UNIT: ',LUN
CC    ENDIF

      RETURN
      END

#endif

@


1.22
log
@USE INLN_INFO ALTERED
@
text
@d79 1
a79 1
CNO_SAVE
@


1.21
log
@removed USEINLN
@
text
@d37 1
a37 1
      USE INLN_INFO
d44 2
a45 2
      IF (ASSOCIATED(LOCLUN(LUN)%IPT)) THEN
C        USE INLINED BUFFER FOR I/O
a113 131
C++*********************************************************************
C   INLN_REDLIN.FOR                                 MAHIEDDINE LADJADJ
C **********************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
C **********************************************************************
C
C     INLN_REDLIN(LUN,BUF,NB,NREC)
C
C     PURPOSE:    READ A LINE OF FLOATING POINT NUMBERS FROM BUFFER
C
C     PARAMETERS:
C        LUN    LOGICAL UNIT NUMBER OF FILE BEING READ
C        BUF    BUFFER WHERE RECORD IS READ IN
C        NB     NUMBER OF VALUES IN RECORD TO BE READ
C        NREC   RECORD TO BE READ
C
C        IERR   ERROR CODE 1 IS RETURNED IN CASE OF ERROR
C               IERR IS DEFINED IN COMMON /IOERR/IERR
C 
C       MANY COMMANDS IN SPIDER READ A FILE, MANIPULATE THE DATA, AND
C       WRITE THE RESULTS INTO A FILE, ONLY TO HAVE THE NEXT COMMAND
C       READ THE DATA BACK AGAIN IN CORE TO MANIPULATE IT AND STORE
C       IT BACK TO A FILE THEN START THE CYCLE AGAIN...
C       TO SPEED UP THE PROCESS, THE USER HAS THE ABILITY TO HAVE THAT 
C       DATA KEPT IN INCORE MEMORY UNTIL HE DECIDES THAT HE WANTS IT IN
C       A FILE. FOR THAT, SPIDER OFFERS AN INCORE MEMORY IN A COMMON BLOCK
C       BUFFER:
C
C       THIS BUFFER CAN BE SUBDIVIDED INTO TWO PART TO HOLD TWO FILES, 
C       CALLED INFILES.
C       BY DEFAULT, THE INFILES ARE CALLED ___1 AND ___2. 
C
C       DATA FROM A FILE IS STORED EXACTLY THE SAME WAY AS IT IS IN 
C       DISK FILE (I.E: A HEADER FOLLOWED BY NROWS OF DATA OF LENGTH NSAMS
C       REPEATED NSLICE TIMES).
C 
C--*******************************************************************


#ifdef SP_F90
C     ----------- F90 SPECIFIC CODE FOLLOWS ------------------

      SUBROUTINE INLN_REDLIN(LUN,BUF,NB,NREC)

C     USE INLINE BUFFER COMMON AREA
      USE INLN_INFO

      REAL            BUF(NB)
      COMMON /IOERR/  IERR
      COMMON /UNITS/  LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
      COMMON /LUNARA/ LUNARA(100),LUNSTK(100)

      REAL, DIMENSION(:), POINTER :: IPTNOW

      IPTNOW  => LOCLUN(LUN)%IPT

      ILOC = 0
C     RUN-TIME ALLOCATION SPECIFIC CODE LINE ENDS

C     GET THE CORRECT OFFSET INTO THE BUFFER.
      IGO = (LUNARA(LUN) + LUNSTK(LUN) + NREC - 1) * NSAMLUN(LUN) + ILOC 

      IF ((IGO + NB - 1 - ILOC) .GT. NWORDLUN(LUN)) THEN
C        GOES OUT OF RESERVED BUFFER!
         WRITE(NOUT,*) '*** INLN_REDLIN ARRAY OVERFLOW, LUN: ',LUN,
     &       'LENGTH:' ,IGO + NB
         IERR = 1
         RETURN
      ENDIF

C     READ THE BUFFER (THERE MAY BE A FASTER WAY TO DO THIS!!)
      DO I= 1,NB
         BUF(I) = IPTNOW(IGO + I)
      ENDDO
      IERR = 0

      RETURN
      END


#else
C     ----------- F77 SPECIFIC CODE FOLLOWS ------------------



      SUBROUTINE INLN_REDLIN(LUN,BUF,NB,NREC)

      REAL            BUF(NB)
      COMMON /IOERR/  IERR
      COMMON /UNITS/  LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
      COMMON /LUNARA/ LUNARA(100),LUNSTK(100)
      COMMON /LUNARB/ LOCLUN(100),NSAMLUN(100),NWORDLUN(100)

#if defined(SP_SUN4) || defined(SP_NT)
        INTEGER * 4     LOCLUN
#else
        INTEGER * 8     LOCLUN
#endif

      POINTER      (IPT,Q)
      DIMENSION    Q(1)

      IPT  = LOCLUN(LUN)
      ILOC = 0

C     GET THE CORRECT OFFSET INTO THE BUFFER.
      IGO = (LUNARA(LUN) + LUNSTK(LUN) + NREC - 1) * NSAMLUN(LUN) + ILOC 

      IF ((IGO + NB - 1 - ILOC) .GT. NWORDLUN(LUN)) THEN
C        GOES OUT OF RESERVED BUFFER!
         WRITE(NOUT,*) '*** INLN_REDLIN ARRAY OVERFLOW, LUN: ',LUN,
     &       'LENGTH:' ,IGO + NB
         IERR = 1
         RETURN
      ENDIF

C     READ THE BUFFER (THERE MAY BE A FASTER WAY TO DO THIS!!)
      DO I= 1,NB
         BUF(I) = Q(IGO + I)
      ENDDO
      IERR = 0

      RETURN
      END

#endif
@


1.20
log
@f90 changes
@
text
@a35 2
CNO_SAVE

d77 1
a77 2
      LOGICAL         USEINLN
      COMMON /LUNARB/ LOCLUN(100),NSAMLUN(100),NWORDLUN(100),USEINLN
a80 2
#ifdef SP_ALLOC
C     RUN-TIME ALLOCATION SPECIFIC CODE LINE FOLLOWS
a85 4
#else
C     NON-RUN-TIME ALLOCATION SPECIFIC CODE LINE FOLLOWS
      INTEGER * 4     LOCLUN
#endif
a162 2
CNO_SAVE

d210 1
a210 4
      LOGICAL         USEINLN
      COMMON /LUNARB/ LOCLUN(100),NSAMLUN(100),NWORDLUN(100),USEINLN

CNO_SAVE
a211 2
#ifdef SP_ALLOC
C     RUN-TIME ALLOCATION SPECIFIC CODE LINE FOLLOWS
a222 14
C     RUN-TIME ALLOCATION SPECIFIC CODE LINE ENDS

#else
C     NON-RUN-TIME ALLOCATION SPECIFIC CODE LINE FOLLOWS
C     CAN NOT USE POINTER IMPLEMENTATION SINCE POINTER SIZE
C     VARIES BETWEEN ALPHA AND NOT-ALPHA VMS

      PARAMETER       (INLNSIZ = 500000)
      COMMON /LUNARD/ Q(INLNSIZ)

      ILOC = LOCLUN(LUN) - 1 

C     NON-RUN-TIME ALLOCATION SPECIFIC CODE LINE ENDS
#endif
@


1.19
log
@NT spicific stuff
@
text
@d4 2
d31 42
d118 5
d124 1
a124 1
C   inln_REDLIN.FOR                                 MAHIEDDINE LADJADJ
d166 49
d228 2
a229 2
#ifdef SP_NT
      INTEGER      LOCLUN
d231 1
a231 1
      INTEGER * 8  LOCLUN
d274 1
@


1.18
log
@recoverd correct version
@
text
@d130 3
d134 1
@


1.17
log
@ifdef SP_NT
@
text
@d40 1
a40 1

d42 1
a42 1

d44 7
a50 2


d128 1
a128 1

d130 1
a130 2

      INTEGER      LOCLUN
d139 9
d149 2
@


1.16
log
@used INteger instead of integer *8 for pointers in nt
@
text
@d40 1
a40 1
#ifdef SP_ALLOC
d42 1
a42 1
#ifdef SP_NT
d44 2
a45 7
#else
      INTEGER * 8     LOCLUN
#endif
#else
C     NON-RUN-TIME ALLOCATION SPECIFIC CODE LINE FOLLOWS
      INTEGER * 4     LOCLUN
#endif
d123 1
a123 1
#ifdef SP_ALLOC
d125 2
a126 1
      INTEGER * 8  LOCLUN
a134 9
#else
C     NON-RUN-TIME ALLOCATION SPECIFIC CODE LINE FOLLOWS
C     CAN NOT USE POINTER IMPLEMENTATION SINCE POINTER SIZE
C     VARIES BETWEEN ALPHA AND NOT-ALPHA VMS

      PARAMETER       (INLNSIZ = 500000)
      COMMON /LUNARD/ Q(INLNSIZ)

      ILOC = LOCLUN(LUN) - 1 
a135 2
C     NON-RUN-TIME ALLOCATION SPECIFIC CODE LINE ENDS
#endif
@


1.15
log
@removed errt
from inln_redlin
@
text
@d42 3
d46 1
@


1.14
log
@used errt in inln_redlin for errors
@
text
@a155 1
         CALL ERRT(100,'REDLIN',NE)
@


1.13
log
@used iostat
@
text
@d115 1
a115 1
      REAL   BUF(NB)
d126 1
a126 1
      INTEGER * 8     LOCLUN
d128 2
a129 2
      POINTER (IPT,Q)
      DIMENSION Q(1)
d156 2
a157 1
         STOP
@


1.12
log
@changed error msg to add ierr number
@
text
@d2 10
a11 11
C++*******************************************************************
C   REDLIN.FOR                       DATE LAST MODIFIED: 8/4/95 al
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d18 8
a25 7
C        LUN    LOGICAL UNIT NUMBER OF FILE BEING READ
C        BUF    BUFFER WHERE RECORD IS READ IN
C        NB     NUMBER OF VALUES IN RECORD TO BE READ
C        NREC   RECORD TO BE READ
C
C        IERR   ERROR CODE 1 IS RETURNED IN CASE OF ERROR
C               IERR IS DEFINED IN COMMON /IOERR/IERR
d57 3
d70 10
a79 11
C++*******************************************************************
C   inln_REDLIN.FOR                       MAHIEDDINE LADJADJ
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
a106 1
C
d116 2
a117 3
      COMMON /IOERR/IERR

      COMMON /UNITS/LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
d119 1
a119 1
      LOGICAL USEINLN
a147 1
     
d163 1
@


1.11
log
@added lunstk to inline
@
text
@d31 1
a31 1
      REAL   BUF(NB)
d35 1
a35 1
      LOGICAL USEINLN
d57 1
a57 2
      READ(LUN,REC=I,ERR=1000) BUF
      RETURN
d59 4
a62 2
1000  IERR=1
CCCC  WRITE(NOUT,*) '*** ERROR IN REDLIN:',LUN,NB,NREC,I
a65 1

@


1.10
log
@added useinln to lunarb
@
text
@d150 1
a150 1
      IGO = (LUNARA(LUN) + NREC - 1) * NSAMLUN(LUN) + ILOC 
@


1.9
log
@stacks introduced
@
text
@d35 2
a36 1
      COMMON /LUNARB/ LOCLUN(100),NSAMLUN(100),NWORDLUN(100)
d119 2
a120 1
      COMMON /LUNARB/ LOCLUN(100),NSAMLUN(100),NWORDLUN(100)
@


1.8
log
@fixed integer 8 in inline buffer (not available on non-alpha)
@
text
@d32 3
a34 3
      COMMON /IOERR/IERR

      COMMON /LUNARA/ LUNARA(100),LASLAB
d53 3
a55 3
C     ADD LUNARA(LUN)(FOR LABEL REC) TO NREC TO GET THE CORRECT 
C     RECORD NUMBER
      I = NREC + LUNARA(LUN)
d60 1
a60 1
CCCC      WRITE(6,*) '*** ERROR IN REDLIN:',LUN,NB,NREC,I
d117 1
a117 1
      COMMON /LUNARA/ LUNARA(100),LASLAB
@


1.7
log
@new runtime inline buffer alteration
@
text
@a34 1
      INTEGER * 8     LOCLUN
d39 8
a117 1
      INTEGER * 8     LOCLUN
d121 5
a125 1
 
d129 17
a145 1
      IPT = LOCLUN(LUN)
d148 1
a148 1
      IGO = (LUNARA(LUN) + NREC - 1) * NSAMLUN(LUN) 
d150 1
a150 1
      IF ((IGO + NB - 1) .GT. NWORDLUN(LUN)) THEN
@


1.6
log
@allow use of inlined buff 1 and 2 simultaneously
@
text
@d3 1
a3 1
C   REDLIN.FOR                       DATE LAST MODIFIED: 7/16/93 al
d16 1
a16 1
C     PURPOSE:    READ A LINE OF FLOATING POINT NUMBERS FROM FILE
d22 1
a22 1
C        NREC...RECORD TO BE READ
a32 9
#ifdef SP_VMS
      COMMON /LUNARA/ LUNARA(100),LASLAB,LUNINI(100)
#else
      COMMON /LUNARA/ LUNARA(100),LASLAB,NOFFSET,
     &                  LUNOFF(100),LUNFORM(100),LUNINI(100)
#endif
        INTEGER ACTIV
	INTEGER ACT1,RECLN01,RECLN11,ACT2,RECLN02,RECLN12
	COMMON/LUNYP/ACT1,RECLN01,RECLN11,ACT2,RECLN02,RECLN12
d34 4
d39 4
a42 8
C     CHECK IF USER HAS ASKED FOR INLINED BUFFER
      IF(LUNINI(LUN) .GT. 0) THEN
         IF(LUN.EQ.ACT1) THEN
	   ACTIV = 1
	 ELSE
	   ACTIV = 2
	 END IF
         CALL INLN_REDLIN(ACTIV,LUN,BUF,NB,NREC)
d44 1
a44 1
      END IF
d71 1
a71 1
C     INLN_REDLIN(I,LUN,BUF,NB,NREC)
a75 1
C        INI      BUFF 1 OR 2
d79 1
a79 1
C        NREC...RECORD TO BE READ
a83 1
C
a91 3
C               PARAMETER (ISZBUF = 500000)
C               COMMON/SPI_FILEB/FBUF(ISZBUF)
C       note:  ISZBUF0=ISZBUF
d95 1
a95 9
C       BY DEFAULT, THE INFILES ARE CALLED ___1 AND ___2. THE USER
C       CAN RENAME THEM, WITH THE MD COMMAND (SETMODE.FOR ROUTINES).
C       THE USER NAMES ARE STORED AS INLNAM1 AND INLNAM2.
C               CHARACTER * 80 INLNAM1,INLNAM2
C               COMMON/CINLN_NAMES/INLNAM1,INLNAM2
C
C       THE SIZES OF THESE BUFFERS ARE INLNSIZE AND (ISZBUF0 - INLNSIZE).
C               INTEGER INLNSIZE, ISZBUF0
C               COMMON/INLN_FLAGS/INLNSIZE,ISZBUF0
d97 2
a98 1
C       A DATA FROM A FILE IS STORED EXACTLY THE SAME WAY AS IT IS IN 
a100 8
C       SPIDER OPENS A FILE TWICE. FIRST TO READ/WRITE THE HEADER WITH
C       A (COMPUTED) RECORD SIZE REC1, THEN A SECOND TIME, TO  READ/WRITE
C       THE IMAGE DATE ITSELF WITH A  (COMPUTED) RECORD SIZE REC2.
C       THE RECORD SIZES, REC1 AND REC2 ARE STORED IN RECLN0* AND RECLN1*
C       RESPECTIVELY FOR EACH INLINED BUFFER.
C               INTEGER INLUN1,RECLN01,RECLN11,INLUN2,RECLN02,RECLN12
C               COMMON/LUNYP/INLUN1,RECLN01,RECLN11,INLUN2,RECLN02,RECLN12
C       where INLUN* is the unit associated with each inlined buffer (90,91)
d104 1
a104 1
      SUBROUTINE INLN_REDLIN(INI,LUN,BUF,NB,NREC)
d108 1
a108 14
#ifdef SP_VMS
      COMMON /LUNARA/ LUNARA(100),LASLAB,LUNINI(100)
#else
      COMMON /LUNARA/ LUNARA(100),LASLAB,NOFFSET,
     &                  LUNOFF(100),LUNFORM(100),LUNINI(100)
#endif
C     DEFAULT VALUE OF INLNSIZE = ISZBUF/2 
      INTEGER INLNSIZE, ISZBUF0
      COMMON/INLN_FLAGS/INLNSIZE,ISZBUF0
      PARAMETER (ISZBUF = 500000)
      COMMON/SPI_FILEB/FBUF(ISZBUF)
      INTEGER INI,J,K,I,II,ENDSIZE
      INTEGER ACT1,RECLN01,RECLN11,ACT2,RECLN02,RECLN12
      COMMON/LUNYP/ACT1,RECLN01,RECLN11,ACT2,RECLN02,RECLN12
d110 10
a119 1
      INTEGER       LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
d121 2
a122 41
CNO_SAVE
      
C     ADD LUNINI(LUN)(FOR LABEL REC) TO NREC TO GET THE CORRECT 
C     RECORD NUMBER AND OFFSET.
      II = NREC + LUNINI(LUN)

      IF(INI.EQ.1) THEN
	 J=0
         RECL1=RECLN01
         RECL2=RECLN11
         ENDSIZE = INLNSIZE 
      ELSE
         J = INLNSIZE 
         RECL1=RECLN02
         RECL2=RECLN12
         ENDSIZE = ISZBUF0 - INLNSIZE
      END IF      
      
      IF(II.EQ.1) THEN
         IF(NB .GT. RECL1) GOTO 1000 
C	 READ HEADER
         DO I=1,NB
            BUF(I)  = FBUF(J+I)
         END DO
	 DO I = NB+1,RECL1
            BUF(I) = 0
         END DO
      ELSE
         K = (II-1) * RECL2 + 1
         IF((K+RECL2).GE.ENDSIZE) GOTO 1000
         IF(NB .GT. RECL2) GOTO 1000 
         J = J + K
C	 WRITE HEADER
         DO I=1,NB
            BUF(I) = FBUF(J+I)
         END DO
	 DO I = NB+1,RECL2
            BUF(I) = 0
         END DO
      END IF
      RETURN
d124 12
a135 3
1000  CONTINUE
      WRITE(NOUT,*) '*** INLN_REDLIN: buffer too small ',INI,NB,NREC
      STOP
d137 1
@


1.5
log
@changes for inlined buff by adding lunini array
@
text
@d39 3
a42 2
      INTEGER ACTIV,RECLN01,RECLN11,RECLN02,RECLN12
      COMMON/LUNYP/ACTIV,RECLN01,RECLN11,RECLN02,RECLN12
d46 5
d149 2
a150 2
      INTEGER ACTIV,RECLN01,RECLN11,RECLN02,RECLN12
      COMMON/LUNYP/ACTIV,RECLN01,RECLN11,RECLN02,RECLN12
@


1.4
log
@added comments for inlined buffers
@
text
@d33 6
a38 4
      COMMON /LUNARA/ LUNARA(100),LASLAB
C     FORTRAN UNIT ASSOCIATED WITH EACH inlined buff
      INTEGER INLUN1,RECLN01,RECLN11,INLUN2,RECLN02,RECLN12
      COMMON/LUNYP/INLUN1,RECLN01,RECLN11,INLUN2,RECLN02,RECLN12
d40 2
d44 2
a45 3
C     INLUN1(2) IS THE UNIT FOR INLINED BUFFER 1(2)
      IF(LUN.EQ.INLUN1) THEN
         CALL INLN_REDLIN(1,LUN,BUF,NB,NREC)
a47 5
      IF(LUN.EQ.INLUN2) THEN
         CALL INLN_REDLIN(2,LUN,BUF,NB,NREC)
         RETURN
      END IF

d49 2
a50 2
C     ADD LUNARA(LUN)(FOR LABEL REC) TO NREC TO GET THE CORRECT RECORD NUMBER

d131 6
a136 2
      COMMON /LUNARA/ LUNARA(100),LASLAB

a141 1

d143 5
a147 5

C     FORTRAN UNIT ASSOCIATED WITH EACH inlined buff
      INTEGER INLUN1,RECLN01,RECLN11,INLUN2,RECLN02,RECLN12
      COMMON/LUNYP/INLUN1,RECLN01,RECLN11,INLUN2,RECLN02,RECLN12

d149 4
a152 4

C     ADD LUNARA(LUN)(FOR LABEL REC) TO NREC TO GET THE CORRECT RECORD NUMBER
C     AND OFFSET.
      II = NREC + LUNARA(LUN)
d176 1
a176 1
         K = II * RECL2 - 1
d191 1
a191 1
      WRITE(6,*) '*** INLN_REDLIN: buffer too small ',INI,NB,NREC
@


1.3
log
@add read of  inlined buffer
@
text
@d40 1
d81 1
a81 1
C        I      BUFF 1 OR 2
d89 37
@


1.2
log
@nosave
@
text
@d34 4
d39 11
d60 95
@


1.1
log
@Initial revision
@
text
@d34 1
a34 1

@
