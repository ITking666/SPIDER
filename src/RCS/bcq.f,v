head	1.55;
access;
symbols
	healthdept_2018:1.55
	pre_getangas:1.53
	GPL2010:1.53
	pre_GPL2010:1.52
	pre_var_equation:1.52
	pre_fftwrings:1.51
	pre_opfiles:1.51
	src:1.51
	best-code:1.50
	x-named-regs:1.50
	x:1.50
	v13-00:1.50
	pre_GPL:1.48
	prec_CA:1.46
	noindx:1.37
	Bproc:1.35
	oct21:1.34
	last77:1.34;
locks; strict;
comment	@c @;


1.55
date	2018.10.03.14.33.56;	author leith;	state Exp;
branches;
next	1.54;

1.54
date	2014.01.12.19.48.08;	author leith;	state Exp;
branches;
next	1.53;

1.53
date	2010.06.24.13.25.07;	author leith;	state Exp;
branches;
next	1.52;

1.52
date	2008.12.16.16.13.42;	author leith;	state Exp;
branches;
next	1.51;

1.51
date	2006.08.28.16.01.14;	author leith;	state Exp;
branches;
next	1.50;

1.50
date	2005.10.17.20.08.21;	author leith;	state Exp;
branches;
next	1.49;

1.49
date	2005.10.17.18.03.01;	author leith;	state Exp;
branches;
next	1.48;

1.48
date	2005.01.04.18.24.11;	author leith;	state Exp;
branches;
next	1.47;

1.47
date	2004.04.15.19.03.20;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2003.09.29.17.56.56;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2003.07.23.20.49.42;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2003.06.04.16.43.10;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2003.05.29.17.11.59;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2003.05.28.15.19.50;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2003.05.28.13.11.43;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	2003.05.02.20.33.36;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2003.04.04.19.49.44;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2003.02.18.21.49.50;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2002.03.11.14.07.58;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2001.01.02.18.02.46;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	99.11.10.16.31.56;	author pawel;	state Exp;
branches;
next	1.34;

1.34
date	99.03.18.20.59.18;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	98.12.10.17.01.37;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	98.12.03.20.36.25;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	98.12.03.17.04.57;	author pawel;	state Exp;
branches;
next	1.30;

1.30
date	98.11.30.19.19.56;	author pawel;	state Exp;
branches;
next	1.29;

1.29
date	98.11.30.17.28.39;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	98.11.24.14.53.34;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	98.11.24.13.24.10;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	98.04.06.18.47.39;	author pawel;	state Exp;
branches;
next	1.25;

1.25
date	97.10.30.20.55.07;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	97.10.17.15.18.28;	author pawel;	state Exp;
branches;
next	1.23;

1.23
date	97.10.01.21.06.22;	author pawel;	state Exp;
branches;
next	1.22;

1.22
date	97.09.11.20.52.00;	author pawel;	state Exp;
branches;
next	1.21;

1.21
date	97.08.15.15.21.22;	author pawel;	state Exp;
branches;
next	1.20;

1.20
date	97.08.15.15.13.36;	author pawel;	state Exp;
branches;
next	1.19;

1.19
date	97.02.13.20.07.26;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	97.02.07.18.48.20;	author pawel;	state Exp;
branches;
next	1.17;

1.17
date	96.11.25.16.15.28;	author pawel;	state Exp;
branches;
next	1.16;

1.16
date	96.11.21.15.45.36;	author pawel;	state Exp;
branches;
next	1.15;

1.15
date	96.11.21.15.21.41;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	96.11.21.14.56.04;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	96.11.21.13.57.08;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	95.10.02.19.07.42;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	95.02.21.18.19.09;	author mladjadj;	state Exp;
branches;
next	1.10;

1.10
date	95.02.21.16.18.55;	author mladjadj;	state Exp;
branches;
next	1.9;

1.9
date	95.02.16.20.08.15;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	95.02.01.22.06.15;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	94.08.05.10.02.01;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	94.07.15.20.22.53;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	94.07.15.20.19.56;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	94.07.15.14.39.07;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	94.07.15.14.16.03;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.07.15.14.08.30;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.07.11.19.34.29;	author pawel;	state Exp;
branches;
next	;


desc
@@


1.55
log
@email_health_dept
@
text
@C++*********************************************************************
C
C  BCQ.F                                                   02/06/97
C                             USED ALLOCATE NOT CHKMEM  DEC 2000 al
C                             USED OPFILEC              FEB 2003 al
C                             INPUT X,Y,Z TOGETHER      MAY 2003 al
C                             ALLOCATE & PARTITION      MAY 2003 al
C                             REANG --> BUILDM          JUL 2003 al
C                             BUILDM BUG                SEP 2003 al
C                             NSLICE2 BUG               APR 2004 al
C                             CW ALLOCATION BUG         JAN 2005 al
C                             BETTER ERROR MSG          AUG 2006 al
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   BCQ(UNUSED)
C
C   PURPOSE: CALCULATES BACK-PROJECTION STEP OF 3D RECONSTRUCTION 
C            USING THREE EULERIAN ANGLES.  OPTIONALLY ONE OF TWO 
C            POSSIBLE WEIGHTING FUNCTIONS IS APPLIED. 
C
C   PARAMETERS:    UNUSED                                    (UNUSED)
C
C   CALL TREE:      BCQ --------> BUILDM -----> CANG
C                    |            BPCQP -----> WTF --> FMRS_2
C                    |                         WTM
C                    |                         BPCQ
C                    |
C                    -----------> BUILDM -----> CANG
C                                 BPCMP -----> WTF --> FMRS_2
C                                              WTM
C                                              BPCM
C
C23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
C--*********************************************************************

	SUBROUTINE BCQ(UNUSED)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

	COMMON /PAR/    LDPX,LDPY,LDPZ,LDPNMX,LDPNMY,NZ1


        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:,:), POINTER       :: ANGBUF
        REAL, ALLOCATABLE, DIMENSION(:,:)   :: DM,SS,CW
        REAL, ALLOCATABLE, DIMENSION(: )    :: CB,ILISTP
        REAL, ALLOCATABLE, DIMENSION(:,:)   :: PROJ
        REAL, ALLOCATABLE, DIMENSION(:,:,:) :: PROJS
        LOGICAL                             :: PARTITION

        CHARACTER(LEN=MAXNAM)               :: ANGDOC,FINPIC,FINPAT

	DATA  LUNDOC/97/,IOPIC/98/,INPIC/99/
	
C       READ INPUT TEMPLATE AND SELECTION DOC FILE CONTAINING IMAGE NO. 
        NILMAX = NIMAX
        CALL FILELIST(.TRUE.,LUNDOC,FINPAT,NLET,INUMBR,NILMAX,NANG,
     &                'TEMPLATE FOR INPUT IMAGES~',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

C       NANG - NUMBER OF ANGLES (PROJECTIONS)
	WRITE(NOUT,2001) NANG
2001	FORMAT(' TOTAL NUMBER OF IMAGES: ',I6)

        MAXXT = 4
        MAXYT = 0
        DO I = 1,NANG
           MAXYT = MAX(INUMBR(I),MAXYT)
        ENDDO

        CALL GETDOCDAT('ANGLES DOC',.TRUE.,ANGDOC,LUNDOC,.FALSE.,MAXXT,
     &                 MAXYT,ANGBUF,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        NZ3D = -1
        CALL RDPRI3S(NX3D,NY3D,NZ3D,NOT_USED,
     &                'OUTPUT VOLUME: X, Y & Z  DIMENSIONS',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (NZ3D .LE. -1) THEN
           CALL RDPRI1S(NZ3D,NOT_USED,
     &                  'OUTPUT VOLUME:  Z  DIMENSION',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
        ENDIF

	NZ1 = 1
	NZ2 = NZ3D
	CALL  RDPRIS(NZ1,NZ2,NOT_USED,
     &		'FIRST, LAST SLICE TO BE RECONSTRUCTED',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (NZ1 .LT. 1   .OR. NZ1 .GT.(NZ3D-1) .OR. 
     &      NZ2 .LE. NZ1 .OR. NZ2 .GT. NZ3D) THEN
            CALL ERRT(14,'A SLICE IS OUTSIDE VOLUME',NE)
            RETURN
        ENDIF 
	NZC = NZ2 - NZ1 + 1

	CALL  RDPRM(SNR,NOT_USED,'SNR/DIAMETER')
	IF (SNR .GT. 0.0)  SNR = 1.0 / SNR

        IFORM = 3
        CALL OPFILEC(0,.TRUE.,FINPIC,IOPIC,'U',IFORM,NX3D,NY3D,NZC,
     &               MAXIM,'RECONSTRUCTED 3-D OUTPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

C       OPEN FIRST IMAGE FILE TO DETERMINE NSAM, NROW, & NSL
 	CALL FILGET(FINPAT,FINPIC,NLET,INUMBR(1),INTFLG)
        MAXIM = 0
        CALL OPFILEC(0,.FALSE.,FINPIC,INPIC,'O',IFORM,NSAM,NROW,NSL,
     &             MAXIM,'DUMMY',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999
	CLOSE(INPIC)

	LDPX   = NX3D/2+1
	LDPY   = NY3D/2+1
	LDPZ   = NZ3D/2+1
	LDPNMX = NSAM/2+1
	LDPNMY = NROW/2+1
	NMAT   = NX3D*NY3D*NZC
	NNNN   = NSAM+2-MOD(NSAM,2)

        ALLOCATE(DM(9,MAXYT),SS(6,MAXYT),CW(NNNN/2,NROW),STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(46,'DM,SS,&CW',15*MAXYT+NNNN/2*NROW) 
           GOTO 9999
        ENDIF

        PARTITION = (FCHAR(6:6) .EQ. 'P')
C       IF PARTITION BUILDM RETURNS DM & SS FOR ANGLES KEYED BY INUMBR
        CALL BUILDM(INUMBR,DM,NANG,ANGBUF,.TRUE.,SS,PARTITION,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        WRITE(NOUT,91) NANG
91      FORMAT(' PROJECTION ANGLES CREATED:',I8)

        NANGP = NANG
        IF (PARTITION) THEN
           ALLOCATE(ILISTP(NANG),STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN
              CALL ERRT(46,'ILISTP',NANG) 
              GOTO 9999
           ENDIF

C          READ INPUT TEMPLATE AND SELECTION DOC FILE CONTAINING IMAGE NO. 
           CALL FILELIST(.FALSE.,LUNDOC,FINPAT,NLET,ILISTP,NANG,NANGP,
     &       'FILE NUMBERS OR SELECTION DOC. FILE FOR THIS PARTITION~',
     &       IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

C          NANGP - NUMBER OF ANGLES (PROJECTIONS) IN THIS PARTITION
	   WRITE(NOUT,92) NANGP
92	   FORMAT(' NUMBER OF IMAGES IN THIS PARTITION: ',I6)
        ENDIF

C       VOLUME CB MAY BE TOO LARGE TO ALLOCATE??
        ALLOCATE(PROJ(NNNN,NROW),CB(NMAT),STAT=IRTFLG)

	IF (IRTFLG .EQ. 0)  THEN
C          VOLUME ALLOCATION SUCCESSFUL
C          3-D BACK-PROJECTION WITH VOLUME & ALL PROJECTIONS IN MEMORY

           IF (PARTITION) THEN
   	      WRITE(NOUT,93) NANGP
93            FORMAT(/,' 3-D BACK-PROJECTION WITH VOLUME AND:, ',I5,
     &                 ' PROJECTIONS IN MEMORY',/)

              CALL BPCQP(PROJ,CW,NNNN,NSAM,NROW,CB,NX3D,NY3D,NZC,
     &	         INUMBR,ILISTP,DM,SS,NANG,NANGP,SNR,FINPAT(1:NLET),
     &           FINPIC,INPIC)
           ELSE
   	      WRITE(NOUT,94) NANG
94            FORMAT(/,' 3-D BACK-PROJECTION WITH VOLUME & ALL: ',I5,
     &                 ' PROJECTIONS IN MEMORY',/)

              CALL BPCQP(PROJ,CW,NNNN,NSAM,NROW,CB,NX3D,NY3D,NZC,
     &	         INUMBR,INUMBR,DM,SS,NANG,NANG,SNR,FINPAT(1:NLET),
     &           FINPIC,INPIC)
           ENDIF
           CALL WRTVOL(IOPIC,NX3D,NY3D,1,NZC,CB,IRTFLG)

	ELSE
C          WHOLE VOLUME ALLOCATION NOT SUCCESSFUL
C          3-D BACK-PROJECTION WITH VOLUME & SOME PROJECTIONS IN MEMORY

           IF (PARTITION) THEN
              MWANT = NNNN*NROW + NMAT 
              CALL ERRT(46,'PROJ & CB (PROJECTIONS & OUTPUT VOLUME)',
     &                  MWANT) 
              GOTO 9999
           ENDIF

           ALLOCATE(CB(NMAT),STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN
   	     WRITE(NOUT,*) ' *** TRY PARTITIONING YOUR VOLUME'

             CALL ERRT(46,'OUTPUT VOLUME TOO LARGE',NMAT) 
             GOTO 9999
           ENDIF

C          FIND HOW MANY PROJECTIONS CAN FIT IN MEMORY
C          al 2006 THIS IS LIKELY TO CRASH LATER DUE TO NEED FOR
C          ADDITIONAL STACK LOCATED MEMORY???

	   DO LPRJ=NANG,1,-1
              ALLOCATE(PROJS(LPRJ,NNNN,NROW),STAT=IRTFLG)
              IF (IRTFLG .EQ. 0) EXIT
	   ENDDO

           IF (IRTFLG .NE. 0) THEN
              CALL ERRT(46,'PROJS (OUTPUT VOLUME & PROJECTIONS)',
     &                  NNNN*NROW) 
              GOTO 9999
           ENDIF

   	   WRITE(NOUT,93) LPRJ

           CALL BPCMP(PROJS,CW,NNNN,NSAM,NROW,LPRJ,CB,
     &	         NX3D,NY3D,NZC,INUMBR,DM,SS,NANG,SNR,
     &           IOPIC,FINPAT(1:NLET),FINPIC,INPIC)
        ENDIF

C       DEALLOCATE  ARRAYS
9999    IF (ALLOCATED(PROJ))    DEALLOCATE(PROJ)
        IF (ALLOCATED(PROJS))   DEALLOCATE(PROJS)
        IF (ALLOCATED(DM))      DEALLOCATE(DM)
        IF (ALLOCATED(SS))      DEALLOCATE(SS)
        IF (ALLOCATED(CW))      DEALLOCATE(CW)
        IF (ALLOCATED(CB))      DEALLOCATE(CB)
        IF (ALLOCATED(ILISTP))  DEALLOCATE(ILISTP)
        IF (ASSOCIATED(ANGBUF)) DEALLOCATE(ANGBUF)

	CLOSE(IOPIC)

        RETURN
	END
@


1.54
log
@enter
@
text
@d20 1
a20 1
C=* Email: spider@@wadsworth.org                                        *
@


1.53
log
@GPL_2010
@
text
@d80 1
a80 1
     &                'ENTER TEMPLATE FOR INPUT IMAGES~',IRTFLG)
@


1.52
log
@cosmetic-format
@
text
@a14 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d16 5
a20 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d22 1
a22 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d27 1
a27 1
C=* This program is distributed in the hope that it will be useful,    *
d29 1
a29 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a30 1
C=*                                                                    *
d32 1
a32 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.51
log
@error messages & standard file name lengths
@
text
@d199 1
a199 1
94            FORMAT(/,' 3-D BACK-PROJECTION WITH VOLUME & ALL:, ',I5,
@


1.50
log
@GPL License fixed
@
text
@d12 1
d67 1
a67 2
	COMMON /F_SPEC/ FINPAT,NLET,FINPIC
	CHARACTER*80    FINPIC,FINPAT,ANGDOC
d77 2
d118 3
a120 3
        IF (NZ1.LT.1   .OR. NZ1.GT.(NZ3D-1) .OR. 
     &      NZ2.LE.NZ1 .OR. NZ2.GT.NZ3D) THEN
            CALL ERRT(14,'BCQ',NE)
d123 1
a126 1
	NZC = NZ2 - NZ1 + 1
d163 1
d178 2
a179 2
	   WRITE(NOUT,2002) NANGP
2002	   FORMAT(' NUMBER OF IMAGES IN THIS PARTITION: ',I6)
d187 1
a187 2
	   WRITE(NOUT,1001) 
1001	   FORMAT(/,' 3-D BACK-PROJECTION WITH VOLUME IN MEMORY',/)
d190 4
d198 4
d210 1
d214 2
a215 1
              CALL ERRT(46,'PROJ & CB',MWANT) 
d221 3
a223 1
             CALL ERRT(46,'CB',NMAT) 
d228 4
a231 1
	   DO  LPRJ=NANG,1,-1
d237 2
a238 1
              CALL ERRT(46,'PROJS',NNNN*NROW) 
d242 1
a242 3
   	   WRITE(NOUT,1002) LPRJ
1002	   FORMAT(/,' 3-D BACK-PROJECTION WITH:, ',I5,
     &              ' PROJECTIONS IN MEMORY',/)
@


1.49
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a13 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d17 1
a17 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a36 6

C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.48
log
@cw allocation too small bug
@
text
@d1 1
d16 24
@


1.47
log
@3 inputs / line bug on nslice2
@
text
@d11 1
d130 1
a130 1
        ALLOCATE(DM(9,MAXYT),SS(6,MAXYT),CW(NNNN,NROW/2),STAT=IRTFLG)
d132 1
a132 1
           CALL ERRT(46,'DM,..',15*MAXYT+NNNN*NROW/2) 
@


1.46
log
@partition bug
@
text
@d10 1
d81 1
a81 1
        NSLICE2 = -1
d86 1
a86 1
        IF (NSLICE2 .LE. -1) THEN
d141 1
a141 1
91      FORMAT('  PROJECTION ANGLES CREATED:',I8)
@


1.45
log
@reang --> buildm (incorporating cang call)
@
text
@d9 1
d130 1
a130 1
           CALL ERRT(46,'UNABLE TO ALLOCATE DM,..',15*MAXYT+NNNN*NROW/2) 
d134 3
a136 2
C       BUILDM RETURNS DM & SS FOR ANGLES KEYED BY INUMBR ORDER NOW al 6/03
        CALL BUILDM(INUMBR,DM,NANG,ANGBUF,.TRUE.,SS,IRTFLG)
a141 1
        PARTITION = (FCHAR(6:6) .EQ. 'P')
d145 1
a145 1
              CALL ERRT(46,'UNABLE TO ALLOCATE ILISTP',NANG) 
d182 6
d190 1
a190 1
             CALL ERRT(46,'UNABLE TO ALLOCATE CB',NMAT) 
d201 1
a201 1
              CALL ERRT(46,'UNABLE TO ALLOCATE PROJS',NNNN*NROW) 
d209 2
a210 7
           IF (PARTITION) THEN
              CALL BPCMP(PROJS,CW,NNNN,NSAM,NROW,LPRJ,CB,
     &	         NX3D,NY3D,NZC,INUMBR,ILISTP,DM,SS,NANG,NANGP,SNR,
     &           IOPIC,FINPAT(1:NLET),FINPIC,INPIC)
           ELSE
              CALL BPCMP(PROJS,CW,NNNN,NSAM,NROW,LPRJ,CB,
     &	         NX3D,NY3D,NZC,INUMBR,INUMBR,DM,SS,NANG,NANG,SNR,
a211 1
           ENDIF
@


1.44
log
@for partition
@
text
@d8 1
d27 1
a27 1
C   CALL TREE:      BCQ --------> REANG -----> CANG
d32 1
a32 1
C                    -----------> REANG -----> CANG
d133 2
a134 2
C       REANG RETURNS DM & SS FOR ANGLES KEYED BY ILIST ORDER NOW al 6/03
        CALL REANG(INUMBR,DM,SS,NANG,ANGBUF(1,1),IRTFLG)
d136 3
@


1.43
log
@partition.
@
text
@a49 1
        INTEGER, ALLOCATABLE, DIMENSION(:)  :: ISELECT
d51 1
a51 1
        REAL, ALLOCATABLE, DIMENSION(: )    :: CB
a57 3

        PARTITION = (FCHAR(6:6) .EQ. 'P')

a67 19
C       NANGP - NUMBER OF ANGLES (PROJECTIONS) IN THIS PARTITION
        NANGP = NANG

        IF (PARTITION) THEN
C          READ INPUT TEMPLATE AND SELECTION DOC FILE CONTAINING IMAGE NO. 
           ALLOCATE(ISELECT(NANG),STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN
              CALL ERRT(102,'UNABLE TO ALLOCATE ISELECT',NANG)
              RETURN
           ENDIF
           CALL FILELIST(.FALSE.,LUNDOC,FINPAT,NLET,ISELECT,NANG,NANGP,
     &       'FILE NUMBERS OR SELECTION DOC. FILE FOR THIS PARTITION~',
     &       IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

	   WRITE(NOUT,2002) NANGP
2002	   FORMAT(' NUMBER OF IMAGES IN THIS PARTITION: ',I6)
        ENDIF

d126 1
a126 1
        ALLOCATE(DM(9,NANG),SS(6,NANG),CW(NNNN,NROW/2),STAT=IRTFLG)
d128 1
a128 1
           CALL ERRT(46,'UNABLE TO ALLOCATE DM,..',15*NANG) 
d132 1
a132 1
C       REANG RETURNS DM & SS FOR USED ANGLES ONLY 
d136 20
a163 1
C             PARTIAL BP
d165 1
a165 1
     &	         ISELECT,DM,SS,NANG,NANGP,SNR,FINPAT(1:NLET),
d169 1
a169 1
     &	         INUMBR,DM,SS,NANG,NANGP,SNR,FINPAT(1:NLET),
a171 1

a198 1
C             PARTIAL BP
d200 1
a200 1
     &	         NX3D,NY3D,NZC,ISELECT,DM,SS,NANG,NANGP,SNR,
a201 1

d204 1
a204 1
     &	         NX3D,NY3D,NZC,INUMBR,DM,SS,NANG,NANGP,SNR,
d216 1
a217 1
        IF (ALLOCATED(ISELECT)) DEALLOCATE(ISELECT)
@


1.42
log
@partition
@
text
@d7 1
a7 1
C                             ALLOCATE                  MAY 2003 al
d50 1
d55 1
d60 2
d70 16
a85 1
2001	FORMAT(' NUMBER OF IMAGES: ',I6)
d87 4
d166 10
a175 2
           CALL BPCQP(PROJ,CW,NNNN,NSAM,NROW,CB,NX3D,NY3D,NZC,
     &	      INUMBR,DM,SS,NANG,SNR,FINPAT(1:NLET),FINPIC,INPIC)
d203 11
a213 3
           CALL BPCMP(PROJS,CW,NNNN,NSAM,NROW,LPRJ,CB,
     &	      NX3D,NY3D,NZC,INUMBR,DM,SS,NANG,SNR,
     &        IOPIC,FINPAT(1:NLET),FINPIC,INPIC)
d224 1
@


1.41
log
@partition
@
text
@d7 1
d10 6
a15 6
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
d35 1
a35 1

d49 5
a53 4
        REAL, ALLOCATABLE, DIMENSION(:)    :: Q
        INTEGER, ALLOCATABLE, DIMENSION(:) :: ISELECT
        REAL, DIMENSION(:,:), POINTER      :: ANGBUF
        LOGICAL                            :: PARTITION
a56 1
        PARTITION = (FCHAR(6:6) .EQ. 'P')
d58 1
a59 5

C       N    - LINEAR DIMENSION OF PROJECTIONS AND RESTORED CUBE
C       NANG - NUMBER OF ANGLES (PROJECTIONS)

C       READ INPUT TEMPLATE AND SELECTION DOC FILE CONTAINING IMAGE NO. 
d64 1
d66 1
a66 1
2001	FORMAT(' TOTAL NUMBER OF IMAGES: ',I6)
a67 19
C       NANGP - NUMBER OF ANGLES (PROJECTIONS) IN THIS PARTITION
        NANGP = NANG

        IF (PARTITION) THEN
C          READ INPUT TEMPLATE AND SELECTION DOC FILE CONTAINING IMAGE NO. 
           ALLOCATE(ISELECT(NANG),STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN
              CALL ERRT(102,'UNABLE TO ALLOCATE ISELECT',NANG)
              RETURN
           ENDIF
           CALL FILELIST(.FALSE.,LUNDOC,FINPAT,NLET,ISELECT,NANG,NANGP,
     &       'FILE NUMBERS OR SELECTION DOC. FILE FOR THIS PARTITION~',
     &       IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

	   WRITE(NOUT,2002) NANGP
2002	   FORMAT(' NUMBER OF IMAGES IN THIS PARTITION: ',I6)
        ENDIF

a122 1

d126 9
a134 7
 	K_DM   = 1
	K_SS   = IPALIGN64(K_DM+9*NANG)
	K_PROJ = IPALIGN64(K_SS+6*NANG)
	K_CB   = IPALIGN64(K_PROJ+NNNN*NROW)
	K_WORK = IPALIGN64(K_CB+NMAT)
	K_CW   = K_WORK
	MEMTOT = IPALIGN64(K_CW+NNNN*NROW/2)
d136 1
a136 1
        ALLOCATE(Q(MEMTOT),STAT=IRTFLG)
d139 6
a144 19
	   WRITE(NOUT,1001)  MEMTOT
1001	   FORMAT(/,' 3-D BACK-PROJECTION, VOLUME IN MEMORY',/,
     &              ' YOU HAVE RESERVED:',I9,/)

	   CALL REANG(INUMBR,Q(K_DM),Q(K_SS),NANG,ANGBUF(1,1),IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9998
           
           IF (PARTITION) THEN
C             PARTIAL BP
	      CALL BPCQP
     &	      (Q(K_PROJ),Q(K_CW),NNNN,NSAM,NROW,Q(K_CB),NX3D,NY3D,NZC,
     &	      ISELECT,Q(K_DM),Q(K_SS),NANG,NANGP,SNR,
     &        FINPAT(1:NLET),FINPIC,INPIC)
           ELSE
	      CALL BPCQP
     &	      (Q(K_PROJ),Q(K_CW),NNNN,NSAM,NROW,Q(K_CB),NX3D,NY3D,NZC,
     &	      INUMBR,Q(K_DM),Q(K_SS),NANG,NANGP,SNR,
     &        FINPAT(1:NLET),FINPIC,INPIC)
           ENDIF
d146 1
a146 4
	   DO K=1,NY3D*NZC
	      MI = (K-1)*NX3D
	      CALL WRTLIN(IOPIC,Q(K_CB+MI),NX3D,K)
	   ENDDO
d149 7
a155 4
	   K_CB   = IPALIGN64(K_SS+6*NANG)
	   K_WORK = IPALIGN64(K_CB+NX3D*NY3D)
	   K_CW   = K_WORK
	   K_PROJ = IPALIGN64(K_CW+NNNN*NROW/2)
d157 1
d159 2
a160 6
	      MEMTOT = IPALIGN64(K_PROJ+LPRJ*NNNN*NROW)
              ALLOCATE(Q(MEMTOT),STAT=IRTFLG)
              IF (IRTFLG .NE. 0) THEN
                 CALL ERRT(46,'UNABLE TO ALLOCATE Q',MEMTOT) 
                 GOTO 9999
              ENDIF
d163 5
d169 2
a170 2
1002	   FORMAT(/,' 3-D BACK-PROJECTION:, ',I5,
     &              ' PROJECTIONS IN THE MEMORY',/)
d172 2
a173 8
C          REANG RETURNS DM & SS FOR USED ANGLES ONLY 
	   CALL REANG(INUMBR,Q(K_DM),Q(K_SS),NANG,ANGBUF(1,1),IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9998

           IF (PARTITION) THEN
C             PARTIAL BP
	      CALL BPCMP(Q(K_PROJ),Q(K_CW),NNNN,NSAM,NROW,LPRJ,Q(K_CB),
     &	      NX3D,NY3D,NZC,ISELECT,Q(K_DM),Q(K_SS),NANG,NANGP,SNR,
a174 5
           ELSE
	      CALL BPCMP(Q(K_PROJ),Q(K_CW),NNNN,NSAM,NROW,LPRJ,Q(K_CB),
     &	      NX3D,NY3D,NZC,INUMBR,Q(K_DM),Q(K_SS),NANG,NANGP,SNR,
     &        IOPIC,FINPAT(1:NLET),FINPIC,INPIC)
           ENDIF
d178 8
a185 3
9998    IF (ALLOCATED(Q))        DEALLOCATE(Q)
9999    IF (ASSOCIATED(ANGBUF))  DEALLOCATE(ANGBUF)
        IF (ALLOCATED(ISELECT))  DEALLOCATE(ISELECT)
@


1.40
log
@x,y,z input together
@
text
@d17 1
a17 1
C   BCQ(MAXMEM)
d23 1
a23 1
C   PARAMETERS:    MAXMEM                                    (UNUSED)
d33 1
a33 1
C                                              BPCQ
d38 1
a38 1
	SUBROUTINE BCQ(MAXMEM)
d51 1
d55 2
d59 1
a59 1
C       N - LINEAR DIMENSION OF PROJECTIONS AND RESTORED CUBE
d63 2
a64 7
        ALLOCATE(ISELECT(NILMAX),STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(102,'UNABLE TO ALLOCATE ISELECT',NILMAX)
           RETURN
        ENDIF
        CALL FILELIST(.TRUE.,LUNDOC,FINPAT,NLET,ISELECT,NILMAX,NANG,
     &                'ENTER TEMPLATE FOR 2-D INPUT IMAGES~',IRTFLG)
a66 1
C       NANG - TOTAL NUMBER OF IMAGES - NUMBER OF ANGLES (PROJECTIONS)
d68 20
a87 1
2001	FORMAT(' NUMBER OF IMAGES =',I5)
d92 1
a92 1
           MAXYT = MAX(ISELECT(I),MAXYT)
d128 1
a128 1
     &               MAXIM,'RECONSTRUCTED 3-D',.FALSE.,IRTFLG)
d132 1
a132 1
 	CALL FILGET(FINPAT,FINPIC,NLET,ISELECT(1),INTFLG)
d163 1
a163 1
	   CALL REANG(ISELECT,Q(K_DM),Q(K_SS),NANG,ANGBUF(1,1),IRTFLG)
d165 9
a173 2

	   CALL BPCQP
d175 1
a175 1
     &	      ISELECT,Q(K_DM),Q(K_SS),NANG,SNR,
d177 1
a188 3
C	   K_PROJ = K_CW+NSAM*NROW
C	   MTM    = MAXMEM-K_PROJ
C	   LPRJ   = MIN0(NANG,MTM/(NSAM*NROW)
d203 2
a204 1
	   CALL REANG(ISELECT,Q(K_DM),Q(K_SS),NANG,ANGBUF(1,1),IRTFLG)
d207 8
a214 2
	   CALL BPCMP(Q(K_PROJ),Q(K_CW),NNNN,NSAM,NROW,LPRJ,Q(K_CB),
     &	      NX3D,NY3D,NZC,ISELECT,Q(K_DM),Q(K_SS),NANG,SNR,
d216 1
@


1.39
log
@call tree
@
text
@d6 1
d83 10
a92 1
	CALL  RDPRMI(NX3D,NY3D,NOT_USED,'3D VOLUME: X,Y DIMENSIONS')
d94 5
a98 1
	CALL  RDPRMI(NZ3D,IDUM,NOT_USED,'3D VOLUME: Z DIMENSION')
d100 5
a104 2
	CALL  RDPRMI(NZ1,NZ2,NOT_USED,
     &		'FIRST, LAST SLICE TO BE RECONSTRUCTED')
a105 2
	IF (NZ1 .EQ. 0)  NZ1 = 1
	IF (NZ2 .EQ. 0)  NZ2 = NZ3D
@


1.38
log
@opfilec
@
text
@d24 10
@


1.37
log
@nloop,iloop_removed
@
text
@d5 1
d86 2
a87 2
        CALL OPFIL(.TRUE.,FINPIC,IOPIC,'U',NX3D,NY3D,NZC,
     &             MAXIM,'RECONSTRUCTED 3-D',.FALSE.,IRTFLG)
d93 1
a93 1
        CALL OPFIL(.FALSE.,FINPIC,INPIC,'O',NSAM,NROW,NSL,
@


1.36
log
@removed allocmem, used select, cosmetic
@
text
@d71 1
a71 1
	CALL  RDPRMI(NX3D,NY3D,NLOOP,ILOOP,'3D VOLUME: X,Y DIMENSIONS')
d73 1
a73 1
	CALL  RDPRMI(NZ3D,IDUM,NLOOP,ILOOP,'3D VOLUME: Z DIMENSION')
d75 1
a75 1
	CALL  RDPRMI(NZ1,NZ2,NLOOP,ILOOP,
d80 1
a80 1
	CALL  RDPRM(SNR,NLOOP,ILOOP,'SNR/DIAMETER')
@


1.35
log
@getdocdat changed
@
text
@d3 2
a4 1
C  BCQ.F
d15 1
a15 1
C   BCQ
d17 6
d27 1
a27 1
C                                                    02/06/97
d29 1
d31 1
a31 1
	PARAMETER       (NILMAX=99998)
a33 2
	CHARACTER*1     NULL
	COMMON          BUF(1024),ILIST(NILMAX),BAF(1)
d36 7
a42 8
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: Q
        REAL, DIMENSION(:,:), POINTER :: ANGBUF
        LOGICAL       RUNTIME
	COMMON /PAR/  LDPX,LDPY,LDPZ,LDPNMX,LDPNMY,NZ1

	DATA  IOPIC/98/,INPIC/99/
	NULL=CHAR(0)
d47 9
a55 26
	IUNIT=NOUT
 	CALL FILERD(FINPAT,NLET,NULL,
     &	     'ENTER TEMPLATE FOR 2-D IMAGE NAME',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

 	CALL FILERD(FINPIC,NLETI,NULL,'SELECTION DOC',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

	K      = 0
	K2     = 1
	NANG   = 0
        MAXNUM = 0
778	LERR   = -1
	IF (NANG .EQ. NILMAX)  THEN
           WRITE(NOUT,*) '***TOO MANY IMAGES, LIST TRUNCATED'
           GOTO  779
	ENDIF
	KP1=K+1
	CALL UNSAV(FINPIC,K,INPIC,KP1,BUF,1,LERR,K2)
	IF (LERR.EQ.0)  THEN
	   NANG        = NANG+1
	   ILIST(NANG) = BUF(1)
           IF (ILIST(NANG) .GT. MAXNUM) MAXNUM = ILIST(NANG)
	   K           = K + 1
	   GOTO  778
	ENDIF
d57 1
a57 3
779	CLOSE(INPIC)

C       NANG - TOTAL NUMBER OF IMAGES
a60 1
C       RETRIEVE ARRAY WITH ANGLES DATA IN IT
d62 7
a68 3
        MAXYT = MAXNUM
        CALL GETDOCDAT('ANGLES DOC',.TRUE.,ANGDOC,77,.FALSE.,MAXXT,
     &                       MAXYT,ANGBUF,IRTFLG)
d76 1
a76 1
     &		'FIRST,LAST SLICE TO BE RECONSTRUCTED')
d81 2
a82 2
	IF (SNR.GT.0.0)  SNR = 1.0/SNR
	NZC = NZ2-NZ1+1
d89 2
a90 2
C       OPEN FIRST IMAGE FILE TO DETERMINE NSAM, NROW, NSL
 	CALL FILGET(FINPAT,FINPIC,NLET,ILIST(1),INTFLG)
d97 16
a112 16
	LDPX=NX3D/2+1
	LDPY=NY3D/2+1
	LDPZ=NZ3D/2+1
	LDPNMX=NSAM/2+1
	LDPNMY=NROW/2+1

	NMAT=NX3D*NY3D*NZC
	NNNN=NSAM+2-MOD(NSAM,2)

 	K_DM=1
	K_SS=IPALIGN64(K_DM+9*NANG)
	K_PROJ=IPALIGN64(K_SS+6*NANG)
	K_CB=IPALIGN64(K_PROJ+NNNN*NROW)
	K_WORK=IPALIGN64(K_CB+NMAT)
	K_CW=K_WORK
	MEMTOT=IPALIGN64(K_CW+NNNN*NROW/2)
d114 1
a114 2
	IRTFLG = -9
        CALL CHKMEM(MEMTOT,BAF,MAXMEM,RUNTIME,IPQ,IRTFLG)
d118 2
a119 2
1001	   FORMAT(/,' 3-D BACK-PROJECTION, VOLUME IN THE MEMORY',/,
     &              ' YOU HAVE RESERVED ',I9,/)
d121 1
a121 2
           Q      = >IPQ
	   CALL REANG(ILIST,Q(K_DM),Q(K_SS),NANG,ANGBUF,IRTFLG)
d126 4
a129 2
     &	      ILIST,Q(K_DM),Q(K_SS),NANG,SNR,NOUT)
	   DO   K=1,NY3D*NZC
d145 3
a147 4
	      IRTFLG = -9
              CALL CHKMEM(MEMTOT,BAF,MAXMEM,RUNTIME,IPQ,IRTFLG)
	      IF (IRTFLG .NE. 0)  THEN
                 CALL  ERRT(6,'BP 3D',NE)
d151 1
a151 1
           Q = >IPQ
d156 1
a156 1
	   CALL REANG(ILIST,Q(K_DM),Q(K_SS),NANG,ANGBUF(1,1),IRTFLG)
d160 2
a161 1
     &	      NX3D,NY3D,NZC,ILIST,Q(K_DM),Q(K_SS),NANG,SNR,NOUT,IOPIC)
d164 4
a167 1
9998    IF (RUNTIME) CALL DEALLOCMEM_R(IPQ,IRTFLG)
a168 3

C       DEALLOCATE ANGLES ARRAY
9999    DEALLOCATE(ANGBUF)
@


1.34
log
@f90
f90
@
text
@a28 1
#ifdef SP_F90
d32 1
a32 11

        REAL, DIMENSION(:), POINTER :: IPANG
        REAL, DIMENSION(:), POINTER :: ANGBUF
#else
        DIMENSION     Q(1)
        POINTER       (IPQ,Q) 

        DIMENSION     ANGBUF(1)
        POINTER       (IPANG,ANGBUF) 

#endif
a36 1
CNO_SAVE
d79 1
a79 1
     &                       MAXYT,IPANG,IRTFLG)
a80 3
#ifdef SP_F90
        ANGBUF = > IPANG
#endif
a132 1
#ifdef SP_F90
a133 1
#endif
a162 1
#ifdef SP_F90
a163 2
#endif
 
d168 1
a168 1
	   CALL REANG(ILIST,Q(K_DM),Q(K_SS),NANG,ANGBUF(1),IRTFLG)
d179 1
a179 1
9999    CALL DEALLOCMEM_R(IPANG,IRTFLG)
@


1.33
log
@bad reang call in f77
@
text
@d33 1
d35 1
d37 3
a42 2
        DIMENSION     Q(1)
        POINTER       (IPQ,Q) 
d93 3
d149 2
a150 3
         Q = >IPQ
	   CALL REANG(ILIST,Q(K_DM),Q(K_SS),NANG,IPANG,IRTFLG)
#else
a151 1
#endif
d180 4
a183 1

d187 2
a188 4
#ifdef SP_F90
           Q = >IPQ
#endif
	   CALL REANG(ILIST,Q(K_DM),Q(K_SS),NANG,IPANG,IRTFLG)
d195 1
a195 1
9998    IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'BCQ',IRTFLG)
d199 1
a199 2
9999    RUNTIME = .TRUE.
        CALL ALLOCIT(0,RUNTIME,IPANG,'BCQ',IRTFLG)
@


1.32
log
@f90 & error recovery
@
text
@d144 3
a147 1
	   CALL REANG(ILIST,Q(K_DM),Q(K_SS),NANG,IPANG,IRTFLG)
@


1.31
log
@99998
@
text
@d140 2
a141 1
     1              ' YOU HAVE RESERVED ',I9,/)
d145 2
a146 1
	   CALL REANG(ILIST,Q(K_DM),Q(K_SS),NANG,IPANG)
d157 8
a164 7
	   K_CB=IPALIGN64(K_SS+6*NANG)
	   K_WORK=IPALIGN64(K_CB+NX3D*NY3D)
	   K_CW=K_WORK
	   K_PROJ=IPALIGN64(K_CW+NNNN*NROW/2)
C	   K_PROJ=K_CW+NSAM*NROW
C	   MTM=MAXMEM-K_PROJ
C	   LPRJ=MIN0(NANG,MTM/(NSAM*NROW)
d166 1
a166 1
	      MEMTOT=IPALIGN64(K_PROJ+LPRJ*NNNN*NROW)
d169 4
a172 1
	      IF (IRTFLG .EQ. 0)  GOTO 505
d175 2
a176 5
           CALL  ERRT(6,'BP 3D',NE)
           GOTO 9999

505	   WRITE(NOUT,1002)  LPRJ
1002	   FORMAT(/,' 3-D BACK-PROJECTION:, ',I4,
d179 1
a179 1
         Q = >IPQ
d181 2
a182 1
	   CALL REANG(ILIST,Q(K_DM),Q(K_SS),NANG,IPANG)
d188 1
a188 1
        IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'BCQ',IRTFLG)
a190 1
9999    CONTINUE
d192 1
a192 1
        RUNTIME = .TRUE.
@


1.30
log
@buffer 99999
@
text
@d23 1
a23 1
	PARAMETER       (NILMAX=99999)
@


1.29
log
@bad maxyt value used
@
text
@d23 1
a23 1
	PARAMETER       (NILMAX=20000)
@


1.28
log
@unreacable code removed
@
text
@d59 6
a64 5
	K    = 0
	K2   = 1
	NANG = 0
778	LERR = -1
	IF (NANG.EQ.NILMAX)  THEN
d69 1
a69 1
	CALL  UNSAV(FINPIC,K,INPIC,KP1,BUF,1,LERR,K2)
d71 4
a74 3
	   NANG=NANG+1
	   ILIST(NANG)=BUF(1)
	   K=K+1
d86 1
a86 1
        MAXYT = NANG
@


1.27
log
@used opfil, getdocdat, & cosmetic
@
text
@a168 1
           RETURN
@


1.26
log
@f90 alloc
@
text
@d1 17
a20 1
	PARAMETER  (NILMAX=20000)
d22 7
a28 5
	COMMON /F_SPEC/  FINPAT,NLET,FINPIC
	CHARACTER*80  FINPIC,FINFO
	CHARACTER*80  FINPAT
	CHARACTER*1   NULL
	COMMON        DUMMY(80),BUF(1024),ILIST(NILMAX),BAF(1)
d33 4
a37 1
#else
d48 2
a49 2
C       N - linear dimension of projections and restored cube
C       NANG - number of angles (projections)
d52 11
a62 7
 	CALL  FILERD(FINPAT,NLET,NULL,
     &	   'ENTER TEMPLATE FOR 2-D IMAGE NAME',IRTFLG)
 	CALL  FILERD(FINPic,NLETi,NULL,'SELECTION DOC',IRTFLG)
	K=0
	K2=1
	NANG=0
778	LERR=-1
d64 1
a64 1
           WRITE(NOUT,*) '  TOO MANY IMAGES, LIST TRUNCATED'
d77 2
d80 9
a88 5
2001	FORMAT('  NUMBER OF IMAGES =',i5)
C       NANG - total number of images
	CALL  FILERD(FINFO,NLET1,NULL,'ANGLES DOC',ITRFLG)
	FINFO=FINFO(1:NLET1)//'.'//DATEXC(1:3)
	OPEN(77,FILE=FINFO,STATUS='OLD')
d90 1
d92 1
d95 3
a97 2
	IF (NZ1.EQ.0)  NZ1=1
	IF (NZ2.EQ.0)  NZ2=NZ3D
d99 7
a105 7
	IF (SNR.GT.0.0)  SNR=1.0/SNR
	NZC=NZ2-NZ1+1
	CALL  FILERD(FINPIC,NLETI,NULL,'RECONSTRUCTED 3-D',ITRFLG)
	IF (IRTFLG.EQ.-1)  GOTO 9999
	IFORM=3
 	CALL  OPENFB(BUF,FINPIC,IOPIC,NX3D,NY3D,'UNKNOWN',NF,NZC)
	IF (NF.NE.2)  GOTO 9999
d107 1
d109 4
a112 5
 	CALL OPENFB(BUF,FINPIC,INPIC,NSAM,NROW,'O',NF,NSL)
 	IF (NF .NE. 2)  THEN
	   WRITE(NOUT,*) ' FILE NOT FOUND'
	   RETURN
	ENDIF
d132 1
a132 1
	IRTFLG=-9
d134 2
a135 1
	IF (IRTFLG.EQ.0)  THEN
d137 2
a138 2
1001	   FORMAT(//'  3-D back-projection, volume in the memory',/,
     1              '   you have reserved ',I9,/)
d142 3
a144 2
	   CALL  REANG(ILIST,Q(K_DM),Q(K_SS),NANG,NOUT)
	   CALL  BPCQP
d146 1
a146 1
     &		ILIST,Q(K_DM),Q(K_SS),NANG,SNR,NOUT)
d148 2
a149 2
	      MI=(K-1)*NX3D
	      CALL  WRTLIN(IOPIC,Q(K_CB+MI),NX3D,K)
d151 1
d162 1
a162 1
	      IRTFLG=-9
d164 1
a164 1
	      IF (IRTFLG .EQ. 0)  GOTO  505
d168 1
d172 2
a173 2
1002	   FORMAT(//'  3-D back-projection, ',I4,
     &              ' projections in the memory',/)
d177 4
a180 5
	   CALL  REANG(ILIST,Q(K_DM),Q(K_SS),NANG,NOUT)
	   CALL  BPCMP
     &	      (Q(K_PROJ),Q(K_CW),NNNN,NSAM,NROW,LPRJ,Q(K_CB),
     &	      NX3D,NY3D,NZC,ILIST,
     &        Q(K_DM),Q(K_SS),NANG,SNR,NOUT,IOPIC)
d182 2
a183 1
        IF (RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'BP 3D',IRTFLG)
d186 5
a190 1
9999	CONTINUE
@


1.25
log
@staus='old' nedded, cosmetic
@
text
@d11 6
d19 1
d104 3
d136 3
@


1.24
log
@R.
@
text
@d11 3
a13 3
         DIMENSION Q(1)
         POINTER   (IPQ,Q) 
         LOGICAL         RUNTIME
d20 2
a21 2
C  N - linear dimension of projections and restored cube
C  NANG - number of angles (projections)
d25 4
a28 4
     &	  'Enter template for 2-D image name',IRTFLG)
 	CALL  FILERD(FINPic,NLETi,NULL,'Selection doc',IRTFLG)
	k=0
	k2=1
d31 3
a33 3
	IF (NANG.eq.NILMAX)  THEN
		WRITE(NOUT,*) '  Too many images, list truncated'
		goto  779
d37 1
a37 1
	IF(LERR.EQ.0)  THEN
d43 1
d46 2
a47 2
2001	FORMAT('  Number of images =',i5)
C  NANG - total number of images
d50 3
a52 3
	OPEN(77,FILE=FINFO,STATUS='O')
	CALL  RDPRMI(NX3D,NY3D,NLOOP,ILOOP,'3D volume: X,Y dimensions')
	CALL  RDPRMI(NZ3D,IDUM,NLOOP,ILOOP,'3D volume: Z dimension')
d55 2
a56 2
	IF(NZ1.EQ.0)  NZ1=1
	IF(NZ2.EQ.0)  NZ2=NZ3D
d58 1
a58 1
	IF(SNR.GT.0.0)  SNR=1.0/SNR
d60 2
a61 2
	CALL  FILERD(FINPIC,NLETI,NULL,'Reconstructed 3-D',ITRFLG)
	IF(IRTFLG.EQ.-1)  GOTO 9999
d64 7
a70 7
	IF(NF.NE.2)  GOTO 9999
C
 	CALL  FILGET(FINPAT,FINPIC,NLET,ILIST(1),INTFLG)
 	CALL  OPENFB(BUF,FINPIC,INPIC,NSAM,NROW,'O',NF,NSL)
 	IF(NF.NE.2)  THEN
	   write(nout,*) ' File not found'
	RETURN
d73 1
a73 1
c
d79 1
a79 1
C
d82 1
a82 1
C
d90 1
a90 1
C
d93 7
a99 7
		IF(IRTFLG.EQ.0)  THEN
	WRITE(NOUT,1001)  MEMTOT
1001	FORMAT(//'  3-D back-projection, volume in the memory',/,
     1     '   you have reserved ',I9,/)
	CALL  REANG(ILIST,Q(K_DM),Q(K_SS),NANG,NOUT)
	CALL  BPCQP
     &	(Q(K_PROJ),Q(K_CW),NNNN,NSAM,NROW,Q(K_CB),NX3D,NY3D,NZC,
d101 22
a122 20
	DO   K=1,NY3D*NZC
	MI=(K-1)*NX3D
	CALL  WRTLIN(IOPIC,Q(K_CB+MI),NX3D,K)
	ENDDO
		ELSE
	K_CB=IPALIGN64(K_SS+6*NANG)
	K_WORK=IPALIGN64(K_CB+NX3D*NY3D)
	K_CW=K_WORK
	K_PROJ=IPALIGN64(K_CW+NNNN*NROW/2)
C	K_PROJ=K_CW+NSAM*NROW
C	MTM=MAXMEM-K_PROJ
C	LPRJ=MIN0(NANG,MTM/(NSAM*NROW)
	DO  LPRJ=NANG,1,-1
	MEMTOT=IPALIGN64(K_PROJ+LPRJ*NNNN*NROW)
	IRTFLG=-9
        CALL CHKMEM(MEMTOT,BAF,MAXMEM,RUNTIME,IPQ,IRTFLG)
	IF(IRTFLG.EQ.0)  GOTO  505
	ENDDO
                CALL  ERRT(6,'BP 3D',NE)
                RETURN
d124 1
a124 1
1002	   FORMAT(//'  3-D back-projection, ',i4,
d126 1
a126 1
	CALL  REANG(ILIST,Q(K_DM),Q(K_SS),NANG,NOUT)
d128 5
a132 5
     &	   (Q(K_PROJ),Q(K_CW),NNNN,NSAM,NROW,LPRJ,Q(K_CB),
     &		NX3D,NY3D,NZC,ILIST,
     &     Q(K_DM),Q(K_SS),NANG,SNR,NOUT,IOPIC)
		ENDIF
         IF(RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'BP 3D',IRTFLG)
d134 1
d136 1
@


1.23
log
@*** empty log message ***
@
text
@d49 1
a49 1
	OPEN(77,FILE=FINFO,STATUS='OLD')
d66 1
a66 1
 	CALL  OPENFB(BUF,FINPIC,INPIC,NSAM,NROW,'R',NF,NSL)
@


1.22
log
@spelling corrected
@
text
@d44 1
a44 1
	WRITE(nout,2001) NANG
a48 1
#ifdef SP_SUN4
a49 3
#else
	OPEN(77,FILE=FINFO,STATUS='OLD',READONLY)
#endif
d100 1
a100 1
	DO  101  K=1,NY3D*NZC
d102 2
a103 1
101	CALL  WRTLIN(IOPIC,Q(K_CB+MI),NX3D,K)
@


1.21
log
@*** empty log message ***
@
text
@d60 1
a60 1
	CALL  RDPRM(SNR,NLOOP,ILOOP,'SNR/DIAMATER')
@


1.20
log
@ipalign64
@
text
@d87 4
a90 4
	K_SS=K_DM+IPALIGN64(9*NANG)
	K_PROJ=K_SS+IPALIGN64(6*NANG)
	K_CB=K_PROJ+IPALIGN64(NNNN*NROW)
	K_WORK=K_CB+IPALIGN64(NMAT)
d92 1
a92 1
	MEMTOT=K_CW+IPALIGN64(NNNN*NROW/2)
d108 2
a109 2
	K_CB=K_SS+IPALIGN64(6*NANG)
	K_WORK=K_CB+IPALIGN64(NX3D*NY3D)
d111 1
a111 1
	K_PROJ=K_CW+IPALIGN64(NNNN*NROW/2)
d116 1
a116 1
	MEMTOT=K_PROJ+IPALIGN64(LPRJ*NNNN*NROW)
@


1.19
log
@dont hardcode include file location!!!!!
@
text
@d4 1
a4 1
	PARAMETER  (NILMAX=19999)
a5 1

d34 1
a34 1
	endif
d54 2
a55 2
	call  RDPRMI(NX3D,NY3D,NLOOP,ILOOP,'3D volume: X,Y dimensions')
	call  RDPRMI(NZ3D,IDUM,NLOOP,ILOOP,'3D volume: Z dimension')
d87 4
a90 4
	K_SS=K_DM+9*NANG
	K_PROJ=K_SS+6*NANG
	K_CB=K_PROJ+NNNN*NROW
	K_WORK=K_CB+NMAT
d92 1
a92 1
	MEMTOT=K_CW+NNNN*NROW/2
d108 2
a109 2
	K_CB=K_SS+6*NANG
	K_WORK=K_CB+NX3D*NY3D
d111 1
a111 1
	K_PROJ=K_CW+NNNN*NROW/2
d114 1
a114 1
C	LPRJ=MIN0(NANG,MTM/(NSAM*NROW))
d116 1
a116 1
	MEMTOT=K_PROJ+LPRJ*NNNN*NROW
@


1.18
log
@new version
@
text
@d1 1
d5 2
a6 2
        INCLUDE '/net/ithaca/usr1/spider/src/CMBLOCK.INC'
c        INCLUDE 'CMBLOCK.INC' 
@


1.17
log
@*** empty log message ***
@
text
@d2 4
a5 3
C                                                    02/16/95
	PARAMETER  (NILMAX=9999)
        INCLUDE 'CMBLOCK.INC' 
d60 2
a61 2
	CALL  RDPRM(SNR,NLOOP,ILOOP,'SNR')
	IF(SNR.NE.0.0)  SNR=1.0/SNR
d83 2
a84 1
	nmat=NX3D*NY3D*NZC
d89 1
a89 1
	K_CB=K_PROJ+NSAM*NROW
d91 3
a93 6
	K_CW=K_WORK+max0(nsam,2*nrow)
	IF(SNR.NE.0.0)  THEN
	MEMTOT=k_CW+NSAM*NROW
	ELSE
	MEMTOT=K_CW
	ENDIF
d102 2
a103 2
     &	(Q(K_PROJ),Q(K_CW),NSAM,NROW,Q(K_CB),NX3D,NY3D,NZC,
     &		ILIST,Q(K_DM),Q(K_SS),NANG,SNR,NOUT,Q(K_WORK))
d110 2
a111 6
	K_CW=K_WORK+max0(nsam,2*nrow)
	IF(SNR.NE.0.0)  THEN
	K_PROJ=K_CW+NSAM*NROW
	ELSE
	K_PROJ=K_CW
	ENDIF
d116 1
a116 1
	MEMTOT=K_PROJ+LPRJ*NSAM*NROW
a122 1
	
d128 3
a130 2
     &	   (Q(K_PROJ),Q(K_CW),NSAM,NROW,LPRJ,Q(K_CB),NX3D,NY3D,NZC,ILIST,
     &     Q(K_DM),Q(K_SS),NANG,SNR,NOUT,IOPIC,Q(K_WORK))
@


1.16
log
@*** empty log message ***
@
text
@d35 1
a35 1
	CALL  UNSAV(FINPIC,K,INPIC,KP1,Q,1,LERR,K2)
d38 1
a38 1
	   ILIST(NANG)=Q(1)
@


1.15
log
@alloc corrected
@
text
@a94 1
        MAXM=MAXMEM
d96 1
a96 1
        CALL CHKMEM(MEMTOT,BAF,MAXM,RUNTIME,IPQ,IRTFLG)
d121 1
a121 1
	MTM=K_PROJ+LPRJ*NSAM*NROW
d123 1
a123 1
        CALL CHKMEM(MEMTOT,BAF,MTM,RUNTIME,IPQ,IRTFLG)
@


1.14
log
@more alloc
@
text
@d96 1
d123 1
@


1.13
log
@mem allocation
@
text
@a107 1
         IF(RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'BP 3D',IRTFLG)
d117 12
a128 5
	K_PROJ=K_CW+NSAM*NROW
	MTM=MAXMEM-K_PROJ
	LPRJ=MIN0(NANG,MTM/(NSAM*NROW))
	IF(LPRJ.GT.1)  THEN
	   WRITE(NOUT,1002)  LPRJ
a134 4
	ELSE
                CALL  ERRT(6,'BP 3D',NE)
                RETURN
	ENDIF
d136 1
@


1.12
log
@fixed for sun
@
text
@a0 1

d3 1
a3 3
	PARAMETER  (NILMAX=5500)

#ifdef SP_UNIX
a4 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
d9 4
a12 1
	COMMON        DUMMY(80),BUF(1024),ILIST(NILMAX),Q(1)
a52 7
	READ(77,*)


 	K_DM=1
	K_SS=K_DM+9*NANG
	CALL  REANG(ILIST,Q(K_DM),Q(K_SS),NANG,NOUT)

d84 2
d95 3
a97 1
		IF(MEMTOT.LT.MAXMEM)  THEN
d100 2
a101 1
     1     '           Memory needed - ',I8,/)
d108 1
d125 1
d130 2
a131 4
	   WRITE(NOUT,1004)  MAXMEM
1004	   FORMAT('  Sorry, your buffer length is only',I9,/,
     1      '  Program cannot be run')
	   RETURN
a134 1

@


1.11
log
@correct common block inclusion
@
text
@d1 1
d11 2
a12 2
	COMMON  /F_SPEC/  FINPAT,NLET,FINPIC
	CHARACTER*80  FINPIC,finfo
d14 2
a15 2
	CHARACTER*1  NULL,ans
	COMMON     DUMMY(80),BUF(1024),ILIST(NILMAX),Q(1)
d40 4
a43 4
	NANG=NANG+1
	ILIST(NANG)=Q(1)
	K=K+1
	GOTO  778
d46 2
a47 2
	write(nout,2001) nang
2001	format('  Number of images =',i5)
d49 10
a58 6
	call  filerd(finfo,nlet1,null,'Angles doc',itrflg)
	finfo=finfo(1:nlet1)//'.'//datexc(1:3)
	open(77,file=finfo,status='old',readonly)
	read(77,*)
c
C
d62 1
a62 1
c
@


1.10
log
@corrected the ifdef SP_UNIX condition
@
text
@d4 1
d6 1
a6 1
        INCLUDE '/net/ithaca/usr1/spider/new/src/CMBLOCK.INC'
d8 1
a8 1
        INCLUDE 'COMMON1:CMBLOCK.INC'
a9 5
c#ifdef SP_UNIX
c        INCLUDE 'CMBLOCK.INC' 
c#else
c        INCLUDE 'COMMON1:CMBLOCK.INC' 
c#endif
@


1.9
log
@nosave mp
@
text
@d4 1
d6 3
@


1.8
log
@nosave
@
text
@a0 2


d2 1
a2 2
C                                                    07/11/94

d4 6
a9 5
#ifdef SP_UNIX
        INCLUDE 'CMBLOCK.INC' 
#else
        INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
d55 2
a56 1
	CALL  REANG(ILIST,Q(K_DM),NANG,NOUT)
d64 2
d89 1
a89 1
	K_PROJ=K_DM+9*NANG
d91 7
a97 1
	MEMTOT=k_CB+NMAT
d103 2
a104 2
     &	(Q(K_PROJ),NSAM,NROW,Q(K_CB),NX3D,NY3D,NZC,
     &		ILIST,Q(K_DM),NANG,NOUT)
d109 9
a117 2
	K_CB=K_DM+9*NANG
	K_PROJ=K_CB+NX3D*NY3D
d119 1
a119 1
	LPRJ=MTM/(NSAM*NROW)
d125 2
a126 2
     &	   (Q(K_PROJ),NSAM,NROW,LPRJ,Q(K_CB),NX3D,NY3D,NZC,ILIST,
     &     Q(K_DM),NANG,NOUT,IOPIC)
@


1.7
log
@line greater than 72 char fixed!
@
text
@d20 1
a20 1

d103 1
a103 1
	K_PROJ=K_CB+NX3D
@


1.6
log
@*** empty log message ***
@
text
@d1 2
d4 2
a5 1
C                                                     07/11/94
d18 1
a18 1
C
d20 1
a20 1
C
d22 1
a22 1
C
d25 1
a25 1
C
d34 1
a34 1
	IF(NANG.eq.NILMAX)  THEN
d75 1
a75 1
	write(nout,*) ' File not found'
d107 6
a112 5
	WRITE(NOUT,1002)  LPRJ
1002	FORMAT(//'  3-D back-projection, ',i4,' projections in the memory',/)
	CALL  BPCMP
     &	(Q(K_PROJ),NSAM,NROW,LPRJ,Q(K_CB),NX3D,NY3D,NZC,ILIST,
     &		Q(K_DM),NANG,NOUT,IOPIC)
d114 2
a115 2
	WRITE(NOUT,1004)  MAXMEM
1004	FORMAT('  Sorry, your buffer length is only',I9,/,
d117 1
a117 1
	RETURN
d121 1
a121 1
c
@


1.5
log
@printout  fixed
@
text
@d104 1
a104 1
	WRITE(NOUT,1002)  LPRJ,MEMTOT
@


1.4
log
@*** empty log message ***
@
text
@d105 1
a105 2
1002	FORMAT(//'  3-D back-projection, ',i4,' projections in the memory',/,
     1     '           Memory needed - ',I8,/)
@


1.3
log
@fixed
@
text
@@


1.2
log
@fixed
@
text
@d1 1
a1 1
	SUBROUTINE BCQ(MAXMaM)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
	SUBROUTINE BCQ(MAXMEM)
d103 2
a104 2
	IF(LRPJ.GT.1)  THEN
	WRITE(NOUT,1002)  MEMTOT,LPRJ
@
