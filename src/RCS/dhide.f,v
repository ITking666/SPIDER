head	1.12;
access;
symbols
	pre_getangas:1.12
	GPL2010:1.12
	pre_GPL2010:1.11
	pre_var_equation:1.11
	pre_fftwrings:1.11
	pre_opfiles:1.11
	src:1.11
	best-code:1.11
	x-named-regs:1.11
	x:1.11
	v13-00:1.11
	pre_GPL:1.9
	prec_CA:1.9
	noindx:1.8
	Bproc:1.8
	oct21:1.8
	last77:1.8;
locks; strict;
comment	@c @;


1.12
date	2010.06.24.13.25.25;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.17.20.49.32;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.17.18.39.57;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.16.15.39.14;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.03.10.17.16.23;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.02.09.21.34.19;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.02.04.15.34.35;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	95.07.28.16.04.17;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	95.02.08.16.44.42;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	95.02.07.17.29.25;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.04.18;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.48.16;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.12
log
@GPL_2010
@
text
@
C++*********************************************************************
C
C  DHIDE.FOR        ALTERED BY al JAN 87 TO PLACE PLOT IN PLOT METAFILE
C                   MAKES POSTSCRIPT OUTPUT NOW MAR 99 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C     DHIDE(X,Y,XG,G,XH,H,NG,MAXDIM,N1,NFNS,
C          XLNTH,YLNTH,XMINT,DELTAX,DELTAY)
C
C    PURPOSE:
C
C      THIS SUBROUTINE PRODUCES A 2-DIMENSIONAL REPRESENTATION OF       
C      A 3-DIMENSIONAL FIGURE OR SURFACE.                               
C
C      THE FIRST CALL TO HIDE IS FOR INITIALIZATION AND PLOTTING   
C      THE CURVE FARTHEST IN THE FOREGROUND.  ON EACH SUBSEQUENT        
C      CALL, A CURVE FARTHER IN THE BACKGROUND IS PLOTTED.             
C      X IS THE ABCISSA ARRAY FOR THE CURVE TO BE PLOTTED BY        
C      HIDE ON THIS CALL.  THE X VALUES MUST BE INCREASING.            
C      IF X(I) GE X(I+1) FOR SOME I, MAXDIM WILL BE SET TO ZERO,     
C      AND A RETURN WILL BE EXECUTED.                                
C      Y IS THE ORDINATE ARRAY.                                       
C      G VS. XG IS THE CURRENT VISUAL MAXIMUM FUNCTION ON EACH         
C      RETURN FROM HIDE.                                          
C      XH AND H ARE WORKING ARRAYS.                                   
C      ON EACH RETURN FROM HIDE, NG IS THE NUMBER OF POINTS IN      
C      THE CURRENT MAXIMUM FUNCTION.                                 
C      ON THE FIRST CALL, NG IS A NONPOSITIVE INTEGER WHICH         
C      SPECIFIES CERTAIN OPTIONS.                                    
C      -2 PLOT UNHIDDEN MINIMUM RATHER THAN MAXIMUM.  IN THIS         
C         CASE, G VS. XG WILL BE THE NEGATIVE OF THE VISUAL       
C         MINIMUM FUNCTION.                                       
C      0  PLOT MAXIMUM.                               
C      MAXDIM IS THE DIMENSION IN THE CALLING PROGRAM OF THE      
C      ARRAYS XG, G, XH, AND H.  IF ONE OF THESE ARRAYS WOULD     
C      HAVE BEEN OVERFLOWED, MAXDIM IS SET EQUAL TO ITS NEGATIVE, 
C      AND A RETURN IS EXECUTED.                                  
C      N1 IS THE NUMBER OF POINTS (X(I),Y(I)) TO BE PLOTTED IN    
C      A GIVEN CALL TO HIDE.                                      
C      IF N1 IS LESS THAN 0, Y VS. X WILL NOT BE PLOTTED, BUT ON  
C      SUBSEQUENT CALLS, PLOTTING WILL BE DONE AS IF              
C      ((X(I),Y(I)),I=1,-N1) HAD BEEN PLOTTED (WHERE UNHIDDEN).   
C      N1 WILL BE RETURNED AS ITS ABSOLUTE VALUE.                 
C      NFNS IS THE TOTAL NO. OF CURVES TO BE PLOTTED FOR THIS     
C      GRAPH IF TRANSLATING THE ARRAYS TO SIMULATE STEPPING IN    
C      THE DEPTH DIMENSION IS DESIRED.  IF NO TRANSLATION IS      
C      DESIRED, NFNS SHOULD BE NEGATIVE.  IF THE SAME TRANSLATION 
C      AS IN THE PREVIOUS CALL TO HIDE IS DESIRED, NFNS SHOULD BE 
C      ZERO.  THE NFNS=0 OPTION MAY BE SPECIFIED FOR INDIVIDUAL   
C      CURVES AFTER THE FIRST FOR A GIVEN GRAPH.  ALL             
C      TRANSLATIONS WHICH ARE PERFORMED WILL HAVE EQUAL STEP SIZE 
C      DETERMINED BY THE VALUES IN THE INITIAL CALL FOR XLNTH,    
C      YLNTH, AND NFNS.                                           
C
C      XLNTH IS THE LENGTH IN INCHES OF THE HORIZONTAL AXIS.      
C      IF XLNTH IS LESS THAN 0, THE X-AXIS AND THE DEPTH AXIS     
C      WILL NOT BE DRAWN.  IN ANY CASE, UNLESS THIS OPTION IS     
C      SUPPRESSED THROUGH NFNS, THE ITH CURVE WILL BE TRANSLATED  
C      (I-1)*(9.-ABS(XLNTH))/(NFNS-1) INCHES TO THE LEFT.  THIS   
C      PLUS A SIMILAR VERTICAL TRANSLATION IS DONE TO SIMULATE    
C      STEPPING IN THE DEPTH DIMENSION.                           
C
C      XMIN-(9.-ABS(XLNTH))*DELTAX WILL BE THE ABCISSA VALUE AT   
C      THE PLOTTING REFERENCE POINT (WHICH IS WHERE THE           
C      HORIZONTAL AND VERTICAL AXES WOULD INTERSECT IF DRAWN).    
C
C      YLNTH IS THE LENGTH OF THE VERTICAL AXIS IN INCHES.        
C      IF YLNTH IS LESS THAN 0, THE VERTICAL AND DEPTH AXES WILL  
C      NOT BE DRAWN.  BUT IN ANY CASE, UNLESS THIS OPTION IS      
C      SUPPRESSED THROUGH NFNS, THE ITH CURVE WILL BE TRANSLATED  
C      (I-1)*(6.-ABS(YLNTH))/(NFNS-1) INCHES UP TO SIMULATE       
C      STEPPING IN THE DEPTH DIMENSION.  YMINT-(6.-ABS(YLNTH))*   
C      DELTAY WILL BE THE ORDINATE VALUE AT THE PLOTTING          
C      REFERENCE POINT.                                           
C
C      IF TRANSLATIONS ARE PERFORMED, X AND Y WILL BE RESTORED TO 
C      THEIR ORIGINAL VALUES BEFORE THE RETURN TO THE CALLING     
C      PROGRAM.                                                   
C
C      NOTE THAT IF ABS(XLNTH)=9, AND ABS(YLNTH)=6, THERE WILL BE 
C      NO TRANSLATION, AND, IF AXES ARE NOT DRAWN, THE 
C      DIMENSIONS OF THE PLOT ARE UNSPECIFIED.                    
C
C      DELTAX IS THE X DATA INCREMENT PER INCH FOR THE PLOT. DX IS 
C      1 / DELTAX.  DX, XMIN AND DELTAX DETERMINE THE PLOTTING SCALE 
C      FOR X.(SEE ABOVE.)
C
C      DY, YMINT AND DELTAY, SIMILARLY, DETERMINE THE SCALE FOR Y.        
C      IF AN ERROR RETURN IS MADE FROM HIDE, ALL FURTHER CALLS        
C      WILL RESULT ONLY IN THE EXECUTION OF A RETURN UNLESS           
C      MAXDIM IS RESET TO A POSITIVE VALUE.                           
C
C--*******************************************************************

       SUBROUTINE DHIDE(X,Y,XG,G,XH,H,NG,MAXDIM,N1,NFNS,                 
     &        XLNTH,YLNTH,XMINT,DELTAX,FMIN,DELTAY,XMAXT,LUNPOS)

       PARAMETER (NSIZE = 2000)
       COMMON DATA(3,NSIZE)     
C      WORK BUFFER FOLLOWS DATA

       DIMENSION X(*),Y(*),XG(*),G(*),H(*),XH(*) 

C     THE ONLY PURPOSE OF THE FOLLOWING EQUIVALENCE STATEMENT IS
C     TO SAVE STORAGE.                                          
      EQUIVALENCE (K1,IWHICH),(K2,SLOPE),(FNSM1,Z1),        
     &            (IGGP1,K1),(K1,N2)                        

C     EPS1 IS THE RELATIVE ABCISSA INCREMENT USED TO SIMULATE   
C     DISCONTINUITIES IN THE MAXIMUM FUNCTION.                  
      DATA EPS1/ .00001/                                    
         
C     MAKE VARIABLES STATIC.                                                    
      SAVE

C     THE FOLLOWING STATEMENT FUNCTION COMPUTES THE ORDINATE ON 
C     THE LINE JOINING (XI,YI) AND (XIP1,YIP1) CORRESPONDING TO 
C     THE ABCISSA XX.    
                                         
      F(XX,XI,YI,XIP1,YIP1) = YI+(XX-XI)*(YIP1-YI)/(XIP1-XI)

      IF (MAXDIM .LE .0) RETURN                                       
      DO  I = 2,N1                            
         IF (X(I-1) .GE. X(I)) THEN
C          OVERFLOW??
           MAXDIM = 0
           RETURN
         ENDIF
      END DO                                            

      IFPLOT = 1                                          
      IF (N1 .LE. 0) THEN
         N1 = -N1
         IFPLOT = 0
      ENDIF

C     IF > FIRST PLOT GOTO 5000
      IF (NG .LE. 0) THEN
        IF (N1+4 .GT. MAXDIM) THEN
C          OVERFLOW ??
           MAXDIM = -MAXDIM        
           RETURN
        ENDIF

        YMINT = FMIN
        DX    = 1 / DELTAX
        DY    = 1 / DELTAY

C       WE WANT SIGN = 1 IF WE ARE PLOTTING MAXIMUM, = -1 IF MINIMUM.
        SIGN = 1.                                    
        IF (NG .LT. -1) SIGN = -1.
                                                      
C       THE KTH CURVE TO BE PLOTTED WILL (OPTIONALLY) BE        
C       TRANSLATED BY THE VECTOR (-DXIN,DYIN)*(K-1) TO SIMULATE 
C       STEPPING IN THE DEPTH DIMENSION.                      
        IF (NFNS .GT. 0) THEN
           FNSM1 = NFNS-1  
           DXIN  = 3.*DELTAX/FNSM1  
           DYIN  = 3.*(DELTAY/FNSM1)
        ENDIF

        IF (XLNTH .GE. 0.) THEN
C         AXIS ARE DISABLED!!!!
C         CALL ROUTINE TO DRAW THE HORIZONTAL AXIS.  THE 
C         LEFT END IS SPECIFIED IN INCHES RELATIVE TO THE REFERENCE    
C         POINT BY THE FIRST TWO ARGUMENTS.                            
          CALL POSAXIS('X',XMINT,XMAXT,0,0,XLNTH,YLNTH,DX,LUNPOS,IRTFLG)
        ENDIF

        IF (YLNTH .GE. 0.) THEN
C         AXIS ARE DISABLED!!!!
C          DRAW THE DEPTH AXIS.
           CALL POSEG(LUNPOS, 0.0,0.0, -XLNTH,YLNTH)

C          DRAW THE VERTICAL AXIS.  THE BOTTOM POINT IS SPECIFIED IN
C          INCHES RELATIVE TO THE REFERENCE POINT BY THE FIRST TWO  
C          ARGUMENTS.                                               
           CALL POSAXIS('Y',YMINT,YMAXT,0,0,XLNTH,YLNTH,DY,
     &                  LUNPOS,IRTFLG)
        ENDIF

C       CURVES SUCCESSIVELY FARTHER IN THE BACKGROUND WILL BE   
C       PLOTTED WHERE THEY ARE NOT HIDDEN BY G VS. XG.  G VS XG 
C       WILL BE UPDATED EACH TIME A NEW CURVE IS DRAWN AND WILL BE
C       THE VISUAL MAXIMUM (OR MINIMUM) FUNCTION OF THE CURVES    
C       ALREADY PLOTTED.

        INDEXT=3        
        DO  J = 1,N1   
           XG(INDEXT) = X(J) 
           G(INDEXT) = SIGN*Y(J)
           INDEXT = INDEXT+1
        END DO    

C       THE FOLLOWING PRECAUTIONARY STEP IS USED IN PLACE OF A        
C       TEST IN SUBROUTINE LOOKUP TO SEE IF THE VALUE FOR WHICH WE     
C       WANT AN INDEX IS OUTSIDE THE TABLE.                          
C       THE LAST XG VALUE WILL BE SET EQUAL TO THE LAST ABCISSA   
C       OF THE CURVE TO BE PLOTTED IN THE NEXT CALL TO HIDE.       

        EPS      = EPS1*(ABS(XMINT)+ABS(DELTAX))                          
        NG       = N1+4                                            
        XG(1)    = -FNSM1*DXIN+XMINT-ABS(XMINT)-ABS(XG(3))-1.         
        XG(2)    = XG(3)-EPS                                        
        XG(N1+3) = XG(N1+2)+EPS                                   
        ZZ       = YMINT                                               
        IF (SIGN.LT.0.) ZZ = -YMINT-50.*DELTAY                   
        G(1)     = ZZ                                                
        G(2)     = ZZ                                                
        G(N1+3)  = ZZ                                              
        G(NG)    = ZZ                                                

C       CALL ROUTINE TO PRODUCE A LINE PLOT OF                 
C       (X(I),Y(I),I=1,N1) - THE CURVE FARTHEST IN THE FOREGROUND.

C       XSTART IS THE X VALUE AT THE REFERENCE POINT.        
        XSTART = XMINT-(9.-ABS(XLNTH))*DELTAX             
    
C       WORKS BETTER FOR POSTSCRIPT, MAR 99 AL       
        XSTART = 0.0

        DO  I = 1,N1
           DATA(1,I) = X(I) * DX + XSTART
           DATA(2,I) = Y(I) * DY
        END DO
        IF (IFPLOT.EQ.1) CALL POARAYF(LUNPOS,DATA,N1,.FALSE.,.FALSE.)

        DXKK   = 0.                                               
        DYKK   = 0.                                               
        RELINC = DELTAX / DELTAY                                  
        XG(NG) = SIGN                                            
        RETURN                                                     
      END IF

C     STATEMENT 5000 IS REACHED IF ANY CURVE EXCEPT THE FARTHEST   
C     IN THE FOREGROUND IS TO BE PLOTTED.                              
C5000 CONTINUE
 
      SIGN = XG(NG)                                             
      XG(NG) = X(N1)                                             

C     TRANSLATE THE ARRAYS BEFORE PLOTTING TO SIMULATE STEPPING        
C     IN THE DEPTH DIMENSION.                                     
      IF(NFNS) 52,48,49     
              
   49 DXKK = DXKK+DXIN                       
      DYKK = DYKK+DYIN      
                
   48 DO J = 1,N1                  
         Y(J) = SIGN*(Y(J)+DYKK)     
         X(J) = X(J)-DXKK  
      END DO
                   
   52 CALL LOOKUP(X(1),XG(1),JJ)  
             
      IF(JJ.GE.MAXDIM) GO TO 700               
      DO J = 1,JJ                             
         XH(J) = XG(J)                           
         H(J) = G(J)     
      END DO                              
      IG = JJ+1                                 
      XH(IG) = X(1)                             
      H(IG) = F(X(1),XG(JJ),G(JJ),XG(IG),G(IG))              

C     WE WILL BE MAKING TABLE LOOKUPS FOR AN INCREASING SEQUENCE      
C     OF NUMBERS - THEREFORE, WE DO NOT HAVE TO SEARCH FROM 
C     FIRST OF THE (XG AND X) TABLES EACH TIME.  HENCE INDEXG   
C     AND INDEXT.   
                                             
      INDEXG = JJ                                        
      INDEXT = 1                               
      Z1 = X(1)                                        
      F1 = H(IG)-Y(1)                                   
      IT = 2                                             
      JJ = IG                                            
      IF (H(IG) .LT. Y(1)) THEN
        IF (JJ .GE. MAXDIM) GO TO 700                     
        JJ = IG+1                                          
        H(JJ) = Y(1)                                       
        XH(JJ) = Z1+EPS                                    
      ENDIF
      LAST = 0                                       
      X1 = Z1                                 
C                                      
C     FIND THE FIRST ZERO, Z2, OF THE FUNCTION G-Y TO THE RIGHT OF Z1.
C 1100 IF(XG(IG) .LT. X(IT)) GO TO 1001 
                   
1100  IF(XG(IG) .GE. X(IT)) THEN                                                              
C        LOOK FOR A ZERO BETWEEN X1 AND  X(I).
         IWHICH = 0                                   
         X2 = X(IT)                                    
         F2 = F( X2, XG(IG-1), G(IG-1), XG(IG), G(IG) ) - Y(IT)    
         IT = IT+1                                
C      GO TO 1002                                      
      ELSE
C        LOOK FOR A ZERO BETWEEN X1 AND XG(IG).
C 1001   CONTINUE
         X2 = XG(IG)                                           
         IWHICH = 1                                     
         F2 = G(IG) - F( X2, X(IT-1), Y(IT-1), X(IT), Y(IT) )    
         IG = IG+1 
      END IF                                     

C     THE FUNCTION (G-Y) HAS A ZERO Z2 SUCH THAT X1 LE Z2 LE X2     
C     IF AND ONLY IF (G-Y AT X1) * (G-Y AT X2) LE 0.            
C     (G-Y IS ASSUMED, FOR PLOTTING PURPOSES, TO BE LINEAR ON     
C     EACH INTERVAL (X1,X2).)                                  
C1002 CONTINUE
      IF (F1*F2.GT.0.) GO TO 1005                           
      IGG = IG-1-IWHICH                                     
      ITT = IT-2+IWHICH                        
      IF (X2 .EQ. X1) THEN
         Z2=X1
        GOTO 1006
      ENDIF

      SLOPE = (F2-F1)/(X2-X1)
      IF (ABS(SLOPE*RELINC) .GT. 1.E-6) THEN
C       OTHERWISE, COMPUTE THE ZERO Z2.                               
        Z2 = X1-F1/SLOPE                                          

      ELSE
C       IF G AND Y DIFFER IMPERCEPTIBLY (FOR PLOTTING PURPOSES) 
C       ON THE INTERVAL (X1,X2), SET Z2=X2.  THIS STEP PREVENTS        
C       DIVISION BY ZERO.                                             
        Z2 = X2                                                 
      ENDIF
      GO TO 1006                                        

C     IF NO ZERO WAS FOUND BETWEEN X1 AND X2, CONTINUE THE ZERO SEARCH
 1005 X1 = X2                                                  
      F1 = F2                                                   
      IF (IT .LE. N1) GO TO 1100                             

C     IF THE END OF THE X TABLE HAS BEEN REACHED, CONSIDER THE          
C     INTERVAL FROM THE LAST ZERO FOUND TO THE END OF THE X        
C     TABLE (PLOT, UPDATE MAXIMUM FUNCTION AS INDICATED).          

 1008 LAST = 1                                          
      Z2 = X(N1)                                           
      CALL LOOKUP(Z2,XG(INDEXG),IGG)                          
      IGG = INDEXG+IGG-1                                     
      ITT = N1-1                                          

C     IT IS NECESSARY TO PLOT Y VS. X ON THE INTERVAL (Z1,Z2)    
C     ONLY IF Y IS UNHIDDEN AT EACH ZZ SUCH THAT Z1 LT ZZ LT Z2. 
C     EFFICIENCY IN THE TABLE LOOKUP.                            
C     WE CHOOSE ZZ NEAR THE LEFT END OF THE INTERVAL FOR         
C     NOTE THAT IT IS MORE EFFICIENT TO CHOOSE THIS VALUE FOR ZZ 
C     THAN, SAY, .99*X(INDEXT)+.01*X(INDEXT+1), WHICH WOULD      
C     ELIMINATE ONE OF THE TWO TABLE LOOKUPS, BUT WOULD          
C     NECESSITATE A TEST TO DETERMINE IF ZZ WAS BETWEEN Z1 AND Z2. 

 1006 ZZ = .99*Z1+.01*Z2                                     
      CALL LOOKUP(ZZ,X(INDEXT),K1)                           
      CALL LOOKUP(ZZ,XG(INDEXG),K2)                          
      K1 = K1+INDEXT-1                                       
      K2 = K2+INDEXG-1                                       
      IF (F(ZZ,X(K1),Y(K1),X(K1+1),Y(K1+1)).GT.               
     &   F(ZZ,XG(K2),G(K2),XG(K2+1),G(K2+1))) GO TO 7        

C     IF Y IS HIDDEN BETWEEN Z1 AND Z2, UPDATE THE MAXIMUM FUNCTION. 
C     FOR GENERALITY, THE MAXIMUM FUNCTION IS UPDATED EVEN IF    
C     THIS IS THE (NFNS)TH CURVE.                                

      IF(JJ+IGG-INDEXG.GE.MAXDIM) GO TO 700                  
      IF (INDEXG .NE. IGG) THEN
        J1 = INDEXG+1                                          
        DO  I = J1,IGG                                       
           JJ = JJ+1                                           
           XH(JJ) = XG(I)                                      
           H(JJ) = G(I) 
        END DO                                       
      ENDIF

  712 JJ = JJ+1                                              
      XH(JJ) = Z2                                            
      H(JJ) = F(Z2,XG(IGG),G(IGG),XG(IGG+1),G(IGG+1))        
      INDEXG = IGG                                           
      INDEXT = ITT                                           
      GO TO 60                                               

C     IF T IS NOT HIDDEN BETWEEN Z1 AND Z2, UPDATE THE MAXIMUM   
C     FUNCTION AND PLOT.                                         
    7 NGRAPH = ITT-INDEXT+2                                  
      IF (JJ+NGRAPH-1 .GT. MAXDIM) GO TO 700                    
      N2 = JJ                                                
      IF (NGRAPH .NE. 2) THEN
        J1 = INDEXT+1                                          
        DO I = J1,ITT                                       
          JJ = JJ+1                                           
          XH(JJ) = X(I)                                       
          H(JJ) = Y(I)
        END DO                                        
      ENDIF
   9  JJ = JJ+1                                              
      XH(JJ) = Z2                                            
      H(JJ) = F(Z2,X(ITT),Y(ITT),X(ITT+1),Y(ITT+1))          

C     CALL ROUTINE TO PRODUCE PLOT OF (XH(I),H(I),I=N2,N2+NGRAPH-1)

      N = 0
      DO  I = N2,N2+NGRAPH-1
         N = N + 1
         DATA(1,N) = XH(I) * DX + XSTART
         DATA(2,N) =  H(I) * DY
      END DO
      IF (IFPLOT.EQ.1) CALL POARAYF(LUNPOS,DATA,N,.FALSE.,.FALSE.)

      INDEXT = ITT           
      INDEXG = IGG           

   60 IF (LAST .NE. 1) THEN
        X1 = X2                
        F1 = F2                
        Z1 = Z2                
C       AFTER PLOTTING AND/OR UPDATING THE MAXIMUM FUNCTION ON THE 
C       INTERVAL (Z1,Z2), SEARCH FOR THE NEXT ZERO IF THE END OF   
C       THE ABCISSA TABLE XT HAS NOT BEEN REACHED.                 
        IF (IT .LE. N1) GO TO 1100                                
        GO TO 1008                                             
      ENDIF

C     AFTER Y VS. X HAS BEEN PLOTTED, FINISH UPDATING AND STORE  
C     THE NEW MAXIMUM FUNCTION.                                  
C     ALLOW FOR THE POSSIBILITY THAT THE PREVIOUS MAXIMUM        
C     FUNCTION EXTENDS TO THE RIGHT OF THE FUNCTION JUST PLOTTED.

   61 IF (XG(NG) .LE. XG(NG-1)) NG = NG-1                       
      IF (XG(NG) .GT. X(N1)) THEN
        IF (JJ+3+NG-IGG .GT. MAXDIM) GO TO 700                    
        XH(JJ+1) = XH(JJ)+EPS                                  
        JJ = JJ+1                                              
        H(JJ) = F(X(N1),XG(IGG),G(IGG),XG(IGG+1),G(IGG+1))     
        IGGP1 = IGG+1                                          
        DO J = IGGP1,NG                                     
          JJ = JJ+1                                           
          XH(JJ) = XG(J)                                      
          H(JJ) = G(J)
        END DO                                        
      ENDIF

      NG = JJ+2                                              
      IF (NG.GT.MAXDIM) GO TO 700                             
      DO  I = 1,JJ                                         
         G(I) = H(I)                                         
         XG(I) = XH(I)     
      END DO                                  
                                                            
C     THE FOLLOWING PRECAUTIONARY STEP IS USED IN PLACE OF A     
C     TEST IN SUBROUTINE LOOKUP TO SEE IF THE VALUE FOR WHICH WE 
C     WANT AN INDEX IS OUTSIDE THE TABLE.                        
C     THE LAST XG VALUE WILL BE SET EQUAL TO THE LAST ABCISSA    
C     OF THE NEXT CURVE TO BE PLOTTED. 
                          
      XG(JJ+1) = XG(JJ)+EPS                                  
      G(JJ+1) = YMINT+DYKK                                   
      IF (SIGN .LT. 0.) G(JJ+1) = -YMINT-50.*DELTAY+DYKK        
      G(NG) = G(JJ+1)                                        

C     RESTORE ARRAYS X AND Y BEFORE RETURNING.                   
   66 CONTINUE
C      IF(NFNS.LT.0) GOTO 53
      IF(NFNS .GE. 0) THEN
         DO I = 1,N1                                         
           X(I) = X(I)+DXKK                                    
           Y(I) = SIGN*Y(I)-DYKK
         END DO
      END IF    
C53   CONTINUE
                           
      XG(NG) = SIGN                                          
      RETURN                                                 


C     IF STATEMENT 700 IS REACHED, DIMENSIONS WOULD HAVE BEEN    
C     EXCEEDED.  SEE COMMENTS ON CALLING SEQUENCE FOR HIDE.      
  700 MAXDIM = -MAXDIM                                       
      GO TO 66                                               
      END                                                    



C++*********************************************************************
C
C LOOKUP(X,XTBL,J)
C
C  PURPOSE:    THIS SUBROUTINE PERFORMS A TABLE LOOK UP
C
C  PARAMETERS:   X       X VALUE TO BE LOOKED UP
C                XTBL    ARRAY CONTAINING TABLE
C                J       INDEX FOR THE TABLE
C
C  CALLED BY:    DHIDE
C
C  NOTE:         BECAUSE OF PRECAUTIONS TAKEN IN DHIDE, A TEST TO
C                SEE IF X IS OUTSIDE THE TABLE IS UNNECESSARY.
C
C--********************************************************************

      SUBROUTINE LOOKUP(X,XTBL,J)

      DIMENSION XTBL(1)

      J = 2

    4 IF (XTBL(J) - X) 1,2,3

    1 J = J+1
      GO TO 4

    3 J = J - 1

    2 RETURN
      END

@


1.11
log
@GPL License fixed
@
text
@a7 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d9 5
a13 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d15 1
a15 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.10
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a7 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d11 1
a11 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a30 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
a31 1
C **************************************************************************
a510 1
C++************************************************************************
@


1.9
log
@*
@
text
@d2 1
d8 1
d10 1
d12 24
d42 1
d522 1
@


1.8
log
@for postscript
@
text
@d112 1
a112 1
       DIMENSION X(1),Y(1),XG(1),G(1),H(1),XH(1) 
@


1.7
log
@removed double save
@
text
@d5 1
d18 1
a18 1
C         XLNTH,YLNTH,XMINT,DELTAX,DELTAY)
d106 1
a106 1
     &        XLNTH,YLNTH,XMINT,DELTAX,FMIN,DELTAY,XMAXT,LUNCS)
d108 2
a109 5
       INCLUDE 'CONSTG.INC'

       PARAMETER        (NSIZE = 2000)

       COMMON ADUM(80),DATA(3,NSIZE)     
d117 1
a117 1
     1            (IGGP1,K1),(K1,N2)                        
d132 1
a132 1
      IF(MAXDIM.LE.0) RETURN                                       
d135 1
a147 1
C      IF (NG .GT. 0) GO TO 5000 
d150 3
a152 2
          MAXDIM = -MAXDIM        
          RETURN
d163 3
a165 3
C     THE KTH CURVE TO BE PLOTTED WILL (OPTIONALLY) BE        
C     TRANSLATED BY THE VECTOR (-DXIN,DYIN)*(K-1) TO SIMULATE 
C     STEPPING IN THE DEPTH DIMENSION.                      
d167 3
a169 3
          FNSM1 = NFNS-1  
          DXIN  = 3.*DELTAX/FNSM1  
          DYIN  = 3.*(DELTAY/FNSM1)
d173 2
a174 1
C         CALL SYSTEMS ROUTINE TO DRAW THE HORIZONTAL AXIS.  THE 
d177 1
a177 3
C         CALL AXIS(3.,0.,1H ,(-1),XLNTH,0.,XMINT,DELTAX)
          CALL CSAXIS('X',XMINT,XMAXT,0,0,XLNTH,
     &                YLNTH,DX,LUNCS,IRTFLG)
a179 1
C       IF (YLNTH .LT. 0.) GOTO 43
d181 1
d183 1
a183 6
           NDATA     = 2
           DATA(1,1) = 3.0
           DATA(2,1) = 0.0
           DATA(1,2) = 0.0
           DATA(2,2) = 3.0
           CALL CSPUSH(LUNCS,DATA,NDATA,NF,1,ICNTR)
a184 1
C          IF (YLNTH .GE. 0.) THEN
d188 3
a191 5
C          CALL PAXIS(0.,6.-YLNTH,1H ,1,YLNTH,90.,YMINT,DELTAY)     
           CALL CSAXIS('Y',YMINT,YMAXT,0,0,
     &                 XLNTH,YLNTH,DY,LUNCS,IRTFLG)
C          ENDIF
        END IF
a196 1
C43     CONTINUE
d211 4
a214 4
        EPS = EPS1*(ABS(XMINT)+ABS(DELTAX))                          
        NG = N1+4                                            
        XG(1) = -FNSM1*DXIN+XMINT-ABS(XMINT)-ABS(XG(3))-1.         
        XG(2) = XG(3)-EPS                                        
d216 6
a221 6
        ZZ=YMINT                                               
        IF(SIGN.LT.0.) ZZ = -YMINT-50.*DELTAY                   
        G(1) = ZZ                                                
        G(2) = ZZ                                                
        G(N1+3) = ZZ                                              
        G(NG) = ZZ                                                
d228 3
d236 1
a236 1
        IF(IFPLOT.EQ.1) CALL CSPUSH(LUNCS,DATA,N1,NF,1,ICNTR)
d238 3
a240 3
        DXKK = 0.                                               
        DYKK = 0.                                               
        RELINC = DELTAX/DELTAY                                  
d370 1
a370 1
     1   F(ZZ,XG(K2),G(K2),XG(K2+1),G(K2+1))) GO TO 7        
d406 1
a406 1
    9 JJ = JJ+1                                              
d410 1
a410 3
C     CALL ROUTINE TO PRODUCE LINE PLOT OF (XH(I),H(I),I=N2,N2+NGRAPH-1)
C     IF(IFPLOT.EQ.1) CALL PDATA(XH(N2),H(N2),NGRAPH,0,1,    
C    1  XSTART,DELTAX,SIGN*YMINT,SIGN*DELTAY,.07)            
d418 1
a418 1
      IF(IFPLOT.EQ.1)CALL CSPUSH(LUNCS,DATA,N,NF,1,ICNTR)
d459 1
a459 1
C                                                            
d464 2
a465 1
C     OF THE NEXT CURVE TO BE PLOTTED.                           
d492 34
@


1.6
log
@CNO_SAVE
@
text
@a106 5
CNO_SAVE 

C      I DO NOT KNOW IF SAVE IS NEEDED FEB 99 al
       SAVE

a115 1

d125 1
a125 1
C	MAKE VARIABLES STATIC.                                                    
@


1.5
log
@added () in PARAMETER STATEMENT
@
text
@d16 1
a16 1
C    DHIDE(X,Y,XG,G,XH,H,NG,MAXDIM,N1,NFNS,
d104 2
a105 2
      SUBROUTINE DHIDE(X,Y,XG,G,XH,H,NG,MAXDIM,N1,NFNS,                 
     1    XLNTH,YLNTH,XMINT,DELTAX,FMIN,DELTAY,XMAXT,LUNCS)
d107 1
d109 3
a111 1
#ifdef SP_UNIX
a112 3
#else
       INCLUDE 'COMMON1:CONSTG.INC'
#endif
@


1.4
log
@fixed on unix
@
text
@d114 1
a114 1
       PARAMETER        NSIZE = 2000
@


1.3
log
@clean up unused variables and hollerith warnings and SAVE variables
@
text
@d4 1
a4 1
C  DHIDE.FOR           ALTERED BY al JAN 87 TO PLACE PLOT IN PLOT METAFILE
d16 1
a16 1
C $$ DHIDE(X,Y,XG,G,XH,H,NG,MAXDIM,N1,NFNS,
d130 1
a130 1
C         
d137 1
a137 1
C                                         
d169 1
a169 1
C                                                      
d175 2
a176 2
          DXIN= 3.*DELTAX/FNSM1  
          DYIN = 3.*(DELTAY/FNSM1)
@


1.2
log
@cpp_lines_added
@
text
@d105 1
a105 1
     1    XLNTH,YLNTH,XMINT,DELTAX,FMIN,DELTAY,FMAX,XMAXT,LUNCS)
d127 7
d136 2
a137 1
C     THE ABCISSA XX.                                             
a139 4
C     EPS1 IS THE RELATIVE ABCISSA INCREMENT USED TO SIMULATE   
C     DISCONTINUITIES IN THE MAXIMUM FUNCTION.                  
      DATA EPS1/ .00001/                                    
C                                                             
d141 1
a141 1
      DO 71 I = 2,N1                            
d146 1
a146 1
   71 CONTINUE                                             
d150 2
a151 2
        N1 = -N1
        IFPLOT = 0
d155 14
a168 13
      IF (NG .GT. 0) GO TO 5000 
      IF (N1+4 .GT. MAXDIM) THEN
        MAXDIM = -MAXDIM        
        RETURN
      ENDIF

      YMINT = FMIN
      DX    = 1 / DELTAX
      DY    = 1 / DELTAY

C     WE WANT SIGN = 1 IF WE ARE PLOTTING MAXIMUM, = -1 IF MINIMUM.
      SIGN = 1.                                    
      IF (NG .LT. -1) SIGN = -1.
d173 85
a257 5
      IF (NFNS .GT. 0) THEN
        FNSM1 = NFNS-1  
        DXIN= 3.*DELTAX/FNSM1  
        DYIN = 3.*(DELTAY/FNSM1)
      ENDIF
d259 1
a259 77
   41 IF (XLNTH .GE. 0.) THEN
C       CALL SYSTEMS ROUTINE TO DRAW THE HORIZONTAL AXIS.  THE 
C       LEFT END IS SPECIFIED IN INCHES RELATIVE TO THE REFERENCE    
C       POINT BY THE FIRST TWO ARGUMENTS.                            
C       CALL AXIS(3.,0.,1H ,(-1),XLNTH,0.,XMINT,DELTAX)
        CALL CSAXIS('X',XMINT,XMAXT,0,0,XLNTH,YLNTH,DX,LUNCS,IRTFLG)
      ENDIF

      IF (YLNTH .LT. 0.) GOTO 43

C     DRAW THE DEPTH AXIS.
      NDATA     = 2
      DATA(1,1) = 3.0
      DATA(2,1) = 0.0
      DATA(1,2) = 0.0
      DATA(2,2) = 3.0
      CALL CSPUSH(LUNCS,DATA,NDATA,NF,1,ICNTR)

   42 IF (YLNTH .GE. 0.) THEN
C       DRAW THE VERTICAL AXIS.  THE BOTTOM POINT IS SPECIFIED IN
C       INCHES RELATIVE TO THE REFERENCE POINT BY THE FIRST TWO  
C       ARGUMENTS.                                               

C       CALL PAXIS(0.,6.-YLNTH,1H ,1,YLNTH,90.,YMINT,DELTAY)     
        CALL CSAXIS('Y',YMINT,YMAXT,0,0,XLNTH,YLNTH,DY,LUNCS,IRTFLG)
      ENDIF

C     CURVES SUCCESSIVELY FARTHER IN THE BACKGROUND WILL BE   
C     PLOTTED WHERE THEY ARE NOT HIDDEN BY G VS. XG.  G VS XG 
C     WILL BE UPDATED EACH TIME A NEW CURVE IS DRAWN AND WILL BE
C     THE VISUAL MAXIMUM (OR MINIMUM) FUNCTION OF THE CURVES    
C     ALREADY PLOTTED.

   43 INDEXT=3        
      DO 3 J = 1,N1   
         XG(INDEXT) = X(J) 
         G(INDEXT) = SIGN*Y(J)
    3 INDEXT = INDEXT+1    

C     THE FOLLOWING PRECAUTIONARY STEP IS USED IN PLACE OF A        
C     TEST IN SUBROUTINE LOOKUP TO SEE IF THE VALUE FOR WHICH WE     
C     WANT AN INDEX IS OUTSIDE THE TABLE.                          
C     THE LAST XG VALUE WILL BE SET EQUAL TO THE LAST ABCISSA   
C     OF THE CURVE TO BE PLOTTED IN THE NEXT CALL TO HIDE.       

      EPS = EPS1*(ABS(XMINT)+ABS(DELTAX))                          
      NG = N1+4                                            
      XG(1) = -FNSM1*DXIN+XMINT-ABS(XMINT)-ABS(XG(3))-1.         
      XG(2) = XG(3)-EPS                                        
      XG(N1+3) = XG(N1+2)+EPS                                   
      ZZ=YMINT                                               
      IF(SIGN.LT.0.) ZZ = -YMINT-50.*DELTAY                   
      G(1) = ZZ                                                
      G(2) = ZZ                                                
      G(N1+3) = ZZ                                              
      G(NG) = ZZ                                                

C     CALL ROUTINE TO PRODUCE A LINE PLOT OF                 
C     (X(I),Y(I),I=1,N1) - THE CURVE FARTHEST IN THE FOREGROUND.

C     XSTART IS THE X VALUE AT THE REFERENCE POINT.        
      XSTART = XMINT-(9.-ABS(XLNTH))*DELTAX             

      DO 2000 I = 1,N1
         DATA(1,I) = X(I) * DX + XSTART
         DATA(2,I) = Y(I) * DY
2000  CONTINUE
      IF(IFPLOT.EQ.1)CALL CSPUSH(LUNCS,DATA,N1,NF,1,ICNTR)

      DXKK = 0.                                               
      DYKK = 0.                                               
      RELINC = DELTAX/DELTAY                                  
      XG(NG) = SIGN                                            
      RETURN                                                     


C     STATEMENT 5000 IS REACHED IF ANY EXCEPT THE CURVE FARTHEST   
d261 3
a263 1
 5000 SIGN = XG(NG)                                             
d268 2
a269 1
      IF(NFNS) 52,48,49                   
d271 3
a273 2
      DYKK = DYKK+DYIN                      
   48 DO 4 J = 1,N1                  
d275 5
a279 2
    4 X(J) = X(J)-DXKK                     
   52 CALL LOOKUP(X(1),XG(1),JJ)               
d281 1
a281 1
      DO 31 J = 1,JJ                             
d283 2
a284 1
   31 H(J) = G(J)                                  
d292 2
a293 1
C     AND INDEXT.                                                
d310 17
a326 15
 1100 IF(XG(IG).LT.X(IT)) GO TO 1001                    
C                                               
C     DO NOT JUMP IF WE ARE TO LOOK FOR A ZERO BETWEEN X1 AND  X(I).
      IWHICH = 0                                   
      X2 = X(IT)                                    
      F2 = F(X2,XG(IG-1),G(IG-1),XG(IG),G(IG))-Y(IT)    
      IT = IT+1                                
      GO TO 1002                                      

C     COME TO 1001 IF WE ARE TO LOOK FOR A ZERO BETWEEN X1 AND XG(IG).

 1001 X2 = XG(IG)                                           
      IWHICH = 1                                     
      F2 = G(IG)-F(X2,X(IT-1),Y(IT-1),X(IT),Y(IT))    
      IG = IG+1                                      
d332 2
a333 1
 1002 IF (F1*F2.GT.0.) GO TO 1005                           
d393 1
a393 1
        DO 12 I = J1,IGG                                       
d396 2
a397 1
   12   H(JJ) = G(I)                                        
d414 1
a414 1
        DO 11 I = J1,ITT                                       
d417 2
a418 1
   11   H(JJ) = Y(I)                                        
d429 1
a429 1
      DO 2001 I = N2,N2+NGRAPH-1
d433 1
a433 1
2001  CONTINUE
d462 1
a462 1
        DO 34 J = IGGP1,NG                                     
d465 2
a466 1
   34   H(JJ) = G(J)                                        
d471 1
a471 1
      DO 13 I = 1,JJ                                         
d473 2
a474 1
   13 XG(I) = XH(I)                                       
d487 11
a497 5
   66 IF(NFNS.LT.0) GO TO 53                                 
      DO 82 I = 1,N1                                         
         X(I) = X(I)+DXKK                                    
   82    Y(I) = SIGN*Y(I)-DYKK                               
   53 XG(NG) = SIGN                                          
@


1.1
log
@Initial revision
@
text
@d108 3
d112 1
@
