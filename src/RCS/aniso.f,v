head	1.12;
access;
symbols
	healthdept_2018:1.12
	pre_getangas:1.12
	pre_GPL2010:1.12
	pre_var_equation:1.12
	pre_fftwrings:1.12
	pre_opfiles:1.12
	src:1.12
	best-code:1.12
	x-named-regs:1.12
	x:1.12
	v13-00:1.12
	pre_GPL:1.12
	prec_CA:1.12
	noindx:1.12;
locks; strict;
comment	@c @;


1.12
date	2002.11.19.16.08.47;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.18.15.13.39;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.15.19.49.17;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.07.15.50.31;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.07.15.44.16;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.02.17.27.34;	author bbaxter;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.23.17.07.54;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.09.20.18.18;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.03.17.57.46;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.02.16.29.44;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.02.14.34.35;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.18.19.56.50;	author leith;	state Exp;
branches;
next	;


desc
@@


1.12
log
@NULL was undefined
@
text
@C ++********************************************************************
C                                                                      *
C ANISO                   CREATED             APRIL 2002 ARDEAN LEITH  * 
C                         STACKS SUPPORT        OCT 2002 ARDEAN LEITH  *
C                                                                      *
C  ANISO(LUN1,LUN2,NSAM,NROW,NSLICE,IRTFLG)
C
C  PARAMETERS: LUN1,LUN2   IO UNITS                             (INPUT)
C              NSAM        X DIMENSIONS                         (INPUT)
C              NROW        Y DIMENSIONS                         (INPUT)
C              NSLICE      Z DIMENSIONS                         (INPUT)
C
C  PURPOSE: ALTER CONTRAST IN AN IMAGE OR VOLUME USING ANISOTROPIC
C           DIFFUSION
C                                                                      *
C **********************************************************************

	SUBROUTINE ANISO(LUN1,LUN2,NSAM,NROW,NSLICE,MAXIM,IRTFLG)

	INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        REAL, ALLOCATABLE, DIMENSION(:) :: BUF
        CHARACTER (LEN=1) ::               ANS,NULL
        LOGICAL ::                         LOADIT,NORMIT

        CALL RDPRMC(ANS,NC,.TRUE.,'CPF, MCD, OR HEG?',NULL,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        ITER = 10
        IF (ANS .EQ. 'H') ITER = 60
        CALL RDPRI1S(ITER,NOT_USED,'ITERATIONS',IRTFLG)
	IF (IRTFLG .NE. 0) RETURN

        IF (ANS .EQ. 'H') THEN
C          USE HEGERL & FRANGAKIS FORMULATION

C          HT IS TIME STEP
           HT = 0.01
           CALL RDPRM1S(HT,NOT_USED,'TIME STEP(0...0.25)',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

C          FLAMBDA IS A CONTRAST PARAMETER,  SIGMA IS A NOISE SCALE
           SIGMA   = 1.0
           FLAMBDA = 0.01
           CALL RDPRM2S(SIGMA,FLAMBDA,NOT_USED,'SIGMA & LAMBDA',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
           LOADIT = .FALSE.
        ELSE
C          MEAN CURVATURE OR EED FORMULATION
           IF (ANS .EQ. 'M') THEN
C             MEAN CURVATURE FORMULATION
              W = 1.0
              CALL RDPRM1S(W,NOT_USED,'WEIGHTING FACTOR',IRTFLG)
	      IF (IRTFLG .NE. 0) RETURN
           ENDIF

           ALLOCATE(BUF(NSAM*NROW*NSLICE), STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN 
              CALL ERRT(46,'ANISO, BUF...',IER)
              RETURN
           ENDIF
           LOADIT = .TRUE.
        ENDIF
 
        IMGNUM = -3
        DO WHILE (IMGNUM .LT. MAXIM) 
C          INPUT VOLUME/IMAGE

           CALL GETSTACK(LUN1,LUN2,IMGNUM,MAXIM,VERBOSE,LOADIT,BUF,
     &                   LOADIT,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

           IF (ANS .EQ. 'H') THEN
C             USE HEGERL & FRANGAKIS FORMULATION

              IF (NSLICE .GT. 3) THEN
C                VOLUME OR VOLUME STACK 
	         CALL ANISOF3(LUN1,LUN2,NSAM,NROW,NSLICE,ITER,HT,
     &                     FLAMBDA,SIGMA,IRTFLG)
              ELSE
C                2D IMAGE OR IMAGE STACK
	         CALL ANISOF(LUN1,LUN2,NSAM,NROW,NSLICE,ITER,HT,
     &                       FLAMBDA,SIGMA,IRTFLG)
               ENDIF
              IF (IRTFLG .NE. 0) GOTO 9999

           ELSE
C             NORMALIZE VOLUME OVER 0....1
              FCON = 1.0 / (FMAX - FMIN) 
              BUF  = (BUF - FMIN) * FCON

              ILOC = 1
  
C             GO THRU VOLUME SLICE-BY-SLICE 
              DO I = 1,NSLICE
                 IF (ANS .EQ. 'M') THEN
C                   MEAN CURVATURE FORMULATION
                    CALL ANISOE_M(W,BUF(ILOC),NSAM,NROW,ITER,IRTFLG)
                 ELSE
C                   CORNER PRESERVING FORMULATION
                    CALL ANISOE(BUF(ILOC),NSAM,NROW,ITER,IRTFLG)
                 ENDIF 
                 IF (IRTFLG .NE. 0) GOTO 9999
                 ILOC = ILOC + NSAM * NROW
              ENDDO

C             UNNORMALIZE VOLUME
              RANGE = (FMAX - FMIN) 
              BUF   = (RANGE * BUF) + FMIN

C             OUTPUT VOLUME
              CALL WRTVOL(LUN2,NSAM,NROW,1,NSLICE,BUF,IRTFLG)
           ENDIF
        ENDDO

9999    IF (ALLOCATED(BUF)) DEALLOCATE(BUF)

        RETURN
        END

@


1.11
log
@stacks
@
text
@d24 1
a24 1
        CHARACTER (LEN=1) ::               ANS
@


1.10
log
@stacks
@
text
@d18 1
a18 2
	SUBROUTINE ANISO(LUN1,LUN2,NSAM,NROW,NSLICE,MAXIM,
     &                   FMINT,FMAXT,IRTFLG)
d25 1
a29 5
        IF (ANS .EQ. 'H') THEN
	   CALL ANISOF(LUN1,LUN2,NSAM,NROW,NSLICE,MAXIM,IRTFLG)
           RETURN
        ENDIF

d31 1
d35 2
a36 31
        ALLOCATE(BUF(NSAM*NROW*NSLICE), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'ANISO, BUF...',IER)
           RETURN
        ENDIF

C       INPUT VOLUME
        CALL REDVOL(LUN1,NSAM,NROW,1,NSLICE,BUF,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9999


C       NORMALIZE VOLUME OVER 0....1
        FCON = 1.0 / (FMAXT - FMINT) 
        BUF  = (BUF - FMINT) * FCON

        ILOC = 1

        IF (ANS .EQ. 'C') THEN
C          CORNER PRESERVING FORMULATION

           IMGNUM = -3
           DO WHILE (IMGNUM .LT. MAXIM) 
              CALL GETSTACK(LUN1,LUN2,NSAM,IMGNUM,MAXIM,VERBOSE,IRTFLG)
              IF (IRTFLG .NE. 0) GOTO 9999

              DO I = 1,NSLICE
                 CALL ANISOE(BUF(ILOC),NSAM,NROW,ITER,IRTFLG)
                 ILOC = ILOC + NSAM * NROW
              ENDDO

           ENDDO
d38 11
d50 36
a85 9
C          MEAN CURVATURE FORMULATION

           W = 1.0
           CALL RDPRM1S(W,NOT_USED,'WEIGHTING FACTOR',IRTFLG)
	   IF (IRTFLG .NE. 0) RETURN

           IMGNUM = -3
           DO WHILE (IMGNUM .LT. MAXIM) 
              CALL GETSTACK(LUN1,LUN2,NSAM,IMGNUM,MAXIM,VERBOSE,IRTFLG)
d88 8
d97 8
a104 1
                 CALL ANISOE_M(W,BUF(ILOC),NSAM,NROW,ITER,IRTFLG)
d108 8
a115 9
           ENDDO
        ENDIF

C       UNNORMALIZE VOLUME
        RANGE = (FMAXT - FMINT) 
        BUF   = (RANGE * BUF) + FMINT

C       OUTPUT VOLUME
        CALL WRTVOL(LUN2,NSAM,NROW,1,NSLICE,BUF,IRTFLG)
@


1.9
log
@*** empty log message ***
@
text
@d4 1
a5 1
C
d18 2
a19 1
	SUBROUTINE ANISO(LUN1,LUN2,NSAM,NROW,NSLICE,FMINT,FMAXT,IRTFLG)
d31 1
a31 1
	   CALL ANISOF(LUN1,LUN2,NSAM,NROW,NSLICE,IRTFLG)
d59 10
a68 3
           DO I = 1,NSLICE
              CALL ANISOE(BUF(ILOC),NSAM,NROW,ITER,IRTFLG)
              ILOC = ILOC + NSAM * NROW
d70 1
a70 1
  
d78 10
a87 3
           DO I = 1,NSLICE
              CALL ANISOE_M(W,BUF(ILOC),NSAM,NROW,ITER,IRTFLG)
              ILOC = ILOC + NSAM * NROW
@


1.8
log
@split out anisoe & anisof
@
text
@d32 1
a32 1
        END
@


1.7
log
@fixed bug in loop variables lines 163,4
@
text
@d18 1
a18 1
	SUBROUTINE ANISO(LUN1,LUN2,NSAM,NROW,NSLICE,IRTFLG)
d24 1
d26 9
d40 1
a40 1
           CALL ERRT(46,'ANISO, OUT...',IER)
d44 1
d48 5
d54 8
a61 4
        DO I = 1,NSLICE
           CALL ANISO_DO(BUF(ILOC),NSAM,NROW,ITER,IRTFLG)
           ILOC = ILOC + NSAM * NROW
        ENDDO
d63 18
d84 1
a87 146
C++*********************************************************************C
C  ANISO_DO.F                   NEW MAR 2002 ARDEAN LEITH
C
C **********************************************************************
C      PORTED FROM C CODE by A Leith

C      Copyright (C) 1997 by Robert R. Estes Jr.

C      Permission to use, copy, modify, and distribute this software and its
C      DOcumentation for any purpose and without fee is hereby granted, provided
C      that the above copyright notice appear in all copies and that both that
C      copyright notice and this permission notice appear in supporting
C      documentation.  This software is provided "as is" without express or
C      implied warranty.

C      This program implements Adel's CPF algorithm. 

C      The Sobel operator is used to compute first and second order
C      derivatives. 
C      Compute the diffusion coefficient image. 
C      The value computed at each pixel is: 

C       1 / (8*W*\sqrt{1+(T2H(W-1))^2} 
C       where:
      
C        T2H = (GL-2FM+EN)/W^2

C        E = 1+BX^2, F = BX BY, G = 1+BY^2, 
C        L = FXX/W,  M = FXY/W, N = FYY/W,
C        W = \ SQRT{EG-F^2}
C **********************************************************************

      SUBROUTINE ANISO_DO(BUF,NSAM,NROW,ITER,IRTFLG)

      REAL, DIMENSION(NSAM,NROW),INTENT(INOUT) :: BUF

      DOUBLE PRECISION, DIMENSION(NSAM,NROW) :: DBUF
      DOUBLE PRECISION, ALLOCATABLE, DIMENSION(:,:) :: OUT,BX,BY,CD
      DOUBLE PRECISION :: CSUM,FXX,FXY,FYY,E,F,G,WSQ,W,FL,FN,FM

      ALLOCATE(OUT(NSAM,NROW),BX(NSAM,NROW),
     &         BY(NSAM,NROW),CD(NSAM,NROW), STAT=IRTFLG)
      IF (IRTFLG .NE. 0) THEN 
         CALL ERRT(46,'ANISO, OUT...',IER)
         RETURN
      ENDIF

      DBUF = BUF
      OUT  = 0.0
      BX   = 0.0
      BY   = 0.0
      CD   = 0.0

C     bx =  -1  0  1    by =  -1 -2 -1   fxx = fxy = bx    fyy = by
C           -2  0  2           0  0  0   (on bx & bxby)      (on by)
C           -1  0  1           1  2  1

     

      DO I = 1, ITER
         DO IY = 2,NROW-1
            DO IX = 2,NSAM-1
	      BX(IX,IY) = (DBUF(IX+1,IY-1) + 2*DBUF(IX+1,IY) + 
     &                     DBUF(IX+1,IY+1) -   DBUF(IX-1,IY-1) - 
     &                     2*DBUF(IX-1,IY) -   DBUF(IX-1,IY+1) )/4

	      BY(IX,IY) = (DBUF(IX-1,IY+1) + 2*DBUF(IX,IY+1) + 
     &                     DBUF(IX+1,IY+1) -   DBUF(IX-1,IY-1) - 
     &                   2*DBUF(IX,IY-1)   -   DBUF(IX+1,IY-1) )/4 
            ENDDO
         ENDDO

         DO IY = 3, NROW-2
            DO IX = 3, NSAM-2

	       FXX = (BX(IX+1,IY-1) + 2*BX(IX+1,IY) + BX(IX+1,IY+1) -
     &                BX(IX-1,IY-1) - 2*BX(IX-1,IY) - BX(IX-1,IY+1) )/4

	       FXY = (BY(IX+1,IY-1) + 2*BY(IX+1,IY) + BY(IX+1,IY+1) -
     &                BY(IX-1,IY-1) - 2*BY(IX-1,IY) - BY(IX-1,IY+1) )/4

	       FYY = (BY(IX-1,IY+1) + 2*BY(IX,IY+1) + BY(IX+1,IY+1) -
     &                BY(IX-1,IY-1) - 2*BY(IX,IY-1) - BY(IX+1,IY-1) )/4
	
	       E   = 1+BX(IX,IY) * BX(IX,IY) 
	       F   =   BX(IX,IY) * BY(IX,IY) 
	       G   = 1+BY(IX,IY) * BY(IX,IY) 
	
	       WSQ = (E*G-F*F)
               IF ( WSQ .LE. 0) THEN
C                 ADDED TO TRAP / BY ZERO, I DO NOT KNOW WHAT IT
C                 SHOULD BE!  al may 02
                  CD(IX,IY) = DBUF(IX,IY)
               ELSE
	          W   = SQRT(WSQ)
	          FL  = FXX / W
	          FM  = FXY / W
	          FN  = FYY / W
 	          TMP = (G*FL-2*F*FM+E*FN) * (W-1) / WSQ

	          CD(IX,IY) = 1.0 / (8*W * SQRT(1+TMP**2))
               ENDIF
            ENDDO
         ENDDO

C        COMPUTE NEXT ITERATION.  THE FILTER IS OBTAINED BY TAKING THE
C        EIGHT NEIGHBORS OF EACH PIXEL WEIGHTED BY THE CORRESPONDING
C        COEFFICIENTS ABOVE, AND THEN ADDING 1-THEIR SUM TIMES THE CENTER
C        PIXEL. 

         DO IY = 3, NROW-2
            DO IX = 3, NSAM-2
               OUT(IX,IY) = 0.0
               CSUM       = 0.0
	       DO IY1 = IY-1,IY+1
	          DO IX1 = IX-1,IX+1
	             IF (IX .NE. IX1 .OR. IY .NE. IY1) THEN 
	                OUT(IX,IY) = OUT(IX,IY) +
     &                               CD(IX1,IY1) * DBUF(IX1,IY1) 
	                CSUM = CSUM + CD(IX1,IY1) 
                     ENDIF
                  ENDDO
	       ENDDO
	       OUT(IX,IY) = OUT(IX,IY) + (1-CSUM) * DBUF(IX,IY) 
            ENDDO
         ENDDO
       
C        GET READY FOR THE NEXT ITERATION. COPY THE COMPUTED VALUES INTO
C        THE ORIGINAL IMAGE, SO THAT THE ORIGINAL VALUES ARE USED AT THE
C        BOUNDARIES TO REDUCE BOUNDARY EFFECTS.

          DO IY = 3,NROW-2
            DO IX = 3,NSAM-2
               DBUF(IX,IY) = OUT(IX,IY) 
            ENDDO
          ENDDO
       ENDDO

       BUF = DBUF

       IF (ALLOCATED(OUT)) DEALLOCATE(OUT)
       IF (ALLOCATED(BX))  DEALLOCATE(BX)
       IF (ALLOCATED(BY))  DEALLOCATE(BY)
       IF (ALLOCATED(CD))  DEALLOCATE(CD)

       END
@


1.6
log
@wrtvol param added
@
text
@d163 2
a164 2
	       DO IY1 = IY,IY+2
	          DO IX1 = IX,IX+2
@


1.5
log
@double precision needed
@
text
@d43 1
a43 1
        CALL WRTVOL(LUN2,NSAM,NROW,NSLICE,BUF,IRTFLG)
@


1.4
log
@redvol parameters changed
@
text
@d69 1
a69 1
C      the value computed at each pixel is: 
d71 1
a71 1
C       1/(8*W*\sqrt{1+(T2H(W-1))^2} 
d77 2
a78 2
C        L = FXX/W, M = FXY/W, N = FYY/W,
C        W = \SQRT{EG-F^2}
a83 1
      REAL, ALLOCATABLE, DIMENSION(:,:) :: OUT,BX,BY,CD
d85 4
d95 10
a104 4
      OUT = 0.0
      BX  = 0.0
      BY  = 0.0
      CD  = 0.0
d106 2
d111 7
a117 7
	      BX(IX,IY) = (BUF(IX+1,IY-1) + 2*BUF(IX+1,IY) + 
     &                     BUF(IX+1,IY+1) -   BUF(IX-1,IY-1) - 
     &                     2*BUF(IX-1,IY) -   BUF(IX-1,IY+1) )/4

	      BY(IX,IY) = (BUF(IX-1,IY+1) + 2*BUF(IX,IY+1) + 
     &                     BUF(IX+1,IY+1) -   BUF(IX-1,IY-1) - 
     &                   2*BUF(IX,IY-1)   -   BUF(IX+1,IY-1) )/4 
d139 1
a139 1
C                 ADDED TO TRAP / by ZERO, I DO NOT KNOW WHAT IT
d141 1
a141 1
                  CD(IX,IY) = BUF(IX,IY)
d149 1
a149 1
	          CD(IX,IY) = 1.0 / (8*W * SQRT(1+TMP*TMP))
d154 1
a154 1
C        COMPUTE THE NEXT ITERATION.  THE FILTER IS OBTAINED BY TAKING THE
d167 1
a167 1
     &                               CD(IX1,IY1) * BUF(IX1,IY1) 
a170 1
	          OUT(IX,IY) = OUT(IX,IY) + (1-CSUM) * BUF(IX,IY) 
d172 1
d182 1
a182 1
               BUF(IX,IY) = OUT(IX,IY) 
d186 2
@


1.3
log
@div. by zero & sqrt -  trap
@
text
@d34 1
a34 1
        CALL REDVOL(LUN1,NSAM,NROW,NSLICE,BUF,IRTFLG)
d38 1
a38 1
        DO I = 1,nslice
@


1.2
log
@trap for div. by zero if w=0
@
text
@d126 2
a127 11
	       W   = SQRT(E*G-F*F)
	
	       FL  = FXX / W
	       FM  = FXY / W
	       FN  = FYY / W

               IF ( W .NE. 0) THEN
	          TMP = (G*FL-2*F*FM+E*FN) * (W-1) / (W*W)

	          CD(IX,IY) = 1.0 / (8*W * SQRT(1+TMP*TMP))
               ELSE
d131 9
a139 1
              ENDIF
@


1.1
log
@Initial revision
@
text
@a130 2
	
	       TMP = (G*FL-2*F*FM+E*FN) * (W-1) / (W*W)
d132 9
a140 1
	       CD(IX,IY) = 1.0 / (8*W * SQRT(1+TMP*TMP))
@
