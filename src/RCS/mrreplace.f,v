head	1.20;
access;
symbols
	pre_getangas:1.19
	GPL2010:1.19
	pre_GPL2010:1.18
	pre_var_equation:1.18
	pre_fftwrings:1.18
	pre_opfiles:1.18
	src:1.18
	best-code:1.18
	x-named-regs:1.18
	x:1.18
	v13-00:1.18
	pre_GPL:1.16
	prec_CA:1.16
	noindx:1.15
	Bproc:1.12
	oct21:1.10
	last77:1.10;
locks; strict;
comment	@c @;


1.20
date	2014.07.30.15.13.19;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2010.06.24.13.26.17;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.17.20.41.31;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.17.18.31.54;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2003.02.20.19.53.57;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.11.14.08.33;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2000.10.19.16.29.12;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.10.19.15.28.23;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.12.07.16.31.03;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.11.10.23.09.40;	author yuchen;	state Exp;
branches;
next	1.10;

1.10
date	99.02.04.17.14.29;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	97.10.17.20.52.16;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	97.10.10.17.48.06;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.09.30.20.59.29;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.07.29.20.28.29;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	97.07.27.18.47.18;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	97.07.25.18.54.00;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	95.07.28.16.12.44;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.07.48;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.30;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.20
log
@LEN=MAXNAM) :: FIL1,FIL2
@
text
@
C ++********************************************************************
C                                                                      *
C    MRREPLACE                                                                  *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  MRREPLACE(LUN1,LUN2)
C                                                                   *
C  PURPOSE:                                                            *
C    SUBROUTINE TO REPLACE THE 3D FOURIER TRANSFORM IN THE RANGE OF 
C    MEASURED DATA (+- ALPHA FOR SINGLE AXIS TILTING, OUTSIDE THE
C    MISSING CONE FOR CONICAL DATA).
C    PART OF MODULAR POCS IN SPIDER. 
C    THE PROGRAM USES THE SIMPLE 3D FOURIER FORMAT (-9)
C    M.R. DEC.91
C
C    CHANGED TO 'NEW' 3D FOURIER FORMAT, MAI 97, M.R.
C **********************************************************************

      SUBROUTINE MRREPLACE(LUN1,LUN2)

      INCLUDE 'CMBLOCK.INC'
      INCLUDE 'CMLIMIT.INC'

      PARAMETER       (LINDIM=2050)
      COMMON          FBUFW(LINDIM),FBUFD(LINDIM)

      CHARACTER(LEN=MAXNAM) :: FIL1,FIL2

      CHARACTER*1              NULL,SC
      LOGICAL                  SFLAG,CFLAG,NFLAG

      NULL = CHAR(0)

      PI=3.141593
      DTOR=1/180.*PI

      WRITE(NOUT,*) 'THIS FILE WILL BE OVERWRITTEN:'
      MAXIM = 0
      CALL OPFILEC(0,.TRUE.,FIL1,LUN1,'O',IFORM,NSAMSW,NROWW,NSLICEW,
     &               MAXIM,'WORK',.TRUE.,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      IF (NSAMSW.GT.LINDIM) THEN 
         CALL ERRT(102,'X-DIMENSION TOO LARGE, MAXIMUM IS',LINDIM)
         CLOSE(LUN1)
         RETURN
      ENDIF

      MAXIM = 0
      CALL OPFILEC(0,.TRUE.,FIL2,LUN2,'O',IFORM,NSAMD,NROWD,NSLICED,
     &               MAXIM,'DATA',.TRUE.,IRTFLG)
      IF (IRTFLG .NE. 0) THEN
         CLOSE(LUN1)
         RETURN
      ENDIF

      IF (NSAMD.NE.NSAMSW.OR.NROWD.NE.NROWW.OR.NSLICED.NE.NSLICEW) THEN
         CLOSE(LUN1)
         CLOSE(LUN2)
         CALL ERRT(1,'MRREPLACE',NDUM)
      RETURN

      ENDIF
      NA=1
110   CALL RDPRMC(SC,NA,.TRUE.,
     &    '(S)SINGLE AXIS OR (C)ONICAL, (N)TN REDUCTION',NULL,IRT)
      SFLAG=.FALSE.
      CFLAG=.FALSE.
      NFLAG=.FALSE.
      IF (SC.EQ.'S') SFLAG=.TRUE.
      IF (SC.EQ.'C'.OR.SC.EQ.'N') CFLAG=.TRUE.
      IF (SC.EQ.'N') NFLAG=.TRUE.
      IF(.NOT.SFLAG.AND..NOT.CFLAG) THEN
          WRITE(NOUT,*) 'TRY ANSWERING THIS QUESTION AGAIN, THANKS'
         GOTO 110
      ENDIF

      IF (NFLAG) THEN
          IF ((NSAMD-2).NE.NROWD) THEN
              CALL ERRT(101,'IMPLEMENTED ONLY FOR SQUARE PROJECTIONS',
     &                   NDUM)
              CLOSE(LUN1)
              CLOSE(LUN2)
              RETURN
          ENDIF
          CALL RDPRM(FACT,NOT_USED,
     &        'FACTOR FOR ZERO RANGE CALCULATION (DEF=0.875)')
          IF (FACT.LE.0) FACT=0.875
          FACTL=(FACT/PI)**2
      ENDIF
      IF (SFLAG) THEN 
C         CORRECTION: DALPHU IS LOWER TILT ANGLE, DALPHL IS HIGHER TILT
C             ANGLE. SIGN IS CHAGED TO MAKE IT CONSISTENT WITH 
C             WHAT COMES FROM THE MICROSCOPE.
         CALL RDPRM2(DALPHU,DALPHL,NOT_USED,
     &              'LOWER,UPPER TILT ANGLE')
         DALPHU=-DALPHU
         DALPHL=-DALPHL
      ENDIF

      IF (CFLAG) THEN 
         CALL RDPRM2(DALPHL,rmax,NOT_USED, 'TILT ANGLE')
         DALPHU=DALPHL 
      ENDIF

      ALPHL=DALPHL*DTOR
      ALPHU=DALPHU*DTOR
      COSALP2=COS(ALPHL)**2
      IREADO=0
      NS2=NSLICEW/2
      NR2=NROWW/2

C     DO THE REPLACE FOR SINGLE AXIS:
      BORDERU=1024
      BORDERL=1024
      SU=SIN(ALPHU)
      SL=SIN(ALPHL)
      IF(SU.NE.0) BORDERU=COS(ALPHU)/SU
      IF(SL.NE.0) BORDERL=COS(ALPHL)/SL
      IXA=1
      DO  L=1,NSLICEW
      LZ=L-NSLICEW/2-1
      IF (LZ.GE.0) XBORDER=ABS(LZ*BORDERU)
      IF (LZ.LT.0) XBORDER=ABS(LZ*BORDERL)
      RAD2=XBORDER*XBORDER
      IXB=XBORDER+1+.5
      IXB=2*IXB-1
C     LINEZ=(L-1)*NROWW
      LLZ=LZ
      IF (LZ.EQ.-NS2) LLZ=-LZ
      IF (NFLAG) THEN 
          RAD2=FACTL*LLZ*LLZ 
       ENDIF
      DO   K=1,NROWW
      KY=K-NROWW/2-1
      RY2=KY*KY
c     LINE=LINEZ+K
      KKY=KY
      IF (KKY.EQ.-NR2) KKY=-KKY

      LINE=LINE3DF(KKY,LLZ,NROWW,NSLICEW)
      CALL REDLIN(LUN1,FBUFW,NSAMSW,LINE)
      CALL REDLIN(LUN2,FBUFD,NSAMD,LINE)
      
      IF (SFLAG) IXA=IXB
      DO 13 I=IXA,NSAMSW,2
C      FOR CONICAL TILTS MAKE A CIRCLE:
       IF (CFLAG) THEN
         RX=INT(I/2.)
         RX2=RX*RX
         IF(NFLAG)RX2=RX2*COSALP2
         RAD=RY2+RX2
         IF(NSAMSW.LE.10) WRITE(NOUT,401) RX,RX2,RY2,RAD,RAD2
401      FORMAT(' RX,RX2,RY2,RAD,RAD2:',5F12.4)

         IF(RAD.LT.RAD2) GOTO 13
       ENDIF
      FBUFW(I)=FBUFD(I)
      FBUFW(I+1)=FBUFD(I+1)
13    CONTINUE

      IF (NSAMSW.LE.10) WRITE(NOUT,400) 
     &     KY,LZ,LINE,IXB,(FBUFW(LL),LL=1,NSAMSW)
400   FORMAT(1X,'KY:',I3,' LZ:',I3,' LI:',I3,' IXB:',I3,
     &     /' B:',10(1X,E10.4))
      CALL WRTLIN(LUN1,FBUFW,NSAMSW,LINE)
      ENDDO
      ENDDO
      CLOSE(LUN1)
      CLOSE(LUN2)

      RETURN
      END

C     -----------------------------------------------------------------


      INTEGER FUNCTION LINE3DF(KY,KZ,NROW,NSLICE)
      
C     FUNCTION TO FIND A LINE IN THE CURRENT (5/97) 3D FOURIER TRANSFORM
C     IN SPIDER
C     AUTHOR: M.RADERMACHER, 5/97 
      
      LINZ    = (KZ+NSLICE)
      LINZ2   = MOD(LINZ,NSLICE)
      LINZ3   = LINZ2*NROW
     
      LINE    = (KY + NROW) 
      LINE2   = MOD(LINE,NROW)
      LINE3   = LINZ3+LINE2+1
      LINE3DF = LINE3

      RETURN
      END

@


1.19
log
@GPL_2010
@
text
@d44 1
a47 4
      COMMON /COMMUN/ FIL1,FIL2
      CHARACTER*81    FIL1,FIL2
      CHARACTER*1     NULL,SC
      LOGICAL         SFLAG,CFLAG,NFLAG
d49 6
a54 1
      NULL=CHAR(0)
@


1.18
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.17
log
@HRI GPL License used
@
text
@a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.16
log
@opfilec
@
text
@d8 24
@


1.15
log
@nloop,iloop_removed
@
text
@d46 1
a46 1
      CALL OPFILE(.TRUE.,FIL1,LUN1,'O',IFORM,NSAMSW,NROWW,NSLICEW,
d57 1
a57 1
      CALL OPFILE(.TRUE.,FIL2,LUN2,'O',IFORM,NSAMD,NROWD,NSLICED,
@


1.14
log
@typos
@
text
@d93 1
a93 1
          CALL RDPRM(FACT,NLOOP,ILOOP,
d102 1
a102 1
         CALL RDPRM2(DALPHU,DALPHL,NLOOP,ILOOP,
d109 1
a109 1
         CALL RDPRM2(DALPHL,rmax,NLOOP,ILOOP, 'TILT ANGLE')
@


1.13
log
@openfb--> opfile & cosmet
@
text
@d58 1
a58 1
     &               MAXIM,'DATA,.TRUE.,IRTFLG)
d86 1
a86 1
          IF (NSAMD-2).NE.NROWD) THEN
@


1.12
log
@header
@
text
@d4 1
a5 1
C                                                                      *
d14 3
a16 3
C                                                                      *
C                                                                      *
C                                                                      *
d18 6
a23 3
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
d25 2
a26 9
C SUBROUTINE TO REPLACE THE 3D FOURIER TRANSFORM IN THE RANGE OF 
C MEASURED DATA (+- ALPHA FOR SINGLE AXIS TILTING, OUTSIDE THE
C MISSING CONE FOR CONICAL DATA).
C PART OF MODULAR POCS IN SPIDER. 
C THE PROGRAM USES THE SIMPLE 3D FOURIER FORMAT (-9)
C M.R. DEC.91
C
C CHANGED TO 'NEW' 3D FOURIER FORMAT, MAI 97, M.R.
 
a29 2
 

d32 2
a33 2
      PARAMETER (LINDIM=2050)
      COMMON DUMMY(80),FBUFW(LINDIM),FBUFD(LINDIM)
d35 3
a37 3
      CHARACTER*81 FIL1,FIL2
      CHARACTER*1 NULL,SC
      LOGICAL SFLAG,CFLAG,nflag
d40 1
d43 1
d45 4
a48 3
      CALL FILERD(FIL1,NLET,NULL,'WORK',IRTFLG)
      IF(FIL1(1:1).EQ.'*') RETURN
      CALL OPENFB(FBUFW,FIL1,LUN1,NSAMSW,NROWW,'OLD',IER,NSLICEW)
d51 2
a52 2
         WRITE(NOUT,105) LINDIM
105      FORMAT(' SORRY, X-DIMENSION TOO LARGE, MAXIMUM IS ',I6)
d56 4
a59 2
      CALL FILERD(FIL2,NLET,NULL,'DATA ',IRTFLG)
      IF(IRTFLG .NE. 0) THEN
d64 1
a64 2
      CALL OPENFB(FBUFD,FIL2,LUN2,NSAMD,NROWD,'OLD',IER,NSLICED)
      IF(NSAMD.NE.NSAMSW.OR.NROWD.NE.NROWW.OR.NSLICED.NE.NSLICEW) THEN
d67 1
a67 1
         WRITE(NOUT,*) 'INCONSISTENT VOLUME DIMENSIONS'
d73 1
a73 1
     $    '(S)SINGLE AXIS OR (C)ONICAL, (N)TN reduction',NULL,IRT)
d76 1
a76 1
      nflag=.false.
d78 2
a79 2
      IF (SC.EQ.'C'.or.sc.eq.'N') CFLAG=.TRUE.
      if(sc.eq.'N') nflag=.true.
d81 2
a82 3
         WRITE(NOUT,*) 
     $     'Try answering this question again, THANKS'
      GOTO 110
d86 3
a88 2
          IF((NSAMD-2).NE.NROWD) THEN
              WRITE(NOUT,*) 'IMPLEMENTED ONLY FOR SQUARE PROJECTIONS'
d93 7
a99 7
          CALL RDPRM(FACT,Nloop,iloop,
     $        'factor for zero range calculation (def=0.875)')
          if(fact.le.0) fact=0.875
          factl=(fact/pi)**2
      endif
      IF(SFLAG) THEN 
C        CORRECTION: DALPHU IS LOWER TILT ANGLE, DALPHL IS HIGHER TILT
d103 1
a103 1
     $              'LOWER,UPPER TILT ANGLE')
d115 1
a115 1
      cosalp2=cos(alphl)**2
d120 1
a120 1
C DO THE REPLACE FOR SINGLE AXIS:
d130 2
a131 2
      IF(LZ.GE.0) XBORDER=ABS(LZ*BORDERU)
      IF(LZ.LT.0) XBORDER=ABS(LZ*BORDERL)
d135 1
a135 1
c      LINEZ=(L-1)*NROWW
d137 4
a140 4
      IF(LZ.EQ.-NS2) LLZ=-LZ
       if(nflag) then 
       rad2=factl*llz*llz 
       endif
d144 1
a144 1
c      LINE=LINEZ+K
d146 2
a147 2
      IF(KKY.EQ.-NR2) KKY=-KKY
C
d152 1
a152 1
      IF(SFLAG) IXA=IXB
d154 2
a155 2
C FOR CONICAL TILTS MAKE A CIRCLE:
       IF(CFLAG) THEN
d158 1
a158 1
         if(nflag)rx2=rx2*cosalp2
d168 5
a172 4
      IF(NSAMSW.LE.10)WRITE(NOUT,400) 
     $KY,LZ,LINE,IXB,(FBUFW(LL),LL=1,NSAMSW)
400   FORMAT(1X,'Ky:',I3,' LZ:',I3,' li:',i3,' IXB:',I3,
     $/' B:',10(1X,E10.4))
d178 1
@


1.11
log
@a
@
text
@d2 20
a21 1
 
@


1.10
log
@CNO_SAVE.
CNO_SAVE.
@
text
@d15 1
a15 1
CNO_SAVE 
@


1.9
log
@H
@
text
@d1 2
a2 2
      SUBROUTINE MRREPLACE(LUN1,LUN2)
C 
d11 6
a16 1
C 
d18 1
d25 1
d33 5
a37 9
c      IF(IFORM.NE.-9) THEN
c      WRITE(NOUT,100) IFORM
100   FORMAT(1X,'INPUT1 HAS WRONG FORMAT, IFORM=',I3,'  MUST BE -9')
c      RETURN
c      ENDIF
      IF(NSAMSW.GT.LINDIM) THEN 
      WRITE(NOUT,105) LINDIM
105   FORMAT(1X,'SORRY, X-DIMENSION TOO LARGE, MAXIMUM IS ',I6)
      RETURN
d39 1
d41 3
a43 9
c      IF(IFORM.NE.-9) THEN
c      WRITE(NOUT,101) IFORM
c101   FORMAT(1X,'INPUT2 HAS WRONG FORMAT, IFORM=',I3,'  MUST BE -9')
c      CLOSE(LUN1)
c      RETURN
c      ENDIF
      IF(FIL1(1:1).EQ.'*') THEN
      CLOSE(LUN1)
      RETURN
d45 1
d48 3
a50 3
      CLOSE(LUN1)
      CLOSE(LUN2)
      WRITE(NOUT,*) 'INCONSISTENT VOLUME DIMENSIONS'
d52 1
d56 1
a56 1
     $ '(S)SINGLE AXIS OR (C)ONICAL, (N)TN reduction$',NULL,IRT)
d64 2
a65 2
      WRITE(NOUT,*) 
     $'Try answering this question again, THANKS'
d69 11
a79 11
      if(nflag) then
          if((nsamd-2).ne.nrowd) then
           write(nout,*) 'implemented only for square projections'
           close(lun1)
           close(lun2)
           return
          endif
       call rdprm(fact,nloop,iloop,
     $ 'factor for zero range calculation (def=0.875)$')
       if(fact.le.0) fact=0.875
       factl=(fact/pi)**2
d82 7
a88 7
C CORRECTION: DALPHU is lower tilt angle, DALPHL is higher tilt
c             angle. Sign is chaged to make it consistent with 
c             what comes from the microscope.
       CALL RDPRM2(DALPHU,DALPHL,NLOOP,ILOOP,
     $'LOWER,UPPER TILT ANGLE$')
       DALPHU=-DALPHU
       DALPHL=-DALPHL
d91 3
a93 4
      IF(CFLAG) THEN 
      CALL RDPRM2(DALPHL,rmax,NLOOP,ILOOP,
     $'TILT ANGLE$')
      DALPHU=DALPHL 
@


1.8
log
@*** empty log message ***
@
text
@d145 1
a145 1
401      FORMAT(1H ,'RX,RX2,RY2,RAD,RAD2:',5F12.4)
@


1.7
log
@*** empty log message ***
@
text
@d112 1
a112 1
      DO 11 L=1,NSLICEW
d125 1
a125 1
      DO 12 K=1,NROWW
d157 2
a158 2
12    CONTINUE
11    CONTINUE
@


1.6
log
@added line3df
@
text
@a11 2
      PARAMETER LINDIM=2050

d13 1
a13 1

@


1.5
log
@added dummy  LINE3DF
@
text
@d165 22
a186 3
c added dummy line3df to be able to work.
	function LINE3DF(KKY,LLZ,NROWW,NSLICEW)
	END
@


1.4
log
@ mr's changes to fix fourier format for new format
@
text
@d165 3
@


1.3
log
@added () in PARAMETER STATEMENT
@
text
@d1 2
a2 2


d8 5
a12 1
C                                                       M.R. DEC.91
d14 1
a14 1
      SUBROUTINE MRREPLACE(LUN1,LUN2)
a15 6
      PARAMETER (LINDIM=2050)
#ifdef SP_UNIX
      INCLUDE 'CMBLOCK.INC'
#else
      INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d20 1
a20 2
      LOGICAL SFLAG,CFLAG

d28 2
a29 2
      IF(IFORM.NE.-9) THEN
      WRITE(NOUT,100) IFORM
d31 2
a32 2
      RETURN
      ENDIF
d39 6
a44 6
      IF(IFORM.NE.-9) THEN
      WRITE(NOUT,101) IFORM
101   FORMAT(1X,'INPUT2 HAS WRONG FORMAT, IFORM=',I3,'  MUST BE -9')
      CLOSE(LUN1)
      RETURN
      ENDIF
d57 2
a58 1
110   CALL RDPRMC(SC,NA,.TRUE.,'(S)SINGLE AXIS OR (C)ONICAL$',NULL,IRT)
d61 1
d63 2
a64 1
      IF (SC.EQ.'C') CFLAG=.TRUE.
d67 1
a67 1
     $'PLEASE ANSWER THIS QUESTION IN AN UNDERSTANDABLE MANNER,THANKS'
d71 12
d94 1
a94 1
      CALL RDPRM(DALPHL,NLOOP,ILOOP,
d101 1
d121 1
a121 1
      LINEZ=(L-1)*NROWW
d124 3
d130 1
a130 1
      LINE=LINEZ+K
d133 2
d137 1
d144 1
d148 1
a164 1

@


1.2
log
@cpp_lines_added
@
text
@d1 2
a2 2
      SUBROUTINE MRREPLACE(LUN1,LUN2)
C 
d8 5
a12 3
C                                                              M.R. DEC.91
C
      PARAMETER LINDIM=2050
d23 1
d144 1
@


1.1
log
@Initial revision
@
text
@d11 3
d15 1
@
