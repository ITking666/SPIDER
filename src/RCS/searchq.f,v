head	1.26;
access;
symbols
	pre_mrcs:1.26
	healthdept_2018:1.26
	pre_getangas:1.23
	GPL2010:1.21
	pre_GPL2010:1.20
	pre_var_equation:1.19
	pre_fftwrings:1.19
	pre_opfiles:1.19
	src:1.19
	best-code:1.18
	x-named-regs:1.18
	x:1.18
	v13-00:1.18
	pre_GPL:1.16
	prec_CA:1.16
	noindx:1.16
	Bproc:1.9
	oct21:1.8
	last77:1.5;
locks; strict;
comment	@c @;


1.26
date	2018.10.03.14.34.16;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2015.09.08.17.18.40;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2011.12.06.14.28.12;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2010.10.26.12.49.26;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2010.10.26.12.26.13;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2010.06.24.13.26.52;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2009.11.25.18.18.17;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2006.11.20.16.37.32;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.17.20.31.48;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.17.18.22.45;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.19.13.40.49;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2001.01.23.15.45.12;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2000.10.13.16.03.46;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.10.13.15.57.43;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.10.12.18.29.09;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.09.19.19.57.49;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.09.18.18.39.33;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2000.07.31.16.02.45;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.10.20.16.08.11;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.10.18.20.17.12;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.10.18.19.14.51;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.02.05.16.32.25;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.02.05.16.26.27;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	97.02.12.15.04.58;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	97.01.06.18.37.42;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.40;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.26
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C  SEARCHQ.F -- CHANGED TO STRING VARIABLES        AUG  89 ArDean Leith
C               REMOVED READCH                     JAN  97 ArDean Leith
C               USED GETLBNO                       OCT  99 ArDean Leith
C               SPEEDED UP                         JULY 00 ArDean Leith
C               INCORE PROCS                       JAN  01 ArDean Leith
C               DO ...;COMMENT BUG                 NOV  01 ArDean Leith
C               NO LABEL DO                        NOV  06 ArDean Leith
C               READ(NIN,81,...) FCHAR PGI 10.+    OCT  10 ArDean Leith
C               ! COMMENT DELIMITER                DEC  11 ArDean Leith
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2015  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    SEARCHQ(LBNOWANT,IRTFLG)
C
C    PURPOSE:         READS INPUT FILE UNTIL IT FIND A LINE HAVING 
C                     'DO LB??' WHERE '??' IS EQUAL TO LBNOWANT
C                     OR 'DO ' WITHOUT A 'LB' AND -LBNOWANT IS THE
C                     LINE NUMBER OF UNLABEL 'DO 's IN FILE
C        
c    PARAMETERS:      LBNOWANT  LB?LINE NUMBER WANTED             (SENT)
C                     IRTFLG    ERROR NUMBER                  (RETURNED)
C
C--*******************************************************************

	SUBROUTINE SEARCHQ(LBNOWANT,IRTFLG)

C       FCHAR IS PASSED BACK TO CALLER IN COMMON!
        INCLUDE 'CMBLOCK.INC'
        COMMON /LUNDOECHO/ LUNDONOW,NDOLINE,NINSAVEOF

        LOGICAL  :: DONOLB

        IF (COPT == 'I') THEN
C          READ FROM FILE OPENED ON NIN (FOR INTERACTIVE LOOP)
           REWIND(NIN) 
           NDOLINE = 0
        ENDIF

        DONOLB = (LBNOWANT < 0)

c       write(6,*) ' Searching for lb: ',lbnowant

C       READ INPUT STRING FROM PROCEDURE ----------------------------
10      CONTINUE

C       READ ANSWER STRING
        IF (COPT == 'B') THEN
C          INCREMENT PROCEDURE READ POINTER
	   IBCNT = IBCNT + 1       ! LOCATION IN PROCEDURE FILE
           ILINE = IBCNT 

C          READ FROM CURRENT STORED PROCEDURE LINE IBCNT
           CALL PROC_GETPLINE(IBCNT,0,FCHAR,NCHAR1,IRTFLG)

        ELSE
C          READ FROM FILE OPENED ON NIN (FOR INTERACTIVE LOOP)
           READ(NIN,81,IOSTAT=IRTFLG) FCHAR  ! PGI 10+ NEEDS 81
81         FORMAT(A)

           NCHAR1  = lnblnk(FCHAR)
	   NDOLINE = NDOLINE + 1     ! LOCATION IN DOLOOP FILE
           ILINE   = NDOLINE
           !write(6,*)' Read: ',FCHAR(1:NCHAR1),':',NDOLINE,lbnowant
           !write(6,*) ' read, irtflg:',irtflg,':',fchar(1:nchar1)
        ENDIF
        IF (IRTFLG .NE. 0) RETURN

        IF (DONOLB .AND. ILINE == -LBNOWANT) THEN
C          FOUND DESIRED DO-LOOP, CAN RETURN NOW
           CALL SSUPCAS(FCHAR(1:NCHAR1))

           IRTFLG = 0
           RETURN

        ELSEIF ( .NOT. DONOLB) THEN
C          SEE IF INPUT LINE CONTAINS 'DO LB' 

C          FIND LENGTH OF LINE BEFOR END OR SEMICOLON (COMMENT)
           IGOSEMI = SCAN(FCHAR,';!')
           IEND    = NCHAR1
           IF (IGOSEMI > 0 .AND. IGOSEMI < IEND) IEND = IGOSEMI
           IF (IEND <= 0) GOTO 10   ! JUST A COMMENT

           CALL SSUPCAS(FCHAR(1:IEND))

           IGODO  = INDEX(FCHAR(1:IEND),'DO LB')

           IF (IGODO > 0) THEN
C             HAS 'DO LB', GET LABEL NUMBER FROM 'LB##'
	      CALL GETLBNO(FCHAR(1:NCHAR1),LBNO,IRTFLG)
          
              IF (LBNO == LBNOWANT) THEN
C                FOUND DESIRED DO-LOOP, CAN RETURN NOW
                 IRTFLG = 0
                 RETURN
              ENDIF
           ENDIF
        ENDIF
        GOTO 10

	END


@


1.25
log
@==
@
text
@d19 1
a19 1
C=* Email: spider@@wadsworth.org                                        *
@


1.24
log
@! COMMENT DELIMITER
@
text
@d17 1
a17 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d55 1
a55 1
        IF (COPT .EQ. 'I') THEN
d61 1
a61 1
        DONOLB = (LBNOWANT .LT. 0)
d69 1
a69 1
        IF (COPT .EQ. 'B') THEN
d90 1
a90 1
        IF (DONOLB .AND. ILINE .EQ. -LBNOWANT) THEN
d103 2
a104 2
           IF (IGOSEMI .GT. 0 .AND. IGOSEMI .LT. IEND) IEND = IGOSEMI
           IF (IEND .LE. 0) GOTO 10   ! JUST A COMMENT
d110 1
a110 1
           IF (IGODO .GT. 0) THEN
d114 1
a114 1
              IF (LBNO .EQ. LBNOWANT) THEN
@


1.23
log
@READ(NIN,81,...) FCHAR PGI 10.+
@
text
@d11 2
a12 1
C               READ(NIN,81,...) FCHAR PGI 10.+     OCT  10 ArDean Leith
d17 1
a17 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d101 1
a101 1
           IGOSEMI = INDEX(FCHAR,';')
@


1.22
log
@READ(NIN,*,...) FCHAR PGI 10.+
@
text
@d11 1
a11 1
C               READ(NIN,*,...) FCHAR PGI 10.+     OCT  10 ArDean Leith
a74 1
           !write(6,*) ' Read: ',FCHAR(1:NCHAR1),':',ibcnt,lbnowant
d78 3
a80 1
           READ(NIN,*,IOSTAT=IRTFLG) FCHAR
d85 1
@


1.21
log
@GPL_2010
@
text
@d4 8
a11 8
C  SEARCHQ.F -- CHANGED TO STRING VARIABLES AUG  89 ArDean Leith
C               REMOVED READCH              JAN  97 ArDean Leith
C               USED GETLBNO                OCT  99 ArDean Leith
C               SPEEDED UP                  JULY 00 ArDean Leith
C               INCORE PROCS                JAN  01 ArDean Leith
C               DO ...;COMMENT BUG          NOV  01 ArDean Leith
C               NO LABEL DO                 NOV  06 ArDean Leith
C
d50 1
a50 1
        COMMON /LUNDOECHO/ LUNDONOW,NDOLINE
d52 1
a52 1
        LOGICAL :: DONOLB
d62 1
a62 1
c        write(6,*) ' Searching for lb: ',lbnowant
d79 1
a79 1
           READ(NIN,FMT='A',IOSTAT=IRTFLG) FCHAR
@


1.20
log
@ ndoline bug fixed
@
text
@a12 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2006  Health Research Inc.                      *
d14 5
a18 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d20 1
a20 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d25 1
a25 1
C=* This program is distributed in the hope that it will be useful,    *
d27 1
a27 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a28 1
C=*                                                                    *
d30 1
a30 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.19
log
@enddo, cycle, exit
@
text
@d54 1
d61 1
a70 3
C       INCREMENT PROCEDURE READ POINTER
	IBCNT = IBCNT + 1

d73 4
d79 2
d83 5
a87 4
           READ(NIN,80,IOSTAT=IRTFLG) FCHAR
80         FORMAT(A)
           NCHAR1 = lnblnk(FCHAR)
c          write(6,*) ' Read lundo: ',FCHAR(1:NCHAR1)
d91 1
a91 1
        IF (DONOLB .AND. IBCNT .EQ. -LBNOWANT) THEN
@


1.18
log
@GPL License fixed
@
text
@d10 1
d14 1
a14 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d40 4
a43 2
C    PURPOSE:         READS INPUT FILE UNTIL FIND LINE HAVING 'DO LB??'
C                     WHERE '??' IS EQUAL TO LBNOWANT
d45 2
a46 2
c    PARAMETERS:      LBNOWANT  LB NUMBER WANTED                  (SENT)
C                     IRTFLG  ERROR NUMBER                    (RETURNED)
d52 1
d55 1
a55 1
C       FCHAR IS PASSED BACK TO CALLER IN COMMON!
d62 3
d66 1
a66 1
C       READ INPUT STRING FROM PROCEDURE
d81 1
d85 19
a103 7
C       SEE IF INPUT LINE CONTAINS 'DO' 
        CALL SSUPCAS(FCHAR(1:NCHAR1))
        IGO  = INDEX(FCHAR(1:NCHAR1),'DO LB')
        IF (IGO .GT. 1) THEN
C          CHECK FOR COMMENT (;) BEFORE DO
           IF (INDEX(FCHAR(1:IGO-1),';') .GT. 0) IGO = 0
        ENDIF
d105 3
a107 3
        IF (IGO .GT. 0) THEN
C          HAS 'DO LB', GET LABEL NUMBER FROM 'LB##'
	   CALL GETLBNO(FCHAR(1:NCHAR1),LBNO,IRTFLG)
d109 5
a113 4
           IF (LBNO .EQ. LBNOWANT) THEN
C             FOUND DESIRED DO-LOOP, CAN RETURN NOW
              IRTFLG = 0
              RETURN
@


1.17
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a11 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d15 1
a15 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a34 6

C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.16
log
@; before DO bug fixed
@
text
@d2 1
d14 24
@


1.15
log
@incore procedures
@
text
@d9 1
d11 8
a18 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d62 5
a66 1
        IGO = INDEX(FCHAR(1:NCHAR1),'DO LB')
@


1.14
log
@typo
@
text
@d8 1
d36 5
a40 4
C       READ INPUT STRING FROM FILE OPENED ON NIN
10      READ(NIN,80,IOSTAT=IRTFLG) FCHAR
80      FORMAT(A)
        IF (IRTFLG .NE. 0) RETURN
d42 2
a43 2
C       FIND LAST NON-BLANK            
        NCHAR1 = lnblnk(FCHAR)
d45 1
a45 1
C       INCREMENT FILE READ POINTER
d47 12
@


1.13
log
@fixed do LB bug
@
text
@d47 1
a47 1
        CALL SSUPCAS(FCHAR(1:NCHAR1)
@


1.12
log
@no procX file changes
@
text
@d33 2
d46 2
a47 1
C       SEE IF INPUT LINE CONTAINS 'DO LB' 
a48 1
        IF (IGO .LE. 0) IGO = INDEX(FCHAR(1:NCHAR1),'do lb')
@


1.11
log
@reverted to pre procX version
,
co -u -r1.36 tswitch.f
y
rep tswitch.f
@
text
@d44 1
a44 1
C       SEE IF INPUT LINE CONTAINS 'DO LB' (SPIDER.F SETS IT UPPER CASE)
d46 1
d50 1
a50 1
	   CALL GETLBNOT(FCHAR(1:NCHAR1),LBNO,IRTFLG)
@


1.10
log
@Bproc RR & FR changes
@
text
@d44 1
a44 1
C       SEE IF INPUT LINE CONTAINS 'DO LB' 
a45 1
        IF (IGO .LE. 0) IGO = INDEX(FCHAR(1:NCHAR1),'do lb')
d49 1
a49 1
	   CALL GETLBNO(FCHAR(1:NCHAR1),LBNO,IRTFLG)
@


1.9
log
@speeded up searchq for "do lb" search in batch
@
text
@d44 1
a44 1
C       SEE IF INPUT LINE CONTAINS 'DO LB' (SPIDER.F SETS IT UPPER CASE)
d46 1
d50 1
a50 1
	   CALL GETLBNOT(FCHAR(1:NCHAR1),LBNO,IRTFLG)
@


1.8
log
@iostat undefined bug fixed
@
text
@d4 5
a8 3
C  SEARCHQ.F -- CHANGED TO STRING VARIABLES AUG 89 al
C               REMOVED READCH JAN 97 al
C               USED GETLBNO   OCT 99 al
d19 1
a19 1
C    SEARCHQ(LBNOWANT,IER)
d21 1
a21 1
C    PURPOSE:         READ INPUT FILE UNTIL FIND LINE HAVING 'DO LB??'
d24 2
a25 2
c    PARAMETERS:      STRING  STRING CONTAINING LB NUMBER (ONLY)   (SENT)
C                     IER     ERROR NUMBER                    (RETURNED)
d29 1
a29 1
	SUBROUTINE SEARCHQ(LBNOWANT,IER)
d33 2
a34 5
        CHARACTER *80 TEMP1
        CHARACTER *80 TEMP2

C       READ INPUT STRING FROM FILE
10      READ(NIN,80,IOSTAT=IER) FCHAR
d36 1
a36 1
        IF (IER .NE. 0) RETURN
d44 2
a45 4
C       SEE IF INPUT LINE CONTAINS 'DO LB'
        TEMP1 = FCHAR
	CALL SSUPCAS(TEMP1)
        IGO = INDEX(TEMP1,'DO LB')
d49 1
a49 1
	   CALL GETLBNO(TEMP1,LBNO,IRTFLG)
d52 2
a53 2
C             THIS IS DESIRED DO-LOOP
              IER = 0
@


1.7
log
@removed getlbno
@
text
@d6 1
a6 1
C
d37 1
a37 1
        IF (IOSTAT .NE. 0) RETURN
@


1.6
log
@used getlbno
@
text
@a63 31
C       ------------------ GETLBNO ----------------------------------

	SUBROUTINE GETLBNO(STRING,LBNO,IRTFLG)

        CHARACTER *(*) STRING

        CHARACTER *80 TEMP1
        LOGICAL       ISDIGI

        LBNO   = -1
        IRTFLG = 0

C       FIND LAST NON-BLANK            
        NCHAR1 = lnblnk(STRING)

        TEMP1 = STRING(1:NCHAR1)
        CALL SSUPCAS(TEMP1)

        IGO = INDEX(TEMP1,'LB')
        IF (IGO .LE. 0) RETURN

        NCHAR = 1
        IF (ISDIGI(TEMP1(4:4))) NCHAR = 2

        READ(TEMP1(IGO+2:IGO+2+NCHAR-1),8000) LBNO
8000    FORMAT(I6)

        IER = 0
        RETURN

	END
@


1.5
log
@ removed VMS specific code
@
text
@d17 4
a20 1
C    SEARCHQ(STRING,IER)
d22 2
a23 2
c    PARAMETERS:      STRING  STRING BEING SEARCHED FOR    (SENT)
C                     IER     ERROR NUMBER                 (RETURNED)
d27 1
a27 3
	SUBROUTINE SEARCHQ(STRING,IER)

CNO_SAVE
a30 2
        CHARACTER *(*) STRING

d34 4
a37 12
C       SWITCH SEARCHING TO NCHAR=4 IF A LABEL IS SEARCHED FOR
	NCHAR = 7
	IF (STRING(1:2) .EQ.'LB' .OR. STRING(1:2) .EQ. 'lb') NCHAR=4

C       MAKE FCHAR(4) A BLANK IF LOOKING FOR FOR A ONE DIGIT LABEL 
C           (E.G. LB3)

1       FCHAR(4:4) = ' '

C       READ ANSWER STRING
10      READ(NIN,80) FCHAR
80      FORMAT(A80)
d42 1
a42 1
C       INCREMENT FILE POINTER
d45 2
a46 4
C       COMPARE STRING WITH CURRENT INPUT STRING
C       FIRST CONVERT BOTH TO UPPER CASE TO AVOID CASE MISMATCHING...
        TEMP1(1:NCHAR) = FCHAR(1:NCHAR)
        TEMP2(1:NCHAR) = STRING(1:NCHAR)
d48 11
a58 8
	CALL SSUPCAS(TEMP2)
        IF (TEMP1(1:NCHAR) .NE. TEMP2(1:NCHAR)) GOTO 1
       
C       ALL OK, STRING FOUND, CLEAR REST OF INPUT STRING AND RETURN
	IF (NCHAR1 .LT. 80) THEN
           DO  K = NCHAR1+1,80
              FCHAR(K:K) = ' '
           ENDDO
d60 9
d70 21
d95 1
@


1.4
log
@removed SP_VMS
@
text
@a71 5
#ifdef SP_VMS
 99     IER = 1
        IF (COPT .EQ. 'B') STOP '*** END OF INPUT FILE IN BATCH MODE'
        RETURN
#endif
@


1.3
log
@needed trap on char pointer
@
text
@a43 5
#ifdef SP_VMS
C       NON-PORTABLE VAX FORTRAN
  10    READ(NIN,80,END=99) NCHAR1,FCHAR
  80    FORMAT(Q,A80)
#else
a46 1
#endif
@


1.2
log
@ used rdpr for ; handling
@
text
@d69 5
a73 3
	DO  K = NCHAR1+1,80
           FCHAR(K:K) = ' '
        ENDDO
@


1.1
log
@Initial revision
@
text
@d4 3
a6 2
C $$ SEARCHQ.FOR
C                          CHANGED TO STRING VARIABLES AUG 89 al
d17 1
a17 1
C $$ SEARCHQ(STRING,IER)
d19 2
a20 2
c    PARAMETERS:      STRING  STRING BEING SEARCHED FOR
C                     IER     ERROR NUMBER
d26 4
a30 4
C
C       MAHIEDDINE LADJADJ
C	3/29/93 CHANGE TO ADD ON-LINE HELP
        CHARACTER *1 PROMPT
a34 5
        CHARACTER *80  FCHAR
	COMMON /FUNCTION/ FCHAR
        COMMON /BATCH/IBCNT,NLOOP,IABSLP,ILOOP
        COMMON /UNITS/LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT

a35 1

d39 3
a41 1
C       MAKE FCHAR(4) A BLANK IF LOOKING FOR FOR A ONE DIGIT LABEL (E.G. LB3)
d44 12
a55 14
C       READ IN NEXT LINE
C
C       MAHIEDDINE LADJADJ
C       3/29/93 CHANGE TO ADD ON-LINE HELP
C
C        CALL READCH(NIN,NCHAR1,FCHAR,.TRUE.,IRTFLG)
        PROMPT(1:1)= ' '
        CALL READCH(PROMPT,NIN,NCHAR1,FCHAR,.TRUE.,IRTFLG)

        IF (IRTFLG .NE. 0) THEN
C          END-OF-FILE ENCOUNTERED. SET ERROR FLAG
           IER = 1
           RETURN
        ENDIF
d69 1
a69 1
	DO  K=NCHAR1+1,80
d72 1
d74 1
d76 3
d80 1
@
