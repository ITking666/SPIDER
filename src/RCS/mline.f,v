head	1.17;
access;
symbols
	healthdept_2018:1.17
	pre_getangas:1.14
	GPL2010:1.14
	pre_GPL2010:1.13
	pre_var_equation:1.13
	pre_fftwrings:1.13
	pre_opfiles:1.13
	src:1.13
	best-code:1.13
	x-named-regs:1.13
	x:1.13
	v13-00:1.13
	pre_GPL:1.11
	prec_CA:1.11
	noindx:1.11
	Bproc:1.10
	oct21:1.9
	last77:1.9;
locks; strict;
comment	@c @;


1.17
date	2018.10.03.14.34.09;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2014.02.18.19.51.19;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2014.01.12.19.18.11;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.24.13.26.10;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.17.20.51.15;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.17.18.41.38;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.11.14.08.45;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	99.11.10.23.09.37;	author yuchen;	state Exp;
branches;
next	1.9;

1.9
date	98.07.16.15.01.19;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	98.07.16.15.00.26;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	98.07.16.14.33.40;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	98.07.16.14.20.05;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	98.07.16.14.04.01;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	97.10.10.17.47.32;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	97.04.21.19.31.06;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.10.17.14.50.27;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.09;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.17
log
@email_health_dept
@
text
@C ++********************************************************************
C
C MLINE
C          LINE INTENSITY                        FEB 2014 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C MLINE(LUN,NX,NY,RP) 
C
C  PURPOSE: PUTS LINES IN SPIDER IMAGE. THIS SHOULD USE   
C           BRESENHAMS ALGORITHM FOR SPEED BUT I AM IN A HURRY SO I      
C           JUST BORROWED SOME EXISTING CODE!!!!!                       
C           CREATE LINE DEFINED BY TWO END POINTS
C
C PARAMETERS:
C
C	LUN      : LOGICAL UNIT NUMBER
C	NX,NY    : FILE DIMENSIONS
C	RP	 : INTENSITY VALUE FOR LINE
C
C CALLED BY:  pttern.f          
C
C **********************************************************************

C       -------------  MLINE2  ----------------------------------

	SUBROUTINE MLINE2(LUN,NX,NY,RP,IRTFLG)

        IMPLICIT NONE
	INCLUDE 'CMLIMIT.INC' 
	INCLUDE 'CMBLOCK.INC' 

        INTEGER           :: LUN,NX,NY,IRTFLG
        REAL              :: RP

        REAL              :: BUF(NX,NY)
        REAL              :: X1,Y1,X2,Y2
        INTEGER           :: IX1,IY1,IX2,IY2,NOT_USED
        REAL              :: FOREGR
 
        
C       LOAD IMAGE
        CALL REDVOL(LUN,NX,NY,1,1,BUF,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        FOREGR = RP

	CALL RDPRM3S(X1,Y1,FOREGR,NOT_USED,
     &               'COORDINATES & INTENSITY OF FIRST  POINT',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IX1 = IFIX(X1)
        IY1 = IFIX(Y1)
        IF (IX1 <= 0 .OR. IY1 <= 0) RETURN
           
        CALL RDPRM2S(X2,Y2,NOT_USED,
     &                  'COORDINATES OF SECOND POINT',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IX2 = IFIX(X2)
        IY2 = IFIX(Y2)
        IF (IX2 <= 0 .OR. IY2 <= 0) RETURN
             
        CALL MLINEB(BUF,NX,NY,IX1,IY1,IX2,IY2,FOREGR,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
	   
C       SAVE IMAGE
        CALL WRTVOL(LUN,NX,NY,1,1,BUF,IRTFLG)

        IRTFLG = 0
	END



C       -------------------  MLINEB  ---------------------------


        SUBROUTINE MLINEB(BUF,NX,NY,IX1,IY1,IX2,IY2,FOREGR,IRTFLG)

        IMPLICIT NONE
	INCLUDE 'CMBLOCK.INC' 
        INCLUDE 'CMLIMIT.INC'

        REAL              :: BUF(NX,NY)
        INTEGER           :: NX,NY,IX1,IY1,IX2,IY2,IRTFLG
        REAL              :: FOREGR

        INTEGER           :: IGO,IEND,IX,IXL,IY,IGOX,IENDX,IHALF
        INTEGER           :: IYT,IYL,IYEND,IXT
        REAL              :: FACT,FCON

        IRTFLG = 1
        IF     ((IX1 > NX .OR. IX1 <= 0) .OR.
     &          (IY1 > NY .OR. IY1 <= 0)) THEN

           WRITE(NOUT,91) IX1,IY1
91         FORMAT('*** POINT: (',I0,',',I0,') OUTSIDE IMAGE')
           RETURN

        ELSEIF ((IX2 > NX .OR. IX2 <= 0) .OR.
     &          (IY2 > NY .OR. IY2 <= 0)) THEN

           WRITE(NOUT,91) IX2,IY2
           RETURN
        ENDIF

C       POINT IS WITHIN IMAGE
        IF (IY1 == IY2) THEN
C          HORIZONTAL LINE WOULD CAUSE DIVISION BY ZERO
           IGO  = MIN(IX1,IX2)
           IEND = MAX(IX1,IX2)

           BUF(IGO:IEND,IY1) = FOREGR
           !WRITE(6,*) 'horizontal',iy1,iy2

        ELSE
           FACT =  FLOAT(IX2-IX1) /  FLOAT(IY2-IY1)
           FCON =  - FACT * IY1 + 0.5
           IF (IX1 > IX2) FCON = - FACT * IY1 - 0.5
           IGO  = MIN(IY1,IY2)
           IEND = MAX(IY1,IY2)

           !WRITE(6,*) 'go,end:',igo,iend

           IXL = IX1
           IF (IY2 < IY1) IXL = IX2

           DO IY = IGO,IEND
C             FIND X VALUE FOR THIS Y COORDINATE
              IX = IX1 + IFIX(FACT * FLOAT(IY) + FCON)

C             SET BUFFER AT THIS LOCATION TO FOREGROUND
              BUF(IX,IY) = FOREGR

              !write(6,'(A,I0," , ",I0)'),' 1: ',ix,iy

             IF (IABS(IX - IXL) > 1) THEN
C               MUST ADD IN INTERPOLATED X VALUES 
                IGOX  = MIN(IX,IXL)
                IENDX = MAX(IX,IXL)
                IHALF = IGOX + (IENDX - IGOX) / 2

                IYT   = IYL
                IYEND = IY
                IF (IX < IXL) THEN
                    IYT   = IY
                    IYEND = IYL
                ENDIF

                DO IXT = IGOX,IENDX
                   BUF(IXT,IYT) = FOREGR
                   !write(6,'(A,I0," , ",I0)')' 2: ',ixt,iyt
                   IF (IXT == IHALF) IYT = IYEND                       
                ENDDO
             ENDIF
             IXL = IX
             IYL = IY         

           ENDDO 
        ENDIF

C********************************
        !WRITE(6,977) IX1,IY1,ix2,iy2
977      FORMAT(' (',I4,',',I4,')-->(',I4,',',I4,')')
C*********************************

        IRTFLG = 0

	END

C       ---------  MLINE  --------- (ABANDONED FEB 2014) ---------------


	SUBROUTINE MLINE(LUN,NX,NY,RP)

	INCLUDE 'CMLIMIT.INC' 
	INCLUDE 'CMBLOCK.INC' 

	COMMON /IOBUF/ BUF(NBUFSIZ)

	CALL RDPRI2S(IX1,IY1,NOT_USED,'COORDINATES OF FIRST  POINT',IRT)
        IF (IRT .NE. 0) RETURN

	CALL RDPRI2S(IX2,IY2,NOT_USED,'COORDINATES OF SECOND POINT',IRT)
        IF (IRT .NE. 0) RETURN

	IF (IY1  >  IY2) THEN
	  IG  = IX1
	  IX1 = IX2
	  IX2 = IG
	  IG  = IY1
	  IY1 = IY2
	  IY2 = IG
        ENDIF

	ISTART = MAX(1,IY1)
	IEND   = MIN(NY,IY2)

	IF (ISTART > NY .OR. IEND <= 0) THEN
	   CALL ERRT(101,'LINE GOES OUTSIDE IMAGE',NF)
           RETURN
        ENDIF
             
        !write(6,*) 'start..end:',istart,iend

	IF (IY1 .NE. IY2) THEN
	   DO IROW=ISTART,IEND
	      IF (IX1 > IX2) THEN
                IX0 = IX1 + IFIX((FLOAT(IX2-IX1) / 
     &                            FLOAT(IY2-IY1)) * FLOAT(IROW-IY1)-0.5)
              ELSE
	        IX0 = IX1 + IFIX((FLOAT(IX2-IX1) /
     &                            FLOAT(IY2-IY1)) * FLOAT(IROW-IY1)+0.5)
              ENDIF
            !write(6,*) 'i,ixo:',IROW,IX0

              IF (IX0 > 0 .AND. IX0 <= NX) THEN
                 CALL REDLIN(LUN,BUF,NX,IROW)

                 BUF(IX0) = RP

                 CALL WRTLIN(LUN,BUF,NX,IROW)
              ENDIF
           ENDDO

	   RETURN
        ENDIF


	IF (IX1 > IX2) THEN
	   IG  = IX1
	   IX1 = IX2
	   IX2 = IG
        ENDIF

	ISTART = MAX(1,IX1)
	IEND   = MIN(NX,IX2)

	IF (ISTART > NX .OR. IEND <= 0) THEN
	   CALL ERRT(101,'LINE GOES OUTSIDE IMAGE',NF)
           RETURN
        ENDIF

	CALL REDLIN(LUN,BUF,NX,IY1)

	DO  I=ISTART,IEND
	   BUF(I) = RP
	ENDDO

	CALL WRTLIN(LUN,BUF,NX,IY1)

	END



@


1.16
log
@mline2 now aliases
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.15
log
@enter
@
text
@d3 3
d28 8
a35 1
C SUBROUTINE MLINE TO CREATE A LINE DEFINED BY TWO END POINTS
d37 3
a39 1
C	MLINE(LUN,NSAM,NROW,RP)
d41 1
a41 3
C	LUN	  : LOGICAL UNIT NUMBER
C	NSAM,NROW : FILE DIMENSIONS
C	RP	  : VALUE TO BE CORRECTED
d45 52
a96 1
	SUBROUTINE MLINE(LUN,NSAM,NROW,RP)
d98 3
d102 67
d170 8
a177 1
	COMMON BUF(1)
d179 1
a179 48
	CALL RDPRMI(IX1,IY1,NOT_USED,
     &             'COORDINATES OF FIRST  POINT')
	CALL RDPRMI(IX2,IY2,NOT_USED,
     &             'COORDINATES OF SECOND POINT')

	IF (IY1 .GT. IY2) THEN
	IG=IX1
	IX1=IX2
	IX2=IG
	IG=IY1
	IY1=IY2
	IY2=IG
        ENDIF

	ISTART=MAX0(1,IY1)
	IEND=MIN0(NROW,IY2)
	IF(ISTART.GT.NROW.OR.IEND.LE.0) THEN
	CALL ERRT(14,'MLINE ',NF)
        RETURN
        ENDIF

	IF (IY1.NE.IY2) THEN
	 DO I=ISTART,IEND
	  IF(IX1.GT.IX2) THEN
        IX0=IX1 + IFIX((FLOAT(IX2-IX1)/FLOAT(IY2-IY1))*FLOAT(I-IY1)-0.5)
          ELSE
	IX0=IX1 + IFIX((FLOAT(IX2-IX1)/FLOAT(IY2-IY1))*FLOAT(I-IY1)+0.5)
          ENDIF
	    IF(IX0.GT.0.AND.IX0.LE.NSAM) THEN
	     CALL REDLIN(LUN,BUF,NSAM,I)
	     BUF(IX0)=RP
	     CALL WRTLIN(LUN,BUF,NSAM,I)
	    ENDIF
	 ENDDO
	 RETURN
        ENDIF

	IF(IX1.GT.IX2) THEN
	IG=IX1
	IX1=IX2
	IX2=IG
        ENDIF

	ISTART=MAX0(1,IX1)
	IEND=MIN0(NSAM,IX2)
	IF(ISTART.GT.NSAM.OR.IEND.LE.0) THEN
	CALL ERRT(14,'MLINE ',NF)
        RETURN
d182 84
a265 1
	CALL REDLIN(LUN,BUF,NSAM,IY1)
d267 1
a267 1
	BUF(I) = RP
d269 3
a271 1
	CALL WRTLIN(LUN,BUF,NSAM,IY1)
d273 3
@


1.14
log
@GPL_2010
@
text
@d42 1
a42 1
     &             'ENTER COORDINATES OF FIRST  POINT')
d44 1
a44 1
     &             'ENTER COORDINATES OF SECOND POINT')
@


1.13
log
@GPL License fixed
@
text
@a3 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d5 5
a9 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d11 1
a11 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d16 1
a16 1
C=* This program is distributed in the hope that it will be useful,    *
d18 1
a18 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a19 1
C=*                                                                    *
d21 1
a21 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.12
log
@HRI GPL License used
@
text
@a3 2
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      **
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
d7 1
a7 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a26 6

C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
a37 1
C****************************************************************************
@


1.11
log
@nloop,iloop_removed
@
text
@d4 1
d6 24
d45 1
@


1.10
log
@a
@
text
@d28 1
a28 1
	CALL RDPRMI(IX1,IY1,NLOOP,ILOOP,
d30 1
a30 1
	CALL RDPRMI(IX2,IY2,NLOOP,ILOOP,
@


1.9
log
@*** empty log message ***
@
text
@d27 1
a27 1
CNO_SAVE
@


1.8
log
@*** empty log message ***
@
text
@d54 1
a54 1
	IX0=IX1 + IFIX((FLOAT(IX2-IX1)/FLOAT(IY2-IY1))*FLOAT(I-IY1)+0.5 
@


1.7
log
@*** empty log message ***
@
text
@d52 1
a52 1
        IX0=IX1 + IFIX( (FLOAT(IX2-IX1)/FLOAT(IY2-IY1))*FLOAT(I-IY1)-0.5 )
d54 1
a54 1
	IX0=IX1 + IFIX( (FLOAT(IX2-IX1)/FLOAT(IY2-IY1))*FLOAT(I-IY1)+0.5 )
@


1.6
log
@*** empty log message ***
@
text
@d44 4
a47 1
	IF(ISTART.GT.NROW.OR.IEND.LE.0) GOTO 9000
@


1.5
log
@*** empty log message ***
@
text
@d47 2
a48 2
	DO 20 I=ISTART,IEND
	IF(IX1.GT.IX2) THEN
d50 1
a50 1
        ELSE
d52 8
a59 8
        ENDIF
	IF(IX0.LE.0.OR.IX0.GT.NSAM) GOTO 20

	CALL REDLIN(LUN,BUF,NSAM,I)
	BUF(IX0)=RP
	CALL WRTLIN(LUN,BUF,NSAM,I)
20	CONTINUE
	RETURN
@


1.4
log
@*** empty log message ***
@
text
@d27 1
a27 1

d33 1
a33 2
	IF (IY1 .LE. IY2) GOTO 11

d40 1
a41 1
11	CONTINUE
d46 1
a46 2
	IF (IY1.EQ.IY2) GOTO 200

d48 3
a50 2
	IF(IX1.GT.IX2) GOTO 21

d52 1
a52 3
	GOTO 22
21	IX0=IX1 + IFIX( (FLOAT(IX2-IX1)/FLOAT(IY2-IY1))*FLOAT(I-IY1)-0.5 )
22	CONTINUE
d60 1
d62 1
a62 2
200	CONTINUE
	IF(IX1.LE.IX2) GOTO 201
d66 1
a66 1
201	CONTINUE
d70 4
a73 1
	IF(ISTART.GT.NSAM.OR.IEND.LE.0) GOTO 9000
a79 5

	RETURN

9000	CALL ERRT(14,'MLINE ',NF)
	RETURN
@


1.3
log
@changed prompts
@
text
@d76 3
a78 2
	DO 210 I=ISTART,IEND
210	BUF(I) = RP
@


1.2
log
@used nloop,iloop
@
text
@d1 1
d3 8
a10 1
C SUBROUTINE MLINE TO CORRECT A LINE DEFINED BY TWO POINTS
d12 2
a23 1
#ifdef SP_UNIX
a24 3
#else
	INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
d28 6
a33 2
	CALL RDPRMI(IX1,IY1,NLOOP,ILOOP,'ENTER COOS OF 1. POINT')
	CALL RDPRMI(IX2,IY2,NLOOP,ILOOP,'ENTER COOS OF 2. POINT')
a34 2
	IF(IY1.LE.IY2) GOTO 11
C
d47 1
a47 1
	IF(IY1.EQ.IY2) GOTO 200
d77 1
a77 1
210	BUF(I)=RP
d82 1
a82 2
9000	IER=14
	CALL ERRT(IER,'MLINE ',NF)
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
C	CALL MLINE(LUN,NSAM,NROW,RP)
d6 1
a6 1
C	LUN	: LOGICAL UNIT NUMBER
d8 1
a9 2
C	RP	: VALUE TO BE CORRECTED
C
d11 1
a11 1
C
d13 12
a24 6
C
	COMMON ADUM(80),BUF(1)
C
	CALL RDPRMI(IX1,IY1,1,1,'ENTER COOS OF 1. POINT$')
	CALL RDPRMI(IX2,IY2,1,1,'ENTER COOS OF 2. POINT$')
C
d33 1
a33 1
C
d38 1
a38 1
C
d40 1
a40 1
C
d43 1
a43 1
C
d49 1
a49 1
C
d55 1
a55 1
C
d62 1
a62 1
C
d66 1
a66 1
C
d71 1
a71 1
C
d73 1
a73 1
C
@
