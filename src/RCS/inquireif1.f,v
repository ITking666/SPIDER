head	1.29;
access;
symbols
	pre_getangas:1.27
	GPL2010:1.24
	pre_GPL2010:1.23
	pre_var_equation:1.23
	pre_fftwrings:1.23
	pre_opfiles:1.23
	src:1.23
	best-code:1.23
	x-named-regs:1.23
	x:1.23
	v13-00:1.23
	pre_GPL:1.21
	prec_CA:1.19
	noindx:1.16
	Bproc:1.13
	oct21:1.12
	last77:1.11;
locks; strict;
comment	@c @;


1.29
date	2016.09.14.17.49.39;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2012.05.08.14.06.44;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2011.01.24.20.37.12;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2010.10.21.18.28.47;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2010.10.21.17.49.11;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2010.06.24.13.25.58;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2005.10.17.20.38.49;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.17.18.29.12;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2005.02.17.15.06.16;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2005.02.14.17.24.13;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2003.03.04.14.37.40;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2003.02.19.18.46.11;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2003.01.23.15.51.46;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.16.15.06.20;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2001.01.29.17.13.01;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2001.01.16.19.39.24;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.24.20.02.36;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.09.08.16.59.19;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.03.29.20.15.33;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	98.04.07.15.46.18;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	98.04.07.14.16.46;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	98.04.07.12.30.19;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	98.02.24.16.47.24;	author liy;	state Exp;
branches;
next	1.6;

1.6
date	98.01.27.17.11.48;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	98.01.20.19.58.39;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	97.12.12.19.09.35;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	97.12.12.18.04.00;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	97.10.15.18.01.20;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	97.10.10.15.00.26;	author leith;	state Exp;
branches;
next	;


desc
@new
@


1.29
log
@==, nsam
@
text
@C++*********************************************************************
C
C  INQUIREIF1.F    NEW ROUTINE                      SEP 97 al
C                  F90 CHANGES                      MAR 98 al
C                  REMOVED ifdef sgi                NOV 01 al
C                  INDEXED STACK                    JAN 03 ARDEAN LEITH
C                  LUNRED                           FEB 03 ARDEAN LEITH
C                  NLET = 0 BUG                     FEB 05 ARDEAN LEITH
C                  OPENINLN KIND                    OCT 10 ARDEAN LEITH
C                  _4@@2 NON  BUG                    JAN 11 ARDEAN LEITH
C                  TYPET ifort                      MAY 12 ARDEAN LEITH
C                  ==, nsam                         SEP 16 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2016  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   INQUIREIF1(LUN,FILNAM,TYPET,EX,ISOPEN,LUNOP,INLNED,IMGNUM,IRTFLG)    
C
C   PURPOSE:     DETERMINES IF A FILE EXISTS
C
C   PARAMETERS:  LUN                                          (SENT)
C                FILNAM                                       (SENT)
C                TYPET   SEARCH TYPE                          (SENT)
C                EX                                           (RET.)
C                ISOPEN                                       (RET.)
C                LUNOP                                        (RET.)
C                INLNED                                       (RET.)
C                IMGNUM                                       (RET.)
C                IRTFLG                                       (RET.)
C
C--*********************************************************************

        SUBROUTINE INQUIREIF1(LUN,FILNAM,TYPET,EX,ISOPEN,LUNOP,
     &                        INLNED,IMGNUM,IRTFLG)

C       USE INLINE BUFFER COMMON AREA
        INCLUDE 'INLN_INFO.INC'

        INCLUDE 'CMBLOCK.INC' 
        INCLUDE 'CMLIMIT.INC' 

        INTEGER                      :: LUN
        CHARACTER (LEN=*)            :: FILNAM
        CHARACTER (LEN=*)            :: TYPET
        LOGICAL                      :: EX,ISOPEN
        INTEGER                      :: LUNOP,INLNED,IMGNUM,IRTFLG

        CHARACTER (LEN=MAXNAM)       :: FILDUM
        CHARACTER (LEN=1)            :: NULL,FIRSTC
        LOGICAL                      :: STACKOPN

        INTEGER, PARAMETER           :: I_8 = SELECTED_INT_KIND(12)
        INTEGER(KIND=I_8), PARAMETER :: ZERO_8 = 0

        NULL    = CHAR(0)

        NLET    = lnblnk(FILNAM)
        FIRSTC  = FILNAM(1:1)
        ILOCAT  = INDEX(FILNAM,'@@')
        NAMEND  = NLET
        IF (ILOCAT > 1) NAMEND = ILOCAT - 1
        EX      = .FALSE.
        ISOPEN  = .FALSE.
        INLNED  = 0
        IMGNUM  = 0
        IRTFLG  = 0

C       CHECK FOR ANONMOLOUS INPUT
        IF (NLET <= 0 .OR. NAMEND <= 0) RETURN

        IF (FIRSTC .NE. '_' .AND. ILOCAT <= 0) THEN
C          NO LEADING '_' AND NO '@@' MEANS THAT IT IS A REGULAR 
C          FILE_BASED NON-STACK IMAGE OR OTHER FILE (SUCH AS A
C          DOCUMENT FILE)

#if defined (__INTEL_COMPILER)
           IF (TYPET == 'DIR') THEN
C             SEE IF THIS DIR EXISTS, (RETURNS EX)
              INQUIRE(DIRECTORY=FILNAM(1:NAMEND),EXIST=EX,ERR=999)
           ELSE
C             SEE IF THIS FILE EXISTS, (RETURNS EX, ISOPEN, LUNOP)
              INQUIRE(FILE=FILNAM(1:NAMEND),EXIST=EX,OPENED=ISOPEN,
     &             NUMBER=LUNOP,ERR=999)
           ENDIF
#else
C          SEE IF THIS FILE EXISTS, (RETURNS EX, ISOPEN, LUNOP)
           INQUIRE(FILE=FILNAM(1:NAMEND),EXIST=EX,OPENED=ISOPEN,
     &             NUMBER=LUNOP,ERR=999)
#endif

        ELSEIF (FIRSTC .NE. '_') THEN
C          CHECK TO SEE IF IMAGE EXISTS IN THIS EXISTING STACK
C          NO LEADING '_' MEANS THIS IS FILE_BASED STACK OR BARE STACK 

           IFOUND = -4   ! SET IFOUND TO DECREASE OPENING OUTPUT INFO
           MAXIM  =  1   ! A BARE STACK FILE IS OK

           CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'Z',IFORM,NX,NY,NZ,
     &              MAXIM,' ',.TRUE.,IRTFLG)
           IFOUND = 0    ! RESET NEEDED, THIS IS IN COMMON /UNITS/

           EX     = (IRTFLG == 0)
           !write(6,*) ' in inquirif1,  irtflg,ex:',irtflg,ex

        ELSEIF (FIRSTC == '_') THEN
C          INLINE IMAGE FILE OR OVERALL INLINE STACK ACCESS WANTED

C          RETRIVE INLINE BUFFER NUMBER FROM FILE NAME
           CALL INLNBUF(FILNAM,NLET,INLNED,IRTFLG)
           IF (IRTFLG .NE. 0)  RETURN

C          SEE IF INLINE STACK EXISTS NOW
           STACKOPN = (NSAMBUF(INLNED) > 0)
           IF (.NOT. STACKOPN) RETURN

           IF (ILOCAT == 0) THEN
C              SIMPLE INLINE IMAGE OR OVERALL INLINE STACK
               EX = .TRUE.
               RETURN
           ENDIF

C          FIND IMAGE NUMBER WITHIN STACK 
C          READ(FILNAM(ILOCAT+1:),*,IOSTAT=IER) IMGNUM -changed for osf-liy
           CALL FILCAD(FILNAM(ILOCAT:),FILDUM,IMGNUM,IER)
           IF (IER .NE. 0) THEN
              CALL ERRT(101,'UNABLE TO INTERPRET IMAGE NUMBER',NE)
              RETURN
           ENDIF
                 
           IFOUND = -4   ! SET IFOUND TO DECREASE OPENING OUTPUT INFO
           MAXIM  =  1   ! A BARE STACK FILE IS OK

           CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'Z',IFORM,NX,NY,NZ,
     &              MAXIM,' ',.TRUE.,IRTFLG)
           IFOUND = 0    ! RESET NEEDED, THIS IS IN COMMON /UNITS/

           EX     = (IRTFLG == 0)

        ENDIF

        CLOSE(LUN)
        RETURN


999     WRITE(NOUT,*)'*** ERROR INQUIRING ABOUT FILE: ',FILNAM(1:NLET)
        CALL ERRT(100,' ',NE)
        EX = .FALSE.
        RETURN

        END





@


1.28
log
@typet for intel ifort
@
text
@d12 1
d18 1
a18 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d80 1
a80 1
        IF (ILOCAT .GT. 1) NAMEND = ILOCAT - 1
d88 1
a88 1
        IF (NLET .LE. 0 .OR. NAMEND .LE. 0) RETURN
d90 1
a90 1
        IF (FIRSTC .NE. '_' .AND. ILOCAT .LE. 0) THEN
d117 1
a117 1
           CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'Z',IFORM,NSAM,NROW,NSLICE,
d121 2
a122 1
           EX     = (IRTFLG .EQ. 0)
d124 1
a124 1
        ELSEIF (FIRSTC .EQ. '_') THEN
d132 1
a132 1
           STACKOPN = (NSAMBUF(INLNED) .GT. 0)
d135 1
a135 1
           IF (ILOCAT .EQ. 0) THEN
d152 1
a152 1
           CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'Z',IFORM,NSAM,NROW,NSLICE,
d156 1
a156 1
           EX     = (IRTFLG .EQ. 0)
@


1.27
log
@bug on _4@@2 existence check
@
text
@d11 1
d17 1
a17 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d35 1
a35 2
C   INQUIREIF1(LUN,FILNAM,BUF,NBUFSIZT,EX,ISOPEN,LUNOP,INLNED,
C              IMGNUM,IRTFLG)    
d41 1
a41 2
C                BUF                                          UNUSED
C                NBUFSIZT                                     UNUSED
d51 1
a51 1
        SUBROUTINE INQUIREIF1(LUN,FILNAM,BUF,NBUFSIZT,EX,ISOPEN,LUNOP,
d60 1
a60 2
        REAL                         :: BUF(*)   ! UNUSED
        INTEGER                      :: NBUFSIZT   ! UNUSED
d62 4
d68 1
a68 1
        LOGICAL                      :: EX,ISOPEN,STACKOPN
d94 10
d107 1
@


1.26
log
@zero_8 defined
@
text
@d10 1
d16 1
a16 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d39 10
a48 10
C   PARAMETERS:  LUN
C                FILNAM
C                BUF                   UNUSED
C                NBUFSIZT              UNUSED
C                EX
C                ISOPEN
C                LUNOP
C                INLNED
C                IMGNUM
C                IRTFLG
d61 2
a62 1
        REAL                         :: BUF(*)
a83 1

a95 2
           RETURN

d97 2
a98 1
C          NO LEADING '_' MEANS FILE_BASED STACK OR OVERALL STACK 
d100 2
a101 3
C          CHECK TO SEE IF IMAGE EXISTS IN THIS EXISTING STACK
C          SET IFOUND TO DECREASE OPENING OUTPUT INFO
           IFOUND = -4
a102 2
C          A BARE STACK FILE IS OK
           MAXIM  =  1
d105 3
a107 4
           IF (IRTFLG .EQ. 0) EX = .TRUE.
           IFOUND = 0
           CLOSE(LUN)
           RETURN
a119 6
C          HAVE EXISTING INLINE BUFFER, TIE IT TO LUN & GET NSAM
C          NEED TO OVERRIDE ERRT IN OPENINLN
           CALL OPENINLN(LUN,INLNED,.FALSE.,NSAM,ZERO_8,.FALSE.,IRTFLG)
C          IRTFLG WILL BE SET IF INLINE FILE DOES NOT EXIST
           IF (IRTFLG .NE. 0)  RETURN

d124 1
a124 1
           ENDIF                 
d133 3
d137 3
a139 9
C          GET SPECIFIED IMAGE HEADER FROM STACK LOCATION
           CALL LUNREDHED(LUN,NSAM,IMGNUM,.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0) THEN
C             THIS IMAGE DOES NOT EXIST
              RETURN
           ENDIF

C          GET IMGNUM VALUE 
           CALL LUNGETINUSE(LUN,IMGNUM,IRTFLG)
d141 1
a141 2
C          SEE IF QUERIED IMAGE IS IN THE STACK
           CALL LUNGETINUSE(LUN,IMUSED,IRTFLG)
a142 1
           IF (IMUSED .GT. 0) EX = .TRUE.
d145 1
a146 1

@


1.25
log
@OPENINLN KIND
@
text
@d60 8
a67 5
        REAL                   :: BUF(*)
        CHARACTER (LEN=*)      :: FILNAM
        CHARACTER (LEN=MAXNAM) :: FILDUM
        CHARACTER (LEN=1)      :: NULL,FIRSTC
        LOGICAL                :: EX,ISOPEN,STACKOPN
@


1.24
log
@GPL_2010
@
text
@d3 8
a10 6
C  INQUIREIF1.F                  NEW ROUTINE       SEP 97 al
C                                F90 CHANGES       MAR 98 al
C                                REMOVED ifdef sgi NOV 01 al
C                                INDEXED STACK     JAN 03 ARDEAN LEITH
C                                LUNRED            FEB 03 ARDEAN LEITH
C                                NLET = 0 BUG      FEB 05 ARDEAN LEITH
d58 1
d60 5
a64 5
        DIMENSION       BUF(*)
        CHARACTER *(*)  FILNAM
        CHARACTER *81  	FILDUM
        CHARACTER       NULL,FIRSTC
        LOGICAL         EX,ISOPEN,STACKOPN
d123 1
a123 1
           CALL OPENINLN(LUN,INLNED,.FALSE.,NSAM,0,.FALSE.,IRTFLG)
@


1.23
log
@GPL License fixed
@
text
@a9 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d11 5
a15 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d17 1
a17 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d22 1
a22 1
C=* This program is distributed in the hope that it will be useful,    *
d24 1
a24 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a25 1
C=*                                                                    *
d27 1
a27 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.22
log
@HRI GPL License used
@
text
@a9 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d13 1
a13 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a32 6

C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.21
log
@irtflg return defaults to zero now
@
text
@d11 24
@


1.20
log
@NLET = 0 BUG
@
text
@d61 2
@


1.19
log
@redhed/wrthed removal
@
text
@d3 6
a8 6
C  INQUIREIF1.F                     NEW ROUTINE      SEPT 97 al
C                                   F90 CHANGES      MAR  98 al
C                                   REMOVED ifdef sgi NOV 01 al
C                                   INDEXED STACK JAN 03   ARDEAN LEITH
C                                   LUNRED        FEB 03   ARDEAN LEITH
C
a38 4
cccifdef __sgi
ccc        USE FTN_IEEE_DEFINITIONS
cccendif

d62 3
@


1.18
log
@opfilec
@
text
@d7 1
d25 2
a26 2
C                BUF
C                NBUFSIZT
a47 2
        COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100)

a123 5
C          SET OFFSET INTO LUNSTK, ALL IMAGES SHOULD HAVE IREC 
C          SAME AS THE HEADER          
           LUNARA(LUN) = LABRECBUF(INLNED)
           LUNSTK(LUN) = (IMGNUM-1)* IRECBUF(INLNED) + LUNARA(LUN)

d125 1
a125 1
           CALL REDHED(LUN,BUF,NBUFSIZT,NSAM,1,IRTFLG)
d131 3
d135 2
a136 7
#ifdef __sgi
          IF (IEEE_IS_NAN(BUF(25))) THEN
             IMUSED = 0
             RETURN
          ENDIF
#endif
           IMUSED = BUF(25)
@


1.17
log
@indexed stacks
@
text
@d87 1
a87 1
           CALL OPFIL(.FALSE.,FILNAM,LUN,'Z',NSAM,NROW,NSLICE,
@


1.16
log
@removed ifdef __sgi (not needed now??)
@
text
@d3 4
a6 3
C  INQUIREIF1.F                            NEW ROUTINE      SEPT 97 al
C                                          F90 CHANGES      MAR  98 al
C                                          REMOVED ifdef sgi NOV 01 al
d9 6
a14 6
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
d86 1
a86 1
           MAXIM  = -1
@


1.15
log
@trap for NaN on SGI
@
text
@d3 3
a5 2
C  INQUIREIF1.F                                NEW ROUTINE  SEPT 97 al
C                                              F90 CHANGES  MAR  98 al
d37 3
a40 3
#ifdef __sgi
        USE FTN_IEEE_DEFINITIONS
#endif
@


1.14
log
@added lunarb to common /lunara/
@
text
@d37 3
d136 6
@


1.13
log
@SP_F90 removed
@
text
@d42 1
a42 1
        COMMON /LUNARA/ LUNARA(100),LUNSTK(100)
@


1.12
log
@CMLIMIT.INC
@
text
@a36 2
#ifdef SP_F90
C     ----------- F90 SPECIFIC CODE FOLLOWS ------------------
d38 1
a38 17
      INCLUDE 'INLN_INFO.INC'

C     ----------- F90 SPECIFIC CODE ENDS ------------------
#else
C     ----------- F77 SPECIFIC CODE FOLLOWS ------------------
C       DO NOT CHANGE NUMINLN WITHOUT SEARCH FOR OTHER OCCURANCES!
        PARAMETER       (NUMINLN = 9)
#if defined(SP_SUN4) || defined(SP_NT)
        INTEGER * 4     LOCBUF
#else
        INTEGER * 8     LOCBUF
#endif
        COMMON /LUNARC/ LOCBUF(NUMINLN), NWORDBUF(NUMINLN), 
     &                  NSAMBUF(NUMINLN),IRECBUF(NUMINLN),
     &                  LABRECBUF(NUMINLN)
C     ----------- F77 SPECIFIC CODE ENDS ------------------
#endif
@


1.11
log
@USE INLN_INFO ALTERED
@
text
@d15 1
a15 1
C   INQUIREIF1(LUN,FILNAM,BUF,NBUFSIZ,EX,ISOPEN,LUNOP,INLNED,
d23 1
a23 1
C                NBUFSIZ
d33 1
a33 1
        SUBROUTINE INQUIREIF1(LUN,FILNAM,BUF,NBUFSIZ,EX,ISOPEN,LUNOP,
a35 1
CNO_SAVE
d144 1
a144 1
           CALL REDHED(LUN,BUF,NBUFSIZ,NSAM,1,IRTFLG)
@


1.10
log
@bug
@
text
@d41 2
a42 1
        USE INLN_INFO
@


1.9
log
@ifdef SUN
@
text
@d48 1
a48 1
        INTEGER * 4     LOCLUN
d50 1
a50 1
        INTEGER * 8     LOCLUN
@


1.8
log
@f90 changes
@
text
@a39 1

a41 1

a42 1

a43 1
 
a44 1

d47 2
a48 2
#ifdef SP_NT
        INTEGER         LOCBUF
d50 1
a50 1
        INTEGER * 8     LOCBUF
a54 1

@


1.7
log
@change READ for osf
@
text
@d3 3
a5 2
C  INQUIREIF1.F                                  NEW ROUTINE  SEPT 97 al
C                                
d15 4
a18 1
C   INQUIREIF1    DETERMINES IF A FILE EXISTS
d20 11
d34 1
a34 1
     7                        INLNED,IMGNUM,IRTFLG)
d38 9
a46 1
        INCLUDE 'CMBLOCK.INC' 
d48 2
d53 1
a53 1
        INTEGER LOCBUF
d61 5
d171 1
@


1.6
log
@used 4byte pointers on nt
@
text
@d40 1
d107 2
a108 1
           READ(FILNAM(ILOCAT+1:),*,IOSTAT=IER) IMGNUM
@


1.5
log
@USED OPFIL WITH MAXIM SPECIFIED AS -1
@
text
@d27 3
d31 1
@


1.4
log
@closed file
@
text
@d68 6
a73 1
           CALL OPENFB(BUF,FILNAM,LUN,NSAM,NROW,'Z',NF,NSLICE)
a74 3
           IF (NF .EQ. 2) THEN
              EX = .TRUE.
           ENDIF
@


1.3
log
@overall stack now included @@
@
text
@a71 1
              CLOSE(LUN)
d73 1
@


1.2
log
@(i) format removed for f90
@
text
@d52 3
a54 1
C          NO LEADING '_' OR '@@' MEANS FILE_BASED IMAGE OR OTHER FILE 
d63 1
a63 1
C          NO LEADING '_' MEANS FILE_BASED STACK 
d99 6
a104 6
C           FIND IMAGE NUMBER WITHIN STACK 
            READ(FILNAM(ILOCAT+1:),*,IOSTAT=IER) IMGNUM
            IF (IER .NE. 0) THEN
               CALL ERRT(101,'UNABLE TO INTERPRET IMAGE NUMBER',NE)
               RETURN
            ENDIF
d112 5
a116 2
           CALL REDHED(LUN,BUF,NBUFSIZ,NSAM,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
a120 8

        ELSE
C          REGULAR IMAGE STACK WANTED
C          SEE IF THIS STACK FILE EXISTS
           INQUIRE(FILE=FILNAM,EXIST=EX,OPENED=ISOPEN,NUMBER=LUNOP,
     &          ERR=999)

C          SEE IF THIS STACKED IMAGE EXISTS IN THE FILE
@


1.1
log
@Initial revision
@
text
@d98 1
a98 2
            READ(FILNAM(ILOCAT+1:),8000,IOSTAT=IER) IMGNUM
8000        FORMAT(I)
@
