head	1.27;
access;
symbols
	pre_mrcs:1.25
	healthdept_2018:1.25
	pre_getangas:1.23
	GPL2010:1.23
	pre_GPL2010:1.22
	pre_var_equation:1.22
	pre_fftwrings:1.22
	pre_opfiles:1.22
	src:1.22
	best-code:1.21
	named-reg:1.21
	x-named-regs:1.20
	x:1.20
	v13-00:1.19
	pre_GPL:1.17
	prec_CA:1.16
	noindx:1.16
	Bproc:1.13
	oct21:1.11
	last77:1.11;
locks; strict;
comment	@c @;


1.27
date	2019.11.14.18.49.48;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2019.11.04.17.36.16;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2018.10.03.14.34.05;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2013.01.11.19.07.02;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.24.13.25.36;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2006.03.31.16.01.49;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2005.12.12.15.27.16;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2005.11.15.21.50.51;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.17.20.27.37;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.17.18.19.12;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2003.10.30.19.50.39;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2001.07.12.19.32.11;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2001.03.08.20.28.35;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2001.01.18.19.50.22;	author bbaxter;	state Exp;
branches;
next	1.13;

1.13
date	2000.08.10.14.27.16;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.11.10.23.09.17;	author yuchen;	state Exp;
branches;
next	1.11;

1.11
date	99.02.04.15.06.13;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	97.02.03.16.39.59;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	96.08.14.15.11.12;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	96.08.14.13.32.04;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	96.07.31.13.32.08;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	95.10.23.17.27.51;	author mladjadj;	state Exp;
branches;
next	1.5;

1.5
date	95.09.29.16.44.45;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	95.07.28.16.04.23;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	94.05.17.13.01.17;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.05.05;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.48.46;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.27
log
@getlab parameters
@
text
@C***********************************************************************
C
C FILDAT.F                     CREATED             DEC 87 ArDean Leith
C                              USED REG_           AUG 00 ArDean Leith
C                              IF (VERBOSE)        JUL 01 ArDean Leith
C                              MPI USE             NOV 05 ArDean Leith
C                              [] REGISTERS        NOV 05 ArDean Leith
C                              MRC SUPPORT         OCT 19 ArDean Leith
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2019  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    FILDAT(LUN,NX)
C
C    PARAMETERS:     LUN       LOGICAL UNIT FOR FILE (ALREADY OPENED)
C                    NX        SAMPLES PER LINE
C
C    CALLED BY:      FILGEN    UTIL1
C
C    NOTE:   THE HEADER RECORD(S) OF THE FILE CONTAINS THE FOLLOWING 
C            BUFFER POSITIONS WHICH CAN BE RETRIEVED (AMONG OTHERS)
C                  7  FMAXD = IMAGE MAXIMUM
C                  8  FMIND = IMAGE MINIMUM
C		   9  AVD   = IMAGE AVERAGE
C                 10  SIG   = STANDARD DEVIATION (SQ. ROOT OF VARIANCE)
C                 11  IHIST = UNUSED
C                 14  IANGLE= FLAG INDICATING THAT TILT ANGLES STORED
C                 15  PHI   = TILT ANGLE
C                 16  THETA = TILT ANGLE
C                 17  PSI   = TILT ANGLE
C                 18  XOFF  = X OFFSET
C                 19  YOFF  = Y OFFSET
C                 20  ZOFF  = Z OFFSET
C                 21  SCALE = SCALE
C                 30  KANGLE= FLAG INDICATING THAT MORE ANGLES STORED
C                 31  PHI2  = PHI OF SECOND EULER ROTATION
C                 32  THETA2= THETA OF SECOND EULER ROTATION
C                 33  PSI2  = PSI OF SECOND EULER ROTATION
C                 34  PHI1  = PHI OF FIRST EULER ROTATION
C                 35  THETA1= THETA OF FIRST EULER ROTATION
C                 36  PSI1  = PSI OF FIRST EULER ROTATION
C
C--*********************************************************************

	   SUBROUTINE FILDAT(LUN,NX)

           IMPLICIT NONE

           INCLUDE 'CMBLOCK.INC'
           INCLUDE 'CMLIMIT.INC'
           INCLUDE 'LABLOCK.INC'

           INTEGER           :: LUN,NX

           REAL              :: BUF,VALUES
           INTEGER           :: NUMBER,ILIST
           COMMON /IOBUF/ BUF(NBUFSIZ)
           COMMON         NUMBER(20),VALUES(20),ILIST(20)

           INTEGER           :: NREG,NUMT,ILOW,IHI
           INTEGER           :: IRTFLG,LENNAME,I,NGOT

           CHARACTER(LEN=1)  :: CDUM
           CHARACTER(LEN=80) :: NAME

C          INCLUSION FOR OPTIONAL MPI INITIALIZATION. MAY ALTER MYPID  
           INTEGER           :: MYPID = -1
#include "MPI_INIT.INC"


           IF (MYPID <= 0) THEN
              WRITE(NOUT,446) FMIN,FMAX,AV,SIG
446	      FORMAT(6X,'FMIN= ',G10.3,3X,'FMAX= ',G10.3,3X,
     &                  'AV=   ',G10.3,3X,'SIG=  ',G10.3)

              IF (IANGLE > 0) WRITE(NOUT,447)PHI,THETA,PSI
447           FORMAT(6X,'PHI=  ',G10.3,3X,'THETA=',G10.3,3X,'PSI=',
     &                           G10.3) 

              WRITE(NOUT,448) XOFF,YOFF,ZOFF
448           FORMAT(6X,'XOFF= ',G10.3,3X,'YOFF= ',G10.3,3X,'ZOFF= ',
     &                           G10.3/)

              IF (SCALE .NE. 0) WRITE(NOUT,449) SCALE
449           FORMAT(6X,'SCALE=  ',G10.3)

              IF (KANGLE > 0) WRITE(NOUT,450) PHI2,THETA2,PSI2
450           FORMAT(6X,'PHI2= ',G10.3,3X,'THETA2=',G10.3,3X,'PSI2=',
     &                           G10.3)
 
              IF (KANGLE == 2) WRITE(NOUT,451) PHI1,THETA1,PSI1
451           FORMAT(6X,'PHI1= ',G10.3,3X,'THETA1=',G10.3,3X,'PSI1=',
     &                           G10.3)
        ENDIF
 

        CALL REG_GET_USED(NREG)

        IF (NREG > 0) THEN
C         REGISTERS SPECIFIED

          NUMT = MIN(NREG,20)
	  ILOW = 1
	  IHI  = 256
          CALL RDPRAI(NUMBER,20,NUMT,ILOW,IHI,
     &        'NUMBER(S) OF HEADER LOCATION TO BE RETRIEVED',
     &        CDUM,IRTFLG)

          IF (NUMBER(1) == 0) THEN
             IF (MYPID <= 0) WRITE(NOUT,900)
900          FORMAT(/,' SOME HEADER POSITIONS WHICH CAN BE RETRIEVED:'
     &           ,/,'      7  FMAX   = IMAGE MAXIMUM',/,
     &              '      8  FMIN   = IMAGE MINIMUM',/,
     &              '      9  AVD    = IMAGE AVERAGE',/,
     &              '     10  SIG    = IMAGE STANDARD DEVIATION',/,
     &              '     14  IANGLE = TILT ANGLES STORED FLAG',/,
     &              '     15  PHI    = TILT ANGLE',/,
     &              '     16  THETA  = TILT ANGLE',/,
     &              '     17  PSI    = TILT ANGLE',/,
     &              '     18  XOFF   = X OFFSET',/,
     &              '     19  YOFF   = Y OFFSET',/,
     &              '     20  ZOFF   = Z OFFSET',/,
     &              '     21  SCALE  = SCALE',/)
             RETURN
           ENDIF

C          GET HEADER VALUES FOR LOCATIONS CONTAINED IN: NUMBER ARRAY
           DO I = 1,NUMT
              CALL GETLAB(LUN,NUMBER(I),1,VALUES(I),IRTFLG)
           ENDDO

C          SET REGISTERS TO HEADER VALUES
           CALL REG_SET_NSELA(NUMT,VALUES,.FALSE.,IRTFLG)

           IF (VERBOSE) THEN
C             ECHO SETTINGS
              CALL REG_GET_SELS(ILIST,29,NGOT,IRTFLG)
              DO I = 1,NUMT
                 IF (MYPID <= 0) THEN
                    CALL REG_GET_NAME(ILIST(I),NAME,LENNAME,IRTFLG)
                    WRITE(NOUT,*) ' ',NAME(1:LENNAME),
     &                            ' SET TO:',VALUES(I)
                 ENDIF
              ENDDO
           ENDIF
        ENDIF

	END


C      ---------------------- FILDAT_MRC ------------------------- MRC

	SUBROUTINE FILDAT_MRC(LUN,NX)

        IMPLICIT NONE

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'
        INCLUDE 'LABLOCK.INC'

        INTEGER           :: LUN,NX

        REAL              :: BUF,VALUES
        INTEGER           :: NUMBER,ILIST
        COMMON /IOBUF/ BUF(NBUFSIZ)
        COMMON         NUMBER(20),VALUES(20),ILIST(20)

        INTEGER           :: NREG,NUMT,ILOW,IHI
        INTEGER           :: IRTFLG,LENNAME,I,NGOT

        CHARACTER(LEN=1)  :: CDUM
        CHARACTER(LEN=80) :: NAME

C       INCLUSION FOR OPTIONAL MPI INITIALIZATION. MAY ALTER MYPID  
        INTEGER         :: MYPID = -1
#include "MPI_INIT.INC"
	   
        IF (MYPID <= 0) THEN
           WRITE(NOUT,446) FMIN,FMAX,AV,SIG
446	   FORMAT(6X,'FMIN= ',G10.3,3X,'FMAX= ',G10.3,3X,
     &                  'AV=   ',G10.3,3X,'SIG=  ',G10.3)

           IF (IANGLE > 0) WRITE(NOUT,447) PHI,THETA,PSI
447        FORMAT(6X,'PHI=  ',G10.3,3X,'THETA=',G10.3,3X,'PSI=',
     &                           G10.3) 

           WRITE(NOUT,448) XOFF,YOFF,ZOFF
448        FORMAT(6X,'XOFF= ',G10.3,3X,'YOFF= ',G10.3,3X,'ZOFF= ',
     &                           G10.3/)

           IF (SCALE .NE. 0) WRITE(NOUT,449) SCALE
449        FORMAT(6X,'SCALE=  ',G10.3)

           IF (KANGLE > 0)   WRITE(NOUT,451) PHI1,THETA1,PSI1
451          FORMAT(6X,'PHI1= ',G10.3,3X,'THETA1=',G10.3,3X,'PSI1=',
     &                           G10.3)
        ENDIF
 

        CALL REG_GET_USED(NREG)

        IF (NREG > 0) THEN
C         REGISTERS SPECIFIED

          NUMT = MIN(NREG,20)
	  ILOW = 1
	  IHI  = 57
          CALL RDPRAI(NUMBER,20,NUMT,ILOW,IHI,
     &        'NUMBER(S) OF HEADER LOCATION TO BE RETRIEVED',
     &        CDUM,IRTFLG)

          IF (NUMBER(1) == 0) THEN
             IF (MYPID <= 0) WRITE(NOUT,900)
900          FORMAT(/,' SOME HEADER POSITIONS WHICH CAN BE RETRIEVED:'
     &              '     20  FMIN   = IMAGE MINIMUM',/,
     &              '     21  FMAX   = IMAGE MAXIMUM',/,
     &              '     22  AVD    = IMAGE AVERAGE',/,
     &              '     55  SIG    = IMAGE STANDARD DEVIATION',/,
     &              '     43  PHI    = TILT ANGLE',/,
     &              '     45  THETA  = TILT ANGLE',/,
     &              '     33  PSI    = TILT ANGLE',/,
     &              '     11  CELLAX = X CELL DIMENSIONS IN ANG.' ,/,
     &              '     12  CELLAY = Y CELL DIMENSIONS IN ANG.' ,/,
     &              '     13  CELLAZ = Z CELL DIMENSIONS IN ANG.' ,/)

c    &              '     19  YOFF   = Y OFFSET',/,
c    &              '     20  ZOFF   = Z OFFSET',/,
c    &              '     21  SCALE  = SCALE',/)
             RETURN
           ENDIF

C          GET HEADER VALUES FOR LOCATIONS CONTAINED IN: NUMBER ARRAY
C          ALL INTERPRETED AS FLOATS !!!!!!!!!!!!!!

           DO I = 1,NUMT
              CALL GETLAB_R_MRC(LUN,NUMBER(I),1,VALUES(I),IRTFLG)
           ENDDO

C          SET REGISTERS TO HEADER VALUES
           CALL REG_SET_NSELA(NUMT,VALUES,.FALSE.,IRTFLG)

           IF (VERBOSE) THEN
C             ECHO SETTINGS
              CALL REG_GET_SELS(ILIST,29,NGOT,IRTFLG)
              DO I = 1,NUMT
                 IF (MYPID <= 0) THEN
                    CALL REG_GET_NAME(ILIST(I),NAME,LENNAME,IRTFLG)
                    WRITE(NOUT,*) ' ',NAME(1:LENNAME),
     &                            ' SET TO:',VALUES(I)
                 ENDIF
              ENDDO
           ENDIF
        ENDIF

	END


@


1.26
log
@mrc_support
@
text
@d148 1
a148 1
              CALL GETLAB(LUN,NX,BUF,NUMBER(I),1,VALUES(I),IRTFLG)
@


1.25
log
@email_health_dept
@
text
@d1 8
a8 1
C++*********************************************************************
a9 5
C FILDAT.F                     CREATED DEC 87 al
C                              USED REG_     AUG 00 ARDEAN LEITH
C                              IF (VERBOSE) JULY 01 ARDEAN LEITH
C                              MPI USE      NOV  05 ARDEAN LEITH
C                              [] registers NOV  05 ARDEAN LEITH
d14 1
a14 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d32 1
a32 1
C    FILDAT(LUN,NSAM)
d35 1
d41 20
a60 20
C                          7  FMAXD = IMAGE MAXIMUM
C                          8  FMIND = IMAGE MINIMUM
C			   9  AVD   = IMAGE AVERAGE
C                         10  SIG   = STANDARD DEVIATION (SQ. ROOT OF VARIANCE)
C                         11  IHIST = UNUSED
C                         14  IANGLE= FLAG INDICATING THAT TILT ANGLES STORED
C                         15  PHI   = TILT ANGLE
C                         16  THETA = TILT ANGLE
C                         17  PSI   = TILT ANGLE
C                         18  XOFF  = X OFFSET
C                         19  YOFF  = Y OFFSET
C                         20  ZOFF  = Z OFFSET
C                         21  SCALE = SCALE
C                         30  KANGLE= FLAG INDICATING THAT MORE ANGLES STORED
C                         31  PHI2  = PHI OF SECOND EULER ROTATION
C                         32  THETA2= THETA OF SECOND EULER ROTATION
C                         33  PSI2  = PSI OF SECOND EULER ROTATION
C                         34  PHI1  = PHI OF FIRST EULER ROTATION
C                         35  THETA1= THETA OF FIRST EULER ROTATION
C                         36  PSI1  = PSI OF FIRST EULER ROTATION
d64 3
a66 1
	   SUBROUTINE FILDAT(LUN,NSAM)
d69 1
a70 1
           INCLUDE 'CMLIMIT.INC'
d72 4
d79 3
d85 6
a90 10
#ifdef USE_MPI
           INCLUDE 'mpif.h'
           INTEGER MYPID, COMM, IERR
           COMM = MPI_COMM_WORLD
           CALL MPI_COMM_RANK(COMM, MYPID, IERR)
#else
           MYPID = -1
#endif
	   
           IF (MYPID .LE. 0) THEN
d95 1
a95 1
              IF (IANGLE .GT. 0) WRITE(NOUT,447)PHI,THETA,PSI
d106 1
a106 1
              IF (KANGLE .GT. 0) WRITE(NOUT,450) PHI2,THETA2,PSI2
d110 1
a110 1
              IF (KANGLE .EQ. 2) WRITE(NOUT,451) PHI1,THETA1,PSI1
d118 1
a118 1
        IF (NREG .GT. 0) THEN
d128 2
a129 2
          IF (NUMBER(1) .EQ. 0) THEN
             IF (MYPID .LE. 0) WRITE(NOUT,900)
d148 108
a255 1
              CALL GETLAB(LUN,NSAM,BUF,NUMBER(I),1,VALUES(I),IRTFLG)
d265 1
a265 1
                 IF (MYPID .LE. 0) THEN
a273 1
        RETURN
d275 2
@


1.24
log
@removed enter from prompt
@
text
@d14 1
a14 1
C=* Email: spider@@wadsworth.org                                        *
@


1.23
log
@GPL_2010
@
text
@d117 1
a117 1
     &        'ENTER NUMBER(S) OF HEADER LOCATION TO BE RETRIEVED',
@


1.22
log
@output OK but mangled bug
@
text
@a8 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d10 5
a14 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d16 1
a16 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.21
log
@native named registers
@
text
@d155 1
a155 2
                    CALL REG_GET_NAME(ILIST(I),NAME,IRTFLG)
                    LENNAME = LNBLNK(NAME)
@


1.20
log
@named register support
@
text
@d7 1
a7 1
C
d72 1
a72 1
           COMMON        NUMBER(20),VALUES(20),ILIST(20)
d74 2
a75 1
           CHARACTER * 1 CDUM
d148 1
a148 1
           CALL REG_SET_NSELA(NUMT,VALUES,IRTFLG)
d152 1
a152 1
              CALL REG_GET_LIST(NGOT,ILIST,IRTFLG)
d155 3
a157 1
                    WRITE(NOUT,*) 'REGISTER: ',ILIST(I)-1,
@


1.19
log
@GPL License fixed
@
text
@d6 2
d85 1
a85 2
#ifdef USE_MPI
           IF (MYPID .EQ. 0) THEN
d87 2
a88 6
           ENDIF
#else
           WRITE(NOUT,446) FMIN,FMAX,AV,SIG
#endif
446	   FORMAT(6X,'FMIN= ',G10.3,3X,'FMAX= ',G10.3,3X,
     &        'AV=   ',G10.3,3X,'SIG=  ',G10.3)
a89 2
#ifdef USE_MPI
           IF (MYPID .EQ. 0) THEN
d91 2
a92 6
           ENDIF
#else
           IF (IANGLE .GT. 0) WRITE(NOUT,447)PHI,THETA,PSI
#endif
447        FORMAT(6X,'PHI=  ',G10.3,3X,'THETA=',G10.3,3X,'PSI=',
     &        G10.3) 
a93 2
#ifdef USE_MPI
           IF (MYPID .EQ. 0) THEN
d95 2
a96 6
           ENDIF
#else
           WRITE(NOUT,448) XOFF,YOFF,ZOFF
#endif
448        FORMAT(6X,'XOFF= ',G10.3,3X,'YOFF= ',G10.3,3X,'ZOFF= ',
     &        G10.3/)
a97 2
#ifdef USE_MPI
           IF (MYPID .EQ. 0) THEN
d99 1
a99 5
           ENDIF
#else
           IF (SCALE .NE. 0) WRITE(NOUT,449) SCALE
#endif
449        FORMAT(6X,'SCALE=  ',G10.3)
a100 2
#ifdef USE_MPI
           IF (MYPID .EQ. 0) THEN
d102 3
a104 9
           ENDIF
#else
           IF (KANGLE .GT. 0) WRITE(NOUT,450) PHI2,THETA2,PSI2
#endif
450        FORMAT(6X,'PHI2= ',G10.3,3X,'THETA2=',G10.3,3X,'PSI2=',
     &        G10.3) 

#ifdef USE_MPI
           IF (MYPID .EQ. 0) THEN
d106 4
a109 6
           ENDIF
#else
           IF (KANGLE .EQ. 2) WRITE(NOUT,451) PHI1,THETA1,PSI1
#endif
451        FORMAT(6X,'PHI1= ',G10.3,3X,'THETA1=',G10.3,3X,'PSI1=',
     &        G10.3) 
d124 1
a124 7
#ifdef USE_MPI
             IF (MYPID .EQ. 0) THEN
                WRITE(NOUT,900)
             ENDIF
#else
             WRITE(NOUT,900)
#endif
d153 1
a153 2
#ifdef USE_MPI
                 IF (MYPID .EQ. 0) THEN
a156 4
#else
                 WRITE(NOUT,*) 'REGISTER: ',ILIST(I)-1,
     &                         ' SET TO:',VALUES(I)
#endif
@


1.18
log
@HRI GPL License used
@
text
@a1 1
C++*************************************************************************
a6 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
a30 1
C **************************************************************************
a61 1
C--*************************************************************************
@


1.17
log
@mpi
@
text
@d1 1
d7 1
d9 1
d11 24
d41 1
d73 1
@


1.16
log
@verbose added
@
text
@d57 15
a71 1
	
d73 1
d77 5
d83 1
d87 5
d93 1
d97 5
d103 1
d106 5
d112 1
d116 5
d122 1
d139 5
d145 1
d174 6
d182 1
@


1.15
log
@bad reg. number (have now decremented by one)
@
text
@d4 2
a5 2
C                              USED REG_, AUG 00 ARDEAN LEITH
C
d90 2
a91 2
     $        'ENTER NUMBER(S) OF HEADER LOCATION TO BE RETRIEVED',
     $        CDUM,IRTFLG)
d110 1
d119 8
a126 5
C          ECHO SETTINGS
           CALL REG_GET_LIST(NGOT,ILIST,IRTFLG)
           DO I = 1,NUMT
              WRITE(NOUT,*) 'REGISTER: ',ILIST(I)-1,' SET TO:',VALUES(I)
           ENDDO
@


1.14
log
@attempted to fix register number bug: writes reg n+1, not reg n"[D[D[D
@
text
@d121 1
a121 1
              WRITE(NOUT,*) 'REGISTER: ',ILIST(I),' SET TO:',VALUES(I)
@


1.13
log
@used reg_set
@
text
@d121 1
a121 1
              WRITE(NOUT,*) 'REGISTER: ',ILIST(i),' SET TO:',VALUES(I)
@


1.12
log
@a
@
text
@d3 2
a4 1
C FILDAT.FOR -- CREATED DEC 87 al
a48 2
 

d51 4
a55 4
           COMMON        ADUM(80),BUF(1)
           DIMENSION     VALUE(1)
           INTEGER       NUMBER(20)
	   INTEGER       ILOW,IHI,IRTFLG
a57 2
           PARAMETER (PI=3.14159)

d81 3
a83 1
        IF (NSEL(1) .GT. 0) THEN
d86 1
a86 1
          NUMT = 20
d93 2
a94 1
          IF (NUMBER(1) .EQ. 0) WRITE(NOUT,900)
d108 15
a122 17

          DO I = 1,NUMT
             NPAR  = NSEL(I)
             IBUF1 = NUMBER(I)
             IF (IBUF1 .NE. 0 .AND.
     &           NPAR .GE. 1 .AND. NPAR .LE. 103) THEN
C               PLACE A HEADER VALUE INTO PARAMETER(NPAR)

                CALL GETLAB(LUN,NSAM,BUF,IBUF1,1,VALUE,IRTFLG)
                IF (IRTFLG .EQ. 0) THEN      
                   PARAM(NPAR) = VALUE(1)
                   NPM1 = NPAR - 1
                   WRITE(NOUT,*) 'PARAMETER: ',NPM1,' SET TO:',VALUE
                ENDIF
             ENDIF
          ENDDO
          WRITE(NOUT,*) ' '
@


1.11
log
@CNO_SAVE
@
text
@d48 1
a48 1
CNO_SAVE 
@


1.10
log
@used g format for output
@
text
@d48 2
@


1.9
log
@removed unused NULL
@
text
@d3 1
a3 1
C    FILDAT.FOR -- CREATED DEC 87 al
d60 2
a61 2
446	   FORMAT(6X,'FMIN= ',F10.3,3X,'FMAX= ',F10.3,3X,
     &        'AV=   ',F10.3,3X,'SIG=  ',F10.3)
d64 2
a65 2
447        FORMAT(6X,'PHI=  ',F10.3,3X,'THETA=',F10.3,3X,'PSI=',
     &        F10.3) 
d68 2
a69 2
448        FORMAT(6X,'XOFF= ',F10.3,3X,'YOFF= ',F10.3,3X,'ZOFF= ',
     &        F10.3/)
d72 1
a72 1
449        FORMAT(6X,'SCALE=  ',F10.3)
d75 2
a76 2
450        FORMAT(6X,'PHI2= ',F10.3,3X,'THETA2=',F10.3,3X,'PSI2=',
     &        F10.3) 
d79 2
a80 2
451        FORMAT(6X,'PHI1= ',F10.3,3X,'THETA1=',F10.3,3X,'PSI1=',
     &        F10.3) 
d89 1
a89 1
     $        '.ENTER NUMBER(S) OF HEADER LOCATION TO BE RETRIEVED:',
a91 1
C
@


1.8
log
@ no more short label code
@
text
@d55 1
a55 1
           CHARACTER * 1 NULL,CDUM
@


1.7
log
@merged vax and unix code
@
text
@d21 1
a21 1
C    NOTE:   THE LABEL RECORD(S) OF THE FILE CONTAINS THE FOLLOWING 
d27 1
a27 3
C                         11  IHIST = FLAG INDICATING THAT HISTOGRAM HAS
C                                     BEEN COMPUTED, AND STORED IN RECORDS
C                                     LABREC+NROW+1 ETC.
d46 1
a46 1
	SUBROUTINE FILDAT(LUN,NSAM)
d48 2
a49 2
        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'LABLOCK.INC'
d51 5
a55 6
        COMMON        /LUNARA/ LUNARA(100),LASLAB
        COMMON        ADUM(80),BUF(1)
        DIMENSION     VALUE(1)
        INTEGER       NUMBER(20)
	INTEGER       ILOW,IHI,IRTFLG
        CHARACTER * 1 NULL,CDUM
d57 1
a57 1
        PARAMETER (PI=3.14159)
a58 23
C       CHECK LABEL FORMAT

#ifdef SP_VMS

        IF (LASLAB .EQ. 0) THEN
C          SHORT LABEL FORMAT FILE
           IF (IFORM .LT. 0) THEN
C             FOURIER FILE HAD ANGLES IN FMIN, FMAX, ETC.
              PHID = PHI * 180.0 / PI
              THETAD = THETA * 180.0 / PI
              WRITE(NOUT,444) PHID,THETAD,SCALE
444           FORMAT(' SHORT LABEL:  PHID=  ',F10.3,3X,'THETAD=',
     &                 F10.3,3X,'SCALE=   ',F10.3)
           ELSE
C             REGULAR IMAGE FILE
              WRITE(NOUT,46) FMIN,FMAX,AV,SIG
46	      FORMAT(' SHORT LABEL    FMIN=',F10.3,2X,'FMAX=',F10.3,2X,
     &        'AV=',F10.3,2X,'SIG=',F10.3/)
           ENDIF

        ELSE
#endif
C          LONG LABEL FORMAT FILE
a81 4
#ifdef SP_VMS
        ENDIF
#endif

d89 1
a89 1
     $        '.ENTER NUMBER(S) OF LABEL LOCATION TO BE RETRIEVED:',
d94 1
a94 1
900          FORMAT(/,' SOME LABEL POSITIONS WHICH CAN BE RETRIEVED:'
a98 1
     &              '     11  IHIST  = HISTOGRAM STORED FLAG',/,
a107 1

d113 1
a113 1
C               PLACE A LABEL VALUE INTO PARAMETER(NPAR)
d119 1
a119 1
                   WRITE(NOUT,*) ' PARAMETER: ',NPM1,' SET TO:',VALUE
@


1.6
log
@increase number to 20 and range to 256
@
text
@a47 2
#ifdef SP_VMS

d50 2
a51 2
        INCLUDE 'COMMON1:CMBLOCK.INC'
        INCLUDE 'COMMON1:LABLOCK.INC'
d53 2
a54 2
        COMMON /LUNARA/ LUNARA(100),LASLAB
        COMMON  ADUM(80),BUF(1)
d64 2
d83 1
d87 2
a88 1
     &     'AV=   ',F10.3,3X,'SIG=  ',F10.3)
d90 3
a92 2
447	   FORMAT(6X,'PHI=  ',F10.3,3X,'THETA=',F10.3,3X,'PSI=',
     &     F10.3) 
d95 2
a96 1
     &     F10.3/)
d99 2
a100 1
           IF(KANGLE.GT.0) WRITE(NOUT,450) PHI2,THETA2,PSI2
d102 3
a104 2
     &     F10.3) 
           IF(KANGLE.EQ.2) WRITE(NOUT,451) PHI1,THETA1,PSI1
d106 3
a108 1
     &     F10.3) 
d110 1
a113 90
C 	replace all this by a call to rdprai
C          WRITE(NOUT,161)
C161	  FORMAT($,
C     &    ' .ENTER NUMBER(S) OF LABEL LOCATION TO BE RETRIEVED: ')
C          NSW=1
C          CALL GETNUM(NUMBER,10,NUMT,IDONE,NSW)

        NUMT = 20
	ILOW = 1
	IHI = 256
        CALL RDPRAI(NUMBER,20,NUMT,ILOW,IHI,
     $        '.ENTER NUMBER(S) OF LABEL LOCATION TO BE RETRIEVED:',
     $        CDUM,IRTFLG)

C
          IF (NUMBER(1) .EQ. 0) WRITE(NOUT,900)
900          FORMAT(/,' SOME LABEL POSITIONS WHICH CAN BE RETRIEVED:'
     &           ,/,'      7  FMAX   = IMAGE MAXIMUM',/,
     &              '      8  FMIN   = IMAGE MINIMUM',/,
     &              '      9  AVD    = IMAGE AVERAGE',/,
     &              '     10  SIG    = IMAGE STANDARD DEVIATION',/,
     &              '     11  IHIST  = HISTOGRAM STORED FLAG',/,
     &              '     14  IANGLE = TILT ANGLES STORED FLAG',/,
     &              '     15  PHI    = TILT ANGLE',/,
     &              '     16  THETA  = TILT ANGLE',/,
     &              '     17  PSI    = TILT ANGLE',/,
     &              '     18  XOFF   = X OFFSET',/,
     &              '     19  YOFF   = Y OFFSET',/,
     &              '     20  ZOFF   = Z OFFSET',/,
     &              '     21  SCALE  = SCALE',/)


          DO 10 I= 1,NUMT
            NPAR = NSEL(I)
            IBUF1 = NUMBER(I)

            IF (IBUF1 .EQ. 0) GOTO  10

            IF (NPAR .GE. 1 .AND. NPAR .LE. 103) THEN
C             PLACE A LABEL VALUE INTO PARAMETER(NPAR)

              CALL GETLAB(LUN,NSAM,BUF,IBUF1,1,VALUE,IRTFLG)
              IF (IRTFLG .EQ. 0) THEN      
                PARAM(NPAR) = VALUE(1)
                NPM1 = NPAR - 1
                WRITE(NOUT,*) ' PARAMETER:',NPM1,' SET TO:',VALUE
              ENDIF
            ENDIF
10        CONTINUE
          WRITE(NOUT,*) ' '
        ENDIF
	END
	
#else

	SUBROUTINE FILDAT(LUN,NSAM)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'LABLOCK.INC'

        COMMON /LUNARA/ LUNARA(100),LASLAB
        COMMON  ADUM(80),BUF(1)
        DIMENSION     VALUE(1)
        INTEGER       NUMBER(20)
	INTEGER       ILOW,IHI,IRTFLG
        CHARACTER * 1 NULL,CDUM
        PARAMETER (PI=3.14159)

        WRITE(NOUT,446) FMIN,FMAX,AV,SIG
446	FORMAT(6X,'FMIN= ',F10.3,3X,'FMAX= ',F10.3,3X,
     &     'AV=   ',F10.3,3X,'SIG=  ',F10.3)

        IF (IANGLE .GT. 0) WRITE(NOUT,447)PHI,THETA,PSI
447     FORMAT(6X,'PHI=  ',F10.3,3X,'THETA=',F10.3,3X,'PSI=',
     &     F10.3) 

        WRITE(NOUT,448) XOFF,YOFF,ZOFF
448     FORMAT(6X,'XOFF= ',F10.3,3X,'YOFF= ',F10.3,3X,'ZOFF= ',
     &     F10.3/)

        IF (SCALE .NE. 0) WRITE(NOUT,449) SCALE
449     FORMAT(6X,'SCALE=  ',F10.3)

        IF (KANGLE .GT. 0) WRITE(NOUT,450) PHI2,THETA2,PSI2
450     FORMAT(6X,'PHI2= ',F10.3,3X,'THETA2=',F10.3,3X,'PSI2=',
     &     F10.3) 

        IF (KANGLE .EQ. 2) WRITE(NOUT,451) PHI1,THETA1,PSI1
451     FORMAT(6X,'PHI1= ',F10.3,3X,'THETA1=',F10.3,3X,'PSI1=',
     &     F10.3) 
d115 4
a118 14

        IF (NSEL(1) .GT. 0) THEN
C         REGISTERS SPECIFIED
C 	replace all this by a call to rdprai
C          WRITE(NOUT,161)
C161	  FORMAT($,
C     &    ' .ENTER NUMBER(S) OF LABEL LOCATION TO BE RETRIEVED: ')
C          NSW=1
C          CALL GETNUM(NUMBER,10,NUMT,IDONE,NSW)

        NUMT = 20
	ILOW = 1
	IHI = 256
        CALL RDPRAI(NUMBER,20,NUMT,ILOW,IHI,
d140 15
a154 18

          DO 10 I= 1,NUMT
            NPAR = NSEL(I)
            IBUF1 = NUMBER(I)

            IF (IBUF1 .EQ. 0) GOTO  10

            IF (NPAR .GE. 1 .AND. NPAR .LE. 103) THEN
C             PLACE A LABEL VALUE INTO PARAMETER(NPAR)

              CALL GETLAB(LUN,NSAM,BUF,IBUF1,1,VALUE,IRTFLG)
              IF (IRTFLG .EQ. 0) THEN      
                PARAM(NPAR) = VALUE(1)
                NPM1 = NPAR - 1
                WRITE(NOUT,*) ' PARAMETER:',NPM1,' SET TO:',VALUE
              ENDIF
            ENDIF
10        CONTINUE
a159 1
#endif
@


1.5
log
@replace GETNUM by RDPRAI call
@
text
@d58 1
a58 1
        INTEGER       NUMBER(10)
d112 4
a115 4
        NUMT = 10
	ILOW = 0
	IHI = 10
        CALL RDPRAI(NUMBER,10,NUMT,ILOW,IHI,
d168 1
a168 1
        INTEGER       NUMBER(10)
d206 4
a209 4
        NUMT = 10
	ILOW = 0
	IHI = 10
        CALL RDPRAI(NUMBER,10,NUMT,ILOW,IHI,
@


1.4
log
@added () in PARAMETER STATEMENT
@
text
@d57 5
a61 4

        DIMENSION   VALUE(1)
        INTEGER     NUMBER(10)

d105 16
a120 6
          WRITE(NOUT,161)
161	  FORMAT($,
     &    ' .ENTER NUMBER(S) OF LABEL LOCATION TO BE RETRIEVED: ')
          NSW=1
          CALL GETNUM(NUMBER,10,NUMT,IDONE,NSW)
            IF (NUMBER(1) .EQ. 0) WRITE(NOUT,900)
a136 1

d157 1
a157 4




d167 4
a170 4

        DIMENSION   VALUE(1)
        INTEGER     NUMBER(10)

d199 16
a214 6
          WRITE(NOUT,161)
161	  FORMAT($,
     &    ' .ENTER NUMBER(S) OF LABEL LOCATION TO BE RETRIEVED: ')
          NSW=1
          CALL GETNUM(NUMBER,10,NUMT,IDONE,NSW)
            IF (NUMBER(1) .EQ. 0) WRITE(NOUT,900)
@


1.3
log
@fixed VMS
@
text
@d3 1
a3 1
C $$ FILDAT.FOR -- CREATED DEC 87 al
d15 1
a15 1
C $$ FILDAT(LUN,NSAM)
d61 1
a61 1
        PARAMETER PI=3.14159
d164 1
a164 1
        PARAMETER PI=3.14159
@


1.2
log
@cpp_lines_added
@
text
@a0 1
#ifdef VMS
d48 2
a51 3
#ifdef SP_UNIX
        INCLUDE 'CMBLOCK.INC'
#else
a52 4
#endif
#ifdef SP_UNIX
        INCLUDE 'LABLOCK.INC'
#else
a53 1
#endif
d147 4
a154 1
#ifdef SP_UNIX
a155 4
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
#ifdef SP_UNIX
a156 3
#else
        INCLUDE 'COMMON1:LABLOCK.INC'
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
d51 3
d55 4
d60 1
d154 95
@
