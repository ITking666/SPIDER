head	1.28;
access;
symbols
	healthdept_2018:1.28
	pre_getangas:1.23
	GPL2010:1.23
	pre_GPL2010:1.22
	pre_var_equation:1.22
	pre_fftwrings:1.22
	pre_opfiles:1.22
	src:1.22
	best-code:1.22
	x-named-regs:1.22
	x:1.22
	v13-00:1.22
	pre_GPL:1.21
	prec_CA:1.21
	noindx:1.21
	Bproc:1.20
	oct21:1.20
	last77:1.19;
locks; strict;
comment	@c @;


1.28
date	2018.10.03.14.34.03;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2014.07.30.13.19.28;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2014.07.30.13.17.20;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2014.01.12.19.50.44;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2014.01.06.18.12.43;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.24.13.25.18;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.17.20.56.47;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2002.03.11.14.08.53;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	99.09.09.12.45.47;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	99.03.15.18.57.57;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	97.11.05.19.01.26;	author liy;	state Exp;
branches;
next	1.17;

1.17
date	97.09.05.19.51.44;	author liy;	state Exp;
branches;
next	1.16;

1.16
date	97.07.30.15.26.32;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	96.09.27.20.42.06;	author liy;	state Exp;
branches;
next	1.14;

1.14
date	96.04.12.18.45.31;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	96.04.12.18.44.11;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	96.03.20.16.37.32;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	95.10.03.14.10.30;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	95.04.24.21.05.54;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	95.04.24.13.52.42;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	95.03.16.19.02.37;	author mladjadj;	state Exp;
branches;
next	1.7;

1.7
date	95.03.08.10.37.17;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	95.03.08.09.58.16;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	95.03.06.15.33.18;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	95.03.03.18.24.20;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	94.08.29.19.16.46;	author odesanya;	state Exp;
branches;
next	1.2;

1.2
date	94.08.29.18.06.13;	author odesanya;	state Exp;
branches;
next	1.1;

1.1
date	94.08.29.15.54.45;	author odesanya;	state Exp;
branches;
next	;


desc
@file to convert spider volumes to BRIX format
@


1.28
log
@email_health_dept
@
text
@
C ++********************************************************************
C
C COPYBRIX
C                   MAXNAM                         JUL 14 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C 
C COPYBRIX(LUN1,LUN2,NX,NY,NZ)
C
C PURPOSE: CONVERTS 3D SPIDER IMAGES FOR INPUT DIRECTLY TO 'O' FORMAT
C          COMPATIBLE WITH 'O' VERSION 5.10.  JF 3/14/95
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C **********************************************************************

        SUBROUTINE COPYBRIX(LUN1,LUN2,NX,NY,NZ)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        COMMON /IOBUF/  BUF(NBUFSIZ)

        INTEGER               :: EXTENT(3),ORIGIN(3),GRID(3),PLUS,ERRCOD
        INTEGER               :: XYZBRIX(3)
        REAL                  :: CELL(6), PROD, SIGMA, GINT

        CHARACTER(LEN=MAXNAM) :: FILNAM
        CHARACTER(LEN=1)      :: NULL = CHAR(0)
        CHARACTER(LEN=1)      :: ANS 

	IF (IMAMI .NE. 1) CALL NORM3(LUN1,NX,NY,NZ,FMAX,FMIN,AV)
        NPT = NX*NY*NZ

C       OPEN BRIX FILE
        CALL OPAUXFILE(.TRUE.,FILNAM,NULL,LUN2,512,'N',
     &                       'BRIX OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 999

        CALL RDPRM(GINT,NOT_USED,'SAMPLING DISTANCE')

        CALL RDPRMC(ANS,NCHAR,.TRUE.,
     &     'DEFAULT UNIT CELL IS NX,NY,NZ. OVERWRITE (Y/N)?',
     &     NULL,IRTFLG)

C       PREPARE PARAMETERS FOR HEADER

        ORIGIN(1) = -NX/2
        ORIGIN(2) = -NY/2
	IF (MOD(NZ,2) .EQ. 0) THEN
	   ORIGIN(3) =  -NZ/2+1
	ELSE
           ORIGIN(3) = -NZ/2
	ENDIF

        EXTENT(1) = NX 
        EXTENT(2) = NY 
        EXTENT(3) = NZ

        CELL(1)   = EXTENT(1) * GINT
        CELL(2)   = EXTENT(2) * GINT
        CELL(3)   = EXTENT(3) * GINT
        DO I =4,6
          CELL(I) = 90.0
        ENDDO

        GRID(1)   = NX
        GRID(2)   = NY
        GRID(3)   = NZ

C       ALL DATA WILL BE RESCALED TO 1000, BECAUSE OF THE
C       FAILURE OF O TO READ IN CONTOUR LEVEL SPECIFICATIONS INVOLVING
C       DIGITS BEHIND THE DECIMAL POINT.

        FMAX  = FMAX*1000.
        FMIN  = FMIN*1000.
        PROD  = 255./(FMAX-FMIN)
        PLUS  = -FMIN*PROD
        SIGMA = SIG* 1000.

        IF (ANS.NE.'N' .AND. ANS.NE.'n') THEN
C          CALL RDPRMI(NX,NY,NOT_USED,'UNIT CELL DIMS (X,Y)')
C          CALL RDPRMI(NZ,NDUM,NOT_USED,'UNIT CELL DIMS (Z)')
           CALL RDPRI3S(NX,NY,NZ,NOT_USED,
     &                 'UNIT CELL DIMS (X,Y,Z)',IRTFLG)
           IF (IRTFLG .EQ. -1) THEN
              CLOSE (LUN1)
              RETURN
           ENDIF

          CELL(1) = NX* GINT
          CELL(2) = NY* GINT
          CELL(3) = NZ* GINT
        ENDIF 

        DO I=1,3
           XYZBRIX(I) = EXTENT(I)/8
           IF(MOD(EXTENT(I),8) .GE. 1) XYZBRIX(I) = XYZBRIX(I) +1
        ENDDO

C       SET FORMAT SWITCH TO "NEW"
        CALL PAGED_FORMAT('NEW')

C       NOW WRITE HEADER
        CALL PAGEDHDR(LUN2, ORIGIN, EXTENT, GRID, CELL, 
     &               SIGMA, PROD, PLUS, ERRCOD)
        IF (ERRCOD .NE. 0) THEN
            WRITE (NOUT,*)  '*** ERROR WRITING BRIX HEADER'
            CALL ERRT(100,'COPYBRIX',NE)
        ENDIF

C       NOW READ SPIDER VOLUME AND RECORD IN BRIX FILE
C       READ UPSIDE DOWN TO CORRECT HANDEDNESS FLIP
        INUM = 1
        DO ISEC = 1, NZ
           IRECO = (NZ-ISEC)*NY
	   DO J = 1,NY
              ISTART = (J-1) * NX + 1
              CALL REDLIN(LUN1, BUF(ISTART), NX, IRECO+J)
              DO I = 1,NX
                 BUF(ISTART+I-1) = (BUF(ISTART+I-1)*1000.-FMIN) * PROD
              ENDDO
           ENDDO

           CALL PAGED (LUN2, BUF(1), BUF(NX*NY+1),
     &        NX, NY, XYZBRIX(1), XYZBRIX(2), ISEC, INUM, ERRCOD)

           IF (ERRCOD .NE. 0) THEN
              WRITE (NOUT,*)  '*** ERROR WRITING BRICK'
              CALL ERRT(100,'COPYBRIX',NE)
           ENDIF
        ENDDO
C       END ISEC LOOP OVER SLICES

        ISEC = 0
        CALL PAGED (LUN2, BUF(1), BUF(NX*NY+1),
     &     NX, NY, XYZBRIX(1), XYZBRIX(2), ISEC, INUM, ERRCOD)

999     CLOSE (LUN1)
        CLOSE (LUN2)

        END


C=======================================================================

C WRITTEN BY MORTEN KJELDGAARD, NOV 1993.
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

      SUBROUTINE PAGEDHDR (OLUN, ORIGIN, EXTENT, GRID, CELL, 
     $                    SIGMA, PROD, PLUS, ERRCOD)

#ifndef SP_SUN4
      IMPLICIT     NONE
#endif

C     I DO NOT KNOW IF SAVE IS NEEDED FEB 99 al
      SAVE

      INTEGER  OLUN, ORIGIN(3), EXTENT(3), GRID(3), PLUS, ERRCOD
      REAL     CELL(6), PROD, SIGMA
      COMMON /PAGEDC/ FMT
      CHARACTER*4  FMT
      CHARACTER    STR*512

C     FOR OLD FORMAT
      INTEGER*2 FIRST(256)               
      INTEGER   I1, I2, I                  

      IF (FMT .EQ. 'OLD') THEN
C ---   FILL UP FIRST RECORD
         I1 = 80
         I2 = 100
         DO  I=1,3
            FIRST(I  ) = ORIGIN(I)
            FIRST(I+3) = EXTENT(I)
            FIRST(I+6) = GRID(I)
            FIRST(I+9) = I1*CELL(I)
            FIRST(I+12)= I1*CELL(I+3)
	 ENDDO
         FIRST(16) = I2*PROD
         FIRST(17) = PLUS
         FIRST(18) = I1
         FIRST(19) = I2
         DO  I=20,256
            FIRST(I) = 0
	 ENDDO

         WRITE (OLUN, REC=1, IOSTAT=ERRCOD) FIRST

      ELSE
         WRITE (STR, 10) ORIGIN, EXTENT, GRID, CELL, PROD, PLUS, SIGMA

 10      FORMAT (':-) ORIGIN', 3I5,' EXTENT', 3I5, ' GRID', 3I5,
     &        ' CELL ', 6F10.3, ' PROD', F12.5, ' PLUS',I8, 
     &        ' SIGMA ', F12.5)
      
         WRITE (OLUN, REC=1, IOSTAT=ERRCOD) STR

      ENDIF
      RETURN
      END



C=======================================================================
        SUBROUTINE PAGED_FORMAT (STR)
#ifndef SP_SUN4
      IMPLICIT     NONE
#endif
        CHARACTER*(*) STR
        COMMON /PAGEDC/ FMT
        CHARACTER*4 FMT

        IF (STR == 'OLD') THEN
           FMT = 'OLD'
        ELSE
           FMT = 'NEW'
        ENDIF
        END

C=======================================================================
        SUBROUTINE BYTSWP (REC)
#ifndef SP_SUN4
      IMPLICIT     NONE
#endif
        LOGICAL * 1 REC(2,256)
        LOGICAL * 1 ONE
        INTEGER     I

        DO  I=1,256
          ONE      = REC (1,I)
          REC(1,I) = REC(2,I)
          REC(2,I) = ONE
	ENDDO
        RETURN
        END


C A new level of density, store it and if necessary, write it out as 
C 3-d non-overlapping boxes of 8*8*8 values
C Original logic by Alwyn Jones, a long time ago.
C Modified as library routine, new brick format, Morten Kjeldgaard, Nov 1993
c=======================================================================

      SUBROUTINE PAGED (OLUN, RHOSEC, SLICES, IX, IY, NX, NY, 
     &                  ILEV, INUM, ERR)

#ifndef SP_SUN4
      IMPLICIT     NONE
#endif

C     I DO NOT KNOW IF SAVE IS NEEDED FEB 99 al
      SAVE

      INTEGER      OLUN, IX, IY, NX, NY, ERR
      REAL         RHOSEC(IY, IX), SLICES(8,IX*IY)

      COMMON      /PAGEDC/ FMT
      CHARACTER*4 FMT

      INTEGER     I, ICT, I1, ILEV, J, JCT, J1, J2, J3, K, K1, K2, K3 
      INTEGER     VALUE, INUM
      CHARACTER*1 RECORD(512)
      INTEGER*2   IREC(256)
      EQUIVALENCE (RECORD, IREC) 

      ERR = 0

      I1  = MOD (ILEV,8)
      IF (I1 .EQ. 0) I1 = 8
      ICT = 0

      IF (ILEV .NE. 0) THEN
         DO I=1,IY
            DO J=1,IX
               ICT = ICT+1
               SLICES(I1,ICT) = RHOSEC(I,J)
            ENDDO
         ENDDO
      ENDIF

C     PICK OUT OUR NON-OVERLAPPING BRICKS?
      IF (I1 .NE. 8 .AND. ILEV .NE. 0) RETURN

      VALUE = 0
C     LOOP OVER POSSIBLE Y-PAGES
      DO J=1,NY
         J1 = (J-1)*8+1
         J2 =   J  *8

C        LOOP OVER POSSIBLE X-PAGES
         DO K=1,NX
            K1 = (K-1)*8+1
            K2 =   K  *8
            ICT = 0

C           LOOP OVER Z-LEVELS
            DO I=1,8

C              LOOP OVER Y-INDECES OF CURRENT PAGE
               DO J3=J1,J2
                  JCT = (J3-1)*IX+K1-1

C                 LOOP OVER X-INDECES OF CURRENT PAGE
                  DO K3=K1,K2
                     ICT = ICT+1
                     JCT = JCT+1

C                    IF EITHER DIRECTION OVER EDGE, PACK RECORD
                     IF (J3 .GT. IY  .OR.  K3 .GT. IX 
     $                    .OR. I .GT. I1)  THEN
                        RECORD(ICT) = CHAR(0)
                     ELSE
                        RECORD(ICT) = CHAR(INT(SLICES(I,JCT)))
                     END IF
                  ENDDO
               ENDDO
            ENDDO

            INUM = INUM+1

            IF (FMT .EQ. 'OLD') THEN
               CALL BYTSWP (IREC)
               WRITE (OLUN, REC=INUM, IOSTAT=ERR) IREC
            ELSE
               WRITE (OLUN, REC=INUM, IOSTAT=ERR) RECORD
            ENDIF

         ENDDO
      ENDDO

      RETURN
      END



@


1.27
log
@COMMON /IOBUF
@
text
@d13 1
a13 1
C=* Email: spider@@wadsworth.org                                        *
@


1.26
log
@LEN=MAXNAM
@
text
@d42 1
a42 1
        COMMON          BUF(20000)
@


1.25
log
@enter
@
text
@d5 1
d29 4
a32 2
C PURPOSE: CONVERTS 3D SPIDER IMAGES FOR INPUT DIRECTLY TO O.
C          COMPATIBLE WITH O VERSION 5.10.  JF 3/14/95
a33 1
C        0         2         3         4         5         6         7
d40 1
d44 9
a52 12
        INTEGER         EXTENT(3), ORIGIN(3), GRID(3), PLUS, ERRCOD
        INTEGER         XYZBRIX(3)
        REAL            CELL(6), PROD, SIGMA, GINT

        CHARACTER *81   FILNAM
        COMMON /COMMUN/ FILNAM

        CHARACTER*1     ANS,NULL

        NULL  = CHAR(0)
   
	IF (IMAMI.NE.1) CALL NORM3(LUN1,NX,NY,NZ,FMAX,FMIN,AV)
a161 1
        RETURN
@


1.24
log
@nx cosmetic
@
text
@d102 2
a103 2
C          CALL RDPRMI(NX,NY,NOT_USED,'ENTER UNIT CELL DIMS (X,Y)')
C          CALL RDPRMI(NZ,NDUM,NOT_USED,'ENTER UNIT CELL DIMS (Z)')
d105 1
a105 1
     &                 'ENTER UNIT CELL DIMS (X,Y,Z)',IRTFLG)
@


1.23
log
@GPL_2010
@
text
@d10 1
a10 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d35 1
a35 1
        SUBROUTINE COPYBRIX(LUN1,LUN2,NSAM,NROW,NSLICE)
d52 2
a53 2
	IF (IMAMI.NE.1) CALL NORM3(LUN1,NSAM,NROW,NSLICE,FMAX,FMIN,AV)
        NPT = NSAM*NROW*NSLICE
d63 1
a63 1
     &     'DEFAULT UNIT CELL IS NSAM,NROW,NSLICE. OVERWRITE (Y/N)?',
d68 4
a71 4
        ORIGIN(1) = -NSAM/2
        ORIGIN(2) = -NROW/2
	IF (MOD(NSLICE,2).EQ.0) THEN
	   ORIGIN(3) =  -NSLICE/2+1
d73 1
a73 1
           ORIGIN(3) = -NSLICE/2
d76 3
a78 3
        EXTENT(1) = NSAM 
        EXTENT(2) = NROW 
        EXTENT(3) = NSLICE
d87 3
a89 3
        GRID(1)   = NSAM
        GRID(2)   = NROW
        GRID(3)   = NSLICE
d135 6
a140 6
        DO ISEC = 1, NSLICE
           IRECO = (NSLICE-ISEC)*NROW
	   DO J = 1,NROW
              ISTART = (J-1) * NSAM + 1
              CALL REDLIN(LUN1, BUF(ISTART), NSAM, IRECO+J)
              DO I = 1,NSAM
d144 4
a147 2
           CALL PAGED (LUN2, BUF(1), BUF(NSAM*NROW+1),
     &        NSAM, NROW, XYZBRIX(1), XYZBRIX(2), ISEC, INUM, ERRCOD)
d156 2
a157 2
        CALL PAGED (LUN2, BUF(1), BUF(NSAM*NROW+1),
     &     NSAM, NROW, XYZBRIX(1), XYZBRIX(2), ISEC, INUM, ERRCOD)
d236 1
a236 1
        IF (STR .EQ. 'OLD') THEN
@


1.22
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.21
log
@nloop,iloop_removed
@
text
@d7 24
a30 8
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1993, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
d37 1
a37 1
C**************************************************************************
@


1.20
log
@removed terminal null, etc from header record as it causes trouble on DEC
@
text
@d48 1
a48 1
        CALL RDPRM(GINT,NLOOP,ILOOP,'SAMPLING DISTANCE')
d90 3
a92 3
C          CALL RDPRMI(NX,NY,NLOOP,ILOOP,'ENTER UNIT CELL DIMS (X,Y)')
C          CALL RDPRMI(NZ,NDUM,NLOOP,ILOOP,'ENTER UNIT CELL DIMS (Z)')
           CALL RDPRI3S(NX,NY,NZ,NLOOP,ILOOP,
@


1.19
log
@used opauxfile
@
text
@a163 2
CNO_SAVE 

d178 1
a178 1
C ---   FILL UP OUR FIRST RECORD
d199 1
a199 2
         WRITE (STR, 10) ORIGIN, EXTENT, GRID, CELL, PROD, PLUS, SIGMA,
     $        CHAR(0),CHAR(12)
d202 2
a203 2
     $        ' CELL ', 6F10.3, ' PROD', F12.5, ' PLUS',I8, 
     $        ' SIGMA ', F12.5, 2A1)
@


1.18
log
@put Arun correction in
@
text
@d26 1
a26 1
CNO_SAVE
d34 2
a35 2
        CHARACTER *80   EXTEN
        COMMON /COMMUN/ FILNAM,EXTEN
d43 3
a45 2
C       GET FILENAME,  ALLOW DIFFERENT FILE EXTENSION
        CALL AUXFILERD(FILNAM,NCHAR,EXTEN,'BRIX OUTPUT',IRTFLG)
a47 4
C       OPEN BRIX FILE
	OPEN(UNIT=LUN2,FILE=FILNAM, STATUS= 'UNKNOWN', ACCESS='DIRECT',
     &          RECL=512,FORM='UNFORMATTED')

d150 196
@


1.17
log
@fixed CP BRIX crashed on elba
@
text
@d144 4
@


1.16
log
@used auxfilerd to get extension
@
text
@a143 3
        CALL PAGED (LUN2, RHOSEC, SLICES,
     &     NSAM, NROW, XYZBRIX(1), XYZBRIX(2), 0, INUM, ERRCOD)
 
@


1.15
log
@changed <CP> to <CP TO> or <CP FROM>
@
text
@d26 2
d29 8
a36 1
        COMMON         BUF(20000)
a37 10
        INTEGER        EXTENT(3), ORIGIN(3), GRID(3), PLUS, ERRCOD
        INTEGER        XYZBRIX(3)
        REAL           CELL(6), PROD, SIGMA, GINT

        CHARACTER *81  FILNAM
        CHARACTER *80  TIT
        CHARACTER*1    ANS,NULL

        DATA TIT(1:11)/'SPIDER FILE'/,TIT(12:80)/' '/

d40 1
a40 3
        TIT(12:21) = FILNAM(1:10)

	IF(IMAMI.NE.1) CALL NORM3(LUN1,NSAM,NROW,NSLICE,FMAX,FMIN,AV)
d43 3
a45 7
C       SET IRTFLG TO ALLOW FILE EXTENSION ON INPUT
        IRTFLG = 9
        CALL FILERD(FILNAM,NCHAR,NULL,'OUTPUT',IRTFLG)
        IF (IRTFLG .EQ. -1) THEN
           CLOSE (LUN1)
           RETURN
        ENDIF
d47 1
a47 1
C       OPEN BRIX' FILE
d49 1
a49 1
     @@          RECL=512,FORM='UNFORMATTED')
d54 2
a55 2
     1     'DEFAULT UNIT CELL IS NSAM,NROW,NSLICE.  OVERWRITE (Y/N)?',
     2     NULL,IRTFLG)
d61 2
a62 2
	IF(MOD(NSLICE,2).EQ.0) THEN
	ORIGIN(3) =  -NSLICE/2+1
d64 1
a64 1
        ORIGIN(3) = -NSLICE/2
d75 1
a75 1
          CELL(I) = 90.
d82 3
a84 4
C ALL DATA WILL BE RESCALED TO 1000, BECAUSE OF THE
C FAILURE OF O TO READ IN CONTOUR LEVEL SPECIFICATIONS INVOLVING
C DIGITS BEHIND THE DECIMAL POINT.

d92 1
a92 1
        IF (ANS.EQ.'Y' .OR. ANS.EQ.'y') THEN
d117 1
a117 1
     $     SIGMA, PROD, PLUS, ERRCOD)
d136 1
a136 1
     $        NSAM, NROW, XYZBRIX(1), XYZBRIX(2), ISEC, INUM, ERRCOD)
d145 1
a145 1
     $     NSAM, NROW, XYZBRIX(1), XYZBRIX(2), 0, INUM, ERRCOD)
d147 1
a147 1
        CLOSE (LUN1)
d150 1
@


1.14
log
@removed printout
@
text
@d23 1
a23 1
        SUBROUTINE COPYBRIX
a38 2
        LUN1  = 10
        LUN2  = 11
d41 1
a41 2
        CALL FILERD(FILNAM,NLET,NULL,'SPIDER INPUT',IRTFLG)
        IF (IRTFLG .EQ. -1) RETURN 
a42 2
        TIT(12:21) = FILNAM(1:10)
        CALL OPENF(FILNAM,LUN1,NSAM,NROW,'OLD',NF,NSLICE)
d101 9
a109 2
          CALL RDPRMI(NX,NY,NLOOP,ILOOP,'ENTER UNIT CELL DIMS (X,Y)')
          CALL RDPRMI(NZ,NDUM,NLOOP,ILOOP,'ENTER UNIT CELL DIMS (Z)')
@


1.13
log
@changed the normalizatio, not sure about it !
@
text
@a131 4
	q1=0.0
	q2=0.0
	q3=0.0
	q4=0.0
a137 2
	q3=amax1(q3,BUF(ISTART+I-1))
	q4=amin1(q4,BUF(ISTART+I-1))
a138 2
	q1=amax1(q1,BUF(ISTART+I-1))
	q2=amin1(q2,BUF(ISTART+I-1))
a147 1
	print  *,q3,q4,q1,q2
@


1.12
log
@fixed, dont change !
@
text
@a97 4
	SCLX = 1000.0/FMAX
        PROD = 255./(SCLX*(FMAX-FMIN))
        PLUS  = -FMIN*SCLX*PROD
        SIGMA = SIG* SCLX
d99 6
d132 4
d142 5
a146 1
             BUF(ISTART+I-1) = SCLX*(BUF(ISTART+I-1)*FMAX-FMIN) * PROD
d156 1
@


1.11
log
@removed unused var.
res copyem.f
@
text
@d48 1
d70 1
d73 3
d77 1
d94 1
a94 1
C ALL DATA WILL BE RESCALED BY A FACTOR OF 1000, BECAUSE OF THE
d98 4
a101 5
        FMAX  = FMAX*1000.
        FMIN  = FMIN*1000.
        PROD  = 255./(FMAX-FMIN)
        PLUS  = -FMIN*PROD
        SIGMA = SIG* 1000.
d136 1
a136 1
                 BUF(ISTART+I-1) = (BUF(ISTART+I-1)*1000.-FMIN) * PROD
a153 1
        RETURN
@


1.10
log
@bug in errt
@
text
@a27 3
        LOGICAL        EXIST, LUN_OPEN
        INTEGER        LABELS(20)
        INTEGER        NXYZ(3),MXYZ(3)
a34 2
 
        CHARACTER *4   EXTEN
@


1.9
log
@put inum in parameters for reentry
@
text
@d124 1
a124 1
            CALL ERRT(100,'COPYBRIX,NE)
d143 1
a143 1
              CALL ERRT(100,'COPYBRIX,NE)
@


1.8
log
@correction of handedness by JF
@
text
@d1 1
a15 1
C                                                                         
d17 1
a17 1
C COMPATIBLE WITH O VERSION 5.10.  JF 3/14/95
d27 1
a27 1
        COMMON BUF(20000)
d29 1
a29 1
        INTEGER        LABELS(20),TITLES(20)
d32 3
a34 3
        INTEGER EXTENT(3), ORIGIN(3), GRID(3), PLUS, ERRCOD, XYZBRIX(3)
        REAL CELL(6), PROD, SIGMA, GINT

a40 1
        EQUIVALENCE(TIT,TITLES)
a42 2
        LUN1 = 10
        LUN2 = 11
d44 2
d63 1
a63 1
C       OPEN 'PREBRIX' FILE, TO BE RUN THRU PROGRAM 'BRIX' ON IRIS...
d68 1
d70 2
a71 2
     1   'DEFAULT UNIT CELL IS NSAM,NROW,NSLICE.  OVERWRITE (Y/N)?',
     2   NULL,IRTFLG)
d73 1
a73 2
C PREPARE PARAMETERS FOR HEADER

d82 3
a84 3
        CELL(1) = EXTENT(1) * GINT
        CELL(2) = EXTENT(2) * GINT
        CELL(3) = EXTENT(3) * GINT
d89 4
a92 3
        GRID(1) = NSAM
        GRID(2) = NROW
        GRID(3) = NSLICE
d96 5
a100 4
        FMAX = FMAX*1000.
        FMIN = FMIN*1000.
        PROD = 255./(FMAX-FMIN)
        PLUS = -FMIN*PROD
d103 1
a103 1
        IF (ANS.EQ.'Y'.OR.ANS.EQ.'Y') THEN
d115 2
a116 1
C SET FORMAT SWITCH TO "NEW"
d118 2
a119 1
C NOW WRITE HEADER
d123 2
a124 2
             WRITE (NOUT,*)  '*** ERROR WRITING HEADER'
             STOP
d127 3
a129 2
C NOW READ SPIDER VOLUME AND RECORD IN PRE-BRIX FILE
C READ UPSIDE DOWN TO CORRECT HANDEDNESS FLIP
d139 3
a141 3
        CALL PAGED (LUN2, BUF(1), BUF(NSAM*NROW+1),
     $      NSAM, NROW, XYZBRIX(1), XYZBRIX(2), ISEC, ERRCOD)
        IF (ERRCOD .NE. 0) THEN
d143 3
a145 2
        ENDIF
        ENDDO    !   ISEC LOOP OVER SLICES
a147 1

d149 1
a149 1
     $     NSAM, NROW, XYZBRIX(1), XYZBRIX(2), 0, ERRCOD)
@


1.7
log
@prod in line > 72 char bug fixed & removed ! comment
@
text
@a0 2


d17 1
a17 1
C COMPATIBLE WITH O Version 5.10.  JF 3/3/95
d32 2
a33 2
        INTEGER extent(3), origin(3), grid(3), plus, errcod, xyzbrix(3)
        REAL cell(6), prod, sigma, gint
d54 1
a54 1
        npt = NSAM*NROW*NSLICE
d64 3
a66 3
c       open 'prebrix' file, to be run thru program 'brix' on iris...
	open(unit=LUN2,file=FILNAM, status= 'unknown', access='direct',
     @@          recl=512,form='unformatted')
d68 2
a69 2
        Call rdprm(gint,nloop,iloop,'SAMPLING DISTANCE')
        Call rdprmc(ans,nchar,.true.,
d71 1
a71 1
     2   NULL,irtflg)
d73 1
a73 1
c prepare parameters for header
d75 21
a95 21
        origin(1) = -NSAM/2
        origin(2) = -NROW/2
        origin(3) = -NSLICE/2

        extent(1) = NSAM 
        extent(2) = NROW 
        extent(3) = NSLICE

        cell(1) = extent(1) * gint
        cell(2) = extent(2) * gint
        cell(3) = extent(3) * gint
        do i =4,6
          cell(i) = 90.
        enddo

        grid(1) = NSAM
        grid(2) = NROW
        grid(3) = NSLICE
c all data will be rescaled by a factor of 1000, because of the
c failure of O to read in contour level specifications involving
c digits behind the decimal point.
d98 44
a141 43
        prod = 255./(FMAX-FMIN)
        plus = -FMIN*prod
        sigma = sig* 1000.

        if (ans.eq.'y'.or.ans.eq.'Y') then
          call rdprmi(nx,ny,nloop,iloop,'ENTER UNIT CELL DIMS (X,Y)')
          call rdprmi(nz,ndum,nloop,iloop,'ENTER UNIT CELL DIMS (Z)')
          cell(1) = nx* gint
          cell(2) = ny* gint
          cell(3) = nz* gint
        endif 

        do i=1,3
           xyzbrix(i) = extent(i)/8
           if(mod(extent(i),8) .ge. 1) xyzbrix(i) = xyzbrix(i) +1
        enddo
c set format switch to "new"
        call paged_format('new')
c now write header
        call pagedhdr(LUN2, origin, extent, grid, cell, 
     $     sigma, prod, plus, errcod)
        if (errcod .ne. 0) then
             Write (nout,*)  '*** Error writing header'
             stop
        endif

c now read SPIDER volume and record in pre-BRIX file
        do isec = 1, NSLICE
           ireco = (isec-1)*NROW
	   do j = 1,NROW
              istart = (j-1) * NSAM + 1
              call redlin(LUN1, BUF(istart), NSAM, ireco+j)
              do i = 1,NSAM
                 BUF(istart+i-1) = (BUF(istart+i-1)*1000.-FMIN) * prod
              enddo
           enddo
        call paged (LUN2, BUF(1), BUF(NSAM*NROW+1),
     $      NSAM, NROW, xyzbrix(1), xyzbrix(2), isec, errcod)
        if (errcod .ne. 0) then
              Write (nout,*)  '*** Error writing brick'
        endif
        enddo    !   isec loop over slices
C       end isec loop over slices
d144 2
a145 2
        call paged (LUN2, rhosec, slices,
     $     NSAM, NROW, xyzbrix(1), xyzbrix(2), 0, errcod)
d152 2
@


1.6
log
@removed non-standard fortran return messages
@
text
@d121 1
a121 1
        if(errcod .ne. 0) then
d128 2
a129 2
              ireco = (isec-1)*NROW
	      do j = 1,NROW
d132 2
a133 3
                   do i = 1,NSAM
                      BUF(istart+i-1) = (BUF(istart+i-1)*1000.-FMIN) * prod
                   enddo
d135 1
d142 1
d144 1
d148 3
a150 2
        close (LUN1)
        close (LUN2)
@


1.5
log
@implement a scale change by JF
@
text
@d52 1
a52 1
        IF (IRTFLG .EQ. -1) RETURN '*** error reading file'
d61 4
a64 1
        IF (IRTFLG .EQ. -1) Return '*** error reading file name'
@


1.4
log
@new copybrix_510.f by JF
@
text
@d29 1
a29 1
        COMMON BUF(10000)
d60 1
a60 1
        CALL FILERD(FILNAM,NCHAR,NULL,'PRE-BRIX OUTPUT',IRTFLG)
d92 5
a96 1

d99 1
a99 1
        sigma = sig
d130 1
a130 1
                      BUF(istart+i-1) = (BUF(istart+i-1) - FMIN) * prod
@


1.3
log
@*** empty log message ***
@
text
@d2 1
d16 4
a19 5
C
C COPYO(LUN1,LUN2)
C
C PURPOSE: CONVERTS 3D SPIDER IMAGES TO BRICKS FORMAT, COMPATIBLE WITH "O"
C
d26 1
a26 1
#ifdef SP_UNIX
a27 4
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
        COMMON BUF(512),line,header
d29 1
d33 3
a35 4
	real cell(6)
	integer*4 nabc(3,3),header(256)
	integer*2 line(512)
	integer lgt,lgt2,igroup,ib,np,npt
d37 1
d40 1
a40 1

a45 1
	data lgt/1024/,lgt2/512/
d50 3
a53 6
        CALL FILERD(FILNAM,NLET,NULL,'SPIDER INPUT',IRTFLG) 
        IF (IRTFLG .EQ. -1) THEN
          WRITE(NOUT,*) '*** error reading file'
          RETURN 
        ENDIF

d61 1
a61 13
        IF (IRTFLG .EQ. -1) THEN
          WRITE(NOUT,*) '*** error reading file'
          RETURN 
        ENDIF

        DO I = 1,NCHAR
          IF(FILNAM(I:I) .EQ. '.') GO TO 50
        ENDDO
C *** ADD EXTENSION TO FILENAME IF MISSING  
        CALL FILCAN(FILNAM,NCHARR,NULL,NULL,FILNAM,DATEXC,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

50      CONTINUE
d64 2
a65 2
	open(unit=LUN2,file=FILNAM,access='direct',
     @@          recl=lgt,form='unformatted',status='unknown')
d71 26
d100 17
a116 6

        else
c default pseudo cell
          nx=nsam
          ny=nrow
          nz=nslice
a118 33
        cell(1)=nx*gint
	cell(2)=ny*gint
	cell(3)=nz*gint
	cell(4)=90.
	cell(5)=90.
	cell(6)=90.

c       write header record
	igroup=1
	header(1)=igroup
	do 60 j=1,6
60      header(j+1)=nint(1000.0*cell(j))
	header(8)=1     !sets axes in standard orientation
        nx0 = -NSAM/2
        ny0 = -NROW/2
        nz0 = -NSLICE/2

	nabc(1,1) =  nx0
	nabc(2,1) =  nx0 + NSAM - 1
	nabc(3,1) =  NSAM
	nabc(1,2) =  ny0
	nabc(2,2) =  ny0 + NROW - 1
	nabc(3,2) =  NROW
	nabc(1,3) =  nz0
	nabc(2,3) =  nz0 + NSLICE - 1
	nabc(3,3) =  NSLICE
	l=8
	do 62 j=1,3
	do 62 k=1,3
	l=l+1
62      header(l)=nabc(k,j)
	write(LUN2,rec=1)header

d120 15
a134 21
c scale factor is arbitrary, but large to preserve fine steps in integer
c representation.  It is assumed that FMAX, FMIN are available for volume.
        sc=1000./(FMAX-FMIN)
	np=0
c np: voxel counted
	do k = 1,NSLICE
	do j = 1,NROW
        Call redlin(LUN1,BUF,NSAM,(k-1)*NROW+j)

	do i = 1,NSAM

	ib = np/lgt2
	ip = np - ib*lgt2 + 1
	np = np + 1
	line(ip) = nint(BUF(i)*sc)
	if((ip.eq.lgt2).or.(np.eq.npt)) write(LUN2,rec=ib+2)line
	end do   !       i loop

	end do   !       j loop
c
	end do   !       k loop
d136 3
@


1.2
log
@*** empty log message ***
@
text
@d55 5
a59 3
        CALL FILERD(FILNAM,NLET,NULL,'SPIDER INPUT',IRTFLG)
C '*** error reading file'
        IF (IRTFLG .EQ. -1) RETURN 
d68 4
a71 2
C '*** error reading file name'
        IF (IRTFLG .EQ. -1) Return 
d73 4
d79 2
@


1.1
log
@Initial revision
@
text
@d56 2
a57 1
        IF (IRTFLG .EQ. -1) RETURN '*** error reading file'
d66 5
a70 1
        IF (IRTFLG .EQ. -1) Return '*** error reading file name'
@
