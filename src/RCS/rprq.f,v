head	1.29;
access;
symbols
	healthdept_2018:1.29
	pre_getangas:1.24
	GPL2010:1.23
	pre_GPL2010:1.22
	pre_var_equation:1.22
	pre_fftwrings:1.22
	pre_opfiles:1.22
	src:1.22
	best-code:1.22
	x-named-regs:1.22
	x:1.22
	v13-00:1.22
	pre_GPL:1.20
	prec_CA:1.20
	noindx:1.20
	Bproc:1.20
	oct21:1.11
	last77:1.10;
locks; strict;
comment	@c @;


1.29
date	2018.10.03.14.34.15;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2012.02.28.17.39.29;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2011.12.21.17.32.40;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2011.12.20.13.51.31;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2011.12.20.13.44.58;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2011.01.03.13.55.23;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.24.13.26.50;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.17.19.55.47;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2005.10.17.17.52.30;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2000.02.10.16.05.50;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2000.02.02.15.19.12;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2000.02.02.14.48.59;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2000.02.02.14.47.45;	author pawel;	state Exp;
branches;
next	1.16;

1.16
date	2000.02.01.16.40.00;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2000.01.12.18.41.40;	author bimal;	state Exp;
branches;
next	1.14;

1.14
date	2000.01.06.16.52.18;	author bimal;	state Exp;
branches;
next	1.13;

1.13
date	99.12.07.19.48.08;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.11.10.15.04.44;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	99.06.03.20.50.56;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	99.02.11.15.28.46;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	99.02.10.16.19.58;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	98.08.25.14.31.32;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	98.08.25.13.58.50;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	98.04.24.20.01.39;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	98.04.15.21.09.28;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	97.10.14.21.19.42;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.01.26.21.05.19;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.01.26.15.18.01;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.32;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.29
log
@email_health_dept
@
text
@
C **********************************************************************
C                                                                      *
C  RPRQ.F                                                              *
C              COMMON PAR REMOVED                DEC 2010 ARDEAN LEITH *
C              RI REMOVED                        DEC 2010 ARDEAN LEITH *
C              PHI.. REMOVED                     FEB 2012 ARDEAN LEITH *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2012  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  PURPOSE:         BACKPROJECTS B INTO CUBE. BILINEAR INTERPOLATION   *
C                                                                      *
C  PARAMETERS:      N       DIMENSIONS OF B                  SENT      *
C                   B       IMAGE                            SENT      *
C                   CUBE    VOLUME                           SENT/RET. *
C                   IPCUBE  SCAN LINE INDICES                SENT      *
C                   NN      2ND DIMENSION OF IPCUBE          SENT      *
C                   DM      ROTATION  MATRIX                 SENT      *
C                   LDP                                      SENT      *
C                   LDPNM                                    SENT      *
C                   IRTFLG                                   RET.      *
C                                                                      *
C  IPCUBE: 1 - BEGINNING VOXEL ON THIS LINE                            *
C          2 - ENDING VOXEL ON THIS LINE                               *
C          3 - IX     BEGINNING VOXEL COORDINATES                      *
C          4 - IY                                                      *
C          5 - IZ                                                      *
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE RPRQ(N,B,CUBE,IPCUBE,NN,
     &                  DM,LDP,LDPNM,IRTFLG)

        INCLUDE 'CMBLOCK.INC'

        INTEGER           :: N
        REAL              :: B(N,N),CUBE(*)
        INTEGER           :: IPCUBE(5,NN)
        INTEGER           :: NN
        REAL              :: PHI,THETA,PSI
        REAL              :: DM(9)
        INTEGER           :: LDP,LDPNM,IRTFLG

        DOUBLE PRECISION  :: CPHI,SPHI,CTHE,STHE,CPSI,SPSI
        LOGICAL           :: ALLOK
        INTEGER           :: IBAD,JBAD
     
        ALLOK = .TRUE.

        DM1   = DM(1)
        DM4   = DM(4)

c$omp parallel do private(i,j,xb,yb,xbb,ybb,iqx,iqy,dipy),
c$omp&                    shared(allok,ibad,jbad)
        DO I=1,NN
           XB = (IPCUBE(3,I)-LDP) * DM(1) + (IPCUBE(4,I)-LDP)*DM(2) +
     &          (IPCUBE(5,I)-LDP) * DM(3)
           YB = (IPCUBE(3,I)-LDP) * DM(4) + (IPCUBE(4,I)-LDP)*DM(5) +
     &          (IPCUBE(5,I)-LDP) * DM(6)

           DO J=IPCUBE(1,I),IPCUBE(2,I)

              XBB = (J - IPCUBE(1,I)) * DM1 + XB
              IQX = IFIX(XBB + FLOAT(LDPNM))

              YBB = (J - IPCUBE(1,I)) * DM4 + YB
              IQY = IFIX(YBB + FLOAT(LDPNM))

              IF (IQX < 1 .OR. IQX >= N .OR.
     &            IQY < 1 .OR. IQY >= N) THEN
                 ALLOK = .FALSE.
                 IBAD  = IQX
                 JBAD  = IQY
              ELSE
                 DIPY = YBB + LDPNM - IQY

C                EVEN FASTER VERSION
                 CUBE(J) = CUBE(J) + B(IQX,IQY) + 
     &              DIPY * (B(IQX,IQY+1)   - B(IQX,IQY)) +
     &              (XBB + LDPNM - IQX) * (B(IQX+1,IQY) - B(IQX,IQY) + 
     &              DIPY * (B(IQX+1,IQY+1) - B(IQX+1,IQY) -
     &                      B(IQX,IQY+1)   + B(IQX,IQY)))
              ENDIF
           ENDDO
        ENDDO

        IF (ALLOK) THEN
           IRTFLG = 0
        ELSE
           IF (IBAD < 1 .OR. IBAD >= N)  THEN
              CALL ERRT(102,'Outside image, reduce the radius',IBAD)
           ELSE
              CALL ERRT(102,'Outside image, reduce the radius',JBAD)
           ENDIF
           IRTFLG = 1
        ENDIF

        END

C               FASTER VERSION
C               CUBE(J) = CUBE(J)
C    &          +B(IQX,IQY)+DIPY*(B(IQX,IQY+1)-B(IQX,IQY))
C    &          +DIPX*(B(IQX+1,IQY)-B(IQX,IQY)
C    &          +DIPY*(B(IQX+1,IQY+1)-B(IQX+1,IQY)
C    &          -B(IQX,IQY+1)+B(IQX,IQY)))
C
C               ORIGINAL VERSION
C                CUBE(J) = CUBE(J)
C     &                 +(1.0-DIPX)*(1.0-DIPY)*B(MAP(IQX,IQY))
C     &                 +     DIPX *(1.0-DIPY)*B(MAP(IQX+1,IQY))
C     &                 +(1.0-DIPX)*     DIPY *B(MAP(IQX,IQY+1))
C     &                 +     DIPX *     DIPY *B(MAP(IQX+1,IQY+1))

@


1.28
log
@removed unused psi,theta,psi
@
text
@d15 1
a15 1
C=* Email: spider@@wadsworth.org                                        *
@


1.27
log
@removed rprq_n.f
@
text
@d2 1
a2 1
C ++********************************************************************
d5 3
a7 3
C              COMMON PAR REMOVED                DEC 2010 ARDEAN LEITH *                                                                  *
C              RI REMOVED                        DEC 2010 ARDEAN LEITH *                                                                  *
C                                                                      *
d13 1
a13 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d31 1
a31 3
C  PURPOSE:         BACKPROJECTS B INTO CUBE.                          *
C                   BILINEAR INTERPOLATION                             *
C                   ONLY USED FOR MPI NOW                              *
a37 1
C                   PHI..   ANGLES                           SENT      *
d41 1
d52 1
a52 1
        SUBROUTINE RPRQ(N,B,CUBE,IPCUBE,NN, PHI,THETA,PSI,
a133 5





@


1.26
log
@missing: C
@
text
@d5 3
a7 1
C                       COMMON PAR REMOVED       DEC 2010 ARDEAN LEITH *                                                                  *
d33 1
d41 1
a41 2
C                   DM      TRANSFORM MATRIX                 SENT      *
C                   RI      RADIUS                           SENT      *
a50 3
C  CONTAINS:  RPRQ_N      BILINEAR INTERP   CALLED BY: BPCG            *
C             RPRQ_N      BILINEAR INTERP   CALLED BY: BPRP USES: PAR  *
C                                                                      *
d54 2
a55 2
        SUBROUTINE RPRQ_N(N,B,CUBE,IPCUBE,NN,PHI,THETA,PSI,
     &                    DM,RI,LDP,LDPNM,IRTFLG)
d59 1
d62 5
a67 2
        DOUBLE PRECISION  :: QUADPI,DGR_TO_RAD
        REAL              :: DM(9)
d69 3
a72 24
        PARAMETER (QUADPI = 3.1415926535897932384626)
        PARAMETER (DGR_TO_RAD = (QUADPI/180))


        R = RI * RI

        CPHI  = DCOS(DBLE(PHI)*DGR_TO_RAD)
        SPHI  = DSIN(DBLE(PHI)*DGR_TO_RAD)
        CTHE  = DCOS(DBLE(THETA)*DGR_TO_RAD)
        STHE  = DSIN(DBLE(THETA)*DGR_TO_RAD)
        CPSI  = DCOS(DBLE(PSI)*DGR_TO_RAD)
        SPSI  = DSIN(DBLE(PSI)*DGR_TO_RAD)

        DM(1) = CPHI*CTHE*CPSI-SPHI*SPSI
        DM(2) = SPHI*CTHE*CPSI+CPHI*SPSI
        DM(3) = -STHE*CPSI
        DM(4) = -CPHI*CTHE*SPSI-SPHI*CPSI
        DM(5) = -SPHI*CTHE*SPSI+CPHI*CPSI
        DM(6) = STHE*SPSI
        DM(7) = STHE*CPHI
        DM(8) = STHE*SPHI
        DM(9) = CTHE     

        ALLOK = .TRUE.
d76 2
a77 2
c$omp parallel do private(i,j,xb,yb,xbb,ybb,iqx,iqy,dipy),shared(allok)

d92 2
a93 2
              IF (IQX.LT.1 .OR. IQX.GE.N .OR.
     &            IQY.LT.1 .OR. IQY.GE.N) THEN
d95 2
a97 1

d106 16
a136 14
             ENDIF
           ENDDO
        ENDDO

        IF (ALLOK) THEN
           IRTFLG = 0
        ELSE
           CALL ERRT(101,'Outside image, reduce the radius',NE)
           IRTFLG = 1
        ENDIF

        END


a140 80


        SUBROUTINE RPRQ(N,B,CUBE,IPCUBE,NN,PHI,THETA,PSI,DM,RI)

        INCLUDE 'CMBLOCK.INC'

        DIMENSION  B(N,N),CUBE(*)
        INTEGER           IPCUBE(5,NN)
        DOUBLE PRECISION  CPHI,SPHI,CTHE,STHE,CPSI,SPSI
        DOUBLE PRECISION  QUADPI,DGR_TO_RAD
        DIMENSION         DM(9)
        LOGICAL           ALLOK

        PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
        PARAMETER (DGR_TO_RAD = (QUADPI/180))

        COMMON /PAR/  LDP,NM,LDPNM

        R=RI*RI

        CPHI  = DCOS(DBLE(PHI)*DGR_TO_RAD)
        SPHI  = DSIN(DBLE(PHI)*DGR_TO_RAD)
        CTHE  = DCOS(DBLE(THETA)*DGR_TO_RAD)
        STHE  = DSIN(DBLE(THETA)*DGR_TO_RAD)
        CPSI  = DCOS(DBLE(PSI)*DGR_TO_RAD)
        SPSI  = DSIN(DBLE(PSI)*DGR_TO_RAD)

        DM(1) =  CPHI*CTHE*CPSI-SPHI*SPSI
        DM(2) =  SPHI*CTHE*CPSI+CPHI*SPSI
        DM(3) = -STHE*CPSI
        DM(4) = -CPHI*CTHE*SPSI-SPHI*CPSI
        DM(5) = -SPHI*CTHE*SPSI+CPHI*CPSI
        DM(6) =  STHE*SPSI
        DM(7) =  STHE*CPHI
        DM(8) =  STHE*SPHI
        DM(9) =  CTHE     

        ALLOK = .TRUE.
        DM1   = DM(1)
        DM4   = DM(4)

c$omp parallel do private(i,j,xb,yb,xbb,ybb,iqx,iqy,dipy),shared(allok)

        DO I=1,NN
           XB = (IPCUBE(3,I)-LDP)*DM(1)+(IPCUBE(4,I)-LDP)*DM(2)+
     &          (IPCUBE(5,I)-LDP)*DM(3)
           YB = (IPCUBE(3,I)-LDP)*DM(4)+(IPCUBE(4,I)-LDP)*DM(5)+
     &          (IPCUBE(5,I)-LDP)*DM(6)

           DO J=IPCUBE(1,I),IPCUBE(2,I)

              XBB = (J - IPCUBE(1,I)) * DM1 + XB
              IQX = IFIX(XBB + FLOAT(LDPNM))

              YBB = (J - IPCUBE(1,I)) * DM4 + YB
              IQY = IFIX(YBB + FLOAT(LDPNM))
              IF (IQX.LT.1 .OR. IQX.GE.N .OR.
     &            IQY.LT.1 .OR. IQY.GE.N) THEN
                 ALLOK = .FALSE.
              ELSE

                 DIPY = YBB + LDPNM - IQY

C                EVEN FASTER VERSION
                 CUBE(J) = CUBE(J) + B(IQX,IQY) + 
     &              DIPY * (B(IQX,IQY+1)   - B(IQX,IQY)) +
     &              (XBB + LDPNM - IQX) * (B(IQX+1,IQY) - B(IQX,IQY) + 
     &              DIPY * (B(IQX+1,IQY+1) - B(IQX+1,IQY) -
     &                      B(IQX,IQY+1)   + B(IQX,IQY)))
             ENDIF
           ENDDO
        ENDDO

        IF (.NOT. ALLOK) THEN
           WRITE(NOUT,*) '*** IQX or IQY out of range - ',
     &                   ' reduce the radius!'
           CALL ERRT(100,'BP RP',NE)
         ENDIF

         END
@


1.25
log
@cosmetic and comments
@
text
@d37 1
a37 1
                    PHI..   ANGLES                           SENT      *
@


1.24
log
@COMMON PAR REMOVED
RPRQ_N  has more parameters
@
text
@d29 22
a50 1
C  PURPOSE:                                                            *
a51 8
C  PARAMETERS:                                                         *
C
C  IPCUBE: 1 - BEGINNING
C          2 - END
C          3 - IX
C          4 - IY
C          5 - IZ
C
d176 16
a191 16
        CPHI=DCOS(DBLE(PHI)*DGR_TO_RAD)
        SPHI=DSIN(DBLE(PHI)*DGR_TO_RAD)
        CTHE=DCOS(DBLE(THETA)*DGR_TO_RAD)
        STHE=DSIN(DBLE(THETA)*DGR_TO_RAD)
        CPSI=DCOS(DBLE(PSI)*DGR_TO_RAD)
        SPSI=DSIN(DBLE(PSI)*DGR_TO_RAD)

        DM(1)=CPHI*CTHE*CPSI-SPHI*SPSI
        DM(2)=SPHI*CTHE*CPSI+CPHI*SPSI
        DM(3)=-STHE*CPSI
        DM(4)=-CPHI*CTHE*SPSI-SPHI*CPSI
        DM(5)=-SPHI*CTHE*SPSI+CPHI*CPSI
        DM(6)=STHE*SPSI
        DM(7)=STHE*CPHI
        DM(8)=STHE*SPHI
        DM(9)=CTHE     
@


1.23
log
@GPL_2010
@
text
@d5 1
d33 5
a37 1
C IMAGE_PROCESSING_ROUTINE                                             *
a38 1
C        0         2         3         4         5         6         7 *
d42 103
a160 6
C IPCUBE: 1 - beginning
C         2 - end
C         3 - ix
C         4 - iy
C         5 - iz

a211 15

C               FASTER VERSION
C               CUBE(J)=CUBE(J)
C    &          +B(IQX,IQY)+DIPY*(B(IQX,IQY+1)-B(IQX,IQY))
C    &          +DIPX*(B(IQX+1,IQY)-B(IQX,IQY)
C    &          +DIPY*(B(IQX+1,IQY+1)-B(IQX+1,IQY)
C    &          -B(IQX,IQY+1)+B(IQX,IQY)))
C
C               ORIGINAL VERSION
C                CUBE(J)=CUBE(J)
C     &                 +(1.0-DIPX)*(1.0-DIPY)*B(MAP(IQX,IQY))
C     &                 +     DIPX *(1.0-DIPY)*B(MAP(IQX+1,IQY))
C     &                 +(1.0-DIPX)*     DIPY *B(MAP(IQX,IQY+1))
C     &                 +     DIPX *     DIPY *B(MAP(IQX+1,IQY+1))

@


1.22
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.21
log
@HRI GPL License used
@
text
@a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.20
log
@faster version
@
text
@d8 24
@


1.19
log
@error trap changed
@
text
@d25 1
a25 1
        SUBROUTINE  RPRQ(N,B,CUBE,IPCUBE,NN,PHI,THETA,PSI,DM,RI)
d27 2
d30 1
a30 1
        INTEGER   IPCUBE(5,NN)
d33 3
a37 2
        DIMENSION  DM(9)
        LOGICAL       KEEPGO
d55 1
a55 1
C
d66 23
a88 1
        KEEPGO = .TRUE.
d90 1
a90 2
c$omp parallel do private(i,j,xb,yb,xbb,ybb,iqx,iqy,dipx,dipy),
c$omp&   shared(keepgo)
d92 13
a104 6
        DO    I=1,NN
           XB=(IPCUBE(3,I)-LDP)*DM(1)+(IPCUBE(4,I)-LDP)*DM(2)+
     &     (IPCUBE(5,I)-LDP)*DM(3)
           YB=(IPCUBE(3,I)-LDP)*DM(4)+(IPCUBE(4,I)-LDP)*DM(5)+
     &     (IPCUBE(5,I)-LDP)*DM(6)
           DO    J=IPCUBE(1,I),IPCUBE(2,I)
d106 6
a111 5
              XBB=(J-IPCUBE(1,I))*DM(1)+XB
              IQX=IFIX(XBB+FLOAT(LDPNM))
              IF(IQX.LT.1 .OR. IQX.GE.N) THEN
                    KEEPGO = .FALSE.
              ELSE
a112 19
                 YBB=(J-IPCUBE(1,I))*DM(4)+YB
                 IQY=IFIX(YBB+FLOAT(LDPNM))
                 IF (IQY.LT.1 .OR. IQY.GE.N) THEN
                    KEEPGO = .FALSE.
                 ELSE
                    DIPX=XBB+LDPNM-IQX
                    DIPY=YBB+LDPNM-IQY

                   CUBE(J)=CUBE(J)
c     1                 +(1.0-DIPX)*(1.0-DIPY)*B(MAP(IQX,IQY))
c     2                 +     DIPX *(1.0-DIPY)*B(MAP(IQX+1,IQY))
c     3                 +(1.0-DIPX)*     DIPY *B(MAP(IQX,IQY+1))
c     4                 +     DIPX *     DIPY *B(MAP(IQX+1,IQY+1))
C faster version :
     1        +B(IQX,IQY)+DIPY*(B(IQX,IQY+1)-B(IQX,IQY))
     2        +DIPX*(B(IQX+1,IQY)-B(IQX,IQY)
     3        +DIPY*(B(IQX+1,IQY+1)-B(IQX+1,IQY)
     4        -B(IQX,IQY+1)+B(IQX,IQY)))
                 ENDIF
d117 2
a118 4
c       XB=XB+DM(1)
c1      YB=YB+DM(4)
        IF (.NOT. KEEPGO) THEN
           WRITE(NOUT,*) '  IQNX or IQNY out of range - ',
d124 1
@


1.18
log
@unprintable char removed
@
text
@d34 2
a36 1
        COMMON /UNITS/LUNC,NIN,NOUT
d62 6
a67 2
C
c$omp parallel do private(i,j,xb,yb,xbb,ybb,iqx,iqy,dipx,dipy)
d78 2
a79 15
                 WRITE(NOUT,*) '  IQNX out of range - ',
     &                         ' reduce the radius!'
                 CALL ERRT(100,'BP RP',NE)
                 RETURN
              ENDIF
              YBB=(J-IPCUBE(1,I))*DM(4)+YB
              IQY=IFIX(YBB+FLOAT(LDPNM))
              IF(IQY.LT.1 .OR. IQY.GE.N) THEN
                 WRITE(NOUT,*) '  IQNY out of range -',
     &                         ' reduce the radius!'
                 CALL ERRT(100,'BP RP',NE)
                 RETURN
              ENDIF
              DIPX=XBB+LDPNM-IQX
              DIPY=YBB+LDPNM-IQY
d81 9
a89 1
              CUBE(J)=CUBE(J)
d99 2
a100 1

d103 1
d106 7
a112 1
        END
@


1.17
log
@*** empty log message ***
@
text
@d72 1
a72 1
              IF(IQX.LT.1 .OR. IQX.GE.N)  THEN
d80 1
a80 1
              IF(IQY.LT.1 .OR. IQY.GE.N)  THEN
@


1.16
log
@ibm did not like write continuation without '
@
text
@d73 1
a73 1
                 WRITE(NOUT,*) '  IQNX out of range - '
@


1.15
log
@*** empty log message ***
@
text
@a14 2
C                                                                      *
C                                                                      *
d36 1
a36 1
C
d42 1
a42 1
C
d44 1
a44 1
C
d73 2
a74 2
                 WRITE(NOUT,*) '  IQNX out of range - 
     &           reduce the radius!'
d76 1
d81 2
a82 2
                 WRITE(NOUT,*) '  IQNY out of range - 
     &           reduce the radius!'
d84 1
d99 1
a99 1
C
@


1.14
log
@header
@
text
@d4 1
a4 1
C                                                                      *
@


1.13
log
@header
@
text
@d20 3
a22 1
C                                                                      *
d27 1
a27 1
	SUBROUTINE  RPRQ(N,B,CUBE,IPCUBE,NN,PHI,THETA,PSI,DM,RI)
d29 9
a37 9
	DIMENSION  B(N,N),CUBE(*)
	INTEGER   IPCUBE(5,NN)
	DOUBLE PRECISION  CPHI,SPHI,CTHE,STHE,CPSI,SPSI
	DOUBLE PRECISION  QUADPI,DGR_TO_RAD
	PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
	PARAMETER (DGR_TO_RAD = (QUADPI/180))
 	DIMENSION  DM(9)
	COMMON /PAR/  LDP,NM,LDPNM
	COMMON /UNITS/LUNC,NIN,NOUT
d45 1
a45 1
	R=RI*RI
d47 13
a59 13
	CPHI=DCOS(DBLE(PHI)*DGR_TO_RAD)
	SPHI=DSIN(DBLE(PHI)*DGR_TO_RAD)
	CTHE=DCOS(DBLE(THETA)*DGR_TO_RAD)
	STHE=DSIN(DBLE(THETA)*DGR_TO_RAD)
	CPSI=DCOS(DBLE(PSI)*DGR_TO_RAD)
	SPSI=DSIN(DBLE(PSI)*DGR_TO_RAD)
C
	DM(1)=CPHI*CTHE*CPSI-SPHI*SPSI
	DM(2)=SPHI*CTHE*CPSI+CPHI*SPSI
	DM(3)=-STHE*CPSI
	DM(4)=-CPHI*CTHE*SPSI-SPHI*CPSI
	DM(5)=-SPHI*CTHE*SPSI+CPHI*CPSI
	DM(6)=STHE*SPSI
d65 23
a87 21
	DO    I=1,NN
	XB=(IPCUBE(3,I)-LDP)*DM(1)+(IPCUBE(4,I)-LDP)*DM(2)+
     &	  (IPCUBE(5,I)-LDP)*DM(3)
	YB=(IPCUBE(3,I)-LDP)*DM(4)+(IPCUBE(4,I)-LDP)*DM(5)+
     &	  (IPCUBE(5,I)-LDP)*DM(6)
	DO    J=IPCUBE(1,I),IPCUBE(2,I)
C
	XBB=(J-IPCUBE(1,I))*DM(1)+XB
	IQX=IFIX(XBB+FLOAT(LDPNM))
	IF(IQX.LT.1 .OR. IQX.GE.N)  THEN
	WRITE(NOUT,*) '  IQNX out of range - reduce the radius!'
	CALL ERRT(100,'BP RP',NE)
	ENDIF
	YBB=(J-IPCUBE(1,I))*DM(4)+YB
	IQY=IFIX(YBB+FLOAT(LDPNM))
	IF(IQY.LT.1 .OR. IQY.GE.N)  THEN
	WRITE(NOUT,*) '  IQNY out of range - reduce the radius!'
	CALL ERRT(100,'BP RP',NE)
	ENDIF
	DIPX=XBB+LDPNM-IQX
	DIPY=YBB+LDPNM-IQY
d89 1
a89 1
	CUBE(J)=CUBE(J)
d95 10
a104 10
     1	   +B(IQX,IQY)+DIPY*(B(IQX,IQY+1)-B(IQX,IQY))
     2	   +DIPX*(B(IQX+1,IQY)-B(IQX,IQY)
     3		+DIPY*(B(IQX+1,IQY+1)-B(IQX+1,IQY)
     4		-B(IQX,IQY+1)+B(IQX,IQY)))
C
	ENDDO
	ENDDO
c	XB=XB+DM(1)
c1	YB=YB+DM(4)
	END
@


1.12
log
@*** empty log message ***
@
text
@d1 24
d26 1
@


1.11
log
@OpenMP
@
text
@a10 1
CNO_SAVE
@


1.10
log
@*** empty log message ***
@
text
@d38 1
a38 1
c$doacross local(i,j,xb,yb,xbb,ybb,iqx,iqy,dipx,dipy)
@


1.9
log
@trig
@
text
@d5 1
a5 1
	DOUBLE PRECISION  QUADPI,DRG_TO_RAD
d7 1
a7 1
	PARAMETER (DRG_TO_RAD = (QUADPI/180))
d21 6
a26 6
	CPHI=DCOS(DBLE(PHI)*DRG_TO_RAD)
	SPHI=DSIN(DBLE(PHI)*DRG_TO_RAD)
	CTHE=DCOS(DBLE(THETA)*DRG_TO_RAD)
	STHE=DSIN(DBLE(THETA)*DRG_TO_RAD)
	CPSI=DCOS(DBLE(PSI)*DRG_TO_RAD)
	SPSI=DSIN(DBLE(PSI)*DRG_TO_RAD)
@


1.8
log
@proper error message
@
text
@d5 3
a7 3
#ifdef SP_F90
	DOUBLE PRECISION  DCOSD,DSIND
#endif
d21 6
a26 6
	CPHI=DCOSD(DBLE(PHI))
	SPHI=DSIND(DBLE(PHI))
	CTHE=DCOSD(DBLE(THETA))
	STHE=DSIND(DBLE(THETA))
	CPSI=DCOSD(DBLE(PSI))
	SPSI=DSIND(DBLE(PSI))
@


1.7
log
@error message printed properly
@
text
@d49 2
a50 2
	PRINT  *,'  IQNX out of range - reduce the radius!'
	STOP
@


1.6
log
@length of CBE changed to undefined
@
text
@d10 1
d55 2
a56 2
	PRINT  *,'  IQNY out of range - reduce the radius!'
	STOP
@


1.5
log
@*** empty log message ***
@
text
@d2 1
a2 1
	DIMENSION  B(N,N),CUBE(N*N*N)
@


1.4
log
@*** empty log message ***
@
text
@d5 3
@


1.3
log
@nosave mp
@
text
@d35 1
a35 1
	DO  1  I=1,NN
d40 1
a40 1
	DO  1  J=IPCUBE(1,I),IPCUBE(2,I)
d68 2
a69 1
1	CONTINUE
@


1.2
log
@nosave mp
@
text
@d49 1
a49 1
	IQY=IFIX(YB+FLOAT(LDPNM))
@


1.1
log
@Initial revision
@
text
@d7 1
d34 1
d42 2
a43 1
	IQX=IFIX(XB+FLOAT(LDPNM))
d48 1
d54 2
a55 2
	DIPX=XB+LDPNM-IQX
	DIPY=YB+LDPNM-IQY
d68 3
a70 2
	XB=XB+DM(1)
1	YB=YB+DM(4)
@
