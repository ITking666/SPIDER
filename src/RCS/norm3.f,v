head	1.18;
access;
symbols
	healthdept_2018:1.18
	pre_getangas:1.12
	GPL2010:1.10
	pre_GPL2010:1.9
	pre_var_equation:1.9
	pre_fftwrings:1.9
	pre_opfiles:1.8
	src:1.8
	best-code:1.8
	x-named-regs:1.7
	x:1.7
	v13-00:1.7
	pre_GPL:1.5
	prec_CA:1.5
	noindx:1.5
	Bproc:1.4
	oct21:1.3
	last77:1.3;
locks; strict;
comment	@c @;


1.18
date	2018.10.03.14.34.11;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2012.10.04.14.23.31;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2012.09.28.13.35.14;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2011.09.12.19.05.09;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2011.09.09.16.11.15;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2011.08.29.17.31.18;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2011.02.04.15.58.07;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2010.11.03.19.17.59;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2010.06.24.13.26.22;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2007.04.18.13.58.23;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.25.21.49.01;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.17.20.10.22;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.17.18.04.42;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.26.15.55.56;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.11.10.23.09.42;	author yuchen;	state Exp;
branches;
next	1.3;

1.3
date	98.05.20.13.28.00;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	96.01.16.16.09.40;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.46;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.18
log
@email_health_dept
@
text
@
C++*******************************************************************
C
C    NORM3.F
C               SIG FOR BLANK IMAGE FLOAT SLOP     JAN 06 A. LEITH
C               FLOAT                              APR 07 A. LEITH
C               ERROR MESSAGES                     NOV 10 A. LEITH
C               NORMVALSP ADDED                    AUG 11 A. LEITH
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2011  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    NORM3(LUN,NSAM,NROW,NSLICE,FMAX,FMIN,AV)
C
C    PURPOSE:  DETERMINES MAX, MIN, AV, AND SIG FOR A SPIDER IMAGE
C
C    PARAMETERS:
C        LUN          LOGICAL UNIT NUMBER OF IMAGE             (SENT)
C        NSAM,NROW,NSLICE    DIMENSIONS OF VOLUME              (SENT)
C        FMAX         MAXIMUM OF VOLUME                        (RET.)
C        FMIN         MINIMUM OF VOLUME                        (RET.)
C        AV           AVERAGE OF VOLUME                        (RET.)
C
C    NOTE:    THIS USES UNLABELED COMMON!!
C             SIG RETURNED IN COMMON  (LEGACY ISSUE)
C
C--*******************************************************************

      SUBROUTINE NORM3(LUN,NSAM,NROW,NSLICE,FMAX,FMIN,AV)

      COMMON BUF(1)
      COMMON /MASTER/NSAMC,NROWC,IREC,NLABEL,IFORM,IMAMI,FMAXC,FMINC,
     &               AVC,SIG,IHIST
      COMMON /UNITS/LUNT,NIN,NOUT

      DOUBLE PRECISION DAV,DAV2,DTOP,FNALL,DTEMP

      FNALL = FLOAT(NSAM) * FLOAT(NROW) * FLOAT(NSLICE)
      IF (FNALL <= 0) THEN
         WRITE(NOUT,*) '*** NSAM, NROW, NSLICE:',NSAM,NROW,NSLICE
         CALL ERRT(101,'NORM3, BAD DIMENSIONS',NE)
         RETURN
      ENDIF

      DAV  = 0.
      DAV2 = 0.

      FMIN = HUGE(FMIN)
      FMAX = -FMIN

      DO IRECT = 1,NROW*NSLICE
         CALL REDLIN(LUN,BUF,NSAM,IRECT)
         DO K = 1,NSAM
            B    = BUF(K)
            FMAX = MAX(B,FMAX)
            FMIN = MIN(B,FMIN)
            DAV  = DAV  + B
            DAV2 = DAV2 + B * DBLE(B)
          ENDDO
      ENDDO

      AV    = DAV / FNALL
      AVC   = AV
      FMAXC = FMAX
      FMINC = FMIN

      DTOP  = DAV2 - DAV * DAV / FNALL

      DIFF  = FMAX - FMIN
      IF (DIFF <= TINY(DIFF)) THEN
C        BLANK IMAGE SOMETIMES LEADS TO SQRT NEG. NUMBER

      ELSEIF (DTOP .LT. 0.0D0) THEN
C        SQRT OF NEGATIVE NUMBER
         WRITE(NOUT,*) '*** SQRT(',DTOP,') IMPOSSIBLE. ',
     &                 'ASSUMING THIS IS A BLANK IMAGE' 
         SIG = 0.0
 
      ELSEIF (FNALL == 1.0) THEN
C        DIVISION BY ZERO
         CALL ERRT(101,'SINGLE PIXEL --> NO STANDARD DEVIATION',NE) 
         RETURN

      ELSE
C        CAN CALCULATE SIG
         SIG = DSQRT( DTOP / DBLE(FNALL - 1.0))
      ENDIF

      CALL SETPRM(LUN,NSAM,NROW,FMAX,FMIN,AV,'U')

      END


C****************************** NORMVALS ******************************
C
C NORMVALS.F         NEW                         FEB 2011 ARDEAN LEITH
C
C++*********************************************************************
C
C NORMVALS(X,NS,NR,DAV,DSIG,USE_OMP)
C
C PURPOSE: DETERMINE NORMALIZATION PARAMETERS: AVG & VARIANCE
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE NORMVALS(X, NX, NY, NZ,
     &                         DAV,DSIG, USE_OMP)

        IMPLICIT NONE

        REAL, INTENT(IN)              :: X(NX,NY,NZ) 
        INTEGER, INTENT(IN)           :: NX, NY, NZ    ! SIZE 
        DOUBLE PRECISION, INTENT(OUT) :: DAV,DSIG 
        LOGICAL, INTENT(IN)           :: USE_OMP 

        DOUBLE PRECISION              :: DN,DVR,DTEMP,DSUM
        INTEGER                       :: K,J,I       

        DSUM  = 0.0
        DVR   = 0.0
        DN    = FLOAT(NX*NY*NZ)

        IF (USE_OMP) THEN
c$omp      parallel do private(k,j,i),reduction(+:dsum,dvr)
           DO K=1,NZ
              DO J=1,NY
                 DO I=1,NX
                   DSUM = DSUM + X(I,J,K)
                   DVR  = DVR  + X(I,J,K) * DBLE(X(I,J,K))
                 ENDDO
              ENDDO
           ENDDO
c$omp      end parallel do

        ELSE
           DO K=1,NZ
              DO J=1,NY
                 DO I=1,NX
                   DSUM = DSUM + X(I,J,K)
                   DVR  = DVR  + X(I,J,K) * DBLE(X(I,J,K))
                 ENDDO
              ENDDO
           ENDDO
        ENDIF

        DAV   = DSUM / DN

        DTEMP = (DVR - DN * DAV * DAV)

        IF (DTEMP .GT. 0) THEN
           DSIG   = DSQRT(DTEMP / (DN-1))
        ELSE
C          TRAP FOR BLANK IMAGE AREA IMPRECISION
           DSIG = 0
        ENDIF

        END



C***********************************************************************
C
C NORMVALS_LMASKED.F         NEW                  SEP 2012 ARDEAN LEITH
C
C***********************************************************************
C
C NORMVALS_LMASKED()
C
C PURPOSE: DETERMINE AVG & STD. DEV NORMALIZATION PARAMETERS, 
C          INSIDE / OUTSIDE OF MASK 
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE NORMVALS_LMASKED(X, LMASK,NX,NY,NZ, 
     &                            USE_OMP,
     &                            NI,DAVI,DSIGI, NO,DAVO,DSIGO)

        IMPLICIT NONE

        REAL, INTENT(IN)              :: X(NX,NY,NZ) 
        LOGICAL, INTENT(IN)           :: LMASK(NX,NY,NZ) 
        INTEGER, INTENT(IN)           :: NX, NY, NZ    ! SIZE 
        LOGICAL, INTENT(IN)           :: USE_OMP 
        INTEGER, INTENT(OUT)          :: NI,NO      
        DOUBLE PRECISION, INTENT(OUT) :: DAVI,DSIGI, DAVO,DSIGO 

        DOUBLE PRECISION              :: DNI,DNO,DTEMP
        DOUBLE PRECISION              :: DVRI,DSUMI
        DOUBLE PRECISION              :: DVRO,DSUMO
        INTEGER                       :: IX,IY,IZ      

        DSUMI  = 0.0
        DVRI   = 0.0
        DSUMO  = 0.0
        DVRO   = 0.0

        NI     = 0
        NO     = 0

        IF (USE_OMP) THEN
c$omp      parallel do private(iz,iy,ix),
c$omp&                      reduction(+:ni,dsumi,dvri,no,dsumo,dvro)
           DO IZ=1,NZ
              DO IY=1,NY
                 DO IX=1,NX

                   IF (LMASK(IX,IY,IZ)) THEN 
                      DSUMI = DSUMI +      X(IX,IY,IZ)
                      DVRI  = DVRI  + DBLE(X(IX,IY,IZ)**2)
                      NI    = NI + 1
                   ELSE 
                      DSUMO = DSUMO +      X(IX,IY,IZ)
                      DVRO  = DVRO  + DBLE(X(IX,IY,IZ)**2)
                      NO    = NO + 1
                   ENDIF
                 ENDDO
              ENDDO
           ENDDO
c$omp      end parallel do

        ELSE
           DO IZ=1,NZ
              DO IY=1,NY
                 DO IX=1,NX

                   IF (LMASK(IX,IY,IZ)) THEN 
                      DSUMI = DSUMI +      X(IX,IY,IZ)
                      DVRI  = DVRI  + DBLE(X(IX,IY,IZ)**2)
                      NI    = NI + 1
                   ELSE 
                      DSUMO = DSUMO +      X(IX,IY,IZ)
                      DVRO  = DVRO  + DBLE(X(IX,IY,IZ)**2)
                      NO    = NO + 1
                   ENDIF
                 ENDDO
              ENDDO
           ENDDO
        ENDIF

        DNI   = FLOAT(NI)
        DAVI  = DSUMI / DNI
        DTEMP = (DVRI - DNI * (DAVI**2) )

C       TRAP FOR BLANK IMAGE AREA 
        DSIGI = 0
        IF (DTEMP > 0) DSIGI = DSQRT(DTEMP / (DNI-1))

        DNO   = FLOAT(NO)
        DAVO  = DSUMO / DNO
        DTEMP = (DVRO - DNO * (DAVO**2) )

C       TRAP FOR BLANK IMAGE AREA 
        DSIGO = 0
        IF (DTEMP > 0) DSIGO = DSQRT(DTEMP / (DNO-1))

        END

C***********************************************************************
C
C NORMVALS_CMASKED.F         NEW                  SEP 2012 ARDEAN LEITH
C
C****************************** NORMVALS *******************************
C
C NORMVALS_CMASKED()
C
C PURPOSE: DETERMINE AVG & STD. DEV NORMALIZATION PARAMETERS, 
C          INSIDE / OUTSIDE OF CIRCULAR MASK OF GIVEN RADIUS
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE NORMVALS_CMASKED(X, NX,NY,NZ, IXCEN,IYCEN,IZCEN,
     &                      IRADI, USE_OMP,
     &                      NI,DAVI,DSIGI, NO,DAVO,DSIGO)

        IMPLICIT NONE

        REAL, INTENT(IN)              :: X(NX,NY,NZ) 
        INTEGER, INTENT(IN)           :: NX, NY, NZ    ! SIZE 
        INTEGER, INTENT(IN)           :: IXCEN,IYCEN,IZCEN 
        INTEGER, INTENT(IN)           :: IRADI
        LOGICAL, INTENT(IN)           :: USE_OMP 
        INTEGER, INTENT(OUT)          :: NI,NO      
        DOUBLE PRECISION, INTENT(OUT) :: DAVI,DSIGI, DAVO,DSIGO 

        DOUBLE PRECISION              :: DNI,DNO,DTEMP
        DOUBLE PRECISION              :: DVRI,DSUMI
        DOUBLE PRECISION              :: DVRO,DSUMO
        INTEGER                       :: IX,IY,IZ      
        REAL                          :: RADISQ,RADZ,RADYZ,RADT 

        RADISQ = IRADI**2

        DSUMI  = 0.0
        DVRI   = 0.0
        DSUMO  = 0.0
        DVRO   = 0.0

        NI     = 0
        NO     = 0

        IF (USE_OMP) THEN
c$omp      parallel do private(iz,iy,ix,radz,radyz,radt),
c$omp&                      reduction(+:ni,dsumi,dvri,no,dsumo,dvro)
           DO IZ=1,NZ
              RADZ = (IZ - IZCEN) **2

              DO IY=1,NY
                 RADYZ = (IY - IYCEN) **2 + RADZ

                 DO IX=1,NX
                   RADT = RADYZ + (IX - IXCEN) **2 

                   IF (RADT <= RADISQ) THEN 
                      DSUMI = DSUMI +      X(IX,IY,IZ)
                      DVRI  = DVRI  + DBLE(X(IX,IY,IZ)**2)
                      NI    = NI + 1
                   ELSE 
                      DSUMO = DSUMO +      X(IX,IY,IZ)
                      DVRO  = DVRO  + DBLE(X(IX,IY,IZ)**2)
                      NO    = NO + 1
                   ENDIF
                 ENDDO
              ENDDO
           ENDDO
c$omp      end parallel do

        ELSE
           DO IZ=1,NZ
              RADZ = (IZ - IZCEN) **2

              DO IY=1,NY
                 RADYZ = (IY - IYCEN) **2 + RADZ

                 DO IX=1,NX
                   RADT = RADYZ + (IX - IXCEN) **2 

                   IF (RADT <= RADISQ) THEN 
                      DSUMI = DSUMI +      X(IX,IY,IZ)
                      DVRI  = DVRI  + DBLE(X(IX,IY,IZ)**2)
                      NI    = NI + 1
                   ELSE 
                      DSUMO = DSUMO +      X(IX,IY,IZ)
                      DVRO  = DVRO  + DBLE(X(IX,IY,IZ)**2)
                      NO    = NO + 1
                   ENDIF
                 ENDDO
              ENDDO
           ENDDO
        ENDIF

        DNI   = FLOAT(NI)
        DAVI  = DSUMI / DNI
        DTEMP = (DVRI - DNI * (DAVI**2) )

C       TRAP FOR BLANK IMAGE AREA 
        DSIGI = 0
        IF (DTEMP > 0) DSIGI = DSQRT(DTEMP / (DNI-1))

        DNO   = FLOAT(NO)
        DAVO  = DSUMO / DNO
        DTEMP = (DVRO - DNO * (DAVO**2) )

C       TRAP FOR BLANK IMAGE AREA 
        DSIGO = 0
        IF (DTEMP > 0) DSIGO = DSQRT(DTEMP / (DNO-1))

        END





C***********************************************************************
C
C NORMVALSP.F         NEW                  AUG 2011 ARDEAN LEITH
C
C***********************************************************************
C
C NORMVALSP()
C
C PURPOSE: FIND STATISTICS ON MASKED IMAGE/VOLUME
C
C--*********************************************************************

        SUBROUTINE NORMVALSP(X, NX, NY, NZ,
     &                          NXP,NYP,NZP, 
     &                          DAV,DSIG, USE_OMP)

C       FOR PADDED BUFFER

        IMPLICIT NONE

        REAL, INTENT(IN)              :: X(NXP,NYP,NZP) 
        INTEGER, INTENT(IN)           :: NX, NY, NZ     ! ANALYZED SIZE 
        INTEGER, INTENT(IN)           :: NXP,NYP,NZP    ! PADDED  SIZE
        DOUBLE PRECISION, INTENT(OUT) :: DAV,DSIG 
        LOGICAL, INTENT(IN)           :: USE_OMP        ! UNUSED 

        DOUBLE PRECISION              :: DN,DVR,DTEMP,DSUM
        INTEGER                       :: K,J,I       

        DSUM  = 0.0
        DVR   = 0.0
        DN    = FLOAT(NX*NY*NZ)

c$omp   parallel do private(k,j,i),reduction(+:dsum,dvr)
        DO K=1,NZ
           DO J=1,NY
              DO I=1,NX
                DSUM = DSUM + X(I,J,K)
                DVR  = DVR  + X(I,J,K) * DBLE(X(I,J,K))
              ENDDO
           ENDDO
        ENDDO
c$omp   end parallel do

        DAV   = DSUM / DN 

        DTEMP = (DVR - DN * DAV * DAV)

        IF (DTEMP > 0) THEN
           DSIG   = DSQRT(DTEMP / (DN-1))
        ELSE
C          TRAP FOR BLANK IMAGE AREA IMPRECISION
           DSIG = 0
        ENDIF

        END






C****************************** NORMVALSP_NOOMP ***********************
!! UNUSED!!

        SUBROUTINE NORMVALSP_NOOMP(X, NX, NY, NZ,
     &                          NXP,NYP,NZP, 
     &                          DAV,DSIG, USE_OMP)

C       COMPILER FAILED IF USE_OMP WAS PASSED, GAVE ODD COMPILATION

        IMPLICIT NONE

        REAL, INTENT(IN)              :: X(NXP,NYP,NZP) 
        INTEGER, INTENT(IN)           :: NX, NY, NZ     ! ANALYZED SIZE 
        INTEGER, INTENT(IN)           :: NXP,NYP,NZP    ! PADDED  SIZE
        DOUBLE PRECISION, INTENT(OUT) :: DAV,DSIG 
        LOGICAL, INTENT(IN)           :: USE_OMP        ! UNUSED 

        DOUBLE PRECISION              :: DN,DVR,DTEMP,DSUM
        INTEGER                       :: K,J,I       

        DSUM  = 0.0
        DVR   = 0.0
        DN    = FLOAT(NX*NY*NZ)

           DO K=1,NZ
              DO J=1,NY
                 DO I=1,NX
                   DSUM = DSUM + X(I,J,K)
                   DVR  = DVR  + X(I,J,K) * DBLE(X(I,J,K))
                 ENDDO
              ENDDO
           ENDDO

        DAV   = DSUM / DN 

        DTEMP = (DVR - DN * DAV * DAV)

        IF (DTEMP .GT. 0) THEN
           DSIG   = DSQRT(DTEMP / (DN-1))
        ELSE
C          TRAP FOR BLANK IMAGE AREA IMPRECISION
           DSIG = 0
        ENDIF

        END

@


1.17
log
@added NORMVALS_LMASKED
@
text
@d15 1
a15 1
C=* Email: spider@@wadsworth.org                                        *
@


1.16
log
@added NORMVALS_MASKE
@
text
@d182 99
a280 1
C NORMVALS_MASKED.F         NEW                  SEP 2012 ARDEAN LEITH
d284 1
a284 1
C NORMVALS_MASKED()
d292 1
a292 1
        SUBROUTINE NORMVALS_MASKED(X, NX,NY,NZ, IXCEN,IYCEN,IZCEN,
d389 1
@


1.15
log
@normvalsp  now has _noomp (unused) variant
@
text
@d57 1
a57 1
      IF (FNALL .LE. 0) THEN
d88 1
a88 1
      IF (DIFF .LE. TINY(DIFF)) THEN
d97 1
a97 1
      ELSEIF (FNALL .EQ. 1.0) THEN
d101 1
d112 1
a112 2

C++*********************************************************************
d115 2
a116 25
C **********************************************************************
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2011  Health Research Inc.                      *
C=*                                                                    *
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* This program is distributed in the hope that it will be useful,    *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
C **********************************************************************
a124 2
C****************************** NORMVALS ******************************

d179 127
a305 1
C****************************** NORMVALSP *****************************
d311 2
d328 6
a333 7
c$omp      parallel do private(k,j,i),reduction(+:dsum,dvr)
           DO K=1,NZ
              DO J=1,NY
                 DO I=1,NX
                   DSUM = DSUM + X(I,J,K)
                   DVR  = DVR  + X(I,J,K) * DBLE(X(I,J,K))
                 ENDDO
d336 2
a337 1
c$omp      end parallel do
d343 1
a343 1
        IF (DTEMP .GT. 0) THEN
d351 5
@


1.14
log
@normvalsp now 3d
@
text
@d203 1
d216 1
a216 1
        LOGICAL, INTENT(IN)           :: USE_OMP 
a224 1
        IF (USE_OMP) THEN
d236 6
d243 30
a280 1
        ENDIF
@


1.13
log
@normvalsp added
@
text
@d141 1
a141 1
C NORMVALS(X,NS,NR,AVT,VR,USE_OMP)
d148 4
a151 1
        SUBROUTINE NORMVALS(X,NS,NR,AVT,VRT,USE_OMP)
d155 11
a165 11
        REAL, INTENT(IN)              :: X(NS,NR)
        INTEGER, INTENT(IN)           :: NS,NR
        DOUBLE PRECISION, INTENT(OUT) :: AVT,VRT
        LOGICAL, INTENT(IN)           :: USE_OMP

        DOUBLE PRECISION              :: AVG,VR,DTEMP
        INTEGER                       :: N,J,I

        AVG  = 0.0
        VR   = 0.0
        N    = NS*NR
d168 10
a177 8
c$omp      parallel do private(j,i),reduction(+:avg,vr)
           DO J=1,NR
               DO I=1,NS
                  AVG = AVG + X(I,J)
                  VR  = VR  + X(I,J) * X(I,J)
               ENDDO
            ENDDO
c$omp       end parallel do
d180 6
a185 4
           DO J=1,NR
              DO I=1,NS
                 AVG = AVG + X(I,J)
                 VR  = VR  + X(I,J) * X(I,J)
d190 3
a192 2
        AVT   = AVG / N
        DTEMP = (VR - N * AVT * AVT)
a193 1
C       MULTIPLICATION IS FASTER
d195 1
a195 1
           VRT   = DSQRT(DTEMP / DBLE(N-1))
d197 2
a198 2
C          TRAP FOR BLANK IMAGE AREA
           VRT = 0
d203 1
d205 3
a207 1
        SUBROUTINE NORMVALSP(X,NS,NR, NSP,NRP, DAVT,DVRT,USE_OMP)
d211 4
a214 4
        REAL, INTENT(IN)              :: X(NSP,NRP) ! PADDED  SIZE
        INTEGER, INTENT(IN)           :: NS,NR      ! ANALYZED SIZE 
        INTEGER, INTENT(IN)           :: NSP,NRP   
        DOUBLE PRECISION, INTENT(OUT) :: DAVT,DVRT 
d217 2
a218 2
        DOUBLE PRECISION              :: AVG,VR,DTEMP
        INTEGER                       :: N,J,I       
d220 3
a222 3
        AVG  = 0.0
        VR   = 0.0
        N    = NS*NR
d225 10
a234 8
c$omp      parallel do private(j,i),reduction(+:avg,vr)
           DO J=1,NR
               DO I=1,NS
                  AVG = AVG + X(I,J)
                  VR  = VR  + X(I,J) * X(I,J)
               ENDDO
            ENDDO
c$omp       end parallel do
d237 6
a242 4
           DO J=1,NR
              DO I=1,NS
                 AVG = AVG + X(I,J)
                 VR  = VR  + X(I,J) * X(I,J)
d247 3
a249 2
        DAVT  = AVG / N
        DTEMP = (VR - N * DAVT * DAVT)
d252 1
a252 1
           DVRT   = DSQRT(DTEMP / DBLE(N-1))
d254 2
a255 2
C          TRAP FOR BLANK IMAGE AREA
           DVRT = 0
d259 1
@


1.12
log
@added incore normvals
@
text
@d5 4
a8 3
C                       SIG FOR BLANK IMAGE FLOAT SLOP JAN 06 A. LEITH
C                       FLOAT                          APR 07 A. LEITH
C                       ERROR MESSAGES                 NOV 10 A. LEITH
d13 1
a13 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d192 49
@


1.11
log
@error messages & cosmetic
@
text
@d108 86
@


1.10
log
@GPL_2010
@
text
@d5 3
a7 3
C                       SIG FOR BLANK IMAGE FLOAT SLOP JAN 06 A. Leith
C                       FLOAT                          APR 07 A. Leith
C
d32 1
a32 1
C    PURPOSE:   DETERMINES MAX, MIN, AV, AND SIG FOR A SPIDER IMAGE
d35 8
a42 5
C        LUN          LOGICAL UNIT NUMBER OF IMAGE
C        NSAM,NROW,NSLICE    DIMENSIONS OF VOLUME
C        FMAX         MAXIMUM OF VOLUME
C        FMIN         MINIMUM OF VOLUME
C        AV           AVERAGE OF VOLUME
d57 1
a58 1
         WRITE(NOUT,*) '*** NSAM,NROW,NSLICE:',NSAM,NROW,NSLICE
d98 1
a98 2
         WRITE(NOUT,*) '*** FNALL(',FNALL,') GIVES DIV. BY 0' 
         CALL ERRT(31,'NORM3',NE)
d101 1
a101 1
C        CAN CALC. SIG
@


1.9
log
@float
@
text
@a8 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2007  Health Research Inc.                      *
d10 5
a14 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d16 1
a16 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.8
log
@blank image neg. sqrt hack
@
text
@d6 1
d10 1
a10 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d56 1
a56 1
      FNALL = (NSAM * NROW * NSLICE)
d58 1
a58 1
         CALL ERRT(1,'NORM3',NE)
@


1.7
log
@GPL License fixed
@
text
@d5 1
d86 5
a90 1
      IF (DTOP .LT. 0.0D0) THEN
d92 4
a95 6
         WRITE(NOUT,*) '*** SQRT(',DTOP,') IMPOSSIBLE' 
         DTEMP = DAV * DAV / FNALL
         WRITE(NOUT,*) '*** DAV2: ',DAV2,'DAV*DAV/FNALL:',DTEMP 
         CALL ERRT(31,'NORM3',NE)
         RETURN

d101 3
a105 2
      SIG = DSQRT( DTOP / DBLE(FNALL - 1.0))

@


1.6
log
@HRI GPL License used
@
text
@a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.5
log
@setmin is slower
@
text
@d8 24
@


1.4
log
@a
@
text
@d4 1
a4 1
C    NORM3.FOR
d6 8
a13 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d17 1
a17 1
C    PURPOSE:   DETERMINES MAX, MIN, AV AND SIG FOR A SPIDER IMAGE
d32 1
a32 1
     1               AVC,SIG,IHIST
a35 1
      LOGICAL          SETMIN
d44 2
a45 3
      DAV    = 0.
      DAV2   = 0.
      SETMIN = .TRUE.
d47 3
d51 2
a52 7
          CALL REDLIN(LUN,BUF,NSAM,IRECT)
           IF (SETMIN)  THEN
              FMAX   = BUF(1)
              FMIN   = FMAX
              SETMIN = .FALSE.
           ENDIF
          DO K = 1,NSAM
d54 2
a55 2
            FMAX = AMAX1(B,FMAX)
            FMIN = AMIN1(B,FMIN)
a60 1
   
d67 1
d83 1
a83 1
      SIG   = DSQRT( DTOP / DBLE(FNALL-1.0))
@


1.3
log
@0.0D0
@
text
@d38 1
a38 1
CNO_SAVE
@


1.2
log
@nosave
@
text
@d73 1
a73 1
      IF (DTOP .LT. 0.0) THEN
a91 1
      RETURN
@


1.1
log
@Initial revision
@
text
@d38 1
a38 1

@
