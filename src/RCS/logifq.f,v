head	1.15;
access;
symbols
	pre_mrcs:1.15
	healthdept_2018:1.15
	pre_getangas:1.11
	GPL2010:1.11
	pre_GPL2010:1.10
	pre_var_equation:1.8
	pre_fftwrings:1.8
	pre_opfiles:1.7
	src:1.7
	best-code:1.6
	x-named-regs:1.6
	x:1.6
	v13-00:1.6
	pre_GPL:1.4
	prec_CA:1.4
	noindx:1.4
	Bproc:1.4
	oct21:1.3
	last77:1.3;
locks; strict;
comment	@c @;


1.15
date	2018.10.03.14.34.09;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2011.12.07.13.49.32;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2011.12.06.14.21.21;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2011.12.05.19.58.10;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2010.06.24.13.26.04;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2010.04.20.15.50.02;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2009.06.26.13.59.26;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2008.01.25.14.49.13;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2006.11.20.16.37.23;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.17.20.49.02;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.17.18.39.26;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.11.10.23.09.35;	author yuchen;	state Exp;
branches;
next	1.3;

1.3
date	97.09.17.15.53.18;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	96.09.25.16.23.26;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.49.54;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.15
log
@email_health_dept
@
text
@

C++*********************************************************************
C                                                                      *
C LOGIFQ.F     ADAPTED   FOR CHAR. VARIABLES      AUG  89 ArDean Leith *
C              UNCONDITIONAL JUMP ADDED           SEPT 96 ArDean Leith *
C              IF (...) THEN IMPLEMENTED          SEPT 97 ArDean Leith *
C              EXIT ADDED                         NOV  06 ArDean Leith *
C              ARASW GLOBAL                       JUN  09 ArDean Leith *
C              [SYMVAR] SUPPORT                   APR  10 ArDean Leith *
C              <==>! SUPPORT                      DEC  11 ArDean Leith *
C             ! COMMENT DELIMITER                 DEC  11 ArDean Leith *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2011  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    LOGIFQ(STRING,LABEL,JUMP,IER)
C
C    PURPOSE:     EVALUATES STRING SUCH AS: IF([x].LE.5) GOTO LB77
C                 OR: IF([x].LE.5) THEN
C                 RETURNS THE LB77, AND A LOGICAL FLAG WHETHER ONE 
C                 SHOULD FOLLOW THE GOTO TO THE LABEL/ELSE LOCATION.
C                 ALSO ACCEPTS STRING SUCH AS: IF ([X].LE.5) [y]=9
C                 AND EVALUATES THE SECOND EXPRESSION BEFORE
C                 RETURNING.
C
C    PARAMETERS:  STRING       INPUT LINE                  (SENT)
C                 LABEL        LABEL STRING                (RETURNED)
C                 JUMP         FLAG TO FOLLOW GOTO         (RETURNED)
C                 IERR         ERROR FLAG (1 IS ERROR)     (RETURNED)
C
C--*********************************************************************

      SUBROUTINE LOGIFQ(STRING,LABEL,JUMP,IER)

      IMPLICIT NONE
      INCLUDE 'CMBLOCK.INC'


      CHARACTER(LEN=*)   :: STRING,LABEL
      LOGICAL            :: JUMP
      INTEGER            :: IER

      CHARACTER(LEN=160) :: ST,TMPST
      CHARACTER(LEN=1)   :: NULL = CHAR(0)
      CHARACTER(LEN=1)   :: CTEMP
      INTEGER            :: RHEXP
      INTEGER            :: IEVAL,IND,MAXCH,ISEMICOL,IGOBRAK,NLP,ICHAR
      INTEGER            :: IFL,NXSTR,NNP,LHEXP,NRHP,IFUNC,IRTFLG
      INTEGER            :: IFLAG,N3,IGO,ITHEN,IEXIT,ICYCLE,NSTART,ILB
      INTEGER            :: ITAB,NE
      REAL               :: F1,F2

      CHARACTER(LEN=4)   :: COMPNEW = '<=>/'

      LOGICAL            :: BOOL(6,3) = RESHAPE(
     &     (/.FALSE.,.FALSE.,.TRUE., .TRUE., .FALSE.,.TRUE.,
     &       .TRUE., .TRUE., .TRUE., .FALSE.,.FALSE.,.FALSE.,
     &       .FALSE.,.TRUE., .FALSE.,.TRUE., .TRUE., .FALSE./),
     &     (/6,3/) )

      CHARACTER(LEN=2), PARAMETER ::COMP1(6) = 
     &                  (/'EQ','GE','LE','NE','GT','LT'/)
      CHARACTER(LEN=2), PARAMETER ::COMP2(6) = 
     &                  (/'==','>=','<=','/=','> ','< '/)

C     IEVAL WILL BE SWITCHED ON IF EXPRESSION FOUND IN 3RD POSITION
      IEVAL = 0  
      IND   = 0

C     SET NO ERROR FLAG
      IER   = 0

C     REMOVE BLANKS FROM INPUT STRING, PUT OUTPUT IN: ST
      CALL SHRINKQ(STRING,160,ST,MAXCH)

C     REMOVE ANY COMMENT FROM INPUT STRING
      ISEMICOL = SCAN(ST,';!')
      IF (ISEMICOL .GT. 0) MAXCH = ISEMICOL - 1

C     SEE IF '[' AND ']' NEED SYMBOL SUBSTITUTION, apr 2010 al
      IGOBRAK = INDEX(ST(1:MAXCH), '[') 
      IF (IGOBRAK .GT. 0) THEN
C         '[' AND ']' MAY NEED SYMBOL SUBSTITUTION E.G. [str]
          CALL SUBSYMPAR(ST(1:MAXCH),TMPST,MAXCH,0,IRTFLG)
          ST = TMPST
      ENDIF

C     LOOK FOR (
      NLP = INDEX(ST(:MAXCH),'(')
      IF (NLP .LE. 0) THEN
C        NO '(' FOUND, MAY BE PLAIN GOTO LB#
         ICHAR = INDEX(ST(1:MAXCH),'GOTOLB')
         IF (ICHAR <= 0) THEN
C           ERROR, NO 'GOTO' FOUND
            ICHAR = 1
            IFL   = 9
            GOTO 900   ! ERROR
         ENDIF
C        COPY LABEL STRING
         LABEL(1:5) = ST(ICHAR+4:ICHAR+7) // NULL
         JUMP       = .TRUE.
         RETURN
      ENDIF

C     ICHAR IS THE CURRENT POSITION IN ST
      ICHAR = NLP + 1

C     LOOK FOR FIRST PERIOD DELIMITER
      NXSTR = 2
      LHEXP = 0
      NNP   = 1

C     COMPUTE NNP: BALANCE OF ( AND ) { = NO. OF ('S MINUS NO OF )'S}
      DO 
         CTEMP = ST(ICHAR:ICHAR)
         IF (CTEMP == '.')                  EXIT ! START OF COMPARATOR
         IF (INDEX(COMPNEW(1:3),CTEMP) > 0) EXIT ! START OF COMP.: <=>
         IF ((ICHAR+1) <= MAXCH .AND.
     &        ST(ICHAR:ICHAR+1) .EQ. '/=')   EXIT ! START OF COMP.: /=

         IF (CTEMP == '(') NNP = NNP + 1
         IF (CTEMP == ')') NNP = NNP - 1
         ICHAR = ICHAR + 1
         IFL   = 2
         IF (ICHAR > MAXCH) GOTO 900   ! ERROR
         LHEXP = LHEXP + 1
      ENDDO

C     BEGINNING OF COMPARATOR FOUND (PART OF .LOGICAL. EXPRESSION)
26    IFL = 3
      IF (LHEXP .EQ. 0) GOTO 900   ! ERROR

C     EVALUATE LHEXP
      CALL EXPRQ(ST(NLP+1:),LHEXP,F1,IFLAG)
      IFL = 4
      IF (IFLAG .NE. 0) GOTO 900   ! ERROR

C     ICHAR NOW POINTS TO FIRST PERIOD OR NEW COMPARATOR
      DO IFUNC = 1,6
         IF (ST(ICHAR+1:ICHAR+2) == COMP1(IFUNC)(1:2)) THEN
            ICHAR = ICHAR + 4
            GOTO 60
         ENDIF
      ENDDO
      DO IFUNC = 1,4
         IF (ST(ICHAR:ICHAR+1)   == COMP2(IFUNC)(1:2)) THEN 
            ICHAR = ICHAR + 2
            GOTO 60
         ENDIF
      ENDDO
      DO IFUNC = 5,6
         IF (ST(ICHAR:ICHAR)     == COMP2(IFUNC)(1:1)) THEN
            ICHAR = ICHAR + 1
            GOTO 60
         ENDIF
      ENDDO
C     ERROR, LOGICAL COMPARATOR NOT IDENTIFABLE
      IFL = 5
      GOTO 900   ! ERROR


C     LOGICAL COMPARATOR IDENTIFIED
60    NRHP  = ICHAR

C     FIND RIGHT HAND EXPRESSION
      RHEXP = 0
      DO
         CTEMP = ST(ICHAR:ICHAR)
         IF (CTEMP == '(')  NNP = NNP + 1
         IF (CTEMP == ')')  NNP = NNP - 1
         IF (NNP == 0 .AND. CTEMP ==')') GOTO 64
         ICHAR = ICHAR + 1
         IFL   = 6
         IF (ICHAR > MAXCH) GOTO 900  ! ERROR
         RHEXP = RHEXP + 1
      ENDDO


64    IFL = 7
      IF (RHEXP == 0) GOTO 900
      N3 = ICHAR

C     EVALUATE RHEXP
      CALL EXPRQ(ST(NRHP:NRHP+RHEXP-1),RHEXP,F2,IFLAG)
      IFL = 8
      IF (IFLAG .NE. 0) GOTO 900   ! ERROR

C     ICHAR NOW POINTS TO THE )

      IGO   = INDEX(ST(ICHAR+1:MAXCH),'GO')
      IF (IGO .LE. 0) THEN
C        NO 'GOTO' ENCOUNTERED, DOES IT HAVE 'THEN'
         ITHEN  = INDEX(ST(ICHAR+1:MAXCH),'THEN')
         IEXIT  = INDEX(ST(ICHAR+1:MAXCH),'EXIT')
         ICYCLE = INDEX(ST(ICHAR+1:MAXCH),'CYCLE')
         IF (ITHEN > 0) THEN
C           HAS A 'THEN' INSTEAD OF A GOTO LABEL
            LABEL(1:5) = 'ELSE' // NULL

         ELSEIF (IEXIT > 0) THEN
C           HAS A 'EXIT' , MAY WANT TO FIND ENDDO
            LABEL(1:5) = 'ENDDO'

         ELSEIF (ICYCLE > 0) THEN
C           HAS A 'CYCLE', MAY WANT TO FIND ENDDO
            LABEL(1:5) = 'CYCLE'

         ELSE
C           NO 'THEN' SO SUBMIT TO EXPRESSION EVALUATOR
            LABEL(1:1) = ' '
            NSTART     = ICHAR + 1
            IEVAL      = 1
         ENDIF
      ELSE
C        SEARCH FOR "LB#"
         ILB = INDEX(ST,'GOTOLB')
         IF (ILB <= 0) THEN
C           ERROR, NO 'GOTOLB#' FOUND
            IFL = 9
            GOTO 900   ! ERROR
         ENDIF

C        ICHAR NOW POINTS TO THE LB# STRING
         ICHAR = ILB + 4

C        CHARACTERS "LB" FOUND.  COPY LABEL STRING
         LABEL(1:5) = ST(ICHAR:ICHAR+3) // NULL
      ENDIF

C     APPLY COMPARATION COMPUTATION.
      IF (F1 < F2) THEN
         ITAB = 1
      ELSEIF (F1 == F2) THEN
         ITAB = 2
      ELSE
         ITAB = 3
      ENDIF

C     SET JUMP
      JUMP = BOOL(IFUNC,ITAB)

C     LOGICAL VALUE NEGATED FOR IF...THEN JUMP
      IF (LABEL(1:4) == 'ELSE') JUMP = .NOT. JUMP

      IF ((LABEL(1:5) == 'ENDDO' .OR.
     &    LABEL(1:5) == 'CYCLE') .AND. (.NOT. JUMP)) THEN
C         'IF' FAILED SO JUST CONTINUE WITH OPERATION STREAM
          LABEL = ' '
          RETURN
      ENDIF

      IF (IEVAL .EQ. 0) RETURN
      IF (.NOT. JUMP)   RETURN

C     EVALUATE REGISTER EXPRESSION
      CALL ARASQ(ST(N3+1:N3+MAXCH-NRHP),MAXCH-NRHP,.FALSE.,IER)
      IF (IER .NE. 0) THEN
         WRITE(NOUT,904) ST(N3+1:N3+MAXCH-NRHP)
904      FORMAT(' *** ERROR EVALUATING: ',A)
         CALL ERRT(100,'LOGIFQ',NE)
      ENDIF
      RETURN



C     ERROR HANDLER
900   WRITE(NOUT,901) ST(ICHAR:MAXCH)
901   FORMAT(' *** IF STATEMENT SYNTAX ERROR STARTING AT: ',A)
      CALL ERRT(100,'LOGIFQ',NE)
      IER = 1

      END
@


1.14
log
@ST(ICHAR:ICHAR+1) .EQ. '/=' bug fixed
@
text
@d19 1
a19 1
C=* Email: spider@@wadsworth.org                                        *
@


1.13
log
@! COMMENT DELIMITER
@
text
@d135 4
a138 2
         IF (CTEMP == '.')             EXIT
         IF (INDEX(COMPNEW,CTEMP) > 0) EXIT
@


1.12
log
@added <>==/ support
@
text
@d12 1
d96 1
a96 1
      ISEMICOL = INDEX(ST,';')
@


1.11
log
@GPL_2010
@
text
@d4 8
a11 7
C
C LOGIFQ.F     ADAPTED   FOR CHAR. VARIABLES        AUG  89 ArDean Leith
C              UNCONDITIONAL JUMP ADDED             SEPT 96 ArDean Leith
C              IF (...) THEN IMPLEMENTED            SEPT 97 ArDean Leith
C              EXIT ADDED                           NOV  06 ArDean Leith
C              ARASW GLOBAL                         JUN  09 ArDean Leith
C              [SYMVAR] SUPPORT                     APR  10 ArDean Leith
d16 1
a16 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d53 1
a56 1
      INTEGER            :: RHEXP
d58 3
d62 21
a82 9
      CHARACTER(LEN=2)   :: COMP(6)
      LOGICAL            :: JUMP,BOOL(6,3)
      CHARACTER(LEN=1)   :: NULL

      DATA BOOL/.FALSE.,.FALSE.,.TRUE., .TRUE., .FALSE.,.TRUE.,
     1          .TRUE., .TRUE., .TRUE., .FALSE.,.FALSE.,.FALSE.,
     2          .FALSE.,.TRUE., .FALSE.,.TRUE., .TRUE., .FALSE./

      DATA COMP/'EQ', 'GE', 'LE', 'NE', 'GT', 'LT'/
a86 1
      NULL  = CHAR(0)
d91 1
a91 1
C     REMOVE BLANKS FROM INPUT STRING, PUT OUTPUT IN ST
d109 1
a109 1
C        NO ( FOUND, MAY BE PLAIN GOTO LB#
d111 1
a111 1
         IF (ICHAR .LE. 0) THEN
d115 1
a115 1
            GOTO 900
d119 1
a119 1
         JUMP = .TRUE.
d132 7
a138 3
25    IF (ST(ICHAR:ICHAR) .EQ. '.') GOTO 26
         IF (ST(ICHAR:ICHAR) .EQ. '(') NNP = NNP + 1
         IF (ST(ICHAR:ICHAR) .EQ. ')') NNP = NNP - 1
d141 1
a141 1
         IF (ICHAR .GT. MAXCH) GOTO 900
d143 1
a143 2
      GOTO 25

d145 1
a145 1
C     PERIOD FOUND (PART OF .LOGICAL. EXPRESSION)
d147 1
a147 1
      IF (LHEXP .EQ. 0) GOTO 900
d152 1
a152 1
      IF (IFLAG .NE. 0) GOTO 900
d154 1
a154 1
C     ICHAR NOW POINTS TO FIRST PERIOD
d156 16
a171 1
         IF (ST(ICHAR+1:ICHAR+2) .EQ. COMP(IFUNC)(1:2))  GOTO 60
a172 1

d175 2
a176 1
      GOTO 900
d179 1
a179 2
60    ICHAR = ICHAR + 4
      NRHP  = ICHAR
d183 6
a188 4
61    IF (ST(ICHAR:ICHAR) .EQ. '(')  NNP = NNP + 1
         IF (ST(ICHAR:ICHAR) .EQ. ')')  NNP = NNP - 1
         IF (NNP .EQ. 0 .AND. ST(ICHAR:ICHAR) .EQ.')') GOTO 64
         ICHAR = ICHAR+1
d190 3
a192 3
         IF (ICHAR .GT. MAXCH) GOTO 900
         RHEXP = RHEXP+1
      GOTO 61
d196 1
a196 1
      IF (RHEXP .EQ. 0) GOTO 900
d202 1
a202 1
      IF (IFLAG .NE. 0) GOTO 900
d212 1
a212 1
         IF (ITHEN .GT. 0) THEN
d216 1
a216 1
         ELSEIF (IEXIT .GT. 0) THEN
d220 1
a220 1
         ELSEIF (ICYCLE .GT. 0) THEN
d227 1
a227 1
            NSTART     = ICHAR+1
d233 1
a233 1
         IF (ILB .LE. 0) THEN
d236 1
a236 1
            GOTO 900
d247 1
a247 1
      IF (F1 .LT. F2) THEN
d249 1
a249 1
      ELSEIF (F1 .EQ. F2) THEN
d257 1
d259 1
a259 1
      IF (LABEL(1:4) .EQ. 'ELSE') JUMP = .NOT. JUMP
d261 2
a262 2
      IF ((LABEL(1:5) .EQ. 'ENDDO' .OR.
     &    LABEL(1:5) .EQ. 'CYCLE') .AND. (.NOT. JUMP)) THEN
d281 1
a287 1
      RETURN
@


1.10
log
@SEE IF '[' AND ']' NEED SYMBOL SUBSTITUTION
@
text
@d12 3
a14 2
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
d26 1
a26 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a27 1
C=*                                                                    *
@


1.9
log
@global flag in arasq parameters now
@
text
@d10 1
d12 5
a16 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d18 1
a18 6
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d23 1
a23 1
C=* This program is distributed in the hope that it will be useful,    *
d29 1
a29 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d35 2
a36 1
C    PURPOSE:     EVALUATES STRING SUCH AS: IF(X.LE.5) GOTO LB77
d38 3
a40 3
C                 SHOULD FOLLOW THE GOTO TO THE LABEL LOCATION.
C                 ALSO ACCEPTS STRING SUCH AS: IF (X.LE.5) (X11=9)
C                 AND WILL EVALUATE THE SECOND EXPRESSION BEFORE
d55 6
a60 6
      INTEGER           :: RHEXP
      CHARACTER(LEN=*)  :: STRING,LABEL
      CHARACTER(LEN=80) :: ST
      CHARACTER(LEN=2)  :: COMP(6)
      LOGICAL           :: JUMP,BOOL(6,3)
      CHARACTER(LEN=1)  :: NULL
d77 1
a77 1
      CALL SHRINKQ(STRING,80,ST,MAXCH)
d82 8
@


1.8
log
@ null in label(5:5) needed
@
text
@d9 1
d12 1
a12 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d231 1
a231 1
      CALL ARASQ(ST(N3+1:N3+MAXCH-NRHP),MAXCH-NRHP,IER)
@


1.7
log
@enddo, cycle, exit
@
text
@d61 1
d72 1
d96 1
a96 1
         LABEL(1:4) = ST(ICHAR+4:ICHAR+7)
d173 1
a173 1
            LABEL(1:4) = 'ELSE'
d202 1
a202 1
         LABEL(1:4) = ST(ICHAR:ICHAR+3)
@


1.6
log
@GPL License fixed
@
text
@d2 1
d5 4
a8 4
C LOGIFQ.F     ADAPTED FROM LOGIF.F FOR CHAR. VARIABLES AUG 89 al
C              UNCONDITIONAL JUMP ADDED SEPT 96                al
C              IF (...) THEN IMPLEMENTED SEPT 97               al
C
d56 5
a60 5
      INTEGER        RHEXP
      CHARACTER *(*) STRING,LABEL
      CHARACTER *80  ST
      CHARACTER *2   COMP(6)
      LOGICAL        JUMP,BOOL(6,3)
d163 1
a163 1
      IGO = INDEX(ST(ICHAR+1:MAXCH),'GO')
d166 3
a168 1
         ITHEN = INDEX(ST(ICHAR+1:MAXCH),'THEN')
d172 9
d217 7
d227 1
a227 1
C     EVALUATE EXPRESSION
@


1.5
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a8 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d12 1
a12 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a31 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
a32 1
C **************************************************************************
a48 1
C--*************************************************************************
@


1.4
log
@a
@
text
@d2 1
d9 1
d11 1
d13 24
d43 1
d60 1
@


1.3
log
@if...else added
@
text
@d37 1
a37 1
CNO_SAVE
@


1.2
log
@added plain goto code, cosmetic
@
text
@d6 1
d20 6
a25 4
C    PARAMETERS:         STRING       INPUT LINE             (SENT)
C                        LABEL        LABEL STRING           (RETURNED)
C                        JUMP         FLAG TO FOLLOW GOTO    (RETURNED)
C                        IERR         ERROR FLAG (1 IS ERROR)(RETURNED)
d27 5
d45 3
a47 3
      DATA BOOL/.FALSE.,.FALSE.,.TRUE.,.TRUE.,.FALSE.,.TRUE.,
     1          .TRUE.,.TRUE.,.TRUE.,.FALSE.,.FALSE.,.FALSE.,
     2          .FALSE.,.TRUE.,.FALSE.,.TRUE.,.TRUE.,.FALSE./
d54 1
d58 1
a58 1
C     REMOVE BLANKS FROM INPUT STRING
d61 4
d148 11
a158 4
C        NO 'GOTO' ENCOUNTERED, SUBMIT TO EXPRESSION EVALUATOR
         LABEL(1:1) = ' '
         NSTART     = ICHAR+1
         IEVAL      = 1
d186 3
d194 5
d203 4
a206 4
900   PARAM(10) = 1.0
      IER       = 1
      WRITE(NOUT,901) ST(ICHAR:MAXCH)
901   FORMAT(' *** SYNTAX ERROR STARTING AT: ',A)
@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
C $$ LOGIFQ.FOR
C                ADAPTED FROM LOGIF.FOR FOR CHAR. VARIABLES AUG 89 al
d17 1
d19 4
a22 1
C $$ LOGIFQ(STRING,LABEL,JUMP,IER)
a23 5
C    PARAMETERS:         STRING    
C                        LABEL
C                        JUMP
C                        IERR
C
d28 2
a29 4
      COMMON/PARAM/ PARAM(103)
      COMMON/DOLOOP/ IALPHA(26)
      COMMON/UNITS/LUN,NIN,NOUT
      COMMON/FUNCTION/FCHAR
d31 1
a31 1
      INTEGER RHEXP
d33 2
a34 2
      CHARACTER *80  FCHAR,ST
      CHARACTER *2   COMP(6),LST
a42 2
C     LOOK FOR LEFT PARENTHESIS

d45 5
a49 1
      IND = 0
d52 1
d55 12
a66 3
C        NO LP FOUND
         IFL =1
         GOTO 900
d70 1
a70 1
      ICHAR = NLP 
d77 1
a77 2
C     NNP IS BALANCE OF LP AND RP (=NO OF LP'S MINUS NO OF RP'S)
      ICHAR=ICHAR+1
d79 6
a84 6
      IF (ST(ICHAR:ICHAR) .EQ. '(') NNP = NNP+1
      IF (ST(ICHAR:ICHAR) .EQ. ')') NNP = NNP-1
      ICHAR = ICHAR+1
      IFL   = 2
      IF (ICHAR .GT. MAXCH) GOTO 900
      LHEXP = LHEXP+1
d87 2
d91 2
d98 3
a100 1
      LST(1:2) = ST(ICHAR+1:ICHAR+2)
d102 1
a102 7
      DO 50 I = 1,6
         IF (LST(1:2) .EQ. COMP(I)(1:2)) THEN
            IFUNC = I
            GOTO 60
         ENDIF
50    CONTINUE
C     COMPARATOR NOT FOUND
d106 1
a106 1
C     COMPARATOR IDENTIFIED
d108 1
a108 1
      NRHP=ICHAR
d110 1
d112 7
a118 7
61    IF (ST(ICHAR:ICHAR) .EQ. '(')  NNP = NNP+1
      IF (ST(ICHAR:ICHAR) .EQ. ')')  NNP = NNP-1
      IF (NNP .EQ. 0 .AND. ST(ICHAR:ICHAR) .EQ.')') GOTO 64
      ICHAR = ICHAR+1
      IFL   = 6
      IF (ICHAR .GT. MAXCH) GOTO 900
      RHEXP = RHEXP+1
d121 1
d125 2
d130 17
a146 23
C     ICHAR NOW POINTS TO THE RIGHT HAND PARENTHESIS
C     FIRST SEARCH FOR 'G'. IF NO 'GOTO' ENCOUNTERED, SUBMIT TO
C     EXPRESSION EVALUATOR

95    DO 98 K=1,10
        IF (ST(ICHAR+K:ICHAR+K) .NE. 'G') GOTO 98
        GOTO 99
98    CONTINUE

C     NO 'GOTO' FOUND
      LABEL(1:1) = ' '
      NSTART = ICHAR+1
      IEVAL  = 1
      GOTO 115

C     NOW SEARCH FOR "LB#"
99    DO 100 K = 1,10
         IF (ST(ICHAR+K:ICHAR+K) .NE. 'L') GOTO 100
         ICHAR = ICHAR+K
         GOTO 110
100   CONTINUE
      IFL = 9
      GOTO 900
d148 2
a149 7
C     CHARACTER "L" FOUND. NOW CHECK FOR "B" TO BE SURE.
110   IF (ST(ICHAR+1:ICHAR+1) .NE. 'B') GOTO 900
C     COPY LABEL STRING
      LABEL(1:4) = ST(ICHAR:ICHAR+3)

C     NOW APPLY LOGICAL IF COMPUTATION.
115   IF (F1-F2) 120,130,140
d151 3
a153 2
120   ITAB = 1
      GOTO 150
d155 8
a162 2
130   ITAB = 2
      GOTO 150
d164 2
a165 2
140   ITAB = 3
150   JUMP = BOOL(IFUNC,ITAB)
d167 3
a169 1
      IF (.NOT. JUMP)  RETURN
d173 7
a179 4
900   PARAM(10) = 1.
      IER = 1
      WRITE(NOUT,901)IFL,ICHAR,ST(ICHAR:ICHAR)
901   FORMAT(' *** COMMAND SYNTAX ERROR',2I4,1X,A1)
@
