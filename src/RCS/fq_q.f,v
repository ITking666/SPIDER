head	1.48;
access;
symbols
	pre_getangas:1.37
	GPL2010:1.37
	pre_GPL2010:1.36
	pre_var_equation:1.36
	pre_fftwrings:1.36
	pre_opfiles:1.33
	src:1.33
	best-code:1.33
	x-named-regs:1.32
	x:1.32
	v13-00:1.32
	pre_GPL:1.30
	prec_CA:1.29
	noindx:1.29
	Bproc:1.23
	oct21:1.22
	last77:1.19;
locks; strict;
comment	@c @;


1.48
date	2014.12.03.15.00.01;	author leith;	state Exp;
branches;
next	1.47;

1.47
date	2014.11.18.18.49.58;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2014.11.17.17.08.37;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2014.02.28.15.29.24;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2013.10.23.13.24.17;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2013.04.29.14.11.09;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2013.04.26.15.25.03;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2012.12.04.16.59.55;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	2012.11.28.19.12.53;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2012.10.15.18.14.10;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2012.07.17.17.38.31;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2010.06.24.13.25.46;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2007.03.21.19.44.36;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2007.03.13.14.51.14;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2007.03.12.18.25.18;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2005.12.19.18.16.12;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2005.10.17.19.59.26;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2005.10.17.17.55.30;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2005.09.19.16.04.22;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2002.08.28.23.03.39;	author pawel;	state Exp;
branches;
next	1.28;

1.28
date	2002.08.21.19.12.36;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2002.08.19.18.09.08;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2002.03.11.14.07.46;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2000.12.05.10.00.32;	author bimal;	state Exp;
branches;
next	1.24;

1.24
date	2000.12.05.09.57.31;	author bimal;	state Exp;
branches;
next	1.23;

1.23
date	99.11.13.20.45.16;	author pawel;	state Exp;
branches;
next	1.22;

1.22
date	99.09.29.20.44.13;	author pawel;	state Exp;
branches;
next	1.21;

1.21
date	99.09.20.18.44.57;	author pawel;	state Exp;
branches;
next	1.20;

1.20
date	99.06.03.20.50.52;	author pawel;	state Exp;
branches;
next	1.19;

1.19
date	98.03.05.15.49.58;	author pawel;	state Exp;
branches;
next	1.18;

1.18
date	98.03.05.15.38.38;	author pawel;	state Exp;
branches;
next	1.17;

1.17
date	98.02.26.16.48.12;	author pawel;	state Exp;
branches;
next	1.16;

1.16
date	98.02.12.17.15.21;	author pawel;	state Exp;
branches;
next	1.15;

1.15
date	97.10.06.20.43.51;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	97.07.30.13.18.53;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	96.11.22.15.32.58;	author ramani;	state Exp;
branches;
next	1.12;

1.12
date	96.08.29.21.21.30;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	96.08.29.17.49.58;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	96.01.16.15.38.29;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	95.06.27.20.18.38;	author mladjadj;	state Exp;
branches;
next	1.8;

1.8
date	95.04.12.19.56.14;	author ramani;	state Exp;
branches;
next	1.7;

1.7
date	94.12.27.18.18.08;	author ramani;	state Exp;
branches;
next	1.6;

1.6
date	94.12.23.21.23.41;	author ramani;	state Exp;
branches;
next	1.5;

1.5
date	94.08.15.14.06.12;	author ramani;	state Exp;
branches;
next	1.4;

1.4
date	94.05.20.16.41.26;	author ramani;	state Exp;
branches;
next	1.3;

1.3
date	94.05.20.14.57.50;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.05.28;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.49.00;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.48
log
@note on nx vs nxf  used for x1
@
text
@
C++*********************************************************************
C
C FQ_Q.F                                        12/22/94  
C                RDPRAF REMOVED                 DEC 2005 ARDEAN LEITH 
C                COSINE FILTER                  JUL 2012 G. KISHCHENKO 
C                INCORE WITHOUT LUNS            OCT 2012 ARDEAN LEITH 
C                FREQ + PIXELS                  NOV 2012 G. KISHCHENKO 
C                PARM2 BUG                      DEC 2012 ARDEAN LEITH 
C                FREQ UNIT CUTOFF = 1           AUG 2013 ARDEAN LEITH 
C                RAISED SINC                    FEB 2014 ARDEAN LEITH 
C                PARM2 BUG                      NOV 2014 ARDEAN LEITH 
C        
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014, Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C FQ_Q.F(LUN,LUNO,B,LSD,N2X,N2Y,NX,NY,IOPT)
C
C PURPOSE: QUICK FILTERING OF REAL-SPACE IMAGE FILE BY FFT
C
C PARAMETERS:
C        LUN         I/O UNIT OF REAL-SPACE FILE TO BE FILTERED
C        LUNO        I/O UNIT OF REAL-SPACE OUTPUT FILE 
C        B           BUFFER 
C        NX,NY       DIMENSIONS OF REAL-SPACE FILE
C        N2X=2*NX    AT LEAST
C        N2Y=2*NY    "    "
C        IOPT        TYPE OF FILTER
C
C NOTE:  APPEARS TO HAVE UNDOCUMENTED AND UNTESTED ELLIPTICAL 
C        FILTRATION FOR OPTIONS: 1,2,3,4.   THIS WILL GIVE BAD 
C        ERRORS IF PERSON ENTERS MORE THAN ONE VALUE ON THE INPUT
C        PARAMETER LINE AS IT IS USED FOR ELLIPSES. al nov 2014
C
C        'FF' (ffilts.f)            SETS X1 TO: (NX  / 2)**2 BUT
C        'FQ' (four_fq.f or fq_q.f) SETS X1 TO: (NXF / 2)**2 WHERE
C             NX  IS X DIMENSION OF POSSIBLY PADDED IMAGE
C             NXF IS SLIGHTLY LARGER DUE TO MIXED RADIX FOURIER PAD
C        SO THEY GIVE SLIGHTLY DIFFERENT RESULTS.  I SUSPECT THAT
C        'FF' IS ACTUALLY CORRECT?
C
C23456789012345678901234567890123456789012345678901234567890123456789012  
C--*******************************************************************

        SUBROUTINE FQ_BUF(IOPTT,BFPS,PARM1T,PARM2T,TEMPT,
     &                    B, LSD,N2X,N2Y, NX,NY, IRTFLG)
        
        IMPLICIT NONE
	INCLUDE 'CMBLOCK.INC'

        INTEGER          :: IOPTT	
	REAL             :: BFPS(4)
	REAL             :: FP, FS
	REAL             :: PARM1T,PARM2T,TEMPT
	REAL             :: B(LSD,N2Y)
	INTEGER          :: LSD,N2X,N2Y
	INTEGER          :: NX,NY,IRTFLG

	REAL             :: PARM1,PARM2,TEMP,PARM,PARM22,X1,Y1
	REAL             :: F,F2,FPE,FSE,ORDT
	DOUBLE PRECISION :: AVE
	REAL             :: ORD,IPS,AA,PARMT,EPS,AVG
        INTEGER          :: IOPT,J,I,INV,IX,IY,NR2
	
        REAL, PARAMETER  :: PI = 3.14159265358979323846

        IOPT  = IOPTT
        PARM1 = PARM1T
        PARM2 = PARM2T
        TEMP  = TEMPT

	IF (N2X .NE. NX .AND. N2Y .NE. NY)  THEN
C          BORDER PADDING

	   AVE = (SUM(B(1:NX,1))   + SUM(B(1:NX,NY)) +
     &	          SUM(B(1,2:NY-1)) + SUM(B(NX,2:NY-1)) ) / 
     &		  REAL(2*(NX+NY)-4)

c$omp      parallel do private(i,j)
	   DO J=1,N2Y
	      DO I=NX+1,N2X
	         B(I,J) = AVE
	      ENDDO
	   ENDDO

c$omp      parallel do private(i,j)
	   DO J=NY+1,N2Y
	      DO I=1,NX
	         B(I,J) = AVE
	      ENDDO
	   ENDDO
	ENDIF

C       FORWARD FFT, 2XFFT PADDED
	INV = 1
	CALL FMRS_2(B,N2X,N2Y,INV)
	IF (INV == 0) THEN
	   IRTFLG = 1
	   RETURN
	ENDIF

C       BUTTERWORTH FILTER ***********************************

	IF (IOPT == 7 .OR. IOPT == 8 .OR.  
     &      IOPT == 9 .OR. IOPT == 10)  THEN

	   EPS = 0.882
	   AA  = 10.624
	   ORD = 2.0 * ALOG10(EPS / SQRT(AA**2-1.0) )

	   IF (BFPS(3) == 0.0 .AND. BFPS(4) == 0.0) THEN
	      ORD   = ORD / ALOG10(BFPS(1) / BFPS(2))
	      PARM1 = BFPS(1) / (EPS)**(2./ORD)
	   ELSE
C             BUTTERWORTH FILTER ELLIPTIC FILTER:
C             LOW-PASS  IOPT=11,  HIGH-PASS IOPT=12
	      IOPT = IOPT + 4
           ENDIF

	ELSE

	   IF (PARM1 <  0.0 .OR. PARM1 > 1.0) PARM1 = 0.5*PARM1/(NX/2)
	   IF (PARM2 == 0.0)                  PARM2 = PARM1
	   IF (PARM2 <  0.0 .OR. PARM2 > 1.0) PARM2 = 0.5*PARM2/(NY/2)

	   IF (IOPT == 5 .OR. IOPT == 6)  THEN

C             FERMI DISTRIBUTION FILTER ********************

C             EXPONENTIAL FOR HIGH-PASS OPTION
	      IF (IOPT == 6) TEMP = -TEMP
	   ENDIF
	ENDIF

	NR2    = N2Y / 2
	X1     = FLOAT(N2X/2)**2
	Y1     = FLOAT(NR2)  **2
	PARM   = PARM1**2
	PARM22 = PARM2**2

C       KEEP ZERO TERM FOR HIGH PASS OPTIONS
	AVG = B(1,1)

c$omp   parallel do private(i,j,ix,iy,f,fpe,fse,ordt,parmt,f2)
	DO J=1,N2Y
	   IY = (J-1)
	   IF (IY > NR2) IY = IY-N2Y

	   DO I=1,LSD,2
	      IX = (I-1)/2

	      IF (IOPT == 1) THEN
C                LOWPASS *************************************
                 IF (0.25*(FLOAT(IX*IX)/X1/PARM +
     &                     FLOAT(IY*IY)/Y1/PARM22) > 1.0) THEN
	            B(I,J)   = 0.0
	            B(I+1,J) = 0.0
	         ENDIF

	      ELSEIF (IOPT == 2) THEN	
C                HIGH PASS ***********************************
	         IF ( (IX.NE.0 .OR. IY.NE.0) .AND.
     &                0.25*(FLOAT(IX*IX)/X1/PARM + 
     &                      FLOAT(IY*IY)/Y1/PARM22) <= 1.0) THEN
	            B(I,J)   = 0.0
	            B(I+1,J) = 0.0
	         ENDIF

	      ELSEIF(IOPT == 3)  THEN
C                GAUSSIAN LOW PASS ***************************
	         F = 0.125*(FLOAT(IX*IX)/X1/PARM +
     &                      FLOAT(IY*IY)/Y1/PARM22)
	         IF (F < 16.0)  THEN
	            F        = EXP(-F)
                    B(I,J)   = B(I,J)  *F
                    B(I+1,J) = B(I+1,J)*F
	         ELSE
                    B(I,J)   = 0.0
                    B(I+1,J) = 0.0
	         ENDIF

	      ELSEIF (IOPT==4)  THEN	
C                GAUSSIAN HIGH PASS **************************

	         IF (IX .NE. 0 .OR. IY .NE. 0)  THEN
	            F = 0.125*(FLOAT(IX*IX)/X1/PARM +
     &                         FLOAT(IY*IY)/Y1/PARM22)
	            IF (F < 16.0)  THEN
	               F        = 1.0 - EXP(-F)
                       B(I,J)   = B(I,J)  *F
                       B(I+1,J) = B(I+1,J)*F
	            ENDIF
	         ENDIF

	      ELSEIF (IOPT == 5 .OR. IOPT == 6)  THEN
C                FERMI DISTRIBUTION FILTER *******************
	      
	         F = (0.5*SQRT(FLOAT(IX*IX)/X1 +
     &                         FLOAT(IY*IY)/Y1)-PARM1) / TEMP
	         F        = AMIN1(AMAX1(F,-10.0), 10.0)
                 F        = (1.0/(1.0+EXP(F)))

                 B(I,J)   = B(I,J)  *F
                 B(I+1,J) = B(I+1,J)*F

 	      ELSEIF (IOPT == 7) THEN
C                BUTTERWORTH LOWPASS FILTER ******************

 	         F        = 0.5*SQRT(FLOAT(IX*IX)/X1 +
     &                               FLOAT(IY*IY)/Y1)

 	         F        = SQRT(1.0/(1.0+(F/PARM1)**ORD))
                 B(I,J)   = B(I,J)  *F
                 B(I+1,J) = B(I+1,J)*F

 	      ELSEIF (IOPT == 8) THEN
C                BUTTERWORTH HIGHPASS FILTER *****************
	
                 IF (IX.NE.0 .OR. IY.NE. 0) THEN
 	            F = 0.5*SQRT(FLOAT(IX*IX)/X1 +
     &                           FLOAT(IY*IY)/Y1)
 	            F = (1.0-SQRT(1.0/(1.0+(F/PARM1)**ORD)))

                    B(I,J)   = B(I,J)*F
                    B(I+1,J) = B(I+1,J)*F
 	         ENDIF


 	      ELSEIF (IOPT == 9) THEN
C                RAISED COSINE LOWPASS FILTER ******************

	         F = 0.5*SQRT(FLOAT(IX*IX)/X1 +
     &                        FLOAT(IY*IY)/Y1)
C	         F = (F-BFPS(1)) / (BFPS(2)-BFPS(1))
	         F = (F-FP) / (FS-FP)

                 IF (F < 0) THEN
	            F2 = 1
                 ELSEIF (F > 1) THEN
	            F2 = 0
                 ELSE
	            F2 = 0.5 * (COS(PI*F)+1)
	         ENDIF

                 B(I,J)   = B(I,J)  *F2
                 B(I+1,J) = B(I+1,J)*F2

	      ELSEIF (IOPT == 10) THEN
C                RAISED COSINE HIGHPASS FILTER ******************

	         F = 0.5*SQRT(FLOAT(IX*IX)/X1 +
     &                        FLOAT(IY*IY)/Y1)
	         F = (F-BFPS(1)) / (BFPS(2)-BFPS(1))

                 IF (F < 0) THEN
                    F2 = 0
                 ELSEIF (F > 1) THEN
	            F2 = 1
                 ELSE
	            F2 = 0.5 * (-COS(PI*F)+1)
	         ENDIF

                 B(I,J)   = B(I,J)  *F2
                 B(I+1,J) = B(I+1,J)*F2

	      ELSEIF (IOPT == 11) THEN 
C                BUTTERWORTH ELLIPTIC LOWPASS FILTER *********	
C                CALCULATE EFFECTIVE FP AND FS IN A GIVEN 
C                DIRECTION ON THE PLANE

                 IF (IX.NE.0 .OR. IY.NE.0) THEN
	            FPE = ATAN2(BFPS(1)*SQRT(FLOAT(IY*IY)/Y1),
     &                          BFPS(3)*SQRT(FLOAT(IX*IX)/X1))
                    FPE = SQRT((BFPS(1)*COS(FPE))**2 + 
     &                         (BFPS(3)*SIN(FPE))**2)

	            FSE = ATAN2(BFPS(2)*SQRT(FLOAT(IY*IY)/Y1),
     &                          BFPS(4)*SQRT(FLOAT(IX*IX)/X1))
                    FSE = SQRT((BFPS(2)*COS(FSE))**2 + 
     &                         (BFPS(4)*SIN(FSE))**2)

	            ORDT     = ORD/ALOG10(FPE/FSE)
	            PARMT    = FPE/(EPS)**(2./ORDT)
	            F        = 0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	            F        = SQRT(1.0/(1.0+(F/PARMT)**ORDT))
                    B(I,J)   = B(I,J)  *F
                    B(I+1,J) = B(I+1,J)*F
	         ENDIF

	      ELSEIF (IOPT == 12) THEN
C                BUTTERWORTH ELLIPTIC HIGHPASS FILTER *********	

                 IF (IX .NE. 0 .OR. IY.NE. 0) THEN
	            FPE = ATAN2(BFPS(1)*SQRT(FLOAT(IY*IY)/Y1),
     &                          BFPS(3)*SQRT(FLOAT(IX*IX)/X1))
                    FPE = SQRT((BFPS(1)*COS(FPE))**2 +
     &                         (BFPS(3)*SIN(FPE))**2)

	            FSE = ATAN2(BFPS(2)*SQRT(FLOAT(IY*IY)/Y1),
     &                          BFPS(4)*SQRT(FLOAT(IX*IX)/X1))
                    FSE = SQRT((BFPS(2)*COS(FSE))**2 + 
     &                         (BFPS(4)*SIN(FSE))**2)

	            ORDT     = ORD / ALOG10(FPE/FSE)
	            PARMT    = FPE / (EPS)**(2./ORDT)
	            F        = 0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	            F        = (1.0-SQRT(1.0/(1.0+(F/PARMT)**ORDT)))
                    B(I,J)   = B(I,J)  *F
                    B(I+1,J) = B(I+1,J)*F
	         ENDIF

	      ELSEIF (IOPT == 13) THEN
C                RAISED SINC WINDOW **************************
	         F = 0.5 * SQRT(FLOAT(IX*IX)/X1/PARM +
     &                          FLOAT(IY*IY)/Y1/PARM22)
                 IF (F <= 0.0001) THEN
	            F2 = 1
                 ELSEIF (F >= 1.0) THEN
	            F2 = 0
                 ELSE
	            F2 = SIN(PI*F)/(PI*F)
	         ENDIF
                 B(I,J)   = B(I,J)  *(1+9*F2)
                 B(I+1,J) = B(I+1,J)*(1+9*F2)
              ENDIF
	   ENDDO
	ENDDO

C       RESTORE ZERO TERM FOR HIGH PASS OPTIONS
	IF (IOPT == 2 .OR. IOPT == 4 .OR. IOPT == 6 .OR. IOPT == 8) 
     &     B(1,1) = AVG

C       REVERSE FFT, 2X PADDED
	INV = -1
	CALL FMRS_2(B,N2X,N2Y,INV)

        IRTFLG = 0

        END



C       ----------------------  FQ_Q --------------------------------


        SUBROUTINE FQ_Q(IOPT,LUN,LUNO, B, LSD,N2X,N2Y, NX,NY, IRTFLG)
        
	INCLUDE 'CMBLOCK.INC'
	
	INTEGER          :: IOPT
	INTEGER          :: LUN,LUNO
	REAL             :: B(LSD,N2Y)
	INTEGER          :: LSD,N2X,N2Y
	INTEGER          :: NX,NY,IRTFLG

	DOUBLE PRECISION :: AVE
	REAL             :: BFPS(4)
	REAL             :: FP, FS
	
        REAL, PARAMETER  :: PI = 3.14159265358979323846

C       TO SET THEM TO SOMETHING.
	PARM1 = 0.0
	PARM2 = 0.0

        IF (LUN > 0) THEN
C          READ  IMAGE
	   DO I=1,NY
 	      CALL  REDLIN(LUN,B(1,I),NX,I)
	   ENDDO
        ENDIF

C       BORDER PADDING
	IF (N2X .NE. NX .AND. N2Y .NE. NY)  THEN
	   AVE = (SUM(B(1:NX,1))   + SUM(B(1:NX,NY)) +
     &	          SUM(B(1,2:NY-1)) + SUM(B(NX,2:NY-1)) ) / 
     &		  REAL(2*(NX+NY)-4)

c$omp      parallel do private(i,j)
	   DO J=1,N2Y
	      DO I=NX+1,N2X
	         B(I,J) = AVE
	      ENDDO
	   ENDDO

c$omp      parallel do private(i,j)
	   DO J=NY+1,N2Y
	      DO I=1,NX
	         B(I,J) = AVE
	      ENDDO
	   ENDDO
	ENDIF

C       FORWARD FFT
	INV = 1
	CALL FMRS_2(B,N2X,N2Y,INV)
	IF (INV == 0) THEN
	   IRTFLG = 1
	   RETURN
	ENDIF

	IF (IOPT == 7  .OR. IOPT == 8 .OR.  
     &      IOPT == 9  .OR. IOPT == 10)  THEN
C          BUTTERWORTH FILTER OR  RAISED COSINE FILTER ***************

	   NMAX = 4
	   BFPS = 0.0
	   CALL RDPRA(
     &        'LOWER & UPPER LIMITING FREQ. (IN FREQ OR PIXEL UNITS)',
     &        NMAX,0,.FALSE.,BFPS,NGOT,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

	   EPS = 0.882
	   AA  = 10.624
	   ORD = 2.0 * ALOG10(EPS / SQRT(AA**2-1.0) )

	   IF (BFPS(1) > 1.0) THEN
              FP = BFPS(1) / NX
              FS = BFPS(2) / NX
           ELSE
	      FP = BFPS(1)
	      FS = BFPS(2)
	   ENDIF

	   IF (BFPS(3) == 0.0 .AND. BFPS(4) == 0.0) THEN
C             BUTTERWORTH CIRCULAR FILTER:

	      ORD   = ORD / ALOG10(FP / FS)
	      PARM1 = FP  / (EPS)**(2./ORD)

	   ELSE
C             BUTTERWORTH ELLIPTIC FILTER:
C             LOW-PASS  IOPT=11,  HIGH-PASS IOPT=12
	      IOPT = IOPT + 4
           ENDIF

	ELSE
           PARM1T = 0.25
           PARM2T = -9999999
  	   CALL RDPRM2S(PARM1T,PARM2T,NOT_USED,
     &        'FILTER RADIUS (IN FREQUENCY OR PIXEL UNITS)',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           PARM1 = PARM1T
	   IF (PARM1T < 0.0 .OR. PARM1T > 1.0) PARM1 = 0.5*PARM1/(NX/2)

	   IF (PARM2T == -9999999) THEN
              PARM2 = PARM1

	   ELSEIF  (PARM2T < 0.0 .OR. PARM2T > 1.0) THEN
              PARM2 = 0.5 * PARM2T/(NY/2)
           ENDIF

	   IF (IOPT == 5 .OR. IOPT == 6)  THEN

C             FERMI DISTRIBUTION FILTER ********************
	      CALL RDPRM1S(TEMP,NOT_USED,
     &                     'TEMPERATURE (0=CUTOFF)',IRTFLG)

C             EXPONENTIAL FOR HIGH-PASS OPTION
	      IF (IOPT == 6) TEMP = -TEMP
	   ENDIF
	ENDIF

	NR2    = N2Y / 2
	X1     = FLOAT(N2X/2)**2
	Y1     = FLOAT(NR2)  **2
	PARM   = PARM1**2
	PARM22 = PARM2**2

C       KEEP ZERO TERM FOR HIGH PASS OPTIONS
	AVG = B(1,1)

c$omp   parallel do private(i,j,ix,iy,f,fpe,fse,ordt,parmt,f2)
	DO J=1,N2Y

	   IY = (J-1)
	   IF (IY > NR2) IY = IY-N2Y

	   DO I=1,LSD,2
	      IX = (I-1)/2

	      IF (IOPT == 1) THEN
C                LOWPASS *************************************
                 IF (0.25*(FLOAT(IX*IX)/X1/PARM +
     &                     FLOAT(IY*IY)/Y1/PARM22) > 1.0) THEN
	            B(I,J)   = 0.0
	            B(I+1,J) = 0.0
	         ENDIF

	      ELSEIF (IOPT == 2) THEN	
C                HIGH PASS ***********************************
	         IF ( (IX.NE.0 .OR. IY.NE.0) .AND.
     &                0.25*(FLOAT(IX*IX)/X1/PARM + 
     &                      FLOAT(IY*IY)/Y1/PARM22) <= 1.0) THEN
	            B(I,J)   = 0.0
	            B(I+1,J) = 0.0
	         ENDIF

	      ELSEIF(IOPT == 3)  THEN
C                GAUSSIAN LOW PASS ***************************
	         F = 0.125*(FLOAT(IX*IX)/X1/PARM +
     &                      FLOAT(IY*IY)/Y1/PARM22)
	         IF (F < 16.0)  THEN
	            F        = EXP(-F)
                    B(I,J)   = B(I,J)  *F
                    B(I+1,J) = B(I+1,J)*F
	         ELSE
                    B(I,J)   = 0.0
                    B(I+1,J) = 0.0
	         ENDIF

	      ELSEIF (IOPT==4)  THEN	
C                GAUSSIAN HIGH PASS **************************

	         IF (IX .NE. 0 .OR. IY .NE. 0)  THEN
	            F=0.125*(FLOAT(IX*IX)/X1/PARM +
     &                       FLOAT(IY*IY)/Y1/PARM22)
	            IF (F < 16.0)  THEN
	               F        = 1.0 - EXP(-F)
                       B(I,J)   = B(I,J)  *F
                       B(I+1,J) = B(I+1,J)*F
	            ENDIF
	         ENDIF

	      ELSEIF (IOPT == 5 .OR. IOPT == 6)  THEN
C                FERMI DISTRIBUTION FILTER *******************
	      
	         F = (0.5*SQRT(FLOAT(IX*IX)/X1 +
     &                         FLOAT(IY*IY)/Y1)-PARM1) / TEMP
	         F        = AMIN1(AMAX1(F,-10.0), 10.0)
                 F        = (1.0/(1.0+EXP(F)))

                 B(I,J)   = B(I,J)  *F
                 B(I+1,J) = B(I+1,J)*F

 	      ELSEIF (IOPT == 7) THEN
C                BUTTERWORTH LOWPASS FILTER ******************

 	         F        = 0.5*SQRT(FLOAT(IX*IX)/X1 +
     &                               FLOAT(IY*IY)/Y1)

 	         F        = SQRT(1.0/(1.0+(F/PARM1)**ORD))
                 B(I,J)   = B(I,J)  *F
                 B(I+1,J) = B(I+1,J)*F

 	      ELSEIF (IOPT == 8) THEN
C                BUTTERWORTH HIGHPASS FILTER *****************
	
                 IF (IX.NE.0 .OR. IY.NE. 0) THEN
 	            F = 0.5 * SQRT(FLOAT(IX*IX)/X1 +
     &                             FLOAT(IY*IY)/Y1)
 	            F = (1.0-SQRT(1.0/(1.0+(F/PARM1)**ORD)))

                    B(I,J)   = B(I,J)*F
                    B(I+1,J) = B(I+1,J)*F
 	         ENDIF

 	      ELSEIF (IOPT == 9) THEN
C                RAISED COSINE LOWPASS FILTER ******************

	         IF (BFPS(1) > 1.0) THEN
                    FP = BFPS(1)/NX
                    FS = BFPS(2)/NX
                 ELSE
	            FP = BFPS(1)
	            FS = BFPS(2)
	         ENDIF

	         F = 0.5 * SQRT(FLOAT(IX*IX)/X1 +
     &                          FLOAT(IY*IY)/Y1)
C	         F = (F-BFPS(1)) / (BFPS(2)-BFPS(1))
	         F = (F-FP) / (FS-FP)

                 IF (F < 0) THEN
	            F2 = 1
                 ELSEIF (F > 1) THEN
	            F2 = 0
                 ELSE
	            F2 = 0.5 * (COS(PI*F)+1)
	         ENDIF

                 B(I,J)   = B(I,J)  *F2
                 B(I+1,J) = B(I+1,J)*F2

	      ELSEIF (IOPT == 10) THEN
C                RAISED COSINE HIGHPASS FILTER ******************


	         IF (BFPS(1) > 1.0) THEN
                    FP = BFPS(1) / NX
                    FS = BFPS(2) / NX
                 ELSE
                    FP = BFPS(1)
	            FS = BFPS(2)
	         ENDIF

	         F = 0.5 * SQRT(FLOAT(IX*IX)/X1 +
     &                          FLOAT(IY*IY)/Y1)
	         F = (F-FP) / (FS-FP)

                 IF (F < 0) THEN
                    F2 = 0
                 ELSEIF (F > 1) THEN
	            F2 = 1
                 ELSE
	            F2 = 0.5 * (-COS(PI*F)+1)
	         ENDIF

                 B(I,J)   = B(I,J)  *F2
                 B(I+1,J) = B(I+1,J)*F2

	      ELSEIF (IOPT == 11) THEN 
C                BUTTERWORTH ELLIPTIC LOWPASS FILTER *********	
C                CALCULATE EFFECTIVE FP AND FS IN A GIVEN 
C                DIRECTION ON THE PLANE

                 IF (IX .NE. 0 .OR. IY .NE. 0) THEN
	            FPE = ATAN2(BFPS(1)*SQRT(FLOAT(IY*IY)/Y1),
     &                          BFPS(3)*SQRT(FLOAT(IX*IX)/X1))
                    FPE = SQRT((BFPS(1)*COS(FPE))**2 + 
     &                         (BFPS(3)*SIN(FPE))**2)

	            FSE = ATAN2(BFPS(2)*SQRT(FLOAT(IY*IY)/Y1),
     &                          BFPS(4)*SQRT(FLOAT(IX*IX)/X1))
                    FSE = SQRT((BFPS(2)*COS(FSE))**2 + 
     &                         (BFPS(4)*SIN(FSE))**2)

	            ORDT     = ORD/ALOG10(FPE/FSE)
	            PARMT    = FPE/(EPS)**(2./ORDT)
	            F        = 0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	            F        = SQRT(1.0/(1.0+(F/PARMT)**ORDT))
                    B(I,J)   = B(I,J)  *F
                    B(I+1,J) = B(I+1,J)*F
	         ENDIF

	      ELSEIF (IOPT == 12) THEN
C                BUTTERWORTH ELLIPTIC HIGHPASS FILTER *********	

                 IF (IX .NE. 0 .OR. IY.NE. 0) THEN
	            FPE = ATAN2(BFPS(1)*SQRT(FLOAT(IY*IY)/Y1),
     &                          BFPS(3)*SQRT(FLOAT(IX*IX)/X1))
                    FPE = SQRT((BFPS(1)*COS(FPE))**2 +
     &                         (BFPS(3)*SIN(FPE))**2)

	            FSE = ATAN2(BFPS(2)*SQRT(FLOAT(IY*IY)/Y1),
     &                          BFPS(4)*SQRT(FLOAT(IX*IX)/X1))
                    FSE = SQRT((BFPS(2)*COS(FSE))**2 + 
     &                         (BFPS(4)*SIN(FSE))**2)

	            ORDT     = ORD / ALOG10(FPE/FSE)
	            PARMT    = FPE / (EPS)**(2./ORDT)
	            F        = 0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	            F        = (1.0-SQRT(1.0/(1.0+(F/PARMT)**ORDT)))
                    B(I,J)   = B(I,J)  *F
                    B(I+1,J) = B(I+1,J)*F
	         ENDIF

	      ELSEIF (IOPT == 13) THEN
C                RAISED SINC WINDOW **************************
	         F = 0.5 * SQRT(FLOAT(IX*IX)/X1/PARM +
     &                          FLOAT(IY*IY)/Y1/PARM22)
                 IF (F <= 0.0001) THEN
	            F2 = 1
                 ELSEIF (F >= 1.0) THEN
	            F2 = 0
                 ELSE
	            F2 = SIN(PI*F)/(PI*F)
	         ENDIF
                 B(I,J)   = B(I,J)  *(1+9*F2)
                 B(I+1,J) = B(I+1,J)*(1+9*F2)
              ENDIF
	   ENDDO
	ENDDO

C       RESTORE ZERO TERM FOR HIGH PASS OPTIONS
	IF (IOPT == 2 .OR. IOPT == 4 .OR. 
     &      IOPT == 6 .OR. IOPT == 8) 
     &      B(1,1) = AVG

C       REVERSE FFT 
	INV = -1
	CALL FMRS_2(B,N2X,N2Y,INV)

	IF (LUNO > 0) THEN
C          WRITE  IMAGE
           DO I=1,NY
 	      CALL  WRTLIN(LUNO,B(1,I),NX,I)
	   ENDDO
        ENDIF

        IRTFLG = 0

        END
@


1.47
log
@comment about ellipse undocumented capability
@
text
@d54 7
@


1.46
log
@parm2 bug
@
text
@d49 5
@


1.45
log
@raised sinc
@
text
@d12 1
d131 1
a131 1
	   IF (PARM2 <  0.0 .OR. PARM2 > 1.0) PARM1 = 0.5*PARM2/(NY/2)
@


1.44
log
@raised sinc added
@
text
@d10 2
a11 1
C                FREQ UNIT CUTOFF = 1           ARP 2013 ARDEAN LEITH 
d17 1
a17 1
C=* Copyright 1985-2013  Health Research Inc.,                         *
d408 2
a409 2
	IF (IOPT == 7 .OR. IOPT == 8 .OR.  
     &      IOPT == 9 .OR. IOPT == 10)  THEN
@


1.43
log
@BFPS(1) > 1.0
@
text
@d316 14
d343 1
d663 14
d698 1
@


1.42
log
@FREQ UNIT CUTOFF = 1
@
text
@d552 1
a552 1
	         IF (BFPS(1) > 0.5) THEN
@


1.41
log
@IF (PARM2T == -9999999)
ELSEIF  (PARM2T < 0.0 .OR. PARM2T > 0.5)
@
text
@d10 1
d16 1
a16 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d127 1
a127 1
	   IF (PARM1 <  0.0 .OR. PARM1 > 0.5) PARM1 = 0.5*PARM1/(NX/2)
d129 1
a129 1
	   IF (PARM2 <  0.0 .OR. PARM2 > 0.5) PARM1 = 0.5*PARM2/(NY/2)
d241 1
d249 1
d267 1
d407 1
a407 1
	   IF (BFPS(1) > 0.5) THEN
d409 1
d412 1
a412 5
	   ENDIF
	   IF (BFPS(2) > 0.5) THEN
               FS = BFPS(2) / NX
           ELSE
	       FS = BFPS(2)
d435 2
a436 1
	   IF (PARM1T < 0.0 .OR. PARM1T > 0.5) PARM1 = 0.5*PARM1/(NX/2)
d439 3
a441 2
	   ELSEIF  (PARM2T < 0.0 .OR. PARM2T > 0.5) THEN
              PARM2 = 0.5*PARM2T/(NY/2)
d541 2
a542 2
 	            F = 0.5*SQRT(FLOAT(IX*IX)/X1 +
     &                           FLOAT(IY*IY)/Y1)
a553 4
                 ELSE
	              FP = BFPS(1)
	         ENDIF
	         IF (BFPS(2) > 0.5) THEN
d556 1
d560 2
a561 2
	         F = 0.5*SQRT(FLOAT(IX*IX)/X1 +
     &                        FLOAT(IY*IY)/Y1)
d572 1
d580 3
a582 2
	         IF (BFPS(1) > 0.5) THEN
                    FP = BFPS(1)/NX
a584 4
	         ENDIF
	         IF (BFPS(2) > 0.5) THEN
                    FS = BFPS(2)/NX
                 ELSE
d588 2
a589 2
	         F = 0.5*SQRT(FLOAT(IX*IX)/X1 +
     &                        FLOAT(IY*IY)/Y1)
@


1.40
log
@freq vs pixel specifications, cosmetic rewrite, prompts
@
text
@d9 1
d427 3
a429 3
           PARM1 = 0.25
           PARM2 = 0.25
  	   CALL RDPRM2S(PARM1,PARM2,NOT_USED,
d433 7
a439 4
	   IF (PARM1 <  0.0 .OR. PARM1 > 0.5) PARM1 = 0.5*PARM1/(NX/2)
	   IF (PARM2 == 0.0)                  PARM2 = PARM1
	   IF (PARM2 <  0.0 .OR. PARM2 > 0.5) PARM1 = 0.5*PARM2/(NY/2)

@


1.39
log
@FQ_BUF for incore use, cosmetic, nx,
@
text
@d8 1
a38 1
C        IOPT        TYPE OF FILTER
d43 1
d56 1
d237 2
a238 1
	         F = (F-BFPS(1)) / (BFPS(2)-BFPS(1))
d328 1
d343 1
a386 2
C       BUTTERWORTH FILTER ***********************************

d389 1
d393 2
a394 1
	   CALL RDPRA('PASS-BAND FREQUENCY & STOP-BAND FREQUENCY',
d402 11
d414 5
a418 2
	      ORD   = ORD / ALOG10(BFPS(1) / BFPS(2))
	      PARM1 = BFPS(1) / (EPS)**(2./ORD)
d420 1
a420 1
C             BUTTERWORTH FILTER ELLIPTIC FILTER:
d426 4
a429 1
  	   CALL RDPRM2(PARM1,PARM2,NOT_USED,'FILTER RADIUS')
d436 1
d440 2
a441 1
	      CALL RDPRM(TEMP,NOT_USED,'TEMPERATURE(0=CUTOFF)')
d469 1
a469 1
     &                      FLOAT(IY*IY)/Y1/PARM22) > 1.0) THEN
a541 1

d545 11
d558 3
a560 1
	         F = (F-BFPS(1)) / (BFPS(2)-BFPS(1))
d574 12
d588 1
a588 1
	         F = (F-BFPS(1)) / (BFPS(2)-BFPS(1))
d597 1
d606 1
a606 1
                 IF (IX.NE.0 .OR. IY.NE.0) THEN
d651 3
a653 2
	IF (IOPT == 2 .OR. IOPT == 4 .OR. IOPT == 6 .OR. IOPT == 8) 
     &     B(1,1) = AVG
d655 1
a655 1
C       REVERSE FFT AND WRITE  IMAGE
d660 1
@


1.38
log
@added raised cosine
@
text
@d7 1
d31 1
a31 1
C FQ_Q.F(LUN,LUNO,B,LSD,N2S,N2R,NX,NY,IOPT)
d33 1
a33 1
C PURPOSE: QUICK FILTERING OF REAL-SPACE FILE BY IN-CORE FFT
d41 2
a42 2
C        N2S=2*NX    AT LEAST
C        N2R=2*NY    "    "
d47 2
a48 1
        SUBROUTINE FQ_Q(LUN,LUNO, B, LSD,N2S,N2R, NX,NY,IOPT)
d50 1
d52 13
d66 266
d333 3
a335 3
	REAL             :: B(LSD,N2R)
	INTEGER          :: LSD,N2S,N2R
	INTEGER          :: NX,NY,IOPT
d346 6
a351 4
C       READ  IMAGE
	DO I=1,NY
 	   CALL  REDLIN(LUN,B(1,I),NX,I)
	ENDDO
d354 1
a354 1
	IF (N2S .NE. NX .AND. N2R .NE. NY)  THEN
d360 2
a361 2
	   DO J=1,N2R
	      DO I=NX+1,N2S
d367 1
a367 1
	   DO J=NY+1,N2R
d375 2
a376 2
	INV=1
	CALL FMRS_2(B,N2S,N2R,INV)
d378 1
a378 1
	   IOPT = -1
d391 1
d408 1
d424 2
a425 2
	NR2    = N2R / 2
	X1     = FLOAT(N2S/2)**2
d434 2
a435 1
	DO J=1,N2R
d437 1
a437 1
	   IF (IY > NR2) IY = IY-N2R
d607 1
a607 1
	CALL FMRS_2(B,N2S,N2R,INV)
d609 5
a613 3
	DO I=1,NY
 	   CALL  WRTLIN(LUNO,B(1,I),NX,I)
	ENDDO
d615 1
@


1.37
log
@GPL_2010
@
text
@d4 3
a6 3
C FQ_Q.F 
C 12/22/94  
C                RDPRAF REMOVED                    DEC 2005 ARDEAN LEITH 
d12 1
a12 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d30 1
a30 1
C FQ_Q.F(LUN,LUNO,B,LSD,N2S,N2R,NSAM,NROW,IOPT)
d35 3
a37 3
C        LUN         LOGICAL UNIT NUMBER OF REAL-SPACE FILE TO BE FILTERED
C        LUNO        LOGICAL UNIT NUMBER OF REAL-SPACE OUTPUT FILE 
C        IOPT        TYPE OF THE FILTER
d39 3
a41 5
C        NSAM,NROW   DIMENSIONS OF REAL-SPACE FILE
C        N2S=2*NSAM  AT LEAST
C        N2R=2*NROW  "    "
C
C IMAGE_PROCESSING_ROUTINE
d46 1
a46 1
        SUBROUTINE FQ_Q(LUN,LUNO,B,LSD,N2S,N2R,NSAM,NROW,IOPT)
d50 7
a56 3
	DIMENSION         B(LSD,N2R)
	DIMENSION         BFPS(4)
	DOUBLE PRECISION  AVE
d58 3
a60 2
	
C       To set them to something.
d65 2
a66 2
	DO I=1,NROW
 	   CALL  REDLIN(LUN,B(1,I),NSAM,I)
d70 5
a74 4
	IF (N2S.NE.NSAM .AND. N2R.NE.NROW)  THEN
	   AVE = (SUM(B(1:NSAM,1))+SUM(B(1:NSAM,NROW))
     &	       +SUM(B(1,2:NROW-1))+SUM(B(NSAM,2:NROW-1)) )
     &		/REAL(2*(NSAM+NROW)-4)
d77 2
a78 2
	      DO I=NSAM+1,N2S
	         B(I,J)=AVE
d81 1
d83 3
a85 3
	   DO J=NROW+1,N2R
	      DO I=1,NSAM
	         B(I,J)=AVE
d90 1
d93 1
a93 1
	IF (INV.EQ.0) THEN
d100 3
a102 1
	IF (IOPT.EQ.7 .OR. IOPT.EQ.8)  THEN
d105 2
a106 2
	   CALL RDPRA('PASS-BAND FREQUENCY & STOP-BAND FREQUENCY',NMAX,
     &        0,.FALSE.,BFPS,NGOT,IRTFLG)
d110 5
a114 4
	   ORD = 2.*ALOG10(EPS/SQRT(AA**2-1.0))
	   IF (BFPS(3).EQ.0.0 .AND. BFPS(4).EQ.0.0) THEN
	      ORD   = ORD/ALOG10(BFPS(1)/BFPS(2))
	      PARM1 = BFPS(1)/(EPS)**(2./ORD)
d117 2
a118 2
C             LOW-PASS  IOPT=9,  HIGH-PASS IOPT=10
	      IOPT = IOPT + 2
d123 6
a128 4
	   IF (PARM1.LT.0.0.OR.PARM1.GT.0.5)  PARM1=0.5*PARM1/(NSAM/2)
	   IF (PARM2.EQ.0.0)  PARM2=PARM1
	   IF (PARM2.LT.0.0.OR.PARM2.GT.0.5)  PARM1=0.5*PARM2/(NROW/2)
	   IF (IOPT.EQ.5.OR.IOPT.EQ.6)  THEN
d134 1
a134 1
	      IF (IOPT.EQ.6) TEMP=-TEMP
d138 1
a138 1
	NR2    = N2R/2
d140 1
a140 1
	Y1     = FLOAT(NR2)**2
d143 1
d147 1
a147 1
c$omp   parallel do private(i,j,ix,iy,f,fpe,fse,ordt,parmt)
d150 2
a151 1
	   IF (IY.GT.NR2) IY=IY-N2R
d154 2
a155 1
	      IF (IOPT.EQ.1) THEN
d157 2
a158 2
                 IF(
     &  0.25*(FLOAT(IX*IX)/X1/PARM+FLOAT(IY*IY)/Y1/PARM22).GT.1.0) THEN
d162 8
a169 6
	      ELSEIF (IOPT.EQ.2) THEN	
C                HIGH PASS ******************
	         IF( (IX.NE.0 .OR. IY.NE.0) .AND.
     &  0.25*(FLOAT(IX*IX)/X1/PARM+FLOAT(IY*IY)/Y1/PARM22).LE.1.0) THEN
	            B(I,J)=0.0
	            B(I+1,J)=0.0
d171 2
a172 1
	      ELSEIF(IOPT.EQ.3)  THEN
d174 3
a176 2
	         F=0.125*(FLOAT(IX*IX)/X1/PARM+FLOAT(IY*IY)/Y1/PARM22)
	         IF (F.LT.16.0)  THEN
d178 1
a178 1
                    B(I,J)   = B(I,J)*F
d184 11
a194 8
	      ELSEIF (IOPT.EQ.4)  THEN	
C                GAUSSIAN HIGH PASS ********************************
	         IF (IX.NE.0 .OR. IY.NE.0)  THEN
	  F=0.125*(FLOAT(IX*IX)/X1/PARM+FLOAT(IY*IY)/Y1/PARM22)
	            IF(F.LT.16.0)  THEN
	               F=1.0-EXP(-F)
                       B(I,J)=B(I,J)*F
                       B(I+1,J)=B(I+1,J)*F
d198 46
a243 40
	      ELSEIF (IOPT.EQ.5.OR.IOPT.EQ.6)  THEN
C                FERMI DISTRIBUTION FILTER *************************	      
	      F=(0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)-PARM1)/TEMP
	         F=AMIN1(AMAX1(F,-10.0),10.0)
                 F=(1.0/(1.0+EXP(F)))
                 B(I,J)=B(I,J)*F
                 B(I+1,J)=B(I+1,J)*F

	      ELSEIF (IOPT.EQ.7)THEN
C                BUTTERWORTH LOWPASS FILTER ************************
	         F=0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	         F=SQRT(1.0/(1.0+(F/PARM1)**ORD))
                 B(I,J)=B(I,J)*F
                 B(I+1,J)=B(I+1,J)*F

	      ELSEIF (IOPT.EQ.8)THEN
C                BUTTERWORTH HIGHPASS FILTER ***********************	
                 IF(IX.NE.0 .OR. IY.NE.0) THEN
	            F=0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	            F=(1.0-SQRT(1.0/(1.0+(F/PARM1)**ORD)))
                    B(I,J)=B(I,J)*F
                    B(I+1,J)=B(I+1,J)*F
	         ENDIF

	      ELSEIF (IOPT.EQ.9)THEN
C                BUTTERWORTH ELLIPTIC LOWPASS FILTER **************	
C  CALCULATE EFFECTIVE FP AND FS IN A GIVEN DIRECTION ON THE PLANE
                 IF(IX.NE.0 .OR. IY.NE.0) THEN
	            FPE=ATAN2(BFPS(1)*SQRT(FLOAT(IY*IY)/Y1),
     &                  BFPS(3)*SQRT(FLOAT(IX*IX)/X1))
          FPE=SQRT((BFPS(1)*COS(FPE))**2+(BFPS(3)*SIN(FPE))**2)
	            FSE=ATAN2(BFPS(2)*SQRT(FLOAT(IY*IY)/Y1),
     &                  BFPS(4)*SQRT(FLOAT(IX*IX)/X1))
          FSE=SQRT((BFPS(2)*COS(FSE))**2+(BFPS(4)*SIN(FSE))**2)
	            ORDT=ORD/ALOG10(FPE/FSE)
	            PARMT=FPE/(EPS)**(2./ORDT)
	            F=0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	            F=SQRT(1.0/(1.0+(F/PARMT)**ORDT))
                    B(I,J)=B(I,J)*F
                    B(I+1,J)=B(I+1,J)*F
d245 24
a269 2
	      ELSEIF(IOPT.EQ.10)THEN
C                BUTTERWORTH ELLIPTIC HIGHPASS FILTER *************	
d271 16
a286 12
	            FPE=ATAN2(BFPS(1)*SQRT(FLOAT(IY*IY)/Y1),
     &        BFPS(3)*SQRT(FLOAT(IX*IX)/X1))
              FPE=SQRT((BFPS(1)*COS(FPE))**2+(BFPS(3)*SIN(FPE))**2)
	            FSE=ATAN2(BFPS(2)*SQRT(FLOAT(IY*IY)/Y1),
     &                  BFPS(4)*SQRT(FLOAT(IX*IX)/X1))
          FSE=SQRT((BFPS(2)*COS(FSE))**2+(BFPS(4)*SIN(FSE))**2)
	            ORDT=ORD/ALOG10(FPE/FSE)
	            PARMT=FPE/(EPS)**(2./ORDT)
	            F=0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	            F=(1.0-SQRT(1.0/(1.0+(F/PARMT)**ORDT)))
                    B(I,J)=B(I,J)*F
                    B(I+1,J)=B(I+1,J)*F
d288 23
a310 1
	      ENDIF
d315 2
a316 1
	IF(IOPT.EQ.2.OR.IOPT.EQ.4.OR.IOPT.EQ.6.OR.IOPT.EQ.8)B(1,1)=AVG
d318 1
a318 1
C       WRITE  IMAGE
d321 3
a323 2
	DO I=1,NROW
 	   CALL  WRTLIN(LUNO,B(1,I),NSAM,I)
a326 1

@


1.36
log
@restored pre Renken version
@
text
@a8 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d10 5
a14 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d16 1
a16 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.35
log
@MIN & SQRT arguments wrong on C.R. addition
@
text
@d4 2
a5 1
C FQ_Q.F         NEW                               12/22/94  
d7 1
a7 2
C                OPT: 11 ADDED                     MAR 2007 C. RENKEN
C
d10 1
a10 1
C=* Copyright (C) 1985-2007  Health Research Inc.                      *
d34 1
a34 1
C FQ_Q(LUN,LUNO,B,LSD,N2S,N2R,NSAM,NROW,IOPT)
d61 1
a61 1
C       TO SET THEM TO SOMETHING.
d66 3
a68 1
        CALL REDVOL(LUN,NSAM,NROW,1,1,B,IRTFLG)
a74 1

a80 1

d91 1
a91 1
	IF (INV.EQ. 0) THEN
d98 1
a98 1
	IF (IOPT .EQ. 7 .OR. IOPT .EQ. 8)  THEN
d107 1
a107 1
	   IF (BFPS(3).EQ. 0.0 .AND. BFPS(4).EQ. 0.0) THEN
a115 4
        ELSEIF (IOPT .EQ. 11)THEN
C          FOR SAMPLED SPACE FILTER *******************************
           CALL RDPRM(NUMPRJ,NOT_USED,'NUMBER OF PROJECTIONS')
	
d119 1
a119 1
	   IF (PARM2.EQ. 0.0)  PARM2 = PARM1
d121 1
a121 1
	   IF (IOPT .EQ. 5.OR.IOPT .EQ. 6)  THEN
d127 1
a127 1
	      IF (IOPT .EQ. 6) TEMP=-TEMP
d137 1
a137 1
	AVG    = B(1,1)
d145 1
a145 1
	      IF (IOPT .EQ. 1) THEN
d147 2
a148 2
                 IF (0.25*(FLOAT(IX*IX)/X1/PARM+FLOAT(IY*IY)/
     &               Y1/PARM22).GT.1.0) THEN
d152 1
a152 2

	      ELSEIF (IOPT .EQ. 2) THEN	
d154 2
a155 3
	         IF ( (IX.NE.0 .OR. IY.NE.0) .AND.
     &               0.25*(FLOAT(IX*IX)/X1/PARM+FLOAT(IY*IY)/
     &               Y1/PARM22).LE.1.0) THEN
d159 1
a159 1
	      ELSEIF(IOPT .EQ. 3)  THEN
d162 1
a162 1
	         IF (F .LT. 16.0)  THEN
d170 1
a170 1
	      ELSEIF (IOPT .EQ. 4)  THEN	
d173 1
a173 1
	          F=0.125*(FLOAT(IX*IX)/X1/PARM+FLOAT(IY*IY)/Y1/PARM22)
d181 1
a181 1
	      ELSEIF (IOPT .EQ.5 .OR. IOPT .EQ. 6)  THEN
d189 1
a189 1
	      ELSEIF (IOPT .EQ. 7) THEN
d196 1
a196 1
	      ELSEIF (IOPT .EQ. 8) THEN
d198 1
a198 1
                 IF (IX.NE.0 .OR. IY.NE.0) THEN
d205 1
a205 1
	      ELSEIF (IOPT .EQ. 9)THEN
d207 1
a207 2
C                CALCULATE EFFECTIVE FP AND FS IN A GIVEN DIRECTION 
C                ON THE PLANE
d211 1
a211 2
                    FPE=SQRT((BFPS(1)*COS(FPE))**2+
     &                       (BFPS(3)*SIN(FPE))**2)
d213 2
a214 3
     &                        BFPS(4)*SQRT(FLOAT(IX*IX)/X1))
                    FSE=SQRT((BFPS(2)*COS(FSE))**2+
     &                       (BFPS(4)*SIN(FSE))**2)
d223 1
a223 1
	      ELSEIF(IOPT .EQ. 10)THEN
d227 2
a228 3
     &                        BFPS(3)*SQRT(FLOAT(IX*IX)/X1))
                    FPE=SQRT((BFPS(1)*COS(FPE))**2+
     &                       (BFPS(3)*SIN(FPE))**2)
d230 2
a231 3
     &                        BFPS(4)*SQRT(FLOAT(IX*IX)/X1))
                    FSE=SQRT((BFPS(2)*COS(FSE))**2+
     &                       (BFPS(4)*SIN(FSE))**2)
a238 7

	      ELSEIF (IOPT .EQ. 11)THEN
C                SAMPLED SPACE FILTER *************************	      
	         F        = NUMPRJ/2/ (SQRT(FLOAT(IX*IX+IY*IY)))
	         F        = MIN(F,1.0)
                 B(I,J)   = B(I,J)*F
                 B(I+1,J) = B(I+1,J)*F
d249 3
a251 2

        CALL WRTVOL(LUNO,NSAM,NROW,1,1,B,IRTFLG)
@


1.34
log
@SAMPLED SPACE FILTER added (renken)
@
text
@d253 2
a254 2
	         F        = NUMPRJ/2/(SQRT(IX*IX+IY*IY))
	         F        = MIN(F,1)
@


1.33
log
@used rdpra instead of rdpraf
@
text
@d4 1
a4 2
C FQ_Q.F 
C 12/22/94  
d6 2
a7 1
C        
d10 1
a10 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d34 1
a34 1
C FQ_Q.F(LUN,LUNO,B,LSD,N2S,N2R,NSAM,NROW,IOPT)
d61 1
a61 1
C       To set them to something.
d66 1
a66 3
	DO I=1,NROW
 	   CALL  REDLIN(LUN,B(1,I),NSAM,I)
	ENDDO
d73 1
d80 1
d91 1
a91 1
	IF (INV.EQ.0) THEN
d98 1
a98 1
	IF (IOPT.EQ.7 .OR. IOPT.EQ.8)  THEN
d107 1
a107 1
	   IF (BFPS(3).EQ.0.0 .AND. BFPS(4).EQ.0.0) THEN
d116 4
d123 1
a123 1
	   IF (PARM2.EQ.0.0)  PARM2=PARM1
d125 1
a125 1
	   IF (IOPT.EQ.5.OR.IOPT.EQ.6)  THEN
d131 1
a131 1
	      IF (IOPT.EQ.6) TEMP=-TEMP
d141 1
a141 1
	AVG = B(1,1)
d149 1
a149 1
	      IF (IOPT.EQ.1) THEN
d151 2
a152 2
                 IF(
     &  0.25*(FLOAT(IX*IX)/X1/PARM+FLOAT(IY*IY)/Y1/PARM22).GT.1.0) THEN
d156 2
a157 1
	      ELSEIF (IOPT.EQ.2) THEN	
d159 3
a161 2
	         IF( (IX.NE.0 .OR. IY.NE.0) .AND.
     &  0.25*(FLOAT(IX*IX)/X1/PARM+FLOAT(IY*IY)/Y1/PARM22).LE.1.0) THEN
d165 1
a165 1
	      ELSEIF(IOPT.EQ.3)  THEN
d168 1
a168 1
	         IF (F.LT.16.0)  THEN
d176 1
a176 1
	      ELSEIF (IOPT.EQ.4)  THEN	
d179 1
a179 1
	  F=0.125*(FLOAT(IX*IX)/X1/PARM+FLOAT(IY*IY)/Y1/PARM22)
d187 1
a187 1
	      ELSEIF (IOPT.EQ.5.OR.IOPT.EQ.6)  THEN
d195 1
a195 1
	      ELSEIF (IOPT.EQ.7)THEN
d202 1
a202 1
	      ELSEIF (IOPT.EQ.8)THEN
d204 1
a204 1
                 IF(IX.NE.0 .OR. IY.NE.0) THEN
d211 1
a211 1
	      ELSEIF (IOPT.EQ.9)THEN
d213 2
a214 1
C  CALCULATE EFFECTIVE FP AND FS IN A GIVEN DIRECTION ON THE PLANE
d218 2
a219 1
          FPE=SQRT((BFPS(1)*COS(FPE))**2+(BFPS(3)*SIN(FPE))**2)
d221 3
a223 2
     &                  BFPS(4)*SQRT(FLOAT(IX*IX)/X1))
          FSE=SQRT((BFPS(2)*COS(FSE))**2+(BFPS(4)*SIN(FSE))**2)
d232 1
a232 1
	      ELSEIF(IOPT.EQ.10)THEN
d236 3
a238 2
     &        BFPS(3)*SQRT(FLOAT(IX*IX)/X1))
              FPE=SQRT((BFPS(1)*COS(FPE))**2+(BFPS(3)*SIN(FPE))**2)
d240 3
a242 2
     &                  BFPS(4)*SQRT(FLOAT(IX*IX)/X1))
          FSE=SQRT((BFPS(2)*COS(FSE))**2+(BFPS(4)*SIN(FSE))**2)
d250 7
d267 2
a268 3
	DO I=1,NROW
 	   CALL  WRTLIN(LUNO,B(1,I),NSAM,I)
	ENDDO
@


1.32
log
@GPL License fixed
@
text
@d2 1
a2 1
C++*******************************************************************
d5 3
a7 1
C 12/22/94           
d56 2
a57 2
	DIMENSION  B(LSD,N2R)
	DIMENSION  BFPS(4)
d62 2
a63 2
	PARM1=0.0
	PARM2=0.0
d71 2
a72 2
	IF(N2S.NE.NSAM.AND.N2R.NE.NROW)  THEN
	   AVE=( SUM(B(1:NSAM,1))+SUM(B(1:NSAM,NROW))
d76 2
a77 2
	   DO    J=1,N2R
	      DO    I=NSAM+1,N2S
a90 1

d92 1
a92 1
	   IOPT=-1
d96 1
a96 1
C BUTTERWORTH FILTER***********************
d98 12
a109 15
	IF(IOPT.EQ.7.OR.IOPT.EQ.8)  THEN
	   NMAX=4
	   NUMBER=NMAX
	   FLOW=0.0
	   HI=LSD+N2R
	   BFPS=0.0
	   CALL RDPRAF(BFPS,NMAX,NUMBER,FLOW,HI,
     &        'PASS-BAND FREQUENCY & STOP-BAND FREQUENCY','T',IRTFLG)
	   IF(IRTFLG.NE.0)  RETURN
	   EPS=0.882
	   AA=10.624
	   ORD=2.*ALOG10(EPS/SQRT(AA**2-1.0))
	   IF(BFPS(3).EQ.0.0 .AND. BFPS(4).EQ.0.0)  THEN
	      ORD=ORD/ALOG10(BFPS(1)/BFPS(2))
	      PARM1=BFPS(1)/(EPS)**(2./ORD)
d112 2
a113 3
C             LOW-PASS  IOPT=9
C             HIGH-PASS IOPT=10
	      IOPT=IOPT+2
a115 1

d118 4
a121 4
	   IF(PARM1.LT.0.0.OR.PARM1.GT.0.5)  PARM1=0.5*PARM1/(NSAM/2)
	   IF(PARM2.EQ.0.0)  PARM2=PARM1
	   IF(PARM2.LT.0.0.OR.PARM2.GT.0.5)  PARM1=0.5*PARM2/(NROW/2)
	   IF(IOPT.EQ.5.OR.IOPT.EQ.6)  THEN
d127 1
a127 1
	      IF(IOPT.EQ.6) TEMP=-TEMP
d131 5
a135 5
	NR2=N2R/2
	X1=FLOAT(N2S/2)**2
	Y1=FLOAT(NR2)**2
	PARM=PARM1**2
	PARM22=PARM2**2
d137 1
a137 1
	AVG=B(1,1)
d141 2
a142 2
	   IY=(J-1)
	   IF(IY.GT.NR2) IY=IY-N2R
d144 3
a146 3
	      IX=(I-1)/2
	      IF(IOPT.EQ.1) THEN
C                LOWPASS ********************************
d149 2
a150 2
	            B(I,J)=0.0
	            B(I+1,J)=0.0
d162 4
a165 4
	         IF(F.LT.16.0)  THEN
	            F=EXP(-F)
                    B(I,J)=B(I,J)*F
                    B(I+1,J)=B(I+1,J)*F
d167 2
a168 2
                    B(I,J)=0.0
                    B(I+1,J)=0.0
d170 1
a170 1
	      ELSEIF(IOPT.EQ.4)  THEN	
d172 1
a172 1
	         IF(IX.NE.0 .OR. IY.NE.0)  THEN
d181 2
a182 2
	      ELSEIF(IOPT.EQ.5.OR.IOPT.EQ.6)  THEN
C                FERMI DISTRIBUTION FILTER ********************	      
d189 2
a190 2
	      ELSEIF(IOPT.EQ.7)THEN
C                BUTTERWORTH LOWPASS FILTER **************
d196 2
a197 2
	      ELSEIF(IOPT.EQ.8)THEN
C                BUTTERWORTH HIGHPASS FILTER *************	
d205 1
a205 1
	      ELSEIF(IOPT.EQ.9)THEN
d224 2
a225 2
C BUTTERWORTH ELLIPTIC HIGHPASS FILTER *************	
                 IF(IX.NE.0 .OR. IY.NE.0) THEN
d247 2
a248 2
	INV=-1
	CALL  FMRS_2(B,N2S,N2R,INV)
@


1.31
log
@HRI GPL License used
@
text
@a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.30
log
@*** empty log message ***
@
text
@d8 24
@


1.29
log
@printout removed
@
text
@d103 1
a103 1
	ELSEIF(IOPT.GE.1.OR.IOPT.LE.6)  THEN
@


1.28
log
@pawels border bug fix
@
text
@a55 1
C          print  *,ave
@


1.27
log
@pawel's changes & cosmetic
@
text
@d1 1
d55 2
a56 1
     &		/REAL(NSAM+NROW-4)
@


1.26
log
@nloop,iloop_removed
@
text
@d3 1
a3 1
C $$ FQ_Q.FOR 
d5 8
a12 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
d14 1
d16 1
a16 1
C $$ FQ_Q: QUICK FILTERING OF THE REAL-SPACE FILE BY IN-CORE FFT
d18 1
a18 1
C      CALL FQ_Q(LUN,LUNO,B,LSD,N2S,N2R,NSAM,NROW,IOPT)
a28 1
C        1         2         3         4         5         6         7
d41 1
a41 1
C To set them to something.
d45 2
a46 2
C  READ  IMAGE
	DO    I=1,NROW
d49 2
a50 1
C  AVERAGE PADDING
d52 4
a55 9
	   AVE=0.0
c$omp parallel do private(i,j),reduction(+:ave)
	   DO    J=1,NROW
	      DO    I=1,NSAM
	         AVE=AVE+B(I,J)
	      ENDDO
	   ENDDO
	   AVE=AVE/FLOAT(NSAM)/FLOAT(NROW)
c$omp parallel do private(i,j)
d61 3
a63 3
c$omp parallel do private(i,j)
	   DO    J=NROW+1,N2R
	      DO    I=1,NSAM
d70 2
a71 1
	CALL  FMRS_2(B,N2S,N2R,INV)
d86 1
a86 1
     &  'PASS-BAND FREQUENCY & STOP-BAND FREQUENCY','T',IRTFLG)
d125 1
a125 1
c$omp parallel do private(i,j,ix,iy,f,fpe,fse,ordt,parmt)
d228 1
d231 1
d235 1
a235 1
	DO    I=1,NROW
d238 1
d240 1
@


1.25
log
@include file path
@
text
@d107 1
a107 1
  	   CALL RDPRM2(PARM1,PARM2,NLOOP,ILOOP,'FILTER RADIUS')
d114 1
a114 1
	      CALL RDPRM(TEMP,NLOOP,ILOOP,'TEMPERATURE(0=CUTOFF)')
@


1.24
log
@adapted for dynamical memory allocation
@
text
@d35 1
a35 1
	INCLUDE '/net/bali/usr1/spider/src/CMBLOCK.INC'
@


1.23
log
@fix || bug
@
text
@d18 1
a18 1
C      CALL FQ_Q(LUN,LUNO,B,N2S,N2R,NSAM,NROW,IOPT)
a25 2
C  
C--*******************************************************************
d27 1
d29 4
d34 3
a36 1
	INCLUDE 'CMBLOCK.INC'
d40 2
d45 1
a45 1
C
d48 1
a48 1
 	CALL  REDLIN(LUN,B(1,I),NSAM,I)
d52 1
a52 1
	AVE=0.0
d54 6
a59 6
	DO    J=1,NROW
	DO    I=1,NSAM
	AVE=AVE+B(I,J)
	ENDDO
	ENDDO
	AVE=AVE/FLOAT(NSAM)/FLOAT(NROW)
d61 5
a65 5
	DO    J=1,N2R
	DO    I=NSAM+1,N2S
	B(I,J)=AVE
	ENDDO
	ENDDO
d67 5
a71 5
	DO    J=NROW+1,N2R
	DO    I=1,NSAM
	B(I,J)=AVE
	ENDDO
	ENDDO
d73 1
a73 1
C
d77 2
a78 2
	IOPT=-1
	RETURN
d80 1
a80 1
C
d82 1
a82 1
C
d84 6
a89 6
	NMAX=4
	NUMBER=NMAX
	FLOW=0.0
	HI=LSD+N2R
	BFPS=0.0
	CALL RDPRAF(BFPS,NMAX,NUMBER,FLOW,HI,
d91 15
a105 15
	IF(IRTFLG.NE.0)  RETURN
	  EPS=0.882
	  AA=10.624
	  ORD=2.*ALOG10(EPS/SQRT(AA**2-1.0))
	 IF(BFPS(3).EQ.0.0 .AND. BFPS(4).EQ.0.0)  THEN
	  ORD=ORD/ALOG10(BFPS(1)/BFPS(2))
	  PARM1=BFPS(1)/(EPS)**(2./ORD)
	 ELSE
C BUTTERWORTH FILTER ELLIPTIC FILTER:
C LOW-PASS  IOPT=9
C HIGH-PASS IOPT=10
	  IOPT=IOPT+2
         ENDIF
C
C
d107 12
a118 16
C
C
C
	CALL RDPRM2(PARM1,PARM2,NLOOP,ILOOP,'FILTER RADIUS')
	IF(PARM1.LT.0.0.OR.PARM1.GT.0.5)  PARM1=0.5*PARM1/(NSAM/2)
	IF(PARM2.EQ.0.0)  PARM2=PARM1
	IF(PARM2.LT.0.0.OR.PARM2.GT.0.5)  PARM1=0.5*PARM2/(NROW/2)
	 IF(IOPT.EQ.5.OR.IOPT.EQ.6)  THEN
C
C FERMI DISTRIBUTION FILTER ********************
C
	 CALL RDPRM(TEMP,NLOOP,ILOOP,'TEMPERATURE(0=CUTOFF)')
C
C  EXPONENTIAL FOR HIGH-PASS OPTION
	 IF(IOPT.EQ.6) TEMP=-TEMP
	 ENDIF
d120 1
a120 1
C
d126 1
a126 1
C  KEEP ZERO TERM FOR HIGH PASS OPTIONS
d128 1
a128 1
C
d131 7
a137 8
	IY=(J-1)
	IF(IY.GT.NR2) IY=IY-N2R
	DO I=1,LSD,2
	IX=(I-1)/2
C
	IF(IOPT.EQ.1) THEN
C LOWPASS ********************************
         IF(
d139 6
a144 6
	  B(I,J)=0.0
	  B(I+1,J)=0.0
	 ENDIF
	ELSEIF (IOPT.EQ.2) THEN	
C HIGH PASS ******************
	 IF( (IX.NE.0 .OR. IY.NE.0) .AND.
d146 17
a162 17
	  B(I,J)=0.0
	  B(I+1,J)=0.0
	 ENDIF
	ELSEIF(IOPT.EQ.3)  THEN
C GAUSSIAN LOW PASS ***************************
	  F=0.125*(FLOAT(IX*IX)/X1/PARM+FLOAT(IY*IY)/Y1/PARM22)
	  IF(F.LT.16.0)  THEN
	   F=EXP(-F)
           B(I,J)=B(I,J)*F
           B(I+1,J)=B(I+1,J)*F
	  ELSE
           B(I,J)=0.0
           B(I+1,J)=0.0
	  ENDIF
	ELSEIF(IOPT.EQ.4)  THEN	
C GAUSSIAN HIGH PASS ********************************
	IF(IX.NE.0 .OR. IY.NE.0)  THEN
d164 37
a200 33
	  IF(F.LT.16.0)  THEN
	   F=1.0-EXP(-F)
           B(I,J)=B(I,J)*F
           B(I+1,J)=B(I+1,J)*F
	  ENDIF
	ENDIF
C FERMI DISTRIBUTION FILTER ********************
	ELSEIF(IOPT.EQ.5.OR.IOPT.EQ.6)  THEN
	 F=(0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)-PARM1)/TEMP
	 F=AMIN1(AMAX1(F,-10.0),10.0)
         F=(1.0/(1.0+EXP(F)))
         B(I,J)=B(I,J)*F
         B(I+1,J)=B(I+1,J)*F
C BUTTERWORTH LOWPASS FILTER **************
	ELSEIF(IOPT.EQ.7)THEN
	 F=0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	 F=SQRT(1.0/(1.0+(F/PARM1)**ORD))
         B(I,J)=B(I,J)*F
         B(I+1,J)=B(I+1,J)*F
C BUTTERWORTH HIGHPASS FILTER *************
	ELSEIF(IOPT.EQ.8)THEN
         IF(IX.NE.0 .OR. IY.NE.0) THEN
	  F=0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	  F=(1.0-SQRT(1.0/(1.0+(F/PARM1)**ORD)))
          B(I,J)=B(I,J)*F
          B(I+1,J)=B(I+1,J)*F
	 ENDIF
C BUTTERWORTH ELLIPTIC LOWPASS FILTER **************
	ELSEIF(IOPT.EQ.9)THEN
C Calculate effective FP and FS in a given direction on the plane
         IF(IX.NE.0 .OR. IY.NE.0) THEN
	  FPE=ATAN2(BFPS(1)*SQRT(FLOAT(IY*IY)/Y1),
     &        BFPS(3)*SQRT(FLOAT(IX*IX)/X1))
d202 2
a203 2
	  FSE=ATAN2(BFPS(2)*SQRT(FLOAT(IY*IY)/Y1),
     &        BFPS(4)*SQRT(FLOAT(IX*IX)/X1))
d205 12
a216 11
	  ORDT=ORD/ALOG10(FPE/FSE)
	  PARMT=FPE/(EPS)**(2./ORDT)
	  F=0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	  F=SQRT(1.0/(1.0+(F/PARMT)**ORDT))
          B(I,J)=B(I,J)*F
          B(I+1,J)=B(I+1,J)*F
	 ENDIF
C BUTTERWORTH ELLIPTIC HIGHPASS FILTER *************
	ELSEIF(IOPT.EQ.10)THEN
         IF(IX.NE.0 .OR. IY.NE.0) THEN
	  FPE=ATAN2(BFPS(1)*SQRT(FLOAT(IY*IY)/Y1),
d218 3
a220 3
          FPE=SQRT((BFPS(1)*COS(FPE))**2+(BFPS(3)*SIN(FPE))**2)
	  FSE=ATAN2(BFPS(2)*SQRT(FLOAT(IY*IY)/Y1),
     &        BFPS(4)*SQRT(FLOAT(IX*IX)/X1))
d222 9
a230 9
	  ORDT=ORD/ALOG10(FPE/FSE)
	  PARMT=FPE/(EPS)**(2./ORDT)
	  F=0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	  F=(1.0-SQRT(1.0/(1.0+(F/PARMT)**ORDT)))
          B(I,J)=B(I,J)*F
          B(I+1,J)=B(I+1,J)*F
	 ENDIF
	ENDIF
	ENDDO
d232 1
a232 1
C RESTORE ZERO TERM FOR HIGH PASS OPTIONS
d234 1
a234 1
C  WRITE  IMAGE
d238 1
a238 1
 	CALL  WRTLIN(LUNO,B(1,I),NSAM,I)
@


1.22
log
@*** empty log message ***
@
text
@d126 1
a126 1
c$omp parallel do private(i,j,ix,iy,f,fpe,fse,ordt,parm1)
d200 1
a200 1
	  PARM1=FPE/(EPS)**(2./ORDT)
d202 1
a202 1
	  F=SQRT(1.0/(1.0+(F/PARM1)**ORDT))
d216 1
a216 1
	  PARM1=FPE/(EPS)**(2./ORDT)
d218 1
a218 1
	  F=(1.0-SQRT(1.0/(1.0+(F/PARM1)**ORDT)))
@


1.21
log
@elliptic filters
@
text
@d83 1
a83 1
     &  'PASS-BAND FREQUENCY & STOP-BAND FREQUENCY?','T',IRTFLG)
a84 2
C	CALL RDPRM2(FP,FS,NLOOP,ILOOP,
C     &  'PASS-BAND FREQUENCY & STOP-BAND FREQUENCY?')
@


1.20
log
@OpenMP
@
text
@d33 1
d35 3
a37 1
CNO_SAVE
d77 22
a98 7
	EPS=0.882
	AA=10.624
	CALL RDPRM2(FP,FS,NLOOP,ILOOP,
     &  'PASS-BAND FREQUENCY & STOP-BAND FREQUENCY?')
	ORD=2.*ALOG10(EPS/SQRT(AA**2-1.0))
	ORD=ORD/ALOG10(FP/FS)
	PARM1=FP/(EPS)**(2./ORD)
d105 1
a105 1
	CALL RDPRM(PARM1,NLOOP,ILOOP,'FILTER RADIUS')
d107 2
d124 1
d128 1
a128 1
c$omp parallel do private(i,j,ix,iy,f)
d137 5
a141 4
        IF(0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1) .GT. PARM)  THEN
	B(I,J)=0.0
	B(I+1,J)=0.0
	ENDIF
d144 5
a148 5
	IF((IX.NE.0 .OR. IY.NE.0) .AND.
     &  0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1) .LE. PARM)  THEN
	B(I,J)=0.0
	B(I+1,J)=0.0
	ENDIF
d151 9
a159 9
	F=0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/(2.*PARM)
	IF(F.LT.16.0)  THEN
	F=EXP(-F)
        B(I,J)=B(I,J)*F
        B(I+1,J)=B(I+1,J)*F
	ELSE
        B(I,J)=0.0
        B(I+1,J)=0.0
	ENDIF
d163 6
a168 5
	F=0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/(2.*PARM)
	IF(F.LT.16.0)  THEN
	F=1.0-EXP(-F)
        B(I,J)=B(I,J)*F
        B(I+1,J)=B(I+1,J)*F
a169 1
	ENDIF
d172 5
a176 5
	F=(0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)-PARM1)/TEMP
	F=AMIN1(AMAX1(F,-10.0),10.0)
        F=(1.0/(1.0+EXP(F)))
        B(I,J)=B(I,J)*F
        B(I+1,J)=B(I+1,J)*F
d178 5
a182 5
	ELSEIF (IOPT.EQ.7)THEN
	F=0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	F=SQRT(1.0/(1.0+(F/PARM1)**ORD))
        B(I,J)=B(I,J)*F
        B(I+1,J)=B(I+1,J)*F
d184 40
a223 7
	ELSEIF (IOPT.EQ.8)THEN
        IF(IX.NE.0 .OR. IY.NE.0) THEN
	F=0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	F=(1.0-SQRT(1.0/(1.0+(F/PARM1)**ORD)))
        B(I,J)=B(I,J)*F
        B(I+1,J)=B(I+1,J)*F
	ENDIF
@


1.19
log
@*** empty log message ***
@
text
@d43 1
a43 1
c$doacross local(i,j),reduction(ave)
d50 1
a50 1
c$doacross local(i,j)
d56 1
a56 1
c$doacross local(i,j)
d107 1
a107 1
c$doacross local(i,j,ix,iy,f)
@


1.18
log
@gaussian fixed
@
text
@d143 1
a143 1
	F=(1.0-EXP(-F)
@


1.17
log
@units fixed
@
text
@d104 2
d108 1
a108 1
	DO 35 J=1,N2R
d111 1
a111 1
	DO 35 I=1,LSD,2
d129 3
a131 1
	F=EXP(-0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/(2.*PARM))
d134 4
d141 3
a143 1
	F=(1.0-EXP(-0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/(2.*PARM)))
d147 1
a151 1
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)  GO TO 35
d170 4
a173 1
 35   	CONTINUE
a174 1
665     CONTINUE
@


1.16
log
@freq fixed
@
text
@d101 1
a101 1
	X1=FLOAT(NSAM/2)**2
@


1.15
log
@*** empty log message ***
@
text
@d88 1
a88 1
	IF(PARM1.LT.0.0.OR.PARM1.GT.0.5)  PARM1=0.5*PARM1/(NSAM/2+1)
d101 2
a102 2
	X1=FLOAT(LSD)**2
	Y1=FLOAT(N2R)**2
d114 1
a114 1
        IF(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .GT. PARM)  THEN
d121 1
a121 1
     &  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .LE. PARM)  THEN
d127 1
a127 1
	F=EXP(-(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/(2.*PARM))
d133 1
a133 1
	F=(1.0-EXP(-( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/(2.*PARM)))
d139 1
a139 1
	F=(SQRT( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)-PARM1)/TEMP
d147 1
a147 1
	F=SQRT( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
d154 1
a154 1
	F=SQRT( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
@


1.14
log
@new FFT
@
text
@d37 3
a39 2
	DO  81  I=1,NROW
 81	CALL  REDLIN(LUN,B(1,I),NSAM,I)
d44 5
a48 3
	DO  221  J=1,NROW
	DO  221  I=1,NSAM
221	AVE=AVE+B(I,J)
d51 5
a55 3
	DO  21  J=1,N2R
	DO  21  I=NSAM+1,N2S
21	B(I,J)=AVE
d57 5
a61 3
	DO  22  J=NROW+1,N2R
	DO  22  I=1,NSAM
22	B(I,J)=AVE
d160 1
a160 1
35	CONTINUE
d165 3
a167 2
	DO  82  I=1,NROW
 82	CALL  WRTLIN(LUNO,B(1,I),NSAM,I)
@


1.13
log
@Ed egelman's request: gaussian filter has x^2/(2*sigma^2) i.e., additional factor of 2. in denominator.
@
text
@d30 1
a30 1
        SUBROUTINE FQ_Q(LUN,LUNO,B,WORK,N2S,N2R,NSAM,NROW,IOPT)
d32 1
a32 1
	DIMENSION  B(N2S,N2R),WORK(*)
d58 1
a58 1
	CALL  FMR_2(B,N2S,N2R,WORK,INV)
a92 1
	NS2=N2S/2
d94 1
a94 1
	X1=FLOAT(N2S)**2
d98 1
d100 3
a102 12
	J1=(J-1)
	DO 35 I=1,N2S
	IF(I.LT.3)THEN
	IX=(I-1)*NS2
		IF(J.LT.3)THEN
		IY=J1*NR2
		GO TO 3
		ELSE
		IY=J1/2
		GO TO 3
		ENDIF
	ELSE
a103 3
	IY=J1
	IF(IY.GT.NR2)IY=IY-N2R
	ENDIF
a104 1
3	CONTINUE
d107 4
a110 1
        IF(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .GT. PARM)  B(I,J)=0.0
d114 4
a117 1
     &  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .LE. PARM)  B(I,J)=0.0
d120 3
a122 1
        B(I,J)=B(I,J)*EXP(-(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/(2.*PARM))
d125 5
a129 2
       IF(IX.NE.0 .OR. IY.NE.0)  B(I,J)=
     & B(I,J)*(1.0-EXP(-( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/(2.*PARM)))
d132 6
a137 4
	ARG=(SQRT( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)-PARM1)/TEMP
	ARG=AMIN1(AMAX1(ARG,-10.0),10.0)
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)GO TO 35
        B(I,J)=B(I,J)*(1.0/(1.0+EXP(ARG)))
d140 4
a143 2
	ARG=SQRT( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	B(I,J)=B(I,J)*SQRT(1.0/(1.0+(ARG/PARM1)**ORD))
d147 4
a150 2
	ARG=SQRT( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	B(I,J)=B(I,J)*(1.0-SQRT(1.0/(1.0+(ARG/PARM1)**ORD)))
d157 1
a157 1
	CALL  FMR_2(B,N2S,N2R,WORK,INV)
@


1.12
log
@include restored
@
text
@d127 1
a127 1
        B(I,J)=B(I,J)*EXP(-(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM)
d131 1
a131 1
     & B(I,J)*(1.0-EXP(-( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM))
@


1.11
log
@new version, remez removed
@
text
@d31 1
@


1.10
log
@nosave
@
text
@d18 1
a18 1
C      CALL FQ_Q(LUN,LUNF,B,QB,N2S,N2R,NSAM,NROW,IOPT)
d20 1
a20 1
C        LUNF        FILTER FILE FOR REMEZ FILTER
d22 1
a22 1
C        B,QB        BUFFERS
d30 1
a30 1
        SUBROUTINE FQ_Q(LUN,LUNO,LUNF,B,WORK,N2S,N2R,NSAM,NROW,IOPT)
a32 5
#ifdef SP_UNIX
        INCLUDE 'CMBLOCK.INC'
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d34 26
a59 3
C REMEZ FILTERS
	IF(IOPT.EQ.9) THEN
	CALL FQ_QR(LUN,LUNO,LUNF,B,WORK,N2S,N2R,NSAM,NROW)
a62 2
C OTHER FILTERS
C
a67 1
C
d69 1
a69 2
     &  'PASS-BAND FREQUENCY & STOP-BAND FREQUENCY??')
C
d74 2
a75 2
	GO TO 400
	ENDIF
d79 3
a81 3
952      CALL RDPRM(PARM1,NLOOP,ILOOP,'FILTER RADIUS$')
	IF(PARM1.LT.0.0 .OR.  PARM1.GT.0.5)  PARM1=0.5*PARM1/(NSAM/2+1)
	IF(IOPT.Eq.5.or.iopt.eq.6)  THEN
d85 1
a85 1
	CALL RDPRM(TEMP,NLOOP,ILOOP,'TEMPERATURE(0=CUTOFF)$')
d88 2
a89 1
	IF(IOPT.EQ.6) TEMP=-TEMP
a90 4
c
400	ASSIGN  501  TO  LABA
	GOTO  656
501	CONTINUE
a154 28
	RETURN
C
C  READ  IMAGE
656	CONTINUE
	DO  81  I=1,NROW
 81	CALL  REDLIN(LUN,B(1,I),NSAM,I)
C  AVERAGE PADDING
	IF(N2S.NE.NSAM.AND.N2R.NE.NROW)  THEN
	AVE=0.0
	DO  221  J=1,NROW
	DO  221  I=1,NSAM
221	AVE=AVE+B(I,J)
	AVE=AVE/FLOAT(NSAM)/FLOAT(NROW)
	DO  21  J=1,N2R
	DO  21  I=NSAM+1,N2S
21	B(I,J)=AVE
	DO  22  J=NROW+1,N2R
	DO  22  I=1,NSAM
22	B(I,J)=AVE
	ENDIF
C
	INV=1
	CALL  FMR_2(B,N2S,N2R,WORK,INV)
	IF (INV.EQ.0) THEN
	IOPT=-1
	RETURN
	ENDIF
	GOTO  LABA
@


1.9
log
@clear hollorith continuation line prob
@
text
@d38 1
a38 1

@


1.8
log
@added butterworth filter.
@
text
@d53 2
a54 2
	CALL RDPRM2(FP,FS,NLOOP,ILOOP,'PASS-BAND FREQUENCY &
     &  STOP-BAND FREQUENCY??')
@


1.7
log
@*** empty log message ***
@
text
@d40 1
a40 1
	IF(IOPT.EQ.7) THEN
d47 18
d67 1
a67 1
	IF(IOPT.GE.5.)  THEN
d76 2
a77 2
C
	ASSIGN  501  TO  LABA
d126 10
@


1.6
log
@ mixed radix filtration for 2d
@
text
@a32 1
	LOGICAL IFNS,IFNR
a62 12
	IFNS=MOD(N2S,2).EQ.0
	IFNR=MOD(N2R,2).EQ.0
	IF(IFNS)THEN
	LBD=2
	ELSE
	LBD=1
	ENDIF
	IF(IFNR)THEN
	LBR=2
	ELSE
	LBR=1
	ENDIF
d70 15
a84 4
	IF(J.LE.LBR)THEN
	 IY=(J-1)*NR2
	 ELSE
	 IY=(J-1)/2
d86 2
a87 6
	IF(.NOT.IFNR)THEN
	IF(J.EQ.2.OR.J.EQ.N2R)IY=NR2
	ENDIF
	DO 35 I=1,LBD
	IX=(I-1)*NS2

d109 1
a109 24
 35	CONTINUE
C
	J=1
3	I=3
	IY=(J-1)
	IF(IY.GT.NR2) IY=IY-N2R
4	IX=(I-1)/2
	NX1=I
	NX2=I+1
	ASSIGN 505 TO LABA
	GO TO 350
505	CONTINUE
	I=I+2
	IF(I.LE.N2S-1)  GOTO  4
	IF(.NOT.IFNS)THEN
	IX=NS2
	NX1=2
	NX2=N2S
	ASSIGN 506 TO LABA
	GO TO 350
506	CONTINUE
	ENDIF
	J=J+1
	IF(J.LE.N2R)GO TO 3
a116 35
C
350       IF(IOPT.EQ.1)THEN
C LOWPASS ********************************
        IF(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .GT. PARM) THEN
	 B(NX1,J)=0.0
	B(NX2,J)=0.0
	ENDIF
	ELSEIF (IOPT.EQ.2)THEN
C HIGH PASS ******************
        IF((IX.NE.0 .OR. IY.NE.0) .AND.
     &  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .LE. PARM)  THEN
	B(NX1,J)=0.0
	B(NX2,J)=0.0
	ENDIF	
	ELSEIF (IOPT.EQ.3)THEN	
C GAUSSIAN LOW PASS ***************************
	CTX=EXP(-(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM)
         B(NX1,J)=B(NX1,J)*CTX
	B(NX2,J)=B(NX2,J)*CTX
	ELSEIF (IOPT.EQ.4)THEN
C GAUSSIAN HIGH PASS ********************************
        IF(IX.NE.0 .OR. IY.NE.0)  THEN
	CTT=(1.0-EXP(-( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM))
	B(NX1,J)= B(NX1,J)*CTT
	B(NX2,J)= B(NX2,J)*CTT
	ENDIF
C FERMI DISTRIBUTION FILTER ********************
	ELSEIF (IOPT.EQ.5.OR.IOPT.EQ.6)THEN
        ARG=(SQRT( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)-PARM1)/TEMP
	ARG=AMIN1(AMAX1(ARG,-10.0),10.0)
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)GO TO 37 
	B(NX1,J)=B(NX1,J)*(1.0/(1.0+EXP(ARG)))
	B(NX2,J)=B(NX2,J)*(1.0/(1.0+EXP(ARG)))
	ENDIF
37	GO TO LABA
@


1.5
log
@fixed fermi function
@
text
@d4 1
a4 1
C 5/20/94           
d12 1
a12 1
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
d22 1
a22 1
C	 B,QB	     BUFFERS
d29 3
a31 3
C 
        SUBROUTINE FQ_q(LUN,LUNO,lunf,B,work,N2S,N2R,nsam,nrow,IOPT)
	DIMENSION  B(N2S,N2R),work(*)
d35 1
a35 1
	INCLUDE 'CMBLOCK.INC'
d37 1
a37 1
	INCLUDE 'COMMON1:CMBLOCK.INC'
d39 1
a39 1
C
d42 1
a42 1
	CALL FQ_QR(LUN,LUNO,lunf,B,work,N2S,N2R,nsam,nrow)
a62 3

	IFNS=MOD(NSAM,2).EQ.0
	IFNR=MOD(NROW,2).EQ.0
d64 12
d81 1
a81 6

C *************
C  BOTH NSAM AND NROW ARE EVEN
	IF (IFNS) THEN
	   IF (IFNR) THEN

d83 1
a83 1
	IF(J.LE.2)THEN
d88 4
a91 1
	DO 35 I=1,2
d97 1
a97 2
	elseif (iopt.eq.2) then	
C	
a98 1
C
d101 1
a101 2
	elseif(iopt.eq.3)  then
C
a102 1
C
d104 1
a104 2
	elseif(iopt.eq.4)  then	
C
a105 2
C

a107 2
	
C
d109 1
a109 2
C
	elseif(iopt.eq.5.or.iopt.eq.6)  then
d112 1
a112 1
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)go to 35
d114 1
a114 1
	endif
a115 100

C  

	DO 37 J=1,N2R
	IY=(J-1)
	IF(IY.GT.NR2) IY=IY-N2R
	DO 37 I=3,N2S,2
	IX=(I-1)/2
        if(iopt.eq.1)then
C LOWPASS ********************************
        IF(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .GT. PARM) then
	 B(I,J)=0.0
	B(I+1,J)=0.0
	ENDIF
	elseif (iopt.eq.2)then
C
C HIGH PASS ******************
C
        IF((IX.NE.0 .OR. IY.NE.0) .AND.
     &  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .LE. PARM)  then
	B(I,J)=0.0
	B(I+1,J)=0.0
	endif	
	elseif (iopt.eq.3)then	
C
C GAUSSIAN LOW PASS ***************************
C
	CTX=EXP(-(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM)
         B(I,J)=B(I,J)*CTX
	B(I+1,J)=B(I+1,J)*CTX
	
C
	elseif (iopt.eq.4)then
C GAUSSIAN HIGH PASS ********************************
C
        IF(IX.NE.0 .OR. IY.NE.0)  THEN
	CTT=(1.0-EXP(-( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM))
	B(I,J)= B(I,J)*CTT
	B(I+1,J)= B(I+1,J)*CTT
	ENDIF

	
C
C FERMI DISTRIBUTION FILTER ********************
C
	elseif (iopt.eq.5.or.iopt.eq.6)then
        ARG=(SQRT( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)-PARM1)/TEMP
	ARG=AMIN1(AMAX1(ARG,-10.0),10.0)
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)go to 37 
	B(I,J)=B(I,J)*(1.0/(1.0+EXP(ARG)))
	B(I+1,J)=B(I+1,J)*(1.0/(1.0+EXP(ARG)))
	endif
37	CONTINUE

C ***************
C NSAM IS EVEN BUT NROW IS ODD
	   ELSE

	DO 383 J=1,N2R
	IF(J.EQ.1)THEN
	 IY=(J-1)
	 ELSE
	 IY=J/2
	ENDIF
	DO 383 I=1,2
	IX=(I-1)*NS2

	if(iopt.eq.1) then
C LOWPASS ********************************
        IF(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .GT. PARM)  B(I,J)=0.0
	elseif(iopt.eq.2) then	
C	
C HIGH PASS ******************
C
	IF((IX.NE.0 .OR. IY.NE.0) .AND.
     &  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .LE. PARM)  B(I,J)=0.0
	elseif(iopt.eq.3)  then
C
C GAUSSIAN LOW PASS ***************************
C
        B(I,J)=B(I,J)*EXP(-(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM)
	elseif(iopt.eq.4)  then	
C
C GAUSSIAN HIGH PASS ********************************
C

       IF(IX.NE.0 .OR. IY.NE.0)  B(I,J)=
     & B(I,J)*(1.0-EXP(-( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM))
	
C
C FERMI DISTRIBUTION FILTER ********************
C
	elseif(iopt.eq.5.or.iopt.eq.6)  then
	ARG=(SQRT( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)-PARM1)/TEMP
	ARG=AMIN1(AMAX1(ARG,-10.0),10.0)
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)go to 383 
     	B(I,J)=B(I,J)*(1.0/(1.0+EXP(ARG)))
	endif
383	CONTINUE

d117 2
a118 2

	DO 384 J=1,N2R
d121 15
a135 7
	DO 384 I=3,N2S,2
	IX=(I-1)/2
        if(iopt.eq.1)then
C LOWPASS ********************************
        IF(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .GT. PARM) then
	 B(I,J)=0.0
	B(I+1,J)=0.0
d137 9
a145 188
	elseif (iopt.eq.2)then
C
C HIGH PASS ******************
C
        IF((IX.NE.0 .OR. IY.NE.0) .AND.
     &  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .LE. PARM)  then
	B(I,J)=0.0
	B(I+1,J)=0.0
	endif	
	elseif (iopt.eq.3)then	
C
C GAUSSIAN LOW PASS ***************************
C
	CTX=EXP(-(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM)
         B(I,J)=B(I,J)*CTX
	 B(I+1,J)=B(I+1,J)*CTX
	
C
	elseif (iopt.eq.4)then
C GAUSSIAN HIGH PASS ********************************
C
        IF(IX.NE.0 .OR. IY.NE.0)  THEN
	CTT=(1.0-EXP(-( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM))
	B(I,J)= B(I,J)*CTT
	B(I+1,J)= B(I+1,J)*CTT
	ENDIF

	
C
C FERMI DISTRIBUTION FILTER ********************
C
	elseif (iopt.eq.5.or.iopt.eq.6)then
        ARG=(SQRT( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)-PARM1)/TEMP
	ARG=AMIN1(AMAX1(ARG,-10.0),10.0)
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)go to 384
	B(I,J)=B(I,J)*(1.0/(1.0+EXP(ARG)))
	B(I+1,J)=B(I+1,J)*(1.0/(1.0+EXP(ARG)))
	ENDIF
384	CONTINUE
	ENDIF

C ******************
C NSAM IS ODD AND NROW IS EVEN

	ELSE
	IF (IFNR) THEN

	I=1
	DO 387 J=1,N2R
	IF(J.LE.2)THEN
	 IY=(J-1)*NR2
	 ELSE
	 IY=(J-1)/2
	ENDIF
	IX=(I-1)

	if(iopt.eq.1) then
C LOWPASS ********************************
        IF(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .GT. PARM)  B(I,J)=0.0
	elseif(iopt.eq.2) then	
C	
C HIGH PASS ******************
C
	IF((IX.NE.0 .OR. IY.NE.0) .AND.
     &  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .LE. PARM)  B(I,J)=0.0
	elseif(iopt.eq.3)  then
C
C GAUSSIAN LOW PASS ***************************
C
       B(I,J)=B(I,J)*EXP(-(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM)
	elseif(iopt.eq.4)  then	
C
C GAUSSIAN HIGH PASS ********************************
C

       IF(IX.NE.0 .OR. IY.NE.0)  B(I,J)=
     & B(I,J)*(1.0-EXP(-( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM))
	
C
C FERMI DISTRIBUTION FILTER ********************
C
	elseif(iopt.eq.5.or.iopt.eq.6)  then
	ARG=(SQRT( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)-PARM1)/TEMP
	ARG=AMIN1(AMAX1(ARG,-10.0),10.0)
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)go to 387
     	B(I,J)=B(I,J)*(1.0/(1.0+EXP(ARG)))
	endif
 387	CONTINUE

C

	DO 388 J=1,N2R
	IY=(J-1)
	IF(IY.GT.NR2) IY=IY-N2R
	DO 388 I=2,N2S,2
	IX=I/2
        if(iopt.eq.1)then
C LOWPASS ********************************
        IF(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .GT. PARM) then
	 B(I,J)=0.0
	B(I+1,J)=0.0
	ENDIF
	elseif (iopt.eq.2)then
C
C HIGH PASS ******************
C
        IF((IX.NE.0 .OR. IY.NE.0) .AND.
     &  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .LE. PARM)  then
	B(I,J)=0.0
	B(I+1,J)=0.0
	endif	
	elseif (iopt.eq.3)then	
C
C GAUSSIAN LOW PASS ***************************
C
	CTX=EXP(-(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM)
         B(I,J)=B(I,J)*CTX
	B(I+1,J)=B(I+1,J)*CTX
	
C
	elseif (iopt.eq.4)then
C GAUSSIAN HIGH PASS ********************************
C
        IF(IX.NE.0 .OR. IY.NE.0)  THEN
	CTT=(1.0-EXP(-( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM))
	B(I,J)= B(I,J)*CTT
	B(I+1,J)= B(I+1,J)*CTT
	ENDIF

	
C
C FERMI DISTRIBUTION FILTER ********************
C
	elseif (iopt.eq.5.or.iopt.eq.6)then
        ARG=(SQRT( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)-PARM1)/TEMP
	ARG=AMIN1(AMAX1(ARG,-10.0),10.0)
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)go to 388
	B(I,J)=B(I,J)*(1.0/(1.0+EXP(ARG)))
	B(I+1,J)=B(I+1,J)*(1.0/(1.0+EXP(ARG)))
	ENDIF
388	CONTINUE

C****************** 
C NSAM IS ODD AND NROW IS ODD
	ELSE
	I=1
	DO 396 J=1,N2R
	IF (J.EQ.1) THEN
	IY=(J-1)
	ELSE
	 IY=J/2
	ENDIF
	IX=(I-1)

	if(iopt.eq.1) then
C LOWPASS ********************************
        IF(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .GT. PARM)  B(I,J)=0.0
	elseif(iopt.eq.2) then	
C	
C HIGH PASS ******************
C
	IF((IX.NE.0 .OR. IY.NE.0) .AND.
     &  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .LE. PARM)  B(I,J)=0.0
	elseif(iopt.eq.3)  then
C
C GAUSSIAN LOW PASS ***************************
C
        B(I,J)=B(I,J)*EXP(-(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM)
	elseif(iopt.eq.4)  then	
C
C GAUSSIAN HIGH PASS ********************************
C

       IF(IX.NE.0 .OR. IY.NE.0)  B(I,J)=
     & B(I,J)*(1.0-EXP(-( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM))
	
C
C FERMI DISTRIBUTION FILTER ********************
C
	elseif(iopt.eq.5.or.iopt.eq.6)  then
	ARG=(SQRT( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)-PARM1)/TEMP
	ARG=AMIN1(AMAX1(ARG,-10.0),10.0)
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)go to 396
     	B(I,J)=B(I,J)*(1.0/(1.0+EXP(ARG)))
	endif

396	CONTINUE

d147 1
a147 7

	DO 397 J=1,N2R
	IY=(J-1)
	IF(IY.GT.NR2) IY=IY-N2R
	DO 397 I=2,N2S,2
	IX=I/2
        if(iopt.eq.1)then
d149 3
a151 3
        IF(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .GT. PARM) then
	 B(I,J)=0.0
	B(I+1,J)=0.0
d153 1
a153 2
	elseif (iopt.eq.2)then
C
a154 1
C
d156 5
a160 6
     &  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .LE. PARM)  then
	B(I,J)=0.0
	B(I+1,J)=0.0
	endif	
	elseif (iopt.eq.3)then	
C
a161 1
C
d163 3
a165 5
         B(I,J)=B(I,J)*CTX
	B(I+1,J)=B(I+1,J)*CTX
	
C
	elseif (iopt.eq.4)then
a166 1
C
d169 2
a170 2
	B(I,J)= B(I,J)*CTT
	B(I+1,J)= B(I+1,J)*CTT
a171 3

	
C
d173 1
a173 2
C
	elseif (iopt.eq.5.or.iopt.eq.6)then
d176 3
a178 5
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)go to 397 
	B(I,J)=B(I,J)*(1.0/(1.0+EXP(ARG)))
	B(I+1,J)=B(I+1,J)*(1.0/(1.0+EXP(ARG)))
	endif
397	CONTINUE
d180 1
a180 10
	ENDIF

C  WRITE  IMAGE
C
665     CONTINUE
	inv=-1
	CALL  FMR_2(B,N2S,N2R,WORK,inv)
	DO  82  I=1,NROW
 82	CALL  WRTLIN(LUNO,B(1,I),NSAM,I)
	RETURN
a182 1
C
a185 1
C
a186 1
C
d201 6
a206 6
	inv=1
	CALL  FMR_2(B,N2S,N2R,WORK,inv)
	if (inv.eq.0) then
	iopt=-1
	return
	endif
@


1.4
log
@changed to accomodate mixed radix FFT
@
text
@d115 2
a116 2
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)
     &  B(I,J)=B(I,J)*(1.0/(1.0+EXP(ARG)))
d120 1
a120 1
C
d167 1
a167 1
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)THEN 
a169 1
	ENDIF
d214 2
a215 2
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)  
     &	B(I,J)=B(I,J)*(1.0/(1.0+EXP(ARG)))
d266 1
a266 1
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)THEN 
a269 1
	endif
d316 2
a317 2
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)  
     &	B(I,J)=B(I,J)*(1.0/(1.0+EXP(ARG)))
d368 1
a368 1
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)THEN 
a371 1
	endif
d414 2
a415 2
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)  
     &	B(I,J)=B(I,J)*(1.0/(1.0+EXP(ARG)))
d467 1
a467 1
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)THEN 
a469 1
	ENDIF
@


1.3
log
@no change
@
text
@d4 1
a4 1
C           
d29 3
a31 3
C
      SUBROUTINE FQ_Q(LUN,LUNO,LUNF,B,QB,N2S,N2R,NSAM,NROW,IOPT)
	DIMENSION  B(N2S+2,N2R),QB(1)
d33 1
a38 2
C --
C REMEZ FILTER
d40 4
a43 16
	IF(IOPT.EQ.7)  THEN
C
	ASSIGN  502  TO  LABA
	GOTO  656
502     CONTINUE
C
	    DO  77  I=1,N2S/2+1
		CALL  RDF_Q(LUNF,QB(2*NROW+1),N2S,QB,2*N2R,I)
		II=2*I-1
                	DO  77  J=1,2*N2R,2
			JJ=(J+1)/2
			B(II,JJ)=B(II,JJ)*QB(J)
			B(II+1,JJ)=B(II+1,JJ)*QB(J)
77		CONTINUE
	CLOSE(LUNF)
	GOTO  665
d63 3
d72 21
d94 34
a127 6
	DO  1  J=1,N2R
	IY=J-1
	IF(IY.GT.NR2)  IY=IY-N2R
		DO  2  I=1,N2S+2
		IX=(I-1)/2
      GOTO(100,200,300,400,500,500),IOPT
d129 5
a133 2
100   IF(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1 .GT. PARM)  B(I,J)=0.0
	GOTO  2
d137 58
a194 1
200   IF((IX.NE.0 .OR. IY.NE.0) .AND.
d196 1
a196 1
	GOTO  2
d200 2
a201 2
300   B(I,J)=B(I,J)*EXP(-(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)/PARM)
	GOTO  2
d205 2
a206 1
400   IF(IX.NE.0 .OR. IY.NE.0)  B(I,J)=
d208 1
a208 1
	GOTO  2
d212 2
a213 1
500	ARG=(SQRT( FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)-PARM1)/TEMP
d215 53
a267 1
	IF(IOPT.EQ.6 .AND. IX.EQ.0 .AND.IY.EQ.0)  GOTO 2
d269 27
a295 2
 2	CONTINUE
 1	CONTINUE
d297 182
d482 2
a483 1
	CALL  FFTR2_Q(B,N2S,N2R,-1)
d510 6
a515 1
	CALL  FFTR2_Q(B,N2S,N2R,1)
d517 1
a517 1
      END
@


1.2
log
@cpp_lines_added
@
text
@@


1.1
log
@Initial revision
@
text
@d33 3
d37 1
@
