head	1.41;
access;
symbols
	pre_mrcs:1.40
	healthdept_2018:1.40
	pre_getangas:1.33
	GPL2010:1.33
	pre_GPL2010:1.32
	pre_var_equation:1.31
	pre_fftwrings:1.30
	pre_opfiles:1.30
	src:1.30
	best-code:1.30
	x-named-regs:1.29
	x:1.29
	v13-00:1.29
	pre_GPL:1.27
	prec_CA:1.26
	noindx:1.26
	Bproc:1.22
	oct21:1.18
	last77:1.14;
locks; strict;
comment	@c @;


1.41
date	2019.11.04.17.35.09;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	2018.10.03.14.34.10;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2014.01.12.19.36.23;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2012.07.26.17.20.12;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2012.03.30.12.45.03;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2012.01.30.16.42.23;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2012.01.12.20.14.58;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2012.01.12.19.16.10;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2010.06.24.13.26.10;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2009.10.01.13.57.42;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2009.04.23.16.30.42;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2005.12.19.18.16.39;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2005.10.17.20.34.53;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2005.10.17.18.25.27;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2004.06.07.17.52.10;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2002.08.12.14.40.55;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2002.08.09.18.37.19;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2002.03.11.14.08.23;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2001.08.06.12.40.38;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2000.08.06.22.33.35;	author pawel;	state Exp;
branches;
next	1.21;

1.21
date	2000.05.26.15.13.31;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2000.05.26.13.19.43;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2000.03.20.18.29.33;	author pawel;	state Exp;
branches;
next	1.18;

1.18
date	99.09.01.15.37.31;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	99.08.09.14.47.37;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	99.08.05.14.37.17;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	99.07.07.21.01.08;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	98.01.08.21.37.14;	author hedget;	state Exp;
branches;
next	1.13;

1.13
date	97.10.10.17.47.33;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	97.04.17.15.54.33;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	97.02.12.14.25.23;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	97.01.06.16.11.35;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	96.09.17.17.36.33;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	96.09.04.13.01.25;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	96.08.22.18.56.07;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	96.02.08.14.30.28;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	94.11.29.11.30.51;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	94.11.29.11.10.32;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	94.07.08.13.41.06;	author michael;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.07.13;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.10;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.41
log
@block_pattern
@
text
@C++*********************************************************************
C
C MODEL3.F          DOCUMENT FILE OPTION          FEB 88 Joachim Frank
C                   FILENAMES LENGTHENED          DEC 88 ArDean Leith
C                   CHAR. VARIABLES               AUG 89 ArDean Leith
C                   REWRITTEN SOME                APR 97 ArDean Leith
C                   HELIX BUGS FIXED              AUG 02 ArDean Leith
C                   RDPRAF REMOVED                DEC 05 ArDean Leith
C                   NORMAL GAUSSIAN               APR 09 ArDean Leith
C                   CYL BUG                       SEP 09 ArDean Leith
C                   G2..                          JAN 12 ArDean Leith
C                   BLOCK PATTERN                 SEP 19 ArDean Leith
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2019  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    MODEL3(LUN1,NDOC,FILNAM,NX,NY,NZ)
C
C    PURPOSE:   PREPARES 3-D MODEL DENSITY DISTRIBUTIONS
C
C    PARAMETERS:       LUN1        LOGICAL UNIT NUMBER OF VOLUME FILE
C                      NDOC        LOGICAL UNIT NUMBER OF DOCUMENT FILE
C                      FILNAM      NAME OF VOLUME FILE
C                      NX,NY,NZ    DIMENSIONS OF FILE
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--********************************************************************

	SUBROUTINE MODEL3(LUN1,NDOC,FILNAM,NX,NY,NZ)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        INTEGER          :: LUN1,NDOC,NX,NY,NZ
        CHARACTER(LEN=*) :: FILNAM

	PARAMETER (MAXSIN=50)
	PARAMETER (MAXSPH=300)

	INTEGER          :: NCX(MAXSIN),NCY(MAXSIN),NCZ(MAXSIN)
	REAL             :: CX(MAXSIN),ZZ(MAXSPH),YY(MAXSPH),XX(MAXSPH)
	REAL             :: FL2(MAXSPH),FL22(MAXSPH)
	REAL             :: RAD1(MAXSPH), RAD2(MAXSPH), DENS(MAXSPH)

        REAL                  :: A0(NX)
        REAL                  :: FWA(4),ADUM(3)
	LOGICAL               :: LDOC,GETOLD,GFLAG
        CHARACTER(LEN=MAXNAM) :: DOCNAM
        CHARACTER(LEN=4)      :: ANS
        CHARACTER(LEN=1)      :: GA,YN

        CHARACTER(LEN=1)      :: NULL = CHAR(0)

	REAL, PARAMETER       :: QUADPI = 3.1415926535897932
	REAL, PARAMETER       :: TWOPI=2*QUADPI
      
	IF (COPT == 'I' .OR. VERBOSE) WRITE(NOUT,100)
 100    FORMAT(
     &    ' .MENU: B    -- BLANK, CONSTANT DENSITY VOLUME'/
     &    '        C    -- CYLINDERS'/
     &    '        G    -- GAUSSIAN SPHERE/ELLIPSOID'/
     &    '        G1   -- 1ST ORDER GAUSSIAN SPHERE/ELLIPSOID (0...1)'/
     &    '        G2   -- 2ND ORDER GAUSSIAN SPHERE/ELLIPSOID (0...1)'/
     &    '        G3   -- 3RD ORDER GAUSSIAN SPHERE/ELLIPSOID (0...1)'/
     &    '        H    -- HELIX OF SPHERES'/
     &    '        HA   -- HELIX OF SPHERES, ADD DENSITIES'/
     &    '        NUM  -- LINE NUMBERS'/
     &    '        P    -- BLOCK PATTERN'/
     &    '        R    -- RANDOM DENSITY PATTERN'/
     &    '        T    -- TWO 3D SINE WAVES'/
     &    '        S    -- 3D SINE WAVES'/
     &    '        SP   -- SPHERES'/
     &    '        SPA  -- SPHERES, ADD DENSITIES'/
     &    '        SPV  -- SPHERES, VARIABLE DENSITIES'/
     &    '        W    -- DENSITY WEDGE'/)

       CALL RDPRMC(ANS,NCHAR,.TRUE.,
     &      'B/C/G/G1/G2/G3/H/HA/NUM/P/R/T/S/SP/SPA/SPV/W', NULL,IRTFLG)

      SELECT CASE (ANS(:NCHAR))

      CASE ('T','S')
C     TEST & SINE WAVES ********************************** TEST & SINE

      IF (ANS(1:1)  ==  'T') THEN
  200    NS     = 1
         CX(1)  = 1.0
         NCX(1) = 2
         NCY(1) = 2
         NCZ(1) = 2
      ELSE

         NS = 3
         CALL RDPRI1S(NS,IDUM,'NUMBER OF SINE WAVES',IRTFLG)
         IF (IRTFLG .NE. 0) RETURN

         IF (NS > MAXSIN) THEN
            WRITE(NOUT,400) MAXSIN
  400       FORMAT(' *** RESTRICTED TO ',I3,' SINE WAVES')
            NS = MAXSIN
         ENDIF

         AV = 0.0
         DO I = 1,NS
            CALL RDPRA('AMPLITUDE, SPATIAL FREQ. IN (X,Y,Z)',
     &                 4,0,.FALSE.,FWA,NVAL,IRTFLG)
            IF (IRTFLG .NE. 0) RETURN

            CX(I)  = FWA(1)
            NCX(I) = FWA(2)
            NCY(I) = FWA(3)
            NCZ(I) = FWA(4)
            AV     = AV + CX(I)
         ENDDO

         DO I = 1,NS
            CX(I) = CX(I) * 2.0 / AV
            WRITE(NOUT, 900)I,CX(I),NCX(I),NCY(I),NCZ(I)
  900       FORMAT(1X,I5,F5.2,3I6)
         ENDDO
      ENDIF

      DO L = 1,NZ
         PHASEZ = FLOAT(L-1) * TWOPI / FLOAT(NZ) 
                
         DO I=1,NY
           PHASE = FLOAT(I-1) * TWOPI / FLOAT(NY)

           A0    = 0.
           DO J=1,NX
             DO K = 1,NS
             A0(J) = CX(K) * SIN(FLOAT(J-1) * TWOPI * FLOAT(NCX(K)) /
     &                FLOAT(NX) +
     &            PHASE * FLOAT(NCY(K)) + PHASEZ * FLOAT(NCZ(K)))+ A0(J)
             ENDDO
           ENDDO
           CALL WRTLIN(LUN1,A0,NX,I+(L-1)*NY)
        ENDDO
      ENDDO

C     WEDGE **************************************************** WEDGE
      CASE ('W')

      SCF = 2.0 / FLOAT(NY+NX+NZ)

      DO  L=1,NZ
         FI = FLOAT(L) * SCF

         DO I=1,NY
            FI = FI + SCF * FLOAT(I)

            DO J = 1,NX
              A0(J) = FI + SCF * FLOAT(J)
 	    ENDDO
            CALL WRTLIN(LUN1,A0,NX,(L-1)*NY+I)
 	 ENDDO
      ENDDO

C     SPHERES ************************************************ SPHERES

      CASE ('SP','SPA','SPV')
        GETOLD = .FALSE.
        CALL RDPRMC(YN,NCHAR,.TRUE.,
     &        'GET COORDINATES FROM DOCUMENT FILE (Y/N)',
     &        NULL,IRTFLG)
        IF (IRTFLG == -1) RETURN

        LDOC = .FALSE.
        XOFF = 0.
        YOFF = 0.
        ZOFF = 0.

        IF (YN .NE. 'N') THEN
C          USE DOC FILE FOR COORDINATES
           LDOC  = .TRUE.
           NOPEN = 0
           CALL FILERD(DOCNAM,NLET,NULL,'DOCUMENT',IRTFLG)
           IF (IRTFLG  ==  -1) RETURN

           NNSPH = 5
           IRET  = 1
           CALL RDPRM2S(NNSPH,IREG,NOT_USED,
     &       'NUMBER OF SPHERES, STARTING COL. FOR X,Y,Z',
     &        IRTFLG)

           CALL RDPRM3S(XOFF,YOFF,ZOFF,NOT_USED,
     &                  'X, Y, & Z OFFSETS',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
	ENDIF


        GETOLD = .FALSE.
        IF (ANS(1:3)  ==  'SPV') THEN
C          VARIABLE SPHERE DENSITIES READ FROM DOC FILE
           IDEN = 1
           IF (ANS(4:4)  ==  'A') GETOLD = .TRUE.
        ELSE
C          ALL SPHERES WILL HAVE SAME DENSITIES
           IDEN = 0

c          DEFAULT VALUE 2.0 
           AMQ = 2.0         
           CALL RDPRM1S(AMQ, NOT_USED, 
     &        'DENSITY INSIDE SPHERES (<CR> = 2.0)',
     &        IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           IF (AMQ  ==  0.0) AMQ = 2.0     
        ENDIF

        NSPH = 0
C       THE DEFAULT LOCATION OF THE ALL THE SPHERES ARE CENTER.

        DO  L = 1, MAXSPH
           RAD1(L) = 0.0
           RAD2(L) = 0.0
           XX(L)   = NX/2 + 1
           YY(L)   = NY/2 + 1
           ZZ(L)   = NZ/2 + 1
        ENDDO
		
        ROUT = MIN(NX,NY,NZ) / 2 - 5
        RIN  = 0.0
 	CALL RDPRM2S(ROUT,RIN,NOT_USED,
     &       'OUTER AND INNER RADII OF SPHERES',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

C       CHANGED 10/12/88 MR
C       FIND HOW MANY RADII HAVE TO BE READ FROM DOCUMENT FILE:
	NSPH = 1
        IRAD = 0
        IF (ROUT < 0) IRAD = 1
        IF (RIN  < 0) IRAD = 2

	IF (.NOT. LDOC) 
     &      WRITE(NOUT,*) ' TYPE: 0, 0, 0  TO STOP INPUT'

2200	RAD2(NSPH)  = ROUT
	RAD1(NSPH)  = RIN

C       'SPA' OPTION -- ADD MASSES WHERE SPHERES OVERLAP
C       'SP'  OPTION -- LET SPHERES INTERPENETRATE

	SWITCH = 0.0
	IF (ANS(3:3) == 'A') SWITCH = 1.0

	IF (LDOC) THEN
           CALL UNSAV(DOCNAM,NOPEN,NDOC,NSPH,CX,
     &                IREG+2+IRAD+IDEN,
     &                LERR,1)  
c          SEQUENTIAL READ SPECIFIED FOR DOC FILE
           NOPEN   = 1
           ADUM(1) = CX(IREG)
           ADUM(2) = CX(IREG+1)
           ADUM(3) = CX(IREG+2)
           IF (IRAD > 0) RAD2(NSPH) = CX(IREG+3)
           IF (IRAD > 1) RAD1(NSPH) = CX(IREG+4)
           IF (IDEN > 0) DENS(NSPH) = CX(IREG+3+IRAD)
           WRITE(NOUT,2400)NSPH,(ADUM(K),K=1,3)
	ELSE
	   ADUM(1) = NX/2 +1
	   ADUM(2) = NY/2 +1
	   ADUM(3) = NZ/2 +1
           CALL RDPRM3S(ADUM(1),ADUM(2),ADUM(3),NOT_USED,
     &       'CENTER COORDINATES X,Y,Z (or <CR> FOR IMAGE CENTER)',
     &       IRTFLG)

C*         ALTERED SO DOES NOT ACCEPT LAST 0.0,0.0,0,0 al june 88
           IF (ADUM(1) == 0. .AND. 
     &         ADUM(2) == 0. .AND.
     &         ADUM(3) == 0.) THEN
               NSPH = NSPH - 1
               IF (NSPH  ==  0) RETURN
               GOTO 3000
           ENDIF

           WRITE(NOUT,2400) NSPH,(ADUM(K),K=1,3)
 2400      FORMAT(I4,3F12.6)
	ENDIF

	XX(NSPH) = ADUM(1) + XOFF
	YY(NSPH) = ADUM(2) + YOFF
	ZZ(NSPH) = ADUM(3) + ZOFF
 
        IF (ZZ(NSPH)+RAD2(NSPH)  >  NZ .OR.
     &      ZZ(NSPH)-RAD2(NSPH)  <   0 .OR.
     &      YY(NSPH)+RAD2(NSPH)  >  NY .OR.
     &      YY(NSPH)-RAD2(NSPH)  <   0 .OR.
     &      XX(NSPH)+RAD2(NSPH)  >  NX .OR.
     &      XX(NSPH)-RAD2(NSPH)  <   0) WRITE(NOUT,2450) NSPH
 2450   FORMAT(' *** SPHERE ',I3,' WILL BE TRUNCATED')

	IF (LDOC .AND. NSPH  ==  NNSPH) GOTO 3000  
     
	IF (NSPH  >= MAXSPH) THEN
	   WRITE(NOUT,2500)MAXSPH
 2500	   FORMAT(' ** NUMBER OF SPHERES LIMITED TO',I3)
	   GOTO 3000
	ENDIF

	NSPH = NSPH + 1
	GOTO 2200


      CASE ('HA','H')
C       SPHERES ARRANGED ON HELIX ****************************** HELIX

        GETOLD = .FALSE.
        IDEN   = 0
        AMQ    = 2.0
        SWITCH = 0.0
        CALL RDPRM1S(AMQ, NOT_USED, 
     &      'DENSITY VALUE FOR SPHERES (DEFAULT = 2.0)',
     &       IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        RADT = 3
        RHEL = 3
	CALL RDPRM2S(RADT,RHEL,NOT_USED,
     &            'SPHERE RADIUS, HELIX RADIUS',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        NSPH  = 100
        NTURN = 5
	CALL RDPRI2S(NSPH,NTURN,NOT_USED,
     &               'NO. OF SPHERES, NO. OF TURNS',IRTFLG)
	IF (NSPH  >=  MAXSPH) THEN
	   CALL ERRT(102,'NUMBER OF SPHERES LIMITED TO',MAXSPH)
	   RETURN
	ENDIF

	DO N=1,NSPH
           RAD1(N) = 0.0
           RAD2(N) = RADT
           XX(N)   = NX/2+1    + RHEL * COS(TWOPI * FLOAT(N-1) * 
     &               FLOAT(NTURN) / FLOAT(NSPH))
           ZZ(N)   = NZ/2+1  + RHEL * SIN(TWOPI * FLOAT(N-1) *
     &               FLOAT(NTURN) / FLOAT(NSPH))
           YY(N)   = FLOAT(N-1)  * FLOAT(NY) / FLOAT(NSPH)
        ENDDO

 3000 IF (NSPH  ==  0) NSPH = 1
      DO L1 = 1, NZ
         DO  N = 1, NSPH
           FL2(N) = (L1-ZZ(N))**2
         ENDDO

         DO L2 = 1, NY
           DO N  =1, NSPH
              FL22(N) = FL2(N) + (L2-YY(N))**2
           ENDDO

           IF (GETOLD) THEN
C             WANT TO ADD NEW SPERES TO EXISTING FILE
              CALL REDLIN(LUN1,A0,NX,(L1-1)*NY+L2)
           ENDIF

           DO L3 = 1, NX
             IF (.NOT. GETOLD) A0(L3) = 0.0

             DO N=1, NSPH
               RAD41 = RAD1(N)**2
               RAD44 = RAD2(N)**2
               IF (IDEN  >  0) AMQ = DENS(N)
               XYZ   = FL22(N) + (L3-XX(N))**2
               IF (XYZ  >= RAD41 .AND.  XYZ  <=  RAD44) THEN
C                NAIK GENERAL AMQ NOT 2
                 A0(L3) = AMQ + A0(L3) * SWITCH    
               ENDIF
             ENDDO
           ENDDO
           CALL WRTLIN(LUN1,A0,NX,(L1-1)*NY+L2)
         ENDDO
      ENDDO

      CASE ('R','RAN')
C     RANDOM DISTRIBUTION ************************************* RANDOM

      CALL RDPRMC(GA,NCHAR,.TRUE.,
     &            'GAUSSIAN DISTRIBUTED? (Y/N)',
     &            NULL,IRTFLG)
      IF (IRTFLG  ==  -1) RETURN
      
      GFLAG = (GA  ==  'Y')
      IF (GFLAG) THEN
	CALL RDPRM2s(XM,SD,NOT_USED,
     &     'MEAN AND STANDARD DEVIATION OF GAUSSIAN DIST.',
     &     IRTFLG)
      ENDIF

      DO L = 1,NZ
        DO I = 1,NY
          IF (GFLAG) THEN
             DO K = 1,NX
                A0(K) = RANN(XM,SD)
             ENDDO
          ELSE
	     CALL  RANDOM_NUMBER(HARVEST=A0)
          ENDIF
          CALL WRTLIN(LUN1,A0,NX,I+(L-1)*NY)
        ENDDO
      ENDDO


C     BLANK (CONSTANT DENSITY) ********************************* BLANK
      CASE ('B','BL')

      BVAL = 0.0
      CALL RDPRM1S(BVAL,NOT_USED,'DENSITY',IRTFLG)
      IF (IRTFLG  .NE. 0) RETURN

C     CREATE BACKGROUND VOLUME
      A0 = BVAL

      DO L=1,NZ                                  
         DO I=1,NY                                 
            CALL WRTLIN(LUN1,A0,NX,I+(L-1)*NY)   
         ENDDO
      ENDDO



      CASE ('C','CYL')
C     CYLINDERS (INTERPENETRATING) ************************* CYLINDERS

C     CLEAR VOLUME FIRST (SET VOLUME BACKGROUND)

      BVAL = 0.0
      CALL RDPRM1S(BVAL,NOT_USED,
     &             'BACKGROUND DENSITY',IRTFLG)
      IF (IRTFLG .NE.0) RETURN

C     CREATE BACKGROUND VOLUME
      A0 = BVAL
      DO L=1,NZ                                  
         DO I=1,NY                                 
            CALL WRTLIN(LUN1,A0,NX,I+(L-1)*NY)   
         ENDDO
      ENDDO

 5000 CALL RDPRMC(YN,NA,.TRUE.,
     &   'CYLINDER AXIS; X, Y, Z (or Q TO END CYLINDER ENTRY)',
     &      NULL,IRTFLG)
      IF (YN .NE. 'X' .AND. 
     &    YN .NE. 'Y' .AND. 
     &    YN .NE. 'Z') RETURN 

      RADC = 5
      HT   = ((MIN(NX,NY,NZ))/2) - 3
      CALL RDPRM2S(RADC,HT,NOT_USED,'RADIUS, HEIGHT',IRTFLG)
      IF (IRTFLG .NE. 0) RETURN
      IF (RADC == 0.0 .OR.  HT == 0.0) RETURN

      HT = HT / 2.0

      XH = (NX/2) + 1
      YH = (NY/2) + 1
      CALL RDPRM2S(XH,YH,NOT_USED,
     &     'CENTER COORDINATES X,Y (or <CR> FOR IMAGE CENTER)',
     &     IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      ZH    = (NZ/2) + 1
      VALUE = 1.0
      CALL RDPRM2S(ZH,VALUE,NOT_USED,
     &             'CENTER COORDINATE Z, DENSITY',
     &             IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     ****************** CYLINDER AXIS ALONG Y ***********

      IF (YN == 'Y') THEN 
         NSL1  = ZH - RADC - 0.5
         NSL2  = ZH + RADC + 0.5
         IF (NSL1  <   1) NSL1 = 1
         IF (NSL2  >  NZ) NSL2 = NZ
         NX1   = XH - RADC - 0.5
         NX2   = XH + RADC + 0.5
         IF (NX1  <   1) NX1 = 1
         IF (NX2  >  NX) NX2 = NX
         NY1   = YH - HT - 0.5
         NY2   = YH + HT + 0.5
         IF (NY1  <   1) NY1 = 1
         IF (NY2  >  NY) NY2 = NY

         RAD44 = RADC**2

         DO L=NSL1,NSL2
           I1 = (L - 1) * NY
           Z2 = (FLOAT(L) - ZH) **2
           DO I=NY1,NY2
             CALL REDLIN(LUN1,A0,NX,I+I1)
             DO K=NX1,NX2
                IF ((FLOAT(K)-XH)**2 + Z2 <= RAD44) A0(K) = VALUE                 
             ENDDO
             CALL WRTLIN(LUN1,A0,NX,I1+I)
           ENDDO
         ENDDO
      ENDIF
 
C     ****************** CYLINDER AXIS ALONG Z ***********
      IF (YN  ==  'Z') THEN 

         NSL1  = ZH - HT - 0.5
         NSL2  = ZH + HT + 0.5
         IF (NSL1 < 1)      NSL1 = 1
         IF (NSL2 > NZ) NSL2 = NZ
         NX1   = XH - RADC - 0.5
         NX2   = XH + RADC + 0.5
         IF (NX1 <  1)    NX1=  1
         IF (NX2 >  NX) NX2 = NX
         NY1   = YH - RADC - 0.5
         NY2   = YH + RADC + 0.5
         IF( NY1 <  1)    NY1 = 1
         IF (NY2 >  NY) NY2 = NY

         RAD44 = RADC**2

         DO L=NSL1,NSL2
           I1 = (L-1)*NY

           DO I=NY1,NY2
             CALL REDLIN(LUN1,A0,NX,I+I1)
             Y2 = (FLOAT(I)-YH)**2

             DO  K=NX1,NX2
                IF ((FLOAT(K)-XH)**2+Y2 <= RAD44) A0(K) = VALUE 
             ENDDO                
             CALL WRTLIN(LUN1,A0,NX,I1+I)
           ENDDO
         ENDDO
      ENDIF

C     ****************** CYLINDER AXIS ALONG X ***********
      IF (YN  ==  'X') THEN 
         NSL1  = ZH - RADC - 0.5
         NSL2  = ZH + RADC + 0.5
         IF (NSL1  <   1) NSL1=1
         IF (NSL2  >  NZ) NSL2=NZ
         NX1   = XH - HT - 0.5
         NX2   = XH + HT + 0.5
         IF (NX1  <   1) NX1 = 1
         IF (NX2  >  NX) NX2 = NX
         NY1   = YH - RADC - 0.5
         NY2   = YH + RADC + 0.5
         IF (NY1 <  1) NY1=1
         IF (NY2 > NY) NY2=NY
         RAD44 = RADC**2

         DO L=NSL1,NSL2
            I1 = (L-1) * NY
            Z2 = (FLOAT(L)-ZH)**2

            DO I=NY1,NY2
               Y2 = (FLOAT(I)-YH)**2

               IF (Z2+Y2  <=  RAD44) THEN
                  CALL REDLIN(LUN1,A0,NX,I+I1)
                  DO  K=NX1,NX2
                     A0(K) = VALUE                 
                  ENDDO
                CALL WRTLIN(LUN1,A0,NX,I1+I)
              ENDIF
           ENDDO
         ENDDO
      ENDIF
      GOTO 5000

      CASE ('NUM','N')
C     PUT NUMBERS INTO VOLUME:********************************* NUMBERS

      IPOS = 1
      CALL RDPRI1S(IPOS,NOT_USED,'POSITION IN LINE',IRTFLG)

      SCALE = 1
      CALL RDPRM1S(SCALE,NOT_USED,'SCALING FACTOR',IRTFLG)

      SUM = 0.0
      DO L=1,NZ
        DO I=1,NY
          A0       = 0.0
          A0(IPOS) = FLOAT((L-1) * NY +I ) * SCALE
          SUM      = SUM + A0(IPOS)

          CALL WRTLIN(LUN1,A0,NX,I+(L-1)*NY)
        ENDDO
      ENDDO

      CALL RDPRMC(ANS,NCHAR,.TRUE.,
     &            'NUMBER PIXELS IN LINE? (Y/N)',
     &             NULL,IRTFLG)

      IF (ANS(1:1)  ==  'Y') THEN
        CALL RDPRI2S(ISLIC,ILINE,NOT_USED,
     &              'SLICE NUMBER, LINE NUMBER',IRTFLG)
        if (irtflg .ne. 0) then
           write(6,*) 'Non-zero irtflg:',irtflg,ISLIC,ILINE
           return
        endif

        CALL RDPRM1S(SCALE2,NOT_USED,
     &               'SCALING FACTOR',IRTFLG)
        if (irtflg .ne. 0) then
           write(6,*) 'Non-zero irtflg:',irtflg,scale2
           return
        endif

        ILL = (ISLIC-1) * NY + ILINE
        CALL REDLIN(LUN1,A0,NX,ILL)
        DO  I=1,NX
           A0(I) = FLOAT(I) * SCALE2
           SUM   = SUM + A0(I)
        ENDDO

        SUM = SUM - FLOAT(IPOS)*SCALE
        CALL WRTLIN(LUN1,A0,NX,ILL)
      ENDIF

      CASE ('G','G1','G2','G3')
C     ******************************************* 3D GAUSSIAN FUNCTION

C      CREATES A 3D GAUSSIAN DENSITY DISTRIBUTION NORMALIZED 
C      SUCH THAT THE SUM OF ALL THE VOXEL DENSITIES EQUAL 1.0.

        XCEN = (NX/2) + 1
        YCEN = (NY/2) + 1
        ZCEN = (NZ/2) + 1
        CALL RDPRM3S(XCEN,YCEN,ZCEN,NOT_USED,
     &    'CENTER COORDINATES X,Y,Z (or <CR> FOR IMAGE CENTER)',
     &    IRTFLG)
        if (irtflg .ne. 0) then
           write(6,*) 'Non-zero irtflg:',irtflg,xcen
        endif

        STDX = (NX/2) - 1
        STDY = (NY/2) - 1
        STDZ = (NZ/2) - 1
        CALL RDPRM3S(STDX,STDY,STDZ,NOT_USED,
     &              'RADII IN  X,Y,Z ( = STD. DEV.)',IRTFLG)

        WRITE(NOUT,90) XCEN,YCEN,ZCEN, STDX,STDY,STDZ
90      FORMAT('  CENTER:',G9.2,',',G9.2,',',G9.2,
     &         '  RADII:', G9.2,',',G9.2,',',G9.2) 

C       SET THE ORDER FOR SUPERGAUSSIAN 
        NORDER = 1
        IF (ANS(2:2) == '2') NORDER = 2
        IF (ANS(2:2) == '3') NORDER = 3

	GNM = 1.0 / STDX / STDY / STDZ / (2*QUADPI)**1.5
        IF (NCHAR > 1 ) GNM = 1.0    ! G2....

	TNM = ALOG(1.0 / TINY(GNM))

        STDXSQ = STDX**2
        STDYSQ = STDY**2
        STDZSQ = STDZ**2

        DO K = 1,NZ
           DO J = 1,NY
              DO I = 1,NX
	        EEE = 0.5 * ((I - XCEN) **2 / STDXSQ +
     &		             (J - YCEN) **2 / STDYSQ +
     &		             (K - ZCEN) **2 / STDZSQ)
	        IF (EEE  >= TNM) THEN
	           A0(I) = 0.0
	        ELSE  
	           EEE   = 0.5 * (2*EEE)**NORDER
                   A0(I) = GNM * EXP(-EEE)
	        ENDIF
             ENDDO

             CALL WRTLIN(LUN1,A0,NX,J+(K-1)*NY)
           ENDDO
        ENDDO


C     BLOCKS **************************************************** BLOCK PATTERN
      CASE ('P')

        NXD2 = NX / 2
        NYD2 = NY / 2
        NZD2 = NZ / 2

        DO K = 1,NZ
          IF (K <= NZD2) THEN
            DO J = 1,NY
              DO I = 1,NX
	        IF     (I <= NXD2 .AND. J <= NYD2)  THEN
                  A0(I) = 1.0
	        ELSEIF (I  > NXD2 .AND. J <= NYD2)  THEN
                  A0(I) = 2.0
	        ELSEIF (I <= NXD2 .AND. J  > NYD2)  THEN
                  A0(I) = 4.0
	        ELSEIF (I  > NXD2 .AND. J  > NYD2)  THEN
                  A0(I) = 3.0
	        ENDIF
              ENDDO
              CALL WRTLIN(LUN1,A0,NX,(K-1)*NY+J)
            ENDDO
          ELSE
            DO J = 1,NY
              DO I = 1,NX
	        IF     (I <= NXD2 .AND. J <= NYD2)  THEN
                  A0(I) = 5.0
	        ELSEIF (I  > NXD2 .AND. J <= NYD2)  THEN
                  A0(I) = 6.0
	        ELSEIF (I <= NXD2 .AND. J  > NYD2)  THEN
                  A0(I) = 8.0
	        ELSEIF (I  > NXD2 .AND. J  > NYD2)  THEN
                  A0(I) = 7.0
	        ENDIF
              ENDDO
              CALL WRTLIN(LUN1,A0,NX,(K-1)*NY+J)
            ENDDO
          ENDIF
        ENDDO

C     DEFAULT **************************************************** DEFAULT

      CASE DEFAULT
         CALL ERRT(101,'UNIDENTIFIED OPTION',NE)

      END SELECT

      END

@


1.40
log
@email_health_dept
@
text
@d3 10
a12 9
C MODEL3.F                         DOCUMENT FILE OPTION FEB   88 JF
C                                  FILENAMES LENGTHENED DEC   88 AL
C                                  CHAR. VARIABLES      AUG   89 AL
C                                  REWRITTEN SOME       APR   97 AL
C                                  HELIX BUGS FIXED     AUG   02 AL
C                                  RDPRAF REMOVED       DEC   05 AL
C                                  NORMAL GAUSSIAN      APR   09 AL
C                                  CYL BUG              SEP   09 AL
C                                  G2..                 JAN   12 AL
d18 1
a18 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d87 1
d97 1
a97 1
     &      'B/C/G/G1/G2/G3/H/HA/NUM/R/T/S/SP/SPA/SPV/W', NULL,IRTFLG)
d661 2
a662 2
90      FORMAT('  CENTER:',G8.2,',',G8.2,',',G8.2,
     &         '  RADII:', G8.2,',',G8.2,',',G8.2) 
d695 44
@


1.39
log
@enter
@
text
@d19 1
a19 1
C=* Email: spider@@wadsworth.org                                        *
@


1.38
log
@formating
@
text
@d221 1
a221 1
     &        'ENTER DENSITY INSIDE SPHERES (<CR> = 2.0)',
d330 1
a330 1
     &      'ENTER DENSITY VALUE FOR SPHERES (DEFAULT = 2.0)',
@


1.37
log
@IF (COPT == 'I' for menu listing
@
text
@d659 1
a659 1
90      FORMAT(' CENTER:',G8.2,',',G8.2,',',G8.2,
@


1.36
log
@undefined xoff in sp model code
@
text
@d75 2
a76 2
       WRITE(NOUT,100)
 100   FORMAT(
@


1.35
log
@*** empty log message ***
@
text
@d186 4
a202 3
	   XOFF = 0.
	   YOFF = 0.
	   ZOFF = 0.
d229 1
a229 1
C       THE DEFAULT COORDINATES OF THE ALL THE SPHERES ARE CENTER.
d239 3
a241 3
        STDX = MIN(NX,NY,NZ) / 2   -5
        XCEN = 0.0
 	CALL RDPRM2S(STDX,XCEN,NOT_USED,
d249 2
a250 2
        IF (STDX <  0) IRAD = 1
        IF (XCEN <  0) IRAD = 2
d255 2
a256 2
2200	RAD2(NSPH)  = STDX
	RAD1(NSPH)  = XCEN
d288 1
a288 1
     &         ADUM(3) == 0.)THEN
@


1.34
log
@prompts improved, g2, rewrite
@
text
@d253 1
d311 1
a311 1
	IF (NSPH  == MAXSPH) THEN
d341 1
a341 1
	CALL RDPRM2S(NSPH,NTURN,NOT_USED,
d343 1
a343 1
	IF (NSPH  ==  MAXSPH) THEN
d655 1
a655 1
     &              'STD. DEVIATIONS (X,Y,Z)',IRTFLG)
d657 1
a657 1
        WRITE(NOUT,90) XCEN,YCEN,ZCEN,STDX,STDY,STDZ
d659 1
a659 1
     &         '   STD:', G8.2,',',G8.2,',',G8.2) 
@


1.33
log
@GPL_2010
@
text
@d6 1
a6 2
C                                  REWRITTEN SOME       APRIL 97 AL
C                                  FUNCTIONS ADDED      ??       ?
d11 1
d17 1
a17 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d35 1
a35 1
C    MODEL3(LUN1,NDOC,FILNAM,NSAM,NROW,NSLICE)
d42 1
a42 1
C                      NSAM,NROW,NSLICE   DIMENSIONS OF FILE
d47 1
a47 1
	SUBROUTINE MODEL3(LUN1,NDOC,FILNAM,NSAM,NROW,NSLICE)
d52 3
d58 1
a58 1
	INTEGER          :: NX(MAXSIN),NY(MAXSIN),NZ(MAXSIN)
d63 1
a63 1
        REAL                  :: A0(NSAM)
a65 1
        CHARACTER(LEN=*)      :: FILNAM
d68 3
a70 1
        CHARACTER(LEN=1)      :: NULL,GA,YN
a74 6
        NULL = CHAR(0)

	XOFF = 0.
	YOFF = 0.
	ZOFF = 0.

d77 16
a92 14
     &    ' .MENU: B     -- BLANK, CONSTANT DENSITY VOLUME'/
     &    '        C     -- SET OF CYLINDERS'/
     &    '        G     -- GAUSSIAN FUNCTION'/
     &    '        G1    -- GAUSSIAN FUNCTION (0...1)'/
     &    '        H     -- HELIX OF SPHERES'/
     &    '        HA    -- HELIX OF SPHERES, ADD DENSITIES'/
     &    '        NUM   -- LINE NUMBERS'/
     &    '        R     -- RANDOM STATISTICS'/
     &    '        T     -- 3D SINE WAVES'/
     &    '        S     -- SET OF 3D SINE WAVES'/
     &    '        SP    -- SET OF SPHERES'/
     &    '        SPA   -- SET OF SPHERES, ADD DENSITIES'/
     &    '        SPV   -- SET OF SPHERES, VARIABLE DENSITIES'/
     &    '        W     -- DENSITY WEDGE'/)
d95 1
a95 1
     &      'B/C/G/G1/H/HA/NUM/R/T/S/SP/SPA/SPV/W', NULL,IRTFLG)
d102 6
a107 6
      IF (ANS(1:NCHAR) .EQ. 'T') THEN
  200    NS    = 1
         CX(1) = 1.0
         NX(1) = 2
         NY(1) = 2
         NZ(1) = 2
d110 5
a114 2
         CALL RDPRMI(NS,IDUM,NOT_USED,'NUMBER OF SINE WAVES')
         IF (NS .GT. MAXSIN) THEN
d116 1
a116 1
  400       FORMAT(' *** BUFFER SPACE RESTRICTED TO ',I3,' SINE WAVES')
d122 2
a123 2
            CALL RDPRA('REL. AMPL., SPATIAL FREQUENCY (KX,KY,KZ)',
     &            4,0,.FALSE.,FWA,NVAL,IRTFLG)
d126 5
a130 5
            CX(I) = FWA(1)
            NX(I) = FWA(2)
            NY(I) = FWA(3)
            NZ(I) = FWA(4)
            AV    = AV + CX(I)
d135 1
a135 1
            WRITE(NOUT, 900)I,CX(I),NX(I),NY(I),NZ(I)
d140 6
a145 4
      DO L = 1,NSLICE
         PHASEZ = FLOAT(L-1) * TWOPI / FLOAT(NSLICE)                 
         DO I=1,NROW
           PHASE = FLOAT(I-1) * TWOPI / FLOAT(NROW)
d147 1
a147 1
           DO J=1,NSAM
d149 3
a151 3
             A0(J) = CX(K) * SIN(FLOAT(J-1) * TWOPI * FLOAT(NX(K)) /
     &                FLOAT(NSAM) +
     &              PHASE * FLOAT(NY(K)) + PHASEZ * FLOAT(NZ(K)))+ A0(J)
d154 1
a154 1
           CALL WRTLIN(LUN1,A0,NSAM,I+(L-1)*NROW)
a156 2
      RETURN

d161 3
a163 2
      SCF = 2.0 / FLOAT(NROW+NSAM+NSLICE)
      DO  L=1,NSLICE
d165 2
a166 1
         DO I=1,NROW
d168 2
a169 1
            DO J = 1,NSAM
d172 1
a172 1
            CALL WRTLIN(LUN1,A0,NSAM,(L-1)*NROW+I)
a174 1
      RETURN
d181 3
a183 2
     &        'GET COORDINATES FROM DOCUMENT FILE (Y/N)',NULL,IRTFLG)
        IF (IRTFLG .EQ. -1) RETURN
d191 1
a191 3
           IF (IRTFLG .EQ. -1) RETURN
           CALL RDPRMI(NNSPH,IREG,NOT_USED,
     &          'NUMBER OF SPHERES, STARTING COL. FOR X,Y, & Z')
d193 9
d203 1
a203 1
     &          'X, Y, & Z OFFSETS',IRTFLG)
d209 1
a209 1
        IF (ANS(1:3) .EQ. 'SPV') THEN
d212 1
a212 1
           IF (ANS(4:4) .EQ. 'A') GETOLD = .TRUE.
d216 1
a216 3
           CALL RDPRM(AMQ, NOT_USED, 
     &        'ENTER MASS VALUE PER VOXEL (DEFAULT = 2.0)')
           IF (AMQ .EQ. 0.0) AMQ = 2.0     
d218 7
d226 1
d231 5
a235 5
           RAD1(L)  = 0.0
           RAD2(L)  = 0.0
           XX(L) = NSAM/2 + 1
           YY(L) = NROW/2 + 1
           ZZ(L) = NSLICE/2 + 1
d238 5
a242 2
 	CALL RDPRM2(RAD2(1),RAD1(1),
     &       NOT_USED,'OUTER AND INNER RADII OF SPHERES')
d248 2
a249 2
        IF (RAD2(1) .LT. 0) IRAD = 1
        IF (RAD1(1) .LT. 0) IRAD = 2
d251 4
a254 3
	IF (.NOT. LDOC) WRITE(NOUT,*) ' TYPE: 0, 0, 0  TO STOP INPUT'
2200	RAD2(NSPH)   = RAD2(1)
	RAD1(NSPH)   = RAD1(1)
d260 1
a260 1
	IF (ANS(3:3) .EQ. 'A') SWITCH = 1.0
d263 2
a264 1
           CALL UNSAV(DOCNAM,NOPEN,NDOC,NSPH,CX,IREG+2+IRAD+IDEN,
d271 3
a273 3
           IF (IRAD.GT.0) RAD2(NSPH) = CX(IREG+3)
           IF (IRAD.GT.1) RAD1(NSPH) = CX(IREG+4)
           IF (IDEN.GT.0) DENS(NSPH) = CX(IREG+3+IRAD)
d276 3
a278 1
	
d280 2
a281 1
     &                 'X, Y, Z',IRTFLG)
d284 6
a289 4
           IF (ADUM(1).EQ.0..AND.ADUM(2).EQ.0..AND.ADUM(3).EQ.0.)THEN
              NSPH = NSPH - 1
              IF (NSPH .EQ. 0) RETURN
              GOTO 3000
d300 7
a306 6
        IF (ZZ(NSPH)+RAD2(NSPH) .GT. NSLICE .OR.
     &      ZZ(NSPH)-RAD2(NSPH) .LT. 0      .OR.
     &      YY(NSPH)+RAD2(NSPH) .GT. NROW   .OR.
     &      YY(NSPH)-RAD2(NSPH) .LT. 0      .OR.
     &      XX(NSPH)+RAD2(NSPH) .GT. NSAM   .OR.
     &      XX(NSPH)-RAD2(NSPH) .LT. 0)      WRITE(NOUT,2450)NSPH
d308 3
a310 3
 2450   FORMAT(' *** SPHERE ',I3,' WILL BE TRUNCATED')
	IF (LDOC .AND. NSPH .EQ. NNSPH) GOTO 3000       
	IF (NSPH .EQ. MAXSPH) THEN
a319 1

d328 2
a329 1
     &      'ENTER DENSITY VALUE FOR SPHERES (DEFAULT = 2.0)',IRTFLG)
d338 5
a342 2
	CALL RDPRMI(NSPH,NTURN,NOT_USED,'NO. OF SPHERES, NO. OF TURNS')
	IF (NSPH .EQ. MAXSPH) THEN
d350 1
a350 1
           XX(N)   = NSAM/2+1    + RHEL * COS(TWOPI * FLOAT(N-1) * 
d352 1
a352 1
           ZZ(N)   = NSLICE/2+1  + RHEL * SIN(TWOPI * FLOAT(N-1) *
d354 1
a354 1
           YY(N)   = FLOAT(N-1)  * FLOAT(NROW) / FLOAT(NSPH)
d357 2
a358 2
 3000 IF (NSPH .EQ. 0) NSPH = 1
      DO L1 = 1, NSLICE
d363 1
a363 1
         DO L2 = 1, NROW
d370 1
a370 1
              CALL REDLIN(LUN1,A0,NSAM,(L1-1)*NROW+L2)
d373 1
a373 1
           DO L3 = 1, NSAM
d379 1
a379 1
               IF (IDEN .GT. 0) AMQ = DENS(N)
d381 1
a381 1
               IF (XYZ .GE. RAD41 .AND.  XYZ .LE. RAD44) THEN
d387 1
a387 1
           CALL WRTLIN(LUN1,A0,NSAM,(L1-1)*NROW+L2)
a389 2
      RETURN

d394 2
a395 1
      CALL RDPRMC(GA,NCHAR,.TRUE.,'GAUSSIAN DISTRIBUTED? (Y/N)',
d397 1
a397 1
      IF (IRTFLG .EQ. -1) RETURN
d399 1
a399 1
      GFLAG = (GA .EQ. 'Y')
d401 3
a403 2
	CALL RDPRM2(XM,SD,NOT_USED,
     &          'MEAN AND STANDARD DEVIATION OF GAUSSIAN DIST.')
d406 2
a407 2
      DO L = 1,NSLICE
        DO I = 1,NROW
d409 1
a409 1
             DO K = 1,NSAM
d415 1
a415 1
          CALL WRTLIN(LUN1,A0,NSAM,I+(L-1)*NROW)
a418 1
      RETURN
d423 10
a432 5
      CALL RDPRM(BACK,NOT_USED,'BACKGROUND CONSTANT')
      A0 = BACK
      DO L=1,NSLICE
         DO I=1,NROW
            CALL WRTLIN(LUN1,A0,NSAM,I+(L-1)*NROW)
d436 1
a436 1
      RETURN
d444 3
a446 2
      CALL RDPRM1S(BVAL,NOT_USED,'BACKGROUND DENSITY VALUE',IRTFLG)
      IF (IRTFLG .NE. 0) RETURN
d450 4
a453 2
      DO IREC=1,NROW*NSLICE
         CALL WRTLIN(LUN1,A0,NSAM,IREC)
d457 1
a457 1
     &     'CYLINDER AXIS; X, Y, Z (OR Q TO END CYLINDER ENTRY)',
d459 3
a461 1
      IF (YN .NE. 'X' .AND. YN .NE. 'Y' .AND. YN .NE. 'Z') RETURN 
d463 2
d467 1
a467 1
      IF (RADC .EQ. 0.0 .OR.  HT .EQ. 0.0) RETURN
d470 6
a475 1
      CALL RDPRM2S(XH,YH,NOT_USED,'X & Y COORDINATES OF CENTER',IRTFLG)
d478 5
a482 1
      CALL RDPRM2S(ZH,VALUE,NOT_USED,'Z COORDINATE, DENSITY',IRTFLG)
d486 2
a487 1
      IF (YN .EQ. 'Y') THEN 
d490 2
a491 2
         IF (NSL1 .LT. 1) NSL1 = 1
         IF (NSL2 .GT. NSLICE) NSL2 = NSLICE
d494 2
a495 2
         IF (NX1 .LT. 1) NX1 = 1
         IF (NX2 .GT. NSAM) NX2 = NSAM
d498 3
a500 2
         IF (NY1 .LT. 1) NY1 = 1
         IF (NY2 .GT. NROW) NY2 = NROW
d504 1
a504 1
           I1 = (L - 1) * NROW
d507 1
a507 1
             CALL REDLIN(LUN1,A0,NSAM,I+I1)
d509 1
a509 1
                IF ((FLOAT(K)-XH)**2 + Z2 .LE. RAD44) A0(K) = VALUE                 
d511 1
a511 1
             CALL WRTLIN(LUN1,A0,NSAM,I1+I)
d517 1
a517 1
      IF (YN .EQ. 'Z') THEN 
d521 2
a522 2
         IF (NSL1 .LT. 1) NSL1 = 1
         IF (NSL2 .GT. NSLICE) NSL2 = NSLICE
d525 2
a526 2
         IF (NX1 .LT. 1) NX1=  1
         IF (NX2 .GT. NSAM) NX2 = NSAM
d529 3
a531 2
         IF( NY1 .LT. 1) NY1 = 1
         IF (NY2 .GT. NROW) NY2 = NROW
d535 2
a536 1
           I1 = (L-1)*NROW
d538 1
a538 1
             CALL REDLIN(LUN1,A0,NSAM,I+I1)
d540 1
d542 1
a542 1
                IF ((FLOAT(K)-XH)**2+Y2 .LE. RAD44) A0(K) = VALUE 
d544 1
a544 1
             CALL WRTLIN(LUN1,A0,NSAM,I1+I)
d550 1
a550 1
      IF (YN .EQ. 'X') THEN 
d553 2
a554 2
         IF (NSL1 .LT. 1) NSL1=1
         IF (NSL2 .GT. NSLICE) NSL2=NSLICE
d557 2
a558 2
         IF (NX1 .LT. 1) NX1 = 1
         IF (NX2 .GT. NSAM) NX2 = NSAM
d561 2
a562 2
         IF (NY1.LT.1) NY1=1
         IF (NY2.GT.NROW) NY2=NROW
d566 1
a566 1
            I1 = (L-1) * NROW
d568 1
d571 3
a573 2
               IF (Z2+Y2 .LE. RAD44) THEN
                  CALL REDLIN(LUN1,A0,NSAM,I+I1)
d577 1
a577 1
                CALL WRTLIN(LUN1,A0,NSAM,I1+I)
d585 1
a585 1
C     PUT NUMBERS INTO VOLUME:******************************* NUMBERS
d587 2
a588 1
      CALL RDPRMI(IPOS,IDUM,NOT_USED,'POSITION IN LINE')
d590 2
a591 1
      CALL RDPRM(SCALE,NOT_USED,'SCALING FACTOR')
d594 2
a595 2
      DO L=1,NSLICE
        DO I=1,NROW
d597 1
a597 1
          A0(IPOS) = FLOAT((L-1) * NROW +I ) * SCALE
d599 2
a600 1
          CALL WRTLIN(LUN1,A0,NSAM,I+(L-1)*NROW)
d604 22
a625 10
      CALL RDPRMC(ANS,NCHAR,.TRUE.,'NUMBER PIXELS IN LINE? (Y/N)',
     &              NULL,IRT)
      IF (ANS(1:1) .EQ. 'Y') THEN
        CALL RDPRMI(ISLIC,ILINE,NOT_USED,'SLICE NUMBER, LINE NUMBER')

        CALL RDPRM(SCALE2,NOT_USED,'SCALING FACTOR')

        ILL = (ISLIC-1) * NROW + ILINE
        CALL REDLIN(LUN1,A0,NSAM,ILL)
        DO  I=1,NSAM
d631 1
a631 1
        CALL WRTLIN(LUN1,A0,NSAM,ILL)
a632 1
      RETURN
d634 1
a634 1
      CASE ('G','G1')
d640 24
a663 2
        CALL RDPRA('COORDINATES OF THE CENTER (X,Y,Z)',
     &              3,0,.FALSE.,RAD1,NVAL,IRTFLG)
d665 2
a666 2
	CALL RDPRA('STD. DEVIATIONS (X,Y,Z)',
     &             3,0,.FALSE.,RAD2,NVAL,IRTFLG)
a667 1
	GNM = 1.0 / RAD2(1) / RAD2(2) / RAD2(3) / (2*QUADPI)**1.5
d670 11
a680 16
        IF (ANS(1:2) .EQ. 'G1' ) THEN
C          ADJUST GAUSSIAN TO 0...1.0
           GNM = 1.0
        ENDIF

	DO I=1,3
	   RAD2(I) = RAD2(I) * RAD2(I)
	ENDDO

        DO K = 1,NSLICE
           DO J = 1,NROW
              DO I = 1,NSAM
	        EEE = 0.5 * ((I - RAD1(1)) **2 / RAD2(1) +
     &		             (J - RAD1(2)) **2 / RAD2(2) +
     &		             (K - RAD1(3)) **2 / RAD2(3))
	        IF (EEE .GE. TNM) THEN
d683 1
d688 1
a688 1
             CALL WRTLIN(LUN1,A0,NSAM,J+(K-1)*NROW)
a691 3
	RETURN


d693 1
a693 1
      CALL ERRT(101,'UNIDENTIFIED OPTION',NE)
a696 1
      RETURN
@


1.32
log
@cylinder background bug
@
text
@d14 4
a17 3
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
C=* Copyright 1985-2009  Health Research Inc.,                         *
d28 1
a28 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a29 1
C=*                                                                    *
d32 1
a32 1
C=*                                                                    *                                                                  *
@


1.31
log
@ga 1
@
text
@d11 1
d14 5
a18 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d20 1
a20 6
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d25 1
a25 1
C=* This program is distributed in the hope that it will be useful,    *
d31 2
a32 4
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
d55 4
a58 3
	COMMON  NX(MAXSIN),NY(MAXSIN),CX(MAXSIN), NZ(MAXSIN),
     &    ZZ(MAXSPH),YY(MAXSPH),XX(MAXSPH),FL2(MAXSPH),FL22(MAXSPH),
     &    RAD1(MAXSPH), RAD2(MAXSPH), DENS(MAXSPH)
d68 2
a69 2
	PARAMETER     (QUADPI = 3.1415926535897932)
	PARAMETER     (TWOPI=2*QUADPI)
d112 1
a112 1
            WRITE(NOUT,400)MAXSIN
d155 1
a156 1
C     WEDGE **************************************************** WEDGE
d158 1
a158 1
      SCF = 2./FLOAT(NROW+NSAM+NSLICE)
d388 1
a389 1
C     BLANK (CONSTANT DENSITY) ********************************* BLANK
d412 1
a412 1
      DO IREC=1,NROW,NSLICE
d447 1
d464 12
a475 12
         NSL1  = ZH-HT-0.5
         NSL2  = ZH+HT+0.5
         IF (NSL1 .LT.1) NSL1=1
         IF (NSL2 .GT. NSLICE) NSL2=NSLICE
         NX1   = XH-RADC-0.5
         NX2   = XH+RADC+0.5
         IF (NX1 .LT.1) NX1=1
         IF (NX2 .GT. NSAM) NX2=NSAM
         NY1   = YH-RADC-0.5
         NY2   = YH+RADC+0.5
         IF( NY1 .LT.1) NY1=1
         IF (NY2 .GT. NROW) NY2=NROW
d484 1
a484 1
                IF((FLOAT(K)-XH)**2+Y2.LE.RAD44) A0(K) = VALUE 
d493 10
a502 10
         NSL1  = ZH-RADC-0.5
         NSL2  = ZH+RADC+0.5
         IF (NSL1.LT.1) NSL1=1
         IF (NSL2.GT.NSLICE) NSL2=NSLICE
         NX1   = XH-HT-0.5
         NX2   = XH+HT+0.5
         IF (NX1.LT.1) NX1=1
         IF (NX2.GT.NSAM) NX2=NSAM
         NY1   = YH-RADC-0.5
         NY2   = YH+RADC+0.5
d506 1
d508 2
a509 2
            I1=(L-1)*NROW
            Z2=(FLOAT(L)-ZH)**2
d511 1
a511 1
               Y2=(FLOAT(I)-YH)**2
@


1.30
log
@used rdpra instead of rdpraf
@
text
@d3 8
a10 6
C MODEL3.F                         FILENAMES LENGTHENED DEC 7 88 al
C                                  CHAR. VARIABLES AUG 89 al
C                                  REWRITTEN SOME APRIL 97 al
C                                  FUNCTIONS ADDED ??  by ?
C                                  HELIX BUGS FIXED AUG 02 al
C                                  RDPRAF REMOVED   DEC 05 al
d14 1
a14 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
a46 2
C UPDATED 9/17/85 J.F. 2/9/88 DOCUMENT FILE OPTION
C
d81 56
a136 37
     &      ' .MENU: (B)LANK    -- CONSTANT DENSITY VOLUME'/
     &      '        (C)YLINDER -- SET OF CYLINDERS'/
     &      '        (G)AUSSIAN -- GAUSSIAN FUNCTION'/
     &      '        (H)ELIX    -- HELIX OF SPHERES'/
     &      '        (HA)       -- HELIX OF SPHERES, ADD DENSITIES'/
     &      '        (NUM)BERS  -- LINE NUMBERS'/
     &      '        (R)ANDOM   -- RANDOM STATISTICS'/
     &      '        (S)INE     -- SET OF SINE WAVES'/
     &      '        (SP)HERE   -- SET OF SPHERES'/
     &      '        (SPA)      -- SET OF SPHERES, ADD DENSITIES'/
     &      '        (SPV)      -- SET OF SPHERES, VARIABLE DENSITIES'/
     &      '        (T)EST     -- 3D SINE WAVE'/
     &      '        (W)EDGE    -- DENSITY WEDGE'/)

	CALL RDPRMC(ANS,NCHAR,.TRUE.,
     &      'B/C/G/H/HA/NUM/R/S/SP/SPA/SPV/T/W', NULL,IRT)

	CALL CHKINPQ('T,S,SP,SPA,SPV,W,B,H,HA,C,NUM,R,G$',
     &              ANS(:NCHAR),ICALL)

	GOTO(5500,200,300,2000,2000,2000,1500,4100,2600,2600,
     &       4600,6000,7000,8000) ,ICALL

C     TEST & SINE WAVES *********************************** TEST & SINE

  200 NS    = 1
      CX(1) = 1.0
      NX(1) = 2
      NY(1) = 2
      NZ(1) = 2
      GOTO 1100

  300 CALL RDPRMI(NS,IDUM,NOT_USED,'NUMBER OF SINE WAVES')
      IF (NS .GT. MAXSIN) THEN
         WRITE(NOUT,400)MAXSIN
  400    FORMAT(' *** BUFFER SPACE RESTRICTED TO ',I3,' SINE WAVES')
         NS = MAXSIN
a138 21
      AV = 0.0
      DO I = 1,NS
         CALL RDPRA('REL. AMPL., SPATIAL FREQUENCY(KX,KY,KZ)',
     &         4,0,.FALSE.,FWA,NVAL,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN

         CX(I) = FWA(1)
         NX(I) = FWA(2)
         NY(I) = FWA(3)
         NZ(I) = FWA(4)
         AV    = AV + CX(I)
      ENDDO

      DO I = 1,NS
         CX(I) = CX(I) * 2.0 / AV
         WRITE(NOUT, 900)I,CX(I),NX(I),NY(I),NZ(I)
  900    FORMAT(1X,I5,F5.2,3I6)
      ENDDO

 1100 CONTINUE

d140 1
a140 1
         PHASEZ = FLOAT(L-1)*TWOPI/FLOAT(NSLICE)                 
d142 1
a142 1
           PHASE = FLOAT(I-1)*TWOPI/FLOAT(NROW)
d146 3
a148 2
             A0(J)=CX(K)*SIN(FLOAT(J-1)*TWOPI*FLOAT(NX(K))/FLOAT(NSAM)
     &              +PHASE*FLOAT(NY(K))+PHASEZ*FLOAT(NZ(K)))+A0(J)
d156 2
d160 9
a168 9
 1500  SCF = 2./FLOAT(NROW+NSAM+NSLICE)
       DO  L= 1,NSLICE
         FI = FLOAT(L) *SCF
         DO  I=1,NROW
           FI = FI + SCF*FLOAT(I)
           DO  J = 1,NSAM
             A0(J) = FI + SCF*FLOAT(J)
 	   ENDDO
           CALL WRTLIN(LUN1,A0,NSAM,(L-1)*NROW+I)
d170 1
a170 2
       ENDDO

d173 1
a173 1
C     SPHERES ************************************************* SPHERES
d175 2
a176 1
 2000   GETOLD = .FALSE.
d256 1
a256 1
     &                 'X,Y,Z',IRTFLG)
d264 1
d287 2
a288 1
	NSPH = NSPH+1
a290 1
C       SPHERES ARRANGED ON HELIX ******************************* HELIX
d292 4
a295 1
 2600   CONTINUE
d301 1
a301 1
     &      'ENTER MASS VALUE PER VOXEL (DEFAULT = 2.0)',IRTFLG)
d361 2
d365 1
a365 1
 7000 CALL RDPRMC(GA,NCHAR,.TRUE.,'GAUSSIAN DISTRIBUTION.? (Y/N)',
d372 1
a372 1
     &            'MEAN AND STANDARD DEVIATION OF GAUSSIAN DIST.')
d390 2
a391 1
C     BLANK (CONSTANT DENSITY) ********************************** BLANK
d393 1
a393 1
 4100 CALL RDPRM(BACK,NOT_USED,'BACKGROUND CONSTANT')
d403 2
a404 1
C     CYLINDERS (INTERPENETRATING) ************************** CYLINDERS
d408 5
a412 1
 4600 CALL RDPRM(BVAL,NOT_USED,'VALUE OF VOLUME BACKGROUND')
d414 2
a415 5
      DO  L=1,NSLICE
        I1=(L-1)*NROW
        DO  I=1,NROW
          CALL WRTLIN(LUN1,A0,NSAM,I1+I)
        ENDDO
d418 3
a420 4
 5000 WRITE(NOUT,*) 'YOU HAVE A CHOICE OF 3 CYLINDER AXES.'
      CALL RDPRMC(YN,NA,.TRUE.,
     &            'CHOOSE X, Y, Z (OR Q TO END CYLINDER ENTRY)',
     &            NULL,IRTFLG)
d423 4
a426 2
      CALL RDPRM2(RADC,HT,NOT_USED,'RADIUS, HEIGHT')
      IF (RADC .EQ. 0.0 .OR.  HT   .EQ. 0.0) RETURN
d428 5
a432 2
      CALL RDPRM2(XH,YH,NOT_USED,'X & Y COORDINATES OF CENTER')
      CALL RDPRM2(ZH,VALUE,NOT_USED,'Z COORDINATE, DENSITY')
d436 12
a447 12
         NSL1  = ZH-RADC-0.5
         NSL2  = ZH+RADC+0.5
         IF (NSL1.LT.1) NSL1=1
         IF (NSL2.GT.NSLICE) NSL2=NSLICE
         NX1   = XH-RADC-0.5
         NX2   = XH+RADC+0.5
         IF (NX1.LT.1) NX1=1
         IF (NX2.GT.NSAM) NX2=NSAM
         NY1   = YH-HT-0.5
         NY2   = YH+HT+0.5
         IF (NY1.LT.1) NY1=1
         IF (NY2.GT.NROW) NY2=NROW
d450 2
a451 2
           I1 = (L-1)*NROW
           Z2 =( FLOAT(L)-ZH)**2
d455 1
a455 1
                IF ((FLOAT(K)-XH)**2+Z2.LE.RAD44) A0(K) = VALUE                 
d524 4
a527 1
C     PUT NUMBERS INTO VOLUME:******************************** NUMBERS
a528 1
 6000 CALL RDPRMI(IPOS,IDUM,NOT_USED,'POSITION IN LINE')
d530 1
d534 3
a536 5
          DO K=1,NSAM
            A0(K) = 0.0
          ENDDO
          A0(IPOS) = FLOAT((L-1)*NROW+I)*SCALE
          SUM      = SUM+A0(IPOS)
d545 1
d547 1
d554 1
d560 1
d563 2
a564 2
8000	CALL RDPRA('COORDINATES OF THE CENTER X,Y,Z',
     &         3,0,.FALSE.,RAD1,NVAL,IRTFLG)
d566 2
a567 2
	CALL RDPRA('STD. DEVIATIONS X,Y,Z',
     &         3,0,.FALSE.,RAD2,NVAL,IRTFLG)
d569 10
a578 2
	GNM = 1.0/RAD2(1)/RAD2(2)/RAD2(3)/(2*QUADPI)**1.5
	TNM = ALOG(1.0/TINY(GNM))
d587 7
a593 7
	        EEE=0.5* ((I-RAD1(1))**2/RAD2(1)+
     &		    (J-RAD1(2))**2/RAD2(2)+
     &		    (K-RAD1(3))**2/RAD2(3))
	        IF (EEE.GE.TNM) THEN
	          A0(I) = 0.0
	        ELSE
                  A0(I)=GNM*EXP(-EEE)
d596 1
d600 1
d604 4
a607 2
 5500 WRITE(NOUT,*) '*** UNIDENTIFIED OPTION'
      CALL ERRT(100,'MODEL3',NE)
@


1.29
log
@GPL License fixed
@
text
@d8 1
d53 1
a56 1
        REAL FWA(4)
d58 11
a68 1
        COMMON /COMMUN/ADUM(80),DOCNAM
d70 2
a71 12
	COMMON  NX(MAXSIN),NY(MAXSIN),CX(MAXSIN), NZ(MAXSIN),
     &   ZZ(MAXSPH),YY(MAXSPH),XX(MAXSPH),FL2(MAXSPH),FL22(MAXSPH),
     &   RAD1(MAXSPH), RAD2(MAXSPH), DENS(MAXSPH)
        DIMENSION  A0(NSAM)

	LOGICAL        LDOC,GETOLD,GFLAG
        CHARACTER *(*) FILNAM
        CHARACTER *81  DOCNAM
        CHARACTER *4   ANS
        CHARACTER *1   NULL,GA,YN
	PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
	PARAMETER (TWOPI=2*QUADPI)
a73 2
	AMAX = HUGE(RAD)
	AMIN = -AMAX
d122 4
a125 3
         NVAL = 4
         CALL RDPRAF(FWA,4,NVAL,AMIN,AMAX,
     &       'REL. AMPL., SPATIAL FREQUENCY(KX,KY,KZ)','T',IRTFLG)
d130 1
a130 3

  700    FORMAT(F8.2,3I4)
         AV = AV + CX(I)
d133 1
a133 1
      DO  I = 1,NS
d145 1
a145 1
             A0 = 0.
d543 10
a552 8
8000	NVAL=3
	CALL RDPRAF(RAD1,3,NVAL,AMIN,AMAX,
     &       'COORDINATES OF THE CENTER X,Y,Z','T',IRTFLG)
	NVAL=3
	CALL RDPRAF(RAD2,3,NVAL,AMIN,AMAX,
     &       'STD. DEVIATIONS X,Y,Z','T',IRTFLG)
	GNM=1.0/RAD2(1)/RAD2(2)/RAD2(3)/(2*QUADPI)**1.5
	TNM=ALOG(1.0/TINY(GNM))
d554 1
a554 1
	   RAD2(I)=RAD2(I)*RAD2(I)
d556 1
d558 8
a565 9
         DO J = 1,NROW
          DO  I = 1,NSAM
	     EEE=0.5*
     &		((I-RAD1(1))**2/RAD2(1)+
     &		 (J-RAD1(2))**2/RAD2(2)+
     &		 (K-RAD1(3))**2/RAD2(3))
	     IF (EEE.GE.TNM)  THEN
	          A0(I)=0.0
	     ELSE
d567 4
a570 4
	     ENDIF
          ENDDO
          CALL WRTLIN(LUN1,A0,NSAM,J+(K-1)*NROW)
         ENDDO
d574 1
@


1.28
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a9 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d13 1
a13 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a32 6

C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.27
log
@0 0 0 stop message for spheres
@
text
@d1 1
d12 24
@


1.26
log
@buggy! helix
@
text
@d215 1
@


1.25
log
@*** empty log message ***
@
text
@d7 1
a7 1
C                                  HELIX BUG FIXED AUG 02 al
d298 5
a302 3
           XX(N)   = NSAM/2+1 + RHEL*COS(TWOPI*FLOAT(N-1)/FLOAT(NTURN))
           YY(N)   = FLOAT(N-1)*FLOAT(NROW)/FLOAT(NSPH)
           ZZ(N) = NSLICE/2+1 + RHEL*SIN(TWOPI*FLOAT(N-1)/FLOAT(NTURN))
@


1.24
log
@nloop,iloop_removed
@
text
@d7 1
d9 8
a16 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d44 1
a44 2
     &   RAD1(MAXSPH), RAD2(MAXSPH), RAD12(MAXSPH), RAD22(MAXSPH),
     &   DENS(MAXSPH)
a198 1
           RAD12(L) = 0.0
a199 1
           RAD22(L) = 0.0
d251 3
a253 5
        RAD22(NSPH) = RAD2(NSPH)**2
        RAD12(NSPH) = RAD1(NSPH)**2
	XX(NSPH)    = ADUM(1) + XOFF
	YY(NSPH)    = ADUM(2) + YOFF
	ZZ(NSPH)    = ADUM(3) + ZOFF
d272 1
a272 1
C       SPHERES ARRANGED ON HELIX **************************** SPHERES
d276 12
a287 3
        CALL RDPRM(AMQ, NOT_USED, 
     &      'ENTER MASS VALUE PER VOXEL (DEFAULT = 2.0)')
        IF (AMQ .EQ. 0.0) AMQ = 2.0
d289 5
a293 6
        DO L = 1, MAXSPH
           RAD1(L)  = 0.0
           RAD12(L) = 0.0
           RAD2(L)  = 0.0
           RAD22(L) = 0.0
        ENDDO
a294 10
	CALL RDPRM2(RAD2(1),RHEL,
     &       NOT_USED,'SPHERE RADIUS, HELIX RADIUS')
	RAD1(1)=RHEL
        DO  L = 1, MAXSPH
           RAD12(L) = RAD1(1)**2
           RAD22(L) = RAD2(1)**2
        ENDDO
 
	CALL RDPRMI(NSPH,NTURN,NOT_USED,
     &             'NO. OF SPHERES, NO. OF TURNS')
d296 5
a300 3
           XX(N)=NSAM/2+1 + RHEL*COS(TWOPI*FLOAT(N-1)/FLOAT(NTURN))
           YY(N)=FLOAT(N-1)*FLOAT(NROW)/FLOAT(NSPH)
           ZZ(N)=NSLICE/2+1 + RHEL*SIN(TWOPI*FLOAT(N-1)/FLOAT(NTURN))
d303 1
a303 1
 3000 IF (NSPH.EQ.0) NSPH=1
d323 1
a324 1
               RAD41 = RAD1(N)**2
d326 2
a327 3
               XYZ = FL22(N) + (L3-XX(N))**2
               IF (XYZ .GE. RAD41  .AND.  XYZ .LE. RAD44)
     &           A0(L3)= AMQ + A0(L3)*SWITCH    
d329 2
@


1.23
log
@NECHO --> NOUT
@
text
@d98 1
a98 1
  300 CALL RDPRMI(NS,IDUM,NLOOP,ILOOP,'NUMBER OF SINE WAVES')
d173 1
a173 1
           CALL RDPRMI(NNSPH,IREG,NLOOP,ILOOP,
d176 1
a176 1
           CALL RDPRM3S(XOFF,YOFF,ZOFF,NLOOP,ILOOP,
d190 1
a190 1
           CALL RDPRM(AMQ, NLOOP, ILOOP, 
d209 1
a209 1
     &       NLOOP,ILOOP,'OUTER AND INNER RADII OF SPHERES')
d241 1
a241 1
           CALL RDPRM3S(ADUM(1),ADUM(2),ADUM(3),NLOOP,ILOOP,
d281 1
a281 1
        CALL RDPRM(AMQ, NLOOP, ILOOP, 
d293 1
a293 1
     &       NLOOP,ILOOP,'SPHERE RADIUS, HELIX RADIUS')
d300 1
a300 1
	CALL RDPRMI(NSPH,NTURN,NLOOP,ILOOP,
d350 1
a350 1
	CALL RDPRM2(XM,SD,NLOOP,ILOOP,
d371 1
a371 1
 4100 CALL RDPRM(BACK,NLOOP,ILOOP,'BACKGROUND CONSTANT')
d385 1
a385 1
 4600 CALL RDPRM(BVAL,NLOOP,ILOOP,'VALUE OF VOLUME BACKGROUND')
d400 1
a400 1
      CALL RDPRM2(RADC,HT,NLOOP,ILOOP,'RADIUS, HEIGHT')
d403 2
a404 2
      CALL RDPRM2(XH,YH,NLOOP,ILOOP,'X & Y COORDINATES OF CENTER')
      CALL RDPRM2(ZH,VALUE,NLOOP,ILOOP,'Z COORDINATE, DENSITY')
d498 2
a499 2
 6000 CALL RDPRMI(IPOS,IDUM,NLOOP,ILOOP,'POSITION IN LINE')
      CALL RDPRM(SCALE,NLOOP,ILOOP,'SCALING FACTOR')
d515 2
a516 2
        CALL RDPRMI(ISLIC,ILINE,NLOOP,ILOOP,'SLICE NUMBER, LINE NUMBER')
        CALL RDPRM(SCALE2,NLOOP,ILOOP,'SCALING FACTOR')
@


1.22
log
@error around GFLAG corrected
@
text
@d121 1
a121 1
         WRITE(NECHO, 900)I,CX(I),NX(I),NY(I),NZ(I)
d250 1
a250 1
           WRITE(NECHO,2400) NSPH,(ADUM(K),K=1,3)
@


1.21
log
@extra . removed
@
text
@a0 1

d348 1
a348 1
      GFLAG = (GA ZZ .EQ. 'Y')
@


1.20
log
@gflag was used before defined
@
text
@d349 1
a349 1
      GFLAG = (GA. .EQ. 'Y')
@


1.19
log
@option G added
@
text
@d6 3
a8 1
C                                  REWRITTEN APIRL 97 al
d58 2
a59 2
	AMAX=HUGE(RAD)
	AMIN=-AMAX
d82 1
a82 1
     $      'B/C/G/H/HA/NUM/R/S/SP/SPA/SPV/T/W', NULL,IRT)
d90 1
a90 1
C TEST & SINE WAVES *************************************** TEST & SINE
d144 1
a144 1
C WEDGE ********************************************************* WEDGE
d160 1
a160 1
C SPHERES ***************************************************** SPHERES
d278 1
a278 1
C SPHERES ARRANGED ON HELIX ********************************** SPHERES
d343 1
a343 1
C RANDOM DISTRIBUTION ***************************************** RANDOM
d345 1
a345 1
 7000  CALL RDPRMC(GA,NCHAR,.TRUE.,'GAUSSIAN DISTRIBUTION.? (Y/N)',
d349 2
a350 1
      IF (GA .EQ. 'Y') THEN
d357 7
a363 7
         IF (GFLAG) THEN
          DO K = 1,NSAM
            A0(K) = RANN(XM,SD)
          ENDDO
         ELSE
	   CALL  RANDOM_NUMBER(HARVEST=A0)
         ENDIF
d370 1
a370 1
C BLANK (CONSTANT DENSITY) ************************************** BLANK
d373 1
a373 1
	A0 = BACK
d375 3
a377 3
        DO I=1,NROW
          CALL WRTLIN(LUN1,A0,NSAM,I+(L-1)*NROW)
        ENDDO
d382 1
a382 1
C CYLINDERS (INTERPENETRATING) ****************************** CYLINDERS
d384 1
a384 1
C CLEAR VOLUME FIRST (SET VOLUME BACKGROUND)
d387 1
a387 1
        A0 = BVAL
d402 1
a402 2
      IF (RADC .EQ. 0.0) RETURN
      IF (HT   .EQ. 0.0) RETURN
d407 1
a407 1
C ****************** CYLINDER AXIS ALONG Y ***********
d435 1
a435 1
C ****************** CYLINDER AXIS ALONG Z ***********
d465 1
a465 1
C ****************** CYLINDER AXIS ALONG X ***********
d497 1
a497 1
C PUT NUMBERS INTO VOLUME:************************************ NUMBERS
d529 1
a529 1
C ****************** 3D Gaussian function ***********
d539 1
a539 1
	 RAD2(I)=RAD2(I)*RAD2(I)
d544 1
a544 1
	       EEE=0.5*
d548 5
a552 5
	       IF(EEE.GE.TNM)  THEN
	        A0(I)=0.0
	       ELSE
                A0(I)=GNM*EXP(-EEE)
	       ENDIF
d562 1
@


1.18
log
@undefined nnsph if not lodoc fixed
@
text
@d52 2
a53 2

	DATA TWOPI/6.283184/,AMIN/-10E30/,AMAX/10E30/
d56 2
d67 1
d80 1
a80 1
     $      'B/C/H/HA/NUM/R/S/SP/SPA/SPV/T/W', NULL,IRT)
d82 1
a82 1
	CALL CHKINPQ('T,S,SP,SPA,SPV,W,B,H,HA,C,NUM,R$',
d86 1
a86 1
     &       4600,6000,7000) ,ICALL
d130 1
a131 1
             A0(J) = 0.
d370 1
a372 3
          DO K=1,NSAM
            A0(K) = BACK
          ENDDO
d384 1
a384 4
      DO  K=1,NSAM
        A0(K) = BVAL
      ENDDO

d527 29
a559 1
      RETURN
@


1.17
log
@'t' used in rdpraf call.
@
text
@d252 3
a254 3
	XX(NSPH)    = ADUM(1)+XOFF
	YY(NSPH)    = ADUM(2)+YOFF
	ZZ(NSPH)    = ADUM(3)+ZOFF
d257 5
a261 5
     1      ZZ(NSPH)-RAD2(NSPH) .LT. 0      .OR.
     2      YY(NSPH)+RAD2(NSPH) .GT. NROW   .OR.
     3      YY(NSPH)-RAD2(NSPH) .LT. 0      .OR.
     4      XX(NSPH)+RAD2(NSPH) .GT. NSAM   .OR.
     5      XX(NSPH)-RAD2(NSPH) .LT. 0)      WRITE(NOUT,2450)NSPH
d264 1
a264 1
	IF (NSPH.EQ.NNSPH) GOTO 3000       
@


1.16
log
@removed rdpraf or rdprai
@
text
@d105 1
a105 1
     &       'REL. AMPL., SPATIAL FREQUENCY(KX,KY,KZ)',NULL,IRTFLG)
@


1.15
log
@ran
@
text
@d105 1
a105 1
     $       'REL. AMPL., SPATIAL FREQUENCY(KX,KY,KZ)',NULL,IRTFLG)
d170 1
a170 1
     &          'NUMBER OF SPHERES, STARTING COL. FOR X,Y,Z')
d172 3
a174 7
           NVAL = 3
           CALL RDPRAF(ADUM,3,NVAL,AMIN,AMAX,'X,Y, & Z  OFFSETS',
     &           NULL,IRTFLG)

           XOFF = ADUM(1)
           YOFF = ADUM(2)
           ZOFF = ADUM(3)
d237 2
a238 2
           NVAL = 3
           CALL RDPRAF(ADUM,3,NVAL,AMIN,AMAX,'X,Y,Z',NULL,IRTFLG)
d289 1
a289 1
     1       NLOOP,ILOOP,'SPHERE RADIUS, HELIX RADIUS')
d296 2
a297 1
	CALL RDPRMI(NSPH,NTURN,NLOOP,ILOOP,'NO. OF SPHERES, NO. OF TURNS')
d397 1
a397 1
     $            NULL,IRTFLG)
@


1.14
log
@added type change call
@
text
@a33 1
CNO_SAVE
d44 2
a45 1
     &   DENS(MAXSPH), A0(2048)
a46 4
        INTEGER*2      ITIMN(5)
        CHARACTER*10   CITIMN
        EQUIVALENCE    (ITIMN,CITIMN)

d68 1
a68 2
     &      '        (Q)UICK    -- RANDOM UNIFORM STATISTICS'/
     &      '        (R)ANDOM   -- RANDOM UNIFORM STATISTICS'/
d77 1
a77 1
     $      'B/C/H/HA/NUM/Q/R/S/SP/SPA/SPV/T/W', NULL,IRT)
d79 1
a79 1
	CALL CHKINPQ('T,S,SP,SPA,SPV,W,Q,B,H,HA,C,NUM,R$',
d82 1
a82 1
	GOTO(5500,200,300,2000,2000,2000,1500,3700,4100,2600,2600,
d343 1
a343 4
 3700 CALL TIME(CITIMN)
      IST   = ITIMN(4)
      KST   = ITIMN(3)
      CALL RDPRMC(GA,NCHAR,.TRUE.,'GAUSSIAN DISTRIBUTION.? (Y/N)',
a346 1
      GFLAG = .FALSE.
a347 2
	GFLAG = .TRUE.
	NOR   = MOD(INT(ITIMN(2)),2046)
d354 1
a354 51
          DO K = 1,NSAM
            IF (GFLAG) THEN
               A0(K) = RANN(XM,SD,NOR)
            ELSE
               A0(K) = RAN(IST)
            ENDIF
          ENDDO
          CALL WRTLIN(LUN1,A0,NSAM,I+(L-1)*NROW)
        ENDDO
      ENDDO

      RETURN

C QUICK RANDOM DISTRIBUTION ************************************* QUICK

7000  CALL TIME(CITIMN)
      IST   = ITIMN(4)
      KST   = ITIMN(3)
      GFLAG = .FALSE.

      CALL RDPRMC(GA,NCHAR,.TRUE.,'GAUSSIAN DISTRIBUTION.? (Y/N)',
     &            NULL,IRTFLG)
      IF (IRTFLG .EQ. -1) RETURN
      IF (GA .EQ. 'Y') THEN 
         GFLAG = .TRUE.
         ADD   = 0.0
         WRITE(NOUT,7011)
7011     FORMAT(
     $/,' BY DEFAULT GAUSSIAN DIST. WITH 0 MEAN AND STAND. DEV. 1.'
     $/,' YOU MAY CHANGE THIS BY MULTIPLYING WITH F AND ADDING C:'
     $/,' NEW_VALUE=OLD_VALUE*F+C')

         CALL RDPRM2(ADD,FMUL,NLOOP,ILOOP,'ENTER C, F (DEF=0,1)')
         IF (FMUL .EQ. 0) FMUL=1.
      ELSE
        WRITE(NOUT,7012)
7012    FORMAT(' ENTER SCALING VALUES:  NEW_VALUE = OLD_VALUE * F + C')
        CALL RDPRM2(ADD,FMUL,NLOOP,ILOOP,'ENTER C, F (DEFAULTS = 0,1)')
        IF (FMUL .EQ. 0) FMUL = 1.0
      ENDIF

C     INITIALIZE RANDOM GENERATOR 
      CALL MRAND(OUT,KST,GFLAG,NOUT)

C     WARM UP:
      DO I=1,2000
         CALL GETRAND(OUT)
      ENDDO

      DO L = 1,NSLICE
        DO I = 1,NROW
d356 1
a356 2
            CALL GETRAND(OUT)
            A0(K) = OUT * FMUL + ADD
d358 3
@


1.13
log
@*** empty log message ***
@
text
@d358 1
a358 1
	NOR   = MOD(ITIMN(2),2046)
@


1.12
log
@improved layout & prompts
@
text
@d147 1
a147 1
       DO 1800 L= 1,NSLICE
d149 1
a149 1
         DO 1700 I=1,NROW
d151 1
a151 1
           DO 1600 J = 1,NSAM
d153 1
a153 1
 1600      CONTINUE
d155 2
a156 2
 1700    CONTINUE
 1800 CONTINUE
@


1.11
log
@ TIME parameter must be char
@
text
@d6 1
d27 2
a64 3
	LDOC = .FALSE.
	IF (FCHAR(5:5) .EQ. 'D') LDOC = .TRUE.

d66 14
a79 13
 100   FORMAT(' .MENU: (B)LANK    -- CONSTANT DENSITY'/
     &        '        (C)YLINDER -- SET OF CYLINDERS'/
     &        '        (H)ELIX    -- HELIX OF SPHERES'/
     &        '        (HA)       -- AS (H), ADD DENSITIES'/
     &        '        (NUM)BERS  -- LINE NUMBERS'/
     &        '        (Q)UICK    -- RANDOM UNIFORM STATISTICS'/
     &        '        (R)ANDOM   -- RANDOM UNIFORM STATISTICS'/
     &        '        (S)INE     -- SET OF SINE WAVES'/
     &        '        (SP)HERE   -- SET OF SPHERES'/
     &        '        (SPA)      -- AS (SP), ADD DENSITIES'/
     &        '        (SPV)      -- AS (SP), VARIABLE DENSITIES'/
     &        '        (T)EST     -- 3D SINE WAVE'/
     &        '        (W)EDGE    -- DENSITY WEDGE'/)
d90 1
a90 1
C TEST & SINE WAVES **************************************************
d144 1
a144 1
C WEDGE ***********************************************************
d160 1
a160 1
C SPHERES *********************************************************
d163 25
d196 1
a196 1
     &     'ENTER MASS VALUE PER VOXEL(DEFAULT = 2.0)')
d203 1
a203 1
        DO 2100 L = 1, MAXSPH
d211 1
a211 16
 2100   CONTINUE
C
	IF (LDOC) THEN
           NOPEN = 0
           CALL FILERD(DOCNAM,NLET,NULL,'DOCUMENT',IRTFLG)
           CALL RDPRMI(NNSPH,IREG,NLOOP,ILOOP,
     &          'NUMBER OF SPHERES, STARTING COL. FOR X,Y,Z')

           NVAL = 3
           CALL RDPRAF(ADUM,3,NVAL,AMIN,AMAX,'X,Y,Z -OFFSETS',
     &           NULL,IRTFLG)

           XOFF = ADUM(1)
           YOFF = ADUM(2)
           ZOFF = ADUM(3)
	ENDIF
d214 1
a214 1
     &       NLOOP,ILOOP,'OUTER AND INNER RADIUS OF SPHERES')
d216 2
a218 2
C       CHANGED 10/12/88 MR
C       FIND IF AND HOW MANY RADII ALSO HAVE TO BE READ FROM DOCUMENT FILE:
d220 2
a221 2
        IF (RAD2(1).LT.0) IRAD=1
        IF (RAD1(1).LT.0) IRAD=2
a224 10
C       THE FOLLOWING TWO LINES HAVE BEEN MOVED DOWN: 10/12/88 MR
C       RAD22(NSPH) = RAD2(NSPH)**2
C       RAD12(NSPH) = RAD1(NSPH)**2

C THIS WAS COMMENTED OUT EARLIER, DON'T ACTIVATE AGAIN WITHOUT DOING
C SOMETHING FOR NEGATIVE RADIUS VALUES!:
C       IF (RAD2(NSPH) .LE. 0.0) GO TO 3000

C 'SPA' OPTION -- ADD MASSES WHERE SPHERES OVERLAP
C 'SP'  OPTION -- LET SPHERES INTERPENETRATE
d226 2
a227 2
	SWITCH=0.0
	IF (ANS(3:3).EQ.'A') SWITCH=1.0
d229 2
a230 1
 2300	CONTINUE
d236 1
a236 1
           NOPEN=1
d258 1
a258 2
C COMMENTED OUT , SHOULD ONLY BE USED FOR INTERACTIVE INPUT. 10/13/88 MR
C	IF (ADUM(1).EQ.0..AND.ADUM(2).EQ.0..AND.ADUM(3).EQ.0.) GOTO 3000
d271 1
d275 3
a277 3
		WRITE(NOUT,2500)MAXSPH
 2500	FORMAT(' ** NUMBER OF SPHERES LIMITED TO',I3)
		 GOTO 3000
d279 1
a279 1
	NSPH=NSPH+1
d282 1
a282 1
C SPHERES ARRANGED ON HELIX ***************************************
d290 1
a290 1
        DO 2700 L = 1, MAXSPH
d295 1
a295 1
 2700   CONTINUE
d298 1
a298 1
     1       NLOOP,ILOOP,'SPH.RADIUS, HEL.RADIUS')
d300 1
a300 1
        DO 2750 L = 1, MAXSPH
d303 1
a303 1
 2750   CONTINUE
d306 1
a306 1
	DO 2800 N=1,NSPH
d310 1
a310 1
 2800	CONTINUE
d313 2
a314 2
      DO 3600 L1 = 1, NSLICE
         DO 3100  N = 1, NSPH
d316 6
a321 1
 3100    CONTINUE
a322 4
         DO 3500 L2 = 1, NROW
           DO 3200 N  =1, NSPH
             FL22(N) = FL2(N) + (L2-YY(N))**2
 3200      CONTINUE
d324 2
a325 2
C            WANT TO ADD NEW SPERES TO EXISTING FILE
             CALL REDLIN(LUN1,A0,NSAM,(L1-1)*NROW+L2)
d328 1
a328 1
           DO 3400 L3 = 1, NSAM
d331 1
a331 1
             DO 3300 N=1, NSPH
d337 8
a344 9
     &          A0(L3)= AMQ + A0(L3)*SWITCH    
C               NAIK GENERAL AMQ NOT 2

 3300        CONTINUE
 3400      CONTINUE
         CALL WRTLIN(LUN1,A0,NSAM,(L1-1)*NROW+L2)
 3500    CONTINUE
 3600 CONTINUE
	RETURN
d346 1
a346 1
C RANDOM DISTRIBUTION **********************************************
d351 4
d356 1
a356 2
      CALL RDPRMC(GA,NCHAR,.TRUE.,'GAUSSIAN DIST.? (Y/N)',NULL,IRT)
      IF (GA.EQ.'Y') THEN
d360 1
a360 1
     &            'MEAN AND ST.DEV. OF GAUSSIAN DIST.')
d363 2
a364 2
      DO 4000 L = 1,NSLICE
        DO 3900 I = 1,NROW
d373 2
a374 2
 3900   CONTINUE
 4000 CONTINUE
d378 2
a379 1
C **** RANDOM DISTRIBUTION:
d385 3
a387 1
      CALL RDPRMC(GA,NCHAR,.TRUE.,'GAUSSIAN DIST.? (Y/N)',NULL,IRT)
d390 1
a390 1
         ADD=0.
d401 3
a403 3
7012    FORMAT(' ENTER SCALING',/,' NEW_VALUE=OLD_VALUE*F+C')
        CALL RDPRM2(ADD,FMUL,NLOOP,ILOOP,'ENTER C, F (DEF=0,1)')
        IF (FMUL .EQ. 0) FMUL=1.
d410 7
a416 6
      DO 7010 I=1,2000
      CALL GETRAND(OUT)
7010  CONTINUE
      DO 7100 L = 1,NSLICE
        DO 7100 I = 1,NROW
          DO 7200 K = 1,NSAM
d418 2
a419 2
            A0(K) = OUT*FMUL+ADD
7200      CONTINUE
d421 2
a422 1
7100  CONTINUE
d426 1
a426 1
C BLANK (CONSTANT DENSITY) *****************************************
d429 3
a431 3
      DO 4400 L=1,NSLICE
        DO 4300 I=1,NROW
          DO 4200 K=1,NSAM
d433 1
a433 1
 4200     CONTINUE
d435 2
a436 2
 4300   CONTINUE
 4400 CONTINUE
d440 1
a440 1
C CYLINDERS (INTERPENETRATING) *************************************
d466 2
a467 2
      CALL RDPRM2(XH,YH,NLOOP,ILOOP,'X,Y COOS OF CENTER')
      CALL RDPRM2(ZH,VALUE,NLOOP,ILOOP,'Z COO, DENSITY')
d471 24
a494 25

      NSL1  = ZH-RADC-0.5
      NSL2  = ZH+RADC+0.5
      IF(NSL1.LT.1) NSL1=1
      IF(NSL2.GT.NSLICE) NSL2=NSLICE
      NX1   = XH-RADC-0.5
      NX2   = XH+RADC+0.5
      IF(NX1.LT.1) NX1=1
      IF(NX2.GT.NSAM) NX2=NSAM
      NY1   = YH-HT-0.5
      NY2   = YH+HT+0.5
      IF(NY1.LT.1) NY1=1
      IF(NY2.GT.NROW) NY2=NROW
      RAD44 = RADC**2
      DO L=NSL1,NSL2
        I1=(L-1)*NROW
        Z2=(FLOAT(L)-ZH)**2
        DO I=NY1,NY2
          CALL REDLIN(LUN1,A0,NSAM,I+I1)
          DO K=NX1,NX2
             IF((FLOAT(K)-XH)**2+Z2.LE.RAD44) A0(K) = VALUE                 
          ENDDO
          CALL WRTLIN(LUN1,A0,NSAM,I1+I)
        ENDDO
      ENDDO
d500 26
a525 13
      NSL1  = ZH-HT-0.5
      NSL2  = ZH+HT+0.5
      IF(NSL1.LT.1) NSL1=1
      IF(NSL2.GT.NSLICE) NSL2=NSLICE
      NX1   = XH-RADC-0.5
      NX2   = XH+RADC+0.5
      IF(NX1.LT.1) NX1=1
      IF(NX2.GT.NSAM) NX2=NSAM
      NY1   = YH-RADC-0.5
      NY2   = YH+RADC+0.5
      IF(NY1.LT.1) NY1=1
      IF(NY2.GT.NROW) NY2=NROW
      RAD44 = RADC**2
a526 12
      DO 5301 L=NSL1,NSL2
        I1=(L-1)*NROW
        DO 5201 I=NY1,NY2
          CALL REDLIN(LUN1,A0,NSAM,I+I1)
          Y2=(FLOAT(I)-YH)**2
          DO  K=NX1,NX2
             IF((FLOAT(K)-XH)**2+Y2.LE.RAD44) A0(K) = VALUE 
          ENDDO                
          CALL WRTLIN(LUN1,A0,NSAM,I1+I)
 5201   CONTINUE
 5301 CONTINUE
      ENDIF
d529 27
a555 26
      NSL1  = ZH-RADC-0.5
      NSL2  = ZH+RADC+0.5
      IF(NSL1.LT.1) NSL1=1
      IF(NSL2.GT.NSLICE) NSL2=NSLICE
      NX1   = XH-HT-0.5
      NX2   = XH+HT+0.5
      IF(NX1.LT.1) NX1=1
      IF(NX2.GT.NSAM) NX2=NSAM
      NY1   = YH-RADC-0.5
      NY2   = YH+RADC+0.5
      IF(NY1.LT.1) NY1=1
      IF(NY2.GT.NROW) NY2=NROW
      RAD44 = RADC**2
      DO 5302 L=NSL1,NSL2
        I1=(L-1)*NROW
        Z2=(FLOAT(L)-ZH)**2
        DO 5202 I=NY1,NY2
          Y2=(FLOAT(I)-YH)**2
          IF(Z2+Y2.GT.RAD44) GOTO 5202
          CALL REDLIN(LUN1,A0,NSAM,I+I1)
            DO  K=NX1,NX2
               A0(K) = VALUE                 
            ENDDO
          CALL WRTLIN(LUN1,A0,NSAM,I1+I)
 5202   CONTINUE
 5302 CONTINUE
d559 1
a559 1
C PUT NUMBERS INTO VOLUME:********************************************
d564 1
a564 1
      DO 6400 L=1,NSLICE
d573 2
a574 1
 6400 CONTINUE
d577 2
a578 2
      IF (ANS(1:1) .NE. 'Y') GOTO 6401
        CALL RDPRMI(ISLIC,ILINE,NLOOP,ILOOP,'SLICE NUMBER,LINE NUMBER')
d580 1
a580 1
        ILL=(ISLIC-1)*NROW+ILINE
d583 2
a584 2
           A0(I)=FLOAT(I)*SCALE2
           SUM=SUM+A0(I)
d586 1
a586 1
        SUM=SUM-FLOAT(IPOS)*SCALE
d588 2
a589 3
6401    CONTINUE
       
        RETURN
d593 2
@


1.10
log
@removed ibcnt increment (error) & cosmetic
@
text
@d44 4
a47 1
	INTEGER*2      ITIMN(5)
d346 1
a346 1
 3700 CALL TIME(ITIMN)
d374 1
a374 1
7000  CALL TIME(ITIMN)
@


1.9
log
@ran changed
@
text
@d4 1
a4 2
C MODEL3.FOR
C                                  FILENAMES LENGTHENED DEC 7 88 al
a111 2
C        UPDATE BATCH POINTER
	 IBCNT = IBCNT+1
@


1.8
log
@fixed statistics by setting to undetermined for all models
@
text
@d364 1
a364 1
               A0(K) = RAN(IST,KST)
@


1.7
log
@cosmetic improvements
@
text
@d32 1
d157 1
a157 4
      FMAX = 2.
      FMIN = 0.
      AV   = 1.
      GOTO 4500
d285 1
a285 1
     1  'ENTER MASS VALUE PER VOXEL (DEFAULT = 2.0)')
d360 1
a360 1
          DO 3800 K = 1,NSAM
d366 1
a366 1
 3800     CONTINUE
d371 2
a372 5
      FMAX = 1.
      FMIN = 0.
      AV = 0.5
      GOTO 4500
C
a427 6
      FMAX = BACK
      FMIN = BACK
      AV   = BACK

 4500 CONTINUE
      CALL SETPRM(LUN1,NSAM,NROW,FMAX,FMIN,AV,'R3')
a431 1

d446 1
a446 1
 5000 WRITE(NOUT,*) 'NOW YOU HAVE A CHOICE OF 3 CYLINDER AXES'
d475 1
a475 1
      DO 5300 L=NSL1,NSL2
d478 1
a478 1
        DO 5200 I=NY1,NY2
d480 3
a482 3
          DO 5100 K=NX1,NX2
          IF((FLOAT(K)-XH)**2+Z2.LE.RAD44) A0(K) = VALUE                 
 5100     CONTINUE
d484 2
a485 2
 5200   CONTINUE
 5300 CONTINUE
d510 3
a512 3
          DO 5101 K=NX1,NX2
          IF((FLOAT(K)-XH)**2+Y2.LE.RAD44) A0(K) = VALUE                 
 5101     CONTINUE
d539 1
a539 1
            DO 5102 K=NX1,NX2
d541 1
a541 1
 5102       CONTINUE
d552 1
a552 1
      SUM=0.
d554 6
a559 6
        DO 6300 I=1,NROW
          DO 6200 K=1,NSAM
            A0(K) = 0
 6200     CONTINUE
            A0(IPOS)=FLOAT((L-1)*NROW+I)*SCALE
            SUM=SUM+A0(IPOS)
d561 1
a561 1
 6300   CONTINUE
d563 1
a563 1
	CALL RDPRMC(ANS,NCHAR,.TRUE.,'NUMBER PIXELS IN LINE? (Y/N)',
d565 1
a565 1
        IF(ANS(1:1).NE.'Y') GOTO 6401
d570 4
a573 4
        DO 6402 I=1,NSAM
        A0(I)=FLOAT(I)*SCALE2
        SUM=SUM+A0(I)
 6402   CONTINUE
d577 2
a578 6
      FMAX = NROW
      FMIN = 1.
      AV   = SUM/FLOAT(NROW)
 6500 CONTINUE
      CALL SETPRM(LUN1,NSAM,NROW,FMAX,FMIN,AV,'R3')
      RETURN
d581 1
a581 1
 5500 WRITE(NOUT,*) ' *** UNIDENTIFIED OPTION'
@


1.6
log
@unknown change
@
text
@d53 1
a53 1
        NULL=CHAR(0)
d86 1
a86 1
C SINE WAVES ******************************************************
d89 1
a89 1
      CX(1) = 1.
d96 5
a100 11
      AV = 0.
      IF (NS.LE.MAXSIN) GOTO 500
      WRITE(NOUT,400)MAXSIN
      NS = MAXSIN
  400 FORMAT(1X,' ** BUFFER SPACE RESTRICTED TO',I3,' SINE WAVES')

  500 DO 800 I = 1,NS
C        WRITE(NOUT,600) I
C  600   FORMAT($' .I=',I2,' REL.AMPL.,SPATIAL FREQUENCY(KX,KY,KZ) :')
C        READ(NIN, 700) CX(I),NX(I),NY(I),NZ(I)
C	 CHANGED TO NEXT 7 LINES
d102 2
d106 1
a106 1
     $       'REL.AMPL., SPATIAL FREQUENCY(KX,KY,KZ) :$',NULL,IRTFLG)
a112 1

d115 2
a116 2
         AV = AV+CX(I)
  800 CONTINUE
d118 2
a119 2
      DO 1000 I = 1,NS
         CX(I) = CX(I)*2./AV
d122 1
a122 1
 1000 CONTINUE
d126 1
a126 1
      DO 1400  L = 1,NSLICE
d128 1
a128 1
         DO 1300  I=1,NROW
d130 1
a130 1
           DO 1200 J=1,NSAM
d132 1
a132 1
             DO 1200 K = 1,NS
d135 2
a136 1
 1200      CONTINUE
d138 2
a139 2
 1300    CONTINUE
 1400 CONTINUE
@


1.5
log
@fixed new bug in cylinders stuff
@
text
@d30 1
a30 1
#ifdef SP_UNIX
d32 1
a32 3
#else
	INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
d62 18
a79 17
	WRITE(NOUT,100)
 100	FORMAT(' .MO_3 MENU: (T)EST -- 3D SINE WAVE'/
     &         '             (S)INE -- SET OF SINE WAVES'/
     &         '             (SP)HERE -- SET OF SPHERES'/
     &         '             (SPA)  -- AS (SP), ADD DENSITIES'/
     &         '             (SPV)  -- AS (SP), VARIABLE DENSITIES'/
     &         '             (W)EDGE -- DENSITY WEDGE'/
     &         '             (Q)UICK RANDOM -- UNIFORM STATISTICS'/
     &         '             (R)ANDOM -- UNIFORM STATISTICS'/
     &         '             (B)LANK -- CONSTANT DENSITY'/
     &         '             (H)ELIX -- HELIX OF SPHERES'/
     &         '             (HA)    -- AS (H), ADD DENSITIES'/
     &         '             (C)YLINDER -- SET OF CYLINDERS'/
     &         '             (NUM)BERS -- LINE NUMBERS'/)
	CALL RDPRMC(ANS,NCHAR,
     $  .TRUE.,'T/S/SP/SPA/SPV/W/Q/R/B/H/HA/C/NUM',
     &              NULL,IRT)
d84 1
a84 2
     &  4600,6000,7000)
     &       ,ICALL
d103 4
a106 6
C         WRITE(NOUT,600) I
C  600    FORMAT($' .I=',I2,' REL.AMPL.,SPATIAL FREQUENCY(KX,KY,KZ) :')
C         READ(NIN, 700) CX(I),NX(I),NY(I),NZ(I)
C
C	CHANGED TO NEXT 7 LINES
C
d122 1
d128 1
@


1.4
log
@can put different axes on cylinders now
@
text
@d468 1
a468 1
      IF (YN .NE. 'X' .AND. YN .NE. 'Y' AND YN .NE. 'Z') RETURN 
@


1.3
log
@repaired random generator
@
text
@d6 1
a6 1
c                                  CHAR. VARIABLES AUG 89 al
d199 1
a199 1
     &      'NUMBER OF SPHERES, STARTING COL. FOR X,Y,Z')
a200 1
C**        CALL RDALL(DUM,3,1,'X,Y,Z -OFFSET')
a201 1

a251 6
C DISABLE ECHOING

C           NECHO1=NECHO
C           NECHO=0

C**        CALL RDALL(DUM,3,1,'X,Y,Z')
a254 1
C           NECHO=NECHO1
d351 1
a351 1
C
d353 1
a353 1
C
d363 1
a363 1
     &   'MEAN AND ST.DEV. OF GAUSSIAN DIST.')
d391 11
a401 10
      IF (GA.EQ.'Y') THEN 
            GFLAG = .TRUE.
            ADD=0.
      WRITE(NOUT,7011)
7011  FORMAT(
     $/1X,'BY DEFAULT GAUSSIAN DIST. WITH 0 MEAN AND STAND. DEV. 1.'
     $/1X,'YOU MAY CHANGE THIS BY MULTIPLYING WITH F AND ADDING C:'
     $/1X,'NEW_VALUE=OLD_VALUE*F+C')
      CALL RDPRM2(ADD,FMUL,NLOOP,ILOOP,'ENTER C, F (DEF=0,1)$')
      IF(FMUL.EQ.0) FMUL=1.
d403 4
a406 5
      WRITE(NOUT,7012)
7012  FORMAT(1X,'ENTER SCALING',
     $/1X,'NEW_VALUE=OLD_VALUE*F+C')
      CALL RDPRM2(ADD,FMUL,NLOOP,ILOOP,'ENTER C, F (DEF=0,1)$')
      IF(FMUL.EQ.0) FMUL=1.
d408 2
a409 1
C  INITIALIZE RANDOM GENERATOR 
d411 2
a412 1
C    WARM UP:
d453 1
a453 1
      DO 4700 K=1,NSAM
d455 3
a457 2
 4700 CONTINUE
      DO 4900 L=1,NSLICE
d459 1
a459 1
        DO 4800 I=1,NROW
d461 2
a462 2
 4800   CONTINUE
 4900 CONTINUE
d464 5
a468 3
      WRITE(NOUT,*) 'NOW YOU HAVE A CHOICE OF 3 CYLINDER AXES'
      CALL RDPRMC(YN,NA,.TRUE.,'YOU MAY CHOSE X,Y OR Z',
     $NULL,IRTFLG)
d470 4
a473 4
 5000 CALL RDPRM2(RADC,HT,NLOOP,ILOOP,'RADIUS, HEIGHT')
      IF (RADC.EQ.0.) RETURN
      IF (HT.EQ.0.) RETURN
      HT=HT/2.
d478 1
a478 1
      IF(YN.EQ.'Y') THEN 
d507 1
a507 1
      IF(YN.EQ.'Z') THEN 
d536 1
a536 1
      IF(YN.EQ.'X') THEN 
d558 1
a558 1
            A0(K) = VALUE                 
d566 1
a566 1
C PUT NUMBERS INTO VOLUME:
@


1.2
log
@cpp_lines_added
@
text
@a29 1

d31 1
a31 1
	INCLUDE 'CMBLOCK.INC' 
a34 1

d44 1
a44 1
     &   DENS(MAXSPH), A0(1)
d46 1
a46 1
	INTEGER        ITIMN(5)
d71 1
d78 2
a79 1
	CALL RDPRMC(ANS,NCHAR,.TRUE.,'T/S/SP/SPA/SPV/W/R/B/H/HA/C/NUM',
d81 1
a81 1
	CALL CHKINPQ('T,S,SP,SPA,SPV,W,R,B,H,HA,C,NUM$',
d85 1
a85 1
     &  4600,6000)
d301 2
a302 2
        CALL RDPRM(AMQ, NLOOP, ILOOP, 'ENTER MASS VALUE PER VOXEL
     1  (DEFAULT = 2.0)')
d392 41
@


1.1
log
@Initial revision
@
text
@d31 3
d35 1
@
