head	1.35;
access;
symbols
	healthdept_2018:1.35
	pre_getangas:1.30
	GPL2010:1.28
	pre_GPL2010:1.27
	pre_var_equation:1.27
	pre_fftwrings:1.27
	pre_opfiles:1.27
	src:1.27
	best-code:1.26
	x-named-regs:1.26
	x:1.26
	v13-00:1.26
	pre_GPL:1.25
	prec_CA:1.25
	noindx:1.17
	Bproc:1.16
	oct21:1.13
	last77:1.8;
locks; strict;
comment	@c @;


1.35
date	2018.10.03.14.34.07;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2013.05.01.18.55.32;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2012.01.19.20.23.35;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2012.01.17.20.32.22;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2011.03.28.13.32.54;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2010.12.20.14.40.35;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2010.12.20.14.20.27;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2010.06.24.13.25.49;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2006.12.15.20.55.56;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2005.10.17.20.55.22;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2003.09.04.20.17.35;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2003.09.03.16.59.01;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2003.09.03.16.48.35;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2003.08.03.00.37.34;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2003.08.02.23.04.15;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2003.07.08.17.08.52;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2003.07.08.16.18.15;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2003.04.30.13.02.49;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2000.12.19.19.16.59;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2000.06.13.14.36.05;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	99.11.15.15.09.47;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	99.11.10.16.19.24;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	99.09.15.19.46.21;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.08.11.13.48.36;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.06.23.18.21.17;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	99.06.18.17.51.27;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.06.17.19.11.26;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.03.18.18.33.32;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	98.12.02.20.11.09;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	98.12.02.19.08.57;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	98.12.02.15.12.34;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	98.08.18.12.23.36;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	98.08.10.18.11.00;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	98.04.06.19.13.42;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	98.01.20.19.31.55;	author leith;	state Exp;
branches;
next	;


desc
@new
@


1.35
log
@email_health_dept
@
text
@C++*********************************************************************
C
C  GETDOCDAT.F   CREATED MAR 98 ArDean Leith
C                LUNDOCREDALL PARAMETERS          DEC   00 ARDEAN LEITH
C                LUNDOCREDSEQ RETURNS MAXY        APR 2003 ARDEAN LEITH
C                INCORE OPENDOC                   JUL 2003 ARDEAN LEITH
C                WANTSEQ BUG                      SEP 2003 ARDEAN LEITH
C                EMPTY DOC FILE BUG               DEC 2010 ARDEAN LEITH
C                (MYPID .LE. 0) CLOSE(LUNDOCFT)   MAR 2011 ARDEAN LEITH
C                (MYPID .LE. 0) CLOSE(LUNDOCFT)   MAR 2011 ARDEAN LEITH
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2012  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   GETDOCDAT(PROMPT,ASKNAME,DOCNAM,LUNDOC,GETSIZE,MAXXT,MAXYT,
C             RPOINTER,IRTFLG)
C
C   PARAMETERS:
C       PROMPT      PROMPT FOR DOCFILE NAME                       (SENT)
C       ASKNAME     LOGICAL VARIABLE TO ASK FOR DOCNAM            (SENT)
C       DOCNAM      DOC. FILE NAME                           (SENT/RET.)
C       LUNDOC      I/0 UNIT                                      (SENT)
C                   (< 0 IS FLAG FOR GETTING SEQUENTIAL DATA)
C       GETSIZE     LOGICAL VARIABLE TO ASK FOR ARRAY SIZE        (SENT)
C       MAXXT       COL. IN ARRAY RPOINTER                   (SENT/RET.)
C       MAXYT       ROWS IN ARRAY RPOINTER                   (SENT/RET.)
C                   IF GETSIZE IS TRUE, MAXXT & MAXYT SHOULD BE 
C                   SET TO ZERO ON ENTRY, OTHER-WISE THEY INDICATE
C                   MAXIMUM VALUES FOR RPOINTER ARRAY CREATION!!
C       RPOINTER    POINTER TO ARRAY (ALLOCATED HERE)             (RET.)
C       IRTFLG      ERROR FLAG (0 IS NORMAL)                      (RET.)
C
C  NOTES:   THIS PROGRAM ALWAYS ALLOCATES MEMORY OF ARRAY RPOINTER
C           EACH ROW IN RPOINTER HAS THE NUMBER OF THE REGISTERS IN THAT
C           KEY IN THE FIRST COLUMN (ZERO IF KEY NOT PRESENT) FOLLOWED 
C           BY THE REGISTER CONTENTS. (THIS MAY BE DIFFERENT IF GETTING
C           SEQUENTIAL DATA??? al)
C
C23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
C--*********************************************************************

#ifdef NEVER 
        INTERFACE ! -------------UPDATE F90ALLOC.INC FOR PARAMETERS!!
        SUBROUTINE GETDOCDAT(PROMPT,ASKNAME,DOCNAM,LUNDOC,GETSIZE,
     &                       MAXXT, MAXYT,RPOINTER,IRTFLG)
        CHARACTER *(*), INTENT(IN) ::                 PROMPT
        LOGICAL, INTENT(IN) ::                        ASKNAME
        CHARACTER *(*), INTENT(INOUT) ::              DOCNAM
        INTEGER, INTENT(IN) ::                        LUNDOC
        LOGICAL, INTENT(IN) ::                        GETSIZE
        INTEGER, INTENT(INOUT) ::                     MAXXT
        INTEGER, INTENT(INOUT) ::                     MAXYT
        REAL, DIMENSION(:), POINTER  ::               RPOINTER
        INTEGER, INTENT(OUT) ::                       IRTFLG
        END SUBROUTINE GETDOCDAT
        END INTERFACE !--------------------
#endif

        SUBROUTINE GETDOCDAT(PROMPT,ASKNAME,DOCNAM,LUNDOC,GETSIZE,
     &                       MAXXT, MAXYT,RPOINTER,IRTFLG)

C       F90 SPECIFIC CODE
C       UPDATE F90ALLOC.INC FOR PARAMETERS!!

        IMPLICIT NONE

        INCLUDE 'CMBLOCK.INC' 

        CHARACTER *(*), INTENT(IN)    :: PROMPT
        LOGICAL, INTENT(IN)           :: ASKNAME
        CHARACTER *(*), INTENT(INOUT) :: DOCNAM
        INTEGER, INTENT(IN)           :: LUNDOC
        LOGICAL, INTENT(IN)           :: GETSIZE
        INTEGER, INTENT(INOUT)        :: MAXXT
        INTEGER, INTENT(INOUT)        :: MAXYT
        REAL, POINTER                 :: RPOINTER(:,:)
        INTEGER, INTENT(OUT)          :: IRTFLG
        LOGICAL                       :: WANTSEQ,NEWFILE

        INTEGER,PARAMETER             :: NMAX = 10

        CHARACTER (LEN=180)           :: PROMPTT ! > THAN PROMPT!!

        LOGICAL,PARAMETER             :: ISOLDFILE = .TRUE.
        LOGICAL,PARAMETER             :: APPEND    = .FALSE.
        LOGICAL,PARAMETER             :: MESSAGE   = .FALSE.
        LOGICAL,PARAMETER             :: ASKNAME2  = .FALSE.
        LOGICAL                       :: ADDEXT    = .FALSE.

        INTEGER                       :: IWANTY,MAXX,MAXY
        INTEGER                       :: ICOMM,MYPID,MPIERR
        INTEGER                       :: LUNDOCFT,LENT,NLETD,NF,NLET
        INTEGER                       :: LUNDOCF,KEYUSED,NGOT

        INTEGER                       :: lnblnkn

        CALL SET_MPI(ICOMM,MYPID,MPIERR) ! SETS ICOMM AND MYMPID

        IRTFLG  = 1

C       FLAG TO RECOVER MULTIPLE VALUES HAVEING SAME KEY ('DOC RE')
        WANTSEQ  = (LUNDOC < 0)
        LUNDOCFT = ABS(LUNDOC)

        IF (ASKNAME) THEN
C          ~9 ON PROMPT ALLOWS NON-SPIDER EXTENSION TO BE INPUT
           LENT    = lnblnkn(PROMPT)
           PROMPTT = PROMPT(1:LENT) // '~9'

C          INPUT DOCUMENT FILENAME, APPEND DATEXC
           CALL FILERD(DOCNAM,NLETD,DATEXC,PROMPTT,NF)
           IF (NF .NE. 0) RETURN
        ENDIF

        !write(6,*) ' docnam: ',nletd,docnam(1:30)

C       INPUT DOCUMENT FILENAME,
        CALL OPENDOC(DOCNAM,ADDEXT,NLET,LUNDOCFT,LUNDOCF,ASKNAME2,
     &             ' ', ISOLDFILE,APPEND,MESSAGE,NEWFILE,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

C       ECHO FIRST HEADER FROM FILE
        CALL LUNDOCSAYHDR(LUNDOCF,NOUT,IRTFLG)

        IF (GETSIZE) THEN
C          FIND MAXY & MAXY BY READING DOC FILE


           CALL LUNDOCINFO(LUNDOCF,MAXY,MAXX,KEYUSED,.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0) THEN
              CLOSE(LUNDOCFT)
              RETURN
           ENDIF
           IF (LUNDOCF > 0) REWIND(LUNDOCF)

           IF (WANTSEQ) THEN
C             WANT JUST DATA ARRAY
              IWANTY = MAXY
              MAXY   = KEYUSED
           ELSE
C             WANT KEYED ARRAY
              MAXX = MAXX + 1
           ENDIF
           IF (MAXXT > 0) MAXX = MIN(MAXX,MAXXT)
           IF (MAXYT > 0) MAXY = MIN(MAXY,MAXYT)
        ELSE
C          USE MAXX & MAXY SENT BY CALLING PROGRAM
           MAXX = MAXXT
           MAXY = MAXYT
        ENDIF

        IF (MAXX <= 0 .OR. MAXY <= 0) THEN
           WRITE(NOUT,*) ' *** WARNING EMPTY DOC FILE '
           CLOSE(LUNDOCFT)
           IRTFLG = 0
           MAXXT  = 0
           MAXYT  = 0
           RETURN
        ENDIF

        ALLOCATE(RPOINTER(MAXX,MAXY),STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN  
           CALL  ERRT(46,'GETDOCDAT; RPOINTER',MAXX*MAXY)
           RETURN
        ENDIF
 
C       RETRIEVE DATA
        IF (WANTSEQ) THEN
C          TO RECOVER MULTIPLE VALUES HAVING SAME KEY
           CALL LUNDOCREDSEQ(LUNDOCF,RPOINTER,MAXX,MAXY,IWANTY,MAXYT,
     &                       IRTFLG)
        ELSE
           CALL LUNDOCREDALL(LUNDOCF,RPOINTER,MAXX,MAXY,.TRUE.,
     &                       NGOT,IRTFLG)
           MAXYT = MAXY
        ENDIF

        MAXXT  = MAXX
        IF (MYPID  <= 0)   CLOSE(LUNDOCFT)
        IF (IRTFLG .NE. 0) RETURN

        IRTFLG = 0

        END
@


1.34
log
@unused var removed
@
text
@d17 1
a17 1
C=* Email: spider@@wadsworth.org                                        *
@


1.33
log
@implicit none,  PROMPTT, used filerd before opendoc like older ones
@
text
@a95 1
        LOGICAL                       :: WARNIT
a98 1
        REAL                          :: PLIST(NMAX)
a100 1
        CHARACTER (LEN=1)             :: NULL = CHAR(0)
d145 2
d181 1
a181 1
           CALL  ERRT(46,'GETDOCDAT, RPOINTER',MAXX*MAXY)
a201 1
        RETURN
@


1.32
log
@PROMPTT = PROMPT(1:LENT) // '~9'  to stop LOG file extension
@
text
@d10 1
d15 1
a15 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d83 2
d97 1
a97 1
        LOGICAL                       :: WANTSEQ
d103 13
d121 1
d123 1
a123 1
        WANTSEQ = (LUNDOC .LT. 0)
d127 1
a127 1
C          INPUT DOCUMENT FILENAME, ~9 ALLOWS DIFFERENT EXTENSION
d129 5
a133 1
           PROMPTT = PROMPT(1:LENT) // '~9' 
d136 5
a140 2
        CALL OPENDOC(DOCNAM,.TRUE.,NLET,LUNDOCFT,LUNDOCF,ASKNAME,
     &               PROMPTT, .TRUE.,.FALSE.,.TRUE.,NEWFILE,IRTFLG)
d153 1
a153 1
           IF (LUNDOCF .GT. 0) REWIND(LUNDOCF)
d163 2
a164 2
           IF (MAXXT .GT. 0) MAXX = MIN(MAXX,MAXXT)
           IF (MAXYT .GT. 0) MAXY = MIN(MAXY,MAXYT)
d171 1
a171 1
        IF (MAXX .LE. 0 .OR. MAXY .LE. 0) THEN
d181 1
a181 1
        IF (IRTFLG.NE.0) THEN  
d198 1
a198 1
        IF (MYPID .LE. 0) CLOSE(LUNDOCFT)
@


1.31
log
@IF (MYPID .LE. 0) CLOSE(LUNDOCFT)
@
text
@d82 2
d99 2
a100 2

        INCLUDE 'CMBLOCK.INC' 
d110 3
a112 4
C          INPUT DOCUMENT FILENAME, NF == 9 ALLOWS DIFFERENT EXTENSION
           NF = 9         
           CALL FILERD(DOCNAM,NLETD,DATEXC,PROMPT,NF)
           IF (NF .NE. 0) RETURN
d115 2
a116 2
        CALL OPENDOC(DOCNAM,.FALSE.,NLET,LUNDOCFT,LUNDOCF,.FALSE.,' ',
     &             .TRUE.,.FALSE.,.TRUE.,NEWFILE,IRTFLG)
@


1.30
log
@irtflg = 0 on empty
@
text
@d3 7
a9 7
C  GETDOCDAT.F        CREATED MAR 98 ArDean Leith
C                     LUNDOCREDALL PARAMETERS     DEC   00 ARDEAN LEITH
C                     LUNDOCREDSEQ RETURNS MAXY   APR 2003 ARDEAN LEITH
C                     INCORE OPENDOC              JUL 2003 ARDEAN LEITH
C                     WANTSEQ BUG                 SEP 2003 ARDEAN LEITH
C                     EMPTY DOC FILE BUG          DEC 2010 ARDEAN LEITH
C
d14 1
a14 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d100 2
d173 1
a173 1
        CLOSE(LUNDOCFT)
@


1.29
log
@EMPTY DOC FILE BUG
@
text
@d145 1
a145 1
           WRITE(NOUT,*) '*** WARNING EMPTY DOC FILE '
d147 1
a147 1
           IRTFLG = 1
@


1.28
log
@GPL_2010
@
text
@d8 1
d82 11
a92 11
        CHARACTER *(*), INTENT(IN) ::                 PROMPT
        LOGICAL, INTENT(IN) ::                        ASKNAME
        CHARACTER *(*), INTENT(INOUT) ::              DOCNAM
        INTEGER, INTENT(IN) ::                        LUNDOC
        LOGICAL, INTENT(IN) ::                        GETSIZE
        INTEGER, INTENT(INOUT) ::                     MAXXT
        INTEGER, INTENT(INOUT) ::                     MAXYT
        REAL, DIMENSION(:,:), POINTER   ::            RPOINTER
        INTEGER, INTENT(OUT) ::                       IRTFLG
        LOGICAL ::                                    WARNIT
        LOGICAL ::                                    WANTSEQ
d94 2
a95 2
        PARAMETER         (NMAX = 10)
        DIMENSION         PLIST(NMAX)
d142 9
@


1.27
log
@comment
@
text
@a9 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d11 5
a15 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d17 1
a17 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d22 1
a22 1
C=* This program is distributed in the hope that it will be useful,    *
d24 1
a24 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a25 1
C=*                                                                    *
d27 1
a27 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.26
log
@GPL License fixed
@
text
@d54 4
a57 3
C           EACH ROW IN RPOINTER HAS THE NUMBER OF THE KEY IN THE FIRST
C           COLUMN (ZERO IF KEY NOT PRESENT) FOLLOWED BY THE 
C           REGISTER CONTENTS.
@


1.25
log
@doc ren bug for wantseq
@
text
@d1 1
a1 1
C++************************************************************************
d10 23
a32 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1998, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.24
log
@bug in wantseq
@
text
@d115 2
a116 1
              MAXY = KEYUSED
d138 2
a139 1
           CALL LUNDOCREDSEQ(LUNDOCF,RPOINTER,MAXX,MAXY,MAXYT,IRTFLG)
@


1.23
log
@wantseq bug
@
text
@d115 1
a115 1
              MAXX = KEYUSED
@


1.22
log
@doc ren bug
@
text
@d7 1
d113 5
a117 2
           IF (.NOT. WANTSEQ) THEN
C             WANT KEY ARRAY
@


1.21
log
@irtflg if no alloc.
@
text
@d112 1
a112 4
           IF (WANTSEQ) THEN
C             WANT ALL USED KEYS ONLY
              MAXY = KEYUSED
           ELSE
d126 1
a126 1
           CALL  ERRT(46,'GETDOCDAT, RPOINTER',IER)
@


1.20
log
@spelling
@
text
@d128 5
a132 2
        IF(IRTFLG.NE.0) CALL  ERRT(46,'GETDOCDAT, RPOINTER',IER)
  
@


1.19
log
@incore opendoc
@
text
@d96 1
a96 1
        CALL OPENDOC(DOCNAM,.FALSE.,NLET,LUNDOCFT,LUNDOCF.FALSE.,' ',
@


1.18
log
@C                       LUNDOCREDSEQ RETURNS MAXY APR 2003 ARDEAN LEITH
@
text
@d3 1
a3 1
C  GETDOCDAT.F                              CREATED MAR 98 ArDean Leith
d5 2
a6 1
C                       LUNDOCREDSEQ RETURNS MAXY APR 2003 ARDEAN LEITH
d9 6
a14 6
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
d76 1
a79 1
        LOGICAL           WANTSEQ
d81 1
d87 1
a87 1
        LUNDOCF = ABS(LUNDOC)
d96 1
a96 1
        CALL OPENDOC(DOCNAM,.FALSE.,NLET,LUNDOCF,.FALSE.,' ',
d107 1
a107 1
              CLOSE(LUNDOCF)
d110 1
a110 1
           REWIND(LUNDOCF)
d133 1
a133 3
           MAXYTT = MAXY
           CALL LUNDOCREDSEQ(LUNDOCF,RPOINTER,MAXX,MAXYTT,.TRUE.,IRTFLG)
           MAXYT = MAXYTT
d141 1
a141 1
        CLOSE(LUNDOCF)
@


1.17
log
@lundocredall & opendoc parameters changed
@
text
@d5 1
d133 1
d137 1
d139 2
a143 2
        MAXXT  = MAXX
        MAXYT  = MAXY
@


1.16
log
@lundocredseq returns maxy now
@
text
@d4 1
d93 1
a93 1
        CALL OPENDOC(DOCNAM,.FALSE.,NLET,LUNDOCF,.FALSE.,
d133 2
a134 1
           CALL LUNDOCREDALL(LUNDOCF,RPOINTER,MAXX,MAXY,.TRUE.,IRTFLG)
@


1.15
log
@dimensions of main array (pointer) fixed
@
text
@d129 2
a130 1
           CALL LUNDOCREDSEQ(LUNDOCF,RPOINTER,MAXX,MAXY,.TRUE.,IRTFLG)
@


1.14
log
@changed RPOINTER to 2D
@
text
@d123 1
a123 1
        ALLOCATE(RPOINTER(MAXY,MAXX),STAT=IRTFLG)
@


1.13
log
@lundocf in close statement!!
@
text
@a59 1
#ifdef SP_F90 
d70 1
a70 1
        REAL, DIMENSION(:), POINTER   ::              RPOINTER
a73 17
        INTERFACE ! -------------------------
        SUBROUTINE ALLOCMEM(MEMWANT,APOINTER,WANTERRT,CALLER,IRTFLG)
        INTEGER, INTENT(IN)  ::                       MEMWANT
        REAL, DIMENSION(:), POINTER ::                APOINTER
        LOGICAL, INTENT(IN)  ::                       WANTERRT
        CHARACTER * (*), INTENT(IN) ::                CALLER
        INTEGER, INTENT(OUT)  ::                      IRTFLG
        END SUBROUTINE ALLOCMEM
        END INTERFACE ! -------------------------

#else
        CHARACTER *(*)    PROMPT,DOCNAM
        LOGICAL           ASKNAME,GETSIZE,WARNIT

        POINTER           (RPOINTER,PBUF) 
        DIMENSION         PBUF(1)
#endif
d123 2
a124 3
        MAXTOT = MAXY * MAXX
        CALL ALLOCMEM(MAXTOT,RPOINTER,.TRUE.,'GETDOCDAT',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
@


1.12
log
@comment
@
text
@d152 1
a152 1
        CLOSE(LUNDOC)
@


1.11
log
@added redseq option
@
text
@d99 1
d147 1
@


1.10
log
@lundoc changes
@
text
@d22 1
d94 1
d98 3
a100 1
        IRTFLG = 1
d109 1
a109 1
        CALL OPENDOC(DOCNAM,.FALSE.,NLET,LUNDOC,.FALSE.,
d114 1
a114 1
        CALL LUNDOCSAYHDR(LUNDOC,NOUT,IRTFLG)
d118 1
a118 1
           CALL LUNDOCINFO(LUNDOC,MAXY,MAXX,.TRUE.,IRTFLG)
d120 1
a120 1
              CLOSE(LUNDOC)
d123 1
a123 1
           REWIND(LUNDOC)
d125 7
a131 1
           MAXX = MAXX + 1
d145 5
a149 1
        CALL LUNDOCREDALL(LUNDOC,RPOINTER,MAXX,MAXY,.TRUE.,IRTFLG)
@


1.9
log
@used lundoc
@
text
@d31 1
a31 1
C  NOTES:   THIS PROGRAM ALWAYS ALLOCATES MEMORY OFR ARRY RPOINTER
d134 2
a135 44
C       CLEAR DBUF RETURNED ANSWER BUFFER
        DO  I=1, MAXX * MAXY
            RPOINTER(I) = 0.0
        ENDDO

C       INITIALIZE MAX NUMBER OF VALUES PER DOC FILE KEY
        NMAXT   = MIN(NMAX,MAXX - 1)
      
        WARNIT  = .TRUE.

C -----------------------------------------------------------------

 10     CALL LUNDOCREDNXT(LUNDOC,IKEYT,PLIST,NMAXT,ICOUNT,IRTFLG)

        IF (IRTFLG .EQ. 1) THEN
C          ERROR READING THIS LINE OF FILE, IGNORE THE ERROR
C          READ NEXT LINE OF DOC FILE
	   GOTO  10
        
        ELSEIF (IKEYT .GT. MAXY) THEN
C          KEY THAT WILL NOT FIT IN DBUF SENDS ERROR MSG.
           IF (WARNIT) THEN 
              WRITE(NOUT,90) MAXY
90            FORMAT(' KEYS GREATER THAN: ',I7,' NOT RETRIEVED')
              WARNIT = .FALSE.
           ENDIF

        ELSEIF (IRTFLG .NE. 2) THEN
C          KEY FITS, PUT KEY IN FIRST COL OF RPOINTER
           ILOC = (IKEYT - 1) * MAXX + 1

           RPOINTER(ILOC) = IKEYT

C          PUT VALUES IN REMAINING COLS. OF THIS LINE IN RPOINTER
           DO J = 1,ICOUNT
              RPOINTER(ILOC+J) = PLIST(J)
           ENDDO

C          READ NEXT LINE OF DOC FILE
	   GOTO 10
        ENDIF

C ---------------------------------------------------------------

d137 1
@


1.8
log
@changes for dec f90
@
text
@d40 1
a40 1
        INTERFACE ! ---------------------
d72 1
d86 1
a86 1
        LOGICAL           ASKNAME,GETSIZE
d91 2
d99 1
a99 1
C          INPUT DOCUMENT FILENAME 
d105 7
d114 1
a114 1
           CALL DOCINFO(DOCNAM,LUNDOC,MAXY,MAXX,.TRUE.,IRTFLG)
d116 1
a116 1
              CALL ERRT(100,'GETDOCINFO',NE)
d119 2
d134 44
a177 10
C       RECOVER DOC FILE CONTENTS USING UNSDAL
        IKEY  = 0
        ICALL = 0
#ifdef SP_F90
        CALL UNSDAL(DOCNAM,ICALL,LUNDOC,IKEY,PLIST,1,RPOINTER(1),
     &              MAXY,MAXX,NKEY,IRTFLG)
#else
        CALL UNSDAL(DOCNAM,ICALL,LUNDOC,IKEY,PLIST,1,PBUF,
     &              MAXY,MAXX,NKEY,IRTFLG)
#endif
a178 4
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(100,'GETDOCDAT',NE)
           RETURN
        ENDIF
@


1.7
log
@for f90
@
text
@d15 1
a15 1
C             IPQ,IRTFLG)
d23 2
a24 2
C       MAXXT       COL. IN ARRAY IPQ                        (SENT/RET.)
C       MAXYT       ROWS IN ARRAY IPQ                        (SENT/RET.)
d27 2
a28 2
C                   MAXIMUM VALUES FOR IPQ ARRAY CREATION!!
C       IPQ         POINTER TO ARRAY (ALLOCATED HERE)             (RET.)
d31 2
a32 2
C  NOTES:   THIS PROGRAM ALWAYS ALLOCATES MEMORY OFR ARRY IPQ
C           EACH ROW IN IPQ HAS THE NUMBER OF THE KEY IN THE FIRST
d39 16
a54 2
        SUBROUTINE GETDOCDAT(PROMPT,ASKNAME,DOCNAM,LUNDOC,GETSIZE,MAXXT,
     &                       MAXYT,IPQ,IRTFLG)
d56 2
a57 2
C DO NOT COMPILE WITH STATIC
CNO_SAVE
d59 23
a81 1
        INCLUDE 'CMBLOCK.INC' 
d83 3
a85 3
        CHARACTER *(*) PROMPT,DOCNAM
        LOGICAL        GETSIZE,ASKNAME
        LOGICAL        RUNTIME
d87 3
a89 24
#ifdef SP_F90
        REAL, DIMENSION(:), POINTER :: IPQ
C      --------------------------------------
       INTERFACE 
          SUBROUTINE CHKMEM(MEMWANT,BUFIN,LENBUFIN,RUNTIME,IPOINTER,IRT)
          INTEGER  ::                    MEMWANT
          REAL,DIMENSION(1) ::           BUFIN 
          INTEGER  ::                    LENBUFIN
          LOGICAL  ::                    RUNTIME
          REAL, DIMENSION(:), POINTER :: IPOINTER
          INTEGER  ::                    IRT
          END SUBROUTINE CHKMEM
       END INTERFACE

       INTERFACE 
          SUBROUTINE ALLOCIT(MEMWANT,RUNTIME,IPOINTER,CALLER,IRTFLG)
          INTEGER  ::                    MEMWANT
          INTEGER  ::                    LENBUFIN
          LOGICAL  ::                    RUNTIME
          REAL, DIMENSION(:), POINTER :: IPOINTER
          CHARACTER * (*)                CALLER
          INTEGER  ::                    IRTFLG
          END SUBROUTINE ALLOCIT
       END INTERFACE
d91 1
a91 7
C      ---------------------------------------------

        REAL,DIMENSION(1)           :: PBUF 
#else
        POINTER        (IPQ,PBUF) 
        DIMENSION      PBUF(1)
#endif
d119 1
a119 1
        CALL CHKMEM(MAXTOT,PBUF,0,RUNTIME,IPQ,IRTFLG)
a120 4
        IF (.NOT. RUNTIME) THEN
           CALL ERRT(101,'ONLY IMPLEMENTED WITH ALLOCABLE MEMORY',NE)
           RETURN
        ENDIF
d126 1
a126 1
        CALL UNSDAL(DOCNAM,ICALL,LUNDOC,IKEY,PLIST,1,IPQ,
@


1.6
log
@changes for f90
@
text
@d47 3
a49 3
        CHARACTER *(*) DOCNAM,PROMPT
        LOGICAL        GETSIZE,RUNTIME,ASKNAME
        DIMENSION      PBUF(1)
a51 1
        INCLUDE 'F90ALLOC.INC'
d53 25
d81 1
@


1.5
log
@notes added
@
text
@d49 2
d54 1
a54 1
        REAL, DIMENSION(:), POINTER :: PBUF
a55 1
        DIMENSION      PBUF(1)
d92 1
a92 3
#ifdef SP_F90
         PBUF = >IPQ
#endif
d95 4
a98 1
C       RECOVER DOC FILE CONTENTS USING UNSDAL
d101 1
@


1.4
log
@comments added
@
text
@d18 2
a19 2
C       PROMPT      PROMPT FOR DOCFILE NAME                     (SENT)
C       ASKNAME     LOGICAL VARIABLE TO ASK FOR DOCNAM          (SENT)
d21 2
a22 2
C       LUNDOC      I/0 UNIT                                    (SENT)
C       GETSIZE     LOGICAL VARIABLE TO ASK FOR ARRAY SIZE      (SENT)
d25 2
a26 2
C                   MAXXT & MAXYT SHOULD BE SET TO ZERO ON ENTRY
C                   IF GETSIZE IS TRUE, OTHER-WISE THEY INDICATE
d28 2
a29 2
C       IPQ         POINTER TO ARRAY                            (RET.)
C       IRTFLG      ERROR FLAG (0 IS NORMAL)                    (RET.)
d31 5
d94 1
a94 1
        IKEY  = 1
d96 1
a96 1
C       RECOVER DOC FILE CONTENTS
d101 1
a101 1
           CALL ERRT(100,'GETDOCINFO',NE)
@


1.3
log
@did not return maxx & maxy
@
text
@d3 1
a3 1
C  ROTQS.FOR                               
d25 3
@


1.2
log
@f90 alloc
@
text
@d97 2
d100 1
@


1.1
log
@Initial revision
@
text
@d41 5
d48 1
d83 3
@
