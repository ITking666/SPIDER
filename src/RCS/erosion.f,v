head	1.16;
access;
symbols
	healthdept_2018:1.16
	pre_getangas:1.11
	GPL2010:1.11
	pre_GPL2010:1.10
	pre_var_equation:1.10
	pre_fftwrings:1.10
	pre_opfiles:1.10
	src:1.10
	best-code:1.10
	x-named-regs:1.10
	x:1.10
	v13-00:1.10
	pre_GPL:1.9
	prec_CA:1.9
	noindx:1.7;
locks; strict;
comment	@c @;


1.16
date	2018.10.03.14.34.05;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2014.03.03.14.22.16;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2014.02.28.14.12.54;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2014.02.26.14.42.24;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2014.02.26.14.28.15;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2010.06.24.13.25.32;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.17.21.06.25;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2003.07.08.14.43.58;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.07.17.37.27;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.11.14.09.01;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.16.19.35.08;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.16.13.48.36;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.20.14.58.58;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.16.20.40.14;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.16.17.25.04;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.16.17.23.54;	author leith;	state Exp;
branches;
next	;


desc
@@


1.16
log
@email_health_dept
@
text
@C ++********************************************************************
C                                                                      *
C EROSION       CREATED                            FEB 01 ARDEAN LEITH  
C               ADDED 'ER DOC'                     MAR 01 ARDEAN LEITH 
C               ADDED NPIXER                       MAR 01 ARDEAN LEITH 
C               INCORE LUNDOC                      JUL 03 ARDEAN LEITH 
C               'ER DOC' REMOVED  (BUGGY)          FEB 14 ARDEAN LEITH
C  
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  EROSION(LUN1,LUN2,NX,NY,NZ)
C
C  PARAMETERS:
C
C  PURPOSE:      ERODE (SHRINK) AN OBJECT IN AN IMAGE OR VOLUME 
C    
C  NOTE:         'ER DOC' is buggy in concept --> REMOVED
C                                                                 
C **********************************************************************

        SUBROUTINE EROSION(LUN1,LUN2,NX,NY,NZ)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        REAL, ALLOCATABLE      :: VIN2(:,: )
        REAL, ALLOCATABLE      :: VIN3(:,:,:)

        CHARACTER(LEN=1)       :: MODE 
        LOGICAL                :: NEWFILE

        CALL RDPRMC(MODE,NA,.TRUE.,'BOX OR CROSS NEIGHBORHOOD (B/C)',
     &               CHAR(0),IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        LENGTH = 3
        CALL RDPRI1S(LENGTH,NOT_USED,
     &              'NEIGHBORHOOD LENGTH (ODD)',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (LENGTH <= 1) THEN
           CALL ERRT(102,'LENGTH MUST BE GREATER THAN',2) 
           RETURN

        ELSEIF (MOD(LENGTH,2) == 0) THEN
           LENGTH = LENGTH + 1
           WRITE(NOUT,90) LENGTH 
90         FORMAT(' EFFECTIVE LENGTH OF NEIGHBORHOOD: ',I0)
        ENDIF
        LH = LENGTH / 2 

        IF (NZ <= 1) THEN
           IF (MODE == 'B') THEN
              LAT = LENGTH * LENGTH - 1
           ELSE
              LAT = 2 * LENGTH - 2 
           ENDIF
        ELSE
           IF (MODE == 'B') THEN
              LAT = LENGTH * LENGTH * LENGTH - 1
           ELSE
              LAT = 3 * LENGTH - 3 
           ENDIF
        ENDIF

        WRITE(NOUT,91) LAT
91      FORMAT('  NUMBER OF NEIGHBORS:',I0)

        CALL RDPRI1S(LAT,NOT_USED,
     &        'ERODE IF NUMBER OF OCCUPIED NEIGHBORS IS < THAN',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN


        IF (NZ > 1) THEN
           ALLOCATE(VIN3(NX,NY,NZ),STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN
               CALL ERRT(46,'ER, VIN3',NX*NY*NZ)
               RETURN
           ENDIF

C          LOAD INPUT VOLUME
           INDEX = 0
           DO K = 1,NZ
              DO J = 1,NY
                 INDEX = INDEX + 1
                 CALL REDLIN(LUN1,VIN3(1,J,K),NX,INDEX)
              ENDDO
           ENDDO
     
           CALL EROSION3(VIN3,NX,NY,NZ,LH,LAT, MODE,LUN2,
     &                   NPIXER)

           DEALLOCATE(VIN3)
           WRITE(NOUT,'(A,I0)') '  VOXELS ERODED: ',NPIXER

        ELSE
           ALLOCATE(VIN2(NX,NY),STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN
               CALL ERRT(46,'ER, VIN2',NX*NY)
               RETURN
           ENDIF

C          LOAD INPUT VOLUME
           INDEX = 0
           DO J = 1,NY
              INDEX = INDEX + 1
              CALL REDLIN(LUN1,VIN2(1,J),NX,INDEX)
           ENDDO
     
           CALL EROSION2(VIN2,NX,NY,NZ,LH,LAT, MODE,LUN2,
     &                   NPIXER)
           WRITE(NOUT,'(A,I0)') '  PIXELS ERODED: ',NPIXER
           DEALLOCATE(VIN2)
        ENDIF

        END

C       ------------------------- EROSION2 -----------------------------

        SUBROUTINE EROSION2(X,NX,NY,NZ,LH,LAT,MODE,LUN2,
     &                      NPIXER)

        REAL             :: X(NX,NY)

        REAL             :: Y(NX)

        CHARACTER(LEN=1) ::   MODE 

           IKEY   = 0
           NPIXER = 0

            DO J=1,NY                      
              IF (MODE == 'C')  THEN
C                "CROSS"

                 DO I=1,NX
C                   COPY UNERODED PIXEL VALUE
                    Y(I) = X(I,J)

                    IF (X(I,J) > 0.0)  THEN
C                      CENTRAL PIXEL IS OCCUPIED (NON-ZERO)
                       LB = 0

                       DO M=-LH,LH
                          IF (M. NE. 0) THEN
C                            COUNT NUMBER OF OCCUPIED NEIGHBORS 
                             IF (X(I,MOD(J+M+NY-1,NY)+1) > 0.0) 
     &                          LB = LB + 1 
                             IF (X(MOD(I+M+NX-1,NX)+1,J) > 0.0)
     &                          LB = LB + 1
                          ENDIF
                       ENDDO
                   ENDIF
                 ENDDO
              ELSE
C                "BOX" CONNECTIVITY
                 DO I=1,NX
                    Y(I) = X(I,J)

                    IF (X(I,J) > 0.0)  THEN
C                      CENTRAL PIXEL IS OCCUPIED (NON-ZERO)

C                      COUNT NUMBER OF OCCUPIED NEIGHBORS 
                       LB = 0
                       DO MJ=-LH,LH
                          MJM = MOD(J+MJ+NY-1,NY)+1
                          DO MI=-LH,LH
                             IF (X(MOD(I+MI+NX-1,NX)+1,MJM) > 0.0)
     &                       THEN 
                               LB = LB + 1
                             ENDIF
                          ENDDO
                       ENDDO

C                      ADJUST FOR THE CENTRAL ELEMENT
                       LB = LB - 1
       
                       IF (LB < LAT) THEN
C                         ERODE CENTRAL PIXEL (SET TO ZERO) 
                          Y(I)   = 0.0
                          NPIXER = NPIXER + 1
                       ENDIF
                    ENDIF
                 ENDDO
              ENDIF

C             OUTPUT IMAGE
              CALL WRTLIN(LUN2,Y,NX,J)
           ENDDO
        END       

C       ------------------------- EROSION3 -----------------------------

        SUBROUTINE EROSION3(X,NX,NY,NZ,LH,LAT,MODE,LUN2,
     &                      NPIXER)

        IMPLICIT NONE

        INCLUDE 'CMBLOCK.INC'
        REAL             :: X(NX,NY,NZ)

        REAL             :: Y(NX)

        CHARACTER(LEN=1) :: MODE 
        INTEGER          :: NX,NY,NZ
        INTEGER          :: LH,LAT,LUN2,NPIXER,IKEY,N,J,I
        INTEGER          :: LB,M,BE,IRT,MN,MNM,MJ,MJM,MI,LBE

        IKEY   = 0
        NPIXER = 0

        DO N=1,NZ                    
           DO J=1,NY 
                     
              IF (MODE == 'C')  THEN
C                "CROSS"

                 DO I=1,NX
C                   COPY UNERODED VOXEL VALUE
                    Y(I) = X(I,J,N)

                    IF (X(I,J,N) > 0.0)  THEN
C                      CENTRAL VOXEL IS OCCUPIED (NON-ZERO)

C                      COUNT NUMBER OF OCCUPIED NEIGHBORS 
                       LB = 0
                       DO M=-LH,LH
                          IF (M. NE. 0) THEN
                             IF (X(I,MOD(J+M+NY-1,NY)+1,N) > 0.0) 
     &                          LB = LB + 1
                             IF (X(MOD(I+M+NX-1,NX)+1,J,N) > 0.0)
     &                          LB = LB + 1
                             IF (X(I,J,MOD(N+M+NZ-1,NZ)+1) > 0.0)
     &                          LB = LB + 1
                          ENDIF
                       ENDDO

                       IF (LB < LAT) THEN
C                         ERODE CENTRAL VOXEL (SET TO ZERO) 
                          Y(I)   = 0.0
                          NPIXER = NPIXER + 1
                       ENDIF
                    ENDIF
                 ENDDO
              ELSE
C                "BOX" CONNECTIVITY
                 DO I=1,NX

C                   COPY UNERODED VOXEL VALUE
                    Y(I) = X(I,J,N)

                    IF (X(I,J,N) > 0.0)  THEN
C                      CENTRAL VOXEL IS OCCUPIED (NON-ZERO)

C                      COUNT NUMBER OF OCCUPIED NEIGHBORS 
                       LB = 0
                       DO MN=-LH,LH
                          MNM = MOD(N+MN+NZ-1,NZ)+1
                          DO MJ=-LH,LH
                             MJM = MOD(J+MJ+NY-1,NY)+1
                             DO MI=-LH,LH
                                IF (X(MOD(I+MI+NX-1,NX)+1,MJM,MNM)
     &                             > 0.0) LB = LB + 1
                             ENDDO
                          ENDDO
                       ENDDO

C                      ADJUST COUNT FOR THE CENTRAL ELEMENT 
                       LB = LB - 1

                       IF (LB < LAT) THEN
C                         ERODE CENTRAL VOXEL (SET TO ZERO) 
                          Y(I)   = 0.0
                          NPIXER = NPIXER + 1
                       ENDIF
                    ENDIF
                 ENDDO
              ENDIF

C             OUTPUT VOLUME LINE
              CALL WRTLIN(LUN2,Y,NX,J+(N-1)*NY)
           ENDDO
        ENDDO
      END       

@


1.15
log
@removed buggy 'ER DOC'
@
text
@d15 1
a15 1
C=* Email: spider@@wadsworth.org                                        *
@


1.14
log
@*** empty log message ***
@
text
@d7 1
a7 1
C               LAST PIXEL BUG                     FEB 14 ARDEAN LEITH
d37 1
a37 1
C  NOTE:         'ER DOC' is buggy in concept
a45 1
        CHARACTER(LEN=MAXNAM)  :: DOCNAM
d52 3
a54 23
        LUNDOC = 0
        IF (FCHAR(4:4) == 'D') THEN
           LUNDOC = 77   ! FOR UEP DOC FILE

           CALL OPENDOC(DOCNAM,.TRUE.,NLET,LUNDOC,LUNDOCT,.TRUE.,
     &                  'DOCUMENT FILE',
     &                  .FALSE.,.FALSE.,.TRUE.,NEWFILE,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
           IF (LUNDOCT <= 0) THEN
             CALL ERRT(101,'OPERATION CAN NOT USE INCORE DOC FILE.',NE)
             RETURN
           ENDIF
           CALL LUNDOCPUTCOM(LUNDOC,
     &         ' ULTIMATE ERODED PIXEL LOCATIONS',IRTFLG)
           CALL LUNDOCPUTCOM(LUNDOC,
     &         '          X,            Y,             Z',IRTFLG)

           MODE   = 'C'
           LENGTH = 3
           LH     = LENGTH / 2 
           LAT    = 4
           IF (NZ > 1) LAT = 6
        ELSE
d56 15
d72 5
a76 15
           CALL RDPRMC(MODE,NA,.TRUE.,'BOX OR CROSS NEIGHBORHOOD (B/C)',
     &               CHAR(0),IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           LENGTH = 3
10         CALL RDPRI1S(LENGTH,NOT_USED,'LENGTH OF NEIGHBORHOOD',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           IF (LENGTH <= 1) THEN
              CALL ERRT(102,'LENGTH MUST BE GREATER THAN',2) 
              GOTO 10
           ELSEIF (MOD(LENGTH,2) == 0) THEN
              LENGTH = LENGTH + 1
              WRITE(NOUT,90) LENGTH 
90            FORMAT(' EFFECTIVE LENGTH OF NEIGHBORHOOD: ',I0)
d78 3
a80 8
           LH = LENGTH / 2 

           IF (NZ <= 1) THEN
              IF (MODE == 'B') THEN
                 LAT = LENGTH * LENGTH - 1
              ELSE
                 LAT = 2 * LENGTH - 2 
              ENDIF
d82 1
a82 5
              IF (MODE == 'B') THEN
                 LAT = LENGTH * LENGTH * LENGTH - 1
              ELSE
                 LAT = 3 * LENGTH - 3 
              ENDIF
d84 1
d86 2
a87 2
           WRITE(NOUT,91) LAT
91         FORMAT('  NUMBER OF NEIGHBORS:',I0)
d89 1
a89 1
           CALL RDPRI1S(LAT,NOT_USED,
d91 1
a91 3
           IF (IRTFLG .NE. 0) RETURN

        ENDIF
d110 1
a110 1
           CALL EROSION3(VIN3,NX,NY,NZ,LH,LAT, MODE,LUNDOC,LUN2,
d130 1
a130 1
           CALL EROSION2(VIN2,NX,NY,NZ,LH,LAT, MODE,LUNDOC,LUN2,
a135 2
        IF (LUNDOC > 0) CLOSE(LUNDOC)

d140 1
a140 1
        SUBROUTINE EROSION2(X,NX,NY,NZ,LH,LAT,MODE,LUNDOC,LUN2,
a144 1
        REAL             :: XE(NX,NY)
a148 4
        IF (LUNDOC > 0) THEN
           XE = X   ! ARRAY OPERATION
        ENDIF

d210 1
a210 1
      END       
d214 1
a214 1
        SUBROUTINE EROSION3(X,NX,NY,NZ,LH,LAT,MODE,LUNDOC,LUN2,
a221 1
        REAL             :: XE(NX,NY,NZ)
d226 1
a226 1
        INTEGER          :: LH,LAT,LUNDOC,LUN2,NPIXER,IKEY,N,J,I
a231 7
        IF (LUNDOC > 0) THEN
           XE = X   ! ARRAY OPERATION
           WRITE(NOUT,*)
     &     '  WARNING, DOC FILE LISTS SOME EXTRA UEP WHICH ' //
     &     ' ARE NOT ULTIMATE'
        ENDIF

a294 25

                          IF (LUNDOC .NE. 0) THEN
                             XE(I,J,N) = 0.0
 
C                            COUNT NUMBER OF OCCUPIED NEIGHBORS 
                             LBE = 0
                             DO MN=-LH,LH
                                MNM = MOD(N+MN+NZ-1,NZ)+1
                                DO MJ=-LH,LH
                                   MJM = MOD(J+MJ+NY-1,NY)+1
                                   DO MI=-LH,LH
                                      IF (XE(MOD(I+MI+NX-1,NX)+1,
     &                                   MJM,MNM) > 0.0) LBE = LBE + 1
                                   ENDDO
                                ENDDO
                             ENDDO
C                            ADJUST COUNT FOR THE CENTRAL ELEMENT 
                             LBE = LBE - 1

                             IF (LBE == 0) THEN
C                               RECORD ULTIMATE ERODED VOXEL LOCATION
                                CALL EROSION_TODOC(LUNDOC,IKEY,
     &                                             I,J,N,IRT)
                             ENDIF
                          ENDIF
a305 18
C       ------------------------- EROSION_TODOC ----------------------

        SUBROUTINE EROSION_TODOC(LUNDOC,IKEY,IX,IY,IZ,IRTFLG)

        IMPLICIT NONE
        REAL, DIMENSION(3) :: DLIST
        INTEGER            :: LUNDOC,IKEY,IX,IY,IZ,IRTFLG

C       PUSH DLIST INTO DOC. FILE

        IKEY     = IKEY + 1
        DLIST(1) = IX
        DLIST(2) = IY
        DLIST(3) = IZ

        CALL LUNDOCWRTDAT(LUNDOC,IKEY,DLIST,3,IRTFLG)

        END
@


1.13
log
@note about 3d uep bug added
@
text
@d36 3
a38 1
C                                                                     
d54 2
a55 1
        IF (FCHAR(4:4) == 'D') LUNDOC = 77   ! FOR UEP DOC FILE
a56 40
        CALL RDPRMC(MODE,NA,.TRUE.,'BOX OR CROSS NEIGHBORHOOD (B/C)',
     &               CHAR(0),IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        LENGTH = 3
10      CALL RDPRI1S(LENGTH,NOT_USED,'LENGTH OF NEIGHBORHOOD',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (LENGTH .LE. 1) THEN
           CALL ERRT(102,'LENGTH MUST BE GREATER THAN',2) 
           GOTO 10
        ELSEIF (MOD(LENGTH,2) == 0) THEN
           LENGTH = LENGTH + 1
           WRITE(NOUT,90) LENGTH 
90         FORMAT(' EFFECTIVE LENGTH OF NEIGHBORHOOD: ',I0)
        ENDIF
        LH = LENGTH / 2 

        IF (NZ .LE. 1) THEN
           IF (MODE == 'B') THEN
              LAT = LENGTH * LENGTH - 1
           ELSE
              LAT = 2 * LENGTH - 2 
           ENDIF
        ELSE
           IF (MODE == 'B') THEN
              LAT = LENGTH * LENGTH * LENGTH - 1
           ELSE
              LAT = 3 * LENGTH - 3 
           ENDIF
        ENDIF

        WRITE(NOUT,91) LAT
91      FORMAT(' NUMBER OF NEIGHBORS:',I5)

        CALL RDPRI1S(LAT,NOT_USED,
     &     'ERODE IF NUMBER OF OCCUPIED NEIGHBORS IS < THAN',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (LUNDOC > 0) THEN
d61 1
a61 1
           IF (LUNDOCT .LE. 0) THEN
d69 48
d119 1
d185 1
a185 1
           DO J=1,NY                      
d196 1
d201 1
a201 1
     &                          LB = LB + 1
a203 1
                             IF (X(I,J) > 0.0) LB = LB + 1
d206 1
a206 30

                       IF (LB < LAT) THEN
C                         ERODE CENTRAL PIXEL (SET IT TO ZERO) 
                          Y(I)   = 0.0
                          NPIXER = NPIXER + 1

                          IF (LUNDOC .NE. 0) THEN
                             XE(I,J) = 0.0

                             LBE = 0
                             DO M=-LH,LH
                                IF (M. NE. 0) THEN
C                                  COUNT NUMBER OF OCCUPIED NEIGHBORS 
                                   IF (XE(I,MOD(J+M+NY-1,NY)+1) > 0.0) 
     &                                LBE = LBE + 1
                                   IF (XE(MOD(I+M+NX-1,NX)+1,J) > 0.0)
     &                                LBE = LBE + 1
                                   IF (XE(I,J) > 0.0) LBE = LBE + 1
                                ENDIF
                             ENDDO

                             !write(6,*) ' erode :',i,j,'  lbe: ',lbe
                             IF (LBE == 0) THEN
C                               RECORD ULTIMATE ERODED PIXEL LOCATION
                                CALL EROSION_TODOC(LUNDOC,IKEY,
     &                                             I,J,1,IRT)
                             ENDIF
                          ENDIF
                       ENDIF
                    ENDIF
d235 1
a235 24

                          IF (LUNDOC .NE. 0) THEN
                             XE(I,J) = 0.0
 
C                            COUNT NUMBER OF OCCUPIED NEIGHBORS 
                             LBE = 0
                             DO MJ=-LH,LH
                                MJM = MOD(J+MJ+NY-1,NY)+1
                                DO MI=-LH,LH
                                   IF (XE(MOD(I+MI+NX-1,NX)+1,MJM)>0.0)
     &                             THEN 
                                     LBE = LBE + 1
                                   ENDIF
                                ENDDO
                             ENDDO

                             !write(6,*) ' erode :',i,j,' lbe: ',lbe
                             IF (LBE == 0) THEN
C                               RECORD ULTIMATE ERODED PIXEL LOCATION
                                CALL EROSION_TODOC(LUNDOC,IKEY,
     &                                             I,J,1,IRT)
                             ENDIF
                          ENDIF
                      ENDIF
d250 2
d258 4
a261 1
        CHARACTER(LEN=1) ::   MODE 
d265 1
a302 24

                          IF (LUNDOC .NE. 0) THEN
                             XE(I,J,N) = 0.0
 
C                            COUNT NUMBER OF OCCUPIED NEIGHBORS 
                             LBE = 0
                             DO M=-LH,LH
                                IF (M. NE. 0)  THEN
C                                  COUNT NUMBER OF OCCUPIED NEIGHBORS 
                                   IF (XE(I,MOD(J+M+NY-1,NY)+1,N) > 0.0) 
     &                                LBE = LBE + 1
                                   IF (XE(MOD(I+M+NX-1,NX)+1,J,N) > 0.0)
     &                                LBE = LBE + 1
                                   IF(XE(I,J,MOD(N+M+NZ-1,NZ)+1) > 0.0)
     &                                LBE = LBE + 1
                                ENDIF
                             ENDDO

                             IF (LBE == 0) THEN
C                               RECORD ULTIMATE ERODED VOXEL LOCATION
                                CALL EROSION_TODOC(LUNDOC,IKEY,
     &                                             I,J,N,IRT)
                             ENDIF
                          ENDIF
@


1.12
log
@prompts, uep pixel bug, nx
@
text
@d290 1
d302 3
@


1.11
log
@GPL_2010
@
text
@d3 6
a8 4
C EROSION                 CREATED FEB 01 ARDEAN LEITH                  * 
C                         ADDED 'ER DOC' MAR 01 ARDEAN LEITH           *
C                         ADDED NPIXER   MAR 01 ARDEAN LEITH           *
C                         INCORE LUNDOC  JUL 03 ARDEAN LEITH                                              *
d13 1
a13 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d31 1
a31 1
C  EROSION(LUN1,LUN2,NSAM,NROW,NSLICE)
d35 2
a36 2
C  PURPOSE: ERODE (SHRINK) AN OBJECT IN AN IMAGE OR VOLUME 
C                                                                     *
d39 1
a39 1
	SUBROUTINE EROSION(LUN1,LUN2,NSAM,NROW,NSLICE)
d41 1
a41 1
	INCLUDE 'CMBLOCK.INC'
d44 3
a46 3
 	CHARACTER(LEN=MAXNAM)               :: DOCNAM
	REAL, ALLOCATABLE, DIMENSION(:,: )  ::  VIN2
	REAL, ALLOCATABLE, DIMENSION(:,:,:) ::  VIN3
d48 2
a49 2
	CHARACTER(LEN=1) ::   MODE 
        LOGICAL ::            NEWFILE
d52 1
a52 1
        IF (FCHAR(4:4) .EQ. 'D') LUNDOC = 77
d54 1
a54 1
	CALL RDPRMC(MODE,NA,.TRUE.,'BOX OR CROSS NEIGHBORHOOD (B/C)',
d65 1
a65 1
        ELSEIF (MOD(LENGTH,2) .EQ. 0) THEN
d68 1
a68 1
90         FORMAT(' EFFECTIVE LENGTH OF NEIGHBORHOOD:',I5)
d72 2
a73 2
        IF (NSLICE .LE. 1) THEN
	   IF (MODE .EQ. 'B') THEN
d75 1
a75 1
	   ELSE
d77 1
a77 1
	   ENDIF
d79 1
a79 1
	   IF (MODE .EQ. 'B') THEN
d81 1
a81 1
	   ELSE
d83 2
a84 2
	   ENDIF
	ENDIF
d89 1
a89 1
	CALL RDPRI1S(LAT,NOT_USED,
d93 1
a93 1
        IF (LUNDOC .GT. 0) THEN
d101 5
a105 1
           ENDIF 
d108 4
a111 4
        IF (NSLICE .GT. 1) THEN
	   ALLOCATE(VIN3(NSAM,NROW,NSLICE),STAT=IRTFLG)
	   IF (IRTFLG .NE. 0) THEN
               CALL ERRT(46,'DI, VIN3',IER)
d116 3
a118 3
	   INDEX = 0
           DO K = 1,NSLICE
              DO J = 1,NROW
d120 3
a122 3
                 CALL REDLIN(LUN1,VIN3(1,J,K),NSAM,INDEX)
	      ENDDO
	   ENDDO
d124 1
a124 1
           CALL EROSION3(VIN3,NSAM,NROW,NSLICE,LH,LAT, MODE,LUNDOC,LUN2,
d127 2
a128 2
	   DEALLOCATE(VIN3)
           WRITE(NOUT,*) ' VOXELS ERODED: ',NPIXER
d131 3
a133 3
	   ALLOCATE(VIN2(NSAM,NROW),STAT=IRTFLG)
	   IF (IRTFLG .NE. 0) THEN
               CALL ERRT(46,'DI, VIN2',IER)
d138 2
a139 2
	   INDEX = 0
           DO J = 1,NROW
d141 2
a142 2
              CALL REDLIN(LUN1,VIN2(1,J),NSAM,INDEX)
	   ENDDO
d144 1
a144 1
           CALL EROSION2(VIN2,NSAM,NROW,NSLICE,LH,LAT, MODE,LUNDOC,LUN2,
d146 2
a147 2
           WRITE(NOUT,*) ' PIXELS ERODED: ',NPIXER
	   DEALLOCATE(VIN2)
d150 2
a151 1
        IF (LUNDOC .GT. 0) CLOSE(LUNDOC)
d156 1
a156 1
	SUBROUTINE EROSION2(X,NSAM,NROW,NSLICE,LH,LAT,MODE,LUNDOC,LUN2,
d159 4
a162 2
	REAL, DIMENSION(NSAM,NROW) :: X
	REAL, DIMENSION(NSAM) :: Y
d164 5
a168 1
	CHARACTER(LEN=1) ::   MODE 
d173 2
a174 2
           DO J=1,NROW                      
              IF (MODE .EQ. 'C')  THEN
d176 3
a178 2
                 DO I=1,NSAM
C                   COPY UNERODED VOXEL VALUE
d180 3
a182 2
                    IF (X(I,J) .GT. 0.0)  THEN
C                      CENTRAL VOXEL IS OCCUPIED (NON-ZERO)
d187 1
a187 1
                             IF (X(I,MOD(J+M+NROW-1,NROW)+1) .GT. 0.0) 
d189 1
a189 1
                             IF (X(MOD(I+M+NSAM-1,NSAM)+1,J) .GT. 0.0)
d191 1
a191 1
                             IF (X(I,J).GT.0.0) LB = LB + 1
d195 26
a220 7
                       IF (LB .LT. LAT) THEN
C                         ERODE CENTRAL VOXEL (SET IT TO ZERO) 
                          Y(I) = 0.0
                         
                          IF (LUNDOC .NE. 0 .AND. LB .EQ. 0) THEN
C                            RECORD ULTIMATE ERODED PIXEL LOCATION
 	                     CALL EROSION_TODOC(LUNDOC,IKEY,I,J,1,IRT)
a221 1
                          NPIXER = NPIXER + 1
d227 1
a227 1
                 DO I=1,NSAM
a228 2
                    IF (X(I,J) .GT. 0.0)  THEN
C                      CENTRAL VOXEL IS OCCUPIED (NON-ZERO)
d230 4
a234 1
C                      COUNT NUMBER OF OCCUPIED NEIGHBORS 
d236 1
a236 1
                          MJM = MOD(J+MJ+NROW-1,NROW)+1
d238 4
a241 2
                             IF (X(MOD(I+MI+NSAM-1,NSAM)+1,MJM)
     &                           .GT. 0.0) LB = LB + 1
d246 28
a273 8
	               LB = LB - 1
	
                       IF (LB .LT. LAT) THEN
C                         ERODE CENTRAL VOXEL (SET TO ZERO) 
                          Y(I) = 0.0
                          IF (LUNDOC .NE. 0 .AND. LB .EQ. 0) THEN
C                            RECORD ULTIMATE ERODED PIXEL LOCATION
 	                     CALL EROSION_TODOC(LUNDOC,IKEY,I,J,1,IRT)
d275 1
a275 2
                          NPIXER = NPIXER + 1
                       ENDIF
d278 1
a278 1
	      ENDIF
d280 2
a281 2
C             OUTPUT VOLUME
              CALL WRTLIN(LUN2,Y,NSAM,J)
d283 1
a283 1
      END	
d287 1
a287 1
	SUBROUTINE EROSION3(X,NSAM,NROW,NSLICE,LH,LAT,MODE,LUNDOC,LUN2,
d290 1
a290 2
	REAL, DIMENSION(NSAM,NROW,NSLICE) :: X
	REAL, DIMENSION(NSAM) :: Y
d292 4
a295 1
	CHARACTER(LEN=1) ::   MODE 
d299 3
d303 4
a306 3
        DO N=1,NSLICE                    
           DO J=1,NROW                      
              IF (MODE .EQ. 'C')  THEN
d308 2
a309 1
                 DO I=1,NSAM
d313 1
a313 1
                    IF (X(I,J,N) .GT. 0.0)  THEN
d315 2
d319 2
a320 3
                          IF (M. NE. 0)  THEN
C                            COUNT NUMBER OF OCCUPIED NEIGHBORS 
                             IF (X(I,MOD(J+M+NROW-1,NROW)+1,N) .GT. 0.0) 
d322 1
a322 1
                             IF (X(MOD(I+M+NSAM-1,NSAM)+1,J,N) .GT. 0.0)
d324 1
a324 1
                            IF(X(I,J,MOD(N+M+NSLICE-1,NSLICE)+1).GT.0.0)
d329 27
a355 7
                       IF (LB .LT. LAT) THEN
C                         ERODE CENTRAL VOXEL (SET IT TO ZERO) 
                          Y(I) = 0.0

                          IF (LUNDOC .NE. 0 .AND. LB .EQ. 0) THEN
C                            RECORD ULTIMATE ERODED PIXEL LOCATION
 	                     CALL EROSION_TODOC(LUNDOC,IKEY,I,J,N,IRT)
a356 1
                          NPIXER = NPIXER + 1
d362 3
a364 1
                 DO I=1,NSAM
d366 2
a367 1
                    IF (X(I,J,N) .GT. 0.0)  THEN
d370 1
a371 1
C                      COUNT NUMBER OF OCCUPIED NEIGHBORS 
d373 1
a373 1
                          MNM = MOD(N+MN+NSLICE-1,NSLICE)+1
d375 1
a375 1
                             MJM = MOD(J+MJ+NROW-1,NROW)+1
d377 2
a378 2
                                IF (X(MOD(I+MI+NSAM-1,NSAM)+1,MJM,MNM)
     &                             .GT. 0.0) LB = LB + 1
d383 4
a386 4
C                      ADJUST FOR THE CENTRAL ELEMENT
	               LB = LB - 1
	
                       IF (LB .LT. LAT) THEN
d388 26
a413 4
                          Y(I) = 0.0
                          IF (LUNDOC .NE. 0 .AND. LB .EQ. 0) THEN
C                            RECORD ULTIMATE ERODED PIXEL LOCATION
 	                     CALL EROSION_TODOC(LUNDOC,IKEY,I,J,N,IRT)
a414 1
                          NPIXER = NPIXER + 1
d418 1
a418 1
	      ENDIF
d420 2
a421 2
C             OUTPUT VOLUME
              CALL WRTLIN(LUN2,Y,NSAM,J+(N-1)*NROW)
d424 1
a424 1
      END	
d428 1
a428 3
	SUBROUTINE EROSION_TODOC(LUNDOC,IKEY,ISAM,IROW,ISLICE,IRTFLG)

	REAL, DIMENSION(3) :: DLIST
d430 3
a432 1
        IKEY = IKEY + 1
a434 1
        NVAL  = 3
d436 4
a439 3
        DLIST(1) = ISAM
        DLIST(2) = IROW
        DLIST(3) = ISLICE
d441 1
a441 1
        CALL LUNDOCWRTDAT(LUNDOC,IKEY,DLIST,NVAL,IRTFLG)
@


1.10
log
@GPL License fixed
@
text
@a7 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d9 5
a13 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d15 1
a15 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.9
log
@opendoc incore parameter
@
text
@d8 23
a30 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.8
log
@incore lundoc
@
text
@d79 1
a79 1
           CALL OPENDOC(DOCNAM,.TRUE.,NLET,LUNDOC,.TRUE.,
d83 4
a87 1

@


1.7
log
@nloop,iloop_removed
@
text
@d6 1
a6 1
C                                                                      *
d168 1
a168 1
                          IF (LUNDOC .GT. 0 .AND. LB .EQ. 0) THEN
d199 1
a199 1
                          IF (LUNDOC .GT. 0 .AND. LB .EQ. 0) THEN
d254 1
a254 1
                          IF (LUNDOC .GT. 0 .AND. LB .EQ. 0) THEN
d288 1
a288 1
                          IF (LUNDOC .GT. 0 .AND. LB .EQ. 0) THEN
@


1.6
log
@added npixer
@
text
@d44 1
a44 1
10      CALL RDPRI1S(LENGTH,NLOOP,ILOOP,'LENGTH OF NEIGHBORHOOD',IRTFLG)
d74 1
a74 1
	CALL RDPRI1S(LAT,NLOOP,ILOOP,
@


1.5
log
@added 'ER DOC'
@
text
@d5 1
d102 2
a103 1
           CALL EROSION3(VIN3,NSAM,NROW,NSLICE,LH,LAT, MODE,LUNDOC,LUN2)
d106 1
d122 3
a124 2
           CALL EROSION2(VIN2,NSAM,NROW,NSLICE,LH,LAT, MODE,LUNDOC,LUN2)

a128 1

d133 2
a134 1
	SUBROUTINE EROSION2(X,NSAM,NROW,NSLICE,LH,LAT,MODE,LUNDOC,LUN2)
d141 2
a142 1
           IKEY = 0
d172 1
a172 1

d203 1
d216 2
a217 1
	SUBROUTINE EROSION3(X,NSAM,NROW,NSLICE,LH,LAT,MODE,LUNDOC,LUN2)
d224 2
a225 1
        IKEY = 0
d258 1
d292 1
@


1.4
log
@added image
@
text
@d3 2
a4 1
C EROSION                                                              *
d15 6
a20 2
C  EROSION
C                                                                      *
a22 1

d26 1
d28 2
a29 1
	REAL, ALLOCATABLE, DIMENSION(:,: ) ::  VIN2
d32 2
a33 1
	CHARACTER*1  MODE,NULL
d35 2
a36 1
	NULL = CHAR(0)
d39 1
a39 1
     &               NULL,IRTFLG)
d42 2
a43 1
 	CALL RDPRI1S(LENGTH,NLOOP,ILOOP,'LENGTH OF NEIGHBORHOOD',IRTFLG)
d48 2
a49 4
           RETURN
        ENDIF

        IF (MOD(LENGTH,2) .EQ. 0) THEN
d54 1
d74 1
a74 1
     &     'ERODE IF NUMBER OF OCCUPIED NEIGHBORS IS LESS THAN',IRTFLG)
d77 8
d101 1
a101 2
           LH = LENGTH / 2 
           CALL EROSION3(VIN3,NSAM,NROW,NSLICE,LH,LAT, MODE,LUN2)
d119 1
a119 2
           LH = LENGTH / 2 
           CALL EROSION2(VIN2,NSAM,NROW,NSLICE,LH,LAT, MODE,LUN2)
d123 3
d130 4
a133 1
	SUBROUTINE EROSION2(X,NSAM,NROW,NSLICE,LH,LAT,MODE,LUN2)
d135 1
a135 2
	DIMENSION    X(NSAM,NROW), Y(NSAM)
	CHARACTER*1  MODE
d137 2
d149 1
a149 1
                          IF (M. NE. 0)  THEN
d162 6
d194 4
d210 4
a213 1
	SUBROUTINE EROSION3(X,NSAM,NROW,NSLICE,LH,LAT,MODE,LUN2)
d215 1
a215 2
	DIMENSION    X(NSAM,NROW,NSLICE), Y(NSAM)
	CHARACTER*1  MODE
d217 2
d226 1
d245 5
d279 4
d293 19
@


1.3
log
@*** empty log message ***
@
text
@a17 1
	SUBROUTINE EROSION
d19 1
a19 2
        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'
a20 28
	CHARACTER (LEN=MAXNAM) :: FILNAM

	DATA  LUN1,LUN2/21,22/

        CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &                 IDUM,'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

	IF (NSLICE .LE. 1)  THEN
	   CALL ERRT(2,'ER',IER)
           GOTO 9999
        ENDIF

        CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM,NROW,NSLICE,
     &                 IDUM,'OUTPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

	CALL  ERODE(LUN1,LUN2,NSAM,NROW,NSLICE)

9999    CLOSE(LUN1)
	CLOSE(LUN2)

	END

C       ------------------------ ERODE --------------------------------

	SUBROUTINE ERODE(LUN1,LUN2,NSAM,NROW,NSLICE)

d23 2
a24 1
	REAL, ALLOCATABLE, DIMENSION(:,:,:) ::  VIN
d48 12
a59 4
	IF (MODE .EQ. 'B') THEN
           LAT = LENGTH * LENGTH * LENGTH - 1
	ELSE
           LAT = 3 * LENGTH - 1 
d69 27
a95 5
	ALLOCATE(VIN(NSAM,NROW,NSLICE),STAT=IRTFLG)
	IF (IRTFLG .NE. 0) THEN
            CALL ERRT(46,'DI, VIN',IER)
            RETURN
        ENDIF
d97 2
a98 3
C       LOAD INPUT VOLUME
	INDEX = 0
        DO K = 1,NSLICE
d101 1
a101 1
              CALL REDLIN(LUN1,VIN(1,J,K),NSAM,INDEX)
d103 7
a109 1
	ENDDO
d111 1
a111 2
        LH = LENGTH / 2 
        CALL ERODE2(VIN,NSAM,NROW,NSLICE,LH,LAT, MODE,LUN2)
d113 4
a116 2
	DEALLOCATE(VIN)
        END
d118 58
d177 1
a177 1
C       ------------------------- ERODE2 -----------------------------
d179 1
a179 1
	SUBROUTINE ERODE2(X,NSAM,NROW,NSLICE,LH,LAT,MODE,LUN2)
@


1.2
log
@*** empty log message ***
@
text
@d59 11
a69 2
 	CALL RDPRMI(LENGTH,IDUM,NLOOP,ILOOP,'LENGTH OF THE FILTER')
	LENGTH = LENGTH/2+1
d71 5
a75 1
	CALL RDPRMI(LAT,IDUM,NLOOP,ILOOP,'NUMBER OF NEIGHBORS')
a76 1
	CALL RDPRMC(MODE,NA,.TRUE.,'BOX OR CROSS (B/C)',NULL,IRT)
d78 1
a78 1
	   K = LENGTH * LENGTH * LENGTH
d80 1
a80 1
	   K = 3 * LENGTH - 2
d83 7
d105 2
a106 1
        CALL ERODE2(VIN,NSAM,NROW,NSLICE,LENGTH,LAT, MODE,LUN2)
d114 1
a114 1
	SUBROUTINE ERODE2(X,NSAM,NROW,NSLICE,L,LAT,MODE,LUNO)
a118 3
	LH  = L/2
	K21 = K/2+1

d124 2
d132 1
a132 1
                             IF (X(I,MOD(J+M+NROW-1,NROW)+1,N) .NE. 0.0) 
d134 1
a134 1
                             IF (X(MOD(I+M+NSAM-1,NSAM)+1,J,N) .NE. 0.0)
d136 1
a136 1
                            IF(X(I,J,MOD(N+M+NSLICE-1,NSLICE)+1).NE.0.0)
d141 2
a142 5
                       IF (LB .GE. LAT) THEN
C                         KEEP CENTRAL VOXEL AS OCCUPIED 
                          Y(I) = 1.0
                       ELSE
C                         ERODE CENTRAL VOXEL (SET TO ZERO) 
d148 1
a148 1
C                "BAR" jCONNECTIVITY
d150 1
d162 1
a162 1
     &                             .NE.0.0) LB = LB + 1
d168 1
a168 1
	               IF (X(I,J,N) .EQ. 1.0)  LB = LB - 1
d170 1
a170 4
                       IF (LB .GE. LAT) THEN
C                         KEEP CENTRAL VOXEL AS OCCUPIED 
                          Y(I) = 1.0
                       ELSE
d179 1
a179 1
              CALL WRTLIN(LUNO,Y,NSAM,J+(N-1)*NROW)
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
C EROSION                                                             *
@
