head	1.18;
access;
symbols
	pre_mrcs:1.18
	healthdept_2018:1.18
	pre_getangas:1.16
	GPL2010:1.16
	pre_GPL2010:1.15
	pre_var_equation:1.15
	pre_fftwrings:1.15
	pre_opfiles:1.15
	src:1.15
	best-code:1.15
	x-named-regs:1.15
	x:1.15
	v13-00:1.15
	pre_GPL:1.13
	prec_CA:1.13
	noindx:1.13
	Bproc:1.12
	oct21:1.10
	last77:1.10;
locks; strict;
comment	@c @;


1.18
date	2018.10.03.14.34.08;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2011.10.31.18.37.27;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.24.13.25.58;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.17.20.23.43;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.17.18.15.53;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2001.01.16.16.08.15;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.10.15.05.40;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.24.20.31.40;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	99.03.25.20.11.58;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	98.04.06.20.03.34;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	98.04.06.19.16.50;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	96.12.04.20.13.51;	author mladjadj;	state Exp;
branches;
next	1.6;

1.6
date	96.12.02.21.46.45;	author mladjadj;	state Exp;
branches;
next	1.5;

1.5
date	96.01.22.15.40.48;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.09.28.18.06.24;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.09.28.17.53.35;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.06.35;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.49.43;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.18
log
@email_health_dept
@
text
@C ++********************************************************************
C                                                                      *
C INTERP3     ADDE ALLOCATE                        MAY 00 ARDEAN LEITH *
C             USED ALLOCATE ALWAYS                 OCT 11 ARDEAN LEITH *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2011  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C     INTERP3(LUN1,LUN2,NSAM,NROW,NSLICE,NSAM1,NROW1,NSLICE1,IDUM)
C
C     PURPOSE:  3 D INTERPOLATION
C                                                                     *
C **********************************************************************

      SUBROUTINE INTERP3(LUN1,LUN2,NSAM,NROW,NSLICE,
     &                             NSAM1,NROW1,NSLICE1,IDUM)
 
      INCLUDE 'CMBLOCK.INC' 
      INCLUDE 'CMLIMIT.INC'
 
      COMMON /IOBUF/ BUF(NBUFSIZ)

      REAL, ALLOCATABLE, DIMENSION(:) :: QPT
 
C     ALLOCATE MEMORY FOR INPUT VOLUME
      MEMWANT = NSAM * NROW * NSLICE

      ALLOCATE (QPT(MEMWANT), STAT=IRTFLG)
      IF (IRTFLG .NE. 0) THEN
         CALL ERRT(46,'INTERP3, QPT',NDUM)
         RETURN
      ENDIF
      WRITE(NOUT,*) 'ALLOCATED MEMORY FOR VOLUME:',MEMWANT

C     LOAD VOLUME
      CALL READV(LUN1,QPT,NSAM,NROW,NSAM,NROW,NSLICE)

C     CALL INTERPOLATION ROUTINE
      CALL IRP3(QPT,BUF,NSAM,NROW,NSLICE,
     &          NSAM1,NROW1,NSLICE1,LUN2)
 
      DEALLOCATE(QPT)

      RETURN
      END
@


1.17
log
@used allocate always, maxdim bug fixed
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.16
log
@GPL_2010
@
text
@d1 5
a5 4
C ++************************************************************************
C
C INTERP3                             USED ALLOCATE MAY 00 ARDEAN LEITH
C
d10 1
a10 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d28 1
a28 1
C     INTERP3(LUN1,LUN2,NSAM,NROW,NSLICE,NSAM1,NROW1,NSLICE1,MAXMEM)
d35 1
a35 1
     &                             NSAM1,NROW1,NSLICE1,MAXMEM)
a39 2
      COMMON       BAF(1)

d44 1
a44 1
C     ALLOCATE MEMORY IF NEEDED
d47 6
a52 17
      IF (MEMWANT .GT. MAXMEM) THEN
C        ALLOCATE MEMORY TO HOLD VOLUME
         ALLOCATE (QPT(MEMWANT), STAT=IRTFLG)
         IF (IRTFLG .NE. 0) THEN
            CALL ERRT(46,'INTERP3, QPT',NDUM)
            RETURN
         ENDIF
         WRITE(NOUT,*) 'ALLOCATED MEMORY FOR VOLUME:',MEMWANT

C        LOAD VOLUME
         CALL READV(LUN1,QPT,NSAM,NROW,NSAM,NROW,NSLICE)

C        CALL INTERPOLATION ROUTINE
         CALL IRP3(QPT,BUF,NSAM,NROW,NSLICE,
     &            NSAM1,NROW1,NSLICE1,LUN2)
 
         DEALLOCATE(QPT)
d54 2
a55 10
      ELSE
C        USE COMMON BLOCK TO HOLD VOLUME
         WRITE(NOUT,*) 'USED COMMON BLOCK FOR VOLUME'

C        LOAD VOLUME
         CALL READV(LUN1,BAF,NSAM,NROW,NSAM,NROW,NSLICE)

C        CALL INTERPOLATION ROUTINE
         CALL IRP3(BAF,BUF,NSAM,NROW,NSLICE,
     &            NSAM1,NROW1,NSLICE1,LUN2)
d57 3
a59 1
      ENDIF
d61 2
@


1.15
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.14
log
@HRI GPL License used
@
text
@a5 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1988, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
a29 1
C **************************************************************************
a35 1
C***************************************************************************
@


1.13
log
@used allocate without pointers
@
text
@d5 1
d7 1
d9 24
d39 1
d46 1
@


1.12
log
@removed chkmem
@
text
@d15 1
a15 1
C     INTERP3
d21 2
a22 2
      SUBROUTINE INTERP3
     &	(LUN1,LUN2,NSAM,NROW,NSLICE,NSAM1,NROW1,NSLICE1,MAXMEM)
a26 1
      REAL, TARGET :: BAF
d31 2
a32 3
      REAL, DIMENSION(:), POINTER :: RPOINTER
      REAL, DIMENSION(:), POINTER :: QPT

a35 1
      NULLIFY(RPOINTER)
d38 1
a38 1
         ALLOCATE (RPOINTER(MEMWANT), STAT=IRTFLG)
d40 1
a40 1
            CALL ERRT(46,'INTERP3, RPOINTER',NDUM)
d43 11
a53 2
         QPT => RPOINTER
         WRITE(NOUT,*) 'ALLOCATED MEMORY FOR VOLUME'
a55 1
         QPT => BAF
a56 1
      ENDIF
d58 2
a59 2
C     INPUT VOLUME
      CALL READV(LUN1,QPT,NSAM,NROW,NSAM,NROW,NSLICE)
d61 2
a62 2
C     CALL INTERPOLATION ROUTINE
      CALL IRP3(QPT,BUF,NSAM,NROW,NSLICE,
d64 2
a65 2
 
      IF (ASSOCIATED(RPOINTER)) DEALLOCATE(RPOINTER)
@


1.11
log
@SP_F90 removed
@
text
@d3 1
a3 1
C INTERP3
d14 5
a18 1
C                                                                          *
d25 3
d30 1
a30 18
      INCLUDE 'F90ALLOC.INC'
      REAL, DIMENSION(:), POINTER :: IPQ
      REAL, DIMENSION(:), POINTER :: Q

      LOGICAL      RUNTIME 

	MEMWANT=NSAM*NROW*NSLICE+NSAM1
	CALL CHKMEM( MEMWANT, BAF, MAXMEM, RUNTIME,IPQ,IRTFLG)
	IF(IRTFLG.NE.0) THEN 
          CALL ERRT(6,'INTERP3  ',NE)
          RETURN
	ENDIF

        Q = >IPQ

	DO  J=1,NROW*NSLICE
          CALL REDLIN(LUN1,Q(1+(J-1)*NSAM),NSAM,J)
        ENDDO
d32 30
a61 2
	KK = 1+NSAM*NROW*NSLICE
	CALL IRP3(Q(1),Q(KK),NSAM,NROW,NSLICE,NSAM1,NROW1,NSLICE1,LUN2)
d63 2
a64 3
        IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'IP',IRTFLG) 
	RETURN
        END
@


1.10
log
@*** empty log message ***
@
text
@d3 1
a3 1
C $$ INTERP3
a14 3
C                                                                          *
C        0         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012
d22 5
a26 8
#ifdef SP_F90
        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: Q
#else
      DIMENSION    Q(1)
      POINTER      (IPQ,Q) 
#endif
d28 1
d36 2
a37 3
#ifdef SP_F90
         Q = >IPQ
#endif
@


1.9
log
@*** empty log message ***
@
text
@a33 1
CNO_SAVE
d49 1
a49 1
	CALL IRP3(Q,Q(KK),NSAM,NROW,NSLICE,NSAM1,NROW1,NSLICE1,LUN2)
@


1.8
log
@f90 alloc
@
text
@d24 1
a24 1
      COMMON       KAF(1)
d36 1
a36 1
	CALL CHKMEM( MEMWANT, KAF, MAXMEM, RUNTIME,IPQ,IRTFLG)
@


1.7
log
@memtot is memwant
@
text
@d25 5
d32 1
d42 3
@


1.6
log
@use chkmem instead of allocit call
@
text
@d30 1
a30 1
	CALL CHKMEM(MEMTOT, KAF, MAXMEM, RUNTIME,IPQ,IRTFLG)
@


1.5
log
@message fixed
@
text
@d22 3
a24 7

#ifdef SP_UNIX
      INCLUDE 'CMBLOCK.INC'
#else
      INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
#ifdef SP_ALLOC
d27 1
a27 4
      LOGICAL      RUNTIME
#else
      COMMON       Q(1)
#endif
d30 2
a31 7
#ifdef SP_ALLOC
        CALL ALLOCIT(MEMWANT,RUNTIME,IPQ,'IP',IRTFLG)
        IF (.NOT.RUNTIME)  THEN
#else
	IF (MEMWANT .GT. MAXMEM) THEN
#endif

d42 3
a44 3
#ifdef SP_ALLOC
      CALL ALLOCIT(0,RUNTIME,IPQ,'IP',IRTFLG)
#endif
@


1.4
log
@nosave
@
text
@d55 1
a55 1
      CALL ALLOCIT(0,RUNTIME,IPQ,'RF 3',IRTFLG)
@


1.3
log
@dynamical memory
@
text
@d35 1
@


1.2
log
@cpp_lines_added
@
text
@d28 14
a42 3
      COMMON Q(1)

	IF (NSAM*NROW*NSLICE+NSAM1 .GT. MAXMEM)  THEN
d53 3
a55 2

	RETURN
@


1.1
log
@Initial revision
@
text
@d23 3
d27 1
@
