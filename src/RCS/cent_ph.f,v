head	1.14;
access;
symbols
	healthdept_2018:1.14
	pre_getangas:1.12
	GPL2010:1.12
	pre_GPL2010:1.11
	pre_var_equation:1.11
	pre_fftwrings:1.11
	pre_opfiles:1.11
	src:1.11
	best-code:1.11
	x-named-regs:1.11
	x:1.11
	v13-00:1.11
	pre_GPL:1.9
	prec_CA:1.8
	noindx:1.8
	Bproc:1.8
	oct21:1.5
	last77:1.4;
locks; strict;
comment	@c @;


1.14
date	2018.10.03.14.34.02;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2012.03.27.14.48.40;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2010.06.24.13.25.13;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.17.20.25.25;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.17.18.17.20;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2005.07.01.15.54.34;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2000.05.18.15.45.33;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	99.12.27.18.05.57;	author bimal;	state Exp;
branches;
next	1.6;

1.6
date	99.11.10.23.09.10;	author yuchen;	state Exp;
branches;
next	1.5;

1.5
date	99.06.03.20.50.47;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	97.10.01.21.38.04;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	97.04.24.14.59.21;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.02.02.18.53.00;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.47.35;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.14
log
@email_health_dept
@
text
@C++*********************************************************************
C
C CENT_PH.F
C        DOUBLE PRECSISON INCREASES REPEATABILITY    JUN 05 ArDean Leith
C        RENAMED FROM CENT_D.F                       MAR 12 ArDean Leith
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2012  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C CENT_PH(BUF,NX,NY,SNS,SNR)
C
C PURPOSE: PHASE APPROXIMATION TO CENTER OF GRAVITY
C
C PARAMETERS:  BUF                 DATA ARRAY
C              NX,NY               SIZE
C              SNS,SNR             CENTER RELATIVE TO IMAGE ORIGIN
C
C--*********************************************************************

         SUBROUTINE CENT_PH(BUF, NX,NY, SNS,SNR)

         IMPLICIT NONE
         REAL, INTENT(IN)   :: BUF(NX,NY)
         INTEGER            :: NX,NY
         REAL               :: SNS,SNR

         INTEGER            :: I,J,IM1,JM1
         REAL               :: RT
         INTEGER, PARAMETER :: R_8 = SELECTED_REAL_KIND(P=8)
         REAL(KIND=R_8)     :: C,S,P,T,FI

         C = 0.0
         S = 0.0
         P = 8 * DATAN(1.0D0) / NX

c$omp    parallel do private(i,im1,j,t),reduction(+:c,s)
         DO I=1,NX
            IM1 = (I-1)
            T = 0.0
            DO J=1,NY
               T = T + BUF(I,J)
            ENDDO

            C   = C + COS(P * IM1) * T
            S   = S + SIN(P * IM1) * T
         ENDDO

         FI = ATAN2(S,C)
         IF (FI < 0.0)  FI = FI + 8 * DATAN(1.0D0)
         SNS = FI / P  +1.0

         C = 0.0
         S = 0.0
         P = 8 * DATAN(1.0D0) / NY

c$omp    parallel do private(j,jm1,i,t),reduction(+:c,s)
         DO J=1,NY
            JM1 = (J-1)

            T = 0.0
            DO I=1,NX
               T = T + BUF(I,J)
            ENDDO

            C   = C + COS(P * JM1) * T
            S   = S + SIN(P * JM1) * T
         ENDDO

         FI = ATAN2(S,C)
         IF (FI < 0.0) FI = FI + 8 * DATAN(1.0D0)
         SNR = FI / P + 1.0

         END
@


1.13
log
@reformatted text, comments, nx,ny
@
text
@d13 1
a13 1
C=* Email: spider@@wadsworth.org                                        *
@


1.12
log
@GPL_2010
@
text
@d3 3
a5 2
C CENT_D.F
C        DOUBLE PRECSISON INCREASEs REPEATABILITY    JUN 05 ArDean Leith
d11 1
a11 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d29 1
a29 1
C   CENT_D(X,NSAM,NROW,SNS,SNR)
d31 5
a35 1
C   PURPOSE: PHASE APPROXIMATION TO CENTER OF GRAVITY
d39 1
a39 1
         SUBROUTINE CENT_D(X,NSAM,NROW,SNS,SNR)
d41 4
a44 1
         REAL, DIMENSION(NSAM,NROW), INTENT(IN) :: X
d46 2
d53 1
a53 1
         P = 8 * DATAN(1.0D0) / NSAM
d55 10
a64 8
c$omp    parallel do private(i,t,j),reduction(+:c,s)
         DO I=1,NSAM
             T = 0.0
             DO J=1,NROW
                T = T + X(I,J)
             ENDDO
            C = C + COS(P * (I-1)) * T
            S = S + SIN(P * (I-1)) * T
d68 1
a68 1
         IF (FI .LT. 0.0)  FI = FI + 8 * DATAN(1.0D0)
d73 5
a77 1
         P = 8 * DATAN(1.0D0) / NROW
a78 2
c$omp    parallel do private(i,t,j),reduction(+:c,s)
         DO J=1,NROW
d80 2
a81 2
            DO I=1,NSAM
                T = T + X(I,J)
d84 2
a85 2
            C = C + COS(P * (J-1)) * T
            S = S + SIN(P * (J-1)) * T
d89 1
a89 1
         IF (FI .LT. 0.0)  FI = FI + 8 * DATAN(1.0D0)
@


1.11
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.10
log
@HRI GPL License used
@
text
@a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.9
log
@double precision for || repeatability increase
@
text
@d8 24
@


1.8
log
@reduction corrected
@
text
@d1 1
a1 1
C++************************************************************************
d3 2
a4 1
C $$ CENT_D.FOR
d6 34
a39 30
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
C **************************************************************************
C
C
C
C--************************************************************************
C
C $$ CENT_D.FOR
C
         SUBROUTINE  CENT_D(X,NSAM,NROW,SNS,SNR)
         DIMENSION  X(NSAM,NROW)
C
         C=0.0
         S=0.0
         P=8*DATAN(1.0D0)/NSAM
c$omp parallel do private(i,t,j),reduction(+:c,s)
         DO    I=1,NSAM
            T=0.0
            DO    J=1,NROW
             T=T+X(I,J)
            ENDDO
            C=C+COS(P*(I-1))*T
            S=S+SIN(P*(I-1))*T
d41 14
a54 12
         FI=ATAN2(S,C)
         IF(FI.LT.0.0)  FI=FI+8*DATAN(1.0D0)
         SNS=FI/P+1.0
C
         C=0.0
         S=0.0
         P=8*DATAN(1.0D0)/NROW
c$omp parallel do private(i,t,j),reduction(+:c,s)
         DO    J=1,NROW
            T=0.0
            DO    I=1,NSAM
             T=T+X(I,J)
d56 3
a58 2
            C=C+COS(P*(J-1))*T
            S=S+SIN(P*(J-1))*T
d60 5
a64 4
C
         FI=ATAN2(S,C)
         IF(FI.LT.0.0)  FI=FI+8*DATAN(1.0D0)
         SNR=FI/P+1.0
@


1.7
log
@adapted for dynamical memory allocation
@
text
@a22 1

d27 1
a27 1
c$omp parallel do private(i,t,j),reduction(+:c) reduction(+:s)
d31 1
a31 1
               T=T+X(I,J)
d43 1
a43 1
c$omp parallel do private(i,t,j),reduction(+:c) reduction(+:s)
d47 1
a47 1
               T=T+X(I,J)
@


1.6
log
@a
@
text
@d12 1
a12 1
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
d30 7
a36 7
         T=0.0
         DO    J=1,NROW
         T=T+X(I,J)
	 ENDDO
         C=C+COS(P*(I-1))*T
         S=S+SIN(P*(I-1))*T
	 ENDDO
d46 7
a52 7
         T=0.0
         DO    I=1,NSAM
         T=T+X(I,J)
	 ENDDO
         C=C+COS(P*(J-1))*T
         S=S+SIN(P*(J-1))*T
	 ENDDO
@


1.5
log
@OpenMP
@
text
@d23 1
a23 1
CNO_SAVE
@


1.4
log
@*** empty log message ***
@
text
@d28 1
a28 1
c$doacross local(i,t,j),reduction(c,s)
d44 1
a44 1
c$doacross local(i,t,j),reduction(c,s)
@


1.3
log
@|| fixed
@
text
@d29 1
a29 1
         DO  1  I=1,NSAM
d31 3
a33 2
         DO  11  J=1,NROW
11       T=T+X(I,J)
d35 2
a36 1
1        S=S+SIN(P*(I-1))*T
d45 1
a45 1
         DO  2  J=1,NROW
d47 3
a49 2
         DO  22  I=1,NSAM
22       T=T+X(I,J)
d51 2
a52 1
2        S=S+SIN(P*(J-1))*T
@


1.2
log
@nosave mp
@
text
@d28 1
a28 1
c$doacross local(i,t,j),reduction(t,c,s)
d42 1
a42 1
c$doacross local(i,t,j),reduction(t,c,s)
@


1.1
log
@Initial revision
@
text
@d23 1
d28 1
d42 1
@
