head	1.11;
access;
symbols
	pre_mrcs:1.11
	healthdept_2018:1.11
	pre_getangas:1.10
	GPL2010:1.10
	pre_GPL2010:1.9
	pre_var_equation:1.7
	pre_fftwrings:1.7
	pre_opfiles:1.7
	src:1.7
	best-code:1.7
	x-named-regs:1.7
	x:1.7
	v13-00:1.7
	pre_GPL:1.6
	prec_CA:1.5
	noindx:1.5
	Bproc:1.5
	oct21:1.4
	last77:1.4;
locks; strict;
comment	@c @;


1.11
date	2018.10.03.14.34.14;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2010.06.24.13.26.44;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2010.05.27.18.43.43;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2010.04.27.12.27.39;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.17.21.09.47;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.10.15.50.29;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.11.10.23.11.17;	author yuchen;	state Exp;
branches;
next	1.4;

1.4
date	99.02.05.13.42.47;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	95.01.10.16.13.11;	author liy;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.10.09;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.13;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.11
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C REFORM.F                          CREATED        JAN 91
C                                   Y BUG          NOV 2003 ArDean Leith
C                                   ALLOCATED      APR 2010 ArDean Leith
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    REFORM(LUNIN,LUNOUT,NSAM,NSAM1,NSAM2,NSAMS,
C           NROW,NROW1,NROW2,NROWS,NSLICE,NSLICE1,NSLICE2,NSLICES,
C           AXIS,IANG,IRTFLG)
C
C    PURPOSE:   REFORM AN IMAGE STAGE BY ROTATION OF 90, 180 OR 270 
C               DEGREES AROUND  THE X,Y, OR Z AXIS.  CENTER OF ROTATION
C               IS ALWAYS CENTER OF THE RELEVANT SLICE
C               ROTATIONS ARE CLOCKWISE WHEN LOOKING ALONG AXES.  THE
C               X AXIS + TO RIGHT,  Y AXIS + UP THE SCREEN, Z AXIS + OUT
C              OF THE SCREEN!
C
C    PARAMETERS:       
C                     
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************


        SUBROUTINE REFORM(LUNIN,LUNOUT,NSAM,NSAM1,NSAM2,NSAMS,
     &           NROW,NROW1,NROW2,NROWS,NSLICE,NSLICE1,NSLICE2,NSLICES,
     &           AXIS,IANG,IRTFLG)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        COMMON /IOBUF/ BUF(NBUFSIZ)

        CHARACTER (LEN=1) :: AXIS
        REAL, ALLOCATABLE :: BUF2(:)

        IF (AXIS .EQ. 'Z') THEN
C          ROTATE AROUND Z AXIS ----------------------------------- Z

           ALLOCATE(BUF2(NSAM*NROW), STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN
               CALL ERRT(46,'BUF2',NSAM*NROW)
               GOTO 9999
           ENDIF

           IF (IANG .EQ. 90 .OR. IANG .EQ. 270) THEN
C             ROTATE 90 OR -90 AROUND Z AXIS

              IT5 = NSAMS * (NROWS + NSAM1 - 1)

              DO ISLICE1 = NSLICE1, NSLICE2
                ISLICE2  = ISLICE1 - NSLICE1 + 1

                DO IROW1 = NROW1,NROW2
                  IREC1  = (ISLICE1 - 1) * NROW + IROW1
                  CALL REDLIN(LUNIN,BUF,NSAM,IREC1)

                  IF (IANG .EQ. 270) THEN
                     ISAM2 = NSAMS - (IROW1 - NROW1)
                     IT    = ISAM2 - (NSAM1 * NSAMS)
                  ELSE
                     ISAM2 = IROW1 - NROW1 + 1
                     IT3   = IT5 + ISAM2
                  ENDIF                  

                  DO ISAM1 = NSAM1,NSAM2
                     IF (IANG .EQ. 270) THEN
C                      IROW2  = ISAM1 - NSAM1 + 1
C                      IPT    = (IROW2 - 1) * NSAMS + ISAM2
C                      IPT    = (ISAM1 - NSAM1) * NSAMS + ISAM2
C                      IPT    = ISAM1 * NSAMS - NSAM1 * NSAMS + ISAM2
                       IPT    = ISAM1 * NSAMS + IT
                    ELSE
C                      IROW2  = NROWS - (ISAM1 - NSAM1)
C                      IPT    = (IROW2 - 1) * NSAMS + ISAM2
C                      IPT    = (NROWS - ISAM1 + NSAM1 - 1) * NSAMS + ISAM2
C                      IPT    = (NROWS + NSAM1 - ISAM1 - 1) * NSAMS + ISAM2
C                      IPT    = NROWS*NSAMS + NSAM1*NSAMS - ISAM1*NSAMS - NSAMS +
C                               ISAM2
C                      IT3    = NROWS*NSAMS + NSAM1*NSAMS - NSAMS + ISAM2
C                      IT5    = NSAMS * (NROWS + NSAM1 - 1)
C                      IT3    = IT5 + ISAM2
                       IPT    = IT3 - ISAM1 * NSAMS
                    ENDIF
                    BUF2(IPT) = BUF(ISAM1)
                  ENDDO
                ENDDO

C               OUTPUT THE REFORMED SLICE
                DO IROW2 = 1,NROWS
                  IPT    = (IROW2 - 1)   * NSAMS + 1
                  IREC2  = (ISLICE2 - 1) * NROWS + IROW2
                  CALL WRTLIN(LUNOUT,BUF2(IPT),NSAMS,IREC2)
                ENDDO
              ENDDO

           ELSEIF (IANG .EQ. 180) THEN
C             ROTATE 180 DEGREES AROUND Z AXIS ! -------------------- 

              IT7        = NSAMS + NSAM1
              DO ISLICE1 = NSLICE1,NSLICE2
                ISLICE2  = ISLICE1 - NSLICE1 + 1
                DO IROW1 = NROW1,NROW2
                  IREC1  = (ISLICE1 -1) * NROW + IROW1
                  IROW2  = NROWS - (IROW1 - NROW1)
                  IREC2  = (ISLICE2 -1) * NROWS + IROW2
                  CALL REDLIN(LUNIN,BUF,NSAM,IREC1)

C                 INVERT THE ROW
                  DO ISAM1 = NSAM1,NSAM2
C*                   ISAM2 = NSAMS - (ISAM1 - NSAM1)
C*                   ISAM2 = NSAMS - ISAM1 + NSAM1
C*                   IT7   = NSAMS + NSAM1
C*                   ISAM2 = IT7   - ISAM1
C*                   BUF2(ISAM2) = BUF(ISAM1)
                     BUF2(IT7 - ISAM1) = BUF(ISAM1)
                  ENDDO
                  CALL WRTLIN(LUNOUT,BUF2,NSAMS,IREC2)
                ENDDO
              ENDDO                    
           ENDIF 

        ELSEIF (AXIS .EQ. 'X') THEN  ! ---------------------------- X

           DO ISLICE1 = NSLICE1,NSLICE2
             DO IROW1 = NROW1,NROW2
               IREC1 = (ISLICE1-1) * NROW + IROW1
               CALL REDLIN(LUNIN,BUF,NSAM,IREC1)

               IF (IANG .EQ. 90) THEN
                 ISLICE2 = IROW1 - NROW1 + 1
                 IROW2   = NROWS - (ISLICE1 - NSLICE1)

               ELSEIF (IANG .EQ. 180) THEN
                 ISLICE2 = NSLICES - (ISLICE1 - NSLICE1)
                 IROW2   = NROWS   - (IROW1   - NROW1)

               ELSEIF (IANG .EQ. 270) THEN
                 ISLICE2 = NSLICES - (IROW1   - NROW1)
                 IROW2   = ISLICE1 - NSLICE1  + 1
               ENDIF

               IREC2 = (ISLICE2 - 1) * NROWS + IROW2
               CALL WRTLIN(LUNOUT,BUF(NSAM1),NSAMS,IREC2)

             ENDDO
           ENDDO

        ELSE IF (AXIS .EQ. 'Y') THEN ! ---------------------------- Y

           ALLOCATE(BUF2(NSAM*NSLICE), STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN
               CALL ERRT(46,'BUF2',NSAM)
               GOTO 9999
           ENDIF

           IF (IANG .EQ. 180) THEN  ! --------------------------- Y 180

            IT = NSAMS + NSAM1
            DO ISLICE1 = NSLICE1,NSLICE2
C             INVERT THE SLICES
              ISLICE2  = NSLICES - (ISLICE1 - NSLICE1)

              DO IROW1 = NROW1,NROW2
                IROW2  = IROW1 - NROW1 + 1
                IREC1  = (ISLICE1 - 1) * NROW + IROW1
                CALL REDLIN(LUNIN,BUF,NSAM,IREC1)

C               MIRROR THE COLUMS ALONG THE ROW
                DO ISAM1 = NSAM1,NSAM2
                   BUF2(IT - ISAM1) = BUF(ISAM1)
                ENDDO

                IREC2  = (ISLICE2 - 1) * NROWS + IROW2
                CALL WRTLIN(LUNOUT,BUF2(NSAM1),NSAMS,IREC2)
              ENDDO
            ENDDO

          ELSEIF (IANG .EQ. 90 .OR. IANG .EQ. 270) THEN ! 
          
C          ROTATE AROUND  Y AXIS, RELATIVELY SLOW!!  ------------ Y 90

           DO IROW1  = NROW1,NROW2
C            FIND CORRESPONDING CURRENT OUTPUT SLICE 
             IROW2   = IROW1 - NROW1 + 1

             DO ISLICE1 = NSLICE1,NSLICE2

C              READ ONE RECORD FROM SOURCE FILE
               IREC1    = (ISLICE1 - 1) * NROW + IROW1
               CALL REDLIN(LUNIN,BUF,NSAM,IREC1)

               IF (IANG .EQ. 270) THEN
                  ISAM2   = ISLICE1 - NSLICE1 + 1
               ELSE
                  ISAM2   = NSAMS   - (ISLICE1 - NSLICE1)
               ENDIF

               ISAMT    = ISAM2
               IP1      = - NSAMS + ISAMT
               IP2      = - NSAM1 + 1

               DO ISAM1 = NSAM1,NSAM2
C                CREATE NEW X-Z IMAGE PLANE
C                ISLICE2 = ISAM1 - NSAM1 + 1
C                ISLICE2 = ISAM1 + IP2
C                IROWT   = ISLICE2
                 IROWT   = ISAM1 + IP2

C                BUF2((IROWT-1) * NSAMS + ISAMT)      = BUF(ISAM1)
C                BUF2((IROWT * NSAMS - NSAMS + ISAMT) = BUF(ISAM1)
                 BUF2(IROWT * NSAMS + IP1)            = BUF(ISAM1)
               ENDDO
             ENDDO

C            WRITE OUT THE REFORMED X-Y PLANE
             IPT    = 1 

             DO ISLICE2 = 1,NSLICES
                IREC2 = (ISLICE2 - 1) * NROWS + IROW2
                CALL WRTLIN(LUNOUT,BUF2(IPT),NSAMS,IREC2)
                IPT   = IPT + NSAMS
             ENDDO
           ENDDO
          ENDIF
        ENDIF

9999    IF (ALLOCATED(BUF2)) DEALLOCATE (BUF2) 
               
	RETURN
	END

@


1.10
log
@GPL_2010
@
text
@d13 1
a13 1
C=* Email: spider@@wadsworth.org                                        *
@


1.9
log
@bad common buf2, no 9999 label
@
text
@d8 3
a10 2
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
@


1.8
log
@allocated buf2 , not in common any more
@
text
@a54 2
        COMMON           BUF2(1)

d249 1
a249 1
        IF (ALLOCATED(BUF2)) DEALLOCATE (BUF2) 
@


1.7
log
@GPL License fixed
@
text
@d6 1
d8 5
a12 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d14 1
a14 6
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d29 1
a29 1
C    REFORMLUNIN,LUNOUT,NSAM,NSAM1,NSAM2,NSAMS,
a41 1
C
a49 1

d57 2
a58 1
        CHARACTER   * 1  AXIS
d61 1
a61 1
C          ROTATE AROUND Z AXIS
d63 6
d121 1
a121 1
C             ROTATE 180 DEGREES AROUND Z AXIS  
d146 1
a146 1
        ELSEIF (AXIS .EQ. 'X') THEN
d172 7
a178 1
        ELSE IF (AXIS .EQ. 'Y') THEN
d180 1
a180 1
           IF (IANG .EQ. 180) THEN
d202 1
a202 1
          ELSEIF (IANG .EQ. 90 .OR. IANG .EQ. 270) THEN
d204 1
a204 1
C          ROTATE AROUND  Y AXIS, RELATIVELY SLOW!!
d250 3
a252 1
                 
@


1.6
log
@rot bug
@
text
@d7 23
a29 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.5
log
@a
@
text
@d2 1
a2 1
C++************************************************************************
d4 21
a24 1
C REFORM.FOR -- CREATED JAN 91
d26 2
a27 10
C **************************************************************************
C *  AUTHOR:  ArDean Leith                                                 *
C *  PART OF SPIDER - MODULAR IMAGE PROCESSING SYSTEM.                     *
C *  COPYRIGHT (C)1987 , WADSWORTH CENTER FOR LABORATORIES AND             *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH			           *
C **************************************************************************
a28 17
C    REFORM
C
C    PURPOSE:         REFORM AN IMAGE STAGE BY ROTATION OF 90, 180 OR 270 
C                     DEGREES AROUND  THE X,Y, OR Z AXIS.  CENTER OF ROTATION
C                     IS ALWAYS CENTER OF THE RELEVANT SLICE
C                     ROTATIONS ARE CLOCKWISE WHEN LOOKING ALONG AXES.  THE
C                     X AXIS + TO RIGHT,  Y AXIS + UP THE SCREEN, Z AXIS + OUT
C                     OF THE SCREEN!
C
C    VARIABLES:       
C                     MAXDIM     COMMON BUFFER SIZE
C
C    CALLED BY:       REFORM0
C
C    CALLS:           REDLIN       WRTLIN        ERRT      
C
C        0         2         3         4         5         6         7     
d32 1
d35 1
a35 1
     &           AXIS,IANG,MAXDIM,IRTFLG)
d39 1
d41 1
a41 1
 
d43 1
a43 1
        COMMON           BUF(16000),BUF2(1)
a46 32
C       MAX. NO. OF VOXELS IN OUTPUT I*1 BUFFER
        MAXVOX = MAXDIM - 16000

C       SET IMAGE SIZE AND WINDOW
        NSAM3   = NSAM2 - NSAM1 + 1
        NROW3   = NROW2 - NROW1 + 1
        NSLICE3 = NSLICE2 - NSLICE1 + 1

        IF (IANG .EQ. 0 .OR. IANG .EQ. 180) THEN
           NSAMS   = NSAM3
           NROWS   = NROW3
           NSLICES = NSLICE3
       
        ELSEIF (AXIS .EQ. 'Z') THEN
C           3-D FILE WITH Z SLICE
            NSAMS   = NROW3
            NROWS   = NSAM3
            NSLICES = NSLICE3

        ELSEIF (AXIS .EQ. 'Y') THEN
C           3-D FILE WITH Y SLICE 
            NSAMS   = NSLICE3
            NSLICES = NSAM3
            NROWS   = NROW3

        ELSEIF (AXIS .EQ. 'X') THEN
C           3-D FILE WITH X SLICE
            NROWS   = NSLICE3
            NSLICES = NROW3
            NSAMS   = NSAM3
        ENDIF

a49 2
           WRITE(NOUT,*) ' WARNING THIS IS A SLOW ROTATION'

a128 2
           WRITE(NOUT,*) ' WARNING THIS IS A SLOW ROTATION'

a168 2
C*                 ISAM2 = NSAMS - (ISAM1 - NSAM1)
C*                 ISAM2 = IT - ISAM1
d179 1
a179 1
C          ROTATE AROUND Y AXIS, RELATIVELY SLOW!!
a180 5
           WRITE(NOUT,*) ' WARNING THIS IS A SLOW ROTATION'

           IT4 = (NSLICES + NSAM1 - 1) * NSLICES 
           IT7 = - NSAM1 * NSLICES 

d182 1
d186 2
d191 2
a192 2
               IF (IANG .EQ. 90) THEN
                 ISAM2 = ISLICE1 - NSLICE1 + 1
d194 1
a194 1
                 ISAM2 = NSAMS   - (ISLICE1 - NSLICE1)
d197 16
a212 16
               IF (IANG .EQ. 90) THEN
C*               ISLICE2 = NSLICES - (ISAM1 - NSAM1)
C*               ISLICE2 = NSLICES + NSAM1 - ISAM1
C*               ISLICE2 = IT - ISAM1
C*               IPT = (ISLICE2 - 1) * NSLICES + ISAM2
C*               IPT = (NSLICES + NSAM1 - ISAM1 - 1) * NSLICES + ISAM2
C*               IPT = (NSLICES + NSAM1 - ISAM1 - 1) * NSLICES + ISAM2
C*               IPT = (NSLICES + NSAM1 - 1) * NSLICES - ISAM1 * NSLICES + ISAM2
C*               IT4 = (NSLICES + NSAM1 - 1) * NSLICES 
C*               IPT = IT4 - ISAM1 * NSLICES + ISAM2
                 IT5 = IT4 + ISAM2
C*               IPT = IT5 - ISAM1 * NSLICES

                 DO ISAM1 = NSAM1,NSAM2
                    BUF2(IT5 - ISAM1 * NSLICES) = BUF(ISAM1)
                 ENDDO
d214 2
a215 14
               ELSE
C*               ISLICE2 = ISAM1 - NSAM1 + 1
C*               IPT = (ISLICE2 - 1) * NSLICES + ISAM2
C*               IPT = (ISAM1 - NSAM1 + 1 - 1) * NSLICES + ISAM2
C*               IPT =  ISAM1 * NSLICES  - NSAM1 * NSLICES + ISAM2
C*               IT7 =                   - NSAM1 * NSLICES 
                 IT9 =  ISAM2 + IT7               
C*               IPT =  ISAM1 * NSLICES + IT9

                 DO ISAM1 = NSAM1,NSAM2
                   BUF2(ISAM1 * NSLICES + IT9) = BUF(ISAM1)
                 ENDDO
               ENDIF
             ENDDO
a216 3
C            WRITE OUT THE REFORMED SLICE
             IPT    = 1 - NSAMS
             IREC2  = IROW2 - NSLICES
d218 2
a219 3
C*              IREC2 = (ISLICE2 - 1) * NSLICES + IROW2
                IREC2 = IREC2 + NSLICES

a220 1
                CALL WRTLIN(LUNOUT,BUF2(IPT),NSAMS,IREC2)
a225 3
99      CLOSE(LUNIN)
        CLOSE(LUNOUT)

@


1.4
log
@CNO_SAVE
@
text
@d44 1
a44 1
CNO_SAVE 
@


1.3
log
@remove spout()
@
text
@d41 1
a41 1
#ifdef SP_UNIX
d43 2
a44 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
@


1.2
log
@cpp_lines_added
@
text
@d31 1
a31 1
C    CALLS:           REDLIN       WRTLIN        ERRT      SPOUT
d86 1
a86 1
           CALL SPOUT(0,' WARNING THIS IS A SLOW ROTATION',0)
d167 1
a167 1
           CALL SPOUT(0,' WARNING THIS IS A SLOW ROTATION',0)
d223 1
a223 1
           CALL SPOUT(0,' WARNING THIS IS A SLOW ROTATION',0)
@


1.1
log
@Initial revision
@
text
@d41 3
d45 1
@
