head	1.15;
access;
symbols
	pre_mrcs:1.15
	healthdept_2018:1.15
	pre_getangas:1.9
	GPL2010:1.9
	pre_GPL2010:1.8
	pre_var_equation:1.8
	pre_fftwrings:1.8
	pre_opfiles:1.8
	src:1.8
	best-code:1.8
	x-named-regs:1.8
	x:1.8
	v13-00:1.8
	pre_GPL:1.6
	prec_CA:1.6
	noindx:1.6
	Bproc:1.5
	oct21:1.4
	last77:1.4;
locks; strict;
comment	@c @;


1.15
date	2018.10.03.14.34.13;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2012.10.10.14.48.53;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2012.10.10.14.47.46;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.04.14.24.47;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2012.06.26.18.43.34;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2012.06.25.18.09.39;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.24.13.26.37;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.17.19.52.31;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.17.17.49.47;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.03.12.59.13;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.10.28.14.49.06;	author bimal;	state Exp;
branches;
next	1.4;

1.4
date	95.02.07.16.33.07;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	95.02.06.16.36.20;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.02.06.15.48.16;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.51.52;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.15
log
@email_health_dept
@
text
@C++*********************************************************************
C
C RAMP_P.F
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  RAMP_P(LUN1,LUN2,NX,NY,NOUT)
C
C23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
C--*********************************************************************

         SUBROUTINE  RAMP_P(LUN1,LUN2,NX,NY,NOUT)

         DIMENSION        X(NX)
         EXTERNAL         BETAI
         DOUBLE PRECISION BETAI
         DOUBLE PRECISION C,D,EPS,B1,B2,A,F,R2,DN1,DN2
         DOUBLE PRECISION Q(6),S(9),QYX1,QYX2,QX1X2
     &                       ,QX1,QX2,QY,SYX1,SYX2,SX1X2,SX1
     &                       ,SX2,SY,SX1Q,SX2Q,SYQ
         EQUIVALENCE (Q(1),QYX1),(Q(2),QYX2),(Q(3),QX1X2),(Q(4),QX1),
     &               (Q(5),QX2),(Q(6),QY)
         EQUIVALENCE (S(1),SYX1),(S(2),SYX2),(S(3),SX1X2),(S(4),SX1),
     &               (S(5),SX2),(S(6),SY),(S(7),SX1Q),
     &               (S(8),SX2Q),(S(9),SYQ)

         DATA  EPS/1.0D-5/

C        ZERO ARRAY S
         S   = 0
         N1  = NX / 2
         N2  = NY / 2
         SX1 = FLOAT(N1) * FLOAT(NX + 1)

         IF (MOD(NX,2) .EQ. 1)   SX1 = SX1 + 1 + N1
         SX2 = FLOAT(N2) * FLOAT(NY + 1)

         IF (MOD(NY,2) .EQ. 1)   SX2 = SX2 + 1 + N2
         SX1   = SX1 * NY
         SX2   = SX2 * NX
         SX1X2 = 0.0D0

         DO  J = 1, NY
           CALL REDLIN(LUN1,X,NX,J)

           DO I = 1, NX
             SYX1 = SYX1 + X(I) * I
             SYX2 = SYX2 + X(I) * J
             SY   = SY   + X(I)
             SX1Q = SX1Q + I * I
             SX2Q = SX2Q + J * J
             SYQ  = SYQ  + X(I) * DBLE(X(I))
           END DO
         END DO

         DN    = FLOAT(NX) * FLOAT(NY)
         QYX1  = SYX1 - SX1 * SY / DN
         QYX2  = SYX2 - SX2 * SY / DN
         QX1X2 = 0.0
         QX1   = SX1Q - SX1 * SX1 / DN
         QX2   = SX2Q - SX2 * SX2 / DN
         QY    = SYQ  - SY  * SY  / DN
         C     = QX1  * QX2 - QX1X2 * QX1X2

         IF (C .GT. EPS) THEN
           B1  = (QYX1 * QX2 - QYX2 * QX1X2) / C
           B2  = (QYX2 * QX1 - QYX1 * QX1X2) / C
           A   = (SY - B1 * SX1 - B2 * SX2)  / DN
           D   = B1 * QYX1 + B2 * QYX2
           R2  = D / QY
           DN1 = 2
           DN2 = DN - 3

           IF (DABS(QY - D) .LT. EPS / 100.0) THEN
              F = 0.0
              P = 0.0
           ELSE
              F = D * (DN - 3.0) / 2 /(QY - D)
              P = 2.0*BETAI(0.5D0 * DN2, 0.5D0 * DN1, DN2 / 
     &             (DN2 + DN1 * F)) 

              IF (P.GT.1.0)  P = 2.0 - P
C +
C     &    (1.0D0-BETAI(0.5D0 * DN1, 0.5D0 * DN2, DN1 / (DN1 + DN2 / F)))
           END IF

           WRITE(NOUT,2020)  A, B1, B2, DSQRT(R2), R2, F, DN2, P
2020       FORMAT(/,
     &     '  Ramp model:    Y = a + b1 * x1 + b2 * x2',/,
     &     '  a  = ',1PD12.5,/,
     &     '  b1 = ',1PD12.5,/,
     &     '  b2 = ',1PD12.5,/,
     &     '  Multiple correlation R = ',0PF10.8,/,
     &     '  R squared              = ',0PF10.8,/,
     &     '  F-statistics  F = ',1PD12.5,
     &     '  with n1=2 and n2=' ,0PF7.0,'  df',/,
     &     '  Significance  p = ',0PF10.8)

           D = A + B1 + B2

           DO I = 1, NY
             QY = D

             CALL REDLIN(LUN1,X,NX,I)

             DO  K = 1, NX
                X(K) = X(K) - QY
                QY   = QY + B1
             END DO

             CALL WRTLIN(LUN2,X,NX,I)

             D = D + B2
           END DO

         ELSE
           WRITE(NOUT,3030)
3030       FORMAT(/,' No solution - image is not modified !')

           DO I = 1,NY
              CALL REDLIN(LUN1,X,NX,I)
              CALL WRTLIN(LUN2,X,NX,I)
           END DO
         END IF

         END


C **********************************************************************
C
C  RAMP_PB(X,NX,NY,SAYSTATS,NOUT)
C
C--*********************************************************************

         SUBROUTINE RAMP_PB(X,NX,NY,SAYSTATS,NOUT)

         IMPLICIT NONE

         INTEGER          :: NX,NY,NOUT
         REAL             :: X(NX,NY)
         LOGICAL          :: SAYSTATS

         EXTERNAL         :: BETAI
         DOUBLE PRECISION :: BETAI
         INTEGER          :: N1,N2,J,I,K,IX,IY
         REAL             :: DN,P

         DOUBLE PRECISION :: C,D,B1,B2,A,F,R2,DN1,DN2
         DOUBLE PRECISION :: Q(6),S(9),QYX1,QYX2,QX1X2
     &                           ,QX1,QX2,QY,SYX1,SYX2,SX1X2,SX1
     &                           ,SX2,SY,SX1Q,SX2Q,SYQ

         EQUIVALENCE (Q(1),QYX1),(Q(2),QYX2),(Q(3),QX1X2),(Q(4),QX1),
     &               (Q(5),QX2),(Q(6),QY)
         EQUIVALENCE (S(1),SYX1),(S(2),SYX2),(S(3),SX1X2),(S(4),SX1),
     &               (S(5),SX2),(S(6),SY),(S(7),SX1Q),
     &               (S(8),SX2Q),(S(9),SYQ)

         DOUBLE PRECISION, PARAMETER  :: EPS = 1.0D-5

C        ZERO ARRAY S
         S   = 0

         N1  = NX / 2
         N2  = NY / 2

         SX1 = FLOAT(N1) * FLOAT(NX + 1)
         IF (MOD(NX,2) ==  1)   SX1 = SX1 + 1 + N1

         SX2 = FLOAT(N2) * FLOAT(NY + 1)
         IF (MOD(NY,2) ==  1)   SX2 = SX2 + 1 + N2

         SX1   = SX1 * NY
         SX2   = SX2 * NX
         SX1X2 = 0.0D0

         DO  J = 1, NY
           DO I = 1, NX
             SYX1 = SYX1 + X(I,J) * I
             SYX2 = SYX2 + X(I,J) * J
             SY   = SY   + X(I,J)
             SX1Q = SX1Q + I * I
             SX2Q = SX2Q + J * J
             SYQ  = SYQ  + X(I,J) * DBLE(X(I,J))
           ENDDO
         ENDDO

         DN    = FLOAT(NX) * FLOAT(NY)
         QYX1  = SYX1 - SX1 * SY / DN
         QYX2  = SYX2 - SX2 * SY / DN
         QX1X2 = 0.0
         QX1   = SX1Q - SX1 * SX1 / DN
         QX2   = SX2Q - SX2 * SX2 / DN
         QY    = SYQ  - SY  * SY  / DN
         C     = QX1  * QX2 - QX1X2 * QX1X2

         IF (C <= EPS) THEN
            WRITE(NOUT,*) ' No ramp solution - image not modified!'
            RETURN
         ENDIF
         
         B1  = (QYX1 * QX2 - QYX2 * QX1X2) / C
         B2  = (QYX2 * QX1 - QYX1 * QX1X2) / C
         A   = (SY - B1 * SX1 - B2 * SX2)  / DN
         D   = B1 * QYX1 + B2 * QYX2
         R2  = D / QY
         DN1 = 2
         DN2 = DN - 3

         IF (DABS(QY - D) < EPS / 100.0) THEN
            F = 0.0
            P = 0.0
         ELSE
            F = D * (DN - 3.0) / 2 /(QY - D)
            P = 2.0*BETAI(0.5D0 * DN2, 0.5D0 * DN1, DN2 / 
     &             (DN2 + DN1 * F)) 
            IF (P > 1.0)  P = 2.0 - P
         ENDIF

         IF (SAYSTATS) THEN
            WRITE(NOUT,2020)  A, B1, B2, DSQRT(R2), R2, F, DN2, P
2020        FORMAT(/,
     &     '  Ramp model:    Y = a + b1 * x1 + b2 * x2',/,
     &     '  a  = ',1PD12.5,/,
     &     '  b1 = ',1PD12.5,/,
     &     '  b2 = ',1PD12.5,/,
     &     '  Multiple correlation R = ',0PF10.8,/,
     &     '  R squared              = ',0PF10.8,/,
     &     '  F-statistics  F = ',1PD12.5,
     &     '  with n1=2 and n2=', 0PF7.0,'  df',/,
     &     '  Significance  p = ',0PF10.8)
         ENDIF

         D = A + B1 + B2

         DO IY = 1, NY
           QY = D

           DO IX = 1,NX
#ifdef NEVER
              if (ix == 1  .and. iy == 1  .or.
     &            ix == 1  .and. iy == ny .or.
     &            ix == nx .and. iy == 1  .or.
     &            ix == nx .and. iy == ny) then
                 write(6,*) 'x,y,val:',ix,iy,x(ix,iy), x(ix,iy)-qy
              endif
#endif
              X(IX,IY) = X(IX,IY) - QY
              QY     = QY + B1
           ENDDO

           D = D + B2
         ENDDO

         END



C **********************************************************************
C
C  RAMP_PB_MASK(X,XMASK,NX,NY,SAYSTATS,NOUT)
C
C--*********************************************************************

         SUBROUTINE RAMP_PB_MASK(X,XMASK,PLIST, 
     &                           NX,NY,SAYSTATS,NOUT)

         IMPLICIT NONE

         INTEGER          :: NX,NY
         REAL             :: X(NX,NY)
         LOGICAL          :: XMASK(NX,NY)
         REAL             :: PLIST(3,NX*NY)
         LOGICAL          :: SAYSTATS
         INTEGER          :: NOUT

         INTEGER          :: IX,IY,NPTS
         REAL             :: QY

         real             :: vnew

         DOUBLE PRECISION :: A, B, C

         NPTS = 0

         DO  IY = 1, NY
           DO IX = 1, NX
             IF (.NOT. XMASK(IX,IY)) THEN
C               USE THIS PIXEL TO FIND NORMALIZE RAMP
                NPTS          = NPTS + 1
                PLIST(1,NPTS) = IX
                PLIST(2,NPTS) = IY
                PLIST(3,NPTS) = X(IX,IY)
              ENDIF
           ENDDO
         ENDDO
      
         CALL LS_PLANE_FIT(PLIST, NPTS, A,B,C)                         

         IF (SAYSTATS) THEN
            WRITE(NOUT,2020) A, B, C
2020        FORMAT(/,
     &     '  Ramp model:   Z = a * x + b * y + c',/,
     &     '  a  = ',1PD12.5,
     &     '    b  = ',1PD12.5,
     &     '    c  = ',1PD12.5)
         ENDIF

         A = -A
         B = -B
         C = -C

C        APPLY RAMP TO ALL PIXELS
         DO IY = 1, NY

           QY  = IY * B

           DO IX = 1,NX

#ifdef NEVER
              if (ix == 1  .and. iy == 1  .or.
     &            ix == 1  .and. iy == ny .or.
     &            ix == nx .and. iy == 1  .or.
     &            ix == nx .and. iy == ny) then

                  vnew =  X(IX,IY) + IX * A + QY + C  
                  write(6,*) 'x,y,val:',ix,iy,x(ix,iy), vnew
              endif
#endif

              X(IX,IY) = X(IX,IY) + IX * A + QY + C

           ENDDO
         ENDDO

         END



C     LEAST-SQUARES-FIT OF PLANE TO ARBITRARY NUMBER OF (X,Y,Z) POINTS
C     PLANE : Z = AX + BY + C                              

      SUBROUTINE LS_PLANE_FIT(PLIST, NPTS, A, B, C)                         

      IMPLICIT NONE

      INTEGER, INTENT(IN) :: NPTS
      REAL                :: PLIST(3,NPTS)
      DOUBLE PRECISION    :: A, B, C 

      INTEGER             :: IPT
                                                                   
      DOUBLE PRECISION    :: D = 0                                                     
      DOUBLE PRECISION    :: E = 0                                                     
      DOUBLE PRECISION    :: F = 0                                                     
      DOUBLE PRECISION    :: G = 0                                                     
      DOUBLE PRECISION    :: H = 0                                                     
      DOUBLE PRECISION    :: I = 0                                                     
      DOUBLE PRECISION    :: J = 0                                                     
      DOUBLE PRECISION    :: K = 0                                                     
      DOUBLE PRECISION    :: L = 0                                                     

      DOUBLE PRECISION    :: DENOM                                                  

      DO  IPT = 1, NPTS

         D = D + PLIST(1,IPT) * PLIST(1,IPT)                       
         E = E + PLIST(1,IPT) * PLIST(2,IPT)                       
         F = F + PLIST(1,IPT)
                                  
         G = G + PLIST(2,IPT) * PLIST(2,IPT)                       
         H = H + PLIST(2,IPT)                                  
         I = I + 1 
                                           
         J = J + PLIST(1,IPT) * PLIST(3,IPT)                         
         K = K + PLIST(2,IPT) * PLIST(3,IPT)                         
         L = L + PLIST(3,IPT)                                    

      ENDDO

      DENOM   = F * F * G - 2 * E * F * H + 
     &          D * H * H + E * E * I - D * G * I

      ! X AXIS SLOPE
      A = (H * H * J - G * I * J + E * I * K + 
     &     F * G * L - H * (F * K  + E * L)) / DENOM 
                                                       
      ! Y AXIS SLOPE                                                       
      B = (E * I * J + F * F * K - D * I * K + 
     &     D * H * L - F * (H * J  + E * L)) / DENOM 
                                                       
      ! Z AXIS INTERCEPT
      C = (F * G * J - E * H * J - E * F * K + 
     &     D * H * K + E * E * L - D * G * L) / DENOM
 
      END






@


1.14
log
@removed unused C source code for ramped plane
@
text
@d11 1
a11 1
C=* Email: spider@@wadsworth.org                                        *
@


1.13
log
@LS_PLANE_FIT added, masking added
@
text
@a418 117
#ifdef NEVER
======================================================

C Least-squares-fit a plane to an arbitrary number of (x,y,z) points
C    PLane described as Ax + By + C  = z                              
C    where D = -1                                                     
C    Returns -1  if  A�+B�+C� <<1                               

      SUBROUTINE LS_PLANE_FIT(BUF,NPTS, PLANE_A, PLANE_B, PLANE_C)                         

      INTEGER, INTENT(IN) :: NPTS
      REAL                :: POINTS(3,NPTS)
      DOUBLE PRECISION    :: PLANE_A, PLANE_B, PLANE_C 

      INTEGER             :: IPT
                                                                   
      DOUBLE  PRECISION   :: D = 0                                                     
      DOUBLE  PRECISION   :: E = 0                                                     
      DOUBLE  PRECISION   :: F = 0                                                     
      DOUBLE  PRECISION   :: G = 0                                                     
      DOUBLE  PRECISION   :: H = 0                                                     
      DOUBLE  PRECISION   :: I = 0                                                     
      DOUBLE  PRECISION   :: J = 0                                                     
      DOUBLE  PRECISION   :: K = 0                                                     
      DOUBLE  PRECISION   :: L = 0                                                     

      DOUBLE  PRECISION   ::  DENOM                                                  

      DO  IPT = 1, NPTS

         D = D + BUF(1,IPT) * BUF(1,IPT)                       
         E = E + BUF(1,IPT) * BUF(2,IPT)                       
         F = F + BUF(1,IPT)
                                  
         G = G + BUF(2,IPT) * BUF(2,IPT)                       
         H = H + BUF(2,IPT)                                  
         I = I + 1 
                                           
         J = J + BUF(1,IPT) * BUF(3,IPT)                         
         K = K + BUF(2,IPT) * BUF(3,IPT)                         
         L = L + BUF(3,IPT)                                    

      ENDDO

      DENOM   = F * F * G - 2 * E * F * H + 
     &          D * H * H + E * E * I - D * G * I

      ! X AXIS SLOPE
      PLANE_A = (H * H * J - G * I * J + E * I * K + 
     &           F * G * L - H * (F * K  + E * L)) / DENOM                                                        
      ! Y AXIS SLOPE                                                       
      PLANE_B = (E * I * J + F * F * K - D * I * K + 
     &           D * H * L - F * (H * J  + E * L)) / DENOM 
                                                       
      ! Z AXIS INTERCEPT
      PLANE_C = (F * G * J - E * H * J - E * F * K + 
     &           D * H * K + E * E * L - D * G * L) / DENOM
 
      END



/* Least-squares-fit a plane to an arbitrary number of (x,y,z) points
    PLane described as Ax + By + C  = z                              
    where D = -1                                                     
    Returns -1  if  A�+B�+C� <<1                               
     */                                                              

void least_squares_plane_fit(const std::vector<fit_point> & IN_points,
                             double &plane_a,                         
                             double &plane_b,                         
                             double &plane_c)                         
{                                                                     
    double  D = 0;                                                    
    double  E = 0;                                                    
    double  F = 0;                                                    
    double  G = 0;                                                    
    double  H = 0;                                                    
    double  I = 0;                                                    
    double  J = 0;                                                    
    double  K = 0;                                                    
    double  L = 0;                                                    
    double  W2 = 0;                                                   
    double  denom = 0;                                                
    const fit_point * point;                                          

    int n = IN_points.size();

    for (int i = 0; i < n; i++)
    {                          
        point = &(IN_points[i]);//Can I copy just the address?
        W2 = point->w * point->w;                             
        D += BUF(1,IPT) * BUF(1,IPT) * W2 ;                       
        E += BUF(1,IPT) * BUF(2,IPT) * W2 ;                       
        F += BUF(1,IPT) * W2 ;                                  
        G += BUF(2,IPT) * BUF(2,IPT) * W2 ;                       
        H += BUF(2,IPT) * W2 ;                                  
        I += 1 * W2 ;                                         
        J += BUF(1,IPT) * BUF(3,IPT) * W2 ;                       
        K += BUF(2,IPT) * BUF(3,IPT) * W2 ;                       
        L += BUF(3,IPT) * W2 ;                                  
    }                                                         

    denom = F * F * G - 2 * E * F * H + D * H * H + E * E * I - D * G * I;

    // X axis slope
    plane_a = (H * H * J - G * I * J + E * I * K + F * G * L - H * (F * K 
+ E * L)) / denom;                                                        
    // Y axis slope                                                       
    plane_b = (E * I * J + F * F * K - D * I * K + D * H * L - F * (H * J 
+ E * L)) / denom;                                                        
    // Z axis intercept
    plane_c = (F * G * J - E * H * J - E * F * K + D * H * K + E * E * L -
 D * G * L) / denom;
}

#endif
@


1.12
log
@added ramp_bp_mask,  nsam --> nx
@
text
@d165 1
a165 1
         INTEGER          :: N1,N2,J,I,K
d256 1
a256 1
         DO I = 1, NY
d259 10
a268 2
           DO K = 1,NX
              X(K,I) = X(K,I) - QY
d285 2
a286 1
         SUBROUTINE RAMP_PB_MASK(X,XMASK,NX,NY,SAYSTATS,NOUT)
d293 1
d297 2
a298 2
         EXTERNAL         :: BETAI
         DOUBLE PRECISION :: BETAI
d300 19
a318 2
         INTEGER          :: N1,N2,J,I,K
         REAL             :: DN,P
d320 8
a327 4
         DOUBLE PRECISION :: C,D,B1,B2,A,F,R2,DN1,DN2
         DOUBLE PRECISION :: Q(6),S(9),QYX1,QYX2,QX1X2
     &                           ,QX1,QX2,QY,SYX1,SYX2,SX1X2,SX1
     &                           ,SX2,SY,SX1Q,SX2Q,SYQ
d329 3
a331 5
         EQUIVALENCE (Q(1),QYX1),(Q(2),QYX2),(Q(3),QX1X2),(Q(4),QX1),
     &               (Q(5),QX2),(Q(6),QY)
         EQUIVALENCE (S(1),SYX1),(S(2),SYX2),(S(3),SX1X2),(S(4),SX1),
     &               (S(5),SX2),(S(6),SY),(S(7),SX1Q),
     &               (S(8),SX2Q),(S(9),SYQ)
d333 2
a334 1
         DOUBLE PRECISION, PARAMETER :: EPS = 1.0D-5
d336 1
a336 2
C        ZERO ARRAY S
         S   = 0
d338 1
a338 2
         N1  = NX / 2
         N2  = NY / 2
d340 5
a344 2
         SX1 = FLOAT(N1) * FLOAT(NX + 1)
         IF (MOD(NX,2) ==  1) SX1 = SX1 + 1 + N1
d346 4
a349 2
         SX2 = FLOAT(N2) * FLOAT(NY + 1)
         IF (MOD(NY,2) ==  1) SX2 = SX2 + 1 + N2
d351 1
a351 4
         SX1   = SX1 * NY
         SX2   = SX2 * NX
         SX1X2 = 0.0D0
         DN    = 0.0
a352 12
         DO  J = 1, NY
           DO I = 1, NX
             IF (.NOT. XMASK(I,J)) THEN
C               USE THIS PIXEL TO FIND NORMALIZE RAMP
                DN = DN + 1
                SYX1 = SYX1 + X(I,J) * I
                SYX2 = SYX2 + X(I,J) * J
                SY   = SY   + X(I,J)
                SX1Q = SX1Q + I * I
                SX2Q = SX2Q + J * J
                SYQ  = SYQ  + X(I,J) * DBLE(X(I,J))
              ENDIF
d356 1
a356 7
         QYX1  = SYX1 - SX1 * SY / DN
         QYX2  = SYX2 - SX2 * SY / DN
         QX1X2 = 0.0
         QX1   = SX1Q - SX1 * SX1 / DN
         QX2   = SX2Q - SX2 * SX2 / DN
         QY    = SYQ  - SY  * SY  / DN
         C     = QX1  * QX2 - QX1X2 * QX1X2
a357 12
         IF (C <= EPS) THEN
            WRITE(NOUT,*) ' No ramp solution - image not modified!'
            RETURN
         ENDIF
         
         B1  = (QYX1 * QX2 - QYX2 * QX1X2) / C
         B2  = (QYX2 * QX1 - QYX1 * QX1X2) / C
         A   = (SY - B1 * SX1 - B2 * SX2)  / DN
         D   = B1 * QYX1 + B2 * QYX2
         R2  = D / QY
         DN1 = 2
         DN2 = DN - 3
a358 9
         IF (DABS(QY - D) < EPS / 100.0) THEN
            F = 0.0
            P = 0.0
         ELSE
            F = D * (DN - 3.0) / 2 /(QY - D)
            P = 2.0 * BETAI(0.5D0 * DN2, 0.5D0 * DN1, DN2 / 
     &             (DN2 + DN1 * F)) 
            IF (P > 1.0)  P = 2.0 - P
         ENDIF
d360 2
a361 13
         IF (SAYSTATS) THEN
            WRITE(NOUT,2020)  A, B1, B2, DSQRT(R2), R2, F, DN2, P
2020        FORMAT(/,
     &     '  Ramp model:    Y = a + b1 * x1 + b2 * x2',/,
     &     '  a  = ',1PD12.5,/,
     &     '  b1 = ',1PD12.5,/,
     &     '  b2 = ',1PD12.5,/,
     &     '  Multiple correlation R = ',0PF10.8,/,
     &     '  R squared              = ',0PF10.8,/,
     &     '  F-statistics  F = ',1PD12.5,
     &     '  with n1=2 and n2=', 0PF7.0,'  df',/,
     &     '  Significance  p = ',0PF10.8)
         ENDIF
d363 1
a363 1
         D = A + B1 + B2
d365 1
a365 7
C        APPLY RAMP TO ALL PIXELS
         DO I = 1, NY
           QY = D
           DO K = 1,NX
              X(K,I) = X(K,I) - QY
              QY     = QY + B1
           ENDDO
d367 167
a533 2
           D = D + B2
         ENDDO
d535 1
a535 1
         END
@


1.11
log
@*** empty log message ***
@
text
@d27 1
a27 1
C  RAMP_P(LUN1,LUN2,NSAM,NROW,NOUT)
d32 1
a32 1
         SUBROUTINE  RAMP_P(LUN1,LUN2,NSAM,NROW,NOUT)
d34 1
a34 1
         DIMENSION        X(NSAM)
d51 10
a60 8
         N1  = NSAM / 2
         N2  = NROW / 2
         SX1 = FLOAT(N1) * FLOAT(NSAM + 1)
         IF(MOD(NSAM,2) .EQ. 1)   SX1 = SX1 + 1 + N1
         SX2 = FLOAT(N2) * FLOAT(NROW + 1)
         IF(MOD(NROW,2) .EQ. 1)   SX2 = SX2 + 1 + N2
         SX1   = SX1 * NROW
         SX2   = SX2 * NSAM
d62 5
a66 3
         DO  J = 1, NROW
           CALL REDLIN(LUN1,X,NSAM,J)
           DO I = 1, NSAM
d75 2
a76 1
         DN    = FLOAT(NSAM) * FLOAT(NROW)
d84 1
d101 1
d109 9
a117 9
     &     '    Ramp model:    Y = a + b1 * x1 + b2 * x2',/,
     &     '    a  = ',1PD12.5,/,
     &     '    b1 = ',1PD12.5,/,
     &     '    b2 = ',1PD12.5,/,
     &     '    Multiple correlation R = ',0pf10.8,/,
     &     '    R squared              = ',0pf10.8,/,
     &     '    F-statistics  F = ',1PD12.5,
     &     '    with n1=2 and n2=',0PF7.0,'  df',/,
     &     '    Significance  p = ',0PF10.8)
d120 2
a121 1
           DO I = 1, NROW
d123 4
a126 2
             CALL REDLIN(LUN1,X,NSAM,I)
             DO  K = 1, NSAM
d130 3
a132 1
             CALL WRTLIN(LUN2,X,NSAM,I)
a134 1
C          CALL SETPRM(LUN2,NSAM,NROW,0.,0.,0.,'R')
d139 4
a142 3
           DO I = 1,NROW
              CALL REDLIN(LUN1,X,NSAM,I)
              CALL WRTLIN(LUN2,X,NSAM,I)
d151 1
a151 1
C  RAMP_PB(X,NX,NY,NOUT)
d186 1
d188 1
a189 1
         IF (MOD(NX,2) ==  1)   SX1 = SX1 + 1 + N1
a197 2
           !CALL REDLIN(LUN1,X,NX,J)

d243 9
a251 9
     &     '    Ramp model:    Y = a + b1 * x1 + b2 * x2',/,
     &     '    a  = ',1pd12.5,/,
     &     '    b1 = ',1pd12.5,/,
     &     '    b2 = ',1pd12.5,/,
     &     '    Multiple correlation R = ',0pf10.8,/,
     &     '    R squared              = ',0pf10.8,/,
     &     '    F-statistics  F = ',1pd12.5,
     &     '    with n1=2 and n2=', 0pf7.0,'  df',/,
     &     '    Significance  p = ',0pf10.8)
a257 1
           !CALL REDLIN(LUN1,X,NX,I)
a263 1
           !CALL WRTLIN(LUN2,X,NX,I)
d268 133
@


1.10
log
@added ramp_pb new buffer based routine
@
text
@a28 2
C IMAGE_PROCESSING_ROUTINE
C
d102 4
a105 4
     &     '    Ramp model:    Y = a +  b1 * x1  +  b2 * x2',/,
     &     '    a  = ',1pd12.5,/,
     &     '    b1 = ',1pd12.5,/,
     &     '    b2 = ',1pd12.5,/,
d108 3
a110 3
     &     '    F-statistics  F = ',1pd12.5,
     &     '    with n1=2 and n2=',0pf7.0,'  df',/,
     &     '    Significance  p = ',0pf10.8)
d232 1
a232 1
     &     '    Ramp model:    Y = a +  b1 * x1  +  b2 * x2',/,
@


1.9
log
@GPL_2010
@
text
@d135 125
@


1.8
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.7
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a5 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
a29 1
C **************************************************************************
a36 1
C--************************************************************************
@


1.6
log
@cosmetic
@
text
@d1 1
d6 1
d8 1
d10 24
d40 1
d48 1
@


1.5
log
@adapted for dynamical memory allocation
@
text
@d3 1
a3 1
C $$ RAMP_P.FOR
a4 1
C
d15 1
d18 1
d21 1
a21 3
C
C $$ RAMP_P.FOR
C
d24 2
a25 2
         DIMENSION  X(NSAM)
         EXTERNAL BETAI
d27 2
a28 2
         DOUBLE PRECISION    C,D,EPS,B1,B2,A,F,R2,DN1,DN2
         DOUBLE PRECISION    Q(6),S(9),QYX1,QYX2,QX1X2
d36 1
d38 5
a42 3
         S = 0
         N1 = NSAM / 2
         N2 = NROW / 2
d47 2
a48 2
         SX1 = SX1 * NROW
         SX2 = SX2 * NSAM
d55 1
a55 1
             SY = SY + X(I)
d58 1
a58 1
             SYQ = SYQ +X(I) * DBLE(X(I))
d61 3
a63 3
         DN = FLOAT(NSAM) * FLOAT(NROW)
         QYX1 = SYX1 - SX1 * SY / DN
         QYX2 = SYX2 - SX2 * SY / DN
d65 4
a68 4
         QX1 = SX1Q - SX1 * SX1 / DN
         QX2 = SX2Q - SX2 * SX2 / DN
         QY = SYQ - SY * SY / DN
         C = QX1 * QX2 - QX1X2 * QX1X2
d70 5
a74 5
           B1 = (QYX1 * QX2 - QYX2 * QX1X2) / C
           B2 = (QYX2 * QX1 - QYX1 * QX1X2) / C
           A = (SY - B1 * SX1 - B2 * SX2) / DN
           D = B1 * QYX1 + B2 * QYX2
           R2 = D / QY
d77 1
d79 2
a80 2
             F = 0.0
             P = 0.0
d82 4
a85 3
             F = D * (DN - 3.0) / 2 /(QY - D)
          P = 2.0*BETAI(0.5D0 * DN2, 0.5D0 * DN1, DN2 / (DN2 + DN1 * F)) 
          IF(P.GT.1.0)  P=2.0-P
d87 1
a87 1
C     &  (1.0D0-BETAI(0.5D0 * DN1, 0.5D0 * DN2, DN1 / (DN1 + DN2 / F)))
d89 1
d107 2
a108 2
               X(K) = X(K) - QY
               QY = QY + B1
d113 2
a114 1
C           CALL SETPRM(LUN2,NSAM,NROW,0.,0.,0.,'R')
d119 2
a120 2
             CALL REDLIN(LUN1,X,NSAM,I)
             CALL WRTLIN(LUN2,X,NSAM,I)
@


1.4
log
@clean up unused variables and hollerith warnings
@
text
@d17 2
a18 1
C
d23 1
a23 1
         SUBROUTINE  RAMP_P(LUN1,LUN2,X,NSAM,NROW,NOUT)
d38 1
a38 4
CNO_SAVE
         DO  I = 1, 9
           S(I)=0.0
         END DO
@


1.3
log
@f-test fixed.
@
text
@d27 1
a27 1
         DOUBLE PRECISION    C,D,EPS,B1,B2,A,F,R2,DFDF,DN1,DN2
@


1.2
log
@double precision fixed
@
text
@d25 1
d82 4
a85 4

C	USING FTEST ON PAGE 468 OF "NUMERICAL RECIPES" BOOK
             P = BETAI(0.5 * DN2, 0.5 * DN1, DN2 / (DN2 + DN1 * F)) +
     &       (1.0 - BETAI(0.5 * DN1, 0.5 * DN2, DN1 / (DN1 + DN2 / F)))
d110 1
a110 1
           CALL SETPRM(LUN2,NSAM,NROW,0.,0.,0.,'R')
a118 1

@


1.1
log
@Initial revision
@
text
@a4 1
C	REWRITEN BY MAHIEDDINE LADJADJ    7/9/93
d25 1
d36 1
a36 1

@
