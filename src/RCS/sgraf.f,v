head	1.47;
access;
symbols
	healthdept_2018:1.47
	pre_getangas:1.45
	GPL2010:1.45
	pre_GPL2010:1.44
	pre_var_equation:1.43
	pre_fftwrings:1.42
	pre_opfiles:1.42
	src:1.42
	best-code:1.42
	x-named-regs:1.42
	x:1.42
	v13-00:1.42
	pre_GPL:1.40
	prec_CA:1.30
	noindx:1.27
	Bproc:1.18
	oct21:1.13
	last77:1.6;
locks; strict;
comment	@c @;


1.47
date	2018.10.03.14.34.16;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2014.01.12.19.09.56;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2010.06.24.13.26.54;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2009.09.15.13.25.57;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2009.06.22.14.47.47;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2005.10.17.20.07.45;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2005.10.17.18.02.29;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	2004.05.07.16.02.52;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2004.03.11.14.06.57;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2004.02.02.20.05.34;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2004.01.23.17.17.25;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2004.01.20.20.10.43;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2004.01.09.19.51.13;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2004.01.08.16.14.45;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2004.01.05.18.02.23;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2003.12.10.20.07.18;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2003.10.16.16.43.45;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2003.08.26.17.29.52;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2003.07.15.15.10.56;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2003.07.07.17.58.11;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2002.03.11.14.17.53;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2002.03.11.14.07.57;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2001.09.17.18.55.05;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2001.09.14.19.49.59;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2001.08.03.17.47.03;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2001.04.11.18.56.10;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2000.12.19.19.58.57;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2000.12.19.19.17.25;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2000.10.30.16.58.53;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2000.04.17.15.25.58;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	99.12.03.16.02.52;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	99.12.02.17.42.04;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	99.11.30.13.56.18;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	99.11.29.19.25.00;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	99.08.27.17.01.21;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.08.19.18.20.28;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.08.19.18.00.18;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	99.08.19.16.44.24;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.08.19.16.27.42;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.08.13.15.06.58;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.08.13.14.39.41;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.03.08.19.56.00;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.02.05.14.10.10;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	98.10.07.14.11.36;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	95.01.11.17.04.45;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.10.58;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.45;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.47
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C  SGRAF      LONG FILE NAMES                    FEB   89 ARDEAN LEITH
C             SGRAF1 ROUTINE MOVED TO SGRAF1.FOR APRIL 89 ARDEAN LEITH
C             PUT SGRAF1, EPUR4, & CLASYMB BACK  AUG   99 ARDEAN LEITH
C             INCREASED IMAGE NUMBER TO 7 DIGITS AUG   99 ARDEAN LEITH
C             PUT EIGEN IN HERE                  AUG   99 ARDEAN LEITH
C             FIXED TXT FOR NT ERROR             NOV   99 ARDEAN LEITH
C             REMOVED TITLE                      NOV   00 ARDEAN LEITH
C             LUNDOCREDALL PARAMETERS CHANGED    DEC   00 ARDEAN LEITH
C             LKUPDC FIXED                       APR   01 ARDEAN LEITH
C             OPENDOC PARAMETERS                 JUL   03 ARDEAN LEITH
C             REWRITTEN                          OCT 2003 ARDEAN LEITH
C             SEIGEN OPTIONAL                    MAR 2004 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
c
C   SGRAF(LUNIP,LTMP,LUNE,LUND)
C
C   PURPOSE: CREATE CORRESPONDENCE ANALYSIS MAPS USING COORDINATE FILES
C
C   NOTES:
C
C      S -- SYMBOL PRINTED IS ONE CHARACTER LONG. ONE IS USED 
C           FOR EACH ACTIVE IMAGE, AND SECOND CHAR. FOR EACH INACTIVE
C           IMAGE
C
C      C -- SYMBOL PRINTED IS ONE CHARACTER LONG, AND IS LOOKED UP IN A
C           CLUSTER FILE
C
C      D -- SYMBOL PRINTED IS ONE CHARACTER LONG, AND IS
C           LOOKED UP IN A DOCUMENT FILE UNDER KEY=ID
C
C      I -- SYMBOL PRINTED IS UP TO 7 CHARACTERS LONG, AND REPRESENTS
C           THE ORIGINAL IMAGE ID
C
C **********************************************************************

	SUBROUTINE SGRAF(LUNIP,LTMP,LUNE,LUND)
	
	INCLUDE 'CMBLOCK.INC'
	INCLUDE 'CMLIMIT.INC'

	COMMON          BUF(1)
        REAL, ALLOCATABLE, DIMENSION(:)    :: COO,X,Y

	CHARACTER(LEN=MAXNAM)              :: FIL_EIG,FIL_INP,FILPRE
        CHARACTER(LEN=1)                   :: NULL,FOPT,LFLIP,ANS  
        CHARACTER(LEN=1)                   :: PTYPE,TSYMB

        NULL = CHAR(0)

        CALL RDPRMC(ANS,NCHAR,.TRUE.,
     &        '(I)MAGE OR (P)IXEL COORDINATES',NULL,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        CALL FILERD(FILPRE,NLET,NULL,
     &       'COORDINATE FILE PREFIX (WITHOUT TRAILING _)',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (ANS .EQ. 'P') THEN 
           FIL_INP = FILPRE(1:NLET) // '_PIX'//NULL
        ELSE
           FIL_INP = FILPRE(1:NLET) // '_IMC'//NULL
        ENDIF
        FIL_EIG = FILPRE(1:NLET) // '_EIG'//NULL

        CALL RDPRI1S(NHOR,NOT_USED,
     &              'NUMBER OF HORIZONTAL PATCHES',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

  	CALL RDPRIS(NFCT1,NFCT2,NOT_USED,
     &           'TWO FACTOR NUMBERS FOR MAP (e.g: 1,5)',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

C       OPEN IMAGE OR PIXEL COORDINATE FILE AS SEQUENTIAL FORMATED
        CALL OPAUXFILE(.FALSE.,FIL_INP,DATEXC,LUNIP,0,
     &                       'O',' ',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

82      CALL RDPRMC(FOPT,NCHAR,.TRUE.,
     &       '(S)YMBOL, (A)SSIGN SYMBOL, (C)LASS, (D)OC, (I)D',
     &       NULL,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 999

        TSYMB = ' '
        IF (INDEX('SACDI',FOPT) .EQ. 0) THEN
            CALL ERRT(101,'UNKNOWN OPTION',NDUM)
            GOTO 82

        ELSEIF (FOPT .EQ. 'S') THEN
           CALL RDPRMC(TSYMB,NCHAR,.TRUE.,
     &          '1 CHAR. SYMBOL FOR ACTIVE IMAGES/PIXELS',
     &          NULL,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 999
        ENDIF

        IF (FOPT .EQ. 'I') THEN
           WRITE(NOUT,*) 
     &  ' IF IMAGE NUMBERS EXCEED: 999 ONLY POSTSCRIPT OUTPUT AVAILABLE'
        ENDIF

        CALL RDPRMC(PTYPE,NCHAR,.TRUE.,
     &          'PREPARE POSTSCRIPT MAP? (Y/N)',NULL,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 999

        NPAGE = 1
        IF (PTYPE .NE. 'Y') THEN
          CALL RDPRI1S(NPAGE,NOT_USED,
     &               'NUMBER OF PAGES (1,2,3) OR <CR>=1',IRTFLG)
          IF (IRTFLG .NE. 0) GOTO 999
	  NPAGE = MAX(NPAGE,1)

C         NLINE = 0 WILL ACTIVATE DEFAULT SIZE LATER
          NLINE = 0
          CALL RDPRI1S(NLINE,NOT_USED,
     &               'NUMBER OF LINES OR <CR> FOR DEFAULT',IRTFLG)
          IF (IRTFLG .NE. 0) GOTO 999
        ENDIF
      
        PEX = 2.3    
        CALL RDPRM1S(PEX,NOT_USED,'NUMBER OF SD OR <CR>=2.3',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 999
        IF (PEX .LE. 0.0) THEN
           CALL ERRT(101,'SD MUST BE > 0.0',NDUM)
           GOTO 999
        ENDIF

        CALL RDPRMC(LFLIP,NCHAR,.TRUE.,
     &    '1=FLIP #1/ 2=FLIP #2/ 3=FLIP 1+2/ <CR>=NO FLIP',NULL,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 999

C       READ HEADER OF IMAGE/PIXEL COORDINATE FILE
        IF (ANS .EQ. 'P') THEN 
	   READ(LUNIP,*) NITEM,NFAC,NDUM1,NDUM2,NDUM3
        ELSE
	   READ(LUNIP,*) NITEM,NFAC,NDUM1,NDUM2,NDUM3,NDUM4
        ENDIF

	OPEN(LTMP,STATUS='SCRATCH',FORM='UNFORMATTED')

C       OPEN EIGENVECTOR FILE AS SEQUENTIAL FORMATED
        CALL OPAUXFILE(.FALSE.,FIL_EIG,DATEXC,LUNE,0,
     &                       'O',' ',.FALSE.,IRTFLG)
        IF (IRTFLG .EQ. 0) THEN
C          PRINT EIGENVALUES
           CALL SEIGEN(LUNE,NDAT)
        ENDIF
        CLOSE(LUNE)
                                                
C       PRINT OUT PATCH MATRIX IF REQUESTED
	IF (NHOR .NE. 0) THEN
           I1 = 1
           I2 = NHOR
	   WRITE(NDAT,9003)
9003	   FORMAT(/,' PATCH CODE LOOKUP',//)

84	   WRITE(NDAT,9002) ((I),I=I1,I2)
9002	   FORMAT(/,1X,20I4)
           IF (I2 .GE. NITEM) GOTO 85
           I1 = I1+NHOR
           I2 = I2+NHOR
           IF (I2 .GT. NITEM) I2 = NITEM
           GOTO 84
	ENDIF

85	NDIM = NITEM + 2
        ALLOCATE (COO(NFAC),X(NDIM),Y(NDIM),STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           MWANT = NFAC + NDIM + NDIM 
           CALL ERRT(46,'COO...',MWANT)
           GOTO 999
        ENDIF

	CALL SGRAF1(NDIM,NITEM,NFAC,NFCT1,NFCT2,LUNIP,LTMP,LUND,
     &              FOPT,LFLIP,TSYMB,PTYPE,NLINE,NPAGE,PEX,ANS,
     &              COO,X,Y)


999     CLOSE(LUNIP)
	CLOSE(LTMP)
        CLOSE(LUNE)

C       FREE UP ALLOCATIONS
        IF (ALLOCATED(COO))  DEALLOCATE(COO)
        IF (ALLOCATED(X))  DEALLOCATE(X)
        IF (ALLOCATED(Y))  DEALLOCATE(Y)

        RETURN
	END

C++****************************** SGRAF1 *********************************

        SUBROUTINE SGRAF1(NDIM,ITEM,NFAC,N1,N2,LUNIP,LTMP,LUND,
     &             FOPT,LFLIP,TSYMB,PTYPE,NLINE, NPAGE, PEX, ANS, 
     &             COO, X, Y)

	INCLUDE 'CMBLOCK.INC'
	INCLUDE 'CMLIMIT.INC'
        INCLUDE 'F90ALLOC.INC'

        INTEGER                           :: XFLIP,YFLIP
	INTEGER, DIMENSION(20)            :: ITO
        CHARACTER(LEN=1)             :: ANS,FOPT,PTYPE,NULL,TSYMB,LFLIP
        CHARACTER(LEN=20)                 :: CSYMB
        CHARACTER(LEN=7)                  :: CBUF
        CHARACTER(LEN=7), DIMENSION(NDIM) :: ID
	REAL                              :: COO(NFAC),X(NDIM),Y(NDIM)
	INTEGER                           :: ICLOOK(NDIM)
        REAL, DIMENSION(:,:), POINTER     :: FLOOK
	CHARACTER(LEN=MAXNAM)             :: DOCNAM

        NULL       = CHAR(0)

        CSYMB(1:1) = TSYMB

C	NO ROTATION OF COORDINATES AROUND ANY AXIS
        XFLIP = 1.0
        YFLIP = 1.0
        IF (LFLIP .EQ. '1') THEN
C	   ROTATE COORDINATES AROUND Y AXIS
           XFLIP = -1.0

        ELSEIF (LFLIP .EQ. '2') THEN
C	   ROTATE COORDINATES AROUND X AXIS
           YFLIP = -1.0

        ELSEIF (LFLIP .EQ. '3') THEN
C	   ROTATE COORDINATES AROUND BOTH AXIS
           XFLIP = -1.0
           YFLIP = -1.0
        ENDIF

	IF (FOPT .EQ. 'S') THEN
           MODE = 1

	ELSEIF (FOPT .EQ. 'C') THEN
           MODE = 1

	ELSEIF (FOPT .EQ. 'I') THEN
           MODE = 4

	ELSEIF (FOPT .EQ. 'D') THEN
C          GET 1 CHAR. SYMBOL FROM DOC FILE
           MODE = 1
           MAXX = 2
           MAXY = 0
           CALL GETDOCDAT('SYMBOL DOCUMENT',.TRUE.,DOCNAM,
     &                    LUND,.TRUE.,MAXX,MAXY,FLOOK,IRTFLG)

        ELSEIF (FOPT .EQ. 'A') THEN
           MODE = 1

C          GET ALL SYMBOLS (MAXIMUM 20)
           WRITE(NOUT,*) 'ENTER UP TO 20 SYMBOLS, ONE BY ONE'

           II    = 1
           CSYMB = '                    '
140        CALL RDPRMC(CSYMB(II:II),NCHAR,.FALSE.,
     &                 'SYMBOL',NULL,IRTFLG)
           IF (NCHAR .LE. 0) CSYMB(II:II) = ' '
           CALL RDPRMI(ITO(II),IDUM,NOT_USED,'USED UNTIL ID#')
           IF (ITO(II) .GT. 0) THEN
C             GOT A SYMBOL ASSIGNMENT
              II = II + 1
              IF (II .LE. 20) GOTO 140
           ENDIF
        ENDIF



C       ITEMA COUNTS THE NUMBER OF ACTIVE IMAGES. ONLY THESE ARE FLAGGED
C       WHEN THE CLUSTER LOOKUP OPTION IS USED
        ITEMA = 0

        II = 1
	DO I = 1, ITEM
          READ(LUNIP,90) (COO(K),K=1,NFAC),RWGT,DIO,FIIII,FACT
90        FORMAT(10(G12.5,1X))

          IIII = FIIII
          X(I) = COO(N1) * XFLIP
          Y(I) = COO(N2) * YFLIP

	  IF (FOPT .EQ. 'S') THEN
C           USE ONE CHAR. SYMBOL FROM CSYMB FOR ACTIVE/INACTIVE IMAGES
            ID(I) = CSYMB(1:1)

	  ELSEIF (FOPT .EQ. 'A') THEN
C           SYMBOL FOR PLOT IS LOOKED UP IN SYMBOL STRING
            IF (IIII .LE. ITO(II)) THEN
               ID(I) = CSYMB(II:II)
            ELSE
               II    = II + 1
               ID(I) = CSYMB(II:II)
            ENDIF

         ELSEIF (FOPT.EQ.'C') THEN
C           SYMBOL FOR PLOT IS LOOKED UP IN CLASS. FILE
	    ITEMA     = ITEMA + 1
	    ID(ITEMA) = CHAR(IIII)
	    X(ITEMA)  = COO(N1) * XFLIP
	    Y(ITEMA)  = COO(N2) * YFLIP

	  ELSEIF (FOPT.EQ.'I') THEN
C           SYMBOL FOR PLOT IS IMAGE NUMBER (6 DIGITS) & A INDICATOR

            IF (PTYPE .NE. 'Y' .AND. IIII .GT. 999) THEN
               WRITE(NOUT,*) 
     &            'IMAGE NUMBERS > 999 CAN NOT USE RESULTS FILE PLOT'
               CALL ERRT(100,'SGRF',NDUM)
               RETURN
            ENDIF

C           RIGHT JUSTIFIED NUMBER
            CBUF(1:7) = '       '
            CALL INTTOCHAR(IIII,CBUF(2:7),NLET,0)
            
	    IF (ANS .EQ. 'I') THEN
C              ANS  = I = IMAGE (NOT PIXEL COORDINATES)
               CBUF(1:1) = 'A'
               IF (FACT .GT. 0) CBUF(1:1) = 'I'
	    ENDIF
            ID(I) = CBUF
            IF (FACT .GT. 0)  ITEMA = ITEMA + 1

	  ELSEIF (FOPT.EQ.'D') THEN
C           GET 1 CHAR. SYMBOL FROM DOC FILE
            ID(I) = CHAR(INT(FLOOK(2,IIII))) // '      ' 
c           write(6,*) i ,' : ',iiii,':',FLOOK(2,IIII),' -->',id(i) 
	  ENDIF
 	ENDDO

	IF (FOPT.EQ.'I' .AND. ANS .EQ. 'I' .AND. ITEMA .EQ. ITEM) THEN
           DO I = 1,ITEM
              ID(I)(1:7) = ID(I)(2:7) // CHAR(0)
           ENDDO
        ENDIF


	IF (FOPT .EQ. 'C') THEN
C          CLASS SYMBOL LOOKUP REQUESTED
           CALL CLASYM(ITEMA,ICLOOK,ID)

C          ID CONTAINS OLD IMAGE ID WHEN CLASYM IS CALLED, AND UPON
C          RETURN FROM CLASYM, ID CONTAINS THE CLASS SYMBOL
           ITEM = ITEMA
	ENDIF	

	IF (PTYPE .EQ. 'Y') THEN
C          CONTINUOUS SCALE POSTSCRIPT PLOT. NO LINE PLOTTER OUTPUT
           CALL HISMAP4(NDIM,ITEM,X,Y,ID,MODE,PEX)

	ELSE
C          PRINTER LINE PLOT ONLY
           CALL HISMAP(NDIM,ITEM,N1,N2,X,Y,ID,
     &                 MODE,NLINE,NPAGE,PEX,NDAT,LTMP)
	ENDIF

9999    IF (ASSOCIATED(FLOOK)) DEALLOCATE(FLOOK)
	RETURN
 	END


C ************************** CLASYM **************************************

        SUBROUTINE CLASYM(NUMIM,IBUF,ID)

        INCLUDE 'CMBLOCK.INC' 
        INCLUDE 'CMLIMIT.INC' 

        CHARACTER(LEN=MAXNAM) ::  CLUSO
        COMMON /COMMUN/           CLUSO

        CHARACTER * 4  ID(1)
        CHARACTER*1    LC
        INTEGER        IBUF(1)

        NCLU = 15

C       IBUF -- TEMPORARY STORAGE OF CLASS NUMBERS
C       ID   -- INPUT: OLD ID
C               OUTPUT: NEW ID

C       OPEN FILE AS SEQUENTIAL UNFORMATTED
        CALL OPAUXFILE(.TRUE.,CLUSO,DATEXC,-NCLU,0,
     &                       'O','CLUSTER',.TRUE.,IRTFLG)

        REWIND NCLU

        READ(NCLU) ICARD, NFAC, NKLA, KFAC
        READ(NCLU) (IBUF(I), I = 1, ICARD)
        CLOSE(NCLU)

        IF (NUMIM .NE. ICARD) THEN
           WRITE(NOUT,101) NUMIM, ICARD
101        FORMAT(' *** CLUSTER FILE INCONSISTENT WITH IMAGE SET'/,
     &            '     EXPECTED ',I5,'  ENCOUNTERED ',I5)
           RETURN
        ENDIF
  
        DO I = 1, ICARD
           IC = IBUF(I)
           LC = '*'
           IF (IC .LT. 10) LC = CHAR(IC+48)
           IF (IC .GE. 10 .AND. IC .LT. 36) LC = CHAR(IC+64-9)
           ID(I) = LC
        ENDDO

        RETURN
        END


C ************************** SEIGEN **************************************
C
C   PURPOSE: CORRESPONDENCE ANALYSIS EIGEN VALUE OUTPUT
C
C   PARAMETERS:
C	 LUNE = EIGENVECTOR FILE, ASSUMED TO BE OPEN
C	 NDAT = RESULTS FILE  
C
C **********************************************************************

	SUBROUTINE SEIGEN(LUNE,NDAT)

	COMMON D(1)

	READ(LUNE,*) NFAC, SUMW, TRACE

	WRITE(NDAT,91) NFAC
 91	FORMAT('  NUMBER OF FACTORS: ',I8)

	WRITE(NDAT,92) SUMW, TRACE
 92	FORMAT('  TOTAL WEIGHT:', E12.5,/,
     &         '  TRACE: ',E12.5,/)

	WRITE(NDAT,*) ' EIGENVALUES:'
        DO I = 1,NFAC
	   READ(LUNE,*) D(I)
        ENDDO

	CUL = 0.
	DO I = 1, NFAC
           PER = 100.0 * D(I) / TRACE
           CUL = CUL + PER

           WRITE(NDAT,93) I, D(I), PER, CUL
 93        FORMAT(1X,I4,2X,E12.5,2X,E12.5,2X,E12.5)
        ENDDO

	RETURN
	END
@


1.46
log
@enter
@
text
@d23 1
a23 1
C=* Email: spider@@wadsworth.org                                        *
@


1.45
log
@GPL_2010
@
text
@d94 1
a94 1
     &           'ENTER TWO FACTOR NUMBERS FOR MAP (e.g: 1,5)',IRTFLG)
d114 1
a114 1
     &          'ENTER 1 CHAR. SYMBOL FOR ACTIVE IMAGES/PIXELS',
d281 1
a281 1
     &                 'ENTER SYMBOL',NULL,IRTFLG)
@


1.44
log
@*** empty log message ***
@
text
@d18 4
a21 3
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
C=* Copyright 1985-2009  Health Research Inc.,                         *
d32 1
a32 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a33 1
C=*                                                                    *
a35 1
C=*                                                                    *
@


1.43
log
@_IMC or _PIX Line length bug
@
text
@d18 5
a22 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d24 1
a24 6
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d29 1
a29 1
C=* This program is distributed in the hope that it will be useful,    *
d35 2
a36 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d67 1
a67 1
        REAL, ALLOCATABLE, DIMENSION(:)             :: COO,X,Y
d79 2
a80 1
        CALL FILERD(FILPRE,NLET,NULL,'COORDINATE FILE PREFIX~',IRTFLG)
@


1.42
log
@GPL License fixed
@
text
@d158 5
a162 1
	READ(LUNIP,*) NITEM,NFAC
@


1.41
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a17 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d21 1
a21 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a40 6

C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a62 1
C *************************************************************************
a442 1
C *************************************************************************
@


1.40
log
@symbol OK for pix
@
text
@d2 1
d20 24
d70 1
d451 1
@


1.39
log
@seigen optional
@
text
@d94 2
a95 4
        IF (FOPT .NE. 'A' .AND. FOPT .NE. 'I' .AND.
     &         FOPT .NE. 'S' .AND. FOPT .NE.'C' .AND. 
     &         FOPT .NE. 'D' ) THEN
            CALL ERRT(23,'SGRAF',NDUM)
d97 2
a98 1
        ELSEIF (FOPT .EQ. 'S' .AND. ANS .EQ. 'I') THEN
d100 1
a100 1
     &          'ENTER 1 CHAR. SYMBOL FOR ACTIVE IMAGES',
d107 1
a107 1
     &   'IF IMAGE NUMBERS EXCEED: 999 ONLY POSTSCRIPT OUTPUT AVAILABLE'
@


1.38
log
@IF (FACT .GT. 0) CBUF(1:1) = 'I'
@
text
@d15 1
d148 5
a152 5
     &                       'O',' ',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 999

C       PRINT EIGENVALUES
        CALL SEIGEN(LUNE,NDAT)
d154 1
a154 1
                                                 
@


1.37
log
@file formats
@
text
@d323 1
a323 1
C              ANS  = I = IMAGE (NOT PIXEL)
d325 1
d328 1
a328 1
            IF (FACT .GT. 0) ITEMA = ITEMA + 1
@


1.36
log
@1pg12.5 bad on READ!!!
@
text
@d281 1
a281 1
          READ(LUNIP,90) (COO(K),K=1,NFAC),RWGT,DIO,FIIII
d327 1
d335 7
@


1.35
log
@'O','CLUSTER',.TRUE.,IRTFLG no name prompt bug
@
text
@d282 1
a282 1
90        FORMAT(10(1PG12.5,1X))
@


1.34
log
@1x in format label 90
@
text
@d381 1
a381 1
     &                       'O',' ',.TRUE.,IRTFLG)
@


1.33
log
@format wrong for _pix file read
@
text
@d282 1
a282 1
90        FORMAT(10(1PG12.5,' '))
@


1.32
log
@file formats changed.
@
text
@d281 3
a283 1
          READ(LUNIP,*) (COO(K),K=1,NFAC),RWGT,DIO,FIIII
@


1.31
log
@CA & CL rewrite
@
text
@a144 2
C       LIST EIGENVECTORS

d150 1
a150 1
C       PRINT EIGENVECTORS
d179 2
a180 2
     &       FOPT,LFLIP,TSYMB,PTYPE,NLINE,NPAGE,PEX,ANS,
     &       COO,X,Y)
a280 1
C         READ(LUNIP) (COO(K),K=1,NFAC),RWGT,DIO,IIII
d429 4
a432 3
	WRITE(NDAT,*) ' EIGENVECTORS:'

	READ(LUNE,*) (D(I), I = 1, NFAC)
@


1.30
log
@bug in 'D' symbol assign if not consecutive
@
text
@d14 1
d25 1
a25 1
C   SGRAF(LUNS,LTMP,LUNE)
d46 1
a46 1
	SUBROUTINE SGRAF(LUNS,LTMP,LUNE)
a50 1

d52 1
d54 3
a56 3
	CHARACTER(LEN=MAXNAM),DIMENSION(3) :: CLUSTI(3)
	CHARACTER(LEN=MAXNAM)              :: FILPATI,FILPATP,FILPATE
        CHARACTER(LEN=1)             :: NULL,FOPT,LFLIP,ANS,PTYPE,TSYMB
d58 1
a58 1
        DATA LUN3/16/
d60 3
a62 1
        NULL    = CHAR(0)
d64 2
a65 3
	FILPATI = 'IMC***'//NULL
        FILPATP = 'PIX***'//NULL
        FILPATE = 'EIG***'//NULL
d67 6
a72 11
        CALL RDPRMC(ANS,NCHAR,.TRUE.,'(I)MAGE OR (P)IXEL',NULL,IRTFLG)

        NFILE = 1
	IF (ANS .EQ. 'P') NFILE = 2

	CALL RDPRMI(IMNO,NHOR,NOT_USED,
     &             'COORDINATE FILE CODE, NO. OF HOR. PATCHES')
        NLET = 6
        CALL FILGET(FILPATI,CLUSTI(1),NLET,IMNO,IRTFLG)
        CALL FILGET(FILPATP,CLUSTI(2),NLET,IMNO,IRTFLG)
        CALL FILGET(FILPATE,CLUSTI(3),NLET,IMNO,IRTFLG)
d74 7
a80 2
 	CALL RDPRMI(NFCT1,NFCT2,NOT_USED,
     &             'ENTER TWO FACTOR NUMBERS (E.G: 1,5)')
d82 2
a83 2
C       OPEN AS SEQUENTIAL UNFORMATED
        CALL OPAUXFILE(.FALSE.,CLUSTI(NFILE),DATEXC,-LUNS,0,
d85 1
a85 1
        IF (IRTFLG .NE. 0) GOTO 999
d111 1
a111 1
     &          'PREPARE POSTSCRIPT OUTPUT FOR MAP? (Y/N)',NULL,IRTFLG)
d140 2
a141 1
	READ(LUNS) NITEM,NFAC,NOC,NOR
d143 1
a143 18
C       CHECK FOR TRANSPOSE SWITCH
	IF (NOC .LT. 0) THEN
	   WRITE(NDAT,12)
12	   FORMAT(/,'    SOURCE DATA WERE IN TRANSPOSED FORM')

	   IF (NFILE .EQ. 1) THEN
              NFILP = 2
	   ELSEIF (NFILE .EQ. 2) THEN
              NFILP = 1
           END IF

C          THIS APPEARS BROKEN (LUNS IS ALREADY OPEN!!) AUG 99 al
C          ALSO LUNS IS ALREADY OPEN!! al

C          OPEN AS SEQUENTIAL UNFORMATED
           CALL OPAUXFILE(.FALSE.,CLUSTI(NFILE),DATEXC,-LUNS,0,
     &                        'O',' ',.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 999
d145 1
a145 5
	   READ(LUNS) NITEM,NFAC,NOC,NOR
	   NOC = -NOC
	ENDIF
                                                 
	OPEN(LTMP,STATUS='SCRATCH',FORM='UNFORMATTED')
d147 2
a148 6
	WRITE(NDAT,9001) IMNO
9001	FORMAT(/,' ** FILE CODE FOR IMC***, PIX***, EIG*** ',I3/)
	IF (FCHAR(6:6) .EQ. 'E') THEN
	   NFILE = 3
C          OPEN EIGENVECTOR FILE AS SEQUENTIAL UNFORMATED
           CALL OPAUXFILE(.FALSE.,CLUSTI(NFILE),DATEXC,-LUNE,0,
d150 5
a154 4
           IF (IRTFLG .NE. 0) GOTO 999
           CALL SEIGEN(LUNE,NDAT)
	   CLOSE(LUNE)
	ENDIF
d168 1
a168 1
           IF (I2 .GT. NITEM) I2=NITEM
d173 6
a178 5
	LC   = 1
	LX   = LC + NFAC  + 1
	LY   = LX + NDIM
	LD   = LY + NDIM 
	LK   = LD + NDIM * 2 + 4
d180 1
a180 1
	CALL SGRAF1(NDIM,NITEM,NFAC,NFCT1,NFCT2,LUNS,LTMP,
d182 1
a182 1
     &       BUF(LC),BUF(LX),BUF(LY))
d185 1
a185 1
999     CLOSE(LUNS)
d189 5
d199 1
a199 1
        SUBROUTINE SGRAF1(NDIM,ITEM,NFAC,N1,N2,LUNS,LTMP,
a217 2
        DATA LUN3/79/

d237 1
a237 1
        END IF
d254 1
a254 2
     &                    LUN3,.TRUE.,MAXX,MAXY,FLOOK,IRTFLG)
            write(6,*) 'maxx: ',maxx,'   maxy:',maxy
d273 1
a273 1
        END IF
d283 3
a285 1
          READ(LUNS) (COO(K),K=1,NFAC),RWGT,DIO,IIII,IMSTA
d291 1
a291 5
            IF (IMSTA .EQ. 0) THEN
                ID(I) = CSYMB(2:2)
            ELSE
                ID(I) = CSYMB(1:1)
            ENDIF
d302 1
a302 1
         ELSEIF (FOPT.EQ.'C' .AND. IMSTA.NE.0) THEN
d325 1
a325 2
               IF (IMSTA .EQ. 0) CBUF(1:1) = 'I'
               IF (IMSTA .EQ. 1) CBUF(1:1) = 'A'
d346 1
a346 1
C          CONTINUOUS SCALE POSTSCRIPT PLOT. NO LINE PLOTTER OUPUT
d365 1
d367 2
a368 1
        COMMON /COMMUN/ CLUS,CLUSO
a369 1
        CHARACTER *81  CLUS,CLUSO
a370 2
        INTEGER        ICARD,NFAC,NKLA,KFAC
        INTEGER        IBUF(1),INUM
d372 1
d408 1
d411 1
a411 1
C   PURPOSE: 	  CORRESPONDENCE ANALYSIS EIGEN VALUE OUTPUT
d413 3
a415 3
C   NOTES:
C	 LUNS = EIGENVECTOR FILE, ASSUMED TO BE OPEN
C	 NDAT = RESULTS FILE WHERE MAP IS TO BE PRINTED
d419 1
a419 1
	SUBROUTINE SEIGEN(LUNS,NDAT)
d423 1
a423 1
	READ(LUNS) NFAC, SUMW, TRACE
d425 2
a426 2
	WRITE(NDAT,6001) NFAC
 6001	FORMAT(1X,'   NUMBER OF FACTORS = ',I4)
d428 3
a430 2
	WRITE(NDAT,6002) SUMW, TRACE
 6002	FORMAT(1X,'   TOTAL WEIGHT =', E12.5,/,1X,'TRACE = ',E12.5)
d432 1
a432 1
	READ(LUNS) (D(I), I = 1, NFAC)
d434 2
d440 4
a443 3
           WRITE(NDAT,6003) I, D(I), PER, CUL
 6003      FORMAT(1X,I4,2X,E12.5,2X,E12.5,2X,E12.5)
        END DO
@


1.29
log
@opendoc parameters changed for incore use
@
text
@d48 1
a49 2
	CHARACTER *81   CLUSTI(3),CLUST,FILPATI,FILPATP,FILPATE
	COMMON /COMMUN/ CLUSTI,   CLUST,FILPATI,FILPATP,FILPATE
d53 5
a57 4
        INTEGER, ALLOCATABLE, DIMENSION(:)    ::       ILOOK
        CHARACTER(LEN=7), ALLOCATABLE, DIMENSION(:) :: ID
        CHARACTER(LEN=80) ::                           TXT
        CHARACTER(LEN=1) ::          NULL,FOPT,LFLIP,ANS,PTYPE,TSYMB
d142 2
a143 2
	  WRITE(NDAT,12)
12	  FORMAT(/,'    SOURCE DATA WERE IN TRANSPOSED FORM')
d145 13
a157 8
	  IF (NFILE .EQ. 1) THEN
             NFILP = 2
	  ELSEIF (NFILE .EQ. 2) THEN
             NFILP = 1
          END IF

C         THIS APPEARS BROKEN (LUNS IS ALREADY OPEN!!) AUG 99 al
C         ALSO LUNS IS ALREADY OPEN!! al
d159 2
a160 7
C         OPEN AS SEQUENTIAL UNFORMATED
          CALL OPAUXFILE(.FALSE.,CLUSTI(NFILE),DATEXC,-LUNS,0,
     &                       'O',' ',.TRUE.,IRTFLG)
          IF (IRTFLG .NE. 0) GOTO 999

	  READ(LUNS) NITEM,NFAC,NOC,NOR
	  NOC = -NOC
d179 12
a190 12
          I1 = 1
          I2 = NHOR
	  WRITE(NDAT,9003)
9003	  FORMAT(/,' PATCH CODE LOOKUP',//)

84	  WRITE(NDAT,9002) ((I),I=I1,I2)
9002	  FORMAT(/,1X,20I4)
          IF (I2 .GE. NITEM) GOTO 85
          I1 = I1+NHOR
          I2 = I2+NHOR
          IF (I2 .GT. NITEM) I2=NITEM
          GOTO 84
a199 6
        ALLOCATE (ILOOK(NDIM), ID(NDIM), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'SGRAF, ILOOK',IER)
           GOTO 9999
        ENDIF
                                                 
d202 1
a202 1
     &       BUF(LC),BUF(LX),BUF(LY),ID,ILOOK)
a203 2
9999    IF (ALLOCATED(ILOOK))    DEALLOCATE(ILOOK)
        IF (ALLOCATED(ID))       DEALLOCATE(ID)
a208 1

d216 5
a220 1
     &             COO, X, Y, ID, ILOOK)
d222 10
a231 1
        COMMON /UNITS/ LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
d233 1
a233 6
        INTEGER        XFLIP,YFLIP
	DIMENSION      COO(NFAC), X(NDIM), Y(NDIM), ILOOK(NDIM)
	INTEGER        ITO(20)
        CHARACTER *7   CBUF,ID(NDIM)
        CHARACTER      ANS,FOPT,PTYPE,NULL,TSYMB,LFLIP
        CHARACTER *20  CSYMB
d245 1
d249 1
d266 1
d268 5
a272 2
           CALL LKUPDC(ILOOK,NDIM,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
d283 1
a283 1
     &           'ENTER SYMBOL',NULL,IRTFLG)
d293 2
d297 1
a297 1
144     ITEMA = 0
d299 2
a300 2
        II=1
	DO  I = 1, ITEM
d302 2
a311 2
	    X(I)  = COO(N1 ) * XFLIP
	    Y(I)  = COO(N2)  * YFLIP
d318 1
a318 1
               II = II + 1
a320 2
	    X(I) = COO(N1)*XFLIP
	    Y(I) = COO(N2)*YFLIP
d322 1
a322 1
          ELSEIF (FOPT.EQ.'C' .AND. IMSTA.NE.0) THEN
d331 1
a331 2
	    X(I) = COO(N1) * XFLIP
	    Y(I) = COO(N2) * YFLIP
d352 2
a353 4
	    X(I)  = COO(N1) * XFLIP
	    Y(I)  = COO(N2) * YFLIP
            ID(I) = CHAR(ILOOK(IIII)) // '      ' 
CCC          write(6,*) i ,' : ',iiii,':',ILOOK(IIII),' = ',id(i)
d359 1
a359 1
           CALL CLASYM(ITEMA,ILOOK,ID)
d376 1
a379 48
C ************************** LKUPDC **************************************

        SUBROUTINE LKUPDC(IBUF,NDIM,IRTFLG)

C       OPEN AND READ SYMBOL DOCUMENT FILE INTO IBUF

	INCLUDE 'CMBLOCK.INC'
	INCLUDE 'CMLIMIT.INC'

        REAL, ALLOCATABLE, DIMENSION(:) :: DBUF
        DIMENSION                          IBUF(*)
        CHARACTER(LEN=MAXNAM)              DOCNAM
        LOGICAL ::                         NEWFILE


C          RECOVER DOC FILE IN DBUF AND STORE IN IBUF
           NDOCT = 16
           CALL OPENDOC(DOCNAM,.TRUE.,NLET,NDOCT,NDOC,.TRUE.,'DOCUMENT',
     &                  .TRUE.,.FALSE.,.FALSE.,NEWFILE,IRTFLG)
           IF (IRTFLG .NE. 0)  RETURN

C          MAXX HAS COL FOR KEY ALSO
           MAXX   = 2
           MAXY   = NDIM
           LENT   = MAXX * MAXY
           ALLOCATE(DBUF(LENT),STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN
              CALL ERRT(101,' UNABLE TO ALLOCATE: DBUF  IN: SGRAF',NDUM)
              GOTO 999
           ENDIF

C          RETRIEVE DBUF FROM DOC FILE
           CALL LUNDOCREDALL(NDOC,DBUF,MAXX,MAXY,.TRUE.,NGOT,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 999

C          DO NOT REORDER DBUF (CHANGED APR 01, AS WAS BUGGY)
           DO I = 1,MAXY
              ILOC    = I * MAXX
              IBUF(I) = DBUF(ILOC)
           ENDDO                 

           IRTFLG = 0

999        IF (NDOCT .GT. 0) CLOSE(NDOCT)
           IF (ALLOCATED(DBUF)) DEALLOCATE(DBUF)

        RETURN
        END
@


1.28
log
@incore lundoc
@
text
@d13 1
d393 2
a394 2
           NDOC = 16
           CALL OPENDOC(DOCNAM,.TRUE.,NLET,NDOC,.TRUE.,'DOCUMENT',
d420 1
a420 1
999        IF (NDOC .GT. 0) CLOSE(NDOC)
@


1.27
log
@nloop removed
@
text
@a389 1
        DATA NDOC/16/
d392 1
d419 1
a419 1
999        CLOSE(NDOC)
@


1.26
log
@nloop,iloop_removed
@
text
@a225 1
        COMMON /BATCH/ IBCNT,NLOOP,IABSLP,ILOOP
@


1.25
log
@NT compiler bug - can not handle > 3 continue lines for paramaters
@
text
@d69 1
a69 1
	CALL RDPRMI(IMNO,NHOR,NLOOP,ILOOP,
d76 1
a76 1
 	CALL RDPRMI(NFCT1,NFCT2,NLOOP,ILOOP,
d113 1
a113 1
          CALL RDPRI1S(NPAGE,NLOOP,ILOOP,
d120 1
a120 1
          CALL RDPRI1S(NLINE,NLOOP,ILOOP,
d126 1
a126 1
        CALL RDPRM1S(PEX,NLOOP,ILOOP,'NUMBER OF SD OR <CR>=2.3',IRTFLG)
d280 1
a280 1
           CALL RDPRMI(ITO(II),IDUM,NLOOP,ILOOP,'USED UNTIL ID#')
@


1.24
log
@allocated id
for NT bug
@
text
@d206 2
a207 3
     &              FOPT,LFLIP,TSYMB,PTYPE,
     &              NLINE,NPAGE,PEX,ANS,
     &              BUF(LC),BUF(LX),BUF(LY),ID,ILOOK)
d223 2
a224 3
     &                    FOPT,LFLIP,TSYMB,PTYPE,
     &                    NLINE, NPAGE, PEX, ANS, 
     &                    COO, X, Y, ID, ILOOK)
@


1.23
log
@trap added for bad imsta value
@
text
@d53 4
a56 2
        CHARACTER *80   TXT
        CHARACTER       NULL,FOPT,LFLIP,ANS,PTYPE,TSYMB
d198 6
d208 1
a208 1
     &              BUF(LC),BUF(LX),BUF(LY),BUF(LD),BUF(LK))
d210 3
d216 1
@


1.22
log
@lkupdc was broken have tried to fix it
@
text
@d288 5
a292 2
            IF (IMSTA .EQ. 0) ID(I) = CSYMB(2:2)
            IF (IMSTA .EQ. 1) ID(I) = CSYMB(1:1)
@


1.21
log
@typo in lundocredall line
@
text
@d4 1
a4 1
C  SGRAF      LONG FILE NAMES FEB 89 ARDEAN LEITH
d12 1
d16 1
a16 1
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
d246 1
a246 1
           MODE=1
d249 1
a249 1
           MODE=1
d252 1
a252 1
           MODE=4
d290 2
a291 2
	    X(I)  = COO(N1 )* XFLIP
	    Y(I)  = COO(N2) * YFLIP
d306 1
a306 1
	    ITEMA     = ITEMA+1
d308 2
a309 2
	    X(ITEMA)  = COO(N1)*XFLIP
	    Y(ITEMA)  = COO(N2)*YFLIP
d335 4
a338 5
	    X(I)  = COO(N1)*XFLIP
	    Y(I)  = COO(N2)*YFLIP
            IIII  = ILOOK(IIII)
            ID(I) = CHAR(IIII) // '      ' 
CCC            write(6,*) i ,' : ',iiii,' = ',id(i)
d370 3
d374 3
a376 2

        COMMON /UNITS/ LUNC,NIN,NOUT
a377 4
        DIMENSION     IBUF(*)
        CHARACTER *80 DOCNAM
        LOGICAL       NEWFILE

d385 1
d391 1
a391 2
              WRITE(NOUT,*)' UNABLE TO ALLOCATE DBUF  IN SGRAF'
              CALL ERRT(100,'SGRAF',NDUM)
d399 4
a402 5
C          REORDER DBUF TO USE REG 1 AS THE KEY IN IBUF
           DO I = 0,MAXY-1
              ILOC = I * MAXX + 1 
              ITEMP       = DBUF(ILOC)
              IBUF(ITEMP) = DBUF(ILOC + 1)
a403 1
           DEALLOCATE(DBUF)
d406 1
d408 1
d446 1
a446 1
     1            '     EXPECTED ',I3,'  ENCOUNTERED ',I3)
@


1.20
log
@lundocredall & opendoc parameters changed
@
text
@d396 1
a396 1
           CALL LUNDOCREDALL(NDOC,DBUF,MAXX,MAXY,.TRUE.NGOT,IRTFLG)
@


1.19
log
@pixel option did not print
@
text
@d11 1
d381 1
a381 1
           CALL OPENDOC(DOCNAM,.TRUE.,NLET,NDOC,.TRUE.,
d396 1
a396 1
           CALL LUNDOCREDALL(NDOC,DBUF,MAXX,MAXY,.TRUE.,IRTFLG)
@


1.18
log
@NPAGE NEEDIED INITIALIZATION
@
text
@d10 2
d23 1
a23 1
C   PURPOSE: 	  CORRESPONDENCE ANALYSIS MAPS USING COORDINATE FILES
a39 4
C    CALLED BY:  UTIL1
C
C    SGRAF1 ROUTINE MOVED TO SGRAF1.FOR APRIL 89 al
C
d130 1
a130 1
     &   '1=FLIP #1/ 2=FLIP #2/ 3=FLIP 1+2/ <CR>=NO FLIP',NULL,IRTFLG)
a132 3
C       TITLE IS ACTUALLY UNUSED NOV 99 al
	CALL RDPRMC(TXT,NCHAR,.TRUE.,'TITLE',NULL,IRTFLG)

d288 2
a289 2
	    X(I)  = COO(N1)*XFLIP
	    Y(I)  = COO(N2)*YFLIP
d311 2
a312 2
	    X(I) = COO(N1)*XFLIP
	    Y(I) = COO(N2)*YFLIP
d321 1
a321 1
            CBUF(2:7) = '      '
@


1.17
log
@continuations missing
@
text
@d109 1
@


1.16
log
@more changes to placate nt (i do not know why they work)
@
text
@d201 1
a201 1
                    NLINE,NPAGE,PEX,ANS,
d214 1
a214 1
                          FOPT,LFLIP,TSYMB,PTYPE,
@


1.15
log
@txt NT bug attempts to fix
@
text
@d54 1
a54 2
        CHARACTER       NULL,FOPT,LFLIP,ANS,PTYPE,SYMB
	INTEGER         YFLIP,XFLIP
d64 2
a65 8
	IF (ANS .EQ. 'I') THEN
            NFILE = 1
        ELSEIF (ANS .EQ. 'P') THEN
            NFILE = 2
        ELSE
c	    put  a default      < ML.
            NFILE = 1 
        ENDIF
d87 1
d93 3
a95 6
        ENDIF

        SYMB = ' '
	IF (FOPT .EQ. 'S' .AND. ANS .EQ. 'I') THEN
           CALL RDPRMC(SYMB,NCHAR,.TRUE.,
     &         'ENTER SYMBOLS FOR ACTIVE & INACTIVE IMAGES',
a97 1

d125 2
a126 2
        IF (PEX .LE. 0) THEN
           CALL ERRT(101,'SD MUST BE . 0.0',NDUM)
a133 21
        IF (LFLIP .EQ. '1') THEN
C	  ROTATE COORDINATES AROUND Y AXIS
          XFLIP = -1.
          YFLIP = 1.

        ELSEIF (LFLIP .EQ. '2') THEN
C	  ROTATE COORDINATES AROUND X AXIS
          XFLIP = 1.
          YFLIP = -1.

        ELSEIF (LFLIP .EQ. '3') THEN
C	  ROTATE COORDINATES AROUND BOTH AXIS
          XFLIP = -1.
          YFLIP = -1.

        ELSE
C	  NO ROTATION OF COORDINATES AROUND ANY AXIS
          XFLIP = 1.
          YFLIP = 1.
        END IF

d199 4
a202 4
	CALL SGRAF1(NDIM,NITEM,NFAC,NFCT1,NFCT2,LUNS,NDAT,LTMP,
     &              FOPT,NLINE,NPAGE,PEX,ANS,
     &              BUF(LC), BUF(LX), BUF(LY), BUF(LD),BUF(LK),
     &              XFLIP,YFLIP,SYMB,PTYPE)
d213 4
a216 3
        SUBROUTINE SGRAF1(NDIM,ITEM,NFAC,N1,N2,LUNS,LMAP,LTMP,FOPT,
     &    NLINE, NPAGE, PEX, ANS, COO, X, Y, ID, ILOOK, 
     &    XFLIP,YFLIP,TSYMB,PTYPE)
d219 1
a219 1
        COMMON /UNITS/ LUNC,NIN,NOUT
d225 1
a225 1
        CHARACTER      ANS,FOPT,PTYPE,NULL,TSYMB
d232 15
d361 1
a361 1
     &                 MODE,NLINE,NPAGE,PEX,LMAP,LTMP)
@


1.14
log
@txt variable changed for nt error
@
text
@d54 1
a54 2
        CHARACTER *1    SYMB
        CHARACTER       NULL,FOPT,LFLIP,ANS,PTYPE
d101 1
a253 1
        CHARACTER *(*) TSYMB
d255 1
a255 1
        CHARACTER      ANS,FOPT,PTYPE,NULL
d260 1
a260 1
        CSYMB(1:1) = TSYMB(1:1)
@


1.13
log
@undefined nout fixed
@
text
@d9 1
a9 1
C
d56 1
a56 1
	INTEGER         FLIP,YFLIP,XFLIP
d165 3
a167 2
	CALL RDPRMC(TXT(3:80),NCHAR,.TRUE.,'TITLE',NULL,IRTFLG)
	TXT(1:2) = '  '
a170 1
	IT = 1
d172 3
a174 1
	  TXT(1:1) = 'T'
d181 1
a181 1
C         THIS APPEARS BROKEN (NFILP IS UNUSED) AUG 99 al
a190 1
	  IT  = -1
d233 1
a233 1
     &              TXT,XFLIP,YFLIP,SYMB,PTYPE)
d245 1
a245 1
     &    NLINE, NPAGE, PEX, ANS, COO, X, Y, ID, ILOOK, TXT,
d254 1
a254 1
        CHARACTER *(*) TXT,TSYMB
a258 3
	IF (TXT(1:1) .EQ. 'T') WRITE(LMAP,12)
12	FORMAT(/,'    SOURCE DATA WERE IN TRANSPOSED FORM')

d506 4
a509 4
          PER = 100.0 * D(I) / TRACE
          CUL = CUL + PER
          WRITE(NDAT,6003) I, D(I), PER, CUL
 6003     FORMAT(1X,I4,2X,E12.5,2X,E12.5,2X,E12.5)
@


1.12
log
@changed symbol input default back to original
@
text
@d393 2
@


1.11
log
@put seigen.f inside here
@
text
@d259 1
a259 1
12	FORMAT(/,' ** SOURCE DATA WERE IN TRANSPOSED FORM')
d267 1
d285 1
a285 1
           II = 1
d288 8
a295 10
     &           'ENTER SYMBOL (OR <RET> FOR END)',NULL,IRTFLG)

           IF (NCHAR .GT. 0) THEN
               CALL RDPRMI(ITO(II),IDUM,NLOOP,ILOOP,'USED UNTIL ID#')
               IF (ITO(II) .GT. 0) THEN
C                 GOT A SYMBOL ASSIGNMENT
                  II = II + 1
                  IF (II .LE. 20) GOTO 140
               ENDIF
            ENDIF
@


1.10
log
@typo
@
text
@d8 1
d386 1
a386 1
C       -------------------- LKUPDC -------------------------
d433 1
a433 1
C       -------------------- CLASYM ---------------------------------
d480 35
@


1.9
log
@symbol input fixed
@
text
@d285 2
a286 2
142        CALL RDPRMC(CSYMB(II:II),NCHAR,.FALSE.,
     &           'ENTER ONE SYMBOL (<RET> IS END)',NULL,IRTFLG)
@


1.8
log
@debug output removed
@
text
@d281 4
a284 1
140        II = 1
d286 1
a286 3
     &           'SYMBOL (<RET>=END,MAX:20)',NULL,IRTFLG)

           CALL RDPRMI(ITO(II),IDUM,NLOOP,ILOOP,'UNTIL ID#')
d288 8
a295 13
           IF (ITO(II) .EQ. 0) THEN
C             GOT ALL THE SYMBOLS WANTED
              DO IK = II, 20
                CSYMB(IK:IK) = ' '
              END DO
              GOTO 144
           ENDIF
           II = II + 1
           IF (II .GT. 20) THEN
              WRITE(NOUT,*) ' ONLY 20 SYMBOLS ALLOWED, TRY AGAIN.'
              GOTO 140
           ENDIF
           GOTO 142
@


1.7
log
@updated for 7 char id
@
text
@d363 1
a363 1
            write(6,*) i ,' : ',iiii,' = ',id(i)
@


1.6
log
@uses postscript now for hismap4
@
text
@d1 1
d4 4
a7 1
C                                  LONG FILE NAMES FEB 89 al
d10 6
a15 6
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
d17 2
d20 1
a20 2
C	PROGRAM TO DISPLAY CORRESPONDENCE ANALYSIS MAPS USING THE
C	NEW COORDINATE FILES
d25 1
a25 1
C           FOR EACH ACTIVE IMAGE, AND ANOTHER ONE FOR EACH INACTIVE
d27 1
d31 2
a32 2
C      D -- SYMBOL PRINTED IS UP TO 4 CHARACTERS LONG, AND REPRESENTS
C           AN INTEGER LOOKED UP IN A DOCUMENT FILE UNDER KEY=ID
d34 1
a34 1
C      I -- SYMBOL PRINTED IS UP TO 4 CHARACTERS LONG, AND REPRESENTS
a38 2
C    CALLS :  SGRAF1  RDPRMC  RDPRMI FILGET FILCAN SEIGEN RDPRM
C
d43 1
a43 1
	SUBROUTINE SGRAF(LUNS,LTMP,UNUSED,LUNE)
d48 1
a48 1
	COMMON /COMMUN/ CLUSTI,CLUST,FILPATI,FILPATP,FILPATE
a51 1
        LOGICAL         UNUSED
a55 2
        CHARACTER * 4   CBUF(1)
	EQUIVALENCE     (CBUF,BUF)
d57 1
a57 1
        NULL = CHAR(0)
d82 18
a99 1
     &             'ENTER 2 FACTOR NUMBERS (e.g: 1,5)')
d101 5
a105 2
	CALL FILCAN(CLUST,NF,NULL,NULL,CLUSTI(NFILE),DATEXC,IER)
	OPEN(FILE=CLUST,UNIT=LUNS,STATUS='OLD',FORM='UNFORMATTED')
d107 6
a112 15
82        CALL RDPRMC(FOPT,NCHAR,.TRUE.,
     &         '(S)YMBOL, (A)SSIGN SYMBOL, (C)LASS, (D)OC, (I)D',
     &         NULL,IRTFLG)

	  IF (FOPT .EQ. 'S' .AND. ANS .EQ. 'I') THEN
81          IRTFLG = 0
            CALL RDPRMC(SYMB,NCHAR,.TRUE.,
     &         'ENTER 1 CHAR. SYMBOL FOR ACTIVE IMAGES',NULL,IRTFLG)
            IF (IRTFLG .GT. 0) GOTO 81

          ELSEIF(FOPT .NE.'A' .AND. FOPT .NE. 'I' .AND.
     &	         FOPT .NE.'C' .AND. FOPT .NE. 'D' ) THEN
             WRITE(NOUT,*) '*** INVALID INPUT,TRY AGAIN'
             GOTO 82
          ENDIF
d114 1
a114 1
          CALL RDPRMC(PTYPE,NCHAR,.TRUE.,
d116 1
d118 20
a137 10
          IF (PTYPE .NE. 'Y') THEN
            CALL RDPRMI(NPAGE,NDUM,NLOOP,ILOOP,
     &                 'NUMBER OF PAGES (1,2,3) OR <CR>=1')

            NLINE = 0
            CALL RDPRMI(NLINE,NDUM,NLOOP,ILOOP,
     &                 'NUMBER OF LINES OR <CR>')
          ENDIF
          
        CALL RDPRM(PEX,NLOOP,ILOOP,'NUMBER OF SD OR <CR>=2.3')
d141 1
d173 1
a173 1
            NFILP = 2
d175 1
a175 1
            NFILP = 1
d177 9
a185 2
	  CALL FILCAN(CLUST,NF,NULL,NULL,CLUSTI(NFILE),DATEXC,IER)
	  OPEN(FILE=CLUST,UNIT=LUNS,STATUS='OLD',FORM='UNFORMATTED')
d196 5
a200 4
	   NFILE=3
C          OPEN EIGENVECTOR FILE
	   CALL FILCAN(CLUST,NF,NULL,NULL,CLUSTI(NFILE),DATEXC,IER)
	   OPEN(FILE=CLUST,UNIT=LUNE,STATUS='OLD',FORM='UNFORMATTED')
d222 5
a226 5
	LC = 1
	LX = LC + NFAC  + 1
	LY = LX + NDIM
	LD = LY + NDIM
	LK = LD + NDIM + 4
d230 1
a230 1
     &              BUF(LC), BUF(LX), BUF(LY), CBUF(LD),BUF(LK),
d233 1
a233 1
	CLOSE(LUNS)
d235 1
d239 244
@


1.5
log
@CNO_SAVE
@
text
@d41 1
a41 1
CNO_SAVE 
d43 2
a44 2
C       I DO NOT KNOW IF SAVE IS NEEDED FEB 99 al
        SAVE
d46 1
a46 1
	INCLUDE   'CMBLOCK.INC'
a47 2
	COMMON /COMMUN/ CLUSTI,CLUST,FILPATI,FILPATP,FILPATE
	COMMON          BUF(1)
a48 1
	CHARACTER *81   CLUSTI(3),CLUST,FILPATI,FILPATP,FILPATE
d52 1
a52 5
	INTEGER         NDIM,NITEM,NFAC,NOC,NOR,NCHAR,IRTFLG,IMNO,NHOR,
     $                  NLET,NFCT1,NFCT2,NF,IER,LUNS,NPAGE,NDUM,NLINE,
     $                  FLIP,YFLIP,IT,NFILP,LC,LX,LY,LD,LK,LTMP,LUNE,
     $                  I1,I2,I,XFLIP
        REAL * 4        BUF,PEX
a65 1

a67 1

d97 1
a97 1
     &	     FOPT .NE.'C' .AND. FOPT .NE. 'D' ) THEN
d103 1
a103 2
     &           'PREPARE CONTOUR METAFILE FOR MAP? (Y/N/O)'
     &           ,NULL,IRTFLG)
d178 2
a179 1
9003	  FORMAT(/,' P A T C H   C O D E   L O O K U P',//)
d199 1
a199 1
     &              TXT,DATEXC,XFLIP,YFLIP,SYMB,PTYPE)
@


1.4
log
@IDUM was doublly defined (in CMBLOCK.INC also)
@
text
@d1 1
a2 1
C ************************************************************************
d5 9
d41 5
@


1.3
log
@changed questions
@
text
@d24 1
a24 1
C	CALLS :  SGRAF1  RDPRMC  RDPRMI FILGET FILCAN SEIGEN RDPRM
a31 1
#ifdef SP_UNIX
a32 3
#else
	INCLUDE   'COMMON1:CMBLOCK.INC'
#endif
d42 1
a42 1
     $                  NLET,NFCT1,NFCT2,NF,IER,LUNS,NPAGE,IDUM,NLINE,
d102 1
a102 1
            CALL RDPRMI(NPAGE,IDUM,NLOOP,ILOOP,
d106 1
a106 1
            CALL RDPRMI(NLINE,IDUM,NLOOP,ILOOP,
d116 1
a116 1
C	  rotate coordinates around y axis
d121 1
a121 1
c	  rotate coordinates around x axis
d126 1
a126 1
c	  rotate coordinates around both axis
d131 1
a131 1
c	  no rotation of coordinates around any axis
@


1.2
log
@cpp_lines_added
@
text
@d30 1
a30 1
	SUBROUTINE SGRAF(LUNS,LTMP,WINDO,LUNE)
d40 1
a40 1
        LOGICAL         WINDO
d53 1
a54 2

        NULL = CHAR(0)
d59 1
a59 1
        IF (WINDO) THEN
d61 1
a61 7
C         DESIRE INTERACTIVE LEXIDATA WINDOWING
          ANS = 'I'
          NFILE = 1
        ELSE
          CALL RDPRMC(ANS,NCHAR,.TRUE.,'(I)MAGE OR (P)IXEL',
     &                NULL,IRTFLG)
	  IF (ANS .EQ. 'I') THEN
d63 2
a64 1
	  ELSEIF (ANS .EQ. 'P') THEN
d66 2
a67 1
          ELSE
d70 1
a70 2
          END IF
        END IF
d81 1
d85 3
a87 1
        IF (WINDO) THEN
a88 9
C         DESIRE INTERACTIVE LEXIDATA WINDOWING
          PTYPE = 'W'  
  
C         MUST SET FOPT TO IMAGE OPTION
          FOPT = 'I'
        ELSE
82        CALL RDPRMC(FOPT,NCHAR,.TRUE.,
     &          '(S)YMBOL, (A)SSIGN SYMBOL, (C)LASS, (D)OC, (I)D',
     &          NULL,IRTFLG)
d94 7
a100 7
          ELSE
	    IF(FOPT .NE.'A' .AND. FOPT .NE. 'I' .AND.
     &	       FOPT .NE.'C' .AND. FOPT .NE. 'D' ) THEN
              WRITE(NOUT,*) '*** INVALID INPUT,TRY AGAIN'
              GOTO 82
            END IF
          END IF
d102 1
a102 1
     &           'MAP PLOT (Y/N) OR VAX PLOT FILE (T) WANTED? (Y/N/T)'
d104 2
a105 1
          IF (PTYPE .NE. 'T' .AND. PTYPE .NE. 'W') THEN
d108 1
d112 1
a112 2
          END IF
        END IF
d115 1
d117 2
a118 2
     &   '1=FLIP #1/ 2=FLIP #2/ 3=FLIP 1+2/ <CR>=NO FLIP',
     &              NULL,IRTFLG)
a119 1

d123 1
a124 1

d128 1
a129 1

d133 1
a134 1

d140 1
a140 2
	IF (PTYPE .NE. 'W') CALL RDPRMC(TXT(3:80),NCHAR,.TRUE.,
     &                          'TITLE',NULL,IRTFLG)
@


1.1
log
@Initial revision
@
text
@d32 3
d36 1
@
