head	1.52;
access;
symbols
	pre_mrcs:1.52
	healthdept_2018:1.52
	pre_getangas:1.45
	GPL2010:1.45
	pre_GPL2010:1.44
	pre_var_equation:1.44
	pre_fftwrings:1.44
	pre_opfiles:1.44
	src:1.44
	best-code:1.42
	x-named-regs:1.42
	x:1.42
	v13-00:1.42
	pre_GPL:1.40
	prec_CA:1.39
	noindx:1.37
	Bproc:1.31
	oct21:1.25
	last77:1.21;
locks; strict;
comment	@c @;


1.52
date	2018.10.03.14.33.54;	author leith;	state Exp;
branches;
next	1.51;

1.51
date	2017.06.01.15.36.06;	author leith;	state Exp;
branches;
next	1.50;

1.50
date	2014.01.12.19.42.04;	author leith;	state Exp;
branches;
next	1.49;

1.49
date	2013.10.09.14.41.11;	author leith;	state Exp;
branches;
next	1.48;

1.48
date	2012.03.20.16.16.51;	author leith;	state Exp;
branches;
next	1.47;

1.47
date	2012.03.14.16.12.36;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2012.03.14.14.43.15;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2010.06.24.13.25.00;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2007.01.08.14.35.25;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2007.01.08.14.29.05;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2005.10.17.20.26.43;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2005.10.17.18.18.26;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	2005.03.31.22.43.53;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2003.04.16.13.25.36;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2003.02.20.19.38.45;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2002.05.17.22.24.17;	author pawel;	state Exp;
branches;
next	1.36;

1.36
date	2002.05.10.20.05.23;	author pawel;	state Exp;
branches;
next	1.35;

1.35
date	2002.03.11.14.08.13;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2001.04.06.14.53.54;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2001.01.30.19.02.42;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2001.01.29.17.21.40;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2000.08.17.18.10.04;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2000.08.15.16.21.13;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2000.08.14.13.08.14;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2000.08.10.14.27.12;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2000.08.10.14.16.15;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2000.04.25.20.29.25;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	99.07.30.14.55.35;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	99.07.30.14.42.40;	author pawel;	state Exp;
branches;
next	1.23;

1.23
date	99.07.20.20.08.00;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	99.07.09.13.45.02;	author pawel;	state Exp;
branches;
next	1.21;

1.21
date	98.12.03.16.59.14;	author pawel;	state Exp;
branches;
next	1.20;

1.20
date	98.11.30.19.21.23;	author pawel;	state Exp;
branches;
next	1.19;

1.19
date	97.10.17.15.18.14;	author pawel;	state Exp;
branches;
next	1.18;

1.18
date	97.10.01.20.16.29;	author pawel;	state Exp;
branches;
next	1.17;

1.17
date	97.09.06.20.06.59;	author pawel;	state Exp;
branches;
next	1.16;

1.16
date	97.09.06.20.06.09;	author pawel;	state Exp;
branches;
next	1.15;

1.15
date	97.09.06.19.51.13;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	97.05.16.18.16.46;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	97.05.12.18.23.34;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	96.10.21.13.39.44;	author mladjadj;	state Exp;
branches;
next	1.11;

1.11
date	96.10.09.15.54.24;	author mladjadj;	state Exp;
branches;
next	1.10;

1.10
date	96.10.07.15.01.20;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	96.02.23.16.14.02;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	96.02.22.22.02.15;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	96.01.12.21.46.49;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	95.09.29.14.02.57;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	95.04.12.15.42.57;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.04.10.17.10.10;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.02.07.16.08.19;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.02.12;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.47.11;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.52
log
@email_health_dept
@
text
@C **********************************************************************
C
C ADDS.F                      USED FILELIST    JULY 1999  ArDean Leith
C                             USED F90 J       JULY 1999  ArDean Leith
C                             SQRT(NEG) TRAP   APR  2000  ArDean Leith
C                             ALLOC TRAP       APR  2003  ArDean Leith
C                             REDVOL           MAY  2017  ArDean Leith
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2017  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  PURPOSE:   CREATE AVERAGE AND VARIANCE FILES FROM A SET OF INPUT
C             IMAGES/VOLUMES OR EVEN/ODD SUBSETS FROM THE FILES 
C
C             OBSOLETE OPERATION 'AS' GIVES DIFFERING RESULTS ON
C             MODERN XEONS DUE TO SUMMATION OF VALUES NEAR ZERO
C             IN DIFFERING PRECISIONS.  al may 2017
C--*********************************************************************

      SUBROUTINE ADDS(LUNA,LUNIN,LUNV,NDOC,IDUM)

      IMPLICIT NONE

      INCLUDE 'CMBLOCK.INC'
      INCLUDE 'CMLIMIT.INC'

      INTEGER                :: LUNA,LUNIN,LUNV,NDOC,IDUM
      CHARACTER (LEN=MAXNAM) :: FILNAM,FILA,FILV,FILPAT

      DOUBLE PRECISION       :: VARAV, AV2, VV
      CHARACTER (LEN=1)      :: SER
      CHARACTER (LEN=1)      :: NULL   = CHAR(0)

      INTEGER                :: NILMAX,MAXIM,NLETP,NX,NY,NZ,NDUM,NUMT
      INTEGER                :: IMGNUM,IRTFLG,NVOX3,NUMC,LUP,NLETA
      INTEGER                :: ILUP,NLETV,NSEL_USED,NE,NUMPR,NOT_USED
      REAL                   :: OFFOLD,FDUM,AV1,OFF,FNUMT,VAV,SAV,SAVT
      INTEGER                :: NUMA,NMT,IFIL,I

      INTEGER,PARAMETER      :: LUNXM  = 0  ! SELFILE NOT ALLOWED
      LOGICAL,PARAMETER      :: FOUROK = .TRUE.

      REAL, ALLOCATABLE      :: AVGARAY(:),VARARAY(:),BUFIN(:)

#ifndef SP_32
      INTEGER *8             :: NVOX,IOK8
#else
      INTEGER *4             :: NVOX,IOK8
#endif
         
      NILMAX = NIMAX

C     OPEN INPUT IMAGE(S)
      MAXIM = 0
      CALL OPFILES(0,LUNIN,NDOC,LUNXM, 
     &             .TRUE.,FILPAT,NLETP, 'O',
     &             IFORM,NX,NY,NZ,MAXIM,
     &             'INPUT FILE TEMPLATE (E.G. PIC****)~',
     &             FOUROK,INUMBR,NILMAX, 
     &             NDUM,NUMT,IMGNUM, IRTFLG) 
      IF (IRTFLG .NE. 0) RETURN

      CLOSE(LUNIN)

      NVOX = NX * NY * NZ
C     COMPLAIN IF EXCESSIVE ALLOCATION
      NVOX3 = NVOX * 3
      CALL BIGALLOC(NVOX,IOK8,.FALSE.,.TRUE.,IRTFLG)

      ALLOCATE(AVGARAY(NVOX),
     &         VARARAY(NVOX),
     &         BUFIN(NVOX),STAT=IRTFLG)
      IF (IRTFLG .NE. 0) THEN
          CALL ERRT(46,'ADDS; AVGARAY..',NVOX3)
          GOTO 999
      ENDIF

      CALL  RDPRMC(SER,NUMC,.TRUE., 
     &             'ALL, or ODD-EVEN FILES (A/O)',NULL,IRTFLG)
      IF (IRTFLG .NE. 0) GOTO 999

      IF (SER.NE.'O' .AND. SER.NE.'E') THEN
         SER = 'A'
         LUP = 1
      ELSE
         LUP = 2
      ENDIF

      IF (VERBOSE) WRITE(NOUT,*) ' '
      DO ILUP=1,LUP
         IF (LUP == 2)  THEN
            IF (ILUP == 1)  THEN
               WRITE(NOUT,*) ' FOR ODD-NUMBERED IMAGES'
               SER = 'O'
               CALL FILERD(FILA,NLETA,NULL,
     &             'AVERAGE  FILE FOR ODD-NUMBERED  IMAGES~',IRTFLG)
               IF (IRTFLG .NE. 0)  GOTO 997
               CALL FILERD(FILV,NLETV,NULL,
     &             'VARIANCE FILE FOR ODD-NUMBERED  IMAGES~',IRTFLG)
               IF (IRTFLG .NE. 0)  GOTO 997
            ELSE
               WRITE(NOUT,*) ' FOR EVEN-NUMBERED IMAGES'
               SER = 'E'
               CALL FILERD(FILA,NLETA,NULL,
     &             'AVERAGE  FILE FOR EVEN-NUMBERED IMAGES~',IRTFLG)
               IF (IRTFLG .NE. 0)  GOTO 997
               CALL FILERD(FILV,NLETA,NULL,
     &             'VARIANCE FILE FOR EVEN-NUMBERED IMAGES~',IRTFLG)
               IF (IRTFLG .NE. 0)  GOTO 997
            ENDIF

         ELSEIF (FCHAR(4:5) .NE. 'AD') THEN
            CALL FILERD(FILA,NLETA,NULL,'AVERAGE ',IRTFLG)
            IF (IRTFLG .NE. 0)  GOTO 997
            CALL FILERD(FILV,NLETA,NULL,'VARIANCE',IRTFLG)
            IF (IRTFLG .NE. 0)  GOTO 997
         ENDIF

C        COMMAND  'AS AD'  MEANS THAT AVERAGE FILE ALREADY EXISTS
         IF (FCHAR(4:5) == 'AD')  THEN

C           FILES ALREADY EXIST,FIND OUT HOW MANY PICTURES ALREADY AVERAGED

5           CALL REG_GET_USED(NSEL_USED)
            IF (NSEL_USED <= 0)  THEN
               CALL ERRT(101,
     &                  'MISSING OFFSET VALUE IN INPUT REGISTER',NE)
               GOTO 997
            ENDIF

C           OPEN EXISTING AVERAGE FILE
            CALL OPFILEC(0,.TRUE.,FILA,LUNA,'Z',
     &                   IFORM,NX,NY,NZ,
     &                   MAXIM,'EXISTING AVERAGE',.TRUE.,IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 997

            NUMPR = 1
            CALL  RDPRI1S(NUMPR,NOT_USED,
     &             'NO. OF IMAGES ALREADY AVERAGED',IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 997

C           OPEN EXISTING VARIANCE FILE
            CALL OPFILEC(0,.TRUE.,FILV,LUNV,'Z',IFORM,NX,NY,NZ,
     &                   MAXIM,'EXISTING VARIANCE',.TRUE.,IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 997

C           INPUT EXISTING AVERAGE
            CALL REDVOL(LUNA,NX,NY, 1,NZ, AVGARAY,IRTFLG)

C           INPUT EXISTING VARIANCE
            CALL REDVOL(LUNV,NX,NY, 1,NZ, VARARAY,IRTFLG)

C           INITIALIZE BOTH AVERAGE AND VARIANCE ARRAYS
            VARARAY = VARARAY * (NUMPR-1) + AVGARAY * AVGARAY * NUMPR

            AVGARAY = AVGARAY * NUMPR

C           GET OLD OFFSET FROM REGISTER LINE
            CALL REG_GET_NSEL(1,OFFOLD,FDUM,FDUM,FDUM,FDUM,IRTFLG)
         ELSE

C           FILE DOES NOT EXIST - OPEN WITH DIMS OF FIRST FILE & INITIALIZE

C           OPEN NEW AVERAGE OUTPUT FILE
            MAXIM = 0
            CALL OPFILEC(0,.FALSE.,FILA,LUNA,'U',IFORM,NX,NY,NZ,
     &                      MAXIM,' ',.TRUE.,IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 997

C           OPEN NEW VARIANCE OUTPUT FILE
            MAXIM = 0
            CALL OPFILEC(0,.FALSE.,FILV,LUNV,'U',IFORM,NX,NY,NZ,
     &                   MAXIM,' ',.TRUE.,IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 997

C           CLEAR BOTH AVERAGE AND VARIANCE ARRAYS
            AVGARAY = 0.0
            VARARAY = 0.0

            NUMPR   = 0   ! NUMBER OF PREVIOUS PICTURES IS 0
         ENDIF

C        CHANGED TO ALLOW GAPS IN FILE SERIES 7/21/89 MR.
         AV1  = 0.0
         AV2  = 0.0
         NUMA = 0
         NMT  = 0

         DO IFIL=1,NUMT

            CALL FILGET(FILPAT,FILNAM,NLETP,INUMBR(IFIL),IRTFLG)
            IF (IRTFLG .NE. 0) THEN
               CALL ERRT(3,'ADDS',NE)
               GOTO 997
            ENDIF
           
            CALL OPFILEC(0,.FALSE.,FILNAM,LUNIN,'Z',IFORM,
     &                   NX,NY,NZ,
     &                   MAXIM,' ',.TRUE.,IRTFLG)
            IF (IRTFLG .NE. 0) THEN
C              TO ALLOW GAPS IN FILE SERIES 7/21/89 MR.:
               WRITE(NOUT,100) FILNAM(1:NLETP)
100            FORMAT(' FILE: ',A,' NOT FOUND, FILE SKIPPED')
               CYCLE
            ENDIF
            MAXIM = 0

            NMT = NMT + 1
            IF ( SER == 'O' .AND. MOD(NMT,2) == 0 )  GOTO  707
            IF ( SER == 'E' .AND. MOD(NMT,2) == 1 )  GOTO  707

            NUMA = NUMA + 1
 
            CALL  REDVOL(LUNIN,NX,NY,1,NZ,BUFIN,IRTFLG)

	    AV2 = SUM(BUFIN) / NVOX

            IF (FCHAR(4:4) .NE. 'R')  THEN
	       BUFIN = BUFIN - AV2
	    ENDIF

            AVGARAY = AVGARAY + BUFIN
            VARARAY = VARARAY + BUFIN * BUFIN
            AV1     = AV1 + AV2   ! OVERALL SUM (FOR AVERAGE)

707         CLOSE(LUNIN)
         ENDDO

C        NOW COMPUTE NORMALIZED AVERAGE AND VARIANCE IMAGE

         FNUMT   = NUMA + NUMPR
         AVGARAY = AVGARAY / FNUMT  ! DIVIDE BY # OF IMAGES

         VV      = DOT_PRODUCT(AVGARAY,AVGARAY)
         VV      = VV / REAL(NVOX)

         VARARAY = (VARARAY - AVGARAY*AVGARAY*FNUMT) /(FNUMT-1.0)
         VARAV   = SUM(VARARAY)
         VAV     = VARAV /FLOAT(NVOX)

         OFF     = AV1 / FLOAT(NUMA)

         CALL WRTVOL(LUNA,NX,NY, 1,NZ, AVGARAY,IRTFLG)
         
         CALL WRTVOL(LUNV,NX,NY, 1,NZ, VARARAY,IRTFLG)

         IF (VARAV < 0.0) THEN
            WRITE(NOUT,*)   ' WARNING: NEGATIVE TOTAL VARIANCE: ',VARAV,
     &                      '  SD SET TO ZERO!!!'
            IF (NOUT .NE. NDAT)
     &        WRITE(NDAT,*) ' WARNING: NEGATIVE TOTAL VARIANCE: ',VARAV,
     &                      '  SD SET TO ZERO!!!'
            SAVT = 0.0
         ELSE
            SAVT = SQRT(VARAV)
         ENDIF

         IF (VAV < 0.0) THEN
            WRITE(NOUT,*)   ' WARNING: NEGATIVE  VARIANCE P.P. : ',VAV,
     &                      '  SD SET TO ZERO!!!'
            IF (NOUT .NE. NDAT)
     &        WRITE(NDAT,*) ' WARNING: NEGATIVE TOTAL VARIANCE: ',VAV,
     &                      '  SD SET TO ZERO!!!'
            SAV = 0.0
         ELSE
            SAV  = SQRT(VAV)
         ENDIF

         CALL REG_GET_USED(NSEL_USED)
         IF (NUMPR .NE. 0 .AND. NSEL_USED .NE. 0) THEN
C           TRAP FOR NaN
            IF (OFFOLD .NE. 0.0)
     &         OFF = (OFFOLD*FLOAT(NUMPR)+AV1)/FLOAT(NUMA+NUMPR)
         ENDIF

         CALL REG_SET_NSEL(1,1, OFF,0.0, 0.0, 0.0, 0.0,IRTFLG)

         IF (NOUT .NE. NDAT)
     &      WRITE(NDAT,7001) NUMA+NUMPR,NVOX,VARAV,SAVT,
     &                       VAV,SAV,OFF,VV

         WRITE(NOUT,7001) NUMA+NUMPR, NVOX, OFF,VARAV,SAVT,
     &                    VAV,SAV,OFF,VV
7001     FORMAT(/,'  VARIANCE COMPUTATION FOR:',I7,' IMAGES ',
     &          '    CONTAINING: ',I0,' ELEMENTS',/,
     &      '   AVERAGE:        ',1PG12.5,/,
     &      '   TOTAL VARIANCE: ',1PG12.5,'  TOTAL S.D.: ',1PG12.5,/,
     &      '   P.P.  VARIANCE: ',1PG12.5,'  P.P.  S.D.: ',1PG12.5,/,
     &      '   AVERAGE OFFSET: ',1PG12.5,/,
     &      '   VARIANCE OF AVERAGE IMAGE: ',1PG12.5,/)

	ENDDO

997     CLOSE(LUNV)
        CLOSE(LUNA)
        CLOSE(LUNIN)

999     IF (ALLOCATED(BUFIN))   DEALLOCATE(BUFIN)
        IF (ALLOCATED(VARARAY)) DEALLOCATE(VARARAY)
        IF (ALLOCATED(AVGARAY)) DEALLOCATE(AVGARAY)

        END
@


1.51
log
@redvol, precison difference note
@
text
@d14 1
a14 1
C=* Email: spider@@wadsworth.org                                        *
@


1.50
log
@enter
@
text
@d3 5
a7 5
C ADDS.F                             USED FILELIST JULY 99 ARDEAN LEITH
C                                    USED F90 JULY 99 ARDEAN LEITH
C                                    SQRT(NEG) TRAP APR 00 ARDEAN LEITH
C                                    ALLOC TRAP     APR 03 ARDEAN LEITH
C
d12 1
a12 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d33 3
d40 1
d45 1
d51 7
d232 1
a232 4
            DO I=1,NY*NZ
               CALL  REDLIN(LUNIN,BUFIN((I-1)*NX+1),NX,I)
               CONTINUE
            ENDDO
d235 1
d237 1
a237 1
	        BUFIN = BUFIN - AV2
d262 1
a262 1

@


1.49
log
@elements i0
@
text
@d145 1
a145 1
     &             'ENTER NO. OF IMAGES ALREADY AVERAGED',IRTFLG)
@


1.48
log
@added average to 'as r' output
@
text
@d293 6
a298 6
     &          '    CONTAINING:',I7,' ELEMENTS',/,
     &      '     AVERAGE:        ',1PG12.5,/,
     &      '     TOTAL VARIANCE: ',1PG12.5,'  TOTAL S.D.: ',1PG12.5,/,
     &      '     P.P.  VARIANCE: ',1PG12.5,'  P.P.  S.D.: ',1PG12.5,/,
     &      '     AVERAGE OFFSET: ',1PG12.5,/,
     &      '     VARIANCE OF AVERAGE IMAGE: ',1PG12.5,/)
@


1.47
log
@*** empty log message ***
@
text
@d290 1
a290 1
         WRITE(NOUT,7001) NUMA+NUMPR, NVOX,VARAV,SAVT,
d294 1
d305 1
@


1.46
log
@rewrite
@
text
@d43 5
a47 4
      DOUBLE PRECISION       :: VARAV,AV2,VV
      CHARACTER (LEN=1)      :: NULL, SER
      INTEGER,PARAMETER      :: LUNXM   = 0  ! SELFILE NOT ALLOWED
      LOGICAL,PARAMETER      :: FOUROK      = .TRUE.
d52 1
a52 1
      INTEGER *8       NVOX,IOK8
d54 1
a54 1
      INTEGER *4       NVOX,IOK8
a55 2

      NULL = CHAR(0)
d85 1
a85 1
     &             'ALL, or ODD-EVEN FILES(A/O)',NULL,IRTFLG)
d95 1
d99 1
a99 1
               WRITE(NOUT,*) 'FOR ODD-NUMBERED IMAGES'
d102 1
a102 1
     &             'AVERAGE FILE FOR ODD-NUMBERED~IMAGES',IRTFLG)
d105 1
a105 1
     &             'VARIANCE FILE FOR ODD-NUMBERED~IMAGES',IRTFLG)
d111 1
a111 1
     &             'AVERAGE FILE FOR EVEN-NUMBERED IMAGES~',IRTFLG)
d117 1
d119 1
a119 1
            CALL FILERD(FILA,NLETA,NULL,'AVERAGE',IRTFLG)
@


1.45
log
@GPL_2010
@
text
@d30 2
a31 1
C  PURPOSE:   ADD A SERIES OF IMAGES
d35 1
a35 1
      SUBROUTINE ADDS(LUN1,LUN2,LUNS,NDOC,MAXMEM)
a36 1
      COMMON     NUMB(1)
d45 2
d48 1
a48 1
      REAL, ALLOCATABLE, DIMENSION(:) :: AVGARAY,VARARAY,INPARAY
d58 1
a58 8
      NUMTOT = MAXMEM -100
      CALL FILELIST(.TRUE.,NDOC,FILPAT,NLETP,NUMB,NUMTOT,NUMT,
     &                 'INPUT FILE TEMPLATE (E.G. PIC****)',IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET FIRST PICTURE TO DETERMINE DIMS
      CALL FILGET(FILPAT,FILNAM,NLETP,NUMB(1),IRTFLG)
      IF (IRTFLG .NE. 0) RETURN
d60 1
d62 6
a67 2
      CALL OPFILEC(0,.FALSE.,FILNAM,LUN2,'O',IFORM,NSAM,NROW,NSLICE,
     &               MAXIM,' ',.TRUE.,IRTFLG)
a68 1
      MAXIM = 0
d70 1
a70 1
      CLOSE(LUN2)
d72 1
a72 1
      NVOX = NSAM * NROW * NSLICE
d77 3
a79 1
      ALLOCATE(AVGARAY(NVOX),VARARAY(NVOX),INPARAY(NVOX),STAT=IRTFLG)
d81 1
a81 1
          CALL ERRT(102,'FAILED TO ALLOCATE',NVOX3)
d85 2
a86 1
      CALL  RDPRMC(SER,NUMC,.TRUE., 'ALL, ODD-EVEN (A/O)',NULL,IRT)
d97 2
a98 2
         IF (LUP.EQ.2)  THEN
            IF (ILUP .EQ. 1)  THEN
d101 6
d108 1
a108 1
               WRITE(NOUT,*) 'FOR EVEN-NUMBERED IMAGES'
d110 6
d117 5
a123 3
         CALL FILERD(FILA,NLETA,NULL,'AVERAGE',IRTFLG)
         IF (IRTFLG .NE. 0)  GOTO 997

d125 1
a125 1
         IF (FCHAR(4:5) .EQ. 'AD')  THEN
a128 1
C5          IF (NSEL(1) .EQ. 0)  THEN
d130 3
a132 3
            IF (NSEL_USED .LE. 0)  THEN
               WRITE(NOUT,*)  '*** MISSING OFFSET VALUE'
               CALL ERRT(100,'ADDS',NE)
d136 5
a140 2
            CALL  RDPRMI(NUMPR,NDUM,NOT_USED,
     &         'ENTER NO. OF IMAGES ALREADY AVERAGED')
d142 3
a144 4
C           OPEN EXISTING AVERAGE FILE
            
            CALL OPFILEC(0,.FALSE.,FILA,LUN1,'Z',IFORM,NSAM,NROW,NSLICE,
     &                   MAXIM,' ',.TRUE.,IRTFLG)
d147 3
a149 4
C           OPEN OLD VARIANCE FILE
            
            CALL OPFILEC(0,.TRUE.,FILV,LUNS,'Z',IFORM,NSAM,NROW,NSLICE,
     &                   MAXIM,'VARIANCE',.TRUE.,IRTFLG)
d152 2
a153 3
C           GET OLD OFFSET
C           OFFOLD = PARAM(NSEL(1))
            CALL REG_GET_NSEL(1,OFFOLD,FDUM,FDUM,FDUM,FDUM,IRTFLG)
d155 2
a156 3
            DO  I=1,NROW*NSLICE
               CALL REDLIN(LUN1,AVGARAY((I-1)*NSAM+1),NSAM,I)
            ENDDO
d158 2
a159 3
            DO  I=1,NROW*NSLICE
               CALL REDLIN(LUNS,VARARAY((I-1)*NSAM+1),NSAM,I)
            ENDDO
d161 1
a161 2
             VARARAY = VARARAY * (NUMPR-1) + AVGARAY * AVGARAY * NUMPR
             AVGARAY = AVGARAY * NUMPR
d163 2
d171 1
a171 1
            CALL OPFILEC(0,.FALSE.,FILA,LUN1,'U',IFORM,NSAM,NROW,NSLICE,
d177 2
a178 2
            CALL OPFILEC(0,.TRUE.,FILV,LUNS,'U',IFORM,NSAM,NROW,NSLICE,
     &                   MAXIM,'VARIANCE',.TRUE.,IRTFLG)
d182 2
d185 1
a185 5
               AVGARAY = 0.0
               VARARAY = 0.0

            NUMPR = 0
C           NUMBER OF PREVIOUS PICTURES IS 0
d188 1
a188 1
         NUMC = 1
d190 1
a190 1
C        CHANGED TO ALLOW GAPS IN FILE SERIES 7/21/89 MR.:
d193 1
d196 1
a196 1
            CALL FILGET(FILPAT,FILNAM,NLETP,NUMB(IFIL),IRTFLG)
d202 2
a203 2
            CALL OPFILEC(0,.FALSE.,FILNAM,LUN2,'Z',IFORM,
     &                   NSAM,NROW,NSLICE,
d207 1
a207 1
               WRITE(NOUT,100) FILNAM
d209 1
a209 1
               GOTO 550
d213 3
a215 3
            NMT = NMT+1
            IF (SER.EQ.'O' .AND. MOD(NMT,2) .EQ. 0)  GOTO  707
            IF (SER.EQ.'E' .AND. MOD(NMT,2) .EQ. 1)  GOTO  707
d217 1
a217 1
            NUMA = NUMA+1
d219 2
a220 2
            DO I=1,NROW*NSLICE
               CALL  REDLIN(LUN2,INPARAY((I-1)*NSAM+1),NSAM,I)
d224 10
a233 11
               IF (FCHAR(4:4) .NE. 'R')  THEN
	        AV2=SUM(INPARAY)/ NSAM / NROW / NSLICE
	        INPARAY = INPARAY - AV2
	       ELSE
	        AV2=0.0
	       ENDIF
            AVGARAY= AVGARAY+ INPARAY
            VARARAY= VARARAY+ INPARAY*INPARAY
            AV1 = AV1 + AV2
707        CLOSE(LUN2)
550        CONTINUE
a235 1
         FNUMT = NUMA + NUMPR
a236 4
            AVGARAY = AVGARAY / FNUMT
            VV         = DOT_PRODUCT(AVGARAY,AVGARAY)
            VARARAY = (VARARAY - AVGARAY*AVGARAY*FNUMT) /(FNUMT-1.0)
            VARAV      = SUM(VARARAY)
d238 11
a248 3
         DO I=1,NROW*NSLICE
            CALL WRTLIN(LUN1,AVGARAY((I-1)*NSAM+1),NSAM,I)
         ENDDO
d250 1
a250 3
         DO I=1,NROW*NSLICE
            CALL WRTLIN(LUNS,VARARAY((I-1)*NSAM+1),NSAM,I)
         ENDDO
d252 1
a252 1
         VV   = VV/REAL(NSAM*NROW*NSLICE)
d254 3
a256 3
         IF (VARAV .LT. 0.0) THEN
            WRITE(NOUT,*) 'WARNING: NEGATIVE TOTAL VARIANCE: ',VARAV,
     &                    '  SD SET TO ZERO!!!'
d258 2
a259 2
     &        WRITE(NDAT,*) 'WARNING: NEGATIVE TOTAL VARIANCE: ',VARAV,
     &                    '  SD SET TO ZERO!!!'
d265 3
a267 5
         VAV  = VARAV/(FLOAT(NSAM)*FLOAT(NROW)*FLOAT(NSLICE))

         IF (VAV .LT. 0.0) THEN
            WRITE(NOUT,*) 'WARNING: NEGATIVE  VARIANCE P.P. : ',VAV,
     &                    '  SD SET TO ZERO!!!'
d269 2
a270 2
     &        WRITE(NDAT,*) 'WARNING: NEGATIVE TOTAL VARIANCE: ',VAV,
     &                    '  SD SET TO ZERO!!!'
a275 4
         OFF  = AV1 / FLOAT(NUMA)
C        IF (NUMPR.NE.0.AND.NSEL(1).NE.0.AND.PARAM(NSEL(1)).NE.0.0)
C    &      OFF = (OFFOLD*FLOAT(NUMPR)+AV1)/FLOAT(NUMA+NUMPR)

d277 1
a277 1
         IF (NUMPR.NE.0 .AND. NSEL_USED.NE.0) THEN
d279 1
a279 1
            IF (OFFOLD.NE.0.0)
a282 1
C        IF (NSEL(1) .NE .0) PARAM(NSEL(1)) = OFF
d286 1
a286 1
     &      WRITE(NDAT,7001) NUMA+NUMPR,NSAM*NROW*NSLICE,VARAV,SAVT,
d289 1
a289 1
         WRITE(NOUT,7001) NUMA+NUMPR,NSAM*NROW*NSLICE,VARAV,SAVT,
d291 6
a296 6
7001     FORMAT(' ** VARIANCE COMPUTATION BASED ON ',I7,' IMAGES ',
     &   /'    CONTAINING ',I7,' ELEMENTS',
     &   /'      TOTAL VARIANCE = ',1PG12.5,' TOTAL S.D. = ',1PG12.5,
     &   /'      VARIANCE P.P.  = ',1PG12.5,' S.D. P.P.  = ',1PG12.5,
     &   /'      AVERAGE OFFSET = ',1PG12.5,
     &   /'      VARIANCE OF AVERAGE IMAGE = ',1PG12.5)
d300 4
a303 3
997     CLOSE(LUNS)
        CLOSE(LUN1)
999     IF (ALLOCATED(INPARAY)) DEALLOCATE(INPARAY)
a306 1
        RETURN
@


1.44
log
@maxmem
@
text
@a8 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d10 5
a14 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d16 1
a16 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.43
log
@MAXMEM
@
text
@d40 1
a40 1
      COMMON     NUMB(MAXMEM)
d60 1
@


1.42
log
@GPL License fixed
@
text
@d40 1
a40 2
      PARAMETER  (NUMTOT=99998)
      COMMON     NUMB(NUMTOT)
d43 1
d45 1
a45 2
      CHARACTER *81    FILNAM,FILA,FILV,FILPAT
      COMMON /COMMUN/  FILNAM,FILA,FILV,FILPAT
d47 4
a50 2
      DOUBLE PRECISION VARAV,AV2,VV
      CHARACTER *1     NULL, SER
a57 2
      REAL, ALLOCATABLE, DIMENSION(:) :: AVGARAY,VARARAY,INPARAY

@


1.41
log
@HRI GPL License used
@
text
@a1 1
C***************************************************************************
a8 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d12 1
a12 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a31 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a36 1
C--*************************************************************************
@


1.40
log
@maxim=0 for index stacks use
@
text
@d1 1
d11 24
d44 1
@


1.39
log
@alloc error
@
text
@d56 1
d112 1
d118 2
a119 1
            CALL OPFILEC(0,.TRUE.,FILV,LUNS,'O',IFORM,NSAM,NROW,NSLICE,
d143 1
d149 1
d175 1
a175 1

d185 1
@


1.38
log
@opfilec
@
text
@d6 1
d17 2
d60 2
d65 4
a68 1
      IF (IRTFLG .NE. 0) GOTO 999
@


1.37
log
@Fourier capability added
@
text
@d50 1
a50 1
      CALL OPFILE(.FALSE.,FILNAM,LUN2,'O',IFORM,NSAM,NROW,NSLICE,
d103 1
a103 1
            CALL OPFILE(.FALSE.,FILA,LUN1,'Z',IFORM,NSAM,NROW,NSLICE,
d108 1
a108 1
            CALL OPFILE(.TRUE.,FILV,LUNS,'O',IFORM,NSAM,NROW,NSLICE,
d132 1
a132 1
            CALL OPFILE(.FALSE.,FILA,LUN1,'U',IFORM,NSAM,NROW,NSLICE,
d137 1
a137 1
            CALL OPFILE(.TRUE.,FILV,LUNS,'U',IFORM,NSAM,NROW,NSLICE,
d163 2
a164 1
            CALL OPFILE(.FALSE.,FILNAM,LUN2,'Z',IFORM,NSAM,NROW,NSLICE,
@


1.36
log
@code upgraded to f90, pap
@
text
@d51 1
a51 1
     &               MAXIM,' ',.FALSE.,IRTFLG)
d104 1
a104 1
     &                   MAXIM,' ',.FALSE.,IRTFLG)
d109 1
a109 1
     &                   MAXIM,'VARIANCE',.FALSE.,IRTFLG)
a129 5
	    IF (NSLICE .GT. 1) THEN
	       IFORM = 3
	    ELSE
               IFORM = 1
	    ENDIF
d133 1
a133 1
     &                      MAXIM,' ',.FALSE.,IRTFLG)
d138 1
a138 1
     &                   MAXIM,'VARIANCE',.FALSE.,IRTFLG)
d164 1
a164 1
     &                   MAXIM,' ',.FALSE.,IRTFLG)
@


1.35
log
@nloop,iloop_removed
@
text
@d124 2
a125 5
            DO K=1,NVOX
               VARARAY(K) = VARARAY(K) * (NUMPR-1) + 
     &                      AVGARAY(K) * AVGARAY(K) * NUMPR
               AVGARAY(K) = AVGARAY(K) * NUMPR
            ENDDO
d147 3
a149 4
            DO K=1,NVOX
               AVGARAY(K) = 0.0
               VARARAY(K) = 0.0
            ENDDO
d182 1
a182 2
            AV2  = 0

a184 5
               IF (FCHAR(4:4) .NE. 'R')  THEN
                  DO J=1,NSAM
                     AV2 = AV2 + INPARAY(J+(I-1)*NSAM)
                  ENDDO
               ENDIF
a187 3
            AV2 = AV2 / NSAM / NROW / NSLICE

            DO K=1,NVOX
d189 8
a196 9
                  T = INPARAY(K) - AV2
               ELSE
                  T = INPARAY(K)
               ENDIF
               AVGARAY(K) = AVGARAY(K) + T
               VARARAY(K) = VARARAY(K) + T * T
           ENDDO

           AV1 = AV1 + AV2
d203 4
a206 11
         VARAV = 0
         VV    = 0

         DO  K=1,NVOX
            AVGARAY(K) = AVGARAY(K) / FNUMT
            VV         = VV+AVGARAY(K) * AVGARAY(K)

            VARARAY(K) = (VARARAY(K) - AVGARAY(K)*AVGARAY(K)*FNUMT) / 
     &                   (FNUMT-1.0)
            VARAV      = VARAV + VARARAY(K)
         ENDDO
d216 1
a216 1
         VV   = VV/FLOAT(NSAM*NROW*NSLICE)
@


1.34
log
@SP_32 for NT
@
text
@d99 1
a99 1
            CALL  RDPRMI(NUMPR,NDUM,NLOOP,ILOOP,
@


1.33
log
@bug in AS AD (opened existing var file with New!!!
@
text
@d30 2
d33 3
@


1.32
log
@trap for NaN
@
text
@d30 1
d32 1
a32 3
      REAL, ALLOCATABLE, DIMENSION(:) :: AVGARAY
      REAL, ALLOCATABLE, DIMENSION(:) :: VARARAY
      REAL, ALLOCATABLE, DIMENSION(:) :: INPARAY
d52 1
d54 1
a54 3
      ALLOCATE(AVGARAY(NVOX),STAT=IRTFLG)
      IF (IRTFLG .NE. 0) RETURN
      ALLOCATE(VARARAY(NVOX),STAT=IRTFLG)
a55 2
      ALLOCATE(INPARAY(NVOX),STAT=IRTFLG)
      IF (IRTFLG .NE. 0) GOTO 998
d58 1
d102 2
a103 2
C           OPEN NEW VARIANCE FILE
            CALL OPFILE(.TRUE.,FILV,LUNS,'U',IFORM,NSAM,NROW,NSLICE,
d210 1
a210 1
         FNUMT = NUMA+NUMPR
d275 1
d280 5
a284 4
     &   /'      TOTAL VARIANCE = ',G12.5,' TOTAL S.D. = ',G12.5,
     &   /'      VARIANCE P.P.  = ',G12.5,' S.D. P.P.  = ',G12.5,
     &   /'      AVERAGE OFFSET = ',G12.5,
     &   /'      VARIANCE OF AVERAGE IMAGE = ',G12.5)
d289 3
a291 3
        DEALLOCATE(INPARAY)
998     DEALLOCATE(VARARAY)
999     DEALLOCATE(AVGARAY)
@


1.31
log
@reg_set_nsel params changed
@
text
@d266 5
a270 2
         IF (NUMPR.NE.0 .AND. NSEL_USED.NE.0 .AND. OFFOLD.NE.0.0)
     &      OFF = (OFFOLD*FLOAT(NUMPR)+AV1)/FLOAT(NUMA+NUMPR)
@


1.30
log
@as ad did not EVER get called !
@
text
@d270 1
a270 1
         CALL REG_SET_NSEL(1,OFF,0.0, 0.0, 0.0, 0.0,IRTFLG)
@


1.29
log
@nsel removed
@
text
@a40 3
C     MAKE 'AS DC' SAME OP AS 'AS R' NOW
      FCHAR(4:4) = 'R'

@


1.28
log
@used reg_set
@
text
@d92 3
a94 1
5           IF (NSEL(1) .EQ. 0)  THEN
@


1.27
log
@used reg_set
@
text
@d113 1
a113 1
            CAKK REG_GET_NSEL(1,OFFOLD,FDUM,FDUM,FDUM,FDUM,IRTFLG)
@


1.26
log
@trap for sqrt (negative)
@
text
@d112 3
a114 1
            OFFOLD = PARAM(NSEL(1))
d262 3
a264 1
C        IF (NSEL(1) .NE. 0) PARAM(NSEL(1))=AV1/FLOAT(NUMA)
d266 2
a267 2
         OFF  = AV1 / FLOAT(NUMA)
         IF (NUMPR.NE.0.AND.NSEL(1).NE.0.AND.PARAM(NSEL(1)).NE.0.0)
d270 2
a271 1
         IF (NSEL(1) .NE .0) PARAM(NSEL(1)) = OFF
@


1.25
log
@ndoc undefined
@
text
@d5 1
d235 12
a246 1
         SAVT = SQRT(VARAV)
d248 12
a259 1
         SAV  = SQRT(VAV)
@


1.24
log
@silly printout removed
@
text
@d17 1
a17 1
      SUBROUTINE ADDS(LUN1,LUN2,LUNS,MAXMEM)
@


1.23
log
@used filelist & f90 allocation
@
text
@a35 1
      WRITE(NOUT,*) ' FOR IMAGES TO BE AVERAGED:'
@


1.22
log
@*** empty log message ***
@
text
@d1 1
a1 1
C************************************************************************
d3 2
a4 1
C ADDS.FOR
d6 8
a13 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
C **************************************************************************
d15 1
a15 1
C--************************************************************************
d17 1
a17 1
         SUBROUTINE ADDS(LUN1,LUN2,LUNS,MAXMEM)
d19 2
a20 2
         PARAMETER  (NUMTOT=99998)
         COMMON DUMMY(80),BUF(1024),NUMB(NUMTOT),Q(1)
d22 1
a22 1
         INCLUDE 'CMBLOCK.INC'
d24 23
a46 45
         COMMON /COMMUN/ FILNAM,FILA,FILN,FILV,FILPAT

         DOUBLE PRECISION VARAV,AV2,VV
         CHARACTER *81    FILNAM,FILA,FILN,FILV,FILPAT
         CHARACTER *1     NULL,MODE,SER
         CHARACTER*81     DOCFIL

         DATA  NDOC/55/
         NULL=CHAR(0)

         IF (FCHAR(4:5) .EQ. 'DC')  THEN

C           ASK FOR DATA FILE

            CALL  FILERD(FILPAT,NLETP,NULL,'INPUT',INTFLG)

            CALL  FILERD(DOCFIL,NLETI,NULL,
     &              'DOCUMENT WITH FILE NUMBERS',IRTFLG)
            IF (IRTFLG.EQ.-1)  RETURN
            K=0
            K2=1
            NUMT=0
778         LERR=-1
            KP1=K+1
            CALL  UNSAV(DOCFIL,K,NDOC ,KP1,Q,1,LERR,K2)
            IF (LERR.EQ.0)  THEN
               NUMT=NUMT+1
		IF(NUMT.GT.NUMTOT)  THEN
	WRITE(NOUT,*) ' LIST TRUNCATED, ONLY HOLDS',NUMTOT,' VALUES'
		GOTO  7780
		ENDIF
               NUMB(NUMT)=Q(1)
               K=K+1
               GOTO  778
            ENDIF
7780	    CLOSE(NDOC)
            FCHAR(4:4)='R'
         ELSE
            WRITE(NOUT,*) ' FOR IMAGES TO BE AVERAGED:'
            CALL FILSEQP(FILPAT,NLETP,NUMB,NUMTOT,NUMT,
     $        'FILE PREFIX OR TEMPLATE (EG. PIC****)',IRTFLG)
     
	    
            IF (IRTFLG .NE. 0) RETURN
         ENDIF
d48 4
a51 18
C        GET FIRST PICTURE TO DETERMINE DIMS
         CALL FILGET(FILPAT,FILNAM,NLETP,NUMB(1),IRTFLG)
         IF (IRTFLG .NE. 0) RETURN

         CALL OPENFB(BUF,FILNAM,LUN2,NSAM,NROW,'O',NF,NSLICE)
         IF (NF.NE.2) RETURN

         CLOSE(LUN2)
	 NSLICE=MAX0(1,NSLICE)
         NSR=NSAM*NROW*NSLICE
         IF(3*NSR+1104+NUMTOT.LE.MAXMEM)  THEN
            MODE='C'
         ELSEIF(2*NSR+NSAM+1104+NUMTOT.LE.MAXMEM)  THEN
            MODE='D'
         ELSE
            CALL  ERRT(6,'ADDS  ',NE)
         RETURN
      ENDIF
d53 1
a53 2
C     AVERAGE
      N1=1
d55 1
a55 2
C     VARIANCE
      N2=N1+NSR
d57 6
a62 2
C     BUFFER OR IMAGE
      N3=N2+NSR
d67 2
a68 2
         SER='A'
         LUP=1
d70 6
a75 5
         LUP=2
       ENDIF
      DO    ILUP=1,LUP
         IF(LUP.EQ.2)  THEN
            IF (ILUP.EQ.1)  THEN
d77 1
a77 1
               SER='O'
d80 1
a80 1
               SER='E'
d83 1
d85 1
a85 1
         IF (IRTFLG .NE. 0) RETURN
d87 2
a88 2
C        COMMAND  AS AD  MEANS THAT AVERAGE FILE ALREADY EXISTS
         IF (FCHAR(4:5) .EQ. 'AD')  GOTO 5
d90 1
a90 16
C        FILE DOES NOT EXIST - OPEN WITH DIMS OF FIRST FILE & INITIALIZE
	 IF (NSLICE.GT.1)  THEN
	    IFORM=3
	 ELSE
            IFORM = 1
	 ENDIF
         CALL OPENFB(BUF,FILA,LUN1,NSAM,NROW,'UNKNOWN',NF,NSLICE)

         CALL FILERD(FILV,NLETV,NULL,'VARIANCE',IRTFLG)
         CALL OPENFB(BUF,FILV,LUNS,NSAM,NROW,'UNKNOWN',NF,NSLICE)

C        CLEAR BOTH AVERAGE AND VARIANCE ARRAYS
         DO   K=1,NSR
            Q(N1+K-1)=0.0
            Q(N2+K-1)=0.0
         ENDDO
d92 5
a96 2
         NUMPR=0
C        NUMBER OF PREVIOUS PICTURES IS 0
d98 2
a99 1
         GOTO 8
d101 25
d127 1
d129 22
a150 1
C        FILES ALREADY EXIST - FIND OUT HOW MANY PICTURES ALREADY AVERAGED
d152 2
a153 4
5        IF (NSEL(1) .EQ. 0)  THEN
            WRITE(NOUT,*)  '*** MISSING OFFSET VALUE'
            CALL ERRT(100,'ADDS',NE)
            RETURN
d156 6
a161 30
         CALL  RDPRMI(NUMPR,NDUM,NLOOP,ILOOP,
     &      'ENTER NO. OF IMAGES ALREADY AVERAGED')

         CALL OPENFB(BUF,FILA,LUN1,NSAM,NROW,'Z',NF,NSLICE)

         CALL FILERD(FILV,NLETV,NULL,'VARIANCE',IRTFLG)
         CALL OPENFB(BUF,FILV,LUNS,NSAM,NROW,'UNKNOWN',NF,NSLICE)
         IF (NF .NE. 2) RETURN

C        GET OLD OFFSET
         OFFOLD = PARAM(NSEL(1))
         DO  I=1,NROW*NSLICE
            CALL REDLIN(LUN1,Q(N1+(I-1)*NSAM),NSAM,I)
         ENDDO

         DO  I=1,NROW*NSLICE
            CALL REDLIN(LUNS,Q(N2+(I-1)*NSAM),NSAM,I)
         ENDDO

         DO K=1,NSR
            Q(N2-1+K)=Q(N2-1+K)*(NUMPR-1)+Q(N1-1+K)*Q(N1-1+K)*NUMPR
            Q(N1-1+K)=Q(N1-1+K)*NUMPR
         ENDDO

8        NUMC=1
         AV1=0.0
C        TO ALLOW GAPS IN FILE SERIES 7/21/89 MR.:
         NUMA=0
         NMT=0
         DO 550 IFIL=1,NUMT
d165 2
a166 3
               CALL ERRT(3,'ADDS  ',NE)
C              TAKEN OUT, MR
               RETURN
d168 4
a171 2
            CALL OPENFB(BUF,FILNAM,LUN2,NSAM,NROW,'Z',NF,NSLICE)
            IF (NF .NE. 2) THEN
a176 25
            NMT=NMT+1
            IF (SER.EQ.'O' .AND. MOD(NMT,2).EQ.0)  GOTO  707
            IF (SER.EQ.'E' .AND. MOD(NMT,2).EQ.1)  GOTO  707
            NUMA=NUMA+1
            AV2=0
            IF (MODE.EQ.'D')  THEN
               DO    I=1,NROW*NSLICE
                  CALL  REDLIN(LUN2,Q(N3),NSAM,I)
                  IF (FCHAR(4:4) .NE. 'R') THEN
                     DO     J=1,NSAM
                        AV2=AV2+Q(N3-1+J)
                     ENDDO
                  ENDIF
               ENDDO
            ELSE
               DO    I=1,NROW*NSLICE
                  CALL  REDLIN(LUN2,Q(N3+(I-1)*NSAM),NSAM,I)
                  IF (FCHAR(4:4) .NE. 'R')  THEN
                     DO    J=1,NSAM
                        AV2=AV2+Q(J+(I-1)*NSAM+N3-1)
                     ENDDO
                  ENDIF
                  CONTINUE
               ENDDO
            ENDIF
d178 28
a205 1
            AV2=AV2/NSAM/NROW/NSLICE
d207 4
a210 25
            IF (MODE .EQ. 'D')  THEN
               DO     I=1,NROW*NSLICE
                  CALL  REDLIN(LUN2,Q(N3),NSAM,I)
                  DO    K=1,NSAM
                     LK=K+(I-1)*NSAM
                     IF (FCHAR(4:4).NE.'R')  THEN
                        T=Q(N3+K-1)-AV2
                     ELSE
                        T=Q(N3+K-1)
                     ENDIF
                     Q(LK+N1-1)=Q(LK+N1-1)+T
               	  Q(LK+N2-1)=Q(LK+N2-1)+T*T
	          ENDDO
	       ENDDO
            ELSE
               DO     K=1,NSR
                  IF (FCHAR(4:4) .NE. 'R')  THEN
                     T=Q(N3+K-1)-AV2
                  ELSE
                     T=Q(N3+K-1)
                  ENDIF
                 Q(K+N1-1)=Q(K+N1-1)+T
                 Q(K+N2-1)=Q(K+N2-1)+T*T
              ENDDO
           ENDIF
a211 4
           AV1=AV1+AV2
707        CLOSE(LUN2)
550      CONTINUE
C
d217 7
a223 7
         DO  K=1,NSR
            L     = N1+K-1
            Q(L)  = Q(L)/FNUMT
            VV    = VV+Q(L)*Q(L)
            M     = N2+K-1
            Q(M)  = (Q(M)-Q(L)*Q(L)*FNUMT)/(FNUMT-1.0)
            VARAV = VARAV+Q(M)
d227 1
a227 1
            CALL WRTLIN(LUN1,Q(N1+(I-1)*NSAM),NSAM,I)
d231 1
a231 1
            CALL WRTLIN(LUNS,Q(N2+(I-1)*NSAM),NSAM,I)
a233 3
         CLOSE(LUNS)
         CLOSE(LUN1)

d239 2
a240 1
         OFF  = AV1/FLOAT(NUMA)
d242 7
a248 5
     1   OFF = (OFFOLD*FLOAT(NUMPR)+AV1)/FLOAT(NUMA+NUMPR)
         IF (NSEL(1).NE.0) PARAM(NSEL(1))=OFF
         IF (NOUT.NE.NDAT)
     1   WRITE(NDAT,7001) NUMA+NUMPR,NSAM*NROW*NSLICE,VARAV,SAVT,
     1                    VAV,SAV,OFF,VV
d250 1
a250 1
     1                    VAV,SAV,OFF,VV
d252 5
a256 5
     1   /'    CONTAINING ',I7,' ELEMENTS',
     2   /'      TOTAL VARIANCE = ',G12.5,' TOTAL S.D. = ',G12.5,
     3   /'      VARIANCE P.P.  = ',G12.5,' S.D. P.P.  = ',G12.5,
     4   /'      AVERAGE OFFSET = ',G12.5,
     5   /'      VARIANCE OF AVERAGE IMAGE = ',G12.5)
d259 8
a266 1
         END
@


1.21
log
@99998
@
text
@a29 1
CNO_SAVE
d295 2
a296 2
7001     FORMAT(' ** VARIANCE COMPUTATION BASED ON ',I4,' IMAGES ',
     1   /'    CONTAINING ',I6,' ELEMENTS',
a301 1
c 829      CONTINUE
@


1.20
log
@buffer 99999
@
text
@d19 1
a19 1
         PARAMETER  (NUMTOT=99999)
@


1.19
log
@R
R
R
R
@
text
@d19 1
a19 1
         PARAMETER  (NUMTOT=20000)
@


1.18
log
@*** empty log message ***
@
text
@d75 1
a75 1
         CALL OPENFB(BUF,FILNAM,LUN2,NSAM,NROW,'R',NF,NSLICE)
@


1.17
log
@*** empty log message ***
@
text
@d107 1
a107 1
      DO  829  ILUP=1,LUP
d228 1
a228 1
               DO  630  I=1,NROW*NSLICE
d230 1
a230 1
                  DO  630  K=1,NSAM
d238 3
a240 1
630            Q(LK+N2-1)=Q(LK+N2-1)+T*T
d302 2
a303 1
829      CONTINUE
@


1.16
log
@trap for numtot in AS DC added
@
text
@d53 1
a53 1
	WRITE(NOUT,) ' LIST TRUNCATED, ONLY HOLDS',NUMTOT,' VALUES'
@


1.15
log
@number of images increased to 20000
@
text
@d52 4
d60 1
a60 1
            CLOSE(NDOC)
a301 1
         RETURN
@


1.14
log
@changed z to o for variance file disp on openfb
@
text
@d19 1
a19 1
         PARAMETER  (NUMTOT=10000)
@


1.13
log
@used z disp to allow missing files
@
text
@d126 1
d141 2
d150 1
d153 1
d155 1
d157 3
a159 2
         CALL OPENFB(BUF,FILV,LUNS,NSAM,NROW,'Z',NF,NSLICE)
         IF (NF.NE.2)RETURN
d170 1
a170 1
         DO   K=1,NSR
d254 1
a254 1
         VV=0
d297 1
@


1.12
log
@delete an extra common in arg list
@
text
@d61 1
a61 1
     $  'FILE PREFIX OR TEMPLATE (EG. PIC****)',IRTFLG)
d73 1
d94 1
a94 1
C
d106 1
a106 1
               WRITE(NOUT,*) 'For odd-numbered images'
d109 1
a109 1
               WRITE(NOUT,*) 'For even-numbered images'
d116 1
a116 1
C        COMMAND  AS AD  means that average file already exists
d149 1
a149 1
         CALL OPENFB(BUF,FILA,LUN1,NSAM,NROW,'OLD',NF,NSLICE)
d151 1
a151 1
         CALL OPENFB(BUF,FILV,LUNS,NSAM,NROW,'OLD',NF,NSLICE)
d181 1
a181 1
            CALL OPENFB(BUF,FILNAM,LUN2,NSAM,NROW,'R',NF,NSLICE)
@


1.11
log
@change filseq to filseqp call
@
text
@d61 1
a61 1
     $  'FILE PREFIX OR TEMPLATE (EG. PIC****)',,IRTFLG)
@


1.10
log
@list increased to 10000
@
text
@d60 4
a63 1
            CALL FILSEQ(FILPAT,NLETP,NUMB,NUMTOT,NUMT,IRTFLG)
@


1.9
log
@prompts improved
@
text
@d19 1
a19 1
         PARAMETER  (NUMTOT=5000)
@


1.8
log
@parallel with man chapter now
@
text
@d1 1
a1 1
C++************************************************************************
a14 2
C
C
d91 1
a91 1
      CALL  RDPRMC(SER,NUMC,.TRUE., 'ALL, ODD-EVEN (A/O-E)',NULL,IRT)
d93 1
a93 1
      IF (SER.NE.'O'.AND.SER.NE.'E') THEN
@


1.7
log
@nosave
@
text
@d3 1
a3 1
C $$ ADDS.FOR
a23 1
#ifdef SP_UNIX
d25 1
a25 3
#else
         INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d32 2
a34 1
CNO_SAVE
a36 1

d41 1
a41 1
            CALL  FILERD(FILPAT,NLETP,NULL,'Input',INTFLG)
d44 1
a44 1
     &              'Document with file numbers',IRTFLG)
d93 3
a95 3
      CALL  RDPRMC(SER,NUMC,.TRUE.,
     1   'All, Odd-Even (A/O-E)',NULL,IRT)
      IF(SER.NE.'O'.AND.SER.NE.'E') THEN
@


1.6
log
@cosmetic (searching for bug, not found)
@
text
@d36 1
a36 1

@


1.5
log
@number of images increased to 5000
@
text
@d18 1
a18 3
C
C $$ ADDS.FOR
C
d23 1
d41 22
a62 28
C
C  ASK FOR DATA FILE
C
         CALL  FILERD(FILPAT,NLETP,NULL,'Input',INTFLG)
C     CALL  OPENFB(BUF,FILPAT,INPIC,NSAM,NROW,'R',NF,NSL)
C     IF(NF.NE.2)  THEN
C     WRITE(NOUT,*)  ' No such file !'
C     CLOSE(INPIC)
C     RETURN
C     ENDIF
C     CLOSE(INPIC)
         CALL  FILERD(DOCFIL,NLETI,NULL,
     &   'Document with file numbers',IRTFLG)
         IF(IRTFLG.EQ.-1)  RETURN
         K=0
         K2=1
         NUMT=0
778      LERR=-1
         KP1=K+1
         CALL  UNSAV(DOCFIL,K,NDOC ,KP1,Q,1,LERR,K2)
         IF(LERR.EQ.0)  THEN
         NUMT=NUMT+1
         NUMB(NUMT)=Q(1)
         K=K+1
         GOTO  778
         ENDIF
         CLOSE(NDOC)
         FCHAR(4:4)='R'
d64 3
a66 3
         WRITE(NOUT,*) ' FOR IMAGES TO BE AVERAGED:'
         CALL FILSEQ(FILPAT,NLETP,NUMB,NUMTOT,NUMT,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN
d69 1
a69 1
C GET FIRST PICTURE TO DETERMINE DIMS
d76 1
a76 1
	NSLICE=MAX0(1,NSLICE)
d79 1
a79 1
         MODE='C'
d81 1
a81 1
         MODE='D'
d83 1
a83 1
         CALL  ERRT(6,'ADDS  ',NE)
d85 2
a86 2
         ENDIF
C
d88 1
a88 1
         N1=1
d91 1
a91 1
         N2=N1+NSR
d94 1
a94 1
         N3=N2+NSR
d96 1
a96 1
         CALL  RDPRMC(SER,NUMC,.TRUE.,
d98 1
a98 1
         IF(SER.NE.'O'.AND.SER.NE.'E') THEN
d101 1
a101 1
         ELSE
d103 2
a104 2
         ENDIF
         DO  829  ILUP=1,LUP
d106 7
a112 7
         IF(ILUP.EQ.1)  THEN
         WRITE(NOUT,*) 'For odd-numbered images'
         SER='O'
         ELSE
         WRITE(NOUT,*) 'For even-numbered images'
         SER='E'
         ENDIF
d117 1
a117 1
C COMMAND  AS AD  means that average file already exists
d119 7
a125 7
C
C FILE DOES NOT EXIST - OPEN WITH DIMS OF FIRST FILE & INITIALIZE
	IF(NSLICE.GT.1)  THEN
	IFORM=3
	ELSE
         IFORM = 1
	ENDIF
d130 6
a135 4
C CLEAR BOTH AVERAGE AND VARIANCE ARRAYS
         DO 1 K=1,NSR
         Q(N1+K-1)=0.0
1        Q(N2+K-1)=0.0
d137 2
a138 2
C NUMBER OF PREVIOUS PICTURES IS 0
C
d141 1
a141 1
C FILES ALREADY EXIST - FIND OUT HOW MANY PICTURES ALREADY AVERAGED
d143 4
a146 3
5        IF (NSEL(1).EQ.0)  THEN
         WRITE(NOUT,*)  ' MISSING OFFSET VALUE'
         RETURN
d149 1
a149 1
     1   'ENTER NO. OF IMAGES ALREADY AVERAGED$')
d154 14
a167 12
C GET OLD OFFSET
         OFFOLD=PARAM(NSEL(1))
         DO  7  I=1,NROW*NSLICE
7        CALL REDLIN(LUN1,Q(N1+(I-1)*NSAM),NSAM,I)

         DO  71  I=1,NROW*NSLICE
71       CALL REDLIN(LUNS,Q(N2+(I-1)*NSAM),NSAM,I)

         DO 6 K=1,NSR
         Q(N2-1+K)=Q(N2-1+K)*(NUMPR-1)+Q(N1-1+K)*Q(N1-1+K)*NUMPR
         Q(N1-1+K)=Q(N1-1+K)*NUMPR
6        CONTINUE
d171 1
a171 1
C To allow gaps in file series 7/21/89 mr.:
d176 64
a239 62
         CALL FILGET(FILPAT,FILNAM,NLETP,NUMB(IFIL),IRTFLG)
         IF(IRTFLG.NE.0) THEN
         CALL ERRT(3,'ADDS  ',NE)
C         TAKEN OUT, MR
         RETURN
         ENDIF
         CALL OPENFB(BUF,FILNAM,LUN2,NSAM,NROW,'R',NF,NSLICE)
         IF(NF.NE.2) THEN
C----------------------------------------------------------
C To allow gaps in file series 7/21/89 mr.:
         WRITE(NOUT,100) FILNAM
100      FORMAT(1H ,'FILE ',A80,' NOT FOUND, FILE SKIPPED')
         GOTO 550
C-----------------------------------------------------------
         ENDIF
         NMT=NMT+1
         IF(SER.EQ.'O' .AND. MOD(NMT,2).EQ.0)  GOTO  707
         IF(SER.EQ.'E' .AND. MOD(NMT,2).EQ.1)  GOTO  707
         NUMA=NUMA+1
         AV2=0
         IF(MODE.EQ.'D')  THEN
         DO  620  I=1,NROW*NSLICE
         CALL  REDLIN(LUN2,Q(N3),NSAM,I)
         IF (FCHAR(4:4) .NE. 'R') THEN
         DO  6620  J=1,NSAM
6620     AV2=AV2+Q(N3-1+J)
         ENDIF
620      CONTINUE
         ELSE
         DO  621  I=1,NROW*NSLICE
         CALL  REDLIN(LUN2,Q(N3+(I-1)*NSAM),NSAM,I)
         IF (FCHAR(4:4) .NE. 'R')  THEN
         DO  6621  J=1,NSAM
6621     AV2=AV2+Q(J+(I-1)*NSAM+N3-1)
         ENDIF
621      CONTINUE
         ENDIF

         AV2=AV2/NSAM/NROW/NSLICE

         IF (MODE .EQ. 'D')  THEN
         DO  630  I=1,NROW*NSLICE
         CALL  REDLIN(LUN2,Q(N3),NSAM,I)
         DO  630  K=1,NSAM
         LK=K+(I-1)*NSAM
         IF (FCHAR(4:4).NE.'R')  THEN
         T=Q(N3+K-1)-AV2
         ELSE
         T=Q(N3+K-1)
         ENDIF
         Q(LK+N1-1)=Q(LK+N1-1)+T
630      Q(LK+N2-1)=Q(LK+N2-1)+T*T
         ELSE
         DO  631  K=1,NSR
         IF (FCHAR(4:4) .NE. 'R')  THEN
         T=Q(N3+K-1)-AV2
         ELSE
         T=Q(N3+K-1)
         ENDIF
         Q(K+N1-1)=Q(K+N1-1)+T
631      Q(K+N2-1)=Q(K+N2-1)+T*T
         ENDIF
d241 2
a242 2
         AV1=AV1+AV2
707      CLOSE(LUN2)
d245 2
a246 2
         FNUMT=NUMA+NUMPR
C NOW COMPUTE NORMALIZED AVERAGE AND VARIANCE IMAGE
d250 16
a265 12
         DO  700  K=1,NSR
         L=N1+K-1
         Q(L)=Q(L)/FNUMT
         VV=VV+Q(L)*Q(L)
         M=N2+K-1
         Q(M)=(Q(M)-Q(L)*Q(L)*FNUMT)/(FNUMT-1.0)
700      VARAV=VARAV+Q(M)

         DO  701  I=1,NROW*NSLICE
701      CALL WRTLIN(LUN1,Q(N1+(I-1)*NSAM),NSAM,I)
         DO  801  I=1,NROW*NSLICE
801      CALL WRTLIN(LUNS,Q(N2+(I-1)*NSAM),NSAM,I)
d274 6
a279 6
C       IF(NSEL(1).NE.0) PARAM(NSEL(1))=AV1/FLOAT(NUMA)
         OFF=AV1/FLOAT(NUMA)
         IF(NUMPR.NE.0.AND.NSEL(1).NE.0.AND.PARAM(NSEL(1)).NE.0.0)
     1   OFF=(OFFOLD*FLOAT(NUMPR)+AV1)/FLOAT(NUMA+NUMPR)
         IF(NSEL(1).NE.0) PARAM(NSEL(1))=OFF
         IF(NOUT.NE.NDAT)
d291 1
@


1.4
log
@3D version
@
text
@d23 1
a23 1
         PARAMETER  (NUMTOT=4000)
@


1.3
log
@clean up unused variables and hollerith warnings
@
text
@d80 1
a80 1
         CALL OPENFB(BUF,FILNAM,LUN2,NSAM,NROW,'R',NF,NDUM)
d83 2
a84 1
         NSR=NSAM*NROW
d128 3
a130 1

d132 2
a133 1
         CALL OPENFB(BUF,FILA,LUN1,NSAM,NROW,'UNKNOWN',NF,1)
d135 1
a135 2
         IFORM=1
         CALL OPENFB(BUF,FILV,LUNS,NSAM,NROW,'UNKNOWN',NF,1)
d154 1
a154 1
         CALL OPENFB(BUF,FILA,LUN1,NSAM,NROW,'OLD',NF,NDUM)
d156 1
a156 1
         CALL OPENFB(BUF,FILV,LUNS,NSAM,NROW,'OLD',NF,NDUM)
d160 1
a160 1
         DO  7  I=1,NROW
d163 1
a163 1
         DO  71  I=1,NROW
d184 1
a184 1
         CALL OPENFB(BUF,FILNAM,LUN2,NSAM,NROW,'R',NF,NDUM)
d199 1
a199 1
         DO  620  I=1,NROW
d207 1
a207 1
         DO  621  I=1,NROW
d216 1
a216 1
         AV2=AV2/NSAM/NROW
d219 1
a219 1
         DO  630  I=1,NROW
d258 1
a258 1
         DO  701  I=1,NROW
d260 1
a260 1
         DO  801  I=1,NROW
d266 1
a266 1
         VV   = VV/FLOAT(NSAM*NROW)
d268 1
a268 1
         VAV  = VARAV/(FLOAT(NSAM)*FLOAT(NROW))
d276 1
a276 1
     1   WRITE(NDAT,7001) NUMA+NUMPR,NSAM*NROW,VARAV,SAVT,
d278 1
a278 1
         WRITE(NOUT,7001) NUMA+NUMPR,NSAM*NROW,VARAV,SAVT,
@


1.2
log
@cpp_lines_added
@
text
@a31 1
         LOGICAL          EX
d149 2
a150 2
         CALL  RDPRMI(NUMPR,NDUM,NLOOP,ILOOP,'ENTER NO. OF IMAGES ALREADY
     1   AVERAGED$')
d273 4
a276 4
     1   WRITE(NDAT,7001) NUMA+NUMPR,NSAM*NROW,VARAV,SAVT,VAV,SAV,OFF
     1   ,VV
         WRITE(NOUT,7001) NUMA+NUMPR,NSAM*NROW,VARAV,SAVT,VAV,SAV,OFF
     1   ,VV
@


1.1
log
@Initial revision
@
text
@d25 3
d29 1
@
