head	1.23;
access;
symbols
	pre_mrcs:1.23
	healthdept_2018:1.23
	pre_getangas:1.22
	GPL2010:1.22
	pre_GPL2010:1.21
	pre_var_equation:1.21
	pre_fftwrings:1.21
	pre_opfiles:1.21
	src:1.21
	best-code:1.21
	x-named-regs:1.21
	x:1.21
	v13-00:1.21
	pre_GPL:1.19
	prec_CA:1.19
	noindx:1.19
	Bproc:1.11
	oct21:1.10
	last77:1.10;
locks; strict;
comment	@c @;


1.23
date	2018.10.03.14.34.15;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2010.06.24.13.26.47;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2005.10.17.20.01.22;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2005.10.17.17.57.07;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2002.05.07.19.27.33;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2002.05.07.18.59.11;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2002.05.03.17.57.36;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2002.04.09.16.06.21;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.11.14.07.49;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2001.01.03.21.00.52;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2001.01.03.20.54.12;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.10.19.16.50.13;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.24.20.31.44;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	99.03.25.20.23.27;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	99.02.25.16.51.17;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	98.04.06.20.09.49;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	98.04.06.19.37.28;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.10.17.15.19.25;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	97.10.14.21.19.40;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	96.12.04.20.34.12;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	96.12.02.22.11.39;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	96.02.16.19.04.55;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	96.02.16.16.08.32;	author pawel;	state Exp;
branches;
next	;


desc
@part of RT 3L
@


1.23
log
@email_health_dept
@
text
@C++*********************************************************************
C
C ROTAL3.F
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  ROTAL3(LUN1,LUN2,NSAM,NROW,NSLICE,MODE)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************
 
        SUBROUTINE ROTAL3(LUN1,LUN2,NSAM,NROW,NSLICE,MODE)

        INCLUDE 'CMBLOCK.INC' 

        REAL, ALLOCATABLE, DIMENSION(:) ::  Q
        CHARACTER(LEN=3)                ::  MODE

        DIMENSION   P1(3),P2(3)
 
        MEMWANT = NSAM*NROW*NSLICE
        ALLOCATE(Q(MEMWANT),STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(102,'ROTAL3 -- UNABLE TO ALLOCATE Q',MEMWANT) 
           GOTO 9999
        ENDIF
 
        CALL REDVOL(LUN1,NSAM,NROW,1,NSLICE,Q,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

C       GET  ANGLE
	CALL  RDPRM(ALPHA,NOT_USED,'ALPHA')

C       GET  ROTATION AXIS
        P1(3)   = HUGE(P1)
        CALL  RDPRM3S(P1(1),P1(2),P1(3),NOT_USED,
     &        'X, Y, & Z FOR FIRST POINT DEFINING ROTATION AXIS',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
        IF (P1(3) .EQ. HUGE(P1)) THEN
           CALL  RDPRM1S(P1(3),NOT_USED,
     &             'Z FOR FIRST POINT DEFINING ROTATION AXIS',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
        ENDIF

        P2(3)   = HUGE(P2)
        CALL  RDPRM3S(P2(1),P2(2),P2(3),NOT_USED,
     &      'X, Y, & Z FOR SECOND POINT DEFINING ROTATION AXIS',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
        IF (P2(3) .EQ. HUGE(P1)) THEN
           CALL  RDPRM1S(P2(3),NOT_USED,
     &             'Z FOR SECOND POINT DEFINING ROTATION AXIS',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
        ENDIF

        IF (MODE(3:3) .EQ. 'S') THEN
	   CALL ROTL3(LUN2,Q,NSAM,NROW,NSLICE,P1,P2,ALPHA)
        ELSE
	   CALL ROTL3Q(LUN2,Q,NSAM,NROW,NSLICE,P1,P2,ALPHA)
        ENDIF

9999    IF (ALLOCATED(Q)) DEALLOCATE(Q) 

	RETURN
        END
@


1.22
log
@GPL_2010
@
text
@d11 1
a11 1
C=* Email: spider@@wadsworth.org                                        *
@


1.21
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.20
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a5 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
a29 1
C **************************************************************************
a34 1
C--************************************************************************
@


1.19
log
@*** empty log message ***
@
text
@d1 1
d6 1
d8 1
d10 24
d40 1
d46 1
@


1.18
log
@*** empty log message ***
@
text
@d27 1
a27 1
        DIMENSION   p1(3),p2(3)
d36 4
d42 1
@


1.17
log
@redvol parameters changed
@
text
@d15 1
a15 1
C  ROTAL3(LUN1,LUN2,NSAM,NROW,NSLICE)
d20 1
a20 1
        SUBROUTINE ROTAL3(LUN1,LUN2,NSAM,NROW,NSLICE)
d25 1
d27 1
a27 1
        DIMENSION   X1(3),X2(3)
d29 1
a29 1
        MEMWANT = NSAM*(NROW*NSLICE+1)
d32 1
a32 1
           CALL ERRT(102,'UNABLE TO ALLOCATE Q',MEMWANT) 
d38 9
a46 8
	CALL  RDPRM2(X1(1),X1(2),NOT_USED,
     &	    'FIRST POINT DEFINING ROTATION AXIS X, Y')

	CALL  RDPRM(X1(3),NOT_USED,
     &	    'FIRST POINT DEFINING ROTATION AXIS Z')

	CALL  RDPRM2(X2(1),X2(2),NOT_USED,
     &	    'SECOND POINT DEFINING ROTATION AXIS X, Y')
d48 3
a50 4
	CALL  RDPRM(X2(3),NOT_USED,
     &	    'SECOND POINT DEFINING ROTATION AXIS Z')

        CALL REDVOL(LUN1,NSAM,NROW,1,NSLICE,Q,IRTFLG)
d52 5
d58 5
a62 3
	KK = 1+NSAM*NROW*NSLICE

	CALL ROTL3(LUN2,Q(1),Q(KK),NSAM,NROW,NSLICE,X1,X2,ALPHA)
@


1.16
log
@removed file opening
@
text
@d49 1
a49 1
        CALL REDVOL(LUN1,NSAM,NROW,NSLICE,Q,IRTFLG)
@


1.15
log
@nloop,iloop_removed
@
text
@d15 1
a15 1
C  ROTAL3
d20 1
a20 1
        SUBROUTINE ROTAL3(MAXMEM)
d26 1
a26 1
        COMMON   BUF(1024),X1(3),X2(3)
d28 5
a32 12
	CHARACTER *81 FILNAM

	DATA  LUN1,LUN2/20,21/

C       3-D  ROTATION
        MAXIM = 0
        CALL OPFILE(.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
     &               MAXIM,'INPUT',.FALSE.,IRTFLG)
       IF (IRTFLG .NE. 0) RETURN
       IF (IFORM.NE.3)  THEN
          CALL ERRT(2,'ROTAL3',NE)
          RETURN
a33 7

       MEMWANT = NSAM*(NROW*NSLICE+1)
       ALLOCATE(Q(MEMWANT),STAT=IRTFLG)
       IF (IRTFLG .NE. 0) THEN
          CALL ERRT(102,'UNABLE TO ALLOCATE Q',MEMWANT) 
          GOTO 9999
       ENDIF
a34 5
       MAXIM = 0
       CALL OPFILE(.TRUE.,FILNAM,LUN2,'U',IFORM,NSAM,NROW,NSLICE,
     &               MAXIM,'OUTPUT',.FALSE.,IRTFLG)
       IF (IRTFLG .NE. 0) GOTO 9999

d49 2
a50 3
	DO    J=1,NROW*NSLICE
  	   CALL  REDLIN(LUN1,Q(1+(J-1)*NSAM),NSAM,J)
	ENDDO
a56 2
        CLOSE(LUN1)
	CLOSE(LUN2)
@


1.14
log
@typos
@
text
@d54 1
a54 1
	CALL  RDPRM(ALPHA,NLOOP,ILOOP,'ALPHA')
d56 1
a56 1
	CALL  RDPRM2(X1(1),X1(2),NLOOP,ILOOP,
d59 1
a59 1
	CALL  RDPRM(X1(3),NLOOP,ILOOP,
d62 1
a62 1
	CALL  RDPRM2(X2(1),X2(2),NLOOP,ILOOP,
d65 1
a65 1
	CALL  RDPRM(X2(3),NLOOP,ILOOP,
@


1.13
log
@used allocate, removed chkmem, better error handling
@
text
@d24 1
a24 1
        REAL, ALLOCATABLE, DIMENSION(:,:) ::  Q
d81 1
@


1.12
log
@openfb--> opfile & cosmetic
@
text
@d3 1
a3 1
C RT3L.F
d15 2
d24 1
a24 3
        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: Q
d26 1
a26 2
        LOGICAL  RUNTIME
        COMMON   BUF(1024),X1(3),X2(3),BAF(1)
a28 3
	CHARACTER *1  NULL

	DATA  LUN1,LUN2/8,9/
d30 1
a30 1
	NULL=CHAR(0)
d32 3
a34 3
C      3-D  ROTATION
       MAXIM = 0
       CALL OPFILE(.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
d36 11
a46 9
       IF (IRTFLG .NE. 0) GOTO 130
       IF (IFORM.NE.3)  GOTO 145

       MEMWANT=NSAM*(NROW*NSLICE+1)
       CALL CHKMEM( MEMWANT, BAF, MAXMEM-(1030), 
     &	    RUNTIME,IPQ,IRTFLG)
       IF (IRTFLG.NE.0) THEN 
         CALL ERRT(6,'RT 3A ',NE)
         GOTO  5
d48 1
a48 3

       Q = >IPQ

d52 1
a52 1
       IF (IRTFLG .NE. 0) GOTO 130
d55 1
d58 1
d61 1
d64 1
d67 1
a70 1
	KK=1+NSAM*NROW*NSLICE
d72 1
a72 4
	CALL  ROTL3
     &	   (LUN2,Q(1),Q(KK),NSAM,NROW,NSLICE,X1,X2,ALPHA)
4	CONTINUE 
      IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'RT 3L',IRTFLG) 
d74 4
a77 1
5       CLOSE(LUN1)
d79 1
a80 7


130   CALL ERRT(4,'RT 3L ',NE)
      GOTO 5
145   CALL ERRT(2,'RT 3L ',NE)
      GOTO 5
        END
@


1.11
log
@SP_F90 removed
@
text
@d19 1
d36 9
a44 9
C     3-D  ROTATION
      CALL FILERD(FILNAM,NLETI,NULL,'INPUT',IRTFLG)
      IF (IRTFLG .EQ. -1) GOTO 5

      CALL OPENFB(BUF,FILNAM,LUN1,NSAM,NROW,'O',NF,NSLICE)
      GOTO (130,110),NF
110   IF(IFORM.NE.3)  GOTO 145
      MEMWANT=NSAM*(NROW*NSLICE+1)
      CALL CHKMEM( MEMWANT, BAF, MAXMEM-(1030), 
d46 1
a46 1
      IF(IRTFLG.NE.0) THEN 
d49 3
a51 1
      ENDIF
d53 4
a56 1
      Q = >IPQ
d58 1
a58 7
      CALL FILERD(FILNAM,NLETO,NULL,'OUTPUT',IRTFLG)
      IF (IRTFLG .EQ. -1) GOTO 4
      CALL OPENFB(BUF,FILNAM,LUN2,NSAM,NROW,'UNKNOWN',NF,NSLICE)
      GOTO (130,951),NF
C
951	CONTINUE
	CALL  RDPRM(ALPHA,NLOOP,ILOOP,'Alpha')
d60 1
a60 1
     &	    'First point defining rotation axis X, Y')
d62 1
a62 1
     &	    'First point defining rotation axis Z')
d64 1
a64 1
     &	    'Second point defining rotation axis X, Y')
d66 1
a66 1
     &	    'Second point defining rotation axis Z')
d71 1
a71 1
C
d76 1
a76 1
C
d80 1
@


1.10
log
@*** empty log message ***
@
text
@d3 1
a3 1
C $$ RT3L.FOR
d17 4
a20 7
C
C $$ RT3L.FOR
C
C
      SUBROUTINE ROTAL3(MAXMEM)
      INCLUDE 'CMBLOCK.INC' 
#ifdef SP_F90
d24 3
a26 6
#else
      DIMENSION Q(1)
      POINTER   (IPQ,Q) 
#endif
      LOGICAL  RUNTIME
      COMMON   BUF(1024),X1(3),X2(3),BAF(1)
d30 1
d32 1
d34 2
a35 1
C  3-D  ROTATION
d38 1
d49 3
a51 3
#ifdef SP_F90
         Q = >IPQ
#endif
d60 1
a60 1
     &	'First point defining rotation axis X, Y')
d62 1
a62 1
     &	'First point defining rotation axis Z')
d64 1
a64 1
     &	'Second point defining rotation axis X, Y')
d66 1
a66 1
     &	'Second point defining rotation axis Z')
d68 1
a68 1
  	CALL  REDLIN(LUN1,Q(1+(J-1)*NSAM),NSAM,J)
d73 1
a73 1
     &	(LUN2,Q(1),Q(KK),NSAM,NROW,NSLICE,X1,X2,ALPHA)
d80 1
@


1.9
log
@*** empty log message ***
@
text
@d75 1
a75 1
     &	(LUN2,Q,Q(KK),NSAM,NROW,NSLICE,X1,X2,ALPHA)
@


1.8
log
@*** empty log message ***
@
text
@d34 2
a35 2
      CHARACTER *81 FILNAM
      CHARACTER *1  NULL
a36 2
CNO_SAVE

a37 1
	
d77 1
a77 1
      if (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'RT 3L',IRTFLG) 
@


1.7
log
@f90 alloc
@
text
@d32 1
a32 1
      COMMON   BUF(1024),X1(3),X2(3),KAF(1)
d48 1
a48 1
      CALL CHKMEM( MEMWANT, KAF, MAXMEM-(1030), 
@


1.6
log
@R
@
text
@d23 5
d30 1
d53 4
a56 1
         ENDIF
d80 1
a80 1
      if (runtime) CALL ALLOCIT(0,RUNTIME,IPQ,'RT 3L',IRTFLG) 
@


1.5
log
@*** empty log message ***
@
text
@d38 1
a38 1
      CALL OPENFB(BUF,FILNAM,LUN1,NSAM,NROW,'R',NF,NSLICE)
@


1.4
log
@memwant instead of memtot
@
text
@d63 3
a65 2
	DO  101  J=1,NROW*NSLICE
101	CALL  REDLIN(LUN1,Q(1+(J-1)*NSAM),NSAM,J)
@


1.3
log
@use chkmem instead of allocit call
@
text
@d42 1
a42 1
      CALL CHKMEM(MEMTOT, KAF, MAXMEM-(1030), 
@


1.2
log
@OK.
@
text
@d22 6
a27 9
      INCLUDE 'CMBLOCK.INC'
#ifdef SP_ALLOC
         COMMON          BUF(1024),X1(3),X2(3)
         DIMENSION Q(1)
         POINTER   (IPQ,Q) 
         LOGICAL         RUNTIME
#else
      COMMON          BUF(1024),X1(3),X2(3),Q(1)
#endif
d32 1
d34 1
d41 4
a44 7
        MEMWANT=NSAM*(NROW*NSLICE+1)
#ifdef SP_ALLOC
         CALL ALLOCIT(MEMWANT,RUNTIME,IPQ,'RT 3L',IRTFLG)
         IF(.NOT.RUNTIME)  THEN
#else
        IF(MEMWANT.GT.MAXMEM) THEN
#endif
d69 2
a70 4
4	CONTINUE
#ifdef SP_ALLOC
      CALL ALLOCIT(0,RUNTIME,IPQ,'RT 3L',IRTFLG)
#endif
@


1.1
log
@Initial revision
@
text
@d58 1
a58 1
	CALL  RDPRM(PSI,NLOOP,ILOOP,'Alpha')
@
