head	1.17;
access;
symbols
	healthdept_2018:1.17
	pre_getangas:1.13
	GPL2010:1.13
	pre_GPL2010:1.12
	pre_var_equation:1.12
	pre_fftwrings:1.12
	pre_opfiles:1.12
	src:1.12
	best-code:1.12
	x-named-regs:1.12
	x:1.12
	v13-00:1.12
	pre_GPL:1.11
	prec_CA:1.9
	noindx:1.7
	Bproc:1.4
	oct21:1.2;
locks; strict;
comment	@c @;


1.17
date	2018.10.03.14.51.09;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2014.01.12.18.57.19;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2012.10.09.14.01.31;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2011.11.30.13.14.07;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2010.06.24.13.27.14;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.17.21.07.40;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2004.11.05.16.02.27;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2004.05.28.19.22.04;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2003.07.08.18.04.20;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.08.15.34.39;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.11.14.09.05;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.19.20.00.52;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.19.19.50.37;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.27.21.40.14;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	99.12.07.16.35.39;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	99.10.20.14.22.46;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	99.10.19.21.11.13;	author pawel;	state Exp;
branches;
next	;


desc
@VO DA
@


1.17
log
@email_health_dept
@
text
@cp
C ++********************************************************************
C                                                                      *
C VODA.F                                                               *
C                   OPENDOC PARAMETERS CHANGED   DEC 2000 ARDEAN LEITH *
C                   OPENDOC LUN &LUNDOCWRTDAT    JUL 2003 ARDEAN LEITH *                                                  *
C                   REMOVED SORTI                NOV 2011 ARDEAN LEITH *                                                  *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2011  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  VODA   UNDOCUMENTED OPERATION!! al oct 2012                                                             *
C                                                                      *
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

	SUBROUTINE VODA

	INCLUDE 'CMBLOCK.INC'
	INCLUDE 'CMLIMIT.INC'

	PARAMETER (QUADPI = 3.14159265358979323846264)
	PARAMETER (DGR_TO_RAD = (QUADPI/180))
	PARAMETER (NDLI = 3)

	DIMENSION     DLIST(NDLI)

	REAL, ALLOCATABLE, DIMENSION(:,:) ::     REFA,VECTOR,X
	INTEGER, ALLOCATABLE, DIMENSION(:,:) ::  LISTA
	INTEGER, ALLOCATABLE, DIMENSION(:) ::    KALC,INGROUP
	INTEGER    ::                            X89
	LOGICAL    ::                            NEWFILE
	CHARACTER(LEN=MAXNAM) ::                 FINP,FINPAT,DOCFIL

	DATA  NDOCT/55/

C       REFERENCE ANGLES FILE
        CALL OPENDOC(DOCFIL,.TRUE.,NLETI,NDOCT,NDOC,.TRUE.,
     &              'REFERENCE ANGLES',
     &              .TRUE.,.FALSE.,.FALSE.,NEWFILE,IRTFLG)
	IF (IRTFLG .NE. 0) RETURN

	CALL LUNDOCINFO(NDOC,NUMREF,MAXCOLS,KEYUSED,.FALSE.,IRTFLG)
	IF (IRTFLG .NE. 0) RETURN

C       1 - THETA
C       2 - PHI
	ALLOCATE(REFA(2,NUMREF))

C       READS COL 1 & 2 INTO REFA
        CALL LUNDOCREDSLC(NDOC,.FALSE.,IDUM,REFA, 2,NUMREF,
     &                  .TRUE.,.FALSE., 1,2, 1,NUMREF, 
     &                  NGOTY, MAXGOTY,IRTFLG)
	CLOSE(NDOCT)
        IF (IRTFLG .NE. 0) GOTO 9999

C       CHANGE ALL ANGLES TO RADIANS
	REFA = REFA*DGR_TO_RAD

C       NEW ANGLES FILE
	CALL OPENDOC(DOCFIL,.TRUE.,NLETI,NDOCT,NDOC,.FALSE.,
     &       'ANGLES TO BE ASSIGNED',
     &       .TRUE.,.FALSE.,.FALSE.,NEWFILE,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9999

	CALL LUNDOCINFO(NDOC,NUMA,MAXCOLS,KEYUSED,.FALSE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9999

	ALLOCATE(X(3,NUMA))
        CALL LUNDOCREDSLC(NDOC,.FALSE.,IDUM,X,2,NUMA,
     &                  .TRUE., .FALSE., 1,2, 1,NUMA, 
     &                   NGOTY,MAXGOTY, IRTFLG)
	CLOSE(NDOCT)
        IF (IRTFLG .NE. 0) GOTO 9999

C       CHANGE ALL ANGLES TO RADIANS
	X = X*DGR_TO_RAD

	ALLOCATE(VECTOR(3,NUMA))
	ALLOCATE(KALC(NUMA))
	ALLOCATE(INGROUP(NUMA))

C       LENGTH OF AUXILIARY LIST IS SET TO NUMA
	LENI = NUMA
	ALLOCATE(LISTA(2,LENI))

C       CHANGE TO NORMAL VECTOR
        VECTOR(1,1:NUMA) = COS(X(2,1:NUMA)) * SIN(X(1,1:NUMA)) 
        VECTOR(2,1:NUMA) = SIN(X(2,1:NUMA)) * SIN(X(1,1:NUMA)) 
        VECTOR(3,1:NUMA) = COS(X(1,1:NUMA)) 

	CALL  RDPRM(OVERLAP,NOT_USED,
     &	     'OVERLAP BETWEEN ANGULAR ZONES (IN DEGREES)')

C       CHANGE TO RADIANS, 
C       DIVIDE BY TWO, AS THE BORDER IS +/- OVERLAP/2 IN EACH DIRECTION
	OVERLAP=COS(OVERLAP*DGR_TO_RAD/2.0)

	DO I=1,NUMA
	  X51 = 0.0
	  DO J=1,NUMREF 
	     X84  = COS(REFA(2,J))*SIN(REFA(1,J)) 
	     X85  = SIN(REFA(2,J))*SIN(REFA(1,J))
	     X86  = COS(REFA(1,J)) 
	     DISD = VECTOR(1,I)*X84+VECTOR(2,I)*X85+VECTOR(3,I)*X86
	     IF (DISD .GT. X51) THEN
	        X51 = DISD
	        X89 = J 
	     ENDIF
	  ENDDO
C         BELONGS TO THIS ONE: SMALLEST ANGLE
	  KALC(I) = X89
        ENDDO

	JODI = 0
	IF (OVERLAP .LT. 1.0)  THEN
C          FIND BORDER CASES, THEY HAVE TO BE WITHIN OVERLAP OF AN 
C          OBJECT IN THE CLASS
	   DO I=1,NUMA-1
	      DO J=I+1,NUMA
	         IF (KALC(I) .NE. KALC(J)) THEN
	            IF (DOT_PRODUCT(VECTOR(:,I),VECTOR(:,J)) .GE. 
     &                 OVERLAP) THEN
C                      PUT OBJECT I FROM GROUP KALC(I) ON A BORDER LIST OF GROUP KALC(J)
C                      AND VICE VERSA
C                      CHECK WHETHER ASSIGNEMENT HAS ALREADY BEEN MADE.
                       IF (JODI .GT. 0)  THEN
                          DO K=1,JODI
                            IF (LISTA(1,K).EQ.I .AND. 
     &                        LISTA(2,K).EQ.KALC(J)) GOTO 701
                          ENDDO
                       ENDIF

                      JODI = JODI+1
C                     CHECK THE LENGTH OF THE LIST FOR THE NEXT TWO
	              IF (JODI+1 .GT. LENI) THEN
	                 CALL ERRT(101,'AUXILIARY LIST TOO SHORT!',NE)
                         GOTO 9999
                      ENDIF
                      LISTA(1,JODI) = I
                      LISTA(2,JODI) = KALC(J)

701                   CONTINUE
	              DO K=1,JODI
	                 IF (LISTA(1,K).EQ.J .AND. 
     &                       LISTA(2,K).EQ.KALC(I)) GOTO 702
	              ENDDO
	              JODI=JODI+1
                      LISTA(1,JODI) = J
                      LISTA(2,JODI) = KALC(I)

702	              CONTINUE
                   ENDIF
                ENDIF
	     ENDDO
	   ENDDO  
	ENDIF

C       GET OUTPUT FILE NAME TEMPLATE 
	NMAX = 0
	CALL  FILSEQP(FINPAT,NLET,IDUML,NMAX,IDUM,
     &               'TEMPLATE FOR SELECTION DOC',IRTFLG)

C       SELECT OBJECTS FOR EACH GROUP
	DO J=1,NUMREF
	   LOBJ = 0
	   DO  I=1,NUMA
C             PUT OBJECT FROM GROUP J ON THE LIST
	      IF (KALC(I) .EQ. J)  THEN
	         LOBJ          = LOBJ+1
	         INGROUP(LOBJ) = I
	     ENDIF
	   ENDDO

C          ADD BORDER OBJECTS TO THE GROUP.
	   IF (JODI .GT. 0)  THEN
	     DO  K=1,JODI
	       IF (LISTA(2,K) .EQ. J) THEN
	          LOBJ          = LOBJ+1
	          INGROUP(LOBJ) = LISTA(1,K)
	       ENDIF
	     ENDDO
	   ENDIF

	   IF (LOBJ .GT. 0)  THEN
C             SAVE IN DOC FILE
	      IF (LOBJ.GT.1) CALL SORTI(INGROUP,LOBJ)
	      CALL FILGET(FINPAT,FINP,NLET,J,INTFLAG)
 
              CALL OPENDOC(FINP,.TRUE.,NLET,NDOCT,NDOC,.FALSE.,' ',
     &              .FALSE.,.FALSE.,.TRUE.,NEWFILE,IRTFLG)
	      IF (IRTFLG .NE. 0) GOTO 9999

	      DO I=1,LOBJ
	         IAP      = MIN0(I-1,1)
	         DLIST(1) = I
	         DLIST(2) = INGROUP(I)
                 CALL LUNDOCWRTDAT(NDOC,IKEY,DLIST,2,IRTFLG)
	     ENDDO
	     CLOSE(NDOCT)
	  ENDIF
	ENDDO 

9999    IF (ALLOCATED(REFA))   DEALLOCATE(REFA)
        IF (ALLOCATED(VECTOR)) DEALLOCATE(VECTOR)
        IF (ALLOCATED(X))      DEALLOCATE(X)
        IF (ALLOCATED(LISTA))  DEALLOCATE(LISTA)
        IF (ALLOCATED(KALC))   DEALLOCATE(KALC)
        IF (ALLOCATED(INGROUP))DEALLOCATE(INGROUP)
        CLOSE(NDOCT)

	END
@


1.16
log
@enter
@
text
@d14 1
a14 1
C=* Email: spider@@wadsworth.org                                        *
@


1.15
log
@undocumented op
@
text
@d184 1
a184 1
     &               'ENTER TEMPLATE FOR SELECTION DOC',IRTFLG)
@


1.14
log
@removed sorti.f into own file
@
text
@d30 1
a30 1
C  VODA                                                                *
@


1.13
log
@GPL_2010
@
text
@d1 1
a1 1

d5 3
a7 2
C                   OPENDOC PARAMETERS CHANGED DEC 2000 ARDEAN LEITH
C                   OPENDOC LUN &LUNDOCWRTDAT  JUL 2003 ARDEAN LEITH                                                  *
d12 1
a12 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
a234 41


C     ------------------- SORTI ---------------------------------------

      SUBROUTINE SORTI(RA,N)
      INTEGER RA(N),RRA
      L=N/2+1
      IR=N
10    CONTINUE
        IF (L.GT.1) THEN
           L   = L-1
           RRA = RA(L)
        ELSE
           RRA    = RA(IR)
           RA(IR) = RA(1)
           IR     = IR-1
           IF (IR.EQ.1) THEN
              RA(1) = RRA
              RETURN
           ENDIF
        ENDIF

        I = L
        J = L+L
20      IF (J.LE.IR) THEN
          IF (J.LT.IR) THEN
            IF (RA(J) .LT. RA(J+1))J=J+1
          ENDIF
          IF (RRA .LT. RA(J)) THEN
            RA(I) = RA(J)
            I = J
            J = J+J
          ELSE
            J = IR+1
          ENDIF
          GO TO 20
        ENDIF

        RA(I) = RRA
        GO TO 10
      END
@


1.12
log
@GPL License fixed
@
text
@a7 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d9 5
a13 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d15 1
a15 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.11
log
@cvs was not latest from oldsrc
@
text
@d8 23
a30 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.10
log
@lundocredslc bug
@
text
@d30 1
a30 1
	PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
d41 1
a41 1
	CHARACTER(LEN=MAXNAM) ::                  FINP,FINPAT,DOCFIL
d45 1
d58 1
d68 1
d167 1
d169 1
a169 1
	CALL  FILSEQP(FINPAT,NLET,ILIST,NMAX,NIMA,
a171 1

d194 1
d196 1
a196 1
	      CALL  FILGET(FINPAT,FINP,NLET,J,INTFLAG)
d198 1
a198 1
              CALL OPENDOC(FINP,.FALSE.,NLET,NDOCT,NDOC,.TRUE.,' ',
a206 1
C                CALL SAVDN1(NDOUT,FINP,DLIST,2,I-1,IAP)
@


1.9
log
@endif out of order
@
text
@d57 3
a59 2
        CALL LUNDOCREDSLC(NDOC,.FALSE.,IDUM,REFA,2,NUMREF,
     &                  .TRUE., 1,2, 1,NUMREF, NGOTY,IRTFLG)
d76 2
a77 1
     &                  .TRUE., 1,2, 1,NUMA, NGOTY,IRTFLG)
@


1.8
log
@opendoc incore paramete
@
text
@d103 1
a103 1
	  X51=0.0
d105 8
a112 8
	    X84=COS(REFA(2,J))*SIN(REFA(1,J)) 
	    X85=SIN(REFA(2,J))*SIN(REFA(1,J))
	    X86=COS(REFA(1,J)) 
	    DISD=VECTOR(1,I)*X84+VECTOR(2,I)*X85+VECTOR(3,I)*X86
	    IF (DISD.GT.X51) THEN
	       X51=DISD
	       X89=J 
	    ENDIF
d115 1
a115 1
	  KALC(I)=X89
d118 4
a121 6
	JODI=0
	IF (OVERLAP.LT.1.0)  THEN

C          FIND BORDER CASES, THEY HAVE TO BE WITHIN OVERLAP OF AN OBJECT IN
C          THE CLASS

d124 3
a126 3
	         IF (KALC(I).NE.KALC(J))  THEN
	            IF (DOT_PRODUCT(VECTOR(:,I),VECTOR(:,J)).GE.OVERLAP)
     &              THEN
d130 15
a144 15
                       IF(JODI.GT.0)  THEN
                       DO K=1,JODI
                         IF (LISTA(1,K).EQ.I .AND. LISTA(2,K).EQ.KALC(J)) 
     &                   GOTO 701
                       ENDDO
                    ENDIF
                    JODI=JODI+1
C                   CHECK THE LENGTH OF THE LIST FOR THE NEXT TWO
	            IF (JODI+1.GT.LENI)  THEN
	               CALL ERRT(101,' AUXILARY LIST TOO SHORT!',NE)
                       GOTO 9999
                    ENDIF
                ENDIF
                LISTA(1,JODI) = I
                LISTA(2,JODI) = KALC(J)
d146 8
a153 7
701             CONTINUE
	        DO K=1,JODI
	        IF(LISTA(1,K).EQ.J .AND. LISTA(2,K).EQ.KALC(I)) GOTO 702
	        ENDDO
	        JODI=JODI+1
                LISTA(1,JODI) = J
                LISTA(2,JODI) = KALC(I)
d155 5
a159 6
702	        CONTINUE
             ENDIF
          ENDIF
	 ENDDO
	ENDDO  
C         
@


1.7
log
@nloop,iloop_removed
@
text
@d6 1
a6 1
C                                                                      *
d9 1
a9 1
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
d16 1
a16 1
C  VODA                                                                   *
a21 1
C        0         2         3         4         5         6         7 *
d25 1
a25 1
	SUBROUTINE  VODA
d28 1
d32 2
a33 1
	PARAMETER     (NDLI = 3)
d35 2
a36 1
	REAL, ALLOCATABLE, DIMENSION(:,:) ::     REFA,VECTOR
d39 3
a41 3
	INTEGER       X89
	LOGICAL       NEWFILE
	CHARACTER*80  FINP,FINPAT,DOCFIL
d43 1
a43 1
	DATA  NDOC,NDOUT/55,56/
d45 2
a46 1
	CALL OPENDOC(DOCFIL,.TRUE.,NLETI,NDOC,.TRUE.,'REFERENCE ANGLES',
d52 3
a54 2
C        1 - THETA
C        2 - PHI
d56 5
a60 7
	DO I=1,NUMREF
	   LERR=-1
	   CALL  UNSAV(DOCFIL,1,NDOC,I,DLIST,3,LERR,I-1)
	   REFA(1,I)=DLIST(2)
	   REFA(2,I)=DLIST(3)
	ENDDO
	CLOSE(NDOC)
d62 1
a62 1
C       CHANGE TO RADIANS
d65 1
a65 1
	CALL OPENDOC(DOCFIL,.TRUE.,NLETI,NDOC,.FALSE.,
d68 1
a68 1
	IF (IRTFLG .NE. 0) RETURN
d71 10
a80 1
	IF (IRTFLG .NE. 0) RETURN
d85 1
d87 1
a87 1
	LENI=NUMA
d89 5
a93 14
	DO I=1,NUMA
	   LERR=-1
	   CALL  UNSAV(DOCFIL,1,NDOC,I,DLIST,3,LERR,I-1)
	   X22=DLIST(2)
	   X23=DLIST(3)
C          CHANGE TO RADIANS
           X22=X22*DGR_TO_RAD
           X23=X23*DGR_TO_RAD
C          CHANGE TO NORMAL VECTOR
           VECTOR(1,I)=COS(X23)*SIN(X22) 
           VECTOR(2,I)=SIN(X23)*SIN(X22) 
           VECTOR(3,I)=COS(X22) 
	ENDDO
	CLOSE(NDOC)
d97 1
d99 1
a99 1
C        DIVIDE BY TWO, AS THE BORDER IS +/- OVERLAP/2 IN EACH DIRECTION
d103 14
a116 14
	 X51=0.0
	 DO J=1,NUMREF 
	  X84=COS(REFA(2,J))*SIN(REFA(1,J)) 
	  X85=SIN(REFA(2,J))*SIN(REFA(1,J))
	  X86=COS(REFA(1,J)) 
	  DISD=VECTOR(1,I)*X84+VECTOR(2,I)*X85+VECTOR(3,I)*X86
	  IF(DISD.GT.X51) THEN
	  X51=DISD
	  X89=J 
	  ENDIF
	 ENDDO
C       BELONGS TO THIS ONE: SMALLEST ANGLE
	KALC(I)=X89
	ENDDO
d119 4
a122 1
	if(OVERLAP.LT.1.0)  THEN
d124 31
a154 2
C  FIND BORDER CASES, THEY HAVE TO BE WITHIN OVERLAP OF AN OBJECT IN
C   THE CLASS
d156 3
a158 30
	DO I=1,NUMA-1
	 DO J=I+1,NUMA
	 IF(KALC(I).NE.KALC(J))  THEN
	  IF(DOT_PRODUCT(VECTOR(:,I),VECTOR(:,J)).GE.OVERLAP)  THEN
C  PUT OBJECT I FROM GROUP KALC(I) ON A BORDER LIST OF GROUP KALC(J)
C  AND VICE VERSA
C  CHECK WHETHER ASSIGNEMENT HAS ALREADY BEEN MADE.
	   IF(JODI.GT.0)  THEN
	    DO K=1,JODI
	    IF(LISTA(1,K).EQ.I .AND. LISTA(2,K).EQ.KALC(J)) GOTO 701
	    ENDDO
	   ENDIF
	   JODI=JODI+1
C CHECK THE LENGTH OF THE LIST FOR THE NEXT TWO
	   IF(JODI+1.GT.LENI)  THEN
	    WRITE(NOUT,*)  ' AUXILARY LIST TOO SHORT!'
	    STOP
	   ENDIF
	   LISTA(1,JODI)=I
	   LISTA(2,JODI)=KALC(J)
701	   CONTINUE
	    DO K=1,JODI
	    IF(LISTA(1,K).EQ.J .AND. LISTA(2,K).EQ.KALC(I)) GOTO 702
	    ENDDO
	   JODI=JODI+1
	   LISTA(1,JODI)=J
	   LISTA(2,JODI)=KALC(I)
702	   CONTINUE
	  ENDIF
	 ENDIF
d166 3
a168 1
     &      'ENTER TEMPLATE FOR SELECTION DOC',IRTFLG)
d171 17
a187 14
	 LOBJ=0
	 DO  I=1,NUMA
C         PUT OBJECT FROM GROUP J ON THE LIST
	 IF(KALC(I).EQ.J)  THEN
	  LOBJ=LOBJ+1
	  INGROUP(LOBJ)=I
	 ENDIF
	 ENDDO
C        ADD BORDER OBJECTS TO THE GROUP.
	 IF(JODI.GT.0)  THEN
	  DO  K=1,JODI
	   IF(LISTA(2,K).EQ.J) THEN
	    LOBJ=LOBJ+1
	    INGROUP(LOBJ)=LISTA(1,K)
d189 18
a206 13
	  ENDDO
	 ENDIF
	IF(LOBJ.GT.0)  THEN
	 IF(LOBJ.GT.1)  CALL SORTI(INGROUP,LOBJ)
	 CALL  FILGET(FINPAT,FINP,NLET,J,INTFLAG)
	  DO I=1,LOBJ
	   IAP=MIN0(I-1,1)
	   DLIST(1)=I
	   DLIST(2)=INGROUP(I)
	   CALL  SAVDN1(NDOUT,FINP,DLIST,2,I-1,IAP)
	  ENDDO
	 CLOSE(NDOUT)
	ENDIF
d208 9
d220 1
d227 3
a229 3
        IF(L.GT.1)THEN
          L=L-1
          RRA=RA(L)
d231 7
a237 7
          RRA=RA(IR)
          RA(IR)=RA(1)
          IR=IR-1
          IF(IR.EQ.1)THEN
            RA(1)=RRA
            RETURN
          ENDIF
d239 6
a244 5
        I=L
        J=L+L
20      IF(J.LE.IR)THEN
          IF(J.LT.IR)THEN
            IF(RA(J).LT.RA(J+1))J=J+1
d246 4
a249 4
          IF(RRA.LT.RA(J))THEN
            RA(I)=RA(J)
            I=J
            J=J+J
d251 1
a251 1
            J=IR+1
d253 1
a253 1
        GO TO 20
d255 3
a257 2
        RA(I)=RRA
      GO TO 10
@


1.6
log
@typo (missing ,)
@
text
@d92 1
a92 1
	CALL  RDPRM(OVERLAP,NLOOP,ILOOP,
@


1.5
log
@opendoc has prompt parameter now
@
text
@d34 1
a34 1
	REAL, ALLOCATABLE, DIMENSION(:,:) ::  REFA,VECTOR
d36 1
a36 1
	INTEGER, ALLOCATABLE, DIMENSION(:) ::  KALC,INGROUP
d64 1
a64 1
     &       'ANGLES TO BE ASSIGNED'
@


1.4
log
@corrected for lobj=1
@
text
@d4 2
a6 1
C                                                                      *
d16 1
a16 1
C                                                                      *
d29 1
d34 5
a38 5
	real, allocatable, dimension(:,:) ::  refa,vector
	integer, allocatable, dimension(:,:) ::  lista
	integer, allocatable, dimension(:) ::  kalc,ingroup
	integer  x50,x89
	LOGICAL  NEWFILE
d40 1
a40 1
	CHARACTER*1   NULL
d42 3
a44 5
C
	NULL = CHAR(0)
	CALL  FILERD(DOCFIL,NLETI,NULL,'REFERENCE ANGLES',IRTFLG)
	CALL OPENDOC(DOCFIL,.TRUE.,NLET,NDOC,.FALSE.,
     &   .TRUE.,.FALSE.,.FALSE.,NEWFILE,IRTFLG)
d46 1
d49 17
a65 17
C 1 - theta
C 2 - phi
	ALLOCATE(refa(2,numref))
	do i=1,numref
	 LERR=-1
	 CALL  UNSAV(DOCFIL,1,NDOC,I,DLIST,3,LERR,I-1)
	 refa(1,i)=DLIST(2)
	 refa(2,i)=DLIST(3)
	enddo
	close(NDOC)
c change to radians
	refa=refa*DGR_TO_RAD
C
	NULL = CHAR(0)
	CALL  FILERD(DOCFIL,NLETI,NULL,'ANGLES TO BE ASSIGNED',IRTFLG)
	CALL OPENDOC(DOCFIL,.TRUE.,NLET,NDOC,.FALSE.,
     &   .TRUE.,.FALSE.,.FALSE.,NEWFILE,IRTFLG)
d67 1
d70 22
a91 21
	ALLOCATE(vector(3,numa))
	ALLOCATE(kalc(numa))
	ALLOCATE(ingroup(numa))
C Length of auxiliary list is set to numa
	leni=numa
	ALLOCATE(lista(2,leni))
	do i=1,numa
	 LERR=-1
	 CALL  UNSAV(DOCFIL,1,NDOC,I,DLIST,3,LERR,I-1)
	 x22=DLIST(2)
	 x23=DLIST(3)
c change to radians
	 x22=x22*DGR_TO_RAD
	 x23=x23*DGR_TO_RAD
C  change to normal vector
	 vector(1,i)=COS(x23)*SIN(x22) 
	 vector(2,i)=SIN(x23)*SIN(x22) 
	 vector(3,i)=COS(x22) 
	enddo
	close(NDOC)
C
d93 22
a114 22
     &	'OVERLAP BETWEEN ANGULAR ZONES (IN DEGREES)')
c change to radians, 
c  divide by two, as the border is +/- OVERLAP/2 in each direction
	OVERLAP=cos(overlap*DGR_TO_RAD/2.0)
C	
	do i=1,numa
	 x51=0.0
	 do j=1,numref 
	  x84=COS(refa(2,j))*SIN(refa(1,j)) 
	  x85=SIN(refa(2,j))*SIN(refa(1,j))
	  x86=COS(refa(1,j)) 
	  disd=vector(1,i)*x84+vector(2,i)*x85+vector(3,i)*x86
	  if(disd.gt.x51) then
	  x51=disd
	  x89=j 
	  endif
	 enddo
c belongs to this one: smallest angle
	kalc(i)=x89
	enddo
C
	jodi=0
d116 36
a151 36
C
C  Find border cases, they have to be within OVERLAP of an object in
C   the class
C
	do i=1,numa-1
	 do j=i+1,numa
	 if(kalc(i).ne.kalc(j))  then
	  if(dot_product(vector(:,i),vector(:,j)).ge.OVERLAP)  then
c  Put object i from group kalc(i) on a border list of group kalc(j)
c  and vice versa
C  Check whether assignement has already been made.
	   if(jodi.gt.0)  then
	    do k=1,jodi
	    if(lista(1,k).eq.i .and. lista(2,k).eq.kalc(j)) goto 701
	    enddo
	   endif
	   jodi=jodi+1
C Check the length of the list for the next two
	   if(jodi+1.gt.leni)  then
	    WRITE(NOUT,*)  ' Auxilary list too short!'
	    stop
	   endif
	   lista(1,jodi)=i
	   lista(2,jodi)=kalc(j)
701	   continue
	    do k=1,jodi
	    if(lista(1,k).eq.j .and. lista(2,k).eq.kalc(i)) goto 702
	    enddo
	   jodi=jodi+1
	   lista(1,jodi)=j
	   lista(2,jodi)=kalc(i)
702	   continue
	  endif
	 endif
	 enddo
	enddo  
d154 1
a154 1
C
d158 23
a180 23
c select objects for each group
	do j=1,numref
	 lobj=0
	 do  i=1,numa
C Put object from group j on the list
	 if(kalc(i).eq.j)  then
	  lobj=lobj+1
	  ingroup(lobj)=i
	 endif
	 enddo
c  Add border objects to the group.
	 if(jodi.gt.0)  then
	  do  k=1,jodi
	   if(lista(2,k).eq.j) then
	    lobj=lobj+1
	    ingroup(lobj)=lista(1,k)
	   endif
	  enddo
	 endif
	if(lobj.gt.0)  then
	 if(lobj.gt.1)  call sorti(ingroup,lobj)
	 CALL  FILGET(FINPAT,FINP,NLET,j,INTFLAG)
	  do i=1,lobj
d183 1
a183 1
	   DLIST(2)=ingroup(i)
d185 1
a185 1
	  enddo
d187 6
a192 4
	endif
	enddo 
	end
C
@


1.3
log
@header
@
text
@d175 1
a175 1
	 call sorti(ingroup,lobj)
@


1.2
log
@*** empty log message ***
@
text
@d1 24
d26 1
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
	CALL OPENDOC(DOCFIL,.FALSE.,NLET,NDOC,.FALSE.,
d38 1
a38 1
	CALL OPENDOC(DOCFIL,.FALSE.,NLET,NDOC,.FALSE.,
a92 1
	if(mod(i,1000).eq.0)  print  *,i,jodi
d156 1
a156 1
	   CALL  SAVDN1(NDOUT,FINP,DLIST,NDLI,I-1,IAP)
a160 2
	
	stop
a161 1

@
