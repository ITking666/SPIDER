head	1.28;
access;
symbols
	pre_mrcs:1.28
	healthdept_2018:1.28
	pre_getangas:1.26
	GPL2010:1.26
	pre_GPL2010:1.25
	pre_var_equation:1.24
	pre_fftwrings:1.24
	pre_opfiles:1.24
	src:1.24
	best-code:1.23
	named-reg:1.21
	x-named-regs:1.20
	x:1.20
	v13-00:1.19
	pre_GPL:1.18
	prec_CA:1.17
	noindx:1.17;
locks; strict;
comment	@c @;


1.28
date	2018.10.03.14.34.23;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2015.06.15.13.43.57;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2010.06.24.13.27.03;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2010.06.01.15.49.56;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2006.11.01.19.21.22;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2005.12.22.18.25.19;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2005.12.22.17.00.04;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2005.12.12.15.30.38;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2005.11.15.21.51.23;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.17.21.05.24;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2003.11.24.17.24.40;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2002.09.13.19.33.56;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2002.09.13.18.47.03;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2002.07.02.18.06.01;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.02.15.31.15;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2002.07.01.19.21.40;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.28.16.23.25;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.26.20.30.36;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.26.19.52.55;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.05.13.58.01;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.05.12.36.10;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2001.02.22.14.28.20;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.08.17.07.20;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.01.19.57.22;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.23.15.44.39;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.10.17.13.06;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.05.20.49.22;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.04.17.42.47;	author leith;	state Exp;
branches;
next	;


desc
@split from rdpr
@


1.28
log
@email_health_dept
@
text
@

C++*************************************************************************
C
C  SUBSYMPAR.F    CREATED  FROM SPIDER.F         Sep 2000  ARDEAN LEITH 
C                 MULTIPLE VARIABLE SUBSTITUTION JAN 2001  ARDEAN LEITH
C                 ALPHABETICAL VARIABLES         JUN 2002  ARDEAN LEITH
C                 NESTED VARIABLES               SEP 2002  ARDEAN LEITH
C                 [] DEFAULT FOR VARIABLES       OCT 2005  ARDEAN LEITH
C                 CVAR                           OCT 2006  ARDEAN LEITH
C                 DONOTRECURSE
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2015  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    SUBSYMPAR(INPUT,OUTPUT,NCHAR,ILEVELT,IRTFLG)
C
C    PURPOSE:       RUN-TIME VARIABLE SUBSTITUTION FOR ALL [ID] IN
C                   INPUT STRING AT THIS STACK LEVEL
C
C    PARAMETERS:    INPUT     INPUT LINE CONTAINING [STRING..] (SENT)
C                   OUTPUT    SUBSTITUTED OUTPUT LINE         (RET.)
C                   NCHAR     LAST NON_BLANK CHAR BEFORE ;    (RET.)
C                   ILEVELT   NESTING LEVEL                   (SENT)
C                   IRTFLG    RETURN FLAG (0 IS NORMAL)       (RETURNED)
C   
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

      SUBROUTINE SUBSYMPAR(INPUT,OUTPUT,NCHAR,ILEVELT,IRTFLG)

      INCLUDE 'CMLIMIT.INC'

      CHARACTER(LEN=*), INTENT(IN)  :: INPUT
      CHARACTER(LEN=*), INTENT(OUT) :: OUTPUT
      LOGICAL, PARAMETER            :: DONOTRECURSE = .FALSE.

C     FOR ISTOP 
      INTEGER, DIMENSION(MAXPRC) :: IPSTACK,IPNUMSTACK,IPARNUM
      COMMON /QSTR_STUFF1/ ISTOP,ITI,ITIN,IWHERE,IPSTACK,
     &                     IPNUMSTACK,IPARNUM

      ILEVEL = ILEVELT
      IF (ILEVEL <= 0) ILEVEL = ISTOP

      CALL SYMPAR_SUB(INPUT,OUTPUT,NCHAR,ILEVEL,DONOTRECURSE,IRTFLG)

      END
   
@


1.27
log
@==
@
text
@d18 1
a18 1
C=* Email: spider@@wadsworth.org                                        *
@


1.26
log
@GPL_2010
@
text
@d16 1
a16 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d62 1
a62 1
      IF (ILEVEL .LE. 0) ILEVEL = ISTOP
@


1.25
log
@CALL SYMPAR_SUB(INPUT,OUTPUT,NCHAR,ILEVEL,DONOTRECURSE
@
text
@d13 1
d15 1
a15 1
C=* Author: J. Frank & A. Leith                                        *
d27 1
a27 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
@


1.24
log
@cvar variables
@
text
@d5 1
a5 1
C  SUBSYMPAR.F -- CREATED 9/8/00 FROM SPIDER.F             ARDEAN LEITH 
d7 5
a11 5
C                 ALPHABETICAL VARIABLES JUNE 2002         ARDEAN LEITH
C                 NESTED VARIABLES SEPT 2002               ARDEAN LEITH
C                 [] DEFAULT FOR VARIABLES OCT 2005        ARDEAN LEITH
C                 CVAR                     OCT 2006        ARDEAN LEITH
C              
d13 5
a17 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d19 1
a19 6
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d24 1
a24 1
C=* This program is distributed in the hope that it will be useful,    *
a27 1
C=*                                                                    *
d29 1
a29 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d53 2
a54 1
 
d63 1
a63 1
      CALL SYMPAR_SUB(INPUT,OUTPUT,NCHAR,ILEVEL,IRTFLG)
@


1.23
log
@<> replacement for indirection in vms op
@
text
@d2 1
d10 1
a53 1
      INCLUDE 'CMBLOCK.INC'
d56 4
a59 7
      CHARACTER(LEN=*)        :: INPUT,OUTPUT
      LOGICAL                 :: ISDIGI,ISCHAR,LOCAL
      CHARACTER(LEN=12)       :: SUBPAT,CSUB
      CHARACTER(LEN=5)        :: SYMPARVAL  = 'X0000'
      INTEGER, DIMENSION(160) :: DONOT

C     FOR LOCAL VARIABLE HANDLING 
a63 14
      INTEGER, DIMENSION(MAXPRC) :: IGOQSTR,IENDQSTR,NREGSTR
      COMMON /QSTR_STUFF2/IGOQSTR,IENDQSTR,NREGSTR

      CHARACTER(LEN=MAXQSTR) :: QSTRQ
      COMMON /QSTR_STUFF3/      QSTRQ

C     FOR GLOBAL VARIABLE HANDLING 
      COMMON /QSTR_STUFF4/IENDQSTRG

      CHARACTER(LEN=MAXQSTRG):: QSTRQG
      COMMON /QSTR_STUFF5/      QSTRQG

      DATA SUBPAT/'{***********'/

a65 87
   
      INOT   = 0     
      LENT   = LEN(INPUT)
      OUTPUT = INPUT
      IDONE  = 0
      IP2N   = INDEX(OUTPUT,']',BACK=.TRUE.)

      DO
C        REPLACE ALL SYMBOL [] SETS IN POSITIONS 1...LENT

C        FIND START AND END OF FIRST VARIABLE STRING IN OUTPUT 
         CALL CHARINSIDE(OUTPUT(1:LENT),'[',']',.FALSE.,.FALSE.,
     &                  IP1,IP2,NCT)

C        GET OUT OF LOOP IF NO SYMBOL SET [] FOUND
         IF (NCT .LE. 0) EXIT

C        FIND SYMBOL STRING FOR SUBSTITUTION.

         IGOQ   = IGOQSTR(ILEVEL)
         IENDQ  = IENDQSTR(ILEVEL)
         IRTFLG = 1

C        <> ARE USED AS SYMBOL ID DELIMITERS IN QSTRQ
         OUTPUT(IP1:IP1) = '<'
         OUTPUT(IP2:IP2) = '>'

         IF (IENDQ .GT. IGOQ) THEN
C           SEARCH FOR THIS LOCAL SYMBOL
            CALL ASSOCARRAY(QSTRQ(IGOQ:IENDQ),OUTPUT(IP1:IP2),
     &                   IGO,IEND,IRTFLG)
            IF (IRTFLG .EQ. 0) THEN
C              COPY CORRESPONDING QSTRQ STRING TO OUTPUT & UPDATE NCHAR
               CALL SUBCHAR(QSTRQ(IGOQ+IGO-1:IGOQ+IEND-1),OUTPUT,
     &                      IP1,IP2,NCHAR,IRTFLG)
            ENDIF
         ENDIF

         IF (IRTFLG .NE. 0 .AND. IENDQSTRG .GT. 0) THEN
C           SEARCH FOR A GLOBAL SYMBOL
            CALL ASSOCARRAY(QSTRQG(:IENDQSTRG),OUTPUT(IP1:IP2),
     &                        IGO,IEND,IRTFLG)
            IF (IRTFLG .EQ. 0) THEN
C             COPY CORRESPONDING QSTRQG STRING TO OUTPUT & UPDATE NCHAR
              CALL SUBCHAR(QSTRQG(IGO:IEND),OUTPUT,IP1,IP2,NCHAR,IRTFLG)
            ENDIF
         ENDIF

C        END OF SUBSTITUTION
         IP2N = IP2N + (IEND - IGO) - (IP2 - IP1)

         IF (IRTFLG .NE. 0) THEN
C           NO SUBSTITUTION, PROBABLY A REGISTER VARIABLE
            INOT          = INOT + 1
            DONOT(INOT)   = IP1
            INOT          = INOT + 1
            DONOT(INOT)   = IP2
         ENDIF

C        NEXT SEARCH IS OVER WHOLE STRING
         LENT  = NCHAR
         IDONE = IDONE + 1
         IF (IDONE .GT. 100000) THEN
            CALL ERRT(102,'RECURSIVE VARIABLE ???? LOOPS',IDONE)
            RETURN
         ENDIF
      ENDDO

C     END SYMBOL SUBSTITUTION 

C     FIX <> BEFORE RETURNING
      IF (INOT .GT. 0) THEN
         DO IV=1,INOT,2
            I = DONOT(IV)
            IF (OUTPUT(I:I) .EQ. '<') THEN
               OUTPUT(I:I) = '['
            ELSE
               CALL ERRT(102,'LOCATION IS NOT <',I)
            ENDIF
            I = DONOT(IV+1)
            IF (OUTPUT(I:I) .EQ. '>') THEN
               OUTPUT(I:I) = ']'
            ELSE
               CALL ERRT(102,'LOCATION IS NOT >',I)
            ENDIF
         ENDDO
      ENDIF
d67 1
a67 2
C     SET NORMAL RETURN FLAG
      IRTFLG = 0
d70 1
a70 82

#ifdef NEVER
            write(6,*) ' '
            write(6,*) 'istop: ',istop
C           write(6,*) qstrqg(:iendqstrg),' -->',output(ip1:ip2)
            write(6,*) 'igoqstr: ',(igoqstr(i),i=1,istop)
            write(6,*) 'iendqstr:',(iendqstr(i),i=1,istop)
            write(6,*) 'qstrq(1:70): ',qstrq(1:70)
            write(6,*) 'qstrq(70): ',qstrq(70:140)

            write(6,*)'orig nchar: ',nchar
            write(6,*)'orig output: ',OUTPUT
            write(6,*)'csub: ',csub
            write(6,*)'iendx: ',iendx
            write(6,*)'igoa: ',igoa,'  nast: ',nast,'  ip2n: ',ip2n
            write(6,*)'igoa: ',igoa,'  nast: ',nast,'  ip2n: ',ip2n
            write(6,*)'final nchar: ',nchar
            write(6,*)'final output: ',OUTPUT
#endif




C++*********************************************************************
C
C  ASSOCARRAY.F                NEW JUNE 2002 ARDEAN LEITH
C
C **********************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
C **********************************************************************
C
C  ASSOCARRAY(LUN,NSAM,NROW,NSLICE,VOL,IRTFLG)
C
C  PARAMETERS:  
C               IRTFLG                                            (RET.)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

      SUBROUTINE ASSOCARRAY(QSTRQ,QFIND,IGO,IEND,IRTFLG)

      INCLUDE 'CMBLOCK.INC'
      INCLUDE 'CMLIMIT.INC'

      CHARACTER(LEN=*), INTENT(IN)  ::      QSTRQ,QFIND
      INTEGER, INTENT(OUT)  ::              IGO,IEND,IRTFLG
      CHARACTER(LEN=MAXNAM+4) ::            TAGEND

      IRTFLG = 1

C     FIND LENGTH OF SEARCH STRING
      LENFIND  = LEN(QFIND)
       
C     FIND STARTING LOCATION OF SEARCH STRING IN QSTRQ
      IGO = INDEX(QSTRQ,QFIND)

C     RETURN IF NO SEARCH STRING IN QSTRQ
      IF (IGO .LE. 0) RETURN

C     FIND START OF ASSOCIATED VALUE 
      IGO    = IGO + LENFIND

C     FIND END OF ASSOCIATED VALUE
      TAGEND = '</' // QFIND(2:LENFIND)
      IEND   = IGO + INDEX(QSTRQ(IGO:),TAGEND(1:LENFIND+1)) - 2 

C     RETURN IF NO ASSOCIATED VALUE OR </QFIND>
      IF (IEND .LT. IGO) RETURN

      IRTFLG = 0

      RETURN
      END




@


1.22
log
@does not stop if no sub
@
text
@d55 5
a59 4
      CHARACTER(LEN=*)  :: INPUT,OUTPUT
      LOGICAL           :: ISDIGI,ISCHAR,LOCAL
      CHARACTER(LEN=12) :: SUBPAT,CSUB
      CHARACTER(LEN=5)  :: SYMPARVAL  = 'X0000'
d82 2
a83 1
        
d132 8
a139 1
cc         IF (IRTFLG .EQ. 1) EXIT
d153 16
a168 4
      DO I=1,NCHAR
        IF (OUTPUT(I:I) .EQ. '<') OUTPUT(I:I) = '['
        IF (OUTPUT(I:I) .EQ. '>') OUTPUT(I:I) = ']'
      ENDDO
a169 1
 
@


1.21
log
@native named registers
@
text
@d55 4
a58 4
      CHARACTER(LEN=*) ::    INPUT,OUTPUT
      LOGICAL  ::            ISDIGI,ISCHAR,LOCAL
      CHARACTER(LEN=12) ::   SUBPAT,CSUB
      CHARACTER(LEN=5) ::    SYMPARVAL  = 'X0000'
d130 1
a130 1
         IF (IRTFLG .EQ. 1) EXIT
@


1.20
log
@named register support
@
text
@d88 1
a88 1
C        REPLACE ALL VARIABLE [] SETS IN POSITIONS 1...LENT
d94 1
a94 1
C        GET OUT OF LOOP IF NO VARIABLE SET [] FOUND
d97 1
a97 1
C        FIND VARIABLE STRING FOR SUBSTITUTION.
d103 1
a103 1
C        <> ARE USED AS VARIABLE ID DELIMITERS IN QSTRQ
d108 1
a108 1
C           SEARCH FOR THIS LOCAL VARIABLE
d116 1
a116 2

        ENDIF
d119 1
a119 1
C           SEARCH FOR A GLOBAL VARIABLE
d128 3
a130 43
         IF (IRTFLG .NE. 0) THEN
C           DID NOT FIND ANY SYMBOL ANYWHERE, ASSUME NEW REGISTER
C           VARIABLE IS WANTED 

            LOCAL = (ILEVEL .GT. 1)
            IF (.NOT. LOCAL) THEN
               CALL ERRT(101,' PGM ERROR IN SUBSYMPAR',NE)
               RETURN
            ELSE
               WRITE(NDAT,*)' CREATING REGISTER VARIABLE: ',
     &                   '[',OUTPUT(IP1+1:IP2-1),']'
               SYMPARVAL(1:1) = 'X'  
            ENDIF

            IREGSTR         = NREGSTR(ILEVEL) + 1
            NREGSTR(ILEVEL) = IREGSTR

C           CONVERT TO REGISTER NOTATION
            CALL INTTOCHAR(IREGSTR,SYMPARVAL(2:5),NC,1)

C           SET SYMBOL FOR THIS REGISTER VARIABLE
            CALL SETSYMPAR(OUTPUT(IP1:IP2),SYMPARVAL(1:NC+1),
     &                     LOCAL,IRTFLG)
            IF (IRTFLG .NE. 0) THEN
               CALL ERRT(100,'SPIDER',NE)
C              STOPS IN ERRT!!
               RETURN
            ENDIF

C           COPY CORRESPONDING SYMPARVAL TO OUTPUT & UPDATE NCHAR
            CALL SUBCHAR(SYMPARVAL(1:NC+1),OUTPUT,IP1,IP2,NCHAR,IRTFLG)
            IF (IRTFLG .NE. 0) THEN
               CALL ERRT(100,'SPIDER',NE)
C              STOPS IN ERRT!!
               RETURN
            ENDIF
            IP2N = IP2N + (NCHAR) - (IP2 - IP1)

         ELSE
C           END OF SUBSTITUTION
            IP2N = IP2N + (IEND - IGO) - (IP2 - IP1)
         ENDIF

d133 1
a133 2
         LENT = NCHAR

d141 1
a141 1
C     END VARIABLE SUBSTITUTION 
d143 5
a147 45
      IF (IDONE .GT. 0) THEN
         IF  (((OUTPUT(IP2N+1:IP2N+1) .EQ. 'X' .OR. 
     &          OUTPUT(IP2N+1:IP2N+1) .EQ. 'x') .AND.
     &         (ISDIGI(OUTPUT(IP2N+2:IP2N+2)))) 
     &       .OR.
     &         (ISCHAR(OUTPUT(NCHAR:NCHAR)) .AND.
     &         (NCHAR-IP2N .EQ. 1 .OR. 
     &         ISDIGI(OUTPUT(IP2N+1:IP2N+1)))))
     &   THEN 
C           ADDED 6/02/83 FOR A FILENAME TERMINATING WITH REG. OR LOOP
C          (E.G. <?>i OR <?>0I OR <?>0?I OR <?>0*I )

C           GET TERMINAL DIGITS OR *** FROM <?>
            IGOA = VERIFY(OUTPUT(1:IP2N),'*',BACK=.TRUE.)+1
            IF (IGOA .EQ. IP2N+1) THEN
C                    NO TERMINAL ASTERICES, USE TERMINAL DIGITS INSTEAD
                     IGOA = VERIFY(OUTPUT(1:IP2N),'0123456789',
     &                            BACK=.TRUE.)+1
                     IF (IGOA .LE. 1) IGOA = NCHAR - 3
            ENDIF

            IF (IGOA .GT. 0) THEN
C              SUBSTITUTE FOR TERMINAL DIGITS OR ***'s
               NAST = IP2N - IGOA + 1

               IF ((OUTPUT(IP2N+1:IP2N+1) .EQ. 'X' .OR. 
     &                     OUTPUT(IP2N+1:IP2N+1) .EQ. 'x') .AND.
     &                    (ISDIGI(OUTPUT(IP2N+2:IP2N+2)))) THEN

C                 SEE HOW MANY DIGITS IN REGISTER (X? or X??)
                  IENDX = IP2N + 2
                  IF (ISDIGI(OUTPUT(IP2N+2:IP2N+2))) IENDX = IP2N + 3

                  CSUB = SUBPAT(1:NAST+1)//OUTPUT(IP2N+1:IENDX)// 
     &                       '}' // CHAR(0) 
                  CALL SUBCHAR(CSUB,OUTPUT,IGOA,IENDX,NCHAR,IRTFLG)
               ELSE
C                 LOOP INDEX
                  OUTPUT = OUTPUT(1:IGOA-1) //SUBPAT(1:NAST+1)// 
     &                     OUTPUT(NCHAR:NCHAR) //  '}'  // CHAR(0)
                  NCHAR = IGOA + NAST + 2               
               ENDIF
            ENDIF
         ENDIF
      ENDIF
d149 1
a152 1
      RETURN
@


1.19
log
@GPL License fixed
@
text
@d2 1
a2 1
C++*********************************************************************
d5 4
a8 3
C                 MULTIPLE PARAMETER SUBSTITUTION JAN 2001 ARDEAN LEITH
C                 ALPHABETICAL PARAMETERS JUNE 2002        ARDEAN LEITH
C                 NESTED PARAMETERS SEPT 2002              ARDEAN LEITH
d38 1
a38 1
C    PURPOSE:       RUN-TIME SYMBOLIC SUBSTITUTION FOR ALL <ID> IN
d41 1
a41 1
C    PARAMETERS:    INPUT     INPUT LINE CONTAINING <STRING..> (SENT)
d56 1
a56 1
      LOGICAL  ::            ISDIGI,ISCHAR
d58 1
d60 1
a60 1
C     FOR LOCAL SYMBOLIC PARAMETER HANDLING 
d65 2
a66 2
      INTEGER, DIMENSION(MAXPRC) :: IGOQSTR,IENDQSTR
      COMMON /QSTR_STUFF2/IGOQSTR,IENDQSTR
d71 1
a71 1
C     FOR GLOBAL SYMBOLIC PARAMETER HANDLING 
a76 1
    
d82 2
a83 2
      LENT    = LEN(INPUT)
      OUTPUT  = INPUT
d85 1
a85 1
      IP2N   = INDEX(OUTPUT,'>',BACK=.TRUE.)
d88 1
a88 1
C        REPLACE ALL PARAMETER <> SETS IN POSITIONS 1...LENT
d90 2
a91 2
C        FIND START AND END OF FIRST PARAMETER STRING IN OUTPUT 
         CALL CHARINSIDE(OUTPUT(1:LENT),'<','>',.FALSE.,.FALSE.,
d94 1
a94 1
C        GET OUT OF LOOP IF NO PARAMETER SET <> FOUND
d97 1
a97 1
C        FIND PARAMETER STRING FOR SUBSTITUTION.
d103 4
d108 1
a108 1
C           SEARCH FOR THIS LOCAL SYMBOLIC PARAMETER
d120 1
a120 1
C           SEARCH FOR A GLOBAL SYMBOLIC PARAMETER
d130 40
a169 5
            WRITE(NDAT,*) '*** NO SYMBOLIC REFERENCE FOR: ',
     &                    OUTPUT(IP1:IP2)
            CALL ERRT(100,'SPIDER',NE)
C           STOPS IN ERRT!!
            RETURN
a171 3
C        END OF SUBSTITUTION
c        IP2N = IP2 - NCT + 1 + IEND - IGO 
         IP2N = IP2N + (IEND - IGO) - (IP2 - IP1)
d178 1
a178 2
            CALL ERRT(102,'RECURSIVE SYMBOLIC PARAMETERS ???? LOOPS',
     &                     IDONE)
d183 1
a183 1
C     END SYMBOLIC PARAMETER SUBSTITUTION 
d264 6
a269 23
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
C=*                                                                    *
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* This program is distributed in the hope that it will be useful,    *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
d293 1
a293 1

@


1.18
log
@NLOG
@
text
@d2 1
a2 1
C++*************************************************************************
d10 23
a32 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
d228 23
a250 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.17
log
@nested parameters\
@
text
@d43 1
a43 1
      COMMON /QSTR_STUFF1/ ISTOP,ITI,ITIN,IWHERE,NLOG,IPSTACK,
@


1.16
log
@nested parameter support
@
text
@d7 1
d67 1
d116 2
a117 2
         IP2N = IP2 - NCT + 1 + IEND - IGO 

@


1.15
log
@iparnum
@
text
@a37 1
      REAL, DIMENSION(7) ::  FREGST(7)
d45 1
a45 1
      INTEGER, DIMENSION (MAXPRC) :: IGOQSTR,IENDQSTR
d57 1
d59 1
d63 3
a65 2
      LENT   = LEN(INPUT)
      OUTPUT = INPUT
d70 2
a71 2
C        FIND START AND END OF LAST! PARAMETER STRING IN OUTPUT 
         CALL CHARINSIDE(OUTPUT(1:LENT),'<','>',.FALSE.,.TRUE.,
d92 2
a93 1
         ENDIF
d116 23
a138 23
         IF (OUTPUT(1:1) .EQ. 'X' .OR. OUTPUT(2+1:2) .EQ. 'X' .OR.
     &      OUTPUT(1:1) .EQ. 'x' .OR. OUTPUT(2+1:2) .EQ. 'x') 
     &      THEN
C           ADDED 11/8/79 FOR  QUESTION ANSWERED WITH A REGISTER
C           will only work if just registers in output!!!!
            CALL CHKSTR(OUTPUT(IP1:IP2),NCHARV,'RE',IDUM,FREGST,7,
     &               INUM,IRTFLG)
            IF(IRTFLG .NE. 0) CALL ERRT(101,'ERROR IN REGISTER SUB.',NE)

C           fix precision error here!!!!!al
            ITEMP = MIN(INUM,6)
            WRITE(OUTPUT(1:80),2621) (FREGST(I),I=1,ITEMP)
2621        FORMAT(6(1PG12.5,' '))
            NCHARV            = INUM * 13 + 1
            OUTPUT(NCHARV:) = ' '

         ELSEIF(((OUTPUT(IP2N+1:IP2N+1) .EQ. 'X' .OR. 
     &           OUTPUT(IP2N+1:IP2N+1) .EQ. 'x') .AND.
     &          (ISDIGI(OUTPUT(IP2N+2:IP2N+2)))) 
     &          .OR.
     &          (ISCHAR(OUTPUT(NCHAR:NCHAR)) .AND.
     &          (NCHAR-IP2N .EQ. 1 .OR. ISDIGI(OUTPUT(IP2N+1:IP2N+1)))))
     &          THEN 
d145 4
a148 3
C              NO TERMINAL ASTERICES, USE TERMINAL DIGITS INSTEAD
               IGOA= VERIFY(OUTPUT(1:IP2N),'0123456789',BACK=.TRUE.)+1
               IF (IGOA .LE. 1) IGOA = NCHAR - 3
d156 2
a157 2
     &               OUTPUT(IP2N+1:IP2N+1) .EQ. 'x') .AND.
     &              (ISDIGI(OUTPUT(IP2N+2:IP2N+2)))) THEN
d163 2
a164 3
                  CSUB = SUBPAT(1:NAST+1)// OUTPUT(IP2N+1:IENDX) // 
     &                    '}' // CHAR(0) 

d168 1
a168 1
                  OUTPUT = OUTPUT(1:IGOA-1) // SUBPAT(1:NAST+1) // 
a171 1

d174 1
a174 5

C        NEXT SEARCH IS ONLY AS FAR AS THIS <> START
         LENT = NCHAR
      ENDDO
C     END SYMBOLIC PARAMETER SUBSTITUTION 
@


1.14
log
@multiple subs now OK
@
text
@d42 1
a42 1
      INTEGER, DIMENSION(MAXPRC) :: IPSTACK,IPNUMSTACK
d44 1
a44 1
     &                     IPNUMSTACK
@


1.13
log
@<??***>x13 substituion added
@
text
@d58 1
a58 1
      DATA SUBPAT/'{**********}'/
a104 9
#ifdef NEVER
            write(6,*) ' '
            write(6,*) 'istop: ',istop
C           write(6,*) qstrqg(:iendqstrg),' -->',output(ip1:ip2)
            write(6,*) 'igoqstr: ',(igoqstr(i),i=1,istop)
            write(6,*) 'iendqstr:',(iendqstr(i),i=1,istop)
            write(6,*) 'qstrq(1:70): ',qstrq(1:70)
            write(6,*) 'qstrq(70): ',qstrq(70:140)
#endif
d136 1
a136 2
C           ADDED 6/02/83 FOR A FILENAME TERMINATING WITH A REG OR LOOP
C           NEED REG OR LOOP INDEX SUBSTITUTION AFTER SYMPAR
a150 3
               write(6,*)'orig nchar: ',nchar
               write(6,*)'orig output: ',OUTPUT

a162 3
cc                write(6,*)'csub: ',csub
cc                write(6,*)'iendx: ',iendx
cc                write(6,*)'igoa: ',igoa,'  nast: ',nast,'  ip2n: ',ip2n
a166 1
cc                write(6,*)'igoa: ',igoa,'  nast: ',nast,'  ip2n: ',ip2n
a169 2
cc             write(6,*)'final nchar: ',nchar
cc             write(6,*)'final output: ',OUTPUT
d174 1
a174 2
         LENT = IP1
         IF (LENT .LE. 2) EXIT
a175 1

d184 18
@


1.12
log
@sympar
@
text
@d39 1
d41 1
a41 1
C     FOR NUMERIC SYMBOLIC PARAMETER HANDLING 
a52 1
C     FOR SYMBOLIC PARAMETER HANDLING 
d58 1
d105 1
a105 1

d108 1
a108 1
C            write(6,*) qstrqg(:iendqstrg),' -->',output(ip1:ip2)
d113 1
a113 1

d119 1
d121 1
d138 17
a154 9
         ELSEIF (OUTPUT(IP2N+1:IP2N+1) .EQ. 'X' .OR. 
     &           OUTPUT(IP2N+1:IP2N+1) .EQ. 'x') THEN
C           ADDED 6/02/83 FOR A FILENAME TERMINATING WITH A REG
C           HANDLE JUST ONE REGISTER OR INDEX AFTER <?>
            IEND = VERIFY(OUTPUT(IP2N+2:NCHAR),'0123456789')
            IF (IEND .EQ. 0) THEN
C              SYM. PARAMETER & REG. SUBSTITUTION (<?>X? OR <?>X??..) 
               OUTPUT(IP2N+1:) = '{---' // OUTPUT(IP2N+1:NCHAR) // '}'
               NCHAR = 5 + NCHAR  
d157 29
a185 4
         ELSEIF (ISCHAR(OUTPUT(NCHAR:NCHAR)) .AND.
     &     (NCHAR-IP2N .EQ. 1 .OR. ISDIGI(OUTPUT(IP2N+1:IP2N+1))))THEN 
C           SYM. PARAMETER & LOOP INDEX SUBSTITUTION 
C          (E.G. <?>i OR <?>0I OR <?>0?I OR <?>0*I )
d187 3
a189 2
           OUTPUT(IP2N+1:) = '{---' // OUTPUT(NCHAR:NCHAR) // '}' 
           NCHAR = IP2N + 6
@


1.11
log
@*** empty log message ***
@
text
@d20 1
a20 1
C                   INPUT STRING
d36 3
a38 2
      CHARACTER(LEN=*) :: INPUT,OUTPUT
      LOGICAL  ::         ISDIGI,ISCHAR
d118 37
a167 18
#ifdef NEVER
C        HANDLE REGISTER OR INDEX AFTER <?>
         IF (OUTPUT(IP2+1:IP2+1) .EQ. 'X' .OR. 
     &       OUTPUT(IP2+1:IP2+1) .EQ. 'x') THEN
            IEND = VERIFY(OUTPUT(IP2+2:NCHAR),'0123456789')
            IF (IEND .EQ. 0) THEN
C              SYM. PARAMETER & REG. SUBSTITUTION (<?>X? OR <?>X??..) 
               OUTPUT(IP2+1:) = '{---' // OUTPUT(IP2+1:NCHAR) // '}' 
            ENDIF

         ELSEIF (ISCHAR(OUTPUT(NCHAR:NCHAR)) .AND.
     &         (NCHAR-IP2 .EQ. 1 .OR. ISDIGI(OUTPUT(IP2+1:IP2+1))))THEN 
C           SYM. PARAMETER & LOOP INDEX SUBSTITUTION 
C          (E.G. <?>i OR <?>0I OR <?>0?I OR <?>0*I )
           OUTPUT(IP2+1:) = '{---' // OUTPUT(NCHAR:NCHAR) // '}' 
         ENDIF

#endif
@


1.10
log
@rewritten
@
text
@d106 1
a106 1
            write(6,*) qstrqg(:iendqstrg),' -->',output(ip1:ip2)
@


1.9
log
@*** empty log message ***
@
text
@a1 1

d6 2
a7 1
C
d10 1
a10 1
C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
d19 2
a20 1
C    PURPOSE:       RUN-TIME SYMBOLIC SUBSTITUTION
d22 1
a22 1
C    PARAMETERS:    INPUT     INPUT LINE CONTAINING <DIGIT..> (SENT)
d39 1
a39 1
C     FOR SYMBOLIC PARAMETER HANDLING 
d44 5
a48 4
      INTEGER, DIMENSION (NQSTRSIZ,MAXPRC) :: IGOQSTRSTK,IENDQSTRSTK
      INTEGER, DIMENSION (MAXPRC) ::          NQSTRNOWSTK,LENQSTRSTK
      COMMON /QSTR_STUFF2/IGOQSTRSTK,IENDQSTRSTK,
     &                    NQSTRNOWSTK,LENQSTRSTK
d50 6
a55 2
      CHARACTER(LEN=MAXQSTR), DIMENSION((MAXPRC)) :: QSTRQSTK
      COMMON /QSTR_STUFF3/ QSTRQSTK
d73 26
a98 4
C        FIND PARAMETER NUMBER FOR SUBSTITUTION.
         READ(OUTPUT(IP1+1:IP2-1),8000,IOSTAT=IRTFLG) NQSTR
8000     FORMAT(I12)
         IF (IRTFLG .NE. 0) RETURN
d100 1
a100 2
         IF (NQSTR .GT. NQSTRNOWSTK(ILEVEL) .OR. 
     &       IGOQSTRSTK(NQSTR,ILEVEL).LE. 0) THEN
d103 9
d117 14
d147 39
a185 5
C        COPY CORRESPONDING QSTRQ STRING TO OUTPUT & UPDATE NCHAR
         IGO  = IGOQSTRSTK(NQSTR,ILEVEL)
         IEND = IENDQSTRSTK(NQSTR,ILEVEL)
         CALL SUBCHAR(QSTRQSTK(ILEVEL)(IGO:IEND),OUTPUT,IP1,IP2,
     &                NCHAR,IRTFLG)
d187 12
a198 4
C        NEXT SEARCH IS ONLY AS FAR AS THIS <> START
         LENT = IP1
         IF (LENT .LE. 2) EXIT
      ENDDO
d200 2
a201 1
C     END SYMBOLIC PARAMETER SUBSTITUTION 
a202 1
C     SET NORMAL RETURN FLAG
d207 2
@


1.8
log
@comment handling improved
@
text
@d17 1
a17 1
C    SUBSYMPAR(ANS,LOCSEMI,NCHAR,ILEVELT,IRTFLG)
d21 5
a25 6
C    PARAMETERS:    ANS       INPUT PROMPT                (SENT/RET.)
C                   LOCSEMI   LOC. OF :                   (SENT)
C                   NCHAR     LAST NON_BLANK CHAR IN      (SENT/RET.)
C                             ANS BEFORE COMMENT
C                   ILEVELT   NESTING LEVEL               (SENT)
C                   IRTFLG    RETURN FLAG (0 IS NORMAL)   (RETURNED)
d30 1
a30 1
      SUBROUTINE SUBSYMPAR(ANS,NCHAR,ILEVELT,IRTFLG)
d35 1
a35 1
      CHARACTER(LEN=*) :: ANS
d54 2
a55 1
      LENT = NCHAR
d60 2
a61 2
C        FIND START AND END OF LAST! PARAMETER STRING IN INPUT 
         CALL CHARINSIDE(ANS(1:LENT),'<','>',.FALSE.,.TRUE.,
d68 1
a68 1
         READ(ANS(IP1+1:IP2-1),8000,IOSTAT=IRTFLG) NQSTR
d74 2
a75 1
            WRITE(NDAT,*) '*** NO SYMBOLIC REFERENCE FOR: ',ANS(IP1:IP2)
d82 3
a84 3
         IF (ANS(IP2+1:IP2+1) .EQ. 'X' .OR. 
     &       ANS(IP2+1:IP2+1) .EQ. 'x') THEN
            IEND = VERIFY(ANS(IP2+2:NCHAR),'0123456789')
d87 1
a87 1
               ANS(IP2+1:) = '{---' // ANS(IP2+1:NCHAR) // '}' 
d90 2
a91 2
         ELSEIF (ISCHAR(ANS(NCHAR:NCHAR)) .AND.
     &          (NCHAR-IP2 .EQ. 1 .OR. ISDIGI(ANS(IP2+1:IP2+1)))) THEN 
d94 1
a94 1
           ANS(IP2+1:) = '{---' // ANS(NCHAR:NCHAR) // '}' 
d97 1
a97 1
C        COPY CORRESPONDING QSTRQ STRING TO ANS & UPDATE NCHAR
d100 1
a100 1
         CALL SUBCHAR(QSTRQSTK(ILEVEL)(IGO:IEND),ANS,IP1,IP2,
@


1.7
log
@?xxxx?<1> anywhere now
@
text
@d6 1
a6 1
C                 MULTIPLE PARAMETER SUBSTITUION JAN 2001  ARDEAN LEITH
d10 1
a10 1
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
d31 1
a31 1
      SUBROUTINE SUBSYMPAR(ANS,LOCSEMI,NCHAR,ILEVELT,IRTFLG)
a36 1
      CHARACTER(LEN=80):: COMMENTFUNC
a53 3

C     PRESERVE COMMENT
      IF (LOCSEMI .GT. 0) COMMENTFUNC = ANS(LOCSEMI:)
d58 1
a58 1
C        REPLACE ALL PARAMETER <> SETS IN POSISTIONS 1...LENT
a107 3
      IF (LOCSEMI .GT. 0) THEN
         ANS = ANS(1:NCHAR) // COMMENTFUNC 
      ENDIF
@


1.6
log
@QSTR_STUFF align
@
text
@d36 3
a38 3
      CHARACTER *(*) ANS
      CHARACTER *80  COMMENTFUNC
      LOGICAL        ISDIGI,ISCHAR
d40 10
a50 4
      INTEGER, DIMENSION (NQSTRSIZ,MAXPRC) :: IGOQSTRSTK,IENDQSTRSTK
      INTEGER, DIMENSION (MAXPRC)         ::  NQSTRNOWSTK
      COMMON /QSTR_STUFF1/ ISTOP
      COMMON /QSTR_STUFF2/ IGOQSTRSTK,IENDQSTRSTK,NQSTRNOWSTK
@


1.5
log
@QSTR pad
@
text
@d42 4
a45 4
      INTEGER, DIMENSION (MAXPRC)         ::  NQSTRNOWSTK,LENQSTRSTK
      INTEGER, DIMENSION (3)         ::  I64PAD
      COMMON /QSTR_STUFF/ ISTOP,I64PAD,IGOQSTRSTK,IENDQSTRSTK,
     &                    NQSTRNOWSTK,QSTRQSTK
@


1.4
log
@*** empty log message ***
@
text
@d43 2
a44 1
      COMMON /QSTR_STUFF/ ISTOP,IDUM1,IGOQSTRSTK,IENDQSTRSTK,
@


1.3
log
@removed subchar to own file
@
text
@d42 3
a44 3
      INTEGER, DIMENSION (MAXPRC)          ::  NQSTRNOWSTK
      COMMON /QSTR_STUFF/ ISTOP,IGOQSTRSTK,IENDQSTRSTK,NQSTRNOWSTK,
     &                    QSTRQSTK
@


1.2
log
@can do multiple subs now
@
text
@a115 24
C      *********************** SUBCHAR ****************************

       SUBROUTINE SUBCHAR(INSERT,ORIGINAL,LOC1,LOC2,LENUSED,IRTFLG)

       CHARACTER *(*) INSERT, ORIGINAL

       LENI     = LEN(INSERT)
       LENO     = LEN(ORIGINAL)
       LENAFTER = 0
       IF (LOC2 .LT. LENO) LENAFTER = LNBLNKN(ORIGINAL(LOC2+1:))

       LENUSED  = LOC1 - 1 + LENI + LENAFTER

       IF (LENUSED .GT. LENO) THEN
C         OVERFLOW
          CALL ERRT(101,'STRING OVERFLOW',NDUM)
          IRTFLG = 1
          RETURN
       ENDIF
 
       ORIGINAL(LOC1+LENI:) = ORIGINAL(LOC2+1:)
       ORIGINAL(LOC1:LOC1+LENI-1)  = INSERT

       END
@


1.1
log
@Initial revision
@
text
@d5 2
a6 1
C  SUBSYMPAR.F -- CREATED 9/8/00 FROM SPIDER.F  ARDEAN LEITH 
d9 6
a14 6
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
C *  COPYRIGHT (C)1985, 2000 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
d17 1
a17 1
C    SUBSYMPAR(ANS,LOCSEMI,NCHAR,IP1,IP2,IRTFLG)
d24 2
a25 3
C                             RESPONSE BEFORE COMMENT
C                   IP1       LOC. OF <                   (SENT)
C                   IP2       LOC. OF >                   (SENT)
d31 1
a31 1
      SUBROUTINE SUBSYMPAR(ANS,LOCSEMI,NCHAR,IP1,IP2,ILEVELT,IRTFLG)
d51 40
a90 21
           
C     FIND PARAMETER NUMBER FOR SUBSTITUTION.
      READ(ANS(IP1+1:IP2-1),8000,IOSTAT=IRTFLG) NQSTR
8000  FORMAT(I12)
      IF (IRTFLG .NE. 0) RETURN

      IF (NQSTR .GT. NQSTRNOWSTK(ILEVEL) .OR. 
     &    IGOQSTRSTK(NQSTR,ILEVEL).LE. 0) THEN
         WRITE(NDAT,*) '*** NO SYMBOLIC REFERENCE FOR: ',ANS(IP1:IP2)
         CALL ERRT(100,'SPIDER',NE)
C        STOPS IN ERRT!!
         RETURN
      ENDIF

C     HANDLE REGISTER OR INDEX AFTER <?>
      IF (ANS(IP2+1:IP2+1) .EQ. 'X' .OR. 
     &    ANS(IP2+1:IP2+1) .EQ. 'x') THEN
         IEND = VERIFY(ANS(IP2+2:NCHAR),'0123456789')
         IF (IEND .EQ. 0) THEN
C           SYM. PARAMETER & REG. SUBSTITUTION (<?>X? OR <?>X??..) 
            ANS(IP2+1:) = '{---' // ANS(IP2+1:NCHAR) // '}' 
d92 11
a102 11
      ELSEIF (ISCHAR(ANS(NCHAR:NCHAR)) .AND.
     &       (NCHAR-IP2 .EQ. 1 .OR. ISDIGI(ANS(IP2+1:IP2+1)))) THEN 
C        SYM. PARAMETER & LOOP INDEX SUBSTITUTION 
C       (E.G. <?>i OR <?>0I OR <?>0?I OR <?>0*I )
        ANS(IP2+1:) = '{---' // ANS(NCHAR:NCHAR) // '}' 
      ENDIF

C     COPY CORRESPONDING QSTRQ STRING TO ANS
      IGO  = IGOQSTRSTK(NQSTR,ILEVEL)
      IEND = IENDQSTRSTK(NQSTR,ILEVEL)
      CALL SUBCHAR(QSTRQSTK(ILEVEL)(IGO:IEND),ANS,IP1,IP2,NCHAR,IRTFLG)
@
