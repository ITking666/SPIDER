head	1.17;
access;
symbols
	pre_getangas:1.13
	GPL2010:1.13
	pre_GPL2010:1.12
	pre_var_equation:1.5
	pre_fftwrings:1.5
	pre_opfiles:1.4
	src:1.4
	best-code:1.2;
locks; strict;
comment	@c @;


1.17
date	2015.04.13.14.44.19;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2014.05.21.16.27.26;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2013.12.11.16.25.56;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2012.09.20.13.16.51;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2010.06.24.13.26.41;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2009.11.25.18.18.04;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2009.11.23.20.22.33;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2009.11.19.21.31.40;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2009.11.16.18.47.15;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2009.11.02.19.38.32;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.19.14.01.54;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2009.06.26.13.59.28;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.19.18.17.58;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.01.19.10.25;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.04.16.55.41;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.29.18.07.29;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2005.12.12.20.50.55;	author leith;	state Exp;
branches;
next	;


desc
@@


1.17
log
@ud [key] bug if key is global fixed
@
text
@
C++*********************************************************************
C
C  RDPROP.F -- DERIVED FROM RDPR.F                DEC 2005 ARDEAN LEITH
C              GLOBAL REGISTERS                   JAN 2006 ARDEAN LEITH
C              SKIP {var] REG LOAD                APR 2006 ARDEAN LEITH
C              SKIP SYM {var] SUB                 JUN 2009 ARDEAN LEITH
C              SKIP COMMAND LINE NON VAR INIT     AUG 2009 ARDEAN LEITH
C              @@*** VAR INIT BUG                  NOV 2009 ARDEAN LEITH
C              NECHO                              SEP 2012 ARDEAN LEITH
C              ! COMMENT BUG                      DEC 2013 ARDEAN LEITH
C              NO LOAD [] FOR @@ LINE              MAY 2014 ARDEAN LEITH
C              REG_GET_SEL aCESSES GLOBAL BUG     APR 2015 ARDEAN LEITH
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2015  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  RDPROP(PROMPT,ANSRET,NCHAR,IRTFLG)
C
C  PURPOSE: OUTPUTS PROMPT
C           READS AN OPEATION STRING FROM STORED PROC. LINE OR TERMINAL
C           ECHO & SKIP LINES WHICH ONLY CONTAIN A COMMENT AT START OF LINE
C           HANDLES INTERACTIVE HELP
C           CAN ECHO LINE TO CURRENT INTERACTIVE DO-LOOP FILE.
C           CONVERTS OLD @@B01[X11] PROC. ARG. FORMAT TO TO NEW: () ARG.  
C           CONVERTS OLD <> VARIABLE FORMAT TO NEW [] VARIABLE FORMAT
C           CAN INVOKE VARIABLE SUBSTITUTION FOR [string]. 
C           CONVERTS OLD X REGISTER TO  [] VARIABLE FORMAT
C               
C           RETURNS NCHAR=LENGTH OF STRING WITHOUT TRAILING BLANKS OR COMMENT. 
C           COMMENT IS LIMITED TO 160 CHAR.
C           VARIABLE VALUE RESPONSE IS LIMITED TO 160 CHAR.
C             
C           REGISTER SUBSTITUTION OCCURS IN RDPRINC
C            
C  PARAMETERS:  PROMPT     INPUT PROMPT                     (SENT)
C               ANSRET     USER RESPONSE                    (RETURNED)
C               NCHAR      LAST NON_BLANK CHAR IN           (RETURNED)
C                            ANS RESPONSE BEFORE COMMENT
C               IRTFLG     RETURN FLAG (0 IS NORMAL)        (RETURNED)
C
C  CALLED BY:   SPIDER
C
C       IF THE FIRST CHARACTER IS '@@', GOTO PROCEDURE EVALUATION
C       IF THE FIRST OR SECOND CHARACTER IS NEITHER A LETTER NOR DIGIT
C          CONSIDER OPERATION AN EXPRESSION
C       IF FIRST THREE CHARACTERS ARE LETTERS AND THE FORTH IS '('
C          THEN MUST BE AN ON-LINE FUNCTION CALL. GOTO EXPRESSION EVAL.
C       IF THE OPERATION STARTS WITH A [] REGISTER, EVALUATE EXPRESSION.
C       CHAR FOLLOWED BY 2 DIGITS IS OLD STYLE BATCH (B01) CALL
C       OK TO TRANSLATE OPERATION STRING TO UPPER CASE NOW
C       IF A LABEL 'LB<DIGIT> IS FOUND, AND A DO-LOOP IS IN EFFECT ...
C       IF A LABEL IS FOUND, AND NO DO-LOOP IS IN EFFECT ... IGNORE

C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

      SUBROUTINE RDPROP(PROMPT,ANSRET,NCHAR,IRTFLG)

      INCLUDE 'CMBLOCK.INC'

      COMMON /LUNDOECHO/ LUNDONOW,NDOLINE

      CHARACTER(LEN=*)   :: PROMPT, ANSRET
      CHARACTER(LEN=161) :: ANS
      CHARACTER(LEN=161) :: COMMENTSTR
      CHARACTER(LEN=2 )  :: C2,NQ12

      CHARACTER(LEN=1 )  :: CTEMP
      LOGICAL            :: LOADR

      CALL SET_MPI(ICOMM,MYPID,MPIERR)  ! SETS ICOMM AND MYPID

      IDOL   = LEN(PROMPT)
      NQ12   = CHAR(34) // CHAR(39)   ! QUOTES
      IRTFLG = 0

10    CONTINUE
C     PROMPT OUTPUT IS DELAYED IN BATCH TO IGNORE COMMENT / BLANK LINES
      IF (COPT == 'I' .AND. MYPID <= 0) THEN
         WRITE(NOUT,90,ADVANCE='NO') PROMPT(1:IDOL)
 90      FORMAT(' .',A,': ')
      ENDIF

C     READ ANSWER STRING
      IF (NIN == 1) THEN
C        UPDATE THE PROCEDURE LINE COUNTER FOR CURRENT PROCEDURE LINE
         IBCNT = IBCNT + 1

C        READ FROM CURRENT STORED PROCEDURE LINE IBCNT
         CALL PROC_GETPLINE(IBCNT,0,ANS,NCHAR,IRTFLG)
         IF (IRTFLG .NE. 0) THEN
            CALL ERRT(101,'PROCEDURE LACKS: RE',NE)
            ANSRET = 'RE'
            NCHAR  = 2
            RETURN
         ENDIF

      ELSE
C        UPDATE THE PROCEDURE LINE COUNTER FOR CURRENT PROCEDURE LINE
         IBCNT = IBCNT + 1

C        READ FROM TERMINAL
         READ(NIN,FMT='(A)',IOSTAT=IERR) ANS
         IF (IERR .NE. 0) THEN
            WRITE(NOUT,*) ' '
            CALL ERRT(101,'RAN OUT OF INPUT',NE)
            ANSRET = 'EN'
            NCHAR  = 2
            RETURN
         ENDIF
         NCHAR = lnblnk(ANS)

      ENDIF

C     IF A LOG FILE EXISTS, WRITE  ANSWER STRING THERE
      IF (NLOG .NE. 0 .AND. mypid <= 0) THEN
         IF (NCHAR <= 0) THEN
            WRITE(NLOG,*) ' '
         ELSE
            WRITE(NLOG,*) ANS(1:NCHAR)
            NECHO = NECHO + 1
         ENDIF
      ENDIF

C     IF WRITING TO RESULTS NOT TERMINAL, WRITE  ANSWER STRING THERE
      IF (NOUT .NE. 3 .AND. NDAT == 3 .AND. mypid <= 0) THEN
         WRITE(NOUT,*) ANS(1:NCHAR)
      ENDIF

      IF (NTRACE > 0 .AND. mypid <= 0) THEN
C        WRITES OUT OPERATION IN TRACE MODE
         IF (NCHAR <= 0) THEN
            WRITE(6,*) ' '
         ELSE
            WRITE(6,*) ANS(1:NCHAR)
         ENDIF
      ENDIF

      IF (NCHAR <= 0) GOTO 10   ! SKIP BLANK LINE

      COMMENTSTR = CHAR(0)

C     REMOVE LEADING AND TRAILING NON-PRINTING CHAR. FROM ANS
C     ALSO REMOVE ANY COMMENT FROM ANS STRING

      I      = 1
      J      = 0
      DO WHILE (I <= NCHAR)
         CTEMP = ANS(I:I)
         IF (C TEMP == ';' .OR. CTEMP == '!' ) THEN
            COMMENTSTR = ANS(I:)
            EXIT
         ELSEIF (J > 0 .OR. 
     &          (CTEMP > '!' .AND. CTEMP <= '~')) THEN
            J        = J + 1
            ANS(J:J) = ANS(I:I)
         ENDIF
         I = I + 1
      ENDDO
      NCHAR    = lnblnkn(ANS(1:J))
      NCHARCOM = lnblnkn(COMMENTSTR)

      IF (NCHAR <= 0) THEN
C        NOTHING BEFORE COMMENT, MUST GET NEXT LINE
         IF (VERBOSE .AND. MYPID <= 0 .AND. COPT == 'B') THEN
C           ECHO COMMENT 
C           (PROMPT OUTPUT WAS DELAYED IN BATCH TO IGNORE BLANK LINES)
            WRITE(NOUT,90)  PROMPT(1:IDOL),COMMENTSTR(1:NCHARCOM)
 91         FORMAT(' .',A,': ',A)
         ENDIF
         GOTO 10       ! READ ANOTHER INPUT LINE
      ENDIF
      IF (NCHAR < 161) ANS(NCHAR+1:) = CHAR(0)

C     PROMPT OUTPUT DELAYED UNTIL HERE IN BATCH TO IGNORE BLANK LINES 
      IF (COPT == 'B' .AND. MYPID <= 0) THEN
         WRITE(NOUT,94) PROMPT(1:IDOL),ANS(1:NCHAR),
     &                  COMMENTSTR(1:NCHARCOM)
94       FORMAT(' .',A,': 'A,'  ',A)
      ENDIF

C     HANDLE OBSOLETE INTERACTIVE HELP
      IQUES = INDEX(ANS(:NCHAR),'?')
      IF ( COPT == 'I'  .AND. (IQUES > 0  .OR. 
     &     (INDEX(ANS(:NCHAR),'HELP') > 0) .OR.
     &     (INDEX(ANS(:NCHAR),'help') > 0)) .AND.
     &     (INDEX(ANS(IQUES+1:NCHAR),'>')== 0)) THEN
         WRITE(NOUT,*)' USE YOUR WEB BROWSER FOR SPIDER MANUAL PAGES'
C        READ ANOTHER INPUT LINE
         GOTO 10
      ENDIF

      IF (LUNDONOW > 0 .AND. MYPID <= 0) THEN
C        MUST COPY INPUT LINE TO CURRENT INTERACTIVE DO-LOOP FILE
         WRITE(LUNDONOW,*) ANS(1:NCHAR)
         NDOLINE = NDOLINE + 1
         !write(6,*) ' rdprop lundo: ',ANS(:NCHAR),':',NDOLINE !!!!
      ELSEIF ((COPT == 'I' .AND. NDOLINE > 0)) THEN
         NDOLINE = NDOLINE + 1
         !write(6,*) ' rdprop ndoline: ',ANS(:NCHAR),':',NDOLINE !!!!
      ENDIF

C     CONVERT OLD @@b01[..] ARG. FORMAT TO TO NEW: () ARG.  FORMAT
      IPAT   = INDEX(ANS(1:NCHAR), '@@') 
      IQUO   = SCAN(ANS(1:NCHAR), NQ12) 
      IF (IPAT == 1 .AND. IQUO == 0) THEN
         IGOBRAK  = SCAN(ANS(1:NCHAR), '([')         ! ( first is ok
         IF (IGOBRAK > IPAT .AND. ANS(IGOBRAK:IGOBRAK) == '[')THEN
C           PROBABLY USES OLD @@b01[] PROC. ARG. FORMAT 
            IENDBRAK = INDEX(ANS(1:NCHAR), ']',.TRUE.)
            CALL GETNEXTTOKEN2(ANS(IGOBRAK:IENDBRAK),1,IGO,IEND)
            INOT = VERIFY(ANS(IGOBRAK+IGO-1:IEND+IGOBRAK-1), 
     &                    '[xX0123456789]')
            IF (INOT == 0) THEN
C              PROBABLY  @@b01[x11...,], [[var]...
               ANS(IGOBRAK:IGOBRAK)   = '(' 
               ANS(IENDBRAK:IENDBRAK) = ')'
            ENDIF
         ENDIF
      ENDIF
            
C     SEE IF NEED TO CONVERT OLD x11 REGISTER FORMAT TO [_11]
      IX = SCAN(ANS(1:NCHAR),'xX')
      IF (IX > 0) THEN
C        CONVERT OLD x11 REGISTER FORMAT TO TO NEW: [name] FORMAT
         CALL DEXREG(ANS,NCHAR)
      ENDIF
 
C     SEE IF ANY [] REGISTER VARIABLES ON OPERATION LINE
C     DO NOT LOAD REGISTERS IF: JUST A REGISTER OPERATION STARTING: [var]
C     DO NOT LOAD REGISTERS IF: 'IF(...)  OPERATION 
      IGOBRAK = INDEX(ANS(1:NCHAR),'[')     ! HAS REGISTERS
      IGOEQ   = INDEX(ANS(1:NCHAR), '=')    ! FOR ASSIGNMENT [var]=
      IGOAT   = INDEX(ANS(1:NCHAR), '@@')    ! FOR PROCEDURE CALL

      C2    = ANS(1:2)
      CALL SSUPCAS(C2)
      LOADR = ((C2 == 'IF') .AND. IGOEQ > 2)
      IF (IGOBRAK > 1 .AND. IGOAT == 0 .AND. 
     &                     (IGOEQ <= 0 .OR. LOADR)) THEN
C        LOAD [] REGISTER VARIABLES IN NSEL LIST, ZERO UNUSED REGISTERS
         !write(6,*) 'Loaded nsel',igobrak,igoeq,ans(1:nchar)

         IENDBRAK = INDEX(ANS(1:NCHAR),']',.TRUE.)
         IF (IENDBRAK > 0) THEN
            IBANK = 0
            IF (ANS(1:4) == 'RR G') IBANK = 1
            CALL REG_GET_SEL(IBANK,ANS(IGOBRAK:IENDBRAK),
     &                       .TRUE.,.TRUE.,NREG,IRTFLG)
         ENDIF
      ELSE
         !if(igobrak>1)write(6,*)'Skip nsel load',igobrak,igoeq,ans(:nchar)
         CALL REG_SET_USED(0)
      ENDIF
 

C     SET RETURNED ANSWER, TRUNCATE TO FIT LENGTH OF ANS IN CALL
      LENA = LEN(ANSRET)
      IF (NCHAR > LENA) NCHAR = LENA
      IF (NCHAR > 0)    ANSRET(1:NCHAR) = ANS(1:NCHAR)

      IRTFLG = 0
      IF (ANS(1:1) == '^' .AND. NCHAR == 1) IRTFLG = -1

      END


C     *********************** SSUPCAS_NOVAR *****************************

      SUBROUTINE SSUPCAS_NOVAR(STRING)

      CHARACTER(LEN=*) :: STRING
      CHARACTER(LEN=1) :: CTEMP

      DATA IOFF/-32/

      ILEN   = LEN(STRING)
      INBRAK = 0
  
      DO  I=1,ILEN
        CTEMP = STRING(I:I)
        IF (CTEMP == '[') THEN
           INBRAK = INBRAK + 1
        ELSEIF (CTEMP == ']') THEN
           INBRAK = INBRAK -1
        ELSEIF (INBRAK <= 0 .AND. 
     &         (STRING(I:I) >= 'a' .AND. STRING(I:I) <= 'z')) THEN
          STRING(I:I) = CHAR(ICHAR(CTEMP) + IOFF)
        ENDIF
      ENDDO

      RETURN
      END


C      *********************** DE_REG ********************************

       SUBROUTINE DE_REG(CINPUT,NCHAR)

      INCLUDE 'CMBLOCK.INC'

      CHARACTER(LEN=*), INTENT(INOUT) :: CINPUT
      INTEGER, INTENT(INOUT)          :: NCHAR
      CHARACTER(LEN=161)              :: CSUB

C        CONVERT [_11] NEW REGISTER FORMAT TO old x11 FORMAT
         I     = 1
         DO WHILE (I < (NCHAR-2))
            IF (CINPUT(I:I+1) == '[_') THEN
C              PROBABLE REGISTER START OF [_
               NDIG = VERIFY(CINPUT(I+2:NCHAR),'0123456789')
               IF (NDIG > 0) THEN
                  NDIG = NDIG - 1
               ELSE
                  NDIG = NCHAR - I
               ENDIF

               IF (NDIG > 0) THEN
                  CSUB = 'x' // CINPUT(I+2:I+NDIG+1) // CHAR(0)
                  CALL SUBCHAR(CSUB(1:NDIG+1),CINPUT,I,I+NDIG+2,
     &                          NCHAR,IRTFLG)
                  I = I + NDIG 
               ENDIF 
            ENDIF
            I = I + 1
         ENDDO
c        write(6,*) ' after de_reg: ',CINPUT(1:NCHAR)
         END





@


1.16
log
@NO LOAD [] FOR @@ LINE
@
text
@d13 1
d18 1
a18 1
C=* Copyright 1985-2014  Health Research Inc.,                         *
d268 1
a268 1
     &                          .TRUE.,.FALSE.,NREG,IRTFLG)
@


1.15
log
@ ! COMMENT BUG if on reg assignment
@
text
@d12 1
d17 1
a17 1
C=* Copyright 1985-2013  Health Research Inc.,                         *
d252 1
d257 2
a258 1
      IF (IGOBRAK > 1 .AND. (IGOEQ <= 0 .OR. LOADR)) THEN
d267 1
a267 1
     &                          .TRUE.,.TRUE.,NREG,IRTFLG)
@


1.14
log
@necho
@
text
@d11 1
d16 1
a16 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d40 1
a40 1
C           CAN ECHO LINE TO CURRENT INTERACTIVE DO-LOOP IFLE.
d62 2
a63 2
C              CONSIDER OPERATION AN EXPRESSION
C       IF  FIRST THREE CHARACTERS ARE LETTERS AND THE FORTH IS '('
d96 1
a96 1
      IF (COPT .EQ. 'I' .AND. MYPID .LE. 0) THEN
d102 1
a102 1
      IF (NIN .EQ. 1) THEN
d133 2
a134 2
      IF (NLOG .NE. 0 .AND. mypid .LE. 0) THEN
         IF (NCHAR .LE. 0) THEN
d143 1
a143 1
      IF (NOUT .NE. 3 .AND. NDAT .EQ. 3 .AND. mypid .LE. 0) THEN
d147 1
a147 1
      IF (NTRACE .GT. 0 .AND. mypid .LE. 0) THEN
d149 1
a149 1
         IF (NCHAR .LE. 0) THEN
d156 1
a156 1
      IF (NCHAR .LE. 0) GOTO 10   ! SKIP BLANK LINE
d165 1
a165 1
      DO WHILE (I .LE. NCHAR)
d167 1
a167 1
         IF (CTEMP .EQ. ';') THEN
d170 2
a171 2
         ELSEIF (J .GT. 0 .OR. 
     &          (CTEMP .GE. '!' .AND. CTEMP .LE. '~')) THEN
d180 1
a180 1
      IF (NCHAR .LE. 0) THEN
d182 1
a182 1
         IF (VERBOSE .AND. MYPID .LE. 0 .AND. COPT .EQ. 'B') THEN
d190 1
a190 1
      IF (NCHAR .LT. 161) ANS(NCHAR+1:) = CHAR(0)
d192 2
a193 2
C     PROMPT OUTPUT IS DELAYED UNTIL HERE IN BATCH TO IGNORE BLANK LINES 
      IF (COPT .EQ. 'B' .AND. MYPID .LE. 0) THEN
d201 4
a204 4
      IF ( COPT .EQ. 'I'  .AND. (IQUES .GT. 0  .OR. 
     &     (INDEX(ANS(:NCHAR),'HELP') .GT. 0) .OR.
     &     (INDEX(ANS(:NCHAR),'help') .GT. 0)) .AND.
     &     (INDEX(ANS(IQUES+1:NCHAR),'>').EQ. 0)) THEN
d210 1
a210 1
      IF (LUNDONOW .GT. 0 .AND. MYPID .LE. 0) THEN
d215 1
a215 1
      ELSEIF ((COPT .EQ. 'I' .AND. NDOLINE .GT. 0)) THEN
d223 1
a223 1
      IF (IPAT .EQ. 1 .AND. IQUO .EQ. 0) THEN
d225 1
a225 1
         IF (IGOBRAK .GT. IPAT .AND. ANS(IGOBRAK:IGOBRAK) .EQ. '[')THEN
d231 1
a231 1
            IF (INOT .EQ. 0) THEN
d241 1
a241 1
      IF (IX .GT. 0) THEN
d254 2
a255 2
      LOADR = ((C2 .EQ. 'IF') .AND. IGOEQ .GT. 2)
      IF (IGOBRAK .GT. 1 .AND. (IGOEQ .LE. 0 .OR. LOADR)) THEN
d260 1
a260 1
         IF (IENDBRAK .GT. 0) THEN
d262 1
a262 1
            IF (ANS(1:4) .EQ. 'RR G') IBANK = 1
d267 1
a267 1
         !if(igobrak.gt.1)write(6,*)'Skip nsel load',igobrak,igoeq,ans(:nchar)
d274 2
a275 2
      IF (NCHAR .GT. LENA) NCHAR = LENA
      IF (NCHAR .GT. 0)    ANSRET(1:NCHAR) = ANS(1:NCHAR)
d278 1
a278 1
      IF (ANS(1:1) .EQ. '^' .AND. NCHAR .EQ. 1) IRTFLG = -1
d297 1
a297 1
        IF (CTEMP .EQ. '[') THEN
d299 1
a299 1
        ELSEIF (CTEMP .EQ. ']') THEN
d301 2
a302 2
        ELSEIF (INBRAK .LE. 0 .AND. 
     &         (STRING(I:I) .GE. 'a' .AND. STRING(I:I) .LE. 'z')) THEN
d323 2
a324 2
         DO WHILE (I .LT. (NCHAR-2))
            IF (CINPUT(I:I+1) .EQ. '[_') THEN
d327 1
a327 1
               IF (NDIG .GT. 0) THEN
d333 1
a333 1
               IF (NDIG .GT. 0) THEN
@


1.13
log
@GPL_2010
@
text
@d10 1
d15 1
a15 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d137 1
@


1.12
log
@ NINSAVOF removed ndoline bug fixed
@
text
@d11 4
a14 3
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
C=* Copyright 1985-2009  Health Research Inc.,                         *
d25 1
a25 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a26 1
C=*                                                                    *
d28 1
a28 1
C=* along with this program. If not, see <http://www.gnu.org/licenses> *      
@


1.11
log
@@@@@proc
@
text
@a9 1
C              NINSAVEOF                          NOV 2009 ARDEAN LEITH
d76 1
a76 2
C     NINSAVEOF  I/O UNIT FOR NON-@@@@ INPUT      
      COMMON /LUNDOECHO/ LUNDONOW,NDOLINE,NINSAVEOF
d94 1
a94 1
      IF (COPT .EQ. 'I' .AND. MYPID .LE. 0 .AND. NINSAVEOF .EQ. 0) THEN
d113 1
a113 1
      ELSEIF (NINSAVEOF .LE. 0) THEN
d120 1
a127 10
      ELSE
C        READ FROM TERMINAL
         READ(NIN,FMT='(A)',IOSTAT=IERR) ANS
         IF (IERR .NE. 0) THEN
            CLOSE(NIN)              ! END OF TEXT FILE
            NIN       = NINSAVEOF   ! GOT BACK TO PREVIOUS INPUT
            NINSAVEOF = 0
            GOTO 10                 ! READ AGAIN
         ENDIF
         NCHAR = lnblnk(ANS)
d196 1
a196 1
C     HANDLE OBSOLLETE INTERACTIVE HELP
d210 5
@


1.10
log
@NINSAVEOF
@
text
@d33 1
a33 1
C  RDPROP(PROMPT,ANSRET,NCHAR,NINSAVEOF,IRTFLG)
a54 1
C               NINSAVEOF  I?O UNIT FOR NON OF INPUT        (SENT)
d77 1
a100 3
C     UPDATE THE BATCH COUNTER FOR CURRENT PROCEDURE LINE
      IBCNT = IBCNT + 1

d103 3
d109 15
a123 3
            CALL ERRT(101,
     &          'PROCEDURE RETURNS ABNORMALLY, LACKS: RE',NE)
            ANS    = 'RE'
d127 2
a130 1
         IBCNT = IBCNT - 1
@


1.9
log
@@@*** VAR INIT BUG
@
text
@d10 1
d33 1
a33 1
C  RDPROP(PROMPT,NCHAR,ANS,IRTFLG)
d51 3
a53 2
C  PARAMETERS:  PROMPT    INPUT PROMPT                     (SENT)
C               NCHAR     LAST NON_BLANK CHAR IN           (RETURNED)
d55 2
a56 2
C               ANS       USER RESPONSE                    (RETURNED)
C               IRTFLG    RETURN FLAG (0 IS NORMAL)        (RETURNED)
d78 1
a78 1
      COMMON /LUNDOECHO/ LUNDONOW
d96 1
a96 1
      IF (COPT .EQ. 'I' .AND. MYPID .LE. 0) THEN
d117 8
a124 2
         READ(NIN,80) ANS
80       FORMAT(A)
@


1.8
log
@SCAN(ANS(1:NCHAR), NQ12)   @@^^[ bug
@
text
@d209 9
a217 3
            IENDBRAK               = INDEX(ANS(1:NCHAR), ']',.TRUE.)
            ANS(IGOBRAK:IGOBRAK)   = '(' 
            ANS(IENDBRAK:IENDBRAK) = ')'
@


1.7
log
@NOT LOAD REGISTERS IF: 'IF(...)
@
text
@d9 1
d59 1
a59 1
C       IF THE FIRST OR SECOND CHARACTER IS NEITHER A LETTER NORDIGIT
d81 2
a82 1
      CHARACTER(LEN=2 )  :: C2
d89 1
a89 1

d204 5
a208 4
      IF (IPAT .GT. 0) THEN
         IGOBRAK  = SCAN(ANS(1:NCHAR), '[(')
         IF (IGOBRAK .GT. 0 .AND. ANS(IGOBRAK:IGOBRAK) .EQ. '[') THEN
C           USES OLD @@b01[] PROC. ARG. FORMAT 
@


1.6
log
@added command line symvar setting test
@
text
@d8 1
d10 5
a14 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d16 1
a16 6
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d27 1
a27 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d80 1
d82 1
a82 2
      LOGICAL            :: LDUM

d84 1
a84 1
      CALL SET_MPI(ICOMM,MYPID,MPIERR)
d184 1
a184 1
C     HANDLE INTERACTIVE HELP
d190 1
a190 7
C        M LADJADJ.  ONLY IN INTERACTIVE MODE, DO WE CALL HELP
#if defined (SP_NT) || defined (__linux__)
C        COMMAND LINE HELP IS NOT AVAILABLE ON NT OR LINUX VERSION
         WRITE(NOUT,*)' *** NO COMMAND LINE HELP IN LINUX OR NT SPIDER'
#else
         CALL MHELP(PROMPT,IANS,ANS,NCHAR,LDUM)
#endif
d220 3
a222 1
      IGOBRAK = INDEX(ANS(1:NCHAR),'[')
d225 7
a231 3
C     DO NOT LOAD REGISTERS IF JUST A REGISTER OPERATION STARTING: [var]
      IF (IGOBRAK .GT. 1 .AND. IGOEQ .LE. 0 ) THEN
C        LOAD [] REGISTER VARIABLES IN NSEL LIST
d240 1
d244 1
@


1.5
log
@IF (NOUT .NE. 3 .AND. NDAT .EQ. 3 .AND. mypid .LE. 0) THEN
@
text
@d5 3
a7 2
C                           GLOBAL REGISTERS      JAN 2006 ARDEAN LEITH
C                           SKIP {var] REG LOAD   APR 2006 ARDEAN LEITH
d10 1
a10 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
a85 7
#ifdef USE_MPI
      INCLUDE 'mpif.h'
      icomm = MPI_COMM_WORLD
      call MPI_COMM_RANK(icomm, MYPID, ierr)
#else
      MYPID = -1
#endif
d87 3
a89 1
      IDOL = LEN(PROMPT)
d220 1
a220 9


C     ALLOW [..] SYMBOL SUBSTITUTION ON OPERATION LINE (UNUSED)
      IGOBRAK = INDEX(ANS(1:NCHAR), '[') 
      IF (IGOBRAK .GT. 0) THEN
C         '[' AND ']' NEED SYMBOL SUBSTITUTION E.G. [str]
          CALL SUBSYMPAR(ANS(1:NCHAR),ANS,NCHAR,0,IRTFLG)
      ENDIF
         
d230 2
d233 1
a233 1
      IF (IGOBRAK .GT. 1) THEN
a253 1
      RETURN
@


1.4
log
@LOG file output & trace ops output
@
text
@d134 5
@


1.3
log
@undefined registers on op line trap
@
text
@d124 19
d166 1
a166 1
 
d220 1
d228 1
a228 1
C     SEE IF NEED TO CONVERT OLD x11 REGISTER FORMAT 
a250 4
C     IF A LOG FILE EXISTS, WRITE  ANSWER STRING THERE
      IF (NLOG .NE. 0 .AND. MYPID .LE. 0) WRITE(NLOG,92) ANS(1:NCHAR)
 92   FORMAT(A)

d291 37
@


1.2
log
@global register support
@
text
@d4 3
a6 2
C  RDPROP.F -- DERIVED FROM RDPR.F                 DEC 2005 ARDEAN LEITH
C                                 GLOBAL REGISTERS JAN 2006 ARDEAN LEITH
d217 2
a218 1
      IF (IGOBRAK .GT. 0) THEN
@


1.1
log
@new input file for operation
@
text
@d5 1
a5 1
C
d220 3
a222 1
            CALL REG_GET_SEL(0,ANS(IGOBRAK:IENDBRAK),
@

