head	1.12;
access;
symbols
	pre_mrcs:1.12
	healthdept_2018:1.12
	pre_getangas:1.10
	GPL2010:1.10
	pre_GPL2010:1.9
	pre_var_equation:1.9
	pre_fftwrings:1.9
	pre_opfiles:1.9
	src:1.9
	best-code:1.9
	x-named-regs:1.9
	x:1.9
	v13-00:1.9
	pre_GPL:1.7
	prec_CA:1.7
	noindx:1.7
	Bproc:1.5
	oct21:1.4
	last77:1.4;
locks; strict;
comment	@c @;


1.12
date	2018.10.03.14.34.12;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2017.05.31.15.01.19;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2010.06.24.13.26.29;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.17.20.21.06;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.17.18.13.41;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.05.15.47.34;	author bbaxter;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.14.20.45.11;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.11.10.23.10.04;	author yuchen;	state Exp;
branches;
next	1.4;

1.4
date	97.10.10.18.58.30;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.03.01.18.39.26;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.03.01.15.35.06;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.51.21;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.12
log
@email_health_dept
@
text
@C++*********************************************************************
C
C PKSR3.F
C           SGN BUG IF FED WITH INTEGER FIXED     MAY 2017 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  PKSR3(LUN,Q,NSAM,NROW,NSLICE,
C        NSA1,NSA2,NRO1,NRO2,NSL1,NSL2,SGN,PEAK,NPC,RPC,ML,NMAX)
C
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE  PKSR3(LUN,Q,NSAM,NROW,NSLICE,
     &      NSA1,NSA2,NRO1,NRO2,NSL1,NSL2,SGN,PEAK,NPC,RPC,ML,NMAX)

         DIMENSION  Q(NSAM,NROW,-1:1),NPC(3,ML),RPC(3,ML),PEAK(ML)
         DIMENSION  LX(-1:1),LY(-1:1),LZ(-1:1),LS(-1:1)
         LOGICAL    T,NEGV

         NMAX=0
         DO  1  L=NSL1,NSL2
            IF(L.EQ.NSL1)  THEN
               DO   J=-1,1
                  LZ(J)=J
	       ENDDO

               DO    J=-1,1
                  LSJ=MOD(L+J-1+NSLICE,NSLICE)+1
                  CALL RDSL_P(LUN,Q(1,1,J),NSAM,NROW,LSJ)
	       ENDDO
               DO  MZ=-1,1
                  DO  MY=1,NROW
                     DO  MX=1,NSAM
                        Q(MX,MY,MZ)=Q(MX,MY,MZ)*SGN
                     ENDDO
                  ENDDO
               ENDDO
           ELSE
C  l>nsl1
               J=MOD(L-1-NSL1,3)-1
               LSJ=MOD(L+NSLICE,NSLICE)+1
               CALL RDSL_P(LUN,Q(1,1,J),NSAM,NROW,LSJ)
               DO  MY=1,NROW
                  DO  MX=1,NSAM
                     Q(MX,MY,J)=Q(MX,MY,J)*SGN
                  ENDDO
               ENDDO
C             rotate numbering of slices
               DO  J=-1,1
                  LZ(J)=LZ(J)+1
                 IF(LZ(J).EQ.+2)  LZ(J)=-1
               ENDDO
            ENDIF
C
            DO  1  J=NRO1,NRO2
C               IYM=MOD(J-2+NROW,NROW)+1
C               IYP=MOD(J+NROW,NROW)+1
               LY(-1)=MOD(J-2+NROW,NROW)+1
               LY(1)=MOD(J+NROW,NROW)+1
               LY(0)=J
               DO  1  I=NSA1,NSA2
C                  IXM=MOD(I-2+NSAM,NSAM)+1
C                 IXP=MOD(I+NSAM,NSAM)+1
                  LX(-1)=MOD(I-2+NSAM,NSAM)+1
                  LX(1)=MOD(I+NSAM,NSAM)+1
                  LX(0)=I
                  T=.TRUE.
                  QC=Q(I,J,LZ(0))
                  DO    JZ=-1,1
                     DO    JY=-1,1
                        DO    JX=-1,1
                           IF(QC < Q(LX(JX),LY(JY),LZ(JZ)))  T=.FALSE.
	                ENDDO	 
	             ENDDO	 
	          ENDDO
                  IF (T)  THEN
                     IF(NMAX.EQ.0)  THEN
                        NMAX=1
                        PEAK(1)=QC
                        NPC(1,1)=I
                        NPC(2,1)=J
                        NPC(3,1)=L
C                       get floating point shifts
                        NN = 1
                        ASSIGN  501 TO LABA
                        GOTO  5505

501                     CONTINUE
                     ELSE
                     DO    N=NMAX,1,-1
                        IF(QC < PEAK(N)) THEN
                           NN=N+1
                           GOTO  22
                        ENDIF
	             ENDDO
                     NN=1
22                   CONTINUE
C                    no place for more peaks
                     IF(NN > ML)  GOTO 1
                     DO    M=MIN0(NMAX+1,ML),NN+1,-1
                        PEAK(M)=PEAK(M-1)
                        DO  MM=1,3
                           NPC(MM,M)=NPC(MM,M-1)
                           RPC(MM,M)=RPC(MM,M-1)
                        ENDDO
                     ENDDO
                     PEAK(NN)=QC
                     NPC(1,NN)=I
                     NPC(2,NN)=J
                     NPC(3,NN)=L
C                    get floating point shifts
                     ASSIGN  502 TO LABA

                     GOTO  5505
502                  CONTINUE
                     NMAX=MIN0(NMAX+1,ML)
                  ENDIF
               ENDIF
1        CONTINUE
         RETURN

C        Procedure to get the floating point X, Y, Z shifts.
C        Computes 1D interpolation along 3 axes, using the 2 elements
C        on either side of the central voxel of the 3x3x3 cube

5505     NEGV=.FALSE.

         RX=0.0
         RY=0.0
         RZ=0.0

C        the central element
         QMAX = SGN * Q(LX(0),LY(0),LZ(0))

C    X shift
         QA = SGN * Q(LX(-1),LY(0),LZ(0))
         QC = SGN * Q(LX(1),LY(0),LZ(0))
         CALL  PKSR3_SUB(QMAX,QA,QC,SGN,RX)

C    Y shift
         QA = SGN * Q(LX(0),LY(-1),LZ(0))
         QC = SGN * Q(LX(0),LY(1),LZ(0))
         CALL  PKSR3_SUB(QMAX,QA,QC,SGN,RY)

C    Z shift
         QA = SGN * Q(LX(0),LY(0),LZ(-1))
         QC = SGN * Q(LX(0),LY(0),LZ(1))
         CALL  PKSR3_SUB(QMAX,QA,QC,SGN,RZ)

         RPC(1,NN)= RX + I
         RPC(2,NN)= RY + J
         RPC(3,NN)= RZ + L

         GOTO  LABA

         END


C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************
C
C SGN BUG IF  INTEGER FIXED FOR IFORT             MAY 2017 ARDEAN LEITH
C Returns R, the subpixel amount of shift for the 3 values: QA,QMAX,QC

        SUBROUTINE  PKSR3_SUB(QMAX,QA,QC,SGN,R)

        IMPLICIT NONE

        REAL :: QMAX,QA,QC,SGN,R
        REAL :: QMIN,QMID,QF,QM

         IF (SGN >= 0) THEN
C           WANT MAXIMUM
            IF (QA < QC) THEN
               QMIN = QA
               QMID = QC
               QF   = 0.5
            ELSE
               QMIN = QC
               QMID = QA
               QF   = -0.5
            ENDIF
         ENDIF

         IF (SGN < 0) THEN 
C           WANT MINIMUM
            IF(QA > QC) THEN
               QMIN = QA
               QMID = QC
               QF   = 0.5
            ELSE
               QMIN = QC
               QMID = QA
               QF   = -0.5
            ENDIF
         ENDIF

         IF ( (QMAX - QMIN) .NE. 0) THEN
            QM = QF / (QMAX - QMIN)
            R  = QM * (QMID - QMIN)
         ENDIF

         !write(6,*) ' sgn:',  sgn 
         !write(6,*) ' qmax,qa,qc:',  qmax,qa,qc 
         !write(6,*) ' qmin,qmid,qf:',qmin,qmid,qf 
         !write(6,*) ' qmax - qmin:', qmax - qmin
         !write(6,*) ' qm,r:', qm,r

         END

@


1.11
log
@added trap for sgn=1 integer bug
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.10
log
@GPL_2010
@
text
@d4 1
d28 2
d94 1
a94 1
                           IF(QC.LT.Q(LX(JX),LY(JY),LZ(JZ)))  T=.FALSE.
d113 1
a113 1
                        IF(QC.LT.PEAK(N)) THEN
d121 1
a121 1
                     IF(NN.GT.ML)  GOTO 1
d180 1
d183 2
d189 8
a196 2
         IF (SGN.GT.0) THEN
            IF(QA.LT.QC) THEN
d199 1
a199 1
               QF = 0.5
d203 1
a203 1
               QF = -0.5
d206 4
a209 2
         IF (SGN.LT.0) THEN 
            IF(QA.GT.QC) THEN
d212 1
a212 1
               QF = 0.5
d216 1
a216 1
               QF = -0.5
d220 1
a220 1
         IF ((QMAX - QMIN).NE.0) THEN
d222 1
a222 1
            R = QM * (QMID - QMIN)
d225 5
a229 1
         RETURN
d232 1
@


1.9
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.8
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a5 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
a29 1
C **************************************************************************
a34 1
C--************************************************************************
a182 1
C--************************************************************************
@


1.7
log
@changed procedure to calculate floating point shift values. It
now does 1D interpolation along the 3 axes. BB
@
text
@d1 1
d6 1
d8 1
d10 24
d40 1
d46 1
d195 1
@


1.6
log
@cosmetic
@
text
@d90 1
a90 1
C                       get center of gravity
d118 1
a118 1
C                    get center of gravity
d129 4
a132 1
C        procedure to get the center of gravity in 3x3x3 box
d134 1
a134 1
         RSUM=0.0
d138 59
a196 26
         DO    JZ=-1,1
            DO    JY=-1,1
               DO    JX=-1,1
                  QC=Q(LX(JX),LY(JY),LZ(JZ))
                  IF(QC.LT.0.0)  THEN
                     NEGV=.TRUE.
                     RX=0.0
                     RY=0.0
                     RZ=0.0
                     GOTO  42
                  ENDIF
                  RX=RX+(I+JX)*QC
                  RY=RY+(J+JY)*QC
                  RZ=RZ+(L+JZ)*QC
                  RSUM=RSUM+QC
	       ENDDO	 
	    ENDDO	 
	 ENDDO
42       IF(RSUM.NE.0.0)  THEN
            RPC(1,NN)=RX/RSUM
            RPC(2,NN)=RY/RSUM
            RPC(3,NN)=RZ/RSUM
         ELSE
            RPC(1,NN)=0.0
            RPC(2,NN)=0.0
            RPC(3,NN)=0.0
d199 2
a200 1
         GOTO  LABA
@


1.5
log
@a
@
text
@d3 1
a3 1
C $$ PKSR3.FOR
d19 4
a22 5
C
C $$ PKSR3.FOR
C
         SUBROUTINE  PKSR3(LUN,Q,NSAM,NROW,NSLICE,
     &   NSA1,NSA2,NRO1,NRO2,NSL1,NSL2,SGN,PEAK,NPC,RPC,ML,NMAX)
d25 1
a25 3
         LOGICAL   T,NEGV
C         EQUIVALENCE  (LX(-1),IXM),(LX(0),I),(LX(1),IXP)
C         EQUIVALENCE  (LY(-1),IYM),(LY(0),J),(LY(1),IYP)
d29 17
a45 16
         IF(L.EQ.NSL1)  THEN
         DO   J=-1,1
           LZ(J)=J
	 ENDDO
         DO    J=-1,1
         LSJ=MOD(L+J-1+NSLICE,NSLICE)+1
         CALL RDSL_P(LUN,Q(1,1,J),NSAM,NROW,LSJ)
	 ENDDO
         DO  MZ=-1,1
         DO  MY=1,NROW
         DO  MX=1,NSAM
         Q(MX,MY,MZ)=Q(MX,MY,MZ)*SGN
         ENDDO
         ENDDO
         ENDDO
         ELSE
d47 79
a125 77
         J=MOD(L-1-NSL1,3)-1
         LSJ=MOD(L+NSLICE,NSLICE)+1
         CALL RDSL_P(LUN,Q(1,1,J),NSAM,NROW,LSJ)
         DO  MY=1,NROW
         DO  MX=1,NSAM
         Q(MX,MY,J)=Q(MX,MY,J)*SGN
         ENDDO
         ENDDO
C rotate numbering of slices
         DO  J=-1,1
         LZ(J)=LZ(J)+1
         IF(LZ(J).EQ.+2)  LZ(J)=-1
         ENDDO
         ENDIF
C
         DO  1  J=NRO1,NRO2
C         IYM=MOD(J-2+NROW,NROW)+1
C         IYP=MOD(J+NROW,NROW)+1
         LY(-1)=MOD(J-2+NROW,NROW)+1
         LY(1)=MOD(J+NROW,NROW)+1
         LY(0)=J
         DO  1  I=NSA1,NSA2
C         IXM=MOD(I-2+NSAM,NSAM)+1
C         IXP=MOD(I+NSAM,NSAM)+1
         LX(-1)=MOD(I-2+NSAM,NSAM)+1
         LX(1)=MOD(I+NSAM,NSAM)+1
         LX(0)=I
         T=.TRUE.
         QC=Q(I,J,LZ(0))
         DO    JZ=-1,1
         DO    JY=-1,1
         DO    JX=-1,1
         IF(QC.LT.Q(LX(JX),LY(JY),LZ(JZ)))  T=.FALSE.
	 ENDDO	 
	 ENDDO	 
	 ENDDO
         IF(T)  THEN
         IF(NMAX.EQ.0)  THEN
         NMAX=1
         PEAK(1)=QC
         NPC(1,1)=I
         NPC(2,1)=J
         NPC(3,1)=L
C get center of gravity
         NN=1
         ASSIGN  501 TO LABA
         GOTO  5505
501      CONTINUE
         ELSE
         DO    N=NMAX,1,-1
         IF(QC.LT.PEAK(N)) THEN
         NN=N+1
         GOTO  22
         ENDIF
	 ENDDO
         NN=1
22       CONTINUE
C no place for more peaks
         IF(NN.GT.ML)  GOTO 1
         DO    M=MIN0(NMAX+1,ML),NN+1,-1
         PEAK(M)=PEAK(M-1)
         DO  MM=1,3
         NPC(MM,M)=NPC(MM,M-1)
         RPC(MM,M)=RPC(MM,M-1)
         ENDDO
	 ENDDO
         PEAK(NN)=QC
         NPC(1,NN)=I
         NPC(2,NN)=J
         NPC(3,NN)=L
C get center of gravity
         ASSIGN  502 TO LABA
         GOTO  5505
502      CONTINUE
         NMAX=MIN0(NMAX+1,ML)
         ENDIF
         ENDIF
d128 2
a129 1
C  procedure to get the center of gravity in 3x3x3 box
d136 16
a151 16
         DO    JY=-1,1
         DO    JX=-1,1
         QC=Q(LX(JX),LY(JY),LZ(JZ))
         IF(QC.LT.0.0)  THEN
         NEGV=.TRUE.
         RX=0.0
         RY=0.0
         RZ=0.0
         GOTO  42
         ENDIF
         RX=RX+(I+JX)*QC
         RY=RY+(J+JY)*QC
         RZ=RZ+(L+JZ)*QC
         RSUM=RSUM+QC
	 ENDDO	 
	 ENDDO	 
d154 3
a156 3
         RPC(1,NN)=RX/RSUM
         RPC(2,NN)=RY/RSUM
         RPC(3,NN)=RZ/RSUM
d158 3
a160 3
         RPC(1,NN)=0.0
         RPC(2,NN)=0.0
         RPC(3,NN)=0.0
d162 1
@


1.4
log
@*** empty log message ***
@
text
@d29 1
a29 1
CNO_SAVE
@


1.3
log
@equivalence removed
@
text
@d33 4
a36 3
         DO  11 J=-1,1
11       LZ(J)=J
         DO  12  J=-1,1
d38 2
a39 1
12       CALL RDSL_P(LUN,Q(1,1,J),NSAM,NROW,LSJ)
d78 3
a80 3
         DO  2  JZ=-1,1
         DO  2  JY=-1,1
         DO  2  JX=-1,1
d82 3
a84 1
2        CONTINUE
d98 1
a98 1
         DO  21  N=NMAX,1,-1
d103 1
a103 1
21       CONTINUE
d108 1
a108 1
         DO  23  M=MIN0(NMAX+1,ML),NN+1,-1
d114 1
a114 1
23       CONTINUE
d134 3
a136 3
         DO  41  JZ=-1,1
         DO  41  JY=-1,1
         DO  41  JX=-1,1
d149 3
a151 1
41       CONTINUE
@


1.2
log
@nosave
@
text
@d27 2
a28 2
         EQUIVALENCE  (LX(-1),IXM),(LX(0),I),(LX(1),IXP)
         EQUIVALENCE  (LY(-1),IYM),(LY(0),J),(LY(1),IYP)
d63 5
a67 2
         IYM=MOD(J-2+NROW,NROW)+1
         IYP=MOD(J+NROW,NROW)+1
d69 5
a73 2
         IXM=MOD(I-2+NSAM,NSAM)+1
         IXP=MOD(I+NSAM,NSAM)+1
@


1.1
log
@Initial revision
@
text
@d29 1
@
