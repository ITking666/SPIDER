head	1.71;
access;
symbols
	healthdept_2018:1.71
	pre_getangas:1.62
	GPL2010:1.61
	pre_GPL2010:1.60
	pre_var_equation:1.60
	pre_fftwrings:1.60
	pre_opfiles:1.60
	src:1.60
	best-code:1.58
	x-named-regs:1.56
	x:1.56
	v13-00:1.56
	pre_GPL:1.54
	prec_CA:1.48
	noindx:1.35
	Bproc:1.21
	oct21:1.16
	last77:1.9;
locks; strict;
comment	@c @;


1.71
date	2018.10.03.14.34.09;	author leith;	state Exp;
branches;
next	1.70;

1.70
date	2015.01.20.19.24.05;	author leith;	state Exp;
branches;
next	1.69;

1.69
date	2014.08.25.15.15.10;	author leith;	state Exp;
branches;
next	1.68;

1.68
date	2014.08.25.12.31.01;	author leith;	state Exp;
branches;
next	1.67;

1.67
date	2014.07.31.12.47.54;	author leith;	state Exp;
branches;
next	1.66;

1.66
date	2013.11.14.17.52.21;	author leith;	state Exp;
branches;
next	1.65;

1.65
date	2012.01.17.20.24.59;	author leith;	state Exp;
branches;
next	1.64;

1.64
date	2011.04.01.15.44.51;	author leith;	state Exp;
branches;
next	1.63;

1.63
date	2011.02.18.15.04.25;	author leith;	state Exp;
branches;
next	1.62;

1.62
date	2011.01.31.13.04.31;	author leith;	state Exp;
branches;
next	1.61;

1.61
date	2010.06.24.13.26.05;	author leith;	state Exp;
branches;
next	1.60;

1.60
date	2007.01.09.20.09.54;	author leith;	state Exp;
branches;
next	1.59;

1.59
date	2006.07.03.13.21.45;	author leith;	state Exp;
branches;
next	1.58;

1.58
date	2006.01.12.21.34.47;	author leith;	state Exp;
branches;
next	1.57;

1.57
date	2006.01.06.14.55.45;	author leith;	state Exp;
branches;
next	1.56;

1.56
date	2005.10.17.20.37.56;	author leith;	state Exp;
branches;
next	1.55;

1.55
date	2005.10.17.18.28.21;	author leith;	state Exp;
branches;
next	1.54;

1.54
date	2005.07.01.16.00.33;	author leith;	state Exp;
branches;
next	1.53;

1.53
date	2005.06.28.15.42.02;	author leith;	state Exp;
branches;
next	1.52;

1.52
date	2005.02.07.15.10.11;	author leith;	state Exp;
branches;
next	1.51;

1.51
date	2004.05.07.14.34.30;	author leith;	state Exp;
branches;
next	1.50;

1.50
date	2003.11.19.17.26.37;	author leith;	state Exp;
branches;
next	1.49;

1.49
date	2003.10.30.20.20.23;	author leith;	state Exp;
branches;
next	1.48;

1.48
date	2003.09.16.15.29.36;	author leith;	state Exp;
branches;
next	1.47;

1.47
date	2003.03.14.15.15.04;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2003.03.13.16.22.30;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2003.03.04.18.40.50;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2003.03.04.15.47.35;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2003.03.04.14.37.36;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2003.02.28.19.22.59;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2003.02.21.19.52.15;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	2003.02.18.16.04.03;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2003.01.28.21.42.27;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2003.01.27.20.12.04;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2003.01.23.16.49.16;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2003.01.23.15.51.48;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2002.08.19.18.55.41;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2002.08.19.18.51.18;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2002.08.13.20.28.57;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2002.07.17.12.27.33;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2001.07.17.17.06.02;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2001.07.17.13.24.14;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2001.07.11.13.58.22;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2001.07.03.18.11.41;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2001.06.27.16.09.25;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2001.06.27.16.07.18;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2001.04.18.18.14.59;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2001.01.16.19.39.42;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2001.01.05.17.11.32;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2000.12.18.17.47.04;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2000.08.08.20.16.20;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2000.05.04.18.37.58;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2000.04.24.19.56.08;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2000.01.06.16.58.32;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	99.11.24.14.35.13;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	99.09.08.16.59.21;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	99.06.03.19.29.49;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	99.05.27.12.24.56;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	99.05.27.12.23.22;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.05.14.17.21.49;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.04.14.17.56.12;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	99.04.09.17.07.14;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.03.17.16.09.44;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.03.16.19.33.40;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.03.09.19.16.20;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.03.05.15.07.03;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.03.01.19.18.23;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.02.25.19.05.49;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	99.02.24.17.33.27;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	99.02.23.14.59.59;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	99.02.19.16.59.54;	author leith;	state Exp;
branches;
next	;


desc
@@


1.71
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C LUNSETHDR.F   -- NEW JAN 1999                   AUTHOR: ARDEAN LEITH
C                  REPLACED ALLOCIT WITH ALLOCATE MAY 00  ARDEAN LEITH
C                  USED MYTIME                    DEC 00  ARDEAN LEITH
C                  KANGLE BUG FIXED               JAN 01  ARDEAN LEITH 
C                  GETFILENUM EXTRACTED           AUG 02  ARDEAN LEITH
C                  INDEXED STACKS                 JAN 03  ARDEAN LEITH 
C                  FORMATING IN LUNSAYINFO        MAY 04  ARDEAN LEITH
C                  HEADER BYTES MSG I7            FEB 05  ARDEAN LEITH
C                  HEADER INFO SIZE I6            JAN 06  ARDEAN LEITH
C                  LUNSETIMNUM REWRITE            JAN 07  ARDEAN LEITH
C                  GETLAB BAD VALUE TRAP          JAN 11  ARDEAN LEITH
C                  LABBYT >= 10000000) TRAP       MAR 11  ARDEAN LEITH
C                  MAXNAM                         JUL 14  ARDEAN LEITH
C                  EM2EM BUG RECOVERY SUPPORT     AUG 14  ARDEAN LEITH
C                    
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014 Health Research Inc.,                          *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C
C    PURPOSE:       HANDLES ALL INTERACTIONS WITH SPIDER IMAGE FILE
C                   HEADERS. CONTAINS NUMEROUS SUBROUTINES ALL STARTING
C                   WITH PREFIX: LUN
C
C    SUBROUTINES:
C     ------------------------- LUNSETHDR -----------------------------
C     ------------------------- LUNMTHDR ------------------------------
C     ------------------------- LUNREDHED -----------------------------
C     ------------------------- LUNWRTHED -----------------------------
C     ------------------------- LUNWRTCURHED --------------------------
C     ------------------------- LUNSETLAB -----------------------------
C     ------------------------- LUNGETLAB -----------------------------
C     ------------------------- LUNGETTYPE ----------------------------
C     ------------------------- LUNSETTYPE ----------------------------
C     ------------------------- LUNGETISTACK ----------------------------
C     ------------------------- LUNSETISTACK ----------------------------
C     ------------------------- LUNGETSTK -----------------------------
C     ------------------------- LUNSET25 ---------------------------
C     ------------------------- LUNSETINUSE ---------------------------
C     ------------------------- LUNGETINUSE ---------------------------
C     ------------------------- LUNGETMAXIM ---------------------------
C     ------------------------- LUNSETMAXIM ---------------------------
C     ------------------------- LUNSAVMAXIM ---------------------------
C     ------------------------- LUNCOPYMAXIM --------------------------
C     ------------------------- LUNGETSIZE ----------------------------
C     ------------------------- LUNSETSIZE ----------------------------
C     ------------------------- LUNGETSTAT ----------------------------
C     ------------------------- LUNSETSTAT ----------------------------
C     ------------------------- LUNGETANG -----------------------------
C     ------------------------- LUNSETANG -----------------------------
C     ------------------------- LUNGETFILE ----------------------------
C     ------------------------- LUNSETFILE ----------------------------
C     ------------------------- LUNSETIMNUM ---------------------------
C     ------------------------- LUNGETDATE ----------------------------
C     ------------------------- LUNGETTITLE ---------------------------
C     ------------------------- LUNSETTIME ----------------------------
C     ------------------------- LUNSETTITLE ---------------------------
C     ------------------------- LUNSAYINFO ----------------------------
C     ------------------------- LUNSETCOMMON --------------------------
C     ------------------------- LUNSETLUNS ----------------------------
C     ------------------------- LUNNEWHDR -----------------------------
C     ------------------------- LUNGETISBARE --------------------------
C     ------------------------- LUNSETISBARE --------------------------
C     ------------------------- LUNGETOBJ -----------------------------
C     ------------------------- LUNCLRINDX ----------------------------
C     ------------------------- LUNREDINDX ----------------------------
C     ------------------------- LUNWRTINDX ----------------------------
C     ------------------------- LUNGETINDXTOP -------------------------
C     ------------------------- LUNSETINDXTOP -------------------------
C     ------------------------- LUNSETVALS ----------------------------
C     ------------------------- LUNSETIMGOFF -------------------------
C      
C     STATIC LOCATION    257 -- IDSP
C                        258 -- ISBARE
C                        259 -- ISTACK (OVERALL)
C                        260 -- MAXIM
C
C23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
C--*********************************************************************
 
      MODULE LUNHDR_INFO
         INTEGER, PARAMETER :: NUMLUNST = 100
         TYPE REAL_POINTER
            REAL, POINTER   :: IPT(:) 
         END TYPE REAL_POINTER

         TYPE(REAL_POINTER) :: LUNHDRBUF(NUMLUNST)
      END MODULE LUNHDR_INFO


C     ----------- LUNSETLUNS ---------------------------------------

      SUBROUTINE LUNSETLUNS(LUN,IVALA,IVALSTK,IVALLUN,IVALFLIP,IRTFLG)

C     SETS OFFSETS IN LUNSTK(LUN)....

      COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100),LUNFLIP(100)

      LUNARA(LUN)  = IVALA
      LUNSTK(LUN)  = IVALSTK
      LUNARB(LUN)  = IVALLUN
      LUNFLIP(LUN) = IVALFLIP

      IRTFLG = 0

      END

C     ----------- LUNREDHED ---------------------------------------

      SUBROUTINE LUNREDHED(LUN,NX,IMGNUM,CALLERRT,IRTFLG)

C     READS IMAGE HEADER INTO HEADER OBJECT 
C     FOR STACKED IMAGES THIS MUST BE PRECEEDED BY A READ OF THE 
C     OVERALL HEADER TO ENSURE THAT LUNGETHEDOFF SUCCEEDS

#include "LUNHDR.INC"

      INCLUDE 'CMBLOCK.INC'

      COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100)

      COMMON /IOERR/  IERR

      LOGICAL :: CALLERRT
      
C     SET PROPER  OFFSET IN LUNSTK
      LUNSTKSAV   = LUNSTK(LUN)
      LABRECSAV   = LUNARA(LUN)

C     FIND PROPER IMGNUM OFFSET 
      CALL LUNGETHEDOFF(LUN,NX,IMGNUM,
     &                  LUNARA(LUN),LUNSTK(LUN),IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     READ HEADER RECORDS FROM FILE INTO HEADER OBJECT
      IERR   = 0
      IRECT  = 1
      ILOC   = 1
      IRTFLG = 0

      DO WHILE (ILOC <= LENBUF)
C        LENT IS REMAINING LENGTH OF HEADER TO BE FILLED
         LENT = MIN(NX,LENBUF - ILOC + 1)

         CALL REDLIN(LUN,HEADER(ILOC),LENT,IRECT)
         IF (IERR .NE. 0) THEN
             IF (CALLERRT) THEN
                CALL ERRT(102,'I/O ERROR ON FILE HEADER',IERR)
             ENDIF
             IRTFLG = 1
             EXIT
          ENDIF
          ILOC  = ILOC + NX
          IRECT = IRECT + 1
      ENDDO

C     REPLACE OFFSETS IN LUNARA & LUNSTK    
      LUNARA(LUN) = LABRECSAV
      LUNSTK(LUN) = LUNSTKSAV 

      END

C     ------------------------- LUNGETHEDOFF -------------------------

      SUBROUTINE LUNGETHEDOFF(LUN,NX,IMGNUM,
     &           LUNARAOFF,LUNSTKOFF,IRTFLG)

C     SUPPORT ROUTINE TO RETURN RECORD OFFSET FOR HEADER REDLIN/WRTLIN

      INCLUDE 'CMBLOCK.INC'

      IF (IMGNUM == 0) THEN
C        OVERALL HEADER
         LUNARAOFF = 0
         LUNSTKOFF = 0
         IRTFLG    = 0
         RETURN
      ENDIF


C     GET RECORD INFO (CAN BE FROM OVERALL HEADER)
      CALL LUNGETLAB(LUN,LABREC,INDXREC,NRECS,NDUM1,NDUM2,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      IF (INDXREC > 0) THEN
C        INDEXED STACK IMAGE
         CALL LUNREDINDX(LUN,IMGNUM,INDX,NX,IRTFLG)
         IF (IRTFLG == 0 .AND. INDX <= 0) IRTFLG = -1
         IF (IRTFLG .NE. 0) RETURN

         LUNSTKOFF = (INDX-1) * NRECS + LABREC + INDXREC 
         LUNARAOFF = 0  

      ELSE

         CALL LUNGETSTKALL(LUN,ISTACK,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN

         IF (ISTACK == 0 .AND. IMGNUM > 1) THEN
C           NORMAL IMAGE, IMGNUM CAN NOT BE > 1
            CALL ERRT(102,'NOT A STACK, NO IMAGE',IMGNUM)
            RETURN

         ELSEIF (ISTACK == 0) THEN
C           NORMAL IMAGE, IMGNUM IS 1
            LUNSTKOFF = 0
            LUNARAOFF = 0 

         ELSE
C           NORMAL STACKS HAVE ADDITIONAL OVERALL HEADER AT BEGINNING

            CALL LUNGETMAXIM(LUN,MAXIM,IRTFLG)
            IF (IMGNUM > MAXIM) THEN
               IRTFLG = 1
               RETURN
            ENDIF

            LUNSTKOFF = (IMGNUM-1) * NRECS + LABREC
            LUNARAOFF = 0 

         ENDIF
      ENDIF

      END


C     ----------- LUNNEWHDR -----------------------------------------

      SUBROUTINE LUNNEWHDR(LUN,IRTFLG)

C     CREATES STORAGE SPACE FOR A HEADER OBJECT

#include "LUNHDR.INC"
      INCLUDE 'CMBLOCK.INC'

      IPOINTER => LUNHDRBUF(LUN)%IPT 
      IF (.NOT. ASSOCIATED(IPOINTER)) THEN
C        ALLOCATE SPACE FOR THIS HEADER OBJECT
         ALLOCATE(IPOINTER(LENHDR),STAT=IRTFLG)

         IF (IRTFLG .NE. 0) THEN
            CALL ERRT(46,'LUNNEWHDR, FILE HEADER',LENHDR)
            IRTFLG = 1
            RETURN
         ENDIF
         LUNHDRBUF(LUN)%IPT => IPOINTER
      ENDIF

      IRTFLG = 0

      END


C     ------------------------- LUNGETOBJ -------------------------

      SUBROUTINE LUNGETOBJ(LUN,IPOINTER,IRTFLG)

      USE LUNHDR_INFO

      REAL, DIMENSION(:), POINTER :: IPOINTER 

      PARAMETER        (NUMLUNS = 100)

C     POINT TO HEADER OBJECT
      IRTFLG   = 1

      IF (LUN <= 0 .OR. LUN > NUMLUNS) THEN
         CALL ERRT(102,'PGM ERROR, LUN OUT OF RANGE', LUN)
         RETURN
      ENDIF

      IPOINTER => LUNHDRBUF(LUN)%IPT
      IF (.NOT. ASSOCIATED(IPOINTER)) RETURN

      IRTFLG = 0

      END

C     ------------------------- LUNSETIMGOFF -------------------------

      SUBROUTINE LUNSETIMGOFF(LUN,IMGNUM,NX,IRTFLG)

C     SUPPORT ROUTINE TO SET RECORD OFFSET FOR REDLIN/WRTLIN
C     SHOULD ONLY BE CALLED FOR STACKS!

      INCLUDE 'CMBLOCK.INC'

      COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100)

C     GET RECORD INFO (CAN BE FROM OVERALL HEADER)
      CALL LUNGETLAB(LUN,LABREC,INDXREC,NRECS,NDUM1,NDUM2,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      IF (IMGNUM == 0) THEN
C        OVERALL HEADER
         LUNARAOFF = 0
         LUNSTKOFF = 0

      ELSEIF (INDXREC > 0) THEN
C        INDEXED STACK
         CALL LUNREDINDX(LUN,IMGNUM,INDX,NX,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN

         LUNSTKOFF = (INDX-1) * NRECS + INDXREC + LABREC 
         LUNARAOFF = LABREC
  
      ELSE
C        NORMAL IMAGE OR NORMAL STACK
         CALL LUNGETSTKALL(LUN,ISTACK,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN

         IF (ISTACK == 0 .AND. IMGNUM > 1) THEN
C           NORMAL IMAGE, IMGNUM CAN NOT BE > 1
            CALL ERRT(101,'NOT A STACK, NO IMAGE',IMGNUM)
            RETURN

         ELSEIF (ISTACK == 0) THEN
C           NORMAL IMAGE, IMGNUM IS 1
            LUNSTKOFF = 0
            LUNARAOFF = LABREC 

         ELSE
C           NORMAL STACKS HAVE ADDITIONAL OVERALL HEADER AT BEGINNING

            LUNSTKOFF = (IMGNUM-1) * NRECS + LABREC 
            LUNARAOFF = LABREC 
         ENDIF
      ENDIF

      LUNARA(LUN) = LUNARAOFF
      LUNSTK(LUN) = LUNSTKOFF

      END

C     ------------------------- LUNGETTYPE ----------------------------

      SUBROUTINE LUNGETTYPE(LUN,ITYPE,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      ITYPE  = HEADER(5)

      END

C     ------------------------- LUNSETTYPE ----------------------------

      SUBROUTINE LUNSETTYPE(LUN,ITYPE,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     SET VALUES
      HEADER(5)  = ITYPE

      END

C     ------------------------- LUNGETISTACK ----------------------------

      SUBROUTINE LUNGETISTACK(LUN,ISTACK,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      ISTACK  = HEADER(24)

      END
C     ------------------------- LUNSETISTACK ----------------------------

      SUBROUTINE LUNSETISTACK(LUN,ISTACK,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     SET VALUES
      HEADER(24) = ISTACK

      END

C     ------------------------- LUNGETLAB ----------------------------

      SUBROUTINE LUNGETLAB(LUN,LABREC,INDXREC,NRECS,
     &                     LABBYT,LENBYT,IRTFLG)

#include "LUNHDR.INC"
      INCLUDE 'CMBLOCK.INC'

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET RETURN VALUES
      LABREC  = HEADER(13)
      NRECS   = HEADER(3)
      LABBYT  = HEADER(22)
      LENBYT  = HEADER(23)

      IF (LABREC <= 0 .OR. LABREC >= 100000 .OR.
     &    LABBYT <= 0 .OR. LABBYT >= 10000000) THEN
C        IMPOSSIBLE VALUE --> NON-EXISTING IMAGE??
         IRTFLG = 1
         RETURN
      ENDIF

      IF (LENBYT <= 0) THEN
C        CORRECT BAD LENBYT (UNAVAILABLE ON OLD VAX FILES)
         CALL LUNGETSIZE(LUN,NX,NY,NZ,IRTFLG)
         LENBYT = NX * 4
      ENDIF

C     CORRECT UNREASONABLE LABREC (BAD VALUE ONCE)        
      LABRECT = 1024 / LENBYT

      ITEMP = MOD(1024,LENBYT)
      IF (ITEMP .NE. 0) LABRECT = LABRECT + 1

      IF (LABRECT <= 0 .OR. LABREC .NE. LABRECT) THEN
C         UNREASONABLE LABREC NUMBER SO DEFAULT IT
          LABREC = LABRECT
      ENDIF

C     FIND  NUMBER OF INDX RECORDS IN INDEXED STACK HEADER
      ISTACK  = HEADER(259)
      IF (ISTACK >= 0) THEN 
C        NOT AN INDEXED STACK
         INDXREC  = 0
      ELSE
         ISTACK = - ISTACK
         FINDXREC = FLOAT(ISTACK) / FLOAT(LENBYT / 4)
         INDXREC  = ISTACK /  (LENBYT / 4)
         IF (FINDXREC > INDXREC) INDXREC  = INDXREC + 1 
      ENDIF

      IRTFLG = 0

      END

C     ------------------------- LUNSETLAB ----------------------------

      SUBROUTINE LUNSETLAB(LUN,LABREC,NRECS,LABBYT,LENBYT,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET RETURN VALUES
      HEADER(13) = LABREC  
      HEADER(3)  = NRECS   
      HEADER(22) = LABBYT  
      HEADER(23) = LENBYT  

      IRTFLG = 0

      END

C     ----------- LUNWRTCURHED -----------------------------------------

      SUBROUTINE LUNWRTCURHED(LUN,IRTFLG)

      INTEGER  :: LUN,IRTFLG

      INTEGER  :: NX,NY,NZ,IMGNUM

C     GET IMGNUM VALUE 
      CALL LUNGETINUSE(LUN,IMGNUM,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET NX VALUE 
      CALL LUNGETSIZE(LUN,NX,NY,NZ,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     REPLACE THE CURRENT HEADER BACK IN THE FILE
      CALL LUNWRTHED(LUN,NX,IMGNUM,IRTFLG)

      END

C     ----------- LUNWRTHED -----------------------------------------

      SUBROUTINE LUNWRTHED(LUN,NX,IMGNUM,IRTFLG)

C     WRITES HEADER OBJECT TO SPECIFIED IMAGE HEADER

#include "LUNHDR.INC"

      INTEGER  :: LUNARA,LUNSTK,LUNARB
      COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100)

      INCLUDE 'CMBLOCK.INC'

      INTEGER  :: IERR
      COMMON /IOERR/ IERR

      INTEGER  :: LUN,NX,IMGNUM,IRTFLG

      INTEGER  :: LUNSTKSAV,LABRECSAV,IRECT,ILOC,LENT


C     SET PROPER IMGNUM OFFSET 

C     SAVE CURRENT FILE OFFSETS FOR LUNARA & LUNSTK
      LUNSTKSAV = LUNSTK(LUN)
      LABRECSAV = LUNARA(LUN)

      CALL LUNGETHEDOFF(LUN,NX,IMGNUM,
     &     LUNARA(LUN),LUNSTK(LUN),IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     WRITE HEADER RECORDS FROM LUNHDR INTO FILE 
      IERR   = 0
      IRECT  = 1
      ILOC   = 1
      IRTFLG = 0

      DO WHILE (ILOC <= LENBUF)
C        LENT IS REMAINING LENGTH OF HEADER TO BE WRITTEN
         LENT = MIN(NX,LENBUF - ILOC + 1)

         CALL WRTLIN(LUN,HEADER(ILOC),LENT,IRECT)
         IF (IERR .NE. 0) THEN
            CALL ERRT(102,'WRITING TO FILE HEADER, RECORD #',IRECT)
            IRTFLG = 1
            GOTO 999
         ENDIF

         ILOC  = ILOC + NX
         IRECT = IRECT + 1
      ENDDO

C     REPLACE OFFSETS IN LUNARA & LUNSTK    
999   LUNARA(LUN) = LABRECSAV
      LUNSTK(LUN) = LUNSTKSAV 

      END


C     ----------- LUNMTHDR -----------------------------------------
 
      SUBROUTINE LUNMTHDR(LUN,IRTFLG)

#include "LUNHDR.INC"

C     WANT TO DEALLOCATE AND CLOSE AN OPEN HEADER OBJECT

      IPOINTER => LUNHDRBUF(LUN)%IPT
      IF (ASSOCIATED(IPOINTER))  DEALLOCATE(IPOINTER)
      NULLIFY(LUNHDRBUF(LUN)%IPT)

C     CLEAR FILENAME ALSO
      LUNFILNAM(LUN) = CHAR(0)
      
      IRTFLG = 0

      END

C     ------------------------- LUNGETSTK ----------------------------

       SUBROUTINE LUNGETSTK(LUN,ISTACK,MAXIM,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET RETURN VALUES
      ISTACK = HEADER(24)
      MAXIM  = HEADER(26)

      IRTFLG = 0

      END

C     ------------------------- LUNGETINUSE ----------------------------

       SUBROUTINE LUNGETINUSE(LUN,INUSE,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN
 
C     SET STACK RELATED LOCATIONS
      INUSE = HEADER(27) 

      END

C     ------------------------- LUNSETINUSE ----------------------------

       SUBROUTINE LUNSETINUSE(LUN,INUSE,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     SET STACK RELATED LOCATIONS
      HEADER(27) = INUSE 

      IRTFLG = 0

      END

C     ------------------------- LUNGETMAXIM ----------------------------

       SUBROUTINE LUNGETMAXIM(LUN,MAXIM,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET MAXIM VALUE FROM HEADER OBJECT STATIC AREA
      MAXIM   = HEADER(260)

      IRTFLG = 0

      END

C     ------------------------- LUNCOPYMAXIM -------------------------

       SUBROUTINE LUNCOPYMAXIM(LUN,MAXIM,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET MAXIM VALUE FROM HEADER OBJECT NON-STATIC AREA
      MAXIM       = HEADER(26)
      HEADER(260) = HEADER(26)

      IRTFLG = 0

      END

C     ------------------------- LUNSETMAXIM ----------------------------

       SUBROUTINE LUNSETMAXIM(LUN,MAXIM,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     SET MAXIM VALUE IN HEADER OBJECT 
      HEADER(26) = MAXIM

      IRTFLG = 0

      END


C     ------------------------- LUNSETMAXALL -------------------------

       SUBROUTINE LUNSETMAXALL(LUN,MAXIM,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     SET MAXIM VALUE IN HEADER OBJECT STATIC AREA
      HEADER(260)  = MAXIM

      IRTFLG = 0

      END


C     ------------------------- LUNSAVMAXIM ----------------------------

      SUBROUTINE LUNSAVMAXIM(LUN,NX,MAXIM,IRTFLG)

C     COMPLICATED SINCE I DO NOT WANT TO ALTER CURRENT FILE HEADER OBJECT

#include "LUNHDR.INC"

      INCLUDE 'CMBLOCK.INC'
      INCLUDE 'CMLIMIT.INC'
      COMMON /IOBUF/ BUF(NBUFSIZ)

      COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100)

      COMMON /IOERR/  IERR

C     SET PROPER IMGNUM OFFSET IN LUNSTK
      IMGOFFSET   = 0
      LUNSTKSAV   = LUNSTK(LUN)
      LUNSTK(LUN) = IMGOFFSET

C     SET NO OFFSET FOR HEADER RECORDS IN LUNARA
      LABRECSAV   = LUNARA(LUN)
      LUNARA(LUN) = 0

C     READ HEADER RECORDS FROM FILE INTO BUFFER
      IERR  = 0
      IRECT = 1
      ILOC  = 1
      DO WHILE (ILOC <= LENBUF)
C        LENT IS REMAINING LENGTH OF HEADER TO BE FILLED
         LENT = MIN(NX,LENBUF - ILOC + 1)

         CALL REDLIN(LUN,BUF(ILOC),LENT,IRECT)
         IF (IERR .NE. 0) THEN
            CALL ERRT(102,'READING OVERALL HEADER, I/O ERROR',IERR)
            IRTFLG = 1
            GOTO 999
         ENDIF
         ILOC  = ILOC + NX
         IRECT = IRECT + 1
      ENDDO

C     SET MAXIM VALUE IN BUF
      BUF(26)  = MAXIM
      BUF(260) = MAXIM

C     WRITE HEADER RECORDS BACK INTO FILE 
      IERR  = 0
      IRECT = 1
      ILOC  = 1
      DO WHILE (ILOC <= LENBUF)
C        LENT IS REMAINING LENGTH OF HEADER TO BE WRITTEN
         LENT = MIN(NX,LENBUF - ILOC + 1)

         CALL WRTLIN(LUN,BUF(ILOC),LENT,IRECT)
         IF (IERR .NE. 0) THEN
            CALL ERRT(102,'WRITING OVERALL HEADER, I/O ERROR',IERR)
            IRTFLG = 1
            GOTO 999
         ENDIF

         ILOC  = ILOC + NX
         IRECT = IRECT + 1
      ENDDO

      IRTFLG = 0

C     REPLACE OFFSETS IN LUNARA & LUNSTK    
999   LUNARA(LUN) = LABRECSAV
      LUNSTK(LUN) = LUNSTKSAV 

      END


C     ------------------------- LUNGETSIZE ----------------------------

       SUBROUTINE LUNGETSIZE(LUN,NX,NY,NZ,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET RETURN VALUES
      NX = HEADER(12)
      NY = HEADER(2)
      NZ = HEADER(1)
      IF (NZ < 0) NZ = -NZ

      IRTFLG = 0

      END

C     ------------------------- LUNSETSIZE ----------------------------

       SUBROUTINE LUNSETSIZE(LUN,NX,NY,NZ,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     SET VALUES
      HEADER(12)  = NX
      HEADER(2)   = NY
      HEADER(1)   = NZ

      IRTFLG = 0

      END



C     ------------------------- LUNGETSTAT ----------------------------

      SUBROUTINE LUNGETSTAT(LUN,IMAMI,FMIN,FMAX,AV,SIG,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET RETURN VALUES
      IMAMI = HEADER(6) + 0.5
      FMIN  = HEADER(8)
      FMAX  = HEADER(7)
      AV    = HEADER(9)
      SIG   = HEADER(10)

      IRTFLG = 0

      END
C     ------------------------- LUNSETSTAT ----------------------------

      SUBROUTINE LUNSETSTAT(LUN,IMAMI,FMIN,FMAX,AV,SIG,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET RETURN VALUES
      HEADER(6)  = IMAMI 
      HEADER(8)  = FMIN  
      HEADER(7)  = FMAX  
      HEADER(9)  = AV    
      HEADER(10) = SIG  

      IRTFLG = 0

      END

C     ------------------------- LUNGETANG ----------------------------

      SUBROUTINE LUNGETANG(LUN,IANGLE,PHI,THETA,PSI,XOFF,YOFF,ZOFF,
     &                     KANGLE,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET RETURN VALUES
      IANGLE   = HEADER(14)
      PHI      = HEADER(15)
      THETA    = HEADER(16)
      PSI      = HEADER(17)
      XOFF     = HEADER(18)
      YOFF     = HEADER(19)
      ZOFF     = HEADER(20)
      KANGLE   = HEADER(30)

      IRTFLG = 0

      END

C     ------------------------- LUNGETVAL ----------------------------

       SUBROUTINE LUNGETVAL(LUN,ILOC,VAL,IRTFLG)

#include "LUNHDR.INC"

      INTEGER   :: LUN,ILOC,IRTFLG
      REAL      :: VAL

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET STACK RELATED LOCATIONS
      VAL = HEADER(25)

      IRTFLG = 0

      END


C     ------------------------- LUNGETVALS ----------------------------

      SUBROUTINE LUNGETVALS(LUN,IGO,NVAL,BUFOUT,IRTFLG)

#include "LUNHDR.INC"

      REAL, DIMENSION(NVAL)  :: BUFOUT

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      IEND = IGO + NVAL - 1
      IF (IGO <= 0 .OR. IEND > 256) THEN
         CALL ERRT(102,'HEADER LOCATION MUST BE 0...256',IEND)
         IRTFLG = 1
         RETURN
      ENDIF

C     GET RETURN VALUES
      DO IVAL = IGO,IEND
         BUFOUT(IVAL-IGO+1) = HEADER(IVAL)
      ENDDO

      IRTFLG = 0

      END

C     ------------------------- LUNSETVALS ----------------------------

      SUBROUTINE LUNSETVALS(LUN,IGO,NVAL,BUFVALS,IRTFLG)

#include "LUNHDR.INC"

      REAL, DIMENSION(NVAL)  :: BUFVALS

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN
  
      IEND = IGO+NVAL-1
      IF (IGO <= 0 .OR. IEND > 256) THEN
         CALL ERRT(102,'HEADER LOCATION MUST BE < 257',IEND)
         IRTFLG = 1
         RETURN
      ENDIF

C     SET VALUES IN HEADER OBJECT
      DO IVAL = IGO,IEND
         HEADER(IVAL) = BUFVALS(IVAL-IGO+1)   
      ENDDO

C     COPY HEADER OBJECT TO FILE
      CALL LUNWRTCURHED(LUN,IRTFLG)

      END

C     ------------------------- LUNSETANG ----------------------------

      SUBROUTINE LUNSETANG(LUN,IANGLE,PHI,THETA,PSI,XOFF,YOFF,ZOFF,
     &                     KANGLE,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     SET VALUES
      HEADER(14) = IANGLE
      HEADER(15) = PHI
      HEADER(16) = THETA
      HEADER(17) = PSI
      HEADER(18) = XOFF
      HEADER(19) = YOFF
      HEADER(20) = ZOFF
      HEADER(30) = KANGLE

C     COPY HEADER OBJECT TO FILE
      CALL LUNWRTCURHED(LUN,IRTFLG)

      END

C     ------------------------- LUNGETFILE ----------------------------

      SUBROUTINE LUNGETFILE(LUN,FILNAM,NLET,DSP,IRTFLG)

#include "LUNHDR.INC"

      CHARACTER (LEN=*) :: FILNAM
      CHARACTER (LEN=1) :: DSP

C     RETRIEVE CURRENT FILENAME
      FILNAM = LUNFILNAM(LUN)
      NLET   = LNBLNKN(FILNAM)

      CALL LUNGETDSP(LUN,DSP,IRTFLG)

      IRTFLG = 0

      END

C     ------------------------- LUNSETFILE ----------------------------

      SUBROUTINE LUNSETFILE(LUN,FILNAM,DSP,IRTFLG)


#include "LUNHDR.INC"

      CHARACTER *(*)   FILNAM
      CHARACTER *1     DSP

      IF (FILNAM(1:1) .NE. CHAR(0)) THEN
C        SET CURRENT FILENAME IN HEADER OBJECT 
         NLET           = LNBLNKN(FILNAM)
         LUNFILNAM(LUN) = FILNAM(1:NLET)
      ENDIF

      IF (DSP .NE. CHAR(0)) THEN
         CALL LUNSETDSP(LUN,DSP,IRTFLG)
      ENDIF

      IRTFLG = 0

      END

C     ------------------------- LUNSETIMNUM -------------------------

      SUBROUTINE LUNSETIMNUM(LUN,FILNAM,IMGNUM,DSP,IRTFLG)

      CHARACTER(LEN=*)       ::  FILNAM
      CHARACTER(LEN=1)       ::  DSP

C     APPENDS IMGNUM TO INPUT: FILNAM  AFTER @@ OR 
C         SETS FILENAME IN: HEADER OBJECT
C         ALSO RETURNS: NEW FILENAME IN: FILNAM

C     APPEND IMAGE NUMBER TO BARE STACK FILE NAME
C     (INTTOCHAR ALSO RETURNS NEW VALUE FOR NLET)
 
      LENAT = INDEX(FILNAM,'@@')
      IF (LENAT == 0) LENAT = INDEX(FILNAM,'*') -1
      IF (LENAT < 0) LENAT = 0

      CALL INTTOCHAR(IMGNUM,FILNAM(LENAT+1:),NLET,0)
      IF (NLET < 0) THEN
         IRTFLG = 1
         RETURN
      ENDIF
      NLET = NLET + LENAT

C     SET NEW FILENAME IN HEADER OBJECT
      CALL LUNSETFILE(LUN,FILNAM(1:NLET),'N',IRTFLG)

      END

C     ------------------------- LUNGETINDXTOP -------------------------

      SUBROUTINE LUNGETINDXTOP(LUN,INDXTOP,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT (MUST BE OVERALL HEADER)
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET INDXTOP FROM HEADER OBJECT
      INDXTOP = HEADER(28)
      IRTFLG = 0

      END

C     ------------------------- LUNSETINDXTOP -------------------------

      SUBROUTINE LUNSETINDXTOP(LUN,INDXTOP,IRTFLG)

C     SETS INDXTOP IN HEADER OBJECT

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT (MUST BE OVERALL HEADER!!)
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     SET INDXTOP IN HEADER OBJECT
      HEADER(28) = INDXTOP
      IRTFLG = 0

      END

C     ------------------------- LUNGETDSP -------------------------

      SUBROUTINE LUNGETDSP(LUN,DSP,IRTFLG)

#include "LUNHDR.INC"

      CHARACTER * 1    DSP

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET DSP FROM HEADER OBJECT
      IDSP = HEADER(257)

      DSP = 'O'
      IF (IDSP == 1) DSP = 'N'

      END

C     ------------------------- LUNSETDSP -------------------------

      SUBROUTINE LUNSETDSP(LUN,DSP,IRTFLG)

#include "LUNHDR.INC"

      CHARACTER * 1    DSP

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     SET DSP IN HEADER OBJECT
      HEADER(257) = 0
      IF ( DSP == 'N') HEADER(257) = 1

      END

C     ------------------------- LUNGETISBARE -------------------------

      SUBROUTINE LUNGETISBARE(LUN,ISBARE,IRTFLG)

#include "LUNHDR.INC"

      LOGICAL    ISBARE

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET ISBARE FROM HEADER OBJECT
      ISBARE = .FALSE.
      IF (HEADER(258) == 1.0) ISBARE = .TRUE.

      END


C     ------------------------- LUNSETISBARE -------------------------

      SUBROUTINE LUNSETISBARE(LUN,ISBARE,IRTFLG)

#include "LUNHDR.INC"

      LOGICAL          ISBARE

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     SET ISBARE IN HEADER OBJECT
      HEADER(258)             = 0.0
      IF (ISBARE) HEADER(258) = 1.0

      END


C     ------------------------- LUNBAREFILE -------------------------

      SUBROUTINE LUNBAREFILE(LUN,FILNAM,IRTFLG)

      CHARACTER *(*)   FILNAM
      LOGICAL          ISBARE

      LOCAT  = INDEX(FILNAM,'@@')
      NLET   = LNBLNKN(FILNAM)
      ISBARE = (LOCAT > 0 .AND. LOCAT == NLET) 

C     SET ISBARE IN HEADER OBJECT
      CALL LUNSETISBARE(LUN,ISBARE,IRTFLG)

      END

C     ------------------------- LUNSETSTKALL -------------------------

      SUBROUTINE LUNSETSTKALL(LUN,ISTACK,IRTFLG)

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     SET ISTACK IN STATIC AREA OF HEADER OBJECT
      HEADER(259) = ISTACK

      RETURN
      END

C     ------------------------- LUNCOPYSTK -------------------------

      SUBROUTINE LUNCOPYSTK(LUN,ISTACK,IRTFLG)

#include "LUNHDR.INC"

      LOGICAL          ISBARE

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     SET ISTACK IN HEADER OBJECT STATIC AREA
      ISTACK      = HEADER(24) 
      HEADER(259) = ISTACK

      RETURN
      END

C     ------------------------- LUNGETSTKALL -------------------------

      SUBROUTINE LUNGETSTKALL(LUN,IVAL,IRTFLG)

#include "LUNHDR.INC"

      LOGICAL    ISBARE

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET IVAL FROM HEADER OBJECT
      IVAL = HEADER(259) 

      RETURN
      END

C     ------------------------- LUNGETTITLE ----------------------------

      SUBROUTINE LUNGETTITLE(LUN,FILETITLE,NLET,IRTFLG)

#include "LUNHDR.INC"

      CHARACTER(LEN=*)   :: FILETITLE

      CHARACTER(LEN=180) :: CLINE
      REAL,DIMENSION(45) :: ZBUF
      EQUIVALENCE    (CLINE,ZBUF)

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     MOVE ALPHA-NUMERIC PART OF HEADER TO ZBUF FOR CLINE ACCESS
      DO  I = 1,45 
         ZBUF(I) = HEADER(I+211) 
      ENDDO

      IF (CLINE(2:2) == '-') THEN
C        NOTE THAT ALPHA-NUMERICAL DATA (ABCD) WILL BE WRITTEN (DCBA)
         CALL REVERSEBYTES(CLINE,180,IRTFLG)
      ENDIF

C     RECOVER TITLE FROM CLINE
      FILETITLE = CLINE(21:180)
      NLET      = lnblnkn(FILETITLE)

      IRTFLG = 0

      END

C     ------------------------- LUNGETDATE ----------------------------

      SUBROUTINE LUNGETDATE(LUN,FILEDATE,FILETIME,IRTFLG)

#include "LUNHDR.INC"

      CHARACTER *(*) FILEDATE,FILETIME
      DIMENSION      ZBUF(45)
      CHARACTER *180 CLINE
      EQUIVALENCE    (CLINE,ZBUF)

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     MOVE ALPHA-NUMERIC PART OF HEADER TO ZBUF FOR CLINE ACCESS
      DO  I = 1,7 
         ZBUF(I) = HEADER(I+211) 
      ENDDO

      IF (CLINE(2:2) == '-') THEN
C        NOTE THAT ALPHA-NUMERICAL DATA (ABCD) WILL BE WRITTEN (DCBA)
         CALL REVERSEBYTES(CLINE,28,IRTFLG)
      ENDIF

C     READ DATE & TIME FROM HEADER OBJECT
      FILEDATE  = CLINE(1:11) // ' '
      IF (FILEDATE(10:10) == CHAR(0) .OR. FILEDATE(10:10) == ' ')
     &   THEN
C        2 DIGIT DATE, MAKE IT 4 DIGIT DATE
         FILEDATE(10:11) = FILEDATE(8:9)
         FILEDATE(8:9)   = '19'
      ENDIF
      FILETIME  = CLINE(13:20) 

      IRTFLG = 0

      END

C     ------------------------- LUNSETTIME ----------------------------

      SUBROUTINE LUNSETTIME(LUN,IRTFLG)

#include "LUNHDR.INC"

      DIMENSION      ZBUF(5)
      CHARACTER *20  CLINE
      EQUIVALENCE    (CLINE,ZBUF)

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     PUT CURRENT DATE AND TIME INTO THIS IMAGE HEADER
C     Y2K DATE TAKES 2 & 3/4 FLOATING POINT VARIABLES IN BUF (11 CHAR)
      CALL DATE_2K(CLINE)

C     PUT CURRENT TIME INTO THIS IMAGE HEADER
C     TIME TAKES 2 FLOATING POINT VARIABLES IN BUF (8 CHAR.)
      CALL MYTIME(CLINE(13:20))

C     COPY CLINE STUFF INTO HEADER OBJECT
      DO  I = 1,5 
          HEADER(I+211) = ZBUF(I)
      ENDDO

      END     
C     ------------------------- LUNSETTITLE ----------------------------

      SUBROUTINE LUNSETTITLE(LUN,FILETITLE,IRTFLG)

#include "LUNHDR.INC"
      CHARACTER *(*) FILETITLE
      DIMENSION      ZBUF(40)
      CHARACTER *160 CLINE
      EQUIVALENCE    (CLINE,ZBUF)

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      IF (FILETITLE(1:1) .NE. CHAR(0)) THEN
C        TITLE TAKES 40 FLOATING POINT VARIABLES IN BUF (160 CHAR)
         CLINE(1:160) = FILETITLE(1:160)

C        COPY CLINE STUFF  INTO HEADER OBJECT
         DO  I = 1,40 
            HEADER(I+216) = ZBUF(I)
         ENDDO
      ENDIF

      IRTFLG = 0

      END     

C     ------------------------- LUNSAYINFO ----------------------------

      SUBROUTINE LUNSAYINFO(LUN,IRTFLG)

      INCLUDE 'CMLIMIT.INC'

      CHARACTER *1     DSP
      CHARACTER *104   CSTRING
      CHARACTER * 2    TYPE
      CHARACTER *12    CDAT
      CHARACTER *8     CTIM
      CHARACTER *160   CTIT

      CHARACTER(LEN=MAXNAM):: FILNAM

      LOGICAL       :: SILENT,VERBOSE,USE_SPIRE
      COMMON /IPRTT/   IDUM245,NTRACE,NALPH,VERBOSE,USE_SPIRE,SILENT
      COMMON /UNITS/   LUNC,NIN,NOUT,NECHO,IFOUND,NLOG,NDAT

#ifdef USE_MPI
      include 'mpif.h' 
      INTEGER MYPID, COMM, IERR
      COMM = MPI_COMM_WORLD 
      CALL MPI_COMM_RANK(COMM, MYPID, IERR) 
#else
      MYPID = -1
#endif 
      IRTFLG = 1

C     RETRIEVE ITYPE
      CALL LUNGETTYPE(LUN,ITYPE,IRTFLG)

C     RETRIEVE CURRENT HEADER ISTACK 
      CALL LUNGETISTACK(LUN,ISTACK,IRTFLG)

C     RETRIEVE SIZE
      CALL LUNGETSIZE(LUN,NX,NY,NZ,IRTFLG)

C     RETRIEVE IMGNUM FROM HEADER OBJECT
      CALL LUNGETINUSE(LUN,IMGNUM,IRTFLG)

      IF (ITYPE == -2) THEN
            TYPE = 'P '
      ELSEIF (ITYPE == -9)  THEN
            TYPE = 'FS'
      ELSEIF (ITYPE == -11) THEN
            TYPE = 'O2'
      ELSEIF (ITYPE == -12) THEN
            TYPE = 'E2'
      ELSEIF (ITYPE == -21) THEN
            TYPE = 'O3'
      ELSEIF (ITYPE == -22) THEN
            TYPE = 'E3'
      ELSEIF (ITYPE == 0)   THEN
            TYPE = 'D '
      ELSEIF (ITYPE == 1 .AND. ISTACK < 0 .AND. IMGNUM <= 0)THEN
            TYPE = 'I2'
      ELSEIF (ITYPE == 3 .AND. ISTACK < 0 .AND. IMGNUM <= 0)THEN
            TYPE = 'I3'
      ELSEIF (ITYPE == 1 .AND. ISTACK > 0 .AND. IMGNUM <= 0)THEN
            TYPE = 'S2'
      ELSEIF (ITYPE == 3 .AND. ISTACK > 0 .AND. IMGNUM <= 0)THEN
            TYPE = 'S3'
      ELSEIF (ITYPE == 3)  THEN
            TYPE = 'R3'
      ELSE
            TYPE = 'R '
      ENDIF

C     RETRIEVE CURRENT FILENAME (INCLUDES IMGNUM IF STACKED IMAGE)
      CALL LUNGETFILE(LUN,FILNAM,NLET,DSP,IRTFLG)

C     RECOVER FILE DATE, TIME & TITLE FROM HEADER
      CALL LUNGETDATE(LUN,CDAT,CTIM,IRTFLG)
      CALL LUNGETTITLE(LUN,CTIT,LENTIT,IRTFLG)
      
C     GET RECORD INFO
      CALL LUNGETLAB(LUN,LABREC,INDXREC,NRECS,LABBYT,LENBYT,IRTFLG)

      IF (USE_SPIRE .AND. DSP == 'N' .AND. FILNAM(1:1) .NE. '_') THEN
         CALL SPIREOUT(FILNAM(:NLET),IRTFLG)

         IF (ISTACK .NE. 0 .AND. IMGNUM == 0 .AND. NZ > 1)THEN
            CALL LUNGETSTK(LUN,ISTACK,MAXIM,IRTFLG)
            WRITE(CSTRING,89)TYPE,NX,NY,NZ,MAXIM,CDAT,CTIM,
     &                       DSP,LABBYT
         ELSEIF (ISTACK .NE. 0 .AND. IMGNUM == 0)THEN
C           OVERALL STACKED IMAGE 
            CALL LUNGETSTK(LUN,ISTACK,MAXIM,IRTFLG)
            WRITE(CSTRING,90)TYPE,NX,NY,MAXIM,CDAT,CTIM,DSP,LABBYT

         ELSE IF (IMGNUM > 0) THEN
C           STACKED IMAGE
            WRITE(NOUT,92)TYPE,NX,NY,IMGNUM,CDAT,CTIM,DSP
            WRITE(CSTRING,92)TYPE,NX,NY,IMGNUM,CDAT,CTIM,DSP

        ELSE IF (NZ > 1) THEN
C           SIMPLE VOLUME
            WRITE(CSTRING,93)TYPE,NX,NY,NZ,CDAT,CTIM,DSP,LABBYT

        ELSE IF (NZ > 1) THEN
C           SIMPLE VOLUME
            WRITE(CSTRING,93)TYPE,NX,NY,NZ,CDAT,CTIM,DSP,LABBYT

         ELSE
C           SIMPLE IMAGE
            WRITE(CSTRING,94)TYPE,NX,NY,CDAT,CTIM,DSP,LABBYT
         ENDIF

         CALL SPIREOUT(CSTRING,IRTFLG)
      ENDIF



      IF (VERBOSE .AND. IFOUND .NE. -4) THEN
C         PRINT STACK OPENING INFORMATION

         LENT = LENTIT + NLET
         IF (LENTIT <= 0 .AND. NLET > 0) THEN
C           FILENAME BUT NO TITLE
            IF (MYPID <= 0) THEN
               WRITE(NOUT,*) ' ',FILNAM(:NLET)
            ENDIF


         ELSE IF (LENT > 0 .AND. LENT < 70) THEN
C           HAS FILENAME AND TITLE THAT FIT ON ONE LINE
            IF (MYPID <= 0) THEN
               WRITE(NOUT,*) ' ',FILNAM(:NLET),'     /',CTIT(:LENTIT)
            ENDIF


         ELSEIF (LENT > 0) THEN
C           FILENAME AND TITLE DO NOT FIT ON SINGLE LINE
            IF (NLET > 0) WRITE(NOUT,*) ' ',FILNAM(:NLET)
            LENT = MIN(80,LENTIT)

            IF (MYPID <= 0) THEN
               WRITE(NOUT,*) ' ',CTIT(1:LENT)
               IF (LENTIT > 80)  WRITE(NOUT,*) ' ',CTIT(81:LENTIT)
            ENDIF

         ENDIF

         IF (ISTACK .NE. 0 .AND. IMGNUM == 0 .AND. NZ > 1)THEN
C           OVERALL STACKED VOLUME FILE
            CALL LUNGETSTK(LUN,ISTACK,MAXIM,IRTFLG)

            IF (MYPID <= 0) THEN
               WRITE(NOUT,89)TYPE,NX,NY,NZ,  MAXIM,CDAT,CTIM,
     &                       DSP,LABBYT
89             FORMAT('  (',A,') ',3(I0,1X),' (.. ',I0,') CREATED ',
     &                A11, ' AT ',A, 2X,A,' HEADER BYTES: ',I0)
            ENDIF
            

         ELSEIF (ISTACK .NE. 0 .AND. IMGNUM == 0)THEN
C           OVERALL STACKED IMAGE 
            CALL LUNGETSTK(LUN,ISTACK,MAXIM,IRTFLG)

            IF (MYPID <= 0) THEN
               WRITE(NOUT,90)TYPE,NX,NY ,MAXIM,CDAT,CTIM,DSP,LABBYT
            ENDIF
90          FORMAT('  (',A,') ',2(I0,1X),' (.. ',I0,') CREATED ',A11,
     &             ' AT ',A, 2X,A,' HEADER BYTES: ',I0)


         ELSEIF (IMGNUM > 0 .AND. NZ > 1) THEN
C           STACKED VOLUME
            IF (MYPID <= 0) THEN
               WRITE(NOUT,91) TYPE,NX,NY,NZ, IMGNUM,CDAT,CTIM,DSP
            ENDIF
91          FORMAT('  (',A,') ',3(I0,1X),' (@@',I0,')  CREATED ',A11,
     &             ' AT ',A, 2X,A)


         ELSE IF (IMGNUM > 0) THEN
C           STACKED IMAGE
            IF (MYPID <= 0) THEN
               WRITE(NOUT,92)TYPE,NX,NY, IMGNUM,CDAT,CTIM,DSP
            ENDIF
92          FORMAT('  (',A,') ',2(I0,1X),' (@@',I0,')  CREATED ',A11,
     &             ' AT ',A, 2X,A)


        ELSE IF (NZ > 1) THEN
C           SIMPLE VOLUME
            IF (MYPID <= 0) THEN
               WRITE(NOUT,93) TYPE,NX,NY,NZ, CDAT,CTIM,DSP,
     &                        LABBYT
93             FORMAT('  (',A,') ',3(I0,1X),' CREATED ',A11,' AT ',A,2X,
     &                A, ' HEADER BYTES: ',I0)
            ENDIF


         ELSE
C           SIMPLE IMAGE
            IF (MYPID <= 0) THEN
               WRITE(NOUT,94)TYPE,NX,NY,CDAT,CTIM,DSP,LABBYT
94             FORMAT('  (',A,') ',2(I0,1X),' CREATED ',A11,' AT ',A,2X,
     &                A,' HEADER BYTES: ',I0)
            ENDIF
         ENDIF
      ENDIF

      IRTFLG = 0

      END




C     ------------------------- LUNSETCOMMON ----------------------------

      SUBROUTINE LUNSETCOMMON(LUN,IRTFLG)

#include "LUNHDR.INC"

      INCLUDE 'CMBLOCK.INC'

      CHARACTER(LEN=12) :: CDUM
      CHARACTER(LEN=1)  :: NULL = CHAR(0)

C     LABLOCK SHOULD BE INLINED AND REMOVED IN FUTURE
      INCLUDE 'LABLOCK.INC'

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET RARE ANGLE HEADER VALUES
      KANGLE   = HEADER(30)
      PHI1     = HEADER(31)
      THETA1   = HEADER(32)
      PSI1     = HEADER(33)
      PHI2     = HEADER(34)
      THETA2   = HEADER(35)
      PSI2     = HEADER(36)

      DO I = 1,64
         HDR_VALS(I) = HEADER(36+I)
      ENDDO

C     RETRIEVE ISTACK
      CALL LUNGETISTACK(LUN,NSTACK,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     RETRIEVE SIZE
      CALL LUNGETSIZE(LUN,NSAMC,NROWC,NSLICE,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     RETRIEVE IREC
      CALL LUNGETLAB(LUN,NDUM1,INDXREC,IREC,LABLEN,NDUM2,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      CALL LUNGETSTAT(LUN,IMAMI,FMIN,FMAX,AV,SIG,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     RECOVER FILE DATE, TIME & TITLE FROM HEADER
C     DATE NOT PASSED IN COMMON ANY MORE AS COMMON IS ONLY 10 CHAR.
      CALL LUNGETDATE(LUN,CDUM,CTIM,IRTFLG)
      CALL LUNGETTITLE(LUN,CTIT,LENTIT,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     RECOVER ANGLES
      CALL LUNGETANG(LUN,IANGLE,PHI,THETA,PSI,XOFF,YOFF,ZOFF, 
     &               KANGLE,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     SET REGISTER VALUES AS NEEDED
      CALL REG_SET(1,FLOAT(NSAMC),  NULL, IRTFLG)
      CALL REG_SET(2,FLOAT(NROWC),  NULL, IRTFLG)
      CALL REG_SET(3,FMAX,          NULL, IRTFLG)
      CALL REG_SET(4,FMIN,          NULL, IRTFLG)
      CALL REG_SET(5,AV,            NULL, IRTFLG)
      CALL REG_SET(6,SIG,           NULL, IRTFLG)
      CALL REG_SET(7,FLOAT(NSLICE), NULL, IRTFLG) 
      CALL REG_SET(8,FLOAT(NSTACK), NULL, IRTFLG) 

      END

C     -------------- LUNSETHDR --------------------------------------

      SUBROUTINE LUNSETHDR(LUNT,LUN,NX,NY,NZ,
     &                     ITYPE,ISTACK,IRTFLG)

C     INITIALIZES HEADER OBJECT. DOES NOT ZERO HEADER OBJECT LOCATIONS
C     BEYOND LENBUF!

C     SETS: NX,NY,NZ, ITYPE, ISTACK,  LENBYT
C           LABBYT, LABREC, NREC, DATE, TIME, IMGNUM, INUSE

#include "LUNHDR.INC"

      REAL, DIMENSION(LENBUF) :: BUF
      CHARACTER(LEN=1)        :: DSP
      REAL, POINTER           :: HEADERT(:) 

      IRTFLG = 1

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      IF (LUNT > 0 .AND. LUNT <= 100) THEN
C        COPY ALL HEADER BUFFER SPACES UP TO LENBUF
C        POINT TO TRANSFER HEADER OBJECT
         CALL LUNGETOBJ(LUNT,HEADERT,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN

C        ZERO UNCOPIED HEADER BUFFER SPACES 
         DO I = 1,13
            HEADER(I) = 0.0
         ENDDO

         DO I = 14,21
            HEADER(I) = HEADERT(I)
         ENDDO
         DO I = 22,30
            HEADER(I) = 0.0
         END DO
         DO I = 31,LENBUF
            HEADER(I) = HEADERT(I)
         ENDDO

      ELSE
C        ZERO ALL HEADER BUFFER SPACES UP TO LENBUF
         DO I = 1,LENBUF
            HEADER(I) = 0.0
         ENDDO
      ENDIF

C     SET SIZE IN HEADER OBJECT
      CALL LUNSETSIZE(LUN,NX,NY,NZ,IRTFLG)

C     SET TYPE IN HEADER OBJECT
      CALL LUNSETTYPE(LUN,ITYPE,IRTFLG)

C     SET ISTACK IN HEADER OBJECT
      CALL LUNSETISTACK(LUN,ISTACK,IRTFLG)

C     SET RECORD ELEMENTS IN HEADER OBJECT
C     ADJUST NUMBER OF HEADER RECORDS TO HAVE >=256*4 BYTES IN HEADER
      LENBYT = NX * 4
      LABREC = 1024 / LENBYT
      IF (MOD(1024,LENBYT) .NE. 0) LABREC = LABREC + 1
      LABBYT = LABREC * LENBYT
   
C     SET TOTAL NUMBER OF RECORDS IN EACH IMAGE & HEADER
      NRECS  = NY * NZ + LABREC
      CALL LUNSETLAB(LUN,LABREC,NRECS,LABBYT,LENBYT,IRTFLG)

C     SET TIME, DATE & TITLE IN HEADER OBJECT
      CALL LUNSETTIME(LUN,IRTFLG)

      IRTFLG = 0

      END


C     ----------- LUNCLRINDX -----------------------------------------

      SUBROUTINE LUNCLRINDX(LUN,NX,IRTFLG)

C     CLEARS ALL INDEX RECORDS

#include "LUNHDR.INC"

      COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100)

      INCLUDE 'CMBLOCK.INC'

      COMMON /IOERR/   IERR

C     AUTOMATIC ARRAY
      INTEGER :: IZEROBUF(NX)

C     SAVE CURRENT OFFSETS
      LUNSTKSAV = LUNSTK(LUN)
      LABRECSAV = LUNARA(LUN)

C     SET NO OFFSET FOR HEADER IN LUNARA
      LUNARA(LUN) = 0
C     SET NO OFFSET FOR STACKED IMAGE IN LUNSTK
      LUNSTK(LUN) = 0

C     GET THE NUMBER OF INDX RECORDS IN OVERALL HEADER 
      CALL LUNGETLAB(LUN,LABREC,INDXREC,NRECS,LABBYT,LENBYT,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     NEED NX VALUE 
      CALL LUNGETSIZE(LUN,NX,NY,NZ,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     CLEAR THE INDX BUFFER
      IZEROBUF = 0.0

C     WRITE BLANK INDX RECORDS INTO OVERALL FILE HEADER
      IERR   = 0
      IRTFLG = 0
      ILOC   = LENHDR + 1

      DO IRECT = LABREC + 1, LABREC + INDXREC 

         CALL WRTLIN(LUN,IZEROBUF,NX,IRECT)
         IF (IERR .NE. 0) THEN
            CALL ERRT(102,'WHILE WRITING INDX HEADER, INDX REC.',IRECT)
            IRTFLG = 1
            EXIT
         ENDIF
      ENDDO

C     REPLACE OFFSETS IN LUNARA & LUNSTK    
      LUNARA(LUN) = LABRECSAV
      LUNSTK(LUN) = LUNSTKSAV 

      END

C     ----------- LUNWRTINDX --------------------------------------

      SUBROUTINE LUNWRTINDX(LUN,IMGNUM,NX,IRTFLG)

C     SETS INDEX FOR A SPECIFIED IMGNUM 

      INCLUDE 'CMBLOCK.INC'
      COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100)
 
      INTEGER :: INDXBUF(NX)

C     SAVE CURRENT FILE OFFSETS
      LUNSTKSAV = LUNSTK(LUN)
      LABRECSAV = LUNARA(LUN)

C     SET NO OFFSET FOR HEADER IN LUNARA
      LUNARA(LUN) = 0
C     SET NO OFFSET FOR STACKED IMAGE IN LUNSTK
      LUNSTK(LUN) = 0

C     GET THE NUMBER OF INDX RECORDS IN OVERALL HEADER 
      CALL LUNGETLAB(LUN,LABREC,MAXNDXREC,NDUM2,NDUM3,NDUM4,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      INDXREC = IMGNUM / NX
      ILOC    = MOD(IMGNUM,NX)
      IF (ILOC .NE. 0) INDXREC = INDXREC + 1
      IF (ILOC == 0) ILOC = NX

      IF (INDXREC > MAXNDXREC) THEN
         CALL LUNGETSTKALL(LUN,ISTACK,IRTFLG)
         CALL ERRT(102,'IMAGE NUMBER EXCEEDS INDEX LIMIT',ISTACK)
         GOTO 999
      ENDIF

C     GET THE NUMBER OF CURRENT INDICES IN USE 
      CALL LUNGETINDXTOP(LUN,LASTINDX,IRTFLG)

      LASTINDX = LASTINDX + 1

C     SAVE THE NUMBER OF CURRENT INDICES IN USE 
      CALL LUNSETINDXTOP(LUN,LASTINDX,IRTFLG)

C     READ THE CORRECT INDEXS RECORD FROM THE FILE
      IRECT = LABREC + INDXREC
      CALL REDLIN(LUN,INDXBUF,NX,IRECT)

      INDXBUF(ILOC) = LASTINDX

C     WRITE THE CORRECT INDEXS RECORD BACK IN THE FILE
      CALL WRTLIN(LUN,INDXBUF,NX,IRECT)

C     REPLACE CURRENT FILE OFFSETS IN LUNARA & LUNSTK    
999   LUNARA(LUN) = LABRECSAV
      LUNSTK(LUN) = LUNSTKSAV 

C     BE SURE TO WRITE OVERALL HEADER TO FILE NOW TO SAVE INDXTOP!!

      END

C     ----------- LUNREDINDX -----------------------------------------

      SUBROUTINE LUNREDINDX(LUN,IMGNUM,INDX,NX,IRTFLG)

C     RETURNS INDEX FOR A SPECIFIED IMGNUM 

      INCLUDE 'CMBLOCK.INC'

      COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100)
 
C     AUTOMATIC ARRAY
      INTEGER  :: INDXBUF(NX)

C     SAVE CURRENT FILE OFFSETS FOR LUNARA & LUNSTK
      LUNSTKSAV = LUNSTK(LUN)
      LABRECSAV = LUNARA(LUN)

C     SET NO OFFSET FOR HEADER IN LUNARA
      LUNARA(LUN) = 0
C     SET NO OFFSET FOR STACKED IMAGE IN LUNSTK
      LUNSTK(LUN) = 0

C     GET THE NUMBER OF INDX RECORDS IN OVERALL HEADER 
      CALL LUNGETLAB(LUN,LABREC,MAXNDXREC,NDUM2,NDUM3,NDUM4,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      INDXREC = IMGNUM / NX
      ILOC    = MOD(IMGNUM,NX)
      IF (ILOC .NE. 0) INDXREC = INDXREC + 1
      IF (ILOC == 0) ILOC = NX

      IF (INDXREC > MAXNDXREC) THEN
         CALL LUNGETSTKALL(LUN,ISTACK,IRTFLG)
         WRITE(NOUT,*) 'IMAGE NUMBER:',IMGNUM,
     &                 'EXCEEDS INDEX LIMIT:',-ISTACK
         CALL ERRT(100,' ',NE)
         GOTO 999
      ENDIF

C     GET THE CORRECT INDEXS RECORD FROM THE FILE
      IRECT = LABREC + INDXREC
      CALL REDLIN(LUN,INDXBUF,NX,IRECT)

C     GET THE SPECIFIED INDEX VALUE
      INDX = INDXBUF(ILOC) 

C     REPLACE CURRENT FILE OFFSETS IN LUNARA & LUNSTK    
999   LUNARA(LUN) = LABRECSAV
      LUNSTK(LUN) = LUNSTKSAV 

      END

C     ------------------------- LUNSET25 ----------------------------

       SUBROUTINE LUNSET25(LUN,INUSE,IRTFLG)

C      ONLY USED FOR BACWARD FILE COMPATIBILITY WITH OLDER SPIDERS

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     SET IMUSED RELATED LOCATION
      HEADER(25) = -1 

      IRTFLG = 0

      END


C     ------------------------- LUNGET25 ----------------------------

       SUBROUTINE LUNGET25(LUN,IVAL,IRTFLG)

C      ONLY USED FOR BACWARD FILE COMPATIBILITY WITH OLDER SPIDERS

#include "LUNHDR.INC"

C     POINT TO HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     GET STACK RELATED LOCATIONS
      IVAL = HEADER(25)

      IRTFLG = 0

      END

C     ------------------------- FLIPBYTESI ----------------------------

      SUBROUTINE FLIPBYTESI(IBUF,NVAL,IRTFLG)

C     NEEDED FOR PGI COMPILER SINCE FLIPBYTES DOES NOT WORK THERE!
      INTEGER *4 IBUF(*)
      EQUIVALENCE (I,L(1)), (J,L(2)), (K,L(1))

      INTEGER * 2  I,J,L(2)
      INTEGER * 4  K

      DO N = 1,NVAL
          K       = IBUF(N)
          I       = ISHFTC(I,8,16)
          J       = ISHFTC(J,8,16)
          K       = ISHFTC(K,16,32)
          IBUF(N) = K
      ENDDO
      END

C     ------------------------- FLIPBYTES ----------------------------

      SUBROUTINE FLIPBYTES(IBUFIN,IBUFOUT,NVAL,IRTFLG)

      INTEGER *4 IBUFIN(*),IBUFOUT(*)
      EQUIVALENCE (I,L(1)), (J,L(2)), (K,L(1))

      INTEGER * 2  I,J,L(2)
      INTEGER * 4  K

      DO N = 1,NVAL
          K          = IBUFIN(N)
          I          = ISHFTC(I,8,16)
          J          = ISHFTC(J,8,16)
          K          = ISHFTC(K,16,32)
          IBUFOUT(N) = K
      ENDDO
      END

C     ------------------------- LUNSETFLIP ----------------------------

      SUBROUTINE LUNSETFLIP(LUN,IFLIP,IRTFLG)

C     SETS FLIP IN LUNFLIP(LUN)

      IMPLICIT NONE
      INTEGER  :: LUN,IFLIP,IRTFLG

      INTEGER  :: LUNARA,LUNSTK,LUNARB,LUNFLIP

      COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100),LUNFLIP(100)

      LUNFLIP(LUN) = IFLIP

      IRTFLG       = 0

      END

C     ------------------------- LUNGETFLIP ----------------------------

      SUBROUTINE LUNGETFLIP(LUN,IFLIP,IRTFLG)

C     GETS FLIP FROM LUNFLIP(LUN)

      IMPLICIT NONE

      INTEGER  :: LUN,IFLIP,IRTFLG
      INTEGER  :: LUNARA,LUNSTK,LUNARB,LUNFLIP

      COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100),LUNFLIP(100)

      IFLIP  = LUNFLIP(LUN) 

      IRTFLG = 0

      END

C     ------------------------- LUNFLIPHDR ----------------------------

      SUBROUTINE LUNFLIPHDR(LUN,IRTFLG)

      !IMPLICIT NONE
#include "LUNHDR.INC"
      
      INTEGER       :: LUN,IRTFLG
      LOGICAL       :: FLIPEND
      REAL, POINTER :: HEADEROUT(:)

C     POINT TO INPUT HEADER OBJECT
      CALL LUNGETOBJ(LUN,HEADER,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     FLIP VALUES
      CALL FLIPBYTESI(HEADER,LENBUF,IRTFLG)

      IRTFLG = 0

      END

@


1.70
log
@formatting of lunsayinfo file opening   I0 used for bigger files
@
text
@d25 1
a25 1
C=* Email: spider@@wadsworth.org                                        *
@


1.69
log
@NRECS  = NX * NY + LABREC bug
@
text
@d1535 1
a1535 1
               WRITE(NOUT,89)TYPE,NX,NY,NZ,MAXIM,CDAT,CTIM,
d1537 2
a1538 2
89             FORMAT('  (',A,')',3I6,' (..',I7,') CREATED ',A11,
     &                ' AT ',A, 2X,A,' HEADER BYTES:',I7)
d1547 1
a1547 1
               WRITE(NOUT,90)TYPE,NX,NY,MAXIM,CDAT,CTIM,DSP,LABBYT
d1549 2
a1550 2
90          FORMAT('  (',A,')',2I6,' (..',I7,') CREATED ',A11,' AT ',A,
     &              2X,A,' HEADER BYTES:',I7)
d1556 1
a1556 1
               WRITE(NOUT,91) TYPE,NX,NY,NZ,IMGNUM,CDAT,CTIM,DSP
d1558 2
a1559 2
91          FORMAT('  (',A,')',3I6,' (@@',I7,')  CREATED ',A11,' AT ',A,
     &               2X,A)
d1565 1
a1565 1
               WRITE(NOUT,92)TYPE,NX,NY,IMGNUM,CDAT,CTIM,DSP
d1567 2
a1568 2
92          FORMAT('  (',A,')',2I6,' (@@',I7,')  CREATED ',A11,' AT ',A,
     &              2X,A)
d1574 1
a1574 1
               WRITE(NOUT,93) TYPE,NX,NY,NZ,CDAT,CTIM,DSP,
d1576 2
a1577 2
93             FORMAT('  (',A,')',3I6,' CREATED ',A11,' AT ',A,2X,A,
     &               ' HEADER BYTES:',I7)
d1585 2
a1586 2
94             FORMAT('  (',A,')',2I6,' CREATED ',A11,' AT ',A,2X,A,
     &                ' HEADER BYTES:',I7)
@


1.68
log
@lungetval  added,  nx,  == , cosmetic
@
text
@d92 1
d265 1
d267 1
a267 1
            CALL ERRT(46,'LUNNEWHDR, FILE HEADER',NE)
a447 12
#ifdef NEVER
      IF (NRECS <= 0) THEN
C        BAD IREC (USUALLY IN STACKS CREATED WITH EM2EM!!)
         NREC = NY + LABREC
         WRITE(NOUT,'(/,A,A,/,A,/,A/)')
     &     ' *** IMAGE (PROBABLY FROM EM2EM) HAS NONSENSE',
     &         ' IN HEADER LOCATION: 3',
     &     ' *** YOU NEED TO USE OPERATION: <ST H> getlab',
     &     ' *** TO FIX: IMGNUM AND IREC HEADER LOCATIONS.'
      ENDIF
#endif

d1735 1
a1735 1
      NRECS  = NX * NY + LABREC
@


1.67
log
@maxnam
@
text
@d15 1
a15 1
C                  LABBYT .GE. 10000000) TRAP     MAR 11  ARDEAN LEITH
d17 1
d91 1
d130 1
a130 1
      SUBROUTINE LUNREDHED(LUN,NSAM,IMGNUM,CALLERRT,IRTFLG)
d138 2
a143 2
      INCLUDE 'CMBLOCK.INC'

d151 1
a151 1
      CALL LUNGETHEDOFF(LUN,NSAM,IMGNUM,
d165 1
a165 1
      DO WHILE (ILOC .LE. LENBUF)
d167 1
a167 1
         LENT = MIN(NSAM,LENBUF - ILOC + 1)
d177 1
a177 1
          ILOC  = ILOC + NSAM
d189 1
a189 1
      SUBROUTINE LUNGETHEDOFF(LUN,NSAM,IMGNUM,
d194 3
a196 1
      IF (IMGNUM .EQ. 0) THEN
d209 1
a209 1
      IF (INDXREC .GT. 0) THEN
d211 2
a212 2
         CALL LUNREDINDX(LUN,IMGNUM,INDX,NSAM,IRTFLG)
         IF (IRTFLG .EQ. 0 .AND. INDX .LE. 0) IRTFLG = -1
d223 1
a223 1
         IF (ISTACK .EQ. 0 .AND. IMGNUM .GT. 1) THEN
d228 1
a228 1
         ELSEIF (ISTACK .EQ. 0) THEN
d237 1
a237 1
            IF (IMGNUM .GT. MAXIM) THEN
d290 1
a290 1
      IF (LUN .LE. 0 .OR. LUN .GT. NUMLUNS) THEN
d304 1
a304 1
      SUBROUTINE LUNSETIMGOFF(LUN,IMGNUM,NSAM,IRTFLG)
d309 2
d317 1
a317 1
      IF (IMGNUM .EQ. 0) THEN
d322 1
a322 1
      ELSEIF (INDXREC .GT. 0) THEN
d324 1
a324 1
         CALL LUNREDINDX(LUN,IMGNUM,INDX,NSAM,IRTFLG)
d335 1
a335 1
         IF (ISTACK .EQ. 0 .AND. IMGNUM .GT. 1) THEN
d340 1
a340 1
         ELSEIF (ISTACK .EQ. 0) THEN
d347 1
a349 1

d421 1
d433 2
a434 2
      IF (LABREC .LE. 0 .OR. LABREC .GE. 100000 .OR.
     &    LABBYT .LE. 0 .OR. LABBYT .GE. 10000000) THEN
d440 1
a440 1
      IF (LENBYT .LE. 0) THEN
d442 2
a443 2
         CALL LUNGETSIZE(LUN,NSAM,NROW,NSLICE,IRTFLG)
         LENBYT = NSAM * 4
d446 12
d464 1
a464 1
      IF (LABRECT .LE. 0 .OR. LABREC .NE. LABRECT) THEN
d471 1
a471 1
      IF (ISTACK .GE. 0) THEN 
d478 1
a478 1
         IF (FINDXREC .GT. INDXREC) INDXREC  = INDXREC + 1 
d509 4
d517 2
a518 2
C     GET NSAM VALUE 
      CALL LUNGETSIZE(LUN,NSAM,NROW,NSLICE,IRTFLG)
d522 1
a522 1
      CALL LUNWRTHED(LUN,NSAM,IMGNUM,IRTFLG)
d528 1
a528 1
      SUBROUTINE LUNWRTHED(LUN,NSAM,IMGNUM,IRTFLG)
d534 1
d539 1
d542 5
d553 1
a553 1
      CALL LUNGETHEDOFF(LUN,NSAM,IMGNUM,
d567 1
a567 1
      DO WHILE (ILOC .LE. LENBUF)
d569 1
a569 1
         LENT = MIN(NSAM,LENBUF - ILOC + 1)
d578 1
a578 1
         ILOC  = ILOC + NSAM
a634 7

#ifdef __sgi
      IF (IEEE_IS_NAN(HEADER(27))) THEN
         INUSE = 0
         RETURN
      ENDIF
#endif
d731 1
a731 1
      SUBROUTINE LUNSAVMAXIM(LUN,NSAM,MAXIM,IRTFLG)
d758 1
a758 1
      DO WHILE (ILOC .LE. LENBUF)
d760 1
a760 1
         LENT = MIN(NSAM,LENBUF - ILOC + 1)
d768 1
a768 1
         ILOC  = ILOC + NSAM
d780 1
a780 1
      DO WHILE (ILOC .LE. LENBUF)
d782 1
a782 1
         LENT = MIN(NSAM,LENBUF - ILOC + 1)
d791 1
a791 1
         ILOC  = ILOC + NSAM
d806 1
a806 1
       SUBROUTINE LUNGETSIZE(LUN,NSAM,NROW,NSLICE,IRTFLG)
d815 4
a818 4
      NSAM   = HEADER(12)
      NROW   = HEADER(2)
      NSLICE = HEADER(1)
      IF (NSLICE .LT. 0) NSLICE = -NSLICE
d826 1
a826 1
       SUBROUTINE LUNSETSIZE(LUN,NSAM,NROW,NSLICE,IRTFLG)
d835 3
a837 3
      HEADER(12)  = NSAM
      HEADER(2)   = NROW
      HEADER(1)   = NSLICE
d911 21
d945 1
a945 1
      IF (IGO .LE. 0 .OR. IEND .GT. 256) THEN
d973 1
a973 1
      IF (IGO .LE. 0 .OR. IEND .GT. 256) THEN
d1073 2
a1074 2
      IF (LENAT .EQ. 0) LENAT = INDEX(FILNAM,'*') -1
      IF (LENAT .LT. 0) LENAT = 0
d1077 1
a1077 1
      IF (NLET .LT. 0) THEN
d1138 1
a1138 1
      IF (IDSP .EQ. 1) DSP = 'N'
d1156 1
a1156 1
      IF ( DSP .EQ. 'N') HEADER(257) = 1
d1174 1
a1174 1
      IF (HEADER(258) .EQ. 1.0) ISBARE = .TRUE.
d1207 1
a1207 1
      ISBARE = (LOCAT .GT. 0 .AND. LOCAT .EQ. NLET) 
d1288 1
a1288 1
      IF (CLINE(2:2) .EQ. '-') THEN
d1321 1
a1321 1
      IF (CLINE(2:2) .EQ. '-') THEN
d1328 1
a1328 1
      IF (FILEDATE(10:10) .EQ. CHAR(0) .OR. FILEDATE(10:10) .EQ. ' ')
d1432 1
a1432 1
      CALL LUNGETSIZE(LUN,NSAM,NROW,NSLICE,IRTFLG)
d1437 1
a1437 1
      IF (ITYPE .EQ. -2) THEN
d1439 1
a1439 1
      ELSEIF (ITYPE .EQ. -9) THEN
d1441 1
a1441 1
      ELSEIF (ITYPE .EQ. -11) THEN
d1443 1
a1443 1
      ELSEIF (ITYPE .EQ. -12) THEN
d1445 1
a1445 1
      ELSEIF (ITYPE .EQ. -21) THEN
d1447 1
a1447 1
      ELSEIF (ITYPE .EQ. -22) THEN
d1449 1
a1449 1
      ELSEIF (ITYPE .EQ. 0)  THEN
d1451 1
a1451 1
      ELSEIF (ITYPE .EQ. 1 .AND. ISTACK .LT. 0 .AND. IMGNUM .LE. 0)THEN
d1453 1
a1453 1
      ELSEIF (ITYPE .EQ. 3 .AND. ISTACK .LT. 0 .AND. IMGNUM .LE. 0)THEN
d1455 1
a1455 1
      ELSEIF (ITYPE .EQ. 1 .AND. ISTACK .GT. 0 .AND. IMGNUM .LE. 0)THEN
d1457 1
a1457 1
      ELSEIF (ITYPE .EQ. 3 .AND. ISTACK .GT. 0 .AND. IMGNUM .LE. 0)THEN
d1459 1
a1459 1
      ELSEIF (ITYPE .EQ. 3)  THEN
d1475 1
a1475 1
      IF (USE_SPIRE .AND. DSP .EQ. 'N' .AND. FILNAM(1:1) .NE. '_') THEN
d1478 1
a1478 1
         IF (ISTACK .NE. 0 .AND. IMGNUM .EQ. 0 .AND. NSLICE .GT. 1)THEN
d1480 1
a1480 1
            WRITE(CSTRING,89)TYPE,NSAM,NROW,NSLICE,MAXIM,CDAT,CTIM,
d1482 1
a1482 1
         ELSEIF (ISTACK .NE. 0 .AND. IMGNUM .EQ. 0)THEN
d1485 1
a1485 1
            WRITE(CSTRING,90)TYPE,NSAM,NROW,MAXIM,CDAT,CTIM,DSP,LABBYT
d1487 1
a1487 1
         ELSE IF (IMGNUM .GT. 0) THEN
d1489 2
a1490 2
            WRITE(NOUT,92)TYPE,NSAM,NROW,IMGNUM,CDAT,CTIM,DSP
            WRITE(CSTRING,92)TYPE,NSAM,NROW,IMGNUM,CDAT,CTIM,DSP
d1492 1
a1492 1
        ELSE IF (NSLICE .GT. 1) THEN
d1494 1
a1494 1
            WRITE(CSTRING,93)TYPE,NSAM,NROW,NSLICE,CDAT,CTIM,DSP,LABBYT
d1496 1
a1496 1
        ELSE IF (NSLICE .GT. 1) THEN
d1498 1
a1498 1
            WRITE(CSTRING,93)TYPE,NSAM,NROW,NSLICE,CDAT,CTIM,DSP,LABBYT
d1502 1
a1502 1
            WRITE(CSTRING,94)TYPE,NSAM,NROW,CDAT,CTIM,DSP,LABBYT
d1514 1
a1514 1
         IF (LENTIT .LE. 0 .AND. NLET .GT. 0) THEN
d1516 1
a1516 1
            IF (MYPID .LE. 0) THEN
d1521 1
a1521 1
         ELSE IF (LENT .GT. 0 .AND. LENT .LT. 70) THEN
d1523 1
a1523 1
            IF (MYPID .LE. 0) THEN
d1528 1
a1528 1
         ELSEIF (LENT .GT. 0) THEN
d1530 1
a1530 1
            IF (NLET .GT. 0) WRITE(NOUT,*) ' ',FILNAM(:NLET)
d1533 1
a1533 1
            IF (MYPID .LE. 0) THEN
d1535 1
a1535 1
               IF (LENTIT .GT. 80)  WRITE(NOUT,*) ' ',CTIT(81:LENTIT)
d1540 1
a1540 1
         IF (ISTACK .NE. 0 .AND. IMGNUM .EQ. 0 .AND. NSLICE .GT. 1)THEN
d1544 2
a1545 2
            IF (MYPID .LE. 0) THEN
               WRITE(NOUT,89)TYPE,NSAM,NROW,NSLICE,MAXIM,CDAT,CTIM,
d1552 1
a1552 1
         ELSEIF (ISTACK .NE. 0 .AND. IMGNUM .EQ. 0)THEN
d1556 2
a1557 2
            IF (MYPID .LE. 0) THEN
               WRITE(NOUT,90)TYPE,NSAM,NROW,MAXIM,CDAT,CTIM,DSP,LABBYT
d1563 1
a1563 1
         ELSEIF (IMGNUM .GT. 0 .AND. NSLICE .GT. 1) THEN
d1565 2
a1566 2
            IF (MYPID .LE. 0) THEN
               WRITE(NOUT,91) TYPE,NSAM,NROW,NSLICE,IMGNUM,CDAT,CTIM,DSP
d1572 1
a1572 1
         ELSE IF (IMGNUM .GT. 0) THEN
d1574 2
a1575 2
            IF (MYPID .LE. 0) THEN
               WRITE(NOUT,92)TYPE,NSAM,NROW,IMGNUM,CDAT,CTIM,DSP
d1581 1
a1581 1
        ELSE IF (NSLICE .GT. 1) THEN
d1583 2
a1584 2
            IF (MYPID .LE. 0) THEN
               WRITE(NOUT,93) TYPE,NSAM,NROW,NSLICE,CDAT,CTIM,DSP,
d1593 2
a1594 2
            IF (MYPID .LE. 0) THEN
               WRITE(NOUT,94)TYPE,NSAM,NROW,CDAT,CTIM,DSP,LABBYT
d1616 2
a1617 2
      CHARACTER *12 CDUM
      CHARACTER  *1 NULL
a1621 2
      NULL = CHAR(0)

d1679 1
a1679 1
      SUBROUTINE LUNSETHDR(LUNT,LUN,NSAM,NROW,NSLICE,
d1685 1
a1685 1
C     SETS: NSAM, NROW, NSLICE, ITYPE, ISTACK,  LENBYT
d1690 3
a1692 3
      REAL, DIMENSION(LENBUF)     :: BUF
      CHARACTER(LEN=1)            :: DSP
      REAL, DIMENSION(:), POINTER :: HEADERT 
d1700 1
a1700 1
      IF (LUNT .GT. 0 .AND. LUNT .LE. 100) THEN
d1708 1
a1708 1
             HEADER(I) = 0.0
d1712 1
a1712 1
             HEADER(I) = HEADERT(I)
d1715 1
a1715 1
             HEADER(I) = 0.0
d1718 1
a1718 1
             HEADER(I) = HEADERT(I)
d1724 1
a1724 1
             HEADER(I) = 0.0
d1729 1
a1729 1
      CALL LUNSETSIZE(LUN,NSAM,NROW,NSLICE,IRTFLG)
d1739 1
a1739 1
      LENBYT = NSAM * 4
d1745 1
a1745 1
      NRECS  = NROW * NSLICE + LABREC
d1758 1
a1758 1
      SUBROUTINE LUNCLRINDX(LUN,NSAM,IRTFLG)
d1771 1
a1771 1
      INTEGER, DIMENSION(NSAM) :: IZEROBUF
d1786 2
a1787 2
C     NEED NSAM VALUE 
      CALL LUNGETSIZE(LUN,NSAM,NROW,NSLICE,IRTFLG)
d1797 1
d1800 1
a1800 1
         CALL WRTLIN(LUN,IZEROBUF,NSAM,IRECT)
d1816 1
a1816 1
      SUBROUTINE LUNWRTINDX(LUN,IMGNUM,NSAM,IRTFLG)
d1823 1
a1823 1
      INTEGER, DIMENSION(NSAM) :: INDXBUF
d1838 2
a1839 2
      INDXREC = IMGNUM / NSAM
      ILOC    = MOD(IMGNUM,NSAM)
d1841 1
a1841 1
      IF (ILOC .EQ. 0) ILOC = NSAM
d1843 1
a1843 1
      IF (INDXREC .GT. MAXNDXREC) THEN
d1859 1
a1859 1
      CALL REDLIN(LUN,INDXBUF,NSAM,IRECT)
d1864 1
a1864 1
      CALL WRTLIN(LUN,INDXBUF,NSAM,IRECT)
d1876 1
a1876 1
      SUBROUTINE LUNREDINDX(LUN,IMGNUM,INDX,NSAM,IRTFLG)
d1885 1
a1885 1
      INTEGER, DIMENSION(NSAM) :: INDXBUF
d1900 2
a1901 2
      INDXREC = IMGNUM / NSAM
      ILOC    = MOD(IMGNUM,NSAM)
d1903 1
a1903 1
      IF (ILOC .EQ. 0) ILOC = NSAM
d1905 1
a1905 1
      IF (INDXREC .GT. MAXNDXREC) THEN
d1915 1
a1915 1
      CALL REDLIN(LUN,INDXBUF,NSAM,IRECT)
@


1.66
log
@lunfilhdr changed
@
text
@d16 2
a17 2
C

d22 1
a22 1
C=* Copyright 1985-2011 Health Research Inc.,                         *
d123 1
a123 1
      RETURN
a182 1
      RETURN
a243 1
      RETURN
a269 1
      RETURN
a295 1
      RETURN
a349 1
      RETURN
a363 1
      RETURN
a378 1
      RETURN
a392 1
      RETURN
a406 1
      RETURN
a463 1
      RETURN
a483 1
      RETURN
a500 1
      RETURN
a555 1
      RETURN
a575 1
      RETURN
a593 1
      RETURN
a615 1
      RETURN
a632 1
      RETURN
a649 1
      RETURN
a667 1
      RETURN
a684 1
      RETURN
a702 1
      RETURN
a777 1
      RETURN
a798 1
      RETURN
a817 1
      RETURN
a840 1
      RETURN
a860 1
      RETURN
a885 1
      RETURN
a913 1
      RETURN
a942 1
      RETURN
a968 1
      RETURN
a987 1
      RETURN
a1011 1
      RETURN
a1041 1
      RETURN
a1057 1
      RETURN
a1075 1
      RETURN
a1095 1
      RETURN
a1113 1
      RETURN
a1131 1
      RETURN
a1150 1
      RETURN
a1167 1
      RETURN
a1254 1
      RETURN
a1293 1
      RETURN
a1322 1
      RETURN
d1349 1
a1349 1
      RETURN
d1356 2
a1358 1
      CHARACTER *81    FILNAM
d1365 2
a1558 1
      RETURN
a1632 1
      RETURN
a1648 1
      CHARACTER(LEN=81)           :: FILNAM
a1710 1
      RETURN
a1768 1
      RETURN
a1828 1
      RETURN
a1880 1
      RETURN
a1899 1
      RETURN
a1919 1
      RETURN
@


1.65
log
@(..',I7,')  CREATED formatting
@
text
@a81 1
C     ------------------------- LUNFILLHDR ----------------------------
d102 1
a102 1
            REAL, DIMENSION(:), POINTER :: IPT 
d105 1
a105 1
         TYPE(REAL_POINTER), DIMENSION(NUMLUNST)   :: LUNHDRBUF
d2016 5
d2025 1
a2025 1
      IRTFLG = 0
a2026 1
      RETURN
d2035 5
d2042 1
a2042 1
      IFLIP = LUNFLIP(LUN) 
a2045 1
      RETURN
d2052 1
d2054 4
a2057 3

      LOGICAL                     :: FLIPEND
      REAL, DIMENSION(:), POINTER :: HEADEROUT
a2067 1
      RETURN
@


1.64
log
@LABBYT .GE. 10000000) TRAP  (too small for ref-rings files)
@
text
@d1544 1
a1544 1
89             FORMAT('  (',A,')',3I6,' (..',I7,')  CREATED ',A11,
d1556 1
a1556 1
90          FORMAT('  (',A,')',2I6,' (..',I7,')  CREATED ',A11,' AT ',A,
@


1.63
log
@(NRECS  .LE. 0 --> (LABREC .LE. 0  in getlab bug
@
text
@d15 1
d17 1
d437 1
a437 1
     &    LABBYT .LE. 0 .OR. LABBYT .GE. 100000) THEN
@


1.62
log
@GETLAB BAD VALUE TRAP
@
text
@d434 1
a434 1
      IF (NRECS  .LE. 0 .OR. NRECS  .GE. 100000 .OR.
@


1.61
log
@GPL_2010
@
text
@d14 2
d20 1
a20 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d433 7
@


1.60
log
@LUNSETIMNUM REWRITE
@
text
@a14 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2007  Health Research Inc.                      *
d16 5
a20 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d22 1
a22 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d27 1
a27 1
C=* This program is distributed in the hope that it will be useful,    *
d29 1
a29 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a30 1
C=*                                                                    *
d32 1
a32 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.59
log
@CSTRING too short
@
text
@d13 1
a13 1
C
d16 1
a16 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d1001 2
a1002 2
      CHARACTER *(*) FILNAM
      CHARACTER *1   DSP
d1042 1
a1042 1
      SUBROUTINE LUNSETIMNUM(LUN,FILNAM,IRTFLG)
d1044 2
a1045 1
C     FINDS IMGNUM FROM FILENAME AND SETS IT IN HEADER OBJECT
d1047 3
a1049 1
      CHARACTER *(*)  FILNAM
d1051 6
a1056 2
C     USE IMGNUM = 0 FOR NON-STACKED IMAGE ALSO
      IMGNUM = 0
d1058 4
a1061 6
      IF (FILNAM(1:1) .NE. CHAR(0)) THEN
         LOCAT = INDEX(FILNAM,'@@')    
         IF (LOCAT .GT. 0 .AND. LOCAT .LT. LNBLNKN(FILNAM)) THEN
C           EXTRACT IMGNUM FROM FILENAME
            CALL GETFILENUM(FILNAM,IMGNUM,NDIGITS,.TRUE.,IRTFLG)
         ENDIF
d1063 1
d1065 2
a1066 4
C     SET IMGNUM IN HEADER OBJECT
      CALL LUNSETINUSE(LUN,IMGNUM,IRTFLG)

      IRTFLG = 0
@


1.58
log
@i6 for image size in sayinfo
@
text
@d9 1
a9 1
C                  INDEXED STACKS                 JAN 03  ARDEAN LEITH                 ARDEAN LEITH
d1390 2
a1391 1
      CHARACTER *81    FILNAM,CSTRING
d1533 1
a1533 1
89             FORMAT('  (',A,')',3I6,' (..',I6,')  CREATED ',A11,
d1545 1
a1545 1
90          FORMAT('  (',A,')',2I6,' (..',I6,')  CREATED ',A11,' AT ',A,
@


1.57
log
@reg_set param
@
text
@d12 1
d1532 1
a1532 1
89             FORMAT('  (',A,')',3I5,' (..',I6,')  CREATED ',A11,
d1544 1
a1544 1
90          FORMAT('  (',A,')',2I5,' (..',I6,')  CREATED ',A11,' AT ',A,
d1553 1
a1553 1
91          FORMAT('  (',A,')',3I5,' (@@',I7,')  CREATED ',A11,' AT ',A,
d1562 1
a1562 1
92          FORMAT('  (',A,')',2I5,' (@@',I7,')  CREATED ',A11,' AT ',A,
d1571 1
a1571 1
93             FORMAT('  (',A,')',3I5,' CREATED ',A11,' AT ',A,2X,A,
d1580 1
a1580 1
94             FORMAT('  (',A,')',2I5,' CREATED ',A11,' AT ',A,2X,A,
@


1.56
log
@GPL License fixed
@
text
@d1602 1
d1607 2
d1653 8
a1660 8
      CALL REG_SET(1,FLOAT(NSAMC),  .TRUE., IRTFLG)
      CALL REG_SET(2,FLOAT(NROWC),  .TRUE., IRTFLG)
      CALL REG_SET(3,FMAX,          .TRUE., IRTFLG)
      CALL REG_SET(4,FMIN,          .TRUE., IRTFLG)
      CALL REG_SET(5,AV,            .TRUE., IRTFLG)
      CALL REG_SET(6,SIG,           .TRUE., IRTFLG)
      CALL REG_SET(7,FLOAT(NSLICE), .TRUE., IRTFLG) 
      CALL REG_SET(8,FLOAT(NSTACK), .TRUE., IRTFLG) 
@


1.55
log
@HRI GPL License used
@
text
@a13 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d17 1
a17 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a36 6

C * COPYRIGHT (C)1985, 2005. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.54
log
@spireout
@
text
@d15 24
@


1.53
log
@*** empty log message ***
@
text
@d1378 3
a1380 3
      LOGICAL SILENT,VERBOSE
      COMMON /IPRTT/   IDUM,NTRACE,NALPH,VERBOSE,N_MOSAIC,SILENT
      COMMON /UNITS/   LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
d1442 35
a1505 1
         CALL SPIREOUT(FILNAM(:NLET),IRTFLG)
d1514 2
a1515 3
               WRITE(CSTRING,89)TYPE,NSAM,NROW,NSLICE,MAXIM,CDAT,CTIM,
     &                       DSP,LABBYT
               CALL SPIREOUT(CSTRING,IRTFLG)
a1516 2
89          FORMAT('  (',A,')',3I5,' (..',I6,')  CREATED ',A11,
     &              ' AT ',A, 2X,A,' HEADER BYTES:',I7)
a1524 3
               WRITE(CSTRING,90)TYPE,NSAM,NROW,MAXIM,CDAT,CTIM,DSP,
     &                          LABBYT
               CALL SPIREOUT(CSTRING,IRTFLG)
a1533 3
               WRITE(CSTRING,91) TYPE,NSAM,NROW,NSLICE,IMGNUM,CDAT,
     &                           CTIM,DSP
               CALL SPIREOUT(CSTRING,IRTFLG)
a1542 2
               WRITE(CSTRING,92)TYPE,NSAM,NROW,IMGNUM,CDAT,CTIM,DSP
               CALL SPIREOUT(CSTRING,IRTFLG)
d1553 2
a1554 3
               WRITE(CSTRING,93) TYPE,NSAM,NROW,NSLICE,CDAT,CTIM,DSP,
     &                        LABBYT
               CALL SPIREOUT(CSTRING,IRTFLG)
a1555 2
93          FORMAT('  (',A,')',3I5,' CREATED ',A11,' AT ',A,2X,A,
     &            ' HEADER BYTES:',I7)
d1562 2
a1563 2
               WRITE(CSTRING,94)TYPE,NSAM,NROW,CDAT,CTIM,DSP,LABBYT
               CALL SPIREOUT(CSTRING,IRTFLG)
a1564 2
94          FORMAT('  (',A,')',2I5,' CREATED ',A11,' AT ',A,2X,A,
     &            ' HEADER BYTES:',I7)
@


1.52
log
@header bytes msg I7
@
text
@d6 4
a9 4
C                  USED MYTIME DEC 00                     ARDEAN LEITH
C                  KANGLE BUG FIXED JAN 01                ARDEAN LEITH 
C                  GETFILENUM EXTRACTED AUG 2002          ARDEAN LEITH
C                  INDEXED STACKS JAN. 03                 ARDEAN LEITH
d1372 1
a1372 1
      CHARACTER *81    FILNAM
d1471 1
d1480 3
d1486 1
a1486 1

d1494 3
d1506 3
d1518 2
d1530 3
d1542 2
@


1.51
log
@formating lin lunsayinfo
@
text
@d11 1
d15 1
a15 1
C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
d1481 1
a1481 1
     &              ' AT ',A, 2X,A,' HEADER BYTES:',I5)
d1492 1
a1492 1
     &              2X,A,' HEADER BYTES:',I5)
d1520 1
a1520 1
     &            ' HEADER BYTES:',I5)
d1529 1
a1529 1
     &            ' HEADER BYTES:',I5)
@


1.50
log
@cosmetic
@
text
@d10 1
d1447 2
a1448 3
#ifdef USE_MPI
            IF (MYPID .EQ. 0) THEN
               WRITE(NOUT,*) FILNAM(:NLET)
d1450 1
a1450 3
#else
            WRITE(NOUT,*) FILNAM(:NLET)
#endif
d1454 2
a1455 3
#ifdef USE_MPI
            IF (MYPID .EQ. 0) THEN
               WRITE(NOUT,*) FILNAM(:NLET),'     /',CTIT(:LENTIT)
d1457 1
a1457 3
#else
            WRITE(NOUT,*) FILNAM(:NLET),'     /',CTIT(:LENTIT)
#endif
d1461 1
a1461 1
            IF (NLET .GT. 0) WRITE(NOUT,*) FILNAM(:NLET)
d1463 4
a1466 4
#ifdef USE_MPI
            IF (MYPID .EQ. 0) THEN
               WRITE(NOUT,*) CTIT(1:LENT)
               IF (LENTIT .GT. 80)  WRITE(NOUT,*) CTIT(81:LENTIT)
d1468 1
a1468 4
#else
            WRITE(NOUT,*) CTIT(1:LENT)
            IF (LENTIT .GT. 80)  WRITE(NOUT,*) CTIT(81:LENTIT)
#endif
d1474 2
a1475 2
#ifdef USE_MPI
            IF (MYPID .EQ. 0) THEN
d1479 1
a1479 5
#else
            WRITE(NOUT,89)TYPE,NSAM,NROW,NSLICE,MAXIM,CDAT,CTIM,
     &                    DSP,LABBYT
#endif
89          FORMAT(' (',A,')',3I5,' (..',I6,')  CREATED ',A11,
d1482 1
d1486 2
a1487 2
#ifdef USE_MPI
            IF (MYPID .EQ. 0) THEN
d1490 1
a1490 4
#else
            WRITE(NOUT,90)TYPE,NSAM,NROW,MAXIM,CDAT,CTIM,DSP,LABBYT
#endif
90          FORMAT(' (',A,')',2I5,' (..',I6,')  CREATED ',A11,' AT ',A,
d1493 1
d1496 1
a1496 2
#ifdef USE_MPI
            IF (MYPID .EQ. 0) THEN
d1499 1
a1499 4
#else
            WRITE(NOUT,91) TYPE,NSAM,NROW,NSLICE,IMGNUM,CDAT,CTIM,DSP
#endif
91          FORMAT(' (',A,')',3I5,' (@@',I7,')  CREATED ',A11,' AT ',A,
d1502 1
d1505 1
a1505 2
#ifdef USE_MPI
            IF (MYPID .EQ. 0) THEN
d1508 1
a1508 4
#else
            WRITE(NOUT,92)TYPE,NSAM,NROW,IMGNUM,CDAT,CTIM,DSP
#endif
92          FORMAT(' (',A,')',2I5,' (@@',I7,')  CREATED ',A11,' AT ',A,
d1511 1
d1514 1
a1514 2
#ifdef USE_MPI
            IF (MYPID .EQ. 0) THEN
d1518 1
a1518 5
#else
            WRITE(NOUT,93) TYPE,NSAM,NROW,NSLICE,CDAT,CTIM,DSP,
     &                        LABBYT
#endif
93          FORMAT(' (',A,')',3I5,' CREATED ',A11,' AT ',A,2X,A,
d1521 1
d1524 1
a1524 2
#ifdef USE_MPI
            IF (MYPID .EQ. 0) THEN
d1527 1
a1527 4
#else
            WRITE(NOUT,94)TYPE,NSAM,NROW,CDAT,CTIM,DSP,LABBYT
#endif
94          FORMAT(' (',A,')',2I5,' CREATED ',A11,' AT ',A,2X,A,
@


1.49
log
@*** empty log message ***
@
text
@a70 1
C     ------------------------- LUNCOPYHDR    -------------------------
d1669 1
a1669 1
         END DO
d1673 1
a1673 1
         END DO
d1679 1
a1679 1
         END DO
d1685 1
a1685 1
         END DO
@


1.48
log
@mpi
@
text
@d1383 5
a1387 3
      integer mypid, comm, ierr 
      comm = MPI_COMM_WORLD 
      call MPI_COMM_RANK(comm, mypid, ierr) 
d1448 1
a1448 1
            if (mypid .eq. 0) then 
d1450 1
a1450 1
            endif
d1458 1
a1458 1
            if (mypid .eq. 0) then
d1460 1
a1460 1
            endif
d1470 1
a1470 1
            if (mypid .eq. 0) then
d1473 1
a1473 1
            endif
d1484 1
a1484 1
            if (mypid .eq. 0) then
d1487 1
a1487 1
            endif
d1499 1
a1499 1
            if (mypid .eq. 0) then
d1501 1
a1501 1
            endif
d1511 1
a1511 1
            if (mypid .eq. 0) then
d1513 1
a1513 1
            endif
d1523 1
a1523 1
            if (mypid .eq. 0) then
d1525 1
a1525 1
            endif
d1535 1
a1535 1
            if (mypid .eq. 0) then
d1538 1
a1538 1
            endif
d1549 1
a1549 1
            if (mypid .eq. 0) then
d1551 1
a1551 1
            endif
@


1.47
log
@flipbytesi
@
text
@d1381 6
d1445 5
d1451 1
d1455 5
d1461 1
d1467 6
d1475 1
d1481 6
d1489 1
d1496 5
d1502 1
d1508 5
d1514 1
d1520 5
d1526 1
d1532 6
d1540 1
d1546 5
d1552 1
d1900 1
a1900 1
C     SET STACK RELATED LOCATIONS
@


1.46
log
@LUNGETINUXE __sgi wrong
@
text
@d1866 1
d1868 20
d1894 1
a1894 1
      INTEGER * 4  K,M
d1897 5
a1901 5
         K          = IBUFIN(N)
         I          = ISHFTC(I,8,16)
         J          = ISHFTC(J,8,16)
         K          = ISHFTC(K,16,32)
         IBUFOUT(N) = K
a1904 1

d1949 1
a1949 1
      CALL FLIPBYTES(HEADER,HEADER,LENBUF,IRTFLG)
@


1.45
log
@LUNHDR.INC not used in GETOBJ
@
text
@d597 2
a598 2
      IF (IEEE_IS_NAN(HEADER(25))) THEN
         IMUSED = 0
@


1.44
log
@lunsetluns
@
text
@a260 5
#ifdef SP_IBMSP3
#include "LUNHDR_IBMSP3.INC"
#else
#include "LUNHDR.INC"
#endif
d262 5
a266 1
      INCLUDE 'CMBLOCK.INC'
@


1.43
log
@redhed/wrthed removal
@
text
@d60 1
a65 1
C     ------------------------- LUNSETOFFSET --------------------------
d91 1
a91 1
C     ----------- LUNSETLUNSTK ---------------------------------------
d93 1
a93 1
      SUBROUTINE LUNSETLUNSTK(LUN,IVAL,IRTFLG)
d95 1
a95 1
C     SETS OFFSET IN LUNSTK(LUN)
d97 1
a97 1
      COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100)
d99 4
a102 1
      LUNSTK(LUN) = IVAL
@


1.42
log
@endedness
@
text
@d594 7
a602 2

      IRTFLG = 0
@


1.41
log
@needed to zero uncopied stuff in lunsethdr
@
text
@d71 1
d149 1
a149 1
                CALL ERRT(102,'READING FILE HEADER, I/O ERROR',IERR)
d1233 4
a1236 4
      CHARACTER *(*) FILETITLE
      CHARACTER * 1  NULL
      DIMENSION      ZBUF(45)
      CHARACTER *180 CLINE
a1242 2
C     RECOVER DATE, TIME & TITLE FROM CLINE

d1248 4
a1251 6
#if defined(osf_ieee)
C     BYTE SWAP  SPECIFIC CODE FOLLOWS
C     NOTE THAT ALPHA-NUMERICAL DATA (ABCD) WILL BE WRITTEN (DCBA)
      CALL REVERSEBYTES(CLINE,180,IRTFLG)
C     END OF BYTE SWAP  SPECIFIC CODE 
#endif 
d1253 1
a1268 1
      CHARACTER * 1  NULL
a1276 2
C     RECOVER DATE, TIME & TITLE FROM CLINE

d1282 4
a1285 6
#if defined(osf_ieee)
C     BYTE SWAP  SPECIFIC CODE FOLLOWS
C     NOTE THAT ALPHA-NUMERICAL DATA (ABCD) WILL BE WRITTEN (DCBA)
      CALL REVERSEBYTES(CLINE,180,IRTFLG)
C     END OF BYTE SWAP  SPECIFIC CODE 
#endif 
a1323 6
#if defined(osf_ieee)    
C     BYTE SWAP  SPECIFIC CODE FOLLOWS
      CALL REVERSEBYTES(CLINE,20,IRTFLG)
C     END OF BYTE SWAP  SPECIFIC CODE 
#endif

a1348 6
#if defined(osf_ieee)    
C        BYTE SWAP  SPECIFIC CODE FOLLOWS
         CALL REVERSEBYTES(CLINE,160,IRTFLG)
C        END OF BYTE SWAP  SPECIFIC CODE 
#endif

d1838 1
d1853 70
@


1.40
log
@opfilec
@
text
@d1611 1
a1611 1
         CALL LUNGETOBJ(LUN,HEADERT,IRTFLG)
d1614 5
d1621 3
@


1.39
log
@*** empty log message ***
@
text
@d1586 2
a1587 1
      SUBROUTINE LUNSETHDR(LUN,NSAM,NROW,NSLICE,ITYPE,ISTACK,IRTFLG)
d1597 4
a1600 3
      REAL             BUF(LENBUF)
      CHARACTER * 81   FILNAM
      CHARACTER *1     DSP
d1608 19
a1626 4
C     ZERO ALL HEADER BUFFER SPACES UP TO LENBUF
      DO I = 1,LENBUF
          HEADER(I) = 0.0
      END DO
@


1.38
log
@stack bug
@
text
@d1249 2
a1250 2
#if defined(__osf__) && defined(osf_ieee)
C     DEC UNIX WITH IEEE TYPE DATA SPECIFIC CODE FOLLOWS
d1253 1
a1253 1
C     END ALPHA OSF UNIX WITH IEEE TYPE DATA SPECIFIC CODE 
d1287 2
a1288 2
#if defined(__osf__) && defined(osf_ieee)
C     DEC UNIX WITH IEEE TYPE DATA SPECIFIC CODE FOLLOWS
d1291 1
a1291 1
C     END ALPHA OSF UNIX WITH IEEE TYPE DATA SPECIFIC CODE 
d1331 2
a1332 2
#if defined(__osf__) && defined(osf_ieee)    
C     DEC UNIX WITH IEEE TYPE DATA SPECIFIC CODE FOLLOWS
d1334 1
a1334 1
C     END DEC UNIX WITH IEEE TYPE DATA SPECIFIC CODE
d1362 2
a1363 2
#if defined(__osf__) && defined(osf_ieee)    
C        DEC UNIX WITH IEEE TYPE DATA SPECIFIC CODE FOLLOWS
d1365 1
a1365 1
C        END DEC UNIX WITH IEEE TYPE DATA SPECIFIC CODE
@


1.37
log
@*** empty log message ***
@
text
@d71 5
a1632 4

C     GET NUMBER FROM FILE NAME AND SET IMGNUM IN HEADER OBJECT
ccc      CALL LUNGETFILE(LUN,FILNAM,NLET,DSP,IRTFLG)
ccc      CALL LUNSETIMNUM(LUN,FILNAM,IRTFLG)
@


1.36
log
@indexed stacks
@
text
@d571 1
a571 1
      MAXIM  = HEADER(260)
@


1.35
log
@lunsayinfo stacked vol. optput wrong
@
text
@d9 1
d13 1
a13 1
C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
d18 1
a18 1
C *******************************************************************C **********************************************************************
d21 1
a21 1
C    PURPOSE:       HANDLES ALL INTERACTIONS WITH PIDER IMAGE FILE
a28 2
C     ------------------------- LUNIMGREDHED --------------------------
C     ------------------------- LUNRED    -----------------------------
d35 2
d38 1
d40 1
d44 1
a52 2
C     ------------------------- LUNGETIMGNUM --------------------------
C     ------------------------- LUNSETIMGNUM --------------------------
d66 5
d85 3
a87 1
C     ----------- LUNREDHED -----------------------------------------
d89 1
a89 1
      SUBROUTINE LUNREDHED(LUN,NSAM,CALLERRT,IRTFLG)
d91 1
a91 1
C     READS OVERALL FILE HEADER INTO HEADER OBJECT 
d93 1
a93 4
      LOGICAL CALLERRT
   
      IMGOFFSET = 0   
      CALL LUNRED(LUN,NSAM,IMGOFFSET,CALLERRT,IRTFLG)
d95 1
d99 1
a99 2

C     ----------- LUNRED -----------------------------------------
d101 1
a101 1
      SUBROUTINE LUNRED(LUN,NSAM,IMGOFFSET,CALLERRT,IRTFLG)
d103 3
a105 1
C     SUPPORT ROUTINE CALLED BY LUNIMGREDHED AND LUNREDHED 
d115 1
a115 1
      LOGICAL          CALLERRT
d117 1
a117 1
C     SET PROPER IMGNUM OFFSET IN LUNSTK
d119 1
a119 1
      LUNSTK(LUN) = IMGOFFSET
d121 4
a124 3
C     SET NO OFFSET FOR HEADER RECORDS IN LUNARA
      LABRECSAV   = LUNARA(LUN)
      LUNARA(LUN) = 0
d131 5
a135 3
      IERR  = 0
      IRECT = 1
      ILOC  = 1
d143 1
a143 3
                WRITE(NOUT,*) '*** I/O ERROR: ',IERR,
     &                        ' WHILE READING FILE HEADER'
                CALL ERRT(100,'LUNRED',NE)
d145 2
a146 5

C            REPLACE OFFSET IN LUNARA & LUNSTK   
             LUNARA(LUN) = LABRECSAV
             LUNSTK(LUN) = LUNSTKSAV 
             RETURN
a151 2
      IRTFLG = 0

d159 63
d264 1
a264 3
         WRITE(NOUT,*) '*** PGM ERROR, LUN: ',LUN,
     &                        ' OUT OF RANGE'
         CALL ERRT(100,'LUNRED',NE)
d276 1
a276 1
C     ------------------------- LUNSETOFFSET -------------------------
d278 1
a278 1
      SUBROUTINE LUNSETOFFSET(LUN,IRTFLG)
d281 1
d286 1
a286 1
      CALL LUNGETLAB(LUN,LABREC,NRECS,LABBYT,LENBYT,IRTFLG)
d289 9
a297 2
C     GET IMGNUM INFO 
      CALL LUNGETIMGNUM(LUN,IMGNUM,IRTFLG)
d299 3
a301 4
C     SET OFFSET INTO LUNSTK
      IF (IMGNUM .GT. 0) THEN
C        STACKS HAVE ADDITIONAL OVERALL HEADER AT BEGINNING
         LUNSTK(LUN) = (IMGNUM-1) * NRECS + LABREC
d303 20
a322 2
C        NOT A STACK, OR MAYBE A BARE STACK
         LUNSTK(LUN) = 0
d325 2
a326 2
C     SET OFFSET INTO LUNARA
      LUNARA(LUN) = LABREC
d330 1
d333 1
a333 2
      SUBROUTINE LUNGETTYPE(LUN,ITYPE,ISTACK,IRTFLG)

a341 1
      ISTACK = HEADER(24)
a345 1

d348 1
a348 1
      SUBROUTINE LUNSETTYPE(LUN,ITYPE,ISTACK,IRTFLG)
d356 1
a356 1
C     GET RETURN VALUES
d358 29
a391 1

d394 2
a395 1
      SUBROUTINE LUNGETLAB(LUN,LABREC,NRECS,LABBYT,LENBYT,IRTFLG)
d411 1
a411 1
         CALL LUNGETSIZE(LUN,NSAM,NROW,NSLICE,ISTACK,IRTFLG)
d417 4
a420 1
      IF (MOD(1024,LENBYT) .NE. 0) LABRECT = LABRECT + 1
d426 12
a463 29
C     ----------- LUNIMGREDHED -----------------------------------------

      SUBROUTINE LUNIMGREDHED(LUN,NSAM,CALLERRT,IMGNUM,IRTFLG)

C     READS SPIECIFIC STACKED IMAGE HEADER INTO HEADER OBJECT 
C     THIS MUST BE PRECEEDED BY A READ OF THE OVERALL HEADER TO 
C     ENSURE THAT LUNGETLAB SUCCEEDS


      LOGICAL CALLERRT
      
C     FIND PROPER IMGNUM OFFSET 
      IF (IMGNUM .LE. 0) THEN
C        OVERALL HEADER
         IMGOFFSET = 0

      ELSE
C        STACKED HEADER, USES VALUES FROM CURRENT HEADER OBJECT!
         CALL LUNGETLAB(LUN,LABREC,NRECS,NDUM,NDUM,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN

         IMGOFFSET = (IMGNUM-1) * NRECS + LABREC
      ENDIF

      CALL LUNRED(LUN,NSAM,IMGOFFSET,CALLERRT,IRTFLG)

      RETURN
      END

d468 6
a473 2
C     GET IMGNUM INFO 
      CALL LUNGETIMGNUM(LUN,IMGNUM,IRTFLG)
d477 1
a477 1
      CALL LUNWRTHED(LUN,IMGNUM,IRTFLG)
d484 3
a486 1
      SUBROUTINE LUNWRTHED(LUN,IMGNUM,IRTFLG)
d494 1
a494 1
      COMMON /IOERR/   IERR
d497 2
a499 11
      IF (IMGNUM .LE. 0) THEN
C        OVERALL HEADER
         LUNSTK(LUN) = 0
      ELSE
C        STACKED HEADER
         CALL LUNGETLAB(LUN,LABRECF,IRECF,NDUM,NDUM,IRTFLG)

         LUNSTK(LUN) = (IMGNUM-1) * IRECF + LABRECF
      ENDIF

C     THE NUMBER OF HEADER RECORDS IN EACH HEADER IS IN LUNARA
d502 2
a503 5
C     SET NO OFFSET FOR HEADER IN LUNARA
      LUNARA(LUN) = 0

C     NEED NSAM VALUE 
      CALL LUNGETSIZE(LUN,NSAM,NROW,NSLICE,ISTACK,IRTFLG)
d511 5
a515 3
      IERR  = 0
      IRECT = 1
      ILOC  = 1
d522 3
a524 7
            WRITE(NOUT,*) '*** ERROR WRITING TO FILE HEADER'
            CALL ERRT(100,'LUNWRTHED',NE)

C           REPLACE OFFSET IN LUNARA & LUNSTK   
            LUNARA(LUN) = LABRECSAV
            LUNSTK(LUN) = LUNSTKSAV 
            RETURN
a530 2
      IRTFLG = 0

d532 1
a532 1
      LUNARA(LUN) = LABRECSAV
a558 2


d561 1
a561 1
       SUBROUTINE LUNGETSTK(LUN,ISTACK,INUSE,MAXIM,IRTFLG)
d571 1
a571 2
      INUSE  = HEADER(25)
      MAXIM  = HEADER(26)
d589 1
a589 1
      INUSE = HEADER(25) 
d607 1
a607 1
      HEADER(25) = INUSE 
d624 21
a644 2
C     GET MAXIM VALUE FROM HEADER OBJECT
      MAXIM   = HEADER(26)
d655 14
a668 1
C     NEEDS ERROR IF THIS IS NOT A STACKED OBJECT !!!!!
d670 4
d680 2
a681 2
C     SET MAXIM VALUE IN HEADER OBJECT
      HEADER(26)  = MAXIM
d688 1
d724 2
a725 3
            WRITE(NOUT,*) '*** I/O ERROR: ',IERR,
     &                    ' WHILE READING OVERALL FILE HEADER'
            CALL ERRT(100,'LUNSAVMAXIM',NE)
d734 1
d746 2
a747 2
            WRITE(NOUT,*) '*** ERROR WRITING TO OVERALL FILE HEADER'
            CALL ERRT(100,'LUNSAVMAXIM',NE)
a756 3
C     MUST UPDATE MAXIM IN CURRENT HEADER OBJECT ALSO
      CALL LUNSETMAXIM(LUN,MAXIM,IRTFLG)

d767 1
a767 1
       SUBROUTINE LUNGETSIZE(LUN,NSAM,NROW,NSLICE,ISTACK,IRTFLG)
a779 1
      ISTACK = HEADER(24)
d788 1
a788 1
       SUBROUTINE LUNSETSIZE(LUN,NSAM,NROW,NSLICE,ISTACK,IRTFLG)
a799 1
      HEADER(24)  = ISTACK
d891 1
a891 1
         CALL ERRT(102,'HEADER LOCATION MUST BE 0...256 ',IEND)
d1027 2
a1028 2
C     SET IMGNUM LOCATION IN HEADER OBJECT
      CALL LUNSETIMGNUM(LUN,IMGNUM,IRTFLG)
d1035 1
a1035 1
C     ------------------------- LUNGETIMGNUM -------------------------
d1037 1
a1037 1
      SUBROUTINE LUNGETIMGNUM(LUN,IMGNUM,IRTFLG)
d1041 1
a1041 1
C     POINT TO HEADER OBJECT
d1045 2
a1046 2
C     GET IMGNUM FROM HEADER OBJECT
      IMGNUM = HEADER(27)
d1052 1
a1052 1
C     ------------------------- LUNSETIMGNUM -------------------------
d1054 1
a1054 1
      SUBROUTINE LUNSETIMGNUM(LUN,IMGNUM,IRTFLG)
d1056 1
a1056 1
C     SETS IMGNUM IN HEADER OBJECT
d1060 1
a1060 1
C     POINT TO HEADER OBJECT
d1064 2
a1065 2
C     SET IMGNUM IN HEADER OBJECT
      HEADER(27) = IMGNUM
d1130 1
d1168 52
d1391 4
a1394 1
      CALL LUNGETTYPE(LUN,ITYPE,ISTACK,IRTFLG)
d1397 1
a1397 1
      CALL LUNGETSIZE(LUN,NSAM,NROW,NSLICE,ISTACK,IRTFLG)
d1400 1
a1400 1
      CALL LUNGETIMGNUM(LUN,IMGNUM,IRTFLG)
d1416 5
a1420 1
      ELSEIF (ITYPE .EQ. 1 .AND. ISTACK .GT. 0 .AND. IMGNUM .EQ. 0)THEN
d1422 1
a1422 1
      ELSEIF (ITYPE .EQ. 3 .AND. ISTACK .GT. 0 .AND. IMGNUM .EQ. 0)THEN
d1438 1
a1438 1
      CALL LUNGETLAB(LUN,LABREC,NRECS,LABBYT,LENBYT,IRTFLG)
d1460 1
a1460 2

         IF (ISTACK .GT. 0 .AND. IMGNUM .EQ. 0 .AND. NSLICE .GT. 1)THEN
d1462 1
a1462 1
            CALL LUNGETSTK(LUN,ISTACK,INUSE,MAXIM,IRTFLG)
d1468 1
a1468 1
         ELSEIF (ISTACK .GT. 0 .AND. IMGNUM .EQ. 0)THEN
d1470 1
a1470 1
            CALL LUNGETSTK(LUN,ISTACK,INUSE,MAXIM,IRTFLG)
d1540 2
a1541 2
C     RETRIEVE ITYPE
      CALL LUNGETTYPE(LUN,IFORM,NSTACK,IRTFLG)
d1545 1
a1545 1
      CALL LUNGETSIZE(LUN,NSAMC,NROWC,NSLICE,NDUM,IRTFLG)
d1549 1
a1549 1
      CALL LUNGETLAB(LUN,NDUM,IREC,LABLEN,NDUM,IRTFLG)
a1575 9
C     PARAM(2) = NSAMC
C     PARAM(3) = NROWC
C     PARAM(4) = FMAX
C     PARAM(5) = FMIN
C     PARAM(6) = AV
C     PARAM(7) = SIG
C     PARAM(8) = NSLICE
C     PARAM(9) = NSTACK

d1607 1
a1607 1
      CALL LUNSETSIZE(LUN,NSAM,NROW,NSLICE,ISTACK,IRTFLG)
d1610 1
a1610 1
      CALL LUNSETTYPE(LUN,ITYPE,ISTACK,IRTFLG)
d1612 3
d1621 1
a1621 1

d1629 43
a1671 3
C     SET IMGNUM IN HEADER OBJECT
      CALL LUNGETFILE(LUN,FILNAM,NLET,DSP,IRTFLG)
      CALL LUNSETIMNUM(LUN,FILNAM,IRTFLG)
d1673 2
a1674 2
C     SET INUSE IN  HEADER OBJECT (OVERCOMES MALFORMED STACKS)
      CALL LUNSETINUSE(LUN,-1,IRTFLG)
d1676 2
d1679 78
d1758 50
d1811 3
a1813 1
C     ----------- LUNFILLHDR ------------------
d1815 1
a1815 1
      SUBROUTINE LUNFILLHDR(LUN,BUF,FILNAM,DSP,IRTFLG)
a1818 4
      CHARACTER *(*)   FILNAM
      CHARACTER *1     DSP
      REAL             BUF(LENBUF)

d1823 2
a1824 2
C     SET FILENAME IN HEADER OBJECT
      CALL LUNSETFILE(LUN,FILNAM,DSP,IRTLFG) 
d1826 1
a1826 7
C     COPY BUF INTO THE HEADER OBJECT
      DO I = 1, LENBUF
         HEADER(I) = BUF(I)
      ENDDO

C     SET IMGNUM IN HEADER OBJECT
      CALL LUNSETIMNUM(LUN,FILNAM,IRTLFG) 
d1831 1
d1833 1
d1835 1
d1837 5
d1843 7
@


1.34
log
@lunsayinfo for overall stacked volume
@
text
@d1284 1
a1284 1
89          FORMAT(' (',A,')',2I5,' (..',I6,',',i6,')  CREATED ',A11,
@


1.33
log
@extracted getfilenum
@
text
@d1279 10
a1288 2
         IF (ISTACK .GT. 0 .AND. IMGNUM .EQ. 0)THEN
C           OVERALL STACKED IMAGE  OR STACKED VOLUME FILE
@


1.32
log
@flipbytes --> reversebytes
@
text
@d8 1
d12 1
a12 1
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
d20 1
a20 1
C    PURPOSE:       HANDLES ALL INTERACTIONS WITH SPIDER IMAGE FILE
d901 1
a901 1
            CALL GETFILENUM(FILNAM,IMGNUM,.TRUE.,IRTFLG)
a1487 50

C      -------------- GETFILENUM --------------------------------------

       SUBROUTINE GETFILENUM(FILNAM,IMGNUM,CALLERRT,IRTFLG)

       INCLUDE 'CMBLOCK.INC'

       CHARACTER *(*) FILNAM
       CHARACTER *1   CHARI
       CHARACTER  *9  DIGITS
       CHARACTER  *4  FMT2
       LOGICAL        CALLERRT
    
       DATA DIGITS/'123456789'/
       DATA FMT2/'(I )'/
        
C      FIND NUMBER OF CHAR. IN FILNAM
       NLET   = LNBLNKN(FILNAM)
       IGO    = NLET - 1
       IMGNUM = 0

C      EXTRACT IMGNUM FROM FILENAME
       DO I = NLET,1,-1
          CHARI = FILNAM(I:I)
          IF (CHARI .LT. '0' .OR. CHARI .GT. '9') GOTO 10
          IGO = I 
       ENDDO

10     NDIGITS = NLET - IGO + 1
       IF (NDIGITS .LE. 0) THEN
C         NO NUMBER AT END OF FILNAM
          IRTFLG = -1
          RETURN
       ENDIF

       WRITE(FMT2(3:3),8000,ERR=999) NDIGITS
8000   FORMAT(I1)

       READ(FILNAM(IGO:NLET),FMT2,ERR=999) IMGNUM
       IRTFLG = 0
       RETURN
     
999    WRITE(NOUT,*) ' *** CAN NOT GET FILE NUMBER FROM: ',FILNAM(:NLET)
       IF (CALLERRT) THEN
          CALL ERRT(100,'GETFILENUM',NE)
       ENDIF
       IRTFLG = 1

       RETURN
       END
@


1.31
log
@seatang and setevals needed wrthed!
@
text
@d1071 1
a1071 1
      CALL FLIPBYTES(CLINE,180,IRTFLG)
d1109 1
a1109 1
      CALL FLIPBYTES(CLINE,180,IRTFLG)
d1152 1
a1152 1
      CALL FLIPBYTES(CLINE,20,IRTFLG)
d1183 1
a1183 1
         CALL FLIPBYTES(CLINE,160,IRTFLG)
@


1.30
log
@lungetvals bufout (nval)
@
text
@d802 1
a802 1
C     SET VALUES
d807 2
a808 1
      IRTFLG = 0
d834 2
a835 1
      IRTFLG = 0
@


1.29
log
@lunsetvals changed a bit
@
text
@d756 1
a756 1
      SUBROUTINE LUNGETVALS(LUN,IGO,NVAL,BUF,IRTFLG)
d760 1
a760 1
      REAL, DIMENSION(:)  :: BUF
d766 1
a766 1
      IEND = IGO+NVAL-1
d775 1
a775 1
         BUF(IVAL-IGO+1) = HEADER(IVAL)
@


1.28
log
@bad lungetvals
@
text
@d785 1
a785 1
      SUBROUTINE LUNSETVALS(LUN,IGO,NVAL,BUF,IRTFLG)
d789 1
a789 1
      REAL, DIMENSION(:)  :: BUF
d804 1
a804 1
         HEADER(IVAL) = BUF(IVAL-IGO+1)   
@


1.27
log
@irtflg needed on setvals & sgetvals
@
text
@d756 1
a756 1
      SUBROUTINE LUNGETHED(LUN,IGO,NVAL,BUF,IRTFLG)
@


1.26
log
@added lunsetvals & lungetvals
@
text
@d769 1
d798 1
@


1.25
log
@N_VERBOSE --> VERBOSE
@
text
@d754 56
@


1.24
log
@added lunarb to common /lunara/
@
text
@d1148 2
a1149 2
      LOGICAL SILENT
      COMMON /IPRTT/   IDUM,NTRACE,NALPH,N_VERBOSE,N_MOSAIC,SILENT
d1197 1
a1197 1
      IF (N_VERBOSE .EQ. 1 .AND. IFOUND .NE. -4) THEN
@


1.23
log
@kangle position bug fixed
@
text
@d100 2
a101 1
      COMMON /LUNARA/  LUNARA(100),LUNSTK(100)
d216 1
a216 1
      COMMON /LUNARA/  LUNARA(100),LUNSTK(100)
d380 2
a381 1
      COMMON /LUNARA/  LUNARA(100),LUNSTK(100)
d573 2
a574 1
      COMMON /LUNARA/ LUNARA(100),LUNSTK(100)
@


1.22
log
@time --> mytime
@
text
@d6 3
a8 2
C                  USED MYTIME DEC 00 ARDEAN LEITH
C             
d11 6
a16 6
C * COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY.  *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
C **********************************************************************
d744 1
a744 1
      KANGLE   = HEADER(31)
d770 1
a770 1
      HEADER(31) = KANGLE
d1276 6
a1281 6
      PHI2     = HEADER(31)
      THETA2   = HEADER(32)
      PSI2     = HEADER(33)
      PHI1     = HEADER(34)
      THETA1   = HEADER(35)
      PSI1     = HEADER(36)
@


1.21
log
@used reg_set
@
text
@d6 2
a7 1
C                                          
d1084 1
a1084 1
      CALL TIME(CLINE(13:20))
@


1.20
log
@replaced allocate with allocit
@
text
@d1312 17
a1328 8
      PARAM(2) = NSAMC
      PARAM(3) = NROWC
      PARAM(4) = FMAX
      PARAM(5) = FMIN
      PARAM(6) = AV
      PARAM(7) = SIG
      PARAM(8) = NSLICE
      PARAM(9) = NSTACK
@


1.19
log
@SP_F90 removed
@
text
@d5 1
d17 3
a19 1
C    PURPOSE:       SAVE SPIDER IMAGE DATA IN AN OBJECT
d21 1
a21 5
C    PARAMETERS :
C
C23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
C--*********************************************************************

d61 3
a63 1

a156 1

a157 2
      INCLUDE 'F90ALLOC.INC'

a158 2
      LOGICAL  RUNTIME

d163 3
a165 5
         CALL ALLOCIT(LENHDR,RUNTIME,IPOINTER,'LUNNEWHDR',IRTFLG)
         IF (.NOT. RUNTIME .OR. IRTFLG .NE. 0) THEN
            WRITE(NOUT,*) '*** PGM ERROR, LUN: ',LUN,
     &                        ' OUT OF RANGE'
            CALL ERRT(100,'LUNNEWHDR',NE)
a192 1

a445 2
      INCLUDE 'F90ALLOC.INC'
      LOGICAL RUNTIME
d450 2
a451 5
      IF (ASSOCIATED(IPOINTER)) THEN
         RUNTIME = .TRUE.
         CALL ALLOCIT(0,RUNTIME,IPOINTER,'LUNMTHDR',IRTFLG)
      ENDIF
      NULLIFY( LUNHDRBUF(LUN)%IPT)
@


1.18
log
@ibm specific ifdef added
@
text
@a63 2
#ifdef SP_F90
C     F90 specific code follows ---------------------
a72 2
C     F90 specific code ends ---------------------
#endif
@


1.17
log
@CDAT in common was only 10 char long,
removed SP_F90 cpp
@
text
@d191 3
a193 1

d195 1
a197 1

@


1.16
log
@CMLIMIT.INC
@
text
@a116 1
#ifdef SP_F90
a117 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a161 1
#ifdef SP_F90
a162 1
#endif
a166 1
#ifdef SP_F90
a180 14
#else
      IPOINTER = LUNHDRBUF(LUN)
      IF (IPOINTER.LE. 0) THEN
C        ALLOCATE SPACE FOR THIS HEADER 
         CALL ALLOCIT(LENHDR,RUNTIME,IPOINTER,'LUNNEWHDR',IRTFLG)
         IF (.NOT. RUNTIME .OR. IRTFLG .NE. 0) THEN
            WRITE(NOUT,*) '*** UNABLE TO CREATE HEADER OBJECT'
            CALL ERRT(100,'LUNNEWHDR',NE)
            IRTFLG = 1
            RETURN
         ENDIF
         LUNHDRBUF(LUN) = IPOINTER
      ENDIF
#endif
a207 1
#ifdef SP_F90
a209 4
#else
      IPOINTER = LUNHDRBUF(LUN)
      IF (IPOINTER .EQ. 0) RETURN
#endif
a252 1
#ifdef SP_F90
a253 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a269 1
#ifdef SP_F90
a270 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a287 1
#ifdef SP_F90
a288 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a322 1
#ifdef SP_F90
a323 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a413 1
#ifdef SP_F90
a414 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a454 1
#ifdef SP_F90
a455 1
#endif
a459 1
#ifdef SP_F90
a465 8
#else
      IPOINTER = LUNHDRBUF(LUN)
      IF (IPOINTER .NE. 0) THEN
         RUNTIME = .TRUE.
         CALL ALLOCIT(0,RUNTIME,IPOINTER,'LUNMTHDR',IRTFLG)
      ENDIF
      LUNHDRBUF(LUN) = 0
#endif
a483 1
#ifdef SP_F90
a484 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a503 1
#ifdef SP_F90
a504 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a521 1
#ifdef SP_F90
a522 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a539 1
#ifdef SP_F90
a540 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a559 1
#ifdef SP_F90
a560 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a655 1
#ifdef SP_F90
a656 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a677 1
#ifdef SP_F90
a678 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a700 1
#ifdef SP_F90
a701 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a721 1
#ifdef SP_F90
a722 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a744 1
#ifdef SP_F90
a745 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a770 1
#ifdef SP_F90
a771 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a867 1
#ifdef SP_F90
a868 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a886 1
#ifdef SP_F90
a887 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a905 1
#ifdef SP_F90
a906 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a926 1
#ifdef SP_F90
a927 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a945 1
#ifdef SP_F90
a946 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a964 1
#ifdef SP_F90
a965 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a1006 1
#ifdef SP_F90
a1007 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a1044 1
#ifdef SP_F90
a1045 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a1087 1
#ifdef SP_F90
a1088 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a1122 1
#ifdef SP_F90
a1123 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
d1277 2
a1282 1
#ifdef SP_F90
a1283 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
d1315 2
a1316 1
      CALL LUNGETDATE(LUN,CDAT,CTIM,IRTFLG)
a1356 1
#ifdef SP_F90
a1357 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
a1407 1
#ifdef SP_F90
a1408 3
#else
      CALL LUNGETOBJ(LUN,IPOINTER,IRTFLG)
#endif
@


1.15
log
@added lunwrtcurhdr, title stuff
@
text
@d656 2
a657 1
      PARAMETER      (NBUFSIZ = 17008)
a661 2

      INCLUDE 'CMBLOCK.INC'
@


1.14
log
@comment needed C
@
text
@d26 1
a26 1
C     ------------------------- LUNIMGREDHED -----------------------------
d29 1
d34 5
a38 5
C     ------------------------- LUNGETSTK --------------------------
C     ------------------------- LUNSETINUSE --------------------------
C     ------------------------- LUNGETMAXIM --------------------------
C     ------------------------- LUNSETMAXIM --------------------------
C     ------------------------- LUNSAVMAXIM --------------------------
d50 2
a51 1
C     ------------------------- LUNGETCHAR ----------------------------
d408 14
d1120 1
a1120 1
C     ------------------------- LUNGETCHAR ----------------------------
d1122 1
a1122 1
      SUBROUTINE LUNGETCHAR(LUN,FILEDATE,FILETIME,FILETITLE,NLET,IRTFLG)
d1126 1
a1126 1
      CHARACTER *(*) FILEDATE,FILETIME,FILETITLE
d1154 43
a1196 1
C     READ DATE, TIME & TITLE FROM HEADER OBJECT
a1204 2
      FILETITLE = CLINE(21:180)
      NLET      = MAX(0,(INDEX(FILETITLE,NULL)-1))
d1342 2
a1343 1
      CALL LUNGETCHAR(LUN,CDAT,CTIM,CTIT,LENTIT,IRTFLG)
d1459 2
a1460 1
      CALL LUNGETCHAR(LUN,CDAT,CTIM,CTIT,LENTIT,IRTFLG)
@


1.13
log
@flipbyetes needed CALL
@
text
@d1184 1
a1184 1
      END DEC UNIX WITH IEEE TYPE DATA SPECIFIC CODE
d1219 1
a1219 1
         END DEC UNIX WITH IEEE TYPE DATA SPECIFIC CODE
@


1.12
log
@11 char print in  cdat now
@
text
@d1134 1
a1134 1
      FLIPBYTES(CLINE,180,IRTFLG)
@


1.11
log
@has code for resetting maxim in overall header now
@
text
@d1316 1
a1316 1
90          FORMAT(' (',A,')',2I5,' (..',I6,')  CREATED ',A,' AT ',A,
d1322 1
a1322 1
91          FORMAT(' (',A,')',3I5,' (@@',I7,')  CREATED ',A,' AT ',A,
d1328 1
a1328 1
92          FORMAT(' (',A,')',2I5,' (@@',I7,')  CREATED ',A,' AT ',A,
d1335 1
a1335 1
93          FORMAT(' (',A,')',3I5,' CREATED ',A,' AT ',A,2X,A,
d1341 1
a1341 1
94          FORMAT(' (',A,')',2I5,' CREATED ',A,' AT ',A,2X,A,
@


1.10
log
@maxim added to lunsayinfo
@
text
@d37 1
a81 2
CNO_SAVE

d100 1
a213 1
CNO_SAVE
a244 1
CNO_SAVE
a272 1
CNO_SAVE
a294 1
CNO_SAVE
a316 1
CNO_SAVE
a355 1
CNO_SAVE
a384 1
CNO_SAVE
a409 1
CNO_SAVE
a483 1
CNO_SAVE
a521 1
CNO_SAVE
a545 1
CNO_SAVE
a567 1
CNO_SAVE
a589 1
CNO_SAVE
a611 2
CNO_SAVE

d632 79
a714 1
CNO_SAVE
a740 1
CNO_SAVE
d767 1
a767 1
CNO_SAVE
d792 1
a792 1
CNO_SAVE
d819 1
a819 1
CNO_SAVE
d849 1
a849 1
CNO_SAVE
a878 1
CNO_SAVE
d899 1
a899 1
CNO_SAVE
a924 1
CNO_SAVE
a950 2
CNO_SAVE

a973 2
CNO_SAVE

a994 1
CNO_SAVE
a1019 1
CNO_SAVE
a1042 1
CNO_SAVE
a1065 1
CNO_SAVE
a1089 2
CNO_SAVE

a1107 1
CNO_SAVE
a1235 2
CNO_SAVE

a1357 1
CNO_SAVE
a1432 1
CNO_SAVE
a1489 1
CNO_SAVE
@


1.9
log
@use out of order in newhdr
@
text
@d1264 12
a1275 3
         IF (IMGNUM .GT. 0 .AND. NSLICE .GT. 1) THEN
            WRITE(NOUT,90) TYPE,NSAM,NROW,NSLICE,IMGNUM,CDAT,CTIM,DSP
90          FORMAT(' (',A,')',3I5,' (@@',I6,')  CREATED ',A,' AT ',A,
d1279 3
a1281 2
            WRITE(NOUT,91)TYPE,NSAM,NROW,IMGNUM,CDAT,CTIM,DSP
91          FORMAT(' (',A,')',2I5,' (@@',I6,')  CREATED ',A,' AT ',A,
d1283 4
a1286 2
         ELSE IF (NSLICE .GT. 1) THEN
            WRITE(NOUT,92) TYPE,NSAM,NROW,NSLICE,CDAT,CTIM,DSP,
d1288 1
a1288 1
92          FORMAT(' (',A,')',3I5,' CREATED ',A,' AT ',A,2X,A,
d1292 3
a1294 2
            WRITE(NOUT,93)TYPE,NSAM,NROW,CDAT,CTIM,DSP,LABBYT
93          FORMAT(' (',A,')',2I5,' CREATED ',A,' AT ',A,2X,A,
@


1.8
log
@undefiend nout at line 192
@
text
@a161 1
      INCLUDE 'CMBLOCK.INC'
d168 1
@


1.7
log
@split out filnameandext
@
text
@d97 1
a97 1
CNO_SAVE
d162 1
a162 1
CNO_SAVE
@


1.6
log
@lenbuf wrong
@
text
@a54 1
C      ------------------------ DATE_2K -------------------------------
a1513 80
C++************************************************************************
C
C  FILNAMANDEXT.F -- SIMPLIFIED FROM FILCAN.F  JAN 99 --  ArDean Leith
C                                          
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
C
C   FILNAMANDEXT(FILIN,EXTEN,FILOUT,NLET,IER)
C
C   PURPOSE: CONSTRUCTS FILE NAME FROM FILENAME & FILE EXTENSION 
C            STRINGS.
C            THIS SUBROUTINE IS SOMEWHAT OS DEPENDENT. IT IS WRITTEN 
C            FOR THE FILE-NAMING CONVENTIONS OF UNIX OS.
C
C            THE FILE NAME HAS THE FOLLOWING FORMAT: <FILEN>.<EXTEN>
C
C  PARAMETERS:  FILIN    INPUT FILE NAME              (SENT)
C               EXTEN    EXTENSION NAME               (SENT)
C               FILOUT   MASTER FILE NAME             (SENT)
C               NLET     LENGTH OF FILOUT             (RETURNED)
C               IRTFLG   ERROR FLAG (0 IS NORMAL)     (RETURNED)
C
C ************************************************************************

        SUBROUTINE FILNAMANDEXT(FILIN,EXTEN,FILOUT,NLET,CALLERRT,IRTFLG)
CNO_SAVE
        COMMON/UNITS/LUN,NIN,NOUT

        LOGICAL         CALLERRT
        CHARACTER *(*)  FILIN,FILOUT,EXTEN

C       SET DEFAULT IRTFLG
        IRTFLG = 1

C       FIND NUMBER OF USED CHARACTERS IN INPUT FILANEM
        NLETF = LNBLNKN(FILIN)
        IF (NLETF .LE. 0) THEN
C          NO FILIN SENT TO THIS ROUTINE
           WRITE(NOUT,*) '*** PGM ERROR, MISSING FILENAME'
           IF (CALLERRT) CALL ERRT(100,'FILNAMANDEXT',IDUM)
           RETURN
        ENDIF

C       FIND NUMBER OF USED CHARACTERS IN INPUT EXTENSION
        NLETE = LNBLNKN(EXTEN)

C       FIND MAX. NUMBER OF CHARACTERS IN RETURNED FILOUT
        LENO  = LEN(FILOUT)

C       FIND NUMBER OF CHARACTERS WANTED IN RETURNED FILOUT
        NLET = NLETF + NLETE + 1

        IF (NLET .GT. LENO .OR. NLET .LE. 1) THEN
C          OVERFLOW OR UNDERFLOW OF FILOUT

           WRITE(NOUT,90) FILIN(1:NLETF),EXTEN 
90         FORMAT(' *** ERROR, MAKING FILE NAME FROM: ',A,' & ',A)
           IF (CALLERRT) CALL ERRT(100,'FILNAMANDEXT',IDUM)
           RETURN
        ENDIF

C       PUT BASE FILENAME IN FILOUT
        FILOUT(1:NLETF) = FILIN(1:NLETF)
        NLET = NLETF

        IF (NLETE .GT. 0) THEN
C          ADD DOT, THEN ADD EXTENSION
           FILOUT(NLETF+1:) = '.'

C          ADD FILENAME EXTENSION TO FILOUT
           FILOUT(2+NLETF:) = EXTEN(1:NLETE)
           NLET = NLETF + 1 + NLETE
        ENDIF
a1514 4
        IRTFLG = 0

        RETURN
        END
@


1.5
log
@*** empty log message ***
@
text
@d176 1
a176 1
C        ALLOCATE SPACE FOR THIS HEADER 
d954 1
a954 1
      IDSP = HEADER(1025)
d980 2
a981 2
      HEADER(1025) = 0
      IF ( DSP .EQ. 'N') HEADER(1025) = 1
d1005 1
a1005 1
      IF (HEADER(1026) .EQ. 1.0) ISBARE = .TRUE.
d1028 2
a1029 2
      HEADER(1026) = 0.0
      IF (ISBARE) HEADER(1026) = 1.0
@


1.4
log
@lenbyt was zero on old vax files
@
text
@d251 1
a251 1
C     GET RECORD INFO
d255 1
a255 1
C     GET IMGNUM INFO
@


1.3
log
@bad setcommon nsam,nrow values
@
text
@d339 6
@


1.2
log
@cut out date_2k
@
text
@d1327 1
a1327 1
      CALL LUNGETSIZE(LUN,NSAMC,NROWC,NDUM,NDUM,IRTFLG)
d1347 2
a1348 2
      PARAM(2) = NSAM
      PARAM(3) = NROW
@


1.1
log
@Initial revision
@
text
@a1456 68
C      -------------------- DATE_2K --------------------------------

       SUBROUTINE DATE_2K(DATEVAR)

C      DATEVAR SHOULD BE 12 CHAR. LONG!
       CHARACTER *(*)    DATEVAR

       CHARACTER *8      DATET
       CHARACTER *10     TIME
       CHARACTER *5      ZONE
       INTEGER           IVALUES(8)
CNO_SAVE 

C      Y2K SAFE CALL

#ifdef _LANGUAGE_FORTRAN90
       CALL DATE_AND_TIME(DATET,TIME,ZONE,IVALUES)

C      PUT IN DAY
       DATEVAR(1:3) = DATET(7:8) // '-'

C      PUT IN MONTH
       IF     (DATET(5:6) .EQ. '01') THEN
           DATEVAR(4:7) = 'JAN-'
       ELSEIF (DATET(5:6) .EQ. '02') THEN
           DATEVAR(4:7) = 'FEB-'
       ELSEIF (DATET(5:6) .EQ. '03') THEN
           DATEVAR(4:7) = 'MAR-'
       ELSEIF (DATET(5:6) .EQ. '04') THEN
           DATEVAR(4:7) = 'APR-'
       ELSEIF (DATET(5:6) .EQ. '05') THEN
           DATEVAR(4:7) = 'MAY-'
       ELSEIF (DATET(5:6) .EQ. '06') THEN
           DATEVAR(4:7) = 'JUN-'
       ELSEIF (DATET(5:6) .EQ. '07') THEN
           DATEVAR(4:7) = 'JUL-'
       ELSEIF (DATET(5:6) .EQ. '08') THEN
           DATEVAR(4:7) = 'AUG-'
       ELSEIF (DATET(5:6) .EQ. '09') THEN
           DATEVAR(4:7) = 'SEP-'
       ELSEIF (DATET(5:6) .EQ. '10') THEN
           DATEVAR(4:7) = 'OCT-'
       ELSEIF (DATET(5:6) .EQ. '11') THEN
           DATEVAR(4:7) = 'NOV-'
       ELSEIF (DATET(5:6) .EQ. '12') THEN
           DATEVAR(4:7) = 'DEC-'
       ENDIF
    
C      PUT IN YEAR  
       DATEVAR(8:11) = DATET(1:4) 

       DATEVAR(12:12) = CHAR(0)

#else
       CALL DATE(DATEVAR)
       DATEVAR(10:11) = DATEVAR(8:9)
       IF (DATEVAR(8:8) .EQ. '0') THEN
           DATEVAR(8:8) = '2'
       ELSE
           DATEVAR(8:9) = '19'
       ENDIF 
       DATEVAR(12:12) = CHAR(0)
       
#endif

       RETURN
       END

@
