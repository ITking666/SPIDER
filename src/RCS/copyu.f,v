head	1.26;
access;
symbols
	pre_getangas:1.26
	GPL2010:1.26
	pre_GPL2010:1.25
	pre_var_equation:1.23
	pre_fftwrings:1.23
	pre_opfiles:1.23
	src:1.23
	best-code:1.23
	x-named-regs:1.23
	x:1.23
	v13-00:1.23
	pre_GPL:1.21
	prec_CA:1.21
	noindx:1.20
	Bproc:1.20
	oct21:1.19
	last77:1.19;
locks; strict;
comment	@c @;


1.26
date	2010.06.24.13.25.20;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2009.07.31.11.37.11;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2009.07.30.11.41.44;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2005.10.17.19.57.19;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.17.17.53.46;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2003.01.28.21.10.26;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2000.04.12.18.35.54;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	99.03.16.20.03.42;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	99.03.15.15.51.23;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	99.03.01.19.43.24;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	99.02.16.16.08.25;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	99.02.11.15.56.35;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	99.02.05.16.26.22;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	97.09.24.16.46.48;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	97.07.17.20.07.36;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	97.07.14.18.27.53;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	97.07.14.16.52.37;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	96.10.22.20.08.31;	author mladjadj;	state Exp;
branches;
next	1.8;

1.8
date	96.10.17.19.11.30;	author liy;	state Exp;
branches;
next	1.7;

1.7
date	96.10.03.19.27.53;	author liy;	state Exp;
branches;
next	1.6;

1.6
date	96.09.27.20.42.31;	author liy;	state Exp;
branches;
next	1.5;

1.5
date	96.01.04.18.20.20;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	95.01.06.22.13.23;	author liy;	state Exp;
branches;
next	1.3;

1.3
date	94.05.17.13.08.26;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.03.38;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.47.55;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.26
log
@GPL_2010
@
text
@
C++*********************************************************************
C
C  COPYU.F    -- CREATED MAR 89
C                REWRITTEN                           FEB 99 ARDEAN LEITH
C                NATIVE BYTE_ORDER                   JUL 09 ARDEAN LEITH
C
C **********************************************************************
C *  AUTHOR: A. LEITH                                                      *
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   COPYU(LUNO,LUNN,NSAM,NROW,NSLICE)
C
C   PURPOSE:      CONVERT SPIDER IMAGE FILES TO 8 BIT RAW
C
C   CALLED BY:    UTIL2
C
C--*********************************************************************

        SUBROUTINE COPYU(LUNO,LUNN,NSAM,NROW,NSLICE)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        CHARACTER (LEN=MAXNAM) :: FILNEW
        CHARACTER (LEN=1)      :: NULL,ANS
        LOGICAL                :: HEADER,NORMAL

        NULL = CHAR(0)

        CALL RDPRMC(ANS,NA,.TRUE.,
     &    'DO YOU WANT TO NORMALIZE THE OUTPUT TO 0-255? (Y/N)',
     &	   NULL,IRT)
        NORMAL = (ANS .NE. 'N' .AND. ANS .NE. 'n') 

        CALL RDPRMC(ANS,NA,.TRUE.,
     &     'DO YOU WANT TO KEEP THE HEADER? (N/Y)', NULL,IRT)
        HEADER =  (ANS .EQ. 'Y' .OR. ANS .EQ. 'y') 
        IF (HEADER) THEN
          WRITE(NOUT,*)
     &         'SORRY: THIS HEADER OPTION NO LONGER AVAILABLE'
          HEADER = .FALSE.
        ENDIF

        IF (IMAMI .EQ. 0) THEN
C          MUST NORMALIZE INPUT IMAGE FIRST
           CALL NORM3(LUNO,NSAM,NROW,NSLICE,FMAX,FMIN,AV)
        ENDIF

        IPAD    = 0
        NSAMRE  = MOD(NSAM,4)
        CALL RDPRMC(ANS,NC,.TRUE.,
     &      'PAD TO INCREMENT OF 4 IF NECESSARY? (N/Y)',NULL,IRTFLG)
        IF (IRTFLG .EQ. -1) GOTO 9001

        IF ((NSAMRE .NE. 0).AND.(ANS .EQ. 'Y' .OR. ANS .EQ. 'y'))THEN
C          WANT TO PAD
           IPAD = 4 - NSAMRE
        ENDIF

C       OUTPUT FILE HAS 1 BYTE RECORDS, DIRECT FORMATTED RECORDS
        LENREC = -1
        CALL OPAUXFILE(.TRUE.,FILNEW,DATEXC,LUNN,LENREC,'N',
     &                  'EIGHT BIT RAW',.TRUE.,IRTFLG)

        CALL UNIXTOUNIX8(LUNO,LUNN,0,255,FMIN,FMAX,NSAM,NROW,NSLICE,
     &                   NORMAL,IPAD,IRTFLG)

C       CLOSE INPUT AND OUTPUT FILES
        CLOSE(LUNN)
9001    CLOSE(LUNO)

        RETURN
        END
@


1.25
log
@*** empty log message ***
@
text
@a9 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d11 5
a15 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d17 1
a17 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d22 1
a22 1
C=* This program is distributed in the hope that it will be useful,    *
d24 1
a24 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a25 1
C=*                                                                    *
d27 1
a27 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.24
log
@for big-endian default
@
text
@d49 1
a49 1
        CHARACTER (LEN=`)      :: NULL,ANS
@


1.23
log
@GPL License fixed
@
text
@d5 2
a6 1
C                REWRITTEN   FEB 99               ARDEAN LEITH
d11 1
a11 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d46 1
d48 3
a50 6
        CHARACTER * 81  FILNEW
        COMMON /COMMUN/ FILNEW

        CHARACTER      NULL
        LOGICAL        HEADER,NORMAL
        CHARACTER * 1  ANS
d84 1
a84 4
C       OUTPUT FILE HAS 1 BYTE RECORDS

#if defined (__osf__) || defined (SP_NT) || defined (__linux__)
C       DIRECT FORMATTED RECORDS
a85 4
#else
C       DIRECT UNFORMATTED RECORDS
        LENREC = 1
#endif
d93 1
a93 1
9000    CLOSE(LUNN)
@


1.22
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a7 1
C **************************************************************************
d12 1
a12 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a31 7

C *  COPYRIGHT (C)1989 , WADSWORTH CENTER FOR LABORATORIES AND RESEARCH    *
C *    NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.              *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
a32 1
C **************************************************************************
a40 1
C--*************************************************************************
@


1.21
log
@SP_LINUX --> __linux__
@
text
@d2 1
d8 1
d11 24
d41 1
d50 1
@


1.20
log
@added SP_LINUX
@
text
@d70 1
a70 1
#if defined (__osf__) || defined (SP_NT) || defined (SP_LINUX)
@


1.19
log
@byte on f90 dec
@
text
@d70 1
a70 1
#if defined (__osf__) || defined (SP_NT)
@


1.18
log
@removed unused code
@
text
@d69 9
a77 1
        CALL OPAUXFILE(.TRUE.,FILNEW,DATEXC,LUNN,1,'N',
@


1.17
log
@bad parameter list for unixtounix8
@
text
@d34 1
a34 1
        CHARACTER * 1  ANS,EXTEN
a68 1
#ifdef SP_F90
a70 9
#else
#if defined(__osf__) || defined(SP_NT)
        CALL OPAUXFILE(.TRUE.,FILNEW,DATEXC,LUNN,1,'N',
     &                  'EIGHT BIT RAW',.TRUE.,IRTFLG)
#else
        CALL OPAUXFILE(.TRUE.,FILNEW,DATEXC,LUNN,1,'N',
     &                  'EIGHT BIT RAW',.TRUE.,IRTFLG)
#endif
#endif
@


1.16
log
@changed opauxfile parameter to bytes
@
text
@d83 1
a83 1
     &                   NSLICE,HEADER,NORMAL,IPAD,IRTFLG)
@


1.15
log
@rewritten for f90
@
text
@d70 1
a70 1
        CALL OPAUXFILE(.TRUE.,FILNEW,DATEXC,LUNN,-1,'N',
d74 1
a74 1
        CALL OPAUXFILE(.TRUE.,FILNEW,DATEXC,LUNN,-1,'N',
d77 1
a77 1
        CALL OPAUXFILE(.TRUE.,FILNEW,DATEXC,LUNN,-1,'N',
@


1.14
log
@removed SP_VMS
@
text
@a1 1

d4 2
a5 1
C  COPYU.FOR  -- CREATED MAR 89
d17 1
a17 1
C   COPYU(LUNO,LUNN)
d19 1
a19 1
C   PURPOSE:      CONVERT VAX SPIDER IMAGE FILES TO UNIX READABLE FORMAT
a22 2
C   CALLS:        GETVAX    FILERD     GETV16
C          
d25 3
d29 2
a30 2
      SUBROUTINE COPYU(LUNO,LUNN,NSAM,NROW,NSLICE,IC)
CNO_SAVE
d32 3
a34 1
      INCLUDE 'CMBLOCK.INC'
d36 1
a36 1
      COMMON /COMMUN/ FILNAM,FILNEW,COMLIN
a37 16
      CHARACTER *160 COMLIN
      CHARACTER * 81 FILNAM,FILOLD,FILNEW
      CHARACTER      NULL
      LOGICAL        HEADER,NORMAL,ASKPAD
      CHARACTER * 1  ANS

      NULL = CHAR(0)

      IF (FCHAR(IC:IC+3) .EQ. 'RAW') THEN
C       RAW OUTPUT --------------------------------------------- TO RAW
	FILOLD = FILNAM
        FILNEW = NULL
	HEADER = .FALSE.
	NORMAL = .FALSE.
	ASKPAD = .TRUE.
	
d41 1
a41 2
C       8 BIT UNIX SPIDER OUTPUT WITH NO NORMALIZATION
        IF (ANS .NE. 'N' .AND. ANS .NE. 'n') NORMAL = .TRUE.
d45 43
a87 11
C       8 BIT UNIX RAW HEADERLESS
        IF (ANS .EQ. 'Y' .OR. ANS .EQ. 'y') HEADER = .TRUE.

        CALL UNIXTOUNIX8(FILOLD,FILNEW,LUNO,LUNN,0,255,NSAM,NROW,
     &               NSLICE,HEADER,NORMAL,ASKPAD,IRTFLG)
      ENDIF


C     CLOSE INPUT AND OUTPUT FILES
9000  CLOSE(LUNO)
      CLOSE(LUNN)
d89 2
a90 2
      RETURN
      END
@


1.13
log
@did not recognize raw due to ic wrong
@
text
@a26 1
#ifdef SP_VMS
a28 62

      INCLUDE 'CMBLOCK.INC'

      COMMON /COMMUN/ FILOLD,FILNEW

      CHARACTER * 81 FILOLD,FILNEW
      CHARACTER      NULL
      LOGICAL        HEADER,NORMAL
      CHARACTER*1    ANS

      NULL = CHAR(0)

10    CALL FILERD(FILOLD,NLET,NULL,'VAX INPUT',IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      CALL FILCAN(FILOLD,NLET,NULL,NULL,FILOLD,DATEXC,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      CALL FILERD(FILNEW,NLET,NULL,'UNIX OUTPUT',IRTFLG)
      IF (IRTFLG .EQ. -1) GOTO 10
      IF (IRTFLG .NE. 0) RETURN

      CALL FILCAN(FILNEW,NLET,NULL,NULL,FILNEW,DATEXC,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      IF (FCHAR(IC:IC+2) .EQ. 'RAW') THEN
	 HEADER = .FALSE.
	 NORMAL = .FALSE.
	
         CALL RDPRMC(ANS,NA,.TRUE.,
     &      'DO YOU WANT TO NORMALIZE THE OUTPUT TO 0-255? (Y/N)',
     &	     NULL,IRT)
C        8 BIT UNIX SPIDER OUTPUT WITH NO NORMALIZATION
         IF (ANS .NE. 'N' .AND. ANS .NE. 'n') NORMAL = .TRUE.

         CALL RDPRMC(ANS,NA,.TRUE.,
     &      'DO YOU WANT TO KEEP THE HEADER? (N/Y)',NULL,IRT)
C        8 BIT UNIX RAW HEADERLESS
         IF (ANS .EQ. 'Y' .OR. ANS .EQ. 'y') HEADER = .TRUE.

	 IF (.NOT. NORMAL) THEN
	     MODE = -8
	 ELSE IF (NORMAL .AND. HEADER) THEN
	     MODE = 8
	 ELSE IF (NORMAL .AND. (.NOT.HEADER)) THEN
	     MODE = 88
	 ELSE
	     WRITE(NOUT,*) 'IT IS NOT A SPIDER FORMAT'
	 ENDIF

         CALL GETV16(FILOLD,FILNEW,LUNO,LUNN,MODE,IRTFLG)

      ELSE
         CALL GETVAX(FILOLD,FILNEW,LUNO,LUNN,IRTFLG)
      ENDIF

      RETURN
      END

#else

      SUBROUTINE COPYU(LUNO,LUNN,NSAM,NROW,NSLICE,IC)
a72 1
#endif
@


1.12
log
@*** empty log message ***
@
text
@d2 1
d55 1
a55 1
      IF (FCHAR(IC+3:IC+6) .EQ. 'RAW') THEN
@


1.11
log
@no_save added
@
text
@d36 1
a36 1
      LOGICAL        HEADER,NORMA
d54 1
a54 9
      IF (FCHAR(IC+3:IC+4) .EQ. '-1') THEN
         MODE = -16
         CALL GETV16(FILOLD,FILNEW,LUNO,LUNN,MODE,IRTFLG)

      ELSEIF (FCHAR(IC+3:IC+3) .EQ. '1') THEN
         MODE = 16
         CALL GETV16(FILOLD,FILNEW,LUNO,LUNN,MODE,IRTFLG)

      ELSEIF (FCHAR(IC+3:IC+6) .EQ. 'RAW') THEN
a87 2


d100 1
a100 1
      LOGICAL        HEADER,NORMA,ASKPAD
a102 3
      INTEGER        DELAY
      DATA DELAY /5/

d105 2
a106 5
      IF (FCHAR(IC:IC+5) .EQ. 'RAW16') THEN
         CALL ERRT(101,'16 BIT FILES NOT SUPPORTED',IE)

      ELSEIF (FCHAR(IC:IC+3) .EQ. 'RAW') THEN
C       RAW OUTPUT ------------------------------------------------ RAW
a125 87

      ELSEIF (FCHAR(IC:IC+5) .EQ. 'TARGA') THEN
C       'TARGA' OUTPUT ------------------------------------------ TARGA
C        CREATE TARGA OUTPUT NORMALIZED FROM 0...255 FROM SPIDER

         IF (FCHAR(IC+6:IC+6) .EQ. 'V') THEN
C           VAX 32 BIT SPIDER TO UNIX 32 BIT SPIDER ON UNIX

            FILOLD = FILNAM
            FILNEW = 'temp_junk32' // NULL
            CALL VAXTOUNIX(FILOLD,FILNEW,LUNO,LUNN,IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 9000
            CLOSE(LUNO)
            CLOSE(LUNN)

C           CONVERT FROM UNIX 32 BIT SPIDER TO UNIX 8 BIT RAW
            FILOLD = FILNEW
            FILNEW = 'temp_junk8' // NULL
	   
            CALL UNIXTOUNIX8(FILOLD,FILNEW,LUNO,LUNN,
     &               0,255,0,0,0,.FALSE.,.TRUE.,.FALSE.,IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 9000

C           REMOVE TEMPORARY 32 BIT UNIX FILE (temp_junk32.DATEXC)
            CALL FILCAN(FILOLD,NLET,NULL,NULL,FILOLD,DATEXC,IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 9000
            COMLIN = '\\rm ' // FILOLD // NULL
ccccc            CALL CSVMS(COMLIN,IERR)

         ELSE
C           CONVERT FROM UNIX 32 BIT SPIDER TO UNIX 8 BIT SPIDER
            FILOLD = FILNAM
            FILNEW = 'temp_junk8' // NULL
            CALL UNIXTOUNIX8(FILOLD,FILNEW,LUNO,LUNN,0,255,
     &		      NSAM,NROW,NSLICE,
     &               .FALSE.,.TRUE.,.FALSE.,IRTFLG)
         ENDIF
         IF (IRTFLG .NE. 0) GOTO 9000

C        NOW CONVERT THE RAW IMAGE TO SGI IMAGE FORMAT
C                         123456789 123456789 123456789 1234567
         FILOLD = FILNEW
         CALL FILCAN(FILOLD,NLET,NULL,NULL,FILOLD,DATEXC,IRTFLG)
 
         WRITE(COMLIN,8005) FILOLD(1:NLET),NSAMC,NROWC
8005     FORMAT('frombin ',A,' temp_junki.rgb ',I5,' ',I5)
         CALL CSVMS(COMLIN,IERR)

C        FROMBIN FORKS A PROCESS  WITHOUT WAITING SO I ADD
C        A DELAY SECOND DELAY HERE. (KLUDGY)
         CALL sleep(DELAY)
 
C        flip image about y axis
         COMLIN = 'iflip  temp_junki.rgb temp_junk.rgb y ' // NULL
         CALL CSVMS(COMLIN,IERR)

C        GET FILENAME FOR TARGA IMAGE FILE
         CALL FILERD(FILNEW,NLETI,NULL,'ENTER TARGA OUTPUT',IRTFLG)
         CALL FILCAN(FILNEW,NLET,NULL,NULL,FILNEW,DATEXC,IRTFLG)

C        CONVERT TO TARGA IMAGE FILE
C                         123456789 123456789 123456789 1234567
         COMLIN = 'totarga  temp_junk.rgb ' // FILNEW // NULL
         CALL CSVMS(COMLIN,IERR)

C        FROMBIN AND TARGA FORK PROCESSES WITHOUT WAITING SO I ADD
C        A DELAY SECOND DELAY HERE. (KLUDGY)
         CALL sleep(DELAY)

C        REMOVE TEMPORARY 8 BIT RAW FILE (temp_junk1.DATEXC)
         COMLIN = '\\rm ' // FILOLD // NULL 
         CALL CSVMS(COMLIN,IERR)

C        REMOVE TEMPORARY SGI IMAGE FILE (temp_junk.rgb)
         COMLIN = '\\rm temp_junki.rgb ' // NULL
         CALL CSVMS(COMLIN,IERR)

C        REMOVE TEMPORARY SGI IMAGE FILE (temp_junk.rgb)
         COMLIN = '\\rm temp_junk.rgb ' // NULL
         CALL CSVMS(COMLIN,IERR)

      ELSE
C       RAW OUTPUT ---------------------------------------------- UNIX
C        VAX 32 BIT SPIDER TO UNIX 32 BIT SPIDER ON UNIX
         FILOLD = NULL
         FILNEW = NULL
         CALL VAXTOUNIX(FILOLD,FILNEW,LUNO,LUNN,IRTFLG)
@


1.10
log
@removed "cp to vv" to copy1
@
text
@d101 1
@


1.9
log
@if ... then clause
@
text
@d18 1
a18 2
C   PURPOSE:      DRIVER TO CONVERT VAX SPIDER IMAGE FILE TO UNIX 
C                  READABLE FORMAT
d67 2
a68 2
     &    'DO YOU WANT TO NORMALIZE THE OUTPUT TO 0-255? (Y/N)',
     &	   NULL,IRT)
d70 1
a70 1
         IF (ANS .NE. 'N' .AND. ANS .NE. 'n') NORMAL=.TRUE.
d73 1
a73 2
     &    'DO YOU WANT TO KEEP THE HEADER? (Y/N)',
     &	   NULL,IRT)
d75 1
a75 1
         IF (ANS .NE. 'N' .AND. ANS .NE. 'n') HEADER=.TRUE.
d109 1
a109 1
      LOGICAL          HEADER,NORMA,ASKPAD
d117 2
a118 4
      IF (FCHAR(IC:IC+1) .EQ. 'VV') THEN
C        8 BIT Voxel-View OUTPUT NORMALIZED 0...255
         FILOLD = NULL
         CALL UNIXTOVV(LUNO,LUNN,0,255,NSAM,NROW,NSLICE,IRTFLG)
a119 3
      ELSEIF (FCHAR(IC:IC+5) .EQ. 'RAW16') THEN
         CALL ERRT(101,'16 BIT FILES NOT SUPPORTED ON UNIX SPIDER',IE)

d121 1
d132 1
a132 1
        IF (ANS .NE. 'N' .AND. ANS .NE. 'n') NORMAL=.TRUE.
d135 1
a135 2
     &    'DO YOU WANT TO KEEP THE HEADER? (Y/N)',
     &	   NULL,IRT)
d137 1
a137 1
        IF (ANS .NE. 'N' .AND. ANS .NE. 'n') HEADER=.TRUE.
d143 1
d147 1
a147 1
C           CONVERT FROM VAX 32 BIT SPIDER TO UNIX 32 BIT SPIDER ON UNIX
d223 2
a224 1
C        CONVERT FROM VAX 32 BIT SPIDER TO UNIX 32 BIT SPIDER ON UNIX
@


1.8
log
@Added ANS defination in VAX site code
@
text
@d79 1
a79 1
	 IF (.NOT. NORMAL)
d81 1
a81 1
	 ELSE IF (NORMAL .AND. HEADER)
d83 1
a83 1
	 ELSE IF (NORMAL .AND. (.NOT.HEADER))
@


1.7
log
@changed <cp u> to <cp to vax>, open file in copy1.f
@
text
@d38 1
@


1.6
log
@changed <CP> to <CP TO> or <CP FROM>
@
text
@d145 1
a145 1
        CALL UNIXTOUNIX8(FILOLD,FILNEW,LUNO,LUNN,0,0,NSAM,NROW,
@


1.5
log
@cp t had bad logic in cp tv option selection.
@
text
@d29 1
a29 1
      SUBROUTINE COPYU(LUNO,LUNN)
d37 1
d54 1
a54 1
      IF (FCHAR(5:6) .EQ. '-1') THEN
d58 1
a58 1
      ELSEIF (FCHAR(5:5) .EQ. '1') THEN
d62 25
a86 3
      ELSEIF (FCHAR(5:6) .EQ. '-8') THEN
         MODE = -8
         CALL GETV16(FILOLD,FILNEW,LUNO,LUNN,MODE,IRTFLG)
a87 3
      ELSEIF (FCHAR(5:5) .EQ. '8') THEN
         MODE = 8
         IF (FCHAR(6:6) .EQ. 'N') MODE = 88
d101 1
a101 1
      SUBROUTINE COPYU(LUNO,LUNN)
d105 1
a105 1
      COMMON /COMMUN/ FILOLD,FILNEW,COMLIN
d108 1
a108 1
      CHARACTER * 81 FILOLD,FILNEW
d110 2
d118 1
a118 1
      IF (FCHAR(4:5) .EQ. 'VV') THEN
d121 1
a121 1
         CALL UNIXTOVV(FILOLD,LUNO,LUNN,0,255,IRTFLG)
d123 21
a143 14
      ELSEIF (FCHAR(5:6) .EQ. '-8') THEN
C        8 BIT UNIX SPIDER OUTPUT WITH NO NORMALIZATION
         FILOLD = NULL
         FILNEW = NULL
         CALL UNIXTOUNIX8(FILOLD,FILNEW,LUNO,LUNN,0,0,
     &               .TRUE.,.FALSE.,.TRUE.,IRTFLG)

      ELSEIF (FCHAR(5:6) .EQ. '8N') THEN
C        8 BIT UNIX RAW (HEADERLESS) OUTPUT NORMALIZED 0...255
         MODE = -8
         FILOLD = NULL
         FILNEW = NULL
         CALL UNIXTOUNIX8(FILOLD,FILNEW,LUNO,LUNN,0,255,
     &               .FALSE.,.TRUE.,.TRUE.,IRTFLG)
d145 2
a146 11
      ELSEIF (FCHAR(5:5) .EQ. '8') THEN
C        8 BIT UNIX SPIDER OUTPUT NORMALIZED 0...255
         FILOLD = NULL
         FILNEW = NULL
         CALL UNIXTOUNIX8(FILOLD,FILNEW,LUNO,LUNN,0,255,
     &               .TRUE.,.TRUE.,.TRUE.,IRTFLG)

      ELSEIF (FCHAR(4:6) .EQ. 'TIF') THEN
C        CONVERT FROM  SPIDER FORMAT TO TIFF FORMAT
	 CALL SPDTOTIFF(FILOLD,FILNEW,LUNO,LUNN,IRTFLG)
         IF (IRTFLG .NE. 0) GOTO 9000
d148 1
a148 1
      ELSEIF (FCHAR(4:4) .EQ. 'T') THEN
d151 1
a151 1
         IF (FCHAR(4:5) .EQ. 'TV') THEN
d154 1
a154 1
            FILOLD = NULL
d166 1
a166 1
     &               0,255,.FALSE.,.TRUE.,.FALSE.,IRTFLG)
d177 1
a177 1
            FILOLD = NULL
d180 1
a225 3

      ELSEIF (FCHAR(5:5) .EQ. '1') THEN
         CALL ERRT(101,'16 BIT FILES NOT SUPPORTED ON UNIX SPIDER',IE)
@


1.4
log
@update it for tiff
@
text
@d40 1
a40 1
10    CALL FILERD(FILOLD,NLET,NULL,'INPUT',IRTFLG)
d46 1
a46 1
      CALL FILERD(FILNEW,NLET,NULL,'UNIX',IRTFLG)
a107 1

a115 1

a122 1

d129 1
a129 1
C        TARGA OUTPUT NORMALIZED 0...255 FROM SPIDER
d145 1
a145 3
	    IF (FCHAR(4:5) .EQ. 'TV') THEN
C           	CONVERT FROM VAX 32 BIT SPIDER TO UNIX 32 BIT SPIDER ON UNIX
            	CALL UNIXTOUNIX8(FILOLD,FILNEW,LUNO,LUNN,
d147 1
a147 3
            	IF (IRTFLG .NE. 0) GOTO 9000

	    ENDIF
d164 1
a164 1
C        CONVERT RAW IMAGE TO SGI IMAGE FORMAT
a204 1

@


1.3
log
@fixed VMS
@
text
@d126 5
d147 8
a154 3
            CALL UNIXTOUNIX8(FILOLD,FILNEW,LUNO,LUNN,
     &           0,255,.FALSE.,.TRUE.,.FALSE.,IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 9000
@


1.2
log
@cpp_lines_added
@
text
@d1 1
a1 1
#ifdef VMS
d27 2
a30 1
#ifdef SP_UNIX
d32 1
a32 3
#else
      INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d77 2
a82 1
#ifdef SP_UNIX
d84 1
a84 3
#else
      INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1

d29 3
d33 1
d78 146
@
