head	1.33;
access;
symbols
	pre_mrcs:1.33
	healthdept_2018:1.33
	pre_getangas:1.30
	GPL2010:1.30
	pre_GPL2010:1.29
	pre_var_equation:1.29
	pre_fftwrings:1.29
	pre_opfiles:1.29
	src:1.29
	best-code:1.29
	x-named-regs:1.29
	x:1.29
	v13-00:1.29
	pre_GPL:1.27
	prec_CA:1.26
	noindx:1.21
	Bproc:1.19
	oct21:1.7
	last77:1.6;
locks; strict;
comment	@c @;


1.33
date	2018.10.03.14.34.06;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2014.05.09.15.26.39;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2014.05.09.15.15.10;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2010.06.24.13.25.38;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2005.10.17.20.06.38;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2005.10.17.18.01.31;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2004.02.20.20.11.15;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2003.10.08.20.44.11;	author bimal;	state Exp;
branches;
next	1.25;

1.25
date	2003.07.08.16.34.28;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2003.07.08.14.44.29;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2003.07.07.19.55.53;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2003.04.30.12.57.13;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2001.03.19.15.14.55;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2000.12.19.19.49.59;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2000.07.24.19.43.55;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2000.07.24.14.52.54;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2000.06.16.18.00.41;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2000.06.16.15.37.43;	author pawel;	state Exp;
branches;
next	1.15;

1.15
date	2000.06.16.15.29.45;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	2000.06.16.13.39.06;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.06.14.20.20.33;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.06.13.17.49.38;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.06.13.14.50.37;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.06.13.14.35.25;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2000.05.02.13.38.52;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.24.20.02.20;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.06.03.20.50.50;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	99.03.26.14.40.13;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	98.04.06.18.55.56;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	97.10.06.20.43.37;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.10.22.15.12.16;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	96.10.21.21.11.58;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	96.10.21.20.27.47;	author pawel;	state Exp;
branches;
next	;


desc
@filtering according to the doc file
@


1.33
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C FILTDOC.F     ALLOCATION                        MAY 2000 ARDEAN LEITH
C               OPENDOC PARAMETERS                DEC 2000 ARDEAN LEITH
C               LUNDOCREDSEQ RETURNS MAXY         APR 2003 ARDEAN LEITH
C               INCORE OPENDOC                    JUL 2003 ARDEAN LEITH
C               FOURIER INPUT AND OUTPUT FILE     OCT 2003 BIMAL RATH
C               NGOTY BUG                         FEB 2004 ARDEAN LEITH
C               REGISTER SELECTION                MAY 2024 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  FILTDOC(LUNINT,LUNOUT,NX,NY,NZ,IFORMIN)
C
C  PURPOSE:      FILTERS AN IMAGE USING COEEFICIENTS FROM A
C                DOC. FILE
C
C  PARAMETERS:   LUNINT         INPUT UNIT FOR IMAGE & DOC     (SENT)
C                LUNOUT         OUTPUT UNIT FOR IMAGE          (SENT)
C                NX,NY & NZ                                    (SENT)
C
C--********************************************************************

	SUBROUTINE FILTDOC(LUNINT,LUNOUT,NX,NY,NZ,IFORMIN)

        INCLUDE 'CMBLOCK.INC' 
        INCLUDE 'CMLIMIT.INC' 

        INTEGER               :: LUNINT,LUNOUT,NX,NY,NZ,IFORMIN

        COMPLEX, ALLOCATABLE  :: G(:,:,:)
        REAL, ALLOCATABLE     :: COEFFS(:,:)
        CHARACTER(LEN=MAXNAM) :: DOCFIL
        LOGICAL               :: LDUM
  
C       SET VALUE OF ISPACE AS PER REAL OR FT INPUT IMAGE
        IF (IFORMIN > 0) THEN
	   ISPACE = (NX + 2 - MOD(NX,2))/2
        ELSE
           ISPACE = NX
        ENDIF

	NZ = MAX(1,NZ)
        ALLOCATE (G(ISPACE,NY,NZ), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(46,'FILTDOC, G',NDUM)
           RETURN
        ENDIF

C       LOAD IMAGE/VOLUME DATA (CAN NOT USE REDVOL HERE)
        DO K=1,NZ
           DO J=1,NY
              NR = J+(K-1)*NY
              CALL REDLIN(LUNINT,G(1,J,K),NX,NR)
	   ENDDO
        ENDDO
        CLOSE(LUNINT)

C       OPEN DOC FILE
        CALL OPENDOC(DOCFIL,.TRUE.,NLET,LUNINT,LUNIN,.TRUE.,'DOCUMENT',
     &            .TRUE.,.FALSE.,.TRUE.,LDUM,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        MAXX = 1
        IF (FCHAR(4:4) == 'C') THEN
C          READ DOC FILE REGISTER TO BE USED

           CALL RDPRI1S(MAXX,NOT_USED, 'DOC REGISTER NUMBER',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999
        ENDIF

C       FOR 2D   (SQRT(2)/2) =~ .75
	LBS  = 0.75 * MAX(ISPACE,NY,NZ)

C       FOR 3D   (SQRT(3)/2) =~0.9
        IF (NZ > 1) LBS  = 0.9 * MAX(ISPACE,NY,NZ)

        MAXY = LBS

        ALLOCATE (COEFFS(MAXX,MAXY), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(46,'FILTDOC, COEFFS',MAXY*MAXY)
           GOTO 9999
        ENDIF

        IF (IRTFLG .NE. 0) GOTO 9999

C       LOAD COEFFS DATA USING SEQUENTIAL READ FROM FIRST REGISTER
        CALL LUNDOCREDSEQ(LUNIN,COEFFS,MAXX,MAXY,MAXY,NGOTY,IRTFLG)
        CLOSE(LUNINT)
        IF (IRTFLG == 1) GOTO 9999

C       ZERO REMAINING COEFFS IN THE DESIRED COLUMN
	IF (NGOTY < LBS) COEFFS(MAXX, NGOTY+1:LBS) = 0.0

        !write(6,*) 'coeffs:',coeffs(maxx,:)

C       DO FT FOR REAL INPUT IMAGES
        IF (IFORMIN > 0) THEN
 	   INV = +1
 	   IF (NZ <= 1)  THEN
              CALL FMRS_2(G,NX,NY,INV)
 	   ELSE
              CALL FMRS_3(G,NX,NY,NZ,INV)
	   ENDIF
        ENDIF

c$omp   parallel do private(k,j,i,iz,iy,ir,rr,dd,fr)
	DO K=1,NZ
           IZ = K-1
           IF (IZ > NZ/2)  IZ = IZ - NZ

	   DO J=1,NY
              IY = J-1
              IF (IY > NY/2) IY = IY - NY

	      DO I=1,ISPACE
	         RR       = SQRT(FLOAT((I-1)**2 + IY*IY + IZ*IZ))
	         IR       = IFIX(RR)
	         DD       = RR - FLOAT(IR)
	         FR       = (1.0-DD) * COEFFS(MAXX,IR+1) +
     &                            DD * COEFFS(MAXX,IR+2)
	         G(I,J,K) = G(I,J,K) * FR	
	      ENDDO
	   ENDDO
	ENDDO

C       DO INVERSE FT FOR REAL INPUT IMAGES
        IF (IFORMIN > 0) THEN
	   INV = -1
 	   IF (NZ <= 1)  THEN
              CALL FMRS_2(G,NX,NY,INV)
 	   ELSE
              CALL FMRS_3(G,NX,NY,NZ,INV)
	   ENDIF
        ENDIF

        DO K=1,NZ
          DO J=1,NY
             NR = J+(K-1)*NY
             CALL WRTLIN(LUNOUT,G(1,J,K),NX,NR)
	  ENDDO
	ENDDO

C       CLOSE OUTPUT FILE
9999    CLOSE(LUNOUT)

C       DEALLOCATE RUN-TIME MEMORY
        IF (ALLOCATED(COEFFS)) DEALLOCATE(COEFFS)
        IF (ALLOCATED(G))      DEALLOCATE(G)

	END	
@


1.32
log
@operation 'C' bug fixed
@
text
@d18 1
a18 1
C=* Email: spider@@wadsworth.org                                        *
@


1.31
log
@added 'FD C', nx, cosmetic
@
text
@d86 1
a86 1
        IF (FCHAR(4:4) == 'R') THEN
@


1.30
log
@GPL_2010
@
text
@d10 2
d16 1
a16 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d34 1
a34 1
C  FILTDOC(LUNINT,LUNOUT,NSAM,NROW,NSLICE)
d39 3
a41 3
C  PARAMETERS:   LUNINT         INPUT UNIT FOR IMAGE & DOC       (SENT)
C                LUNOUT         OUTPUT UNIT FOR IMAGE            (SENT)
C                NSAM,NROW & NSLICE                              (SENT)
d45 1
a45 1
	SUBROUTINE FILTDOC(LUNINT,LUNOUT,NSAM,NROW,NSLICE,IFORMIN)
d50 6
a55 4
        COMPLEX, ALLOCATABLE, DIMENSION(:,:,:) :: G
        REAL, ALLOCATABLE, DIMENSION(:)        :: COEFFS
        CHARACTER(LEN=MAXNAM)                  :: DOCFIL
        LOGICAL                                :: LDUM
d58 2
a59 2
        IF (IFORMIN .GT. 0) THEN
	   ISPACE = (NSAM + 2 - MOD(NSAM,2))/2
d61 1
a61 1
           ISPACE = NSAM
d64 2
a65 2
	NSLICE=MAX0(1,NSLICE)
        ALLOCATE (G(ISPACE,NROW,NSLICE), STAT=IRTFLG)
d72 4
a75 4
        DO K=1,NSLICE
           DO J=1,NROW
              NR = J+(K-1)*NROW
              CALL REDLIN(LUNINT,G(1,J,K),NSAM,NR)
d80 13
d94 2
a95 1
	LBS  = 0.75 * MAX0(ISPACE,NROW,NSLICE)
d97 2
a98 2
        IF (NSLICE .GT. 1) LBS  = 0.9 * MAX0(ISPACE,NROW,NSLICE)
        MAXX = 1
d101 1
a101 1
        ALLOCATE (COEFFS(MAXY), STAT=IRTFLG)
d103 2
a104 3
           CALL ERRT(46,'FILTDOC, COEFFS',NDUM)
           IF (ALLOCATED(G)) DEALLOCATE(G)
           RETURN
a106 2
         CALL OPENDOC(DOCFIL,.TRUE.,NLET,LUNINT,LUNIN,.TRUE.,'DOCUMENT',
     &            .TRUE.,.FALSE.,.TRUE.,LDUM,IRTFLG)
d112 4
a115 1
        IF (IRTFLG .EQ. 1) GOTO 9999
d117 1
a117 2
C       ZERO REMAINING COEFFS
	IF (NGOTY .LT. LBS) COEFFS(NGOTY+1:LBS) = 0.0
d120 1
a120 1
        IF (IFORMIN .GT. 0) THEN
d122 2
a123 2
 	   IF (NSLICE .LE. 1)  THEN
              CALL FMRS_2(G,NSAM,NROW,INV)
d125 1
a125 1
              CALL FMRS_3(G,NSAM,NROW,NSLICE,INV)
d130 1
a130 1
	DO K=1,NSLICE
d132 3
a134 2
           IF (IZ .GT. NSLICE/2)  IZ = IZ - NSLICE
	   DO J=1,NROW
d136 2
a137 1
              IF (IY .GT. NROW/2) IY = IY - NROW
d142 2
a143 1
	         FR       = (1.0-DD)*COEFFS(IR+1)+DD*COEFFS(IR+2)
d150 1
a150 1
        IF (IFORMIN .GT. 0) THEN
d152 2
a153 2
 	   IF (NSLICE.LE.1)  THEN
              CALL FMRS_2(G,NSAM,NROW,INV)
d155 1
a155 1
              CALL FMRS_3(G,NSAM,NROW,NSLICE,INV)
d159 4
a162 4
        DO K=1,NSLICE
          DO J=1,NROW
             NR = J+(K-1)*NROW
             CALL WRTLIN(LUNOUT,G(1,J,K),NSAM,NR)
a172 1
        RETURN
@


1.29
log
@GPL License fixed
@
text
@a10 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d12 5
a16 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d18 1
a18 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d23 1
a23 1
C=* This program is distributed in the hope that it will be useful,    *
d25 1
a25 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a26 1
C=*                                                                    *
d28 1
a28 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.28
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a10 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d14 1
a14 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a33 6

C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.27
log
@ngoty bug
@
text
@d2 1
d13 24
@


1.26
log
@fourier input and output enable
@
text
@d9 1
d82 1
a82 1
        CALL LUNDOCREDSEQ(LUNIN,COEFFS,MAXX,MAXY,MAXY,IRTFLG)
d87 1
a87 1
	IF (MAXY .LT. LBS) COEFFS(MAXY+1:LBS) = 0.0
@


1.25
log
@lundocredseq returns ngoty now
@
text
@d8 1
d29 1
a29 1
	SUBROUTINE FILTDOC(LUNINT,LUNOUT,NSAM,NROW,NSLICE)
d38 7
a44 2

	ISPACE = (NSAM + 2 - MOD(NSAM,2))/2
d88 9
a96 6
 	INV = +1
 	IF (NSLICE .LE. 1)  THEN
           CALL FMRS_2(G,NSAM,NROW,INV)
 	ELSE
           CALL FMRS_3(G,NSAM,NROW,NSLICE,INV)
	ENDIF
d115 9
a123 6
	INV = -1
 	IF (NSLICE.LE.1)  THEN
            CALL FMRS_2(G,NSAM,NROW,INV)
 	ELSE
            CALL FMRS_3(G,NSAM,NROW,NSLICE,INV)
	ENDIF
@


1.24
log
@opendoc incore parameter
@
text
@d75 1
a75 1
        CALL LUNDOCREDSEQ(LUNIN,COEFFS,MAXX,MAXY,.TRUE.,IRTFLG)
@


1.23
log
@incore opendoc
@
text
@d31 1
d34 3
a36 3
        REAL, ALLOCATABLE, DIMENSION(:) :: COEFFS
        CHARACTER(LEN=81)               :: DOCFIL
        LOGICAL                         :: LDUM
d51 1
a51 1
              CALL REDLIN(LUNIN,G(1,J,K),NSAM,NR)
d54 1
a54 1
        CLOSE(LUNIN)
d70 1
a70 2
        LUNIN = LUNINT
        CALL OPENDOC(DOCFIL,.TRUE.,NLET,LUNIN,.TRUE.,'DOCUMENT',
@


1.22
log
@error traps fixed
@
text
@d4 4
a7 3
C FILTDOC.F                            ALLOCATION MAY 2000 ARDEAN LEITH
C                              OPENDOC PARAMETERS DEC 2000 ARDEAN LEITH
C                       LUNDOCREDSEQ RETURNS MAXY APR 2003 ARDEAN LEITH
d17 1
a17 1
C  FILTDOC(LUNIN,LUNOUT,NSAM,NROW,NSLICE)
d22 1
a22 1
C  PARAMETERS:   LUNIN          INPUT UNIT FOR IMAGE & DOC       (SENT)
d28 1
a28 1
	SUBROUTINE FILTDOC(LUNIN,LUNOUT,NSAM,NROW,NSLICE)
d69 1
d76 1
a76 1
        CLOSE(LUNIN)
@


1.21
log
@G(I-1,J,K)   = G(I-1,J,K) * FR bug
@
text
@d4 11
a14 2
C FILTDOC.F                              ALLOCATION MAY 00 ARDEAN LEITH
C                             OPENDOC PARAMETERS  DEC 2000 ARDEAN LEITH
a15 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
d25 1
a25 1
C--*******************************************************************
d45 1
a45 1
C       LOAD IMAGE/VOLUME DATA
d49 1
a49 1
              CALL  REDLIN(LUNIN,G(1,J,K),NSAM,NR)
d70 1
a70 5
        IF (IRTFLG .NE. 0) THEN
C          DEALLOCATE RUN-TIME MEMORY
           IF (ALLOCATED(COEFFS)) DEALLOCATE(COEFFS)
           IF (ALLOCATED(G))      DEALLOCATE(G)
        ENDIF
a71 1

d75 1
a75 9

        IF (IRTFLG .EQ. 1) THEN
C          CLOSE OUTPUT FILE
           CLOSE(LUNOUT)

C          DEALLOCATE RUN-TIME MEMORY
           IF (ALLOCATED(COEFFS)) DEALLOCATE(COEFFS)
           IF (ALLOCATED(G))      DEALLOCATE(G)
        ENDIF
d82 1
a82 1
            CALL FMRS_2(G,NSAM,NROW,INV)
d84 1
a84 1
            CALL FMRS_3(G,NSAM,NROW,NSLICE,INV)
d119 1
a119 1
        CLOSE(LUNOUT)
@


1.20
log
@opendoc has prompt parameter now
@
text
@d108 5
a112 5
	         RR         = SQRT(FLOAT((I-1)**2 + IY*IY + IZ*IZ))
	         IR         = IFIX(RR)
	         DD         = RR - FLOAT(IR)
	         FR         = (1.0-DD)*COEFFS(IR+1)+DD*COEFFS(IR+2)
	         G(I-1,J,K) = G(I-1,J,K) * FR	
@


1.19
log
@can not use goto because of || loop
@
text
@d5 1
d68 1
a68 1
        CALL OPENDOC(DOCFIL,.TRUE.,NLET,LUNIN,.TRUE.,
@


1.18
log
@error return changed.
@
text
@d69 5
a73 1
        IF (IRTFLG .NE. 0) GOTO 9999
d75 1
d79 9
a87 1
        IF (IRTFLG .EQ. 1) GOTO 9999
d131 1
a131 1
9999    CLOSE(LUNOUT)
@


1.17
log
@more IR array related fixes
@
text
@d69 1
a69 5
        IF (IRTFLG .NE. 0) THEN
            IF (ALLOCATED(G))    DEALLOCATE(G)
            IF (ALLOCATED(COEFFS)) DEALLOCATE(COEFFS)
            RETURN
        ENDIF
d74 1
a74 5
        IF (IRTFLG .NE. 0) THEN
           IF (ALLOCATED(G))    DEALLOCATE(G)
           IF (ALLOCATED(COEFFS)) DEALLOCATE(COEFFS)
           RETURN
        ENDIF
d118 1
a118 1
        CLOSE(LUNOUT)
@


1.16
log
@*** empty log message ***
@
text
@d53 1
a53 1
C       LOAD COEFFS DATA USING SEQUENTIAL READ (-LUNIN)
d55 2
d102 5
a106 19
	         RR      = SQRT(FLOAT((I-1)**2 + IY*IY + IZ*IZ))
	         IR      = IFIX(RR)
	         DD      = RR - FLOAT(IR)

C the if statement is unnecessary....
                 IF (IR+2 .LE. LBS) THEN
	            FR      = (1.0-DD)*COEFFS(IR+1)+DD*COEFFS(IR+2)
                 ELSE
C                   ADDED TO PREVENT ACCESS BEYOND LENGTH OF COEFFS
C                   JUNE 2000 al. THIS IS A KLUGE TO KEEP IT RUNNING.  
C       if ((ir + 1) .le. 0 .or. (ir +1) .gt. lbs) then
C           write(6,*) 'bad ir zeroed: ',ir,i,j,k,lbs
C       endif
	         print  *,' should neve be here!!'

	            FR      = 0.0
                 ENDIF

	         G(I-1,J,K)   = G(I-1,J,K) * FR	
d130 1
a130 1
        IF (ALLOCATED(G))    DEALLOCATE(G)
@


1.15
log
@corrected
@
text
@d40 1
a40 1
           CALL ERRT(46,'FILTDOC, IMG',NDUM)
d77 1
a77 1
           IF (ALLOCATED(IMG))    DEALLOCATE(IMG)
@


1.14
log
@long time off-array acess bug fixed
@
text
@d15 1
a15 1
C  FILTDOC(LUNIN,LUNOUT,NSAM,NROW,NSLICE,MAXMEM)
a22 1
C                MAXMEM         UNUSED                           (SENT)
d26 1
a26 1
	SUBROUTINE FILTDOC(LUNIN,LUNOUT,NSAM,NROW,NSLICE,MAXMEM)
d30 2
a31 1
        REAL, ALLOCATABLE, DIMENSION(:) :: IMG,COEFFS
d35 1
a35 1
	ISPACE = NSAM + 2 - MOD(NSAM,2)
d37 2
a38 2
	MEMNEED = ISPACE * NROW * NSLICE
        ALLOCATE (IMG(MEMNEED), STAT=IRTFLG)
a44 1
        IB = 1
d48 1
a48 2
              CALL  REDLIN(LUNIN,IMG(IB),NSAM,NR)
              IB = IB + ISPACE
d61 1
a61 1
           IF (ALLOCATED(IMG)) DEALLOCATE(IMG)
d68 1
a68 1
            IF (ALLOCATED(IMG))    DEALLOCATE(IMG)
d83 1
a83 1
	IF (MAXY .LT. LBS) COEFFS(MAXY+1:LBS) = 0
d87 1
a87 1
            CALL FMRS_2(IMG,NSAM,NROW,INV)
d89 1
a89 1
            CALL FMRS_3(IMG,NSAM,NROW,NSLICE,INV)
d92 1
a92 1
c$omp   parallel do private(k,j,i,iz,iy,ix,ir,lb,rr,dd,fr)
d99 2
a100 3
	      DO I=1,ISPACE,2
	         IX      = (I-1) / 2
	         RR      = SQRT(FLOAT(IX*IX + IY*IY + IZ*IZ))
d104 1
d113 1
d118 1
a118 5
C	         IR      = JNINT(SQRT(FLOAT(IX*IX+IY*IY+IZ*IZ)))
	         LB      = I+((J-1)+(K-1)*NROW)*ISPACE

	         IMG(LB)   = IMG(LB) * FR	
	         IMG(LB+1) = IMG(LB+1) * FR	
d125 1
a125 1
            CALL FMRS_2(IMG,NSAM,NROW,INV)
d127 1
a127 1
            CALL FMRS_3(IMG,NSAM,NROW,NSLICE,INV)
a129 1
        IB=1
d133 1
a133 2
             CALL WRTLIN(LUNOUT,IMG(IB),NSAM,NR)
             IB = IB + ISPACE
d142 1
a142 1
        IF (ALLOCATED(IMG))    DEALLOCATE(IMG)
@


1.13
log
@removed debug output
@
text
@d106 13
a118 1
	         FR      = (1.0-DD)*COEFFS(IR+1)+DD*COEFFS(IR+2)
d121 1
@


1.12
log
@ir is 0...
@
text
@a104 3
         if (ir .lt. 1 .or. ir .ge. lbs) then
             write(6,*) 'bad ir: ',ir,i,j
         endif
a108 3
         if (LB .lt. 1 .or. LB .ge. memneed) then
             write(6,*) 'bad LB: ',LB,i,j
         endif
@


1.11
log
@branch into || region removed.
@
text
@d56 3
a58 1
	LBS    = 0.75 * MAX0(ISPACE,NROW,NSLICE)
d60 1
a60 1
        ALLOCATE (COEFFS(LBS), STAT=IRTFLG)
d76 2
a77 3
        MAXX = 1
        MAXY = MAX0(ISPACE,NROW,NSLICE)
        CALL  LUNDOCREDSEQ(LUNIN,COEFFS,MAXX,MAXY,.TRUE.,IRTFLG)
d105 3
d109 1
a109 1
	         FR      = (1.0-DD)*COEFFS(IR)+DD*COEFFS(IR+1)
d112 3
@


1.10
log
@bug in maxyt if not full line of coeffs fixed
@
text
@d61 2
a62 1
           GOTO 9999
d67 5
a71 1
        IF (IRTFLG .NE. 0) GOTO 9999
d77 5
a81 1
        IF (IRTFLG .NE. 0) GOTO 9999
d135 1
a135 1
9999    IF (ALLOCATED(IMG))    DEALLOCATE(IMG)
@


1.9
log
@allocation changed & used getdocdat
@
text
@d4 1
a4 1
C FILTDOC.F                   ALLOCATION & GETDOCDAT MAY 00 ARDEAN LEITH
a29 1
        INCLUDE 'CMLIMIT.INC'
d31 1
a31 6
        COMMON /IOBUF/ BUF(NBUFSIZ)

        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:,:), POINTER :: COEFFS

        REAL, ALLOCATABLE, DIMENSION(:) :: IMG
d33 1
d35 1
a35 1
	ISPACE = NSAM+2 - MOD(NSAM,2)
d45 1
a45 1
        IB     = 1
d57 16
a72 5
        MAXY   = MAX0(ISPACE,NROW,NSLICE)
        MAXX   = 1
        CALL GETDOCDAT('FILTER DOCUMENT', .TRUE.,DOCFIL,-LUNIN,
     &         .TRUE.,MAXX, MAXY,COEFFS,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN
d75 1
a75 1
	IF (MAXY .LT. LBS)  COEFFS(1,MAXY+1:LBS) = 0
d96 1
a96 1
	         FR      = (1.0-DD)*COEFFS(1,IR)+DD*COEFFS(1,IR+1)
d125 2
a126 2
        IF (ALLOCATED(IMG))     DEALLOCATE(IMG)
        IF (ASSOCIATED(COEFFS)) DEALLOCATE(COEFFS)
@


1.8
log
@SP_F90 removed
.SP_F90 removed
@
text
@d4 1
a4 1
C FILTDOC.FOR
d15 1
d17 8
d26 3
a28 2
C
	SUBROUTINE  FILTDOC(LUN1,LUN2,NSAM,NROW,NSLICE,MAXMEM)
d30 3
a32 1
        COMMON       BUF(1)
d35 4
a38 2
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: Q
d40 27
a66 13
        LOGICAL      RUNTIME
	CHARACTER*80  FINDOC
	CHARACTER*1 NULL
	ISPACE=NSAM+2-MOD(NSAM,2)
	LBS=0.75*MAX0(ISPACE,NROW,NSLICE)
	MEMNEED=ISPACE*NROW*NSLICE+LBS
	CALL CHKMEM(MEMNEED,BUF,MAXMEM,RUNTIME,IPQ,IRTFLG)
        IF(IRTFLG.NE.0)  THEN
          CALL ERRT(6,'FD',NE)
          CLOSE(LUN1)
          CLOSE(LUN2)
	  RETURN
	ENDIF
d68 2
a69 1
         Q = >IPQ
d71 3
a73 32
          IB=1
          DO    K=1,NSLICE
          DO    J=1,NROW
          NR=J+(K-1)*NROW
          CALL  REDLIN(LUN1,Q(IB),NSAM,NR)
          IB=IB+ISPACE
	  ENDDO
	  ENDDO
          CLOSE(LUN1)
C
	NULL=CHAR(0)
	IRTFLG=0
        CALL  FILERD(FINDOC,NLETI,NULL,'Filter doc',IRTFLG)
	LBD=ISPACE*NROW*NSLICE+1
         K=-1
         K2=1
         NAC=0
801	LERR=-1
	K=K+1
	KP1=K+1
	IF(K.GT.LBS) GOTO  802
         CALL  UNSAV(FINDOC,K,LUN1,KP1,Q(LBD+K),1,LERR,K2)
	IF(LERR.EQ.0)  GOTO 801
802	CLOSE(LUN1)
	IF(K-1.LT.LBS)  THEN
	DO   I=K-1,LBS
	Q(LBD+K)=0.0
	ENDDO
	ENDIF
 	INV=+1
 	IF(NSLICE.LE.1)  THEN
            CALL  FMRS_2(Q(1),NSAM,NROW,INV)
d75 1
a75 1
            CALL  FMRS_3(Q(1),NSAM,NROW,NSLICE,INV)
d77 20
a96 18
C
c$omp parallel do private(k,j,i,iz,iy,ix,ir,lb,rr,dd,fr)
	DO    K=1,NSLICE
        IZ=K-1
        IF(IZ.GT.NSLICE/2)  IZ=IZ-NSLICE
	DO    J=1,NROW
        IY=J-1
        IF(IY.GT.NROW/2)  IY=IY-NROW
	DO    I=1,ISPACE,2
	IX=(I-1)/2
	RR=SQRT(FLOAT(IX*IX+IY*IY+IZ*IZ))
	IR=IFIX(RR)
	DD=RR-FLOAT(IR)
	FR=(1.0-DD)*Q(IR+LBD)+DD*Q(IR+LBD+1)
C	IR=JNINT(SQRT(FLOAT(IX*IX+IY*IY+IZ*IZ)))+LBD
	LB=I+((J-1)+(K-1)*NROW)*ISPACE
	Q(LB)=Q(LB)*FR	
	Q(LB+1)=Q(LB+1)*FR	
d98 4
a101 6
	ENDDO
	ENDDO
C
	INV=-1
 	IF(NSLICE.LE.1)  THEN
            CALL  FMRS_2(Q(1),NSAM,NROW,INV)
d103 1
a103 1
            CALL  FMRS_3(Q(1),NSAM,NROW,NSLICE,INV)
d105 7
a111 6
          IB=1
          DO    K=1,NSLICE
          DO    J=1,NROW
          NR=J+(K-1)*NROW
          CALL  WRTLIN(LUN2,Q(IB),NSAM,NR)
          IB=IB+ISPACE
d113 10
a122 3
	  ENDDO
          CLOSE(LUN2)
	IF(RUNTIME)     CALL ALLOCIT(0,RUNTIME,IPQ,'FD',IRTFLG)
@


1.7
log
@OpenMP
@
text
@d21 1
a21 1
#ifdef SP_F90
d25 1
a25 4
#else
        DIMENSION    Q(1)
        POINTER      (IPQ,Q) 
#endif
d39 1
a39 1
#ifdef SP_F90
a40 1
#endif
@


1.6
log
@*** empty log message ***
@
text
@d82 1
a82 1
c$doacross local(k,j,i,iz,iy,ix,ir,lb,rr,dd,fr)
@


1.5
log
@f90 alloc
@
text
@a24 1

a31 2
CNO_SAVE
	NULL=CHAR(0)
d56 2
d77 1
a77 1
            CALL  FMRS_2(Q,NSAM,NROW,INV)
d79 1
a79 1
            CALL  FMRS_3(Q,NSAM,NROW,NSLICE,INV)
d105 1
a105 1
            CALL  FMRS_2(Q,NSAM,NROW,INV)
d107 1
a107 1
            CALL  FMRS_3(Q,NSAM,NROW,NSLICE,INV)
@


1.4
log
@*** empty log message ***
@
text
@d21 6
d29 1
d45 4
@


1.3
log
@line interpolated
@
text
@d39 2
a40 2
          DO  1  K=1,NSLICE
          DO  1  J=1,NROW
d43 3
a45 1
1         IB=IB+ISPACE
d61 3
a63 2
	DO  803  I=K-1,LBS
803	Q(LBD+K)=0.0
d73 1
a73 1
	DO  21  K=1,NSLICE
d76 1
a76 1
	DO  21  J=1,NROW
d79 1
a79 1
	DO  21  I=1,ISPACE,2
d88 4
a91 1
21	Q(LB+1)=Q(LB+1)*FR	
d100 2
a101 2
          DO  2  K=1,NSLICE
          DO  2  J=1,NROW
d104 3
a106 1
2         IB=IB+ISPACE
@


1.2
log
@probably OK.
@
text
@d69 1
a69 1
c$doacross local(k,j,i,iz,iy,ix,ir,lb)
d78 5
a82 1
	IR=JNINT(SQRT(FLOAT(IX*IX+IY*IY+IZ*IZ)))+LBD
d84 2
a85 2
	Q(LB)=Q(LB)*Q(IR)	
21	Q(LB+1)=Q(LB+1)*Q(IR)	
@


1.1
log
@Initial revision
@
text
@d25 3
d46 1
d53 1
d61 1
d69 1
a69 1
c$doacross,local(k,j,i,iz,iy,ix,ir,lb)
d78 1
a78 1
	IR=JNINT(SQRT(FLOAT(IX*IX+IY*IY+IZ*IZ))+LBD
d93 1
a93 1
          CALL  WRTLIN(LUN1,Q(IB),NSAM,NR)
@
