head	1.32;
access;
symbols
	pre_mrcs:1.32
	healthdept_2018:1.32
	pre_getangas:1.11
	GPL2010:1.11
	pre_GPL2010:1.10
	pre_var_equation:1.10
	pre_fftwrings:1.10
	pre_opfiles:1.10
	src:1.10
	best-code:1.10
	x-named-regs:1.10
	x:1.10
	v13-00:1.10
	pre_GPL:1.8
	prec_CA:1.8
	noindx:1.7;
locks; strict;
comment	@c @;


1.32
date	2018.10.03.14.51.08;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2015.11.23.18.34.49;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2015.11.19.15.51.47;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2015.11.19.15.33.03;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2015.11.18.16.20.46;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2015.11.18.16.04.31;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2015.11.18.15.49.39;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2015.11.17.18.08.39;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2015.11.12.19.41.58;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2015.11.12.19.41.16;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2015.11.10.16.27.44;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2015.11.09.20.45.53;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2015.11.04.17.26.09;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2015.11.04.16.56.27;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2015.11.04.16.25.33;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2015.10.29.17.04.17;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2015.10.20.15.18.39;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2015.10.14.16.22.29;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2015.10.14.16.01.00;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2015.10.14.16.00.33;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2013.01.07.15.21.32;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2010.06.24.13.27.08;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.17.20.00.46;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.17.17.56.36;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.04.18.44.16;	author bbaxter;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.11.14.07.48;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.03.16.56.17;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.03.16.45.55;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.18.23.48.22;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.17.15.13.11;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.09.16.17.08;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	2001.08.09.16.15.04;	author pawel;	state Exp;
branches;
next	;


desc
@TF L
@


1.32
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C TRAFL.F
C           ADDED 'TF L FLIP'                      OCT 15 ArDean Leith                           
C           REWORKED 'TF L FLIP'                   NOV 15 ArDean Leith                           
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2015  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software! you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation! either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY! without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C***********************************************************************
C
C  TRAFL
C
C  PURPOSE: GENERATE THE PHASE CONTRAST TRANSFER FUNCTION  FOR
C           BRIGHT-FIELD ELECTRON MICROSCOPY. THIS OPERATION WRITES 
C           THE 1-DIMENSIONAL TRANSFER FUNCTION (OR ITS SQUARE,
C           THE ENVELOPE FUNCTION) IN REAL, DISPLAYABLE FORM TO 
C           A DOCUMENT FILE.
C
C  TRAFL_LIS
C  PURPOSE:  'TF LIS' WHICH CREATES A DOC FILE CONTAINING: 
C             RADII, STRAIGHT CTF, NEGATIVE STRAIGHT CTF,
C             PHASE FLIPPING CTF, TRAPPED-CTF, CTF ENVELOPE FUNCTION, 
C             AND DIFFRACTOGRAM  COLUMNS.
C             THE DOC FILE CAN BE USED BY 'FD C'  FOR CTF CORRECTION
C             DO NOT USE FLIPPED CTF WITH 'FD C'
C                 
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

       SUBROUTINE TRAFL

       IMPLICIT NONE
       INCLUDE 'CMBLOCK.INC'
       INCLUDE 'CMLIMIT.INC'

       CHARACTER             :: ANS
       REAL                  :: LAMBDA,FMAXSPFREQ

       INTEGER               :: NOT_USED,NX,NY
       REAL                  :: CS,FVAL,PIXSIZ
       REAL                  :: DZ,Q,DS,FDUM,ACR,GEH,SIGN,SC,AK,B
       INTEGER               :: NDIM,IRTFLG,NCHAR,NLET,LUNDOCNO,IE,NS1
       INTEGER               :: K,IKEY

       CHARACTER(LEN=MAXNAM) :: DOCNAM
       REAL                  :: DLIST(3)
       CHARACTER(LEN=80)     :: COMMENT
          
       LOGICAL               :: ADDEXT,GETNAME,ISOLD
       LOGICAL               :: APPEND,MESSAGE,NEWFILE
       LOGICAL               :: WANT_AST,WANT_GEH,WANT_SIGN
       LOGICAL               :: WANT_SPFREQ,WANT_PIXSIZ

       CHARACTER             :: NULL = CHAR(0)

       INTEGER, PARAMETER    :: LUNDOC = 81


       IF (FCHAR(5:5) == 'I') THEN    
          CALL TRAFL_LIS
          RETURN
       ENDIF

C      GET COMMON TF INPUTS
       NDIM        =  1         ! SQUARE ONLY
       WANT_AST    = .FALSE.    ! DO NOT ASK FOR ASTIG
       WANT_GEH    = .TRUE.     ! ASK FOR GEH
       WANT_SIGN   = .FALSE.    ! DO NOT ASK FOR SIGN
       WANT_SPFREQ = .TRUE.     ! ASK FOR SPFREQ
       WANT_PIXSIZ = .FALSE.    ! DO NOT ASK FOR PIXEL SIZE

       CALL GET_TF_INPUT(CS,DZ,LAMBDA,
     &                   NDIM, NX,NY,
     &                   WANT_SPFREQ,FMAXSPFREQ,
     &                   WANT_PIXSIZ,PIXSIZ,
     &                   Q,DS,
     &                   WANT_AST,  FDUM,FDUM,
     &                   WANT_GEH,  ACR,GEH,   
     &                   WANT_SIGN, FDUM,
     &                   IRTFLG)   

       CALL RDPRMC(ANS,NCHAR,.TRUE.,
     &       'DIFFRACTOGRAM, ENVELOPE, OR STRAIGHT (D/E/S)',
     &        NULL,IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

C      OPEN OUTPUT DOC FILE
       ADDEXT  = .TRUE.
       GETNAME = .TRUE.
       ISOLD   = .FALSE.
       APPEND  = .FALSE.
       MESSAGE = .TRUE.
       IRTFLG  = -8         ! NO IC USE

       CALL OPENDOC(DOCNAM,ADDEXT,NLET,LUNDOC,LUNDOCNO,GETNAME,
     &           'OUTPUT DOC FILE',ISOLD,APPEND,MESSAGE,
     &            NEWFILE,IRTFLG)

C                   123456789 123456789 123456789 123456789 123456789 123456789 
       COMMENT =   '      TRANSFER'    

       CALL LUNDOCPUTCOM(LUNDOCNO,COMMENT(1:38),IRTFLG)

       IF (ANS == 'D') THEN
          COMMENT ='    DIFFRACTOGRAM    RAD(1/PIX}'
       ELSEIF  (ANS == 'C') THEN    
          COMMENT ='        ENVELOPE     RAD(1/PIX}'    
       ELSEIF  (ANS == 'S') THEN    
          COMMENT ='      STRAIGHT       RAD(1/PIX}'
       ENDIF    
       CALL LUNDOCPUTCOM(LUNDOCNO,COMMENT(1:34),IRTFLG)

       IE  = 0
       IF (ANS == 'E') IE = 1

       GEH = 1.0 / GEH**2
       SC  = FMAXSPFREQ / FLOAT(NX / 2)

       ACR = ATAN(ACR / (1.0 - ACR))
       CS  = CS * 1.E7
       NS1 = NX / 2 + 1

       DO K=NS1,NX+1

          AK = (NS1 - K) * SC
          CALL TFD(B,CS,DZ,LAMBDA,Q,DS,IE,AK,ACR,GEH)

          IF (ANS .NE. 'S') B = B * B   ! ENVELOPE OR DIFFRACTOGRAM

          IKEY     = K - NS1 + 1
          DLIST(1) = B
          DLIST(2) = REAL(K - NS1) / NX

C         WRITE TO CTF DOC
          CALL LUNDOCWRTDAT(LUNDOCNO,IKEY,DLIST,2,IRTFLG)
       ENDDO

       CLOSE(LUNDOC)

       END


C      ------------------- TRAFL_LIS -----------------------------


       SUBROUTINE TRAFL_LIS

       IMPLICIT NONE
       INCLUDE 'CMBLOCK.INC'
       INCLUDE 'CMLIMIT.INC'

       CHARACTER(LEN=1)      :: ANS
       CHARACTER(LEN=1)      :: NULL = CHAR(0)
       CHARACTER(LEN=130)    :: COMMENT
       REAL                  :: LAMBDA,FMAXSPFREQ

       REAL, ALLOCATABLE     :: DLIST(:,:)
       REAL                  :: DLIST1(3)
          
       CHARACTER(LEN=MAXNAM) :: DOCNAM
       INTEGER,PARAMETER     :: LUNDOC = 81

       LOGICAL               :: ADDEXT,GETNAME,ISOLD
       LOGICAL               :: APPEND,MESSAGE,NEWFILE
       LOGICAL               :: WANT_AST,WANT_GEH,WANT_SIGN
       LOGICAL               :: WANT_SPFREQ,WANT_PIXSIZ
 
       INTEGER               :: NOT_USED,IRTFLG,NCHAR,NX,NS1,IKEY
       INTEGER               :: NUM_BINS,K,IRAD,NLET,LUNDOCNO,NDIM,NY
       REAL                  :: CS,DZ,Q,DS,ACR, B_ENV,RAD_ANGST
       REAL                  :: GEH,SP_PIXSIZ,SC,AK,B_STR,RAD_PX
       REAL                  :: PREV_CTF,FIRST_MIN,FIRST_ZERO
       REAL                  :: FIRSTMIN_RAD,FIRSTZERO_RAD,CURR_CTF
       REAL                  :: STRAIGHT_CTF,STRAIGHT_CTF_NEG
       REAL                  :: TRAPPED_CTF,FLIPPED_CTF,FLIPPED_CTF_TRI 
       REAL                  :: FDUM,SIGN,FVAL,FKEV,PIXSIZ

C      OPEN OUTPUT DOC FILE  (first for campatibility with 'TF C' ops
       ADDEXT  = .TRUE.
       GETNAME = .TRUE.
       ISOLD   = .FALSE.
       APPEND  = .FALSE.
       MESSAGE = .TRUE.
       IRTFLG  = -8         ! NO IC USE

       CALL OPENDOC(DOCNAM,ADDEXT,NLET,LUNDOC,LUNDOCNO,GETNAME,
     &           'OUTPUT DOC FILE',ISOLD,APPEND,MESSAGE,
     &            NEWFILE,IRTFLG)
       IF (IRTFLG .NE. 0) RETURN
C      GET COMMON TF INPUTS
       NDIM        =  1         ! SQUARE ONLY
       WANT_AST    = .FALSE.    ! DO NOT ASK FOR ASTIG
       WANT_GEH    = .TRUE.     ! ASK FOR GEH
       WANT_SIGN   = .FALSE.    ! DO NOT ASK FOR SIGN
       WANT_SPFREQ = .FALSE.    ! DO NOT ASK FOR SPFREQ
       WANT_PIXSIZ = .TRUE.     ! ASK FOR PIXEL SIZE

       CALL GET_TF_INPUT(CS,DZ,LAMBDA,
     &                NDIM, NX, NY,
     &                WANT_SPFREQ,FMAXSPFREQ,
     &                WANT_PIXSIZ,PIXSIZ,
     &                Q, DS,
     &                WANT_AST, FDUM, FDUM,
     &                WANT_GEH, ACR, GEH,
     &                WANT_SIGN, FDUM,
     &                IRTFLG) 


       IF (IRTFLG .NE. 0) RETURN

C      GET NUMBER OF FOURIER BINS
       NS1 = NX / 2 + 1
       NUM_BINS = NX - NS1 + 2

       ALLOCATE (DLIST(9,NUM_BINS), STAT=IRTFLG)
       IF (IRTFLG .NE. 0) THEN
          CALL ERRT(46,'DLIST',9*NUM_BINS)
          RETURN
       ENDIF

       IF (GEH .NE. 0) GEH = 1.0 / GEH**2
       SC  = FMAXSPFREQ / FLOAT(NX / 2)

       ACR = ATAN(ACR / (1.0 - ACR))
       CS  = CS * 1.E7

       DO K=NS1,NX+1

          AK = (NS1 - K) * SC
          CALL TFD_PLUS(B_STR,CS,DZ,LAMBDA,Q,DS,AK,ACR,GEH, B_ENV)

          IKEY          = K - NS1 + 1

          RAD_PX        = REAL(K-NS1) / NX   ! RAD_PX 
          DLIST(1,IKEY) = RAD_PX             ! RAD_PX

          RAD_ANGST     = RAD_PX / PIXSIZ 
          DLIST(2,IKEY) = RAD_ANGST

          DLIST(3,IKEY) = B_STR           ! STRAIGHT = RAW

          DLIST(7,IKEY) = B_ENV * B_ENV   ! ENVELOPE 

          DLIST(8,IKEY) = B_STR * B_STR   ! DIFFRACTOGRAM

       ENDDO

       !write(6,*) ' filled bins: ',ns1,'...',nx+1,'  numbins:',NUM_BINS

C      INITIALIZE FIRST MIN, ABSOLUTE MIN  FROM STRAIGHT CTF
       PREV_CTF   = DLIST(3,1)

       FIRST_MIN  = -1       ! RADIUS FOR FIRST MIN (PIXELS)
       FIRST_ZERO = -1       ! FIRST ZERO RADIUS (A)

C      LOOP THROUGH FOURIER RADII TO FIND FIRST MINIMUM, FIRST ZERO
       DO IRAD=2,NUM_BINS       

          CURR_CTF  = DLIST(3,IRAD)
          RAD_PX    = DLIST(1,IRAD)         

C         CHECK FOR FIRST LOCAL MIN
          IF ( FIRST_MIN < 0 ) THEN
             IF ( CURR_CTF  > PREV_CTF ) THEN
                FIRST_MIN    = IRAD - 1     ! RADIUS TO END TRAP 
                FIRSTMIN_RAD = PIXSIZ / RAD_PX
             ENDIF
          ENDIF

C         FIND FIRST ZERO
          IF ( FIRST_ZERO  < 0 ) THEN
C            LOOK FOR WHEN CTF CROSSES ORIGIN
             IF ( (CURR_CTF * PREV_CTF) <= 0 ) THEN
                FIRST_ZERO    = IRAD
                FIRSTZERO_RAD = PIXSIZ / RAD_PX
             ENDIF
          ENDIF

          PREV_CTF = CURR_CTF    ! NEW, PREVIOUS CTF VALUE==CURRENT CTF 
       ENDDO                     ! END RADIUS-LOOP


C      WRITE RADII (IN ANGSTROMS) TO DOC FILE COMMENT KEY
C      NOTE: IT WOULD BE MORE ACCURATE TO INTERPOLATE, BI-LINEARLY 
C      PERHAPS, SO THESE VALUES WILL BE ON AVERAGE 1/2 FOURIER PIXEL OFF

C            123456789 123456789 123456789 123456789 123456789 123456789 
       COMMENT=
     &   '            DEFOCUS  RAD_FIRST_MIN(PIX)  RAD_FIRST_ZERO(PIX)'
       CALL LUNDOCPUTCOM(LUNDOCNO,COMMENT(1:60),IRTFLG)
       DLIST1(1) = DZ 
       DLIST1(2) = FIRST_MIN 
       DLIST1(3) = FIRST_ZERO 
       CALL LUNDOCWRTDAT(LUNDOCNO,-998,DLIST1,3,IRTFLG)

       COMMENT = ' ------------------- '
       CALL LUNDOCPUTCOM(LUNDOCNO,COMMENT(1:20),IRTFLG)
C            123456789 123456789 123456789 123456789 123456789 123456789 
       COMMENT=
     &       '            DEFOCUS  RAD_FIRST_MIN(A)  RAD_FIRST_ZERO(A)'
       CALL LUNDOCPUTCOM(LUNDOCNO,COMMENT(1:60),IRTFLG)

       DLIST1(1) = DZ 
       DLIST1(2) = FIRSTMIN_RAD 
       DLIST1(3) = FIRSTZERO_RAD 
       CALL LUNDOCWRTDAT(LUNDOCNO,-999,DLIST1,3,IRTFLG)
       COMMENT = ' ------------------- '
       CALL LUNDOCPUTCOM(LUNDOCNO,COMMENT(1:20),IRTFLG)

C                123456789 123456789 123456789 123456789 123456789 123456789 
       COMMENT = '  TRANSFER: '
       CALL LUNDOCPUTCOM(LUNDOCNO,COMMENT(1:16),IRTFLG)

       COMMENT = '       RAD(1/PIX),    RAD(1/A),  STRAIGHT,' // 
     &           '     -STRAIGHT,      FLIPPED,      TRAPPED,'   //   
     &           '     ENVELOPE,    DIFFRACTOGRAM'

       CALL LUNDOCPUTCOM(LUNDOCNO,COMMENT(1:126),IRTFLG)

C      LOOP THROUGH FOURIER RADII
       DO IRAD=1,NUM_BINS       

        ! GET ORIGINAL VALUES
        RAD_PX       = DLIST(1,IRAD)
        STRAIGHT_CTF = DLIST(3,IRAD)        ! STRAIGHT = RAW CTF VALUE

        ! STRAIGHT_CTF_NEG HAS NEGATIVE SIGN FOR UNDERFOCUS CONTRAST REVERSAL?
        STRAIGHT_CTF_NEG = -STRAIGHT_CTF     

        IF ( IRAD < FIRST_MIN ) THEN
           TRAPPED_CTF = 1
        ELSE
           TRAPPED_CTF = STRAIGHT_CTF_NEG  ! FOR TRAPPED CTF  
        ENDIF

C       FOR PHASE FLIPPING, GIVES BINARY CTF
        IF (STRAIGHT_CTF_NEG >= 0.0) THEN
            FLIPPED_CTF =  1.0
        ELSE
            FLIPPED_CTF = -1.0
        ENDIF

!C      FOR PHASE FLIPPING, GIVES TRINARY CTF
!       IF ( STRAIGHT_CTF_NEG == 0 ) THEN
!          FLIPPED_CTF_TRI = 0
!       ELSE 
!          FLIPPED_CTF_TRI = ABS( STRAIGHT_CTF_NEG ) / STRAIGHT_CTF_NEG 
!       ENDIF

       !DLIST(1,IRAD) = RAD(1/PIX)          ! ALREADY SET
       !DLIST(2,IRAD) = RAD(1/A)            ! ALREADY SET
       !DLIST(8,IRAD) = STRAIGHT_CTF        ! ALREADY SET
        DLIST(4,IRAD) = STRAIGHT_CTF_NEG 

        DLIST(5,IRAD) = FLIPPED_CTF 
        DLIST(6,IRAD) = TRAPPED_CTF 

       !DLIST(7,IRAD) = ENVELOPE            ! ALREADY SET
       !DLIST(8,IRAD) = DIFFRACTOGRAM       ! ALREADY SET 
       !DLIST(9,IRAD) = FLIPPED_CTF_TRI     ! ABANDONED 
  
C       WRITE TO CTF DOC FILE
        CALL LUNDOCWRTDAT(LUNDOCNO,IRAD,DLIST(1,IRAD),8,IRTFLG)

      ENDDO

      CALL REG_SET_NSEL(1,2,FIRSTMIN_RAD,FIRSTZERO_RAD,
     &                  0.0,0.0,0.0,IRTFLG)

C     CLOSE DOCUMENT FILE
      CLOSE(LUNDOC)

      IF (ALLOCATED(DLIST))   DEALLOCATE(DLIST)

      END

@


1.31
log
@removed debug output
@
text
@d14 1
a14 1
C=* Email: spider@@wadsworth.org                                        *
@


1.30
log
@formatting
bad -neg value
@
text
@d38 1
a38 1
C  TRAFL_FLIP
d59 1
a59 1
       REAL                  :: CS,FVAL
d71 1
d79 1
a79 1
          CALL TRAFL_FLIP
d84 6
a89 4
       NDIM      =  1         ! SQUARE ONLY
       WANT_AST  = .FALSE.    ! DO NOT ASK FOR ASTIG
       WANT_GEH  = .TRUE.     ! ASK FOR GEH
       WANT_SIGN = .FALSE.    ! DO NOT ASK FOR SIGN
d93 2
a94 1
     &                   FMAXSPFREQ,
d162 1
a162 1
C      ------------------- TRAFL_FLIP -----------------------------
d165 1
a165 1
       SUBROUTINE TRAFL_FLIP
d185 1
d191 1
a191 1
       REAL                  :: PREV_CTF,FIRST_MIN
d195 1
a195 1
       REAL                  :: FDUM,SIGN,FVAL,FKEV
d210 6
a215 4
       NDIM      =  1         ! SQUARE ONLY
       WANT_AST  = .FALSE.    ! DO NOT ASK FOR ASTIG
       WANT_GEH  = .TRUE.     ! ASK FOR GEH
       WANT_SIGN = .FALSE.    ! DO NOT ASK FOR SIGN
d219 2
a220 1
     &                FMAXSPFREQ,
a226 1
       IF (IRTFLG .NE. 0) RETURN
a227 1
       CALL RDPRM1S(SP_PIXSIZ,NOT_USED, 'PIXEL SIZE [A]', IRTFLG)
a229 1

d256 1
a256 1
          RAD_ANGST     = RAD_PX / SP_PIXSIZ 
d270 1
a270 1
       PREV_CTF      = DLIST(1,1)
d272 2
a273 3
       FIRST_MIN     =  1       ! RADIUS FOR FIRST MIN (PIXELS)
       FIRSTMIN_RAD  = -1       ! INITIALIZE FIRST MIN RADIUS (A)
       FIRSTZERO_RAD = -1       ! FIRST ZERO RADIUS (A)
d278 1
a278 1
          CURR_CTF  = DLIST(8,IRAD)
d282 1
a282 1
          IF ( FIRSTMIN_RAD < 0 ) THEN
d285 1
a285 1
                FIRSTMIN_RAD = SP_PIXSIZ / RAD_PX
d290 1
a290 1
          IF ( FIRSTZERO_RAD < 0 ) THEN
d292 4
a295 2
             IF ( (CURR_CTF * PREV_CTF) <= 0 ) 
     &          FIRSTZERO_RAD = SP_PIXSIZ / RAD_PX
d308 11
d321 1
@


1.29
log
@changed 'TF LIS' doc file cols.
@
text
@d115 1
a115 1
       COMMENT =   '         TRANSFER'    
d316 2
a317 2
     &           '         -STRAIGHT,   FLIPPED,  TRAPPED,'   //   
     &           '          ENVELOPE,   DIFFRACTOGRAM'
d326 1
a326 1
        STRAIGHT_CTF = DLIST(8,IRAD)        ! STRAIGHT = RAW CTF VALUE
@


1.28
log
@ask for output first then parameters
@
text
@d39 1
a39 1
C  PURPOSE:  'TF L FLIP' WHICH CREATES A DOC FILE CONTAINING: 
d44 1
d77 1
a77 1
       IF (FCHAR(6:6) == 'F') THEN    
d254 1
a254 1
          DLIST(6,IKEY) = B_ENV * B_ENV   ! ENVELOPE 
d256 3
a258 1
          DLIST(7,IKEY) = B_STR * B_STR   ! DIFFRACTOGRAM
a259 1
          DLIST(8,IKEY) = B_STR           ! STRAIGHT = RAW
d315 3
a317 3
       COMMENT = '       RAD(1/PIX),    RAD(1/A),  -STRAIGHT,' // 
     &           '          FLIPPED,  TRAPPED,     ENVELOPE,'  // 
     &           '    DIFFRACTOGRAM,  STRAIGHT'
d353 2
a354 1
        DLIST(3,IRAD) = STRAIGHT_CTF_NEG 
d356 2
a357 2
        DLIST(4,IRAD) = FLIPPED_CTF 
        DLIST(5,IRAD) = TRAPPED_CTF 
d359 2
a360 3
       !DLIST(6,IRAD) = ENVELOPE            ! ALREADY SET
       !DLIST(7,IRAD) = DIFFRACTOGRAM       ! ALREADY SET 
       !DLIST(8,IRAD) = STRAIGHT_CTF        ! ALREADY SET
@


1.27
log
@typo
@
text
@d93 1
a93 1
     &                   WANT_SIGN, SIGN,
d191 12
d215 1
a215 1
     &                WANT_SIGN, SIGN,
a220 13
       IF (IRTFLG .NE. 0) RETURN

C      OPEN OUTPUT DOC FILE
       ADDEXT  = .TRUE.
       GETNAME = .TRUE.
       ISOLD   = .FALSE.
       APPEND  = .FALSE.
       MESSAGE = .TRUE.
       IRTFLG  = -8         ! NO IC USE

       CALL OPENDOC(DOCNAM,ADDEXT,NLET,LUNDOC,LUNDOCNO,GETNAME,
     &           'OUTPUT DOC FILE',ISOLD,APPEND,MESSAGE,
     &            NEWFILE,IRTFLG)
@


1.26
log
@removed flip_tri  output
@
text
@d360 1
a360 1
       !DLIST(9,IRAD) = FLIPPED_CTF__TRI    ! ABANDONED 
@


1.25
log
@added flipped_ctf_bin, variable name changes
@
text
@d188 1
a188 1
       REAL                  :: TRAPPED_CTF,FLIPPED_CTF,FLIPPED_CTF_BIN 
d211 14
a293 11
C      OPEN OUTPUT DOC FILE
       ADDEXT  = .TRUE.
       GETNAME = .TRUE.
       ISOLD   = .FALSE.
       APPEND  = .FALSE.
       MESSAGE = .TRUE.
       IRTFLG  = -8         ! NO IC USE

       CALL OPENDOC(DOCNAM,ADDEXT,NLET,LUNDOC,LUNDOCNO,GETNAME,
     &           'OUTPUT DOC FILE',ISOLD,APPEND,MESSAGE,
     &            NEWFILE,IRTFLG)
d315 2
a316 2
     &           '      FLIPPED,      TRAPPED,     ENVELOPE,'  // 
     &           '    DIFFRACTOGRAM,  STRAIGHT,   FLIPPED-BIN'
a335 7
C       FOR PHASE FLIPPING, GIVES TRINARY CTF
        IF ( STRAIGHT_CTF_NEG == 0 ) THEN
           FLIPPED_CTF = 0
        ELSE 
           FLIPPED_CTF = ABS( STRAIGHT_CTF_NEG ) / STRAIGHT_CTF_NEG 
        ENDIF

d338 1
a338 1
            FLIPPED_CTF_BIN =  1.0
d340 1
a340 1
            FLIPPED_CTF_BIN = -1.0
d343 7
d360 1
a360 1
        DLIST(9,IRAD) = FLIPPED_CTF_BIN 
d363 1
a363 1
        CALL LUNDOCWRTDAT(LUNDOCNO,IRAD,DLIST(1,IRAD),9,IRTFLG)
@


1.24
log
@renamed some variables, split out kev_or_lambda
@
text
@d38 7
a44 4
C           ADDED 'TF L FLIP' WHICH CREATES PHASE FLIPPING DOC
C           FILE FOR USE BY 'FD' 
C
C                          
d82 4
a85 4
       WANT_AST  = .FALSE.
       WANT_GEH  = .TRUE.   
       WANT_SIGN = .FALSE.
       NDIM      =  1
d123 1
a123 1
          COMMENT ='        STRAIGHT     RAD(1/PIX}'
d142 1
a142 1
          IF (ANS .NE. 'S') B = B * B
d168 1
a168 1
       CHARACTER(LEN=120)    :: COMMENT
d184 1
a184 1
       REAL                  :: GEH,SP_PIXSIZ,SC,AK,B_RAW,RAD_PX
d187 3
a189 4
       REAL                  :: RAW_CTF,STRAIGHT_CTF,TRAPPED_CTF
       REAL                  :: FLIPPED_CTF,FVAL,FKEV

       REAL                  :: FDUM,SIGN
d192 4
a195 4
       NDIM      =  1
       WANT_AST  = .FALSE.
       WANT_GEH  = .TRUE.   
       WANT_SIGN = .FALSE.
d211 1
a211 5
       GEH = 1.0 / GEH**2
       SC  = FMAXSPFREQ / FLOAT(NX / 2)

       ACR = ATAN(ACR / (1.0 - ACR))
       CS  = CS * 1.E7
a212 2

C      GET NUMBER OF FOURIER BINS
d215 1
a215 1
       ALLOCATE (DLIST(8,NUM_BINS), STAT=IRTFLG)
d217 1
a217 1
          CALL ERRT(46,'DLIST',8*NUM_BINS)
d221 6
d230 1
a230 1
          CALL TFD_PLUS(B_RAW,CS,DZ,LAMBDA,Q,DS,AK,ACR,GEH, B_ENV)
d242 1
a242 1
          DLIST(7,IKEY) = B_RAW * B_RAW   ! DIFFRACTOGRAM
d244 1
a244 1
          DLIST(8,IKEY) = B_RAW           ! RAW
d247 1
d249 1
a249 1
C      INITIALIZE FIRST MIN, ABSOLUTE MIN
d252 3
a254 3
       FIRST_MIN     =  1       ! RADIUS FOR FIRST MIN.
       FIRSTMIN_RAD  = -1       ! INITIALIZE FIRST MIN. RADIUS
       FIRSTZERO_RAD = -1       ! FIRST ZERO RADIUS
d311 3
a313 3
       COMMENT = '       RAD(1/PIX),    RAD(1/A),   STRAIGHT,' // 
     &           '      FLIPPED,      TRAPPED,     ENVELOPE,' // 
     &           '    DIFFRACTOGRAM'
d315 1
a315 1
       CALL LUNDOCPUTCOM(LUNDOCNO,COMMENT(1:108),IRTFLG)
d321 2
a322 2
        RAD_PX  = DLIST(1,IRAD)
        RAW_CTF = DLIST(8,IRAD)    ! RAW CTF VALUE
d324 2
a325 2
        ! STRAIGHT SIGN
        STRAIGHT_CTF = -RAW_CTF        ! FOR STRAIGHT CTF
a326 1
        ! TRAP FOR LOW RESOLUTION FLIP SIGN
d330 2
a331 1
           TRAPPED_CTF = STRAIGHT_CTF  ! FOR TRAPPED CTF  
d333 5
d340 5
a344 4
        IF ( STRAIGHT_CTF == 0 ) THEN
           FLIPPED_CTF  = 0
        ELSE 
           FLIPPED_CTF = ABS( STRAIGHT_CTF ) / STRAIGHT_CTF 
d347 3
a349 3
       !DLIST(1,IRAD) = RAD(1/PIX) 
       !DLIST(2,IRAD) = RAD(1/A)  
        DLIST(3,IRAD) = STRAIGHT_CTF 
d354 4
a357 3
       !DLIST(6,IRAD) = ENVELOPE 
       !DLIST(7,IRAD) = DIFFRACTOGRAM  
       !DLIST(8,IRAD) = RAW_CTF 
d359 3
a361 2
C       WRITE TO CTF DOC FILE, SKIP RAW
        CALL LUNDOCWRTDAT(LUNDOCNO,IRAD,DLIST(1,IRAD),7,IRTFLG)
@


1.23
log
@renamed some variables, split out kev_or_lambda
@
text
@a362 48
C     -------------------  KEV_OR_LAMBDA ----------------
     
      SUBROUTINE KEV_OR_LAMBDA(FVAL,FKEV,FLAMBDA,IRTFLG)

      IMPLICIT NONE
      INCLUDE 'CMBLOCK.INC'

      REAL    :: FVAL,FKEV,FLAMBDA
      INTEGER :: IRTFLG

      INTEGER :: NVAL

      IRTFLG = 0

      IF (FVAL < 1) THEN
C         MUST BE WAVELENGTH
          FLAMBDA = FVAL

          WRITE(NOUT,91) FLAMBDA
91        FORMAT('  Lambda: ',F6.4)

          !FLAMBDA = 12.398 / SQRT(FKEV*(1022+FKEV))
          !FLAMBDA * SQRT(FKEV*(1022+FKEV)) = 12.398
          !SQRT(FKEV*(1022+FKEV)) = 12.398 / FLAMBDA
          !     FKEV *(1022+FKEV)  = (12.398 / FLAMBDA)**2
          ! FKEV * 1022 + FKEV * FKEV  = (12.398 / FLAMBDA)**2
          ! QUADRATIC EQUATION MUST BE SOLVED NOT WORTH IT UN-NEEDED
          ! FKEV = -10000000000  ! BAD VALUE FLAG??

      ELSEIF (FVAL == 0 .OR. FVAL == 1) THEN
         NVAL = FVAL
         CALL ERRT(102,'IMPOSSIBLE VALUE FOR KEV OR LAMBDA',NVAL)
         IRTFLG = 1

      ELSE 
C        MUST BE KEV (RELATIVISTIC ELECTRONS)
         FKEV    = FVAL
         FLAMBDA = 12.398 / SQRT(FKEV*(1022+FKEV))

         WRITE(NOUT,92) FKEV, FLAMBDA
92       FORMAT('  Kev: ',F6.2,' --> Wavelenght lambda: ',F6.4)
      ENDIF


      !write(6,93) FVAL, FKEV, FLAMBDA
93    format('  FVAL:',F7.2,' -->  KEV:',F6.2,'  LAMBDA:',F6.4)

      END
@


1.22
log
@inputs kev now
@
text
@d47 1
d54 1
a54 1
       INTEGER               :: NOT_USED,NX
d56 3
d66 1
d70 1
a70 1
       INTEGER,PARAMETER     :: LUNDOC = 81
d78 14
a91 34

       CALL RDPRM1S(CS,NOT_USED,
     &                  'SPHERICAL ABERRATION CS [MM]',IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

       IF (CS < 0.0001) CS = 0.0001

       FVAL = 2000
       CALL RDPRM2S(DZ,FVAL,NOT_USED,
     &   'DEFOCUS [A], ELECTRON VOLTAGE [Kev] or WAVELENGTH [A]',
     &   IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

       CALL KEV_OR_LAMBDA(FVAL,KEV,LAMBDA,IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

       CALL RDPRI1S(NX,NOT_USED,
     &              'NUMBER OF SPATIAL FREQUENCY POINTS',IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

       CALL RDPRM1S(FMAXSPFREQ,NOT_USED,
     &              'MAX SPATIAL FREQUENCY [1/A]',IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

       Q  = 0.0
       DS = 0.0
       CALL RDPRM2S(Q,DS,NOT_USED,
     &              'SOURCE SIZE [1/A], DEFOCUS SPREAD [A]',IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

       CALL RDPRM2S(WGH,GEH,NOT_USED,
     &   'AMPL. CONTRAST RATIO [0-1], GAUSSIAN ENV. HALFW. [1/A]',
     &   IRTFLG)
       IF (IRTFLG .NE. 0) RETURN
a97 3
       GEH = 1.0 / GEH**2
       SC  = FMAXSPFREQ / FLOAT(NX / 2)

d110 12
a121 2
C                123456789 123456789 123456789 123456789 123456789 123456789 
       COMMENT ='         TRANSFER    RAD(1/PIX}'    
d124 1
a124 1
       IE = 0
d127 4
a130 1
       WGH = ATAN(WGH / (1.0 - WGH))
d137 1
a137 1
          CALL TFD(B,CS,DZ,LAMBDA,Q,DS,IE,AK,WGH,GEH)
d176 1
d179 2
a180 2
       INTEGER               :: NUM_BINS,K,IRAD,NLET,LUNDOCNO
       REAL                  :: CS,DZ,Q,DS,WGH, B_ENV,RAD_ANGST
d187 1
d189 14
a202 27
       CALL RDPRM1S(CS,NOT_USED,
     &                  'SPHERICAL ABERRATION CS [MM]',IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

       IF (CS < 0.0001)  CS = 0.0001

       CALL RDPRM2S(DZ,FVAL,NOT_USED,
     &              'DEFOCUS [A], ELECTRON VOLTAGE [Kev]', IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

C      ACCEPT LAMBDA AS INPUT ALSO
       CALL KEV_OR_LAMBDA(FVAL,FKEV,LAMBDA,IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

       CALL RDPRI1S(NX,NOT_USED,
     &              'NUMBER OF SPATIAL FREQUENCY POINTS',IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

       CALL RDPRM1S(FMAXSPFREQ,NOT_USED,
     &              'MAX SPATIAL FREQUENCY [1/A]',IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

       Q  = 0.0
       DS = 0.0
       CALL RDPRM2S(Q,DS,NOT_USED,
     &              'SOURCE SIZE [1/A], DEFOCUS SPREAD [A]',IRTFLG)
       IF (IRTFLG .NE. 0) RETURN
a203 3
       CALL RDPRM2S(WGH,GEH,NOT_USED,
     & 'AMPL. CONTRAST RATIO [0-1], GAUSSIAN ENVELOPE HALFWIDTH [1/A]',
     &   IRTFLG)
d212 1
a212 1
       WGH = ATAN(WGH / (1.0 - WGH))
d228 1
a228 1
          CALL TFD_PLUS(B_RAW,CS,DZ,LAMBDA,Q,DS,AK,WGH,GEH, B_ENV)
@


1.21
log
@merged the differnt   s/e/d outputs into one doc file
@
text
@d51 1
a51 1
       REAL                  :: LAMBDA,KM
d54 1
a54 1
       REAL                  :: CS
d76 1
d80 8
a87 2
       CALL RDPRM2S(DZ,LAMBDA,NOT_USED,
     &              'DEFOCUS [A], WAVELENGTH LAMBDA [A]',IRTFLG)
d91 1
d93 1
a93 1
       CALL RDPRM1S(KM,NOT_USED,
d95 1
d101 1
d106 1
d111 1
d114 1
a114 1
       SC  = KM / FLOAT(NX / 2)
d171 1
a171 1
       REAL                  :: LAMBDA,KM
d189 1
a189 1
       REAL                  :: FLIPPED_CTF
d198 6
a203 2
       CALL RDPRM2S(DZ,LAMBDA,NOT_USED,
     &              'DEFOCUS [A], WAVELENGTH LAMBDA [A]',IRTFLG)
d210 1
a210 1
       CALL RDPRM1S(KM,NOT_USED,
d229 1
a229 1
       SC  = KM / FLOAT(NX / 2)
d382 48
a429 1
      
@


1.20
log
@doc file column labels improved
@
text
@d6 1
d88 2
d93 2
a94 2
       CALL RDPRM2S(WGH,ENV,NOT_USED,
     &'AMPL. CONTRAST RATIO [0-1], GAUSSIAN ENV. HALFW. [1/A]',
d101 1
a101 1
       ENV = 1.0 / ENV**2
d130 1
a130 1
          CALL TFD(B,CS,DZ,LAMBDA,Q,DS,IE,AK,WGH,ENV)
d147 1
a147 3

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

d158 1
a158 1
       CHARACTER(LEN=100)    :: COMMENT
d170 1
a170 1
       INTEGER               :: NOT_USED,IRTFLG,NCHAR,NX,IE,NS1,IKEY
d172 2
a173 2
       REAL                  :: CS,DZ,Q,DS,WGH
       REAL                  :: ENV,SP_PIXSIZ,SC,AK,B,RAD_PX,RAD_ANGST
d176 1
a176 1
       REAL                  :: CTF_VALUE,STRAIGHT_CTF,TRAPPED_CTF
d198 2
d204 1
a204 1
       CALL RDPRM2S(WGH,ENV,NOT_USED,
d212 1
a212 5
       CALL RDPRMC(ANS,NCHAR,.TRUE.,
     &       'DIFFRACTOGRAM, ENVELOPE, OR STRAIGHT (D/E/S)',
     &        NULL,IRTFLG)

       ENV = 1.0 / ENV**2
a213 2
       IE  = 0
       IF (ANS == 'E') IE = 1
d222 1
a222 1
       ALLOCATE (DLIST(6,NUM_BINS), STAT=IRTFLG)
d224 1
a224 1
          CALL ERRT(46,'DLIST',6*NUM_BINS)
d230 2
a231 4
          AK = (NS1-K) * SC
          CALL TFD(B,CS,DZ,LAMBDA,Q,DS,IE,AK,WGH,ENV)

          IF (ANS .NE. 'S') B = B * B     ! ENVELOPE
d236 1
a236 1
          DLIST(4,IKEY) = RAD_PX             ! RAD_PX
d239 3
a241 1
          DLIST(5,IKEY) = RAD_ANGST
d243 1
a243 1
          DLIST(6,IKEY) = B
d245 1
d248 1
d259 2
a260 2
          CURR_CTF  = DLIST(1,IRAD)
          RAD_PX    = DLIST(4,IRAD)         
d310 6
a315 3
       COMMENT = '       FLIPPED,     STRAIGHT,      TRAPPED, ' //
     &           '     RAD(1/PIX)     RAD(1/A)       RAW'    
       CALL LUNDOCPUTCOM(LUNDOCNO,COMMENT(1:94),IRTFLG)
d321 2
a322 2
        RAD_PX    = DLIST(4,IRAD)
        CTF_VALUE = DLIST(6,IRAD)    ! RAW VALUE
d325 1
a325 4
        STRAIGHT_CTF = -CTF_VALUE    ! FOR UNTRAPPED CTF

        ! FLIP SIGN
        TRAPPED_CTF  = -CTF_VALUE    ! FOR TRAPPED CTF
d328 23
a350 9
        IF ( IRAD < FIRST_MIN ) TRAPPED_CTF = 1

        IF ( STRAIGHT_CTF == 0  ) FLIPPED_CTF  = 0
        IF ( STRAIGHT_CTF .NE. 0 ) 
     &       FLIPPED_CTF = ABS( STRAIGHT_CTF ) / STRAIGHT_CTF 

        DLIST(1,IRAD) = FLIPPED_CTF 
        DLIST(2,IRAD) = STRAIGHT_CTF 
        DLIST(3,IRAD) = TRAPPED_CTF 
d352 2
a353 2
C       WRITE TO CTF DOC FILE
        CALL LUNDOCWRTDAT(LUNDOCNO,IRAD,DLIST(1,IRAD),6,IRTFLG)
@


1.19
log
@doc file key label wrong in comment
@
text
@d309 1
a309 1
       COMMENT = '  TRANSFER '
d312 1
a312 1
     &           '     RAD(1/PIX)    RAD(1/A**)      RAW'    
@


1.18
log
@prompts changed
@
text
@d114 1
a114 1
       COMMENT ='KEY=RAD. TRANSFER   RAD(PIX^-1}'    
d180 1
a180 1
     &                  'SPHERICAL ABERRATION CS[MM]',IRTFLG)
d194 1
a194 1
     &              'MAXIMUM SPATIAL FREQUENCY [1/A]',IRTFLG)
d311 2
a312 2
       COMMENT = 'RAD    FLIPPED,     STRAIGHT,      TRAPPED, ' //
     &           '    RAD(PIX^-1)    RAD(A**-1)      RAW'    
@


1.17
log
@all tf ops have same prompt syntax
@
text
@d186 1
a186 1
     &              'DEFOCUS[A], LAMBDA[A]',IRTFLG)
d190 1
a190 1
     &              'NUMBER OF SPATIAL FREQUENCY PTS',IRTFLG)
d194 1
a194 1
     &              'MAXIMUM SPATIAL FREQUENCY[A-1]',IRTFLG)
d198 1
a198 1
     &              'SOURCE SIZE[A-1], DEFOCUS SPREAD[A]',IRTFLG)
d202 1
a202 1
     &   'AMPL CONTRAST RATIO[0-1], GAUSSIAN ENV. HALFW.[FOU. UNITS]',
d206 1
a206 1
       CALL RDPRM1S(SP_PIXSIZ,NOT_USED, 'PIXEL SIZE[A]', IRTFLG)
d253 1
a253 1
       FIRST_MIN     = 1        ! RADIUS FOR FIRST MIN.
@


1.16
log
@moved FIRSTMIN_RAD... up to top of doc file
@
text
@d74 1
a74 1
     &                  'SPHERICAL ABERRATION CS[MM]',IRTFLG)
d79 1
a79 1
     &              'DEFOCUS[A], LAMBDA[A]',IRTFLG)
d85 1
a85 1
     &              'MAX SPATIAL FREQUENCY[A-1]',IRTFLG)
d88 1
a88 1
     &              'SOURCE SIZE [A-1], DEFOCUS SPREAD[A]',IRTFLG)
d91 1
a91 1
     &'AMPL. CONTRAST RATIO[0-1], GAUSSIAN ENV. HALFW.[FOU. UNITS]',
@


1.15
log
@formatting
@
text
@d293 15
d309 1
a309 1
       COMMENT = '  TRANSFER ' 
a310 1

a341 15

            write(6,*) 'numbins:',num_bins

C     WRITE RADII (IN ANGSTROMS) TO DOC FILE COMMENT KEY
C     NOTE: IT WOULD BE MORE ACCURATE TO INTERPOLATE, BI-LINEARLY 
dC    PERHAPS, SO THESE VALUES WILL BE ON AVERAGE 1/2 FOURIER PIXEL OFF

C                123456789 123456789 123456789 123456789 123456789 123456789 
      COMMENT = '            DEFOCUS   RAD_FIRST_MIN   RAD_FIRST_ZERO'
      CALL LUNDOCPUTCOM(LUNDOCNO,COMMENT(1:60),IRTFLG)

      DLIST1(1) = DZ 
      DLIST1(2) = FIRSTMIN_RAD 
      DLIST1(3) = FIRSTZERO_RAD 
      CALL LUNDOCWRTDAT(LUNDOCNO,-999,DLIST1,3,IRTFLG)
@


1.14
log
@ADDED 'TF L FLIP' WHICH CREATES PHASE FLIPPING DOC FILE FOR USE BY 'FD'
@
text
@a249 3
C      GET NUMBER OF FOURIER BINS
       NUM_BINS = (NX + 1) - NS1

d298 1
a298 1
     &           '    RAD(PIX^-1}    RAD(A**-1)      RAW'    
a327 1
      return
d329 1
d336 1
a336 1
      COMMENT = '           DEFOCUS  RAD_FIRST_MIN    RAD_FIRST_ZERO'
@


1.13
log
@ADDED 'TF L FLIP' WHICH CREATES PHASE FLIPPING DOC FILE FOR USE BY 'FD'
@
text
@d5 1
d27 9
a35 1
C **********************************************************************
d37 2
a38 1
C   TRAFL
d40 1
d42 1
a42 1
C--*********************************************************************
@


1.12
log
@CS_zero
@
text
@d10 1
a10 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d14 1
a14 1
C=* SPIDER is free software; you can redistribute it and/or            *
d16 1
a16 1
C=* published by the Free Software Foundation; either version 2 of the *
d20 1
a20 1
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
d33 1
a33 1
           SUBROUTINE TRAFL
d35 2
a36 2
           INCLUDE 'CMBLOCK.INC'
           INCLUDE 'CMLIMIT.INC'
d38 2
a39 1
           COMMON        B
d41 2
a42 2
           CHARACTER     NULL,ANS
           REAL          LAMBDA,KM
d44 3
a46 2
           PARAMETER     (NDLI=3)
           DIMENSION     DLIST(NDLI)
d48 2
a49 2
           LUN9 = 70
           NULL = CHAR(0)
d51 1
a51 2
	CALL RDPRM(CS,NOT_USED,'SPHERICAL ABERRATION CS[MM]')
           IF (CS < 0.0001)    CS = 0.0001
d53 1
a53 2
           CALL RDPRM2(DZ,LAMBDA,NOT_USED,
     &              'DEFOCUS[A], LAMBDA[A]')
a54 2
           CALL RDPRMI(NSAM,NDUM,NOT_USED,
     &              'NUMBER OF SPATIAL FREQUENCY PTS')
d56 4
a59 2
           CALL RDPRM(KM,NOT_USED,
     &              'MAXIMUM SPATIAL FREQUENCY[A-1]')
a60 2
           CALL RDPRM2(Q,DS,NOT_USED,
     &              'SOURCE SIZE[A-1], DEFOCUS SPREAD[A]')
d62 2
a63 3
           CALL RDPRM2(WGH,ENV,NOT_USED,
     &   'AMPL CONTRAST RATIO [0-1], GAUSSIAN ENV. HALFW. [FOU. UNITS]')
           ENV    = 1. / ENV**2
d65 1
a65 3
           SC = KM / FLOAT(NSAM / 2)
           CALL RDPRMC(ANS,NCHAR,.TRUE.,
     &       '(D)IFFRACTOGRAM / (E)NVELOPE / (S)TRAIGHT',NULL,IRTFLG)
d67 2
a68 4
           IE = 0
           IF (ANS .EQ. 'E') IE = 1
           WGH = ATAN(WGH/(1.0-WGH))
           CS = CS*1.E7
d70 2
a71 2
           NS1 = (NSAM/2+1)
           DO K=NS1,NSAM+1
d73 2
a74 8
              AK = (NS1-K)*SC
              CALL TFD(B,CS,DZ,LAMBDA,Q,DS,IE,AK,WGH,ENV)
              IF (ANS .NE. 'S') B = B * B
              DLIST(1) = K - NS1 + 1
              DLIST(2) = B
              DLIST(3) = REAL(K-NS1) / NSAM
              CALL SAVD(LUN9,DLIST,NDLI,IRTFLG)
           ENDDO
d76 2
a77 2
           CLOSE(LUN9)
           CALL  SAVDC
d79 3
a81 1
           END
d83 3
d87 260
@


1.11
log
@GPL_2010
@
text
@d49 2
a50 1
           CALL RDPRM(CS,NOT_USED,'CS[MM]')
@


1.10
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.9
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a35 1
C--************************************************************************
@


1.8
log
@changes to parameters passed to tfd: WGH and CS
@
text
@d2 1
d9 24
d43 1
@


1.7
log
@nloop,iloop_removed
@
text
@d60 2
@


1.6
log
@lun9 not set
@
text
@d36 1
a36 1
           CALL RDPRM(CS,NLOOP,ILOOP,'CS[MM]')
d38 1
a38 1
           CALL RDPRM2(DZ,LAMBDA,NLOOP,ILOOP,
d41 1
a41 1
           CALL RDPRMI(NSAM,NDUM,NLOOP,ILOOP,
d44 1
a44 1
           CALL RDPRM(KM,NLOOP,ILOOP,
d47 1
a47 1
           CALL RDPRM2(Q,DS,NLOOP,ILOOP,
d50 1
a50 1
           CALL RDPRM2(WGH,ENV,NLOOP,ILOOP,
@


1.5
log
@pawels changes jan 2002 & my cleanup jan 2002
@
text
@d32 2
a33 1

d42 1
a42 1
     &              'NUMBER OF SPATIAL FREQ. PTS')
d52 1
a52 1
           ENV    = 1./ENV**2
d54 1
a54 1
           SC=KM/FLOAT(NSAM/2)
d66 1
a66 1
              IF (ANS .NE. 'S') B= B * B
d69 1
a69 1
              DLIST(3) = REAL(K-NS1 )/ NSAM
d75 1
@


1.4
log
@*** empty log message ***
@
text
@d6 8
a13 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
C **************************************************************************
d20 1
a20 1
          SUBROUTINE TRAFL
d22 2
a23 2
	  PARAMETER  (NDLI=3)
          INCLUDE 'CMBLOCK.INC'
d25 1
a25 28
          COMMON          B
          COMMON /COMMUN/ FILNAM
          CHARACTER *81 FILNAM
          CHARACTER     NULL,ANS,Y,D,E,S
          REAL          LAMBDA,KM
	  DIMENSION  DLIST(NDLI)

          DATA Y/'Y'/,D/'D'/,E/'E'/,S/'S'/,PI/3.14159/

          NULL = CHAR(0)

          CALL FILERD(FILNAM,NLET,NULL,'OUTPUT',IRTFLG)
          IF (IRTFLG .NE. 0) RETURN

          CALL RDPRM(CS,NLOOP,ILOOP,'CS(MM)')
          CALL RDPRM2(DZ,LAMBDA,NLOOP,ILOOP,
     &      'DEFOCUS(ANGSTROEMS), LAMBDA(ANGSTROEMS)')
          CALL RDPRMI(NSAM,NDUM,NLOOP,ILOOP,'NUMBER OF SP.FREQ.PTS')
          CALL RDPRM(KM,NLOOP,ILOOP,'MAXIMUM SPATIAL FREQUENCY[A-1]')
          CALL RDPRM2(Q,DS,NLOOP,ILOOP,
     &      'SOURCE SIZE[A-1], DEFOCUS SPREAD[A]')
          CALL RDPRM2(WGH,ENV,NLOOP,ILOOP,
     &      'AMPL CONTRAST RATIO [0-1], GAUSSIAN ENV HALFW [FOU UNITS]')
          ENV    = 1./ENV**2

          IFORM  = 1
	  NSLICE = 1
          MAXIM  = 0
d27 28
a54 2
          SC=KM/FLOAT(NSAM/2)
          CALL RDPRMC(ANS,NCHAR,.TRUE.,
d56 19
a74 17
          IE = 0
          IF (ANS.EQ.E) IE=1
          NS1 = (NSAM/2+1)
          DO  K=NS1,NSAM+1

             AK = NS1-K
             CALL TFD(B,CS,DZ,LAMBDA,Q,DS,IE,AK,WGH,ENV)
             IF (ANS.NE.S) B=B*B
             DLIST(1)=K-NS1+1
             DLIST(2)=B
             DLIST(3)=REAL(K-NS1)/NSAM
             CALL  SAVD(LUN9,DLIST,NDLI,IRTFLG)
          ENDDO

	  CLOSE(LUN9)
          CALL  SAVDC
          END
@


1.3
log
@pawels changes on 17 sept 01
@
text
@d57 1
a57 1
      &       '(D)IFFRACTOGRAM / (E)NVELOPE / (S)TRAIGHT',NULL,IRTFLG)
@


1.2
log
@*** empty log message ***
@
text
@d1 1
d21 13
a33 12
         SUBROUTINE TRAFL
	PARAMETER  (NDLI=3)
         INCLUDE 'CMBLOCK.INC'

         COMMON          B
         COMMON /COMMUN/ FILNAM
         CHARACTER *81 FILNAM
         CHARACTER     NULL,ANS,Y,D,E,S
         REAL          LAMBDA,KM
	DIMENSION  DLIST(NDLI)

         DATA Y/'Y'/,D/'D'/,E/'E'/,S/'S'/,PI/3.14159/
d35 1
a35 1
         NULL = CHAR(0)
d37 2
a38 2
         CALL FILERD(FILNAM,NLET,NULL,'OUTPUT',IRTFLG)
         IF (IRTFLG .NE. 0) RETURN
d40 2
a41 2
         CALL RDPRM(CS,NLOOP,ILOOP,'CS(MM)')
         CALL RDPRM2(DZ,LAMBDA,NLOOP,ILOOP,
d43 3
a45 3
         CALL RDPRMI(NSAM,NDUM,NLOOP,ILOOP,'NUMBER OF SP.FREQ.PTS')
         CALL RDPRM(KM,NLOOP,ILOOP,'MAXIMUM SPATIAL FREQUENCY[A-1]')
         CALL RDPRM2(Q,DS,NLOOP,ILOOP,
d47 1
a47 2
         CALL RDPRM2(DZA,AZZ,NLOOP,ILOOP,'ASTIGMATISM[A], AZIMUTH[DEG]')
         CALL RDPRM2(WGH,ENV,NLOOP,ILOOP,
d49 23
a71 27
         ENV    = 1./ENV**2
         IFORM  = 1
	 NSLICE = 1
         MAXIM  = 0

         SC=KM/FLOAT(NSAM/2)
         CALL RDPRMC(ANS,NCHAR,.TRUE.,
     &       '(D)IFFRACTOGRAM / (E)NVELOPE / (S)TRAIGHT',NULL,IRTFLG)
         IE = 0
         IF (ANS.EQ.E) IE=1
         NS1 = (NSAM/2+1)
            DO  K=NS1,NSAM+1

               AK = NS1-K 
               AZ = PI/2.
               IF (K.EQ.NS1) GOTO 5
               AZ  = ATAN2(FLOAT(I-NS1),FLOAT(K-NS1))
5              AZR = AZZ*(PI/180.)
               DZZ = DZ+DZA/2*SIN(2*(AZ-AZR))

               CALL TFD(B,CS,DZZ,LAMBDA,Q,DS,IE,AK,WGH,ENV)
		IF (ANS.NE.S) B=B*B
	DLIST(1)=K-NS1+1
	DLIST(2)=B
	DLIST(3)=REAL(K-NS1)/NSAM
	       CALL  SAVD(LUN9,DLIST,NDLI,IRTFLG)
            ENDDO
d74 3
a76 1
         END
@


1.1
log
@Initial revision
@
text
@d3 1
a3 2
C TRAFD.F
C                                   USED OPFILE NOV 00 ARDEAN LEITH
@
