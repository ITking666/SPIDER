head	1.14;
access;
symbols
	pre_mrcs:1.14
	healthdept_2018:1.14
	pre_getangas:1.13
	GPL2010:1.13
	pre_GPL2010:1.12
	pre_var_equation:1.12
	pre_fftwrings:1.12
	pre_opfiles:1.12
	src:1.12
	best-code:1.12
	x-named-regs:1.12
	x:1.12
	v13-00:1.12
	pre_GPL:1.10
	prec_CA:1.10
	noindx:1.10
	Bproc:1.9
	oct21:1.8
	last77:1.7;
locks; strict;
comment	@c @;


1.14
date	2018.10.03.14.34.06;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2010.06.24.13.25.42;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.17.20.32.12;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.17.18.23.05;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.12.05.14.04.32;	author bimal;	state Exp;
branches;
next	1.9;

1.9
date	99.11.10.23.09.19;	author yuchen;	state Exp;
branches;
next	1.8;

1.8
date	99.06.03.20.50.51;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.10.06.20.43.47;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.09.30.20.25.56;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.09.11.18.27.09;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	96.09.09.20.42.06;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.09.09.20.38.25;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	96.09.09.20.34.42;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	96.08.27.13.59.05;	author pawel;	state Exp;
branches;
next	;


desc
@on disk simple 3D fft
@


1.14
log
@email_health_dept
@
text
@C
C++*********************************************************************
C
C $$ FMRS_3DR.FOR
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C  For order of elements see fmr_1.
C
C
C IMAGE_PROCESSING_ROUTINE
C
C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************
C
C $$ FMRS_3DR.FOR
C
	SUBROUTINE FMRS_3DR(LUN1,LUN2,
     &		NNNN,NSAM,NROW,NSLICE,INV)	

	INCLUDE 'CMBLOCK.INC'

        REAL, ALLOCATABLE, DIMENSION(:,:) :: A, A2, B, H1, H2
        REAL, ALLOCATABLE, DIMENSION(:)   :: WORK

	LOGICAL IFNS,IFND


        NMN = (MAX0(NSAM,2*NROW,2*NSLICE))
        
	ALLOCATE (WORK(NMN), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'FT, WORK',IER)
           RETURN
        ENDIF	
 	ALLOCATE (A(NNNN,NROW), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'FT, A',IER)
           DEALLOCATE (WORK)
           RETURN
        ENDIF		
	ALLOCATE (A2(NSAM,NROW), STAT=IRTFLG)
	IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'FT, A2',IER)
           DEALLOCATE (WORK,A)
           RETURN
        ENDIF		
	ALLOCATE (B(NNNN,NSLICE), STAT=IRTFLG)
	IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'FT, B',IER)
           DEALLOCATE (WORK,A,A2)
           RETURN
        ENDIF		
	ALLOCATE (H1(NROW,NSLICE), STAT=IRTFLG)
	IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'FT, H1',IER)
           DEALLOCATE (WORK,A,A2,B)
           RETURN
        ENDIF		
	ALLOCATE (H2(NROW,NSLICE), STAT=IRTFLG)
	IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'FT, H2',IER)
           DEALLOCATE (WORK,A,A2,B,H1)
           RETURN
        ENDIF		



	NDR=INV*NNNN*NROW
C
	IF(INV) 2,2,1
C
1	CONTINUE
c******************************************************************************
c********forward************forward**************forward***********************
c******************************************************************************
C
C
        DO    I=1,NSLICE
           DO    I1=1,NROW
              K=(I-1)*NROW+I1
              CALL  REDLIN(LUN1,A(1,I1),NSAM,K)
	   ENDDO

           CALL  FMRS_2(A,NSAM,NROW,INV)
           IF(INV.EQ.0)  THEN
 	      DEALLOCATE (A, A2, B, H1, H2, WORK)               
              RETURN
           ENDIF

           DO    I1=1,NROW
              K=(I-1)*NROW+I1
              CALL  WRTLIN(LUN2,A(1,I1),NNNN,K)
	   ENDDO
	ENDDO

	CLOSE(LUN1)

        DO    I=1,NROW
           DO    I1=1,NSLICE
              K=(I1-1)*NROW+I
              CALL  REDLIN(LUN2,B(1,I1),NNNN,K)
	   ENDDO

c$omp parallel do private(i1),shared(nnnnt)
           DO    I1=1,NNNN,2
	      NNNNT=NNNN
	CALL  FFTMCF(B(I1,1),B(I1+1,1),NSLICE,NSLICE,NSLICE,NNNNT)
	   ENDDO
	   IF(NNNNT.EQ.0)  THEN
	      INV=0
	      DEALLOCATE (A, A2, B, H1, H2, WORK)
	      RETURN
	   ENDIF

           DO  I1=1,NSLICE
              K=(I1-1)*NROW+I
              CALL  WRTLIN(LUN2,B(1,I1),NNNN,K)
	   ENDDO
	ENDDO
	DEALLOCATE (A, A2, B, H1, H2, WORK)
	RETURN
c******************************************************************************
c************inverse**********inverse************inverse***********************
c******************************************************************************

2	CONTINUE
	IFNS=MOD(NSAM,2).EQ.0
	IFND=MOD(NROW,2).EQ.0
C       NORMALIZE FOR INVERSE
	Q=1/FLOAT(NSLICE)

        DO    I=1,NROW
           DO    I1=1,NSLICE
              K=(I1-1)*NROW+I
              CALL  REDLIN(LUN1,B(1,I1),NNNN,K)
	   ENDDO

c$omp parallel do private(i1),shared(nnnnt)
           DO    I1=1,NNNN,2
	      NNNNT=-NNNN
	CALL  FFTMCF(B(I1,1),B(I1+1,1),NSLICE,NSLICE,NSLICE,NNNNT)
	   ENDDO
	   IF(NNNNT.EQ.0)  THEN
	      INV=0
	      DEALLOCATE (A, A2, B, H1, H2, WORK)
	      RETURN
	   ENDIF

	   IF(I.LT.NROW/2+1)  THEN
              DO    K=1,NSLICE
                 H1(2*(I-1)+1,K)=B(1,K)
                 H1(2*(I-1)+2,K)=B(2,K)
              ENDDO
              IF(IFNS)  THEN
                 DO    K=1,NSLICE
                    H2(2*(I-1)+1,K)=B(NNNN-1,K)
                    H2(2*(I-1)+2,K)=B(NNNN,K)
                 ENDDO
              ENDIF
           ELSEIF(I.EQ.NROW/2+1)  THEN
              IF(IFND)  THEN
                 DO    K=1,NSLICE
                    H1(2,K)=B(1,K)
                 ENDDO
              ELSE
                 DO    K=1,NSLICE
                    H1(2*(I-1)+1,K)=B(1,K)
                    H1(2,K)=B(2,K)
                 ENDDO
              ENDIF
              IF(IFNS)  THEN
                 IF(IFND)  THEN
                    DO    K=1,NSLICE
                       H2(2,K)=B(NNNN-1,K)
                    ENDDO
                 ELSE
                    DO    K=1,NSLICE
                       H2(2*(I-1)+1,K)=B(NNNN-1,K)
                       H2(2,K)=B(NNNN,K)
                    ENDDO
                 ENDIF
              ENDIF
	   ELSE
C             REMAINING ENTRIES ARE MIRRORED AND ARE SKIPPED
	   ENDIF

	   IF(.NOT.IFNS)  THEN
	      DO    I1=1,NSLICE
	         B(2,I1)=B(NNNN,I1)
	      ENDDO
	   ENDIF

           DO    I1=1,NSLICE
              K=(I1-1)*NROW+I
              CALL  WRTLIN(LUN2,B(1,I1),NSAM,K)
	   ENDDO
	ENDDO

C	CLOSE(LUN1)

        DO    I=1,NSLICE
           DO    I1=1,NROW
              K=(I-1)*NROW+I1
              CALL  REDLIN(LUN2,A2(1,I1),NSAM,K)
	   ENDDO

	   DO    I1=1,NROW
	      A2(1,I1)=H1(I1,I)
	   ENDDO
	   IF(IFNS)  THEN
	      DO    I1=1,NROW
	         A2(2,I1)=H2(I1,I)
	      ENDDO
	   ENDIF
c$omp parallel do  private(k,i1)
	   DO    K=1,NROW
	      DO    I1=1,NSAM
	         A2(I1,K)=A2(I1,K)*Q
	      ENDDO
	   ENDDO

           CALL  FMR_2(A2,NSAM,NROW,WORK,INV)
           IF(INV.EQ.0)  THEN
              CLOSE(LUN1)
 	      DEALLOCATE (A, A2, B, H1, H2, WORK)          
              RETURN
           ENDIF
           DO    I1=1,NROW
              K=(I-1)*NROW+I1
              CALL  WRTLIN(LUN2,A2(1,I1),NSAM,K)
	   ENDDO
	ENDDO
	CLOSE(LUN1)
	
	DEALLOCATE (A, A2, B, H1, H2, WORK)	
	END
@


1.13
log
@GPL_2010
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.12
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.11
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a6 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
a30 1
C **************************************************************************
a38 1
C--************************************************************************
@


1.10
log
@adapted for dynamical memory allocation
@
text
@d2 1
d7 1
d9 1
d11 24
d41 1
d50 1
@


1.9
log
@a
@
text
@d18 4
d26 1
a26 1
	SUBROUTINE FMRS_3DR(LUN1,LUN2,A,A2,B,H1,H2,BUF,
d28 48
a75 4
	DIMENSION A(NNNN,NROW),A2(NSAM,NROW),B(NNNN,NSLICE),BUF(*)
	DIMENSION H1(NROW,NSLICE),H2(NROW,NSLICE)
C
	LOGICAL*1 IFNS,IFND
a76 1
c
d88 15
a102 3
        DO    I1=1,NROW
        K=(I-1)*NROW+I1
        CALL  REDLIN(LUN1,A(1,I1),NSAM,K)
d104 1
a104 10
c
        CALL  FMRS_2(A,NSAM,NROW,INV)
        IF(INV.EQ.0)  RETURN
c
        DO    I1=1,NROW
        K=(I-1)*NROW+I1
        CALL  WRTLIN(LUN2,A(1,I1),NNNN,K)
	ENDDO
	ENDDO
C
d106 1
a106 1
C
d108 5
a112 5
        DO    I1=1,NSLICE
        K=(I1-1)*NROW+I
        CALL  REDLIN(LUN2,B(1,I1),NNNN,K)
	ENDDO
c
d114 2
a115 2
        DO    I1=1,NNNN,2
	NNNNT=NNNN
d117 11
a127 10
	ENDDO
	IF(NNNNT.EQ.0)  THEN
	INV=0
	RETURN
	ENDIF
c
        DO  I1=1,NSLICE
        K=(I1-1)*NROW+I
        CALL  WRTLIN(LUN2,B(1,I1),NNNN,K)
	ENDDO
d129 1
d134 1
a134 1
c
d138 1
a138 1
C NORMALIZE FOR INVERSE
d140 1
a140 1
C
d142 5
a146 5
        DO    I1=1,NSLICE
        K=(I1-1)*NROW+I
        CALL  REDLIN(LUN1,B(1,I1),NNNN,K)
	ENDDO
c
d148 2
a149 2
        DO    I1=1,NNNN,2
	NNNNT=-NNNN
d151 55
d207 1
a207 55
	IF(NNNNT.EQ.0)  THEN
	INV=0
	RETURN
	ENDIF
C
	IF(I.LT.NROW/2+1)  THEN
		DO    K=1,NSLICE
		H1(2*(I-1)+1,K)=B(1,K)
		H1(2*(I-1)+2,K)=B(2,K)
		ENDDO
		IF(IFNS)  THEN
		DO    K=1,NSLICE
		H2(2*(I-1)+1,K)=B(NNNN-1,K)
		H2(2*(I-1)+2,K)=B(NNNN,K)
		ENDDO
		ENDIF
	ELSEIF(I.EQ.NROW/2+1)  THEN
		IF(IFND)  THEN
		DO    K=1,NSLICE
		H1(2,K)=B(1,K)
		ENDDO
		ELSE
		DO    K=1,NSLICE
		H1(2*(I-1)+1,K)=B(1,K)
		H1(2,K)=B(2,K)
		ENDDO
		ENDIF
		IF(IFNS)  THEN
			IF(IFND)  THEN
			DO    K=1,NSLICE
			H2(2,K)=B(NNNN-1,K)
			ENDDO
			ELSE
			DO    K=1,NSLICE
			H2(2*(I-1)+1,K)=B(NNNN-1,K)
			H2(2,K)=B(NNNN,K)
			ENDDO
			ENDIF
		ENDIF
	ELSE
C REMAINING ENTRIES ARE MIRRORED AND ARE SKIPPED
	ENDIF
C
	IF(.NOT.IFNS)  THEN
	DO    I1=1,NSLICE
	B(2,I1)=B(NNNN,I1)
	ENDDO
	ENDIF
C
        DO    I1=1,NSLICE
        K=(I1-1)*NROW+I
        CALL  WRTLIN(LUN2,B(1,I1),NSAM,K)
	ENDDO
	ENDDO
C
d209 1
a209 1
C
d211 13
a223 13
        DO    I1=1,NROW
        K=(I-1)*NROW+I1
        CALL  REDLIN(LUN2,A2(1,I1),NSAM,K)
	ENDDO
C
	DO    I1=1,NROW
	A2(1,I1)=H1(I1,I)
	ENDDO
	IF(IFNS)  THEN
	DO    I1=1,NROW
	A2(2,I1)=H2(I1,I)
	ENDDO
	ENDIF
d225 16
a240 3
	DO    K=1,NROW
	DO    I1=1,NSAM
	A2(I1,K)=A2(I1,K)*Q
d242 3
a244 10
	ENDDO
C
        CALL  FMR_2(A2,NSAM,NROW,WORK,INV)
        IF(INV.EQ.0)  RETURN
C
        DO    I1=1,NROW
        K=(I-1)*NROW+I1
        CALL  WRTLIN(LUN2,A2(1,I1),NSAM,K)
	ENDDO
	ENDDO
@


1.8
log
@OpenMP
@
text
@d28 1
a28 1
CNO_SAVE
@


1.7
log
@*** empty log message ***
@
text
@d63 1
a63 1
c$doacross local(i1),share(nnnnt)
d95 1
a95 1
c$doacross local(i1),share(nnnnt)
d171 1
a171 1
c$doacross  local(k,i1)
@


1.6
log
@*** empty log message ***
@
text
@d40 2
a41 2
        DO  10  I=1,NSLICE
        DO  11  I1=1,NROW
d43 2
a44 1
11      CALL  REDLIN(LUN1,A(1,I1),NSAM,K)
d49 1
a49 1
        DO  10  I1=1,NROW
d51 3
a53 1
10      CALL  WRTLIN(LUN2,A(1,I1),NNNN,K)
d57 2
a58 2
        DO  20  I=1,NROW
        DO  21  I1=1,NSLICE
d60 2
a61 1
21      CALL  REDLIN(LUN2,B(1,I1),NNNN,K)
d64 1
a64 1
        DO  22  I1=1,NNNN,2
d66 2
a67 1
22	CALL  FFTMCF(B(I1,1),B(I1+1,1),NSLICE,NSLICE,NSLICE,NNNNT)
d73 1
a73 1
        DO  20  I1=1,NSLICE
d75 3
a77 1
20      CALL  WRTLIN(LUN2,B(1,I1),NNNN,K)
d89 2
a90 2
        DO  30  I=1,NROW
        DO  31  I1=1,NSLICE
d92 2
a93 1
31      CALL  REDLIN(LUN1,B(1,I1),NNNN,K)
d96 1
a96 1
        DO  32  I1=1,NNNN,2
d98 2
a99 1
32	CALL  FFTMCF(B(I1,1),B(I1+1,1),NSLICE,NSLICE,NSLICE,NNNNT)
d106 1
a106 1
		DO  34  K=1,NSLICE
d108 2
a109 1
34		H1(2*(I-1)+2,K)=B(2,K)
d111 1
a111 1
		DO  35  K=1,NSLICE
d113 2
a114 1
35		H2(2*(I-1)+2,K)=B(NNNN,K)
d118 3
a120 2
		DO  36  K=1,NSLICE
36		H1(2,K)=B(1,K)
d122 1
a122 1
		DO  37  K=1,NSLICE
d124 2
a125 1
37		H1(2,K)=B(2,K)
d129 3
a131 2
			DO  38  K=1,NSLICE
38			H2(2,K)=B(NNNN-1,K)
d133 1
a133 1
			DO  39  K=1,NSLICE
d135 2
a136 1
39			H2(2,K)=B(NNNN,K)
d144 3
a146 2
	DO  51  I1=1,NSLICE
51	B(2,I1)=B(NNNN,I1)
d149 1
a149 1
        DO  30  I1=1,NSLICE
d151 3
a153 1
30      CALL  WRTLIN(LUN2,B(1,I1),NSAM,K)
d157 2
a158 2
        DO  40  I=1,NSLICE
        DO  41  I1=1,NROW
d160 2
a161 1
41      CALL  REDLIN(LUN2,A2(1,I1),NSAM,K)
d163 3
a165 2
	DO  42  I1=1,NROW
42	A2(1,I1)=H1(I1,I)
d167 3
a169 2
	DO  43  I1=1,NROW
43	A2(2,I1)=H2(I1,I)
d172 5
a176 3
	DO  33  K=1,NROW
	DO  33  I1=1,NSAM
33	A2(I1,K)=A2(I1,K)*Q
d181 1
a181 1
        DO  40  I1=1,NROW
d183 3
a185 1
40      CALL  WRTLIN(LUN2,A2(1,I1),NSAM,K)
@


1.5
log
@parallel corrected
@
text
@d27 1
a27 1
	LOGICAL*1 IFNS,IFNR,IFNL
@


1.4
log
@*** empty log message ***
@
text
@d59 1
a59 1
c$doacross local(i1,nnnnt,inv)
d62 1
a62 1
	CALL  FFTMCF(B(I1,1),B(I1+1,1),NSLICE,NSLICE,NSLICE,NNNNT)
a66 1
22	CONTINUE
d87 1
a87 1
c$doacross local(i1,nnnnt,inv)
d90 1
a90 1
	CALL  FFTMCF(B(I1,1),B(I1+1,1),NSLICE,NSLICE,NSLICE,NNNNT)
a94 1
32	CONTINUE
@


1.3
log
@bug fixed
@
text
@d59 1
a59 1
c$doacross local(i1,nnnnt)
d88 1
a88 1
c$doacross local(i1)
@


1.2
log
@ break due to image dimensions
@
text
@d96 1
a96 1
22	CONTINUE
@


1.1
log
@Initial revision
@
text
@d59 1
a59 1
c$doacross local(i1)
d61 7
a67 1
22      CALL  FFTMCF(B(I1,1),B(I1+1,1),NSLICE,NSLICE,NSLICE,NNNN)
d90 7
a96 1
32      CALL  FFTMCF(B(I1,1),B(I1+1,1),NSLICE,NSLICE,NSLICE,-NNNN)
@
