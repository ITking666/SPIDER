head	1.17;
access;
symbols
	pre_getangas:1.16
	GPL2010:1.16
	pre_GPL2010:1.15
	pre_var_equation:1.15
	pre_fftwrings:1.15
	pre_opfiles:1.14
	src:1.14
	best-code:1.14
	x-named-regs:1.14
	x:1.14
	v13-00:1.14
	pre_GPL:1.12
	prec_CA:1.12
	noindx:1.12
	Bproc:1.11
	oct21:1.11
	last77:1.9;
locks; strict;
comment	@c @;


1.17
date	2014.11.10.18.33.28;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.24.13.26.39;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.24.16.09.43;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.17.20.09.16;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.17.18.03.46;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.20.16.59.17;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.09.02.15.21.40;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	99.08.09.14.15.48;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.02.05.13.42.32;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	98.01.12.20.30.01;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	97.10.14.21.19.23;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	96.07.10.14.12.45;	author mladjadj;	state Exp;
branches;
next	1.5;

1.5
date	95.07.31.12.42.51;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	95.02.08.11.19.50;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	95.02.08.11.04.53;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	95.01.10.16.10.19;	author liy;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.01;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.17
log
@ilo ihi unused
@
text
@
C++*********************************************************************
C
C RDPRAI.F  -- CREATED JAN 87   AUTHOR:   ARDEAN LEITH
C              COMMENTS ALLOWED   JAN 98    ARDEAN LEITH
C              USED RDPRANC       AUG 99    ARDEAN LEITH
C              INTEGER RDPRANC    MAY 02    ARDEAN LEITH
C              RDPRANC PARAMETERS MAY 07    ARDEAN LEITH
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    RDPRAI(ILIST,NMAX,NUMBER,ILOW,IHI,PROMPT,LIMITEDC,IRTFLG)
C
C    PURPOSE:  READ AN ALPHANUMERIC STRING, CHECK FOR ANY SPECIAL OPERATION,
C              RETURNS ARRAY OF INTEGERS, THE NUMBER OF INTEGERS, OR A
C              FLAG  TO INDICATE THAT ONE SHOULD RETURN TO PREVIOUS QUESTION.
C              CHECKS TO SEE THAT INTEGERS ARE WITHIN SPECIFIED RANGE.
C              (CURRENTLY NO CHECKING IS DONE!!!!)
C
C              ALLOWABLE STRINGS           NUMBERS ENTERED IN ARRAY
C                 1,2,8,66                  1, 2, 8, 66
C                 1 2 8,66                  1, 2, 8, 66
C                 1,2-8 66                  1, 2, 3, 4, 5, 6, 7, 8, 66
C                 X11,X12....              CONTENTS OF X11 & X12...
C                 X11-X12                  CONTENTS OF X11....X12
C
C              (A - ONLY SIGNIFIES A RANGE IF IT IMMEDIATELY FOLLOWS
C               PRECEEDING VALUE)
C
C  PARAMETERS : ILIST     ARRAY FOR ANSWERS                      (RET.)
C               NMAX      MAX LENGTH OF ARRAY                    (SENT)
C               NUMBER    ON ENTRY IS MAX NUMBER OF ANSWERS (SENT/RET.) 
C                         TO BE RETURNED!!
C                         (<0 ON ENTRY IS FLAG TO ACCEPT NULL 
C                         RESPONSE)
C                         ON RETURN IS NUMBER OF ANSWERS ACTUALLY 
C                         RETURNED
C               ILOW      BOTTEM OF RANGE (CAN'T BE BELOW THIS)   (SENT)
C               HI        TOP OF RANGE (CAN'T BE ABOVE THIS)      (SENT)
C                         ILOW & IHI CURRENTLY UNUSED!!!!!!!!!!!!!!
C               PROMPT    SOLICITATION MESSAGE                    (SENT)
C               LIMITEDC  REQUIRES NMAX VALUES / CALL, SO THAT
C                           IT CAN BE USED IN BATCH DO-LOOP
C               IRTFLG    RETURN FLAG (0 IS NORMAL, -1 IS GOTO    (SENT)
C                              PREVIOUS QUESTION)
C      
C    NOTE: CAN PERFORM REGISTER SUBSTITUTION NOW al.
C          IF THE LAST CHAR. ON A LINE OF INPUT IS A COMMA IT WILL ASK 
C          FOR ANOTHER LINE OF INPUT.
C
C          BE SURE NUMBER IS SET TO NMAX BEFORE CALLING THIS ROUTINE
C
C--*********************************************************************

        SUBROUTINE RDPRAI(ILIST,NMAX,NUMBER,ILOW,IHI,PROMPT,
     &             LIMITEDC,IRTFLG)        

        INCLUDE 'CMBLOCK.INC'

        DIMENSION       ILIST(NMAX)
        CHARACTER *(*)  PROMPT,LIMITEDC
        LOGICAL         LIMITED

        LIMITED = (LIMITEDC .EQ. 'T')

        CALL RDPRANC(ILIST,NMAX,NUMBER,ILOW,IHI,PROMPT,
     &               LIMITED,IRTFLG)        

        RETURN
        END
       
@


1.16
log
@GPL_2010
@
text
@d14 1
a14 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d60 1
@


1.15
log
@rdpranc parameters changed
@
text
@a10 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d12 5
a16 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d18 1
a18 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d23 1
a23 1
C=* This program is distributed in the hope that it will be useful,    *
d25 1
a25 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a26 1
C=*                                                                    *
d28 1
a28 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.14
log
@GPL License fixed
@
text
@d5 4
a8 3
C              COMMENTS ALLOWED JAN 98    ARDEAN LEITH
C              USED RDPRANC     AUG 99    ARDEAN LEITH
C              INTEGER RDPRANC  MAY 02    ARDEAN LEITH
d42 1
a87 2
        FLOW    = ILOW
        HI      = IHI
d89 2
a90 2
        CALL RDPRANC(ILIST,FDUM,NMAX,NUMBER,FLOW,HI,PROMPT,
     &               LIMITED,.TRUE.,IRTFLG)        
@


1.13
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a9 2
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      **
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
d13 1
a13 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a32 6

C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
a74 1
C--************************************************************************
@


1.12
log
@integer ruturned from rdpranc
@
text
@d2 1
d11 1
d13 24
d83 1
@


1.11
log
@bad fbuf length bug fixed
@
text
@d7 1
a47 1
C                           IF (NULL) LIMITED IS FALSE.           (SENT)
a66 1
        REAL, ALLOCATABLE, DIMENSION(:) ::  FBUF
a67 4
        PARAMETER       (MAXB = 200)
        DIMENSION       FBUFT(MAXB)
        COMMON /RDPRINC_BUF/ FBUFT

d72 1
a72 18
        IF (NMAX .GT. MAXB) THEN
C          FBUFT NOT BIG ENOUGH, ALLOCATE FBUF INSTEAD
	   ALLOCATE(FBUF(NMAX),STAT=IRTFLG)
          IF (IRTFLG .NE. 0) CALL ERRT(46,'RDPRAI, FBUF',IER)

           CALL RDPRANC(FBUF,NMAX,NUMBER,FLOW,HI,PROMPT,
     &                  LIMITED,.TRUE.,IRTFLG)        

           IF (NUMBER .GT. 0) THEN
              DO I = 1,NUMBER
C                NO CHECK FOR VALIDITY OF CAST HERE !!!
                 ILIST(I) = FBUF(I)
              ENDDO
           ENDIF
           DEALLOCATE(FBUF)
        ELSE
C          USED FOR INCREASED SPEED
           CALL RDPRANC(FBUFT,NMAX,NUMBER,FLOW,HI,PROMPT,
a73 8

           IF (NUMBER .GT. 0) THEN
              DO I = 1,NUMBER
C                NO CHECK FOR VALIDITY OF CAST HERE !!!
                 ILIST(I) = FBUFT(I)
              ENDDO
           ENDIF
        ENDIF
@


1.10
log
@used rdpranc to work inside loops
@
text
@d67 1
d70 2
a71 2
        DIMENSION       FBUF(MAXB)
        COMMON /RDPRINC_BUF/ FBUF
d74 21
a94 3
        FLOW = ILOW
        HI   = IHI
        CALL RDPRANC(FBUF,NMAX,NUMBER,FLOW,HI,PROMPT,
d97 6
a102 5
        IF (NUMBER .GT. 0) THEN
           DO I = 1,NUMBER
C             NO CHECK FOR VALIDITY OF CAST HERE !!!
              ILIST(I) = FBUF(I)
           ENDDO
@


1.9
log
@CNO_SAVE
@
text
@d4 4
a7 3
C RDPRAI.F  -- CREATED JAN 87
C              COMMENTS ALLOWED JAN 98 al
C *  AUTHOR:   ArDean Leith                                                *
d17 1
a17 1
C    RDPRAI(ILIST,NMAX,NUMBER,ILOW,IHI,PROMPT,HELPFI,IRTFLG)
d26 1
a26 2
C                 1 2 8 66                  1, 2, 8, 66
C                 1,2  8 66                 1, 2, 8, 66
d28 2
d31 2
a32 2
C              (A - ONLY SIGNIFIES A RANGE IF THE VALUE FOR ILOW IS >= 0 !!,
C               OTHERWISE INPUT IS INTERPRETED AS A NEGATIVE NUMBER.)
d34 15
a48 14
C    PARAMETERS : ILIST     ARRAY FOR ANSWERS
C                 NMAX      MAX LENGTH OF ARRAY
C                 NUMBER    ON ENTRY IS MAX NUMBER OF ANSWERS TO BE RETURNED!!
C                            (<0 ON ENTRY IS FLAG TO ACCEPT NULL RESPONSE)
C                           ON RETURN IS NUMBER OF ANSWERS ACTUALLY RETURNED
C                 ILOW      BOTTEM OF RANGE (CAN'T BE BELOW THIS)
C                 IHI       TOP OF RANGE (CAN'T BE ABOVE THIS)
C                 PROMPT    SOLICITATION MESSAGE
C                           IF THE FIRST CHARACTER OF THE PROMPT IS A ~
C                           THEN THE REMAINING CHARACTERS OF THE PROMPT
C                           ARE CONSIDERED TO BE AN INPUT STRING FOR
C                           THE COMMAND AND IT DOES NOT ASK FOR INPUT
C                 HELPFI    NAME OF RELEVANT HELP FILE (OR NULL)
C                 IRTFLG    RETURN FLAG (0 IS NORMAL, -1 IS GOTO
a50 2
C    CALLS:       RDPRMC
C
d60 1
a60 97
     &             HELPFI,IRTFLG)        

CNO_SAVE 
        COMMON /UNITS/ LUNDOC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
        COMMON /PARAM/ PARAM(103),NSEL(10)

        INTEGER         ILIST(NMAX)
        CHARACTER *(*)  PROMPT,HELPFI
        CHARACTER * 80  ANS
        CHARACTER * 11  POSDIG
	CHARACTER * 1   NULL,A
        LOGICAL         SKIP,RANGE,GORANG,REGSUB,FIRST 

        DATA POSDIG/'0123456789.'/

        NULL   = CHAR(0)

C       A NEGATIVE NUMBER INPUT IS A FLAG THAT NULL INPUT IS ACCEPTABLE
        IF (NUMBER .LT. 0) THEN
          NVAL = -NUMBER
          SKIP = .TRUE.
        ELSE
          SKIP = .FALSE.
          NVAL = NUMBER
        ENDIF

C       ERROR PROOF THE INPUT
        IF (NVAL .LE. 0 .OR. NVAL .GT. NMAX) NVAL = NMAX

        FIRST  = .TRUE.
        IRTFLG = 0
        NUMBER = 0

   20   CONTINUE
        I      = 0

        IF (PROMPT(:1) .EQ. '~' .AND. .NOT. FIRST) THEN
C         INPUT VIA PROMPT WAS BAD, DO NOT ASK FOR INTERACTIVE INPUT
          IRTFLG = 1
          RETURN
        ENDIF
        FIRST = .FALSE.

        IF (PROMPT(:1) .EQ. '~') THEN
C         USE PROMPT FOR INPUT LINE
          ANS   = PROMPT(2:)
          NCHAR = LEN(PROMPT) - 1

        ELSE
C..       GET INTERACTIVE INPUT LINE
          CALL RDPRMC(ANS,NCHAR,.TRUE.,PROMPT,HELPFI,IRTFLG)
          IF (IRTFLG .EQ. -1) RETURN
          IRTFLG = 0
        ENDIF

   50   I = I + 1
C       CHECK TO SEE IF WE HAVE RUN OUT OF INPUT CHAR.
        IF (I .GT. NCHAR .OR. A .EQ. ';' .OR. ANS(I:I) .EQ. ';') THEN

          IF (A .EQ. ',' .AND. PROMPT(:1) .NE. '~') THEN
C           GET A CONTINUATION LINE OF INPUT

            CALL RDPRMC(ANS,NCHAR,.TRUE.,
     &      'ENTER NEXT LINE OF INPUT',NULL,IRTFLG)
            IF (IRTFLG .EQ. -1) GOTO 20
            I = 0
            GOTO 50

          ELSEIF (NUMBER .EQ. 0 .AND. SKIP) THEN
C           GOT NULL INPUT WHERE IT IS ALLOWED AS AN INPUT
C           RETURN A FLAG THAT NULL ANSWER ACCEPTED
            IRTFLG = 3
            RETURN

          ELSE IF (NUMBER .EQ. 0) THEN
C           DIDN'T GET ANY NUMBERS IN INPUT
            WRITE(NOUT,94)
   94       FORMAT('*** NEEDS AT LEAST ONE INTEGER INPUT')
            GOTO 20
            
          ELSE
C           END OF INPUT

C**************************DEBUG
C        WRITE(6,9088)NUM1,NVAL,NUMBER,NCHAR,I1,I2,I,A,ANS(1:I)
C9088    FORMAT(' END NUM1,NVAL,NUMBER,NCHAR,I1,I2,I,A)',/,
C     &          7I5,' :',A1,' :',/)
C******************************************

            RETURN
          ENDIF
        ENDIF

        A = ANS(I:I)
C       CONTINUE CHECKING CHAR. UNTIL WE GET A NON BLANK CHAR.
        IF (A .EQ. ' ' .OR. A .EQ. ',' .OR. 
     &      A .EQ. '(' .OR. A .EQ. ')' ) GOTO 50
d62 1
a62 4
C       HAVE GOT FIRST CHAR IN NUMBER WHICH IS NON BLANK
        I1 = I
        RANGE  = .FALSE.
        REGSUB = .FALSE.
d64 3
d68 3
a70 12
        IF (A .EQ. 'X' .OR. A .EQ. 'x') THEN
C          WANT A REGISTER SUBSTITUTION
           REGSUB = .TRUE.
           ANS(I:I) = ' '
               
 490       I = I + 1
           IF (I .GT. NCHAR) GOTO 7
           A = ANS(I:I)
C          IF HAVE A BLANK SPACE AFTER X. CONTINUE TO READ CHAR.
           IF (A .EQ. ' ') GOTO 490
C          IF NO MORE CHAR. OR NON DIGIT CHAR. HAVE INVALID INPUT
           IF( A .LT. '0' .OR. A .GT. '9') GOTO 7
d72 5
a76 13
        ELSEIF (A .EQ. '-' .OR. A .EQ. '+') THEN
C          A NUMBER HAS A SIGN OR A RANGE SPECIFIER
           IF (ILOW .GE. 0 .AND. A .EQ. '-' .AND. NUMBER .GT. 0)
     &        THEN
              RANGE = .TRUE.
              ANS(I:I) = ' '
           ENDIF
               
   49      I = I + 1
           IF (I .GT. NCHAR) GOTO 7
           A = ANS(I:I)
C          IF HAVE A BLANK SPACE AFTER SIGN. CONTINUE TO READ CHAR.
           IF (A .EQ. ' ') GOTO 49
d78 5
a82 3
C          IF NO MORE CHAR. OR NON DIGIT CHAR. HAVE INVALID INPUT
           IF( A .LT. '0' .OR. A .GT. '9' .AND. 
     &       (A .NE. 'X' .AND. A .NE. 'x')) GOTO 7
a83 143
     

   54   IF (A .LT. '0' .OR. A .GT. '9') THEN

C          INPUT CHAR. IS NOT A DIGIT. FIND WHAT IT IS.
           GORANG = .FALSE.

           IF (A .EQ. 'X' .OR. A .EQ. 'x') THEN
C            WANT A REGISTER SUBSTITUTION
             REGSUB = .TRUE.
             ANS(I:I) = ' '
	     
C	      COPY LINES TO AVOID AN INSIDE LOOP JUMP
C             GOTO 49
   79        I = I + 1
             IF (I .GT. NCHAR) GOTO 7
             A = ANS(I:I)
C            IF HAVE A BLANK SPACE AFTER SIGN. CONTINUE TO READ CHAR.
             IF (A .EQ. ' ') GOTO 79

C            IF NO MORE CHAR. OR NON DIGIT CHAR. HAVE INVALID INPUT
             IF( A .LT. '0' .OR. A .GT. '9' .AND. 
     &          (A .NE. 'X' .AND. A .NE. 'x')) GOTO 7
              GOTO 54    
	                 
           ELSEIF (A .EQ. '.') THEN
C             INPUT MUST BE INTEGER BUT IF IT HAS A DECIMAL POINT WITH
C             ZERO'S AFTER IT THEN WE SHOULD ACCEPT IT.
   51         I2 = I - 1

   56         I  =  I + 1
C             IF WE HAVE REACHED END OF NUMBER ACCEPT IT
              IF (I .GT. NCHAR) GOTO 55
              A  = ANS(I:I)
              IF (A .EQ. ' ' .OR. A .EQ. ',') THEN
C                END OF NUMBER, OK TO DECODE IT
                 GOTO 55

              ELSE IF(A .NE. '0') THEN
C               NON ZERO DIGIT FOLLOWING DECIMAL POINT
                WRITE(NOUT,95)
   95           FORMAT('*** INPUT MUST BE INTEGER')
                GOTO 20

              ELSE
C                DIGITS CONTINUE
                 GOTO 56
              ENDIF

           ELSE IF (A .EQ. ' ' .OR. A .EQ. ',' .OR. A .EQ. ')' .OR.
     &              A .EQ. ';') THEN
C             END OF THIS NUMBER
              GOTO 53

           ELSE IF (A .EQ. '-' .AND. ILOW .GE. 0) THEN
C             RANGE SPECIFIER              
              GORANG =.TRUE.
              GOTO 53

           ELSE
C             INVALID CHAR. IN NUMBER
              GOTO 7
           ENDIF

        ELSE
C          HAVE VALID DIGIT
           I = I + 1
C          CHECK TO SEE IF WE HAVE REACHED END OF INPUT
           IF (I .GT. NCHAR) GOTO 53
           A = ANS(I:I)
           GOTO 54
        ENDIF
 
C       FIND NUMBER OF CHAR. IN NUMBER
   53   I2 = I - 1
   55   N  = I2 - I1 + 1

C       CONVERT NUMBER TO INTEGER FORMAT
        NUMBER = NUMBER + 1
        IF (N .LE. 0) GOTO 7

        READ(ANS(I1:I2),82,ERR=70)NUM1
   82   FORMAT(I12)

        IF (REGSUB) THEN
C          FIND REGISTER CONTENTS
           IF (NUM1 .LT. 1 .OR. NUM1 .GT. 100) THEN
C             IMPROPER REGISTER NUMBER              
              WRITE(NOUT,920) NUM1
920           FORMAT('*** IMPROPER REGISTER: ',I8)
              GOTO 20
           ENDIF
           NUM1 = PARAM(NUM1 + 1)
        ENDIF

        IF (NUM1 .LT. ILOW .OR. NUM1 .GT. IHI) THEN
           WRITE(NOUT,92) NUMBER,ILOW,IHI
   92      FORMAT('*** INPUT ',I4,' OUT OF RANGE (',
     &            I6,'...',I6,')')
           GOTO 20
        ENDIF
        IF (RANGE) THEN
C          PRESENTLY IN A RANGE LOOP
           INCR = 1
           IF (ILIST(NUMBER-1) .GT. NUM1) INCR = -1
           DO  IT = (ILIST(NUMBER-1)+INCR),NUM1,INCR
              IF (NUMBER .GT. NVAL) THEN
                 WRITE(NOUT,8109) NVAL
 8109            FORMAT('*** LIST TRUNCATED, ONLY HOLDS ',I5,' VALUES')
                 NUMBER = NUMBER - 1
                 RETURN
              ENDIF
              ILIST(NUMBER) = IT
              NUMBER = NUMBER + 1
   	   ENDDO
           NUMBER = NUMBER -1
        ELSE 
           IF (GORANG) I = I - 1
           ILIST(NUMBER) = NUM1
        ENDIF

C       GET ANY REMAINING NUMBERS FROM THE INPUT STRING
        IF (NUMBER .LT. NVAL) GOTO 50

C**************************DEBUG
C        WRITE(6,9089)NUM1,NVAL,NUMBER,NCHAR,I1,I2,I,A
C9089    FORMAT(' END NUM1,NVAL,NUMBER,NCHAR,I1,I2,I,A)',/,
C     &          7I5,' :',A1,' :',/)
C******************************************
       
      RETURN

    7   CONTINUE
C         UNKNOWN ERROR SOMEWHERE IN INPUT
          WRITE(NOUT,91) ANS(1:I)
   91     FORMAT('*** SYNTAX ERROR: ',A40)
          GOTO 20

   70   CONTINUE
C         ERROR SOMEWHERE IN DECODING INPUT NUMBER
          WRITE(NOUT,90) ANS(I1:I2)
   90     FORMAT('*** SYNTAX ERROR; INTEGER TOO LARGE? ',A24)
          GOTO 20
d85 2
a86 1
       END
@


1.8
log
@comment work ok now
@
text
@d61 1
@


1.7
log
@*** empty log message ***
@
text
@d4 2
a5 3
C RDPRAI.FOR -- CREATED JAN 87
C
C **************************************************************************
d7 8
a14 7
C *  COPYRIGHT (C)1986 , WADSWORTH CENTER FOR LABORATORIES AND             *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH  			   *
C **************************************************************************
a47 2
C    CALLED BY:   DPROFD    DPROFL
C
d51 2
a52 2
C          IF THE LAST CAHR. ON A LINE OF INPUT IS A , IT WILL ASK FOR
C          ANOTHER LINE OF INPUT.
d115 1
a115 1
        IF (I .GT. NCHAR) THEN
d242 2
a243 1
           ELSE IF (A .EQ. ' ' .OR. A .EQ. ',' .OR. A .EQ. ')') THEN
@


1.6
log
@avoid inside loop jump to 49
@
text
@d299 1
a299 1
           DO 60 IT = (ILIST(NUMBER-1)+INCR),NUM1,INCR
d308 1
a308 1
   60      CONTINUE
@


1.5
log
@should accept (input) now
@
text
@d198 1
a199 1

d206 14
a219 2
             GOTO 49
               
@


1.4
log
@bug in new change
@
text
@d232 1
a232 1
           ELSE IF (A .EQ. ' ' .OR. A .EQ. ',') THEN
@


1.3
log
@added () support on input line
@
text
@d156 1
a156 1
     &      A .EQ. '(' .OR. ) GOTO 50
@


1.2
log
@remove spout()
@
text
@d155 2
a156 1
        IF (A .EQ. ' ' .OR. A .EQ. ',') GOTO 50
@


1.1
log
@Initial revision
@
text
@a68 1
        CHARACTER * 60  OUTSTR
d136 1
a136 1
            WRITE(OUTSTR,94)
a137 1
            CALL SPOUT(NOUT,OUTSTR,1)
d222 1
a222 1
                WRITE(OUTSTR,95)
a223 1
                CALL SPOUT(NOUT,OUTSTR,1)
d269 1
a269 1
              WRITE(OUTSTR,920) NUM1
a270 1
              CALL SPOUT(NOUT,OUTSTR,0)
d277 1
a277 1
           WRITE(OUTSTR,92) NUMBER,ILOW,IHI
a279 1
           CALL SPOUT(NOUT,OUTSTR,1)
d288 1
a288 1
                 WRITE(OUTSTR,8109) NVAL
a289 1
                 CALL SPOUT(NOUT,OUTSTR,0)
d315 1
a315 1
          WRITE(OUTSTR,91) ANS(1:I)
a316 1
          CALL SPOUT(NOUT,OUTSTR,1)
d321 1
a321 1
          WRITE(OUTSTR,90) ANS(I1:I2)
a322 1
          CALL SPOUT(NOUT,OUTSTR,1)
@
