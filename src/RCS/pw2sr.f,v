head	1.16;
access;
symbols
	pre_mrcs:1.16
	healthdept_2018:1.16
	pre_getangas:1.12
	GPL2010:1.12
	pre_GPL2010:1.11
	pre_var_equation:1.11
	pre_fftwrings:1.11
	pre_opfiles:1.11
	src:1.11
	best-code:1.11
	x-named-regs:1.11
	x:1.11
	v13-00:1.11
	pre_GPL:1.9
	prec_CA:1.9
	noindx:1.9
	Bproc:1.3
	oct21:1.2
	last77:1.2;
locks; strict;
comment	@c @;


1.16
date	2018.10.03.14.34.13;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2018.02.14.16.49.37;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2018.02.12.20.21.53;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2011.06.23.18.58.29;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2010.06.24.13.26.35;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.17.20.12.28;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.17.18.06.30;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.13.15.33.42;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.06.15.30.35;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.06.15.27.12;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.06.15.25.57;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.06.15.09.58;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.05.13.15.57;	author bimal;	state Exp;
branches;
next	1.3;

1.3
date	99.11.10.23.11.15;	author yuchen;	state Exp;
branches;
next	1.2;

1.2
date	97.10.10.18.59.53;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	96.08.27.14.03.48;	author pawel;	state Exp;
branches;
next	;


desc
@simple 2D PW
@


1.16
log
@email_health_dept
@
text
@
C***********************************************************************
C
C PW2SR.F         REFACTORED AND PARALLELIZED      FEB 18 ArDean Leith
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2018  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C PW2SR(Q,NX,NY,MODE)
C
C PURPOSE: POWER SPECTRUM OF IMAGE, COMPUTED IN-PLACE
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

C       -------------------- PW2SR_A ------------------------

        SUBROUTINE  PW2SR_A(Q,NX,LSD,NY,MODE)

C       FOR FOURIER FILE, LSD = NX+2-MOD(NX,2)   eg: 16=18  17=18

        IMPLICIT NONE
        INCLUDE 'CMBLOCK.INC'

        REAL         :: Q(LSD,NY)
        INTEGER      :: NX,NY,LSD
        CHARACTER    :: MODE

        INTEGER      :: J,I,JN,II,JJ,JB,NXD2,NYD2
        INTEGER      :: LSDM1,LSDD2M1,NYD2PMOD,NXC,NYC,JNL
        REAL         :: SCL,TEMP,SCLSQ,VAL,FVAL,FVALI,FVALR
        REAL         :: FMAXVAL
        LOGICAL      :: EVENY,WANTLOG,WANT2,WANTPH


        REAL, PARAMETER :: THRESH = 1E-9

        REAL, PARAMETER :: PI = 3.141592653589
        REAL, PARAMETER :: DGR_TO_RAD = (PI / 180)

        EVENY    = (MOD(NY,2) == 0)

        LSDM1    = LSD - 1
        LSDD2M1  = LSD/2 - 1

        NXD2     = NX / 2
        NYD2     = NY / 2
        NXC      = NXD2 + 1     ! X CENTER
        NYC      = NYD2 + 1     ! Y CENTER
     
        NYD2PMOD = NYD2 + MOD(NY,2)

C       SCALE FACTOR
        SCL      = 2.0 / FLOAT(NX) / FLOAT(NY)
        SCLSQ    = SCL * SCL

        WANTPH  = (INDEX(MODE,'P') > 0)
        WANTLOG = (INDEX(MODE,'L') > 0)
        WANT2   = (INDEX(MODE,'2') > 0)

C       CONVERT TO AMPLITUDE SPECTRUM

        IF (WANT2)  THEN     
C           SQUARE OF STANDARD POWER SPECTRUM,, UNDOCUMENTED JUN 2011!

C          LOOP OVER ALL ROWS, PUTTING AMPS IN RIGHT HALF OF ROW
c$omp      parallel do private(i,j)
           DO J=1,NY                       ! LOOP OVER ALL ROWS (1:16)
              DO I=LSDM1,1,-2  
                 Q(LSDM1-(LSDM1-I)/2,J) = SCLSQ *
     &             (Q(I+1,J)*Q(I+1,J) + Q(I,J)*Q(I,J))
              ENDDO
           ENDDO

         ELSEIF (WANTLOG) THEN
C          LOG OF STANDARD POWER SPECTRUM

C          LOOP OVER ALL ROWS, PUTTING AMPS IN RIGHT HALF OF ROW
c$omp      parallel do private(i,j)
           DO J=1,NY                       ! LOOP OVER ALL ROWS (1:16)
              DO I=LSDM1,1,-2              ! (17:1 x-2)
                                           ! (17-(17-17)/2) = 17 :17-(17-1)/2=9
                 FVAL = SCL * 
     &                  SQRT(Q(I+1,J)*Q(I+1,J)+Q(I,J)*Q(I,J))

                 IF (FVAL > 0.0) THEN
                    Q(LSDM1-(LSDM1-I)/2,J) = LOG10(FVAL)
                    ! (17:9,1:16) = (17:1x-2, 1:16)
                 ELSE
C                   CAN NOT TAKE LOG!!
                    Q(LSDM1-(LSDM1-I)/2,J) = 0.0
                 ENDIF
              ENDDO
           ENDDO

        ELSEIF (WANTPH) THEN
C          PHASE SPECTRUM
           ! MUST IGNORE NOISE (VERY SMALL NUMBERS) 
           !THRESH = MAX(ABS(Q)) / 10000

#ifdef NEVER
           FMAXVAL = 0.0
           DO J = 1,NY
              DO I = 1,LSD
                 !THRESH = MAX(ABS(Q(I,J)),THRESH)
                 FVAL = ABS(Q(I,J))* SCL
                 IF (FVAL > FMAXVAL) THEN
                   FMAXVAL = FVAL
                   !write(6,'(a,2i7,1Pg12.4)')'  Max value: ',i,j,fmaxval 
                 ENDIF
              ENDDO
           ENDDO
           !write(6,'(a,1Pg12.4)') '  Max value: ',fmaxval
           THRESH = FMAXVAL * 1E-9
#endif

           WRITE(NOUT,'(A,1PG12.4)') '  Zero threshold: ',THRESH
        
c$omp      parallel do private(i,j)
           DO J=1,NY                       
              DO I=LSDM1,1,-2              
                                   
                FVALR = Q(I  ,J) * SCL
                FVALI = Q(I+1,J) * SCL
                IF (FVALR < THRESH) FVALR = 0.0
                IF (FVALI < THRESH) FVALI = 0.0

                Q(LSDM1-(LSDM1-I)/2,J) = ATAN2(FVALI,FVALR) * DGR_TO_RAD
              ENDDO
           ENDDO

         ELSE
C          STANDARD POWER SPECTRUM

C          LOOP OVER ALL ROWS, PUTTING AMPS IN RIGHT HALF OF ROW
c$omp      parallel do private(i,j)
           DO J=1,NY                       ! LOOP OVER ALL ROWS (1:16)
              DO I=LSDM1,1,-2              ! (17:1 x-2)
                                           ! (17-(17-17)/2) = 17 :17-(17-1)/2=9
                 Q(LSDM1-(LSDM1-I)/2,J) =  ! (17:9,1:16)    = (17:1x-2, 1:16)
     &             SCL * SQRT(Q(I+1,J)*Q(I+1,J) + Q(I,J)*Q(I,J))
              ENDDO
           ENDDO
        ENDIF

        !! NYD2PMOD = NYD2 + MOD(NY,2) = 8+0

C       INTERCHANGE TOP AND BOTTEM HALF OF RIGHT HALF COLUMNS          
c$omp   parallel do private(j,jj,i,temp)
        DO J=1,NYD2               ! 1..8           LOOP OVER TOP ROWS
           JJ = J + NYD2PMOD      ! 1+8:8+8 = 9:16 LOOP OVER BOTTEM HALF
           DO I=NXC,LSDM1         ! 9..17          LOOP OVER RIGHT HALF
              TEMP    = Q(I,J)    ! (9:17, 1:8)
              Q(I,J)  = Q(I,JJ)   ! (9:17, 1:8)  = (9:17,9:16)
              Q(I,JJ) = TEMP      ! (9:17, 9:16) = (9:17,1:8)
           ENDDO
c           write(6,'(a, i4,a,  i4,      a, i4,a,2e12.4)') 
c    &              '  ',I, '(',NXC+I/2,',',JN,')',VAL
        ENDDO


        IF (.NOT. EVENY)  THEN    ! ODD HEIGHT

c$omp      parallel do private(i,temp,j)
           DO I=NXC,LSDM1          !  9..16   (for size 15x15)
              TEMP = Q(I,NYD2+1)   ! (9:16,8)
              DO J=NYD2+1,NY-1     !  8..14
                 Q(I,J) = Q(I,J+1) ! (9:16:8:14)
              ENDDO
              Q(I,NY) = TEMP       ! (9:16,15)
          ENDDO
        ENDIF   

C       REVERSE COLS ON RIGHT HALF OF FIRST LINE INTO LEFT HALF
        IF (EVENY) THEN           ! EVEN HEIGHT
           JB = 2                 ! 2
           DO I=1,LSDD2M1         ! 1:8
              II     = LSD - I    ! 18-1:18-8 = 17:10
              Q(I,1) = Q(II,1)    ! (1:8,1)   = (17:10,1) REVERSES 
           ENDDO
        ELSE
           JB = 1
        ENDIF
       
C       REVERSE COLS ON RIGHT HALF OF REMAINING LINES INTO LEFT HALF 

c$omp   parallel do private(j,jj,i,ii)
        DO J=JB,NY                ! 2..16
           JJ = NY-J+JB           ! 16-2+2:16-16+2 = 16:2
           DO I=1,LSDD2M1         ! 1..8
              II     = LSD - I    ! 18-1:18-8  = 17:10
              Q(I,J) = Q(II,JJ)   ! (1:8,2:16) = (17:10,16:2)
           ENDDO
        ENDDO


        !write(6,*)' origin:',NXD2+1,NYD2+1,NXD2,NYD2
        !write(6,*)' origin:',Q(NXD2+1,NYD2+1),Q(NXD2,NYD2)
        !call chkmaxloc('qnyd2-1', q(1:nx,nyd2-1),nx)
        !call chkmaxloc('qnyd2  ', q(1:nx,nyd2),nx)      
        !call chkmaxloc('qnyd2p1', q(1:nx,nyd2+1),nx)
      
C       REPLACE ORIGIN WITH ADJACENT VALUE TO HELP CONTRAST
        Q(NXD2+1, NYD2+1) = Q(NXD2,NYD2)

        !call chkmaxloc('qnyd2  ', q(1:nx,nyd2),nx)      
        !call chkmaxloc('qnyd2p1', q(1:nx,nyd2+1),nx)

        !IF (MODE == 'L') THEN
        !  CALL AAL11(Q,LSD*NY)
        !ENDIF

        END


C       -------------------- PW2SR ------------------------


        SUBROUTINE  PW2SR(Q,NX,NY,MODE)

        IMPLICIT NONE
        REAL         :: Q(NX+2-MOD(NX,2), NY)
        INTEGER      :: NX,NY
        CHARACTER*1  :: MODE

        INTEGER      :: NNNN,NSC,J,I,JJ,II,JB
        REAL         :: SCL,TEMP,SCLSQ
        LOGICAL      :: EVENY

        NNNN  = NX + 2 - MOD(NX,2)
        NSC   = NX/2+1
        EVENY = (MOD(NY,2) == 0)

        SCL   = 2.0 / FLOAT(NX) / FLOAT(NY)
        SCLSQ = SCL * SCL

C       CONVERT TO AMPLITUDE SPECTRUM

c$omp   parallel do private(i,j)
        DO J=1,NY
           IF (MODE == '2')  THEN  ! THIS IS NEVER USED JUN 2011!
              DO I=NNNN-1,1,-2
                 Q(NNNN-1-(NNNN-1-I)/2,J)=
     &            SCLSQ * (Q(I+1,J) * Q(I+1,J) + Q(I,J) * Q(I,J))
              ENDDO

           ELSE
              DO I=NNNN-1,1,-2
                 Q(NNNN-1-(NNNN-1-I)/2,J)=
     &            SCL * SQRT(Q(I+1,J) *Q(I+1,J) + Q(I,J) * Q(I,J))
              ENDDO
           ENDIF

C          WANT LOG OF SPECTRUM FOR EASIER VISUALIZATION?
cc         IF (MODE == 'L') CALL AL10(Q(NX/2,J), NX/2) BUGGY IF HERE
        ENDDO


C       MOVE ORIGIN (LOW FREQ) TO CENTER OF SPECTRUM IMAGE

C       INTERCHANGE TOP AND BOTTEM HALF OF RIGHT HALF COLUMNS          
        DO J=1,NY/2
           JJ = J+NY/2+MOD(NY,2)
           DO I=NSC,NNNN-1
              TEMP    = Q(I,J)
              Q(I,J)  = Q(I,JJ)
              Q(I,JJ) = TEMP
           ENDDO
        ENDDO

        IF (.NOT. EVENY) THEN   !ODD ROWS
           DO I=NSC,NNNN-1
              TEMP = Q(I,NY/2+1)
              DO J=NY/2+1,NY-1
                 Q(I,J) = Q(I,J+1)
              ENDDO
              Q(I,NY) = TEMP
          ENDDO
        ENDIF   

C       REVERSE COLS ON RIGHT HALF OF FIRST LINE INTO LEFT HALF
        NSC = NNNN/2-1

        IF (EVENY) THEN       ! EVEN ROWS
           JB = 2
           DO I=1,NSC
              II     = NNNN-I
              Q(I,1) = Q(II,1)
            
           ENDDO
        ELSE
           JB = 1
        ENDIF

C       REVERSE COLS ON RIGHT HALF OF REMAINING LINES INTO LEFT HALF 
        DO J=JB,NY
           JJ = NY-J+JB
           DO I=1,NSC
              II     = NNNN-I
              Q(I,J) = Q(II,JJ)
             
           ENDDO
        ENDDO

        !write(6,'(a,32e10.2)') ' 7:',q(1:17,7)
        !write(6,'(a,32e10.2)') ' 8:',q(1:17,8)

 
        !call chkmaxloc('y=qny/2m1', q(1:nx, ny/2-1),nx)      
        !call chkmaxloc('y=qny/2  ', q(1:nx, ny/2),  nx)      
        !call chkmaxloc('y=qny/2p1', q(1:nx, ny/2+1),nx)
      
        Q(NX/2+1,NY/2+1) = Q(NX/2,NY/2)

        IF (MODE == 'L') THEN
          CALL AAL11(Q,NNNN*NY)
        ENDIF


        END


         SUBROUTINE  AAL11(X,N)

         INTEGER :: N
         REAL    :: X(N)

         DO I=1,N
            IF (X(I) > 0.0) THEN
               X(I) = LOG10(X(I))
            ELSE
C              CAN NOT TAKE LOG!!
               X(I) = 0.0
               !write(6,'(a,i8,e12.4)') 'bad:',i,x(i)
            ENDIF
         ENDDO
         END



@


1.15
log
@for PW PH
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
d46 1
a46 1
        CHARACTER*1  :: MODE
d53 3
a55 1
        REAL         :: THRESH = 1E-9
@


1.14
log
@parallelized
refactored
@
text
@d42 2
d50 2
a51 1
        REAL         :: SCL,TEMP,SCLSQ,VAL,FVAL
d53 4
d87 1
a87 1
                 Q(LSDM1-(LSDM1-I)/2,J) = 
d110 36
@


1.13
log
@comments, formatting
@
text
@d2 1
a2 1
C++*********************************************************************
d4 1
a4 1
C PW2SR.F
d10 1
a10 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d28 1
a28 1
C PW2SR(Q,NSAM,NROW,MODE)
d30 1
a30 1
C PURPOSE: POWER SPECTRUM OF IMAGE
d33 1
a33 1
C--*********************************************************************
d35 1
a35 1
        SUBROUTINE   PW2SR(Q,NSAM,NROW,MODE)
d37 7
a43 1
        DIMENSION    :: Q(NSAM+2-MOD(NSAM,2),NROW)
a44 1
        LOGICAL      :: IFND
d46 140
a185 3
        NNNN = NSAM+2-MOD(NSAM,2)
        IFND = MOD(NROW,2).EQ.0
        NSC  = NSAM/2+1
d187 1
a187 1
        SCL = 2.0/FLOAT(NSAM)/FLOAT(NROW)
d189 27
a215 2
        DO J=1,NROW
           IF (MODE .EQ. '2')  THEN  ! THIS IS NEVER USED JUN 2011!
d218 1
a218 1
     &            SCL*SCL*(Q(I+1,J)*Q(I+1,J)+Q(I,J)*Q(I,J))
d220 1
d224 1
a224 1
     &            SCL*SQRT(Q(I+1,J)*Q(I+1,J)+Q(I,J)*Q(I,J))
d228 2
a229 1
           IF (MODE .EQ. 'L') CALL AL10(Q(NSAM/2,J),NSAM/2)
d232 6
a237 2
        DO J=1,NROW/2
           JJ = J+NROW/2+MOD(NROW,2)
d245 1
a245 1
        IF (.NOT.IFND)  THEN   !ODD ROW LENGTH
d247 2
a248 2
              TEMP = Q(I,NROW/2+1)
              DO J=NROW/2+1,NROW-1
d251 1
a251 1
              Q(I,NROW) = TEMP
d255 1
d257 2
a258 1
        IF (IFND) THEN    ! EVEN ROW LENGTH
d263 1
d269 3
a271 2
        DO J=JB,NROW
           JJ = NROW-J+JB
d275 1
d279 14
a292 1
         Q(NSAM/2+1,NROW/2+1) = Q(NSAM/2,NROW/2)
d294 17
d312 3
@


1.12
log
@GPL_2010
@
text
@d10 1
a10 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
a31 2
C IMAGE_PROCESSING_ROUTINE
C
d37 3
a39 3
        DIMENSION    Q(NSAM+2-MOD(NSAM,2),NROW)
        CHARACTER*1  MODE
        LOGICAL*1    IFND
d48 1
a48 1
           IF (MODE .EQ. '2')  THEN
d72 1
a72 1
        IF (.NOT.IFND)  THEN
d83 1
a83 1
        IF (IFND) THEN
@


1.11
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.10
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a39 1
C--************************************************************************
@


1.9
log
@cosmetic
@
text
@d2 1
d9 24
d47 1
@


1.8
log
@*** empty log message ***
@
text
@d1 2
a2 1
C
d4 1
a4 1
C++************************************************************************
d6 8
a13 1
C $$ PW2SR.FOR
d15 1
a15 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
C **************************************************************************
d17 1
a20 1
C        1         2         3         4         5         6         7
a21 1
C
d23 4
a26 5
C
C $$ PW2SR.FOR
C
        SUBROUTINE  PW2SR(Q,NSAM,NROW,MODE)
        DIMENSION   Q(NSAM+2-MOD(NSAM,2),NROW)
d28 1
a28 1
        LOGICAL*1 IFND
d31 19
a49 22
        IFND=MOD(NROW,2).EQ.0
        NSC=NSAM/2+1
C
C       DO  1  J=1,NROW
C1      CALL  REDLIN(LUN1,Q(1,J),NSAM,J)
C       INV=+1
C       CALL  FMRS_2(Q,NSAM,NROW,INV)
C
        SCL=2.0/FLOAT(NSAM)/FLOAT(NROW)
        DO    J=1,NROW
        IF(MODE.EQ.'2')  THEN
           DO    I=NNNN-1,1,-2
              Q(NNNN-1-(NNNN-1-I)/2,J)=
     &         SCL*SCL*(Q(I+1,J)*Q(I+1,J)+Q(I,J)*Q(I,J))
           ENDDO
        ELSE
           DO    I=NNNN-1,1,-2
              Q(NNNN-1-(NNNN-1-I)/2,J)=
     &         SCL*SQRT(Q(I+1,J)*Q(I+1,J)+Q(I,J)*Q(I,J))
           ENDDO
        ENDIF
           IF(MODE.EQ.'L')  CALL  AL10(Q(NSAM/2,J),NSAM/2)
d52 6
a57 6
        DO    J=1,NROW/2
           JJ=J+NROW/2+MOD(NROW,2)
           DO    I=NSC,NNNN-1
              TEMP=Q(I,J)
              Q(I,J)=Q(I,JJ)
              Q(I,JJ)=TEMP
d61 5
a65 5
        IF(.NOT.IFND)  THEN
           DO    I=NSC,NNNN-1
              TEMP=Q(I,NROW/2+1)
              DO    J=NROW/2+1,NROW-1
                 Q(I,J)=Q(I,J+1)
d67 1
a67 1
              Q(I,NROW)=TEMP
d71 6
a76 6
        NSC=NNNN/2-1
        IF(IFND)  THEN
           JB=2
           DO    I=1,NSC
              II=NNNN-I
              Q(I,1)=Q(II,1)
d79 1
a79 1
           JB=1
d81 6
a86 5
        DO    J=JB,NROW
           JJ=NROW-J+JB
           DO    I=1,NSC
              II=NNNN-I
              Q(I,J)=Q(II,JJ)
d89 3
a91 5
C
          Q(NSAM/2+1,NROW/2+1)=Q(NSAM/2,NROW/2)
C
C         DO  3  J=1,NROW
C3        CALL  WRTLIN(LUN2,Q(1,J),NSAM,J)
@


1.7
log
@*** empty log message ***
@
text
@d46 1
a46 1
     &          SCL*SCL*(Q(I+1,J)*(Q(I+1,J)+Q(I,J)*Q(I,J))
d51 1
a51 1
     &          SCL*SQRT(Q(I+1,J)*Q(I+1,J)+Q(I,J)*Q(I,J))
@


1.6
log
@*** empty log message ***
@
text
@d46 1
a46 1
               SCL*SCL*(Q(I+1,J)*(Q(I+1,J)+Q(I,J)*Q(I,J))
@


1.5
log
@option 2 added
@
text
@d43 1
a43 5
	IF(MODE.EQ.'2')  THEN
	   DO    I=NNNN-1,1,-2
	       SCL*SCL*(Q(I+1,J)*(Q(I+1,J)+Q(I,J)*Q(I,J))
	   ENDDO
	ELSE
d46 5
d53 1
a53 1
	ENDIF
@


1.4
log
@adapted to dynamical memory allocation
@
text
@d43 5
d52 1
d93 1
a93 1
C         IF(MODE.NE.'L')  Q(NSAM/2+1,NROW/1+1)=0.0
@


1.3
log
@a
@
text
@d18 1
d20 3
d27 41
a67 4
	SUBROUTINE  PW2SR(Q,NNNN,NSAM,NROW,MODE)
	DIMENSION   Q(NNNN,NROW)
	CHARACTER*1  MODE
	LOGICAL*1 IFND
d69 16
a84 13
	IFND=MOD(NROW,2).EQ.0
	NSC=NSAM/2+1
C
C	DO  1  J=1,NROW
C1	CALL  REDLIN(LUN1,Q(1,J),NSAM,J)
C	INV=+1
C	CALL  FMRS_2(Q,NSAM,NROW,INV)
C
	SCL=2.0/FLOAT(NSAM)/FLOAT(NROW)
	DO    J=1,NROW
	DO    I=NNNN-1,1,-2
	Q(NNNN-1-(NNNN-1-I)/2,J)=
     &		SCL*SQRT(Q(I+1,J)*Q(I+1,J)+Q(I,J)*Q(I,J))
a85 39
	IF(MODE.EQ.'L')  CALL  AL10(Q(NSAM/2,J),NSAM/2)
	ENDDO
C
	DO    J=1,NROW/2
	JJ=J+NROW/2+MOD(NROW,2)
	DO    I=NSC,NNNN-1
	TEMP=Q(I,J)
	Q(I,J)=Q(I,JJ)
	Q(I,JJ)=TEMP
	ENDDO
	ENDDO
C
	IF(.NOT.IFND)  THEN
	DO    I=NSC,NNNN-1
	TEMP=Q(I,NROW/2+1)
	DO    J=NROW/2+1,NROW-1
	Q(I,J)=Q(I,J+1)
	ENDDO
	Q(I,NROW)=TEMP
	ENDDO
	ENDIF	
C
	NSC=NNNN/2-1
	IF(IFND)  THEN
	JB=2
	DO    I=1,NSC
	II=NNNN-I
	Q(I,1)=Q(II,1)
	ENDDO
	ELSE
	JB=1
	ENDIF
	DO    J=JB,NROW
	JJ=NROW-J+JB
	DO    I=1,NSC
	II=NNNN-I
	Q(I,J)=Q(II,JJ)
	ENDDO
	ENDDO
@


1.2
log
@*** empty log message ***
@
text
@d27 1
a27 1
CNO_SAVE
@


1.1
log
@Initial revision
@
text
@d37 3
a39 3
	DO  101  J=1,NROW
	DO  102  I=NNNN-1,1,-2
102	Q(NNNN-1-(NNNN-1-I)/2,J)=
d41 3
a43 1
101	IF(MODE.EQ.'L')  CALL  AL10(Q(NSAM/2,J),NSAM/2)
d45 1
a45 1
	DO  100  J=1,NROW/2
d47 1
a47 1
	DO  100  I=NSC,NNNN-1
d50 3
a52 1
100	Q(I,JJ)=TEMP
d55 1
a55 1
	DO  103  I=NSC,NNNN-1
d57 5
a61 3
	DO  104  J=NROW/2+1,NROW-1
104	Q(I,J)=Q(I,J+1)
103	Q(I,NROW)=TEMP
d67 1
a67 1
	DO  106  I=1,NSC
d69 2
a70 1
106	Q(I,1)=Q(II,1)
d74 1
a74 1
	DO  107  J=JB,NROW
d76 1
a76 1
	DO  107  I=1,NSC
d78 3
a80 1
107	Q(I,J)=Q(II,JJ)
@
