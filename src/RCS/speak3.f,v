head	1.27;
access;
symbols
	pre_getangas:1.24
	GPL2010:1.23
	pre_GPL2010:1.22
	pre_var_equation:1.22
	pre_fftwrings:1.22
	pre_opfiles:1.22
	src:1.22
	best-code:1.22
	x-named-regs:1.22
	x:1.22
	v13-00:1.22
	pre_GPL:1.20
	prec_CA:1.14
	noindx:1.13
	Bproc:1.10
	oct21:1.7
	last77:1.7;
locks; strict;
comment	@c @;


1.27
date	2013.11.14.16.25.08;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2013.06.06.17.46.33;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2013.06.06.16.19.06;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2010.10.28.15.47.00;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.24.13.27.00;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.17.20.01.35;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2005.10.17.17.57.17;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2005.08.09.17.02.30;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2005.01.24.16.43.28;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.09.15.40.26;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2004.12.06.16.38.51;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2004.11.02.16.19.05;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2004.11.02.15.17.26;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.24.17.21.12;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.11.14.07.49;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2001.03.02.17.02.59;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.02.16.28.32;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.08.17.16.48.34;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2000.08.08.19.01.01;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.11.10.23.11.21;	author yuchen;	state Exp;
branches;
next	1.7;

1.7
date	98.01.23.16.44.33;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	95.09.28.18.00.55;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	95.09.21.14.52.25;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.09.20.16.40.19;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	95.03.01.15.31.12;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.11.16;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.59;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.27
log
@lundocret bug
@
text
@C++*********************************************************************
C
C SPEAK3.F
C               RESTRICTED DISTANCE                 NOV 04 ARDEAN LEITH
C               DOC FILE OPEN FOR 'PK 3' BUG        DEC 04 ARDEAN LEITH
C               NMAX LIMIT FOR DOC FILE OUTPUT      AUG 05 ARDEAN LEITH
C               LUNDOC CLOSURE BUG                  OCT 10 ARDEAN LEITH
C               PROMPTS, * FOR DOC                  JUN 13 ARDEAN LEITH
C               LUNDOCRET BUG                       NOV 13 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2013  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  SPEAK3(LUN,NX,NY,NZ,MAXDIM,OPT,LUNDOC)
C
C  PURPOSE:    SEARCHES FOR THE ML HIGHEST PEAKS IN A 
C              SPIDER VOLUME AND PRINTS OUT POSITIONS AND VALUES OF 
C              THESE PEAKS.
C
C  PARAMETERS:
C       LUN         LOGICAL UNIT NUMBER OF VOLUME
C       NX,NY,NZ    DIMENSIONS OF VOLUME
C       OPT         OUTPUT OPTION
C          OPT=' '  DEFAULT: NO DOCUMENT OUTPUT
C          OPT='D'  DOCUMENT OUTPUT: NUMBER,POSITION, AND VALUE
C                      OF PEAKS ARE WRITTEN INTO A DOCUMENT FILE
C          OPT='R'  DOCUMENT OUTPUT: NUMBER,POSITION, AND VALUE
C                      OF PEAKS WHICH ARE GREATED THAN RESTRICTED 
C                      DISTANCE FROM PREVIOUS PEAKS ARE WRITTEN INTO 
C                      DOCUMENT FILE
C       LUNDOC      LOGICAL UNIT NUMBER FOR DOCUMENT FILE
C
C      REGISTER POSITIONS 1= INTEGER X-SHIFT
C                         2= INTEGER Y-SHIFT
C                         3= INTEGER Z-SHIFT
C                         4= FLOATING X-SHIFT (CENTER OF GRAVITY)
C                         5= FLOATING Y-SHIFT (CENTER OF GRAVITY)
C                         6= FLOATING Z-SHIFT (CENTER OF GRAVITY)
C                         7= ABSOLUTE PEAK HEIGHT
C                         8= RATIO
C
C--*********************************************************************

         SUBROUTINE SPEAK3(LUN,NX,NY,NZ,OPTT,LUNDOC)

         INCLUDE 'CMBLOCK.INC'
         INCLUDE 'CMLIMIT.INC'

         CHARACTER(LEN=MAXNAM)      :: DOCNAM
         CHARACTER                  :: OPTT,OPT,OPTB,OPTC
         LOGICAL                    :: CGR,RESTRICT
         INTEGER                    :: NCTR(3)

C        RUN TIME ARRAYS
         LOGICAL, ALLOCATABLE       :: KEEP(:)
         REAL, ALLOCATABLE          :: QBUF(:,:,:)
         REAL, ALLOCATABLE          :: RPC(:,:)
         REAL, ALLOCATABLE          :: PEAK(:)
         INTEGER, ALLOCATABLE       :: NPC(:,:)
         CHARACTER                  :: NULL = CHAR(0)

         OPT      = OPTT
         RESTRICT =  (OPT == 'R')

         CALL RDPRMC(OPTB,NC,.TRUE.,'MAXIMA(+) OR MINIMA(-)',NULL,IRT)
         IF (IRT .NE. 0) RETURN

         IF (OPTB == '-') THEN
            SIGN = -1.0
         ELSE
            SIGN = +1.0
         ENDIF

         ML  = 1
         NOR = 0
         CALL RDPRIS(ML,NOR,NOT_USED,
     &      'NUMBER OF PEAKS, CENTER ORIGIN OVERRIDE (0/1)',IRT)
         IF (IRT .NE. 0) RETURN

         ML = MAX(ML,1)

         ELIPX = 1.0
         ELIPY = 1.0
         ELIPZ = 0.0

         IF (RESTRICT) THEN
           CALL RDPRM3S(ELIPX,ELIPY,ELIPZ,NOT_USED,
     &       'X, Y, & Z RADII OF OF EXCLUDED NEIGHBORHOOD',IRT)
           IF (IRT .NE. 0) GOTO 9000
           CGR = .FALSE. 
         ELSE
            CALL RDPRMC(OPTC,NC,.TRUE.,
     &              'CENTER OF GRAVITY CALCULATION? (Y/N)',NULL,IRT)
            IF (IRT .NE. 0) GOTO 9000

            CGR = (OPTC == 'Y') 
            IF (CGR) THEN
               CALL RDPRM3S(ELIPX,ELIPY,ELIPZ,NOT_USED,
     &                'X, Y, & Z RADII OF ELLIPSES',IRTFLG)
               IF (IRTFLG .NE. 0) GOTO 9000

               IF (ELIPZ <= 0) THEN
                  CALL RDPRM1S(ELIPZ,NOT_USED,
     &                     'Z-RADIUS OF ELLIPSES',IRTFLG)
                  IF (IRTFLG .NE. 0) GOTO 9000
               ENDIF
            ENDIF
         ENDIF

         IF (NOR .NE. 0)  THEN
            NCTR(1) =  0.0
            NCTR(2) =  0.0
            NCTR(3) = -1.0
            CALL RDPRI3S(NCTR(1),NCTR(2),NCTR(3),NOT_USED,
     &                'X, Y, & Z ORIGIN COORDINATES',IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 9000

            IF (NCTR(3) < 0) THEN
              CALL RDPRI1S(NCTR(3),NOT_USED,
     &                     'Z ORIGIN COORDINATE',IRTFLG)
              IF (IRTFLG .NE. 0) GOTO 9000
            ENDIF

            CALL RDPRI1S(NTAB,NOT_USED,
     &                 'PEAK NUMBER FOR RATIO',IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 9000

            NTAB = MAX(NTAB,1)
            IF (NTAB > ML)   THEN
               CALL ERRT(102,'PEAK NOT CONTAINED IN TABLE',NTAB)
               GOTO 9000
            ENDIF
         ELSE
            NTAB  = 1
            NCTR(1) = NX   / 2 + 1
            NCTR(2) = NY   / 2 + 1
            NCTR(3) = NZ / 2 + 1
         ENDIF

         CALL RDPRMC(OPTB,NC,.TRUE.,'BOX SELECTION?(Y/N)',NULL,IRT)
         IF (IRT .NE. 0) GOTO 9000

         IF (OPTB == 'Y') THEN
            CALL RDPRMI(NSA1,NSA2,NOT_USED,'LOWER, UPPER SAMPLE')
            CALL RDPRMI(NRO1,NRO2,NOT_USED,'LOWER, UPPER ROW')
            CALL RDPRMI(NSL1,NSL2,NOT_USED,'LOWER, UPPER SLICE')
         ELSE
            NSL1 = 1
            NSL2 = NZ
            NRO1 = 1
            NRO2 = NY
            NSA1 = 1
            NSA2 = NX
         ENDIF

         ALLOCATE (QBUF(NX,NY,3),PEAK(ML), 
     &             NPC(3,ML),RPC(3,ML),KEEP(ML), STAT=IRTFLG)
         IF (IRTFLG .NE. 0) THEN 
            MWANT = NX*NY*3 + 8*ML
            CALL ERRT(46,'KEEP,...',MWANT)
            GOTO 9000
         ENDIF

C        FIND PEAKS
         CALL PKSR3(LUN,QBUF,NX,NY,NZ,NSA1,NSA2,NRO1,NRO2,
     &              NSL1,NSL2,SIGN, PEAK, NPC, RPC, ML,NMAX)

         IF (NMAX .LE. 0)  THEN
            WRITE(NOUT,*)  ' *** No peaks found'
            GOTO 9000
         ENDIF


C        RESTRICT CALCULATION:
         IF (RESTRICT) THEN

C            INITIALIZE KEEP ARRAY
             KEEP = .TRUE.

             DO I = 1,NMAX-1
                XI   = RPC(1,I) 
                YI   = RPC(2,I) 
                ZI   = RPC(3,I) 

                DO J = I+1,NMAX
                   IF (KEEP(J)) THEN
C                     DETERMINE IF PEAK: J IS WITHIN ELIPSOID AROUND: I
                      XJ   = RPC(1,J) 
                      YJ   = RPC(2,J) 
                      ZJ   = RPC(3,J)

                      RZI = ((ZI - ZJ) / ELIPZ)**2
                      RYI = ((YI - YJ) / ELIPY)**2 + RZI
                      REL = ((XI - XJ) / ELIPX)**2 + RYI
 
C                     write(6,*) '(',i,',',j,')',xi,yi,zi, xj,yj,zj, rzi,ryi,rel
                      IF (REL <= 1.0) THEN
C                        INSIDE ELIPSOID, DISCARD J PEAK
                         KEEP(J) = .FALSE.
                         CYCLE
                      ENDIF
                   ENDIF
                ENDDO
             ENDDO

         ENDIF

C        CENTER OF GRAVITY CALCULATION:
         IF (CGR) THEN
            CALL CGR_3(LUN,QBUF,NX,NY,NZ,
     &                 ELIPX,ELIPY,ELIPZ,NPC,
     &                 RXCEN,RYCEN,RZCEN,RSUM)

            IF (RSUM .NE. 0.0)  THEN
               WRITE(NOUT,298)
298            FORMAT(/,'  The x,y,z coordinates of first peak ',
     &                  'replaced by center of gravity ',
     &                  'approximation within area specified.')
               RPC(1,1) = RXCEN
               RPC(2,1) = RYCEN
               RPC(3,1) = RZCEN
            ELSE
               WRITE(NOUT,297)
297            FORMAT(/,'  Center of gravity approximation within ',
     &                  'area specified cannot be calculated - ',
     &                  'negative values encountered.')
            ENDIF
         ENDIF

         LUNDOCRET = 0
         IF (OPT == 'R' .OR. OPT == 'D') THEN
C           OPEN DOC FILE HERE TO AVOID MSG IN RESULTS OUTPUT
            CALL OPENDOC(DOCNAM,.TRUE.,NLET,LUNDOC,LUNDOCRET,.TRUE.,
     &              'OUTPUT DOC.',.FALSE.,.TRUE.,.TRUE.,NEWFILE,IRTFLG)

            IF (IRTFLG .NE. 0) OPT  = ' '  ! NO DOC FILE WANTED
          ENDIF

         MLOUT = MIN(ML,NMAX)
         IF (MLOUT < ML) THEN
            WRITE(NOUT,90)MLOUT
90          FORMAT(/,'  ONLY: ',I5,' PEAKS FOUND')
         ENDIF

C        WRITE TO RESULTS AND DOC FILE

         CALL NEWROUT(LUNDOCRET,OPT,PEAK,NPC,RPC,NCTR,MLOUT,NTAB,KEEP)
         CLOSE(LUNDOC)

C        SET REGISTER VALUES (IF DESIRED) FOR FIRST PEAK
         CALL REG_SET_NSEL(1,5,FLOAT(NPC(1,1)),FLOAT(NPC(2,1)),
     &                         FLOAT(NPC(3,1)),RPC(1,1),RPC(2,1),
     &                         IRTFLG)

         CALL REG_SET_NSEL(6,2,RPC(3,1),PEAK(1),0.0, 0.0, 0.0, IRTFLG)

9000     IF (ALLOCATED(KEEP)) DEALLOCATE(KEEP)
         IF (ALLOCATED(PEAK)) DEALLOCATE(PEAK)
         IF (ALLOCATED(NPC))  DEALLOCATE(NPC)
         IF (ALLOCATED(RPC))  DEALLOCATE(RPC)
         IF (ALLOCATED(QBUF)) DEALLOCATE(QBUF)

         RETURN

         END

C++**************************** NEWROUT *******************************
C
C  PURPOSE:  WRITE PEAK PARAMETERS TO RESULTS AND DOC FILE
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

         SUBROUTINE NEWROUT(LUNDOC,OPT,PEAK,NPC,RPC,NCTR,ML,NTAB,KEEP)

         INCLUDE 'CMBLOCK.INC'

         INTEGER                 :: NPC(3,ML)  
         INTEGER                 :: NCTR (3)
         REAL                    :: RPC(3,ML) 
         REAL                    :: PEAK(ML) 
         LOGICAL                 :: KEEP(ML)
         CHARACTER               :: OPT

         REAL                    :: DLIST(9)
         LOGICAL                 :: RESTRICT
         CHARACTER               :: CDUM
         CHARACTER(LEN=120)      :: COMMENT
         INTEGER                 :: IRTFLG

         RESTRICT = (OPT == 'R')

C                   123456789 123456789 123456789 123456789 12345678
C                   9 123456789 123456789 123456789 123456789 1
C                   123456789 123456789 

         COMMENT = 'PEAK      PK-X          PK-Y          PK-Z     '//
     &             'SUB_PIX-X     SUB_PIX-Y     SUB_PIX-Z     ' //
     &             'PK-HEIGHT    HEIGHT-RATIO'

         IF (LUNDOC > 0) THEN
            CALL LUNDOCPUTCOM(LUNDOC,COMMENT,IRTFLG)
         ENDIF

         IF (VERBOSE) THEN

            WRITE(NOUT,*) ' '

C                      123456789 123456789 123456789 12345
C                      6789 123456789 123456789 123456789 123456789
C                      123456789 1
            COMMENT = ' NO  NX-O NY-O  NZ-O NX   NY   NZ '       //
     &                '     X        Y        Z    PEAK     RATIO'

            WRITE(NOUT,*)COMMENT(1:77)
         ENDIF

C        PEAK HEIGHT RATIO
         RTA = PEAK(NTAB)
         IF (RTA == 0.0)  RTA = 1.0

         NEWN = 0
         DO N=1,ML
            IF (RESTRICT) THEN
C             DO NOT MERGE IF, ALLOC ERROR ON SOME SYSTEMS
              IF (.NOT. KEEP(N)) CYCLE
            ENDIF
            NEWN = NEWN + 1

            DO M=1,3
               NPC(M,N) = NPC(M,N) - NCTR(M)
               RPC(M,N) = RPC(M,N) - NCTR(M)
            ENDDO

            IF (VERBOSE) THEN
               WRITE(NOUT,701) NEWN,
     &            (NPC(M,N)+NCTR(M),M=1,3),
     &            (NPC(M,N),M=1,3),
     &            (RPC(M,N),M=1,3), 
     &             PEAK(N), 
     &             PEAK(N) / RTA
701            FORMAT(1X,I3,6I5,3(1X,F8.2),2(1X,G9.2))
            ENDIF

            IF (OPT == 'D' .OR. RESTRICT) THEN
               DLIST(1) = NEWN
               DLIST(2) = NPC(1,N)
               DLIST(3) = NPC(2,N)
               DLIST(4) = NPC(3,N)
               DLIST(5) = RPC(1,N)
               DLIST(6) = RPC(2,N)
               DLIST(7) = RPC(3,N)
               DLIST(8) = PEAK(N)
               DLIST(9) = PEAK(N)/RTA

               CALL LUNDOCWRTDAT(LUNDOC,NEWN,DLIST(2),8,IRTFLG)
            ENDIF
         ENDDO

         IF (RESTRICT .AND. VERBOSE) THEN
            WRITE(NOUT,90) NEWN,ML
90          FORMAT(/,'  Retained: ',I8,' peaks out of: ',I8)
         ENDIF

         IF (VERBOSE) WRITE(NOUT,*) ' '

         END

@


1.26
log
@*** empty log message ***
@
text
@d9 1
d115 1
a115 1
            CGR = (OPTC .EQ .'Y') 
d249 1
d252 1
a252 1
            CALL OPENDOC(DOCNAM,.TRUE.,NLET,LUNDOC,LULUNDOCRET,.TRUE.,
d255 2
a256 2
            IF (IRTFLG .NE. 0)  OPT = ' '  ! NO DOC FILE WANTED
         ENDIF
d265 2
a266 1
         CALL NEWROUT(LULUNDOCRET,OPT,PEAK,NPC,RPC,NCTR,MLOUT,NTAB,KEEP)
d320 3
a322 1
         CALL LUNDOCPUTCOM(LUNDOC,COMMENT,IRTFLG)
d360 1
a360 1
     &             PEAK(N)/RTA
@


1.25
log
@prompts, * for doc, nx
@
text
@d62 1
a62 1
         SUBROUTINE SPEAK3(LUN,NX,NY,NZ,OPT,LUNDOC)
d68 1
a68 1
         CHARACTER                  :: OPT,OPTB,OPTC
d80 1
d252 2
a253 1
            IF (IRTFLG .NE. 0) GOTO 9000
@


1.24
log
@ CLOSE(NDOC) but had NICDOC < 0
@
text
@d7 2
a8 1
C               NDOC CLOSURE BUG                    OCT 10 ARDEAN LEITH
d14 1
a14 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d32 1
a32 1
C  SPEAK3(LUN,NSAM,NROW,NSLICE,MAXDIM,OPT,NDOC)
d39 3
a41 3
C       LUN                 LOGICAL UNIT NUMBER OF VOLUME
C       NSAM,NROW,NSLICE    DIMENSIONS OF VOLUME
C       OPT                 OUTPUT OPTION
a42 2
C          OPT='X'  (I.E.,REGISTER LIST FOLLOWING): NO DOCUMENT OUTPUT
C                      BUT OUTPUT OF POSITION & VALUE OF PEAK IN REGISTERS)
d49 1
a49 1
C       NDOC               LOGICAL UNIT NUMBER FOR DOCUMENT FILE
d62 1
a62 1
         SUBROUTINE SPEAK3(LUN,NSAM,NROW,NSLICE,OPT,NDOC)
d67 4
a70 4
         CHARACTER(LEN=MAXNAM)                :: DOCNAM
         CHARACTER                            :: OPT,NULL,OPTB,OPTC
         LOGICAL                              :: CGR,RESTRICT
         INTEGER, DIMENSION(3)                :: NCTR
d73 6
a78 5
         LOGICAL, ALLOCATABLE, DIMENSION(:)   :: KEEP
         REAL, ALLOCATABLE, DIMENSION(:,:,:)  :: QBUF
         REAL, ALLOCATABLE, DIMENSION(:,:)    :: RPC
         REAL, ALLOCATABLE, DIMENSION(:)      :: PEAK
         INTEGER, ALLOCATABLE, DIMENSION(:,:) :: NPC
d80 1
a80 1
         NULL = CHAR(0)
d82 1
a82 3
         RESTRICT =  (OPT .EQ. 'R')

         CALL RDPRMC(OPTB,NC,.TRUE.,'MAXIMA(+) OR MINIMA(-)?',NULL,IRT)
d85 1
a85 1
         IF (OPTB .EQ. '-') THEN
d94 1
a94 1
     &      'ENTER NUMBER OF PEAKS, CENTER ORIGIN OVERRIDE (0/1)',IRT)
d105 1
a105 1
     &       'X, Y, & Z RADII OF RESTRICTED NEIGHBORHOOD ELLIPSOID',IRT)
d110 1
a110 1
     &              'CENTER OF GRAVITY CALCULATION(Y/N)?',NULL,IRT)
d119 1
a119 1
               IF (ELIPZ .LE. 0) THEN
d132 1
a132 1
     &                'X, Y & Z ORIGIN COORDINATES',IRTFLG)
d135 1
a135 1
            IF (NCTR(3) .LT. 0) THEN
d142 1
a142 1
     &                 'ENTER PEAK NUMBER FOR RATIO',IRTFLG)
d146 3
a148 3
            IF (NTAB .GT. ML)   THEN
               CALL ERRT(25,'SPEAK3',NE)
               RETURN
d152 3
a154 3
            NCTR(1) = NSAM/2+1
            NCTR(2) = NROW/2+1
            NCTR(3) = NSLICE/2+1
d160 1
a160 1
         IF (OPTB .EQ. 'Y') THEN
d166 1
a166 1
            NSL2 = NSLICE
d168 1
a168 1
            NRO2 = NROW
d170 1
a170 1
            NSA2 = NSAM
d173 1
a173 1
         ALLOCATE (QBUF(NSAM,NROW,3),PEAK(ML), 
d176 1
a176 1
            MWANT = NSAM*NROW*3 + 8*ML
d182 1
a182 1
         CALL PKSR3(LUN,QBUF,NSAM,NROW,NSLICE,NSA1,NSA2,NRO1,NRO2,
d213 2
a214 2
C           write(6,*) '(',i,',',j,')',xi,yi,zi, xj,yj,zj, rzi,ryi,rel
                      IF (REL .LE. 1.0) THEN
d227 1
a227 1
            CALL CGR_3(LUN,QBUF,NSAM,NROW,NSLICE,
d247 1
a247 1
         IF (OPT .EQ. 'R' .OR. OPT .EQ. 'D') THEN
d249 1
a249 1
            CALL OPENDOC(DOCNAM,.TRUE.,NLET,NDOC,NICDOC,.TRUE.,
a253 1
C        WRITE TO DOC FILE
d255 1
a255 1
         IF (MLOUT .LT. ML) THEN
d259 4
a262 2
         CALL NEWROUT(NICDOC,OPT,PEAK,NPC,RPC,NCTR,MLOUT,NTAB,KEEP)
         CLOSE(NDOC)
d282 2
a283 1
C  PURPOSE:  WRITE PEAK PARAMETERS TO DOC FILE
d288 1
a288 1
         SUBROUTINE NEWROUT(NDOC,OPT,PEAK,NPC,RPC,NCTR,ML,NTAB,KEEP)
d292 5
a296 5
         INTEGER,DIMENSION(3,ML) :: NPC  
         INTEGER,DIMENSION(3)    :: NCTR 
         REAL,DIMENSION(3,ML)    :: RPC 
         REAL,DIMENSION(ML)      :: PEAK 
         LOGICAL,DIMENSION(ML)   :: KEEP
d299 1
a299 1
         REAL,DIMENSION(9)       :: DLIST
d302 4
d307 9
a315 1
         RESTRICT = (OPT .EQ. 'R')
d318 10
a327 4
            WRITE(NOUT,299)
299         FORMAT(/,' NO ',' NSAM NROW  NSL ','  NX   NY   NZ ',
     &              '     X        Y        Z    ',
     &              'VALUE    RATIO')
d332 1
a332 1
         IF (RTA .EQ. 0.0)  RTA = 1.0
d357 1
a357 1
            IF (OPT .EQ. 'D' .OR. RESTRICT) THEN
d367 2
a368 1
               CALL LUNDOCWRTDAT(NDOC,NEWN,DLIST(2),8,IRTFLG)
d373 2
a374 2
            WRITE(NOUT,90)NEWN,ML
90          FORMAT(/,'  RETAINED: ',I8,' PEAKS OUT OF: ',I8)
d379 1
a379 2
         CALL  SAVDC

a380 1
         END
@


1.23
log
@GPL_2010
@
text
@d4 4
a7 3
C               RESTRICTED DISTANCE                NOV. 04 ARDEAN LEITH
C               DOC FILE OPEN FOR 'PK 3' BUG       DEC. 04 ARDEAN LEITH
C               NMAX LIMIT FOR DOC FILE OUTPUT     AUG. 05 ARDEAN LEITH
d43 1
a43 1
C                     BUT OUTPUT OF POSITION & VALUE OF PEAK IN REGISTERS)
d263 1
d358 1
a358 1
         IF (VERBOSE) WRITE(NOUT,*)
a360 1
         CLOSE(NDOC)
@


1.22
log
@GPL License fixed
@
text
@a8 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d10 5
a14 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d16 1
a16 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.21
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a8 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d12 1
a12 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a31 6

C * COPYRIGHT (C)1985, 2004. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a64 1
C--************************************************************************
a288 1
C--************************************************************************
@


1.20
log
@ NMAX LIMIT FOR DOC FILE OUTPUT
@
text
@d1 1
d11 24
d72 1
d297 1
@


1.19
log
@ no output bug
@
text
@d4 3
a6 2
C               RESTRICTED DISTANCE                NOV. O4 ARDEAN LEITH
C               DOC FILE OPEN FOR 'PK 3' BUG       DEC. O4 ARDEAN LEITH
d243 6
a248 1
         CALL NEWROUT(NICDOC,OPT,PEAK,NPC,RPC,NCTR,ML,NTAB,KEEP)
@


1.18
log
@doc file shud not open for pk 3
@
text
@d239 1
d241 2
a242 3
C           WRITE TO DOC FILE
            CALL NEWROUT(NICDOC,OPT,PEAK,NPC,RPC,NCTR,ML,NTAB,KEEP)
         ENDIF
@


1.17
log
@removed_debug_output
@
text
@d4 2
a5 1
C                          RESTRICTED DISTANCE    NOV. O4 ARDEAN LEITH
d234 3
a236 2
C        OPEN DOC FILE HERE TO AVOID MSG IN RESULTS OUTPUT
         CALL OPENDOC(DOCNAM,.TRUE.,NLET,NDOC,NICDOC,.TRUE.,
d238 1
a238 1
         IF (IRTFLG .NE. 0) GOTO 9000
d240 3
a242 4
C        WRITE TO DOC FILE
C         write(6,*)ndoc,nicdoc

         CALL NEWROUT(NICDOC,OPT,PEAK,NPC,RPC,NCTR,ML,NTAB,KEEP)
@


1.16
log
@nothing
@
text
@d239 1
a239 1
         write(6,*)ndoc,nicdoc
@


1.15
log
@PK 3R
@
text
@d199 1
a199 1
           write(6,*) '(',i,',',j,')',xi,yi,zi, xj,yj,zj, rzi,ryi,rel
@


1.14
log
@removed nout from rout call
@
text
@d4 1
d8 1
a8 1
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
d15 1
a15 1
C  SPEAK3(FILNAM,LUN,NSAM,NROW,NSLICE,MAXDIM,OPT,NDOC)
d17 2
a18 2
C  PURPOSE:    SEARCHES FOR THE ML HIGHEST PEAKS IN THE (REAL)
C              VOLUME FILNAM AND PRINTS OUT POSITIONS AND VALUES OF 
d22 1
a22 2
C       FILNAM       LOGICAL*1 ARRAY, CONTAINING FILE NAME
C       LUN          LOGICAL UNIT NUMBER OF IMAGE
d24 1
a24 2
C       MAXDIM      MAXIMUM BUFFER SPACE AVAILABLE
C       OPT         OUTPUT OPTION
d27 1
a27 1
C                   BUT OUTPUT OF POSITION & VALUE OF PEAK IN REGISTERS)
d29 6
a34 2
C                    OF PEAKS ARE WRITTEN INTO A DOCUMENT FILE
C       NDOC        LOGICAL UNIT NUMBER FOR DOCUMENT FILE
d47 1
a47 1
         SUBROUTINE SPEAK3(FILNAM,LUN,NSAM,NROW,NSLICE,MAXDIM,OPT,NDOC)
d50 1
a50 2
         COMMON BUF(1)
C        dimension  peak(npeak),npc(3,npeak),rpc(3,npeak)
d52 11
a62 8
         DIMENSION      NCTR(3)
         EQUIVALENCE    (NXCTR,NCTR(1)),(NYCTR,NCTR(2)),(NZCTR,NCTR(3))
         INTEGER*4      IBUF(1)
         EQUIVALENCE    (BUF,IBUF)

         CHARACTER *(*) FILNAM
         CHARACTER      OPT,NULL,OPTB,OPTC
         LOGICAL        CGR
d66 2
d69 1
d72 1
a72 1
            SIGN=-1.0
d74 1
a74 1
            SIGN=+1.0
d77 19
a95 5
         CALL RDPRMI(ML,NOR,NOT_USED,
     &              'ENTER # OF PEAKS,CENTER ORIGIN OVERRIDE(0/1)')
         ML = MAX0(ML,1)

         CALL RDPRMC(OPTC,NC,.TRUE.,
d97 1
a97 1
         CGR= (OPTC .EQ .'Y') 
d99 12
a110 4
         IF (CGR) THEN
            CALL RDPRM2(ELIPX,ELIPY,NOT_USED, 
     &                  'X-Y RADIUS OF ELLIPSES')
            CALL RDPRM (ELIPZ,NOT_USED,'Z-RADIUS OF ELLIPSES')
d113 17
a129 4
         IF (MAXDIM.LT.3*NROW*NSAM+7*ML) THEN
            CALL ERRT(6,'SPEAK3',NE)
            RETURN
         ENDIF
d131 2
a132 8
         IF (NOR .NE. 0)  THEN
            CALL RDPRMI(NXCTR,NYCTR,NOT_USED,
     &                  'X,Y ORIGIN COORDINATES')
            CALL RDPRMI(NZCTR,NDUM, NOT_USED,'Z ORIGIN COORDINATE')
            CALL RDPRMI(NTAB,NDUM,  NOT_USED,
     &                 'ENTER PEAK NUMBER FOR RATIO')
            NTAB=MAX0(NTAB,1)
            IF (NTAB.GT.ML)   THEN
d138 3
a140 3
            NXCTR = NSAM/2+1
            NYCTR = NROW/2+1
            NZCTR = NSLICE/2+1
d144 2
d159 50
a208 13
         K1   = 1
         K2   = K1+3*NSAM*NROW
         K3   = K2+ML
         K4   = K3+3*ML
         K5   = K4+3*ML
         NMAX = 0
         CALL  PKSR3(LUN,BUF(K1),NSAM,NROW,NSLICE,NSA1,NSA2,NRO1,NRO2,
     &              NSL1,NSL2,SIGN,BUF(K2),BUF(K3),BUF(K4),ML,NMAX)
C    &                peak,   npc,    rpc,   ML,NMAX)

         IF (NMAX .EQ. 0)  THEN
            WRITE(NOUT,*)  ' No peaks found'
            RETURN
d213 4
a216 3
            CALL CGR_3
     &         (LUN,BUF(K1),NSAM,NROW,NSLICE,ELIPX,ELIPY,ELIPZ,BUF(K3),
     &         RXCEN,RYCEN,RZCEN,RSUM)
d219 6
a224 6
298            FORMAT(/
     &      '  The x,y,z coordinates of first peak replaced by the',/,
     &     ' center of gravity approximation within the area specified')
               BUF(K4)=RXCEN
               BUF(K4+1)=RYCEN
               BUF(K4+2)=RZCEN
d227 3
a229 3
297            FORMAT(/
     & '   Center of gravity approximation within the area specified',/,
     &         '  cannot be calculated - negative values encountered')
d233 104
a336 1
         CALL  ROUT(NDOC,OPT,BUF(K2),IBUF(K3),BUF(K4),NCTR,ML,NTAB)
d338 2
a339 2
         CALL REG_SET_NSEL(1,5,FLOAT(IBUF(K3)),FLOAT(IBUF(K3+1)),
     &                       FLOAT(IBUF(K3+2)),BUF(K4),BUF(K4+1),IRTFLG)
a340 2
         CALL REG_SET_NSEL(6,2,BUF(K4+2),BUF(K2),
     &                       0.0, 0.0, 0.0, IRTFLG)
@


1.13
log
@nloop,iloop_removed
@
text
@d156 1
a156 1
         CALL  ROUT(NOUT,NDOC,OPT,BUF(K2),IBUF(K3),BUF(K4),NCTR,ML,NTAB)
@


1.12
log
@line-length typo
@
text
@d69 1
a69 1
         CALL RDPRMI(ML,NOR,NLOOP,ILOOP,
d78 1
a78 1
            CALL RDPRM2(ELIPX,ELIPY,NLOOP,ILOOP, 
d80 1
a80 1
            CALL RDPRM (ELIPZ,NLOOP,ILOOP,'Z-RADIUS OF ELLIPSES')
d89 1
a89 1
            CALL RDPRMI(NXCTR,NYCTR,NLOOP,ILOOP,
d91 2
a92 2
            CALL RDPRMI(NZCTR,NDUM, NLOOP,ILOOP,'Z ORIGIN COORDINATE')
            CALL RDPRMI(NTAB,NDUM,  NLOOP,ILOOP,
d108 3
a110 3
            CALL RDPRMI(NSA1,NSA2,NLOOP,ILOOP,'LOWER, UPPER SAMPLE')
            CALL RDPRMI(NRO1,NRO2,NLOOP,ILOOP,'LOWER, UPPER ROW')
            CALL RDPRMI(NSL1,NSL2,NLOOP,ILOOP,'LOWER, UPPER SLICE')
@


1.11
log
@cosmetic
@
text
@d74 1
a74 1
     &              'CENTER OF GRAVITY CALCULATION(Y/N)?' NULL,IRT)
d78 2
a79 1
            CALL RDPRM2(ELIPX,ELIPY,NLOOP,ILOOP, 'X-Y RADIUS OF ELLIPSES')
@


1.10
log
@*** empty log message ***
@
text
@d5 8
a12 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
C **************************************************************************
d16 8
a23 9
C  PURPOSE:    SEARCH FOR HIGHEST PEAKS IN 3-D DENSITY DISTRIBUTION
C
C       THIS SUBROUTINE SEARCHES FOR THE ML HIGHEST PEAKS IN THE (REAL)
C       VOLUME FILNAM AND PRINTS OUT POSITIONS AND VALUES OF THESE PEAKS.
C
C       CALL SPEAK3(FILNAM,LUN,NSAM,NROW,NSLICE,MAXDIM,OPT,NDOC)
C         FILNAM       LOGICAL*1 ARRAY, CONTAINING FILE NAME
C         LUN          LOGICAL UNIT NUMBER OF IMAGE
C         NSAM,NROW,NSLICE    DIMENSIONS OF VOLUME
d25 16
a40 7
C       OPT  OUTPUT OPTION
C       OPT=' ' DEFAULT:NO DOCUMENT OUTPUT
C       OPT='X' (I.E.,REGISTER LIST FOLLOWING):NO DOCUMENT OUTPUT
C                 BUT OUTPUT OF POSITION & VALUE OF PEAK IN REGISTERS)
C       OPT='D'   DOCUMENT OUTPUT:NUMBER,POSITION, AND VALUE
C       OF PEAKS ARE WRITTEN INTO A DOCUMENT FILE
C       NDOC  LOGICAL UNIT NUMBER FOR DOCUMENT FILE
a41 8
C     REGISTER POSITIONS 1= INTEGER X-SHIFT
C          2= INTEGER Y-SHIFT
C                          3= INTEGER Z-SHIFT
C                          4= FLOATING X-SHIFT (CENTER OF GRAVITY)
C                          5= FLOATING Y-SHIFT (CENTER OF GRAVITY)
C                          6= FLOATING Z-SHIFT (CENTER OF GRAVITY)
C          7= ABSOLUTE PEAK HEIGHT
C                          8= RATIO
d49 5
a53 4
         DIMENSION  NCTR(3)
         EQUIVALENCE  (NXCTR,NCTR(1)),(NYCTR,NCTR(2)),(NZCTR,NCTR(3))
         INTEGER*4  IBUF(1)
         EQUIVALENCE  (BUF,IBUF)
d68 1
d71 9
a79 7
         ML=MAX0(ML,1)
      CALL RDPRMC(OPTC,NC,.TRUE.,'CENTER OF GRAVITY CALCULATION(Y/N)?'
     $   ,NULL,IRT)
         IF (OPTC.EQ.'Y') THEN
            CGR=.TRUE.
         ELSE
            CGR=.FALSE.
d81 1
a81 3
         IF(CGR) CALL RDPRM2(ELIPX,ELIPY,NLOOP,ILOOP,
     &      'X-Y RADIUS OF ELLIPSES')
         IF(CGR) CALL RDPRM (ELIPZ,NLOOP,ILOOP,'Z-RADIUS OF ELLIPSES')
d86 12
a97 9
         IF(NOR.NE.0)  THEN
         CALL RDPRMI(NXCTR,NYCTR,NLOOP,ILOOP,'X,Y ORIGIN COORDINATES')
         CALL RDPRMI(NZCTR,NDUM, NLOOP,ILOOP,'Z ORIGIN COORDINATE')
      CALL RDPRMI(NTAB,NDUM,  NLOOP,ILOOP,'ENTER PEAK NUMBER FOR RATIO')
         NTAB=MAX0(NTAB,1)
         IF (NTAB.GT.ML)   THEN
            CALL ERRT(25,'SPEAK3',NE)
            RETURN
         ENDIF
d99 4
a102 4
            NTAB=1
            NXCTR=NSAM/2+1
            NYCTR=NROW/2+1
            NZCTR=NSLICE/2+1
d104 1
a104 1
C
d111 6
a116 6
            NSL1=1
            NSL2=NSLICE
            NRO1=1
            NRO2=NROW
            NSA1=1
            NSA2=NSAM
d118 7
a124 7
C
         K1=1
         K2=K1+3*NSAM*NROW
         K3=K2+ML
         K4=K3+3*ML
         K5=K4+3*ML
         NMAX=0
d126 1
a126 1
     &   NSL1,NSL2,SIGN,BUF(K2),BUF(K3),BUF(K4),ML,NMAX)
d128 4
a131 4
C
         IF(NMAX.EQ.0)  THEN
         WRITE(NOUT,*)  ' No peaks found'
         RETURN
d133 20
a152 20
C
C CENTER OF GRAVITY CALCULATION:
         IF(CGR) THEN
         CALL  CGR_3
     &      (LUN,BUF(K1),NSAM,NROW,NSLICE,ELIPX,ELIPY,ELIPZ,BUF(K3),
     &      RXCEN,RYCEN,RZCEN,RSUM)
         IF(RSUM.NE.0.0)  THEN
            WRITE(NOUT,298)
298         FORMAT(/
     &   '  The x,y,z coordinates of first peak replaced by the',/,
     &   ' center of gravity approximation within the area specified')
            BUF(K4)=RXCEN
            BUF(K4+1)=RYCEN
            BUF(K4+2)=RZCEN
         ELSE
            WRITE(NOUT,297)
297         FORMAT(/
     & '  Center of gravity approximation within the area specified',/,
     &   '  cannot be calculated - negative values encountered')
         ENDIF
@


1.9
log
@used reg_set_nsel
@
text
@d3 1
a3 1
C $$ SPEAK3.FOR
d153 1
a153 1
         CALL REG_SET_NSEL(1,FLOAT(IBUF(K3)),FLOAT(IBUF(K3+1)),
d156 1
a156 1
         CALL REG_SET_NSEL(6,BUF(K4+2),BUF(K2),
@


1.8
log
@a
@
text
@a14 9
C
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--************************************************************************
C
C $$ SPEAK3.FOR
C
         SUBROUTINE SPEAK3(FILNAM,LUN,NSAM,NROW,NSLICE,MAXDIM,OPT,NDOC)
C
a34 8
         INCLUDE 'CMBLOCK.INC'
         COMMON BUF(1)
C     dimension  peak(npeak),npc(3,npeak),rpc(3,npeak)
         DIMENSION  NCTR(3)
         EQUIVALENCE  (NXCTR,NCTR(1)),(NYCTR,NCTR(2)),(NZCTR,NCTR(3))
         INTEGER*4  IBUF(1)
         EQUIVALENCE  (BUF,IBUF)

d43 11
d62 1
d64 1
a64 1
         SIGN=-1.0
d66 1
a66 1
         SIGN=+1.0
d69 1
a69 1
     &   'ENTER # OF PEAKS,CENTER ORIGIN OVERRIDE(0/1)')
d74 1
a74 1
         CGR=.TRUE.
d76 1
a76 1
         CGR=.FALSE.
d79 1
a79 1
     &   'X-Y RADIUS OF ELLIPSES')
d81 3
a83 3
         IF(MAXDIM.LT.3*NROW*NSAM+7*ML) THEN
         CALL ERRT(6,'SPEAK3',NE)
         RETURN
d90 3
a92 3
         IF(NTAB.GT.ML)   THEN
         CALL ERRT(25,'SPEAK3',NE)
         RETURN
d95 4
a98 4
         NTAB=1
         NXCTR=NSAM/2+1
         NYCTR=NROW/2+1
         NZCTR=NSLICE/2+1
d103 3
a105 3
         CALL RDPRMI(NSA1,NSA2,NLOOP,ILOOP,'LOWER, UPPER SAMPLE')
         CALL RDPRMI(NRO1,NRO2,NLOOP,ILOOP,'LOWER, UPPER ROW')
         CALL RDPRMI(NSL1,NSL2,NLOOP,ILOOP,'LOWER, UPPER SLICE')
d107 6
a112 6
         NSL1=1
         NSL2=NSLICE
         NRO1=1
         NRO2=NROW
         NSA1=1
         NSA2=NSAM
d133 2
a134 2
     &   (LUN,BUF(K1),NSAM,NROW,NSLICE,ELIPX,ELIPY,ELIPZ,BUF(K3),
     &   RXCEN,RYCEN,RZCEN,RSUM)
d136 2
a137 2
         WRITE(NOUT,298)
298      FORMAT(/
d140 3
a142 3
         BUF(K4)=RXCEN
         BUF(K4+1)=RYCEN
         BUF(K4+2)=RZCEN
d144 2
a145 2
         WRITE(NOUT,297)
297      FORMAT(/
d150 1
a150 2
C
         CALL PDATES(FILNAM,0)
d152 7
a158 7
         IF (NSEL(1).NE.0)       PARAM(NSEL(1)) = IBUF(K3)
         IF (NSEL(2).NE.0)       PARAM(NSEL(2)) = IBUF(K3+1)
         IF (NSEL(3).NE.0)       PARAM(NSEL(3)) = IBUF(K3+2)
         IF (NSEL(4).NE.0)       PARAM(NSEL(4)) = BUF(K4)
         IF (NSEL(5).NE.0)       PARAM(NSEL(5)) = BUF(K4+1)
         IF (NSEL(6).NE.0)       PARAM(NSEL(6)) = BUF(K4+2)
         IF (NSEL(7).NE.0)       PARAM(NSEL(7)) = BUF(K2)
@


1.7
log
@*** empty log message ***
@
text
@d51 1
a51 1
CNO_SAVE
@


1.6
log
@corrected
@
text
@a43 1
#ifdef SP_UNIX
a44 3
#else
         INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
@


1.5
log
@registers fixed
@
text
@d51 1
a51 1
         DIMENSION  NCTR(3),NPCH(3)
d53 2
d161 4
a164 5
         CALL  ROUT(NOUT,NDOC,OPT,BUF(K2),BUF(K3),BUF(K4),NCTR,NPCH,
     &                ML,NTAB)
         IF (NSEL(1).NE.0)       PARAM(NSEL(1)) = NPCH(1)
         IF (NSEL(2).NE.0)       PARAM(NSEL(2)) = NPCH(2)
         IF (NSEL(3).NE.0)       PARAM(NSEL(3)) = NPCH(3)
@


1.4
log
@change EQ to NE 0 for registers
@
text
@d51 1
a51 1
         DIMENSION  NCTR(3)
d159 5
a163 4
         CALL  ROUT(NOUT,NDOC,OPT,BUF(K2),BUF(K3),BUF(K4),NCTR,ML,NTAB)
         IF (NSEL(1).NE.0)       PARAM(NSEL(1)) = BUF(K3)
         IF (NSEL(2).NE.0)       PARAM(NSEL(2)) = BUF(K3+1)
         IF (NSEL(3).NE.0)       PARAM(NSEL(3)) = BUF(K3+2)
@


1.3
log
@nosave
@
text
@d160 7
a166 7
         IF (NSEL(1).EQ.0)       PARAM(NSEL(1)) = BUF(K3)
         IF (NSEL(2).EQ.0)       PARAM(NSEL(2)) = BUF(K3+1)
         IF (NSEL(3).EQ.0)       PARAM(NSEL(3)) = BUF(K3+2)
         IF (NSEL(4).EQ.0)       PARAM(NSEL(4)) = BUF(K4)
         IF (NSEL(5).EQ.0)       PARAM(NSEL(5)) = BUF(K4+1)
         IF (NSEL(6).EQ.0)       PARAM(NSEL(6)) = BUF(K4+2)
         IF (NSEL(7).EQ.0)       PARAM(NSEL(7)) = BUF(K2)
@


1.2
log
@cpp_lines_added
@
text
@d53 1
a53 1

@


1.1
log
@Initial revision
@
text
@d44 3
d48 1
@
