head	1.24;
access;
symbols
	pre_getangas:1.24
	GPL2010:1.24
	pre_GPL2010:1.23
	pre_var_equation:1.22
	pre_fftwrings:1.22
	pre_opfiles:1.22
	src:1.22
	best-code:1.22
	named-reg:1.22
	x-named-regs:1.21
	x:1.21
	v13-00:1.21
	pre_GPL:1.20
	prec_CA:1.20
	noindx:1.20
	Bproc:1.20
	oct21:1.18
	last77:1.18;
locks; strict;
comment	@c @;


1.24
date	2010.06.24.13.25.33;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2009.11.10.19.28.02;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2005.12.12.15.26.52;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2005.10.17.20.58.27;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2000.03.28.14.56.11;	author pawel;	state Exp;
branches;
next	1.19;

1.19
date	99.11.10.23.09.16;	author yuchen;	state Exp;
branches;
next	1.18;

1.18
date	98.06.01.13.11.12;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	98.04.21.19.56.03;	author pawel;	state Exp;
branches;
next	1.16;

1.16
date	98.04.16.21.26.32;	author pawel;	state Exp;
branches;
next	1.15;

1.15
date	98.04.16.17.44.21;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	98.03.31.20.05.34;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	98.03.31.14.43.26;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	98.03.27.18.55.46;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	98.03.26.15.49.41;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	98.03.25.19.13.51;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	98.03.25.16.00.06;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	98.03.23.18.30.44;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.10.14.15.25.03;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	97.03.20.17.20.37;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	97.02.13.20.38.06;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	95.09.11.19.34.58;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.02.07.16.23.03;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.08.29.14.00.04;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.48.33;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.24
log
@GPL_2010
@
text
@C++*************************************************** 12/11/79 1/11/81 VAX
C
C EVALNQ.F                    ADAPTED FROM EVALN.FOR FOR CHAR AUG 89 AL
C                             REWRITTEN FOR POLISH EVAN CHEN  MAR 98 EC
C                             REWRITTEN                       MAY 98 AL
C                             IRTFLG RETURNED IF NRPN=0       NOV 09 AL
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C EVALNQ(EXPR,NLET,RETVALUE,IRTFLG)
C
C PURPOSE:   EVALUATES EXPRESSIONS, RETURNS VALUE
C
C       EXPR       CHARACTER STRING CONTAINING EXPRESSION     (SENT)
C       NLET       LENGTH OF EXPR                             (SENT)
C       RETVALUE   RETURNED VALUE OF EXPRESSION               (RETURNED)
C       IRTFLG     ERROR FLAG                                 (RETURNED)
C 
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

	SUBROUTINE EVALNQ(ISTACK,EXPR,NLET,RETVALUE,IRTFLG)

        CHARACTER(LEN=*)      :: EXPR

        INTEGER,PARAMETER     :: IVALEN  = 40  ! RPN LENGTH LIMIT
        INTEGER,PARAMETER     :: IRPNLEN = 80  ! RPN LENGTH LIMIT
        INTEGER,PARAMETER     :: LENEXP  = 80  ! EXPR LENGTH LIMIT

        INTEGER               :: IRPN(IRPNLEN)
        REAL                  :: VAL(IVALEN)

C       CONVERT EXPR TO REVERSE POLISH NOTATION ARRAY 
	CALL POLISH(ISTACK,EXPR(1:NLET),NLET,
     &               IRPN,NRPN,VAL,NVAL,IRTFLG)

        IF (IRTFLG .NE. 0 .OR. NRPN .EQ. 0) THEN
C          EMPTY OR UNDECIPHERABLE EXPRESSION
           IRTFLG = 1
           RETURN
        ENDIF

C       EVALUATE RPN EXPRESSION, PIXVAL IS NOT USED HERE
	CALL CALC(IRPN,NRPN,VAL,PIXVAL,RETVALUE,IRTFLG)

	END
@


1.23
log
@IRTFLG RETURNED IF NRPN=0
@
text
@d9 3
a11 3
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
C=* Copyright 1985-2009  Health Research Inc.,                         *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
@


1.22
log
@native named registers
@
text
@d5 2
a6 1
C                             REWRITTEN  MAY 98 AL
a7 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d9 5
a13 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d15 1
a15 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d56 6
a61 1
        IF (IRTFLG .NE. 0) RETURN
@


1.21
log
@GPL License fixed
@
text
@d44 1
a44 1
	SUBROUTINE EVALNQ(EXPR,NLET,RETVALUE,IRTFLG)
d46 8
a53 5
        CHARACTER *(*)  EXPR
        PARAMETER       (IVALEN  = 40)
        PARAMETER       (IRPNLEN = 80)
        INTEGER         IRPN(IRPNLEN)
	DIMENSION       VAL(IVALEN)
d56 2
a57 1
	CALL POLISH(EXPR,NLET,IRPN,NRPN,VAL,NVAL,IRTFLG)
d60 1
a60 2
C       EVALUATE RPN EXPRESSION
C       PIXVAL IS NOT USED HERE
@


1.20
log
@rann added
@
text
@d7 23
a29 7
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
@


1.19
log
@a
@
text
@a29 2


a43 1
        RETURN
@


1.18
log
@changed polish and calc calls
@
text
@d30 1
a30 1
CNO_SAVE
@


1.17
log
@NEW VERSION
@
text
@d5 1
d16 1
a16 1
C EVALN(EXPR,NLET,VALUE,IFLAG)
d22 1
a22 1
C       VALUE      RETURNED VALUE OF EXPRESSION               (RETURNED)
d28 1
a28 1
	SUBROUTINE EVALNQ(EXPR,NLET,VALUE,IRTFLG)
a31 1
        PARAMETER       (IPOLEN = 40)
d33 5
a37 7
        CHARACTER *81   RPNARRAY
	DIMENSION       VAL(IPOLEN)
        INTEGER         INDPL(IPOLEN)

        DO I = 1,IPOLEN
           VAL(I) = 0.0
        ENDDO
d39 1
a39 3
C       ARRAY CONTAINS INDICES TO NUMERICAL ELEMENTS IN  VAL
C       (INDPL & NPIX  ARE NOT USED HERE)
	CALL POLISH(EXPR,NLET,RPNARRAY,NPOL,VAL,NVAL,INDPL,NPIX,IRTFLG)
d41 4
a44 2
        CALL CALC(RPNARRAY,NPOL,VAL,IRTFLG)
	VALUE = VAL(1)
d46 1
@


1.16
log
@OK?
@
text
@d15 1
a15 1
C EVALN(EXPR,LENGTH,VALUE,IFLAG)
d20 1
a20 1
C       NLWT       LENGTH OF EXPR                             (SENT)
d40 1
a40 2

C       CONVERT EXPR TO REVERSE-POLISH-NOTATION ARRAY 
d43 1
a43 1
	CALL POLISH(EXPR,NLET,RPNARRAY,VAL,NVAL,INDPL,NPIX,IRTFLG)
d45 1
a45 3

C       EVALUATE RPN ARRAY
        CALL CALC(RPNARRAY,VAL,NVAL,IRTFLG)
@


1.15
log
@*** empty log message ***
@
text
@d44 1
a44 1
	CALL POLISH(EXPR,NLET,RPNARRAY,NPOL,VAL,NVAL,INDPL,NPIX,IRTFLG)
@


1.14
log
@*** empty log message ***
@
text
@d44 1
a44 1
	CALL POLISH(EXPR,NLET,RPNARRAY,VAL,NVAL,INDPL,NPIX,IRTFLG)
a50 1
        RETURN
@


1.13
log
@cleaned up logic & added comments
@
text
@d31 1
a31 1
        PARAMETER       (POLEN = 40)
d34 2
a35 2
	DIMENSION       VAL(POLEN)
        INTEGER         INDPL(POLEN)
d37 1
a37 1
        DO I = 1,POLEN
@


1.12
log
@*** empty log message ***
@
text
@d3 2
a4 2
C EVALNQ.FOR                  ADAPTED FROM EVALN.FOR FOR CHAR AUG 89 AL
C
d18 6
a23 4
C       EXPR: A CHARACTER STRING STORES A EXPRESSION
C       LENGTH: THE LENGTH OF A CHARACTER STRING
C       VALUE:  RETURNED VALUE
C       IFLAG:  INVALID EXPRESSION OR VALID EXPRESSION FLAG 
d26 2
a27 1
	SUBROUTINE EVALNQ(EXPR,LEN,VALUE,IFLAG)
d31 1
a31 4
        COMMON /UNITS/  LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
	COMMON /PARAM/  PARAM(103)
	DIMENSION       VAL(40)
        DIMENSION       VAL1(40)
d33 13
a45 2
        CHARACTER *81   POLISH1
        INTEGER         INDPL(55)
d47 3
a49 6
C       SET ERROR RETURN
        IFLAG = 0
 
	 CALL POLISH(EXPR,LEN,POLISH1,VAL,COUNTER,INDPL,IL)
         CALL CALC(POLISH1,VAL,COUNTER)
	 VALUE = VAL(1)
d51 1
@


1.11
log
@*** empty log message ***
@
text
@d18 4
a21 1
C
a23 34
C	NOTES ADDED BY EVAN CHEN
C FOR VAL INDEX
C ASCII(N) - ASCII(0) FOR N FROM 1 TO Z ON THE ASCII TABLE
C FOR MATH FUNCTION
C             ARGUMENTS
C PAD -> a       
C SIN -> b
C EXP -> c
C LOG -> d
C COS -> e
C SQR -> f
C MOD -> g
C INT -> h
C ABS -> i
C ATA -> j
C ASI -> k
C ACO -> l 
C LN ->  m
C RAN -> n
C THE SUBROUTE TRANSFORM THE EXPRESSION FROM TOKEN TO A SINGLE
C FOR EXAMPLE EXPRESSION 43+COS(6) -> 1+E(2)
C CONVERT FROM INFIX TO POSTFIX NOTATION
C  12E+	
C COMPUTATION
C
C       NOTE:         TO ADD A NEW MATH FUNCTION:
C                     1. look for a comment "ADD MORE MATH FUNCTIONS FOR PARSING"
C                     2. insert your math function for parsing
C		      3. choose a sequential letter for substituting a math function
C                     4. look for a comment "ADD MORE MATH FUNCTIONS FOR" 
C                        CALCULATION"
C                     5. insert your math function for calculation
C

d29 6
a34 15
	COMMON /PARAM/  PARAM(103),NSEL(10)
        CHARACTER *80   FCHAR
	COMMON/FUNCTION/FCHAR

	DIMENSION      VAL(40)
        CHARACTER *(*) EXPR
        CHARACTER *81  EXPR1,POLISH,STACK
        CHARACTER      CTEMP,NEXT,JCHAR,CTEMP1,CTEMM1

C       NXT NEEDS TO BE INTEGER*2 TO EXTRACT CORRECT PORTION OF TIME STRING 
C       FOR RANDOM GENERATOR:
	INTEGER*2      NXT(4)
	CHARACTER*8    CNXT
	EQUIVALENCE    (NXT,CNXT)
	LOGICAL        GFLAG,ISDIGI,SIGN_TEST,LETTER_TEST
a35 2
        DATA PI/3.141592654/,GFLAG/.FALSE./

d39 3
a41 466
	NM = 0

	DO  I=1,81
          EXPR1(I:I)=' '
          STACK(I:I)=' '
          POLISH(I:I)=' '
        ENDDO


	DO  J=1,40
           VAL(J)=0.0
        ENDDO

	K    = 1
	J    = 1
	FRAC = 1.0
	NINT = 10
	I    = 0
	IF (NM .NE. 0) I = 3

C       -------------- LOOP ----------------------------------------
40	I = I + 1
	IF (I .GT. LEN) GOTO 41

	IUMIN = 1
	CTEMP = EXPR(I:I)

C       REMOVE ALL SPACES
	IF (CTEMP .EQ. ' ' .OR. CTEMP .EQ. ',') THEN
	   GOTO 41
	ENDIF


	IF (CTEMP.EQ.'(' .OR. CTEMP.EQ.')') THEN
           EXPR1(K:K) = EXPR(I:I)
           K = K + 1
           GOTO 41
        ENDIF

	IF (EXPR(I:I+1) .EQ. '**') THEN
           EXPR1(K:K) = '^'
           K = K+1
           I = I+1
           GOTO 41
        ENDIF

	


C       ADD MORE MATH FUNCTIONS FOR PARSING
C       MATH FUNCTIONS PARSING BEGINS HERE
C       SUBSTITUE LETTERS FOR MATH FUNCTIONS
	IF (CTEMP .GE. 'A') THEN
	   IF (EXPR(I:I+2) .EQ. 'PAD') THEN
           EXPR1(K:K) = 'a'
           K = K+1
           I = I+2
           GOTO 41

	ELSEIF (EXPR(I:I+2) .EQ. 'SIN') THEN
           EXPR1(K:K) = 'b'
           K = K+1
           I = I+2
           GOTO 41

	ELSEIF (EXPR(I:I+2) .EQ. 'EXP') THEN
           EXPR1(K:K) = 'c'
           K = K+1
           I = I+2
           GOTO 41

	ELSEIF (EXPR(I:I+2) .EQ. 'LOG') THEN
           EXPR1(K:K) = 'd'
           K = K+1
           I = I+2
           GOTO 41

	ELSEIF (EXPR(I:I+2) .EQ. 'COS') THEN
           EXPR1(K:K) = 'e'
           K = K+1
           I = I+2
           GOTO 41

	   
	ELSEIF (EXPR(I:I+2) .EQ. 'SQR') THEN
           EXPR1(K:K) = 'f'
           K = K+1
           I = I+2
           GOTO 41

	ELSEIF (EXPR(I:I+2) .EQ. 'MOD') THEN
           EXPR1(K:K) = 'g'
           K = K+1
           I = I+2
           GOTO 41
	   
	ELSEIF (EXPR(I:I+2) .EQ. 'INT') THEN
           EXPR1(K:K) = 'h'
           K = K+1
           I = I+2
           GOTO 41

   	ELSEIF (EXPR(I:I+2) .EQ. 'ABS') THEN
           EXPR1(K:K) = 'i'
           K = K+1
           I = I+2
           GOTO 41

	ELSEIF (EXPR(I:I+2) .EQ. 'ATA') THEN
           EXPR1(K:K) = 'j'
           K = K+1
           I = I+2
           GOTO 41

	ELSEIF (EXPR(I:I+2) .EQ. 'ASI') THEN
           EXPR1(K:K) = 'k'
           K = K+1
           I = I+2
           GOTO 41

	   
	ELSEIF (EXPR(I:I+2) .EQ. 'ACO') THEN
           EXPR1(K:K) = 'l'
           K = K+1
           I = I+2
           GOTO 41

	ELSEIF (EXPR(I:I+1) .EQ. 'LN') THEN
           EXPR1(K:K) = 'm'
           K = K+1
           I = I+1
           GOTO 41

	   
	ELSEIF (EXPR(I:I+2) .EQ. 'RAN') THEN
           EXPR1(K:K) = 'n'
           K = K+1
             I = I+2
           GOTO 41
 
	ENDIF

C END OF LOOP FOR LETTERS
	
	IF (NRQ(CTEMP) .NE. -1 .AND. CTEMP .NE. '.'  .AND. 
     &      CTEMP      .NE. 'X'.AND. CTEMP .NE. ','  .AND.
     &     (.NOT. ISDIGI(CTEMP))) THEN
	    CALL ERRT(43,'EVALUATE',NE)
	ENDIF



	ENDIF

C       CHECK FOR MINUS SIGN AT FIRST CHAR, OR A MINUS SIGN IN FIRST CHAR.
C       FOLLOWED BY A FUNCTION STRING, OR A OPERATION FOLLOWED BY A MINUS 
C       SIGN AND A "."
C       OR AN OPERATION FOLLOWED BY A MINUS SIGN, THEN AN X, THEN A DIGIT.

        IF (CTEMP .EQ. '-') THEN
C         A MINUS SIGN
          CTEMP1 = EXPR(I+1:I+1)
          CTEMM1 = EXPR(I-1:I-1)
          IF ((I .EQ. 1) .OR. 
     &        (NM .NE. 0. AND. I .EQ. 5) .OR.
     &        (NRQ(CTEMM1) .EQ. -1 .AND. CTEMP1 .EQ. '.') .OR. 
 
     &        (I .NE. 1 .AND. NRQ(CTEMM1) .EQ. -1 .AND.
     &        (ISDIGI(CTEMP1) .OR. CTEMP1 .EQ. 'X'))) THEN

             I     = I + 1
             IUMIN = -1
             CTEMP = EXPR(I:I)
           ENDIF
        ENDIF

        IF (CTEMP .EQ. '.') THEN
C          IS DECIMAL POINT 
           I = I+1
           IF (.NOT. ISDIGI(EXPR(I:I)) .AND. EXPR(I:I) .NE. 'E') THEN
	       CALL ERRT(43,'EVALUATE',NE)
	      ENDIF 

           FRAC  = 0.1
           NINT  = 1

	ELSEIF (CTEMP.NE.'X'.AND. .NOT. ISDIGI(CTEMP)) THEN
C          IS NEITHER A DIGIT NOR AN X
           EXPR1(K:K) = EXPR(I:I)
           K = K + 1
           GOTO 41

        ELSEIF (CTEMP .EQ. 'X') THEN
C          EVALUATE REGISTER
	    IF (ISDIGI(EXPR(I+1:I+1))) THEN
	       READ(EXPR(I+1:I+1),30) IVAL
	    ELSE 
                CALL ERRT(43,'EVALUATE',NE)
            ENDIF
     
           IF (ISDIGI(EXPR(I+2:I+2))) THEN
C            HAVE 2ND DIGIT FOR REGISTER NUMBER
             READ(EXPR(I+2:I+2),30) IVAL1
             IVAL = 10*IVAL+IVAL1
             I    = I+1
	     ELSE 
              CALL ERRT(43,'EVALUATE',NE)
           ENDIF
C              IF (EXPR(I+3:I+3) .NE. ' ') THEN
C		  CALL ERRT(43,'EVALUATE',NE)
C		 ENDIF
           VAL(J) = PARAM(IVAL+1)*IUMIN

           WRITE(EXPR1(K:K),30) J

           K = K+1
           I = I+1
           J = J+1
           GOTO 41
        ENDIF

C       MUST BE A DIGIT
        ITEMP3 = 0

C       PROCESSING A NUMBER IN A LOOP
 23      READ(EXPR(I:I),30) ITEMP
	VAL(J) = NINT*VAL(J)+ITEMP*FRAC
	IF (FRAC .NE. 1.) FRAC = FRAC / 10.
        IF ((I+1) .GT. LEN) GOTO 28

	IF (.NOT. ISDIGI(EXPR(I+1:I+1))) THEN
C          THIS DIGIT IS NOT FOLLOWED BY A ANOTHER DIGIT

           IF (EXPR(I+1:I+1) .EQ. 'E') THEN
C             NUMBER CONTAINS EXPONTIAL NOTATION NOW
              IF((I+2) .LE. LEN .AND.(
     &           EXPR(I+2:I+2) .EQ. '-' .OR. 
     &           EXPR(I+2:I+2) .EQ. '+' .OR.
     &           ISDIGI(EXPR(I+2:I+2)))) THEN
C                HAS >= 1 DIGIT AFTER THE E
                 I       = I + 2
                 IEXPGO  = I 
                 DO WHILE (I+1 .LE. LEN .AND. ISDIGI(EXPR(I+1:I+1)))
                    I = I + 1
                 ENDDO
C                END OF DIGITS AFTER E, EVALUATE THE EXPONENT
                 READ(EXPR(IEXPGO:I),*) ITEMP3    
              ELSE
                 I = I + 1
              ENDIF
C             EVALUATE THE NUMBER NOW
              GOTO 28
           ENDIF
C          IF NOT A DECIMAL POINT THEN EVALUATE THE NUMBER NOW
           IF (EXPR(I+1:I+1) .NE. '.') GOTO 28

           IF (.NOT. ISDIGI(EXPR(I+2:I+2))) THEN
C             CHAR. AFTER . IS NOT A DIGIT, EVALUATE THE NUMBER NOW
              I = I + 1
              GOTO 28
           ENDIF
           I     = I + 2
           FRAC  = 0.1
           NINT  = 1
           IF (.NOT. ISDIGI(EXPR(I:I))) GOTO 28
        ELSE
C          PROCESS NEXT DIGIT IN NUMBER
           I = I + 1
        ENDIF
        GOTO 23
C       END OF NUMBER PROCESSING LOOP


C       EVALUATE THE NUMBER
28	FRAC   = 1.
	NINT   = 10
	VAL(J) = VAL(J)*IUMIN
        IF (ITEMP3 .NE. 0) THEN
C          USE EXPONENTIAL VALUE HERE
           VAL(J) = VAL(J) * (10.0 ** ITEMP3)
        ENDIF

 	JCHAR = CHAR(J+48)
 30	FORMAT(I1)
	EXPR1(K:K) = JCHAR
	J = J+1
	K = K+1

41	IF (I .LT. LEN) GOTO 40

C       --------------------- END LOOP ------------------------
C       CONVERT FROM INFIX TO POSTFIX
	EXPR1(K:K) = ')'
	NCHAR2 = K+1
	IPNT  = 1
	ITOP  = 1
	STACK(1:1)='('
	IRANK = 0
	I     = 0

4	NEXT = EXPR1(IPNT:IPNT)
	IPNT = IPNT+1
	IF (IPNT .GT. NCHAR2) THEN
          IF (ITOP.NE.0) THEN
      	   CALL ERRT(43,'EVALUATE',NE)
	     ENDIF
           J = 1
           GOTO 24
        ENDIF

	IF (ITOP .LT. 1) THEN
   	   CALL ERRT(43,'EVALUATE',NE)
	    ENDIF

7	IF (NFQ(NEXT) .LE. NGQ(STACK(ITOP:ITOP))) THEN
	   
         IF (NFQ(NEXT).NE. NGQ(STACK(ITOP:ITOP))) THEN
             I = I + 1
             POLISH(I:I) = STACK(ITOP:ITOP)
             IRANK       = IRANK+NRQ(STACK(ITOP:ITOP))

             IF (IRANK .LE. 0) THEN
		CALL ERRT(43,'EVALUATE',NE)	
	     ENDIF

             ITOP = ITOP - 1
             GOTO 7
          ENDIF
          ITOP = ITOP - 1

        ELSE
          ITOP = ITOP+1
          STACK(ITOP:ITOP) = NEXT
        ENDIF

	GOTO 4

C       CALCULATION BEGINS HERE
C       ADD MATH FUNCTIONS FOR CALCULATION

24	DO 13 N=1,I
           CTEMP=POLISH(N:N)
	IF (.NOT. LETTER_TEST(CTEMP)) THEN
           IF (NRQ(CTEMP).NE.-1) GOTO 13
	ENDIF

	ITEMP1 = ICHAR(POLISH(N-2:N-2)) - ICHAR('0') 
	ITEMP2 = ICHAR(POLISH(N-1:N-1)) - ICHAR('0')

        IF (CTEMP.EQ.'+') THEN
             TEMP=VAL(ITEMP1)+VAL(ITEMP2)

        ELSEIF (CTEMP.EQ.'-') THEN
             TEMP=VAL(ITEMP1)-VAL(ITEMP2)

        ELSEIF (CTEMP.EQ.'*') THEN
             TEMP=VAL(ITEMP1)*VAL(ITEMP2)

        ELSEIF (CTEMP.EQ.'/') THEN
              IF(VAL(ITEMP2).EQ. 0.) THEN
		  CALL ERRT(43,'EVALUATE',NE)
              ENDIF
              TEMP=VAL(ITEMP1)/VAL(ITEMP2)

        ELSEIF (CTEMP .EQ. 'a') THEN      
   	    NPOW=LOG(VAL(ITEMP2))
	    VAL(ITEMP2) = 2**NPOW

 	ELSEIF (CTEMP .EQ. 'b') THEN
		VALUE =  VAL(ITEMP2)/180.*PI
        	VALUE = SIN(VAL(ITEMP2)/180.*PI)
		VAL(ITEMP2)=VALUE

         ELSEIF (CTEMP .EQ. 'c') THEN
		VAL(ITEMP2) = EXP(VAL(ITEMP2))
		
         ELSEIF (CTEMP .EQ. 'd') THEN
	   IF (VAL(ITEMP2).LE.0.)  THEN
              CALL ERRT(43,'EVALUATE',NE)
           ELSE
	      VAL(ITEMP2) = ALOG10(VAL(ITEMP2))
           ENDIF

        ELSEIF (CTEMP .EQ. 'e') THEN
		VALUE =  VAL(ITEMP2)/180.*PI
        	VALUE = COS(VAL(ITEMP2)/180.*PI)
		VAL(ITEMP2)=VALUE
  	  
	 ELSEIF (CTEMP .EQ. 'f') THEN
		IF (VALUE.LT.0.) THEN
		   CALL ERRT(43,'EVALUATE',NE)
		   ENDIF
		VAL(ITEMP2) = SQRT(VAL(ITEMP2))

	ELSEIF (CTEMP .EQ. 'g') THEN
        TEMP = MOD(VAL(ITEMP1),VAL(ITEMP2))


	ELSEIF (CTEMP .EQ. 'h') THEN
	VAL(ITEMP2) = INT(VAL(ITEMP2))


	ELSEIF (CTEMP .EQ. 'i') THEN
	IF (VALUE.LT.0.0) VAL(ITEMP2) = -VAL(ITEMP2)

	ELSEIF (CTEMP .EQ. 'j') THEN
	VALUE = ATAN(VAL(ITEMP2))        
        VALUE = VALUE/PI*180.
	VAL(ITEMP2) = VALUE
	
	ELSEIF (CTEMP .EQ. 'k') THEN
        IF (ABS(ITEMP2).GT.1) THEN
	CALL ERRT(43,'EVALUATE',NE)
	ENDIF
        VALUE = ASIN(VAL(ITEMP2))
        VALUE = VALUE/PI*180.
	VAL(ITEMP2) = VALUE

	ELSEIF (CTEMP .EQ. 'l') THEN
	IF (ABS(ITEMP2).GT.1) THEN 
	CALL ERRT(43,'EVALUATE',NE)
	ENDIF
        VALUE = ACOS(VAL(ITEMP2))
        VALUE = VALUE/PI*180.
	VAL(ITEMP2) = VALUE

	
	ELSEIF (CTEMP .EQ. 'm') THEN
	   IF (VAL(ITEMP2).LE.0.) THEN
    		  CALL ERRT(43,'AR',NE)
	      ENDIF
	VAL(ITEMP2) = LOG(VAL(ITEMP2))

          ELSEIF(VAL(ITEMP1).LT.0.) THEN
              IV=VAL(ITEMP2)
              DIF=ABS(VAL(ITEMP2)-IV)
              IF(DIF.LT.0.001) THEN
                 TEMP=VAL(ITEMP1)**IV
              ELSE
		 	CALL ERRT(43,'EVALUATE',NE)
              ENDIF

	ELSEIF (CTEMP .EQ. 'm') THEN
	VAL(ITEMP2) = RAN(ISEED)



        ELSEIF (CTEMP .EQ. '^') THEN
              TEMP=VAL(ITEMP1)**VAL(ITEMP2)
        ENDIF

	IF(SIGN_TEST(CTEMP) .OR. CTEMP .EQ. 'g') THEN
           VAL(ITEMP1)=TEMP
           DO  L=N-1,I-2
             POLISH(L:L)=POLISH(L+2:L+2)
           ENDDO
	 I=I-2
	ELSE 
	DO  L=N,I-1
             POLISH(L:L)=POLISH(L+1:L+1)
           ENDDO
           I=I-1
	ENDIF

           GOTO 24
13	CONTINUE
a42 1
	VALUE=VAL(1)
@


1.10
log
@*** empty log message ***
@
text
@d430 1
a430 1
           IF (CTEMP.EQ.'+') THEN
d433 1
a433 1
           ELSEIF (CTEMP.EQ.'-') THEN
d436 1
a436 1
           ELSEIF (CTEMP.EQ.'*') THEN
d439 1
a439 1
           ELSEIF (CTEMP.EQ.'/') THEN
d445 1
a445 1
      ELSEIF (CTEMP .EQ. 'a') THEN      
a450 2
C       	CHANGED TO DEGREES 7/89 MR

d454 1
a454 1
        ELSEIF (CTEMP .EQ. 'c') THEN
d457 6
a462 6
        ELSEIF (CTEMP .EQ. 'd') THEN
	   IF (VAL(ITEMP2).LE.0.) THEN
	      PRINT *,"ERROR ON ALOG10 OPERATION"
    		  CALL ERRT(43,'EVALUATE',NE)
	      ENDIF
		VAL(ITEMP2) = ALOG10(VAL(ITEMP2))
a465 1
C       	CHANGED TO DEGREES 7/89 MR
d523 6
a528 1
         ELSEIF (CTEMP .EQ. '^') THEN
d530 1
a530 1
           ENDIF
d532 1
a532 1
	if (SIGN_TEST(CTEMP) .OR. CTEMP .EQ. 'g') THEN
@


1.9
log
@*** empty log message ***
@
text
@d445 4
d510 7
a516 1
 
@


1.8
log
@*** empty log message ***
@
text
@d79 1
a79 1
        IFLAG = -1
@


1.7
log
@f90
@
text
@a0 1

d3 1
a3 1
C EVALNQ.FOR                  ADAPTED FROM EVALN.FOR FOR CHAR AUG 89 al
d21 33
d57 1
a57 1
CNO_STATIC
d64 1
a64 1
	DIMENSION      VAL(9)
d74 1
a74 1
	LOGICAL        GFLAG,ISDIGI
a88 15
C IT IS ASSUMED THAT EXPRESSION CONTAINS NO BLANKS
 	IF (EXPR(1:3) .EQ. 'PAD') NM=1
 	IF (EXPR(1:3) .EQ. 'SIN') NM=2
 	IF (EXPR(1:3) .EQ. 'EXP') NM=3
 	IF (EXPR(1:3) .EQ. 'LOG') NM=4
 	IF (EXPR(1:3) .EQ. 'COS') NM=5
 	IF (EXPR(1:3) .EQ. 'SQR') NM=6  
 	IF (EXPR(1:3) .EQ. 'MOD') NM=7
 	IF (EXPR(1:3) .EQ. 'INT') NM=8
 	IF (EXPR(1:3) .EQ. 'ABS') NM=9
 	IF (EXPR(1:3) .EQ. 'ATA') NM=10 
 	IF (EXPR(1:3) .EQ. 'ASI') NM=11 
 	IF (EXPR(1:3) .EQ. 'ACO') NM=12 
 	IF (EXPR(1:2) .EQ. 'LN')  NM=13 
 	IF (EXPR(1:3) .EQ. 'RAN')  NM=14
d90 1
a90 1
	DO  J=1,9
d101 1
a101 5
C       FOR NON 3 LETTER CALLS:
        IF (EXPR(1:4) .EQ. 'SQRT') I = 4
        IF (NM.EQ.13) I = 2

C       -------------- loop ----------------------------------------
d107 7
d120 80
a199 2
C       IF CURRENT CHAR. IS NOT START OF OPERATOR STRING, AND IS NOT "X", AND 
C       IS NOT "," AND NOT "." AND IS NOT A DIGIT THEN RETURN
d201 6
a206 3
	IF (NRQ(CTEMP) .NE. -1 .AND. CTEMP .NE. '.'  .AND. 
     &      CTEMP      .NE. 'X'.AND. CTEMP .NE. ','  .AND.
     &     (.NOT. ISDIGI(CTEMP))) RETURN
d208 2
a209 3
	IF (EXPR(I:I+1) .EQ. '**') THEN
C          SUBSTITUTE "@@" OPERATOR FOR "**" SEQUENCE
           EXPR1(K:K) = '@@'
d213 21
a233 1
        ENDIF
d260 4
a263 1
           IF (.NOT. ISDIGI(EXPR(I:I)) .AND. EXPR(I:I) .NE. 'E') RETURN
d275 6
a280 1
           READ(EXPR(I+1:I+1),30) IVAL
d286 2
d289 3
d306 1
a306 1
23      READ(EXPR(I:I),30) ITEMP
d363 2
a364 2
        WRITE(JCHAR,30) J
30	FORMAT(I1)
a368 1

a369 1
C       --------------------- end loop ------------------------
d371 2
a372 1

d384 3
a386 3
C          CHANGED TO MAKE MOD(X,Y) WORK
           IF ((NM.NE.7 .OR. ITOP.NE.0) .AND. 
     &         (ITOP.NE.0 .OR. IRANK.NE.1)) RETURN
d391 3
a393 1
	IF (ITOP .LT. 1) RETURN
d396 2
a397 1
          IF (NFQ(NEXT).NE. NGQ(STACK(ITOP:ITOP))) THEN
d401 5
a405 1
             IF (IRANK .LE. 0) RETURN
a414 1
        GOTO 4
d416 1
d418 3
d423 1
d425 1
d427 2
a428 2
           READ(POLISH(N-2:N-2),30) ITEMP1
           READ(POLISH(N-1:N-1),30) ITEMP2
d441 1
a441 2
                 WRITE(NOUT,*) ' *** DIVISION BY ZERO'
                 RETURN
d445 63
a507 1
           ELSEIF(VAL(ITEMP1).LT.0.) THEN
d513 1
a513 2
                 WRITE(NOUT,*) ' *** UNDEFINED EXPONENTIATION'
                 RETURN
d515 2
a516 1
           ELSE
d520 1
a521 1

d525 7
a532 1
           I=I-2
a536 89
C       SET CORRECT ERROR RETURN
	IF(NM.EQ.0) THEN
          IFLAG=0
          RETURN
        ENDIF

	GOTO(110,120,130,140,150,160,170,180,190,
     &		195,196,197,198,199),NM

110	IVAL = VALUE+0.5
	IF (VALUE.LT.0.) IVAL=VALUE-0.5
   	NPOW=LOG2(IVAL)
	VALUE = 2**NPOW
	IFLAG = 0
	RETURN

120	VALUE = VALUE/180.*PI  
c**     CHANGED TO DEGREES 7/89 MR
        VALUE = SIN(VALUE)
	IFLAG = 0
	RETURN

130	VALUE = EXP(VALUE)
	IFLAG = 0
	RETURN

140	IF (VALUE.LE.0.)RETURN
	VALUE = ALOG10(VALUE)
	IFLAG = 0
	RETURN

150	VALUE =  VALUE/180.*PI  
C       CHANGED TO DEGREES 7/89 MR
        VALUE = COS(VALUE)
	IFLAG = 0
	RETURN

160	IF (VALUE.LT.0.) RETURN
	VALUE = SQRT(VALUE)
	IFLAG = 0
	RETURN

170	VALU2 = VAL(2)
        VALUE = MOD(VALUE,VALU2)
	IFLAG = 0
        RETURN

180	VALUE = INT(VALUE)
	IFLAG = 0
	RETURN

190	IF (VALUE.LT.0.0) VALUE = -VALUE
	IFLAG = 0
	RETURN

195	VALUE = ATAN(VALUE)        
C       ADDED ON 8/27/86 BY NAIK
        VALUE = VALUE/PI*180.
	IFLAG = 0
	RETURN

196     IF (ABS(VALUE).GT.1) RETURN
        VALUE = ASIN(VALUE)
        VALUE = VALUE/PI*180.
        IFLAG = 0
        RETURN

197     IF (ABS(VALUE).GT.1) RETURN
        IFLAG = 0
        VALUE = ACOS(VALUE)
        VALUE = VALUE/PI*180.
        IFLAG = 0
        RETURN

198	IF (VALUE.LE.0.)RETURN
	VALUE = ALOG(VALUE)
	IFLAG = 0
	RETURN

199	CALL TIME(CNXT)
	KST   = NXT(4)
C       HAVE TO INITIALIZE EVERY TIME, OTHERWISE MO COMMAND CAN 
C       CHANGE GFLAG
        CALL MRAND(OUT,KST,GFLAG,NOUT) 
	CALL  GETRAND(OUT)
	VALUE = OUT
	IFLAG = 0
	RETURN

@


1.6
log
@added exponential notaion handling code
@
text
@d27 3
a29 5
        COMMON /UNITS/LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
        INTEGER       LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT


	COMMON /PARAM/ PARAM(103),NSEL(10)
d32 1
a32 2
	DIMENSION VAL(9)

a34 1
        CHARACTER *80  FCHAR
d194 1
a194 2
                 READ(EXPR(IEXPGO:I),91) ITEMP3    
91	         FORMAT(I)
@


1.5
log
@ bad parameters in date & time call (new compiler)
@
text
@d25 2
d92 1
d135 1
a135 1
             I = I+1
d142 1
a142 1
C          DECIMAL POINT 
d144 1
a144 1
           IF (.NOT. ISDIGI(EXPR(I:I))) RETURN
d149 1
a149 1
C          NEITHER A DIGIT NOR AN X
d173 4
d179 3
a181 1
	IF (FRAC.NE.1.) FRAC = FRAC/10.
d183 24
a206 1
C          NOT FOLLOWED BY A DIGIT
d210 2
a211 2
C             2ND CHAR. AFTER THIS IS NOT A DIGIT
              I = I+ 1
d219 1
d223 1
d225 2
d230 5
d243 3
@


1.4
log
@ran() changed.
@
text
@d42 2
d366 1
a366 1
199	CALL TIME(NXT)
d368 2
a369 1
C have to initialize every time, otherwise MO command can change GFLAG
d372 1
a372 1
	VALUE=OUT
@


1.3
log
@clean up unused variables and hollerith warnings
@
text
@a31 2
	SAVE  INI_RAN

a37 1
	LOGICAL*1      INI_RAN
d44 1
a44 1
        DATA PI/3.141592654/,INI_RAN/.TRUE./,GFLAG/.FALSE./
d364 1
a364 2
199	IF(INI_RAN)  THEN
	CALL TIME(NXT)
d366 1
a367 2
	INI_RAN=.FALSE.
	ENDIF
@


1.2
log
@made ata , acos, etc work
@
text
@d25 4
d39 1
a39 1
        CHARACTER      CTEMP,ETEMP,NEXT,JCHAR,CTEMP1,CTEMM1
@


1.1
log
@Initial revision
@
text
@d4 1
a4 2
C $$ EVALNQ.FOR
C                       ADAPTED FROM EVALN.FOR FOR CHAR AUG 89 al
d6 1
a6 1
C **************************************************************************
d14 1
a14 1
C **************************************************************************
d16 1
a16 1
C $$ EVALN(EXPR,LENGTH,VALUE,IFLAG)
d18 1
a18 1
C    PURPOSE:   EVALUATES EXPRESSIONS, RETURNS VALUE
d27 1
d37 1
d50 1
a50 1
	DO 222 I=1,81
d54 1
a54 1
222	CONTINUE
d83 2
a84 2
C       FOR 4 LETTER CALLS: 
	IF (NM.EQ.6 .OR. NM.EQ.10 .OR. NM.EQ.11 .OR. NM.EQ.12) I = 4
a133 1
C23456789012345678901234567890123456789012345678901234567890123456789012
d254 2
a255 2
              IF(VAL(ITEMP2).EQ.0.) THEN
                 WRITE(NOUT,*) ' *** ZERO DIVISION'
@
