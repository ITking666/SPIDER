head	1.25;
access;
symbols
	pre_getangas:1.23
	GPL2010:1.23
	pre_GPL2010:1.22
	pre_var_equation:1.22
	pre_fftwrings:1.22
	pre_opfiles:1.20
	src:1.20
	best-code:1.20
	named-reg:1.18
	x-named-regs:1.17
	x:1.17
	v13-00:1.17
	pre_GPL:1.15
	prec_CA:1.15
	noindx:1.15
	Bproc:1.13
	oct21:1.7;
locks; strict;
comment	@c @;


1.25
date	2014.01.12.19.15.56;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2012.08.31.14.23.55;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.24.13.26.39;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2007.05.25.13.45.05;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2007.05.24.16.12.11;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2005.12.21.21.54.26;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2005.12.14.15.27.24;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2005.12.12.15.29.41;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.17.20.41.36;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.17.18.31.59;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.20.16.59.52;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2000.12.15.19.36.02;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.02.09.20.05.38;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.02.09.19.09.07;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.01.10.18.06.59;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.01.07.16.41.59;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.05.16.13.01;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.03.01.54.41;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.09.02.15.21.30;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.08.20.16.28.14;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.08.19.16.39.44;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.08.13.12.43.56;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	99.08.13.12.26.28;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	99.08.12.13.46.46;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	99.08.09.14.15.57;	author leith;	state Exp;
branches;
next	;


desc
@removed from rdprai & rdpraf, does loops OK
@


1.25
log
@enter
@
text
@
C++*********************************************************************
C
C  RDPRANC.F  -- CREATED JULY 91 FROM RDPRAI               ARDEAN LEITH
C                SPLIT OUT FROM RDPRAI & RDPRAF  AUG. 1999 ARDEAN LEITH
C                FIXED OVERFLOW BUG AUG 99                 ARDEAN LEITH
C                FIXED FILLRANGE 1-1 BUG JAN 00            ARDEAN LEITH
C                USED GETNEXTOKEN FOR IBM JAN 00           ARDEAN LEITH
C                FIXED OVERFLOW BUG DEC 00                 ARDEAN LEITH
C                INTEGER RDPRANC  MAY 02                   ARDEAN LEITH
C                [VAR-VAR] BUG MAY 07                      ARDEAN LEITH
C
C **********************************************************************
C * AUTHOR:   ArDean Leith                                             *
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    RDPRANC(ILIST,NMAX,NUMBER,ILOW,IHI,PROMPT,LIMITED,IRTFLG)
C
C    PURPOSE:  READ AN ALPHANUMERIC STRING, CHECK FOR ANY SPECIAL OPERATION,
C              RETURNS ARRAY OF INTEGERS, THE NUMBER OF VALUES, OR A
C              FLAG  TO INDICATE THAT ONE SHOULD RETURN TO PREVIOUS QUESTION.
C
C              ALLOWABLE STRINGS           NUMBERS ENTERED IN ARRAY
C                 1.0,2,83.,66E1           1, 2, 8, 660
C                 1.0 2 83. 66E1           1, 2, 8, 660
C                 (CAN PUT IN A SERIES OF NUMBERS WITH -)
C                 1.0-5                    1, 2, 3, 4, 5
C                 X11,X12....              CONTENTS OF X11 & X12...
C                 X11-X12                  CONTENTS OF X11....X12
C
C  PARAMETERS : ILIST     ARRAY FOR ANSWERS                      (RET.)
C               NMAX      MAX LENGTH OF ARRAY                    (SENT)
C               NUMBER    ON ENTRY IS MAX NUMBER OF ANSWERS (SENT/RET.) 
C                         TO BE RETURNED!!
C                         (<0 ON ENTRY IS FLAG TO ACCEPT NULL 
C                         RESPONSE)
C                         ON RETURN IS NUMBER OF ANSWERS ACTUALLY 
C                         RETURNED
C               ILOW      BOTTEM OF RANGE (CAN'T BE BELOW THIS)   (SENT)
C               IHI       TOP OF RANGE (CAN'T BE ABOVE THIS)      (SENT)
C                         ILOW & IHI CURRENTLY UNUSED!!!!!!!!!!!!!!
C               PROMPT    SOLICITATION MESSAGE                    (SENT)
C               LIMITED   REQUIRES NMAX VALUES / CALL, SO THAT    (SENT)
C                           IT CAN BE USED IN BATCH DO-LOOP
C               IRTFLG    RETURN FLAG (0 IS NORMAL, -1 IS GOTO    (SENT)
C                              PREVIOUS QUESTION)
C      
C    CALLED BY:   
C
C    NOTE: CAN PERFORM REGISTER SUBSTITUTION NOW al
C          THIS DIFFERS FROM: RDPRA IN THAT IT DOES NOT EVALULATE
C          EXPRESSIONS AND INTERPRETS 1-10 AS A LIST: 1,2,3,..10
C          DO NOT CONFUSE THE TWO SUBROUTINES!!
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE RDPRANC(ILIST,NMAX,NUMBER,ILOW,IHI,PROMPT,
     &                     LIMITED,IRTFLG)        

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        INTEGER            :: IBUF(NIMAX)
        INTEGER            :: ILIST(NMAX)

        CHARACTER *(*)     :: PROMPT

C       MAXANS IS LENGTH OF ANS
        PARAMETER            (MAXANS = 600)
        CHARACTER * 600    :: ANS

        CHARACTER * 80     :: ANST
	CHARACTER * 1      :: NULL,A
        LOGICAL            :: LOOPNOPAREN,LIMITED
        LOGICAL            :: RANGE,RFLAG

        MAXB = NIMAX
        NULL = CHAR(0)

C       DODO PROOF THE INPUT
        NVAL = ABS(NUMBER)
        IF (NVAL == 0)    NVAL = 1
        IF (NVAL > NMAX) NVAL = NMAX

        NUMBER    = 0
        RANGE  = .FALSE.

C       GET INPUT LINE(S)
20      IF (PROMPT(:1) == '~') THEN
C          USE PROMPT FOR INPUT LINE
           ANS   = PROMPT(2:)
           NCHAR = LEN(PROMPT) - 1
        ELSE
           IRTFLG = -999   ! DO NOT UPPERCASE IT
           CALL RDPRMC(ANS,NCHAR,.TRUE.,PROMPT,NULL,IRTFLG)
           IF (NCHAR == 0 .OR. IRTFLG .NE. 0) RETURN
        ENDIF

21     IF (ANS(NCHAR:NCHAR) == ',') THEN
C          INPUT CONTINUATION LINE 
           IRTFLG = -999   ! DO NOT UPPERCASE IT
           CALL RDPRMC(ANST,NCHAR2,.TRUE.,
     &          'NEXT LINE OF INPUT',NULL,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           NCHAR = NCHAR + NCHAR2
           IF ((NCHAR + NCHAR2) > MAXANS) THEN
C             ANS HAS ALREADY OVERFLOWED!!!
              CALL ERRT(102,'ANS OVERFLOW',MAXANS)
              GOTO 20
           ENDIF
           ANS(NCHAR+1:) = ANST(1:NCHAR2)
           NCHAR = NCHAR + NCHAR2

C          SEE IF THERE ARE MORE LINES OF INPUT
           GOTO 21
        ENDIF

        IRTFLG      = 1

        LOOPNOPAREN = (ANS(1:1) .NE. '(' .AND. 
     &                 NLOOP > 1 .AND.
     &                 ILOOP > 1 .AND.
     &                 LEGACYPAR)
C       SEE IF REGISTERS IN INPUT BEFORE ANY SEMICOLON
        ISEMICOLON  = INDEX(ANS,';')
        IF (ISEMICOLON == 0) ISEMICOLON = NCHAR
        LOOPNOPAREN = LOOPNOPAREN .AND. 
     &               (INDEX(ANS(1:ISEMICOLON),'[') == 0)

        IF (LOOPNOPAREN .AND. .NOT. LIMITED) THEN
C          WITHIN DO-LOOP BUT NO '()' AND INPUT NUMBER IS NOT LIMITED
C          CAN NOT HAVE: X,Y,Z,A.... INPUT WITHIN A DO LOOP
           WRITE(NOUT,96)
96         FORMAT(' *** ERROR, WITHIN A DO LOOP THIS QUESTION NEEDS ',
     &            '() AROUND ANSWER.')
           CALL ERRT(100,'RDPRANC',NDUM)
           RETURN

        ELSEIF (NCHAR == 1 .AND. ANS(1:1) == '*') THEN
           IRTFLG = -1
           RETURN
        ENDIF

        IEND     = 0
        IGORANGE = -1
        RANGE    = .FALSE.

        DO           ! ----------------- LOOP --------------------------
           IFIRST = IEND + 1

C          GET TOKEN (CHAR. STRING DELIMITED BY A ", ( ) ] -")
           CALL GETNEXTTOKEN_N(ANS,NCHAR,IFIRST,IGO,IEND)

C          SEE IF ALL TOKENS FROM STRING HAVE BEEN EVALUATED
           IF (IGO <= 0) EXIT

C           write(6,*) '  RDPRANC TOKEN: ',ANS(IGO:IEND)
C           write(6,*) '  IGO...IEND: ',IGO,IEND

C          TOKEN RETURNED, SET START POSITION OF NEXT TOKEN IN ANS
           IF (ANS(IGO:IEND) == '-') THEN
C             '-' IS START OF A RANGE DELIMITER
              RANGE = .TRUE.
              CYCLE
           ENDIF
 
C          EVALUATE NUMBER OR REGISTER
           IF (ANS(IGO:IGO) == '[')THEN
C             TOKEN STARTS WITH '[', SO IS A REGISTER REFERENCE
C             GET REGISTER VALUE & NUMBER FROM TOKEN
              CALL REG_GET_VAR(0,ANS(IGO:IEND),.FALSE.,FNUM,IREG,
     &                         LASTVAR,IRTFLG)
              IF (IRTFLG .NE. 0) RETURN
           ELSE
C             EXTRACT REAL NUMBER    
              READ(ANS(IGO:IEND),*,IOSTAT=IERR) FNUM
              IF (IERR .NE. 0) THEN
                 WRITE(NOUT,*) ' *** SYNTAX ERROR: ',ANS(1:IEND)
                 CALL ERRT(100,'RDPRANC',NDUM)
                 IF (PROMPT(1:1) == '~') RETURN
                 GOTO 20
              ENDIF
           ENDIF

           IENDRANGE = FNUM

           IF (RANGE .AND. IENDRANGE < IGORANGE) THEN
              WRITE(NOUT,97)IGORANGE,IENDRANGE
   97         FORMAT(' *** ERROR: INVALID RANGE: ',I10,'...',I10)
              CALL ERRT(100,'RDPRANC',NDUM)
              GOTO 20

           ELSEIF (RANGE .AND. IENDRANGE == IGORANGE) THEN
C             RANGE IS SAME AS IGORANGE, WHICH IS ALREADY HANDLED
              RANGE = .FALSE.
              CYCLE

           ELSE 
              IF (RANGE) THEN
C                FILL WITH A RANGE OF INTEGER VALUES, STARTED FROM IGORANGE 
                 IGORANGE = IGORANGE + 1
              ELSE
                 IGORANGE = IENDRANGE 
              ENDIF
                   
C             FILL IBUF OR ILIST
              DO IVAL = IGORANGE,IENDRANGE
                 NUMBER = NUMBER + 1
                 IF (LOOPNOPAREN) THEN
C                   FILL IBUF AS A TEMPORARY ARRAY
                    IF (NUMBER > MAXB) THEN
C                      IBUF WILL OVERFLOW ! 
                       CALL ERRT(102,'IBUF OVERFLOW',MAXB)
                       RETURN
                    ENDIF
                    IBUF(NUMBER)  = IVAL
                 ELSE
C                   FILL ILIST
                    IF (NUMBER > NMAX) THEN
C                      ILIST WILL OVERFLOW ! 
                       CALL ERRT(102,'LIST OVERFLOW',NMAX)
                       RETURN
                    ENDIF
                    ILIST(NUMBER) = IVAL
                 ENDIF
              ENDDO
              IGORANGE = IENDRANGE 
           ENDIF

C          GET ANY REMAINING NUMBERS FROM THE INPUT STRING
           IF (.NOT. LOOPNOPAREN .AND. NUMBER >= NVAL) EXIT
           RANGE = .FALSE.
        ENDDO

C------------------- END OF ANS PARSING LOOP -----------------------

        IF (NUMBER == 0) THEN
C          GOT NULL INPUT, ACCEPT IT, DO NOT ALTER ILIST
           IRTFLG = 0
           RETURN
        ENDIF

        IF (LOOPNOPAREN) THEN
C          INPUT HAS NO () AROUND IT, AND IS IN A DO-LOOP
C          USES DIFFERENT SET OF INPUTS FOR EACH INDEX OF CURRENT LOOP
 
C          ILOC IS POINTER TO CURRENT LOCATION IN IBUF
           ILOC = (ILOOP - 1) * NVAL + 1

C          NGOT IS NUMBER OF VALUES LEFT IN IBUF
           NGOT = NUMBER - ILOC + 1

           IF (NGOT < NVAL)  THEN
C             NEEDS MORE INPUT TO GET "NVAL" INPUTS, READ ANOTHER LINE.
              WRITE(NOUT,95) NVAL,ILOOP,NGOT
   95         FORMAT(' *** ERROR: NEEDS AT LEAST: ',I4,
     &          '  INPUT VALUES FOR LOOP: ',I4,' BUT ONLY GOT: ',I4/)
              CALL ERRT(100,'RDPRANC',NDUM)
              GOTO 20
           ENDIF

           DO I = 1,NVAL
              ILIST(I) = IBUF(I+ILOC-1)
           ENDDO
           NUMBER = NVAL
        ENDIF
C----------------------------------------------
        IRTFLG = 0

c         write (NOUT,*) ' number of files: ',number
c         DO I = 1,number
c             write (NOUT,*) number, ': ',ILIST(I)
c          ENDDO
c        write (NOUT,*) ' -----------'


        RETURN

        END
       
@


1.24
log
@* for answer did not return -1
@
text
@d123 1
a123 1
     &          'ENTER NEXT LINE OF INPUT',NULL,IRTFLG)
@


1.23
log
@GPL_2010
@
text
@d83 2
a84 2
        DIMENSION            IBUF(NIMAX)
        DIMENSION            ILIST(NMAX)
d86 1
a86 1
        CHARACTER *(*)       PROMPT
d90 1
a90 1
        CHARACTER * 600      ANS
d92 4
a95 4
        CHARACTER * 80       ANST
	CHARACTER * 1        NULL,A
        LOGICAL              LOOPNOPAREN,LIMITED
        LOGICAL              RANGE,RFLAG
d102 2
a103 2
        IF (NVAL .EQ. 0)    NVAL = 1
        IF (NVAL .GT. NMAX) NVAL = NMAX
d109 1
a109 1
20      IF (PROMPT(:1) .EQ. '~') THEN
d116 1
a116 1
           IF (NCHAR .EQ. 0 .OR. IRTFLG .NE. 0) RETURN
d119 1
a119 1
21     IF (ANS(NCHAR:NCHAR) .EQ. ',') THEN
d127 1
a127 1
           IF ((NCHAR + NCHAR2) .GT. MAXANS) THEN
d129 1
a129 1
              CALL ERRT(6,'RDPRANC',NDUM)
d142 2
a143 2
     &                 NLOOP .GT. 1 .AND.
     &                 ILOOP .GT. 1 .AND.
d147 1
a147 1
        IF (ISEMICOLON .EQ. 0) ISEMICOLON = NCHAR
d149 1
a149 1
     &               (INDEX(ANS(1:ISEMICOLON),'[') .EQ. 0)
d159 4
d176 1
a176 1
           IF (IGO .LE. 0) EXIT
d182 1
a182 1
           IF (ANS(IGO:IEND) .EQ. '-') THEN
d189 1
a189 1
           IF (ANS(IGO:IGO) .EQ. '[')THEN
d201 1
a201 1
                 IF (PROMPT(1:1) .EQ. '~') RETURN
d208 1
a208 1
           IF (RANGE .AND. IENDRANGE .LT. IGORANGE) THEN
d214 1
a214 1
           ELSEIF (RANGE .AND. IENDRANGE .EQ. IGORANGE) THEN
d232 1
a232 1
                    IF (NUMBER .GT. MAXB) THEN
d234 1
a234 1
                       CALL ERRT(6,'RDPRANC',NDUM)
d240 1
a240 1
                    IF (NUMBER .GT. NMAX) THEN
d242 1
a242 1
                       CALL ERRT(6,'RDPRANC',NDUM)
d252 1
a252 1
           IF (.NOT. LOOPNOPAREN .AND. NUMBER .GE. NVAL) EXIT
d258 1
a258 1
        IF (NUMBER .EQ. 0) THEN
d274 1
a274 1
           IF (NGOT .LT. NVAL)  THEN
@


1.22
log
@removed debug output: write
@
text
@a14 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2007  Health Research Inc.                      *
d16 5
a20 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d22 1
a22 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d27 1
a27 1
C=* This program is distributed in the hope that it will be useful,    *
d29 1
a29 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a30 1
C=*                                                                    *
d32 1
a32 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.21
log
@[var-var] parsing bug.
@
text
@d178 2
a179 2
           write(6,*) '  RDPRANC TOKEN: ',ANS(IGO:IEND)
           write(6,*) '  IGO...IEND: ',IGO,IEND
@


1.20
log
@no uppercase on rdprmc call
@
text
@d11 1
d16 1
a16 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d40 1
a40 1
C    RDPRANC(ILIST,FLIST,NMAX,NUMBER,FLOW,HI,PROMPT,LIMITED,IRTFLG)
d43 1
a43 1
C              RETURNS ARRAY OF REALS, THE NUMBER OF VALUES, OR A
a44 4
C              CHECKS TO SEE THAT VALUES ARE WITHIN FLOW...HI
C              SPECIFIED RANGE.  THIS CAN BE USED FOR EITHER INTEGER
C              OR REAL NUMBER INPUT.  IF USED FOR INTGERS THE VALUES
C              WILL BE TRUNCATED LATER.
d49 1
a49 1
C                  (IF INTS, CAN PUT IN A SERIES OF NUMBERS WITH -)
a54 1
C               FLIST     ARRAY FOR ANSWERS                      (RET.)
d62 3
a64 2
C               FLOW      BOTTEM OF RANGE (CAN'T BE BELOW THIS)   (SENT)
C               HI        TOP OF RANGE (CAN'T BE ABOVE THIS)      (SENT)
d66 1
a66 1
C               LIMITED   REQUIRES NMAX VALUES / CALL, SO THAT
a67 1
C               INTS      BEING USED FOR INTEGER RETURN           (SENT)
d74 1
a74 1
C          THIS DIFFERS FROM: RDPRINC IN THAT IT DOES NOT EVALULATE
d76 1
a76 1
C          DO NOT CONFUSE THE TWO SUBROUTINES
d78 1
d81 2
a82 2
        SUBROUTINE RDPRANC(ILIST,FLIST,NMAX,NUMBER,FLOW,HI,PROMPT,
     &                     LIMITED,INTS,IRTFLG)        
d85 1
d87 1
a87 4
        PARAMETER            (MAXB = 200)
        DIMENSION            FBUF(MAXB)
        COMMON /RDPRINC_BUF/ FBUF

a88 1
        DIMENSION            FLIST(NMAX)
d98 2
a99 2
        LOGICAL              SKIP,LOOPNOPAREN,LIMITED,ISDIGI
        LOGICAL              INTS,RANGE,NEWRANGE
d101 1
d110 1
a110 1
        NEWRANGE  = .FALSE.
d144 5
a148 2
        LOOPNOPAREN = (ANS(1:1) .NE. '(' .AND. NLOOP .GT. 1 .AND.
     &                  ILOOP .GT. 1)
d165 9
a173 1
        IEND   = 0
d175 5
a179 7
C       GET A TOKEN (CHAR. STRING DELIMITED BY A ", ()") FROM STRING
50      IFIRST = IEND + 1
        CALL GETNEXTTOKEN(ANS,IFIRST,IGO,IEND)
        IF (IGO .LE. 0) THEN
C          ALL TOKENS FROM STRING HAVE BEEN EVALUATED
           GOTO 5000
        ENDIF
d181 2
a182 9
C       TOKEN RETURNED, SET START POSITION OF NEXT TOKEN IN ANS
        RANGE    = NEWRANGE
        NEWRANGE = .FALSE.
        IF (INTS) THEN
C          CHECK FOR RANGE DELIMITER, I.E. 1-12 (BUT NOT -10.0E-1))
           LOCMINUS = INDEX(ANS(IGO:IEND),'-') 
           IF (LOCMINUS .GT. 1 .AND. 
     &         (ISDIGI(ANS(IGO+LOCMINUS-2:IGO+LOCMINUS-2)) .OR.
     &          ANS(IGO+LOCMINUS-2:IGO+LOCMINUS-2) .EQ. ']'))  THEN
d184 2
a185 2
              NEWRANGE = .TRUE.
              IEND     = IGO + LOCMINUS - 2
a186 1
        ENDIF
d188 17
a204 10
C       EVALUATE NUMBER OR REGISTER
        NCHAR = IEND - IGO + 1
        CALL CHKSTR(ANS(IGO:IEND),NCHAR,'RE',NDUM,FNUM1,1,INUM,IRTFLG)
        IF (IRTFLG .NE. 0) THEN
C          ERROR SOMEWHERE IN INPUT
           WRITE(NOUT,*) ' *** SYNTAX ERROR: ',ANS(1:IEND)
           CALL ERRT(100,'RDPRANC',NDUM)
           IF (PROMPT(1:1) .EQ. '~') RETURN
           GOTO 20
        ENDIF
d206 1
a206 7
c       RANGE COULD BE SINGLE VALUE (I.E. 1-1)
        IF (NEWRANGE) THEN
C          WANT TO START A NEW RANGE SERIES 
           IGORANGE = FNUM1
           IEND     = IGO + LOCMINUS - 1
           GOTO 50
        ENDIF
d208 5
a212 6
        IENDRANGE = FNUM1
        IF (RANGE .AND. IENDRANGE .LT. IGORANGE) THEN
           WRITE(NOUT,97)IGORANGE,IENDRANGE
   97      FORMAT(' *** ERROR: INVALID FILLRANGE: ',I10,'...',I10)
           CALL ERRT(100,'RDPRANC',NDUM)
           GOTO 20
d214 9
a222 14
        ELSEIF (RANGE .AND. IGORANGE .LE. IENDRANGE) THEN
C          FILL WITH A RANGE OF INTEGER VALUES, STARTED FROM IGORANGE 

C          FILL FBUF OR FLIST
           DO IVAL = IGORANGE,IENDRANGE
              NUMBER = NUMBER + 1
              IF (LOOPNOPAREN) THEN
C                FILL FBUF AS A TEMPORARY ARRAY
                 IF (NUMBER .GT. MAXB) THEN
C                   FBUF WILL OVERFLOW ! 
                    CALL ERRT(6,'RDPRANC',NDUM)
                    RETURN
                 ENDIF
                 FBUF(NUMBER)  = IVAL
d224 22
a245 5
C                FILL ILIST
                 IF (NUMBER .GT. NMAX) THEN
C                   ILIST WILL OVERFLOW ! 
                    CALL ERRT(6,'RDPRANC',NDUM)
                    RETURN
d247 2
a248 19
                 ILIST(NUMBER) = IVAL
              ENDIF
           ENDDO 
        ELSE
C          FILL WITH THIS VALUE ONLY
           NUMBER = NUMBER + 1
           IF (LOOPNOPAREN) THEN
              IF (NUMBER .GT. MAXB) THEN
C                FBUF WILL OVERFLOW ! 
                 CALL ERRT(6,'RDPRANC',NDUM)
                 RETURN
              ENDIF
              FBUF(NUMBER)  = FNUM1
           ELSE
              IF (INTS) THEN
                 ILIST(NUMBER) = FNUM1
              ELSE
                 FLIST(NUMBER) = FNUM1
              ENDIF
a249 1
        ENDIF
d251 4
a254 4
C       GET ANY REMAINING NUMBERS FROM THE INPUT STRING
        IF (.NOT. LOOPNOPAREN .AND. NUMBER .GE. NVAL) GOTO 5000
        RANGE = .FALSE.
        GOTO 50      
a257 1
5000    CONTINUE
d259 1
a259 1
C          GOT NULL INPUT, ACCEPT IT, DO NOT ALTER FLIST
d268 1
a268 1
C          ILOC IS POINTER TO CURRENT LOCATION IN FBUF
d271 1
a271 1
C          NGOT IS NUMBER OF VALUES LEFT IN IBUF/FBUF
d284 1
a284 5
              IF (INTS) THEN
                 ILIST(I) = FBUF(I+ILOC-1)
              ELSE
                 FLIST(I) = FBUF(I+ILOC-1)
              ENDIF
d293 1
a293 1
c             write (NOUT,*) number, ': ',FLIST(I)
@


1.19
log
@[] fouled up range
@
text
@d123 1
d130 1
@


1.18
log
@native named registers
@
text
@d182 2
a183 1
     &         ISDIGI(ANS(IGO+LOCMINUS-2:IGO+LOCMINUS-2))) THEN
@


1.17
log
@GPL License fixed
@
text
@d10 1
a10 1
C               INTEGER RDPRANC  MAY 02                    ARDEAN LEITH
d78 3
d153 1
a153 2
     &               (INDEX(ANS(1:ISEMICOLON),'X') .EQ. 0 .AND. 
     &                INDEX(ANS(1:ISEMICOLON),'x') .EQ. 0)
@


1.16
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a12 1
C **************************************************************************
a13 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d17 1
a17 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a36 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a79 1
C--************************************************************************
@


1.15
log
@can return integer array
@
text
@d2 1
d13 1
d17 24
d88 1
@


1.14
log
@overflow bug on flist from nikolson
@
text
@d10 1
d22 1
a22 1
C    RDPRANC(FLIST,NMAX,NUMBER,FLOW,HI,PROMPT,LIMITED,IRTFLG)
d40 2
a41 1
C  PARAMETERS : FLIST     ARRAY FOR ANSWERS                      (RET.)
d64 2
a65 2
        SUBROUTINE RDPRANC(FLIST,NMAX,NUMBER,FLOW,HI,PROMPT,LIMITED,
     &             INTS,IRTFLG)        
d73 1
d75 1
d211 1
a211 1
C                FILL FLIST
d213 1
a213 1
C                   FLIST WILL OVERFLOW ! 
d217 1
a217 1
                 FLIST(NUMBER) = IVAL
d231 5
a235 1
              FLIST(NUMBER) = FNUM1
d273 5
a277 1
              FLIST(I) = FBUF(I+ILOC-1)
@


1.13
log
@another 1-11,15,17-25,30-45 bug
@
text
@d4 1
a4 1
C  RDPRANC.F  -- CREATED JULY 91 FROM RDPRAI
d9 1
d208 5
@


1.12
log
@bad 1-2,16,18-22 bug fixed
@
text
@d158 1
a158 1
     &         ISDIGI(ANS(LOCMINUS-1:LOCMINUS-1))) THEN
d265 7
@


1.11
log
@used getnexttoken, fixed for ibm
@
text
@d161 1
a161 1
              IEND     = LOCMINUS - 1
d180 1
a180 1
           IEND     = LOCMINUS 
d265 1
@


1.10
log
@bad check for fillange error
@
text
@d8 1
d79 2
a80 2
        LOGICAL              SKIP,REGSUB,LOOPNOPAREN,LIMITED,ISDIGI
        LOGICAL              INTS,RANGE
d89 2
a90 2
        NUMBER = 0
        RANGE  = .FALSE.
d141 1
a141 1
        I      = 0
d143 20
a162 41
   50   I = I + 1
C       CHECK TO SEE IF WE HAVE RUN OUT OF INPUT CHAR.
        IF (I .GT. NCHAR) GOTO 5000

        A = ANS(I:I)
C       CONTINUE CHECKING ANS STRING UNTIL WE GET A NON BLANK CHAR.
        IF (A .EQ. ' ' .OR. A .EQ. ',' .OR. 
     &      A .EQ. '(' .OR. A .EQ. ')' ) GOTO 50

C       HAVE GOT FIRST CHAR IN TOKEN WHICH IS NOT BLANK,(,) OR COMMA
        I1 = I

        REGSUB = (A .EQ. 'X' .OR. A .EQ. 'x') 
        IF (REGSUB) THEN
C          WANT A REGISTER SUBSTITUTION, BLANK ANS OUT FOR READING
           ANS(I:I) = ' '

           I = I + 1
C          IF NO MORE CHAR. OR NON DIGIT CHAR. HAVE INVALID INPUT
           IF (I .GT. NCHAR) GOTO 70
           A = ANS(I:I)
           IF (.NOT. ISDIGI(A)) GOTO 70

        ELSEIF (A .EQ. '-') THEN
C          FIRST CHARACTER IN TOKEN IS MINUS SIGN (NOT A RANGE START)
           I = I + 1
C          IF NO MORE CHAR. HAVE INVALID INPUT
           IF (I .GT. NCHAR) GOTO 70
           A = ANS(I:I)
        ENDIF
     

   54   IF (A .NE. ' ' .AND. A .NE. ',' .AND. 
     &     (.NOT. INTS .OR. A .NE. '-')) THEN
C          INPUT CHAR. IS NOT END OF A INPUT VALUE, MAY HAVE VALID DIGIT?

           I = I + 1
C          CHECK TO SEE IF WE HAVE REACHED END OF INPUT
           IF (I .GT. NCHAR) GOTO 53
           A = ANS(I:I)
           GOTO 54
d165 6
a170 27

C       REACHED END OF TOKEN (DIGITS), FIND NUMBER OF CHAR. IN NUMBER
   53   I2 = I - 1
   55   N  = I2 - I1 + 1

C       CONVERT NUMBER TO REAL FORMAT
        IF (N .LE. 0) GOTO 70

        READ(ANS(I1:I2),*,ERR=70) FNUM1

        IF (REGSUB) THEN
C          FIND REGISTER CONTENTS
           IF (FNUM1 .LT. 0 .OR. FNUM1 .GT. 100) THEN
C             IMPROPER REGISTER NUMBER  
              WRITE(NOUT,920) FNUM1
920           FORMAT(' *** REGISTER RANGE IS 0...100: ',1PG11.3)
              CALL ERRT(100,'RDPRANC',NDUM)
              GOTO 20
           ENDIF
           INUM1 = FNUM1
           FNUM1 = PARAM(INUM1 + 1)
        ENDIF

        IF (FNUM1 .LT. FLOW .OR. FNUM1 .GT. HI) THEN
           WRITE(NOUT,92)FNUM1,FLOW,HI
   92      FORMAT(' *** ERROR: INPUT OUT OF RANGE (',
     &            1PG12.3,'...',1PG12.3,')',/)
d172 1
d176 6
a181 5
C       RANGE COULD BE SINGLE VALUE (I.E. 1-1)
        IF (INTS .AND. RANGE) THEN
C          CONVERT RANGE TO INTEGERS
           IGO  = GORANGE 
           IEND = FNUM1
d184 3
a186 2
        IF (IEND .LT. IGO .AND. RANGE) THEN
           WRITE(NOUT,97)IGO,IEND
d190 3
a192 1
        ENDIF
a193 3
        IF (INTS .AND. RANGE .AND. IEND .GT. IGO) THEN
C          FILL WITH A RANGE OF INTEGER VALUES, STARTED FROM GORANGE + 1
           IGO = IGO + 1
d195 1
a195 1
           DO IVAL = IGO,IEND
d210 1
a210 1
        ELSEIF (.NOT. RANGE) THEN
a224 7
        GORANGE = FNUM1

C       A DASH IMMEDIATELY FOLLOWING NUMBER IS A RANGE SPECIFIER
        RANGE = (A .EQ. '-')
C       MUST BLANK OUT ANY RANGE - 
        IF (RANGE) ANS(I:I) = ' '
  
d227 1
a265 7


C       UNKNOWN ERROR SOMEWHERE IN INPUT
   70   WRITE(NOUT,*) ' *** SYNTAX ERROR: ',ANS(1:I)
        CALL ERRT(100,'RDPRANC',NDUM)
        IF (PROMPT(1:1) .EQ. '~') RETURN
        GOTO 20
@


1.9
log
@fixed 1-1 bug
@
text
@d223 1
a223 1
        IF (IEND .LT. IGO) THEN
@


1.8
log
@fixed 1-1 range bug
@
text
@d249 1
a249 1
        ELSE
@


1.7
log
@*** empty log message ***
@
text
@d7 1
d10 8
a17 8
C *  AUTHOR:   ArDean Leith                                                *
C *  COPYRIGHT (C)1986 , WADSWORTH CENTER FOR LABORATORIES AND             *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH  			   *
C **************************************************************************
d216 1
d218 2
a219 2
C          FILL WITH A RANGE OF INTEGER VALUES, STARTING FROM GORANGE
           IGO  = GORANGE + 1
d221 8
a228 6
           IF (IEND .LT. IGO) THEN
              WRITE(NOUT,97)IGO,IEND
   97         FORMAT(' *** ERROR: INVALID FILLRANGE: ',I10,'...',I10)
              CALL ERRT(100,'RDPRANC',NDUM)
              GOTO 20
           ENDIF
d230 3
@


1.6
log
@overflow protection & continuation lines fixed
@
text
@d64 2
a65 2
        PARAMETER       (MAXB = 200)
        DIMENSION       FBUF(MAXB)
d68 2
a69 2
        DIMENSION          FLIST(NMAX)
        CHARACTER *(*)     PROMPT
d72 2
a73 2
        PARAMETER          (MAXANS = 600)
        CHARACTER * 600    ANS
d75 4
a78 4
        CHARACTER * 80     ANST
	CHARACTER * 1      NULL,A
        LOGICAL            SKIP,REGSUB,LOOPNOPAREN,LIMITED,ISDIGI
        LOGICAL            INTS,RANGE
@


1.5
log
@another loop test (guarantee) added
@
text
@d5 2
a6 1
C                SPILT OUT FROM RDPRAI & RDPRAF  AUG. 1999 ARDEAN LEITH
d70 1
d72 4
a75 2
        PARAMETER          (MAXANS = 160)
        CHARACTER * 160    ANS
d100 3
a102 3
        IF (ANS(NCHAR:NCHAR) .EQ. ',') THEN
C          INPUT CONTINUATION LINE (NO OVERFLOW TRAP ON INPUT !!)
           CALL RDPRMC(ANS(NCHAR+1:),NCHAR2,.TRUE.,
d107 1
a107 1
           IF (NCHAR .GT. MAXANS) THEN
d112 5
@


1.4
log
@bad )
@
text
@d111 2
a112 1
        LOOPNOPAREN = (ANS(1:1) .NE. '(' .AND. NLOOP .GT. 1)
@


1.3
log
@lowercase x check
@
text
@d117 1
a117 1
     &               (INDEX(ANS(1:ISEMICOLON),'x') .EQ. 0)
@


1.2
log
@can accept x** without () within loop
@
text
@d116 2
a117 1
     &               (INDEX(ANS(1:ISEMICOLON),'X') .EQ. 0)
@


1.1
log
@Initial revision
@
text
@d111 7
a117 1
        LOOPNOPAREN = (ANS(1:1) .NE. '(' .AND. NLOOP .GT. 1) 
@
