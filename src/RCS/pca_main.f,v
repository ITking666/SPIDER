head	1.27;
access;
symbols
	best-code:1.27
	x-named-regs:1.26
	x:1.26
	v13-00:1.26
	pre_GPL:1.24
	prec_CA:1.24
	noindx:1.24
	Bproc:1.18
	oct21:1.15
	last77:1.14;
locks; strict;
comment	@c @;


1.27
date	2006.03.07.19.50.35;	author leith;	state dead;
branches;
next	1.26;

1.26
date	2005.10.17.20.45.06;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2005.10.17.18.35.32;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2002.08.26.15.19.27;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2002.08.23.17.11.29;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2001.04.06.17.35.16;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2001.04.06.15.43.51;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2001.04.02.14.53.53;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2001.01.04.17.30.09;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2000.06.12.16.57.08;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2000.06.12.15.33.33;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2000.06.05.13.46.29;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	99.08.09.17.50.20;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	98.04.06.19.28.51;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	96.11.27.19.01.56;	author mladjadj;	state Exp;
branches;
next	1.12;

1.12
date	96.08.08.15.53.56;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	96.08.08.15.48.00;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	96.08.06.20.23.12;	author mladjadj;	state Exp;
branches;
next	1.9;

1.9
date	96.08.01.19.15.50;	author mladjadj;	state Exp;
branches;
next	1.8;

1.8
date	96.07.30.14.10.24;	author mladjadj;	state Exp;
branches;
next	1.7;

1.7
date	96.07.23.14.03.32;	author mladjadj;	state Exp;
branches;
next	1.6;

1.6
date	96.07.19.18.36.02;	author mladjadj;	state Exp;
branches;
next	1.5;

1.5
date	95.10.10.19.11.54;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.10.04.18.28.25;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	95.10.04.18.19.37;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.08.29.18.45.41;	author mladjadj;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.51.06;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.27
log
@unused now
@
text
@
C++*********************************************************************
C                    
C  PCA_MAIN               WRITTEN:   11/1/93  MAHIEDDINE LADJADJ          11/1/93             
C                         FORCE_INCORE ADDED JUN 2000 ArDean Leith
C                         USED ALLOCATE JAN 2001 ArDean Leith
C                         USED OPAUXFIL APR 2001 ArDean Leith
C
C **********************************************************************
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
C=*                                                                    *
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* This program is distributed in the hope that it will be useful,    *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
C **********************************************************************
C
C   PCA_MAIN(NUMIM, NFAC, NSAM, NROW, NPIX, LSAV, 
C            LIMA, LPIX, LEIG, Q, MEM, LUV, 
C            IMAR, MADAR, NACT, NOUT,FORCE_INCORE)
C 
C   PURPOSE:  DOES PRINCIPAL COMPONENT ANALYSIS.
C
C   PARAMETERS:
C	NFAC 	NUMBER OF EIGENVECTORS REQUESTED
C       NUMIM	NUMBER OF IMAGES
C       NACT    NUMBER OF ACTIVE IMAGES
C	NPIX    NUMBER OF PIXELS PER IMAGE
C	LSAV	SEQUENTIAL IMAGE FILE                           (INPUT)
C	LIMA    IMAGE COORDINATE FILE                          (OUTPUT)
C	LPIX    PIXEL COORDINATE FILE                          (OUTPUT)
C	LEIG	EIGENSTUFF FILE                                (OUTPUT)
C	LTMP	SCRATCH FILE
C
C       ALL FILES MUST BE UNFORMATTED!
C	Q	ARRAY OF FOUR - BYTE WORDS WITH DIMENSION MEM
C	LUV	LOGICAL UTILITY VECTOR (1 = ACTIVE,  0 = INACTIVE)
C         
C--*********************************************************************

        SUBROUTINE PCA_MAIN(NUMIM, NFAC, NSAM, NROW, NPIX, LSAV, 
     &	                   LIMA, LPIX, LEIG, Q, MEM, LUV, 
     &                     IMAR, MADAR, NACT, NOUT,FORCE_INCORE)

        DIMENSION   LUV(*), IMAR(*), MADAR(*), Q(*)
        INTEGER     ANS
        LOGICAL     FORCE_INCORE
        CHARACTER *1 NULL
        CHARACTER *80 SCRATCH
        REAL, ALLOCATABLE, DIMENSION(:) ::  B

#ifndef SP_32
        INTEGER *8       SIZE1,SIZE2,TSIZE
#else
        INTEGER *4       SIZE1,SIZE2,TSIZE
#endif

        DATA  LTMP, LTRANSP/78, 79/

        NULL    = CHAR(0)
        NINACT  = NUMIM - NACT 
        NFAC0   = NFAC
        NFAC    =  MIN0(NFAC, NACT, NPIX) 
        SCRATCH = 'TEMP_SCRATCH'

        IF (NFAC .LE. 0) THEN
           WRITE(NOUT,*) 'INVALID NUMBER OF FACTORS: ',NFAC
           CALL ERRT(100,'PCA_MAIN',NDUM)
           RETURN
        ENDIF
           
        IF (NFAC .NE. NFAC0) WRITE(NOUT,12) NFAC
12      FORMAT(' WARNING: NUMBER OF FACTORS LIMITED TO: ',I4)

C       CREATE HEADERS FOR  FILES IMC ***  AND PIXEL *** 

        CALL REW(LIMA, 0)
        WRITE(LIMA) NUMIM, NFAC, NSAM, NROW
        CALL REW(LPIX, 0)
        WRITE(LPIX) NPIX, NFAC, NSAM, NROW

C	FIND MEMORY NEEDED. IN-CORE
        SIZE1 = NPIX
        SIZE1 = SIZE1 * NPIX + 4 * NPIX +  NFAC

C	MEMORY NEEDED. TRANSPOSED
C	IN  PCAXPOSE: T(NPIX,NACT) NEEDED, LU() USED WITH NACT, THEN
C       NPIX DIMENSION. LD() ALSO.  SO CHANGE NEXT LINE
C       SIZE2 = NPIX + MAX0(NACT,NPIX)  + 2 * NACT + NACT * NACT + NFAC
        SIZE2 = 2 * NPIX + MAX0(NACT,NPIX) * (NACT + 2) + NFAC

C       TRY TO DO SOME CALCULATIONS TO CHOOSE THE QUICKEST METHOD
C       ACCORDING TO THE SIZE OF THE PROBLEM

C       IBM "MIN & MAX" CAN NOT HANDLE INTEGER * 8
        TSIZE = SIZE1
        IF (SIZE2 .LT. SIZE1) TSIZE = SIZE2

	WRITE(NOUT,7891)  SIZE1,SIZE2
7891	FORMAT('  MEMORY NEEDED. IN-CORE:',I12,'  TRANSPOSED:',I12)

C	DYNAMIC ALLOCATION OF MEMORY POSSIBLE ?

        IF (200*NFAC .LT. MIN0(NPIX,NACT)) THEN
C	   SMALL NUMBER OF FACTORS: GOTO ITERATIVE METHOD	
           GOTO 310
	ELSE
           ALLOCATE(B(TSIZE),STAT=IRTFLG)
	   IF (IRTFLG.EQ.0)  THEN 
C             HAVE ENOUGH MEMORY FOR INCORE OR INCOR_TRANSPOSED 
	      IF (FORCE_INCORE .OR. SIZE1 .LE. SIZE2) GOTO 110

C             USE TRANSPOSED-INCORE SOLUTION
	      GOTO 210
	   END IF 
	ENDIF

C       NOT ENOUGH INCORE MEMORY-- USE ITERATIVE
	GOTO 310


C       I N  -  C O R E   S O L U T I O N ----------------------------
C       MEMORY SEGMENTATION POINTERS

110     LD      =  1
        LS      =  LD  +  NPIX
        LU      =  LS  +  NPIX * NPIX
        LPJ     =  LU  +  NPIX
        LCO     =  LPJ +  NPIX
        LW      =  LCO +  NPIX
        LMAX    =  LW  +  NFAC

        WRITE(NOUT,*) ' IN - CORE SOLUTION CHOSEN'
  
C	B(LCO) IS TEMPORARELY USED TO STORE STANDARD DEVIATIONS
        CALL PCA_INCOR3(NUMIM, NPIX, NACT, NFAC, B(LS), B(LD), 
     &       B(LU), B(LPJ), TRACE, SOM, LSAV, LUV)

        WRITE(LEIG) NFAC, SOM, TRACE
                                                      
C       STORE THE EIGENVALUES                       
        WRITE(LEIG) (B(LD + K), K = 0, NFAC - 1)

C       STORE PIXEL AVERAGES
        WRITE(LEIG) (B(LPJ + K), K = 0, NPIX -1)
                
        CALL  PCA_COORX(NFAC, NPIX, NPIX, NUMIM, B(LS), B(LD), 
     &	     TRACE, B(LPJ), SOM, B(LCO), B(LU), B(LW),
     &		      LSAV, LIMA, LPIX, LUV, MADAR)
     
        IF (ALLOCATED(B)) DEALLOCATE(B)
	 
        RETURN
   

C       T R A N S P O S E D   S O L U T I O N -----------------------

C       MEMORY SEGMENTATION POINTERS         
210     LPJ      =  1
        LCO      =  LPJ +  NPIX
        LD       =  LCO +  NPIX
        LS       =  LD  +  MAX0(NACT,NPIX)
        LU       =  LS  +  NACT * MAX0(NACT,NPIX)
        LW       =  LU  +  MAX0(NACT,NPIX)
        LMAX     =  LW  +  NFAC

        IF (NACT .EQ. NUMIM)  THEN
          WRITE(NOUT,*)' IN - CORE SOLUTION USING TRANSPOSED DATA'

          CALL OPAUXFILE(.FALSE.,SCRATCH,NULL,-LTRANSP,0,
     &                  'S',' ',.TRUE.,IRTFLG)

C         FOR THIS CALL, B(LD) IS USED AS A TEMPORARY STORAGE
          CALL PCAXPOSE(B(LD),B(LPJ), NPIX, NACT,
     &                     NUMIM,LUV, LSAV,LTRANSP)
                                                   
          CALL PCAXPROD(NPIX,NACT,NPIX,NFAC,B(LS),B(LD), 
     &         B(LU), TRACE, SOM, LTRANSP, MADAR)

          WRITE(LEIG) NFAC, SOM, TRACE, NACT

C         STORE EIGENVALUES
          WRITE(LEIG) (B(LD + K), K = 0, NFAC - 1)

C         STORE PIXEL AVERAGES
          WRITE(LEIG) (B(LPJ + K), K = 0, NPIX - 1)
                         
          CALL  PCAXCOOR(NFAC, NACT, NACT, NPIX, B(LS), B(LD), 
     &             TRACE, B(LPJ), SOM, B(LCO), B(LU), B(LW),
     &             LTRANSP,LPIX, LIMA, MADAR, LUV)

          IF (ALLOCATED(B)) DEALLOCATE(B)
 
          CLOSE(LTRANSP, STATUS = 'DELETE')
          RETURN
        ELSE
          WRITE(NOUT,*)' MEMORY SUFFICIENT FOR IN - CORE SOLUTION '
          WRITE(NOUT,*)' USING TRANSPOSED DATA. UNFORTUNATELY '
          WRITE(NOUT,*)' CANNOT HANDLE INACTIVE IMAGES'
          WRITE(NOUT,*)' ***>>> TRYING ITERATIVE SOLUTION '
 
          IF (ALLOCATED(B)) DEALLOCATE(B)
        ENDIF

C       ITERATIVE   SOLUTION ----------------------------------------

310     JBASE  =  NFAC  +  3
        LBASE  =  JBASE
        KB     =  LBASE

C	MEMORY SEGMENTATION POINTERS
        LS	 =  1
        LD	 =  LS   +  NPIX * LBASE
        LPJ	 =  LD   +  NPIX
        LCO	 =  LPJ  +  NPIX
        LU	 =  LCO  +  NPIX
        LV	 =  LU   +  NPIX
        LW	 =  LV   +  NPIX
        LBZ	 =  LW   +  NFAC
        LAD	 =  LBZ  +  NPIX * LBASE
        LINB     =  LAD  +  LBASE * LBASE
        LMAX     =  LINB +  LBASE

        ALLOCATE(B(LMAX),STAT=IRTFLG)
	IF (IRTFLG .NE. 0)  THEN  
           WRITE(NOUT,* )
     &          '*** INSUFFICIENT MEMORY FOR ITERATIVE SOLUTION'
           CALL ERRT(102, 'PCA_MAIN NEEDED', LMAX)
           RETURN
        ENDIF

        CALL OPAUXFILE(.FALSE.,SCRATCH,NULL,-LTMP,0,
     &                  'S',' ',.TRUE.,IRTFLG)
     
        CALL PCA_STOCHA(JBASE,NPIX,NUMIM,NFAC,NACT,NITER,LUV,B(LPJ), 
     &	            B(LS), B(LU), TRACE, SOM, B(LV), B(LBZ),
     &	            B(LD), B(LAD), B(LINB), LSAV, LTMP)

        CLOSE(LTMP, STATUS = 'DELETE')

C       PUT EIGENVECTORS IN DECENDING ORDER ...
        CALL ORDERE(NPIX,NFAC,B(LS),B(LD))
  
        CALL PCASCOOR(NFAC, KB, NPIX, NUMIM, B(LS), B(LD), 
     &              TRACE, B(LPJ), SOM, B(LCO), B(LU), B(LW),
     &	            LSAV, LIMA, LPIX, LUV, MADAR)
        
        WRITE(LEIG) NFAC, SOM, TRACE
        WRITE(LEIG) (B(LD + K), K = 0, NFAC - 1)
        WRITE(LEIG) (B(LPJ + K), K = 0, NPIX- 1)
	
        IF (ALLOCATED(B)) DEALLOCATE(B)
 
        END
@


1.26
log
@GPL License fixed
@
text
@@


1.25
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a9 2
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d13 1
a13 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a32 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.24
log
@fixed INTEGER * 8 calculation for memory
@
text
@d2 1
d10 1
d13 24
@


1.23
log
@opening name for scratch file fixed
@
text
@d46 1
a46 1
        INTEGER     ANS, SIZE1, SIZE2, TSIZE
d52 6
d82 3
a84 2
C	MEMORY NEEDED. IN-CORE
        SIZE1 = NPIX * NPIX + 4 * NPIX +  NFAC
d94 5
a98 2
	
        TSIZE = MIN0(SIZE1,SIZE2)
d100 1
a100 1
7891	FORMAT('  MEMORY NEEDED. IN-CORE:',I8,'  TRANSPOSED:',I8)
@


1.22
log
@NT needed CDUM for filname & null for prompt
@
text
@d48 2
a49 1
        CHARACTER *1 NULL,CDUM
d54 5
a58 4
        NULL   = CHAR(0)
        NINACT = NUMIM - NACT 
        NFAC0  = NFAC
        NFAC   =  MIN0(NFAC, NACT, NPIX) 
d160 1
a160 1
          CALL OPAUXFILE(.FALSE.,CDUM,NULL,-LTRANSP,0,
d217 3
a219 4
     &          ' *** INSUFFICIENT MEMORY FOR ITERATIVE SOLUTION'
          WRITE(NOUT,*) ' ***    NEEDED ', LMAX
          CALL ERRT(100, 'PCA_MAIN', NE)
          RETURN
d222 1
a222 1
       CALL OPAUXFILE(.FALSE.,CDUM,NULL,-LTMP,0,
@


1.21
log
@used null in opauxfile call
@
text
@d48 1
a48 1
        CHARACTER *1 NULL
d158 1
a158 1
          CALL OPAUXFILE(.FALSE.,FILNAM,NULL,-LTRANSP,0,
d221 1
a221 1
       CALL OPAUXFILE(.FALSE.,FILNAM,NULL,-LTMP,0,
@


1.20
log
@used opauxfile.f
@
text
@d48 1
a48 1

d53 1
d158 2
a159 2
          CALL OPAUXFILE(.FALSE.,FILNAM,CHAR(0),-LTRANSP,0,
     &                  'S', ' ',.TRUE.,IRTFLG)
d221 2
a222 2
       CALL OPAUXFILE(.FALSE.,FILNAM,CHAR(0),-LTMP,0,
     &                  'S', ' ',.TRUE.,IRTFLG)
@


1.19
log
@used allocate
@
text
@d4 4
a7 2
C  PCA_MAIN               FORCE_INCORE ADDED JUN 2000 ArDean Leith
C                         USED ALLOCATE JAN 2001 ARDEAN LEITH
a9 1
C * AUTHOR : MAHIEDDINE LADJADJ          11/1/93                                                              *
d18 5
a22 1
C	PURPOSE:  DOES PRINCIPAL COMPONENT ANALYSIS.
d24 1
d29 4
a32 4
C	LSAV	SEQUENTIAL IMAGE FILE (INPUT)
C	LIMA    IMAGE COORDINATE FILE (OUTPUT)
C	LPIX    PIXEL COORDINATE FILE (OUTPUT)
C	LEIG	EIGENSTUFF FILE (OUTPUT)
d155 1
a155 2
          WRITE(NOUT,*)
     &     ' IN - CORE SOLUTION USING TRANSPOSED DATA'
d157 3
a159 3
          OPEN(FILE = 'TRANSPOSED.FILE', UNIT = LTRANSP, 
     &			STATUS = 'UNKNOWN', FORM = 'UNFORMATTED')
 
d213 3
a215 3
          WRITE(NOUT,* )
     &       ' *** MEMORY INSUFFICIENT FOR ITERATIVE SOLUTION'
          WRITE(NOUT,*) '    NEEDED ', LMAX
d220 2
a221 2
	OPEN(LTMP, FILE = 'SCR999.DAT', STATUS = 'UNKNOWN', 
     &             FORM = 'UNFORMATTED')
d230 1
a230 1
        CALL  ORDERE(NPIX,NFAC,B(LS),B(LD))
@


1.18
log
@missing quote
@
text
@d5 1
d8 8
a15 10
C *  AUTHOR :                                                              *
C *  COPYRIGHT (C)1987 , WADSWORTH CENTER FOR LABORATORIES AND             *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
C
C	AUTHOR: MAHIEDDINE LADJADJ          11/1/93
a38 2
        INCLUDE 'F90ALLOC.INC'

d40 2
a41 2
        INTEGER     K, LTRANSP , LTMP, NFAC0, ANS, SIZE1, SIZE2, TSIZE
        LOGICAL     RUNTIME ,FORCE_INCORE
d43 1
a43 2
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: B
d80 2
a81 3
	WRITE(NOUT,7891)  SIZE1,SIZE2,MEM
7891	FORMAT('  MEMORY NEEDED. IN-CORE:',I8,'  TRANSPOSED:',I8,
     &     ' AVAILABLE:',I8)
d89 1
a89 1
	   CALL CHKMEM(TSIZE,Q,MEM,RUNTIME,IPQ,IRTFLG)
a91 1
              B => IPQ
a103 1

d132 1
a132 1
        IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'pca_main',IRTFLG)
d147 2
a148 1
        IF(NACT .EQ. NUMIM)  THEN
d174 1
a174 1
          IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'pca_main',IRTFLG)
d184 2
a185 2
          IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'pca_main',IRTFLG)
        END IF
d206 2
a207 2
	CALL CHKMEM(LMAX,Q,MEM,RUNTIME,IPQ,IRTFLG)
	IF (IRTFLG.NE.0)  THEN  
d210 1
a210 1
          WRITE(NOUT,*) '    NEEDED ', LMAX, ' AVAILABLE ', MEM
a213 1
        B = >IPQ
d235 1
a235 1
        IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'pca_main',IRTFLG)
@


1.17
log
@trap added for <=0 factors
@
text
@d56 1
a56 1
           WRITE(NOUT,*) INVALID NUMBER OF FACTORS: ',NFAC
@


1.16
log
@can force incore
@
text
@d3 1
a4 1
C                    
a15 1
C
d18 1
a18 2
C	PURPOSE:
C	THIS ROUTINE DOES THE PRINCIPAL COMPONENT ANALYSIS.
d54 7
@


1.15
log
@*** empty log message ***
@
text
@d3 2
a4 1
C   
d40 1
a40 1
     &                     IMAR, MADAR, NACT, NOUT)
a41 2
        DIMENSION  LUV(*), IMAR(*), MADAR(*), Q(*)
        INTEGER K, LTRANSP , LTMP, NFAC0, ANS, SIZE1, SIZE2, TSIZE
d43 5
d50 1
a50 1
        LOGICAL   RUNTIME 
d52 1
a52 1
C         
d54 4
a57 6
        NFAC0 = NFAC
        NFAC  =  MIN0(NFAC, NACT, NPIX) 
        IF (NFAC .NE. NFAC0) THEN
          WRITE(NOUT,12) NFAC
12        FORMAT(' WARNING: NUMBER OF FACTORS LIMITED TO: ',I4)
        END IF
a58 1
C
d60 1
a60 1
C
d66 1
a66 1
c	Memory needed. In-core
d69 4
a72 4
c	Memory needed. Transposed
c	in  pcaxpose: T(npix,nact) needed, LU() used with nact, then
c       npix dimension. LD() also.  so change next line
c       SIZE2 = NPIX + MAX0(NACT,NPIX)  + 2 * NACT + NACT * NACT + NFAC
d85 2
a86 2
        IF(200*NFAC .LT. MIN0(NPIX,NACT)) THEN
c	   small number of factors: GOTO iterative method	
d90 6
a95 3
	   IF(IRTFLG.EQ.0)  THEN  
         B = >IPQ
	      IF(TSIZE.EQ.SIZE1) GOTO 110
d99 2
d104 4
a107 6
C 
C         I N  -  C O R E   S O L U T I O N
C 
C
C              MEMORY SEGMENTATION POINTERS
C
a135 1

d138 3
a140 3
C
C       T R A N S P O S E D   S O L U T I O N
C
d186 1
a186 1
 
d188 1
a188 5
        END IF
      
C 
C       ITERATIVE   SOLUTION
C 
d193 1
a193 1
C	
a194 1
C
d208 1
a208 1
	IF(IRTFLG.NE.0)  THEN  
d215 2
a216 2
         B = >IPQ
C
d226 1
a226 1
C       Put eigenvectors in decending order ...
@


1.14
log
@f90 alloc
@
text
@a42 1
#ifdef SP_F90
a45 4
#else
        DIMENSION B(1)
        POINTER   (IPQ,B)
#endif
d48 1
a48 2
CNO_SAVE           

a89 1
#ifdef SP_F90
a90 1
#endif
a216 1
#ifdef SP_F90
d218 1
a218 2
#endif

@


1.13
log
@use of chkmem call instead of allocit
@
text
@d43 5
d50 1
d96 3
d225 3
d229 1
a229 1
3100    OPEN(LTMP, FILE = 'SCR999.DAT', STATUS = 'UNKNOWN', 
a250 1
        RETURN
@


1.12
log
@lowercased ifdef
@
text
@d41 1
a41 1
        DIMENSION  LUV(*), IMAR(*), MADAR(*)
a42 1
#ifdef  SP_ALLOC
d45 1
a45 4
        LOGICAL   RUNTIME
#else
        DIMENSION Q(*)
#endif
d48 1
d84 1
a84 1
        IF( 200*NFAC.LT. MIN0(NPIX,NACT)) THEN
d88 2
a89 6
#ifdef SP_ALLOC
	   CALL ALLOCIT(TSIZE,RUNTIME,IPQ,'pca_main',IRTFLG)
           IF(RUNTIME)  THEN
#else
           IF(TSIZE.LT.MEM) THEN
#endif
d92 1
a92 1
	   END IF
d112 1
a112 2

#ifdef SP_ALLOC
d129 2
a130 19
        CALL ALLOCIT(0,RUNTIME,IPQ,'pca_main',IRTFLG)
#else
C	Q(LCO) IS TEMPORARELY USED TO STORE STANDARD DEVIATIONS
        CALL PCA_INCOR3(NUMIM, NPIX, NACT, NFAC, Q(LS), Q(LD), 
     &       Q(LU), Q(LPJ), TRACE, SOM, LSAV, LUV)

        WRITE(LEIG) NFAC, SOM, TRACE
                                                      
C       STORE THE EIGENVALUES                       
        WRITE(LEIG) (Q(LD + K), K = 0, NFAC - 1)

C       STORE PIXEL AVERAGES
        WRITE(LEIG) (Q(LPJ + K), K = 0, NPIX -1)
                
        CALL  PCA_COORX(NFAC, NPIX, NPIX, NUMIM, Q(LS), Q(LD), 
     &	     TRACE, Q(LPJ), SOM, Q(LCO), Q(LU), Q(LW),
     &		      LSAV, LIMA, LPIX, LUV, MADAR)
          
#endif
d151 1
a151 2

#ifdef SP_ALLOC
d171 2
a172 24
          CALL ALLOCIT(0,RUNTIME,IPQ,'pca_main',IRTFLG)
#else
C         FOR THIS CALL, Q(LD) IS USED AS A TEMPORARY STORAGE
          CALL PCAXPOSE(Q(LD),Q(LPJ), NPIX, NACT,
     &                     NUMIM,LUV, LSAV,LTRANSP)
                                                   
          CALL PCAXPROD(NPIX,NACT,NPIX,NFAC,Q(LS),Q(LD), 
     &         Q(LU), TRACE, SOM, LTRANSP, MADAR)

          WRITE(LEIG) NFAC, SOM, TRACE, NACT

C         STORE EIGENVALUES
          WRITE(LEIG) (Q(LD + K), K = 0, NFAC - 1)

C         STORE PIXEL AVERAGES
          WRITE(LEIG) (Q(LPJ + K), K = 0, NPIX - 1)
                         
          CALL  PCAXCOOR(NFAC, NACT, NACT, NPIX, Q(LS), Q(LD), 
     &             TRACE, Q(LPJ), SOM, Q(LCO), Q(LU), Q(LW),
     &             LTRANSP,LPIX, LIMA, MADAR, LUV)

#endif


d180 3
a182 3
#ifdef SP_ALLOC
      IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'pca_main',IRTFLG)
#endif
d208 2
a209 6
#ifdef SP_ALLOC
         CALL ALLOCIT(LMAX,RUNTIME,IPQ,'pca_main',IRTFLG)
         IF(.NOT.RUNTIME)  THEN
#else
         IF(LMAX.GT.MEM) THEN
#endif
d219 1
a219 2
#ifdef SP_ALLOC

d227 1
a227 1
        call  ordere(npix,nfac,B(ls),B(ld))
d237 2
a238 20
        CALL ALLOCIT(0,RUNTIME,IPQ,'pca_main',IRTFLG)
#else
        CALL PCA_STOCHA(JBASE,NPIX,NUMIM,NFAC,NACT,NITER,LUV,Q(LPJ), 
     &	            Q(LS), Q(LU), TRACE, SOM, Q(LV), Q(LBZ), Q(LD), 
     &	            Q(LAD), Q(LINB), LSAV, LTMP)

        CLOSE(LTMP, STATUS = 'DELETE')

C       Put eigenvectors in decending order ...
        call  ordere(npix,nfac,q(ls),q(ld))
  
        CALL PCASCOOR(NFAC, KB, NPIX, NUMIM, Q(LS), Q(LD), 
     &              TRACE, Q(LPJ), SOM, Q(LCO), Q(LU), Q(LW),
     &	            LSAV, LIMA, LPIX, LUV, MADAR)
        
        WRITE(LEIG) NFAC, SOM, TRACE
        WRITE(LEIG) (Q(LD + K), K = 0, NFAC - 1)
        WRITE(LEIG) (Q(LPJ + K), K = 0, NPIX- 1)
#endif
	
@


1.11
log
@error (***) flag should not be used on comment output
@
text
@d43 1
a43 1
#IFDEF SP_ALLOC
@


1.10
log
@better pointer memory calculations
@
text
@a2 1
C
d37 1
a37 1
        SUBROUTINE PCA_MAIN(numim, NFAC, nsam, nrow, npix, LSAV, 
d42 2
a43 2
        INTEGER K, LTRANSP , LTMP, NFAC0, ans, size1, size2, tsize
#ifdef SP_ALLOC
d55 1
a55 1
        IF(NFAC .NE. NFAC0) THEN
d57 1
a57 1
12        FORMAT(' WARNING: number of factors limited to ',I4)
d82 2
a83 2
7891	FORMAT(' Memory needed. In-core:',i8,'  Transposed:',i8,
     &     ' Available:',i8)
d118 1
a118 1
        WRITE(NOUT,*) ' ***  IN - CORE SOLUTION'
d172 1
a172 1
     &     ' *** IN - CORE SOLUTION USING TRANSPOSED DATA'
d224 4
a227 4
          WRITE(NOUT,*)'MEMORY SUFFICIENT FOR IN - CORE SOLUTION '
          WRITE(NOUT,*)'USING TRANSPOSED DATA. UNFORTUNATELY '
          WRITE(NOUT,*)'CANNOT HANDLE INACTIVE IMAGES'
          WRITE(NOUT,*)'***>>> TRYING ITERATIVE SOLUTION '
@


1.9
log
@prob exists. temp retrieval of r1.5 version
@
text
@d42 1
a42 1
        DIMENSION Q(*), LUV(*), IMAR(*), MADAR(*)
d44 7
d68 13
a80 7
 
C
C	TRY TO DO SOME CALCULATIONS TO CHOOSE THE QUICKEST METHOD
C	ACCORDING TO THE SIZE OF THE PROBLEM
C
	SIZE1 = NPIX * NPIX + 4 * NPIX + NFAC
        SIZE2 = NPIX * (NACT + 1)
d83 1
a83 1
7891    FORMAT(' Memory needed. In-core:',i8,'  Transposed:',i8,
d85 19
a103 32
C
C	DOES THE PROBLEM FIT IN MEMORY ?
C
        IF(TSIZE .GT. MEM) THEN
C         TRY THE ITERATIVE METHOD.
          GOTO 310
        ELSE
C
C         EITHER IN-CORE OR TRANSPOSE METHOD OR BOTH FIT IN MEMORY
C         STILL ITERATIVE COULD BE FASTER IF() IS TRUE
C
          IF(50*NFAC.LT.MIN0(NPIX,NACT)) THEN
C
C           DO THE ITERATIVE METHOD.
C
            GOTO 310
          ELSE
            IF (NACT .LT. NPIX) THEN
              IF(SIZE2 .LT. MEM) THEN
                GOTO 210
              ELSE
                GOTO 110
              END IF
            ELSE
              IF(SIZE1 .LT. MEM) THEN
                GOTO 110
              ELSE
                GOTO 210
              END IF
            END IF
          END IF
        END IF
a104 7
C
C	NOTE THAT YOU SHOULD NEVER COME HERE, BUT FOR CONSISTENCY ...
C
C        WRITE(NOUT,* ) 
C     $   ' *** MEMORY INSUFFICIENT FOR A SOLUTION OF CA S FOR PCA'
C        RETURN
	
d121 19
d156 2
d166 4
a169 4
        LD       =  LCO +  MAX0(NACT,NPIX)
        LS       =  LD  +  NACT
        LU       =  LS  +  NACT * NACT
        LW       =  LU  +  NACT
d178 22
d219 3
a222 1

d229 4
d246 2
a247 2
        LD	 =  LS   +  NPIX * KB
        LPJ	 =  LD   +  MAX0(NPIX,JBASE)
d250 2
a251 2
        LV	 =  LU   +  MAX0(NPIX,JBASE)
        LW	 =  LV   +  MAX0(NPIX,JBASE)
d255 8
a262 2
        LMAX     =  LINB + LBASE
        IF (LMAX .GT. MEM) THEN
d270 1
a270 1
        OPEN(LTMP, FILE = 'SCR999.DAT', STATUS = 'UNKNOWN', 
d272 5
d278 15
d309 3
@


1.8
log
@put C in column 1
@
text
@d42 1
a42 1
        DIMENSION  LUV(*), IMAR(*), MADAR(*)
a43 7
#ifdef SP_ALLOC
        DIMENSION B(1)
        POINTER   (IPQ,B)
        LOGICAL   RUNTIME
#else
        DIMENSION Q(*)
#endif
d61 7
a67 10

c	Memory needed. In-core
        SIZE1 = NPIX * NPIX + 4 * NPIX +  NFAC

c	Memory needed. Transposed
        SIZE2 = NPIX + MAX0(NACT,NPIX)  + 2 * NACT + NACT * NACT + NFAC

C       TRY TO DO SOME CALCULATIONS TO CHOOSE THE QUICKEST METHOD
C       ACCORDING TO THE SIZE OF THE PROBLEM
	
d70 1
a70 1
7891	FORMAT(' Memory needed. In-core:',i8,'  Transposed:',i8,
d72 32
d105 7
a111 19
C	DYNAMIC ALLOCATION OF MEMORY POSSIBLE ?

        IF( 200*NFAC.LT. MIN0(NPIX,NACT)) THEN
c	   small number of factors: GOTO iterative method	
           GOTO 310
	ELSE
#ifdef SP_ALLOC
	   CALL ALLOCIT(TSIZE,RUNTIME,IPQ,'pca_main',IRTFLG)
           IF(RUNTIME)  THEN
#else
           IF(TSIZE.LT.MEM) THEN
#endif
	      IF(TSIZE.EQ.SIZE1) GOTO 110
	      GOTO 210
	   END IF
	ENDIF
	GOTO 310


a127 19
#ifdef SP_ALLOC
C	B(LCO) IS TEMPORARELY USED TO STORE STANDARD DEVIATIONS
        CALL PCA_INCOR3(NUMIM, NPIX, NACT, NFAC, B(LS), B(LD), 
     &       B(LU), B(LPJ), TRACE, SOM, LSAV, LUV)

        WRITE(LEIG) NFAC, SOM, TRACE
                                                      
C       STORE THE EIGENVALUES                       
        WRITE(LEIG) (B(LD + K), K = 0, NFAC - 1)

C       STORE PIXEL AVERAGES
        WRITE(LEIG) (B(LPJ + K), K = 0, NPIX -1)
                
        CALL  PCA_COORX(NFAC, NPIX, NPIX, NUMIM, B(LS), B(LD), 
     &	     TRACE, B(LPJ), SOM, B(LCO), B(LU), B(LW),
     &		      LSAV, LIMA, LPIX, LUV, MADAR)
     
        CALL ALLOCIT(0,RUNTIME,IPQ,'pca_main',IRTFLG)
#else
a143 2
#endif

a163 22
#ifdef SP_ALLOC
C         FOR THIS CALL, B(LD) IS USED AS A TEMPORARY STORAGE
          CALL PCAXPOSE(B(LD),B(LPJ), NPIX, NACT,
     &                     NUMIM,LUV, LSAV,LTRANSP)
                                                   
          CALL PCAXPROD(NPIX,NACT,NPIX,NFAC,B(LS),B(LD), 
     &         B(LU), TRACE, SOM, LTRANSP, MADAR)

          WRITE(LEIG) NFAC, SOM, TRACE, NACT

C         STORE EIGENVALUES
          WRITE(LEIG) (B(LD + K), K = 0, NFAC - 1)

C         STORE PIXEL AVERAGES
          WRITE(LEIG) (B(LPJ + K), K = 0, NPIX - 1)
                         
          CALL  PCAXCOOR(NFAC, NACT, NACT, NPIX, B(LS), B(LD), 
     &             TRACE, B(LPJ), SOM, B(LCO), B(LU), B(LW),
     &             LTRANSP,LPIX, LIMA, MADAR, LUV)

          CALL ALLOCIT(0,RUNTIME,IPQ,'pca_main',IRTFLG)
#else
d183 1
a183 2
#endif

a184 1
          CLOSE(LTRANSP, STATUS = 'DELETE')
a190 4
#ifdef SP_ALLOC
      IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'pca_main',IRTFLG)
#endif

d214 1
a214 7

#ifdef SP_ALLOC
         CALL ALLOCIT(LMAX,RUNTIME,IPQ,'pca_main',IRTFLG)
         IF(.NOT.RUNTIME)  THEN
#else
         IF(LMAX.GT.MEM) THEN
#endif
d222 1
a222 1
3100    OPEN(LTMP, FILE = 'SCR999.DAT', STATUS = 'UNKNOWN', 
a223 5
#ifdef SP_ALLOC

        CALL PCA_STOCHA(JBASE,NPIX,NUMIM,NFAC,NACT,NITER,LUV,B(LPJ), 
     &	            B(LS), B(LU), TRACE, SOM, B(LV), B(LBZ),
     &	            B(LD), B(LAD), B(LINB), LSAV, LTMP)
a224 15
        CLOSE(LTMP, STATUS = 'DELETE')

C       Put eigenvectors in decending order ...
        call  ordere(npix,nfac,B(ls),B(ld))
  
        CALL PCASCOOR(NFAC, KB, NPIX, NUMIM, B(LS), B(LD), 
     &              TRACE, B(LPJ), SOM, B(LCO), B(LU), B(LW),
     &	            LSAV, LIMA, LPIX, LUV, MADAR)
        
        WRITE(LEIG) NFAC, SOM, TRACE
        WRITE(LEIG) (B(LD + K), K = 0, NFAC - 1)
        WRITE(LEIG) (B(LPJ + K), K = 0, NPIX- 1)
	
        CALL ALLOCIT(0,RUNTIME,IPQ,'pca_main',IRTFLG)
#else
a240 3
#endif
	
        RETURN
@


1.7
log
@correct alloc of memory
@
text
@d137 1
a137 1
 C	Q(LCO) IS TEMPORARELY USED TO STORE STANDARD DEVIATIONS
@


1.6
log
@added alloc call
@
text
@d45 2
a46 2
        DIMENSION Q(1)
        POINTER   (IPQ,Q) 
d118 20
a137 1
C	Q(LCO) IS TEMPORARELY USED TO STORE STANDARD DEVIATIONS
a152 2
#ifdef SP_ALLOC
      IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'pca_main',IRTFLG)
d175 22
d216 1
a216 1
          CLOSE(LTRANSP, STATUS = 'DELETE')
a217 3
#ifdef SP_ALLOC
      IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'pca_main',IRTFLG)
#endif
d219 1
d269 5
d275 15
a305 2
#ifdef SP_ALLOC
      IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'pca_main',IRTFLG)
@


1.5
log
@nosave
@
text
@d42 1
a42 1
        DIMENSION Q(*), LUV(*), IMAR(*), MADAR(*)
d44 7
d68 10
a77 7
 
C
C	TRY TO DO SOME CALCULATIONS TO CHOOSE THE QUICKEST METHOD
C	ACCORDING TO THE SIZE OF THE PROBLEM
C
	SIZE1 = NPIX * NPIX + 4 * NPIX + NFAC
        SIZE2 = NPIX * (NACT + 1)
d80 1
a80 1
7891    FORMAT(' Memory needed. In-core:',i8,'  Transposed:',i8,
d82 19
a100 32
C
C	DOES THE PROBLEM FIT IN MEMORY ?
C
        IF(TSIZE .GT. MEM) THEN
C         TRY THE ITERATIVE METHOD.
          GOTO 310
        ELSE
C
C         EITHER IN-CORE OR TRANSPOSE METHOD OR BOTH FIT IN MEMORY
C         STILL ITERATIVE COULD BE FASTER IF() IS TRUE
C
          IF(50*NFAC.LT.MIN0(NPIX,NACT)) THEN
C
C           DO THE ITERATIVE METHOD.
C
            GOTO 310
          ELSE
            IF (NACT .LT. NPIX) THEN
              IF(SIZE2 .LT. MEM) THEN
                GOTO 210
              ELSE
                GOTO 110
              END IF
            ELSE
              IF(SIZE1 .LT. MEM) THEN
                GOTO 110
              ELSE
                GOTO 210
              END IF
            END IF
          END IF
        END IF
a101 7
C
C	NOTE THAT YOU SHOULD NEVER COME HERE, BUT FOR CONSISTENCY ...
C
C        WRITE(NOUT,* ) 
C     $   ' *** MEMORY INSUFFICIENT FOR A SOLUTION OF CA S FOR PCA'
C        RETURN
	
d134 4
d179 4
d189 4
d216 7
a222 1
        IF (LMAX .GT. MEM) THEN
d230 1
a230 1
        OPEN(LTMP, FILE = 'SCR999.DAT', STATUS = 'UNKNOWN', 
d249 5
@


1.4
log
@change write(* to write(nout,
@
text
@d45 1
a45 1
           
@


1.3
log
@name -> file
@
text
@d40 1
a40 1
     &                     IMAR, MADAR, NACT, nout)
d50 1
a50 1
          WRITE(*,12) NFAC
d69 1
a69 1
	WRITE(*,7891)  SIZE1,SIZE2,MEM
@


1.2
log
@comment out unreachable stat. write(nout,*)
@
text
@d1 1
a1 1
C
d161 1
a161 1
          OPEN(NAME = 'TRANSPOSED.FILE', UNIT = LTRANSP, 
d222 1
a222 1
        OPEN(LTMP, NAME = 'SCR999.DAT', STATUS = 'UNKNOWN', 
@


1.1
log
@Initial revision
@
text
@d108 3
a110 3
        WRITE(NOUT,* ) 
     $   ' *** MEMORY INSUFFICIENT FOR A SOLUTION OF CA S FOR PCA'
        RETURN
@
