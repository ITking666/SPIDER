head	1.70;
access;
symbols
	pre_mrcs:1.70
	healthdept_2018:1.70
	pre_getangas:1.68
	GPL2010:1.68
	pre_GPL2010:1.67
	pre_var_equation:1.67
	pre_fftwrings:1.67
	pre_opfiles:1.67
	src:1.67
	best-code:1.66
	x-named-regs:1.65
	x:1.65
	v13-00:1.65
	pre_GPL:1.63
	prec_CA:1.44
	noindx:1.43
	Bproc:1.32
	oct21:1.29
	last77:1.26;
locks; strict;
comment	@c @;


1.70
date	2018.10.03.14.34.08;	author leith;	state Exp;
branches;
next	1.69;

1.69
date	2014.01.12.19.45.18;	author leith;	state Exp;
branches;
next	1.68;

1.68
date	2010.06.24.13.26.01;	author leith;	state Exp;
branches;
next	1.67;

1.67
date	2006.03.30.20.48.40;	author leith;	state Exp;
branches;
next	1.66;

1.66
date	2006.03.07.19.52.50;	author leith;	state Exp;
branches;
next	1.65;

1.65
date	2005.10.17.20.19.35;	author leith;	state Exp;
branches;
next	1.64;

1.64
date	2005.10.17.18.12.24;	author leith;	state Exp;
branches;
next	1.63;

1.63
date	2004.05.12.19.07.29;	author leith;	state Exp;
branches;
next	1.62;

1.62
date	2004.05.11.18.40.41;	author leith;	state Exp;
branches;
next	1.61;

1.61
date	2004.05.07.16.01.39;	author leith;	state Exp;
branches;
next	1.60;

1.60
date	2004.05.05.19.54.57;	author leith;	state Exp;
branches;
next	1.59;

1.59
date	2004.05.03.18.31.49;	author leith;	state Exp;
branches;
next	1.58;

1.58
date	2004.04.29.19.26.19;	author leith;	state Exp;
branches;
next	1.57;

1.57
date	2004.04.23.12.47.29;	author leith;	state Exp;
branches;
next	1.56;

1.56
date	2004.02.10.17.19.41;	author leith;	state Exp;
branches;
next	1.55;

1.55
date	2004.01.23.17.16.22;	author leith;	state Exp;
branches;
next	1.54;

1.54
date	2004.01.21.21.05.27;	author leith;	state Exp;
branches;
next	1.53;

1.53
date	2004.01.20.21.36.55;	author leith;	state Exp;
branches;
next	1.52;

1.52
date	2004.01.14.20.34.55;	author leith;	state Exp;
branches;
next	1.51;

1.51
date	2004.01.09.19.52.01;	author leith;	state Exp;
branches;
next	1.50;

1.50
date	2003.12.10.20.02.58;	author leith;	state Exp;
branches;
next	1.49;

1.49
date	2003.11.21.18.43.00;	author leith;	state Exp;
branches;
next	1.48;

1.48
date	2003.11.20.16.27.07;	author leith;	state Exp;
branches;
next	1.47;

1.47
date	2003.11.06.18.50.23;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2003.10.16.18.54.32;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2003.10.16.16.43.15;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2003.02.20.20.55.21;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2003.01.02.14.26.23;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2002.08.26.12.44.38;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2002.04.05.19.27.39;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	2002.03.12.18.03.40;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2002.03.11.14.08.07;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2001.08.27.12.33.57;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2001.06.18.20.30.18;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2001.04.02.14.53.59;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2001.01.04.20.48.44;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2000.12.18.17.46.57;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2000.10.27.16.24.16;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2000.07.03.14.33.26;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2000.06.05.13.50.22;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2000.06.05.13.46.20;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	99.08.27.12.22.15;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	99.07.21.17.09.40;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	99.07.20.20.09.20;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	97.10.31.19.40.51;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	97.10.17.15.19.01;	author pawel;	state Exp;
branches;
next	1.24;

1.24
date	97.09.30.20.50.53;	author pawel;	state Exp;
branches;
next	1.23;

1.23
date	97.08.22.13.51.20;	author pawel;	state Exp;
branches;
next	1.22;

1.22
date	97.03.11.16.37.07;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	97.02.12.14.10.06;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	96.10.22.19.46.34;	author mladjadj;	state Exp;
branches;
next	1.19;

1.19
date	96.10.16.17.48.26;	author mladjadj;	state Exp;
branches;
next	1.18;

1.18
date	96.10.09.15.54.29;	author mladjadj;	state Exp;
branches;
next	1.17;

1.17
date	96.10.08.17.05.29;	author mladjadj;	state Exp;
branches;
next	1.16;

1.16
date	96.08.08.15.44.05;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	96.08.07.14.47.07;	author mladjadj;	state Exp;
branches;
next	1.14;

1.14
date	96.08.06.15.02.28;	author mladjadj;	state Exp;
branches;
next	1.13;

1.13
date	96.08.02.15.02.11;	author mladjadj;	state Exp;
branches;
next	1.12;

1.12
date	96.07.09.17.06.18;	author mladjadj;	state Exp;
branches;
next	1.11;

1.11
date	96.06.19.18.30.15;	author mladjadj;	state Exp;
branches;
next	1.10;

1.10
date	95.12.06.16.36.19;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	95.10.19.18.07.40;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	95.10.10.19.28.11;	author mladjadj;	state Exp;
branches;
next	1.7;

1.7
date	95.10.10.18.42.36;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	95.10.03.19.15.10;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	95.10.03.19.07.12;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	94.08.29.17.53.56;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	94.08.29.17.49.50;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.06.41;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.49.47;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.70
log
@email_health_dept
@
text
@C **********************************************************************
C
C  JPMSK1          RANDOM SHUFFLING              JULY 87 
C                  NEW IN - CORE                 12/30/87 
C                  CO - PROJ. OF ARBITRARY DATA  5/03/89 JF
C                  LONG FILE NAMES               FEB 89  ArDean Leith
C                  CRAY COMPATIBLE FORTRAN       JAN 90  JF	
C                  MODIFIED                     9/1/93   M. LADJADJ   
C                  FORCE_INCORE ADDED           JUN 2000 ArDean Leith
C                  USED OPAUXFILE                 4/2/01 ArDean Leith
C                  INCREASED MASK SIZE           3/12/02 ArDean Leith
C                  ALLOWED VOLUME INPUT          8/23/02 ArDean Leith
C                  INCREASED MAXIM              10/22/02 ArDean Leith
C                  OPFILEC                        FEB 03 ARDEAN LEITH
C                  REWRITTEN                      SEP 03 ARDEAN LEITH
C                  _MAS FILE                      DEC 03 ARDEAN LEITH
C                  CLOSE LUN                      APR 04 ARDEAN LEITH
C                  MAX. NFAC LISTED               MAY 04 ARDEAN LEITH
C                  SKIPREST                       MAY 04 ARDEAN LEITH
C                  ITERATIVE PCA RECOVERED        MAR 06 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   JPMSK1()
C
C   PURPOSE:  RUN CORAN & PCA PROGRAMS
C             USE MASK FILE TO DECIDE WHICH POINTS TO INCLUDE
C
C   OPERATIONS SUPPORTED : 'CA S'
C
C   CALL TREE:
C     JPMSK1 ---> SCORAN3 --->  INCOR3
C                             | GETCOO 
C                             | GETCOOT (IF TRANSPOSED)
C
C
C  JPMSK1
C    WEIGHTI = SUM OF PIXEL VALUES (UNDER MASK) BY IMAGE().
C    WEIGHTP = SUM OF PIXEL VALUES (UNDER MASK) BY PIXEL().
C    IN LUNS : LIST OF ALL PIXELS  (UNDER MASK) BY IMAGE
C    IN LUNT : TRANSPOSE OF LUNS
C
C  SCORAN3   
C    NATIVE
C       INCOR3
C          PIA = WEIGHTI(IMAGE)
C          if PCA:    MATS(J,JJ) = MATS(J,JJ) + (BLU(J) * BLU(JJ))
C          if CORAN:  MATS(J,JJ) = MATS(J,JJ) + (BLU(J) * BLU(JJ)) /PIA 
C
C          if PCA:    MATS(J,JJ) = (MATS(J, JJ) - 
C                             (WEIGHTP(J) * WEIGHTP(JJ)) / NUMIM)
C          if CORAN:  AAA        =  SQRT(WEIGHTP(J) * WEIGHTP(JJ))
C                     MATS(J,JJ) =  MATS(J, JJ) / AAA  -  AAA / SUMW
C
C          if CORAN:  MATS(K,L) = MATS(K,L) * SQRT(SUMW / WEIGHTP(K)) 
C       GETCOO
C          if PCA:    BLW(K) = BLW(K) + (BLU(J) - WEIGHTP(J) / NUMIM) * 
C                                    EVECTS(J, K) 
C          if CORAN:  BLW(K) = BLW(K) + (BLU(J) * EVECTS(J, K)) / PIA
C          IN LUNP :  PIAT   = WEIGHTP(J) / NPIX
C    TRANSPOSED
C       INCORT
C       GETCOOT
C
C    IN LUNE : 
C       LIST OF ALL EIGENVALUES BY FACTOR
C       if NATIVE:      LIST OF NPIX EIGENVECTORS 
C       if TRANSPOSED:  LIST OF NUMIM EIGENVECTORS
C
C
C
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C-----------------------------------------------------------------------------

        SUBROUTINE JPMSK1()
        
        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'
        
        COMMON /IOBUF/ BUF(NBUFSIZ)

        CHARACTER(LEN=MAXNAM) :: FILPATI,FILNAM,FILPATP,FILPATE,FILPATT,
     &                           FILPATC,MSKNAM,FILPATS,FILPRE,FILPATM

        COMMON /COMMUN/          FILPATI,FILNAM,FILPATP,FILPATE,FILPATT,
     &                           FILPATC,MSKNAM,FILPATS,FILPRE,FILPATM
        
        REAL, ALLOCATABLE, DIMENSION(:,:)           :: TRANS
        REAL, ALLOCATABLE, DIMENSION(:)             :: BUFM,BUFI,BUFT
        REAL, ALLOCATABLE, DIMENSION(:)             :: WEIGHTI,WEIGHTP
        REAL, ALLOCATABLE, DIMENSION(:)             :: VARP

        CHARACTER(LEN=1) ::    NULL, ANS
        CHARACTER(LEN=2) ::    ANS1
        
        DOUBLE PRECISION :: DAV, VARIT
        LOGICAL          :: EX, FLAGR,USE_PCA,TRANSPOSE,ADANEG,SKIPREST
        LOGICAL          :: USE_ITERPCA

#ifndef SP_32
        INTEGER *8       SIZE1,SIZE2
#else
        INTEGER *4       SIZE1,SIZE2
#endif

        DATA LUN,LUNS,LUNI,LUNM,LUNP,LUNE,LUNDOC/70,71,72,73,74,75,76/
        DATA LUNT/77/

        NULL    = CHAR(0)

C         READ IN SELECTED IMAGE FILE NUMBERS; STORE IN INUMBR().
          NUMIM  =  NIMAX 
          CALL FILELIST(.TRUE.,LUNDOC,FILPATI,NLET1,
     &           INUMBR,NIMAX,NUMIM,'IMAGE FILE TEMPLATE',IRTFLG)
          IF (IRTFLG .NE. 0) RETURN
          WRITE(NOUT, *) ' NUMBER OF IMAGES: ',NUMIM

          MAXIMT = 0
          CALL FILERD(MSKNAM,NLET,NULL,'MASK',IRTFLG)
          IF (IRTFLG  .NE.  0) THEN
C             OPEN FIRST IMAGE TO GET SIZE
              NLET = 0
              CALL FILGET(FILPATI,FILNAM,NLET,INUMBR(1),IRTFLG)
              IF (IRTFLG .NE. 0) GOTO  9999
              CALL OPFILEC(0,.FALSE.,FILNAM,LUNM,'O',IFORM,
     &                   NSAMM,NROWM,NSLICEM,MAXIMT,' ',.FALSE.,IRTFLG)
             IF (IRTFLG .NE. 0) RETURN 

             NPIX = NSAMM * NROWM * NSLICEM          
             ALLOCATE (BUFM(NPIX),STAT=IRTFLG)
             IF (IRTFLG .NE. 0) THEN
                MWANT = NSAMM * NROWM * NSLICEM 
                CALL ERRT(46,'BUFM',MWANT)
                GOTO 9999
             ENDIF

C            FILL MASK
             BUFM = 1.0
         ELSE
C            OPEN MASK TO GET SIZE
             CALL OPFILEC(0,.FALSE.,MSKNAM,LUNM,'O',IFORM,
     &                 NSAMM,NROWM,NSLICEM, MAXIMT,'  ',.FALSE.,IRTFLG)
             IF (IRTFLG .NE. 0) GOTO  9999 

             NPIX = NSAMM * NROWM * NSLICEM          
             ALLOCATE (BUFM(NPIX),STAT=IRTFLG)
             IF (IRTFLG .NE. 0) THEN
                MWANT = NSAMM * NROWM * NSLICEM 
                CALL ERRT(46,'BUFM',MWANT)
                GOTO 9999
             ENDIF

C            READ IN MASK IN BUFM
             NPIX = 0
             ILOCM = 0
             DO I=1,NROWM*NSLICEM
                CALL REDLIN(LUNM,BUF,NSAMM,I)
                DO J = 1,NSAMM
                   ILOCM = ILOCM + 1
                   IF (BUF(J) .GT. 0.5) THEN
                      BUFM(ILOCM) = 1.0
                      NPIX       = NPIX + 1
                   ELSE
                      BUFM(ILOCM) = 0.0
                   ENDIF
                ENDDO
             ENDDO
             IF (IRTFLG .GT. 0) GOTO 9999

             IF (NPIX .LE. 0) THEN
                CALL ERRT(101,'NO PIXELS UNDER MASK',IDUM)
                GOTO 9999
             ENDIF
             WRITE(NOUT,*)' NUMBER OF PIXELS UNDER MASK: ',NPIX
          ENDIF

C         WEIGHTP = SUM OF PIXEL VALUES AT THIS PIXEL
          ALLOCATE(WEIGHTI(NUMIM),WEIGHTP(NPIX),STAT=IRTFLG)
          IF (IRTFLG .NE. 0) THEN
             MWANT = NPIX + NUMIM 
             CALL ERRT(46,'JPMSK1, WEIGHTI....',MWANT)
             RETURN
          ENDIF

C         ZERO WEIGHTP ARRAY
          WEIGHTP = 0.0

          FLAGR = .FALSE.
C         RANDOM PERMUTATIONS APPEARS NOT TO DO ANYTHING (LOST SOMETIME) 

          NFACMAXTP =  MIN(NUMIM,NPIX) 
          NFACMAXTC =  NFACMAXTP - 1
          WRITE(NOUT,97) NFACMAXTP,NFACMAXTC
97        FORMAT('  MAX NUMBER OF FACTORS USING PCA: ',I7,
     &           ',  USING CORAN: ',I7)

          NFAC = MIN(NFACMAXTP,NFACMAXTC,10)
          CALL RDPRI1S(NFAC,NOT_USED,'NUMBER OF FACTORS',IRTFLG)
          IF (IRTFLG .NE. 0 .OR. NFAC .LE. 0) THEN
             CALL ERRT(102,'INVALID NUMBER OF FACTORS',NFAC)
             RETURN
          ENDIF

          CALL RDPRMC(ANS1,NCHAR,.TRUE.,
     &       'CORAN, PCA, ITERATIVE PCA, OR SKIP ANALYSIS (C/P/I/S)',
     ^       NULL,IRTFLG)
          IF (IRTFLG .NE. 0) RETURN
          USE_PCA     = (ANS1(1:1) .EQ. 'P' )

          USE_ITERPCA = (ANS1(1:1) .EQ. 'I')
          IF (USE_ITERPCA) THEN
             USE_PCA = .TRUE.

C            VARP = VARIANCE OF PIXEL VALUES AT THIS PIXEL
             ALLOCATE(VARP(NPIX),STAT=IRTFLG)
             IF (IRTFLG .NE. 0) THEN
                CALL ERRT(46,'JPMSK1, VARP',NPIX)
                RETURN
             ENDIF
C            ZERO VARP ARRAY
             VARP = 0.0
          ENDIF

          ADA = 0.0
          IF (USE_PCA) THEN
             NFACMAX  =  MIN(NFAC,NUMIM,NPIX) 
             IF (NFAC .NE. NFACMAX) WRITE(NOUT,96) NFACMAX
96           FORMAT(' WARNING: NUMBER OF FACTORS LIMITED TO: ',I7)
             NFAC     = NFACMAX
             KIND_PCA = 1

          ELSEIF (ANS1(1:1) .EQ. 'C') THEN
C            FOR CORAN
             CALL RDPRM1S(ADA, NOT_USED, 'ADDITIVE CONSTANT',IRTFLG)
             IF (IRTFLG .NE. 0) RETURN

             NFAC     =  MIN(NFAC + 1, NUMIM, NPIX) - 1
             KIND_PCA = 0
          ENDIF
          ADANEG = (ADA .NE. 0.0)

          CALL FILERD(FILPRE,NLET,NULL,'OUTPUT FILE PREFIX~',IRTFLG)
          IF (IRTFLG .NE. 0) RETURN

          FILPATS = FILPRE(1:NLET) // '_SEQ'//NULL
          FILPATP = FILPRE(1:NLET) // '_PIX'//NULL
          FILPATE = FILPRE(1:NLET) // '_EIG'//NULL
          FILPATC = FILPRE(1:NLET) // '_IMC'//NULL
          FILPATM = FILPRE(1:NLET) // '_MAS'//NULL
          FILPATT = FILPRE(1:NLET) // '_SET'//NULL

C         OPEN ALL FILES NEEDED IN SUBSEQUENT ROUTINES ON IO UNITS:
C         LUNS  =  OUTPUT FILE FOR IMAGE DATA
C         LUNT  =  OUTPUT FILE FOR TRANSPOSED IMAGE DATA (DIRECT ACCESS)
C         LUNI  =  OUTPUT FILE FOR IMAGE COORDINATES
C         LUNP  =  OUTPUT FILE FOR PIXEL COORDINATES
C         LUNE  =  OUTPUT FILE FOR EIGENVALUES & EIGENVECTORS
        
          CLOSE(LUNM)
          MAXIMT = 0
          CALL OPFILEC(0,.FALSE.,FILPATM,LUNM,'U',IFORM,
     &                 NSAMM,NROWM,NSLICEM,MAXIMT,' ',.FALSE.,IRTFLG)
          IF (IRTFLG .NE. 0) GOTO  9999 
          CALL WRTVOL(LUNM,NSAMM,NROWM,1,NSLICEM,BUFM,IRTFLG)
          IF (IRTFLG .NE. 0) GOTO  9999 


C         OPEN SEQUENTIAL ACCESS UNFORMATED FILE (_SEQ)
          CALL OPAUXFILE(.FALSE.,FILPATS,DATEXC,-LUNS,0,
     &                       'U', ' ',.TRUE.,IRTFLG)
C         CREATE _SEQ FILE HEADER 
          WRITE(LUNS) NUMIM, NPIX


C         OPEN FORMATTED IMAGE COORDINATE FILE (_IMC)
          CALL OPAUXFILE(.FALSE.,FILPATC,DATEXC,LUNI,0,
     &                       'U', ' ',.TRUE.,IRTFLG)
C         CREATE IMAGE COORDINATE FILE HEADER 
     
          WRITE(LUNI,95) NUMIM, NFAC, NSAMM, NROWM, NUMIM, KIND_PCA
95        FORMAT(10I10)


C         OPEN FORMATTED PIXEL COORDINATE FILE (_PIX)
          CALL OPAUXFILE(.FALSE.,FILPATP,DATEXC,LUNP,0,
     &                       'U', ' ',.TRUE.,IRTFLG)
C         CREATE PIXEL COORDINATE FILE HEADER 
          WRITE(LUNP,95) NPIX, NFAC, NSAMM, NROWM, NUMIM, KIND_PCA
                           
C         OPEN FORMATTED EIGENVALUE FILE
          CALL OPAUXFILE(.FALSE.,FILPATE,DATEXC,LUNE,0,
     &                       'U', ' ',.TRUE.,IRTFLG)

C         ALLOCATE IMAGE INPUT BUFFER
          ALLOCATE (BUFI(NPIX), STAT=IRTFLG)
          IF (IRTFLG .NE. 0) THEN
             CALL ERRT(46,'JPMSK1, BUFI',NPIX)
             GOTO 9999
          ENDIF

C         CHOOSE QUICKEST METHOD ACCORDING TO PROBLEM SIZE
          SIZE1 = NPIX  
          SIZE1 = SIZE1 * NPIX + 4 * NPIX 

C         IBM "MAX" CAN NOT HANDLE INTEGER * 8
          IF (USE_PCA) THEN
             SIZE2 = NUMIM
             SIZE2 = SIZE2 * NUMIM + 4 * NUMIM 
          ELSE
             SIZE2 = NUMIM
             SIZE2 = SIZE2 * NUMIM + 4 * NUMIM
          ENDIF

          IF (.NOT. USE_ITERPCA) THEN
	     WRITE(NOUT,98)  SIZE1,SIZE2
98	     FORMAT(/,'  MEMORY USE. IN-CORE:',I12,'  TRANSPOSED:',I12)

             TRANSPOSE = (SIZE2 .LT. SIZE1)
             IF (ANS1(2:2) .EQ. 'N') TRANSPOSE = .FALSE.
          ELSE
             TRANSPOSE = .FALSE.
          ENDIF

          IF (TRANSPOSE) THEN
             ALLOCATE(BUFT(NUMIM), STAT=IRTFLG)
             IF (IRTFLG .NE. 0) THEN
                CALL ERRT(46,'JPMSK1, BUFT',NUMIM)
                GOTO 9999
             ENDIF

C            FIND A INCORE SIZE FOR TRANSPOSITION MATRIX
             IDIV = 1
             DO 
                IWIDE = NUMIM / IDIV + MOD(NUMIM,IDIV)
                ALLOCATE(TRANS(IWIDE,NPIX), STAT=IRTFLG)
                IF (IRTFLG .EQ. 0) EXIT
                IDIV = IDIV + 1
             ENDDO

C            OPEN DIRECT ACCESS UNFORMATED FILE (_SET) FOR TRANSPOSE
             CALL OPAUXFILE(.FALSE.,FILPATT,DATEXC,LUNT,NUMIM*4,
     &                       'U', ' ',.TRUE.,IRTFLG)

          ENDIF

C         LOOP OVER ALL IMAGES
          IGOT     = 0
          ICOLS    = 0
          SKIPREST = .FALSE.
          FMINALL  = HUGE(FMINALL)

          DO IM = 1, NUMIM
C           RANDOM SHUFFLE OPTION
            IF (IM .GT. 1 .AND. FLAGR) THEN
C              'R'  OPTION USED.
C              NSH = SH * FLOAT(NPIX) + 0.5
C              CALL PERMUT(BUFM, NPIX, NSH)

            ELSE
              NLET  = 0
              CALL FILGET(FILPATI,FILNAM,NLET,INUMBR(IM),IRTFLG)
              IF (IRTFLG .NE. 0) GOTO 9999

              MAXIMT = 0
              CLOSE(LUN)
              CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'O',IFORM,
     &                   NSAM,NROW,NSLICE,MAXIMT,' ',.FALSE.,IRTFLG)
              IF (IRTFLG .NE. 0) GOTO  9999 

              IF ((FMIN + ADA) .LT. 0.0 .AND. .NOT. USE_PCA)  THEN
                 FMINALL  = MIN(FMIN,FMINALL)
                 SKIPREST = .TRUE.
                 CYCLE
              ENDIF

C             COMPARE MASK DIMENSIONS WITH IMAGE DIMENSIONS,ETC
              IF (IFORM .NE. 1 .AND. IFORM .NE. 3) THEN
                  CALL ERRT(2, 'JPMSK1', NDUM)
                  GOTO  9999
              ELSEIF ((NSAMM   .NE. NSAM)   .OR. 
     &                (NROWM   .NE. NROW)   .OR.
     &                (NSLICEM .NE. NSLICE)) THEN
                 WRITE(NOUT, 93) NSAM, NROW, NSAMM, NROWM, 
     &                            NSLICE,NSLICEM
93               FORMAT('*** IMAGE DIMENSION (',I4,',',I4,',',I4,
     &                  ')  NOT SAME AS MASK (',I4,',',I4,',',I4,')')
                 CALL ERRT(100,'JPMSK1',NE)
                 GOTO 9999
              ENDIF
    
C             READ IMAGE AREA WHERE MASK > 0.5 INTO CORE AND
C	      COMPUTE ITS MASK-RELATED,  PRECISE AVERAGE
              WEIGHTIT = 0.0
              ILOCM    = 0
              IPIX     = 0

              DO IROW = 1,NROW*NSLICE
                 CALL REDLIN(LUN,BUF,NSAM,IROW)
                 DO ISAM = 1,NSAM
                    ILOCM = ILOCM + 1
                    IF (BUFM(ILOCM) .GT. 0.5) THEN
C                      INSIDE MASK, USE THIS PIXEL
                       VAL    = BUF(ISAM)
                       IF (ADANEG) VAL = VAL + ADA

C	               WEIGHTIT = SUM OF THE ELEMENTS(MASK > 0.5)    .
                       WEIGHTIT      = WEIGHTIT + VAL               

                       IPIX          = IPIX + 1

                       WEIGHTP(IPIX) = WEIGHTP(IPIX) + VAL
                       BUFI(IPIX)    = VAL 

                       IF (USE_ITERPCA) THEN
C                         CALCULATE VARIANCE ALSO
                          VARP(IPIX) = VARP(IPIX) + VAL ** 2
                       ENDIF
                    ENDIF
                 ENDDO
              ENDDO
           ENDIF

           IF (SKIPREST) THEN
              WRITE(NOUT,198) FMINALL
 198          FORMAT(' *** OVERALL MINIMUM: ',G13.7)  
              CALL ERRT(101,'CORAN CAN NOT ACCEPT NEGATIVE PIXELS',NDUM)
              GOTO 9999
           ENDIF

C          WEIGHTIT = SUM OF ALL PIXEL VALUES UNDER MASK IN IMAGE.
           WEIGHTI(IM) = WEIGHTIT

           FIM = INUMBR(IM)
           WRITE(LUNS,IOSTAT=IERR) BUFI,FIM

           ICOLS = ICOLS + 1
           IF (TRANSPOSE) THEN
C             INCORE, TRANSPOSED (DOES THE TRANSPOSING)
              TRANS(ICOLS, :) = BUFI

              IF (ICOLS .GE. IWIDE) THEN
C                MUST WRITE OUT TRANSPOSED MATRIX SECTION

                 DO I = 1,NPIX
                    IF (IGOT .GT. 0) THEN
C                      HAVE DIVISION ALREADY IN FILE
                       READ(LUNT,REC=I,IOSTAT=IERR) BUFT
                    ENDIF
	            BUFT(IGOT+1:) = TRANS(1:ICOLS,I)
                    
                    WRITE(LUNT,REC=I,IOSTAT=IERR) BUFT
                 ENDDO
                 IGOT  = IM
                 ICOLS = 0
              ENDIF
           ENDIF
        ENDDO
 
C       SUMW IS THE SUM OF ALL THE PIXEL VALUES IN ALL THE IMAGES.
        SUMW = SUM(WEIGHTP)

C       FREE UP ALLOCATIONS FOR USE IN NEXT STEP
        IF (ALLOCATED(BUFI))  DEALLOCATE(BUFI)
        IF (ALLOCATED(BUFM))  DEALLOCATE(BUFM)
        IF (ALLOCATED(BUFT))  DEALLOCATE(BUFT)
        IF (ALLOCATED(TRANS)) DEALLOCATE(TRANS)

        IF (USE_ITERPCA) THEN
C          ITERATIVE PCA
           CALL SPCA3(NUMIM,   NFAC,    NPIX, INUMBR, 
     &                LUNS,    LUNI,    LUNP, LUNE, 
     &                WEIGHTI, WEIGHTP, SUMW, VARP, LUNT)

         ELSEIF (ANS1(1:1) .NE. 'S') THEN
C          PCA OR CORAN
           LUNIN = LUNS
           IF (TRANSPOSE) LUNIN = LUNT
           CALL SCORAN3(NUMIM,    NFAC,    NPIX,      INUMBR, USE_PCA, 
     &                   LUNIN,   LUNI,    LUNP,      LUNE, 
     &                   WEIGHTI, WEIGHTP, TRANSPOSE, SUMW)
        ENDIF

9999    IF (ALLOCATED(BUFM))    DEALLOCATE(BUFM)
        IF (ALLOCATED(BUFI))    DEALLOCATE(BUFI)
        IF (ALLOCATED(TRANS))   DEALLOCATE(TRANS)
        IF (ALLOCATED(WEIGHTI)) DEALLOCATE(WEIGHTI)
        IF (ALLOCATED(WEIGHTP)) DEALLOCATE(WEIGHTP)
        IF (ALLOCATED(VARP))    DEALLOCATE(VARP)

C       CLOSE ALL FILES THAT MIGHT BE OPEN
        CLOSE(LUNS)
        CLOSE(LUNI)
        CLOSE(LUNP)
        CLOSE(LUNM)
        CLOSE(LUNE)
        CLOSE(LUNT)
        CLOSE(LUN)

	RETURN
        END

@


1.69
log
@enter
@
text
@d28 1
a28 1
C=* Email: spider@@wadsworth.org                                        *
@


1.68
log
@GPL_2010
@
text
@d135 1
a135 1
     &           INUMBR,NIMAX,NUMIM,'ENTER IMAGE FILE TEMPLATE',IRTFLG)
@


1.67
log
@ITERATIVE PCA RECOVERED
@
text
@a22 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d24 5
a28 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d30 1
a30 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d35 1
a35 1
C=* This program is distributed in the hope that it will be useful,    *
d37 1
a37 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a38 1
C=*                                                                    *
d40 1
a40 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.66
log
@iterative pca spca3.f call added
@
text
@a212 11
          IF (USE_ITERPCA) THEN
C            VARP = VARIANCE OF PIXEL VALUES AT THIS PIXEL
             ALLOCATE(VARP(NPIX),STAT=IRTFLG)
             IF (IRTFLG .NE. 0) THEN
                CALL ERRT(46,'JPMSK1, VARP',NPIX)
                RETURN
             ENDIF
C            ZERO VARP ARRAY
             VARP = 0.0
          ENDIF

d233 2
a234 1
          USE_PCA     = (ANS1(1:1) .EQ. 'P')
d236 12
d250 1
a250 1
          IF (USE_PCA .OR. USE_ITERPCA) THEN
d304 1
d493 1
a493 1
        IF (ANS1(1:1) .EQ. 'I') THEN
@


1.65
log
@GPL License fixed
@
text
@d20 1
d116 1
d123 1
d205 1
a205 1
             MWANT = 2*NPIX + 1*NUMIM 
d213 11
d241 2
a242 1
     &               'CORAN, PCA, OR SKIP ANALYSIS (C/P/S)',NULL,IRTFLG)
d244 2
a245 1
          USE_PCA = (ANS1(1:1) .EQ. 'P')
d248 1
a248 1
          IF (USE_PCA) THEN
d336 3
a338 2
	  WRITE(NOUT,98)  SIZE1,SIZE2
98	  FORMAT(/,'  MEMORY USE. IN-CORE:',I12,'  TRANSPOSED:',I12)
d340 5
a344 2
          TRANSPOSE = (SIZE2 .LT. SIZE1)
          IF (ANS1(2:2) .EQ. 'N') TRANSPOSE = .FALSE.
a368 1
          SUMW     = 0.0
d432 1
d434 1
d436 4
a439 1
                       BUFI(IPIX)    = VAL 
d482 1
a482 3
        DO I =1,NPIX
           SUMW = SUMW + WEIGHTP(I)
        ENDDO
d490 8
a497 1
        IF (ANS1(1:1) .NE. 'S') THEN
d500 3
a502 3
           CALL SCORAN3(NUMIM, NFAC, NPIX, INUMBR, USE_PCA, 
     &                   LUNIN, LUNI, LUNP, LUNE, 
     &                   WEIGHTI,WEIGHTP,TRANSPOSE,SUMW)
d510 1
@


1.64
log
@HRI GPL License used
@
text
@a1 1
C **************************************************************************
a21 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d25 1
a25 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a44 6

C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.63
log
@comments in header
@
text
@d1 1
d24 24
@


1.62
log
@fminall not initialized
@
text
@d35 1
a35 1
C  OPERATIONS SUPPORTED :
d37 1
a37 5
C     CA CORAN  -  RUN CORAN
C     CA PCA    -  RUN PCA
C     CA SF     -  FETCH IMAGES, FROM SEQ. FILE, AS SEEN WITH THE MASK
C
C  CALL TREE:
d43 36
a194 9
c         CALL RDPRMC(ANS1,NCHAR,.TRUE.,'RANDOM PERMUTATIONS (Y/N)',
c     &                NULL, IRTFLG)
c         IF (IRTFLG .NE. 0) RETURN
c         SH     = 1.0
c         IF (INDEX(ANS1, 'R') .GT. 0)  THEN
c             FLAGR = .TRUE.
c             CALL RDPRM(SH, NOT_USED, 'SHUFFLE FACTOR')
c             IF (SH .LE. 0.) SH = 1.0
c         ENDIF
d216 1
a216 1
             NFACMAX =  MIN(NFAC,NUMIM,NPIX) 
d219 1
a219 1
             NFAC = NFACMAX
d227 1
a227 1
             NFAC =  MIN(NFAC + 1, NUMIM, NPIX) - 1
@


1.61
log
@output term. formatting
@
text
@d313 1
d384 1
a384 2
              CALL ERRT(101,'CORAN DOES NOT ACCEPT NEGATIVE PIXELS',
     &                     NDUM)
@


1.60
log
@SKIPREST IF MIN < 0 FOR CORAN
@
text
@d176 1
a176 1
97        FORMAT(' MAX NUMBER OF FACTORS USING PCA: ',I7,
@


1.59
log
@MAX. NFAC LISTED
@
text
@d19 1
d71 1
a71 1
        LOGICAL          :: EX, FLAGR,USE_PCA,TRANSPOSE,ADANEG
d309 4
a312 3
          SUMW  = 0.0
          IGOT  = 0
          ICOLS = 0
d333 4
a336 4
                 CALL ERRT(101,'CORAN DOES NOT ACCEPT NEGATIVE PIXELS',
     &                     NDUM)
                 GOTO 9999
               ENDIF
d378 8
@


1.58
log
@close (lun)
@
text
@d3 17
a19 15
C  JPMSK1               RANDOM SHUFFLING JULY 87 
C                       NEW IN - CORE  12/30/87 
C                       CO - PROJECTION OF ARBITRARY DATA 5/03/89 JF
C                       LONG FILE NAMES FEB 89 ArDean Leith
C                       CRAY COMPATIBLE FORTRAN JAN 90 JF	
C                       MODIFIED 9/1/93  MAHIEDDINE LADJADJ   
C                       FORCE_INCORE ADDED      JUN 2000 ArDean Leith
C                       USED OPAUXFILE            4/2/01 ArDean Leith
C                       INCREASED MASK SIZE      3/12/02 ArDean Leith
C                       ALLOWED VOLUME INPUT     8/23/02 ArDean Leith
C                       INCREASED MAXIM         10/22/02 ArDean Leith
C                       OPFILEC                   FEB 03 ARDEAN LEITH
C                       REWRITTEN                 SEP 03 ARDEAN LEITH
C                       _MAS FILE                 DEC 03 ARDEAN LEITH
C                       CLOSE LUN                 APR 04 ARDEAN LEITH
d172 7
a178 1
          NFAC = 2
@


1.57
log
@addneg bug
@
text
@d17 1
d317 1
d431 1
@


1.56
log
@kind_pca in pix file header now
@
text
@d320 1
a320 1
              IF (FMIN .LT. 0.0 .AND. .NOT. USE_PCA)  THEN
@


1.55
log
@file formats
@
text
@d244 1
a244 1
          WRITE(LUNP,95) NPIX, NFAC, NSAMM, NROWM, NUMIM
@


1.54
log
@removed unused var.
@
text
@d64 1
a64 1
        CHARACTER(LEN=3) ::    ANS1
d143 1
a143 1
             WRITE(NOUT,*)'  NUMBER OF PIXELS UNDER MASK: ',NPIX
d214 1
a214 1
C         LUNE  =  OUTPUT FILE FOR EIGENVALUES
d274 1
@


1.53
log
@_seq file always made in seq. format & _set file added
@
text
@d67 1
a67 2
        LOGICAL          :: EX, FLAGR,USE_PCA,FORCE_INCORE
        LOGICAL          :: INCORE,ITERATIVE,TRANSPOSE,ADANEG
@


1.52
log
@ca sr bug
@
text
@d53 1
a53 1
        CHARACTER(LEN=MAXNAM) :: FILPATI,FILNAM,FILPATP,FILPATE,
d56 1
a56 1
        COMMON /COMMUN/          FILPATI,FILNAM,FILPATP,FILPATE,
d77 1
a77 1
        DATA LUNS1/77/
d177 2
a178 2
          CALL RDPRMC(ANS1,NCHAR,.TRUE.,'CORAN OR PCA ANALYSIS (C/P)',
     &                NULL, IRTFLG)
d189 2
a190 1
          ELSE
d208 1
d211 2
a212 1
C         LUNS  =  TEMP. SEQ. FILE FOR TRANSPOSED IMAGE DATA
d225 9
a233 1
C         OPEN IMAGE COORDINATE FILE (_IMC)
d240 2
a241 1
C         OPEN PIXEL COORDINATE FILE (_PIX)
d247 1
a247 1
C         OPEN EIGENVALUE FILE
d292 2
a293 2
C            OPEN DIRECT ACCESS UNFORMATED FILE (_SEQ)
             CALL OPAUXFILE(.FALSE.,FILPATS,DATEXC,LUNS,NUMIM*4,
a294 2
           ELSE
C            NOT TRANSPOSED
a295 3
C            OPEN DIRECT ACCESS UNFORMATED FILE (_SEQ)
             CALL OPAUXFILE(.FALSE.,FILPATS,DATEXC,LUNS,NPIX*4,
     &                       'U', ' ',.TRUE.,IRTFLG)
d371 3
d385 1
a385 1
                       READ(LUNS,REC=I,IOSTAT=IERR) BUFT
d389 1
a389 1
                    WRITE(LUNS,REC=I,IOSTAT=IERR) BUFT
d394 1
a394 1
          ENDIF
d408 5
a412 2
        CALL SCORAN3(NUMIM, NFAC, NPIX, INUMBR, USE_PCA, 
     &                   LUNS, LUNI, LUNP, LUNE, 
d414 1
d428 1
@


1.51
log
@call tree
@
text
@d60 1
a60 2
        REAL, ALLOCATABLE, DIMENSION(:)             :: BUFM
        REAL, ALLOCATABLE, DIMENSION(:)             :: BUFI
a61 1
        DOUBLE PRECISION, ALLOCATABLE, DIMENSION(:) :: VARP
d77 1
a105 1
             NMASK = NPIX
d124 1
a124 1
             NMASK = 0
d132 1
a132 1
                      NMASK       = NMASK + 1
d140 1
a140 1
             IF (NMASK .LE. 0) THEN
d144 1
a144 1
             WRITE(NOUT,*)'  NUMBER OF PIXELS UNDER MASK: ',NMASK
d147 2
a148 2
          ALLOCATE(WEIGHTI(NUMIM),WEIGHTP(NMASK),VARP(NMASK),
     &             STAT=IRTFLG)
d150 1
a150 1
             MWANT = 2*NMASK + 1*NUMIM 
d155 1
a155 1
C         ZERO WEIGHTP & VARP ARRAY
a156 1
          VARP    = 0.0
d184 1
a184 1
             NFACMAX =  MIN(NFAC,NUMIM,NMASK) 
d194 1
a194 1
             NFAC =  MIN(NFAC + 1, NUMIM, NMASK) - 1
d208 2
a209 2
C         OPEN ALL FILES NEEDED IN SUBSEQUENT ROUTINES ON LUNS:
C         LUNS  =  TEMP SEQ. FILE FOR IMAGE DATA
a221 6
C         OPEN SEQUENTIAL FILE (_SEQ)
          CALL OPAUXFILE(.FALSE.,FILPATS,DATEXC,-LUNS,0,
     &                       'U', ' ',.TRUE.,IRTFLG)
C         WRITE SEQUENTIAL FILE HEADER
          WRITE(LUNS) NUMIM, NMASK, NSAM, NROW*NSLICE 

d239 7
d248 1
a248 1
          SIZE1 = SIZE1 * NPIX + 4 * NPIX + NFAC
d252 2
a253 1
             SIZE2 = 2 * NPIX + MAX(NUMIM,NPIX) * (NUMIM + 2) + NFAC
d256 1
a256 1
             SIZE2 = SIZE2 * NUMIM + 4 * NUMIM + NFAC
d263 1
d265 1
a265 2
             MWANT = NMASK + NMASK * NUMIM
             ALLOCATE(BUFI(NMASK),TRANS(NUMIM,NMASK), STAT=IRTFLG)
d267 2
a268 4
                WRITE(6,97) MWANT
97              FORMAT('  UNABLE TO ALLOCATE TRANSPOSED MEMORY: ',I10,
     &                 ' TRYING NON-TRANSPOSED ANALYSIS')
                TRANSPOSE = .FALSE.
d270 15
a284 1
          ENDIF
d286 3
a288 5
          IF (.NOT. TRANSPOSE) THEN 
             ALLOCATE (BUFI(NMASK), STAT=IRTFLG)
             MWANT = NMASK
             CALL ERRT(46,'JPMSK1, BUFI',MWANT)
             GOTO 9999
d292 4
a295 1
          SUMW = 0.0
d300 2
a301 2
C               NSH = SH * FLOAT(NMASK) + 0.5
C               CALL PERMUT(BUFM, NMASK, NSH)
a333 1

a336 1
              VARIT    = 0.0
a350 1
                       VARIT         = VARIT    + VAL**2
a353 1
                       VARP(IPIX)    = VARP(IPIX)    + VAL**2
a358 5


              DAV   = WEIGHTIT / FLOAT(IPIX)
              VARIT = (VARIT - DAV**2 * FLOAT(IPIX)) / 
     &                FLOAT(IPIX - 1)
d361 1
a361 4
C          NOTE THAT FOR THE RANDOM SHUFFLE OPTION,  WEIGHT AND VAR
C          ARE UNCHANGED AND DON'T HAVE TO BE RE-COMPUTED

C          WEIGHTIT = SUM OF ALL PIXEL VALUES (.GT. 0.5) IN IMAGE.
d364 1
a364 3
C          SUMW IS THE SUM OF ALL THE PIXEL VALUES IN ALL THE IMAGES.
           SUMW = SUMW + WEIGHTIT

d367 1
a367 3
              TRANS(IM,:) = BUFI
           ELSE
C             INCORE, NON-TRANSPOSED
d369 2
a370 4
C             WRITE INTO SEQUENTIAL FILE
	      WRITE(LUNS) BUFI,WEIGHTIT,VARIT,INUMBR(IM)
           ENDIF
        ENDDO 
d372 11
a382 17
        IF (TRANSPOSE) THEN
           VARDUM = 0.0
           IF (USE_PCA) WEIGHTP = WEIGHTP / NUMIM
           DO I = 1,NMASK
              IF (USE_PCA) THEN
                 TRANS(:,I) = TRANS(:,I) - WEIGHTP(I)

C                WRITE INTO SEQUENTIAL FILE
	         WRITE(LUNS) TRANS(:,I),WEIGHTP(I),VARDUM,I
  
              ELSE
                 DAV     = WEIGHTP(I) / FLOAT(IPIX)
                 VARP(I) = (VARP(I) - DAV**2 * FLOAT(IPIX)) / 
     &                     FLOAT(IPIX - 1)

C                WRITE INTO SEQUENTIAL FILE
	         WRITE(LUNS) TRANS(:,I),WEIGHTP(I),VARP(I),I
d384 7
a390 3
         ENDDO
         IF (ALLOCATED(TRANS)) DEALLOCATE(TRANS)
       ENDIF
d395 2
a396 1
        IF (ALLOCATED(VARP))  DEALLOCATE(VARP)
d398 1
a398 1
        CALL SCORAN3(NUMIM, NFAC, NPIX, NMASK, INUMBR, USE_PCA, 
d400 1
a400 1
     &                   WEIGHTI,WEIGHTP,TRANSPOSE)
d404 1
a406 2
        IF (ALLOCATED(VARP))    DEALLOCATE(VARP)
        IF (ALLOCATED(TRANS))   DEALLOCATE(TRANS)
@


1.50
log
@output formats changed
@
text
@d37 6
@


1.49
log
@mask use bug
@
text
@d15 2
a16 2
C                       REWRITTEN               SEP 2003 ARDEAN LEITH
C
d48 1
a48 1
     &                           FILPATC,MSKNAM,FILPATS,FILPRE
d51 1
a51 1
     &                           FILPATC,MSKNAM,FILPATS,FILPRE
d54 1
a54 1
        LOGICAL, ALLOCATABLE, DIMENSION(:)          :: BUFM
d63 2
a64 2
        LOGICAL          :: EX, FLAGR,USE_PCA,FORCE_INCORE,NOMASK
        LOGICAL          :: CORAN,INCORE,ITERATIVE,TRANSPOSE,ADANEG
d94 7
a100 2
             ALLOCATE (BUFM(1),STAT=IRTFLG)
             NPIX  = NSAMM * NROWM * NSLICEM          
d102 4
a105 1
          ELSE
d127 1
a127 1
                      BUFM(ILOCM) = .TRUE.
d130 1
a130 1
                      BUFM(ILOCM) = .FALSE.
a141 1
          NOMASK = (NMASK .GE. NPIX)
d203 1
d211 8
d295 1
a295 1
              IF (FMIN .LT. 0.0 .AND. CORAN)  THEN
d328 1
a328 1
                    IF (NOMASK .OR. BUFM(ILOCM)) THEN
@


1.48
log
@header
@
text
@d76 1
a76 1
C         READ IN SELECTEDIMAGE FILE NUMBERS; STORE IN INUMBR().
d129 1
a129 1
                CALL ERRT(102,'NO PIXELS UNDER MASK',IDUM)
d136 2
a137 1
          ALLOCATE (WEIGHTI(NUMIM),WEIGHTP(NPIX),VARP(NPIX),STAT=IRTFLG)
d139 1
a139 1
             MWANT = 2*NPIX + 1*NUMIM 
a147 1

d174 1
a174 1
             NFACMAX =  MIN(NFAC,NUMIM,NPIX) 
d184 1
a184 1
             NFAC =  MIN(NFAC + 1, NUMIM, NPIX) - 1
d243 2
a244 2
             MWANT = NPIX + NPIX * NUMIM
             ALLOCATE(BUFI(NPIX),TRANS(NUMIM,NPIX), STAT=IRTFLG)
d254 2
a255 2
             ALLOCATE (BUFI(NPIX), STAT=IRTFLG)
             MWANT = NPIX**2 + NPIX
d359 1
a359 1
           DO I = 1,NPIX
d383 1
a383 1
        CALL SCORAN3(NUMIM, NFAC, NPIX, INUMBR, USE_PCA, 
@


1.47
log
@bad redlin call in mask read
@
text
@d28 1
a28 4
C   PURPOSE:  CREATE A SEQUENTIAL FILE CONTAINING IMAGES 
C             IN NON - TRANSPOSED FORMAT TO BE USED AS INPUT TO JP'S
C	      CORAN PROGRAMS

a29 6
C
C	  LUN		LOGICAL UNIT NUMBER OF  INPUT FILE
C		 -  -  LATER USED FOR IMAGE COORDINATE FILE
C	  LUNM  LOGICAL UNIT NUMBER OF MASK FILE
C		 -  -  LATER USED FOR EIGENVALUE FILE
C	  LUNP  LOGICAL UNIT NUMBER OF PIXEL COORDINATE FILE
@


1.46
log
@varp zerod
@
text
@d124 1
a124 1
                CALL REDLIN(LUNM,NSAMM,BUF,I)
@


1.45
log
@CA & CL rewrite
@
text
@d151 2
a152 1
C         ZERO WEIGHTP ARRAY
d154 2
@


1.44
log
@opfilec
@
text
@d9 7
a15 6
C                       FORCE_INCORE ADDED JUN 2000 ArDean Leith
C                       USED OPAUXFILE        4/2/01 ArDean Leith
C                       INCREASED MASK SIZE  3/12/02 ArDean Leith
C                       ALLOWED VOLUME INPUT 8/23/02 ArDean Leith
C                       INCREASED MAXIM     10/22/02 ArDean Leith
C                       OPFILEC               FEB 03 ARDEAN LEITH
d26 1
a26 1
C   JPMSK1(MAXDIMT)
d30 3
a32 2
C	      NEW CORAN PROGRAMS
C      MSK VERSION : USE MASK FILE TO DECIDE WHICH POINTS TO INCLUDE
a35 2
C	  LUNS	LOGICAL UNIT NUMBER OF SEQUENTIAL OUTPUT FILE CONTAINING
C		MASKED IMAGE DATA
a38 1
C	  MAXDIMT  MAXIMUM BUFFER LENGTH TO BE USED BY PROGRAM
d42 2
a43 2
C     CA SI     -  INITIALIZE SEQUENTIAL FILE
C     CA S      -  RUN CORAN USING PREVIOUSLY CREATED SEQUENTIAL FILE
d46 1
a46 6
C     MADAR  =  MASK ADDRESS ARRAY  -  -  CONTAINS LEXICOGRAPHIC
C               ADDRESSES OF MASK POINTS IN IMAGE FRAME
C     LUV  =    LOGICAL UTILITY VECTOR  -  -  CONTAINS ACTIVE/INACTIVE
C               SWITCH FOR EACH IMAGE IN SEQUENTIAL ORDER. 
C               LUV(I) = 0 MEANS INACTIVE; LUV(I) = 1 MEANS ACTIVE.
C
d49 1
a49 1
        SUBROUTINE JPMSK1(MAXDIMT)
d54 7
a60 3
C       LENGTH SHOULD BE MULTIPLE OF 8.
CCC        PARAMETER (MAXIM = 20000)
        PARAMETER (MAXIM = 104000)
d62 5
a66 11
        CHARACTER(LEN=MAXNAM):: FILNM1, FILENM, FILNMP, FILNAM, MSKNAM, 
     &                  FILNMC, FILNME, FILNMO, FILPAT1, 
     &                  FILPATC, FILPATE, FILPATP
        COMMON /COMMUN/ FILNM1, FILENM, FILNMP, FILNAM, MSKNAM, 
     &                  FILNMC, FILNME, FILNMO, FILPAT1, 
     &                  FILPATC, FILPATE, FILPATP
        
        COMMON  IMAR(MAXIM), IMINAC(MAXIM), LUV(MAXIM), BUF(1)
        
        INTEGER, ALLOCATABLE, DIMENSION(:) :: MADAR
        REAL, ALLOCATABLE, DIMENSION(:) :: BUFM,BUFI,BUFF
d71 20
a90 2
        DOUBLE PRECISION  DAV, VAR
        LOGICAL           EX, FLAGR,PICK_PCA,FORCE_INCORE
d92 52
a143 2
C       LSHFT 2 ** 16 (2 BYTES)
        DATA        LSHFT/65536/
d145 8
a152 1
        DATA        LUN, LUNS, LUNM, LUNP,LUNDOC/71, 72, 73, 74, 75/
d154 18
a171 3
       NULL    = CHAR(0)
       FLAGR   = .FALSE.
       MAXDIM  = MAXDIMT - 3 * MAXIM   
d173 16
a188 3
       FILPATP = 'PIX***'//NULL
       FILPATE = 'EIG***'//NULL
       FILPATC = 'IMC***'//NULL
d190 4
a193 5
C ---------------------------------------------------------
C       OPTION 'CA SI'  --  INITIALIZATION 
C ---------------------------------------------------------
 
        IF (FCHAR(5:5) .EQ. 'I') THEN
d195 2
a196 2
C         NONTRANSPOSED  SEQUENTIAL  FILE
C         READ IN IMAGE FILE NUMBERS SELECTED; STORED IN IMAR().
d198 16
a213 1
          NUMIMG  =  MAXIM 
d215 6
a220 3
          CALL FILELIST(.TRUE.,LUNDOC,FILPAT1,NLET1,
     &            IMAR,MAXIM,NUMIMG,'ENTER IMAGE FILE TEMPLATE',IRTFLG)
          IF (IRTFLG  .NE.  0) RETURN
d222 9
a230 23
C         NUMIMG = NUMBER OF IMAGES REQUESTED TO BE USED.
C         THE ACTUAL NUMBER NUMIM MAY BE SMALLER DUE TO GAPS IN 
C         THE FILE SERIES.
        
          MAXIMT = 0
          CALL OPFILEC(0,.TRUE.,MSKNAM,LUNM,'O',IFORM,NSAM,NROW,NSLICE,
     &                   MAXIMT,'MASK',.FALSE.,IRTFLG)
          IF (IRTFLG  .NE.  0) RETURN
          
          CALL FILERD(FILNAM, NLET,  NULL, 'SEQUENCE', IRTFLG)
          IF (IRTFLG  .NE.  0) RETURN
          
          CALL RDPRMC(ANS1, NCHAR, .TRUE., 
     &       'ALL FILES EXIST? (Y/N), (I)NV, (R)ANDOM', NULL, IRTFLG)
  
          SH = 1.0
          IF (INDEX(ANS1, 'R') .GT. 0)  THEN
             FLAGR = .TRUE.
             CALL RDPRM(SH, NOT_USED, 'SHUFFLE FACTOR')
             IF (SH .LE. 0.) SH = 1.
          ENDIF
        
          CALL RDPRM(ADA, NOT_USED, 'ADDITIVE CONSTANT')
d232 7
a238 13
          IF (INDEX(ANS1, 'N') .GT. 0) THEN
            NUMIM = 0
            DO IM = 1, NUMIMG
              CALL FILGET(FILPAT1, FILNM1, NLET1,IMAR(IM), IRTFLG)
              IF (IRTFLG  .NE.  0) GOTO 9000

              CALL FILNAMANDEXT(FILNM1,DATEXC,FILNMO,NFN,.TRUE.,IRTFLG)
              INQUIRE(FILE = FILNMO, EXIST = EX)
              IF (EX) THEN
                 NUMIM       = NUMIM + 1
                 IMAR(NUMIM) = IMAR(IM)
              ENDIF
            END DO         
d240 2
a241 1
             NUMIM = NUMIMG
d243 14
a256 10
  
C         BUFFER ALLOCATIONS
          MAXMSK = MIN(LSHFT-1,NSAM * NROW * NSLICE)
          ALLOCATE (MADAR(MAXMSK),BUFM(NSAM * NROW * NSLICE),
     &              BUFI(NSAM * NROW * NSLICE),
     &              BUFF(NSAM * NROW * NSLICE+10),
     &              STAT=IRTFLG)
          IF (IRTFLG .NE. 0) THEN
             CALL ERRT(46,'CA SI, MADAR,BUFM,BUFI',IER)
             RETURN
d259 5
a263 30
C         READ IN MASK, DETERMINE NUMBER OF PIXELS, 
C         SET UP MASK ADDRESS ARRAY
          NMASK = 0

C         MADAR() = (ROW -1) * LSHFT + K FOR EACH BUFI(ROW,K) > .5
C         ML. 

          IMASK = 1
          DO I = 1, NROW * NSLICE

C           READ A ROW FROM A ROW OF THE MASK INTO THE ARRAY BUFM. 
            CALL REDLIN(LUNM, BUFM(IMASK), NSAM, I)
            DO K = 1, NSAM
              IF (BUFM(IMASK + K-1) .GE. 0.5) THEN
                 NMASK = NMASK + 1
                 IF (NMASK .GT. MAXMSK) THEN
                    CALL ERRT(102,'NUMBER OF POINTS IN MASK EXCEEDS',
     &                        MAXMSK)
                    RETURN
                 ENDIF
                 MADAR(NMASK) = (I - 1) * LSHFT + K
              ENDIF
            ENDDO
            IMASK = IMASK + NSAM
          ENDDO
          CLOSE(LUNM)

          IF (NMASK .EQ. 0) THEN
             CALL ERRT(101,'MASK IS EMPTY',NE)
             GOTO 999
a265 16
          NSAMM   = NSAM
          NROWM   = NROW
          NSLICEM = NSLICE

C         OPEN SEQUENTIAL FILE, UNFORMATTED SEQUENTIAL
          CALL FILNAMANDEXT(FILNAM,DATEXC,FILENM,NFN,.TRUE.,IRTFLG)
          CALL OPAUXFILE(.FALSE.,FILENM,NULL,-LUNS,0,
     &                       'U',' ',.TRUE.,IRTFLG)
                     
C         WRITE HEADER
          WRITE(LUNS) NUMIM, NMASK, NSAM, NROW*NSLICE, 
     &                (MADAR(K), K = 1, NMASK), 
     &                (IMAR(K),  K = 1, NUMIM)
          IM1 = 1
          IM2 = NUMIM
  
d267 2
a268 9
          BUFNEG = 0.0
          NEGTOT = 0
    
C         APPLY SHUFFLE FACTOR TO COMPUTE TOTAL NUMBER OF SHUFFLES

          DO IM = IM1, IM2
            NEG = 0
            N1  = IMAR(IM)
          
d270 1
a270 1
            IF (IM .NE. IM1 .AND. FLAGR) THEN
d272 3
a274 2
               NSH = SH * FLOAT(NMASK) + 0.5
               CALL PERMUT(BUFM, NMASK, NSH)
d276 3
a278 2
              CALL FILGET(FILPAT1, FILNM1, NLET1, N1, IRTFLG)
              IF (IRTFLG  .NE.  0) GOTO  9000
d281 1
a281 1
              CALL OPFILEC(0,.FALSE.,FILNM1,LUN,'O',IFORM,
d283 7
d291 1
a291 1
              IF (IRTFLG .NE. 0) GOTO  999 
d294 5
a298 7
                  GOTO  999
              ENDIF

C             COMPARE MASK DIMENSIONS WITH IMAGE DIMENSIONS
              IF ((NSAMM   .NE. NSAM) .OR. (NROWM .NE. NROW) .OR.
     &             NSLICEM .NE. NSLICE) THEN
                WRITE(NOUT, 3194) NSAM, NROW, NSAMM, NROWM, 
d300 4
a303 4
3194            FORMAT('*** IMAGE DIMENSION (',I4,',',I4,',',I4,
     &           ') NOT SAME AS MASK DIMENSION (',I4,',',I4,',',I4,')')
                CALL ERRT(1,'JPMSK1',NE)
                GOTO 999
d306 1
d309 21
a329 10
              WEIGHT = 0.
              VAR    = 0.
              IF (INDEX(ANS1, 'I') .GT. 0) THEN
                 SIGN =  -1.
              ELSE
                 SIGN = 1.
              ENDIF

              NCOUNT = 0
              IMASK  = 1
d331 1
a331 12
              DO I = 1, NROW*NSLICE
                CALL REDLIN(LUN, BUFI(IMASK), NSAM, I)
                DO  K = 1, NSAM
                  ILOC = IMASK + K - 1
                  IF (BUFM(ILOC) .GE. 0.5) THEN
                    BUFI(ILOC) = BUFI(ILOC) + ADA
                    WEIGHT     = WEIGHT + (BUFI(ILOC) * SIGN)              
                                           
C                   TEST FOR NEGATIVE VALUES
                    IF ((BUFI(ILOC) * SIGN) .LT. 0.) THEN
                      IF (BUFI(ILOC) .LT. BUFNEG) BUFNEG = BUFI(ILOC)
                      NEG = NEG + 1
d333 2
a335 12
                    VAR          = VAR + BUFI(ILOC)**2
                    NCOUNT       = NCOUNT + 1
                    BUFF(NCOUNT) = BUFI(ILOC) * SIGN
                                           
                  ENDIF
                END DO
                IMASK = IMASK + NSAM
              END DO

              CLOSE(LUN)
              DAV = WEIGHT/FLOAT(NCOUNT)
              VAR = (VAR - DAV**2 * FLOAT(NCOUNT))/FLOAT(NCOUNT - 1)
d337 4
a340 40
C	      WEIGHT = SUM OF THE ELEMENTS(.gt. 0.5) IN A ROW.
C             VAR : IT IS NOT USED ANYWHERE IN THIS FILE.
C
              BUFF(NCOUNT + 1) = WEIGHT
              BUFF(NCOUNT + 2) = VAR
            END IF
  
C           N1 THE SPIDER FILE (IMAGE) NUMBER,  TO BE USED AS
C           IMAGE ID THROUGHOUT THE CORAN ANALYSIS
C           NOTE THAT FOR THE RANDOM SHUFFLE OPTION,  WEIGHT AND VAR
C           ARE UNCHANGED AND DON'T HAVE TO BE RE-COMPUTED

C           WRITE IMAGE (NUMBER N1) INTO SEQUENTIAL FILE
C           THE RECORD WILL BE :: BUFF(1:NCOUNT), WEIGHT, VAR, N1

            CALL WRITT(LUNS, N1, BUFF, NCOUNT + 2)          

            IF (NEG .NE. 0) THEN
               NEGTOT = NEGTOT + NEG
C              WRITE(NOUT, 91) NEG
C91            FORMAT('*** WARNING:',I6,' NEGATIVE VALUES ENCOUNTERED')
            ENDIF
          END DO  
              
          WRITE(NOUT, 301) NMASK
301    	  FORMAT(' NUMBER OF POINTS IN MASK: ',I6)

          IF (NEGTOT .NE. 0)  THEN
             WRITE(NOUT,*) ' '
	     WRITE(NOUT, 302) NEGTOT, BUFNEG
302          FORMAT(' *** WARNING: ',I8, 
     &              ' NEGATIVE VALUES ENCOUNTERED.'/
     &              '     SMALLEST NEGATIVE VALUE IS: ', 1PE10.3)
             WRITE(NOUT, 303) BUFNEG
303          FORMAT('     CORAN DOES NOT ACCEPT NEGATIVE VALUES ',
     &                    'IN IMAGES.',/,
     &              '     ADD A CONSTANT >= ', 1PE10.3,/,
     &              '     PCA ACCEPTS NEGATIVE VALUES',
     &              '     NO NEED TO ADD A CONSTANT.')
          ENDIF
d342 2
a343 1
C         END OF SEQUENTIAL FILE PREPARATION STEP
d345 2
a346 115
999       IF (ALLOCATED(MADAR)) DEALLOCATE(MADAR)
          IF (ALLOCATED(BUFM))  DEALLOCATE(BUFM)
          IF (ALLOCATED(BUFI))  DEALLOCATE(BUFI)
          IF (ALLOCATED(BUFF))  DEALLOCATE(BUFF)

          CLOSE(LUNS)

          RETURN
        ENDIF

 
C-------------------------------------------------------------------
C       OPTION 'CA S' -- START OF CORAN ANALYSIS  
C-------------------------------------------------------------------
 
C       OPEN SEQUENTIAL FILE, UNFORMATTED SEQUENTIAL
        CALL FILERD(FILNAM, NLET, NULL, 'SEQUENCE', IRTFLG)
	IF (IRTFLG  .NE.  0) RETURN
 
        CALL FILNAMANDEXT(FILNAM,DATEXC,FILENM,NFN,.TRUE.,IRTFLG)
        CALL OPAUXFILE(.FALSE.,FILENM,NULL,-LUNS,0,
     &                       'O', ' ',.TRUE.,IRTFLG)
                    
C	NUMBER OF IMAGES, NUMBER OF PIXELS, NUMBER OR ROW AND COLUMN IN 
C	THE IMAGES.
C	MADAR : PACKED LIST OF COORDINATES OF MASKED AREA.
C	IMAR(I) : SELECTED IMAGE (IMAGE NUMBER STORED)

C       READ IN HEADER TO GET NPIX
        READ(LUNS) NUMIM, NPIX 

        ALLOCATE (MADAR(NPIX), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(46,'CA S, MADAR',IER)
           GOTO 9999
        ENDIF

C       READ IN HEADER
        REWIND(LUNS)
        READ(LUNS) NUMIM, NPIX,  NSAM,  NROW, 
     &             (MADAR(K), K = 1, NPIX),
     &             (IMAR(K), K = 1, NUMIM)
                          
        WRITE(NOUT, 119) NUMIM, NPIX
119	FORMAT(' NUMBER OF IMAGES: ', I6,'   NUMBER OF PIXELS: ', I7,/) 
      
C       OPTION NOT 'SF' CHOSEN ?
        IF (FCHAR(5:5) .NE. 'F') THEN
          CALL RDPRMI(NFAC, IMNO, NOT_USED, 
     &            'NUMBER OF FACTORS, COORDINATE FILE NUMBER')

          CALL RDPRMC(ANS, NCHAR, .TRUE., 'PCA (P) OR CORAN(C) ', 
     &       NULL, IRTFLG)

          PICK_PCA     = (ANS .EQ. 'P' .OR. ANS .EQ. 'Y') 
          FORCE_INCORE = (ANS .EQ. 'I')

          IF (ANS .EQ. 'I') THEN
C            FORCING ADDED AT ADRIANA'S REQUEST FOR TESTING
             WRITE(NOUT, 120) 
120	     FORMAT(' YOU ARE FORCING AN INCORE SOLUTION ',/,
     &              ' ON A SMALL PROBLEM MAY CAUSE AN INFINITE RUN!!') 
          ENDIF
            
C         IF YOU CHANGE PIX*** TO PIXEL***, NLET=8 FOR FILPATP
          NLET = 6
          CALL FILGET(FILPATC, FILNMC, NLET, IMNO, IRTFLG)
          CALL FILGET(FILPATP, FILNMP, NLET, IMNO, IRTFLG)
          CALL FILGET(FILPATE, FILNME, NLET, IMNO, IRTFLG)

C         INITIALIZE LOGICAL UTILITY VECTORS FOR IMAGES AND PIXELS
          DO  IM = 1, NUMIM
             LUV(IM) = 1
          END DO

          NSW    = 1
          NUMIMF = MAXIM
          NINACT = MAXIM

          WRITE(NOUT,*) 'FOR INACTIVE IMAGE NUMBERS'
          CALL FILELIST(.FALSE.,NDUM,NULL,NDUM,
     &                  IMINAC,MAXIM,NINACT,NULL,IRTFLG)
          IF (IRTFLG  .NE.  0) RETURN

C          NACT = NUMBER OF ACTIVE IMAGES. = NUMBER OF IMAGES
           NACT = NUMIM 

           IF (IMINAC(1).GT.0) THEN
             DO I = 1, NINACT
               DO IM = 1, NUMIMF
                 IF (IMINAC(I) .EQ. IMAR(IM)) THEN

C                   PUT THIS IMAGE TO INACTIVE STATUS
                    LUV(IM) = 0
                    NACT = NACT - 1
                    GOTO  6200
                 ENDIF
               END DO
               WRITE(NOUT, 6151) IMINAC(I)
6151           FORMAT('*** IMAGE: ', I3, ' NOT FOUND.',/,
     &                ' IMAGE NOT SET TO INACTIVE STATUS')
6200         END DO
           ENDIF                         

C         OPEN ALL FILES NEEDED IN SUBSEQUENT ROUTINES
C         USING LOGICAL UNIT NUMBERS:
C         LUNS  =  SEQ FILE CONTAINING MASKED IMAGE DATA
C         LUN   =  SEQ FILE RESERVED FOR IMAGE COORDINATES
C         LUNP  =  SEQ FILE RESERVED FOR PIXEL COORDINATES
C         LUNM  =  SEQ FILE RESERVED FOR EIGENVALUES
        
C         OPEN IMAGE COORDINATE FILE
          CALL FILNAMANDEXT(FILNMC,DATEXC,FILNAM,NFN,.TRUE.,IRTFLG)
          CALL OPAUXFILE(.FALSE.,FILNAM,NULL,-LUN,0,
     &                       'U', ' ',.TRUE.,IRTFLG)
d348 2
a349 9
C         OPEN PIXEL COORDINATE FILE
          CALL FILNAMANDEXT(FILNMP,DATEXC,FILNAM,NFN,.TRUE.,IRTFLG)
          CALL OPAUXFILE(.FALSE.,FILNAM,NULL,-LUNP,0,
     &                       'U', ' ',.TRUE.,IRTFLG)
                           
C         OPEN EIGENVALUE FILE
          CALL FILNAMANDEXT(FILNME,DATEXC,FILNAM,NFN,.TRUE.,IRTFLG)
          CALL OPAUXFILE(.FALSE.,FILNAM,NULL,-LUNM,0,
     &                       'U', ' ',.TRUE.,IRTFLG)
d351 5
a355 9
          IF (PICK_PCA) THEN
            CALL PCA_MAIN(NUMIM, NFAC, NSAM, NROW, NPIX, LUNS,
     &                   LUN, LUNP, LUNM, BUF, MAXDIM, LUV, 
     &                   IMAR, MADAR, NACT, NOUT,FORCE_INCORE)
          ELSE
            CALL SCORAN3(NUMIM, NFAC, NSAM, NROW, NPIX, LUNS,
     &                   LUN, LUNP, LUNM, LUV, 
     &                   IMAR, MADAR, NACT, NOUT)
          ENDIF
d357 4
a360 1
          IF (ALLOCATED(MADAR)) DEALLOCATE(MADAR)
d362 6
a367 27
C         CLOSE ALL FILES
          CLOSE(LUNS)
          CLOSE(LUN)
          CLOSE(LUNP)
          CLOSE(LUNM)
          RETURN
        ELSE

C-------------------------------------------------------------------
C         OPTION 'CA SF'  --  RETRIEVE IMAGES FROM SEQUENTIAL FILE
C-------------------------------------------------------------------

800       WRITE(NOUT,* ) ' FOR IMAGE SERIES:'

C         USED FILELISTA & FILELISTB TWICE TO PRESERVE ORDER OF QUESTIONS
          CALL FILELISTA(FILPAT1,NLET1,
     &       'FILE PREFIX OR TEMPLATE (EG. PIC****)',IRTFLG)
          IF (IRTFLG  .NE.  0) RETURN

C         USED FILELIST TWICE TO PRESERVE ORDER OF QUESTIONS
          CALL RDPRMI(INC, ISIGN, NOT_USED, 
     &                'ENTER INC,  SIGN( + 1/ - 1)')
          IF (ISIGN .EQ. 0) THEN
             SIGN =  +1.
          ELSE
             SIGN = ISIGN
          ENDIF
d369 7
a375 52
          NSW    = 1
          IOFF   = NSAM
          NTOT   = NSAM * NROW
          IOFF1  = NSAM * NROW + 2 * NSAM
          NUMIMF = MAXIM

C         USED FILELIST TWICE TO PRESERVE ORDER OF QUESTIONS
          CALL FILELISTB(LUNDOC,IMAR,MAXIM,NUMIMF,NULL,IRTFLG)
          IF (IRTFLG  .NE.  0) RETURN
       
          DO  IM = 1, NUMIMF

C	    NOTE BY MAHIEDDINE LADJADJ
C		THE NEXT 4 LINES HAVE BEEN BADLY WRITEN.
C		WHAT HAPPENS IF IT IS NEVER IM1 .GE. IMAR(R)
C               OR IF READT READS AN EOF ?

            CALL READT(LUNS, IM1, BUF(IOFF + 1), NPIX + INC)
            DO WHILE (IM1 .LT. IMAR(IM)) 
               CALL READT(LUNS, IM1, BUF(IOFF + 1), NPIX + INC)
            END DO
            IF (IM1 .EQ. IMAR(IM)) THEN
              FMIN =  + 1.E8
              FMAX =  - FMIN
              DAV  = 0.0
              DAV2 = 0.0
              DO  L = 1, NPIX
                 B = BUF(IOFF + L) * SIGN
                 BUF(IOFF + L) = B
                 IF (B.LT.FMIN) FMIN = B
                 IF (B.GT.FMAX) FMAX = B
                 DAV  = DAV + B
                 DAV2 = DAV2 + B**2
              END DO
              AV2 = DAV2/FLOAT(NSAM * NROW)
              AV  = DAV/FLOAT(NSAM * NROW)
              SIG = (SQRT(AV2 - AV**2))
        
C             PUT FMIN INTO BACKGROUND
              B = FMIN
              DO L = 1, NTOT
                 BUF(IOFF1 + L) = B
              END DO
              DO L = 1, NPIX
                 CALL MSKDEC(L, MADAR, NSAM, K, I)
                 I1 = (I - 1) * NSAM + K
                 BUF(IOFF1 + I1) = BUF(IOFF + L)
              END DO
        
C             OPEN IMAGE FILE
              NUM = IMAR(IM)
              CALL FILGET(FILPAT1, FILNM1, NLET1, NUM, IRTFLG)
d377 26
a402 33
              NSLICE = 1
              IFORM  = 1
              MAXIMT = 0
              CALL OPFILEC(0,.FALSE.,FILNM1,LUN,'U',IFORM,
     &                  NSAM,NROW,NSLICE,MAXIMT,' ',.FALSE.,IRTFLG)
              IF (IRTFLG .NE.  0) RETURN

C             THIS COULD CAUSE ERROR SINCE SETPRM USES UNLABELED COMMON?
              CALL SETPRM(LUN, NSAM, NROW, FMAX, FMIN, AV, 'R')

              I1 = IOFF1 + 1
              DO I = 1, NROW
                CALL WRTLIN(LUN, BUF(I1), NSAM, I)
                I1 = I1 + NSAM                
              END DO
              CLOSE(LUN)
            ELSE
              WRITE(NOUT, 8051) IMAR(IM)
8051          FORMAT(' *** IMAGE: ', I4, ' NOT FOUND')
            ENDIF
          END DO
          CLOSE(LUNS)
          
          RETURN
        ENDIF
        

C       ERROR MESSAGES
9000	CALL ERRT(19, 'JPMSK1', IER)

C       CLOSE ALL FILES
9999	CLOSE(LUNS)
        CLOSE(LUN)
d405 2
a407 47

        END


C++************************************************************************
C
C    PERMUT
C
C **********************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
C **********************************************************************
C
C   PERMUT(BUF,N,NSHUFF)
C
C   RANDOM_NUMBER HAS THE FOLLOWING ARGUMENT:
C
C          MUST BE OF TYPE REAL.  IT IS AN OUTPUT ARGUMENT.  
C          IT IS SET TO CONTAIN
C          PSEUDORANDOM NUMBERS FROM THE UNIFORM DISTRIBUTION IN THE
C          INTERVAL 0 <= X < 1.
C
C--*******************************************************************

        SUBROUTINE PERMUT(BUF,N,NSHUFF)

        REAL BUF(N),SAVEN

        DO I=1,NSHUFF
           CALL RANDOM_NUMBER(SAVEN)
           N1 = SAVEN * FLOAT(N) + 0.5
           IF (N1.EQ.0) N1 = N

           CALL  RANDOM_NUMBER(SAVEN)
           N2 = SAVEN * FLOAT(N)+0.5
           IF (N2.EQ.0) N2 = N

           IF (N1 .NE. N2) THEN
              SAVEN   = BUF(N2)
              BUF(N2) = BUF(N1)
              BUF(N1) = SAVEN
           ENDIF
        ENDDO
a409 20

C ++*************************  WRITT  ****************************

	SUBROUTINE WRITT(LUN,INUM,BUF,LEN)

	REAL BUF(LEN)
	INTEGER INUM,LEN,LUN
	WRITE(LUN) BUF,INUM
	END


C*************************  READT  *******************************

	SUBROUTINE READT(LUN,INUM,BUF,LEN)

	REAL BUF(LEN)
	INTEGER INUM,LEN,LUN

	READ(LUN) BUF,INUM
	END
@


1.43
log
@increased MAXIM
@
text
@d14 1
d115 1
a115 1
          CALL OPFILE(.TRUE.,MSKNAM,LUNM,'O',IFORM,NSAM,NROW,NSLICE,
d230 2
a231 2
              CALL OPFILE(.FALSE.,FILNM1,LUN,'O',IFORM,NSAM,NROW,NSLICE,
     &                   MAXIMT,' ',.FALSE.,IRTFLG)
d555 2
a556 2
              CALL OPFILE(.FALSE.,FILNM1,LUN,'U',IFORM,NSAM,NROW,NSLICE,
     &                   MAXIMT,' ',.FALSE.,IRTFLG)
@


1.42
log
@allocate for nslice use now
@
text
@d10 4
a13 3
C                       USED OPAUXFILE 4/2/01 ArDean Leith
C                       INCREASED MASK SIZE 3/12/02 ArDean Leith
C                       ALLOWED VOLUME INPUT 8/23/02  ArDean Leith
d60 2
a61 1
        PARAMETER (MAXIM = 20000)
@


1.41
log
@put writt.f inside
@
text
@d6 1
a6 1
C                       LONG FILE NAMES FEB 89 AL
d10 1
a10 1
C                       USED OPAUXFILE 4/2/01 ARDEAN LEITH
d12 1
d16 1
a16 1
C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
d71 2
d112 1
a112 1
          CALL OPFILE(.TRUE.,MSKNAM,LUNM,'O',IFORM,NSAM,NROW,NDUM,
a118 4
C         SAVE MASK DIMENSIONS FOR LATER COMPARISON
          NSAMM = NSAM
          NROWM = NROW
        
d130 1
d149 5
a153 5
          JMASK = NSAM * NROW + 10
          JBUF  = JMASK + JMASK 
  
          MAXMSK = MIN(LSHFT-1,NSAM * NROW)
          ALLOCATE (MADAR(MAXMSK), STAT=IRTFLG)
d155 2
a156 2
             CALL ERRT(46,'CA SI, MADAR*',IER)
             GOTO 9999
a161 1
          IMASK = JMASK - NSAM
d163 1
a163 1
C         MADAR()= (ROW -1) * LSHFT + K FOR EACH BUF(ROW,K) > .5
d166 2
a167 2
          DO I = 1, NROW
            IMASK = IMASK + NSAM
d169 2
a170 2
C           READ A ROW FROM A ROW OF THE MASK INTO THE ARRAY BUF(). 
            CALL REDLIN(LUNM, BUF(IMASK), NSAM, I)
d172 3
a174 3
              IF (BUF(IMASK + K-1) .GE. 0.5) THEN
                 NMASK         = NMASK + 1
                 IF (NMASK.GT.MAXMSK) THEN
d182 1
d185 1
d188 1
a188 1
             RETURN
d191 4
d201 3
a203 3
          WRITE(LUNS) NUMIM, NMASK, NSAM, NROW, 
     &             (MADAR(K), K = 1, NMASK), 
     &             (IMAR(K), K = 1, NUMIM)
d215 1
a215 1
            N1 = IMAR(IM)
d221 1
a221 1
               CALL PERMUT(BUF, NMASK, NSH)
d227 1
a227 1
              CALL OPFILE(.FALSE.,FILNM1,LUN,'O',IFORM,NSAM,NROW,NDUM,
d230 1
d233 1
a233 4
                  GOTO  9999
              ELSEIF (IRTFLG .NE. 0) THEN 
                  CALL ERRT(4, 'JPMSK1', NDUM)
                  GOTO  9999
d237 8
a244 8
              IF ((NSAMM .NE. NSAM) .OR. (NROWM .NE. NROW)) THEN
                WRITE(NOUT, 3194) NSAM, NROW, NSAMM, NROWM
3194            FORMAT('*** IMAGE DIMENSION (',I4,',',I4,
     &                 ') NOT SAME AS MASK DIMENSION (',I4,',',I4,')')
                CLOSE(LUNM)
                CLOSE(LUN)
                CALL ERRT(100,'JPMSK1',NE)
                RETURN
d256 1
d258 4
a261 4
              IMASK  = JMASK - NSAM
              DO I = 1, NROW
                IMASK = IMASK + NSAM
                CALL REDLIN(LUN, BUF(JBUF), NSAM, I)
d263 4
a266 3
                  IF (BUF(IMASK + K-1) .GE. 0.5) THEN
                    BUF(JBUF + K-1) = BUF(JBUF + K-1) + ADA
                    WEIGHT = WEIGHT + (BUF(JBUF + K-1) * SIGN)              
d269 2
a270 3
                    IF ( (BUF(JBUF + K-1) * SIGN) .LT. 0.) THEN
                      IF(BUF(JBUF+K-1) .LT. BUFNEG)
     &                  BUFNEG = BUF(JBUF+K-1)
d272 1
a272 1
                    END IF
d274 3
a276 3
                    VAR = VAR + BUF(JBUF + K-1)**2
                    NCOUNT = NCOUNT + 1
                    BUF(NCOUNT) = BUF(JBUF + K-1) * SIGN
d280 1
d282 2
d290 2
a291 2
              BUF(NCOUNT + 1) = WEIGHT
              BUF(NCOUNT + 2) = VAR
d300 1
a300 1
C           THE RECORD WILL BE :: BUF(1:NCOUNT), WEIGHT, VAR, N1
d302 1
a302 2
            CALL WRITT(LUNS, N1, BUF, NCOUNT + 2)          
            CLOSE(LUN)
d329 6
d336 1
a359 1
        REWIND(LUNS)
d374 1
a374 1
119	FORMAT('  NUMBER OF IMAGES: ', I6,'   NUMBER OF PIXELS: ', I7,/) 
d635 1
a635 22
C ++********************************************************************
C                                                                      *
C                                                                      *
C                                                                      *
C **********************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
C **********************************************************************
C                                                                      *
C                                                                      *
C                                                                      *
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C        0         2         3         4         5         6         7 *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************
d642 11
@


1.40
log
@madar size increased
@
text
@d621 31
@


1.39
log
@nloop,iloop_removed
@
text
@d5 1
a5 1
C                       CO - PROJECTION OF ARBITRARY DATA SET 5/03/89 JF
d11 1
d13 8
a20 8
C **************************************************************************
C *  COPYRIGHT (C)1987 , WADSWORTH CENTER FOR LABORATORIES AND             *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
d55 1
d60 1
a60 4
C       MAXIMUM NUMBER OF ELEMENTS IN MASK SET TO 25000
        PARAMETER (MAXMSK = 25000)
        
        CHARACTER  * 81 FILNM1, FILENM, FILNMP, FILNAM, MSKNAM, 
d67 1
a67 3
C       ADUM IS UNUSED NOW
        COMMON   ADUM(2048), IMAR(MAXIM), IMINAC(MAXIM), 
     &           MADAR(MAXMSK), LUV(MAXIM), BUF(1)
d69 3
a71 2
        CHARACTER  * 1    NULL, ANS
        CHARACTER * 3     ANS1
d77 3
a79 1
        INTEGER*4         LSHFT
d81 3
a83 9
        DATA        LSHFT/65536/
        DATA        FMINT/ - 10.0E30/, FMAXT/10.0E30/
        DATA        LUN, LUNS, LUNM, LUNP/71, 72, 73, 74/
        DATA        LUNDOC/75/

       NULL    =  CHAR(0)
       FLAGR   =  .FALSE.
       MAXDIM  = MAXDIMT - 4 * MAXIM - 3 * MAXMSK - 2048
       MAXMSKT = MAXMSK
d112 1
a112 1
        
d152 7
a163 1
C         THE 2 D ARRAY IMAGE IS SQUEEZED INTO A 1 D ARRAY BUF().
d165 2
a166 2
C	  SHIFT TO THE LEFT BY TWO BYTES.
C   ML.
d174 1
a174 1
                 NMASK = NMASK + 1
d182 2
a183 2
            END DO
          END DO
d186 1
a186 1
             CALL ERRT(101,'MASK CONTAINS NO POINTS',NE)
d197 2
a198 2
     &                (MADAR(K), K = 1, NMASK), 
     &                (IMAR(K), K = 1, NUMIM)
d225 8
a232 3
              IF (IFORM .NE. 1 .AND. IFORM .NE. 3) GOTO  9100
              IF (IRTFLG .NE. 0) GOTO  9300
    
d326 1
d342 1
a342 1
C	MADAR : IMAGE OF THE MASK.
d345 10
d356 1
d360 1
a360 1
                                    
d362 1
a362 1
119	FORMAT(' NUMBER OF IMAGES: ', I5,'   NUMBER OF PIXELS: ', I7,/) 
d377 1
a377 1
             WRITE(NOUT, 120) NUMIM, NPIX
a381 1

d410 4
a413 4
C                  PUT THIS IMAGE TO INACTIVE STATUS
                   LUV(IM) = 0
                   NACT = NACT - 1
                   GOTO  6200
d454 2
d457 1
a457 1
750	  CLOSE(LUNS)
d542 1
a542 1
              IF (IRTFLG  .NE.  0) RETURN
d544 1
a544 1
C             THIS COULD CAUSE ERROR SINCE SETPRM USES UNLABELD COMMON?
d565 1
a566 7
9000	IER = 19
        GOTO  9900
9100	IER = 2
        GOTO  9900
9300	IER = 4
9900	CALL ERRT(IER, 'JPMSK1', IER)

d568 1
a568 1
	CLOSE(LUNS)
d575 1
@


1.38
log
@buggy - buf still in scoran3.f call
@
text
@d132 1
a132 1
             CALL RDPRM(SH, NLOOP, ILOOP, 'SHUFFLE FACTOR')
d136 1
a136 1
          CALL RDPRM(ADA, NLOOP, ILOOP, 'ADDITIVE CONSTANT')
d349 1
a349 1
          CALL RDPRMI(NFAC, IMNO, NLOOP, ILOOP, 
d458 1
a458 1
          CALL RDPRMI(INC, ISIGN, NLOOP, ILOOP, 
@


1.37
log
@scoran3 parameters changed
@
text
@d434 1
a434 1
     &                   LUN, LUNP, LUNM, BUF, LUV, 
@


1.36
log
@used opauxfile.f
@
text
@d434 1
a434 1
     &                   LUN, LUNP, LUNM, BUF, MAXDIM, LUV, 
@


1.35
log
@put permut inside now, cosmetic, removed unused mytime
@
text
@d3 3
a5 2
C  JPMSK1               FORCE_INCORE ADDED JUN 2000 ArDean Leith
C                       MODIFIED BY MAHIEDDINE LADJADJ   9/1/93
d8 3
a10 3
C                       JULY 87 (RANDOM SHUFFLING)
C                       12/21/87 (NEW IN - CORE) 12/30/87 I4
C                       5/03/89 (CO - PROJECTION OF ARBITRARY DATA SET)JF
d21 2
a27 1
C      JPMSK1(MAXDIMT)
d55 1
a55 1
C       HAS TO BE MULTIPLE OF 8.
d61 3
a71 3
        CHARACTER  * 81   FILNM1, FILENM, FILNMP, FILNAM, MSKNAM, 
     &               FILNMC, FILNME, FILNMO, FILPAT1, FILPATC, FILPATE, 
     &               FILPATP
d76 1
a76 2
        LOGICAL           EX, FLAGR
        LOGICAL           PICK_PCA,FORCE_INCORE
d143 1
a143 1
              CALL FILCAN(FILNMO, NFN, NULL, NULL,FILNM1,DATEXC,IER)
d174 3
a176 3
                NMASK = NMASK + 1
                IF (NMASK.GT.MAXMSK) THEN
                   CALL ERRT(102,'NUMBER OF POINTS IN MASK EXCEEDS',
d178 3
a180 3
                   RETURN
               ENDIF
               MADAR(NMASK) = (I - 1) * LSHFT + K
d190 4
a193 4
C         OPEN SEQUENTIAL FILE
          CALL FILCAN(FILENM, NFN, NULL, NULL, FILNAM, DATEXC, IER)
          OPEN(FILE = FILENM, UNIT = LUNS, STATUS = 'UNKNOWN', 
     &         FORM = 'UNFORMATTED')
d197 2
a198 2
     &              (MADAR(K), K = 1, NMASK), 
     &              (IMAR(K), K = 1, NUMIM)
d326 1
a326 2
C       OPEN SEQUENTIAL FILE

d330 3
a332 3
        CALL FILCAN(FILENM, NFN, NULL, NULL, FILNAM, DATEXC, IER)
        OPEN(LUNS, FILE = FILENM, STATUS = 'OLD', 
     &         FORM = 'UNFORMATTED')
d406 6
a411 2
C         NOW OPEN ALL FILES NEEDED IN SUBSEQUENT ROUTINES
C         OPEN SEQUENTIAL FILE
d414 4
a417 4
          CALL FILCAN(FILNAM, NFN, NULL, NULL, FILNMC, DATEXC, IER)
          OPEN( FILE = FILNAM, UNIT = LUN, STATUS = 'UNKNOWN', 
     &         FORM = 'UNFORMATTED')
        
d419 3
a421 3
          CALL FILCAN(FILNAM, NFN, NULL, NULL, FILNMP, DATEXC, IER)
          OPEN( FILE = FILNAM, UNIT = LUNP, STATUS = 'UNKNOWN', 
     &         FORM = 'UNFORMATTED')
d424 3
a426 9
          CALL FILCAN(FILNAM, NFN, NULL, NULL, FILNME, DATEXC, IER)
          OPEN(FILE = FILNAM, UNIT = LUNM, STATUS = 'UNKNOWN',
     &         FORM = 'UNFORMATTED')
                                          
C         LOGICAL UNIT NUMBERS:
C                   LUNS  =  SEQ FILE CONTAINING MASKED IMAGE DATA
C		    LUN   =  SEQ FILE RESERVED FOR IMAGE COORDINATES
C		    LUNP  =  SEQ FILE RESERVED FOR PIXEL COORDINATES
C		    LUNM  =  SEQ FILE RESERVED FOR EIGENVALUES
d461 1
a461 1
             SIGN =  + 1.
d493 6
a498 6
                B = BUF(IOFF + L) * SIGN
                BUF(IOFF + L) = B
                IF (B.LT.FMIN) FMIN = B
                IF (B.GT.FMAX) FMAX = B
                DAV  = DAV + B
                DAV2 = DAV2 + B**2
d507 1
a507 1
                BUF(IOFF1 + L) = B
d510 3
a512 3
                CALL MSKDEC(L, MADAR, NSAM, K, I)
                I1 = (I - 1) * NSAM + K
                BUF(IOFF1 + I1) = BUF(IOFF + L)
d579 1
a579 1
C   RANDOM_NUMBER has the following argument:
d581 4
a584 4
C          Must be of type real.  It is an output argument.  
C          It is set to contain
C          pseudorandom numbers from the uniform distribution in the
C          interval 0 <= x < 1.
@


1.34
log
@time --> mytime
@
text
@a9 1
C                       USED MYTIME DEC 00 ARDEAN LEITH
a74 5
        INTEGER * 4       NUMIM,  NPIX,  NSAM,  NROW,  NMASK,  NEGTOT
        INTEGER * 4       JBUF, IMASK, IOFF1, L, NTOT, I1
        INTEGER * 4       NTIM(4)
        CHARACTER *16     CNTIM
        EQUIVALENCE       (NTIM,CNTIM)
a92 5
       
C      SEED INTEGERS FOR RANDOM SHUFFLE (this is buggy since only 8)!
       CALL MYTIME(CNTIM)
       IST = NTIM(4)
       KST = NTIM(3)
d215 1
a215 1
               CALL PERMUT(BUF, NMASK, NSH, IST, KST)
d564 45
@


1.33
log
@bad y vs p test in char input fixed
@
text
@d10 1
d100 2
a101 2
C      SEED INTEGERS FOR RANDOM SHUFFLE
       CALL TIME(CNTIM)
@


1.32
log
@hid the force incore .
@
text
@d93 1
d184 7
a190 3
                IF (NMASK.GT.MAXMSK) GOTO  9800
                MADAR(NMASK) = (I - 1) * LSHFT + K
              END IF
d195 1
a195 2
	     WRITE(NOUT, *) ' *** MASK CONTAINS NO POINTS'
             CALL ERRT(100,'JPMSK1',NE)
d355 1
a355 1
119	FORMAT('  NUMBER OF IMAGES: ', I4,'   NUMBER OF PIXELS: ', I6,/) 
d360 1
a360 1
     &            'NUMBER OF FACTORS, COORDINATE FILE CODE')
d365 1
a365 1
          PICK_PCA     = (ANS .EQ. 'Y' .OR. ANS .EQ. 'I') 
a573 3
9800	WRITE(NOUT, 9801) MAXMSK
9801	FORMAT(' *** NUMBER OF POINTS IN MASK EXCEEDS:', I5)
9600	CALL ERRT(5100, 'JPMSK1', NE)
@


1.31
log
@c for coran now
@
text
@d347 2
a348 2
     $             (MADAR(K), K = 1, NPIX),
     $             (IMAR(K), K = 1, NUMIM)
d358 1
a358 2
          CALL RDPRMC(ANS, NCHAR, .TRUE., 
     &       'PCA (P), PCA - FORCE INCORE (I), OR CORAN(C) ', 
d362 9
a370 1
          FORCE_INCORE = (ANS .EQ. 'I') 
@


1.30
log
@can force incore
@
text
@d359 1
a359 1
     &       'PCA (P), PCA - FORCE INCORE (I), OR CORAN(N) ', 
@


1.29
log
@SH undefined
@
text
@d1 10
a10 1

a11 1
C *  AUTHOR :                                                              *
a19 7
C   MODIFIED BY MAHIEDDINE LADJADJ   9/1/93
C   LONG FILE NAMES FEB 89 AL
C   CRAY COMPATIBLE FORTRAN JAN 90 JF	
C   JULY 87 (RANDOM SHUFFLING)
C   12/21/87 (NEW IN - CORE) 12/30/87 I4
C   5/03/89 (CO - PROJECTION OF ARBITRARY DATA SET) JF
C
d35 1
a35 1
C  COMMANDS SUPPORTED :
a37 3
C     CA SI +   -  AS ABOVE,  BUT ADD TO EXISTING SEQ. FILE
C                  THIS COMMAND HAS BEEN REMOVED. RUN CA SI ON THE
C		   WHOLE SET OF IMAGES.          12/15/93   ML
d80 1
a80 1
        LOGICAL           PICK_PCA
d353 1
a353 1
C       OPTION 'SF' CHOSEN ?
d359 1
a359 1
     &       'PRINCIPAL COMPONENT ANALYSIS (Y) OR CORAN(N) ', 
d361 3
a363 5
          IF (ANS .EQ. 'Y') THEN
            PICK_PCA = .TRUE.
          ELSE
            PICK_PCA = .FALSE.
          ENDIF
d400 2
a401 2
6151           FORMAT('*** IMAGE: ', I3, ' WAS NOT FOUND.',/,
     &                ' IMAGE NOT SET TO INACTIVE STATUS   ')
d432 1
a432 1
     &                   IMAR, MADAR, NACT, NOUT)
@


1.28
log
@used filelist a and b
@
text
@d139 1
d214 1
a214 2
C         IF 'R'  OPTION USED.
          NSH = SH * FLOAT(NMASK) + 0.5
d221 2
@


1.27
log
@used filelist
@
text
@d455 3
a457 2
          CALL FILELIST(.TRUE.,LUNDOC,FILPAT1,NLET1,
     &       0,IDUM,IDUM,'FILE PREFIX OR TEMPLATE (EG. PIC****)',IRTFLG)
d475 2
a476 2
          CALL FILELIST(.FALSE.,LUNDOC,FILPAT1,NLET1,
     &       IMAR,MAXIM,NUMIMF,NULL,IRTFLG)
@


1.26
log
@STATUS='OLD'
@
text
@d55 1
a55 1
c      has to be multiple of 8.
d65 1
a65 1
C       ADUM IS USED BY OPENF!
d84 4
d90 1
a90 3
C       LSHFT 2 ** 16 (2 BYTES)
        INTEGER*4   LSHFT
        DATA        LSHFT/65536/
a91 1
CNO_SAVE
d114 4
a117 3
          NUMIMG  =  MAXIM  
          CALL FILSEQP(FILPAT1, NLET1, IMAR, MAXIM, NUMIMG, 
     &       'ENTER IMAGE FILE TEMPLATE', IRTFLG)
d124 3
a126 1
          CALL FILERD(MSKNAM, NLET, NULL, 'MASK', IRTFLG)
a131 3
          CALL OPENF(MSKNAM, LUNM, NSAM, NROW, 'O', NF, NDUM)
          IF (NF .NE. 2) GOTO 9300
    
d151 1
d155 1
a155 1
                 NUMIM = NUMIM + 1
a196 1
	  NULL = CHAR(0)
d203 2
a204 2
     1              (MADAR(K), K = 1, NMASK), 
     2              (IMAR(K), K = 1, NUMIM)
d225 5
a229 1
              CALL OPENF(FILNM1, LUN, NSAM, NROW, 'O', NF, NDUM)
d231 1
a231 1
              IF (NF .NE. 2) GOTO  9300
d378 8
a385 6
           NSW = 1
           NUMIMF = MAXIM
           ninact = maxim
           CALL RDPRAI(IMINAC, MAXIM, NINACT, 0, NUMIMF, 
     &         'ENTER INACTIVE IMAGE NUMBERS (EG. 1-3,5,6-9 or 0 )',
     &          NULL, IRTFLG)
d403 1
a403 1
     &                ' IMAGE  NOT SET TO INACTIVE STATUS   ')
a408 7
Cifdef SP_SUN4
C          OPEN(LUNS, FILE = FILENM, STATUS = 'OLD', 
C     &         FORM = 'UNFORMATTED')
Celse
C          OPEN(LUNS, FILE = FILENM, STATUS = 'OLD', 
C     &         FORM = 'UNFORMATTED', READONLY)
Cendif
d454 6
a459 3
          CALL FILSEQP(FILPAT1, NLET1, IDUM, 0, IDUM,  
     $  'FILE PREFIX OR TEMPLATE (EG. PIC****)',IRTFLG)
     
d473 4
a476 2
          CALL RDPRAI(IMAR, MAXIM, NUMIMF, IMAR(1),IMAR(NUMIM), 
     &                '.ENTER IMAGE NUMBERS', NULL, IRTFLG)
d520 1
d522 7
a528 3
              IFORM = 1
              CALL OPENF(FILNM1, LUN, NSAM, NROW, 'UNKNOWN',
     &                   NF, NSLICE)
d530 1
@


1.25
log
@R
@
text
@d332 1
a332 1
        OPEN(LUNS, FILE = FILENM, STATUS = 'O', 
@


1.24
log
@*** empty log message ***
@
text
@d128 1
a128 1
          CALL OPENF(MSKNAM, LUNM, NSAM, NROW, 'R', NF, NDUM)
d224 1
a224 1
              CALL OPENF(FILNM1, LUN, NSAM, NROW, 'R', NF, NDUM)
d332 1
a332 1
        OPEN(LUNS, FILE = FILENM, STATUS = 'OLD', 
@


1.23
log
@maximum number of images=20000
@
text
@d232 1
a232 1
     &                 ') NOT SAME AS MASK DIMENSION (',I4,','I4,')')
a331 1
#ifdef SP_SUN4
a333 4
#else
        OPEN(LUNS, FILE = FILENM, STATUS = 'OLD', 
     &         FORM = 'UNFORMATTED', READONLY)
#endif
@


1.22
log
@rmoved C#ifdef
@
text
@d55 2
a56 3
C       MAXIMUM NUMBER OF IMAGES SET TO 9999   PAP 12/06/95
c        PARAMETER (MAXIM = 9999) change to multiple of 8.
        PARAMETER (MAXIM = 10000)
@


1.21
log
@NTIM equivalenced CNTIM for new compiler
@
text
@d408 1
a408 1
C#ifdef SP_SUN4
d411 1
a411 1
C#else
d414 1
a414 1
C#endif
@


1.20
log
@remove an open(seq file)
@
text
@d81 2
d101 1
a101 1
       CALL TIME(NTIM)
@


1.19
log
@correct filseqp call arg number
@
text
@d406 7
a412 7
#ifdef SP_SUN4
          OPEN(LUNS, FILE = FILENM, STATUS = 'OLD', 
     &         FORM = 'UNFORMATTED')
#else
          OPEN(LUNS, FILE = FILENM, STATUS = 'OLD', 
     &         FORM = 'UNFORMATTED', READONLY)
#endif
@


1.18
log
@change filseq to filseqp call
@
text
@d459 1
a459 1
     $  'FILE PREFIX OR TEMPLATE (EG. PIC****)',,IRTFLG)
@


1.17
log
@changed question pca(y) or coran(n)
@
text
@d358 2
a359 1
     &       'PRINCIPAL COMPONENT ANALYSIS (Y) OR CORAN(N) ', NULL, IRTFLG)
d458 3
a460 1
          CALL FILSEQ(FILPAT1, NLET1, IDUM, 0, IDUM, IRTFLG)
@


1.16
log
@used errt, output cleanup, cosmetic
@
text
@d358 1
a358 1
     &       'PRINCIPAL COMPONENT ANALYSIS (Y/N)', NULL, IRTFLG)
@


1.15
log
@show warning for neg. img values
@
text
@d12 3
a14 3
C   Modified by MAHIEDDINE LADJADJ   9/1/93
C   LONG FILE NAMES FEB 89 al
C   CRAY COMPATIBLE FORTRAN JAN 90 jf	
d17 1
a17 1
C   5/03/89 (CO - PROJECTION OF ARBITRARY DATA SET) jf
d19 3
a21 3
C      JPMSK1:   CREATE A SEQUENTIAL FILE CONTAINING IMAGES 
C                IN NON - TRANSPOSED FORMAT TO BE USED AS INPUT TO JP'S
C	         NEW CORAN PROGRAMS
d82 3
a84 2
        DATA  FMINT/ - 10.0E30/, FMAXT/10.0E30/
        DATA  LUN, LUNS, LUNM, LUNP/71, 72, 73, 74/
d86 3
a88 2
        INTEGER*4 LSHFT
        DATA LSHFT/65536/
d90 2
a91 2
       NULL   =  CHAR(0)
       FLAGR  =  .FALSE.
a93 1
c       FILPATP = 'PIXEL***'//NULL
d102 1
a102 1
C
d106 1
a106 1
C 
d135 1
a135 1
     &     'ALL FILES EXIST? (Y/N), (I)NV, (R)ANDOM', NULL, IRTFLG)
d138 3
a140 3
            FLAGR = .TRUE.
            CALL RDPRM(SH, NLOOP, ILOOP, 'SHUFFLE FACTOR')
            IF (SH .LE. 0.) SH = 1.
d152 3
a154 3
                NUMIM = NUMIM + 1
                IMAR(NUMIM) = IMAR(IM)
              END IF
d157 1
a157 1
            NUMIM = NUMIMG
d162 1
a162 1
          JBUF = JMASK + JMASK 
d170 1
a170 1
C         MADAR()= (row -1) * LSHFT + K FOR EACH BUF(row,k) > .5
d188 4
a191 4
	    WRITE(NOUT, 951)
951	    FORMAT('  ***  MASK CONTAINS NO POINTS')
            RETURN
          END IF
d194 1
a194 1
	NULL=CHAR(0)
d199 1
a199 1
C         >>>>>>>>>>  WRITE HEADER
d219 1
a219 1
              CALL PERMUT(BUF, NMASK, NSH, IST, KST)
d230 2
a231 2
3194            FORMAT('*** IMAGE DIMS (',2I3, ') UNEQUAL MASK DIMS (', 
     &               2I3, ')')
d234 1
d241 1
a241 1
              VAR = 0.
d243 1
a243 1
                SIGN =  -1.
d245 2
a246 2
                SIGN = 1.
              END IF
d248 1
a248 1
              IMASK = JMASK - NSAM
d268 1
a268 1
                  END IF
d281 1
a281 1
C           N1 THE SPIDER file (image) NUMBER,  TO BE USED AS
d285 4
a288 4
C
C           WRITE IMAGE (number n1) INTO SEQUENTIAL FILE
C           the record will be ::    buf(1:ncount), weight, var, n1
C
d293 1
a293 1
              NEGTOT = NEGTOT + NEG
d295 2
a296 2
C91            FORMAT('*** WARNING:',I6,'NEGATIVE VALUES ENCOUNTERED')
            END IF
d300 1
a300 1
301    	  FORMAT('  **  NO. OF POINTS IN MASK  =  ', I6)
d303 12
a314 10
	      WRITE(NOUT, 302) NEGTOT, BUFNEG
302           FORMAT('  ***  WARNING: ', 
     &           I8, ' NEGATIVE VALUES ENCOUNTERED.'/
     &              '     SMALLEST IS ', 1PE10.3)
              WRITE(NOUT, 303) BUFNEG
303           FORMAT(' >>> NOTE: CORAN DOES NOT ACCEPTS NEGATIVE '/
     &          'VALUES IN IMAGES. ADD A CONSTANT >= ', 1PE10.3)
              WRITE(NOUT, 304) 
304           FORMAT(' >>> NOTE: PCA ACCEPTS NEGATIVE '/
     &          'VALUES IN IMAGES. NO NEED TO ADD A CONSTANT ')
a315 2
          END IF
C
a316 1
C 
d319 2
a320 2
        END IF
C 
d324 1
a324 1
C 
d326 1
a326 1
C
d329 1
a329 1
	NULL=CHAR(0)
d339 6
a344 9
c
c	number of images, number of pixels, number or row and column in 
c	the images.
c	Madar : image of the mask.
c	imar(i) : selected image (image number stored)
c                
C
C       <<<<<<<<<<<<<<<<  READ IN HEADER
C
d350 1
a350 1
119	FORMAT('**  NUMBER OF IMAGES ', I4,' NUMBER OF PIXELS ', I6) 
d355 1
a355 1
     &            'NUMBER OF FACTORS,  COORDINATE FILE CODE')
d358 1
a358 1
     &       'Principal Component Analysis (Y/N)', NULL, IRTFLG)
d363 1
a363 1
          END IF
a371 1
        
d373 1
a373 1
            LUV(IM) = 1
d386 1
a386 1
           IF(IMINAC(1).GT.0) THEN
d398 2
a399 2
6151           FORMAT('*** IMAGE ', I3, ' WAS NOT FOUND.',/,
     $                'IMAGE  NOT SET TO INACTIVE STATUS   ')
d401 1
a401 1
           END IF                         
a413 1
	  NULL=CHAR(0)
a418 1
	NULL=CHAR(0)
a423 1
	  NULL=CHAR(0)
d426 1
a426 1
     &       FORM = 'UNFORMATTED')
d428 1
a428 1
C           LOGICAL UNIT NUMBERS:
d433 3
a435 3
C
          IF(PICK_PCA) THEN
            CALL PCA_MAIN(numim, NFAC, nsam, nrow, npix, LUNS,
d437 1
a437 1
     &                   IMAR, MADAR, NACT, nout)
d439 1
a439 1
            CALL SCORAN3(numim, NFAC, nsam, nrow, npix, LUNS,
d441 2
a442 2
     &                   IMAR, MADAR, NACT, nout)
          END IF
d451 1
a451 1
C
d455 1
a455 1
C
d461 1
a461 1
            SIGN =  + 1.
d463 2
a464 2
            SIGN = ISIGN
          END IF
d466 4
a469 4
          NSW  = 1
          IOFF = NSAM
          NTOT = NSAM * NROW
          IOFF1 = NSAM * NROW + 2 * NSAM
d472 1
a472 1
     &    '.ENTER IMAGE NUMBERS', NULL, IRTFLG)
d475 6
a480 6
C
C	note by mahieddine ladjadj
C		the next 4 lines have been badly writen.
C		WHAT happens if it is never im1 .GE. imar(r)
C               or if READT reads an EOF ?
C
d483 1
a483 1
              CALL READT(LUNS, IM1, BUF(IOFF + 1), NPIX + INC)
d488 1
a488 1
              DAV = 0.0
d495 1
a495 1
                DAV = DAV + B
d499 1
a499 1
              AV = DAV/FLOAT(NSAM * NROW)
d529 1
a529 1
8051          FORMAT('  ***  IMAGE ', I4, ' NOT FOUND')
d535 1
a535 1
        END IF
d537 1
a537 1
C
a538 1
C
d545 1
a545 1
9900	CALL ERRT(IER, 'JPMSK3', IER)
d555 2
a556 2
9801	FORMAT('  ***  NUMBER OF POINTS IN MASK EXCEEDS', I5)
9600	CALL ERRT(5100, 'JPMSK3', NE)
@


1.14
log
@add msg about coran and pca additive constant
@
text
@d290 2
a291 2
C            IF (NEG .NE. 0) THEN
C              NEGTOT = NEGTOT + NEG
d294 1
a294 1
C            END IF
d312 2
a313 1
C 
a378 47

c++++ delete this if the next lines work fine,
C         READ IN NUMBERS OF IMAGES TO BE INACTIVE IN THIS RUN.
c          CALL RDPRMC (ANS, NCHAR, .TRUE., 
c     &      'STRING - LIKE INPUT FOR INACTIVE IMAGES (Y/N)?',
c     &       NULL, IRTFLG)
c
c          IF (ANS  .NE.  'Y') THEN
c            CALL RDPRMI(NINACT, NDUM, NLOOP, ILOOP1, 
c     &                'NUMBER OF INACTIVE IMAGES')
c            IF (NINACT .NE. 0)  THEN
c              NVAL  =  NINACT
c              CALL RDPRAF(BUF, NINACT, NVAL, FMINT, FMAXT, 
c     &             'INDEX ARRAY OF INACTIVE IMAGES', NULL, IRTFLG)
c 
cC             THIS PART IS FOR THE NUMBER BY NUMBER INPUT-MODE
c              DO  I = 1, NINACT
c                DO IM = 1, NUMIM
c                  IF (INT(BUF(I) + 0.5) .EQ. IMAR(IM)) THEN
c                    LUV(IM) = 0
c                     GOTO  200
c                  ENDIF
c                END DO
c                WRITE(NOUT, 151) INT(BUF(I) + 0.5)
c151             FORMAT('*** IMAGE ',I3, ' NOT FOUND. NO ACTION TAKEN')
c200           END DO
c            END IF
c          ELSE    ! IF (ANS . NE. 'Y')
c
cC           THIS PART IS FOR STRING-LIKE INPUT MODE
c            NSW = 1
c            NUMIMF = MAXIM
c            ninact = maxim
c            CALL RDPRAI(IMINAC, MAXIM, NINACT, 0, NUMIMF, 
c     &                  'ENTER FILE NUMBERS', NULL, IRTFLG)
c            DO I = 1, NINACT
c              DO IM = 1, NUMIMF
c                IF (IMINAC(I) .EQ. IMAR(IM)) THEN
c                  LUV(IM) = 0
c                  GOTO  6200
c                ENDIF
c              END DO
c              WRITE(NOUT, 6151) I
c6151          FORMAT('*** IMAGE ', I3, ' NOT FOUND. NO ACTION TAKEN')
c6200        END DO
c          END IF       ! IF (ANS. NE. 'Y')

d429 1
a429 1
	NULL=CHAR(0)
@


1.13
log
@allign Q arrays
@
text
@d142 1
a142 1
          CALL RDPRM(ADA, NLOOP, ILOOP, 'Additive constant')
d290 5
a294 5
            IF (NEG .NE. 0) THEN
              NEGTOT = NEGTOT + NEG
              WRITE(NOUT, 91) NEG
91            FORMAT('*** WARNING:',I6,'NEGATIVE VALUES ENCOUNTERED')
            END IF
d300 3
a302 2
          IF (NEGTOT .NE. 0) WRITE(NOUT, 302) NEGTOT, BUFNEG
302       FORMAT('  ***  WARNING: ', 
d305 6
@


1.12
log
@avoid  jump inside loop
@
text
@d56 2
a57 1
        PARAMETER (MAXIM = 9999)
@


1.11
log
@overflow of one of the arrays in buf
@
text
@d591 7
a597 1
        GOTO  750
@


1.10
log
@number of images increased to 9999
@
text
@d159 2
a160 2
          JMASK = NSAM * NROW + 2
          JBUF = JMASK + JMASK - 2
@


1.9
log
@number of points under the mask 25000
@
text
@a52 1
#ifdef SP_UNIX
a53 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d55 2
a56 2
C       MAXIMUM NUMBER OF IMAGES SET TO 5000   PAP 04/04/95
        PARAMETER (MAXIM = 5000)
@


1.8
log
@remove a floating pt var from common/commun block
@
text
@d62 2
a63 2
C       MAXIMUM NUMBER OF ELEMENTS IN MASK SET TO 15000
        PARAMETER (MAXMSK = 15000)
@


1.7
log
@nosave
@
text
@d67 1
a67 1
     &                  FILPATC, FILPATE, FILPATP, SCRATC
@


1.6
log
@name in open -> file
@
text
@d90 1
a90 1

a599 1
        RETURN
@


1.5
log
@?
@
text
@d1 1
a1 1
C
d82 1
a82 1
        INTEGER * 4       JBUF, IMASK, IOFF1, L, NTOT, I1, JROW, JCOL
d198 1
a198 1
          OPEN(NAME = FILENM, UNIT = LUNS, STATUS = 'UNKNOWN', 
d325 5
a329 1
        OPEN(LUNS, NAME = FILENM, STATUS = 'OLD', 
d331 1
d450 5
a454 1
          OPEN(LUNS, NAME = FILENM, STATUS = 'OLD', 
d456 1
d459 1
a459 1
	NULL=CHAR(0)
d461 1
a461 1
          OPEN( NAME = FILNAM, UNIT = LUN, STATUS = 'UNKNOWN', 
d467 1
a467 1
          OPEN( NAME = FILNAM, UNIT = LUNP, STATUS = 'UNKNOWN', 
d473 1
a473 1
          OPEN(NAME = FILNAM, UNIT = LUNM, STATUS = 'UNKNOWN',
@


1.4
log
@useless stats removed
@
text
@a1 5
C***************************************************************************
C
C
C	MAHIEDDINE LADJADJ   9/1/93
C
d12 1
d59 2
a60 2
C       MAXIMUM NUMBER OF IMAGES SET TO 4000   PAP 06/01/92
        PARAMETER (MAXIM = 4000)
@


1.3
log
@useless stats removed
@
text
@d582 1
a582 3
        
9600	CALL ERRT(5100, 'JPMSK3', NE)
        RETURN
d588 2
a589 1
        GOTO  9900
d593 2
a594 6
        GOTO  9600
9900	CALL ERRT(IER, 'JPMSK3', IER)
        GOTO  750
9920	WRITE(NOUT, 9921)
9921	FORMAT('  ***  IMAGE NOT FOUND IN STACK'/)
	return
@


1.2
log
@cpp_lines_added
@
text
@a590 3
9500	WRITE(NOUT, 9501)
9501	FORMAT('  ***  MASK CONTAINS NO POINTS')
        RETURN
a595 4
        GOTO  750
9910	WRITE(NOUT, 9911)
9911	FORMAT('  ***  MISMATCH BETWEEN OLD AND NEW SEQUENTIAL FILE')
        CALL ERRT(100, 'JPMSK1', IER)
@


1.1
log
@Initial revision
@
text
@d57 3
d61 1
@
