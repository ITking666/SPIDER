head	1.17;
access;
symbols
	pre_mrcs:1.17
	healthdept_2018:1.17
	pre_getangas:1.15
	GPL2010:1.15
	pre_GPL2010:1.14
	pre_var_equation:1.14
	pre_fftwrings:1.14
	pre_opfiles:1.14
	src:1.14
	best-code:1.14
	x-named-regs:1.14
	x:1.14
	v13-00:1.14
	pre_GPL:1.12
	prec_CA:1.12
	noindx:1.11
	Bproc:1.11
	oct21:1.7
	last77:1.5;
locks; strict;
comment	@c @;


1.17
date	2018.10.03.14.34.13;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2014.07.29.15.26.33;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.24.13.26.35;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.17.20.14.12;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.17.18.07.56;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.20.19.40.37;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.03.23.16.35.34;	author bimal;	state Exp;
branches;
next	1.10;

1.10
date	99.12.28.15.13.32;	author bimal;	state Exp;
branches;
next	1.9;

1.9
date	99.12.23.19.30.08;	author bimal;	state Exp;
branches;
next	1.8;

1.8
date	99.12.07.19.26.11;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.07.09.16.07.01;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	99.06.07.19.36.23;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	97.10.17.15.19.14;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	97.10.14.21.19.57;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.08.29.20.26.15;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	96.08.29.18.36.10;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.51.48;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.17
log
@email_health_dept
@
text
@C ++********************************************************************
C                                                                      *
C  QFACT_P                                                         
C                                                                      *
C                  OPFILEC                         FEB 03 ARDEAN LEITH
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      
C  QFACT_P                                                         
C                                                                      
C  PURPOSE:                                                            
C                                                                      
C  PARAMETERS:                                                         
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE QFACT_P(LUN1,LUN2,LUNQ,INUM,NUMT,NSAM,NROW,HREF,KREF)

        INCLUDE 'CMLIMIT.INC'

        PARAMETER  (NLIST=2)
        DIMENSION  DLIST(NLIST)

        CHARACTER (LEN=MAXNAM) :: FILNAM,FILA,FILQ,FILPAT,DOCFIL

        COMPLEX                              :: QSUM
        DIMENSION                            :: INUM(NUMT)
        INTEGER                              :: HREF,KREF
        LOGICAL                              :: SKIP
        COMPLEX, ALLOCATABLE, DIMENSION(:,:) :: FA,CBUF
        REAL, ALLOCATABLE, DIMENSION(:,:)    :: FABS
        DIMENSION  BUF(NSAM)

        PARAMETER (QMAX=1.0E5)

        DATA   NDOUT/91/

        NROWH=NROW/2
        NSAMH=NSAM/2
        IF ( HREF.EQ.0 . AND. KREF.EQ.0)  THEN
           SKIP=.TRUE.
        ELSE
           IF (HREF.GE.0)  THEN
              HREF=HREF+1
           ELSE
              HREF=-HREF+1
              KREF=-KREF
           ENDIF
           IF (KREF.GE.0)  THEN
              KREF=KREF+1
           ELSE
              KREF=NROW+KREF+1
           ENDIF
           SKIP=.FALSE.
           QSUM=(0.0,0.0)
           SMOD=0.0
        ENDIF

        ALLOCATE (FA(NSAM/2+1,NROW), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'AS F, FA',IER)
           RETURN
        ENDIF

        ALLOCATE (FABS(NSAM/2+1,NROW), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'AS F, FABS',IER)
           DEALLOCATE (FA)
           RETURN
        ENDIF

C       CLEAR BUFFER ARRAYS
        FABS=0.
        FA=(0.,0.)

        ALLOCATE (CBUF(NSAM/2+1,NROW), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'AS F, CBUF',IER)
           DEALLOCATE (FABS)
           DEALLOCATE (FA)
           RETURN
        ENDIF

C       LOOP OVER ALL FILES
        DO  IFIL=1,NUMT
           CALL FILGET(FILPAT,FILNAM,NLET,INUM(IFIL),IRTFLG)
           IF(IRTFLG.NE.0) THEN
              DEALLOCATE (FABS)
              DEALLOCATE (FA)
              RETURN
           ENDIF

           MAXIM = 0
           CALL OPFILEC(0,.FALSE.,FILNAM,LUN2,'O',ITYPE,
     &                 NSAM,NROW,NSLICE,MAXIM,' ',.FALSE.,IRTFLG)
           IF (IRTFLG .NE. 0) THEN
              DEALLOCATE (FABS)
              DEALLOCATE (FA)
              RETURN
           ENDIF
         
           NSLICE =1           
           CALL READV(LUN2,CBUF,NSAM+2,NROW,NSAM,NROW,NSLICE)
           CLOSE(LUN2)
C
           INV=+1
           CALL  FMRS_2(CBUF,NSAM,NROW,INV)
C
c$omp      parallel do private(i,j)
           DO    I=1,NSAMH+1
              DO    J=1,NROW
                 FABS(I,J)=FABS(I,J)+CABS(CBUF(I,J))
                 FA(I,J)=FA(I,J)+CBUF(I,J)
              ENDDO
           ENDDO
C
           IF(.NOT.SKIP)  THEN
              QSUM=QSUM+FA(HREF,KREF)
              SMOD=SMOD+CABS(FA(HREF,KREF))
              DLIST(1)=IFIL
              DLIST(2)=CABS(QSUM)/SMOD
              CALL  SAVD(NDOUT,DLIST,NLIST,IRTFLG)
           ENDIF
C       end of the loop over the images
        ENDDO
        IF(.NOT.SKIP)  THEN
           CALL  SAVDC
           CLOSE(NDOUT)
        ENDIF
C       GENERATE FRIEDEL-RELATED PART OF Q-MAP AND WRITE OUT
        DO  J=1,NROW
           IF(J.LE.NROWH)  THEN
              KJ=J+NROWH
           ELSE
              KJ=J-NROWH
           ENDIF
           IF(J.EQ.1.OR.J.EQ.NROWH+1)  THEN
              MJ=J
           ELSE
              MJ=NROW-J+2
           ENDIF

c$omp      parallel do private(i)
           DO  I=1,NSAMH
              IF(QMAX*FABS(I,J).GT.CABS(FA(I,J)))  THEN
                 BUF(I+NSAMH)=CABS(FA(I,J))/FABS(I,J)
                 BUF(NSAMH-I+1)=CABS(FA(I+1,MJ))/FABS(I+1,MJ)
              ELSE
                 BUF(I+NSAMH)=QMAX
                 BUF(NSAMH-I+1)=QMAX
              ENDIF
           ENDDO
           CALL  WRTLIN(LUNQ,BUF,NSAM,KJ)
        ENDDO
        CLOSE(LUNQ)
C
c$omp   parallel do private(i,j)
        DO    I=1,NSAMH+1
           DO    J=1,NROW
              CBUF(I,J)=FA(I,J)/NUMT
           ENDDO
        ENDDO
        INV=-1
        CALL  FMRS_2(CBUF,NSAM,NROW,INV)

        NSLICE =1
        CALL WRITEV(LUN1,CBUF,NSAM+2,NROW,NSAM,NROW,NSLICE)

        CLOSE (LUN1)

        DEALLOCATE (CBUF)
        DEALLOCATE (FABS)
        DEALLOCATE (FA)

        END



@


1.16
log
@LEN=MAXNAM
@
text
@d13 1
a13 1
C=* Email: spider@@wadsworth.org                                        *
@


1.15
log
@GPL_2010
@
text
@d3 1
d28 6
a33 6
C                                                                      *
C                                                                      *
C                                                                      *
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS:                                                         *
a34 2
C IMAGE_PROCESSING_ROUTINE
C                                                                      *
d40 2
d45 1
a45 2
        COMMON /COMMUN/ FILNAM,FILA,FILQ,FILPAT,NLET
        CHARACTER *80 FILNAM,FILA,FILQ,FILPAT,DOCFIL
d47 4
a50 4
        COMPLEX  QSUM
        DIMENSION   INUM(NUMT)
        INTEGER  HREF,KREF
        LOGICAL  SKIP
d52 1
a52 1
        REAL, ALLOCATABLE, DIMENSION(:,:) :: FABS
d70 1
a70 1
           IF(KREF.GE.0)  THEN
d178 1
a178 1
c$omp parallel do private(i,j)
d195 1
@


1.14
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.13
log
@HRI GPL License used
@
text
@a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.12
log
@opfilec
@
text
@d8 24
@


1.11
log
@used readv and writev
@
text
@d4 1
a22 1
C        0         2         3         4         5         6         7 *
d26 1
a26 2
        SUBROUTINE QFACT_P
     &  (LUN1,LUN2,LUNQ,INUM,NUMT,NSAM,NROW,HREF,KREF)
d30 1
d33 1
d42 1
d44 1
a45 2
        PARAMETER (QMAX=1.0E5)
        DATA   NDOUT/91/
d48 1
a48 1
        IF(HREF.EQ.0 . AND. KREF.EQ.0)  THEN
d51 1
a51 1
           IF(HREF.GE.0)  THEN
a66 1

a83 1

a91 2
   

a100 2


d102 2
a103 2
           CALL OPFILE(.FALSE.,FILNAM,LUN2,'O',ITYPE,NSAM,NROW,NSLICE,
     &     MAXIM,' ',.FALSE.,IRTFLG)
a104 1
              CALL ERRT(2,'AS F',NE)
d117 1
a117 1
c$omp parallel do private(i,j)
d132 1
a132 1
C end of the loop over the images
d151 1
a151 1
c$omp parallel do private(i)
a176 1

a178 1
       
@


1.10
log
@replaced goto statements
@
text
@d115 3
a117 4
     
           DO    I=1,NROW
              CALL  REDLIN(LUN2,CBUF(1,I),NSAM,I)
           ENDDO
d179 5
a183 3
        DO    J=1,NROW
           CALL  WRTLIN(LUN1,CBUF(1,J),NSAM,J)
        ENDDO
@


1.9
log
@adapted for dynamical memory allocation
@
text
@d76 2
a77 1
           GOTO 400
d88 3
a90 1
           GOTO 300
d99 3
a101 1
              GOTO 300
d111 3
a113 1
              GOTO 300
d187 2
a188 2
300     DEALLOCATE (FABS)
400     DEALLOCATE (FA)
@


1.8
log
@header
@
text
@a0 1

d19 2
d26 2
a27 3
	SUBROUTINE QFACT_P
     &	(LUN1,LUN2,LUNQ,BUF,CBUF,NUMBER,NUMT,FA,FABS,NSAM,NROW,
     &   HREF,KREF)
d29 2
a30 2
	PARAMETER  (NLIST=2)
	DIMENSION  DLIST(NLIST)
d32 16
a47 10
        CHARACTER *81 FILNAM,FILA,FILQ,FILPAT,DOCFIL
        COMPLEX  FA(NSAM/2+1,NROW),CBUF(NSAM/2+1,NROW),QSUM
	DIMENSION   NUMBER(NUMT),FABS(NSAM/2+1,NROW),BUF(*)
	INTEGER  HREF,KREF
	LOGICAL  SKIP
	PARAMETER (QMAX=1.0E5)
	DATA   NDOUT/91/
	NROWH=NROW/2
	NSAMH=NSAM/2
	IF(HREF.EQ.0 . AND. KREF.EQ.0)  THEN
d49 1
a49 1
	ELSE
d51 1
a51 1
            HREF=HREF+1
d53 2
a54 2
            HREF=-HREF+1
            KREF=-KREF
d56 5
a60 5
            IF(KREF.GE.0)  THEN
             KREF=KREF+1
            ELSE
             KREF=NROW+KREF+1
            ENDIF
d64 49
a112 18
	ENDIF
C CLEAR BUFFER ARRAYS
	FABS=0.
	FA=(0.,0.)
C LOOP OVER ALL FILES
	DO  IFIL=1,NUMT
  	 CALL FILGET(FILPAT,FILNAM,NLET,NUMBER(IFIL),IRTFLG)
	  IF(IRTFLG.NE.0) RETURN
	 CALL OPENFB(BUF,FILNAM,LUN2,NSAM,NROW,'O',NF,NSLICE)
	 IF(NF.NE.2)  THEN
          CALL ERRT(2,'AS F',NE)
	  RETURN
         ENDIF

	  DO    I=1,NROW
	   CALL  REDLIN(LUN2,CBUF(1,I),NSAM,I)
	  ENDDO
	 CLOSE(LUN2)
d114 2
a115 2
	INV=+1
	CALL  FMRS_2(CBUF,NSAM,NROW,INV)
d118 6
a123 6
         DO    I=1,NSAMH+1
	  DO    J=1,NROW
	    FABS(I,J)=FABS(I,J)+CABS(CBUF(I,J))
	    FA(I,J)=FA(I,J)+CBUF(I,J)
	  ENDDO
	 ENDDO
d125 7
a131 7
         IF(.NOT.SKIP)  THEN
	   QSUM=QSUM+FA(HREF,KREF)
	   SMOD=SMOD+CABS(FA(HREF,KREF))
	   DLIST(1)=IFIL
	   DLIST(2)=CABS(QSUM)/SMOD
    	   CALL  SAVD(NDOUT,DLIST,NLIST,IRTFLG)
         ENDIF
d134 17
a150 16
	IF(.NOT.SKIP)  THEN
	 CALL  SAVDC
	 CLOSE(NDOUT)
	ENDIF
C GENERATE FRIEDEL-RELATED PART OF Q-MAP AND WRITE OUT
	DO  J=1,NROW
	 IF(J.LE.NROWH)  THEN
	  KJ=J+NROWH
	 ELSE
	  KJ=J-NROWH
	 ENDIF
	 IF(J.EQ.1.OR.J.EQ.NROWH+1)  THEN
	  MJ=J
	 ELSE
	  MJ=NROW-J+2
	 ENDIF
d152 12
a163 12
	 DO  I=1,NSAMH
	  IF(QMAX*FABS(I,J).GT.CABS(FA(I,J)))  THEN
	   BUF(I+NSAMH)=CABS(FA(I,J))/FABS(I,J)
	   BUF(NSAMH-I+1)=CABS(FA(I+1,MJ))/FABS(I+1,MJ)
	  ELSE
	   BUF(I+NSAMH)=QMAX
	   BUF(NSAMH-I+1)=QMAX
	  ENDIF
	 ENDDO
	 CALL  WRTLIN(LUNQ,BUF,NSAM,KJ)
	ENDDO
	CLOSE(LUNQ)
d167 19
a185 11
	 DO    J=1,NROW
	  CBUF(I,J)=FA(I,J)/NUMT
	 ENDDO
	ENDDO
	INV=-1
	CALL  FMRS_2(CBUF,NSAM,NROW,INV)
	DO    J=1,NROW
	 CALL  WRTLIN(LUN1,CBUF(1,J),NSAM,J)
	ENDDO
	CLOSE (LUN1)
	END
@


1.7
log
@fixed
@
text
@d2 23
d26 3
a28 1
     &	(LUN1,LUN2,LUNQ,BUF,CBUF,NUMBER,NUMT,FA,FABS,NSAM,NROW,HREF,KREF)
@


1.6
log
@FFT changed
@
text
@d10 1
a10 1
	INTEGER H,HREF,KREF
d12 1
d14 2
a15 2
CNO_SAVE
	PI=4.0D0*DATAN(1.0D0)
d19 11
a33 2
	NROWH=NROW/2
	NSAMH=NSAM/2
d35 2
a36 6
	DO  I=1,NSAMH+1
	DO  K=1,NROWH
	FABS(I,K)=0.
	FA(I,K)=(0.,0.)
	ENDDO
	ENDDO
d39 12
a50 8
  	CALL FILGET(FILPAT,FILNAM,NLET,NUMBER(IFIL),IRTFLG)
	IF(IRTFLG.NE.0) RETURN
	CALL OPENFB(BUF,FILNAM,LUN2,NSAM,NROW,'O',NF,NSLICE)
	IF(NF.NE.2)GO TO 970
	DO    I=1,NROW
	CALL  REDLIN(LUN2,CBUF(1,I),NSAM,I)
	ENDDO
	CLOSE(LUN2)
d54 8
a61 1
C	CALL  FFTR2_Q(CBUF,NSAM,NROW,INV)
d63 9
a71 19
        DO    I=1,NSAMH+1
	H=I-1
	DO    J=1,NROW
	K=J-1
	IF(K.GT.NROWH)  K=K-NROW
	FABS(I,J)=FABS(I,J)+CABS(CBUF(I,J))
	FA(I,J)=FA(I,J)+CBUF(I,J)
	IF(SKIP)  GOTO 280
	IF(H.NE.HREF.OR.K.NE.KREF)GOTO 280
	QSUM=QSUM+FA(I,J)
	SMOD=SMOD+CABS(FA(I,J))
	DLIST(1)=IFIL
	DLIST(2)=CABS(QSUM)/SMOD
    	CALL  SAVD(NDOUT,DLIST,NLIST,IRTFLG)
280	CONTINUE
	ENDDO
	ENDDO
	ENDDO

d73 2
a74 2
	CALL  SAVDC
	CLOSE(NDOUT)
d76 1
a76 1
C GENERATE FRIEDEL-RELATED PART OF Q AND WRITE OUT
d78 21
a98 22
	IF(J.LE.NROWH)  THEN
	KJ=J+NROWH
	ELSE
	KJ=J-NROWH
	ENDIF
	IF(J.EQ.1.OR.J.EQ.NROWH+1)  THEN
	MJ=J
	ELSEIF(J.LE.NROWH)  THEN
	MJ=NROW-J+2
	ELSE
	MJ=J-NROWH-1
	ENDIF
	DO  I=1,NSAMH
	IF(FABS(I,J).GT.1.0E-5)  THEN
	BUF(I+NSAMH)=CABS(FA(I,J))/FABS(I,J)
	BUF(NSAMH-I+1)=CABS(FA(I+1,MJ))/FABS(I+1,MJ)
	ELSE
	BUF(I+NSAMH)=0.0
	BUF(NSAMH-I+1)=0.0
	ENDIF
	ENDDO
	CALL  WRTLIN(LUNQ,BUF,NSAM,KJ)
d102 1
d104 3
a106 2
	DO    J=1,NROW
	CBUF(I,J)=FA(I,J)/NUMT
a107 1
	ENDDO
a109 1
C	CALL  FFTR2_Q(CBUF,NSAM,NROW,INV)
d111 1
a111 1
	CALL  WRTLIN(LUN1,CBUF(1,J),NSAM,J)
a113 4
	RETURN

970	CALL ERRT(2,'QFACT ',NE)

@


1.5
log
@R
@
text
@d43 2
a44 1
	CALL  FFTR2_Q(CBUF,NSAM,NROW,INV)
d102 2
a103 1
	CALL  FFTR2_Q(CBUF,NSAM,NROW,INV)
d110 2
a111 3
970	IER=2
	GO TO 990
990	CALL ERRT(IER,'QFACT ',NE)
@


1.4
log
@*** empty log message ***
@
text
@d35 1
a35 1
	CALL OPENFB(BUF,FILNAM,LUN2,NSAM,NROW,'R',NF,NSLICE)
@


1.3
log
@bug fixed
@
text
@d25 2
a26 2
	DO 5 I=1,NSAMH+1
	DO 5 K=1,NROWH
d28 3
a30 1
5	FA(I,K)=(0.,0.)
d32 1
a32 1
	DO 500 IFIL=1,NUMT
d37 3
a39 2
	DO  501  I=1,NROW
501	CALL  REDLIN(LUN2,CBUF(1,I),NSAM,I)
d45 1
a45 1
        DO  510  I=1,NSAMH+1
d47 1
a47 1
	DO  510  J=1,NROW
d60 3
a62 2
510	CONTINUE
500	CONTINUE
d69 1
a69 1
	DO 600 J=1,NROW
d82 1
a82 1
	DO 610 I=1,NSAMH
d90 3
a92 2
610	CONTINUE
600	CALL  WRTLIN(LUNQ,BUF,NSAM,KJ)
d95 5
a99 3
        DO  820  I=1,NSAMH+1
	DO  820  J=1,NROW
820	CBUF(I,J)=FA(I,J)/NUMT
d102 3
a104 2
	DO  830  J=1,NROW
830	CALL  WRTLIN(LUN1,CBUF(1,J),NSAM,J)
@


1.2
log
@corrected, but really ?
@
text
@d71 1
a71 1
	IF(J.EQ.1.OR.J.NROWH+1)  THEN
@


1.1
log
@Initial revision
@
text
@a3 1

d8 2
a9 2
        COMPLEX  FA(NROW,NSAM/2+1),CBUF(NSAM/2+1,NROW),QSUM
	DIMENSION   NUMBER(NUMT),FABS(NROW,NSAM/2+1),BUF(*)
a11 1

d13 1
a13 1

a21 1

a23 1

d27 2
a28 5
	FABS(K,I)=0.
5	FA(K,I)=(0.,0.)



d38 4
a41 3

	CALL  FFTR2_Q(CBUF,NSAM,NROW,1)

d44 1
a44 2
C	CALL  RDF_Q(LUN2,BUF,NSAM,CBUF,2*NROW,I)
	DO  520  J=1,NROW
d47 2
a48 3
	FABS(J,I)=FABS(J,I)+CABS(CBUF(I,J))
	FA(J,I)=FA(J,I)+CBUF(I,J)

d51 2
a52 2
	QSUM=QSUM+FA(J,I)
	SMOD=SMOD+CABS(FA(J,I))
a56 2

520	CONTINUE
d65 1
a65 2
	DO 600 I=1,NSAMH+1
	DO 610 J=1,NROW
d71 11
a81 2
	IF(FABS(J,I).GT.1.0E-5)  THEN
	BUF(KJ)=CABS(FA(J,I))/FABS(J,I)
d83 2
a84 1
	BUF(KJ)=0.0
d87 3
a89 16
	IF(I.LT.NSAMH+1)  THEN
	I1=I+NSAMH
	CALL  WRTLIN(LUNQ,BUF,NROW,I1)
	ENDIF
	IF(I.GT.1)  THEN
	DO  620  J=2,NROWH
	KJ=NROW-J+2
	TMP=BUF(J)
	BUF(J)=BUF(KJ)
620	BUF(KJ)=TMP
	I1=NSAMH-I+2
	CALL  WRTLIN(LUNQ,BUF,NROW,I1)
	ENDIF
600	CONTINUE
	CLOSE (UNIT=LUNQ)

d92 3
a94 2
820	CBUF(I,J)=FA(J,I)/NUMT
	CALL  FFTR2_Q(CBUF,NSAM,NROW,-1)
a96 1
C810	CALL  RDF_Q(LUN1,BUF,NSAM,FA(1,I),2*NROW,-I)
a101 1

a102 1
        RETURN
@
