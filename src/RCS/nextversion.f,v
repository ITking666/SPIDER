head	1.23;
access;
symbols
	healthdept_2018:1.23
	pre_getangas:1.18
	GPL2010:1.18
	pre_GPL2010:1.17
	pre_var_equation:1.17
	pre_fftwrings:1.16
	pre_opfiles:1.16
	src:1.16
	best-code:1.16
	x-named-regs:1.16
	x:1.16
	v13-00:1.16
	pre_GPL:1.15
	prec_CA:1.15
	noindx:1.15
	Bproc:1.10
	oct21:1.8
	last77:1.8;
locks; strict;
comment	@c @;


1.23
date	2018.10.03.14.34.11;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2016.02.09.15.45.13;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2016.01.29.14.55.07;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2016.01.28.16.03.53;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2014.08.29.13.55.31;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2010.06.24.13.26.21;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2009.02.11.18.11.43;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.17.21.04.29;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2001.01.05.21.05.41;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2000.12.20.16.43.21;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.10.24.18.37.34;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.10.18.19.56.20;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.10.16.17.53.55;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.08.31.19.49.55;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.11.10.23.09.42;	author yuchen;	state Exp;
branches;
next	1.8;

1.8
date	99.02.04.17.19.03;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	98.03.31.20.48.37;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	96.04.15.14.03.58;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	95.10.03.20.42.23;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	95.03.24.21.37.27;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	95.02.06.16.15.30;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.09.14.13.49.42;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.14.08.04;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.23
log
@email_health_dept
@
text
@ 
C++*********************************************************************
C
C NEXTVERSION.F                                                  3/2/94
C                       ADDED CXNUMB                AUG 00 ARDEAN LEITH
C                       NEXTRESULTS IN BIN DIR      FEB 09 ARDEAN LEITH
C                       OUTPUT FORMATTING           AUG 14 ARDEAN LEITH
C                       OUTPUT FORMATTING,DELETE    JAN 16 ARDEAN LEITH
C
C **********************************************************************
C *  AUTHOR: MAHIEDDINE LADJADJ                                            *
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2016  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   NEXTVERSION(FILIN,FILOUT,LUNT,CXNUMB)
C
C   PARAMETERS:     FILIN  FILE NAME FOR WHICH THE HIGHEST
C                           VERSION NUMBER HAS TO BE FOUND.      (SENT)
C                   FILOUT  FILE NAME WILL HAVE A VERSION
C                                   NUMBER APPENDED TO IT.)      (RET.)
C                   LUNT    READ UNIT                            (SENT)
C                   CXNUMB  VERSION NUMBER  FOR RES. FILE    (SENT/RET)                                (RET.)
C                                       
C       CALLS A SCRIPT CALLED Nextresults THAT WILL
C       DO A CHECK OF THE DIRECTORY FILES AND FIND THE NEXT VERSION
C       NUMBER FOR A FILE. Nextresults WILL WRITE THE NAME OF THE FILE
C       WITH THE CORRECT VERSION TO A FILE CALLED SPIDER_JUNK.TMP.
C       THIS ROUTINE READS SPIDER_JUNK.TMP AND DELETES IT.
C
C--*********************************************************************

        SUBROUTINE NEXTVERSION(FILIN,FILOUT,LUNT,CXNUMB,SAYIT)

        IMPLICIT NONE

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'
  
        CHARACTER (LEN=*)      :: FILIN, FILOUT
        INTEGER                :: LUNT
        CHARACTER (LEN=4)      :: CXNUMB
        LOGICAL                :: SAYIT

        CHARACTER (LEN=1)      :: NULL = CHAR(0)
        CHARACTER (LEN=280)    :: SCRIPT
        CHARACTER (LEN=9)      :: FIND_DIR = 'SPBIN_DIR'
	LOGICAL                :: EX
        CHARACTER (LEN=MAXNAM) :: DIR_NAME, FILNAM
        INTEGER                :: NCHAR,NLET,INUMB,IDUM,IRTFLG,NLEN
        INTEGER                :: IERR,ILOC
        
        INTEGER                :: lnblnkn


        FILOUT = FILIN
        NCHAR  = lnblnkn(FILOUT)

        IF (CXNUMB .NE. NULL) THEN
C          RESULTS EXTENSION SET BY CALLER
           NLET   = lnblnkn(CXNUMB)
           FILOUT = FILIN(1:NCHAR) // '.' // CXNUMB(1:NLET) // ' '
           IF (SAYIT) THEN
              NCHAR  = lnblnkn(FILOUT)
              WRITE(NOUT,97) FILOUT(1:NCHAR)
           ENDIF

           RETURN
        ENDIF
 


C       SET DEFAULT VALUE USING LAST 3 DIGITS OF SYSTEM CLOCK
        CALL SYSTEM_CLOCK(INUMB,IDUM,IDUM)
        INUMB                   = MOD(INUMB,1000)
        FILOUT(NCHAR+1:NCHAR+1) = '.' 
        CALL INTTOCHAR(INUMB,FILOUT(NCHAR+2:NCHAR+4),NLET,3)

#ifndef SP_IBMSP3
C       OMIT THIS FOR NOW ON PARALLEL ARCH. al Oct 00

        CALL MYGETENV(FIND_DIR,DIR_NAME,NLEN,
     &                'DIRECTORY_OF_BINARY_FILES', IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 999

	FILNAM = DIR_NAME(1:NLEN) // 'Nextresults'// NULL
	INQUIRE(FILE=FILNAM,EXIST=EX,IOSTAT=IERR)
        IF (IERR .NE. 0) GOTO 999

        IF (.NOT. EX) THEN
	  WRITE(NOUT,93) FILNAM
93	  FORMAT(//,'*** FILE NOT FOUND: ',A)
	  GOTO 999
        END IF
        
C       CALL THE SCRIPT Nextresults TO FIND THE NEXT VERSION NUMBER OF
C       FILE FILENAME.

        SCRIPT = '$' // FIND_DIR // '/Nextresults ' // FILIN //
     &               ' > SPIDER_JUNK.TMP' // NULL

        CALL system(SCRIPT)

C       READ THE FILE FILENAME.NBR' FOUND AND STORED IN SPIDER_JUNK.TMP
        OPEN(LUNT, FILE='SPIDER_JUNK.TMP',STATUS='OLD',IOSTAT=IERR)
        IF (IERR .NE. 0) THEN
           WRITE(NOUT,*) 
     &     '*** Could not open SPIDER_JUNK.TMP for results file version')
           GOTO 999
        ENDIF

        READ(LUNT,12,IOSTAT=IERR) FILOUT
12      FORMAT(A)
        IF (IERR .NE. 0) THEN
           WRITE(NOUT,*) 
     &     '*** Could not read SPIDER_JUNK.TMP for results file version')
           GOTO 999
        ENDIF

C       DELETE THE TEMP FILE.
        CLOSE(LUNT,STATUS='DELETE')

C       DELETE THE TEMP FILE.
cc      SCRIPT = 'rm -f SPIDER_JUNK.TMP' // NULL
cc      CALL system(SCRIPT)  NO LONGER NEEDED AFTER STATUS=DELETE

#endif

C       GET CXNUMB FROM FILOUT
999     ILOC  = INDEX(FILOUT,'.',.TRUE.)
        READ(FILOUT(ILOC+1:),80,IOSTAT=IERR) INUMB
80      FORMAT(I8)

        IF (IERR == 0) THEN
            CALL INTTOCHAR(INUMB,CXNUMB(1:3),NLET,3)
        ENDIF

        IF (SAYIT) THEN
           NCHAR  = lnblnkn(FILOUT)
           WRITE(NOUT,97) FILOUT(1:NCHAR)
        ENDIF
97      FORMAT('  Results file: ',A)

        END        

@


1.22
log
@startup msg flag
@
text
@d17 1
a17 1
C=* Email: spider@@wadsworth.org                                        *
@


1.21
log
@fortran delete of temp file,  output echo formatting
@
text
@d50 1
a50 1
        SUBROUTINE NEXTVERSION(FILIN,FILOUT,LUNT,CXNUMB)
d60 1
d80 4
a83 2
           NCHAR  = lnblnkn(FILOUT)
           WRITE(NOUT,97) FILOUT(1:NCHAR)
d155 4
a158 2
        NCHAR  = lnblnkn(FILOUT)
        WRITE(NOUT,97) FILOUT(1:NCHAR)
@


1.20
log
@filout(1:nchar) on output
@
text
@d8 1
d15 1
a15 1
C=* Copyright 1985-2014  Health Research Inc.,                         *
d52 2
d58 3
a61 1
        CHARACTER (LEN=4)      :: CXNUMB
d63 1
a63 1
        CHARACTER (LEN=9)      :: FIND_DIR
d66 4
a70 2
C	DATA FIND_DIR/'SPMAN_DIR'/
	DATA FIND_DIR/'SPBIN_DIR'/
d76 1
a76 1
C          EXTENSION SET BY CALLER
d78 4
a81 2
           FILOUT = FILIN(1:NCHAR) // '.' // CXNUMB(1:NLET)
           WRITE(NOUT,97) FILOUT
d85 2
a93 1
#ifndef SP_NT
a127 1
        CLOSE(LUNT)
d135 6
a140 3
        SCRIPT = 'rm -f SPIDER_JUNK.TMP' // NULL
        CALL system(SCRIPT)
#endif
@


1.19
log
@output formatting, ==, ::
@
text
@d140 2
a141 1
        WRITE(NOUT,97) FILOUT
@


1.18
log
@GPL_2010
@
text
@d6 3
a8 1
C                       Nextresults in bin dir      FEB 09 ARDEAN LEITH
d14 1
a14 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d35 1
a35 1
C                           VERSION NUMBER HAS TO BE FOUND.       (SENT)
d37 3
a39 3
C                                   NUMBER APPENDED TO IT.)       (RET.)
C                   LUNT    READ UNIT                             (SENT)
C                   CXNUMB  VERSION NUMBER  FOR RES. FILE     (SENT/RET)                                (RET.)
d54 5
a58 5
        CHARACTER*(*)  FILIN, FILOUT
        CHARACTER * 1  NULL
        CHARACTER * 4  CXNUMB
        CHARACTER*280  SCRIPT
        CHARACTER * 9  FIND_DIR
a64 2
	NULL = CHAR(0)

d70 1
a70 1
           NLET = lnblnkn(CXNUMB)
d78 1
a78 1
        INUMB  = MOD(INUMB,1000)
d135 2
a136 1
        IF (IERR .EQ. 0) THEN
d141 1
a141 1
97      FORMAT(/,' Results file: ',A)
a142 1
        RETURN
@


1.17
log
@moved Nextresults to bin
@
text
@a8 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d10 5
a14 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d16 1
a16 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.16
log
@GPL License fixed
@
text
@d5 2
a6 1
C                           ADDED CXNUMB AUG 00 ARDEAN LEITH
d10 1
a10 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d54 1
a59 1
        CHARACTER * 80 DIR_NAME, FILNAM
d61 2
a62 1
	LOGICAL        EX
d64 2
a65 1
	DATA FIND_DIR/'SPMAN_DIR'/
d90 2
a91 2
        CALL MYGETENV(FIND_DIR,DIR_NAME,NLEN,'DIRECTORY_OF_*.MAN_FILES',
     &                IRTFLG)
d107 1
a107 1
        SCRIPT = '$SPMAN_DIR/Nextresults ' // FILIN //
@


1.15
log
@added cpp code for SP_NT
@
text
@d2 1
a2 1
C++*************************************************************************
d6 1
a6 1
C **************************************************************************
d8 24
a31 7
C *  COPYRIGHT (C)1986 , WADSWORTH CENTER FOR LABORATORIES AND             *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
d48 1
a48 1
C--*************************************************************************
@


1.14
log
@" --> '
@
text
@d67 1
d112 1
@


1.13
log
@bad cxnumb return fixed
@
text
@d79 1
a79 1
93	  FORMAT(//,"*** FILE NOT FOUND: ",A)
@


1.12
log
@versioning now available on command line
@
text
@d63 2
a64 1
        CALL INTTOCHAR(INUMB,FILOUT(NCHAR+1:NCHAR+3),NLET,3)
d115 1
a115 1
        READ(FILOUT(ILOC+1:),80) INUMB
d117 3
a119 1
        CALL INTTOCHAR(INUMB,CXNUMB(1:3),NLET,3)
@


1.11
log
@removed some stuff on IBM_SP
@
text
@d5 1
a5 1
C                           ADDED CNUMB AUG 00 ARDEAN LEITH
d16 1
a16 1
C   NEXTVERSION(FILIN,FILOUT,LUNT,CNUMB)
d23 1
a23 1
C                   CNUMB   XNNN                                  (RET.)
d33 1
a33 1
        SUBROUTINE NEXTVERSION(FILIN,FILOUT,LUNT,CNUMB)
d39 1
a39 1
        CHARACTER * 4  CNUMB
d49 11
a62 3

        FILOUT = FILIN
        NCHAR  = lnblnkn(FILOUT)
d112 1
a112 1
C       GET CNUMB FROM FILOUT
d116 1
a116 2
        CALL INTTOCHAR(INUMB,CNUMB(2:4),NLET,3)
        CNUMB(1:1) = 'X'
@


1.10
log
@new batch temp (x.) name returned
@
text
@a1 1

d19 1
a19 1
C                           VERSION NUMBER HAS TO BE FOUND.       (sent)
d57 3
d90 1
a90 1
        READ(LUNT,12) FILOUT
d93 5
d102 1
@


1.9
log
@a
@
text
@d5 2
a6 2
C NEXTVERSION.F                                                 3/2/94
C
d17 1
a17 1
C   NEXTVERSION(FILENAME,UNIT10)
d19 6
a24 7
C   PARAMETERS:     FILIN (IN INPUT::
C                                   FILE NAME FOR WHICH THE HIGHEST
C                                   VERSION NUMBER HAS TO BE FOUND.
C                   FILOUT( IN OUTPUT:: 
C                                   THE FILE NAME WILL HAVE A VERSION
C                                   NUMBER APPENDED TO IT.)
C                   UNIT10   (READ UNIT FOR THE FILE)
d26 1
a26 2
C        
C       THIS ROUTINE WILL CALL A SCRIPT CALLED Nextresults THAT WILL
d28 1
a28 1
C       NUMBER FOR A FILE. NEXTVERSION WILL WRITE THE NAME OF THE FILE
d34 1
a34 3
        SUBROUTINE NEXTVERSION(FILIN,FILOUT,UNIT10)

 
d40 1
a40 1
        INTEGER        UNIT10
a47 4
        DO I = 1,80
           DIR_NAME(I:I)= '*'
        ENDDO

d50 11
a60 16
C       READ IN THE ENVIRONMENT VARIABLE 'SPMAN_DIR'.
        CALL GETENV(FIND_DIR,DIR_NAME)
        NLEN = lnblnk(DIR_NAME)
        IF (NLEN.EQ.0 .OR. NLEN .GT. 74) THEN
          WRITE(NOUT,*)' '
          WRITE(NOUT,*)' '
          WRITE(NOUT,*)'"MAN" DIRECTORY NOT FOUND. '
          WRITE(NOUT,*)'IN YOUR STARTUP FILE, DEFINE  DIRECTORY AS'
          WRITE(NOUT,*)'THE ENVIRONMENTAL VARIABLE SPMAN_DIR '
          WRITE(NOUT,*)'       E.G:   setenv SPMAN_DIR  " /MAN/ "'
          WRITE(NOUT,*)' WHERE "MAN" IS THE DIRECTORY WHERE  '
          WRITE(NOUT,*)'        THE HELP FILES.MAN ARE STORED '
          WRITE(NOUT,*)' '
          WRITE(NOUT,*)' PLEASE NOTE THE LAST / IN THE PATH   '
	  GOTO 999
        END IF
d63 7
a69 10
	INQUIRE(FILE=FILNAM,EXIST=EX,ERR=999)
        IF(EX) THEN
	  CONTINUE
	ELSE
          WRITE(NOUT,*)' '
          WRITE(NOUT,*)' '
	  WRITE(NOUT,93)FILNAM
93	  FORMAT("FILE NOT FOUND !  ",A)
	  FILOUT = FILIN
	  GOTO 96
d81 6
a86 1
        OPEN(UNIT10, FILE='SPIDER_JUNK.TMP',STATUS='OLD',ERR=98)
d88 1
a88 1
        READ(UNIT10,12) FILOUT
d90 1
a90 1
        CLOSE(UNIT10)
d96 8
a103 1
96      WRITE(NOUT,97) FILOUT
a104 1
        RETURN
a105 3
98      WRITE(NOUT,99)
99      FORMAT('*** Could not open SPIDER_JUNK.TMP in nextresults')

a106 5

C	NO NEXT VERSION POSSIBLE
999	FILOUT = FILIN
	GOTO 96

@


1.8
log
@CNO_SAVE
@
text
@d38 1
a38 1
CNO_SAVE 
@


1.7
log
@removed DIR_NAME initialization from data for f90 compiler
@
text
@d2 1
a2 15
#ifdef SP_VMS 
 
C   THIS ROUTINE SPECIFIC TO UNIX SPIDER AND IS NOT 
C       USED AT VAX SITES
 
       SUBROUTINE nextversion
 
       COMMON /UNITS/LUNC,NIN,NOUT
 
       WRITE(NOUT,*) 'DUMMY CALL: nextversion'
       RETURN
       END
 
#else
 
d38 2
a121 1
#endif
@


1.6
log
@changed comments
@
text
@a51 1

d61 1
d63 4
a66 1
        DATA (DIR_NAME(I:I), I=1,80)/80*' '/
@


1.5
log
@non f77 stuff replaced
@
text
@d42 1
a42 1
C       THIS ROUTINE WILL CALL A SCRIPT CALLED Nextversion THAT WILL
d97 1
a97 1
C       CALL THE SCRIPT Nextversion TO FIND THE NEXT VERSION NUMBER OF
@


1.4
log
@solve SPMAN_DIR not defined
@
text
@d57 1
a57 1
        INTEGER        UNIT10, NP
d71 10
a80 10
          TYPE*,' '
          TYPE*,' '
          TYPE*,'"MAN" DIRECTORY NOT FOUND. '
          TYPE*,'IN YOUR STARTUP FILE, DEFINE THE DIRECTORY AS'
          TYPE*,'THE ENVIRONMENTAL VARIABLE SPMAN_DIR '
          TYPE*,'       E.G:         setenv SPMAN_DIR  " /MAN/ "'
          TYPE*,' WHERE "MAN" IS THE DIRECTORY WHERE 		   '
          TYPE*,'        THE HELP FILES.MAN ARE STORED   '
          TYPE*,' '
          TYPE*,' PLEASE NOTE THE LAST / IN THE PATH		   '
d89 2
a90 2
          TYPE*,' '
          TYPE*,' '
d106 1
a106 1
        OPEN(UNIT10, NAME='SPIDER_JUNK.TMP',TYPE='OLD',ERR=98)
@


1.3
log
@filout over-ran its length
@
text
@d52 1
a52 1
#ifdef SP_UNIX
a53 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d55 42
a96 5
        CHARACTER*(*) FILIN,FILOUT
        INTEGER       UNIT10
        CHARACTER*280 SCRIPT


d101 1
a101 1
     &               ' > SPIDER_JUNK.TMP' // CHAR(0)
d113 1
a113 1
        SCRIPT = 'rm -f SPIDER_JUNK.TMP' // CHAR(0)
d116 1
a116 1
        WRITE(NOUT,97) FILOUT
d124 5
@


1.2
log
@output shifted one char to right
@
text
@d33 7
a39 7
C       PARAMETERS:     FILIN (IN INPUT::
C                                       FILE NAME FOR WHICH THE HIGHEST
C                                       VERSION NUMBER HAS TO BE FOUND.
C                       FILOUT( IN OUTPUT:: 
C                                       THE FILE NAME WILL HAVE A VERSION
C                                       NUMBER APPENDED TO IT.)
C                       UNIT19   (READ UNIT FOR THE FILE)
d82 1
a82 1
        WRITE(NOUT,97) FILOUT(1:40)
@


1.1
log
@cpp_lines_added
@
text
@a1 1
 
d83 1
a83 1
97      FORMAT(/,'Results file: ',A)
d91 1
a91 3
        
        
 
a92 1
 
@
