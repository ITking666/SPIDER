head	1.26;
access;
symbols
	healthdept_2018:1.26
	pre_getangas:1.25
	GPL2010:1.24
	pre_GPL2010:1.23
	pre_var_equation:1.23
	pre_fftwrings:1.22
	pre_opfiles:1.22
	src:1.22
	best-code:1.22
	x-named-regs:1.22
	x:1.22
	v13-00:1.22
	pre_GPL:1.20
	prec_CA:1.17
	noindx:1.16
	Bproc:1.14
	oct21:1.13
	last77:1.13;
locks; strict;
comment	@c @;


1.26
date	2018.10.03.14.34.06;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2011.01.25.14.37.59;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2010.06.24.13.25.44;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2008.07.23.17.20.47;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.17.20.05.50;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2005.10.17.18.00.51;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2004.11.19.18.30.15;	author cyang;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.11.01.59.17;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2003.10.30.20.18.59;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2003.02.18.20.49.01;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2000.12.05.14.02.50;	author bimal;	state Exp;
branches;
next	1.15;

1.15
date	2000.12.05.14.00.44;	author bimal;	state Exp;
branches;
next	1.14;

1.14
date	2000.04.24.20.31.39;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	99.03.26.14.42.40;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	99.03.19.15.04.47;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	99.03.18.22.12.46;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	98.04.06.19.00.28;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	97.11.06.15.16.17;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	97.08.28.16.32.18;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	96.09.11.19.14.50;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	96.08.27.19.05.51;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.08.27.15.57.19;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	96.08.27.14.58.37;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.04.04.15.22.44;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	96.04.04.15.16.55;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	96.03.05.14.00.44;	author leith;	state Exp;
branches;
next	;


desc
@from four1a
@


1.26
log
@email_health_dept
@
text
@C++*********************************************************************
C
C FOUR1C.F
C                                   OPFILEC          FEB 03 ARDEAN LEITH    
C                                   CLEANED          JUL 08 ARDEAN LEITH    
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  FOUR1C
C
C  PURPOSE:  FORWARD OR REVERSE FOURIER TRANSFORMS AN IMAGE OR VOLUME.
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE FOUR1C

        INCLUDE 'CMBLOCK.INC' 
        INCLUDE 'CMLIMIT.INC' 
        
        REAL, ALLOCATABLE, DIMENSION(:,:,:) :: QA

        CHARACTER(LEN=MAXNAM)               :: FILNAM

        DATA  LUN1,LUN2/21,22/

        MAXIM  = 0      ! NO BARE STACK SUPPORT
        MAXIM2 = 0      ! NO BARE STACK SUPPORT
        IRTFLG = 0

C       OPEN INPUT FILE.  CAN BE FOURIER OR NOT
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
     &             MAXIM,'INPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0)  RETURN

        INV = ISIGN(1,IFORM)                ! FORWARD OR REVERSE

        IF (IFORM.EQ.1)  THEN
C          NON-FOURIER IMAGE
           IF (MOD(NSAM,2) .EQ. 0)  THEN
              IFORM = -12
              LS    = NSAM+2
           ELSE
              IFORM = -11
              LS    = NSAM+1
           ENDIF
           
        ELSEIF (IFORM.EQ.3)  THEN
C          NON-FOURIER VOLUME
           IF (MOD(NSAM,2) .EQ. 0)  THEN
              IFORM = -22
              LS    = NSAM+2
           ELSE
              IFORM = -21
              LS    = NSAM+1
           ENDIF
           
        ELSEIF (IFORM .EQ. -11)  THEN
C          FOURIER IMAGE
           IFORM = 1
           LS    = NSAM-1
           
        ELSEIF (IFORM .EQ. -12)  THEN
C          FOURIER IMAGE
           IFORM = 1
           LS    =NSAM-2
           
        ELSEIF (IFORM .EQ. -21)  THEN
C          FOURIER VOLUME
           IFORM = 3
           LS    = NSAM-1
 
        ELSEIF (IFORM .EQ. -22)  THEN
C          FOURIER VOLUME
           IFORM = 3
           LS    = NSAM-2
                                               
        ELSE
C          UNKNOWN FORMAT
           CALL ERRT(2,'FT',NE)
           CLOSE(LUN1)
           RETURN
        ENDIF
        
        ISPACE = MAX(NSAM,LS)
        ISAM   = MIN(NSAM,LS)

        CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'N',IFORM,LS,NROW,NSLICE,
     &             MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CLOSE(LUN1)
           RETURN
        ENDIF

 	ALLOCATE (QA(ISPACE,NROW,NSLICE), STAT=IRTFLG)
 	
        IF (IRTFLG .EQ. 0) THEN
C          ADEQUATE MEMORY, READ INPUT ARRAY
           CALL READV(LUN1,QA,ISPACE,NROW,NSAM,NROW,NSLICE)
	   CLOSE(LUN1)

           IF (IFORM .EQ. 3 .OR. IFORM .LT. -20)  THEN
C             VOLUME
              CALL FMRS_3(QA,ISAM,NROW,NSLICE,INV)
           ELSE
C             UNAGE
              CALL FMRS_2(QA,ISAM,NROW,INV)
           ENDIF

           IF (INV .EQ. 0) THEN
              CALL ERRT(38,'FT',NE)
           ELSE
C             SAVE OUTPUT ARRAY                             
              CALL WRITEV(LUN2,QA,ISPACE,NROW,LS,NROW,NSLICE)	             
           ENDIF

        ELSE
C          INADEQUATE MEMORY
               
           NNNN = ISAM+2-MOD(ISAM,2)
           WRITE(NOUT,*)' WARNING: USING SLOW ON-DISK VERSION OF FFT.'

           IF (NSLICE .LE. 1)  THEN
C             2D FFT 
              NC   = 2
              LR   = ISPACE / NC
              CALL FMRS_2DR(LUN1,LUN2,LR,NNNN,ISAM,NROW,INV)
             
           ELSE
C             3D FFT  
              CALL FMRS_3DR(LUN1,LUN2,NNNN,ISAM,NROW,NSLICE,INV)      
           ENDIF
        ENDIF
        
9999    CLOSE(LUN2)
        IF (ALLOCATED(QA)) DEALLOCATE (QA) 
       
        END
@


1.25
log
@comments
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.24
log
@GPL_2010
@
text
@d42 1
a42 1
        CHARACTER(LEN=MAXNAM) :: FILNAM
d46 2
a47 2
        MAXIM  = 0
        MAXIM2 = 0
d50 1
d55 1
a55 1
        INV = ISIGN(1,IFORM)
d58 1
d68 1
d78 1
d83 1
d88 1
d93 1
d98 1
d117 1
a117 1
C          ADEQUATE MEMORY
d122 1
d125 1
d129 1
a129 1
           IF (INV .EQ. 0)THEN
d131 2
a132 1
           ELSE                             
@


1.23
log
@rewrite
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.22
log
@GPL License fixed
@
text
@d5 1
d8 1
a8 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d34 1
a34 1
C  PURPOSE:  FOURIER TRANSFORMS A 2-D OR 3-D IMAGE.
a35 3
C IMAGE_PROCESSING_ROUTINE
C
C        1         2         3         4         5         6         7
a42 1
        COMMON          BUUF(1) 
a46 6
        COMMON /COMMUN/ FILNAM

        REAL, DIMENSION(5) :: VALUES
 
        CHARACTER(LEN=1) :: NULL
        CHARACTER(LEN=2) :: CFORM
a49 1
        NULL   = CHAR(0)
d59 1
d61 3
a63 4
           IF (MOD(NSAM,2).EQ.0)  THEN
              CFORM(1:2)='E2'
              IFORM=-12
              LS=NSAM+2
d65 2
a66 3
              IFORM=-11
              CFORM(1:2)='O2'
              LS=NSAM+1
d70 3
a72 4
           IF (MOD(NSAM,2).EQ.0)  THEN
              CFORM(1:2)='E3'
              IFORM=-22
              LS=NSAM+2
d74 2
a75 3
              IFORM=-21
              CFORM(1:2)='O3'
              LS=NSAM+1
d78 3
a80 4
        ELSEIF (IFORM.EQ.-11)  THEN
           CFORM(1:2)='R2'
           IFORM=1
           LS=NSAM-1
d82 3
a84 4
        ELSEIF (IFORM.EQ.-12)  THEN
           CFORM(1:2)='R2'
           IFORM=1
           LS=NSAM-2
d86 3
a88 4
        ELSEIF (IFORM.EQ.-21)  THEN
           CFORM(1:2)='R3'
           IFORM=3
           LS=NSAM-1
d90 3
a92 4
        ELSEIF (IFORM.EQ.-22)  THEN
           CFORM(1:2)='R3'
           IFORM=3
           LS=NSAM-2
d100 2
a101 2
        ISPACE = MAX0(NSAM,LS)
        ISAM   = MIN0(NSAM,LS)
d112 1
a112 1
        IF (IRTFLG.EQ.0) THEN
a124 3
              CLOSE(LUN2)
              DEALLOCATE (QA)
              RETURN
d128 1
d130 1
d132 2
a133 2
          IF (NSLICE .LE. 1)  THEN
C            2D FFT ----------------------------------------
d135 10
a144 24
             NC=2
             LR=ISPACE/NC

             WRITE(NOUT,*)
     &           ' ** WARNING: SLOW ON-DISK VERSION OF FFT USED.'
             NNNN=ISAM+2-MOD(ISAM,2)
             CALL FMRS_2DR(LUN1,LUN2,LR,NNNN,ISAM,NROW,INV)             
          ELSE
C            3D FFT -----------------------------------------
C            FOR 3D BUFFER NEEDED IS FIXED
             LT1=ISPACE*MAX0(NROW,NSLICE)
             LT2=LT1+NROW*NSLICE
             IF(MOD(NSAM,2).EQ.0)  THEN
                LT3=LT2+NROW*NSLICE
             ELSE
                LT3=LT2
             ENDIF

             WRITE(NOUT,*)
     &           ' **  WARNING SLOW ON-DISK VERSION OF FFT USED!'
             NNNN=ISAM+2-MOD(ISAM,2)
             CALL FMRS_3DR(LUN1,LUN2,NNNN,ISAM,NROW,NSLICE,INV)      
  
          ENDIF
d147 3
a149 2
        CLOSE(LUN2)
        IF (ALLOCATED(QA)) DEALLOCATE (QA)        
@


1.21
log
@HRI GPL License used
@
text
@a5 2
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK        **
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK        *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND     *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.  *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR   *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR*
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                          *
@


1.20
log
@Removed MPI macros
@
text
@d6 1
d8 24
@


1.19
log
@irtflg=0
@
text
@a42 9
#ifdef USE_MPI
        include 'mpif.h'
        INTEGER  MYPID, COMM, IERR
        COMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(COMM, MYPID, IERR)
#else
        MYPID = -1
#endif

a103 68
#ifdef USE_MPI
C       CHECK THE FILENAME TO SEE IF THE OUTPUT IS INLINE
        CALL FILERD(FILNAM,NLETI,NULL,'OUTPUT',IRTFLG)
        IF (MYPID .EQ. 0 .OR. FILNAM(1:1) .EQ. '_') THEN
           CALL OPFILEC(LUN1,.FALSE.,FILNAM,LUN2,'N',IFORM,LS,NROW,
     &             NSLICE,MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0) THEN
              CLOSE(LUN1)
              RETURN
           ENDIF

    	   ALLOCATE (QA(ISPACE,NROW,NSLICE), STAT=IRTFLG)
 	
           IF (IRTFLG.EQ.0) THEN
C             ADEQUATE MEMORY
              CALL READV(LUN1,QA,ISPACE,NROW,NSAM,NROW,NSLICE)
	      CLOSE(LUN1)

              IF (IFORM .EQ. 3 .OR. IFORM .LT. -20)  THEN
                 CALL FMRS_3(QA,ISAM,NROW,NSLICE,INV)
              ELSE
                 CALL FMRS_2(QA,ISAM,NROW,INV)
              ENDIF

              IF (INV .EQ. 0)THEN
                 CALL ERRT(38,'FT',NE)
                 CLOSE(LUN2)
                 DEALLOCATE (QA)
                 RETURN
              ELSE                             
                 CALL WRITEV(LUN2,QA,ISPACE,NROW,LS,NROW,NSLICE)
              ENDIF
           ELSE
               
             IF (NSLICE .LE. 1)  THEN
C               2D FFT ----------------------------------------

                NC=2
                LR=ISPACE/NC

                WRITE(NOUT,*)
     &              ' ** WARNING: SLOW ON-DISK VERSION OF FFT USED.'
                NNNN=ISAM+2-MOD(ISAM,2)
                CALL FMRS_2DR(LUN1,LUN2,LR,NNNN,ISAM,NROW,INV)             
             ELSE
C               3D FFT -----------------------------------------
C               FOR 3D BUFFER NEEDED IS FIXED
                LT1=ISPACE*MAX0(NROW,NSLICE)
                LT2=LT1+NROW*NSLICE
                IF(MOD(NSAM,2).EQ.0)  THEN
                   LT3=LT2+NROW*NSLICE
                ELSE
                   LT3=LT2
                ENDIF

                WRITE(NOUT,*)
     &              ' **  WARNING SLOW ON-DISK VERSION OF FFT USED!'
                NNNN=ISAM+2-MOD(ISAM,2)
                CALL FMRS_3DR(LUN1,LUN2,NNNN,ISAM,NROW,NSLICE,INV)      
  
             ENDIF
           ENDIF
        
           CLOSE(LUN2)
           IF (ALLOCATED(QA)) DEALLOCATE (QA)        
        ENDIF
        CALL MPI_BCAST(IBCNT, 1, MPI_INTEGER, 0, COMM, IERR)
#else
a164 1
#endif
@


1.18
log
@mpi
@
text
@d55 1
@


1.17
log
@opfilec
@
text
@d43 9
d111 63
d175 5
d241 1
@


1.16
log
@include file path name
@
text
@d4 1
a4 1
C       
d28 1
d33 1
a33 1
        CHARACTER*81    FILNAM
d35 2
a36 1
        DIMENSION       VALUES(5)
d38 2
a39 2
        CHARACTER*1     NULL
        CHARACTER*2     CFORM
d44 10
a53 8
        CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &             IDUM,'INPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0)  THEN
           RETURN
        ENDIF
        INV=ISIGN(1,IFORM)
        IF(IFORM.EQ.1)  THEN
           IF(MOD(NSAM,2).EQ.0)  THEN
d63 2
a64 2
        ELSEIF(IFORM.EQ.3)  THEN
           IF(MOD(NSAM,2).EQ.0)  THEN
d74 1
a74 1
        ELSEIF(IFORM.EQ.-11)  THEN
d79 1
a79 1
        ELSEIF(IFORM.EQ.-12)  THEN
d84 1
a84 1
        ELSEIF(IFORM.EQ.-21)  THEN
d89 1
a89 1
        ELSEIF(IFORM.EQ.-22)  THEN
d103 3
a105 3
        CALL OPFIL(.TRUE.,FILNAM,LUN2,'N',LS,NROW,NSLICE,
     &             IDUM,'OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0)  THEN
a109 1

d113 1
a113 2

        
d122 1
a124 1
              CLOSE(LUN1)
d133 2
a134 5
           IF (NSLICE .LE. 1)  THEN
C             2D FFT ----------------------------------------

              NC=2
              LR=ISPACE/NC
d136 2
d139 1
a139 1
                 WRITE(NOUT,*)
d141 2
a142 2
                 NNNN=ISAM+2-MOD(ISAM,2)
                 CALL  FMRS_2DR(LUN1,LUN2,LR,NNNN,ISAM,NROW,INV)             
d144 14
a157 14
C           3D FFT -----------------------------------------
C           FOR 3D BUFFER NEEDED IS FIXED
            LT1=ISPACE*MAX0(NROW,NSLICE)
            LT2=LT1+NROW*NSLICE
            IF(MOD(NSAM,2).EQ.0)  THEN
               LT3=LT2+NROW*NSLICE
            ELSE
               LT3=LT2
            ENDIF

                WRITE(NOUT,*)
     &           ' **  WARNING !   SLOW ON-DISK VERSION OF FFT USED.'
                 NNNN=ISAM+2-MOD(ISAM,2)
                 CALL FMRS_3DR(LUN1,LUN2,NNNN,ISAM,NROW,NSLICE,INV)      
a161 24
        IF(INV.GT.0)  THEN
C*********************DEC 87 al
C       VALUE(1) SETS IANGLE
        VALUES(1) = 1.0      
        VALUES(2) = 0.0
        VALUES(3) = 0.0
               
C       NEGATIVE IRTFLG SUPRESSES PRINT-OUT
        IRTFLG    = -1       
C       SINCE SETPRM USES UNLABELED COMMON FOR BUF THIS SHOULD BE OK
        CALL SETLAB(LUN2,LS,BUUF,14,3,VALUES,CFORM,IRTFLG)
C       SET SCALE
        VALUES(1) = 0.0     
        IRTFLG    = -1 
        
    
        CALL SETLAB(LUN2,LS,BUUF,21,1,VALUES,'U',IRTFLG)
C       FILE NOT SEARCHED FOR MIN-MAX
        VALUES(1) = 0.0      
        IRTFLG    = -1
         
        CALL SETLAB(LUN2,LS,BUUF, 6,1,VALUES,'U',IRTFLG)
C********************************************
        ENDIF
d163 1
a163 1
        DEALLOCATE (QA)        
@


1.15
log
@adapted fpr dynamical memory allocation
@
text
@d27 1
a27 1
        INCLUDE '/net/bali/usr1/spider/src/CMBLOCK.INC' 
@


1.14
log
@SP_F90 removed
@
text
@d4 1
a4 1
C	
d15 1
a15 1
C  FOUR1C(MAXMEM)
d19 4
d25 1
a25 1
	SUBROUTINE FOUR1C(MAXMEM)
d27 4
a30 6
        INCLUDE 'CMBLOCK.INC' 
        COMMON          BUF(1)

        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: Q
d32 1
a32 2
        LOGICAL         RUNTIME
        CHARACTER*81	FILNAM
d34 4
a37 3
        DIMENSION	VALUES(5)
        CHARACTER*1	NULL
        CHARACTER*2	CFORM
d42 3
a44 4
	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &		   IDUM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0)  THEN
           CALL ERRT(4,'FT',NE)
d49 10
a58 10
                IF(MOD(NSAM,2).EQ.0)  THEN
                CFORM(1:2)='E2'
                IFORM=-12
                LS=NSAM+2
                ELSE
                IFORM=-11
                CFORM(1:2)='O2'
                LS=NSAM+1
                ENDIF
		MEMNEED=LS*NROW
d60 10
a69 10
                IF(MOD(NSAM,2).EQ.0)  THEN
                CFORM(1:2)='E3'
                IFORM=-22
                LS=NSAM+2
                ELSE
                IFORM=-21
                CFORM(1:2)='O3'
                LS=NSAM+1
                ENDIF
		MEMNEED=LS*NROW*NSLICE
d71 4
a74 4
                CFORM(1:2)='R2'
		IFORM=1
                LS=NSAM-1
		MEMNEED=NSAM*NROW
d76 4
a79 4
                CFORM(1:2)='R2'
		IFORM=1
                LS=NSAM-2
		MEMNEED=NSAM*NROW
d81 4
a84 4
                CFORM(1:2)='R3'
		IFORM=3
                LS=NSAM-1
		MEMNEED=NSAM*NROW*NSLICE
d86 4
a89 4
                CFORM(1:2)='R3'
		IFORM=3
                LS=NSAM-2
		MEMNEED=NSAM*NROW*NSLICE
d91 3
a93 3
                CALL ERRT(2,'FT',NE)
		CLOSE(LUN1)
                RETURN
d95 8
a102 7
	ISPACE = MAX0(NSAM,LS)
	ISAM   = MIN0(NSAM,LS)
	CALL OPFIL(.TRUE.,FILNAM,LUN2,'N',LS,NROW,NSLICE,
     &		   IDUM,'OUTPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0)  THEN
           CALL ERRT(4,'FT',NE)
	   CLOSE(LUN1)
d105 6
d112 21
a132 59
C       DO NOT STOP IN ALLOCATION FAILS
        IRTFLG = -9
	CALL CHKMEM(MEMNEED,BUF,MAXMEM,RUNTIME,IPQ,IRTFLG)
        IF (IRTFLG .EQ. 0)  THEN

         Q = >IPQ

	  IB=1
	  DO  K=1,NSLICE
	     DO  J=1,NROW
	        NR=J+(K-1)*NROW
	        CALL  REDLIN(LUN1,Q(IB),NSAM,NR)
    	        IB=IB+ISPACE
             ENDDO
          ENDDO

	  CLOSE(LUN1)
	  IF (IFORM .EQ. 3 .OR. IFORM .LT. -20)  THEN
	    CALL FMRS_3(Q(1),ISAM,NROW,NSLICE,INV)
	  ELSE
	    CALL FMRS_2(Q(1),ISAM,NROW,INV)
	  ENDIF
          IF (INV .EQ. 0)THEN
             CALL ERRT(38,'FT',NE)
	     CLOSE(LUN1)
             CLOSE(LUN2)
             RETURN
          ELSE
	     IB=1
	     DO  K=1,NSLICE
	        DO  J=1,NROW
	           NR = J+(K-1)*NROW
	           CALL  WRTLIN(LUN2,Q(IB),LS,NR)
	           IB = IB+ISPACE
                ENDDO
             ENDDO
	  ENDIF
	ELSE
C         ESTIMATE MEMORY FOR ON-DISK VERSION
	  IF (NSLICE .LE. 1)  THEN
C            2D FFT ----------------------------------------

	     NC=2
55	     LR=ISPACE/NC
	     IF (MOD(ISPACE,NC) .NE. 0)  LR=LR+1
             LR=LR/2
             LR=LR*2
             IF (LR.LT.2.OR.(INV.LT.0 .AND. LR.LT.4))  THEN
	        CALL  ERRT(6,'FT',NE)
	        CLOSE(LUN1)
	        CLOSE(LUN2)
	        RETURN
	     ENDIF
	     MEMNEED=ISPACE+LR*NROW
	     IRTFLG=-9
	     CALL CHKMEM(MEMNEED,BUF,MAXMEM,RUNTIME,IPQ,IRTFLG)
	     IF (IRTFLG.NE.0)  THEN
	        NC = NC+1
	        GOTO  55
d134 2
a135 1
	    ELSE
a136 1
                Q = >IPQ
d138 1
a138 1
        	WRITE(NOUT,*)
d140 3
a142 3
        	CALL  FMRS_2D(LUN1,LUN2,Q(1),ISAM,NROW,LR,INV)
            ENDIF
	  ELSE
d145 8
a152 10
	    LT1=ISPACE*MAX0(NROW,NSLICE)
	    LT2=LT1+NROW*NSLICE
	    IF(MOD(NSAM,2).EQ.0)  THEN
	       LT3=LT2+NROW*NSLICE
	    ELSE
	       LT3=LT2
	    ENDIF
	    MEMNEED=LT3+MAX0(NSAM,2*NROW)
	    CALL CHKMEM(MEMNEED,BUF,MAXMEM,RUNTIME,IPQ,IRTFLG)
            IF (IRTFLG .EQ. 0)  THEN
d155 7
a161 11
	         CALL FMRS_3D(LUN1,LUN2,Q(1),ISAM,NROW,NSLICE,INV)	
	    ELSE
           	CALL ERRT(6,'FT',NE)
		CLOSE(LUN1)
		CLOSE(LUN2)
		RETURN
	    ENDIF
	  ENDIF
	ENDIF
C
	IF(INV.GT.0)  THEN
d167 1
d171 1
a171 1
        CALL SETLAB(LUN2,LS,BUF,14,3,VALUES,CFORM,IRTFLG)
d174 4
a177 2
        IRTFLG    = -1       
        CALL SETLAB(LUN2,LS,BUF,21,1,VALUES,'U',IRTFLG)
d180 3
a182 2
        IRTFLG    = -1      
        CALL SETLAB(LUN2,LS,BUF, 6,1,VALUES,'U',IRTFLG)
d184 1
a184 1
	ENDIF
d186 2
a187 2
        IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'FT',IRTFLG)
	END
@


1.13
log
@*** empty log message ***
@
text
@d3 1
a3 1
C     FOUR1C.FOR
d25 1
a25 1
#ifdef SP_F90
d29 1
a29 4
#else
        DIMENSION       Q(1)
        POINTER         (IPQ,Q) 
#endif
d36 1
a36 1
C
d38 1
a38 1
C
d108 1
a108 1
#ifdef SP_F90
d110 1
a110 1
#endif
d145 1
a145 1
C#ifdef was sp_alloc
d163 1
a163 12
C#else		
CC           LR - CHUNK LENGTH IN NSAM DIRECTION, HAS TO BE EVEN
C	    LR =(MAXMEM-ISPACE)/NROW
C	    LR =LR/2
C	    LR =LR*2
C	    IF (LR.LT.2 .OR. (INV.LT.0 .AND. LR.LT.4)
C     &		 .OR.  (MAXMEM-ISPACE.LT.NSAM)) THEN
C	        CALL  ERRT(6,'FT',NE)
C		CLOSE(LUN1)
C	        CLOSE(LUN2)
C	        RETURN
C#endif
d165 3
a167 3
#ifdef SP_F90
         Q = >IPQ
#endif
@


1.12
log
@*** empty log message ***
@
text
@d125 1
a125 1
	    CALL FMRS_3(Q,ISAM,NROW,NSLICE,INV)
d127 1
a127 1
	    CALL FMRS_2(Q,ISAM,NROW,INV)
d184 1
a184 1
        	CALL  FMRS_2D(LUN1,LUN2,Q,ISAM,NROW,LR,INV)
d201 1
a201 1
	         CALL FMRS_3D(LUN1,LUN2,Q,ISAM,NROW,NSLICE,INV)	
@


1.11
log
@*** empty log message ***
@
text
@d148 1
a148 1
#ifdef SP_ALLOC
d166 12
a177 12
#else		
C           LR - CHUNK LENGTH IN NSAM DIRECTION, HAS TO BE EVEN
	    LR =(MAXMEM-ISPACE)/NROW
	    LR =LR/2
	    LR =LR*2
	    IF (LR.LT.2 .OR. (INV.LT.0 .AND. LR.LT.4)
     &		 .OR.  (MAXMEM-ISPACE.LT.NSAM)) THEN
	        CALL  ERRT(6,'FT',NE)
		CLOSE(LUN1)
	        CLOSE(LUN2)
	        RETURN
#endif
@


1.10
log
@f90 alloc
@
text
@d39 1
a39 1

d41 1
a41 2
CNO_SAVE 

d151 1
a151 1
	     IF (MOD(ISPACE,K) .NE. 0)  LR=LR+1
a232 2

        RETURN
@


1.9
log
@R removed
@
text
@d25 5
d32 1
d112 3
d180 3
@


1.8
log
@cosmetic, added irtflg = 9 before first chkmem
@
text
@d38 1
a38 1
	CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM,NROW,NSLICE,
@


1.7
log
@filnam length corrected
@
text
@d15 1
a15 2
C       'FT' : FOURIER  TRANSFORMS
C	FOURIER TRANSFORMS A 2-D OR 3-D IMAGE.
d17 2
d20 1
a20 1
C
d22 1
d24 4
a27 4
        COMMON       BUF(1)
        DIMENSION    Q(1)
        POINTER      (IPQ,Q) 
        LOGICAL      RUNTIME
d33 1
d36 1
d92 3
a94 3
	  ISPACE=MAX0(NSAM,LS)
	  ISAM=MIN0(NSAM,LS)
	  CALL OPFIL(.TRUE.,FILNAM,LUN2,'N',LS,NROW,NSLICE,
d96 8
a103 5
	  IF (IRTFLG .NE. 0)  THEN
            CALL ERRT(4,'FT',NE)
	    CLOSE(LUN1)
            RETURN
          ENDIF
d105 1
a105 1
        IF(IRTFLG.EQ.0)  THEN
d107 8
a114 5
	  DO  1  K=1,NSLICE
	  DO  1  J=1,NROW
	  NR=J+(K-1)*NROW
	  CALL  REDLIN(LUN1,Q(IB),NSAM,NR)
1	  IB=IB+ISPACE
d116 2
a117 2
	  IF(IFORM.EQ.3 .OR. IFORM.LT.-20)  THEN
	    CALL  FMRS_3(Q,ISAM,NROW,NSLICE,INV)
d119 1
a119 1
	    CALL  FMRS_2(Q,ISAM,NROW,INV)
d121 5
a125 5
          IF(INV.EQ.0)THEN
          CALL ERRT(38,'FT',NE)
	  CLOSE(LUN1)
          CLOSE(LUN2)
          RETURN
d127 8
a134 6
	  IB=1
	  DO  2  K=1,NSLICE
	  DO  2  J=1,NROW
	  NR=J+(K-1)*NROW
	  CALL  WRTLIN(LUN2,Q(IB),LS,NR)
2	  IB=IB+ISPACE
d137 3
a139 3
C ESTIMATE MEMORY FOR ON-DISK VERSION
	  IF(NSLICE.LE.1)  THEN
C  2D FFT
d141 17
a157 17
	        NC=2
55	        LR=ISPACE/NC
	        IF(MOD(ISPACE,K).NE.0)  LR=LR+1
		LR=LR/2
		LR=LR*2
		IF(LR.LT.2.OR.(INV.LT.0 .AND. LR.LT.4))  THEN
		  CALL  ERRT(6,'FT',NE)
		  CLOSE(LUN1)
		  CLOSE(LUN2)
		  RETURN
		ENDIF
		MEMNEED=ISPACE+LR*NROW
	IRTFLG=-9
	CALL CHKMEM(MEMNEED,BUF,MAXMEM,RUNTIME,IPQ,IRTFLG)
		IF(IRTFLG.NE.0)  THEN
		  NC=NC+1
		  GOTO  55
d159 5
a163 5
C LR - chunk length in NSAM direction, has to be even
	        LR=(MAXMEM-ISPACE)/NROW
	        LR=LR/2
	        LR=LR*2
		IF(LR.LT.2   .OR.   (INV.LT.0 .AND. LR.LT.4)
d165 4
a168 4
		  CALL  ERRT(6,'FT',NE)
		  CLOSE(LUN1)
		  CLOSE(LUN2)
		  RETURN
d170 1
a170 1
	        ELSE
d172 1
a172 1
     &           ' **  WARNING !   SLOW ON-DISK VERSION OF FFT USED.'
d174 1
a174 1
		ENDIF
d176 2
a177 2
C  3D FFT
C  FOR 3D BUFFER NEEDED IS FIXED
d181 1
a181 1
	      LT3=LT2+NROW*NSLICE
d183 1
a183 1
	      LT3=LT2
d186 3
a188 3
	CALL CHKMEM(MEMNEED,BUF,MAXMEM,RUNTIME,IPQ,IRTFLG)
        IF(IRTFLG.EQ.0)  THEN
             WRITE(NOUT,*)
d190 1
a190 1
	      CALL FMRS_3D(LUN1,LUN2,Q,ISAM,NROW,NSLICE,INV)	
d221 3
a223 1
        IF(RUNTIME)     CALL ALLOCIT(0,RUNTIME,IPQ,'FT',IRTFLG)
@


1.6
log
@malloc
@
text
@d26 1
a26 1
        CHARACTER*8	FILNAM
@


1.5
log
@new version
@
text
@a23 1
#ifdef SP_ALLOC
a25 3
#else
        EQUIVALENCE	(Q,BUF)
#endif
d97 2
a98 11
#ifdef SP_ALLOC
c  probably wrong !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 	IF(MEMNEED.LT.MAXMEM)  THEN
	RUNTIME=.TRUE.
	ELSE
        CALL ALLOCIT(MEMNEED,RUNTIME,IPQ,'FT',IRTFLG)
	ENDIF
	IF(RUNTIME)  THEN
#else		
 	IF(MEMNEED.LT.MAXMEM)  THEN
#endif
d141 3
a143 2
	        CALL ALLOCIT(MEMNEED,RUNTIME,IPQ,'FT',IRTFLG)
		IF(.NOT.RUNTIME)  THEN
d174 2
a175 10
#ifdef SP_ALLOC
 	    IF(MEMNEED.LT.MAXMEM)  THEN
	      RUNTIME=.TRUE.
	    ELSE
              CALL ALLOCIT(MEMNEED,RUNTIME,IPQ,'FT',IRTFLG)
	    ENDIF
	    IF(RUNTIME)  THEN
#else		
 	    IF(MEMNEED.LT.MAXMEM)  THEN
#endif
d209 2
a210 1
        END
@


1.4
log
@IFORM removed
@
text
@a3 2
C
C     THIS FILE WAS CREATED BY THE BREAKUP OF FOUR1.F  ml 10/23/95
d19 1
a19 1

a20 3

	INTEGER MAXMEM

d22 9
a30 5
CNO_SAVE		

        COMMON ADUM(80),BUF(1)

        CHARACTER *81 FILNAM
d32 5
a36 10

        DIMENSION     Q(1)
        EQUIVALENCE   (Q,BUF)
        DIMENSION     VALUES(5)
        DIMENSION     MA(3)
        CHARACTER *1  NULL
        CHARACTER *2  CFORM

        DATA  LUN1,LUN2,LUNF,LUN3/7,10,8,9/

d38 4
a41 8
        IC     = 13
        NSLICE = 1
        INFLUN = 2
        IFOUND = 1
        NE     = 0
	
        IF (FCHAR(4:5) .EQ. 'MR') THEN
           CALL  FTMR(MAXMEM)
a42 16
        END IF


	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &		   IDUM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 999
        IF ( IFORM .NE. 1  .AND. IFORM .NE. 3 .AND. 
     &       IFORM .NE. -1 .AND. IFORM .NE. -7 )  GOTO 145
        INV   = ISIGN(1,IFORM)
        MA(1) = LOG2(NSAM)
        MA(2) = LOG2(NROW)
        IF (NSLICE.GT.1)  THEN
           MA(3) = LOG2(NSLICE)
        ELSE
           NSLICE = 1
           MA(3)  = 0
d44 43
a86 6

        M  = MA(1)+MA(2)+MA(3)
        IB = MA(1)
        IF (M .LT. IC)  IC = M
        IF (NSLICE .GT. 1)  THEN
           NDIM = 3
d88 3
a90 1
           NDIM = 2
d92 8
a99 7

C       NEW FOURIER TRANSFORM
        IF (NSLICE.LE.1)  THEN
          IF (INV.GT.0)  THEN
             CFORM(1:2) = 'F2'
          ELSE
             CFORM(1:2) = 'R2'
d101 28
a128 18
          IF ((NSAM+3)*NROW.GT.MAXMEM)  THEN
            IF (INV.GT.0)  THEN
               IT  = 1
               FN  = 1.0
               LUN = LUN1
            ELSE

C              TRANSPOSE DIMENSIONS
               MT       = MA(NDIM)
               MA(NDIM) = MA(1)
               MA(1)    = MT
               LUN      = LUN1
               IT       = -1
               FN       = 1.0 / (2.**M)
            ENDIF
            WRITE(NOUT,*)
     &         ' **  WARNING !   SLOW ON-DISK VERSION OF FFT USED.'
            CALL RFFT(FN,BUF,IB,IC,MA,NDIM,IT,0)
d130 67
a196 28
            IF (INV .GT. 0)  THEN
              DO I= 1, NROW
                 CALL  REDLIN(LUN1,Q(1+(I-1)*(NSAM+2)),NSAM,I)
              END DO
              CALL FFTR2_Q(Q,NSAM,NROW,1)
              CALL FFTCOP(LUN1,Q,NSAM/2+1,NROW,Q(1+(NSAM+2)*NROW),1)
            ELSE
              CALL FFTCOP(LUN1,Q,NSAM/2+1,NROW,Q(1+(NSAM+2)*NROW),-1)
              CALL FFTR2_Q(Q,NSAM,NROW,-1)
              DO  I = 1,NROW
                 CALL WRTLIN(LUN1,Q(1+(I-1)*(NSAM+2)),NSAM,I)
              END DO
            ENDIF
          ENDIF
        ELSE
          IF (INV.GT.0)  THEN
             CFORM(1:2) = 'Q3'
          ELSE
             CFORM(1:2) = 'R3'
          ENDIF
          IF (NSAM*NROW*NSLICE+MAX0(NSAM,2*NROW,2*NSLICE)
     &                                    .GT.MAXMEM)  THEN
            K = NSAM*MAX0(NROW,NSLICE)+2*NROW*NSLICE
            IF (K .GT. MAXMEM)  THEN
               CALL ERRT(6,'FOUR1 ',NE)
               GOTO 999
            ELSE
               WRITE(NOUT,*)
d198 12
a209 74
               KK=K-2*NROW*NSLICE+1
               KK1=KK+NROW*NSLICE
               KK2=KK1+NROW*NSLICE
               CALL  F3MD(LUN1,Q,Q,Q(KK),Q(KK1),Q(KK2),
     &                     NSAM,NROW,NSLICE,INV)

               IF (INV.EQ.0)THEN
                  CALL ERRT(38,'FT ',NE)
                  GO TO 999
               ENDIF
            ENDIF
          ELSE
            IF (INV .GT. 0)  THEN
              DO   J = 1, NSLICE
                DO  I = 1, NROW
                   L = (J-1)*NROW+I
                   CALL REDLIN(LUN1,Q(1+((I-1)+(J-1)
     &                         *NROW)*NSAM),NSAM,L)
                END DO
              END DO

              KK5=1
              KK6=KK5+NSAM*NROW*NSLICE
              CALL  F3MR(Q(KK5),NSAM,NROW,NSLICE,INV,Q(KK6))

              IF (INV .EQ. 0)THEN
                 CALL ERRT(38,'FT ',NE)
                 GO TO 999
              ENDIF

              DO   J = 1, NSLICE
                DO  I = 1, NROW
                   L = (J - 1)*NROW + I
                   CALL WRTLIN( LUN1,
     &                         Q(1 + ((I - 1) + (J - 1)*NROW)*NSAM),
     &                         NSAM,L)
                ENDDO
              ENDDO
            ELSE

C             INVERSE 3-D IN CORE
              DO  J = 1, NSLICE
                DO   I = 1, NROW
                   L = (J - 1)*NROW + I
                   CALL REDLIN(LUN1,
     &                        Q( 1 + ((I - 1) + (J - 1)*NROW)*NSAM),
     &                        NSAM,L)
                ENDDO
              ENDDO
 
              KK5 = 1
              KK6 = KK5+NSAM*NROW*NSLICE
              CALL F3MR(Q(KK5),NSAM,NROW,NSLICE,INV,Q(KK6))
 
              IF (INV.EQ.0)THEN
                 CALL ERRT(38,'FT ',NE)
                 GO TO 999
              ENDIF
 
              DO  J = 1, NSLICE
                DO  I = 1, NROW
                   L = (J - 1)*NROW + I
                   CALL WRTLIN(LUN1,
     &                        Q( 1 + ((I - 1) + (J - 1)*NROW)*NSAM),
     &                        NSAM,L)
                 ENDDO
              ENDDO
            ENDIF
          ENDIF
        ENDIF
        SIG   = -1.
        IHIST = 0
        LUNN  = LUN1

d211 1
a211 1
        VALUES(1) = 1.0
a213 1

d215 1
a215 2
        IRTFLG    = -1

d217 1
a217 2
        CALL SETLAB(LUNN,NSAM,BUF,14,3,VALUES,CFORM,IRTFLG)

d219 3
a221 4
        VALUES(1) = 0.0
        IRTFLG    = -1
        CALL SETLAB(LUNN,NSAM,BUF,21,1,VALUES,'U',IRTFLG)

d223 5
a227 9
        VALUES(1) = 0.0
        IRTFLG    = -1
        CALL SETLAB(LUNN,NSAM,BUF, 6,1,VALUES,'U',IRTFLG)
        GOTO 999

145     CALL ERRT(2,'FOUR1 ',NE)
        GOTO 999

999     CLOSE(LUN1)
a228 2

        RETURN
a229 1
	
@


1.3
log
@error 38
@
text
@d57 1
a57 1
     &		   IFORM,'INPUT',.TRUE.,IRTFLG)
@


1.2
log
@error 38
@
text
@d142 1
a142 1
                  CALL ERRT(1,'F3MD ',NE)
@


1.1
log
@Initial revision
@
text
@d161 1
a161 1
                 CALL ERRT(1,'F3MR ',NE)
d190 1
a190 1
                 CALL ERRT(1,'F3MR ',NE)
@
