head	1.5;
access;
symbols
	pre_mrcs:1.5
	healthdept_2018:1.5
	pre_getangas:1.4
	pre_GPL2010:1.4
	pre_var_equation:1.4
	pre_fftwrings:1.4
	pre_opfiles:1.4
	src:1.4
	best-code:1.4
	x-named-regs:1.4
	x:1.4
	v13-00:1.4
	pre_GPL:1.3
	prec_CA:1.2
	noindx:1.2;
locks; strict;
comment	@c @;


1.5
date	2011.05.27.14.30.02;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.17.16.55.33;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.17.22.04.29;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.22.16.06.25;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.10.18.47.32;	author pawel;	state Exp;
branches;
next	;


desc
@@


1.5
log
@?
@
text
@C **********************************************************************
C *  GETDEFOCUS.F
C=**********************************************************************
C=* From: SPIDER - MODULAR IMAGE PROCESSING SYSTEM                     *
C=* Copyright (C)2002, L. Joyeux & P. A. Penczek                       *
C=*                                                                    *
C=* University of Texas - Houston Medical School                       *
C=*                                                                    *
C=* Email:  pawel.a.penczek@@uth.tmc.edu                                *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* This program is distributed in the hope that it will be useful,    *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
C=**********************************************************************
C **********************************************************************

C   value2(number) : input power spectrum
C  ps (pixel size), cs (constant aberration)
C  contrast (amplitude contrast ration)
C  env(number) : input, contain envelope function squared
C  dzlow1, dzhigh1 : interval search
C  start : value(start:number) are only used

      FUNCTION GETDEFOCUS(VALUE2, X,NUMBER, PS, CS, 
     &                LAMBDA, CONTRAST, XSCORE,ENV, ISTART,ISTOP,ISWI)

CC==X is X coordinates!	  
      	IMPLICIT NONE
      	INCLUDE 'CMBLOCK.INC'
      	INCLUDE 'F90ALLOC.INC'

      	INTEGER   NUMBER,NMB
      	REAL       VALUE(NUMBER), ENV(NUMBER), VALUE2(NUMBER),X(NUMBER)
      	REAL      PS, CS, LAMBDA, CONTRAST, DZLOW1, DZHIGH1, DZINC, DZ
     	 REAL      DZLOW, DZHIGH,XXX,XSCORE
      	REAL      GETDEFOCUS
	COMMON /SEARCH_RANGE/ DZLOW1,DZHIGH1,NMB
      	INTEGER          I, J, L, ISTART,ISTOP,ISWI
      	DOUBLE PRECISION SUMA, SUMB, DIFF, DIFFMIN, DZMIN      

      	DZLOW  = DZLOW1 
     	DZHIGH = DZHIGH1
      	DZINC  = (DZHIGH-DZLOW)/10.0 
      	IF (DZINC>1000.0) DZINC = 1000.0
	IF (ISWI.EQ.0) THEN
		DIFFMIN=HUGE(DIFFMIN)
        ELSE
 		DIFFMIN=-HUGE(DIFFMIN)
        ENDIF

        DO
           DO DZ = DZLOW, DZHIGH, DZINC
              CALL CTF_SIGNAL1(VALUE,X,NUMBER, PS, CS, 
     &                      LAMBDA, DZ, CONTRAST)

              IF (ISWI.EQ.0) THEN
                  DO L = ISTART, ISTOP
                     DIFF=DIFF+(VALUE(L)*DBLE(VALUE(L))*ENV(L)-
CCC=CHECK ENVELOPE EFFECT
C		DIFF=DIFF+(VALUE(L)*DBLE(VALUE(L))-
     &                    DBLE(VALUE2(L)))**2
                  ENDDO
                  IF (DIFF<DIFFMIN .OR. DZ .EQ. DZLOW) THEN
                     GETDEFOCUS = DZ
                     DIFFMIN = DIFF
                  END IF
               ELSE 
                  VALUE(ISTART:ISTOP) = VALUE(ISTART:ISTOP)**2
     &				*ENV(ISTART:ISTOP)
                  DIFF = 0.0
                  SUMA = 0.0
                  SUMB = 0.0
                  DO L = ISTART, ISTOP
                     DIFF = DIFF + VALUE(L)*DBLE(VALUE2(L))
                     SUMA = SUMA + VALUE(L)*DBLE(VALUE(L))
                     SUMB = SUMB + VALUE2(L)*DBLE(VALUE2(L))
                  END DO
                  CLOSE(79)
                  DIFF = DIFF  / (DSQRT(SUMA*SUMB)*(ISTOP-ISTART+1))
                  IF(DIFF>DIFFMIN .OR. DZ .EQ. DZLOW) THEN
                     GETDEFOCUS = DZ
                     DIFFMIN = DIFF
                     XSCORE=DIFFMIN
                  ENDIF
               ENDIF
            ENDDO
            DZLOW = GETDEFOCUS -DZINC*2
            IF(DZLOW<0.0) DZLOW = 0.0
            DZHIGH = GETDEFOCUS +DZINC*2
            DZINC = DZINC / 10.0
            IF(DZINC<1.0) RETURN
	ENDDO

      	END
@


1.4
log
@Pawels GPL License used
@
text
@a28 1
CCCCCCCCCCCCCCCCCCCCCC
d35 1
d37 2
a38 1
     F                LAMBDA, CONTRAST, XSCORE,ENV, ISTART,ISTOP,ISWI)
d43 1
d50 4
a53 3
      	INTEGER   I, J, L, ISTART,ISTOP,ISWI
      	DOUBLE PRECISION      SUMA, SUMB, DIFF, DIFFMIN, DZMIN      
      	DZLOW = DZLOW1 
d55 3
a57 3
      	DZINC = (DZHIGH-DZLOW)/10.0 
      	IF(DZINC>1000.0) DZINC = 1000.0
	IF(ISWI.EQ.0) THEN
d62 9
a70 7
      	DO
         	DO DZ = DZLOW, DZHIGH, DZINC
            		CALL CTF_SIGNAL1(VALUE,X,NUMBER, PS, CS, 
     F                	LAMBDA, DZ, CONTRAST)
         		IF(ISWI.EQ.0) THEN
             			DO L = ISTART, ISTOP
               				DIFF=DIFF+(VALUE(L)*DBLE(VALUE(L))*ENV(L)-
d73 8
a80 8
     &         				DBLE(VALUE2(L)))**2
             			ENDDO
            				IF(DIFF<DIFFMIN .OR. DZ .EQ. DZLOW) THEN
               					GETDEFOCUS = DZ
               					DIFFMIN = DIFF
            				END IF
             		ELSE 
                 		VALUE(ISTART:ISTOP) = VALUE(ISTART:ISTOP)**2
d82 22
a103 22
                 		DIFF = 0.0
                 		SUMA = 0.0
                 		SUMB = 0.0
             			DO L = ISTART, ISTOP
               				DIFF = DIFF + VALUE(L)*DBLE(VALUE2(L))
               				SUMA = SUMA + VALUE(L)*DBLE(VALUE(L))
               				SUMB = SUMB + VALUE2(L)*DBLE(VALUE2(L))
             			END DO
				CLOSE(79)
            			DIFF = DIFF  / (DSQRT(SUMA*SUMB)*(ISTOP-ISTART+1))
            			IF(DIFF>DIFFMIN .OR. DZ .EQ. DZLOW) THEN
               				GETDEFOCUS = DZ
               				DIFFMIN = DIFF
					XSCORE=DIFFMIN
            			ENDIF
            		ENDIF
         	ENDDO
         DZLOW = GETDEFOCUS -DZINC*2
	IF(DZLOW<0.0) DZLOW = 0.0
	DZHIGH = GETDEFOCUS +DZINC*2
        DZINC = DZINC / 10.0
        IF(DZINC<1.0) RETURN
d105 1
a106 1
CC===========================================================================
@


1.3
log
@change
@
text
@d1 1
a1 2
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.
d3 25
a27 6
C *  COPYRIGHT (C)2002, L.Joyeux & P.A.Penczek
C *  University of Texas - Houston Medical School
C *  pawel.a.penczek@@uth.tmc.edu
C *    THE CONTENTS OF THIS DOCUMENT CANNOT BE CHANGED WITHOUT WRITTEN
C *    PERMISSION OF THE AUTHOR                          *
C **************************************************************************
@


1.2
log
@getdefocus doubly defined bug
@
text
@d4 1
a4 1
C *  COPYRIGHT (C)2002, L.Joyeux&P.A.Penczek
d10 2
a11 1
C
d18 66
a83 73

      FUNCTION GetDefocus(value2, number, ps, cs, 
     F                lambda, contrast, env, dzlow1, dzhigh1, start)

      IMPLICIT NONE
      INCLUDE 'CMBLOCK.INC'
      INCLUDE 'F90ALLOC.INC'
      INTEGER   number
      REAL       value(number), env(number), value2(number)
      REAL      ps, cs, lambda, contrast, dzlow1, dzhigh1, dzinc, dz
      REAL      dzlow, dzhigh
      REAL      GetDefocus
      INTEGER   i, j, l, start
      REAL      suma, sumb, coef, diff, diffmin, dzmin
      
      dzlow = dzlow1 !1000
      dzhigh = dzhigh1 !200000
      dzinc = (dzhigh-dzlow)/10 !1000
      IF(dzinc>1000) dzinc = 1000
      j = 1
C      WRITE(NOUT,1000) value
C1000   FORMAT(F12.4)
      DO 
         DO dz = dzlow, dzhigh, dzinc
            CALL ctf_signal(value, number, ps, cs, 
     F                lambda, dz, contrast)
#if 0
              value = (value**2*env-value2)**2
            diff = sum(value(start:number))

            IF(diff<diffmin .or. dz .eq. dzlow) THEN
               GetDefocus = dz
               diffmin = diff
            END IF
            WRITE(NOUT,*) dz, diff
#endif
#if 1
            value = value**2*env
              diff = 0
            suma = 0
            sumb = 0
            coef = 0
              DO l = start, number
               diff = diff + value(l)*value2(l)
               suma = suma + value(l)**2
               sumb = sumb + value2(l)**2
               coef = coef + 1
            END DO

            diff = diff  / (SQRT(suma*sumb)*coef) 
C            DLIST(1) = j
C            DLIST(2) = dz
C            DLIST(3) = diff
C            CALL SAVD(NDOC,DLIST,3,IRTFLG)
            j = j + 1
            IF(diff>diffmin .or. dz .eq. dzlow) THEN
C               WRITE(NOUT, *) "deno : ", dz, diff
               GetDefocus = dz
               diffmin = diff
            END IF
C            WRITE(NOUT,*) dz, diff
#endif
         END DO
C         WRITE(NOUT,*) GetDefocus
   
         dzlow = GetDefocus -dzinc*2
         IF(dzlow<0) dzlow = 0
         dzhigh = GetDefocus +dzinc*2
         dzinc = dzinc / 10
         if(dzinc<1) RETURN
      END DO
      RETURN
      END
@


1.1
log
@Initial revision
@
text
@d10 1
a10 2

CCCCCCCCCCCCCCCCCCCCCC
d17 1
d20 1
d30 1
a30 1
      REAL      suma, sumb, coef, diff, diffmin, GetDefocus, dzmin
@
