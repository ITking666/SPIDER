head	1.33;
access;
symbols
	healthdept_2018:1.33
	pre_getangas:1.32
	GPL2010:1.32
	pre_GPL2010:1.31
	pre_var_equation:1.31
	pre_fftwrings:1.29
	pre_opfiles:1.28
	src:1.28
	best-code:1.26
	named-reg:1.26
	x-named-regs:1.25
	x:1.25
	v13-00:1.25
	pre_GPL:1.23
	prec_CA:1.23
	noindx:1.22
	Bproc:1.20
	oct21:1.19
	last77:1.17;
locks; strict;
comment	@c @;


1.33
date	2018.10.03.14.33.55;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2010.06.24.13.25.05;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2009.03.06.12.46.55;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2009.03.03.18.38.48;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2007.11.27.19.07.54;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2006.06.21.14.48.19;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2006.04.06.17.23.05;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2005.12.12.15.24.01;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2005.10.17.20.52.31;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2005.10.17.18.42.54;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2003.09.02.16.08.50;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2002.09.12.20.09.50;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2002.09.10.19.03.06;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2000.09.12.20.05.07;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	99.09.08.17.00.13;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	99.06.03.20.50.44;	author pawel;	state Exp;
branches;
next	1.17;

1.17
date	98.06.02.14.49.20;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	98.06.02.14.14.49;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	98.06.01.14.31.08;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	98.06.01.14.10.16;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	98.06.01.13.10.13;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	98.05.01.16.04.12;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	98.04.21.19.55.33;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	98.04.16.17.45.00;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	98.03.31.20.03.15;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	98.03.31.14.43.03;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	98.03.27.18.56.42;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	98.03.23.18.45.30;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	98.03.23.18.19.19;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	97.10.01.20.16.55;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	97.09.30.19.43.25;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.02.22;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.47.16;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.33
log
@email_health_dept
@
text
@C++*********************************************************************
C
C   ARITH.F 
C              POLISH PARAMETERS                       DEC 2005 AL
C              IOFFUP = -32 BUG                        JUN 2006 AL
C              NLETO =  LEN(EXPR) bug on ifc           NOV 2007 AL
C              CALC(I...,BUF(K),BUF(K)                 MAR 2009 AL
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   ARITH(LUN1,LUN2,NSAM,NROW,NSLICE)
C
C   PURPOSE:  CARRIES OUT ARITHMATIC OPERATION ON IMAGE PIXEL BY PIXEL
C
C   PARAMETERS:
C        LUN1         LOGICAL UNIT NUMBER OF FILE 1
C        LUN2         LOGICAL UNIT NUMBER OF FILE 2
C        NSAM,NROW    X & Y DIMENSIONS OF FILES
C        NSLICE       Z DIMENSION OF FILES
C
C--*******************************************************************

      SUBROUTINE ARITH(LUN1,LUN2,NSAM,NROW,NSLICE,EXPR)

      INCLUDE 'CMBLOCK.INC'
      INCLUDE 'CMLIMIT.INC'

      PARAMETER      (IVALEN  = 40)
      PARAMETER      (IRPNLEN = 80)
      COMMON         IRPN(IRPNLEN),VAL(IVALEN)

      COMMON /IOBUF/ BUF(NBUFSIZ)

c     CHARACTER(LEN=*) ::  EXPR  ifc compiler bug reported
      CHARACTER *(*)  EXPR
      LOGICAL :: INVAR

      PARAMETER      (IOFFUP = -32)

C     SQUISH ALL BLANKS OUT OF FORMULA
      NLETO =  LEN(EXPR)

C     WRITE(6,*) 'Before SHRINKQ',NLETO,':',EXPR 
      CALL SHRINKQ(EXPR,NLETO,EXPR,NLET)
C     WRITE(6,*) 'After SHRINKQ',NLET,':',EXPR

      INVAR = .FALSE.
      DO I = 1,NLET
         IF (EXPR(I:I) .EQ. '[') THEN
            INVAR = .TRUE.
            CYCLE
         ELSEIF (EXPR(I:I) .EQ. ']') THEN
            INVAR = .FALSE.
            CYCLE
         ENDIF
         IF (.NOT. INVAR) THEN
            IF (EXPR(I:I) .GE. 'a' .AND. EXPR(I:I) .LE. 'z') THEN
C              CONVERT OPERATION TO UPPERCASE
               EXPR(I:I) = CHAR(ICHAR(EXPR(I:I)) + IOFFUP)
            ENDIF
         ENDIF
      ENDDO

C     CONVERT INPUT FORMULA TO RPN NOTATION
      CALL POLISH(0,EXPR,NLET,IRPN,NRPN,VAL,NVAL,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      DO  ISL=1,NSLICE
        IOFF = (ISL-1) * NROW
        DO  I = 1,NROW
           IROW = IOFF + I
           CALL REDLIN(LUN1,BUF,NSAM,IROW)
CCCC  omp parallel do private(k) removed sept 00 due to bug, al & pp
C          may be able to return this after ftemp use  mar 09 al
           DO  K = 1,NSAM
C             CALL CALC(IRPN,NRPN,VAL,BUF(K),BUF(K),IRTFLG)
              CALL CALC(IRPN,NRPN,VAL,BUF(K),FTEMP,IRTFLG)
              BUF(K) = FTEMP
	   ENDDO
           CALL WRTLIN(LUN2,BUF,NSAM,IROW)
        ENDDO
      ENDDO
      RETURN
      END


@


1.32
log
@GPL_2010
@
text
@d14 1
a14 1
C=* Email: spider@@wadsworth.org                                        *
@


1.31
log
@typo
@
text
@a8 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d10 5
a14 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d16 1
a16 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.30
log
@calc(.... buf(k),buf(k)) --> FTEMP
@
text
@d100 1
a100 1
              CALL CALC(IRPN,NRPN,VAL,BUF(K)FTEMP,IRTFLG)
@


1.29
log
@NLETO =  LEN(EXPR) bug on ifc
@
text
@d6 2
a7 2
C               NLETO =  LEN(EXPR) bug on ifc          NOV 2007 AL
C
d10 1
a10 1
C=* Copyright (C) 1985-2007  Health Research Inc.                      *
d97 1
d99 3
a101 1
              CALL CALC(IRPN,NRPN,VAL,BUF(K),BUF(K),IRTFLG)
@


1.28
log
@ioffup bug fixed
@
text
@d6 1
d10 1
a10 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d64 1
a64 1
      NLET =  LEN(EXPR)
d66 3
a68 3
C     WRITE(6,*) 'Before SHRINKQ',NLET,EXPR 
      CALL SHRINKQ(EXPR,NLET,EXPR,NLET)
C     WRITE(6,*) 'After SHRINKQ',NLET,EXPR
@


1.27
log
@no uppercase in AR formula read for variables
@
text
@d5 1
d60 2
d80 2
a81 1
               EXPR(I:I) = CHAR(ICHAR(EXPR(I:I)) + IOFF)
d104 2
@


1.26
log
@native named registers
@
text
@d57 1
d66 16
@


1.25
log
@GPL License fixed
@
text
@d4 1
d66 1
a66 1
      CALL POLISH(EXPR,NLET,IRPN,NRPN,VAL,NVAL,IRTFLG)
@


1.24
log
@HRI GPL License used
@
text
@a1 1
C++*************************************************************************
a5 2
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      **
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 6

C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
@


1.23
log
@ifc compiler bug fixed??? with *(*) ??
@
text
@d1 1
d7 1
d9 24
@


1.22
log
@nlet
@
text
@d37 2
a38 2
      CHARACTER(LEN=*) ::  EXPR
      CHARACTER(LEN=1) ::  NULL
a39 2
      NULL = CHAR(0)
      
d41 3
a43 1
      NLET = LEN(EXPR)
d45 1
@


1.21
log
@stack for ar
@
text
@d43 1
@


1.20
log
@removed || as caused bug
@
text
@d26 1
a26 1
      SUBROUTINE ARITH(LUN1,LUN2,NSAM,NROW,NSLICE)
d37 2
a38 2
      CHARACTER *80  EXPR
      CHARACTER*1    NULL
a41 3
      CALL RDPRMC(EXPR,NLET,.TRUE.,'FORMULA: P2=',NULL,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

@


1.19
log
@CMLIMIT.INC
@
text
@d57 1
a57 1
c$omp parallel do private(k)
@


1.18
log
@OpenMP
@
text
@d29 1
a34 1
      PARAMETER      (NBUFSIZ = 17008)
a39 1
CNO_SAVE
@


1.17
log
@added shrinkq call
@
text
@d58 1
a58 1
c$doacross local(k)
@


1.16
log
@used iobuf
@
text
@d46 3
@


1.15
log
@*** empty log message ***
@
text
@d32 1
a32 1
      COMMON         IRPN(IRPNLEN),VAL(IVALEN),BUF(1)
d34 3
d57 1
a57 1
              CALL CALC(IRPN,NRPN,VAL,BUF(K),BUF(K),IRTFLG)                    
d62 1
a62 1

@


1.14
log
@commented out parallel stuff
@
text
@d52 1
a52 2
cccccc$doacross local(k,j,ic,val,irpn)

a53 1
     
a55 1

a59 1
      RETURN
a60 3



@


1.13
log
@changed calc parameters
@
text
@d52 1
a52 1
c$doacross local(k,j,ic,val,irpn)
@


1.12
log
@no longer need to reset rpnarray each time
@
text
@d22 1
a22 1
C        NSLICE       Z DIMENSION2 OF FILES
a28 1
      COMMON BUF(1)
d30 3
a32 1
      PARAMETER       (IPOLEN = 40)
a35 1
      CHARACTER *81  RPNARRAY
a36 3
      DIMENSION      VAL(IPOLEN)
      DIMENSION      VAL1(IPOLEN)
      INTEGER        INDPL(IPOLEN)
d44 1
a44 1
      CALL POLISH(EXPR,NLET,RPNARRAY,NPOL,VAL,NVAL,INDPL,NPIX,IRTFLG)
a46 5
      IF (NPIX .LE. 0) THEN
         CALL ERRT(101,'AR - NO PIXELS IN EXPRESSION',NE)
         RETURN
      ENDIF

d52 1
a52 1
c$doacross local(k,j,ic,val1,ptp)
d55 2
a56 12
C             INITIALIZE VAL1 ARRAY, (CALC OVERWRITES VAL1)
              DO J = 1,NVAL
                 VAL1(J) = VAL(J)
              ENDDO
	      DO IC=1,NPIX
                 VAL1(INDPL(IC)) = BUF(K)
	      ENDDO
      
C             NOTE: CALC ROUTINE NO LONGER ALTERS RPNARRAY PARAMETER  
              CALL CALC(RPNARRAY,NPOL,VAL1,IRTFLG)

              BUF(K) = VAL1(1)
@


1.11
log
@NEW VERSION
@
text
@d35 1
a35 1
      CHARACTER *81  RPNARRAY,PTP
d46 1
d61 1
d63 1
a63 1
C             INITIALIZE VAL1 ARRAY
d68 1
a68 1
                 VAL1(INDPL(IC))=BUF(K)
d71 3
a73 3
C             CALC ROUTINE ALTERS PTP PARAMETER  
	      PTP(1:NPOL)=RPNARRAY(1:NPOL)
              CALL CALC(PTP,NPOL,VAL1,IRTFLG)
d81 1
@


1.10
log
@*** empty log message ***
@
text
@d33 1
a33 1
      CHARACTER *80  S
d35 1
a35 1
      CHARACTER *81  POLISH1,PLT
d43 1
a43 1
      CALL RDPRMC(S,NCHAR,.TRUE.,'FORMULA: P2=',NULL,IRTFLG)
d46 1
a46 1
      CALL POLISH(S,NCHAR,POLISH1,NPOLISH,VAL,NVAL,INDPL,IL,IRTFLG)
d49 2
a50 2
      IF (IL .LE. 0) THEN
         CALL ERRT(101,'NO PIXELS IN EXPRESSION',NE)
d59 1
d62 1
a62 1
              DO J = 1,40
d65 1
a65 1
	      DO IC=1,IL
d69 3
a71 3
C             CALC ROUTINE ALTERS PLT PARAMETER  
              PLT   = POLISH1
              CALL CALC(PLT,VAL1,NVAL,IRTFLG)
a78 1
      RETURN
@


1.9
log
@*** empty log message ***
@
text
@d46 1
a46 1
      CALL POLISH(S,NCHAR,POLISH1,VAL,NVAL,INDPL,IL,IRTFLG)
@


1.8
log
@cleaned up logic & added comments
@
text
@d31 1
a31 1
      PARAMETER       (POLEN = 40)
d37 3
a39 3
      DIMENSION      VAL(POLEN)
      DIMENSION      VAL1(POLEN)
      INTEGER        INDPL(POLEN)
@


1.7
log
@*** empty log message ***
@
text
@d3 1
a3 1
C $$ ARITH.FOR
d5 8
a12 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d14 1
a14 1
C $$ ARITH:    ARITHMETIC OPERATION
d16 3
a18 1
C      CALL ARITH(LUN1,LUN2,NSAM,NROW,NSLICE)
d21 2
a22 1
C        NSAM,NROW    DIMENSIONS OF FILES
d31 2
d36 4
a39 3
      DIMENSION      VAL(40)
      DIMENSION      VAL1(40)
      INTEGER        INDPL(55)
d44 9
a52 1
      CALL POLISH(S,NCHAR,POLISH1,VAL,COUNTER,INDPL,IL)
d55 1
a55 2
        IOFF=(ISL-1)*NROW

d57 16
a72 18
          IROW=IOFF+I
          CALL REDLIN(LUN1,BUF,NSAM,IROW)
          DO  K = 1,NSAM
             DO J = 1,40
             VAL1(J) = VAL(J)
             ENDDO

        IF(IL.EQ.0)  CALL ERRT(50,'NO P1',NE)

	DO IC=1,IL
           VAL1(INDPL(IC))=BUF(K)
	ENDDO
        
        VALUE = BUF(K)
        PLT=POLISH1
        CALL CALC(PLT,VAL1,COUNTER)
          BUF(K) = VAL1(1)
	  ENDDO
d74 3
a76 2
        CALL WRTLIN(LUN2,BUF,NSAM,IROW)
	ENDDO
d78 1
a78 1
      ENDDO
@


1.6
log
@*** empty log message ***
@
text
@d29 2
a30 2
      CHARACTER *80 S
      CHARACTER*1     NULL
d34 1
a34 2

      INTEGER  INDPL(55)
a36 4
      
      DO  J=1,40
           VAL(J)=0.0
      ENDDO
@


1.5
log
@*** empty log message ***
@
text
@d36 1
a36 1

@


1.4
log
@*** empty log message ***
@
text
@a0 1

a25 1
#ifdef SP_UNIX
a26 3
#else
      INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d30 6
a35 8
      CHARACTER *4  AR
      CHARACTER     NULL
      CHARACTER     PL,P,A1,A2,RP,L,O,G,X
      LOGICAL       FLOG,FABS,FEXP

      DATA PL/'('/,AR/'+-*/'/,P/'P'/,RP/')'/,L/'L'/,X/'X'/
      DATA O/'O'/,G/'G'/
      DATA S(1:40)/'                                        '/
d38 3
a40 53

      FLOG = .FALSE.
      FABS = .FALSE.        
      FEXP = .FALSE.

1     CALL RDPRMC(S,NCHAR,.TRUE.,'FORMULA: P2=$',NULL,IRTFLG)
      NS = 2

      IF (S(1:3) .EQ. 'LOG') THEN
3        FLOG = .TRUE.
         NS = NS+3

      ELSEIF (S(1:3) .EQ. 'ABS') THEN
4        FABS = .TRUE.
         NS=NS+3

      ELSEIF (S(1:3) .EQ. 'EXP') THEN
         FEXP = .TRUE.
         NS=NS+3
      ENDIF

2     IF (S(NS+1:NS+1) .NE. 'P') GOTO 300

      A1   = S(NS+3:NS+3)
      NADD = 3
      IAR1 = INDEX(AR,A1)
      IF (IAR1 .LE. 0) GOTO 300

40    NADD = NADD+1
      IF (NS + NADD .GT. 80) GOTO 300
      IF (S(NS+NADD:NS+NADD) .NE. ')') GOTO 40
      NS1 = NS+NADD-1
      LENGTH = NS1-(NS+4)+1

      IF (S(NS+4:NS+4) .EQ. 'X') THEN
        IX = LENGTH-1
        IF (IX.NE.1.AND.IX.NE.2) GOTO 300
        CALL CHKNUMQ(S(NS+5:80),IX,'I',NUM,DUM,IER)
        IF (IER.EQ.1) GOTO 300
        F1 = PARAM(NUM+1)
      ELSE
42      CALL CHKNUMQ(S(NS+4:80),LENGTH,'R',NUM,F1,IER)
         IF (IER.EQ.1) GOTO 300
      ENDIF

45    IF(IAR1.EQ.2) F1=-F1
      IF(IAR1.EQ.4) F1=1./F1
      A2 = S(NS+NADD+1:NS+NADD+1)
      NADD = NADD+1

      DO  I=1,4
        IAR2 = I
        IF (A2 .EQ. AR(I:I)) GOTO 70
d42 3
a44 2
c50    CONTINUE
      GOTO 300
d46 2
a47 20
70    NADD1 = NADD+1
80    NADD = NADD+1
      IF (NS+NADD.GT.80) GOTO 300
      IF (S(NS+NADD:NS+NADD) .NE. ')') GOTO 80
      NS2 = NS+NADD-1
      LENGTH = NS2-(NS+NADD1)+1
      IF (S(NS+NADD1:NS+NADD1) .NE. 'X') GOTO 82
      IX = LENGTH-1
      IF (IX .NE. 1 .AND. IX .NE. 2) GOTO 300
      CALL CHKNUMQ(S(NS+NADD1+1:80),IX,'I',NUM,DUM,IER)
      IF (IER.EQ.1) GOTO 300
      F2 = PARAM(NUM+1)
      GOTO 85
82    CALL CHKNUMQ(S(NS+NADD1:80),LENGTH,'R',NUM,F2,IER)
      IF (IER.EQ.1) GOTO 300
85    IF (IAR2.EQ.2) F2 = -F2
      IF (IAR2.EQ.4) F2 = 1./F2
      IF (IAR1.LT.3.AND.IAR2.GE.3) GOTO 100
      IF (IAR1.GE.3.AND.IAR2.LT.3) GOTO 150
      GOTO 300
a48 2
100   DO  ISL=1,NSLICE
        IOFF=(ISL-1)*NROW
d53 14
a66 1
          BUF(K) = (BUF(K)+F1)*F2
a68 17
          IF (FLOG) THEN
            DO  K = 1,NSAM
            BUF(K) = ALOG10(BUF(K))
	    ENDDO

          ENDIF
116       IF(FABS) THEN
            DO  K = 1,NSAM
            BUF(K) = ABS(BUF(K))     
	    ENDDO

          ENDIF
118       IF (FEXP) THEN
            DO  K = 1,NSAM
            BUF(K)=EXP(BUF(K))
  	    ENDDO
          ENDIF
d71 1
d73 1
a73 30
c121   CONTINUE

      IF(IMAMI.NE.1) RETURN
      FMAX = (FMAX+F1)*F2
      FMIN = (FMIN+F1)*F2
      AV = (AV+F1)*F2
	SIG=SIG*F2
      GOTO 190

150   DO  ISL=1,NSLICE
        IOFF=(ISL-1)*NROW
        DO 180 I = 1,NROW
          IROW=IOFF+I
          CALL REDLIN(LUN1,BUF,NSAM,IROW)
          DO  K = 1,NSAM
          BUF(K) = BUF(K)*F1+F2
	  ENDDO

          IF(.NOT.FLOG) GOTO 176
          DO  K = 1,NSAM
          BUF(K) = ALOG10(BUF(K))
	  ENDDO

          GOTO 180
176       IF(.NOT.FABS) GOTO 178 
          DO  K = 1,NSAM
          BUF(K) = ABS(BUF(K))
	  ENDDO

          GOTO 180
a74 6
178       IF(FEXP) THEN
            DO  K=1,NSAM
              BUF(K) = EXP(BUF(K))
	    ENDDO
c 179         CONTINUE 
          ENDIF
a75 20
180     CALL WRTLIN(LUN2,BUF,NSAM,IROW)
      ENDDO
c181   CONTINUE

      IF (IMAMI.NE.1) RETURN
      V1   = FMAX*F1+F2
      V2   = FMIN*F1+F2
      FMAX = AMAX1(V1,V2)
      FMIN = AMIN1(V1,V2)
      AV   = AV*F1+F2
      SIG  = SIG*F1

190   IF(FLOG.OR.FABS) RETURN
200    CALL SETPRM(LUN2,NSAM,NROW,FMAX,FMIN,AV,'U')
      RETURN

300   CALL ERRT(16,'ARITH ',NE)
      WRITE(NOUT,*) ' IX=', IX
      IBCNT = IBCNT-1
      GOTO 1
a76 1
      END
@


1.3
log
@*** empty log message ***
@
text
@d95 1
a95 1
      DO 50 I=1,4
d98 2
a99 1
50    CONTINUE
d123 1
a123 1
100   DO 121 ISL=1,NSLICE
d125 1
a125 1
        DO 120 I = 1,NROW
d128 3
a130 2
          DO 110 K = 1,NSAM
110       BUF(K) = (BUF(K)+F1)*F2
d133 4
a136 2
            DO 115 K = 1,NSAM
115         BUF(K) = ALOG10(BUF(K))
d139 4
a142 2
            DO 117 K = 1,NSAM
117         BUF(K) = ABS(BUF(K))     
d145 3
a147 2
            DO 119 K = 1,NSAM
119         BUF(K)=EXP(BUF(K))
d149 4
a152 2
120     CALL WRTLIN(LUN2,BUF,NSAM,IROW)
121   CONTINUE
d161 1
a161 1
150   DO 181 ISL=1,NSLICE
d166 4
a169 2
          DO 170 K = 1,NSAM
170       BUF(K) = BUF(K)*F1+F2
d171 4
a174 2
          DO 175 K = 1,NSAM
175       BUF(K) = ALOG10(BUF(K))
d177 4
a180 2
          DO 177 K = 1,NSAM
177       BUF(K) = ABS(BUF(K))
d184 1
a184 1
            DO 179 K=1,NSAM
d186 2
a187 1
179         CONTINUE 
d191 2
a192 1
181   CONTINUE
@


1.2
log
@cpp_lines_added
@
text
@d37 1
a37 1
      CHARACTER     LP,P,A1,A2,RP,L,O,G,X
@


1.1
log
@Initial revision
@
text
@d27 3
d31 1
@
