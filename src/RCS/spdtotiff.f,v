head	1.23;
access;
symbols
	pre_getangas:1.21
	GPL2010:1.21
	pre_GPL2010:1.20
	pre_var_equation:1.19
	pre_fftwrings:1.19
	pre_opfiles:1.19
	src:1.19
	best-code:1.19
	x-named-regs:1.19
	x:1.19
	v13-00:1.19
	pre_GPL:1.18
	prec_CA:1.17
	noindx:1.16
	Bproc:1.13
	oct21:1.13
	last77:1.13;
locks; strict;
comment	@c @;


1.23
date	2014.03.12.14.24.46;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2014.03.11.13.27.35;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2010.06.24.13.26.59;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2009.07.30.11.41.43;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.17.21.06.30;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.15.14.46.01;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2003.01.31.19.42.56;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2002.03.11.14.09.02;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2000.11.17.14.13.44;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2000.11.13.18.26.13;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	99.02.18.21.23.05;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	97.11.07.21.20.36;	author hedget;	state Exp;
branches;
next	1.11;

1.11
date	97.10.24.17.26.15;	author hedget;	state Exp;
branches;
next	1.10;

1.10
date	97.10.24.17.03.00;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	97.08.29.17.21.14;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	97.07.16.13.50.10;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	97.07.15.18.26.57;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	97.05.28.20.37.57;	author liy;	state Exp;
branches;
next	1.5;

1.5
date	96.09.27.20.42.53;	author liy;	state Exp;
branches;
next	1.4;

1.4
date	95.10.05.16.22.56;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	95.10.04.18.50.54;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	95.01.11.22.11.45;	author liy;	state Exp;
branches;
next	1.1;

1.1
date	95.01.06.23.26.42;	author liy;	state Exp;
branches;
next	;


desc
@created for tiff convertor
@


1.23
log
@improved
@
text
@
C++*********************************************************************
C
C  SPDTOTIFF.FOR  --    CREATED, DEC 28, 94 al
C                       OSF REMOVED                JUL 2009 ArDean Leith
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    SPDTOTIFF(LUNO,LUNN,NX,NY,NZ,IRTFLG)
C
C    PURPOSE:       CONVERT SPIDER IMAGE TO 8BIT TIFF FORMAT
C
C    PARAMETERS:
C        LUNO       LOGICAL UNIT NUMBER TO BE ASSIGNED INPUT.
C        LUNN       LOGICAL UNIT NUMBER TO BE ASSIGNED TO FILNEW
C        IRTFLG     ERROR RETURN FLAG. (0 IS NORMAL)
C
C    VARIABLES:  TIFF TAGS  
C	TIFFTAG_IMAGEWIDTH		256
C	TIFFTAG_IMAGELENGTH		257
C	TIFFTAG_BITSPERSAMPLE		258
C	TIFFTAG_COMPRESSION		259
C	TIFFTAG_PHOTOMETRIC		262
C	TIFFTAG_STRIPOFFSETS		273
C	TIFFTAG_ROWSPERSTRIP		278
C	TIFFTAG_STRIPBYTECOUNTS		279
C	TIFFTAG_RESOLUTIONUNIT		296
C
C    FUTURE      FIND IF CURRENTLY SWAPPING BYTES
C                FLIP = ISSWAB(99)  
C
C--********************************************************************

	SUBROUTINE SPDTOTIFF(LUNO,LUNN,NX,NY,NZ,IRTFLG)

        IMPLICIT NONE
        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        INTEGER                :: IERR
        COMMON /IOERR/ IERR

 	INTEGER                :: LUNO,LUNN,NX,NY,NZ,IRTFLG

        REAL                   :: BUFO(NBUFSIZ) ! FROM CMLIMIT

        INTEGER, PARAMETER     :: LENOPN = 1024 ! ONLY USES: 512
        INTEGER*1              :: LBUF(LENOPN)

	INTEGER*2              :: TIFFINT(70), TIFFDAT(70)
	INTEGER*1              :: TIFFBYTE(140)
	EQUIVALENCE (TIFFINT, TIFFBYTE)

        CHARACTER (LEN=1)      :: NULL = CHAR(0)
        CHARACTER (LEN=MAXNAM) :: FILNEW

        LOGICAL                :: FLIP
	REAL	               :: PVAL
        INTEGER                :: IRTFLGT, ISLICE, NOT_USED
        INTEGER                :: ISTREC, IENDREC, K, IRECOUT, I, NE 
        INTEGER                :: J, NLET 

        INTEGER                :: lnblnkn 

        character (len=2)      :: cvals = 'ii'
        integer * 2            :: i2val
	equivalence (cvals, i2val)
   

C	SET THE TIFFINT INVARIANT HEADER
C       BYTE ORDER, VERSION(=42), OFFSET TO IFD, IFD COUNT,
C       DIRECTORY ENTRIES: TAG #, TYPE(3=SHORT,4=LONG),
C                          LENGTH(4 BYTES), VALUE(4 BYTES)

        !  'II' is: 18761

	DATA TIFFDAT/19789,42,0,8,9, 
     &		       256, 4,0,1,0,0,	257,4,0,1,0,0,
     &		       258, 3,0,1,8,0,	259,3,0,1,1,0,
     &		       262, 3,0,1,1,0,	273,4,0,1,0,1024,
     &		       278, 4,0,1,0,0,	279,4,0,1,0,0,
     &		       296, 3,0,1,3,0,	  0,0,0,0,0,0,
     &                   0, 0,0,0,0/

        IRTFLG = 1

        !WRITE(6,*) ' cvals,i2vals:',cvals,i2val,tiffdat(1)

C	INITIALIZE THE TIFF HEADER WITH CONSTANT VALUES
        TIFFINT = TIFFDAT

        !WRITE(6,*) ' tiffint(1):',tiffint(1)
        !TIFFINT(1:2) = TRANSFER(CVALS(1:2),I2VAL)
        !WRITE(6,*) ' tiffint(1):',tiffint(1)

	    
C       CONVERT SPIDER HEADER TO TIFF HEADER           

C	TIFFTAG_IMAGEWIDTH		256
        TIFFINT(11) = NX

C	TIFFTAG_IMAGELENGTH		257
	TIFFINT(17) = NY

C	TIFFTAG_STRIPOFFSETS		273  ! ONLY ONE STRIP
	TIFFINT(41) = 512

C	TIFFTAG_ROWSPERSTRIP		278
	TIFFINT(47) = NY
	
C	TIFFTAG_STRIPBYTECOUNTS		279  ! ONLY ONE STRIP
	TIFFINT(52) = NX*NY/65536.0
	TIFFINT(53) = NX*NY
	
C       IF NECESSARY FIND STATS FOR INPUT IMAGE 
        IF (IMAMI == 0) CALL NORM3(LUNO,NX,NY,NZ,FMAX,FMIN,AV)

C	COMPUTE THE SCALE VALUE
	PVAL = 255.0 / (FMAX - FMIN)

C       GET OUTPUT FILE NAME
C       OPEN NEW FILE FOR TIFF VERSION, 1024 BYTE RECORD LENGTH
        CALL OPAUXFILE(.TRUE.,FILNEW,'tif',LUNN,LENOPN,'N',
     &                 'TIFF OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

C	CHECK THE DATA IS AN IMAGE OR A VOLUME
C	IF IT IS AN IMAGE, CONVERT IT TO A TIFF FILE
C	IF IT IS A VOLUME, ASK THE USER WHICH SLICE SHOULD BE CONVERTED
	IF (ABS(NZ) <= 1) THEN
C	    IT IS AN IMAGE ....
	    ISLICE = 1

	ELSEIF (ABS(NZ) > 1) THEN
C	    IT IS A VOLUME, ASK FOR THE SLICE NO. THAT WILL BE CONVERTED
	    CALL RDPRI1S(ISLICE,NOT_USED, 'SLICE NUMBER',IRTFLG)
            IF (IRTFLG .NE. 0) RETURN
	ENDIF

	ISTREC   = (ISLICE - 1) * NY + 1
	IENDREC  = ISTREC + NY - 1

C	WRITE THE TIFF HEADER 
        LBUF(1:512) = 0

C       FLIP THE HEADER'S BYTES ON INTEL LINUX 
        DO K= 1, 140,2
           LBUF(K+1) = TIFFBYTE(K)
           LBUF(K)   = TIFFBYTE(K+1)
        ENDDO



C       LBUF HAS 512 BYTES IN IT NOW FROM TIFF HEADER
        K       = 512
        IRECOUT = 0
        IERR    = 0
	    
        DO I = ISTREC,IENDREC

C         READ EACH RECORD OF SPIDER FILE
          CALL REDLIN(LUNO,BUFO,NX,I)
          IF (IERR .NE. 0) THEN
             CALL ERRT(102,'READING SPIDER FILE',IERR)
             IRTFLG = 1
             RETURN
          ENDIF

C         CONVERT FLOATING POINT NUMBERS TO BYTE
          DO J=1,NX
             IF (K >= LENOPN) THEN
C               BUFFER IS FULL, PUT IT OUT TO FILE (8bits = no byteswap)
                IRECOUT = IRECOUT + 1
                CALL WRTLIN8(LUNN,LBUF,LENOPN,IRECOUT)
                K = 0
             ENDIF
             K       = K + 1
             LBUF(K) = (BUFO(J) - FMIN) * PVAL
           ENDDO
        ENDDO

        IF (K > 0) THEN
C          BUFFER STILL HAS PIXELS IN IT, PUT THEM OUT TO FILE
           IRECOUT = IRECOUT + 1
           CALL WRTLIN8(LUNN,LBUF,K,IRECOUT)  ! DOES NOT byteswap 
        ENDIF

        NLET = LNBLNKN(FILNEW)
        WRITE(NOUT,*) ' OUTPUT PLACED IN: ',FILNEW(1:NLET)

C       SET FLAG FOR NORMAL RETURN	
        IRTFLG = 0

        END


        INTEGER FUNCTION NEWUNIT(UNIT) RESULT(N)
        ! RETURNS LOWEST I/O UNIT NUMBER NOT IN USE

        INTEGER, INTENT(OUT), OPTIONAL :: UNIT
        LOGICAL                        :: INUSE
        INTEGER, PARAMETER             :: NMIN=200   ! AVOID LOWER NUMBERS 
        INTEGER, PARAMETER :: NMAX=999  ! MAY BE SYSTEM-DEPENDENT

        DO N = NMIN, NMAX
           INQUIRE(UNIT=N, OPENED=INUSE)
           IF (.NOT. INUSE) THEN
              IF (PRESENT(UNIT)) UNIT = N
              RETURN
           ENDIF
        ENDDO

        CALL ERRT(101,'NO newunit AVAILABLE',NE)

        END FUNCTION
@


1.22
log
@modernized some
@
text
@a0 13
#if defined(SP_SUN4) 
 
C      THIS ROUTINE DID NOT COMPILE ON SUN
 
       SUBROUTINE spdtotiff
 
       COMMON /UNITS/LUNC,NIN,NOUT
 
       WRITE(NOUT,*) 'DUMMY CALL: spdtotiff'

       RETURN
       END
#else
d37 1
a37 1
C       TIFF TAGS -------------------------
d48 3
d55 1
d59 1
d61 13
d76 12
a87 16
        COMMON /IOBUF/ BUFO(NBUFSIZ)

        INTEGER*1      LBUF
	COMMON         LBUF(1)
               
C	THE BUFFER FOR TIFF 
	INTEGER*2      TIFFINT(70), TIFFDAT(70)
	INTEGER*1      TIFFBYTE(140)
	EQUIVALENCE    (TIFFINT, TIFFBYTE)

        LOGICAL  ::    FLIP,ISSWAB
        LOGICAL*1      LVAL
	REAL	       IPVAL
        CHARACTER * 1  NULL
	LOGICAL        EX
        INTEGER*1      LTEMP
d90 1
a90 1
C       BYTE ORDER, VERSION(=42), OFFSET TO IFD, IFD COUNT
d93 3
d101 2
a102 1
     &		       296, 3,0,1,3,0,	11*0/
a103 1
        NULL   = CHAR(0)
d106 2
d109 6
a114 3
	DO I=1,70
	   TIFFINT(I) = TIFFDAT(I)
	ENDDO
a115 6
C	CHECK THE FILE SIZE. IF IT IS TOO BIG, JUST RETURN
	IF ((NX > 8192) .OR. (NY > 8192)) THEN
            CALL ERRT(101,'IMAGE TOO LARGE',NE)
	    RETURN
	ENDIF

d124 1
a124 1
C	TIFFTAG_STRIPOFFSETS		273
d130 1
a130 1
C	TIFFTAG_STRIPBYTECOUNTS		279
d134 1
a134 1
C       NORMALIZE INPUT IMAGE FIRST
d138 1
a138 1
	IPVAL = 255.0 / (FMAX - FMIN)
a141 1
        LENOPN = 1024
d143 2
a144 2
     &                 'TIFF OUTPUT',.TRUE.,IRTFLGT)
        IF (IRTFLGT .NE. 0) RETURN
d155 2
a156 2
	    CALL RDPRI1S(ISLICE,NOT_USED, 'SLICE NUMBER',IRTFLGT)
            IF (IRTFLGT .NE. 0) RETURN
d163 1
d165 1
a165 1
C       FLIP THE HEADER'S BYTES ON LINUX 
a170 1
        LBUF(141:512) = 0
a171 2
C       FIND IF CURRENTLY SWAPPING BYTES
        FLIP = ISSWAB(99)
d183 2
a184 1
             CALL ERRT(101,'READING FILE',NE)
d191 1
a191 1
C               BUFFER IS FULL, PUT IT OUT TO FILE
d197 1
a197 1
             LBUF(K) = (BUFO(J) - FMIN) * IPVAL
d204 1
a204 1
           CALL WRTLIN8(LUNN,LBUF,K,IRECOUT)
d213 2
a214 1
        WRITE(6,*) ' UNFLIPPED OUTPUT'
d216 19
a234 2
        END
#endif 
@


1.21
log
@GPL_2010
@
text
@d41 1
a41 1
C    SPDTOTIFF(LUNO,LUNN,NSAM,NROW,NSLICE,IRTFLG)
d43 1
a43 1
C    PURPOSE:       CONVERT A SPIDER IMAGE FILE TO TIFF FORMAT
d63 1
a63 1
	SUBROUTINE SPDTOTIFF(LUNO,LUNN,NSAM,NROW,NSLICE,IRTFLG)
d71 2
a72 1
        REAL           BUFO
d74 1
a74 1
	COMMON         BUFO(17000),LBUF(1)
d77 1
a77 1
	INTEGER*2      TIFFINT(70),TIFFDAT(70)
d91 1
a91 1
C                          LENGTH(4 BYTES),VALUE(4 BYTES)
d93 5
a97 5
     1		       256,4,0,1,0,0,	257,4,0,1,0,0,
     1		       258,3,0,1,8,0,	259,3,0,1,1,0,
     1		       262,3,0,1,1,0,	273,4,0,1,0,1024,
     1		       278,4,0,1,0,0,	279,4,0,1,0,0,
     1		       296,3,0,1,3,0,	11*0/
d108 2
a109 3
	IF ((NSAM .GT. 8192) .OR. (NROW .GT. 8192)) THEN
            WRITE(NOUT,*) ' *** IMAGE TOO LARGE'
            CALL ERRT(100,'SPDTOTIFF',NE)
d116 1
a116 1
        TIFFINT(11) = NSAM
d119 1
a119 1
	TIFFINT(17) = NROW
d125 1
a125 1
	TIFFINT(47) = NROW
d128 2
a129 2
	TIFFINT(52) = NSAM*NROW/65536.0
	TIFFINT(53) = NSAM*NROW
d132 1
a132 1
        IF (IMAMI .EQ. 0)CALL NORM3(LUNO,NSAM,NROW,NSLICE,FMAX,FMIN,AV)
d147 1
a147 1
	IF (ABS(NSLICE) .LE. 1) THEN
d151 1
a151 1
	ELSEIF (ABS(NSLICE) .GT. 1) THEN
d157 2
a158 2
	ISTREC   = (ISLICE - 1) * NROW + 1
	IENDREC  = ISTREC + NROW - 1
d168 1
a168 3
  	DO K= 141, 512
           LBUF(K) = 0
  	ENDDO
d181 1
a181 2
          CALL REDLIN(LUNO,BUFO,NSAM,I)

d188 2
a189 2
          DO J=1,NSAM
             IF (K .GE. LENOPN) THEN
d200 1
a200 1
        IF (K .GT. 0) THEN
d213 1
a213 1
        RETURN
@


1.20
log
@for big-endian default
@
text
@a19 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d21 5
a25 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d27 1
a27 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d32 1
a32 1
C=* This program is distributed in the hope that it will be useful,    *
d34 1
a34 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a35 1
C=*                                                                    *
d37 1
a37 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.19
log
@GPL License fixed
@
text
@d18 1
a18 1
C
d21 1
a21 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d47 1
a47 2
C    PURPOSE:       TO CONVERT A SPIDER IMAGE FILE TO TIFF FORMAT
C                   RUNNING ON A UNIX MACHINE
a64 3
C    NOTE:  Thanks to Trevor Sewell for fixing code to run on 
C           little-ended Alpha's.
C	
a66 3
#if defined(__osf__) 
C       CODE MODIFIED BY Trevor Sewell for ALPHA USE Nov 2000
 
d70 1
d73 1
a73 171
        CHARACTER *80  FILNEW
        COMMON /COMMUN/FILNEW

        REAL           BUFO
        INTEGER*1      LBUF
	COMMON         BUFO(17000),LBUF(1)
               
C	THE BUFFER FOR TIFF 
	INTEGER*2      TIFFINT(70),TIFFDAT(70)
	INTEGER*1      TIFFBYTE(140)
	EQUIVALENCE    (TIFFINT, TIFFBYTE)

        LOGICAL*1      LVAL
	REAL	       IPVAL
        CHARACTER * 1  NULL
	LOGICAL        EX
        INTEGER*1      LTEMP

C	SET THE TIFFINT INVARIANT HEADER
C       BYTE ORDER, VERSION(=42), OFFSET TO IFD, IFD COUNT
C       DIRECTORY ENTRIES: TAG #, TYPE(3=SHORT,4=LONG),
C                          LENGTH(4 BYTES),VALUE(4 BYTES)
C	MM=4D4D=19789
C	II=4949=18761
	DATA TIFFDAT/18761,42,8,0,9, 
     1		       256,4,1,0,0,0,	257,4,1,0,0,0,
     1		       258,3,1,0,0,0,	259,3,1,0,0,0,
     1		       262,3,1,0,0,0,	273,4,1,0,0,0,
     1		       278,4,1,0,0,0,	279,4,1,0,0,0,
     1		       296,3,1,0,0,3,	11*0/

        NULL   = CHAR(0)
        IRTFLG = 1

C	INITIALIZE THE TIFF HEADER WITH CONSTANT VALUES
	DO I=1,70
	   TIFFINT(I) = TIFFDAT(I)
	ENDDO
	    
C	CHECK THE FILE SIZE. IF IT IS TOO BIG, JUST RETURN
	IF ((NSAM .GT. 8192) .OR. (NROW .GT. 8192)) THEN
            WRITE(NOUT,*) ' *** IMAGE TOO LARGE'
            CALL ERRT(100,'SPDTOTIFF',NE)
	    RETURN
	ENDIF

C       CONVERT SPIDER HEADER TO TIFF HEADER           

C	TIFFTAG_IMAGEWIDTH		256
        TIFFINT(10) = NSAM

C	TIFFTAG_IMAGELENGTH		257
	TIFFINT(16) = NROW
	
C	TIFFTAG_BITSPERSAMPLE		258
	TIFFINT(22) = 8
	
C	TIFFTAG_COMPRESSION		259
	TIFFINT(28) = 1
	
C	TIFFTAG_PHOTOMETRIC		262
	TIFFINT(34) = 1
	
C	TIFFTAG_STRIPOFFSETS		273
	TIFFINT(40) = 512

C	TIFFTAG_ROWSPERSTRIP		278
	TIFFINT(46) = NROW
	
C	TIFFTAG_STRIPBYTECOUNTS		279
	TIFFINT(53) = NSAM*NROW/65536.0
	TIFFINT(52) = NSAM*NROW
	
C       NORMALIZE INPUT IMAGE FIRST
        IF (IMAMI .EQ. 0)CALL NORM3(LUNO,NSAM,NROW,NSLICE,FMAX,FMIN,AV)

C	COMPUTE THE SCALE VALUE
	IPVAL = 255.0 / (FMAX - FMIN)

C       GET OUTPUT FILE NAME
C       OPEN NEW FILE FOR TIFF VERSION, 1024 BYTE RECORD LENGTH
        LENOPN = 1024
        CALL OPAUXFILE(.TRUE.,FILNEW,'tif',LUNN,LENOPN,'N',
     &                 'TIFF OUTPUT',.TRUE.,IRTFLGT)
        IF (IRTFLGT .NE. 0) RETURN

C	CHECK THE DATA IS AN IMAGE OR A VOLUME
C	IF IT IS AN IMAGE, CONVERT IT TO A TIFF FILE
C	IF IT IS A VOLUME, ASK THE USER WHICH SLICE SHOULD BE CONVERTED
	IF (ABS(NSLICE) .LE. 1) THEN
C	    IT IS AN IMAGE ....
	    ISLICE = 1

	ELSEIF (ABS(NSLICE) .GT. 1) THEN
C	    IT IS A VOLUME, ASK FOR THE SLICE NO. THAT WILL BE CONVERTED
	    CALL RDPRI1S(ISLICE,NOT_USED, 'SLICE NUMBER',IRTFLGT)
            IF (IRTFLGT .NE. 0) RETURN
	ENDIF

	ISTREC   = (ISLICE - 1) * NROW + 1
	IENDREC  = ISTREC + NROW - 1

C	WRITE THE TIFF HEADER 
	DO K= 1, 140
           LBUF(K) = TIFFBYTE(K)
	ENDDO
  	DO K= 141, 512
             LBUF(K) = 0
  	ENDDO

C       FLIP BYTES IN HEADER
	DO K= 1, 512, 2
           LTEMP     = LBUF(K)
           LBUF(K)   = LBUF(K+1)
           LBUF(K+1) = LTEMP
	ENDDO


C       LBUF HAS 512 BYTES IN IT NOW FROM TIFF HEADER
        K       = 512
        IRECOUT = 0
        IERR    = 0
	    
        DO I = ISTREC,IENDREC

C         READ EACH RECORD OF SPIDER FILE
          CALL REDLIN(LUNO,BUFO,NSAM,I)

          IF (IERR .NE. 0) THEN
             CALL ERRT(12,'SPDTOTIFF',NE)
             RETURN
          ENDIF

C         CONVERT FLOATING POINT NUMBERS TO BYTE
          DO J=1,NSAM
             IF (K .GE. LENOPN) THEN
C               BUFFER IS FULL, PUT IT OUT TO FILE
                IRECOUT = IRECOUT + 1
                CALL WRTLIN8(LUNN,LBUF,LENOPN,IRECOUT)
                K = 0
             ENDIF
             K       = K + 1
             LBUF(K) = (BUFO(J) - FMIN) * IPVAL
           ENDDO
        ENDDO

        IF (K .GT. 0) THEN
C          BUFFER STILL HAS PIXELS IN IT, PUT THEM OUT TO FILE
           IRECOUT = IRECOUT + 1
           CALL WRTLIN8(LUNN,LBUF,K,IRECOUT)
        ENDIF

        NLET = LNBLNKN(FILNEW)
        WRITE(NOUT,*) ' OUTPUT PLACED IN: ',FILNEW(1:NLET)

C       SET FLAG FOR NORMAL RETURN	
        IRTFLG = 0

        WRITE(6,*) ' FLIPPED OUTPUT PLACED '
        RETURN
        END
 
#else

	SUBROUTINE SPDTOTIFF(LUNO,LUNN,NSAM,NROW,NSLICE,IRTFLG)

        INCLUDE 'CMBLOCK.INC'

        COMMON /IOERR/ IERR
        CHARACTER *80  FILNEW
        COMMON /COMMUN/FILNEW
d166 1
a166 2
#if defined (__linux__) && defined(osf_ieee)
C       flip the header's bytes on linux if -byteswap
a170 5
#else
        DO K= 1, 140
           LBUF(K) = TIFFBYTE(K)
	ENDDO
#endif
d173 1
a173 1
             LBUF(K) = 0
d190 1
a190 1
             CALL ERRT(12,'SPDTOTIFF',NE)
a222 1
#endif 
@


1.18
log
@islice bug
@
text
@d15 1
a15 1
C++************************************************************************
d19 25
a43 8
C **************************************************************************
C *  COPYRIGHT (C)1989, WADSWORTH CENTER FOR LABORATORIES AND         	   *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
@


1.17
log
@header byte order fix for Linux
@
text
@d75 1
a75 1
	REAL	       IPVAL,STREC,ENDREC
d157 2
a158 1
	    CALL RDPRM(ISLICE,NOT_USED, 'SLICE NUMBER')
d161 2
a162 2
	STREC   = (ISLICE - 1) * NROW + 1
	ENDREC  = STREC + NROW - 1
d185 1
a185 1
        DO I = INT(STREC),INT(ENDREC)
d245 1
a245 1
	REAL	       IPVAL,STREC,ENDREC
d316 2
a317 1
	    CALL RDPRM(ISLICE,NOT_USED, 'SLICE NUMBER')
d320 2
a321 2
	STREC   = (ISLICE - 1) * NROW + 1
	ENDREC  = STREC + NROW - 1
d349 1
a349 1
        DO I = INT(STREC),INT(ENDREC)
@


1.16
log
@nloop,iloop_removed
@
text
@d54 1
a54 1
#if defined(__osf__)
d219 1
d242 1
d322 9
a330 1
	DO K= 1, 140
d333 2
d339 3
d382 1
@


1.15
log
@#else wrong
@
text
@d157 1
a157 1
	    CALL RDPRM(ISLICE,NLOOP, ILOOP, 'SLICE NUMBER')
d313 1
a313 1
	    CALL RDPRM(ISLICE,NLOOP, ILOOP, 'SLICE NUMBER')
@


1.14
log
@sewells changes
@
text
@d222 1
a222 1
#endif 
a223 1
#else
@


1.13
log
@f90 ok
@
text
@d48 3
d54 171
a326 8
#ifdef __osf__
C       FLIP BYTES IN HEADER
	DO K= 1, 512, 2
           LTEMP     = LBUF(K)
           LBUF(K)   = LBUF(K+1)
           LBUF(K+1) = LTEMP
	ENDDO
#endif
d370 1
a370 1
 
@


1.12
log
@made changes for f90 compatibility, note still doesn't compile
@
text
@d1 1
a1 1
#if defined(SP_SUN4) || defined (SP_F90)
d3 1
a3 1
C   THIS ROUTINE DOES NOT COMPILE ON SUN
d17 2
a18 2
C  SPDTOTIFF.FOR  -- 
C                    CREATED, DEC 28, 94 al
d34 1
a34 1
C        LUNO       LOGICAL UNIT NUMBER TO BE ASSIGNED TO FILOLD.
a52 1
CNO_SAVE
a54 1
        COMMON /LUNARA/LUNARA(100)
d56 2
a57 2
        CHARACTER *80  FILNAM,FILNEW,EXTEN
        COMMON /COMMUN/FILNAM,FILNEW,EXTEN
d72 1
a72 1
        INTEGER*1           LTEMP
d85 2
a86 1
        NULL = CHAR(0)
d118 2
a119 4
        IF (IMAMI .EQ. 0) THEN
C          NORMALIZE INPUT IMAGE FIRST
           CALL NORM3(LUNO,NSAM,NROW,NSLICE,FMAX,FMIN,AV)
        ENDIF
d125 1
a125 26
        IRTFLG = 9
        EXTEN  = NULL
        CALL FILERD(FILNEW,NLET,EXTEN,'TIFF OUTPUT',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
        IF (EXTEN .EQ. NULL) THEN
            CALL FILCAN(FILNEW,NLET,NULL,NULL,FILNEW,DATEXC,IRTFLG)
        ENDIF
        IF (IRTFLG .NE. 0) RETURN

	INQUIRE(FILE=FILNEW,IOSTAT=IOERR,EXIST=EX)

C 	IF THE FILE WITH THIS NAME IS EXISTS, DELETE IT FIRST,
C	AND THEN REOPEN A NEW FILE.
C	IT WILL KEEP THE NEW FILE CLEAN AND HAS THE MINIMUM SIZE
	IF (EX) THEN
            IER = 0
            OPEN(LUNN,FILE=FILNEW,STATUS='OLD',DISPOSE='DELETE')
            CLOSE(LUNN,DISPOSE='DELETE',IOSTAT=IER)

            IF (IER .NE. 0) THEN
                CALL ERRT(101,'CAN NOT DELETE THE OLD FILE',IER)
                RETURN
            ENDIF
         ENDIF

C       OPEN NEW FILE FOR TIFF VERSION
d127 3
a129 10
#ifdef __osf__
        LENOPN = 256
#endif
        LENREC = 1024
        OPEN(LUNN,FILE=FILNEW,ACCESS='DIRECT',RECL=LENOPN,IOSTAT=IFAIL,
     &       STATUS='NEW',RECORDTYPE='FIXED',FORM='UNFORMATTED')
        IF (IFAIL .NE. 0) THEN
           CALL ERRT(101,'CAN NOT OPEN TIFF OUTPUT FILE',NE)
           RETURN
        ENDIF
d137 1
a140 1
            IF (IRTFLG .NE. 0) RETURN
a145 4
C       PLACE HEADER IN NEW TIFF FILE
        LUNARA(LUNN) = 0
 

d164 3
a166 1
        IRECOUT = 0	    
d179 1
a179 1
             IF (K .GE. LENREC) THEN
d182 1
a182 1
                CALL WRTLIN8(LUNN,LBUF,LENREC,IRECOUT)
a193 1
           IF (IRTFLG .NE. 0) RETURN
d195 3
@


1.11
log
@*** empty log message ***
@
text
@d1 1
a1 12
#ifdef SP_F90

       SUBROUTINE SPDTOTIFF

       COMMON /UNITS/LUNC,NIN,NOUT

       WRITE(NOUT,*) 'DUMMY CALL: spdtotiff'
       RETURN
       END
#else

#ifdef SP_SUN4 
d62 1
a62 1
        BYTE           LBUF
d67 1
a67 1
	BYTE           TIFFBYTE(140)
d74 1
a74 1
        BYTE           LTEMP
d161 1
a161 1
        IF (IFAIL) THEN
d204 1
a204 1
        DO I = STREC,ENDREC
a240 2

#endif
@


1.10
log
@added ifdef for f90
@
text
@d1 1
a1 1
ifdef SP_F90
d3 1
a3 1
       SUBROUTINE vaxtounix
d7 1
a7 1
       WRITE(NOUT,*) 'DUMMY CALL: vaxtounix'
@


1.9
log
@*** empty log message ***
@
text
@d1 1
d3 9
d252 2
@


1.8
log
@CNO_SAVE
@
text
@d75 1
d140 1
a140 1
C 	IF THE FILE WITH THIS NAME IS EXISTED, DELETE IT FIRST,
d185 1
d187 1
a187 1
	DO K= 1, 512
d193 8
@


1.7
log
@fixed first line and osf
@
text
@d54 1
@


1.6
log
@fixed cptiff fail on odd size images
@
text
@d39 1
a39 2
C	DEFINE THE TIFFHEAD
C
d52 1
a52 2
	SUBROUTINE SPDTOTIFF(LUNO,LUNN,
     &			     NSAM,NROW,NSLICE,IRTFLG)
d56 8
a63 5
        COMMON /LUNARA/ LUNARA(100)
        COMMON /IOERR/  IERR
        COMMON /COMMUN/  FILNAM,FILNEW

	COMMON BUFO(17000),BUFTIFF
d66 3
a68 7
	LOGICAL*1   BUFTIFF(8192),LVAL
	INTEGER*2   TIFFINT(70)
	INTEGER*2   TIFFHEAD(4096)
	REAL	    IPVAL,STREC,ENDREC
               
        CHARACTER *80 FILNAM,FILNEW
        CHARACTER *81  FILN
d70 2
a73 2
	
	EQUIVALENCE (TIFFHEAD, BUFTIFF)
d75 5
a79 2
C	INITIATE THE TIFFINT
	DATA TIFFINT/ 19789,42,0,8,	9, 
a85 1

d88 1
a88 1
C	INITIATE THE TIFF HEAD
d90 1
a90 1
	    TIFFHEAD(I) = TIFFINT(I)
a92 4
	DO I=71, 4096
	    TIFFHEAD(I) = 0
	ENDDO

d94 3
a96 2
	IF((NSAM.GT.8192).OR.(NROW.GT.8192)) THEN
            WRITE(NOUT,*) ' THE IMAGE IS OVERSIZE,CP-TIFF IS FAIL..'
d101 16
a116 6
        TIFFHEAD(11) = BUFO(12)
	TIFFHEAD(17) = BUFO(2)
	TIFFHEAD(41) = (140/NSAM+1)*NSAM
	TIFFHEAD(47) = BUFO(2)	
	TIFFHEAD(52) = BUFO(12)*BUFO(2)/65536.0
	TIFFHEAD(53) = BUFO(12)*BUFO(2)
d118 4
a121 2
C	READ THE OFFSET OF THE RECORD
	LABRECS = BUFO(13)
d124 1
a124 6
	IF(IMAMI.EQ.0) THEN
C	    THE FMAX/FMIN HAS NOT BEEN COMPUTED, COMPUTE IT FIRST 
	    CALL QSTAT(LUNO,LUNM,NSAM,NROW,NSLICE)
	ENDIF

	IPVAL = 255.0/(FMAX-FMIN)
d126 4
a129 2
C       FILNEW IS READ IN
        CALL FILERD(FILNEW,NLET,NULL,'TIFF OUTPUT',IRTFLG)
d131 3
a133 2

        CALL FILCAN(FILN ,NLET,NULL,NULL,FILNEW,DATEXC,IRTFLG)
d136 1
a136 1
	INQUIRE(FILE=FILN ,IOSTAT=IOERR,EXIST=EX)
d143 1
a143 1
            OPEN(LUNN,FILE=FILN,STATUS='OLD',DISPOSE='DELETE')
d153 6
a158 1
        OPEN(LUNN,FILE=FILN,ACCESS='DIRECT',RECL=NSAM,IOSTAT=IFAIL,
a159 1

a164 20
C       PLACE HEADER IN NEW TIFF FILE
        LUNARA(LUNN) = 1
 
C	WRITE THE TIFF HEADER 
	LENHEAD =140
C	HEAD LENGTH IS GREATER THAN NSAM, WRITE IT IN TO SEVERAL RECORDS
	L = LENHEAD/NSAM+1

	DO K=1, L
            CALL WRTLIN8(LUNN,BUFTIFF,NSAM,K-1)
	    DO I=1, NSAM
		BUFTIFF(I) = BUFTIFF(I+K*NSAM)
	    ENDDO

	ENDDO

C       RESET LUNARA FOR IMAGE PORTION OF FILE I/O
        LUNARA(LUNO) = LABRECS
        LUNARA(LUNN) = L+1

d168 1
a168 1
	IF (ABS(NSLICE) .EQ. 1) THEN
d170 1
a170 4
	    STREC = 0
	    ENDREC = NROW
	    NNSLICE = 1

d173 1
a173 1
	    CALL RDPRM(ENDREC,NLOOP, ILOOP, 'SLICE NUMBER')
a174 9
	    NNSLICE = ENDREC
	    ENDREC = (ENDREC-1)*NROW
	    STREC = ENDREC
	    ENDREC = NROW+ENDREC

	ELSE
C	    IT IS WRONG IN HEADER READING
            CALL ERRT(101,'ERROR IN SPIDER HEADER INPUT',NE)
	    RETURN
a175 2
	    
        DO  I = STREC,ENDREC-1
d177 2
a178 2
C           READ EACH RECORD OF UNIX FILE
            CALL REDLIN(LUNO,BUFO,NSAM,I)
d180 36
a215 4
            IF (IERR .NE. 0) THEN
              CALL ERRT(12,'SPDTOTIFF',NE)
              RETURN
            ENDIF
d217 6
a222 12
C           CONVERT SPIDER FORMAT TO TIFF FORMAT -- BYTE
            DO J=1,NSAM
            	LVAL = (BUFO(J)-FMIN)*IPVAL
C	    	WRITE(NOUT,*) LVAL,BUFO(J)
            	BUFTIFF(J) = LVAL
            ENDDO

C           WRITE RECORD TO UNIX FILE
	    ITEMP = I - STREC
            CALL WRTLIN8(LUNN,BUFTIFF,NSAM,ITEMP)

        ENDDO
@


1.5
log
@changed <CP> to <CP TO> or <CP FROM>
@
text
@d62 1
a62 1
	COMMON BUFO(17000),BUFTIFF,TIFFHEAD
d67 1
a67 1
	INTEGER*2   TIFFHEAD(8192)
a68 1
	
d75 2
d90 1
a90 1
	DO I=0,69
d94 1
a94 1
	DO I=70, 4096
d164 3
a166 3
            CALL WRTLIN8(LUNN,TIFFHEAD,NSAM,K-1)
	    DO I=1, NSAM/2
		TIFFHEAD(I) = TIFFHEAD(I+K*NSAM/2)
d168 1
@


1.4
log
@dispose does not work on sun
@
text
@d29 1
a29 1
C    SPDTOTIFF(FILOLD,FILNEW,LUNO,LUNN,IRTFLG)
a34 1
C        FILOLD     SPIDER FORMAT FILE NAME 
a35 1
C        FILNEW     TIFF  FORMAT FILE NAME 
d53 2
a54 1
	SUBROUTINE SPDTOTIFF(FILOLD,FILNEW,LUNO,LUNN,IRTFLG)
d60 1
d71 1
a71 1
        CHARACTER *(*) FILOLD,FILNEW
a95 17

C 	READ IN THE SPIDER FILENAME
	CALL FILERD(FILOLD,NLET,NULL,'SPIDER INPUT',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

C       SET FLAG FOR ERRONEOUS RETURN
        IRTFLG = 1
        IERR   = 0
	NF     = 2
      
C	OPEN THE SPIDER FILE
	CALL OPENF(FILOLD,LUNO,NSAM,NROW,'OLD',NF,NSLICE)

        IF (NF.EQ.1) THEN
            CALL ERRT(4,'CP-TIFF',NF)
            RETURN
        ENDIF
@


1.3
log
@change write(* to write(nout
@
text
@d1 15
a56 1
#ifdef SP_UNIX
a57 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d243 1
a243 1
 
@


1.2
log
@deleted unused variables
@
text
@d216 1
a216 1
C	    	WRITE(*,*) LVAL,BUFO(J)
@


1.1
log
@created for tiff convertor
@
text
@d48 1
a48 1
        COMMON /LUNARA/ LUNARA(100),LASLAB
d56 1
a56 1
	INTEGER*2   TIFFHEAD(8192),NLENBYT
d61 1
a61 1
        CHARACTER *81  FILO,FILN
a73 2

	DATA LENLAB/256/
@
