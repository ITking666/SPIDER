head	1.27;
access;
symbols
	pre_mrcs:1.27
	healthdept_2018:1.27
	pre_getangas:1.25
	GPL2010:1.24
	pre_GPL2010:1.23
	pre_var_equation:1.23
	pre_fftwrings:1.23
	pre_opfiles:1.23
	src:1.23
	best-code:1.23
	x-named-regs:1.23
	x:1.23
	v13-00:1.23
	pre_GPL:1.21
	prec_CA:1.21
	noindx:1.19
	Bproc:1.18
	oct21:1.16
	last77:1.15;
locks; strict;
comment	@c @;


1.27
date	2018.10.03.14.51.08;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2014.01.12.18.57.23;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2010.12.23.14.23.58;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2010.06.24.13.27.13;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2005.10.17.19.58.24;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.17.17.54.41;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2003.03.04.14.37.07;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2003.02.20.14.58.15;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2002.03.11.14.07.45;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2000.06.15.18.44.20;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2000.06.14.14.05.15;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	99.09.08.16.58.41;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	99.03.10.16.52.22;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	99.02.16.16.08.34;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	99.02.11.20.48.39;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.02.11.18.59.42;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.02.05.16.35.31;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	98.03.04.15.07.45;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	97.10.24.17.30.41;	author hedget;	state Exp;
branches;
next	1.8;

1.8
date	97.10.24.17.01.47;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.07.17.19.53.48;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	97.07.16.13.50.04;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	97.07.11.13.07.29;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	95.10.05.18.32.24;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	95.04.17.13.31.54;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.10.17.13.26.32;	author mladjadj;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.14.12.25;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.27
log
@email_health_dept
@
text
@
#ifdef SP_SUN4 
 
C   THIS ROUTINE NOT AVAILABLE ON SUN
 
       SUBROUTINE vaxtounix(FILOLD,FILNEW,LUNO,LUNN,IRTFLG)
 
       COMMON /UNITS/LUNC,NIN,NOUT
 
       WRITE(NOUT,*) 'DUMMY CALL: vaxtounix'
       RETURN
       END
#else  

C++*********************************************************************
C
C  VAXTOUNIX.FOR  -- ADAPTED FROM GETVAX
C                    CONVERTED TO RUN ON UNIX           JULY 93 al
C                    TOTREC REMOVED                     DEC. 10 al
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    VAXTOUNIX(FILOLD,FILNEW,LUNO,LUNN,IRTFLG)
C
C    PURPOSE:       TO CONVERT A VAX SPIDER IMAGE FILE TO UNIX FORMAT
C                   RUNNING ON A UNIX MACHINE
C
C    PARAMETERS:
C        FILOLD     VAX FORMAT FILE NAME                       (SENT)
C        LUNO       LOGICAL UNIT NUMBER  FILOLD.               (SENT)
C        FILNEW     UNIX  FORMAT FILE NAME                     (SENT)
C        LUNN       LOGICAL UNIT NUMBER  FILNEW                (SENT)
C        IRTFLG     ERROR RETURN FLAG. (0 IS NORMAL)           (RET.)
C
C    VARIABLES:   IFORM  = FILE TYPE SPECIFIER. 
C                        = +3    3-D IMAGE
C	                 = +1    2-D IMAGE
C                        = -1    2-D FOURIER TRANSFORM
C                        = -3    3-D FOURIER TRANSFORM
C                        = +8    8 BIT BLACK AND WHITE IMAGE
C                        = 11    8 BIT COLOR IMAGE
C
C--********************************************************************

	SUBROUTINE VAXTOUNIX(FILOLD,FILNEW,LUNO,LUNN,IRTFLG)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        COMMON /IOERR/  IERR
        COMMON /IOBUF/ BUFO(NBUFSIZ)

        CHARACTER *(*) FILOLD,FILNEW
        CHARACTER *1   NULL

        NULL   = CHAR(0)

        IRTFLG = 1

C       RETRIEVE ALL LABEL INFO (LABEL CONTAINS >=256 * 4 BYTES)
        CALL OPAUXFILE(.TRUE.,FILOLD,DATEXC,LUNO,1024,'O',
     &                  'VAX/VMS INPUT FILE',.TRUE.,IRTFLGT)
        IF (IRTFLGT .NE. 0) RETURN

C       READ FIRST 1024 BYTES OF VAX INPUT FILE (FIRST RECORD)
        CALL REDLIN8(LUNO,BUFO,1024,1,IRTFLGT)
        IF (IRTFLGT .NE. 0) THEN
           CALL ERRT(101,'*** CAN NOT READ VAX HEADER',NE)
           RETURN
        ENDIF

C       CONVERT HEADER TO UNIX FLOATING POINT NUMBERS           
        DO I=1,211
           CALL VAX32U(BUFO(I))
        ENDDO

        NSLICE = BUFO(1)
        IF (NSLICE .EQ. 0) THEN
C          FIX UP OLD LABELS NSLICE
           NSLICE  = 1
           BUFO(1) = NSLICE

        ELSEIF (NSLICE .GT. 0) THEN
C          OLD SPIDER SHORT LABEL FILE
           WRITE(NOUT,*) '*** SHORT LABEL CONVERSION NOT IMPLEMENTED'
           CALL ERRT(2,'VAXTOUNIX',NE)
           RETURN
        ELSE
            NSLICE = -NSLICE
        ENDIF

        NROW     = BUFO(2)

        IFORM    = BUFO(5)
        IF (BUFO(5) .LT. 0.0) IFORM = BUFO(5) - 0.5
        IF (IFORM .NE. 1 .AND. IFORM .NE. 3) THEN
          WRITE(NOUT,*)
     &         'WARNING: NOT TESTED FOR THIS FORMAT: ',IFORM
        ENDIF

C       PIXELS IN EACH RECORD IS IN BUFO(12) = NSAM
        NSAM     = BUFO(12)

        IF (NSAM .LE. 0 .OR. NSAM .GT. 8000) THEN
           WRITE(NOUT,*) 'NSAM IN HEADER LOCATION 12:', NSAM
           CALL RDPRI1S(NSAM,NOT_USED,'NSAM',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
        ENDIF

        LENBYT   = NSAM * 4
        BUFO(23) = LENBYT

        LABREC   = 1024 / LENBYT
        IF (MOD(1024,LENBYT) .NE. 0) LABREC = LABREC + 1
        BUFO(13) = LABREC

        LABBYT   = LABREC * LENBYT
        BUFO(22) = LABBYT

C       CLOSE THE VAX FILE AND REOPEN WITH CORRECT RECORD LENGTH
        CLOSE(LUNO)

        CALL OPAUXFILE(.FALSE.,FILOLD,NULL,LUNO,NSAM*4,'O',
     &                  ' ',.TRUE.,IRTFLGT)
        IF (IRTFLGT .NE. 0) RETURN

C       PLACE HEADER IN NEW UNIX FILE
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNEW,LUNN,'N',IFORM,NSAM,NROW,NSLICE,
     &              MAXIM,'OUTPUT',.FALSE.,IRTFLGT)
        IF (IRTFLGT .NE. 0) RETURN

C       FIND NUMBER OF IMAGE RECORDS EXPECTED IN FILE (IEND)
c       CALL TOTREC(NSAM,NROW,NSLICE,IFORM,IEND) removed dec 2010

        IF (IFORM .EQ. -1) THEN
C          2D FOURIER FILE
           IENDI = (NSAM + 2) * NROW
           IEND  = IENDI / NSAM
           IF (MOD(IENDI,NSAM) .NE. 0) IEND = IEND + 1

        ELSE
C          OTHER FILE TYPE, ASSUME JUST IMAGE RECORDS
           IEND = NROW * NSLICE
        ENDIF

        IERR = 0
        DO I = 1,IEND

C           READ EACH RECORD OF VAX FILE
            CALL REDLIN(LUNO,BUFO,NSAM,I+LABREC)

            IF (IERR .NE. 0) THEN
              CALL ERRT(12,'VAXTOUNIX',NE)
              RETURN
            ENDIF

C           CONVERT FLOATING POINT NUMBERS TO UNIX FORMAT
            DO J=1,NSAM
              CALL VAX32U(BUFO(J))
            ENDDO

C           WRITE RECORD TO UNIX FILE
            CALL WRTLIN(LUNN,BUFO,NSAM,I)

        ENDDO

C       REOPEN TO ECHO DATE AND TIME
        CLOSE(LUNN)
        MAXIM = 0
        WRITE(NOUT,*) ' '
        CALL OPFILEC(0,.FALSE.,FILNEW,LUNN,'O',IFORM,NSAM,NROW,NSLICE,
     &              MAXIM,' ',.TRUE.,IRTFLGT)
        IF (IRTFLGT .NE. 0) RETURN

C       SET FLAG FOR NORMAL RETURN	
        IRTFLG = 0

        RETURN
        END
 
#endif
 
@


1.26
log
@enter
@
text
@d26 1
a26 1
C=* Email: spider@@wadsworth.org                                        *
@


1.25
log
@removed totrec
@
text
@d125 1
a125 1
           CALL RDPRI1S(NSAM,NOT_USED,'ENTER NSAM',IRTFLG)
@


1.24
log
@GPL_2010
@
text
@d18 2
a19 1
C                    CONVERTED TO RUN ON UNIX, JULY 93 al
a69 1

d153 12
a164 1
        CALL TOTREC(NSAM,NROW,NSLICE,IEND)
d167 1
a167 1
        DO  I = 1,IEND
@


1.23
log
@GPL License fixed
@
text
@a19 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d21 5
a25 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d27 1
a27 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d32 1
a32 1
C=* This program is distributed in the hope that it will be useful,    *
d34 1
a34 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a35 1
C=*                                                                    *
d37 1
a37 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.22
log
@HRI GPL License used
@
text
@a15 1
C++************************************************************************
a19 1
C **************************************************************************
d23 1
a23 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a42 7

C *  COPYRIGHT (C)1989, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
a43 1
C **************************************************************************
@


1.21
log
@redhed/wrthed removal
@
text
@d15 1
d20 1
d22 24
d52 1
@


1.20
log
@opfilec
@
text
@a138 3
        CALL WRTHED(LUNN,BUFO,NSAM,IRTFLGT)
        IF (IRTFLGT .NE. 0) RETURN

@


1.19
log
@nloop,iloop_removed
@
text
@d135 1
a135 1
        CALL OPFILE(.TRUE.,FILNEW,LUNN,'N',IFORM,NSAM,NROW,NSLICE,
d170 1
a170 1
        CALL OPFILE(.FALSE.,FILNEW,LUNN,'O',IFORM,NSAM,NROW,NSLICE,
@


1.18
log
@allowed nsam entry if < 0
@
text
@d112 1
a112 1
           CALL RDPRI1S(NSAM,NLOOP,ILOOP,'ENTER NSAM',IRTFLG)
@


1.17
log
@put in nsam warning msg if too big
@
text
@d110 4
a113 6
        IF (NSAM .LE. 0) THEN
           WRITE(NOUT,*) '*** NSAM NOT PRESENT IN HEADER LOCATION 12'
           CALL ERRT(2,'VAXTOUNIX',NE)
           RETURN
        ELSEIF (NSAM .GT. 8000) THEN
           WRITE(NOUT,*) 'WARNING:  NSAM IN HEADER LOCATION 12: ',NSAM
@


1.16
log
@CMLIMIT.INC
@
text
@d110 1
a110 1
       IF (NSAM .LE. 0) THEN
d114 2
@


1.15
log
@null dat
@
text
@d53 1
a56 1
        PARAMETER      (NBUFSIZ = 17008)
@


1.14
log
@changed opauxfile parameter to bytes
@
text
@a51 1
CNO_SAVE
d60 1
d62 2
d129 1
a129 1
        CALL OPAUXFILE(.FALSE.,FILOLD,DATEXC,LUNO,NSAM*4,'O',
@


1.13
log
@added reopen echo
@
text
@d65 1
a65 1
        CALL OPAUXFILE(.TRUE.,FILOLD,DATEXC,LUNO,256,'O',
d127 1
a127 1
        CALL OPAUXFILE(.FALSE.,FILOLD,DATEXC,LUNO,NSAM,'O',
@


1.12
log
@for f90
@
text
@d164 8
@


1.11
log
@removed vms stuff
@
text
@a0 1
#ifdef SP_F90
a1 11
       SUBROUTINE vaxtounix

       COMMON /UNITS/LUNC,NIN,NOUT

       WRITE(NOUT,*) 'DUMMY CALL: vaxtounix'
       RETURN
       END
#else
 
 

d6 1
a6 1
       SUBROUTINE vaxtounix
d34 5
a38 5
C        FILOLD     VAX FORMAT FILE NAME 
C        LUNO       LOGICAL UNIT NUMBER TO BE ASSIGNED TO FILOLD.
C        FILNEW     UNIX  FORMAT FILE NAME 
C        LUNN       LOGICAL UNIT NUMBER TO BE ASSIGNED TO FILNEW
C        IRTFLG     ERROR RETURN FLAG. (0 IS NORMAL)
a54 1
        COMMON /LUNARA/ LUNARA(100),LASLAB
d57 3
a59 2
	COMMON BUFO(17000)
               
a60 21
        CHARACTER *81  FILO,FILN

        CHARACTER * 1  NULL
	LOGICAL        EX

	DATA LENLAB/256/

        NULL = CHAR(0)

10      IF (FILOLD .EQ. NULL) THEN
C           FILOLD NOT SET BY CALLER
            CALL FILERD(FILOLD,NLET,NULL,'VAX SPIDER INPUT',IRTFLG)
            IF (IRTFLG .NE. 0) RETURN

            CALL FILCAN(FILO,NLET,NULL,NULL,FILOLD,DATEXC,IRTFLG)
            IF (IRTFLG .NE. 0) RETURN
        ELSE
C           FILE NAME SENT BY CALLER
            CALL FILCAN(FILO,NLET,NULL,NULL,FILOLD,DATEXC,IRTFLG)
            IF (IRTFLG .NE. 0) RETURN
        ENDIF
a61 1
C       SET FLAG FOR ERRONEOUS RETURN
a62 9
        IERR   = 0
      
	INQUIRE(FILE=FILO ,IOSTAT=IOERR,EXIST=EX)

	IF (IOERR .OR. .NOT. EX) THEN
C          ERROR -- FILE DOES NOT EXIST, BUT IS BEING OPENED WITH 'OLD'
           CALL ERRT(18,'GETVAXU',NE)
           RETURN
        ENDIF
d65 7
a71 19
        LENBYT = 1024

        LENRECT = LENBYT


        OPEN(LUNO,FILE=FILO ,ACCESS='DIRECT',IOSTAT=IFAIL,
     &       STATUS='OLD',RECORDTYPE='FIXED',FORM='UNFORMATTED',
     &       RECL=LENRECT)

        IF (IFAIL) THEN
           CALL ERRT(101,'*** ERROR OPENING INPUT FILE (RECL=1024)',NE)
           RETURN
        ENDIF

        LUNARA(LUNO) = 1

C       READ FIRST 1024 BYTES  OF VAX INPUT FILE
3       CALL REDLIN8(LUNO,BUFO,LENBYT,0,IRTFLG)
        IF (IRTFLG .NE. 0) THEN
d76 1
a76 1
C       CONVERT TO UNIX FLOATING POINT NUMBERS           
a83 1
           BUFO(1) = -1
d85 1
d88 4
a91 4
C           OLD SPIDER SHORT LABEL FILE
            WRITE(NOUT,*) '*** SHORT LABEL CONVERSION NOT IMPLEMENTED'
            CALL ERRT(2,'VAXTOUNIX',NE)
            RETURN
a95 1
C       PIXELS IN EACH RECORD IS IN BUFO(12) = NSAM
d97 1
d100 4
d105 1
d114 2
a115 12

C       FIND NUMBER OF FLOATING POINT VALUES IN EACH RECORD
        IF (IFORM .EQ. 8 .OR. IFORM .EQ. 11) THEN
C          8 BIT SPIDER FILES
           CALL ERRT(101,
     &          'VAXTOUNIX CAN NOT CONVERT 8 BIT VAX SPIDER FILES',NE)
           RETURN

        ELSEIF(IFORM .NE. 1 .AND. IFORM .NE. 3) THEN
          WRITE(NOUT,*)
     &         'WARNING: VAXTOUNIX NOT TESTED FOR THIS FORMAT:',IFORM
        ENDIF
d117 3
a119 4
C       FIND NUMBER OF RECORDS IN THE HEADER LABEL
        LABRECS  = 256 / NSAM
        IF (MOD(256,NSAM) .NE. 0) LABRECS = LABRECS + 1
        BUFO(13) = LABRECS
d121 1
a121 1
        LABBYT   = LABRECS * NSAM * 4
a122 1
        LENBYT   = NSAM * 4
d127 3
a129 23
        LENRECT = LENBYT

        OPEN(LUNO,FILE=FILO ,ACCESS='DIRECT',IOSTAT=IFAIL,
     &       STATUS='OLD',RECORDTYPE='FIXED',FORM='UNFORMATTED',
     &       RECL=LENRECT)
        
        IF (IFAIL) THEN
           CALL ERRT(101,'CAN NOT REOPEN INPUT FILE',NE)
           RETURN
        ENDIF


        IF (FILNEW .EQ. NULL) THEN
C          FILNEW NOT SENT BY CALLER
           CALL FILERD(FILNEW,NLET,NULL,'UNIX SPIDER OUTPUT',IRTFLG)
           IF (IRTFLG .EQ. -1) THEN
              CLOSE(LUNO)
              GOTO 10
           ENDIF
           IF (IRTFLG .NE. 0) RETURN

           CALL FILCAN(FILN ,NLET,NULL,NULL,FILNEW,DATEXC,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
a130 18
        ELSE
           CALL FILCAN(FILN ,NLET,NULL,NULL,FILNEW,DATEXC,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

        ENDIF

C       OPEN NEW FILE FOR UNIX VERSION

        LENRECT = LENBYT

        OPEN(LUNN,FILE=FILN,ACCESS='DIRECT',RECL=LENRECT,IOSTAT=IFAIL,
     &       STATUS='UNKNOWN',RECORDTYPE='FIXED',FORM='UNFORMATTED')

        IF (IFAIL) THEN
           CALL ERRT(101,'CAN NOT OPEN UNIX OUTPUT FILE',NE)
           RETURN
        ENDIF

d132 4
a135 7
        LUNARA(LUNN) = 1

        J = 1
        DO I = 0,LABRECS-1
          CALL WRTLIN(LUNN,BUFO(J),NSAM,I)
          J = J + NSAM
        ENDDO
d137 2
a138 3
C       RESET LUNARA FOR IMAGE PORTION OF FILE IO
        LUNARA(LUNO) = LABRECS
        LUNARA(LUNN) = LABRECS
d143 1
d147 1
a147 1
            CALL REDLIN(LUNO,BUFO,NSAM,I)
a163 14
        WRITE(NOUT,*) ' '
        NCHAR1 = lnblnk(FILN)
        WRITE(NOUT,*) FILN(1:NCHAR1)
        
        IF (NSLICE .GT. 1) THEN
           WRITE(NOUT,2099) NSAM,NROW,NSLICE,LABBYT
2099       FORMAT(' UNIX IMAGE SIZE: (',I4,',',I4,',',I4,')',
     &            '    LABEL BYTES:',I6,/)
        ELSE
           WRITE(NOUT,2098) NSAM,NROW,LABBYT
2098       FORMAT(' UNIX IMAGE SIZE: (',I4,',',I4,')',
     &            '    LABEL BYTES:',I6,/)
        ENDIF

a169 1
#endif
@


1.10
log
@removed IHIST variable (unused)
@
text
@d13 1
a13 14
#ifdef SP_VMS 
 
C   THIS ROUTINE SPECIFIC TO UNIX SPIDER AND IS NOT 
C       USED AT VAX SITES
 
       SUBROUTINE vaxtounix
 
       COMMON /UNITS/LUNC,NIN,NOUT
 
       WRITE(NOUT,*) 'DUMMY CALL: vaxtounix'
       RETURN
       END
 
#else
d109 1
a109 3
#ifdef SP_VMS 
        LENRECT = LENBYT / 4
#else
d111 1
a111 1
#endif
d188 1
a188 3
#ifdef SP_VMS 
        LENRECT = LENBYT / 4
#else
d190 1
a190 1
#endif
d220 1
a220 3
#ifdef SP_VMS 
        LENRECT = LENBYT / 4
#else
d222 1
a222 1
#endif
a289 1
#endif
@


1.9
log
@*** empty log message ***
@
text
@a167 1
        NHISTREC = BUFO(4) + 0.5
a169 1
        IHIST    = BUFO(11) + 0.5
@


1.8
log
@added ifdef for f90
@
text
@d1 1
a1 1
ifdef SP_F90
@


1.7
log
@added irtflg parameter to redlin8
@
text
@d1 10
d311 1
@


1.6
log
@CNO_SAVE
@
text
@d130 2
a131 2
3       CALL REDLIN8(LUNO,BUFO,LENBYT,0)
        IF (IERR .NE. 0) THEN
@


1.5
log
@used 4byte reclen for OSF
@
text
@d67 1
@


1.4
log
@not available on sun
@
text
@d109 1
a109 1
C       RETRIEVE ALL LABEL INFO (LABEL CONTAINS >=256 * 4 BYTES) 
d111 6
d119 1
a119 1
     &       RECL=LENBYT)
d194 5
d201 1
a201 1
     &       RECL=LENBYT)
d228 6
a233 1
        OPEN(LUNN,FILE=FILN,ACCESS='DIRECT',RECL=LENBYT,IOSTAT=IFAIL,
@


1.3
log
@nlabel changed to nhistrec
@
text
@d17 1
d19 10
a66 1
#ifdef SP_UNIX
a67 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d281 1
@


1.2
log
@status=unknown for dec osf/1
@
text
@d143 3
a145 3
        NROW   = BUFO(2)
        NLABEL = BUFO(4) + 0.5
        IFORM  = BUFO(5)
d147 1
a147 2
        NLABEL = BUFO(4)  + 0.5
        IHIST  = BUFO(11) + 0.5
d149 1
a149 1
        NSAM   = BUFO(12)
@


1.1
log
@cpp_lines_added
@
text
@d212 1
a212 1
     &       STATUS='U',RECORDTYPE='FIXED',FORM='UNFORMATTED')
@
