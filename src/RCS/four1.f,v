head	1.61;
access;
symbols
	pre_getangas:1.53
	GPL2010:1.52
	pre_GPL2010:1.51
	pre_var_equation:1.51
	pre_fftwrings:1.51
	pre_opfiles:1.51
	src:1.51
	best-code:1.51
	x-named-regs:1.51
	x:1.51
	v13-00:1.51
	pre_GPL:1.49
	prec_CA:1.45
	noindx:1.42
	Bproc:1.36
	oct21:1.34
	last77:1.33;
locks; strict;
comment	@c @;


1.61
date	2018.02.21.15.36.06;	author leith;	state Exp;
branches;
next	1.60;

1.60
date	2016.06.23.16.33.51;	author leith;	state Exp;
branches;
next	1.59;

1.59
date	2016.04.06.15.02.21;	author leith;	state Exp;
branches;
next	1.58;

1.58
date	2016.04.05.17.15.26;	author leith;	state Exp;
branches;
next	1.57;

1.57
date	2014.11.18.18.50.49;	author leith;	state Exp;
branches;
next	1.56;

1.56
date	2014.05.09.15.14.31;	author leith;	state Exp;
branches;
next	1.55;

1.55
date	2012.02.22.14.34.51;	author leith;	state Exp;
branches;
next	1.54;

1.54
date	2011.06.03.16.30.49;	author leith;	state Exp;
branches;
next	1.53;

1.53
date	2011.01.03.16.45.03;	author leith;	state Exp;
branches;
next	1.52;

1.52
date	2010.06.24.13.25.45;	author leith;	state Exp;
branches;
next	1.51;

1.51
date	2005.10.17.20.35.53;	author leith;	state Exp;
branches;
next	1.50;

1.50
date	2005.10.17.18.26.23;	author leith;	state Exp;
branches;
next	1.49;

1.49
date	2005.08.17.13.58.37;	author leith;	state Exp;
branches;
next	1.48;

1.48
date	2004.11.19.18.31.55;	author cyang;	state Exp;
branches;
next	1.47;

1.47
date	2004.03.11.01.42.17;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2003.10.30.20.14.12;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2003.10.08.20.43.56;	author bimal;	state Exp;
branches;
next	1.44;

1.44
date	2003.02.20.17.54.11;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2003.02.18.20.48.34;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2002.05.08.19.57.35;	author pawel;	state Exp;
branches;
next	1.41;

1.41
date	2001.08.14.16.03.52;	author bimal;	state Exp;
branches;
next	1.40;

1.40
date	2000.12.05.13.54.11;	author bimal;	state Exp;
branches;
next	1.39;

1.39
date	2000.12.05.13.14.33;	author bimal;	state Exp;
branches;
next	1.38;

1.38
date	2000.12.05.09.55.45;	author bimal;	state Exp;
branches;
next	1.37;

1.37
date	2000.09.29.18.39.44;	author bimal;	state Exp;
branches;
next	1.36;

1.36
date	2000.06.16.15.29.32;	author pawel;	state Exp;
branches;
next	1.35;

1.35
date	2000.02.03.16.03.57;	author bimal;	state Exp;
branches;
next	1.34;

1.34
date	99.09.01.20.53.02;	author pawel;	state Exp;
branches;
next	1.33;

1.33
date	98.01.27.14.58.26;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	97.11.06.15.18.18;	author pawel;	state Exp;
branches;
next	1.31;

1.31
date	97.01.14.22.08.33;	author mladjadj;	state Exp;
branches;
next	1.30;

1.30
date	97.01.14.21.07.30;	author mladjadj;	state Exp;
branches;
next	1.29;

1.29
date	96.10.21.20.57.54;	author pawel;	state Exp;
branches;
next	1.28;

1.28
date	96.10.21.20.52.22;	author pawel;	state Exp;
branches;
next	1.27;

1.27
date	96.09.30.15.36.32;	author pawel;	state Exp;
branches;
next	1.26;

1.26
date	96.09.05.13.07.08;	author pawel;	state Exp;
branches;
next	1.25;

1.25
date	96.09.04.15.34.44;	author pawel;	state Exp;
branches;
next	1.24;

1.24
date	96.08.30.15.14.00;	author pawel;	state Exp;
branches;
next	1.23;

1.23
date	96.08.29.19.51.22;	author pawel;	state Exp;
branches;
next	1.22;

1.22
date	96.08.29.19.41.08;	author pawel;	state Exp;
branches;
next	1.21;

1.21
date	96.08.29.17.50.14;	author pawel;	state Exp;
branches;
next	1.20;

1.20
date	96.08.27.15.26.17;	author pawel;	state Exp;
branches;
next	1.19;

1.19
date	96.08.27.14.57.31;	author pawel;	state Exp;
branches;
next	1.18;

1.18
date	96.08.27.13.46.54;	author pawel;	state Exp;
branches;
next	1.17;

1.17
date	96.03.05.15.38.29;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	96.03.05.13.59.51;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	95.10.26.14.46.40;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	95.10.23.19.50.32;	author mladjadj;	state Exp;
branches;
next	1.13;

1.13
date	95.04.12.19.55.57;	author ramani;	state Exp;
branches;
next	1.12;

1.12
date	94.12.28.15.49.54;	author ramani;	state Exp;
branches;
next	1.11;

1.11
date	94.12.23.21.23.18;	author ramani;	state Exp;
branches;
next	1.10;

1.10
date	94.11.15.15.24.01;	author ramani;	state Exp;
branches;
next	1.9;

1.9
date	94.10.17.13.47.40;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	94.10.17.09.42.36;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	94.08.19.11.00.49;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	94.08.15.13.40.54;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	94.05.20.16.40.08;	author ramani;	state Exp;
branches;
next	1.4;

1.4
date	94.05.20.13.55.51;	author ramani;	state Exp;
branches;
next	1.3;

1.3
date	94.05.20.13.51.40;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.05.25;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.48.59;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.61
log
@comments
@
text
@C++*********************************************************************
C
C  FOUR1.F                                        08/22/96
C             OPFILEC                             FEB  03 ARDEAN LEITH
C             MPI                                 OCT  03 CHAO YANG
C             REMOVED UNDOCUMENTED OLD 'FD R'     MAY  14 ARDEAN LEITH
C             ADDED 'FQ Q'                        NOV  14 ARDEAN LEITH
C             ADDED 'FSC MA'                      APR  16 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2016  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C FOUR1(MAXMEM)
C
C CALLS: FQ, FT, FF, FL, FP, EF, PW, RF, CF, GF, RD, FD, 16=FSC, 17=FRC
C
C--*********************************************************************

        SUBROUTINE FOUR1(MAXMEM)

        INCLUDE 'CMBLOCK.INC' 
        INCLUDE 'CMLIMIT.INC' 

        INTEGER, PARAMETER    :: NFUNC=14
        CHARACTER(LEN=2)      :: FUNC(NFUNC)

        CHARACTER(LEN=MAXNAM) :: FILNAM,FILNAM2
        REAL                  :: VALUES(6)
        LOGICAL               :: FSCOP

        INTEGER, PARAMETER    :: LUN1 =21
        INTEGER, PARAMETER    :: LUN2 =22
        INTEGER, PARAMETER    :: LUNF =23
        INTEGER, PARAMETER    :: LUN3 =24

        DATA FUNC/'FQ','FT', 'FF', 'FL', 'FP', 
     &            'EF','PW', 'RF', 'CF', 'GF', 
     &            'RD','FD','16','17'/

        MAXIM  = 0
        MAXIM2 = 0
        IRTFLG = 0

C                 FQ, FT, FF, FL, FP, EF, PW, RF, CF, GF, RD, FD, 
C                 16 = FSC, 17=FRC

        DO IFUNC = 1,NFUNC
            IF (FCHAR(1:2) == FUNC(IFUNC)) THEN
              GOTO ( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,8,8), (IFUNC)
            ENDIF
        ENDDO

C       OPERATION NOT IN FOUR1, RETURN TO SPIDER
        RETURN

C       ---------------- QUICK FILTERING ------------------------- 'FQ'

C       NEW INCORE FQ OPERATION
1       CALL FOUR_FQ
        RETURN

C       ---------------- FOURIER TRANSFORM ----------------------- 'FT'
2       IF (FCHAR(4:4) == 'R') THEN
           CALL FTR
        ELSE
           CALL FOUR1C
        ENDIF
        RETURN

C       ---------------- FOURIER FILTER -------------------------- 'FF'

C       APPLIES FILTERS TO 2-D OR 3-D FOURIER TRANSFORMS.
3       IF (FCHAR(4:7) == 'PLOT') THEN
           CALL FILTPLOT(MAXMEM)
           RETURN
        ENDIF

        CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,
     &               NX,NY,NZ,
     &               MAXIM,'INPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0)  RETURN

        IF (IFORM .NE. -11 .AND. IFORM.NE. -12 .AND.
     &      IFORM .NE. -21 .AND. IFORM.NE. -22) THEN
           CALL  ERRT(101,'OPERATION INCONSISTENT WITH DATA FORMAT',NE)
           GOTO 9001
        ENDIF

        IF (FCHAR(4:4) == 'S') THEN
           CALL  ERRT(41,'FF S',NE)
C          CALL FSHADO(LUN1,NX,NY)

        ELSEIF (FCHAR(4:4) == 'L' .OR. FCHAR(4:4) == 'B') THEN
           CALL  ERRT(41,'FF L/B',NE)
C          CALL FILTB(LUN1,NX,NY)

        ELSE
           NXO = NX-MOD(-IFORM,10)
           CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',IFORM,
     &             NX,NY,NZ,
     &             MAXIM,'OUTPUT',.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0)  THEN
              CLOSE(LUN1)
              CALL ERRT(4,'FF',NE)
              RETURN
           ENDIF
           CALL FFILTS(LUN1,LUN2,NX,NY,NZ,NXO)
        ENDIF
        GOTO 9000

C       ---------------- FOURIER LISTING ------------------------- 'FL'
C       LISTS MODULI AND PHASES OF 2-D FOURIER TRANSFORMATION.
4       CALL  ERRT(101,'OBSOLETE OPERATION',NE)
        RETURN


C       ---------------- FOURIER INTERPOLATION ------------------- 'FP'
5       CALL FOUR1A_FP
        RETURN


c       --------- EXTRACT FOURIER -------------------------------- 'EF'
C       EXTRACTS CENTRAL SECTION FROM 3-D FOURIER UNDER ARBITRARY ANGLES.
6       CALL ERRT(101,'OBSOLETE OPERATION',NE)
        RETURN


C ---------------------- POWER SPECTRUM -------------------------- 'PW'
7       CALL FOUR1B
        RETURN

C       -------------- R-FACTOR ---------------------------------- 'RF'
C       -------------- FSC      ---------------------------------- 'FSC'
C       -------------- FRC      ---------------------------------- 'FRC'
C       COMPUTES MEASURES OF PROXIMITY BETWEEN 2 GIVEN TRANSFORMS
8       IF (FCHAR(4:6)     == '3SN')  THEN
           CALL SSNR3

        ELSEIF (FCHAR(4:6) == '3NN')  THEN
           CALL SSNR3DNN

        ELSEIF (FCHAR(1:2) == '16' .AND. FCHAR(4:4) == 'N') THEN
           CALL PR3D_NEW()    ! OPERATION: 'FSC NEW' 

        ELSEIF (FCHAR(1:2) == '16' .AND. FCHAR(4:4) == 'M') THEN
           CALL PR3D(.TRUE.)    ! OPERATION: 'FSC MA' (undocumented)

        ELSEIF (FCHAR(4:4) == '3' .OR. FCHAR(1:2) == '16') THEN
           FSCOP = (FCHAR(1:2) == '16')
           CALL PR3D(FSCOP)    ! OPERATION: 'FSC' OR 'RF 3'

        ELSEIF (FCHAR(4:5) == 'SN') THEN
           CALL SSNRB

        ELSE
           FSCOP = (FCHAR(1:2) == '17')  ! OPERATION: 'FRC'
           CALL RFACTSDO(FSCOP)

        ENDIF
        RETURN

C       ---------------- CONSTRUCT FOURIER ----------------------- 'CF'
C       CONSTRUCT FOURIER FILE FROM AMPLITUDES & PHASES OF REFLECTIONS.
9       CALL  ERRT(101,'OBSOLETE OPERATION',NE)
        RETURN

C       ---------------- GENERAL FILTER -------------------------- 'GF'
C       FOR QUASI-OPTICAL FOURIER FILTRATION 
10      CALL  ERRT(101,'OBSOLETE OPERATION',NE)
        RETURN

C       ---------------- REDUCE TRANSFORM ------------------------ 'RD'
C       GENERATES REDUCED FOURIER TRANSFORM FROM MASKED FOURIER
11      CALL  ERRT(101,'OBSOLETE OPERATION',NE)
        RETURN


C       FILTER ACCORDING TO A DOCUMENT FILE --------------------- 'FD'

12      IF (FCHAR(4:4) == 'R') THEN
           CALL  ERRT(101,'REMOVED UNDOCUMENTED OPERATION IN 2014',NE)
C          CALL  RADWEIGHT

        ELSE
           CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,NX,NY,NZ,
     &               MAXIM,'INPUT',.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           MAXIM = 0
           CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',IFORM,
     &               NX,NY,NZ, MAXIM,'OUTPUT',.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           CALL  FILTDOC(LUN1,LUN2,NX,NY,NZ,IFORM)
        ENDIF

9000    CLOSE(LUN2)
9001    CLOSE(LUN1)

        END
@


1.60
log
@activated four_fq for 'FQ..'
@
text
@d34 2
d197 1
a197 1
C       FILTER ACCORDING TO A DOCUMENT FILE ---------------------- 'FD'
@


1.59
log
@PR3D_NEW
@
text
@a73 6
1       IF (FCHAR(4:4) == 'Q')  THEN
C          NEW INCORE FQ OPERATION
           CALL FOUR_FQ
        ELSE
           CALL FOUR1A
        ENDIF
d75 2
@


1.58
log
@added prd3_ma  subroutine for 'FSC MA'
@
text
@d163 3
d167 1
a167 1
           CALL PR3D_MA()    ! OPERATION: 'FSC MA'
@


1.57
log
@added four_fq.f
@
text
@d8 1
d14 1
a14 1
C=* Copyright 1985-2014  Health Research Inc.,                         *
a44 1
        CHARACTER(LEN=1)      :: NULL = CHAR(0)
d61 3
a63 1
C                 FQ, FT, FF, FL, FP, EF, PW, RF, CF, GF, RD, FD, 16 = FSC
d106 1
a106 1
           CALL  ERRT(101,'OPERATION IN-CONSISTENT WITH DATA FORMAT',NE)
d114 1
a114 1
        ELSEIF (FCHAR(4:4)=='L' .OR. FCHAR(4:4)=='B') THEN
d163 3
d168 1
a168 1
           CALL PR3D(FSCOP)
d174 1
a174 1
           FSCOP = (FCHAR(1:2) == '17')  ! OPERATION: FRC
@


1.56
log
@removed radweight undocument op, ==, cosmetic
@
text
@d7 1
d67 1
d72 7
a78 1
1       CALL FOUR1A
@


1.55
log
@added fsc, frc
@
text
@d3 4
a6 3
C    FOUR1.F                                                   08/22/96
C              OPFILEC                             FEB  03 ARDEAN LEITH
C              MPI                                 OCT  03 CHAO YANG
d12 1
a12 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d30 2
d53 2
a54 1
     &            'EF','PW', 'RF', 'CF', 'GF', 'RD','FD','16','17'/
d62 1
a62 1
            IF (FCHAR(1:2) .EQ. FUNC(IFUNC)) THEN
d74 1
a74 1
2       IF (FCHAR(4:4) .EQ. 'R') THEN
d84 1
a84 1
3       IF (FCHAR(4:7) .EQ. 'PLOT') THEN
d88 1
d91 1
a91 1
     &              MAXIM,'INPUT',.TRUE.,IRTFLG)
d94 3
a96 3
        IF (IFORM.NE.-11 .AND. IFORM.NE.-12 .AND.
     &      IFORM.NE.-21 .AND. IFORM.NE.-22) THEN
           CALL ERRT(2,'FF',NE)
d100 1
a100 1
        IF (FCHAR(4:4) .EQ. 'S') THEN
d104 1
a104 1
        ELSEIF (FCHAR(4:4).EQ.'L' .OR. FCHAR(4:4).EQ.'B') THEN
d124 1
a124 1
4       CALL  ERRT(41,'FL',NE)
d135 1
a135 1
6       CALL  ERRT(41,'EF',NE)
d169 1
a169 1
9       CALL  ERRT(41,'CF',NE)
a171 1

d174 1
a174 1
10      CALL  ERRT(41,'GF',NE)
a176 1

d179 1
a179 1
11      CALL  ERRT(41,'RD',NE)
d185 3
a187 2
12      IF (FCHAR(4:4) .EQ. 'R') THEN
           CALL  RADWEIGHT
a204 1
        RETURN  
@


1.54
log
@cosmetic
@
text
@d36 2
a37 2
        PARAMETER (NFUNC=12)
        CHARACTER(LEN=2),DIMENSION(NFUNC) :: FUNC
d39 9
a47 5
        CHARACTER(LEN=MAXNAM) ::  FILNAM,FILNAM2
        COMMON /COMMUN/FILNAM,FILNAM2

        CHARACTER(LEN=1) ::       NULL 
        REAL, DIMENSION(6)::      VALUES
d50 1
a50 3
     &            'EF','PW', 'RF', 'CF', 'GF', 'RD','FD'/

        DATA  LUN1,LUN2,LUNF,LUN3 /21,22,23,24/
a51 1
        NULL   = CHAR(0)
d56 1
a56 2

C                 FQ, FT, FF, FL, FP, EF, PW, RF, CF, GF, RD, FD 
d59 1
a59 1
              GOTO ( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), (IFUNC)
d85 1
a85 1
     &               NSAM,NROW,NSLICE,
d97 1
a97 1
C          CALL FSHADO(LUN1,NSAM,NROW)
d101 1
a101 1
C          CALL FILTB(LUN1,NSAM,NROW)
d104 1
a104 1
           NSAMO = NSAM-MOD(-IFORM,10)
d106 1
a106 1
     &             NSAM,NROW,NSLICE,
d113 1
a113 1
           CALL FFILTS(LUN1,LUN2,NSAM,NROW,NSLICE,NSAMO)
d139 4
a142 3
C       COMPUTES VARIOUS MEASURES OF PROXIMITY BETWEEN 2 GIVEN 
C       TRANSFORMS
8       IF(FCHAR(4:6)      .EQ. '3SN')  THEN
d145 1
a145 1
        ELSEIF(FCHAR(4:6)  .EQ. '3NN')  THEN
d148 3
a150 2
        ELSEIF (FCHAR(4:4) .EQ. '3') THEN
           CALL PR3D
d152 1
a152 1
        ELSEIF (FCHAR(4:5) .EQ. 'SN') THEN
d156 2
a157 23
           CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE1,NSAM,NROW,
     &             NSLICE,MAXIM,'FIRST INPUT',.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           IF (ITYPE1 .GT. 1) THEN
              CALL ERRT(2,'RF',NE)
              GOTO 9001
           ENDIF

C          INPUT SECOND IMAGE
           CALL OPFILEC(0,.TRUE.,FILNAM2,LUN2,'O',ITYPE2,NSAM2,NROW2,
     &                 NSLICE2,MAXIM2,'SECOND INPUT',.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9001
           IF (ITYPE1 .NE. ITYPE2) THEN
              CALL ERRT(2,'RF',NE)
              GOTO 9000
           ELSEIF (NSAM.NE.NSAM2 .OR. NROW.NE.NROW2) THEN        
              CALL ERRT(1,'RF',NE)
              GOTO 9000
           ENDIF

           CALL RFACTSDO(LUN1,LUN2,NSAM,NROW,NSLICE,
     &            NSAM2,NROW2,NSLICE2, ITYPE1,ITYPE2)
d186 1
a186 1
           CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
d192 1
a192 1
     &               NSAM,NROW,NSLICE, MAXIM,'OUTPUT',.TRUE.,IRTFLG)
d195 1
a195 1
           CALL  FILTDOC(LUN1,LUN2,NSAM,NROW,NSLICE,IFORM)
@


1.53
log
@CALL SSNRB replaces CALL SSNR (consolidated with opfiles use)
@
text
@d84 3
a86 2
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
     &             MAXIM,'INPUT',.TRUE.,IRTFLG)
d138 1
a138 1
C       -------------- R-FACTOR -------------------------------- 'RF'
d141 1
a141 1
8       IF(FCHAR(4:6).EQ.'3SN')  THEN
d144 1
a144 1
        ELSEIF(FCHAR(4:6).EQ.'3NN')  THEN
@


1.52
log
@GPL_2010
@
text
@d150 1
a150 1
           CALL SSNR
@


1.51
log
@GPL License fixed
@
text
@a7 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d9 5
a13 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d15 1
a15 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.50
log
@HRI GPL License used
@
text
@a7 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d11 1
a11 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a30 6

C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.49
log
@pp's determ. changes
@
text
@d9 24
@


1.48
log
@Removed MPI
@
text
@d130 3
@


1.47
log
@irtflg=0
@
text
@a36 8
#ifdef USE_MPI    
        include 'mpif.h'
        INTEGER  MYPID, COMM, IERR 
        COMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(COMM, MYPID, IERR) 
#else 
        MYPID = -1
#endif 
a130 6
#ifdef USE_MPI
           IF ( MYPID .EQ. 0 ) THEN
              CALL PR3D
           ENDIF
           CALL MPI_BCAST(IBCNT, 1, MPI_INTEGER, 0, COMM, IERR)
#else
a131 1
#endif
@


1.46
log
@mpi
@
text
@d48 2
@


1.45
log
@fd
@
text
@d5 1
d37 8
d137 6
d144 1
@


1.44
log
@rfactsdo parameters changed
@
text
@d186 1
a186 1
     &               MAXIM,'INPUT',.FALSE.,IRTFLG)
d191 1
a191 1
     &               NSAM,NROW,NSLICE, MAXIM,'OUTPUT',.FALSE.,IRTFLG)
d194 1
a194 1
           CALL  FILTDOC(LUN1,LUN2,NSAM,NROW,NSLICE)
@


1.43
log
@opfilec
@
text
@d25 2
a26 2
        CHARACTER(LEN=MAXNAM) ::  FILNAM 
        COMMON /COMMUN/FILNAM
d38 1
d134 23
a156 1
           CALL RFACTSDO
@


1.42
log
@RF 3SN
@
text
@d4 1
d7 6
a12 7
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK        *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND     *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.  *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR   *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR*
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                          *
d20 1
d23 1
a23 1
        CHARACTER *2  FUNC(NFUNC)
d25 1
a25 1
        CHARACTER *81  FILNAM 
d28 2
a29 2
        CHARACTER *1  NULL 
        DIMENSION     VALUES(6)
d32 2
a33 1
     1            'EF','PW', 'RF', 'CF', 'GF', 'RD','FD'/
d48 1
a48 1
C ---------------------- QUICK FILTERING ------------------------- 'FQ'
d52 1
a52 1
C ---------------------- FOURIER TRANSFORM ----------------------- 'FT'
d59 2
a60 1
C ---------------------- FOURIER FILTER -------------------------- 'FF'
d67 1
a67 1
        CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
d69 1
a69 4
        IF (IRTFLG .NE. 0)  THEN
           CALL ERRT(4,'FF',NE)
           RETURN
        ENDIF
d74 1
a74 2
           CLOSE(LUN1)
           RETURN
d76 1
d80 1
d84 1
d87 2
a88 1
           CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM,NROW,NSLICE,
d97 1
a97 3
        CLOSE(LUN1)
        CLOSE(LUN2)
        RETURN  
d99 1
a99 1
C ---------------------- FOURIER LISTING ------------------------- 'FL'
d101 1
a101 2
4       CONTINUE
        CALL  ERRT(41,'FL',NE)
d104 2
a105 1
C ---------------------- FOURIER INTERPOLATION ------------------- 'FP'
d109 2
a110 1
c --------------- EXTRACT FOURIER -------------------------------- 'EF'
d112 1
a112 2
6       CONTINUE
        CALL  ERRT(41,'EF',NE)
d115 1
d120 1
a120 1
C ---------------------- R-FACTOR -------------------------------- 'RF'
d125 1
d128 1
d131 1
d134 1
d138 1
a138 1
C ---------------------- CONSTRUCT FOURIER ----------------------- 'CF'
d140 1
a140 2
9       CONTINUE
        CALL  ERRT(41,'CF',NE)
d143 2
a144 1
C ---------------------- GENERAL FILTER -------------------------- 'GF'
d146 1
a146 2
10      CONTINUE
        CALL  ERRT(41,'GF',NE)
d149 2
a150 1
C ---------------------- REDUCE TRANSFORM ------------------------ 'RD'
d152 1
a152 2
11      CONTINUE
        CALL  ERRT(41,'RD',NE)
a154 1
C ------------- FILTER ACCORDING TO A DOCUMENT FILE ------------- 'FD'
d156 5
a160 2
12      IF(FCHAR(4:4) .EQ. 'R') THEN
          CALL  RADWEIGHT
d162 1
a162 1
        CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
d164 8
a171 3
        IF (IRTFLG .NE. 0)  THEN
           CALL ERRT(4,'FD',NE)
           RETURN
d173 3
a175 10
        MAXIM = 0
        CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM,NROW,NSLICE,
     &               MAXIM,'OUTPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0)  THEN
           CALL ERRT(4,'FD',NE)
           CLOSE(LUN1)
           RETURN
        ENDIF
        CALL  FILTDOC(LUN1,LUN2,NSAM,NROW,NSLICE)
        ENDIF
@


1.41
log
@added FT R command
@
text
@d121 3
a123 1
8       IF (FCHAR(4:4) .EQ. '3') THEN
@


1.40
log
@adapted for four1c.f
@
text
@d17 1
a17 1
	SUBROUTINE FOUR1(MAXMEM)
d51 5
a55 1
2       CALL FOUR1C
a56 1

d59 1
a59 1
C	APPLIES FILTERS TO 2-D OR 3-D FOURIER TRANSFORMS.
d65 2
a66 2
     &		   MAXIM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0)  THEN
d72 5
a76 5
     &	    IFORM.NE.-21 .AND. IFORM.NE.-22) THEN
	   CALL ERRT(2,'FF',NE)
	   CLOSE(LUN1)
	   RETURN
	ENDIF
d78 1
a78 1
	   CALL  ERRT(41,'FF S',NE)
d81 1
a81 1
	   CALL  ERRT(41,'FF L/B',NE)
d84 1
a84 1
	   NSAMO = NSAM-MOD(-IFORM,10)
d86 2
a87 2
     &		   MAXIM,'OUTPUT',.TRUE.,IRTFLG)
	   IF (IRTFLG .NE. 0)  THEN
d96 1
a96 1
        RETURN	
d99 1
a99 1
C 	LISTS MODULI AND PHASES OF 2-D FOURIER TRANSFORMATION.
d101 2
a102 2
	CALL  ERRT(41,'FL',NE)
	RETURN
d109 1
a109 1
C	EXTRACTS CENTRAL SECTION FROM 3-D FOURIER UNDER ARBITRARY ANGLES.
d111 2
a112 2
	CALL  ERRT(41,'EF',NE)
	RETURN
d119 1
a119 1
C	COMPUTES VARIOUS MEASURES OF PROXIMITY BETWEEN 2 GIVEN 
d131 1
a131 1
C	CONSTRUCT FOURIER FILE FROM AMPLITUDES & PHASES OF REFLECTIONS.
d133 2
a134 2
	CALL  ERRT(41,'CF',NE)
	RETURN
d139 2
a140 2
	CALL  ERRT(41,'GF',NE)
	RETURN
d143 1
a143 1
C	GENERATES REDUCED FOURIER TRANSFORM FROM MASKED FOURIER
d145 2
a146 2
	CALL  ERRT(41,'RD',NE)
	RETURN
d151 5
a155 5
	  CALL  RADWEIGHT
	ELSE
	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &		     MAXIM,'INPUT',.FALSE.,IRTFLG)
	IF (IRTFLG .NE. 0)  THEN
d161 2
a162 2
     &		     MAXIM,'OUTPUT',.FALSE.,IRTFLG)
	IF (IRTFLG .NE. 0)  THEN
d167 2
a168 2
	CALL  FILTDOC(LUN1,LUN2,NSAM,NROW,NSLICE)
	ENDIF
d170 1
a170 1
        RETURN	
@


1.39
log
@adapted for four1b.f
@
text
@d51 1
a51 1
2       CALL FOUR1C(MAXMEM)
@


1.38
log
@adapted for four1a.f
@
text
@d112 1
a112 1
7       CALL FOUR1B(MAXMEM)
@


1.37
log
@argument for four1a_fp.f
@
text
@d47 1
a47 1
1       CALL FOUR1A(MAXMEM)
@


1.36
log
@maxmem from filtdoc removed
@
text
@d102 1
a102 1
5       CALL FOUR1A_FP(MAXMEM)
@


1.35
log
@adapted for RF group of commands
@
text
@d164 1
a164 1
	CALL  FILTDOC(LUN1,LUN2,NSAM,NROW,NSLICE,MAXMEM)
@


1.34
log
@add RADWEIGHT
@
text
@d119 1
a119 1
           CALL PR3D(MAXMEM)
d121 1
a121 1
           CALL SSNR(MAXMEM)
d123 1
a123 1
           CALL RFACTSDO(MAXMEM)
@


1.33
log
@cosmetic & maxim
@
text
@a19 1
CNO_SAVE
d147 4
a150 1
12      CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
d165 1
@


1.32
log
@R removed
@
text
@d3 1
a3 1
C    FOUR1.FOR
a4 2
C    08/22/96
C
d18 1
d20 2
a21 1
C
d24 4
a27 3
C
        COMMON /COMMUN/ FILNAM
        CHARACTER *81 FILNAM 
d30 1
a30 1
C
d34 1
a34 1
CNO_SAVE
d36 1
d46 1
d50 1
d54 1
d63 1
a63 1
     &		   IDUM,'INPUT',.TRUE.,IRTFLG)
d68 6
a73 5
        IF(IFORM.NE.-11.AND.IFORM.NE.-12
     &		.AND.IFORM.NE.-21.AND.IFORM.NE.-22) THEN
	CALL ERRT(2,'FF',NE)
	CLOSE(LUN1)
	RETURN
d76 2
a77 2
	CALL  ERRT(41,'FF S',NE)
C           CALL FSHADO(LUN1,NSAM,NROW)
d79 2
a80 2
	CALL  ERRT(41,'FF L/B',NE)
C           CALL FILTB(LUN1,NSAM,NROW)
d82 9
a90 7
	NSAMO=NSAM-MOD(-IFORM,10)
        CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM,NROW,NSLICE,
     &		   IDUM,'OUTPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0)  THEN
        CLOSE(LUN1)
           CALL ERRT(4,'FF',NE)
           RETURN
a91 2
        CALL FFILTS(LUN1,LUN2,NSAM,NROW,NSLICE,NSAMO)
        ENDIF
d95 1
d101 1
d105 1
d111 1
d115 1
d127 1
d133 1
d135 2
a136 2
C         FOR QUASI-OPTICAL FOURIER FILTRATION 
10       CONTINUE
d139 1
d141 1
a141 1
C	  GENERATES REDUCED FOURIER TRANSFORM FROM A MASKED FOURIER
d145 1
d147 3
a149 4
C
12      CONTINUE
       CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &		     IDUM,'INPUT',.TRUE.,IRTFLG)
d154 3
a156 7
	IF(IFORM.LE.0)  THEN
           CALL ERRT(2,'FD',NE)
           CLOSE(LUN1)
           RETURN
        ENDIF	
       CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM,NROW,NSLICE,
     &		     IDUM,'OUTPUT',.TRUE.,IRTFLG)
d163 1
a164 1
C ---------------------------------------------------------------------
@


1.31
log
@remove statements after cf,gf and rd commands. not reached.
@
text
@d134 1
a134 1
       CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM,NROW,NSLICE,
@


1.30
log
@removed non reachable lines of FL.
@
text
@a101 22
	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &		   IDUM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0)  THEN
           CALL ERRT(4,'EF',NE)
           RETURN
        ENDIF
        IF (IFORM .NE. -3) THEN
           CALL ERRT(2,'EF',NE)
           RETURN
	ENDIF
        IFORM = -1
	CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM,NROW,1,
     &		   IDUM,'OUTPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0)  THEN
           CALL ERRT(4,'EF',NE)
	   CLOSE(LUN1)
           RETURN
        ENDIF
C        CALL CSECT(LUN1,LUN2,NSAM,NROW,NSLICE)
        CLOSE(LUN1)
        CLOSE(LUN2)
        RETURN	
a120 7
	IF (FCHAR(4:4).EQ. '3')THEN
C           CALL CREAF3(LUN1)
        ELSE
C           CALL CREATF(LUN1)
	ENDIF
        CLOSE(LUN1)
        RETURN	
a125 25
        CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NDUM,
     &		   IDUM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0)  THEN
           CALL ERRT(4,'GF',NE)
           RETURN
        ENDIF
        IF (IFORM.GE.0) THEN
           CALL ERRT(2,'GF',NE)
           RETURN
	ENDIF
          IF (FCHAR(4:4) .EQ. 'C') THEN
C             CALL FILTM(LUN1,LUN2,LUNF,NSAM,NROW)
          ELSE
	     CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM,NROW,NSLICE,
     &		   IDUM,'OUTPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0)  THEN
           CALL ERRT(4,'GF',NE)
	   CLOSE(LUN1)
           RETURN
        ENDIF
C             CALL FILTG(LUN1,LUN2,LUNF,NSAM,NROW)
          ENDIF
        CLOSE(LUN1)
        CLOSE(LUN2)
        RETURN	
a130 7
	IF (FCHAR(4:4) .EQ. 'D' .OR. FCHAR(4:4) .EQ. 'L') THEN
C            CALL REDUC1(LUN1)
          ELSE
C            CALL REDUCE(LUN1)
          ENDIF
        CLOSE(LUN1)
        RETURN	
d149 1
a150 1
           CLOSE(LUN1)
@


1.29
log
@fd fixed
@
text
@a93 14
       CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM,NROW,NDUM,
     &		     IDUM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0)  THEN
           CALL ERRT(4,'FF',NE)
           RETURN
        ENDIF
        IF (IFORM.NE.-1) THEN
           CALL ERRT(2,'FL',NE)
           RETURN
	ENDIF
C        CALL FLIST(FILNAM,LUN1,LUN2,NSAM,NROW)
        CLOSE(LUN1)
        CLOSE(LUN2)
        RETURN	
@


1.28
log
@FD added
@
text
@d220 1
a220 1
       CALL OPFIL(.TRUE.,FILNAM,LUN2,'R',NSAM,NROW,NSLICE,
@


1.27
log
@file format in FF corrected
@
text
@d22 1
a22 1
        PARAMETER (NFUNC=11)
d31 1
a31 1
     1            'EF','PW', 'RF', 'CF', 'GF', 'RD'/
d36 1
a36 1
C                 FQ, FT, FF, FL, FP, EF, PW, RF, CF, GF, RD 
d39 1
a39 1
              GOTO ( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), (IFUNC)
d205 23
@


1.26
log
@rf cleared
@
text
@d77 1
a77 1
        CALL OPFIL(.TRUE.,FILNAM,LUN2,'O',NSAM,NROW,NSLICE,
@


1.25
log
@FF output added
@
text
@d144 1
a144 1
8       IF (FCHAR(4:4) .EQ. '3' .OR. FCHAR(5:5) .EQ. '3') THEN
d148 1
a148 1
        ELSEIF (FCHAR(4:4) .EQ. 'M') THEN
a149 3
        ELSE
	CALL  ERRT(41,'RF',NE)
C           CALL RFACT(LUN1,LUN2)
@


1.24
log
@bug fixed
@
text
@d77 8
a84 1
        CALL FFILTS(LUN1,NSAM,NROW,NSLICE,NSAMO)
d87 1
@


1.23
log
@RFACT disabled
@
text
@a78 10
C
C       VALUES(1) IS FLAG FOR MIN/MAX SET
        VALUES(1) = 0.0
        VALUES(2) = 0.0
        VALUES(3) = 0.0
        VALUES(4) = 0.0
        VALUES(5) = 0.0
C       NEGATIVE IRTFLG SUPRESSES LABEL CHANGE OUTPUT
        IRTFLG = -1
        CALL SETLAB(LUN1,NSAM,BUF,6,5,VALUES,'U',IRTFLG)
@


1.22
log
@FL disabled
@
text
@d153 2
a154 1
           CALL RFACT(LUN1,LUN2)
@


1.21
log
@new version, remez removed
only from FQ, not from FF
@
text
@d106 1
a106 1
        CALL FLIST(FILNAM,LUN1,LUN2,NSAM,NROW)
@


1.20
log
@filts
@
text
@d70 2
a71 1
           CALL FSHADO(LUN1,NSAM,NROW)
d73 2
a74 1
           CALL FILTB(LUN1,NSAM,NROW)
d76 2
a77 1
        CALL FFILTS(LUN1,NSAM,NROW,NSLICE)
d136 1
a136 1
        CALL CSECT(LUN1,LUN2,NSAM,NROW,NSLICE)
d162 1
a162 1
           CALL CREAF3(LUN1)
d164 1
a164 1
           CALL CREATF(LUN1)
d184 1
a184 1
             CALL FILTM(LUN1,LUN2,LUNF,NSAM,NROW)
d193 1
a193 1
             CALL FILTG(LUN1,LUN2,LUNF,NSAM,NROW)
d204 1
a204 1
            CALL REDUC1(LUN1)
d206 1
a206 1
            CALL REDUCE(LUN1)
@


1.19
log
@IFORM removed
@
text
@d74 1
a74 1
        CALL FFILT(LUN1,NSAM,NROW,NSLICE)
@


1.18
log
@new version, some commands disabled
@
text
@d58 1
a58 1
     &		   IFORM,'INPUT',.TRUE.,IRTFLG)
d94 1
a94 1
     &		     IFORM,'INPUT',.TRUE.,IRTFLG)
d116 1
a116 1
     &		   IFORM,'INPUT',.TRUE.,IRTFLG)
d127 1
a127 1
     &		   IFORM,'OUTPUT',.TRUE.,IRTFLG)
d171 1
a171 1
     &		   IFORM,'INPUT',.TRUE.,IRTFLG)
d184 1
a184 1
     &		   IFORM,'OUTPUT',.TRUE.,IRTFLG)
@


1.17
log
@fixed
@
text
@d5 1
a5 1
C    12/22/94
a19 1

d21 1
a21 1

d24 1
a24 2

        COMMON ADUM(80),BUF(1)
a25 1
        
d29 1
a29 1

d32 1
a33 3

        DATA  LUN1,LUN2,LUNF,LUN3 /7,10,8,9/

a34 2
        NSLICE = 1
        IFOUND = 1
a36 1

a41 1

a43 1

a44 1

d46 1
a46 2
        GOTO 999

a47 1

d49 1
a49 2
        GOTO 999

d55 1
a55 6
           GOTO 999

        ELSEIF (FCHAR(4:6) .EQ. 'ROT') THEN
C          BANDPASS FILTER, ROTFLT
           CALL ROTFLT
           GOTO 999
a56 1

d59 10
a68 3
        IF (IRTFLG .NE. 0) GOTO 999
        IF (IFORM.NE.-1 .AND. IFORM.NE.-7) GOTO 990

a70 1

a72 1

d74 1
a74 5
           IF (NSLICE.GT.1)  THEN
              CALL FILT3_P(LUN1,NSAM,NROW,NSLICE)
           ELSE
              CALL FILT2_Q(LUN1,NSAM,NROW)
           ENDIF
d76 1
a76 1

a82 1

d86 2
a87 2
        GOTO 999

a88 1

d90 4
a93 1
4       CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM,NROW,NDUM,
d95 8
a102 3
        IF (IRTFLG .NE. 0) GOTO 999
        IF (IFORM.NE.-1) GOTO 990

d104 3
a106 2
        GOTO 999	

a107 1

d109 1
a109 2
        GOTO 999

a110 1

d112 4
a115 1
6       CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
d117 8
a124 2
	IF (IRTFLG .NE. 0) RETURN
        IF (IFORM .NE. -3) GOTO 990
d128 5
a132 1
	IF (IRTFLG .NE. 0) GOTO 999
d134 3
a136 2
        GOTO 999

a137 1

d139 1
a139 2
        GOTO 999

a140 1

a142 1

d152 1
a152 2
        GOTO 999
	  
a153 1

d155 4
a158 1
9       IF (FCHAR(4:4).EQ. '3')THEN
d163 2
a164 2
        GOTO 999

a165 1

d167 4
a170 1
10        CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NDUM,
d172 8
a179 3
	  IF (IRTFLG .NE. 0) GOTO 999
          IF (IFORM .GE. 0) GOTO  990

a182 1

d185 5
a189 1
	     IF (IRTFLG .NE. 0) GOTO 999
d192 3
a194 2
          GOTO 999

a195 1

d197 4
a200 1
11        IF (FCHAR(4:4) .EQ. 'D' .OR. FCHAR(4:4) .EQ. 'L') THEN
d205 2
a206 2
          GOTO 999

a207 9

990     CALL ERRT(2,'FOUR1 ',NE)
        GOTO 999

999     CLOSE(LUN1)
        CLOSE(LUN2)
        CLOSE(LUNF)

        RETURN
a208 5
	
	

	
	
@


1.16
log
@merged four1 with part of four1a and four1b
@
text
@d26 1
d28 1
a28 1

d31 1
d46 3
a48 1
            GOTO ( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), (IFUNC)
@


1.15
log
@nosave
@
text
@d5 1
a5 1
C     12/22/94
d21 2
a23 1
        INCLUDE 'CMBLOCK.INC' 
d26 5
d35 8
d44 1
a44 1
          IF (FCHAR(1:2) .EQ. FUNC(IFUNC)) GOTO 2
d46 2
d50 154
a203 6
2       IF(IFUNC .LE. 5) THEN
  	   CALL FOUR1A(MAXMEM,IFUNC)
	ELSE
	   IFUNC = IFUNC - 5
  	   CALL FOUR1B(MAXMEM,IFUNC)
	END IF
d205 5
@


1.14
log
@ breakup into four1a.f and four1b.f
@
text
@d27 1
a39 1
	RETURN
@


1.13
log
@added butterworth filter.
@
text
@d22 2
a23 18
        PARAMETER (NCORE=16)
C     NOTE: FFT DID NOT WORK WHEN NCORE WAS INCREASED TO 17
#ifdef SP_UNIX
        INCLUDE 'CMBLOCK.INC'
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
        COMMON ADUM(80),BUF(2**NCORE)
        COMMON /COMMUN/ FILNAM
        COMMON /OUTP_P/  NOUTT
        DIMENSION     Q(1)
        EQUIVALENCE   (Q,BUF)
        DIMENSION     VALUES(5)
        DIMENSION     MA(3)
        LOGICAL       ERIN
        CHARACTER *81 FILNAM,FILFIL
        CHARACTER *2  CFORM,FUNC(NFUNC)
        CHARACTER *1  NULL,CORN
d25 2
a26 3
        DATA FUNC/'FQ', 'PW', 'FF', 'FL', 'FP', 'EF',
     1            'FT', 'RF', 'CF', 'GF', 'RD'/
        DATA  LUN1,LUN2,LUNF,LUN3/7,10,8,9/
a27 7
        NULL   = CHAR(0)
        IC     = 13
        NSLICE = 1
        INFLUN = 2
        IFOUND = 1
        NE     = 0

d33 7
a39 629
2       GOTO (100,200,300,400,600,700,800,900,1000,1100,1200),IFUNC

C  QUICK FILTERING (IN CORE, 2-D OR 3-D, AS NEED IS)
100	CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM,NROW,NSLICE,
     &  	   IFORM,'INPUT',.FALSE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 999
        IF (IFORM.NE.1.AND.IFORM.NE.3) GOTO 145

	CALL FILERD(FILNAM,NLETI,NULL,'OUTPUT',IRTFLG)
	IF (IRTFLG .EQ. -1) GOTO 130

        NSLICE=MAX0(1,NSLICE)
c        NSAM=2**LOG2(NSAM0)
c        NROW=2**LOG2(NROW0)
c        NSLICE=2**LOG2(NSLICE0)

C	IOPT IS RETURNED BY RDPRMI. SET TO START LOOP    ML.
        IOPT = 0
        DO WHILE (IOPT .LT. 1 .OR. IOPT .GT. 9)
          WRITE(NOUT,1009)
 1009     FORMAT
     &    (' 1 - low-pass, 2 - high-pass, 3 - Gauss low-pass,',
     &     ' 4 - Gauss high-pass',/,
     &     ' 5 - Fermi low-pass, 6 - Fermi high-pass',/,
     &     ' 7 - Buter low-pass, 8 - Buter high-pass',/,
     &     ' 9 - Remez')
          CALL RDPRMI(IOPT,IDUM,NLOOP,ILOOP,'Filter type (1-9)')
        END DO

C       REMEZ FILTER
        IF (IOPT .EQ. 9)  THEN
	  CALL OPFIL(.TRUE.,FILFIL,LUNF,'R',NS1,NR1,NSL1,
     &		     IFORM,'FILTER',.TRUE.,IRTFLG)
	  IF (IRTFLG .NE. 0) GOTO 999
          IF (IFORM .EQ. -1)  THEN
            IF (NS1 .LT. NSAM .OR. NR1 .LT. NROW) GOTO 145
            IF (NS1 .EQ. NSAM .OR. NR1 .EQ. NROW)  THEN
              WRITE(NOUT,*)
     &           ' WARNING! FILTER TOO SMALL TO PAD YOUR IMAGE'
              WRITE(NOUT,*)
     &           ' WITH THE AVERAGE RESULT CAN BE INCORRECT'
            ENDIF

          ELSE IF (IFORM .EQ. -7)  THEN
            IF (NS1 .LT. NSAM .OR. NR1 .LT. NROW .OR. NSL1 .LT. NSLICE) 
     &          GOTO 145
            IF (NS1 .EQ. NSAM .OR. NR1 .EQ. NROW .OR. NSL1 .EQ. NSLICE)
     &        THEN
              WRITE(NOUT,*)
     &           ' WARNING! FILTER TOO SMALL TO PAD YOUR IMAGE'
              WRITE(NOUT,*)
     &           ' WITH THE AVERAGE RESULT CAN BE INCORRECT'
            END IF
          ELSE
            GOTO  145
          ENDIF
          IFORM = IABS(IFORM)
          N2S   = NS1
          N2R   = NR1
          N2L   = NSL1
          IF (IFORM .EQ. 1) THEN
            MEMNEED = (N2S + 2) * N2R + N2S
          ELSE
            MEMNEED = N2S * N2R * N2L + N2S
          ENDIF
          IF (MEMNEED .GT. MAXMEM)  THEN
             CALL  ERRT(6,'FOUR1 ',NE)
             GOTO 999
          ENDIF
c       the following segment works for non-Remez filters.
        ELSE
          IF(IFORM .EQ. 1) THEN
c           MEMNEED = (NSAM+2)*NROW
	    MEMNEED = NSAM*NROW+MAX0(nsam,2*nrow)
          ELSE
            MEMNEED = NSAM*NROW*NSLICE+nsam
     &   +max0(nsam,2*nslice,2*nrow)
          ENDIF
          IF (MEMNEED .GT. MAXMEM)  THEN
            CALL  ERRT(6,'FOUR1 ',NE)
            GOTO 999
          ENDIF
	  IF (FCHAR(4:5) .EQ. 'NP')  THEN
             IF (IFORM .EQ. 1) THEN
                N2S = NSAM
                N2R = NROW
	      ELSE
	        N2S = NSAM
                N2R = NROW
                N2L = NSLICE
	      ENDIF
              GOTO  151
	  ENDIF
C DO THE PADDING
          IF( IFORM .EQ. 1) THEN
C            MEMNEED = (2*NSAM+2)*2*NROW
	     MEMNEED = 2*NSAM*2*NROW+MAX0(2*nsam,2*2*nrow)
          ELSE
             MEMNEED = 8*NSAM*NROW*NSLICE+2*nsam+
     &       max0(2*nsam,4*nslice,4*nrow)
          ENDIF
          IF (MEMNEED.GT.MAXMEM)  THEN
            WRITE(NOUT,*)
     &         ' WARNING! BUFFER TO SMALL TO PAD YOUR IMAGE',
     &         ' WITH THE AVERAGE RESULT CAN BE INCORRECT'
	   IF (IFORM .EQ. 1) THEN
              N2S = NSAM
              N2R = NROW
	   ELSE
	      N2S = NSAM
              N2R = NROW
	      N2L = NSLICE
	   ENDIF
         ELSE
	    IF (IFORM .EQ. 1) THEN
               N2S = 2*NSAM
               N2R = 2*NROW
	       N2L = 1
	     ELSE
	       N2S = 2*NSAM
               N2R = 2*NROW
	       N2L = 2*NSLICE
            ENDIF
	  ENDIF
151       IF (IFORM.EQ.3)  THEN
            WRITE(NOUT,30111)  N2S,N2R,N2L
          ELSE
            WRITE(NOUT,30111)  N2S,N2R
          ENDIF
30111     FORMAT('  Dimensions used: ',3i5)
        ENDIF
        IF (NSLICE .LE. 1) THEN
           IFORM = 1
        ELSE
           IFORM = 3
        ENDIF
	CALL OPFIL(.FALSE.,FILNAM,LUN2,'U',NSAM,NROW,NSLICE,
     &		   IFORM,'OUTPUT',.FALSE.,IRTFLG)
	IF (IRTFLG. NE. 0) GOTO 999
	IFORM1 = IFORM
        IF (IFORM1 .EQ. 1)  THEN
           CALL  FQ_Q(LUN1,LUN2,LUNF,Q,Q(N2S*N2R+1),
     &               N2S,N2R,NSAM,NROW,IOPT)
	   IF (IOPT .LT. 0) GOTO 145
        ELSE
           CALL FQ3_P(LUN1,LUN2,LUNF,Q,Q(N2S*N2R*N2L+1),
     &  Q(N2S*N2R*N2L+1+n2s),N2S,N2R,N2L,NSAM,NROW,NSLICE,IOPT)
        ENDIF
        GOTO 999

C       POWER SPECTRUM
200     CALL  CHKINPQ('LP  $',FCHAR(4:),ICALL1)
        IF (ICALL1 .EQ. 2) GOTO 105
	CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM,NROW,NSLICE,
     &		   IFORM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 999

	IF (IFORM .GT. 0) THEN
C  Real input 2D & 3D
          IF(IFORM.EQ.1)  THEN
C  Real input 2D
            IF ((NSAM+1)*NROW .GT. MAXMEM)  THEN
              CALL  ERRT(6,'FOUR1 ',NE)
              CLOSE(LUN1)
              RETURN
            ENDIF
            IFORM = 1
C  2D power spectrum is transposed !
	    CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NROW,NSAM,NSLICE,
     &		       IFORM,'OUTPUT',.FALSE.,IRTFLG)
	    IF (IRTFLG .NE. 0) GOTO 999
C            CALL  ps2ic(LUN1,LUN2,Q,q(1+nsam*nrow),nsam,nrow,FCHAR(4:4))
            CALL PSICMR(LUN1,LUN2,Q,Q(1+NSAM*NROW),
     &                  NSAM,NROW,FCHAR(4:4))
            GOTO 999
          ELSE
C  No PW for real 3D
            GOTO 145
          ENDIF
	ENDIF
C Fourier input 2D & 3D
        NSLICE = MAX0(1,NSLICE)
        IFI    = IFORM
        IF (NSLICE .EQ. 1)  THEN
          IFORM = 1
        ELSE
          IFORM = 3
        ENDIF
        IF (NSLICE .EQ. 1)  THEN
C  Fourier input 2D
          IF (IFI.EQ.-11 .OR. IFI.EQ.-12) NSAM=NSAM+IFI+10

C  PS FOR 2-D HAS TRANSPOSED FORMAT  !!!!!!!!!!!!!!
	  CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NROW,NSAM,NSLICE,
     &		     IFORM,'OUTPUT',.TRUE.,IRTFLG)
	  IF (IRTFLG .NE. 0) GOTO 999
          IF (IFI .EQ. -11 .OR. IFI .EQ. -12)  THEN
C Mixed-radix Fourier 2D input
            IF ((NSAM)*NROW+MAX0(NSAM,NROW) .GT. MAXMEM)  THEN
              CALL  ERRT(6,'FOUR1 ',NE)
              CLOSE(LUN1)
              RETURN
            ENDIF
            CALL  INTFN2(Q,NSAM,NROW,Q(1+NSAM*NROW),LUN1)
            MM = -1
            CALL PSICMR(MM,LUN2,Q,Q(1+NSAM*NROW),
     &                  NSAM,NROW,FCHAR(4:4))
          ELSE
C Power-of-two Fourier 2D input
            CALL PSQOD_2D(LUN1,LUN2,Q,Q(NSAM+1),
     &                     NSAM,NROW,FCHAR(4:4))
          ENDIF
        ELSE
C Power-of-two Fourier 3D input
	  CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM,NROW,NSLICE,
     &		     IFORM,'OUTPUT',.FALSE.,IRTFLG)
	  IF (IRTFLG .NE. 0) GOTO 999
          IF (NSAM*NROW*NSLICE .GT. MAXMEM)  THEN
C Power-of-two Fourier 3D input - has to be done on disk
            K=2*NROW*NSLICE+1
            CALL PS_OD_3D(LUN1,LUN2,Q,Q(K),Q(K+NSAM),Q(K+2*NSAM),
     &                     Q(K+3*NSAM),Q(K+4*NSAM),Q(K+5*NSAM),
     &                     Q(K+6*NSAM),Q(K+7*NSAM),NSAM,NROW,
     &                     NSLICE,FCHAR(4:4))
          ELSE
C Power-of-two Fourier 3D input - fits into the memory
            DO J = 1, NSLICE
              DO  I = 1, NROW
                L = (J -1)*NROW + I
                  CALL REDLIN(LUN1,Q(1+((I-1)+(J-1)*NROW)*NSAM),NSAM,L)
              END DO
            END DO
            CALL PS_IC_3D(Q,NSAM,NROW,NSLICE,FCHAR(4:4))
            DO  J = 1, NSLICE
              DO  I = 1, NROW
                L = (J - 1)*NROW + I
                CALL WRTLIN(LUN2,Q(1+((I-1)+(J-1)
     &                           *NROW)*NSAM),NSAM,L)
              END DO
            END DO
          ENDIF
        ENDIF
        CLOSE(LUN2)
        GOTO 999

C       HIGH RESOLUTION POWER SPECTRUM  'PW LP'
C Please don't remove following lines:
105     NOUTT=NOUT
C	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',IGQ,IGP,NSLICE,
C     &		   IFORM,'INPUT',.FALSE.,IRTFLG)
C	IF (IRTFLG .NE. 0) GOTO 999
C        IF (IFORM.NE.1) GOTO 145
C        IF (2**LOG2(IGP).NE.IGP.OR.2**LOG2(IGQ).NE.IGQ)  THEN
C          CALL  ERRT(10,'FOUR1 ',NE)
          GOTO 999
C        ENDIF
C153     CALL RDPRMI(IQ,IP,NLOOP,ILOOP,'MODEL ORDERS (IQ,IP)')
C        IF ((IQ*IP -1) .LT .1)  GOTO  153
C        CALL FILERD(FILNAM,NLETO,NULL,'POWER SPECTRUM',IRTFLG)
C        IF (IRTFLG .EQ. -1) GOTO 999
C152     CALL RDPRMI(NSAM,NROW,NLOOP,ILOOP,
C     &              'POWER SPECTRUM SIZE (NSAM,NROW)')
C        IF ( 2**LOG2(NSAM) .NE. NSAM .OR.
C     &       2**LOG2(NROW) .NE. NROW .OR.
C     &       (2*IQ - 1) .GT. NSAM    .OR.
C     &       (2*IP - 1) .GT. NROW         ) GOTO  152
C        IFORM = 1
C        NSLICE=1
C
CC       POWER SPECTRUM IS TRANSPOSED!!!!!!!!!!
C	CALL OPFIL(.FALSE.,FILNAM,LUN2,'U',NSAM,NROW,NSLICE,
C     &		    IFORM,'POWER SPECTRUM',.FALSE.,IRTFLG)
C	IF (IRTFLG .NE. 0) GOTO 999
C
CC	DIMENSION AG(IGQ,IGP),PW(NSAM,NROW)
CC	DIMENSION RK(IP*IQ-1),RM(IP*IQ-1,IP*IQ-1),A(IP*IQ)
CC	DIMENSION R(IQ,2*IP-1)
CC	EQUIVALENCE   (RM,AG,PW)
C
C        CALL RDPRMC(CORN,NC,.TRUE.,
C     &               'CIRCULAR AUTOCORRELATION FUNCTION (Y/N)',
C     &               NULL,IRTFLG)
C
CC       PAD WITH ZEROS
C        IGQT=IGQ
C        IGPT=IGP
C        IF (CORN.NE.'Y')  THEN
C          IGQ=2*IGQ
C          IGP=2*IGP
C        END IF
C        MEMEST = MAX0(NSAM*NROW,IGQ*IGP,(IP*IQ-1)**2)
C     &          + MAX0(IP*IQ-1,NROW)+IP*IQ+IQ*(2*IP-1)
C        IF (MEMEST .GT. MAXMEM)  THEN
C          CALL  ERRT(6,'FOUR1 ',NE)
C          GOTO 999
C        END IF
C        K1=MAX0(IP*IQ,NROW+1)
C        K2=K1
C        K3=K2+MAX0(NSAM*NROW,IGQ*IGP,(IP*IQ-1)**2)
C        K4=K3+IP*IQ
C        K5=K2
C        IF (CORN.NE.'Y')  THEN
C          DO  I= 1, IGQ*IGP
C            Q(K2+I-1)=0.0
C          END DO
C        END IF
C        DO  J = 1, IGPT
C          CALL  REDLIN(LUN1,Q(K2+(J-1)*IGQT),IGQT,J)
C        END DO
C        GOTO 999
C
C	CALL  AR(RK,RM,AG,A,R,IGQ,IGP,IQ,IP,PW,NSAM,NROW)


C       BANDPASS FILTER,ROTFLT
300     CALL CHKINPQ('PLOT,ROT$',FCHAR(4:),ICALL1)
        GOTO(301,302,303),ICALL1

302     CALL FILTPLOT(MAXMEM)
        GOTO 999

303     CALL ROTFLT
        GOTO 999

301	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &		   IFORM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 999
        IF (IFORM.NE.-1 .AND. IFORM.NE.-7) GOTO 145
        IF (FCHAR(4:4) .EQ. 'S') THEN
          CALL FSHADO(LUN1,NSAM,NROW)
        ELSEIF (FCHAR(4:4).EQ.'L' .OR. FCHAR(4:4).EQ.'B') THEN
          CALL FILTB(LUN1,NSAM,NROW)
        ELSE
          IF (NSLICE.GT.1)  THEN
            CALL FILT3_P(LUN1,NSAM,NROW,NSLICE)
          ELSE
            CALL FILT2_Q(LUN1,NSAM,NROW)
          ENDIF
        ENDIF

C       VALUES(1) IS FLAG FOR MIN/MAX SET
        VALUES(1) = 0.0
        VALUES(2) = 0.0
        VALUES(3) = 0.0
        VALUES(4) = 0.0
        VALUES(5) = 0.0

C       NEGATIVE IRTFLG SUPRESSES LABEL CHANGE OUTPUT
        IRTFLG = -1
        CALL SETLAB(LUN1,NSAM,BUF,6,5,VALUES,'U',IRTFLG)
        GOTO 999

C       FOURIER LISTING
400	CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM,NROW,NDUM,
     &		   IFORM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 999
        IF (IFORM.NE.-1) GOTO 145
        CALL FLIST(FILNAM,LUN1,LUN2,NSAM,NROW)
        GOTO 999

C       FOURIER INTERPOLATION / Changed 08/30/89 PP
600	CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM,NROW,NDUM,
     &		   IFORM,'INPUT',.FALSE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 999
        IF (IFORM.NE.1) GOTO 145
        CALL RDPRMI(MGM,NDUMP,NLOOP,ILOOP,
     &              'Magnification factor (2,3,...)')
        MGM = 2**MAX0(1,MGM-1)
        IF (MGM*MGM*NSAM*NROW .LT. MAXMEM)  THEN
	  CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',MGM*NSAM,MGM*NROW,1,
     &		     IFORM,'OUTPUT',.FALSE.,IRTFLG)
	  IF (IRTFLG .NE. 0) GOTO 999
          DO   J = 1, NROW
             CALL REDLIN(LUN1,Q(1+(J-1)*NSAM),NSAM,J)
          END DO
          CALL  FINT(Q,Q,NSAM,NROW,MGM)
          DO    J = 1, MGM*NROW
             CALL WRTLIN(LUN2,Q(1+(J-1)*MGM*NSAM),NSAM*MGM,J)
          END DO
        ELSE
          CALL  ERRT(6,'FINT ',NE)
        ENDIF
        GOTO 999

700	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &		   IFORM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 999
        IF (IFORM.NE.-3) GOTO 145
        IFORM = -1
	CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM,NROW,1,
     &		   IFORM,'OUTPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 999
        CALL CSECT(LUN1,LUN2,NSAM,NROW,NSLICE)
        CLOSE(LUN2)
        GOTO 999

C       FOURIER  TRANSFORMS
800     CONTINUE
        CALL CHKINPQ('MR$',FCHAR(4:),ICALL1)
        IF (ICALL1 .EQ. 2) THEN
          CALL  FTMR(MAXMEM)
          RETURN
        END IF
	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &		   IFORM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 999
        IF ( IFORM .NE. 1  .AND. IFORM .NE. 3 .AND. 
     &       IFORM .NE. -1 .AND. IFORM .NE. -7 )  GOTO 145
        INV   = ISIGN(1,IFORM)
        MA(1) = LOG2(NSAM)
        MA(2) = LOG2(NROW)
        IF (NSLICE.GT.1)  THEN
          MA(3) = LOG2(NSLICE)
        ELSE
          NSLICE = 1
          MA(3)  = 0
        ENDIF
c
        M  = MA(1)+MA(2)+MA(3)
        IB = MA(1)
        IF (M .LT. IC)  IC = M
        IF (NSLICE .GT. 1)  THEN
          NDIM = 3
        ELSE
          NDIM = 2
        ENDIF

C       NEW FOURIER TRANSFORM
        IF (NSLICE.LE.1)  THEN
          IF (INV.GT.0)  THEN
            CFORM(1:2) = 'F2'
          ELSE
            CFORM(1:2) = 'R2'
          ENDIF
          IF ((NSAM+3)*NROW.GT.MAXMEM)  THEN
            IF (INV.GT.0)  THEN
              IT  = 1
              FN  = 1.0
              LUN = LUN1
            ELSE

C             TRANSPOSE DIMENSIONS
              MT       = MA(NDIM)
              MA(NDIM) = MA(1)
              MA(1)    = MT
              LUN      = LUN1
              IT       = -1
              FN       = 1. / (2.**M)
            ENDIF
            WRITE(NOUT,*)
     &       ' **  Warning !   Slow on-disk version of FFT used.'
            CALL RFFT(FN,BUF,IB,IC,MA,NDIM,IT,0)
          ELSE
            IF (INV .GT. 0)  THEN
              DO I= 1, NROW
                CALL  REDLIN(LUN1,Q(1+(I-1)*(NSAM+2)),NSAM,I)
              END DO
              CALL FFTR2_Q(Q,NSAM,NROW,1)
              CALL FFTCOP(LUN1,Q,NSAM/2+1,NROW,Q(1+(NSAM+2)*NROW),1)
            ELSE
              CALL FFTCOP(LUN1,Q,NSAM/2+1,NROW,Q(1+(NSAM+2)*NROW),-1)
              CALL FFTR2_Q(Q,NSAM,NROW,-1)
              DO  I = 1,NROW
                CALL WRTLIN(LUN1,Q(1+(I-1)*(NSAM+2)),NSAM,I)
              END DO
            ENDIF
          ENDIF
        ELSE
          IF (INV.GT.0)  THEN
             CFORM(1:2) = 'Q3'
          ELSE
             CFORM(1:2) = 'R3'
          ENDIF
          IF (NSAM*NROW*NSLICE.GT.MAXMEM)  THEN
            K = NSAM*MAX0(NROW,NSLICE)+2*NROW*NSLICE
            IF (K .GT. MAXMEM)  THEN
              CALL ERRT(6,'FOUR1 ',NE)
              GOTO 999
            ELSE
              WRITE(NOUT,*)
     &           ' **  Warning !   Slow on-disk version of FFT used.'
              KK=K-2*NROW*NSLICE+1
              KK1=KK+NROW*NSLICE
              KK2=KK1+NROW*NSLICE
              CALL  F3MD(LUN1,Q,Q,Q(KK),Q(KK1),Q(KK2),
     &                     NSAM,NROW,NSLICE,INV)
C
                IF(INV.EQ.0)THEN
                CALL ERRT(1,'F3MD ',NE)
                GO TO 999
                ENDIF
C
            ENDIF
          ELSE
            IF (INV .GT. 0)  THEN
              DO   J = 1, NSLICE
                DO  I = 1, NROW
                  L = (J-1)*NROW+I
                  CALL REDLIN(LUN1,Q(1+((I-1)+(J-1)
     &                         *NROW)*NSAM),NSAM,L)
                END DO
              END DO
C
              KK5=1
              KK6=KK5+NSAM*NROW*NSLICE
              CALL  F3MR(Q(KK5),NSAM,NROW,NSLICE,INV,Q(KK6))
C
                IF(INV.EQ.0)THEN
                CALL ERRT(1,'F3MR ',NE)
                GO TO 999
                ENDIF
C
              DO   J = 1, NSLICE
                DO  I = 1, NROW
                  L = (J - 1)*NROW + I
                  CALL WRTLIN( LUN1,
     &                         Q(1 + ((I - 1) + (J - 1)*NROW)*NSAM),
     &                         NSAM,L)
                END DO
              END DO
            ELSE

C             INVERSE 3-D IN CORE
              DO  J = 1, NSLICE
                DO   I = 1, NROW
                  L = (J - 1)*NROW + I
                  CALL REDLIN(LUN1,
     &                        Q( 1 + ((I - 1) + (J - 1)*NROW)*NSAM),
     &                        NSAM,L)
                END DO
              END DO
C
              KK5=1
              KK6=KK5+NSAM*NROW*NSLICE
              CALL  F3MR(Q(KK5),NSAM,NROW,NSLICE,INV,Q(KK6))
C
                IF(INV.EQ.0)THEN
                CALL ERRT(1,'F3MR ',NE)
                GO TO 999
                ENDIF
C
              DO  J = 1, NSLICE
                DO  I = 1, NROW
                  L = (J - 1)*NROW + I
                  CALL WRTLIN(LUN1,
     &                        Q( 1 + ((I - 1) + (J - 1)*NROW)*NSAM),
     &                        NSAM,L)
                 END DO
              END DO
            ENDIF
          ENDIF
        ENDIF
        SIG   = -1.
        IHIST = 0
        LUNN=LUN1

C*********************DEC 87 al
C       VALUE(1) SETS IANGLE
        VALUES(1) = 1.0
        VALUES(2) = 0.0
        VALUES(3) = 0.0

C       NEGATIVE IRTFLG SUPRESSES PRINT-OUT
        IRTFLG    = -1

C       SINCE SETPRM USES UNLABELED COMMON FOR BUF THIS SHOULD BE OK
        CALL SETLAB(LUNN,NSAM,BUF,14,3,VALUES,CFORM,IRTFLG)

C       SET SCALE
        VALUES(1) = 0.0
        IRTFLG    = -1
        CALL SETLAB(LUNN,NSAM,BUF,21,1,VALUES,'U',IRTFLG)

C       FILE NOT SEARCHED FOR MIN-MAX
        VALUES(1) = 0.0
        IRTFLG    = -1
        CALL SETLAB(LUNN,NSAM,BUF, 6,1,VALUES,'U',IRTFLG)
        GOTO 999

900     IF (FCHAR(4:4).EQ.'3' .OR. FCHAR(5:5).EQ. '3') THEN
          CALL PR3D(MAXMEM)
        ELSEIF (FCHAR(4:5).EQ.'SN') THEN
          CALL SSNR(MAXMEM)
        ELSEIF (FCHAR(4:4).EQ.'M') THEN
          CALL RFACTSDO(LUN1,LUN2)
        ELSE
          CALL RFACT(LUN1,LUN2)
        ENDIF
        GOTO 999

1000    IF (FCHAR(4:4).EQ. '3')THEN
          CALL CREAF3(LUN1)
        ELSE
          CALL CREATF(LUN1)
        ENDIF
        GOTO 999

C       GENERAL PERIODIC FILTER
1100	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NDUM,
     &		   IFORM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 999
        IF (IFORM .GE. 0) GOTO  145
        IF (FCHAR(4:4) .EQ. 'C') THEN
          CALL FILTM(LUN1,LUN2,LUNF,NSAM,NROW)
          CLOSE(LUN2)
          GOTO 999
        END IF
	CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM,NROW,NSLICE,
     &		   IFORM,'OUTPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 999
        CALL FILTG(LUN1,LUN2,LUNF,NSAM,NROW)
        GOTO 999

1200    IF (FCHAR(4:4) .EQ. 'D' .OR. FCHAR(4:4) .EQ. 'L') THEN
          CALL REDUC1(LUN1)
        ELSE
          CALL REDUCE(LUN1)
        ENDIF
        GOTO 999
         
130     CALL ERRT(4,'FOUR1 ',NE)
        GOTO 999

145     CALL ERRT(2,'FOUR1 ',NE)
        GOTO 999

999     CLOSE(LUN1)
        CLOSE(LUN2)
        FCHAR(1:1) = ';'
@


1.12
log
@3d mixed radix filtration added
@
text
@d75 1
a75 1
        DO WHILE (IOPT .LT. 1 .OR. IOPT .GT. 7)
d80 4
a83 2
     &     ' 5 - Fermi low-pass, 6 - Fermi high-pass, 7 - Remez')
          CALL RDPRMI(IOPT,IDUM,NLOOP,ILOOP,'Filter type (1-7)')
d87 1
a87 1
        IF (IOPT .EQ. 7)  THEN
@


1.11
log
@mixed radix filtration for 2d
@
text
@d130 2
a131 1
            MEMNEED = NSAM*NROW*NSLICE
d153 2
a154 1
             MEMNEED = 8*NSAM*NROW*NSLICE
d201 1
a201 1
     &               N2S,N2R,N2L,NSAM,NROW,NSLICE,IOPT)
@


1.10
log
@changed 3D F.T. calls to call new mixed radix F.T. programs.
@
text
@d5 1
a5 1
C    KRL 11/15/94
d60 1
a60 1
100	CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM0,NROW0,NSLICE0,
d68 4
a71 4
        NSLICE0=MAX0(1,NSLICE0)
        NSAM=2**LOG2(NSAM0)
        NROW=2**LOG2(NROW0)
        NSLICE=2**LOG2(NSLICE0)
d138 2
a139 2
                N2S = NSAM0
                N2R = NROW0
d159 2
a160 2
              N2S = NSAM0
              N2R = NROW0
d168 2
a169 2
               N2S = 2*NSAM0
               N2R = 2*NROW0
d184 1
a184 1
        IF (NSLICE0 .LE. 1) THEN
d189 1
a189 1
	CALL OPFIL(.FALSE.,FILNAM,LUN2,'U',NSAM0,NROW0,NSLICE0,
d194 2
a195 2
           CALL  FQ_Q(LUN1,LUN2,LUNF,Q,Q((N2S+2)*N2R+1),
     &               N2S,N2R,NSAM0,NROW0,IOPT)
d199 1
a199 1
     &               N2S,N2R,N2L,NSAM0,NROW0,NSLICE0,IOPT)
a200 3
        NSAM   = NSAM0
        NROW   = NROW0
        NSLICE = NSLICE0
@


1.9
log
@cosmetic and fixed newly added typo
@
text
@d5 1
a5 1
C    PAP 05/20/94
d473 1
a473 5
        IF ( NSAM .NE. 2**MA(1) .OR. NROW .NE. 2**MA(2) .OR.
     &       NSLICE .NE. 2**MA(3) ) THEN
          CALL ERRT(10,'FOUR1 ',NE)
          GOTO 999
        ENDIF
d538 3
a540 1
              CALL  F3OD_P(LUN1,Q,Q,Q(KK),Q(KK+NROW*NSLICE),
d542 6
d558 10
a567 1
              CALL  FFTR3_P(Q,NSAM,NROW,NSLICE,INV)
d587 10
a596 1
              CALL  FFTR3_P(Q,NSAM,NROW,NSLICE,INV)
@


1.8
log
@IFROM --> IFORM
@
text
@d85 1
a85 1
        IF (IOPT.EQ.7)  THEN
d89 3
a91 3
          IF (IFORM.EQ.-1)  THEN
            IF (NS1.LT.NSAM.OR.NR1.LT.NROW) GOTO 145
            IF (NS1.EQ.NSAM.OR.NR1.EQ.NROW)  THEN
d97 6
a102 4
          ELSE IF (IFORM.EQ.-7)  THEN
            IF(NS1 .LT. NSAM .OR. NR1 .LT. NROW .OR.
     &         NSL1 .LT. NSLICE) GOTO 145
            IF (NS1 .EQ. NSAM .OR. NR1 .EQ. NROW .OR. NSL1 .EQ. NSLICE)  THEN
d137 1
a137 1
             IF (IFORM.EQ.1) THEN
d158 3
a160 3
	   IF (IFORM.EQ.1) THEN
              N2S=NSAM0
              N2R=NROW0
d162 3
a164 3
	      N2S=NSAM
              N2R=NROW
	      N2L=NSLICE
d185 1
a185 1
           IFORM=1
d187 1
a187 1
           IFORM=3
d265 1
a265 1
            CALL  PSQOD_2D(LUN1,LUN2,Q,Q(NSAM+1),
d276 1
a276 1
            CALL  PS_OD_3D(LUN1,LUN2,Q,Q(K),Q(K+NSAM),Q(K+2*NSAM),
d330 3
a332 3
CC	DIMENSION  AG(IGQ,IGP),PW(NSAM,NROW)
CC	DIMENSION  RK(IP*IQ-1),RM(IP*IQ-1,IP*IQ-1),A(IP*IQ)
CC	DIMENSION  R(IQ,2*IP-1)
d335 1
a335 1
C        CALL  RDPRMC(CORN,NC,.TRUE.,
@


1.7
log
@*** empty log message ***
@
text
@d1 1
a1 1
C++************************************************************************
d3 1
a3 1
C $$ FOUR1.FOR
d5 1
a5 1
C	PAP 05/20/94
d7 9
a15 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
C **************************************************************************
d17 2
a18 6
C
C
C--************************************************************************
C
C $$ FOUR1.FOR
C
d42 1
a42 1
     1  'FT', 'RF', 'CF', 'GF', 'RD'/
d52 1
a52 1
        DO 10 IFUNC = 1,NFUNC
d54 1
a54 1
10      CONTINUE
d77 5
a81 5
 1009 FORMAT
     &(' 1 - low-pass, 2 - high-pass, 3 - Gauss low-pass,',
     & ' 4 - Gauss high-pass',/,
     & ' 5 - Fermi low-pass, 6 - Fermi high-pass, 7 - Remez')
      CALL RDPRMI(IOPT,IDUM,NLOOP,ILOOP,'Filter type (1-7)')
d93 1
a93 1
     &        ' WARNING! FILTER TOO SMALL TO PAD YOUR IMAGE'
d95 1
a95 1
     &        ' WITH THE AVERAGE RESULT CAN BE INCORRECT'
d100 1
a100 2
            IF (NS1 .EQ. NSAM .OR. NR1 .EQ. NROW .OR. 
     &          NSL1 .EQ. NSLICE)  THEN
d102 1
a102 1
     &        ' WARNING! FILTER TOO SMALL TO PAD YOUR IMAGE'
d104 1
a104 1
     &        ' WITH THE AVERAGE RESULT CAN BE INCORRECT'
d109 5
a113 5
          IFORM=IABS(IFORM)
          N2S=NS1
          N2R=NR1
          N2L=NSL1
          IF(IFORM.EQ.1) THEN
d119 2
a120 2
            CALL  ERRT(6,'FOUR1 ',NE)
            GOTO 999
d122 1
a122 1
c the following segment works for non-Remez filters.
d124 3
a126 3
          IF(IFORM.EQ.1) THEN
c           MEMNEED=(NSAM+2)*NROW
	    MEMNEED=NSAM*NROW+MAX0(nsam,2*nrow)
d128 1
a128 1
            MEMNEED=NSAM*NROW*NSLICE
d130 1
a130 1
          IF (MEMNEED.GT.MAXMEM)  THEN
d134 4
a137 4
	  IF(FCHAR(4:5).EQ.'NP')  THEN
              IF(IFORM.EQ.1) THEN
              N2S=NSAM0
              N2R=NROW0
d139 3
a141 3
	      N2S=NSAM
              N2R=NROW
              N2L=NSLICE
d146 3
a148 3
          IF(IFORM.EQ.1) THEN
C            MEMNEED=(2*NSAM+2)*2*NROW
	     MEMNEED=2*NSAM*2*NROW+MAX0(2*nsam,2*2*nrow)
d150 1
a150 1
            MEMNEED=8*NSAM*NROW*NSLICE
d154 5
a158 5
     &      ' WARNING! BUFFER TO SMALL TO PAD YOUR IMAGE
     &      WITH THE AVERAGE RESULT CAN BE INCORRECT'
	   IF(IFORM.EQ.1) THEN
            N2S=NSAM0
            N2R=NROW0
d160 3
a162 3
	    N2S=NSAM
            N2R=NROW
	    N2L=NSLICE
d164 9
a172 9
          ELSE
	    IF(IFORM.EQ.1) THEN
            N2S=2*NSAM0
            N2R=2*NROW0
	    N2L=1
	    ELSE
	    N2S=2*NSAM
            N2R=2*NROW
	    N2L=2*NSLICE
d175 1
a175 1
151       IF(IFORM.EQ.3)  THEN
d182 2
a183 2
        IF(NSLICE0.LE.1) THEN
          IFORM=1
d185 1
a185 1
          IFORM=3
d190 3
a192 3
	IFORM1=IFORM
        IF (IFORM1.EQ.1)  THEN
          CALL  FQ_Q(LUN1,LUN2,LUNF,Q,Q((N2S+2)*N2R+1),
d194 1
a194 1
	if(iopt.lt.0)go to 145
d196 1
a196 1
          CALL FQ3_P(LUN1,LUN2,LUNF,Q,Q(N2S*N2R*N2L+1),
d199 3
a201 3
        NSAM=NSAM0
        NROW=NROW0
        NSLICE=NSLICE0
d206 1
a206 1
        IF(ICALL1.EQ.2) GOTO 105
d208 1
a208 1
     &		   IFROM,'INPUT',.TRUE.,IRTFLG)
d210 1
a210 1
C
d215 1
a215 1
            IF((NSAM+1)*NROW.GT.MAXMEM)  THEN
d236 1
a236 1
        IFI=IFORM
d244 1
a244 1
          IF(IFI.EQ.-11.OR.IFI.EQ.-12) NSAM=NSAM+IFI+10
d250 1
a250 1
          IF(IFI.EQ.-11.OR.IFI.EQ.-12)  THEN
d252 1
a252 1
            IF((NSAM)*NROW+MAX0(NSAM,NROW).GT.MAXMEM)  THEN
d258 1
a258 1
            MM=-1
d271 1
a271 1
          IF (NSAM*NROW*NSLICE.GT.MAXMEM)  THEN
d303 1
a303 1
C     &		   IFROM,'INPUT',.FALSE.,IRTFLG)
d310 2
a311 2
C153     CALL RDPRMI(IQ,IP,NLOOP,ILOOP,'MODEL ORDERS (IQ,IP)$')
C        IF ( (IQ*IP -1) .LT .1)  GOTO  153
d315 1
a315 1
C     &              'POWER SPECTRUM SIZE (NSAM,NROW)$')
a332 2
C
C
d367 1
d379 1
a379 1
     &		   IFROM,'INPUT',.TRUE.,IRTFLG)
d381 1
a381 1
        IF (IFORM.NE.-1.AND.IFORM.NE.-7) GOTO 145
d408 1
a408 1
     &		   IFROM,'INPUT',.TRUE.,IRTFLG)
d416 1
a416 1
     &		   IFROM,'INPUT',.FALSE.,IRTFLG)
d420 1
a420 1
     &              'Magnification factor (2,3,...)$')
d427 1
a427 1
          CALL REDLIN(LUN1,Q(1+(J-1)*NSAM),NSAM,J)
d431 1
a431 1
            CALL WRTLIN(LUN2,Q(1+(J-1)*MGM*NSAM),NSAM*MGM,J)
d439 1
a439 1
     &		   IFROM,'INPUT',.TRUE.,IRTFLG)
d453 1
a453 1
        IF(ICALL1 .EQ. 2) THEN
d458 1
a458 1
     &		   IFROM,'INPUT',.TRUE.,IRTFLG)
d461 2
a462 2
     &       IFORM .NE. -1 .AND. IFORM .NE. -7      )  GOTO 145
        INV=ISIGN(1,IFORM)
d466 1
a466 1
          MA(3)=LOG2(NSLICE)
d469 1
a469 1
          MA(3) = 0
d476 1
a476 1
        M = MA(1)+MA(2)+MA(3)
d478 3
a480 3
        IF (M.LT.IC)  IC=M
        IF (NSLICE.GT.1)  THEN
          NDIM=3
d482 1
a482 1
          NDIM=2
d488 1
a488 1
            CFORM(1:2)='F2'
d490 1
a490 1
            CFORM(1:2)='R2'
d494 3
a496 3
              IT=1
              FN=1.0
              LUN=LUN1
d500 1
a500 1
              MT = MA(NDIM)
d502 4
a505 4
              MA(1) = MT
              LUN=LUN1
              IT=-1
              FN = 1./(2.**M)
d508 1
a508 1
     &      ' **  Warning !   Slow on-disk version of FFT used.  **'
d511 1
a511 1
            IF (INV.GT.0)  THEN
d515 2
a516 2
              CALL  FFTR2_Q(Q,NSAM,NROW,1)
              CALL  FFTCOP(LUN1,Q,NSAM/2+1,NROW,Q(1+(NSAM+2)*NROW),1)
d518 2
a519 2
              CALL  FFTCOP(LUN1,Q,NSAM/2+1,NROW,Q(1+(NSAM+2)*NROW),-1)
              CALL  FFTR2_Q(Q,NSAM,NROW,-1)
d521 1
a521 1
                CALL  WRTLIN(LUN1,Q(1+(I-1)*(NSAM+2)),NSAM,I)
d527 1
a527 1
            CFORM(1:2)='Q3'
d529 1
a529 1
            CFORM(1:2)='R3'
d532 2
a533 2
            K=NSAM*MAX0(NROW,NSLICE)+2*NROW*NSLICE
            IF (K.GT.MAXMEM)  THEN
d538 1
a538 1
     &        ' **  Warning !   Slow on-disk version of FFT used.  **'
d544 1
a544 1
            IF (INV.GT.0)  THEN
d547 2
a548 2
                  L=(J-1)*NROW+I
                  CALL  REDLIN(LUN1,Q(1+((I-1)+(J-1)
d631 1
a631 1
     &		   IFROM,'INPUT',.TRUE.,IRTFLG)
d633 2
a634 2
        IF (IFORM.GE.0) GOTO  145
        IF (FCHAR(4:4).EQ.'C') THEN
d645 1
a645 1
1200    IF (FCHAR(4:4).EQ.'D'.OR.FCHAR(4:4).EQ.'L') THEN
@


1.6
log
@prompt change
@
text
@@


1.5
log
@changed to accomodate mixed radix FFT
@
text
@d80 6
a85 3
          CALL RDPRMI(IOPT,IDUM,NLOOP,ILOOP,
     1    '(1)L.P./(2)H.P./(3)GAUSS L.P./(4)GAUSS H.P./(5)FERMI 
     2    L.P./(6)FERMI H.P./(7)REMEZ$')
@


1.4
log
@changed on May 20th to implement the new fq_q.f program
@
text
@d124 1
d127 2
a128 1
            MEMNEED=(NSAM+2)*NROW
d137 11
a147 5
            N2S=NSAM
            N2R=NROW
            N2L=NSLICE
            GOTO  151
          ENDIF
d149 2
a150 1
            MEMNEED=(2*NSAM+2)*2*NROW
d158 5
a162 1
            N2S=NSAM
d164 2
a165 1
            N2L=NSLICE
d167 6
a172 1
            N2S=2*NSAM
d174 3
a176 3
            N2L=1
            IF(IFORM.EQ.3)  N2L=2*NSLICE
          ENDIF
d196 1
@


1.3
log
@no change
@
text
@@


1.2
log
@cpp_lines_added
@
text
@d5 1
a5 1
C	CHANGED BY JING SU 9/9/93
d192 1
d194 1
d196 1
d203 2
a204 1
	    CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM,NROW,NSLICE,
d212 1
d216 1
d225 1
d228 2
a229 2
C         PS FOR 2-D HAS TRANSPOSED FORMAT  !!!!!!!!!!!!!!
	  CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM,NROW,NSLICE,
d233 1
d244 1
d249 1
d254 1
d261 1
@


1.1
log
@Initial revision
@
text
@d28 3
d32 1
@
