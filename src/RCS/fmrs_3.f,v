head	1.40;
access;
symbols
	pre_mrcs:1.40
	healthdept_2018:1.40
	pre_getangas:1.39
	GPL2010:1.39
	pre_GPL2010:1.38
	pre_var_equation:1.38
	pre_fftwrings:1.38
	pre_opfiles:1.31
	src:1.31
	best-code:1.31
	x-named-regs:1.31
	x:1.31
	v13-00:1.31
	pre_GPL:1.29
	prec_CA:1.22
	noindx:1.20
	Bproc:1.18
	oct21:1.4
	last77:1.4;
locks; strict;
comment	@c @;


1.40
date	2018.10.03.14.34.06;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2010.06.24.13.25.42;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2008.03.07.20.10.48;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2008.02.29.13.12.19;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2008.02.22.16.53.57;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2008.01.24.15.55.35;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2007.12.20.19.28.28;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2007.12.17.15.22.34;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2007.12.12.15.56.19;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2005.10.17.20.15.02;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2005.10.17.18.08.37;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2005.06.02.20.06.44;	author bimal;	state Exp;
branches;
next	1.28;

1.28
date	2005.05.13.20.26.24;	author bimal;	state Exp;
branches;
next	1.27;

1.27
date	2005.05.13.14.59.54;	author bimal;	state Exp;
branches;
next	1.26;

1.26
date	2005.05.04.18.37.10;	author bimal;	state Exp;
branches;
next	1.25;

1.25
date	2005.01.24.18.28.25;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2004.04.27.18.07.58;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2004.04.27.18.00.09;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2003.08.04.17.50.14;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2003.02.13.14.25.15;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2002.12.30.14.35.02;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2002.11.04.18.50.47;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2000.08.18.19.06.07;	author bimal;	state Exp;
branches;
next	1.17;

1.17
date	2000.08.17.21.05.10;	author bimal;	state Exp;
branches;
next	1.16;

1.16
date	2000.08.17.20.57.25;	author bimal;	state Exp;
branches;
next	1.15;

1.15
date	2000.08.17.18.52.27;	author bimal;	state Exp;
branches;
next	1.14;

1.14
date	2000.08.17.18.48.58;	author bimal;	state Exp;
branches;
next	1.13;

1.13
date	2000.05.24.19.49.08;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.24.19.46.54;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.05.24.17.25.49;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.03.28.20.48.20;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2000.03.28.20.09.01;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.28.20.01.24;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.16.15.07.18;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.11.24.15.04.14;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	99.11.10.23.09.19;	author yuchen;	state Exp;
branches;
next	1.4;

1.4
date	98.02.20.16.10.23;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	97.07.25.12.49.03;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	97.07.24.20.01.22;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	96.08.27.13.51.15;	author pawel;	state Exp;
branches;
next	;


desc
@simple 3D fft, calling program
@


1.40
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C FMRS_3.F                       ADDED FFTW        FEB 2000 ARDEAN LEITH
C                                FFTW3 REACTIVATED DEC 2007 ARDEAN LEITH
C                                FMRS REWRITE      JAN 2008 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  FMRS_3(A,NSAM,NROW,NSLICE,INV)
C
C  PARAMETERS:     A       ARRAY (LDA*NROW*NSLICE)        SENT/RET.
C                  INV     1=REG. FILE, -1= FOURIER FILE       SENT
C
C  D REAL MIXED RADIX FFT.
C  INPUT:  X(N) - REAL ARRAY
C  OUTPUT: N EVEN  X(N+2)
C  ORDER OF ELEMENTS:
C  R(0),0.0, R(1), I(1), R(2), I(2), ....., R(N/2-1), I(N/2-1), R(N/2),0.0
C
C         N ODD  X(N+1)
C  R(0),0.0, R(1), I(1), R(2), I(2), ....., R(N/2-1), I(N/2-1), R(N/2),I(N/2)
C 
C  HERE WE FOLLOW THE CONVENTION THAT INTEGER DIVISION 
C  IS ROUNDED DOWN, E.G. 5/2 =2)
C
C  INV: +1 FORWARD FFT
C       -1 INVERSE FFT
C
C  ON OUTPUT INV=0 MAY INDICATE ERROR (NOT GUARANTEED)!!!
C 
C--*********************************************************************

	SUBROUTINE FMRS_3(X,NSAM,NROW,NSLICE,INV)

        REAL, INTENT(INOUT)    :: X(*)
        INTEGER, INTENT(INOUT) :: INV

        CALL FMRS(X,NSAM,NROW,NSLICE, 0.0D0, 
     &            .TRUE.,.TRUE.,INV,IRTFLG)

        IF (IRTFLG .NE. 0) INV = 0

        END


@


1.39
log
@GPL_2010
@
text
@d14 1
a14 1
C=* Email: spider@@wadsworth.org                                        *
@


1.38
log
@removed docalc from fmrs call
@
text
@a8 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d10 5
a14 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d16 1
a16 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.37
log
@docalc parameter for fmrs
@
text
@d64 1
a64 1
     &            .TRUE.,.TRUE.,.TRUE.,INV,IRTFLG)
@


1.36
log
@added plan to fmrs call
@
text
@d63 2
a64 1
        CALL FMRS(X,NSAM,NROW,NSLICE,0.0D0, .TRUE.,.TRUE.,INV,IRTFLG)
@


1.35
log
@calls fmrs
@
text
@d63 1
a63 1
        CALL FMRS(X,NSAM,NROW,NSLICE,.TRUE.,.TRUE.,INV,IRTFLG)
@


1.34
log
@bad ifdef
@
text
@d6 1
d10 1
a10 1
C=* Copyright (C) 1985-2007  Health Research Inc.                      *
a32 1
C  FOR ORDER OF ELEMENTS SEE FMRS_1.
d39 17
a55 1
C IMAGE_PROCESSING_ROUTINE
d58 8
a65 1
	SUBROUTINE FMRS_3(A,NSAM,NROW,NSLICE,INV)
d67 1
a67 54
        INCLUDE 'CMBLOCK.INC'
	
	DIMENSION A(*)

#ifdef SP_LIBFFTW 
C       USING FFTW2 LIBRARY CALLS FOR FFT ----------------------- FFTW2
        CALL ERRT(101,'FFTW2 NO LONGER IN USE, DEFINE SP_LIBFFTW3',IER)
        RETURN
#endif

#ifdef SP_LIBFFT
C       USING SGI_COMPLIB FOR FFT --------------------------------- SGI

	INTEGER, SAVE :: NSAMO=0,NROWO=0,NSLICEO=0
	REAL, DIMENSION(:), POINTER, SAVE :: COEFF

	IF (NSAM   .NE.  NSAMO .OR. 
     &      NROW   .NE.  NROWO .OR. 
     &      NSLICE .NE.  NSLICEO) THEN

	   IF (ASSOCIATED(COEFF)) DEALLOCATE(COEFF)
	   ALLOCATE(COEFF(NSAM+15+2*(NROW+15)+2*(NSLICE+15)),
     &              STAT=IRTFLG)
	   IF (IRTFLG.NE.0) CALL ERRT(46,'FT 2, COEFF',IER)

	   CALL  SCFFT3DUI(NSAM,NROW,NSLICE,COEFF)
	   NSAMO   = NSAM
	   NROWO   = NROW
	   NSLICEO = NSLICE
	ENDIF

	LDA = NSAM+2-MOD(NSAM,2)
	IF (INV.GT.0) THEN
C          FORWARD FFT
	   CALL SCFFT3DU(INV,NSAM,NROW,NSLICE,A,LDA,NROW,COEFF)
	ELSE
C          REVERSE FFT
	   CALL CSFFT3DU(INV,NSAM,NROW,NSLICE,A,LDA,NROW,COEFF)
	   CALL SSCAL3D(NSAM,NROW,NSLICE,
     &	      (1.0/FLOAT(NSAM)/FLOAT(NROW)/FLOAT(NSLICE)),A,LDA,NROW)
	ENDIF

#else
#if defined (SP_LIBFFTW3)
C       USING FFTW3 LIBRARY CALLS FOR FFT ----------------------- FFTW3
        CALL FMRS_FFTW3(A,NSAM,NROW,NSLICE,INV)
#else
C       NATIVE SPIDER FFT  (NOT OPTIMAL) ----------------------- SPIDER

C       HAVE TO CHANGE NSAM
	LDA = NSAM+2-MOD(NSAM,2)
	CALL FMRS_3R(A,LDA,NSAM,NROW,NSLICE,INV)
#endif
#endif
a68 1
	END
@


1.33
log
@removed fftw2
@
text
@d48 6
a90 4
C       USING FFTW2 LIBRARY CALLS FOR FFT ----------------------- FFTW2
        CALL ERRT(101,'FFTW2 NO LONGER IN USE, DEFINE SP_LIBFFTW3',IER)

#else
a97 1
#endif
@


1.32
log
@split out fmrs_fftw3
@
text
@d85 2
a86 148

C       USING FFTW LIBRARY CALLS FOR FFT ------------------------ FFTW
#if defined(SP_LIBFFTW) || defined(SP_LIBFFTWMP)
C       USING FFTW LIBRARY CALLS FOR FFT

#include "FFTW.INC"

	INTEGER, SAVE :: NSAMO=0,  NROWO=0, NSLICEO= 0
	INTEGER, SAVE :: NSAMOR=0, NROWOR=0, NSLICEOR=0
	LOGICAL, SAVE :: INIT=.TRUE.

C       PLAN AND PLANR ARE ACTUALLY POINTERS TO A STRUCTURE 
#if defined (__osf__) || defined (ia64)|| defined (__x86_64__)
        INTEGER*8, SAVE :: PLAN=0, PLANR=0
#else
        INTEGER, SAVE :: PLAN=0, PLANR=0
#endif
        
#ifdef SP_LIBFFTWMP
        IF (INIT) THEN
C          MUST INITIALIZE THREADS ONCE
           irtflg = -4
           CALL FFTW_F77_THREADS_INIT(IRTFLG)
	   IF (IRTFLG .NE. 0) THEN
              CALL ERRT(101,'MULTIPLE THREADS FAILED',IER)
              RETURN
           ENDIF
           INIT = .FALSE.
        ENDIF

        CALL GETTHREADS(NUMTH)
#else
        NUMTH = 1
#endif

C       WRITE(NOUT,90)NUMTH 
90      FORMAT('USING FFTW THREADS: ',I3)

        IF (INV .GT. 0) THEN
C          FORWARD TRANSFORM

	   IF (NSAM.NE.NSAMO .OR. NROW.NE.NROWO .OR. 
     &         NSLICE.NE.NSLICEO) THEN
C             SIZE CHANGED, REESTABLISH PLAN

              IF (PLAN .GT. 0) CALL FFTWND_F77_DESTROY_PLAN(PLAN)

#ifdef SP_LIBFFTWMP
              CALL RFFTW3D_F77_CREATE_PLAN(PLAN,NSAM,NROW,NSLICE,
     &              FFTW_FORWARD, FFTW_ESTIMATE + FFTW_IN_PLACE +
     &                    FFTW_THREADSAFE)
#else
              CALL RFFTW3D_F77_CREATE_PLAN(PLAN,NSAM,NROW,NSLICE,
     &              FFTW_FORWARD, FFTW_ESTIMATE + FFTW_IN_PLACE)
#endif

	      NSAMO   = NSAM
	      NROWO   = NROW
	      NSLICEO = NSLICE
           ENDIF

#ifdef SP_LIBFFTWMP
C          FOR OMP        
#if defined (sgi) || (defined (__linux__) && !defined (SP_IFC))
C          SGI DOES NOT LIKE OBJECT NAMES > 31 CHAR
           CALL RFFTWND_F77_THREADS_ONE_R_TO_C(NUMTH,PLAN,A,0)
#else
           CALL RFFTWND_F77_THREADS_ONE_REAL_TO_COMPLEX(NUMTH,PLAN,A,0)
#endif

#else
C          SINGLE PROCESSOR
           CALL RFFTWND_F77_ONE_REAL_TO_COMPLEX(PLAN,A,0)
#endif

C          CHANGE FFTW FORMAT TO SPIDER FFT FORMAT 
C          SPIDER FORMAT IMAGINARY PARTS HAVE OPPOSITE SIGNS 
C          AS THAT OF FFTW 

	   LDA = NSAM+2-MOD(NSAM,2)
           JH  = LDA/2

c$omp      parallel do private(i)
	   DO   I = 1,JH*NROW*NSLICE	
	      A(2*I) = -A(2*I)           
 	   ENDDO

        ELSE

C          REVERSE TRANSFORM

C          CHANGE SPIDER FFT FORMAT TO FFTW FORMAT
C          IMAGINARY PARTS HAVE OPPOSITE SIGNS AS THAT OF FFTW 


	   LDA = NSAM+2-MOD(NSAM,2)
           JH  = LDA/2

c$omp      parallel do private(i)
	   DO   I = 1,JH*NROW*NSLICE	
	      A(2*I) = -A(2*I)           
 	   ENDDO

	   IF (NSAM.NE.NSAMOR .OR. NROW.NE.NROWOR .OR.
     &         NSLICE.NE.NSLICEOR) THEN
C             SIZE CHANGED, REESTABLISH PLAN

              IF (PLANR .GT. 0) CALL FFTWND_F77_DESTROY_PLAN(PLANR)

#ifdef SP_LIBFFTWMP
C             FOR OMP        
              CALL RFFTW3D_F77_CREATE_PLAN(PLANR,NSAM,NROW,NSLICE,
     &              FFTW_BACKWARD, FFTW_ESTIMATE + FFTW_IN_PLACE +
     &                    FFTW_THREADSAFE)

#else
C             SINGLE PROCESSOR
              CALL RFFTW3D_F77_CREATE_PLAN(PLANR,NSAM,NROW,NSLICE,
     &              FFTW_BACKWARD, FFTW_ESTIMATE + FFTW_IN_PLACE)
#endif
	      NSAMOR   = NSAM
	      NROWOR   = NROW
	      NSLICEOR = NSLICE
           ENDIF

#ifdef SP_LIBFFTWMP
C          FOR OMP 
#if defined (sgi) || (defined (__linux__) && !defined (SP_IFC))
C          SGI & PGI DOES NOT LIKE OBJECT NAMES > 31 CHAR
           CALL RFFTWND_F77_THREADS_ONE_C_TO_R(NUMTH,PLANR,A,0)
#else
           CALL RFFTWND_F77_THREADS_ONE_COMPLEX_TO_REAL(NUMTH,PLANR,A,0)
#endif
#else
C          SINGLE PROCESSOR
           CALL RFFTWND_F77_ONE_COMPLEX_TO_REAL(PLANR,A,0)
#endif

C          SCALING NEEDED
           PIX = 1.0 / (NSAM * NROW * NSLICE)


c$omp      parallel do private(i)
           DO I=1,LDA * NROW * NSLICE
              A(I) = A(I) * PIX
           ENDDO

        ENDIF
@


1.31
log
@GPL License fixed
@
text
@d4 2
a5 1
C FMRS_3.F                          ADDED FFTW FEB 2000 ARDEAN LEITH
d9 1
a9 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d32 1
a32 1
C  FOR ORDER OF ELEMENTS SEE FMR_1.
d49 1
a49 1
C       USING SGI_COMPLIB FOR FFT
d54 3
a56 1
	IF(NSAM.NE.NSAMO .OR. NROW.NE.NROWO .OR. NSLICE.NE.NSLICEO) THEN
d58 1
a58 1
	   IF (ASSOCIATED(COEFF))  DEALLOCATE(COEFF)
d81 6
d235 1
a236 114
#if defined(SP_LIBFFTW3) || defined(SP_LIBFFTW3MP)
C       USING FFTW3 LIBRARY CALLS FOR FFT

#include "FFTW3.INC"

	INTEGER, SAVE :: NSAMO=0,  NROWO=0, NSLICEO= 0
	INTEGER, SAVE :: NSAMOR=0, NROWOR=0, NSLICEOR=0
	LOGICAL, SAVE :: INIT=.TRUE.

C       PLAN AND PLANR ARE ACTUALLY POINTERS TO A STRUCTURE 

        INTEGER*8, SAVE :: PLAN=0, PLANR=0

#ifdef SP_LIBFFTW3MP
        IF (INIT) THEN
	
C          MUST INITIALIZE THREADS ONCE
            IRTFLG = -4

           CALL SFFTW_INIT_THREADS(IRTFLG)

	   IF (IRTFLG .EQ. 0) THEN
              CALL ERRT(101,'MULTIPLE THREADS FAILED -- FFTW3',IER)
              RETURN
           ENDIF
	
	   CALL GETTHREADS(NUMTH)
	   CALL SFFTW_PLAN_WITH_NTHREADS(NUMTH)
           INIT = .FALSE.
        ENDIF
#else
        NUMTH = 1	
#endif

C       WRITE(NOUT,90)NUMTH 
C90      FORMAT('USING FFTW THREADS: ',I3)

        IF (INV .GT. 0) THEN
C          FORWARD TRANSFORM

	   IF (NSAM.NE.NSAMO .OR. NROW.NE.NROWO .OR. 
     &         NSLICE.NE.NSLICEO) THEN
C             SIZE CHANGED, REESTABLISH PLAN

              IF (PLAN .GT. 0) CALL SFFTW_DESTROY_PLAN(PLAN)

              CALL SFFTW_PLAN_DFT_R2C_3D(PLAN,NSAM,NROW,
     &                             NSLICE,A,A,FFTW_ESTIMATE)

	      NSAMO   = NSAM
	      NROWO   = NROW
	      NSLICEO = NSLICE
           ENDIF
C	     USE FFTW3 GURU INTERFACE
           CALL SFFTW_EXECUTE_DFT_R2C(PLAN,A,A) 

C          CHANGE FFTW FORMAT TO SPIDER FFT FORMAT 
C          SPIDER FORMAT IMAGINARY PARTS HAVE OPPOSITE SIGNS 
C          AS THAT OF FFTW 

	   LDA = NSAM+2-MOD(NSAM,2)
           JH  = LDA/2

c$omp      parallel do private(i)
	   DO   I = 1,JH*NROW*NSLICE	
	      A(2*I) = -A(2*I)           
 	   ENDDO

        ELSE

C          REVERSE TRANSFORM

C          CHANGE SPIDER FFT FORMAT TO FFTW FORMAT
C          IMAGINARY PARTS HAVE OPPOSITE SIGNS AS THAT OF FFTW 


	   LDA = NSAM+2-MOD(NSAM,2)
           JH  = LDA/2

c$omp      parallel do private(i)
	   DO   I = 1,JH*NROW*NSLICE	
	      A(2*I) = -A(2*I)           
 	   ENDDO

	   IF (NSAM.NE.NSAMOR .OR. NROW.NE.NROWOR .OR.
     &         NSLICE.NE.NSLICEOR) THEN
C             SIZE CHANGED, REESTABLISH PLAN

              IF (PLANR .GT. 0) CALL SFFTW_DESTROY_PLAN(PLANR)

              CALL SFFTW_PLAN_DFT_C2R_3D(PLANR,NSAM,NROW,
     &                              NSLICE,A,A,FFTW_ESTIMATE)
	      NSAMOR   = NSAM
	      NROWOR   = NROW
	      NSLICEOR = NSLICE
           ENDIF

C         USE FFTW3 GURU INTERFACE
           CALL SFFTW_EXECUTE_DFT_C2R(PLANR,A,A)

C          SCALING NEEDED
           PIX = 1.0 / (NSAM * NROW * NSLICE)


c$omp      parallel do private(i)
           DO I=1,LDA * NROW * NSLICE
              A(I) = A(I) * PIX
           ENDDO

        ENDIF

#else

C       USING SPIDER CODE FOR FFT
d245 1
@


1.30
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a6 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
a30 1
C **************************************************************************
a39 1
C--************************************************************************
@


1.29
log
@reverted back to using GURU interface as per advice of FFTW developers
@
text
@d2 1
d7 1
d9 1
d11 24
d41 1
d51 1
@


1.28
log
@copied the image to a fixed buffer and didn't use FFTW GURU INTERFACE
@
text
@d223 1
a223 3
	REAL, ALLOCATABLE, DIMENSION(:), SAVE :: XY
	REAL, ALLOCATABLE, DIMENSION(:), SAVE :: AB	
	
a250 23
           LDA = NSAM+2-MOD(NSAM,2)

	   IF (NSAM.NE.NSAMO .OR. NROW.NE.NROWO .OR. 
     &         NSLICE.NE.NSLICEO) THEN
C            SIZE CHANGED MUST REESTABLISH XY
	      IF (ALLOCATED(XY))  DEALLOCATE(XY)
	   
	      ALLOCATE(XY(LDA*NROW*NSLICE),STAT=IRTFLG)
	      IF (IRTFLG.NE.0) THEN
	         CALL ERRT(46,'FMRS_3, XY',IER)
	         RETURN
              ENDIF
	   ENDIF
C        COPYING IMAGE TO BUFFER 
c$omp    parallel do private(i)
	   DO   I = 1,LDA*NROW*NSLICE	
	      XY(I) = A(I)        
 	   ENDDO	
C           do i = 1, LDA*NROW*NSLICE
C	      write(NOUT,*) xy(i)
C	      write(NOUT,*) a(i)
C           enddo

d258 2
a259 1
     &                             NSLICE,XY,XY,FFTW_ESTIMATE)
d264 3
a266 3
           
	   CALL SFFTW_EXECUTE(PLAN)
	   
d271 1
d276 1
a276 7
	      XY(2*I) = -XY(2*I)           
 	   ENDDO
	   
C         COPY FROM BUFFER    
c$omp     parallel do private(i)
	   DO   I = 1,LDA*NROW*NSLICE	
	      A(I) = XY(I)           
a277 1
 
d283 3
a288 19
	   IF (NSAM.NE.NSAMOR .OR. NROW.NE.NROWOR .OR.
     &         NSLICE.NE.NSLICEOR) THEN
C           SIZE CHANGED MUST REESTABLISH AB
	      IF (ALLOCATED(AB))  DEALLOCATE(AB)
	   
	      ALLOCATE(AB(LDA*NROW*NSLICE),STAT=IRTFLG)
	      IF (IRTFLG.NE.0) THEN
	         CALL ERRT(46,'FMRS_3, AB',IER)
                 RETURN
	      ENDIF
	   ENDIF
C         COPY IMAGE TO BUFFER 	
c$omp     parallel do private(i)
	   DO   I = 1,LDA*NROW*NSLICE	
	      AB(I) = A(I)           
 	   ENDDO	   	

C          CHANGE SPIDER FFT FORMAT TO FFTW FORMAT
C          IMAGINARY PARTS HAVE OPPOSITE SIGNS AS THAT OF FFTW 
d292 1
a292 1
	      AB(2*I) = -AB(2*I)           
d302 1
a302 1
     &                              NSLICE,AB,AB,FFTW_ESTIMATE)
d308 2
a309 2

           CALL SFFTW_EXECUTE(PLANR)
d317 1
a317 1
              A(I) = AB(I) * PIX
@


1.27
log
@fixed bug in forward transform
@
text
@d223 3
a225 1

d253 23
d283 1
a283 2
     &                             NSLICE,A,A,FFTW_ESTIMATE)

d288 3
a290 3
C	     USE FFTW3 GURU INTERFACE
           CALL SFFTW_EXECUTE_DFT_R2C(PLAN,A,A) 

a294 1
	   LDA = NSAM+2-MOD(NSAM,2)
d299 7
a305 1
	      A(2*I) = -A(2*I)           
d307 1
a312 3
C          CHANGE SPIDER FFT FORMAT TO FFTW FORMAT
C          IMAGINARY PARTS HAVE OPPOSITE SIGNS AS THAT OF FFTW 

d316 19
d338 1
a338 1
	      A(2*I) = -A(2*I)           
d348 1
a348 1
     &                              NSLICE,A,A,FFTW_ESTIMATE)
d354 2
a355 2
C         USE FFTW3 GURU INTERFACE
           CALL SFFTW_EXECUTE_DFT_C2R(PLANR,A,A)
d363 1
a363 1
              A(I) = A(I) * PIX
@


1.26
log
@added fftw3
@
text
@a258 2
C	     USE FFTW3 GURU INTERFACE
              CALL SFFTW_EXECUTE_DFT_R2C(PLAN,A,A) 
d264 2
@


1.25
log
@for __x86_64__
@
text
@d82 1
a82 1
           CALL FFTW_F77_THREADS_INIT(IRTFLG);
d84 1
a84 1
              CALL ERRT(101,'MUTIPLE THREADS FAILED',IER)
d210 114
d330 1
@


1.24
log
@save
@
text
@d72 1
a72 1
#if defined (__osf__) || defined (ia64)
@


1.23
log
@ia64
@
text
@a76 1
        LOGICAL, SAVE :: INIT=.TRUE.
@


1.22
log
@ && !defined (SP_IFC))
@
text
@d72 4
a75 5
#ifdef __osf__
        INTEGER*8 PLAN, PLANR
        DATA PLAN,PLANR/0,0/
#else        
	INTEGER, SAVE :: PLAN=0, PLANR=0
d77 1
d143 1
a143 1
c$omp parallel do private(i)
d159 1
a159 1
c$omp parallel do private(i)
d189 1
a189 1
C          SGI DOES NOT LIKE OBJECT NAMES > 31 CHAR
d203 1
a203 1
c$omp parallel do private(i)
@


1.21
log
@linus fftw
@
text
@d124 1
a124 1
#if defined (sgi) || defined (__linux__)
d188 1
a188 1
#if defined (sgi) || defined (__linux__)
@


1.20
log
@removed number of threads msg
@
text
@d124 1
a124 1
#ifdef sgi
d188 1
a188 1
#ifdef sgi
@


1.19
log
@|| directives
@
text
@d96 1
a96 1
        WRITE(NOUT,90)NUMTH 
@


1.18
log
@*** empty log message ***
@
text
@d1 1
a1 1
C
d143 1
d159 1
d203 1
a218 1
C
@


1.17
log
@*** empty log message ***
@
text
@d144 1
a144 1
	      A(I) = -A(I)           
d159 1
a159 1
	      A(I) = -A(I)           
@


1.16
log
@*** empty log message ***
@
text
@d143 1
a143 1
	   DO   I = JH*NROW*NSLICE	
d158 1
a158 1
	   DO   I = JH*NROW*NSLICE	
@


1.15
log
@corrected comments
@
text
@d141 1
a141 7
	   DO K = 1,NSLICE
	      DO   J=1, NROW	   
	         DO   I=1, LDA/2	
	            A(2*I,J,K) = -  A(2*I,J,K)           
 	         ENDDO
	      ENDDO	
	   ENDDO
d143 3
d156 5
a160 7
	   DO K = 1,NSLICE
	      DO   J=1, NROW	   
	         DO   I=1, LDA/2	
	            A(2*I,J,K) = -  A(2*I,J,K)           
 	         ENDDO
	      ENDDO	
	   ENDDO
@


1.14
log
@adapted fftw format to spider fft format
@
text
@d20 1
a20 1
C                  INV     1=REG. FILE, 2= FOURIER FILE       SENT
@


1.13
log
@for dec
@
text
@d136 14
d151 1
d154 13
d204 1
a204 1
	   LDA = NSAM + 2 - MOD(NSAM,2)
@


1.12
log
@for dec
@
text
@d69 1
a77 2
	INTEGER, SAVE :: PLAN=0, PLANR=0
	LOGICAL, SAVE :: INIT=.TRUE.
@


1.11
log
@sgi cpp
@
text
@d71 6
@


1.10
log
@cmblock.inc
@
text
@d118 4
a121 2
#ifdef SP_IBMSP3
            CALL RFFTWND_F77_THREADS_ONE_REAL_TO_COMPLEX(NUMTH,PLAN,A,0)
d123 1
a123 2
C           SGI DOES NOT LIKE OBJECT NAMES > 31 CHAR
            CALL RFFTWND_F77_THREADS_ONE_R_TO_C(NUMTH,PLAN,A,0)
d127 2
a128 1
            CALL RFFTWND_F77_ONE_REAL_TO_COMPLEX(PLAN,A,0)
d141 1
d147 1
d157 5
a161 1
#ifdef SP_IBMSP3
a162 2
#else
           CALL RFFTWND_F77_THREADS_ONE_C_TO_R(NUMTH,PLANR,A,0)
d165 1
@


1.9
log
@ibm
@
text
@d26 2
@


1.8
log
@added IBM long object name ifdef
@
text
@d151 3
a153 1
cc         CALL RFFTWND_F77_THREADS_ONE_COMPLEX_TO_REAL(NUMTH,PLANR,A,0)
d155 1
@


1.7
log
@for use with fftw
@
text
@d116 4
a119 1
cc          CALL RFFTWND_F77_THREADS_ONE_REAL_TO_COMPLEX(NUMTH,PLAN,A,0)
d121 1
@


1.6
log
@changed to allocate
@
text
@d4 1
a4 1
C $$ FMRS_3.FOR
d15 1
a15 1
C  For order of elements see fmr_1.
d17 1
d19 4
d24 3
a26 4
C
C $$ FMRS_3.FOR
C
	SUBROUTINE FMRS_3(A,NSAM,NROW,NSLICE,INV)	
d28 1
d30 2
d34 1
d36 10
a45 7
	  IF(ASSOCIATED(COEFF))  DEALLOCATE(COEFF)
	  ALLOCATE(COEFF(NSAM+15+2*(NROW+15)+2*(NSLICE+15)),STAT=IRTFLG)
	  IF(IRTFLG.NE.0) CALL ERRT(46,'FT 2, COEFF',IER)
	  CALL  SCFFT3DUI(NSAM,NROW,NSLICE,COEFF)
	  NSAMO=NSAM
	  NROWO=NROW
	  NSLICEO=NSLICE
d47 5
a51 3
	  LDA=NSAM+2-MOD(NSAM,2)
	IF(INV.GT.0)  THEN
	 CALL  SCFFT3DU(INV,NSAM,NROW,NSLICE,A,LDA,NROW,COEFF)
d53 4
a56 3
	 CALL  CSFFT3DU(INV,NSAM,NROW,NSLICE,A,LDA,NROW,COEFF)
	 CALL  SSCAL3D(NSAM,NROW,NSLICE,
     &	  (1.0/FLOAT(NSAM)/FLOAT(NROW)/FLOAT(NSLICE)),A,LDA,NROW)
d58 61
d120 47
a166 2
C Have to change NSAM
	LDA=NSAM+2-MOD(NSAM,2)
d169 2
@


1.5
log
@a
@
text
@a23 1

d25 10
a34 6
C The same common appears in FMRS_2
	PARAMETER  (LC=40000)
	COMMON /LIBFFT_D/  COEFF(LC)
	IF(NSAM+15+2*(NROW+15)+2*(NSLICE+15).GT.LC)  THEN
	CALL  ERRT(6,'FMRS_3 ',NE)
	RETURN
d36 1
a36 2
	LDA=NSAM+2-MOD(NSAM,2)
	CALL  SCFFT3DUI(NSAM,NROW,NSLICE,COEFF)
d38 1
a38 1
	CALL  SCFFT3DU(INV,NSAM,NROW,NSLICE,A,LDA,NROW,COEFF)
d40 3
a42 3
	CALL  CSFFT3DU(INV,NSAM,NROW,NSLICE,A,LDA,NROW,COEFF)
	CALL  SSCAL3D(NSAM,NROW,NSLICE,
     &	(1.0/FLOAT(NSAM)/FLOAT(NROW)/FLOAT(NSLICE)),A,LDA,NROW)
@


1.4
log
@buffer increased to 40000
@
text
@d24 1
a24 1
CNO_SAVE
@


1.3
log
@nosave
@
text
@d27 1
a27 1
	PARAMETER  (LC=10000)
@


1.2
log
@use libfft
@
text
@d24 1
@


1.1
log
@Initial revision
@
text
@d24 18
a41 1
CNO_SAVE
d43 3
a45 1
	CALL FMRS_3R(A,NSAM+2-MOD(NSAM,2),NSAM,NROW,NSLICE,INV)
@
