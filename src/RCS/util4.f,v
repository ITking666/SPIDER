head	1.110;
access;
symbols
	pre_getangas:1.104
	GPL2010:1.102
	pre_GPL2010:1.101
	pre_var_equation:1.97
	pre_fftwrings:1.93
	pre_opfiles:1.92
	src:1.92
	best-code:1.91
	named-reg:1.87
	x-named-regs:1.86
	x:1.86
	v13-00:1.83
	pre_GPL:1.81
	prec_CA:1.74
	noindx:1.61
	Bproc:1.41
	oct21:1.33
	last77:1.26;
locks; strict;
comment	@c @;


1.110
date	2015.06.15.15.33.24;	author leith;	state Exp;
branches;
next	1.109;

1.109
date	2013.04.22.14.18.36;	author leith;	state Exp;
branches;
next	1.108;

1.108
date	2012.12.07.14.50.38;	author leith;	state Exp;
branches;
next	1.107;

1.107
date	2012.05.10.14.43.47;	author leith;	state Exp;
branches;
next	1.106;

1.106
date	2012.03.15.19.18.03;	author leith;	state Exp;
branches;
next	1.105;

1.105
date	2011.05.16.14.55.57;	author leith;	state Exp;
branches;
next	1.104;

1.104
date	2010.10.13.14.23.23;	author leith;	state Exp;
branches;
next	1.103;

1.103
date	2010.08.06.18.16.06;	author leith;	state Exp;
branches;
next	1.102;

1.102
date	2010.06.24.13.27.13;	author leith;	state Exp;
branches;
next	1.101;

1.101
date	2010.01.19.14.14.13;	author leith;	state Exp;
branches;
next	1.100;

1.100
date	2009.11.19.18.42.51;	author leith;	state Exp;
branches;
next	1.99;

1.99
date	2009.11.19.18.39.01;	author leith;	state Exp;
branches;
next	1.98;

1.98
date	2009.08.10.16.35.36;	author leith;	state Exp;
branches;
next	1.97;

1.97
date	2009.05.13.16.17.00;	author leith;	state Exp;
branches;
next	1.96;

1.96
date	2008.10.31.17.08.27;	author leith;	state Exp;
branches;
next	1.95;

1.95
date	2008.06.18.15.23.07;	author leith;	state Exp;
branches;
next	1.94;

1.94
date	2008.06.18.15.00.58;	author leith;	state Exp;
branches;
next	1.93;

1.93
date	2007.02.12.19.14.59;	author leith;	state Exp;
branches;
next	1.92;

1.92
date	2006.07.11.20.54.30;	author bimal;	state Exp;
branches;
next	1.91;

1.91
date	2006.01.06.14.41.29;	author leith;	state Exp;
branches;
next	1.90;

1.90
date	2005.12.30.16.33.33;	author leith;	state Exp;
branches;
next	1.89;

1.89
date	2005.12.30.16.20.54;	author leith;	state Exp;
branches;
next	1.88;

1.88
date	2005.12.29.21.17.29;	author leith;	state Exp;
branches;
next	1.87;

1.87
date	2005.12.12.15.31.26;	author leith;	state Exp;
branches;
next	1.86;

1.86
date	2005.12.08.15.37.11;	author leith;	state Exp;
branches;
next	1.85;

1.85
date	2005.12.07.21.21.30;	author leith;	state Exp;
branches;
next	1.84;

1.84
date	2005.11.15.21.51.30;	author leith;	state Exp;
branches;
next	1.83;

1.83
date	2005.10.17.20.50.28;	author leith;	state Exp;
branches;
next	1.82;

1.82
date	2005.10.17.18.40.52;	author leith;	state Exp;
branches;
next	1.81;

1.81
date	2005.06.03.18.00.13;	author bbaxter;	state Exp;
branches;
next	1.80;

1.80
date	2005.04.21.18.41.48;	author leith;	state Exp;
branches;
next	1.79;

1.79
date	2005.01.03.16.10.18;	author leith;	state Exp;
branches;
next	1.78;

1.78
date	2004.11.19.22.30.08;	author cyang;	state Exp;
branches;
next	1.77;

1.77
date	2004.05.06.20.44.53;	author pawel;	state Exp;
branches;
next	1.76;

1.76
date	2004.04.02.20.28.48;	author leith;	state Exp;
branches;
next	1.75;

1.75
date	2004.02.05.14.20.19;	author leith;	state Exp;
branches;
next	1.74;

1.74
date	2003.08.27.14.20.48;	author leith;	state Exp;
branches;
next	1.73;

1.73
date	2003.08.08.16.57.08;	author leith;	state Exp;
branches;
next	1.72;

1.72
date	2003.08.07.18.54.47;	author leith;	state Exp;
branches;
next	1.71;

1.71
date	2003.07.09.16.30.13;	author leith;	state Exp;
branches;
next	1.70;

1.70
date	2003.05.13.13.59.04;	author pawel;	state Exp;
branches;
next	1.69;

1.69
date	2003.04.09.15.30.08;	author leith;	state Exp;
branches;
next	1.68;

1.68
date	2003.04.09.13.45.18;	author leith;	state Exp;
branches;
next	1.67;

1.67
date	2003.04.08.18.12.03;	author leith;	state Exp;
branches;
next	1.66;

1.66
date	2003.02.26.17.10.55;	author leith;	state Exp;
branches;
next	1.65;

1.65
date	2003.02.26.16.31.14;	author leith;	state Exp;
branches;
next	1.64;

1.64
date	2003.02.21.19.15.19;	author leith;	state Exp;
branches;
next	1.63;

1.63
date	2003.02.19.21.10.20;	author leith;	state Exp;
branches;
next	1.62;

1.62
date	2003.01.23.15.51.03;	author leith;	state Exp;
branches;
next	1.61;

1.61
date	2002.08.22.15.36.07;	author leith;	state Exp;
branches;
next	1.60;

1.60
date	2002.08.19.18.52.12;	author leith;	state Exp;
branches;
next	1.59;

1.59
date	2002.08.15.19.08.49;	author leith;	state Exp;
branches;
next	1.58;

1.58
date	2002.08.14.13.38.51;	author leith;	state Exp;
branches;
next	1.57;

1.57
date	2002.06.26.19.38.37;	author leith;	state Exp;
branches;
next	1.56;

1.56
date	2002.05.10.19.09.35;	author pawel;	state Exp;
branches;
next	1.55;

1.55
date	2002.05.08.20.32.06;	author pawel;	state Exp;
branches;
next	1.54;

1.54
date	2002.05.02.23.07.32;	author pawel;	state Exp;
branches;
next	1.53;

1.53
date	2002.05.02.16.19.33;	author pawel;	state Exp;
branches;
next	1.52;

1.52
date	2002.03.27.20.21.15;	author leith;	state Exp;
branches;
next	1.51;

1.51
date	2002.03.04.18.40.24;	author leith;	state Exp;
branches;
next	1.50;

1.50
date	2001.10.31.21.03.45;	author hxgao;	state Exp;
branches;
next	1.49;

1.49
date	2001.04.13.16.04.07;	author leith;	state Exp;
branches;
next	1.48;

1.48
date	2001.02.23.16.25.33;	author leith;	state Exp;
branches;
next	1.47;

1.47
date	2001.02.23.16.11.36;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2001.01.22.16.22.52;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2001.01.22.15.23.25;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2000.09.29.13.55.24;	author bimal;	state Exp;
branches;
next	1.43;

1.43
date	2000.09.19.20.12.06;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2000.09.19.19.56.32;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2000.09.11.20.28.34;	author pawel;	state Exp;
branches;
next	1.40;

1.40
date	2000.09.11.19.24.20;	author pawel;	state Exp;
branches;
next	1.39;

1.39
date	2000.03.21.21.06.03;	author bimal;	state Exp;
branches;
next	1.38;

1.38
date	2000.03.06.19.58.33;	author bimal;	state Exp;
branches;
next	1.37;

1.37
date	2000.03.06.18.29.55;	author bimal;	state Exp;
branches;
next	1.36;

1.36
date	2000.02.16.20.48.55;	author bimal;	state Exp;
branches;
next	1.35;

1.35
date	99.12.23.20.05.29;	author bimal;	state Exp;
branches;
next	1.34;

1.34
date	99.11.10.13.30.52;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	99.08.05.20.37.07;	author pawel;	state Exp;
branches;
next	1.32;

1.32
date	99.08.04.13.03.51;	author pawel;	state Exp;
branches;
next	1.31;

1.31
date	99.07.07.14.12.46;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	99.07.07.13.54.43;	author pawel;	state Exp;
branches;
next	1.29;

1.29
date	99.06.22.19.51.54;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	99.06.22.15.35.27;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	99.04.05.18.16.58;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	99.03.01.18.59.34;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	99.02.19.16.59.32;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	98.10.31.19.41.49;	author pawel;	state Exp;
branches;
next	1.23;

1.23
date	98.04.07.12.30.32;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	98.02.26.19.34.07;	author pawel;	state Exp;
branches;
next	1.21;

1.21
date	98.01.27.17.16.56;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	98.01.12.18.07.38;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	98.01.02.16.37.18;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	97.09.30.21.31.32;	author pawel;	state Exp;
branches;
next	1.17;

1.17
date	97.09.11.15.02.43;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	97.01.23.20.07.57;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	97.01.21.15.20.54;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	96.12.03.18.27.15;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	96.11.25.19.30.49;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	96.08.16.13.55.28;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	96.05.06.19.16.54;	author ramani;	state Exp;
branches;
next	1.10;

1.10
date	96.04.23.18.44.57;	author mladjadj;	state Exp;
branches;
next	1.9;

1.9
date	96.04.23.15.11.17;	author mladjadj;	state Exp;
branches;
next	1.8;

1.8
date	96.04.23.14.53.02;	author mladjadj;	state Exp;
branches;
next	1.7;

1.7
date	95.10.11.17.22.59;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	95.03.17.18.56.39;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	94.11.28.21.34.05;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	94.11.17.19.17.35;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	94.09.28.19.45.39;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.12.22;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.53.40;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.110
log
@'IQ PAR' PROMPT
@
text
@C++*********************************************************************
C
C  UTIL4.F            ADDED IQ                      SEP 97 ARDEAN LEITH
C                     ADDED IQ SYNC                 JUN 99 ARDEAN LEITH
C                     ADDED NEG                     JUN 99 ARDEAN LEITH
C                     NEG BUG                       FEB 01 ARDEAN LEITH
C                     'AP MQ I'                     APR 01 ARDEAN LEITH
C                     ADDED 'AP RQ'                 OCT 01 HAIXIAO GAO
C                     ADDED 'IQ W'                  MAR 02 ARDEAN LEITH
C                     ADDED 'IQ PAR'                JUN 02 ARDEAN LEITH
C                     ADDED 'IQ GONE'               AUG 02 ARDEAN LEITH
C                     ADDED 'MS' VOLUMES            AUG 02 ARDEAN LEITH
C                     ADDED 'MS I'                  JAN 03 ARDEAN LEITH
C                     OPFILEC                       FEB 03 ARDEAN LEITH
C                     REMOVED 'AP MR'               APR 03 ARDEAN LEITH
C                     USED APMASTER                 AUG 03 ARDEAN LEITH
C                     MPI                           FEB 04 CHAO YANG
C                     ADDED 'IQ PID'                JAN 05 ARDEAN LEITH
C                     ADDED 'IQ R'                  NOV 05 ARDEAN LEITH
C                     'MS IF' IFORM BUG             FEB 07 ARDEAN LEITH
C                     'AP C'                        JUN 08 ARDEAN LEITH
C                     REMOVED VAR3* NO MAN          MAY 09 ARDEAN LEITH
C                     'AP SCC' OUT OF APMASTER      AUG 08 ARDEAN LEITH
C                     'IQ DI'                       JAN 10 ARDEAN LEITH
C                     INQUIRESYNC(.FALSE.,REMOVE)   AUG 10 ARDEAN LEITH
C                     'AP TOOL'                     OCT 10 ARDEAN LEITH
C                     REPLACED VAR3Q,VAR 3R         MAY 11 ARDEAN LEITH
C                     NX, 'AP FOU' 'H' mode         MAY 12 ARDEAN LEITH
C                     REMOVED 'HF'                  DEC 12 ARDEAN LEITH
C                     INQUIRECOMP                   APR 13 ARDEAN LEITH
C                     'IQ PAR' PROMPT               JUN 15 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2015  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   UTIL4    DRIVER FOR CERTAIN ROUTINES
C
C--*********************************************************************

        SUBROUTINE UTIL4(MAXDIM)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        CHARACTER (LEN=MAXNAM) :: CID,CORRECT,FILNAM
        CHARACTER (LEN=1)      :: NULL,MODE
        LOGICAL                :: MAKEREFFILE,USEREFFILE,FLIP,FOLD

        LOGICAL                :: GETANS,UPPER,WANTSUB,SAYPRMT,SAYANS
        LOGICAL                :: STRIP,ENDATSEMI,REMOVE

        INTEGER                :: getpid  ! SYSTEM INTRINSIC FUNCTION


        INTEGER, PARAMETER     :: LUN  = 20
        INTEGER, PARAMETER     :: LUN1 = 21

        NULL   = CHAR(0)
        MAXIM1 = 0
        IRTFLG = 0

        IF (FCHAR(1:2) == 'AP')  THEN
C          OPERATION AP ------------------------------------------- AP

           IF (FCHAR(4:5) == 'RH' .OR.
     &         FCHAR(4:5) == 'MH' .OR.
     &         FCHAR(4:5) == 'NH')  THEN
              CALL ERRT(101,'OBSOLETE OPERATION, USE <AP REF>',NDUM)
              RETURN

           ELSEIF (FCHAR(4:5) == 'MQ' .OR. 
     &             FCHAR(4:5) == 'NQ' .OR. 
     &             FCHAR(4:5) == 'RQ') THEN
              CALL ERRT(101,'OBSOLETE OPERATION, USE <AP SH>',NDUM)
              RETURN

           ELSEIF (FCHAR(4:5) == 'ORN' .OR.
     &             FCHAR(4:5) == 'ORM') THEN
              CALL ERRT(101,'OBSOLETE OPERATION, USE <OR SH>',NDUM)
              RETURN

           ELSEIF (FCHAR(4:5) == 'CA')  THEN
              WRITE(NOUT,91)
91            FORMAT('  OBSOLETE OPERATION, USE: <AP C>',/)
              CALL HALI(.FALSE.)

           ELSEIF (FCHAR(4:5) == 'CM')  THEN
              WRITE(NOUT,91)
              CALL HALI(.FALSE.)

           ELSEIF (FCHAR(4:4) == 'C')   THEN
              CALL HALI(.TRUE.)

           ELSEIF (FCHAR(4:5) == 'RA')  THEN
              CALL FALB

           ELSEIF (FCHAR(4:5) == 'SA')  THEN
              CALL SAQB

           ELSEIF (FCHAR(4:5) == 'SR')  THEN
              CALL GALI

           ELSEIF (FCHAR(4:5) == 'MS')  THEN
              CALL MULTISHIFT

           ELSEIF (FCHAR(4:6) == 'SCC') THEN
C             2D & 3D PADDED, CROSS CORRELATION MULTI-REF SHIFT ALIGNMENT
              CALL APSCC()

           ELSEIF (FCHAR(4:5) == 'TO')  THEN
              MODE = 'F'
              CALL APMASTER_TOOL(MODE,FCHAR(4:5))

           ELSEIF (FCHAR(4:5) == 'FO')  THEN
              MODE = 'H'
              CALL APMASTER(MODE,FCHAR(4:))

           ELSE
              MODE = 'F'
              CALL APMASTER(MODE,FCHAR(4:))

          ENDIF


        ELSEIF(FCHAR(1:2) == 'HF')  THEN
C          OBSOLETE OPERATION REMOVED DEC 2012 --------------------- HF
           CALL ERRT(101,'OBSOLETE OPERATION REMOVED DEC 2012',NE)
           !CALL HF

        ELSEIF(FCHAR(1:2) == 'AT')  THEN
C          AUTOMATIC PARTICLE PICKING.------------------------------ AT
           IF (FCHAR(4:5) == 'IT')  THEN
              CALL DOCS1(MAXDIM)

           ELSEIF(FCHAR(4:5) == 'PK')  THEN
             CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &            NX,NY,NZ,MAXIM1,'INPUT',.FALSE.,IRTFLG)
              IF (IRTFLG .NE. 0) RETURN

              CALL ATPK(LUN1,NX,NY,NZ)
              CLOSE(LUN1)

           ELSEIF(FCHAR(4:5) == 'MC')  THEN
              CALL ATMC

           ELSEIF(FCHAR(4:5) == 'SA')  THEN
              CALL ATSA(MAXDIM)

           ELSEIF(FCHAR(4:5) == 'WN')  THEN
              CALL ATWN(MAXDIM)
           ENDIF


        ELSEIF(FCHAR(1:4) == 'MS I')  THEN
C          MAKE INLINE OR FILE BASED INDEXED STACK --------------- MS I
C          MAKE AN INLINE OR FILE BASED INDEXED FOURIER STACK----- MS IF

           MAXIM  = -1
           NX   = 0
           NZ = 0
           IFORM  = 0
           IF (FCHAR(5:5) == 'F') IFORM = -1
           CALL OPFILEC(0,.TRUE.,FILNAM,LUN,'N',IFORM,NX,NY,NZ,
     &                   MAXIM,'NEW INDEXED STACK',.FALSE.,IRTFLG)
           CLOSE(LUN)


        ELSEIF(FCHAR(1:2) == 'MS')  THEN
C          MAKE AN INLINE STACK ---------------------------------- MS
C          MAKE AN INLINE FOURIER STACK -------------------------- MS F

C          SOLICIT FILE NAME
           IF (FCHAR(4:4) == 'F')  THEN
              CALL FILERD(FILNAM,NLET,NULL,
     &                   'NEW INLINE FOURIER STACK',IRTFLG)
              IFORM = -1
           ELSE
              CALL FILERD(FILNAM,NLET,NULL,'NEW INLINE STACK',IRTFLG)
              IFORM  = 0
           ENDIF
           IF (IRTFLG .NE. 0) RETURN

           IF (FILNAM(1:1) .NE. '_') THEN
              CALL ERRT(101,'NOT AN INLINE FILE',NE)
              RETURN
           ENDIF
           IF (NLET .LT. MAXNAM) FILNAM(NLET+1:) = CHAR(0)

           MAXIM  = 1
           NX   = 0
           NZ = 0
           CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'N',IFORM,NX,NY,NZ,
     &                   MAXIM,' ',.FALSE.,IRTFLG)


        ELSEIF(FCHAR(1:2) == 'NE')  THEN
C          NEGATE/INVERT AN IMAGE --------------------------------- NE

C          OPEN INPUT FILE
           MAXIM = 0
           CALL OPFILEC(0,.TRUE.,FILNAM,LUN,'O',IFORM,NX,NY,NZ,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

C          NEED FMAX & AV BELOW
           FMAXVAL = FMAX
           AVVAL   = AV
           IF (IMAMI==0) CALL NORM3(LUN,NX,NY,NZ,
     &                                FMAXVAL,FMINVAL,AVVAL)

C          OPEN OUTPUT FILE
           MAXIM = 0
           CALL OPFILEC(LUN,.TRUE.,FILNAM,LUN1,'U',IFORM,
     &                NX,NY,NZ,MAXIM,'OUTPUT',.FALSE.,IRTFLG)
           IF (IRTFLG .NE. 0) THEN
              CLOSE(LUN)
              RETURN
           ENDIF

C          FOR NEG A  (FCHAR ONLY HAS FIRST TWO LETTERS!!)
           IF (FCHAR(4:4) .NE. 'A')    THEN
C             NEGATE THEN ADD ORIGINAL FMAX TO EACH VALUE
              CALL NEGATE(LUN,LUN1,NX,NY,NZ,FMAXVAL)
           ELSE
C             NEGATE AROUND AVERAGE VALUE
              CALL NEGATI(LUN,LUN1,NX,NY,NZ,AVVAL)
           ENDIF
           CLOSE(LUN)
           CLOSE(LUN1)
           RETURN


        ELSEIF(FCHAR(1:2) == 'IQ')  THEN
C          INQUIRE SOMETHING -------------------------------------- IQ

           IF (FCHAR(4:5) == 'FI')  THEN
C             SEE IF FILE EXISTS
              CALL INQUIREIF('FI')

           ELSE IF (FCHAR(4:4) == 'D')  THEN
C             INQUIRE IF DIR EXISTS
              CALL INQUIREIF('DIR')

           ELSE IF (FCHAR(4:5) == 'SY')  THEN
C             WAIT TILL FILE EXISTS

              REMOVE =  (FCHAR(9:9) == 'D')
              CALL INQUIRESYNC(.FALSE.,REMOVE)

           ELSE IF (FCHAR(4:4) == 'G')  THEN
C             WAIT TILL FILE GONE
              CALL INQUIRESYNC(.TRUE.,.FALSE.)

          ELSE IF (FCHAR(4:4) == 'R')  THEN
C             CHECK ON REGISTER VARIABLE CONTENTS
              CALL INQUIREREG(.TRUE.,.TRUE.,IRTFLG)

           ELSE IF (FCHAR(4:4) == 'A')  THEN
C             CHECK ON ALLOCABLE MEMORY -------------------------- IQ A
              CALL RDPRM1S(GSTART,NOT_USED,'MEMORY DESIRED',IRTFLG)
              IF (IRTFLG .NE. 0) RETURN

              CALL INQUIREALLOC(GSTART,IMBYTES,.TRUE.,IRTFLG)
              RGOT = IMBYTES
              CALL REG_SET_NSEL(1,1,RGOT,0.0, 0.0, 0.0, 0.0, IRTFLG)

           ELSE IF (FCHAR(4:4) == 'W')  THEN
C             CHECK ON MACHINE ARCHITECTURE
              CALL INQUIREARCH(LUN,FLIP,FOLD,IRTFLG)


           ELSE IF (FCHAR(4:4) == 'C')  THEN
C             CHECK ON COMPILATION
              CALL INQUIRECOMP(IVAL)

           ELSEIF (FCHAR(4:6) == 'PID') THEN
C             INQUIRE PROCESS ID  ------------------------------ IQ PID

#if defined (SP_GFORTRAN)
              IPID = getpid()
#else
              IPID = getpid(IPID)
#endif
              WRITE(NOUT,92) IPID
92            FORMAT('  Current process id: ',I9,/)

              CALL REG_GET_USED(NSEL_USED)
              IF (NSEL_USED .GT. 0) THEN
C                OUTPUT TO SPIDER'S REGISTERS/REAL VARIABLES
                 FPID = IPID
                 CALL REG_SET_NSEL(1,1,FPID,FPID,FPID,FPID,FPID,IRTFLG)
              ENDIF

           ELSEIF (FCHAR(4:4) == 'P') THEN
C             TEST OF PARAMETER SUBSTITUTION MECHANISM --------- IQ PAR

C             DO NOT UPPERCASE THE INPUT LINE, DO NOT STRIP AFTER ;
              GETANS    = .TRUE.
              UPPER     = .FALSE.
              WANTSUB   = .TRUE.
              SAYPRMT   = .TRUE.
              SAYANS    = .TRUE.
              ENDATSEMI = .TRUE.
              STRIP     = .TRUE.

              CALL RDPR('VARIABLE NAME (WITH [])',NCHAR,CID,GETANS,
     &             UPPER,WANTSUB,SAYPRMT,SAYANS,ENDATSEMI,STRIP,IRTFLG)
              IF (IRTFLG .NE. 0) RETURN

              IRTFLG = -999
              CALL RDPRMC(CORRECT,NLET2,.TRUE.,'CORRECT VALUE',
     &                 NULL,IRTFLG)

              IF (IRTFLG == 0 .AND. 
     &            CID(1:NCHAR) .NE. CORRECT(1:NLET2)) THEN
                 WRITE(NOUT,90) CID(1:NCHAR), CORRECT(1:NLET2)
90               FORMAT(' *** GOT: ',A,'  SHOULD BE: ',A)
                 CALL ERRT(101,'SYMBOL SUBSTITUTION INCORRECT',NE)
               ENDIF

           ELSE
C             UNKNOWN OPTION
              CALL ERRT(101,'UNKNOWN OPTION',NE)
           ENDIF


        ELSEIF(FCHAR(1:2) == 'VA')  THEN
C          VARIANCE CALCULATION ----------------------------------- VA

           IF (FCHAR(4:4) == 'F')  THEN
C             FOURIER SPACE VARIANCE CALCULATION ----------------- VA F
              CALL VARF

           ELSEIF (FCHAR(4:5) == '3R')  THEN
C             VARIANCE CALCULATION ------------------------------- VA 3R
              CALL VAR3R

           ELSEIF (FCHAR(4:5) == '3Q')  THEN
C             VARIANCE CALCULATION ------------------------------- VA 3Q
              CALL VAR3D('Q')

           ELSE
              CALL ERRT(101,'UNDOCUMENTED, BUGGY OPERATION REMOVED',NE)
	   ENDIF


        ELSEIF (FCHAR(1:2) == 'SN')  THEN
C          SNR FROM FSC -------------------------------------------- SN

           IF (FCHAR(4:5) == 'RB')  THEN
C             APPROXIMATE SNR BY BUTTERWORTH FILTER ------------- SN RB
              CALL SNRB

           ELSEIF (FCHAR(4:5) == 'RF')  THEN
C             CREATE BUTTERWORTH FILTER  ------------------------ SN RF
              CALL SNRF
	   ENDIF
        ENDIF

        END









@


1.109
log
@inquirecomp call
@
text
@d31 1
d37 1
a37 1
C=* Copyright 1985-2013  Health Research Inc.,                         *
d325 1
a325 1
              CALL RDPR('VARIABLE (WITH [])',NCHAR,CID,GETANS,
@


1.108
log
@removed hf
@
text
@d30 1
d36 1
a36 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d288 5
@


1.107
log
@==, nx, NX, 'AP FOU' 'H' mode
@
text
@d29 1
d143 3
a145 3
C          OPERATION HF -------------------------------------------- HF
           CALL HF

@


1.106
log
@ CALL HALI(.FALSE.) and true
@
text
@d28 1
d34 1
a34 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d68 1
a68 1
        INTEGER getpid            ! SYSTEM INTRINSIC FUNCTION
d71 2
a72 1
        DATA  LUN,LUN1,LUNTXT/10,11,97/
d78 1
a78 1
        IF (FCHAR(1:2) .EQ. 'AP')  THEN
d81 3
a83 3
           IF (FCHAR(4:5) .EQ. 'RH' .OR.
     &         FCHAR(4:5) .EQ. 'MH' .OR.
     &         FCHAR(4:5) .EQ. 'NH')  THEN
d87 3
a89 3
           ELSEIF (FCHAR(4:5) .EQ. 'MQ' .OR. 
     &             FCHAR(4:5) .EQ. 'NQ' .OR. 
     &             FCHAR(4:5) .EQ. 'RQ') THEN
d93 2
a94 2
           ELSEIF (FCHAR(4:5) .EQ. 'ORN' .OR.
     &             FCHAR(4:5) .EQ. 'ORM') THEN
d98 1
a98 1
           ELSEIF (FCHAR(4:5) .EQ. 'CA')  THEN
d103 1
a103 1
           ELSEIF (FCHAR(4:5) .EQ. 'CM')  THEN
d107 1
a107 1
           ELSEIF (FCHAR(4:4) .EQ. 'C')   THEN
d110 1
a110 1
           ELSEIF (FCHAR(4:5) .EQ. 'RA')  THEN
d113 1
a113 1
           ELSEIF (FCHAR(4:5) .EQ. 'SA')  THEN
d116 1
a116 1
           ELSEIF (FCHAR(4:5) .EQ. 'SR')  THEN
d119 1
a119 1
           ELSEIF (FCHAR(4:5) .EQ. 'MS')  THEN
d122 1
a122 1
           ELSEIF (FCHAR(4:6) .EQ. 'SCC') THEN
d126 1
a126 1
           ELSEIF (FCHAR(4:5) .EQ. 'TO')  THEN
d130 4
d141 1
a141 1
        ELSEIF(FCHAR(1:2) .EQ. 'HF')  THEN
d146 1
a146 1
        ELSEIF(FCHAR(1:2) .EQ. 'AT')  THEN
d148 1
a148 1
           IF (FCHAR(4:5) .EQ. 'IT')  THEN
d151 1
a151 1
           ELSEIF(FCHAR(4:5) .EQ. 'PK')  THEN
d153 1
a153 1
     &            NSAM,NROW,NSLICE,MAXIM1,'INPUT',.FALSE.,IRTFLG)
d156 1
a156 1
              CALL ATPK(LUN1,NSAM,NROW,NSLICE)
d159 1
a159 1
           ELSEIF(FCHAR(4:5) .EQ. 'MC')  THEN
d162 1
a162 1
           ELSEIF(FCHAR(4:5) .EQ. 'SA')  THEN
d165 1
a165 1
           ELSEIF(FCHAR(4:5) .EQ. 'WN')  THEN
d170 1
a170 1
        ELSEIF(FCHAR(1:4) .EQ. 'MS I')  THEN
d175 2
a176 2
           NSAM   = 0
           NSLICE = 0
d178 2
a179 2
           IF (FCHAR(5:5) .EQ. 'F') IFORM = -1
           CALL OPFILEC(0,.TRUE.,FILNAM,LUN,'N',IFORM,NSAM,NROW,NSLICE,
d184 1
a184 1
        ELSEIF(FCHAR(1:2) .EQ. 'MS')  THEN
d189 1
a189 1
           IF (FCHAR(4:4) .EQ. 'F')  THEN
d206 3
a208 3
           NSAM   = 0
           NSLICE = 0
           CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'N',IFORM,NSAM,NROW,NSLICE,
d212 1
a212 1
        ELSEIF(FCHAR(1:2) .EQ. 'NE')  THEN
d217 1
a217 1
           CALL OPFILEC(0,.TRUE.,FILNAM,LUN,'O',IFORM,NSAM,NROW,NSLICE,
d224 1
a224 1
           IF (IMAMI.EQ.0) CALL NORM3(LUN,NSAM,NROW,NSLICE,
d230 1
a230 1
     &                NSAM,NROW,NSLICE,MAXIM,'OUTPUT',.FALSE.,IRTFLG)
d239 1
a239 1
              CALL NEGATE(LUN,LUN1,NSAM,NROW,NSLICE,FMAXVAL)
d242 1
a242 1
              CALL NEGATI(LUN,LUN1,NSAM,NROW,NSLICE,AVVAL)
d249 1
a249 1
        ELSEIF(FCHAR(1:2) .EQ. 'IQ')  THEN
d252 1
a252 1
           IF (FCHAR(4:5) .EQ. 'FI')  THEN
d256 1
a256 1
           ELSE IF (FCHAR(4:4) .EQ. 'D')  THEN
d260 1
a260 1
           ELSE IF (FCHAR(4:5) .EQ. 'SY')  THEN
d263 1
a263 1
              REMOVE =  (FCHAR(9:9) .EQ. 'D')
d266 1
a266 1
           ELSE IF (FCHAR(4:4) .EQ. 'G')  THEN
d270 1
a270 1
          ELSE IF (FCHAR(4:4) .EQ. 'R')  THEN
d274 1
a274 1
           ELSE IF (FCHAR(4:4) .EQ. 'A')  THEN
d283 1
a283 1
           ELSE IF (FCHAR(4:4) .EQ. 'W')  THEN
d287 1
a287 1
           ELSEIF (FCHAR(4:6) .EQ. 'PID') THEN
d296 1
a296 1
92            FORMAT(' Current process id: ',I9,/)
d305 1
a305 1
           ELSEIF (FCHAR(4:4) .EQ. 'P') THEN
d325 1
a325 1
              IF (IRTFLG .EQ. 0 .AND. 
d334 1
a334 1
              CALL ERRT(23,'UTIL4',NE)
d338 1
a338 1
        ELSEIF(FCHAR(1:2) .EQ. 'VA')  THEN
d341 1
a341 1
           IF (FCHAR(4:4) .EQ. 'F')  THEN
d345 1
a345 1
           ELSEIF (FCHAR(4:5) .EQ. '3R')  THEN
d349 1
a349 1
           ELSEIF (FCHAR(4:5) .EQ. '3Q')  THEN
d358 1
a358 1
        ELSEIF (FCHAR(1:2) .EQ. 'SN')  THEN
d361 1
a361 1
           IF (FCHAR(4:5) .EQ. 'RB')  THEN
d365 1
a365 1
           ELSEIF (FCHAR(4:5) .EQ. 'RF')  THEN
@


1.105
log
@returned: VAR3D VAR3R calls
@
text
@d99 1
a99 1
              CALL HALI('A')
d103 1
a103 1
              CALL HALI('M')
d106 1
a106 1
              CALL HALI('C')
@


1.104
log
@'AP TOOL'
@
text
@d27 1
d33 1
a33 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d338 9
@


1.103
log
@inquiresync has remove now
@
text
@d26 1
d60 1
a60 1
        CHARACTER(LEN=1)       :: NULL,MODE
d66 2
a67 1
        INTEGER getpid
d78 5
a82 2
           IF (FCHAR(4:5) .EQ. 'RA')  THEN
              CALL FALB
d84 5
a88 2
           ELSEIF (FCHAR(4:5).EQ. 'SA')  THEN
              CALL SAQB
d90 4
a93 5
           ELSEIF(FCHAR(4:5) .EQ. 'SR')  THEN
              CALL GALI

           ELSEIF (FCHAR(4:5) .EQ. 'MS')  THEN
              CALL MULTISHIFT
d97 1
a97 1
91            FORMAT( '  OBSOLETE OPERATION, PLEASE USE: <AP C>',/)
d104 1
a104 1
           ELSEIF (FCHAR(4:4) .EQ. 'C')  THEN
d107 13
a119 1
           ELSEIF (FCHAR(4:6) .EQ. 'SCC')  THEN
d123 3
a125 11
           ELSEIF (FCHAR(4:5) .EQ. 'RH')  THEN
              MODE = 'H'
              CALL APMASTER(MODE,'RD')

           ELSEIF (FCHAR(4:5) .EQ. 'MH')  THEN
              MODE = 'H'
              CALL APMASTER(MODE,'MD')

           ELSEIF (FCHAR(4:5) .EQ. 'NH')  THEN
              MODE = 'H'
              CALL APMASTER(MODE,'RN')
d133 1
d138 1
d140 1
a140 1
C          AUTOMATIC PARTICULE PICKING.----------------------------- AT
d148 1
d162 1
d176 1
d204 1
d241 1
d330 1
d341 2
a342 1
        ELSEIF(FCHAR(1:2) .EQ. 'SN')  THEN
@


1.102
log
@GPL_2010
@
text
@d25 2
d63 1
a63 1
        LOGICAL                :: STRIP,ENDATSEMI
d237 3
a239 1
              CALL INQUIRESYNC(.FALSE.)
d243 1
a243 1
              CALL INQUIRESYNC(.TRUE.)
@


1.101
log
@'iq di'
@
text
@d26 4
a29 3
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
C=* Copyright 1985-2009  Health Research Inc.                          *
d40 1
a40 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a41 1
C=*                                                                    *
d43 1
a43 1
C=* along with this program. If not, see <http://www.gnu.org/licenses> *                      *
@


1.100
log
@removed varset and 'VAR' ops
@
text
@d24 1
d88 2
a89 3
91            FORMAT(
     &          '  OBSOLETE OPERATION, NEXT TIME PLEASE USE: <AP C>',/)
             CALL HALI('A')
d227 1
a227 1
              CALL INQUIREIF()
d229 4
a260 4
#ifdef SP_NT
              CALL ERRT(101,'NOT AVAILABLE IN WINDOWS',NE)
              RETURN

a263 1

a274 1
#endif
@


1.99
log
@add "VAR S" & "VAR F" & varset.f
@
text
@a23 2
C                     'VAR'                         NOV 09 ARDEAN LEITH
C                     VARSET                        NOV 09 ARDEAN LEITH
d255 1
a255 1
C             TEST OF PARAMETER SUBSTITUTION MECHANISM --------- IQ PID
a309 4
        ELSEIF (FCHAR(1:2) .EQ. '14')  THEN
C          VARIABLE MANIPULATION              -------------- VAR --> 14
           CALL VARSET(LUNTXT,IRTFLG)

a334 158
C++*********************************************************************
C
C    VARSET     NEW                               NOV 2009 ARDEAN LEITH
C **********************************************************************
C=* This file is part of:                                              * C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
C=* Copyright 1985-2009  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  VARSET(LUNT,IRTFLG)
C
C  PURPOSE: READ VARIABLE ASSIGNMENTS FROM TEXT FILE, THIS DOES NOT
C           CREATE A NEW PROCEDURE LEVEL LIKE '@@' DOES.
C             
C  PARAMETERS:     LUNT          UNIT FOR DOC FILE                SENT
C                  IRTFLG        ERROR FLAG (0 IS NORMAL)      RETURNED
C
C23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
C--*********************************************************************

      SUBROUTINE VARSET(LUNT,IRTFLG)

      INCLUDE 'CMBLOCK.INC' 
      INCLUDE 'CMLIMIT.INC' 
 
      CHARACTER (LEN=2*MAXNAM+50) :: MSG
      CHARACTER (LEN=2*MAXNAM)    :: RECLIN,VARLIST,NEEDLIST
      CHARACTER (LEN=MAXNAM)      :: FILNAM,VARNAM
      LOGICAL                     :: GLOBAL,HAVELIST
      LOGICAL                     :: STRIP,UPPER,WANTSUB
    
      CALL SET_MPI(ICOMM,MYPID,MPIERR)  ! SETS ICOMM AND MYPID

      LENREC = 0
      CALL OPAUXFILE(.TRUE.,FILNAM,DATEXC,LUNT,LENREC,
     &                 'O','VARIABLE ASSIGNMENT',.TRUE.,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      IF (FCHAR(4:4) .EQ. 'S') THEN
C        ONLY WANT TO RETRIEVE CERTAIN VARIABLES

         STRIP    = .TRUE.
         UPPER    = .FALSE.
         WANTSUB  = .FALSE.
         CALL RDPRMC_NEW(VARLIST,NCHARV,STRIP,UPPER,WANTSUB,
     &                   'LIST VARIABLES TO BE RETRIEVED',IRTFLG)
         IF (IRTFLG .NE. 0) RETURN
         HAVELIST = .TRUE.
         NEEDLIST = VARLIST
      ENDIF

      DO             !    ---------------------- INPUT LOOP
         READ(LUNT,FMT='A',IOSTAT=IRTFLG) RECLIN

C        STOP READING WHEN FILE ENDS OR WHEN IO ERROR
         IF (IRTFLG .NE. 0) EXIT

C        IGNORE BLANK LINES 
         NCHAR = lnblnkn(RECLIN)
         IF (NCHAR .LE. 0) CYCLE

C        FIND START OF ANY COMMENT
         ICOM = SCAN(RECLIN(1:NCHAR),';')
         IF (ICOM .EQ. 1) CYCLE     ! SKIP COMMENT ONLY LINE

C        IGNORE ANY COMMENT FROM LINE END
         IF (ICOM .GT. 1) NCHAR = ICOM -1

         IEQ =  INDEX(RECLIN(1:NCHAR),'=')
         IF (IEQ .LE. 1) CYCLE   ! SKIP NON VARIABLE ASSIGNMENT LINE
     
         IGOVAR = VERIFY(RECLIN(1:IEQ-1),'GLOBALglobal ')
         IF (IGOVAR .LE. 0) CYCLE   ! SKIP GLOBAL ONLY BAD LINE
         VARNAM = RECLIN(IGOVAR:IEQ-1)
         LENVAR = lnblnk(VARNAM)
         !write(6,*)' varnam:',lenvar,VARNAM(1:LENVAR)
  
         IF (HAVELIST) THEN
C           ONLY WANT TO RETRIEVE LISTED VARIABLES
            IGOT = INDEX(VARLIST,VARNAM(1:LENVAR))
            IF (IGOT .LE. 0) CYCLE    ! VAR. NOT IN WANTED LIST
         ENDIF

         IF (NOUT .NE. 3 .AND. NDAT .EQ. 3 .AND. MYPID .LE. 0) THEN
C           IF WRITING TO RESULTS NOT TERMINAL, WRITE ANSWER STRING THERE
            WRITE(NOUT,*) RECLIN(1:NCHAR)
         ENDIF

         GLOBAL=(RECLIN(1:2) .EQ. 'GL' .OR. RECLIN(1:2) .EQ. 'gl'
     &      .OR. RECLIN(1:2) .EQ. 'Gl' .OR. RECLIN(1:2) .EQ. 'gL')

         ILBRAK = INDEX(RECLIN(1:NCHAR),'[')
         IF (ILBRAK .LT. IEQ) THEN
C           HAS BRACKET VARIABLE BEFORE EQUAL SIGN, NOT A x** VAR.

C           CREATE AND ASSIGN SYMBOLIC (STRING) VARIABLE
            CALL EQU_SYMPAR(RECLIN(1:NCHAR),GLOBAL,IRTFLG)
            IF (IRTFLG .EQ. 0) THEN
C              HAVE SET THE SYM. VARIABLE
               IF (HAVELIST) THEN
C                 REMOVE VARNAM FROM VARIABLE NEEDED LIST
                  CALL SUBCHARS(NEEDLIST,VARNAM(1:LENVAR),'',
     &                          LENUSED,IRTFLG)
              ! write(6,*)'needlist:',lenused,':',NEEDLIST(1:LENUSED)
               ENDIF
               CYCLE    ! HAVE SET THE SYM. VARIABLE
            ENDIF
            IF (IRTFLG .NE. 2) RETURN   ! ERROR SETTING SYM. VARIABLE
         ENDIF

C        REGISTER ASSIGNMENT, FIRST SUBSTITUTE FOR ANY SYM. VARIABLES
         CALL SUBSYMPAR(RECLIN(1:NCHAR),RECLIN,NCHAR,0,IRTFLG)
 
C        NOW ASSIGN VALUE TO REGISTER VARIABLE
         CALL ARASQ(RECLIN,NCHAR,GLOBAL,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN   ! HAD ERROR IN REGISTER SETTING

         IF (HAVELIST) THEN
C           REMOVE VARNAM FROM VARIABLE NEEDED LIST
            CALL SUBCHARS(NEEDLIST,VARNAM(1:LENVAR),'',LENUSED,IRTFLG)
          !write(6,*)'needlisrt:',lenused,':',NEEDLIST(1:LENUSED)
         ENDIF
      ENDDO  ! END INPUT LOOP

      CLOSE (LUNT)

      IF (HAVELIST) THEN
C        CHECK TO SEE IF ALL LISTED VARIABLES HAVE A VALUE
         IREM = VERIFY(NEEDLIST,'[ ,')
         IF (IREM .NE. 0) THEN
C           REMOVE COMMAS FROM: NEEDLIST
            CALL SUBCHARS(NEEDLIST,',',' ',LENUSED,IRTFLG)
C                  123456789 123456789 123456789 
            MSG = 'VARIABLE NOT IN FILE: '// NEEDLIST(:LENUSED)
            CALL ERRT(101,MSG(:LENUSED+22),NE)
            IRTFLG = 1
         ENDIF
      ENDIF

      WRITE(NOUT,*) ' '

      RETURN
      END
@


1.98
log
@calls apscc
@
text
@d24 2
d66 1
a66 1
        DATA  LUN,LUN1/10,11/
d205 1
a205 1
           CALLOPFILEC(LUN,.TRUE.,FILNAM,LUN1,'U',IFORM,
d312 4
d317 1
a317 1
C          VARIANCE CALCULATION ---------------------------------- VA
a321 1

d340 167
@


1.97
log
@removed undoumented, buggy VA operations
@
text
@d3 21
a23 21
C  UTIL4.F                 ADDED IQ                 SEP 97 ARDEAN LEITH
C                          ADDED IQ SYNC            JUN 99 ARDEAN LEITH
C                          ADDED NEG                JUN 99 ARDEAN LEITH
C                          NEG BUG                  FEB 01 ARDEAN LEITH
C                          'AP MQ I'                APR 01 ARDEAN LEITH
C   			   ADDED 'AP RQ'            OCT 01 HAIXIAO GAO
C   			   ADDED 'IQ W'             MAR 02 ARDEAN LEITH
C   			   ADDED 'IQ PAR'           JUN 02 ARDEAN LEITH
C   			   ADDED 'IQ GONE'          AUG 02 ARDEAN LEITH
C   			   ADDED 'MS' VOLUMES       AUG 02 ARDEAN LEITH
C   			   ADDED 'MS I'             JAN 03 ARDEAN LEITH
C                          OPFILEC                  FEB 03 ARDEAN LEITH
C                          REMOVED 'AP MR'          APR 03 ARDEAN LEITH
C                          USED APMASTER            AUG 03 ARDEAN LEITH
C                          MPI                      FEB 04 Chao Yang
C   			   ADDED 'IQ PID'           JAN 05 ARDEAN LEITH
C   			   ADDED 'IQ R'             NOV 05 ARDEAN LEITH
C   			   'MS IF' IFORM BUG        FEB 07 ARDEAN LEITH
C   			   'AP C'                   JUN 08 ARDEAN LEITH
C                          REMOVED VAR3* NO MAN     MAY 09 ARDEAN LEITH
C
d25 5
a29 5
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
C=*                                                                    *
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d31 1
a31 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d36 1
a36 1
C=* This program is distributed in the hope that it will be useful,    *
d42 1
a42 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d98 4
d262 1
a262 1
              IPID =  getpid()
d265 1
a265 1
              IPID =  getpid(IPID)
@


1.96
log
@format 91 bug
@
text
@d22 1
d26 1
a26 1
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
a309 1

d317 2
a318 39
           ELSEIF (FCHAR(4:5) .EQ. '3C')  THEN
C             REAL SPACE VARIANCE CALCULATION ------------------- VA 3C
              CALL VAR3C

           ELSEIF (FCHAR(4:5) .EQ. '3R')  THEN
C             REAL SPACE VARIANCE CALCULATION ------------------- VA 3R
              CALL VAR3R

           ELSEIF (FCHAR(4:5) .EQ. '3O')  THEN
C             REAL SPACE VARIANCE CALCULATION WITHOUT REPLACEMENTS VA 3O
              CALL VAR3D('O')

           ELSEIF (FCHAR(4:5) .EQ. '3W')  THEN
C             REAL SPACE VARIANCE CALCULATION WITH REPLACEMENTS -- VA 3W
              CALL VAR3D('W')

           ELSEIF (FCHAR(4:5) .EQ. '3Q')  THEN
C             REAL SPACE VARIANCE CALCULATION WITH REPLACEMENTS NN VA 3Q
              CALL VAR3D('Q')
	      
           ELSEIF (FCHAR(4:5) .EQ. '3B')  THEN
C             REAL SPACE VARIANCE CALCULATION WITH REPLACEMENTS NN ON DISK  ------ VA 3B
              CALL VAR3D('B')

           ELSEIF (FCHAR(4:5) .EQ. '3A')  THEN
C             REAL SPACE VARIANCE CALCULATION WITH REPLACEMENTS PER DIR   ------ VA 3A
              CALL VAR3D('A')

           ELSEIF (FCHAR(4:5) .EQ. '3N')  THEN
C             REAL SPACE VARIANCE CALCULATION WITH REPLACEMENTS PER DIR   ------ VA 3N
              CALL VAR3D('N')

           ELSEIF (FCHAR(4:5) .EQ. '3J')  THEN
C             REAL SPACE VARIANCE CALCULATION JACKKNIFE --------- VA 3J
              CALL VAR3D('J')

           ELSEIF (FCHAR(4:6) .EQ. '3DO')  THEN
C             REAL SPACE VARIANCE CALCULATION WITHOUT REPLACEMENTS VA 3DO
              CALL VAR3DISK('O')
@


1.95
log
@*** empty log message ***
@
text
@d21 1
a21 1
C   			   'A{ C'                   JUN 08 ARDEAN LEITH
d89 1
a89 1
              WRITE(6,91)
d95 1
a95 1
              WRITE(6,90)
a98 1
              WRITE(6,90)
@


1.94
log
@combined ap ca & ap cm
@
text
@d89 2
a90 2
              WRITE(6,90)
90            FORMAT(
@


1.93
log
@'MS IF' IFORM BUG
@
text
@d21 1
d25 1
a25 1
C=* Copyright (C) 1985-2007  Health Research Inc.                      *
d89 4
a92 1
              CALL HALI('A')
d95 1
d98 4
d103 1
a103 1
              MODE='H'
d107 1
a107 1
              MODE='H'
d111 1
a111 1
              MODE='H'
@


1.92
log
@put as per Pawel's request
@
text
@d3 18
a20 17
C  UTIL4.F                 ADDED IQ SEPT 97           ARDEAN LEITH
C                          ADDED IQ SYNC JUN 99       ARDEAN LEITH
C                          ADDED NEG JUN 99           ARDEAN LEITH
C                          NEG BUG FEB 01             ARDEAN LEITH
C                          'AP MQ I' APR 01           ARDEAN LEITH
C   			   ADDED 'AP RQ' OCT 01       HAIXIAO GAO
C   			   ADDED 'IQ W'  MAR 02       ARDEAN LEITH
C   			   ADDED 'IQ PAR' JUN 02      ARDEAN LEITH
C   			   ADDED 'IQ GONE' AUG 02     ARDEAN LEITH
C   			   ADDED 'MS' VOLUMES AUG 02  ARDEAN LEITH
C   			   ADDED 'MS I'  JAN 03       ARDEAN LEITH
C                          OPFILEC       FEB  03      ARDEAN LEITH
C                          REMOVED 'AP MR' APR 03     ARDEAN LEITH
C                          USED APMASTER   AUG 03     ARDEAN LEITH
C                          MPI             FEB 04     Chao Yang
C   			   ADDED 'IQ PID'  JAN 05     ARDEAN LEITH
C   			   ADDED 'IQ R'    NOV 05     ARDEAN LEITH
d24 1
a24 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d145 1
a145 1
           IF (FCHAR(4:4) .EQ. 'F') IFORM = -1
d318 1
a318 1
C             REAL SPACE VARIANCE CALCULATION without replacements VA 3O
d322 1
a322 1
C             REAL SPACE VARIANCE CALCULATION with replacements -- VA 3W
d326 1
a326 1
C             REAL SPACE VARIANCE CALCULATION with replacements NN VA 3Q
d330 1
a330 1
C             REAL SPACE VARIANCE CALCULATION with replacements NN on disk  ------ VA 3B
d334 1
a334 1
C             REAL SPACE VARIANCE CALCULATION with replacements per dir   ------ VA 3A
d338 1
a338 1
C             REAL SPACE VARIANCE CALCULATION with replacements per dir   ------ VA 3N
d342 1
a342 1
C             REAL SPACE VARIANCE CALCULATION jackknife --------- VA 3J
d346 1
a346 1
C             REAL SPACE VARIANCE CALCULATION without replacements VA 3DO
@


1.91
log
@NT getpid
@
text
@d327 4
@


1.90
log
@if defined (SP_GFORTRAN)
@
text
@d247 4
a250 1
cc            CALL getpid(IPID)
d266 1
@


1.89
log
@inquirealloc params
@
text
@d248 4
d253 1
@


1.88
log
@INQUIREALLOC(80,
@
text
@d232 3
a234 2
C             CHECK ON ALLOCABLE MEMORY
              CALL INQUIREALLOC(80,IMBYTES,.TRUE.,IRTFLG)
d236 1
@


1.87
log
@native named registers
@
text
@d233 1
a233 1
              CALL INQUIREALLOC(80000,IMBYTES,.TRUE.,IRTFLG)
@


1.86
log
@*** empty log message ***
@
text
@d57 5
a61 2
        CHARACTER(LEN=1)      ::  NULL,MODE
        LOGICAL ::                MAKEREFFILE,USEREFFILE,FLIP,FOLD
d228 1
a228 1
C             CHECK ON REAL VAR./REGISTER CONTENTS
a244 4
#ifdef SP_NT
              WRITE(NOUT,*) "  No: getpid under Windows"
#else

a255 1
#endif
d260 12
a271 3
C             KEEP LOWERCASE INPUT BY SETTING IRTFLG = -999  
              IRTFLG = -999
              CALL RDPRMC(CID,NCHAR,.TRUE.,'ID',NULL,IRTFLG)
d274 1
a274 1
              CALL RDPRMC(CORRECT,NLET2,.FALSE.,'CORRECT VALUE',
d277 5
a281 6
              IF (IRTFLG .EQ. 0 .AND. CID .NE. CORRECT(1:NLET2)) THEN
                 WRITE(NOUT,*)'*** ERROR IN PARAMETER SUBSTITUTION!!!'

                 WRITE(NOUT,90) CID, CORRECT(1:NLET2)
90               FORMAT(' *** GOT: ',A,'  SHOULD BE: ',A/)
                 CALL ERRT(100,' ',NE)
@


1.85
log
@no getpid in windows
@
text
@d256 1
a257 1
              ENDIF
@


1.84
log
@named register support
@
text
@d242 4
d256 1
@


1.83
log
@GPL License fixed
@
text
@d19 1
d224 2
a225 2
           ELSE IF (FCHAR(4:6) .EQ. 'REG')  THEN
C             CHECK ON REGISTER CONTENTS
d242 1
a242 1
cc              CALL getpid(IPID)
d249 1
a249 1
C                OUTPUT TO SPIDER'S REGISTERS
d280 2
a281 1
C          VARIANCE CALCULATION ------------------------------------ VA
d283 1
a283 1
C          FOURIER SPACE VARIANCE CALCULATION ------ VA F
d285 1
d287 1
a287 1
C          REAL SPACE VARIANCE CALCULATION ------ VA 3C
d289 1
d291 1
a291 1
C          REAL SPACE VARIANCE CALCULATION ------ VA 3R
d293 1
d295 1
a295 1
C          REAL SPACE VARIANCE CALCULATION without replacements------ VA 3O
d297 1
d299 1
a299 1
C          REAL SPACE VARIANCE CALCULATION with replacements   ------ VA 3W
d301 1
d303 1
a303 1
C          REAL SPACE VARIANCE CALCULATION with replacements NN  ------ VA 3Q
d305 1
d307 1
a307 1
C          REAL SPACE VARIANCE CALCULATION with replacements per dir   ------ VA 3A
d309 1
d311 1
a311 1
C          REAL SPACE VARIANCE CALCULATION with replacements per dir   ------ VA 3N
d313 1
d315 1
a315 1
C          REAL SPACE VARIANCE CALCULATION jackknife            ------ VA 3J
d317 1
d319 1
a319 1
C          REAL SPACE VARIANCE CALCULATION without replacements------ VA 3DO
d325 1
@


1.82
log
@HRI GPL License used
@
text
@a1 1
C++*************************************************************************
a20 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d24 1
a24 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a43 6

C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a48 1
C--*************************************************************************
@


1.81
log
@added FPID=IPID so IQ PID would put value in register
@
text
@d1 1
d23 24
d56 1
@


1.80
log
@pawel
@
text
@d232 1
@


1.79
log
@iq pid
@
text
@d265 27
a291 3
           ELSEIF (FCHAR(4:4) .EQ. '3')  THEN
C          REAL SPACE VARIANCE CALCULATION ------ VA 3
              CALL VAR3D
@


1.78
log
@Removed MPI
@
text
@d18 1
d42 2
d211 1
a211 1
C             CHECK ON ALOCABLE MEMORY
d221 14
d259 1
@


1.77
log
@ap cm
@
text
@a42 9
#ifdef USE_MPI
        include 'mpif.h'
        INTEGER  MYPID, COMM, IERR
        COMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(COMM, MYPID, IERR)
#else
        MYPID = -1
#endif

a120 12
#ifdef USE_MPI
C          CHECK THE FILENAME TO SEE IF THE OUTPUT IS INLINE
           CALL FILERD(FILNAM,NLETI,NULL,'NEW INDEXED STACK',IRTFLG)
           IF (MYPID .EQ. 0 .or. FILNAM(1:1) .EQ. '_') THEN
              CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'N',IFORM,NSAM,NROW,
     &                     NSLICE, MAXIM,'NEW INDEXED STACK',
     &                     .FALSE.,IRTFLG)
           ENDIF
           CALL MPI_BCAST(IBCNT , 1, MPI_INTEGER, 0, COMM, IERR)
           CALL MPI_BCAST(IRTFLG, 1, MPI_INTEGER, 0, COMM, IERR)
           IF (IRTFLG .NE. 0) RETURN
#else
a122 1
#endif
@


1.76
log
@irtflg = 0
@
text
@d72 4
a75 1
              CALL HALI
@


1.75
log
@mpi
@
text
@d54 2
@


1.74
log
@new ap support
@
text
@d17 1
d43 9
d125 12
d139 1
@


1.73
log
@added ap mi
@
text
@d56 2
a57 3
           ELSEIF (FCHAR(4:5) .EQ. 'MI')  THEN
              MODE='F'
              CALL APMASTER(MODE,'MI')
d59 2
a60 3
           ELSEIF (FCHAR(4:5) .EQ. 'MD')  THEN
              MODE='F'
              CALL APMASTER(MODE,'MD')
d62 1
a62 1
           ELSEIF (FCHAR(4:5) .EQ. 'MH')  THEN
a63 4
              CALL APMASTER(MODE,'MD')

           ELSEIF (FCHAR(4:5) .EQ. 'RD')  THEN
              MODE='F'
d66 1
a66 1
           ELSEIF (FCHAR(4:5) .EQ. 'RH')  THEN
d68 1
a68 9
              CALL APMASTER(MODE,'RD')

           ELSEIF (FCHAR(4:6) .EQ. 'RNS')  THEN
              MODE='F'
              CALL APMASTER(MODE,'RNS')

           ELSEIF (FCHAR(4:5) .EQ. 'RN')  THEN
              MODE='F'
              CALL APMASTER(MODE,'RN')
d74 3
a76 5
           ELSEIF (FCHAR(4:5) .EQ. 'MS')  THEN
              CALL MULTISHIFT

           ELSEIF (FCHAR(4:5) .EQ. 'CA')  THEN
              CALL HALI
d78 1
a78 20
           ELSEIF (FCHAR(4:5) .EQ. 'I')  THEN
C             CREATE REFERENCE RINGS FILE
              CALL MRQLI(0,.TRUE.,.FALSE.)

           ELSEIF (FCHAR(4:5) .EQ. 'MQ')  THEN
              USEREFFILE  = (FCHAR(7:7) .EQ. 'R')
              CALL MRQLI(0,.FALSE.,USEREFFILE)

           ELSEIF (FCHAR(4:5) .EQ. 'NQ')  THEN
              USEREFFILE  = (FCHAR(7:7) .EQ. 'R')
              CALL MRQLI(1,.FALSE.,USEREFFILE)

           ELSEIF (FCHAR(4:5) .EQ. 'RQ')  THEN
              USEREFFILE  = (FCHAR(7:7) .EQ. 'R')
              CALL RRQLI(0,.FALSE.,USEREFFILE)

           ELSEIF (FCHAR(4:6) .EQ. 'RQN')  THEN
              USEREFFILE  = (FCHAR(7:7) .EQ. 'R')
              CALL RRQLI(2,.FALSE.,USEREFFILE)
           ENDIF
@


1.72
log
@new caller for ap commands
@
text
@d16 1
d55 4
@


1.71
log
@added 'ap rnq' using rrqli.f
@
text
@d55 1
a55 1
           ELSEIF(FCHAR(4:5) .EQ. 'MD')  THEN
d57 1
a57 1
              CALL DSFS(MODE)
d59 1
a59 1
           ELSEIF(FCHAR(4:5) .EQ. 'MH')  THEN
d61 1
a61 1
              CALL DSFS(MODE)
d63 1
a63 4
           ELSEIF(FCHAR(4:5) .EQ. 'MS')  THEN
              CALL MULTISHIFT

           ELSEIF(FCHAR(4:5) .EQ. 'RD')  THEN
d65 1
a65 1
              CALL DSFR(MODE)
d67 1
a67 1
           ELSEIF(FCHAR(4:5) .EQ. 'RH')  THEN
d69 1
a69 1
              CALL DSFR(MODE)
d73 1
a73 1
              CALL DSGRS(MODE)
d77 1
a77 1
              CALL DSGR(MODE)
d81 4
a84 1
              CALL DSGR(MODE)
@


1.70
log
@atmc added
@
text
@d105 3
@


1.69
log
@dsgrs call wrong
@
text
@d123 3
@


1.68
log
@removed AP MR (mrali.f)
@
text
@d74 1
a74 1
           ELSEIF (FCHAR(4:5) .EQ. 'RNS')  THEN
@


1.67
log
@added 'ap rns'
@
text
@d15 1
a87 3

           ELSEIF (FCHAR(4:5) .EQ. 'MR')  THEN
              CALL MRALI
@


1.66
log
@*** empty log message ***
@
text
@d73 4
@


1.65
log
@MS F prompt changed
@
text
@d146 1
a146 1
           IF(FCHAR(1:4) .EQ. 'F')  THEN
@


1.64
log
@*** empty log message ***
@
text
@d146 8
a153 1
           CALL FILERD(FILNAM,NLET,NULL,'NEW INLINE STACK',IRTFLG)
a164 2
           IFORM  = 0
           IF (FCHAR(4:4) .EQ. 'F') IFORM = -1
@


1.63
log
@opfilec
@
text
@d40 2
a41 2
        NULL = CHAR(0)

d115 5
a119 1
              CALL ATPK
@


1.62
log
@indexed stacks
@
text
@d14 1
d133 1
a133 1
           CALL OPFILE(.TRUE.,FILNAM,LUN,'N',IFORM,NSAM,NROW,NSLICE,
d156 1
a156 1
           CALL OPFILE(.FALSE.,FILNAM,LUN,'N',IFORM,NSAM,NROW,NSLICE,
d164 1
a164 1
           CALL OPFILE(.TRUE.,FILNAM,LUN,'O',IFORM,NSAM,NROW,NSLICE,
d176 2
a177 2
           CALL OPFILE(.TRUE.,FILNAM,LUN1,'U',IFORM,NSAM,NROW,NSLICE,
     &                MAXIM,'OUTPUT',.FALSE.,IRTFLG)
@


1.61
log
@'ms f'
@
text
@d13 1
d17 1
a17 1
C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
d123 13
d137 2
a138 2
C          MAKE AN INLINE STACK ------------------------------------ MS
C          MAKE AN INLINE STACK ---------------------------------- MS F
d141 1
a141 1
10         CALL FILERD(FILNAM,NLET,NULL,'NEW INLINE STACK',IRTFLG)
d261 1
a261 1
C             APPROXIMATE SNR BY BUTTERWORTH FILTER ----- SN RB
d265 1
a265 1
C             CREATE BUTTERWORTH FILTER  ------ SN RF
@


1.60
log
@'ms' for vol.
@
text
@d124 1
d140 1
@


1.59
log
@'MS 3'
@
text
@d3 10
a12 10
C  UTIL4.F                 ADDED IQ SEPT 97        ARDEAN LEITH
C                          ADDED IQ SYNC JUN 99    ARDEAN LEITH
C                          ADDED NEG JUN 99        ARDEAN LEITH
C                          NEG BUG FEB 01          ARDEAN LEITH
C                          'AP MQ I' APR 01        ARDEAN LEITH
C   			   ADDED 'AP RQ' OCT 01    HAIXIAO GAO
C   			   ADDED 'IQ W'  MAR 02    ARDEAN LEITH
C   			   ADDED 'IQ PAR' JUN 02   ARDEAN LEITH
C   			   ADDED 'IQ GONE' AUG 02  ARDEAN LEITH
C   			   ADDED 'MS 3' AUG 02     ARDEAN LEITH
d135 1
d137 3
a139 11
           MAXIM  = 1 
           IF (FCHAR(4:4) .EQ. '3') THEN
C             VOLUMES
              NSLICE = 0
              IFORM  = 3
           ELSE
C             IMAGES
              NSLICE = 1
              IFORM  = 1
           ENDIF     
           CALL OPFILe(.FALSE.,FILNAM,LUN,'N',IFORM,NSAM,NROW,NSLICE,
@


1.58
log
@iq gone
@
text
@d12 1
a135 1
           NSLICE = 1
d137 10
a146 2
           IFORM  = 1     
           CALL OPFIL(.FALSE.,FILNAM,LUN,'N',NSAM,NROW,NSLICE,
@


1.57
log
@iq par
@
text
@d3 9
a11 8
C  UTIL4.F                 ADDED IQ SEPT 97       ARDEAN LEITH
C                          ADDED IQ SYNC JUN 99   ARDEAN LEITH
C                          ADDED NEG JUN 99       ARDEAN LEITH
C                          NEG BUG FEB 01         ARDEAN LEITH
C                          'AP MQ I' APR 01       ARDEAN LEITH
C   			   ADDED 'AP RQ' OCT 01   HAIXIAO GAO
C   			   ADDED 'IQ W'  MAR 02   ARDEAN LEITH
C   			   ADDED 'IQ PAR' JUN 02  ARDEAN LEITH
d40 1
a40 1
C          OPERATION AP -------------------------------------------- AP
d129 1
a129 1
              CALL ERRT(101,'NOT AN INLINE STACK',NE)
d132 2
a133 2
           FILNAM(4:4) = CHAR(0)
    
d186 5
a190 1
              CALL INQUIRESYNC()
d219 1
a219 1
                 WRITE(NOUT,*) '*** ERROR IN PARAMETER SUBSTITUTION!!!'
d242 1
a242 1
C          SNR FROM FSC ------------------------------------ SN
d244 1
a244 1
C          APPROXIMATE SNR BY BUTTERWORTH FILTER ----- SN RB
d246 1
d248 1
a248 1
C          CREATE BUTTERWORTH FILTER  ------ SN RF
@


1.56
log
@added sn rb and sn rf
@
text
@d10 1
d30 1
a30 1
        CHARACTER(LEN=MAXNAM) ::  FILNAM
d62 2
a63 2
               MODE='F'
             CALL DSFR(MODE)
d201 20
@


1.55
log
@VA 3
@
text
@d214 10
@


1.54
log
@VA F added
@
text
@d8 2
a9 2
C                          ADDED 'AP RQ' OCT 01   HAIXIAO GAO
C                          ADDED 'IQ W'  MAR 02   ARDEAN LEITH
d210 4
a213 1
           ENDIF
@


1.53
log
@multishift.f added
ap ms
@
text
@a0 1

d8 2
a9 2
C   			   ADDED 'AP RQ' OCT 01   HAIXIAO GAO
C   			   ADDED 'IQ W'  MAR 02   ARDEAN LEITH
d204 7
a212 1
        RETURN
@


1.52
log
@missing irtflg on inquirearch
@
text
@d58 3
a208 1

@


1.51
log
@new
@
text
@d197 1
a197 1
              CALL INQUIREARCH(LUN,FLIP,FOLD)
@


1.50
log
@added AP RQ
@
text
@d4 7
a10 6
C  UTIL4.F                         ADDED IQ SEPT 97     ARDEAN LEITH
C                                  ADDED IQ SYNC JUN 99 ARDEAN LEITH
C                                  ADDED NEG JUN 99     ARDEAN LEITH
C                                  NEG BUG FEB 01       ARDEAN LEITH
C                                  'AP MQ I' APR 01     ARDEAN LEITH
C   				   ADDED 'AP RQ' OCT 01 HAIXIAO GAO
d32 1
a32 1
        LOGICAL ::                MAKEREFFILE,USEREFFILE
d195 3
@


1.49
log
@'ap i' & 'ap mq r' & 'ap nq r'
@
text
@d9 1
d90 5
@


1.48
log
@avval bug fixed
@
text
@d1 1
d4 5
a8 4
C  UTIL4.F                            ADDED IQ SEPT 97     ARDEAN LEITH
C                                     ADDED IQ SYNC JUN 99 ARDEAN LEITH
C                                     ADDED NEG JUN 99     ARDEAN LEITH
C                                     NEG BUG FEB 01       ARDEAN LEITH
d10 8
a17 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
d30 1
d64 3
a66 3
           ELSEIF(FCHAR(4:5) .EQ. 'RN')  THEN
               MODE='F'
             CALL DSGR(MODE)
d68 1
a68 1
           ELSEIF(FCHAR(4:5) .EQ. 'NH')  THEN
d72 1
a72 1
           ELSEIF(FCHAR(4:5) .EQ. 'CA')  THEN
d75 2
a76 5
           ELSEIF(FCHAR(4:5) .EQ. 'MR')  THEN
             CALL MRALI

           ELSEIF(FCHAR(4:5) .EQ. 'MQ')  THEN
             CALL MRQLI
d78 11
a88 2
           ELSEIF(FCHAR(4:5) .EQ. 'NQ')  THEN
             CALL NRQLI
d196 1
@


1.47
log
@bad bug in that fmaxval not set !!
@
text
@d133 1
d156 1
@


1.46
log
@increase GB t0 80
@
text
@d6 1
d25 1
d27 2
a28 2
        CHARACTER * 81 FILNAM
        CHARACTER * 1  NULL,MODE
d132 1
a176 1

@


1.45
log
@added iq alloc
@
text
@d170 1
a170 1
              CALL INQUIREALLOC(10000,IMBYTES,.TRUE.,IRTFLG)
@


1.44
log
@adapted to GALI.F
@
text
@d168 8
@


1.43
log
@neg a fmax & av overwritten !!
@
text
@d42 1
a42 1
              CALL GALI(MAXDIM)
@


1.42
log
@neg a wrong
@
text
@d129 3
a131 2
C          NEED FMIN, FMAX & AV
           IF (IMAMI.EQ.0) CALL NORM3(LUN,NSAM,NROW,NSLICE,FMAX,FMIN,AV)
d133 1
a133 1
C          OPEN THE OUTPUT FILE
d145 1
a145 1
              CALL NEGATE(LUN,LUN1,NSAM,NROW,NSLICE,FMAX)
d148 1
a148 1
              CALL NEGATI(LUN,LUN1,NSAM,NROW,NSLICE,AV)
@


1.41
log
@*** empty log message ***
@
text
@d141 2
a142 1
           IF (FCHAR(5:5) .NE. 'A')    THEN
@


1.40
log
@commands AP MH, AP RH, AP NH added
@
text
@d14 1
a14 1
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
d23 1
a23 1
	INCLUDE 'CMBLOCK.INC'
d30 1
a30 1
	NULL = CHAR(0)
d53 2
a54 1
              CALL DSFR(MODE)
d57 1
d61 2
a62 1
              CALL DSGR(MODE)
d65 1
d86 1
a86 1
C	   AUTOMATIC PARTICULE PICKING.----------------------------- AT
d88 1
a88 1
	      CALL DOCS1(MAXDIM)
d90 2
a91 2
	   ELSEIF(FCHAR(4:5) .EQ. 'PK')  THEN
	      CALL ATPK
d93 2
a94 2
	   ELSEIF(FCHAR(4:5) .EQ. 'SA')  THEN
	      CALL ATSA(MAXDIM)
d96 3
a98 3
	   ELSEIF(FCHAR(4:5) .EQ. 'WN')  THEN
	      CALL ATWN(MAXDIM)
	   ENDIF
d101 1
a101 1
C	   MAKE AN INLINE STACK ------------------------------------ MS
d121 1
a121 1
C	   NEGATE/INVERT AN IMAGE --------------------------------- NE
d152 1
a152 1
C	   INQUIRE SOMETHING -------------------------------------- IQ
d156 1
a156 1
	      CALL INQUIREIF()
d160 1
a160 1
	      CALL INQUIRESYNC()
d164 1
a164 1
	      CALL INQUIREREG(.TRUE.,.TRUE.,IRTFLG)
d173 1
a173 2
	END

@


1.39
log
@adapted for AP MR
@
text
@d26 1
a26 1
        CHARACTER * 1  NULL
d45 2
a46 1
              CALL DSFS
d48 4
d53 4
a56 1
              CALL DSFR
d59 4
a62 1
              CALL DSGR
@


1.38
log
@adapted for AP SA
@
text
@d57 1
a57 1
             CALL MRALI(MAXDIM)
@


1.37
log
@adapted for AP RA
@
text
@d39 1
a39 1
              CALL SAQB(MAXDIM)
@


1.36
log
@adapted for AP CA
@
text
@d36 1
a36 1
              CALL FALB(MAXDIM)
@


1.35
log
@MAXDIM is no longer an argument for ATPK
@
text
@d54 1
a54 1
              CALL HALI(MAXDIM)
@


1.34
log
@neg wrong call fchar
@
text
@d76 1
a76 1
	      CALL ATPK(MAXDIM)
@


1.33
log
@*** empty log message ***
@
text
@d126 1
a126 1
           IF (FCHAR(4:5) .NE. 'A')    THEN
@


1.32
log
@*** empty log message ***
@
text
@d45 1
a45 1
              CALL DSFS(MAXDIM)
d48 1
a48 1
              CALL DSFR(MAXDIM)
d51 1
a51 1
              CALL DSGR(MAXDIM)
@


1.31
log
@added neg a
@
text
@d60 1
a60 1
             CALL MRQLI(MAXDIM)
d63 1
a63 1
             CALL NRQLI(MAXDIM)
@


1.30
log
@*** empty log message ***
@
text
@d3 4
a6 2
C  UTIL4.F                                      ADDED IQ SEPT 97 al
C                                
d113 3
a115 1
           CALL NORM3(LUN,NSAM,NROW,NSLICE,FMAX,FMIN,AV)
d125 7
a131 4
           IF(negate???)  THEN
           CALL NEGATE(LUN,LUN1,NSAM,NROW,NSLICE,FMAX)
           ELSIF(Invert contrast)  THEN
           CALL NEGATI(LUN,LUN1,NSAM,NROW,NSLICE,AV)
@


1.29
log
@added neg
@
text
@d111 1
a111 1
           FMAX1 = FMAX
d121 5
a125 2

           CALL NEGATE(LUN,LUN1,NSAM,NROW,NSLICE,FMAX1)
@


1.28
log
@added iq sync
@
text
@d26 1
a26 1
        DATA  LUN/10/
d103 23
d133 1
a133 1
           ELSE IF (FCHAR(4:6) .EQ. 'SYNC')  THEN
@


1.27
log
@using docs1.f now instead of atit.f
@
text
@d105 1
d107 1
d110 4
d115 1
d117 1
@


1.26
log
@undefined prompt
@
text
@a21 1
CNO_SAVE
d71 1
a71 1
	      CALL ATIT
d107 1
@


1.25
log
@lunsethdr used
@
text
@d102 1
a102 1
     &                   MAXIM,PROMPT,.FALSE.,IRTFLG)
@


1.24
log
@AP RD and AP RN added
@
text
@d96 7
a102 11
          
20         CALL RDPRI3S(NSAM,NROW,NSLICE,NLOOP,ILOOP,
     &                  'ENTER NSAM, NROW & NSLICE',IRTFLG)
           IF (IRTFLG .EQ. -1) GOTO 10

           CALL RDPRIS(NIMAGE,IDUM,NLOOP,ILOOP,
     &                  'ENTER NUMBER OF IMAGES',IRTFLG)
           IF (IRTFLG .EQ. -1) GOTO 20

           CALL MAKESTACK(FILNAM,NLET,LUN,NSAM,NROW,NSLICE,NIMAGE,
     &                    IRTFLG)
@


1.23
log
@f90 changes, split out makestack.f
@
text
@d46 6
@


1.22
log
@AP NQ added
@
text
@a23 13
        COMMON BUF(1)

C       DO NOT CHANGE NUMINLN WITHOUT SEARCH FOR OTHER OCCURANCES!
        PARAMETER       (NUMINLN = 9)
#ifdef SP_NT
        INTEGER         LOCBUF
#else
        INTEGER * 8     LOCBUF
#endif
        COMMON /LUNARC/ LOCBUF(NUMINLN), NWORDBUF(NUMINLN), 
     &                  NSAMBUF(NUMINLN),IRECBUF(NUMINLN),
     &                  LABRECBUF(NUMINLN)

d27 3
a29 2
        DATA LUN/10/
	NULL=CHAR(0)
d99 2
a100 18
C          OPEN INLINE STACK, FOURIER NOT ALLOWED 
           ITYPE = 1
           IF (NSLICE .GT. 1) ITYPE = 3

C          FIND INLINED BUFFER NUMBER          
           CALL INLNBUF(FILNAM,NLET,NUMBUF,IRTFLG)

           IF  (NSAMBUF(NUMBUF) .GT. 0) THEN
C             FREE UP CURRENT INLINE BUFFER (DEALLOCATES IF NECESSARY)
              CALL OPENINLN(10,NUMBUF,.TRUE.,0,0,.TRUE.,IRTFLG)

              IF (N_VERBOSE .EQ. 1 .AND. IRTFLG .EQ. 0)
     &           WRITE(NOUT,*) 'DELETED INLINE FILE: ',FILNAM(1:NLET)
           ENDIF

           CALL OPENINSTK(BUF,FILNAM,LUN,NSAM,NROW,NSLICE,NIMAGE,
     &                       ITYPE,'N',NF)
           IFORM = ITYPE
@


1.21
log
@ used 4 byte pointers on nt
@
text
@d66 3
@


1.20
log
@bad openinln call
@
text
@d28 3
d32 1
@


1.19
log
@added iq reg
@
text
@d113 1
a113 1
              CALL OPENINLN(10,NUMBUF,.TRUE.,0,0,IRTFLG)
@


1.18
log
@*** empty log message ***
@
text
@d127 2
@


1.17
log
@added iq fi
@
text
@d36 2
a37 1
        DATA LUN/10/,NULL/0/
@


1.16
log
@removed inline file when making another with same number
@
text
@d3 2
a4 2
C  UTIL4.F  
C                                     
d39 2
d64 1
d68 1
a68 1
C	   AUTOMATIC PARTICULE PICKING.
a81 1

d83 1
a83 1
C	   MAKE AN INLINE STACK
d121 9
d134 1
@


1.15
log
@add AP MQ
@
text
@d26 7
d105 11
d121 1
@


1.14
log
@AP MR
@
text
@d49 3
@


1.13
log
@added ms operation
@
text
@d47 2
a48 2
C          ELSEIF(FCHAR(4:5) .EQ. 'MA')  THEN
C             CALL MALI(MAXDIM)
a99 1
        RETURN
@


1.12
log
@ap mq removed
@
text
@d3 2
a4 2
C $$ UTIL4.FOR  
C                                     LONG FILENAMES DEC 27 88 al
d15 1
a15 1
C  $$ UTIL4:
d20 1
d23 34
a56 19
        IF(FCHAR(1:2).EQ.'AP')  THEN
           IF(FCHAR(4:5).EQ.'RA')  THEN
              CALL  FALB(MAXDIM)
           ELSEIF(FCHAR(4:5).EQ.'SA')  THEN
              CALL  SAQB(MAXDIM)
           ELSEIF(FCHAR(4:5).EQ.'SR')  THEN
              CALL  GALI(MAXDIM)
           ELSEIF(FCHAR(4:5).EQ.'MD')  THEN
              CALL  DSFS(MAXDIM)
           ELSEIF(FCHAR(4:5).EQ.'CA')  THEN
              CALL  HALI(MAXDIM)
C          ELSEIF(FCHAR(4:5).EQ.'MA')  THEN
C             CALL  MALI(MAXDIM)
           END IF
        ELSEIF(FCHAR(1:2).EQ.'HF')  THEN
           CALL  HF
C	Automatic Particule Picking.
        ELSEIF(FCHAR(1:2).EQ.'AT')  THEN
           IF (FCHAR(4:5).EQ.'IT')  THEN
d58 2
a59 1
	   ELSEIF(FCHAR(4:5).EQ.'PK')  THEN
d61 2
a62 1
	   ELSEIF(FCHAR(4:5).EQ.'SA')  THEN
d64 2
a65 1
	   ELSEIF(FCHAR(4:5).EQ.'WN')  THEN
d67 31
a97 1
	   END IF
d99 2
a100 1
        FCHAR(1:1)=';'
@


1.11
log
@vax error fixed.
@
text
@a30 2
           ELSEIF(FCHAR(4:5).EQ.'MQ')  THEN
              CALL  DSMQ(MAXDIM)
@


1.10
log
@correct command parsing
@
text
@d43 1
a43 1
	      CALL ATIT(MAXDIM)
@


1.9
log
@unbalenced quotes fixed
@
text
@d22 16
a37 10
        IF(FCHAR(4:5).EQ.'RA')  THEN
           CALL  FALB(MAXDIM)
        ELSEIF(FCHAR(4:5).EQ.'SA')  THEN
           CALL  SAQB(MAXDIM)
        ELSEIF(FCHAR(4:5).EQ.'SR')  THEN
           CALL  GALI(MAXDIM)
        ELSEIF(FCHAR(4:5).EQ.'MD')  THEN
           CALL  DSFS(MAXDIM)
        ELSEIF(FCHAR(4:5).EQ.'MQ')  THEN
           CALL  DSMQ(MAXDIM)
a39 4
        ELSEIF(FCHAR(4:5).EQ.'CA')  THEN
           CALL  HALI(MAXDIM)
C        ELSEIF(FCHAR(4:5).EQ.'MA')  THEN
C          CALL  MALI(MAXDIM)
@


1.8
log
@added automatic particle picking AT
@
text
@d46 1
a46 1
	   ELSEIF(FCHAR(4:5).EQ.WN')  THEN
@


1.7
log
@nosave
@
text
@d35 1
a35 1
          CALL  HALI(MAXDIM)
d38 11
@


1.6
log
@hali activated
@
text
@a19 1
#ifdef SP_UNIX
d21 1
a21 4
#else
	INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
C        
d30 2
a38 1

a39 1

@


1.5
log
@call hf without maxdim variable
@
text
@d36 2
a37 2
C        ELSEIF(FCHAR(4:5).EQ.'CA')  THEN
C          CALL  HALI(MAXDIM)
@


1.4
log
@added hf command
@
text
@d35 1
a35 1
           CALL  HF(MAXDIM)
@


1.3
log
@buffer on disk calls removed
@
text
@d34 2
@


1.2
log
@cpp_lines_added
@
text
@d27 1
a27 3
           CALL  FALB(MAXDIM,0)
        ELSEIF(FCHAR(4:5).EQ.'RB')  THEN
           CALL  FALB(MAXDIM,1)
d29 1
a29 3
           CALL  SAQB(MAXDIM,0)
        ELSEIF(FCHAR(4:5).EQ.'SB')  THEN
           CALL  SAQB(MAXDIM,1)
@


1.1
log
@Initial revision
@
text
@d20 3
d24 1
@
