head	1.13;
access;
symbols
	healthdept_2018:1.13
	pre_getangas:1.13
	pre_GPL2010:1.13
	pre_var_equation:1.12
	pre_fftwrings:1.12
	pre_opfiles:1.12
	src:1.12
	best-code:1.12
	x-named-regs:1.12
	x:1.12
	v13-00:1.12
	pre_GPL:1.12
	prec_CA:1.8
	noindx:1.8
	Bproc:1.8
	oct21:1.8
	last77:1.7;
locks; strict;
comment	@c @;


1.13
date	2009.08.26.17.55.12;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.23.18.42.09;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2003.11.25.15.43.02;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.20.12.48.49;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.16.16.46.21;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.06.04.21.02.18;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.08.25.19.18.25;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.08.25.13.30.52;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.11.06.18.00.19;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.10.10.18.36.30;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.10.04.19.58.32;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	95.10.04.18.50.36;	author mladjadj;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.42;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.13
log
@LUNF, * BUG
@
text
@C++*********************************************************************
C
C SUBKMEANS.F
C                  LUNF, * BUG                    AUG 2009 ARDEAN LEITH
C
C **********************************************************************
C
C  NEWKMEANS.F
C
C  THIS ROUTINE WILL PARTITION A NUMBER OF OBJECTS NOBJ, INTO A NUMBER OF
C  CLASSES NCLASS. AN OBJECT "I" BELONGS TO A CLASS "J" IF THE "EUCLIDIAN
C  DISTANCE" OF THIS OBJECT "I" TO THE CENTROID OF THE CLASS "J" IS THE 
C  SMALLEST OF DISTANCES TO ALL CLASS CENTROIDS.
C  A CLASS WILL HAVE MORE OBJECTS IN IT AS ALL OBJECT ARE PROCESSED.
C  THUS A CENTROID COORDINATES ARE CONTINUALLY COMPUTED AND CHANGING.
C  THIS CAUSES AN OBJECT "I" IN ONE CLASS TO FIND ITSELF CLOSER TO 
C  A CENTROID OF ANOTHER CLASS.
C  THAT OBJECT "I" IS REMOVED FROM ONE CLASS AND PUT INTO ANOTHER. 
C
C  REFERENCE: CLUSTER ANALYSIS ALGORITHMS
C             FOR DATA REDUCTION AND CLASSIFICATION OF OBJECTS.
C  BY: HELMUTH SPATH.
C
C  PUBLISHER: JOHN WILEY & SONS
C             ELLIS HORWOOD LIMITED,  1980
C
C  PAGE 72:

C	THE INITIAL ASSIGNMENT OF THE VECTORS X(NOBJ,NFAC) TO NCLASS CLUSTERS
C	IS GIVEN  BY THE ARRAY P(), WHERE P(I) IS THE CLUSTER NUMBER
C  	OF THE I-th VECTOR; THUS EACH P(I) MUST BE SUCH THAT 
C	1 <= P(I) =< NCLASS AND FOR EACH J=1,...,N AT LEAST ONE I WITH
C	P(I) = J MUST EXIST.
C
C	LET D DENOTE THE SUM OF THE E(J), WHERE E(J) IS THE SUM
C	OF THE SQUARES OF THE DISTANCES BETWEEN THE MEMBERS OF 
C	THE J-th CLUSTER AND THEIR CENTROIDS.
C
C	THE SUBROUTINE MINIMISES D AS FAR AS POSSIBLE BY
C	REPEATED EXCHANGES OF CLUSTER MEMBERS, THE P(I)
C	ARE CORRESPONDINGLY MODIFIED WITHOUT, HOWEVER,
C	CHANGING THE NUMBER OF CLUSTERS.
C
C	THE SUBROUTINE RETURNS THE VALUES AT THE FINAL
C	CONFIGURATION FOR THE CENTROIDS S(NCLASS,NFAC), THE 
C	SUMS E(NCLASS), AND D.
C
C	IF IDR = 1, THE CURRENT VALUES OF D AND OF THE VECTOR P
C	ARE PRINTED AT EACH ITERATION.
C
C	NOBJ	       : NUMBER OF OBJECTS
C       NCLASS         : NUMBER OF CLUSTERS
C       NFAC	       : NUMBER OF DIMENSION IN THE COORD. SYSTEM
C	X(NFAC,NOBJ)   : COORDINATES OF EACH OBJECT
C	P(NOBJ)	       : CLUSTER TO WHICH OBJECT I BELONGS.
C	S(NFAC,NCLASS) : COORDINATES OF THE CENTROIDS OF EACH CLUSTER.
C	E(NCLASS)      : SUM OF THE SQUARED DISTANCES OF ALL OBJECTS 
C		         (IN A CLUSTER) TO THEIR CENTROID.
C	D	       : SUM OF E(NCLASS)
C                        (THIS HAS TO BE REDUCED AFTER EACH NEW CLUSTERING)
C	Q(NCLASS)      : NUMBER OF OBJECTS IN EACH CLUSTER.
C       INUM(NFAC)     :                                          (SENT)
C       TYPE           : TYPE OF INPUT FILE e.g. _PIX, _IMC, _SEQ
C
C	NOTE: P() HAS BEEN INITIALIZED BEFORE THE CALL TO THIS ROUTINE.
C             IF (NOBJ/NCLASS < 5) SOME GOOD OPTIMAL PARTITIONS ARE
C             TO ADD THE POSSIBILITY OF WORKING IN MEMORY OR ON DISK,
C	      I ADDED THE READ OF X() DATA HERE.
C--***************************************************************************

        SUBROUTINE NEWKMEANS(NOBJ, NFAC, X, P, NCLASS, S, E, Q, D, IDR,
     &            INUM,NIMI,WT, COO, NFTOT, X_DIM, USE_DISK,LUNF,ITYPE)

        INCLUDE 'CMBLOCK.INC'

        INTEGER :: P, Q, R, U, V, W, IDR, NFTOT, PT, X_DIM

C	NOTE: IF (USE_DISK) THEN X_DIM=1 ELSE X_DIM=NOBJ

        DIMENSION X(NFAC,X_DIM), P(NOBJ), S(NFAC,NCLASS),INUM(NFAC),
     &      E(NCLASS), Q(NCLASS), COO(NFTOT),NIMI(NOBJ),WT(NFAC)

        LOGICAL :: DONE,USE_DISK

        IF (NOBJ/NCLASS .LT. 5) THEN
          WRITE(NOUT,*)' '
          WRITE(NOUT,*)' WARNING -------'
          WRITE(NOUT,*)' NUMBER OF OBJECTS / NUMBER OF CLASSES < 5'
          WRITE(NOUT,*)' SOME GOOD OPTIMAL PARTITIONS WILL NOT BE FOUND'
          WRITE(NOUT,*)'  '
        ENDIF

C	INITIALIZE TO ZERO, THE DISTANCES TO THE CENTROIDS AND
C	THE COORDINATES OF THE CENTROIDS.

c$omp   parallel do if(nfac.ge.64), private(j,k)
        DO J = 1, NCLASS
           Q(J) = 0
           E(J) = 0.
           DO K = 1, NFAC
              S(K,J) = 0.0
           ENDDO
        ENDDO

C	FOR EACH OBJECT, FIND ITS CLUSTER 'R', THE NUMBER OF OBJECT IN THE
C       CLUSTER 'Q(R)' AND ADD ITS COORDINATES 'X(I,K)' TO THE COORDINATES
C	OF THE CENTROID OF THE CLUSTER 'S(R,K)'.

        DO I = 1, NOBJ
	  IF (USE_DISK) THEN
             PT = 1
          ELSE
             PT = I
          ENDIF

C	  IN EITHER CASE, WE NEED TO READ X() AT LEAST ONCE.
          IF (ITYPE .EQ. 1) THEN
C            UNFORMATTED FILE FOR _SEQ IMAGE DATA
             READ(LUNF)   (COO(J), J = 1, NFTOT),FIM
          ELSE
C            FORMATTED FILE FOR IMAGE OR PIXEL COOR.
             READ(LUNF,*) (COO(J), J = 1, NFTOT),D1,D2,FIM,FDUM
          ENDIF
          NIMI(I) = FIM

c$omp     parallel do if(nfac.ge.64), private(j)
          DO J = 1, NFAC
              X(J,PT) = WT(J) * COO(INUM(J))
          ENDDO
          R = P(I)

          IF (R .LT. 1 .OR. R .GT. NCLASS) THEN
            WRITE(NOUT,*)' CLUSTER = ',R,' DOES NOT BELONG TO GROUP'
            WRITE(NOUT,*)' OBJECT I=',I,
     &                   ' HAS NOT BEEN PRESET TO ANY CLUSTER'
            RETURN
          ENDIF

          Q(R) = Q(R) + 1

c$omp     parallel do if(nfac.ge.64), private(k)
          DO K = 1, NFAC
             S(K,R) = S(K,R) + X(K,PT)
          ENDDO
        ENDDO 

C	REWIND THE UNIT TO READ THE DATA AGAIN       
        IF (USE_DISK) THEN
          IF (ITYPE .EQ. 1) THEN
C            UNFORMATTED FILE FOR _SEQ IMAGE DATA
             CALL REW(LUNF,1)
          ELSE
C            FORMATTED FILE FOR IMAGE OR PIXEL COOR.
             CALL REWF(LUNF,1)
          ENDIF
        ENDIF

C	COMPUTE THE CORRECT COORDINATES OF EACH CENTROID BY
C	DIVIDING THE SUM OF COORDS OF ALL ITS OBJECTS BY THE
C	NUMBER OF OBJECTS IN IT.

        DO J = 1, NCLASS
           IR = Q(J)

C	   EMPTY CLUSTER ? RETURN
           IF (IR .EQ. 0) RETURN

           F = 1. / FLOAT(IR)
c$omp      parallel do if(nfac.ge.64), private(k)
           DO K = 1, NFAC
              S(K,J) = S(K,J) * F
           ENDDO
        ENDDO

C	FIND E(R), THE SUM OF DISTANCES OF EACH OBJECT TO THE 
C	CENTROID OF THE CLUSTER 'R' IT BELONGS TO. 

        DO I = 1, NOBJ
          R = P(I)
          F = 0.

C         COMPUTE THE DISTANCE OF OBJECT 'I' TO THE CENTROID OF 
C         ITS CLUSTER 'R' AND ADD IT TO THE TOTAL SUM OF DISTANCES
C	  'E(R)' IN THAT CLUSTER.

          IF (USE_DISK) THEN
             IF (ITYPE .EQ. 1) THEN
C              UNFORMATTED FILE FOR _SEQ IMAGE DATA
               READ(LUNF) (COO(J), J = 1, NFTOT),FDUM
             ELSE
C              FORMATTED FILE FOR IMAGE OR PIXEL COOR.
               READ(LUNF,*) (COO(J), J = 1, NFTOT),FDUM,FDUM,FDUM,FDUM
             ENDIF
             DO J = 1, NFAC
                X(J,1) = WT(J) * COO(INUM(J))
             ENDDO
             PT = 1
          ELSE
             PT = I
          ENDIF

c$omp     parallel do if(nfac.ge.64), private(k),reduction(+:f)
          DO K = 1, NFAC
             F = F + (S(K,R) - X(K,PT))**2
          ENDDO
          E(R) = E(R) + F
        ENDDO

C	REWIND THE UNIT TO READ THE DATA AGAIN       
        IF (USE_DISK) THEN
           IF (ITYPE .EQ. 1) THEN
C             UNFORMATTED FILE FOR _SEQ IMAGE DATA
              CALL REW(LUNF,1)
           ELSE
C             FORMATTED FILE FOR IMAGE OR PIXEL COOR.
              CALL REWF(LUNF,1)
           ENDIF
        ENDIF

C	COMPUTE THE SUM OF ALL THESE DISTANCES. THE NEW CLUSTERING
C	HAS TO REDUCE THIS D VARIABLE OR STOP AND RETURN.

        D = 0.
        DO J = 1, NCLASS
           D = D + E(J)
        ENDDO

C	FOR EACH OBJECT 'I', CHECK ITS DISTANCE TO THE CENTROID OF
C	THE OTHER CLUSTERS. IF THIS DISTANCE IS SMALLER THAN THE DISTANCE
C	OF THIS OBJECT 'I' TO ITS OWN CLUSTER'S CENTROID, THEN MOVE
C	THE OBJECT 'I' TO THE NEW CLUSTER. STOP WHEN NO MORE OBJECTS 
C	ARE MOVED.

        I  = 0
        IT = 0

C	LOOP UNTIL DONE AND ALL OBJECTS HAVE BEEN CHECKED (I.GT.NOBJ) 
	DONE = .TRUE.

	DO
          I = I + 1
          IF (I .GT. NOBJ) THEN
             IF (DONE) RETURN
             DONE = .TRUE.

C	     REWIND THE UNIT TO READ THE DATA AGAIN       
             IF (USE_DISK) THEN
                IF (ITYPE .EQ. 1) THEN
C                  UNFORMATTED FILE FOR _SEQ IMAGE DATA
                   CALL REW(LUNF,1)
                ELSE
C                  FORMATTED FILE FOR IMAGE OR PIXEL COOR.
                   CALL REWF(LUNF,1)
                ENDIF
              ENDIF

              I = 1
           ENDIF

           IF (USE_DISK) THEN
              IF (ITYPE .EQ. 1) THEN
C                UNFORMATTED FILE FOR _SEQ IMAGE DATA
                 READ(LUNF)   (COO(J), J = 1, NFTOT),FDUM
              ELSE
C                FORMATTED FILE FOR IMAGE OR PIXEL COOR.
                 READ(LUNF,*) (COO(J), J = 1, NFTOT),FDUM,FDUM,FDUM,FDUM
              ENDIF

c$omp         parallel do if(nfac.ge.64), private(j)
              DO J = 1, NFAC
                 X(J,1) = WT(J) * COO(INUM(J))
              ENDDO
              PT = 1
           ELSE
              PT = I
           ENDIF

C	   FIND THE CLUSTER, R, AND THE NUMBER, U, OF OBJECTS IN IT.
C          NOTE THAT IF THERE IS ONLY ONE OBJECT, IT IS CLOSEST TO ITSELF.

           R = P(I)
           U = Q(R)
           IF (U .GT. 1) THEN

C	      COMPUTE DISTANCE 'A' OF OBJECT 'I' TO ITS OWN CLUSTER 'R'

              H = FLOAT(U)
              H = H / (H - 1.)
              F = 0.
c$omp         parallel do if(nfac.ge.64), private(k),reduction(+:f)
              DO K = 1, NFAC
                  F = F + (S(K,R) - X(K,PT))**2
              ENDDO
              A = H * F
              B = 1. E30

C	      FIND DISTANCE 'F' OF THE SAME OBJECT 'I' TO THE OTHER CLUSTERS.
C	      DISTANCE 'B' IS THE SMALLEST OF THESE DISTANCES 'F' CORRESPONDING
C	      TO A CLUSTER 'V' WHICH HAS 'W' NUMBER OF OBJECTS IN IT.

              DO J = 1, NCLASS
                 IF (J .NE. R) THEN
                   U = Q(J)
                   H = FLOAT(U)
                   H = H / (H + 1.)
                   F = 0.
c$omp              parallel do if(nfac.ge.64), private(k),reduction(+:f)
                   DO K = 1, NFAC
                       F = F + (S(K,J) - X(K,PT))**2
                   ENDDO
                   F = H * F
                   IF (F .LE. B) THEN
C                      SMALLER DISTANCE FOUND, SAVE THAT CLUSTER 'V', THE NUMBER 
C	               OF OBJECTS IN IT AND ITS DISTANCE TO 'I'.

                       B = F
                       V = J
                       W = U
                   ENDIF
                 ENDIF          
              ENDDO
 
              IF (B .LT. A) THEN

C	          OBJECT 'I' IS CLOSEST TO CLUSTER 'V' INSTEAD. SO TAKE OBJECT
C	         'I' FROM CLUSTER 'R' AND PUT IT IN CLUSTER 'V'
C
	         DONE = .FALSE.

C                RECOMPUTE THEIR CENTROID AND SUM OF DISTANCES.
C                these are equations (3.2.16, 3.2.17, 3.2.20 and 3.2.21) on page
C	         71-72 of the above book reference.

                 IT   = 0
                 E(R) = E(R) - A
                 E(V) = E(V) + B
                 D    = D - A + B
                 H    = FLOAT(Q(R))
                 G    = FLOAT(W)
                 A    = 1. / (H - 1.)
                 B    = 1. / (G + 1.)

C                RECOMPUTE COORDS. OF CENTROID OF 'R' AND 'V' CLUSTERS

c$omp            parallel do if(nfac.ge.64), private(k,f)
                 DO K = 1, NFAC
                    F = X(K,PT)

C                   OBJECT 'I' REMOVED FROM CLUSTER 'R'.
                    S(K,R) = ( H * S(K,R) - F) * A

C	            OBJECT 'I' ADDED TO CLUSTER 'V'
                    S(K,V) = ( G * S(K,V) + F) * B
                 ENDDO

C	         RESET THE CLUSTER NUMBER FOR OBJECT 'I', RECOMPUTE THE
C	         NUMBER OF ELEMENTS IN CLUSTER 'R' AND 'V'.

                 P(I) = V
                 Q(R) = Q(R) - 1
                 Q(V) = Q(V) + 1

C                PRINT AN OUTPUT
                 IF (IDR .EQ. 1) WRITE(NOUT,16) I, D
16               FORMAT(2X,I4,' MIMINIZE DISTANCE D= ',1X,F12.2,/,
     &           'CLUSTER MEMBERSHIP',/)

                 IF (IDR .EQ. 1) WRITE(NOUT,17) (U,P(U), U = 1, NOBJ)
17               FORMAT(10X,20I3,/)

	      ELSE
C	         OBJECT 'I' IS CLOSEST TO CLUSTER 'R', TAKE NEXT OBJECT.
                 IT = IT + I
              ENDIF
	   ENDIF
        ENDDO
   
        END
@


1.12
log
@_SEQ file format changed
@
text
@d1 6
d20 3
a22 4
C	REFERENCE: CLUSTER ANALYSIS ALGORITHMS
C		   for data reduction and classification of objects.
C
C		   BY HELMUTH SPATH.
d24 2
a25 2
C       PUBLISHER: JOHN WILEY & SONS
C                  ELLIS HORWOOD LIMITED,  1980
d60 1
a60 1
C                     (this has to be reduced after each new clustering)
d63 1
d76 1
a76 1
        INTEGER P, Q, R, U, V, W, IDR, NFTOT, PT, X_DIM
d118 1
d121 2
a122 1
             READ(LUNF,*) (COO(J), J = 1, NFTOT),D1,D2,FIM
d140 1
d150 1
d153 1
d163 1
a163 1
          IR = Q(J)
d165 2
a166 1
C	  EMPTY CLUSTER ? RETURN
d168 5
a172 6
          IF (IR .EQ. 0) RETURN
          F = 1. / FLOAT(IR)
c$omp     parallel do if(nfac.ge.64), private(k)
          DO K = 1, NFAC
            S(K,J) = S(K,J) * F
          ENDDO
d188 2
a189 1
               READ(LUNF) (COO(J), J = 1, NFTOT)
d191 2
a192 1
               READ(LUNF) (COO(J), J = 1, NFTOT)
d212 1
d215 1
d249 1
d252 1
d262 2
a263 1
                 READ(LUNF)   (COO(J), J = 1, NFTOT)
d265 2
a266 1
                READ(LUNF,*) (COO(J), J = 1, NFTOT)
d365 1
a365 1
16               FORMAT(2X,I4,' MIMINIZE DISTANCE D = ',1X,F12.2,/,
@


1.11
log
@comments
@
text
@d112 1
a112 1
             READ(LUNF)   (COO(J), J = 1, NFTOT),D1,D2,FIM
@


1.10
log
@col 73
@
text
@d57 1
d59 3
a61 9
C
C	NOTE:
C		P() HAS BEEN INITIALIZED BEFORE THE CALL TO THIS 
C		ROUTINE.
C
C		IF (NOBJ/NCLASS < 5) SOME GOOD OPTIMAL PARTITIONS ARE
C               NOT FOUND. 
C
C	NOTE: TO ADD THE POSSIBILITY OF WORKING IN MEMORY OR ON DISK,
@


1.9
log
@CA & CL rewrite
@
text
@d289 6
a294 6
                    U = Q(J)
                    H = FLOAT(U)
                    H = H / (H + 1.)
                    F = 0.
c$omp               parallel do if(nfac.ge.64), private(k),reduction(+:f)
                    DO K = 1, NFAC
d296 3
a298 3
                    ENDDO
                    F = H * F
                    IF (F .LE. B) THEN
d305 1
a305 1
                    ENDIF
@


1.8
log
@OpenMP
@
text
@d2 1
a2 1
C  $$ NEWKMEANS.FOR
a3 15
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
C **************************************************************************
C
C
C
C
C	SUBROUTINE KMEANS.
C
a21 1
C
d23 1
a23 3
C
C
C
a65 2
C
C
d71 2
a72 1
     $                       INUM,NIMI,WT, COO, NFTOT, X_DIM, USE_DISK)
d74 1
d76 1
d78 1
d80 4
a83 2
     $      E(NCLASS), Q(NCLASS), COO(NFTOT),NIMI(NOBJ),WT(NFAC)
        LOGICAL DONE,USE_DISK
d85 7
a91 6
          WRITE(NOUT,2) NOBJ,NCLASS
2         FORMAT(10X,' CL KM COMMAND: NOBJ',I6,' NCLASS ',I6)
          WRITE(NOUT,*) 'NUMBER OF OBJECTS / NUMBER OF CLASSES < 5'
          WRITE(NOUT,*) 'SOME GOOD OPTIMAL PARTITIONS WILL NOT BE FOUND'
        END IF
C
d94 2
a95 2
C
c$omp parallel do if(nfac.ge.64), private(j,k)
d97 7
a103 7
          Q(J) = 0
          E(J) = 0.
          DO K = 1, NFAC
            S(K,J) = 0.
          END DO
        END DO
C
d107 1
a107 1
C
d109 2
a110 2
	  IF(USE_DISK) THEN
            PT = 1
d112 3
a114 3
            PT = I
          END IF
C
d116 11
a126 6
C
          READ(111)   (COO(J), J = 1, NFTOT),D1,D2,NIMI(I)
c$omp parallel do if(nfac.ge.64), private(j)
         DO J = 1, NFAC
            X(J,PT) = WT(J) * COO(INUM(J))
          END DO
d128 1
d130 3
a132 3
            WRITE(NOUT,*) 'CLUSTER = ',R,' DOES NOT BELONG TO GROUP'
            WRITE(NOUT,*) 
     $      'OBJECT I=',I,' HAS NOT BE PRESET TO ANY CLUSTER'
d134 2
a135 1
          END IF
d137 1
a137 1
c$omp parallel do if(nfac.ge.64), private(k)
d139 3
a141 3
            S(K,R) = S(K,R) + X(K,PT)
          END DO
        END DO 
d144 7
a150 1
        IF (USE_DISK) CALL REW(111,1)
a151 1
C
d155 1
a155 1
C
d158 1
a158 1
C
d160 1
a160 1
C
d163 1
a163 1
c$omp parallel do if(nfac.ge.64), private(k)
d166 3
a168 3
          END DO
        END DO
C
d171 1
a171 1
C
d175 1
a175 1
C
a178 1
C
d180 10
a189 6
          IF(USE_DISK) THEN
            READ(111)   (COO(J), J = 1, NFTOT)
            DO J = 1, NFAC
              X(J,1) = WT(J) * COO(INUM(J))
            END DO
            PT = 1
d191 2
a192 2
            PT = I
          END IF
d194 1
a194 1
c$omp parallel do if(nfac.ge.64), private(k),reduction(+:f)
d196 2
a197 2
            F = F + (S(K,R) - X(K,PT))**2
          END DO
d199 1
a199 1
        END DO
d202 8
a209 2
        IF (USE_DISK) CALL REW(111,1)
C
d212 1
a212 1
C
d215 3
a217 3
          D = D + E(J)
        END DO
C
d223 2
a224 2
C
        I = 0
d231 77
a307 66
        I = I + 1
        IF (I .GT. NOBJ) THEN
          IF (DONE) RETURN
          DONE = .TRUE.

C         REWIND THE UNIT TO READ THE DATA AGAIN       
          IF (USE_DISK) CALL REW(111,1)
          I = 1
        END IF

        IF(USE_DISK) THEN
          READ(111)   (COO(J), J = 1, NFTOT)
c$omp parallel do if(nfac.ge.64), private(j)
          DO J = 1, NFAC
            X(J,1) = WT(J) * COO(INUM(J))
          END DO
          PT = 1
        ELSE
          PT = I
        END IF
C
C	FIND THE CLUSTER, R, AND THE NUMBER, U, OF OBJECTS IN IT.
C       NOTE THAT IF THERE IS ONLY ONE OBJECT, IT IS CLOSEST TO ITSELF.
C
        R = P(I)
        U = Q(R)
        IF (U .GT. 1) THEN
C
C	COMPUTE DISTANCE 'A' OF OBJECT 'I' TO ITS OWN CLUSTER 'R'
C
        H = FLOAT(U)
        H = H / (H - 1.)
        F = 0.
c$omp parallel do if(nfac.ge.64), private(k),reduction(+:f)
        DO K = 1, NFAC
          F = F + (S(K,R) - X(K,PT))**2
        END DO
        A = H * F
        B = 1. E30
C
C	FIND DISTANCE 'F' OF THE SAME OBJECT 'I' TO THE OTHER CLUSTERS.
C	DISTANCE 'B' IS THE SMALLEST OF THESE DISTANCES 'F' CORRESPONDING
C	TO A CLUSTER 'V' WHICH HAS 'W' NUMBER OF OBJECTS IN IT.
C
        DO J = 1, NCLASS
          IF (J .NE. R) THEN
            U = Q(J)
            H = FLOAT(U)
            H = H / (H + 1.)
            F = 0.
c$omp parallel do if(nfac.ge.64), private(k),reduction(+:f)
            DO K = 1, NFAC
              F = F + (S(K,J) - X(K,PT))**2
            END DO
            F = H * F
            IF (F .LE. B) THEN
C
C             SMALLER DISTANCE FOUND, SAVE THAT CLUSTER 'V', THE NUMBER 
C	      OF OBJECTS IN IT AND ITS DISTANCE TO 'I'.
C
              B = F
              V = J
              W = U
            END IF
          END IF          
        END DO
d309 1
a309 1
        IF (B .LT. A) THEN
d311 2
a312 24
C
C	OBJECT 'I' IS CLOSEST TO CLUSTER 'V' INSTEAD. SO TAKE OBJECT
C	'I' FROM CLUSTER 'R' AND PUT IT IN CLUSTER 'V'
C
	DONE = .FALSE.
C
C       RECOMPUTE THEIR CENTROID AND SUM OF DISTANCES.
C       these are equations (3.2.16, 3.2.17, 3.2.20 and 3.2.21) on page
C	71-72 of the above book reference.
C
        IT = 0
        E(R) = E(R) - A
        E(V) = E(V) + B
        D = D - A + B
        H = FLOAT(Q(R))
        G = FLOAT(W)
        A = 1. / (H - 1.)
        B = 1. / (G + 1.)
C
C	  RECOMPUTE COORDS. OF CENTROID OF 'R' AND 'V' CLUSTERS
C
c$omp parallel do if(nfac.ge.64), private(k,f)
        DO K = 1, NFAC
          F = X(K,PT)
d314 1
a314 23
C         OBJECT 'I' REMOVED FROM CLUSTER 'R'.
C
          S(K,R) = ( H * S(K,R) - F) * A
C
C	  OBJECT 'I' ADDED TO CLUSTER 'V'
C
          S(K,V) = ( G * S(K,V) + F) * B
        END DO
C
C	RESET THE CLUSTER NUMBER FOR OBJECT 'I', RECOMPUTE THE
C	NUMBER OF ELEMENTS IN CLUSTER 'R' AND 'V'.
C
        P(I) = V
        Q(R) = Q(R) - 1
        Q(V) = Q(V) + 1
C
C       PRINT AN OUTPUT
C
        IF( IDR .EQ. 1) WRITE(6,16) I, D
        IF( IDR .EQ. 1) WRITE(6,17) (U,P(U), U = 1, NOBJ)
16      FORMAT(2X,I4,' MIMINIZE DISTANCE D = ',1X,F12.2,/,
     $         'CLUSTER MEMBERSHIP',/)
17      FORMAT(10X,20I3,/)
d316 47
a362 8
	ELSE
C
C	  OBJECT 'I' IS CLOSEST TO CLUSTER 'R', TAKE NEXT OBJECT.
C
          IT = IT + I
        END IF
	END IF
        END DO
@


1.7
log
@corrected
@
text
@a97 2
CNO_SAVE

d108 1
a108 1
c$doacross if(nfac.ge.64), local(j,k)
d131 2
a132 2
c$doacross if(nfac.ge.64), local(j)
          DO J = 1, NFAC
a134 1

d143 1
a143 1
c$doacross if(nfac.ge.64), local(k)
d164 1
a164 1
c$doacross if(nfac.ge.64), local(k)
d192 1
a192 1
c$doacross if(nfac.ge.64), local(k),reduction(f)
d222 2
a223 1
10      I = I + 1
d235 1
a235 1
c$doacross if(nfac.ge.64), local(j)
d249 1
a249 1
        IF (U .LE. 1) GOTO 10
d256 1
a256 1
c$doacross if(nfac.ge.64), local(k),reduction(f)
d273 1
a273 1
c$doacross if(nfac.ge.64), local(k),reduction(f)
d290 1
a290 7
        IF (B .GE. A) THEN
C
C	  OBJECT 'I' IS CLOSEST TO CLUSTER 'R', TAKE NEXT OBJECT.
C
          IT = IT + I
          GOTO 10
        END IF
d313 1
a313 1
c$doacross if(nfac.ge.64), local(k,f)
d341 8
a348 1
        GOTO 10
@


1.6
log
@||
@
text
@a15 1
C  MAHIEDDINE LADJADJ		12/30/93
d93 1
a96 1
        INTEGER P, Q, R, U, V, W, IDR, NFTOT, PT
d103 1
a103 1
          WRITE(NOUT,*) 'NUMBER OF OBJECTS / NUMBER OF CLASS < 5'
@


1.5
log
@*** empty log message ***
@
text
@d111 1
d134 1
d147 1
d168 1
d196 1
d198 1
a198 2
            T = S(K,R) - X(K,PT)
            F = F + T * T
d238 1
d259 1
d261 1
a261 2
          T = S(K,R) - X(K,PT)
          F = F + T * T  
d276 1
d278 1
a278 2
              T = S(K,J) - X(K,PT)
              F = F + T * T
d322 1
@


1.4
log
@nosave
@
text
@a92 1
#ifdef SP_UNIX
a93 5
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif


@


1.3
log
@too long line
@
text
@d105 1
a105 1

@


1.2
log
@change write(* to write(nout
@
text
@d146 2
a147 1
            WRITE(NOUT,*) 'OBJECT I=',I,' HAS NOT BE PRESET TO ANY CLUSTER'
@


1.1
log
@Initial revision
@
text
@d93 5
a98 2
        COMMON /UNITS/LUNC,NIN,NOUT
        INTEGER LUNC,NIN,NOUT,X_DIM
d145 2
a146 2
            WRITE(*,*) 'CLUSTER = ',R,' DOES NOT BELONG TO GROUP'
            WRITE(*,*) 'OBJECT I=',I,' HAS NOT BE PRESET TO ANY CLUSTER'
@
