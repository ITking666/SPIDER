head	1.22;
access;
symbols
	healthdept_2018:1.22
	pre_getangas:1.20
	GPL2010:1.18
	pre_GPL2010:1.17
	pre_var_equation:1.17
	pre_fftwrings:1.17
	pre_opfiles:1.17
	src:1.17
	best-code:1.17
	x-named-regs:1.17
	x:1.17
	v13-00:1.17
	pre_GPL:1.15
	prec_CA:1.15
	noindx:1.14
	Bproc:1.12
	oct21:1.9
	last77:1.9;
locks; strict;
comment	@c @;


1.22
date	2018.10.03.14.34.06;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2014.01.12.19.36.30;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2010.11.24.16.19.37;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2010.11.24.15.17.22;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2010.06.24.13.25.44;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.17.19.52.25;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.17.17.49.42;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.18.20.48.52;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2002.03.11.14.07.38;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.11.06.15.10.16;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.09.11.19.37.16;	author bimal;	state Exp;
branches;
next	1.11;

1.11
date	2000.07.24.18.36.29;	author bimal;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.24.20.31.38;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.03.26.14.54.17;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	99.03.26.14.45.32;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	98.04.06.18.57.53;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.12.10.17.10.13;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	97.11.06.15.17.11;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	96.12.02.17.44.15;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	96.04.10.16.08.33;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	96.04.10.16.00.03;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	96.01.25.15.44.16;	author pawel;	state Exp;
branches;
next	;


desc
@main for FP
@


1.22
log
@email_health_dept
@
text
@C++*********************************************************************
C
C FOUR1A_FP.F                                  
C                 ADAPTED TO NEW FOURIER FORMAT    7/24/00 BIMAL                  
C                 OPFILE                            NOV 00 ARDEAN LEITH
C                 OPFILEC                           FEB 03 ARDEAN LEITH    
C                 SETPRMS FOR PIXSIZ                NOV 10 ARDEAN LEITH    
C                 DEFAULT RATIO                     NOV 10 ARDEAN LEITH    
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  FOUR1A_FP
C
C  PURPOSE: 2D OR 3D IMAGES OF ANY (EVEN/ODD) DIMENSION  IS 
C           INTERPOLATED TO ANY INTGER DIMENSION. 
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE FOUR1A_FP

        INCLUDE 'CMBLOCK.INC' 
        INCLUDE 'CMLIMIT.INC'

        CHARACTER (LEN=MAXNAM) :: FILNAM
        CHARACTER (LEN=1)      :: NULL = CHAR(0)

        REAL, ALLOCATABLE      :: X(:,:)  
        REAL, ALLOCATABLE      :: Y(:,:)     
        REAL, ALLOCATABLE      :: X3(:,:,:) 
        REAL, ALLOCATABLE      :: Y3(:,:,:) 
 
	INTEGER, PARAMETER     :: LUN1 = 50
	INTEGER, PARAMETER     :: LUN2 = 51

C       OPEN OLD FILE
        MAXIM   = 0       
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM1,NROW1,NSLICE1,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

C	GET OUTPUT FILE  NAME
        CALL FILERD(FILNAM,NLETO,NULL,'OUTPUT',IRTFLG)
        IF (IRTFLG .EQ. -1) GOTO 9000

        NSAM2   = 0
        NROW2   = 0
        NSLICE2 = 0

        IF (NSLICE1 > 1) THEN
           CALL RDPRI3S(NSAM2,NROW2,NSLICE2,NOT_USED,
     &                'DIMENSIONS, NSAM, NROW, & NSLICE',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9000

C	   THE USER IS ALLOWED TO ENTER ONLY
C	   ONE DIMENSION, THE OTHER DIMS ARE COMPUTED TO KEEP THE SAME 
C	   SIZE RELATION AS INPUT.
           IF (NROW2 .LE. 0) THEN
              NROW2 = (FLOAT(NSAM2)   / FLOAT(NSAM1)) * FLOAT(NROW1)
           ENDIF
           IF (NSLICE2 .LE. 0) THEN
              NSLICE2 = (FLOAT(NSAM2) / FLOAT(NSAM1)) * FLOAT(NSLICE1)
           ENDIF
        ELSE
           NSLICE2 = 1
           CALL RDPRIS(NSAM2,NROW2,NOT_USED,
     &                'DIMENSIONS, NSAM & NROW',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9000

C	   THE USER IS ALLOWED TO ENTER ONLY
C	   ONE DIMENSION, THE OTHER DIMS ARE COMPUTED TO KEEP THE SAME 
C	   SIZE RELATION AS INPUT.
           IF (NROW2 .EQ. 0) THEN
              NROW2 = (FLOAT(NSAM2) / FLOAT(NSAM1)) * FLOAT(NROW1)
           ENDIF

        ENDIF

C	OPEN THE OUTPUT FILE
        MAXIM2 = 0
	CALL OPFILEC(LUN1,.FALSE.,FILNAM,LUN2,'U',IFORM,
     &             NSAM2,NROW2,NSLICE2, MAXIM2,'OUTPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 9000

        IF (NSLICE1 .GT. 1) THEN
C          3D CASE

           LSD  = NSAM1+2-MOD(NSAM1,2)
           LSDN = NSAM2+2-MOD(NSAM2,2)

           ALLOCATE (X3(LSD, NROW1,NSLICE1),
     &               Y3(LSDN,NROW2,NSLICE2),STAT=IRTFLG)
           IF (IRTFLG.NE.0) THEN 
              MWANT = LSD*NROW1*NSLICE1 + LSDN*NROW2*NSLICE2
              CALL ERRT(46,'FOUR1A_FP, X3 & Y3',MWANT)
              GOTO 9001
           ENDIF 

           CALL READV(LUN1,X3,LSD,NROW1,NSAM1,NROW1,NSLICE1)

           CALL FINT3(X3,Y3,NSAM1,NROW1,NSLICE1,NSAM2,NROW2,
     &                NSLICE2,LSD,LSDN)

           CALL WRITEV(LUN2,Y3,LSDN,NROW2,NSAM2,NROW2,NSLICE2)

C          VOLUME FILE HEADER FOR PIXSIZ HAS CHANGED
           SCALEX = FLOAT(NSAM1)   / FLOAT(NSAM2)
           SCALEY = FLOAT(NROW1)   / FLOAT(NROW2)
           SCALEZ = FLOAT(NSLICE1) / FLOAT(NSLICE2) 

           SCALET  = SCALEX
           IF (SCALEY .NE. SCALEX) SCALET = 0.0   ! X NOT SAME AS Y
           IF (SCALEZ .NE. SCALEX) SCALET = 0.0   ! Z NOT SAME AS Y
  
        ELSE
C          2D CASE
           NSLICE2 = 1
           LSD     = NSAM1+2-MOD(NSAM1,2)
           LSDN    = NSAM2+2-MOD(NSAM2,2)

           ALLOCATE (X(LSD,NROW1), Y(LSDN,NROW2), STAT=IRTFLG)
           IF (IRTFLG.NE.0) THEN 
              MWANT = LSD*NROW1 + LSDN*NROW2
              CALL ERRT(46,'FOUR1A_FP, X & Y',MWANT)
              GOTO 9000
          ENDIF 

           CALL READV(LUN1,X,LSD,NROW1,NSAM1,NROW1,NSLICE2)

           CALL FINT(X,Y,NSAM1,NROW1,NSAM2,NROW2,LSD,LSDN)

           CALL WRITEV(LUN2,Y,LSDN,NROW2,NSAM2,NROW2,NSLICE2)

C          IMAGE FILE HEADER FOR PIXSIZ HAS CHANGED
           SCALEX = FLOAT(NSAM1)   / FLOAT(NSAM2)
           SCALEY = FLOAT(NROW1)   / FLOAT(NROW2)
           SCALET = SCALEX
           IF (SCALEY .NE. SCALEX) SCALET = 0.0   ! X NOT SAME AS Y

        ENDIF

C       UPDATE THE INCORE HEADER VALUE & FILE HEADER FOR PIXSIZ
        CALL SETPRMS(LUN2, SCALET,IRTFLG)


9000   IF (NSLICE .EQ. 1) THEN
           IF (ALLOCATED(X)) DEALLOCATE (X)
           IF (ALLOCATED(Y)) DEALLOCATE (Y)
        ELSE
           IF (ALLOCATED(X3)) DEALLOCATE (X3)
           IF (ALLOCATED(Y3)) DEALLOCATE (Y3)
        ENDIF

9001    CLOSE (LUN2)
        CLOSE (LUN1)

        END
@


1.21
log
@enter
@
text
@d16 1
a16 1
C=* Email: spider@@wadsworth.org                                        *
@


1.20
log
@ALLOCATABLE) typo
@
text
@d72 1
a72 1
     &                'ENTER DIMENSIONS, NSAM, NROW, & NSLICE',IRTFLG)
d87 1
a87 1
     &                'ENTER DIMENSIONS, NSAM & NROW',IRTFLG)
@


1.19
log
@SETPRMS FOR PIXSIZ
@
text
@d48 1
a48 1
        REAL, ALLOCATABLE)     :: X(:,:)  
@


1.18
log
@GPL_2010
@
text
@d3 6
a8 5
C    FOUR1A_FP.F                                  
C
C    7/24/00 BIMAL                  ADAPTED TO NEW FOURIER FORMAT               
C                                   OPFILE           NOV 00 ARDEAN LEITH
C                                   OPFILEC          FEB 03 ARDEAN LEITH    
d34 2
a35 4
C       2D AND 3D IMAGES OF ANY(EVEN/ODD) DIMENSION IS TAKEN AS INPUT
C       AND INTERPOLATED TO ANY DIMENSION. 
C
C IMAGE_PROCESSING_ROUTINE
d45 2
a46 2
        COMMON /COMMUN/ FILNAM
        CHARACTER (LEN=MAXNAM) ::  FILNAM
d48 4
a51 4
        REAL, ALLOCATABLE, DIMENSION(:,:)   :: X  
        REAL, ALLOCATABLE, DIMENSION(:,:)   :: Y     
        REAL, ALLOCATABLE, DIMENSION(:,:,:) :: X3 
        REAL, ALLOCATABLE, DIMENSION(:,:,:) :: Y3 
d53 2
a54 1
        DATA  LUN1,LUN2/9,10/
d56 1
d58 1
a58 1
        CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
d62 35
a96 8
        NSAMN   = 0 
        NSLICEN = 0
        MAXIM   = 0 
        CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',IFORM,
     &    NSAMN,NROWN,NSLICEN,MAXIM,'INTERPOLATED OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CLOSE(LUN1)
           RETURN
d99 7
a105 1
        IF (NSLICE .GT. 1) THEN
d108 2
a109 2
           LSD  = NSAM +2-MOD(NSAM,2)
           LSDN = NSAMN+2-MOD(NSAMN,2)
d111 2
a112 1
           ALLOCATE (X3(LSD,NROW,NSLICE), STAT=IRTFLG)
d114 2
a115 1
              CALL ERRT(46,'FP, X3',IER)
a116 7
              RETURN
           ENDIF 

           ALLOCATE (Y3(LSDN,NROWN,NSLICEN), STAT=IRTFLG)
           IF (IRTFLG.NE.0) THEN 
              CALL ERRT(46,'FP, Y3',IER)
              GOTO 9000
d119 1
a119 1
           CALL READV(LUN1,X3,LSD,NROW,NSAM,NROW,NSLICE)
d121 2
a122 2
           CALL FINT3(X3,Y3,NSAM,NROW,NSLICE,NSAMN,NROWN,
     &                NSLICEN,LSD,LSDN)
d124 1
a124 1
           CALL WRITEV(LUN2,Y3,LSDN,NROWN,NSAMN,NROWN,NSLICEN)
d126 9
d137 3
a139 3
           NSLICEN = 1
           LSD     = NSAM +2-MOD(NSAM,2)
           LSDN    = NSAMN+2-MOD(NSAMN,2)
d141 1
a141 1
           ALLOCATE (X(LSD,NROW), STAT=IRTFLG)
d143 2
a144 1
              CALL ERRT(46,'FP, X',IER)
d148 1
a148 5
           ALLOCATE (Y(LSDN,NROWN), STAT=IRTFLG)
           IF (IRTFLG.NE.0) THEN 
              CALL ERRT(46,'FP, Y',IER)
              GOTO 9001
           ENDIF 
d150 1
a150 1
           CALL READV(LUN1,X,LSD,NROW,NSAM,NROW,NSLICEN)
d152 1
a152 1
           CALL FINT(X,Y,NSAM,NROW,NSAMN,NROWN,LSD,LSDN)
d154 5
a158 1
           CALL WRITEV(LUN2,Y,LSDN,NROWN,NSAMN,NROWN,NSLICEN)
d161 4
@


1.17
log
@GPL License fixed
@
text
@a9 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d11 5
a15 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d17 1
a17 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d22 1
a22 1
C=* This program is distributed in the hope that it will be useful,    *
d24 1
a24 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a25 1
C=*                                                                    *
d27 1
a27 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.16
log
@HRI GPL License used
@
text
@a9 2
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK        **
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK        *
d13 1
a13 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a32 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND     *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.  *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR   *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR*
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                          *
@


1.15
log
@opfilec
@
text
@d10 1
d12 24
@


1.14
log
@nloop,iloop_removed
@
text
@d5 3
a7 2
C    7/24/00 BIMAL                        ADAPTED TO NEW FOURIER FORMAT               
C                                       USED OPFILE NOV 00 ARDEAN LEITH
a25 1
C        0         2         3         4         5         6         7 *
d32 5
a36 1
  
a41 3
        CHARACTER *81 FILNAM
        CHARACTER *1  NULL

a42 2
        NULL   = CHAR(0)
        NSLICE = 1
d45 1
a45 1
        CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
d49 9
a57 3
        NSLICE = MAX0(NSLICE,1)

        CALL FILERD(FILNAM,NLET,NULL,'OUTPUT',IRTFLG)
a58 1
C       3D CASE
d60 1
a61 15
           CALL RDPRMI(INT_CLMN,INT_ROW,NOT_USED,
     &         'INTERPOLATED DIMENSION (COLUMNS, ROWS)')           

           CALL RDPRMI(INT_SLCN,NSAMN,NOT_USED,
     &         'INTERPOLATED DIMENSION (SLICES)') 

           NROWN   = INT_ROW
           NSAMN   = INT_CLMN
           NSLICEN = INT_SLCN
           
           MAXIM   = 0       
           CALL OPFIL(.FALSE.,FILNAM,LUN2,'U',NSAMN,NROWN,NSLICEN,
     &             MAXIM,'  ',.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

d68 1
a68 2
              CLOSE (LUN1)
              CLOSE (LUN2)
d75 1
a75 3
              CLOSE (LUN1)
              CLOSE (LUN2)
              RETURN
a78 1
           CLOSE (LUN1)
d82 1
a83 1
           CLOSE (LUN2)
a84 1
C       2D CASE
d86 1
a86 4
           CALL RDPRMI(INT_CLMN,INT_ROW,NOT_USED,
     &         'INTERPOLATED DIMENSION (COLUMNS, ROWS)')          
           NROWN   = INT_ROW
           NSAMN   = INT_CLMN
d88 2
a89 7
           MAXIM   = 0       
           CALL OPFIL(.FALSE.,FILNAM,LUN2,'U',NSAMN,NROWN,NSLICEN,
     &             MAXIM,'  ',.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
            
           LSD  = NSAM +2-MOD(NSAM,2)
           LSDN = NSAMN+2-MOD(NSAMN,2)
d94 2
a95 4
              CLOSE (LUN1)
              CLOSE (LUN2)
              RETURN
           ENDIF 
d100 1
a100 3
              CLOSE (LUN1)
              CLOSE (LUN2)
              RETURN
a103 1
           CLOSE (LUN1)
d106 1
d108 1
a108 1
           CLOSE (LUN2)
d110 4
a113 3
        IF (NSLICE .EQ. 1) THEN
           DEALLOCATE (X)
           DEALLOCATE (Y)
d115 2
a116 2
           DEALLOCATE (X3)
           DEALLOCATE (Y3)
d118 4
@


1.13
log
@used opfile
@
text
@d57 1
a57 1
           CALL RDPRMI(INT_CLMN,INT_ROW,NLOOP,ILOOP,
d60 1
a60 1
           CALL RDPRMI(INT_SLCN,NSAMN,NLOOP,ILOOP,
d101 1
a101 1
           CALL RDPRMI(INT_CLMN,INT_ROW,NLOOP,ILOOP,
@


1.12
log
@adapted to new fourier format for 3d interpolation
@
text
@d3 1
a3 1
C    FOUR1A_FP.FOR                                 
d6 1
d18 1
a18 1
C   
a32 2

 
a36 1

d40 1
d44 2
a45 3
 
 
        IDUM = 0       
d47 1
a47 2
     &             IDUM,'INPUT',.FALSE.,IRTFLG)
        NSLICE=MAX0(NSLICE,1)
d50 2
a62 1

d66 5
a71 3
           
           CALL OPENF(FILNAM,LUN2,NSAMN,NROWN,'UNKNOWN',NF,NSLICEN)
            
d106 4
a109 1
           CALL OPENF(FILNAM,LUN2,NSAMN,NROWN,'UNKNOWN',NF,NSLICEN)
@


1.11
log
@2d images use new fourier format
@
text
@d5 1
a5 1
C    7/24/00 BIMAL      ADAPTED TO NEW FOURIER FORMAT FOR 2D.               
d17 1
a17 4
C       'FP' : FOURIER INTERPOLATION 
C       CREATES INTERPOLATED PICTURE MF*NSAM BY MF*NROW
C       (WHERE MF IS MAGNIFICATION FACTOR) OF A NSAM BY NROW PICTURE
C       NSAM, NROW AND NSLICE HAVE TO BE EVEN. FOR 3D.
d19 2
a20 3
C       TWO DIMENSIONAL IMAGE OF ANY(EVEN/ODD) DIMENSION CAN BE GIVEN 
C       AS INPUT. CAN BE INTERPOLATED TO ANY DIMENSION TOO. DOESN'T HAVE TO BE
C       AN INTEGRAL MULTIPLE OF THE INPUT IMAGE DIMENSION.
d22 4
d28 1
a28 1
        SUBROUTINE FOUR1A_FP(MAXMEM)
d31 1
a31 4

        COMMON        BUF(1) 

        INCLUDE 'F90ALLOC.INC'
d33 5
d39 1
a39 6
        REAL, ALLOCATABLE, DIMENSION(:,:) :: X  
        REAL, ALLOCATABLE, DIMENSION(:,:) :: Y     
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: Q

        LOGICAL       RUNTIME 
d45 3
a47 2
        NE     = 0
        
d55 1
a55 1
C       3D FILE
d57 17
a73 4
           CALL RDPRMI(MGN,MGR,NLOOP,ILOOP,
     &              'MAGNIFICATION FACTOR FOR COLUMNS & ROWS')
           MGN=MAX0(2,MGN)
           MGR=MAX0(2,MGR)
d75 7
d83 5
a87 7
           CALL RDPRMI(MGS,NSAMN,NLOOP,ILOOP,
     &         'MAGNIFICATION FACTOR FOR SLICES')
           MGS=MAX0(2,MGS)
           IF (MOD(NSAM,2).NE.0 .OR. MOD(NROW,2).NE.0 
     &          .OR. MOD(NSLICE,2).NE.0)  THEN
              CLOSE(LUN1)
              CALL ERRT(1,'FP ',IE)
d89 4
a92 1
           ENDIF
d94 4
a97 26
           NSAMN   = MGN*NSAM
           NROWN   = MGR*NROW
           NSLICEN = MGS*NSLICE

           MEMWANT=NSAMN*NROWN*NSLICEN+MAX0(NSAMN,2*NROWN,2*NSLICEN)
           CALL CHKMEM(MEMWANT ,Buf,MAXMEM,RUNTIME,IPQ,IRTFLG)
        
           IF(IRTFLG.EQ.0)  THEN  
              Q = >IPQ
              CALL OPENF(FILNAM,LUN2,NSAMN,NROWN,'UNKNOWN',NF,NSLICEN)
              DO   J = 1, NROW*NSLICE
                 CALL REDLIN(LUN1,Q(1+(J-1)*NSAM),NSAM,J)
              END DO
              CLOSE(LUN1)
              CALL  FINT3(Q(1),Q(1),NSAM,NROW,NSLICE,NSAMN,NROWN,
     &              NSLICEN,Q(1+NSAMN*NROWN*NSLICEN))
           
              DO  J = 1,NROWN*NSLICEN
                 CALL WRTLIN(LUN2,Q(1+(J-1)*NSAMN),NSAMN,J)
              ENDDO
              CLOSE(LUN2) 
              IF(RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'FP',IRTFLG) 
           ELSE
C             NOT ENOUGH MEMORY
              CALL  ERRT(6,'FOUR1A_FP',NE)
           ENDIF
d116 1
a116 1
	      RETURN
d124 1
a124 1
	      RETURN
d137 3
a141 1
        
@


1.10
log
@SP_F90 removed
@
text
@a0 1

d3 3
a5 1
C    FOUR1A_FP.FOR
d18 1
a18 1
C	CREATES INTERPOLATED PICTURE MF*NSAM BY MF*NROW
d20 1
a20 1
C       WORKS FOR 2D AND 3D
d22 3
a24 1
C       NSAM, NROW AND NSLICE HAVE TO BE EVEN
d35 4
d49 15
a63 5
	
600	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &		   IDUM,'INPUT',.FALSE.,IRTFLG)
	NSLICE=MAX0(NSLICE,1)
	IF (IRTFLG .NE. 0) RETURN
d65 1
a65 8
	CALL FILERD(FILNAM,NLET,NULL,'OUTPUT',IRTFLG)
        CALL RDPRMI(MGN,MGR,NLOOP,ILOOP,
     &              'MAGNIFICATION FACTOR FOR COLUMNS & ROWS')
	MGN=MAX0(2,MGN)
	MGR=MAX0(2,MGR)
	IF (NSLICE.GT.1)  THEN
C          3D FILE
	   CALL RDPRMI(MGS,NSAMN,NLOOP,ILOOP,
d67 2
a68 2
	   MGS=MAX0(2,MGS)
	   IF (MOD(NSAM,2).NE.0 .OR. MOD(NROW,2).NE.0 
d70 49
a118 2
	      CLOSE(LUN1)
	      CALL ERRT(1,'FP ',IE)
d120 1
a120 1
	   ENDIF
d122 5
a126 5
	ELSE
	   MGS=1
	   IF (MOD(NSAM,2).NE.0 .OR. MOD(NROW,2).NE.0)  THEN
	      CLOSE(LUN1)
	      CALL ERRT(1,'FP ',IE)
d128 1
a128 2
	   ENDIF
	ENDIF
d130 2
a131 25
	NSAMN=MGN*NSAM
	NROWN=MGR*NROW
	NSLICEN=MGS*NSLICE

	MEMWANT=NSAMN*NROWN*NSLICEN+MAX0(NSAMN,2*NROWN,2*NSLICEN)
	CALL CHKMEM(MEMWANT ,Buf,MAXMEM,RUNTIME,IPQ,IRTFLG)
	
        IF(IRTFLG.EQ.0)  THEN  
          Q = >IPQ
          CALL OPENF(FILNAM,LUN2,NSAMN,NROWN,'UNKNOWN',NF,NSLICEN)
	  IF (IRTFLG .NE. 0) RETURN
          DO   J = 1, NROW*NSLICE
             CALL REDLIN(LUN1,Q(1+(J-1)*NSAM),NSAM,J)
          END DO
	  CLOSE(LUN1)

	  IF (NSLICE.EQ.1)  THEN
            CALL  FINT(Q(1),Q(1),NSAM,NROW,NSAMN,NROWN,Q(1+NSAMN*NROWN))
	  ELSE
	    CALL  FINT3(Q(1),Q(1),NSAM,NROW,NSLICE,NSAMN,NROWN,NSLICEN,
     &                   Q(1+NSAMN*NROWN*NSLICEN))
	  ENDIF
          DO  J = 1,NROWN*NSLICEN
             CALL WRTLIN(LUN2,Q(1+(J-1)*NSAMN),NSAMN,J)
          ENDDO
d133 7
a139 5
          CLOSE(LUN2) 
          IF(RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'FP',IRTFLG) 
        ELSE
C         NOT ENOUGH MEMORY
          CALL  ERRT(6,'FOUR1A_FP',NE)
d142 1
a142 1
	
@


1.9
log
@*** empty log message ***
@
text
@d30 1
a30 1
#ifdef SP_F90
d34 1
a34 4
#else
        DIMENSION     Q(1)
        POINTER       (IPQ,Q) 
#endif
d82 1
a82 3
#ifdef SP_F90
         Q = >IPQ
#endif
@


1.8
log
@*** empty log message ***
@
text
@d96 1
a96 1
             CALL  FINT(Q(1),Q(1),NSAM,NROW,NSAMN,NROWN,Q(1+NSAMN*NROWN))
d98 1
a98 1
	     CALL  FINT3(Q(1),Q(1),NSAM,NROW,NSLICE,NSAMN,NROWN,NSLICEN,
@


1.7
log
@f90 alloc
@
text
@a40 1

a41 2
CNO_SAVE

d96 1
a96 1
             CALL  FINT(Q,Q,NSAM,NROW,NSAMN,NROWN,Q(1+NSAMN*NROWN))
d98 1
a98 1
	     CALL  FINT3(Q,Q, NSAM,NROW,NSLICE,NSAMN,NROWN,NSLICEN,
a110 1
        RETURN	
@


1.6
log
@removed IFORM from OPFIL call
@
text
@d30 5
d37 1
d88 3
@


1.5
log
@R removed
@
text
@a1 1

d17 3
a19 3
C	Creates interpolated picture MF*NSAM by MF*NROW
C       (where MF is Magnification Factor) of a NSAM by NROW picture
C       works for 2D and 3D
d29 4
a32 4
        COMMON       BUF(1) 
        DIMENSION    Q(1)
        POINTER      (IPQ,Q) 
        LOGICAL      RUNTIME 
d35 1
d44 1
a44 1
     &		   IFORM,'INPUT',.FALSE.,IRTFLG)
d102 1
a102 1
C         Not enough memory
@


1.4
log
@use chkmem instead of allocit call
@
text
@d43 1
a43 1
600	CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM,NROW,NSLICE,
@


1.3
log
@bad errt call
@
text
@d30 1
a30 1
#ifdef SP_ALLOC
d33 1
a33 4
        LOGICAL      RUNTIME
#else
        COMMON       Q(1)
#endif
d38 1
d77 1
a77 1
C
d79 3
a81 6
#ifdef SP_ALLOC
        CALL ALLOCIT(MEMWANT,RUNTIME,IPQ,'FP',IRTFLG)
        IF (RUNTIME)  THEN
#else
        IF (MEMWANT .LT. MAXMEM) THEN
#endif
d99 2
a100 4
          CLOSE(LUN2)
#ifdef SP_ALLOC
          CALL ALLOCIT(0,RUNTIME,IPQ,'FP',IRTFLG)
#endif
d102 1
@


1.2
log
@improved prompts & cosmetic
@
text
@d109 1
a109 1
          CALL  ERRT(6,FOUR1A_FP ',NE)
@


1.1
log
@Initial revision
@
text
@d1 25
d27 1
d29 1
d31 3
a33 3
      DIMENSION    Q(1)
      POINTER      (IPQ,Q) 
      LOGICAL      RUNTIME
d35 1
a35 1
      COMMON       Q(1)
a44 6
	
C       'FP' : FOURIER INTERPOLATION 
C	Creates interpolated picture MF*NSAM by MF*NROW
C       (where MF is Magnification Factor) of a NSAM by NROW picture
C       works for 2D and 3D
C  NSAM, NROW AND NSLICE HAVE TO BE EVEN
d49 1
d52 1
a52 1
     &              'Magnification NSAM, NROW')
d55 6
a60 4
	IF(NSLICE.GT.1)  THEN
	CALL RDPRMI(MGS,NSAMN,NLOOP,ILOOP,'Magnification NSLICE')
	MGS=MAX0(2,MGS)
	 IF(MOD(NSAM,2).NE.0 .OR. MOD(NROW,2).NE.0 
d62 5
a66 4
	 CLOSE(LUN1)
	 CALL ERRT(1,'FP ',IE)
	 RETURN
	 ENDIF
d68 6
a73 6
	MGS=1
	 IF(MOD(NSAM,2).NE.0 .OR. MOD(NROW,2).NE.0)  THEN
	 CLOSE(LUN1)
	 CALL ERRT(1,'FP ',IE)
	 RETURN
         ENDIF
d75 1
d93 8
a100 7
	 IF(NSLICE.EQ.1)  THEN
          CALL  FINT(Q,Q,NSAM,NROW,NSAMN,NROWN,Q(1+NSAMN*NROWN))
	 ELSE
	CALL  FINT3(Q,Q,
     &	NSAM,NROW,NSLICE,NSAMN,NROWN,NSLICEN,Q(1+NSAMN*NROWN*NSLICEN))
	 ENDIF
          DO    J = 1,NROWN*NSLICEN
d102 2
a103 1
          END DO
d106 1
a106 1
        CALL ALLOCIT(0,RUNTIME,IPQ,'FP',IRTFLG)
d109 1
a109 1
          CALL  ERRT(6,'FINT ',NE)
d111 1
a111 2
        RETURN			
145     CALL ERRT(2,'FINT ',NE)
@
