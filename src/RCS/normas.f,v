head	1.19;
access;
symbols
	pre_getangas:1.19
	GPL2010:1.19
	pre_GPL2010:1.18
	pre_var_equation:1.18
	pre_fftwrings:1.18
	pre_opfiles:1.18
	src:1.18
	best-code:1.18
	x-named-regs:1.18
	x:1.18
	v13-00:1.18
	pre_GPL:1.17
	prec_CA:1.15
	noindx:1.15
	Bproc:1.12
	oct21:1.9
	last77:1.8;
locks; strict;
comment	@c @;


1.19
date	2010.06.24.13.26.22;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.17.21.01.18;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2005.02.22.20.35.51;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2005.02.09.18.40.44;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2001.10.09.16.57.49;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2001.10.01.18.57.42;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.28.12.44.48;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.18.15.47.05;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	2000.01.18.20.46.51;	author bimal;	state Exp;
branches;
next	1.10;

1.10
date	99.12.07.18.04.40;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.06.03.20.50.54;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	99.03.01.14.56.43;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.10.10.17.49.03;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	95.04.12.19.56.42;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	95.04.12.14.24.35;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.02.01.18.16.13;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	94.09.20.13.53.50;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.08.11;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.47;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.19
log
@GPL_2010
@
text
@C ++********************************************************************
C
C   NORMAS.F                ALTRIX SPECIAL CODE    FEB 2005 ARDEAN LEITH 
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  NORMAS(X,NS1,NS2,NR1,NR2,IR1,IR2)                                   *
C                                                                      *
C  PURPOSE:    NORMALIZES RING DATA.  COVERED AREA IS: IR1....IR2      *
C                                                                      *
C  PARAMETERS:                                                         *
C
C  NOTE   :    I THINK THIS IS FOR PARALLEL USE ONLY, BECAUSE NORMASS
C              IS QUICKER FOR NON_PARALLEL USE!! al Sept 01
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE NORMAS(X,NS1,NS2,NR1,NR2, IR1,IR2)

        DIMENSION  X(NS1:NS2,NR1:NR2)
        REAL*8     AV,VR

        I1SQ = IR1 * IR1
        I2SQ = IR2 * IR2

        AV   = 0.0
        VR   = 0.0
        N    = 0

#ifndef __ia64
c$omp   parallel do private(j,j2,i,ir),reduction(+:av,vr,n)
#endif
        DO J=NR1,NR2
           J2 = J*J
           DO I=NS1,NS2
              IR = J2 + I*I
              IF (IR .GE. I1SQ .AND. IR .LE. I2SQ) THEN
                 N  = N + 1
                 AV = AV + X(I,J)
                 VR = VR + X(I,J) * X(I,J)
              ENDIF
           ENDDO
        ENDDO

#ifndef __ia64
c$omp   end parallel do 
#endif

        AV = AV / N

C       MULTIPLICATION IS FASTER
        VR = 1.0 / (DSQRT((VR-N*AV*AV) / (N-1)))

#ifdef __ia64
C        ALTIX SEG FAULTS IF THIS IS A || LOOP (I'VE TRIED EVERYTHING)
C        FEB 2005 al

         X  = (X - AV) * VR
#else
c$omp   parallel do private(i,j)
        DO J=NR1,NR2
           DO I=NS1,NS2
              X(I,J) = (X(I,J) - AV ) * VR
           ENDDO
        ENDDO
c$omp   end parallel do 
#endif

        END

@


1.18
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.17
log
@ALTRIX SPECIAL CODE
@
text
@d6 23
a28 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.16
log
@ALTRIX SPECIAL CODE & cosmetic
@
text
@d3 1
a3 1
C   NORMAS.F                ALTRIX SPECIAL CODE    FEB 2005 ARDEAN LEITH                                                       *
a22 2
C  IMAGE_PROCESSING_ROUTINE 
C
d38 1
d40 1
d52 2
d55 1
@


1.15
log
@sped up , merged with normass
@
text
@d3 1
a3 1
C   NORMAS.F                                                           *
d16 1
a16 1
C  PURPOSE:                                                           *
d28 1
a28 1
        SUBROUTINE  NORMAS(X,NS1,NS2,NR1,NR2,IR1,IR2)
a30 1
        INTEGER    IR1,IR2
d33 3
a35 2
        R1SQ = IR1 * IR1
        R2SQ = IR2 * IR2
d40 1
a40 1
c$omp   parallel do private(j,i,r),reduction(+:av,vr,n)
d42 1
d44 2
a45 2
              R = FLOAT(J*J + I*I)
              IF (R .GE. R1SQ .AND. R .LE. R2SQ)  THEN
d48 1
a48 1
                 VR = VR + X(I,J )* X(I,J)
d52 1
d55 1
d59 7
a65 3
cc       X  = (X - AV) * VR

c$omp   parallel do private(j,i)
d71 2
@


1.14
log
@speedup
@
text
@a4 1
C                                                                      *
d40 1
d44 5
a48 1
              IF (R .GE. R1SQ .AND. R .LE. R2SQ)  N=N+1
a51 10
c$omp   parallel do private(j,i,r),reduction(+:av,vr)
        DO J=NR1,NR2
           DO I=NS1,NS2
              R = FLOAT(J*J + I*I)
              IF (R .GE. R1SQ .AND. R.LE. R2SQ)  THEN
                 AV = AV+X(I,J)
                 VR = VR+X(I,J)*X(I,J)
              ENDIF
           ENDDO
        ENDDO
d56 2
d64 1
@


1.13
log
@speeded up
@
text
@d43 1
a43 1
              R = (FLOAT(J*J + I*I)
d51 1
a51 1
              R = (FLOAT(J*J + I*I)
d59 2
a60 1
        VR = DSQRT((VR-N*AV*AV) / (N-1))
d65 1
a65 1
              X(I,J) = (X(I,J) - AV ) / VR
@


1.12
log
@reduction corrected
@
text
@d2 1
d15 1
a15 1
C                                                                      *
d17 1
a17 1
C  PURPOSE:                                                            *
d21 4
a24 1
C IMAGE_PROCESSING_ROUTINE 
a25 1
C        0         2         3         4         5         6         7 *
d30 1
d33 12
a44 10
        REAL*8  AV,VR
        R1=IR1
        R2=IR2
        AV=0.0
        VR=0.0
        N=0
        DO    J=NR1,NR2
           DO    I=NS1,NS2
              R=SQRT(FLOAT(J*J+I*I))
              IF(R.GE.R1.AND.R.LE.R2)  N=N+1
d47 8
a54 7
c$omp parallel do private(j,i,r),reduction(+:av,vr)
        DO    J=NR1,NR2
           DO    I=NS1,NS2
              R=SQRT(FLOAT(J*J+I*I))
              IF(R.GE.R1.AND.R.LE.R2)  THEN
                 AV=AV+X(I,J)
                 VR=VR+X(I,J)*X(I,J)
d58 7
a64 6
        AV=AV/N
        VR=DSQRT((VR-N*AV*AV)/(N-1))
c$omp parallel do private(j,i)
        DO    J=NR1,NR2
           DO    I=NS1,NS2
              X(I,J)=(X(I,J)-AV)/VR
@


1.11
log
@cosmetic
@
text
@a26 1

a29 1

d41 1
a41 2

c$omp parallel do private(j,i,r),reduction(+:av) reduction(+:vr)
a50 1

a52 1

@


1.10
log
@header
@
text
@a0 1

d2 1
a2 1
C                                                                      *
d19 3
a21 1
C                                                                      *
d26 1
a26 1
	SUBROUTINE  NORMAS(X,NS1,NS2,NR1,NR2,IR1,IR2)
d28 15
a42 14
	DIMENSION  X(NS1:NS2,NR1:NR2)
	INTEGER    IR1,IR2
	REAL*8  AV,VR
	R1=IR1
	R2=IR2
	AV=0.0
	VR=0.0
	N=0
	DO    J=NR1,NR2
	DO    I=NS1,NS2
	R=SQRT(FLOAT(J*J+I*I))
	IF(R.GE.R1.AND.R.LE.R2)  N=N+1
	ENDDO
	ENDDO
d45 9
a53 9
	DO    J=NR1,NR2
	DO    I=NS1,NS2
	R=SQRT(FLOAT(J*J+I*I))
	IF(R.GE.R1.AND.R.LE.R2)  THEN
	AV=AV+X(I,J)
	VR=VR+X(I,J)*X(I,J)
	ENDIF
	ENDDO
	ENDDO
d55 2
a56 2
	AV=AV/N
	VR=DSQRT((VR-N*AV*AV)/(N-1))
d59 7
a65 6
 	DO    J=NR1,NR2
	DO    I=NS1,NS2
	X(I,J)=(X(I,J)-AV)/VR
	ENDDO
	ENDDO
	END
@


1.9
log
@OpenMP
@
text
@d1 24
d26 1
d41 1
d52 1
a52 1
C
d55 1
a55 1
C
@


1.8
log
@ff
@
text
@d16 1
a16 1
c$doacross local(j,i,r),reduction(av,vr)
d30 1
a30 1
c$doacross local(j,i)
@


1.7
log
@*** empty log message ***
@
text
@d3 1
a3 1
	INTEGER*2  IR1,IR2
a4 1
CNO_SAVE
@


1.6
log
@*** empty log message ***
@
text
@d11 2
a12 2
	DO  3  J=NR1,NR2
	DO  3  I=NS1,NS2
d15 2
a16 1
3	CONTINUE
d18 2
a19 2
	DO  1  J=NR1,NR2
	DO  1  I=NS1,NS2
d25 2
a26 1
1	CONTINUE
d32 5
a36 3
 	DO  2  J=NR1,NR2
	DO  2  I=NS1,NS2
2	X(I,J)=(X(I,J)-AV)/VR
@


1.5
log
@mp
@
text
@d6 2
a15 2
	R1=IR1
	R2=IR2
@


1.4
log
@nosave
@
text
@d9 5
d16 1
a22 1
	N=N+1
d29 1
@


1.3
log
@activated
@
text
@d5 1
@


1.2
log
@cpp_lines_added
@
text
@a0 18
 
 
#ifdef SP_UNIX 
 
C   THIS ROUTINE SPECIFIC TO VAX SPIDER AND IS NOT 
C       USED AT UNIX SITES
 
       SUBROUTINE normas
 
       COMMON /UNITS/LUNC,NIN,NOUT
 
       WRITE(NOUT,*) 'DUMMY CALL: normas'
       RETURN
       END
 
#else
 
C
a26 3
 
#endif
 
@


1.1
log
@Initial revision
@
text
@d1 17
d45 3
@
