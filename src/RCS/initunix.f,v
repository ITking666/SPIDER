head	1.46;
access;
symbols
	pre_getangas:1.42
	GPL2010:1.41
	pre_GPL2010:1.40
	pre_var_equation:1.40
	pre_fftwrings:1.37
	pre_opfiles:1.37
	src:1.37
	best-code:1.37
	x-named-regs:1.36
	x:1.36
	v13-00:1.36
	pre_GPL:1.34
	prec_CA:1.32
	noindx:1.32
	Bproc:1.26
	oct21:1.24
	last77:1.23;
locks; strict;
comment	@c @;


1.46
date	2016.04.01.16.07.58;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2016.01.26.15.01.17;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2016.01.25.21.05.38;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2016.01.25.19.08.07;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2010.12.20.15.50.17;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2010.06.24.13.25.57;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	2008.10.27.16.48.16;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2008.10.17.12.48.12;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2008.10.02.15.18.40;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2006.01.05.20.38.48;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2005.10.17.19.51.50;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2005.10.17.17.49.13;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2005.07.01.16.00.17;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2005.06.28.15.42.02;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2002.07.08.13.04.42;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2001.07.23.18.31.40;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2001.01.04.18.51.24;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2000.10.24.18.37.27;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2000.10.24.13.15.13;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2000.10.18.19.55.34;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2000.07.07.18.33.27;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2000.03.28.16.35.00;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	99.06.07.20.44.02;	author pawel;	state Exp;
branches;
next	1.23;

1.23
date	99.03.29.14.41.38;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	99.03.15.15.33.43;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	99.02.04.15.52.40;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	98.11.03.22.18.27;	author pawel;	state Exp;
branches;
next	1.19;

1.19
date	98.02.24.15.05.08;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	97.10.20.13.11.36;	author pawel;	state Exp;
branches;
next	1.17;

1.17
date	97.10.14.14.46.54;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	97.08.29.14.31.19;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	97.04.02.21.19.47;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	96.12.03.20.04.30;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	96.11.27.15.24.55;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	96.11.22.20.52.24;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	96.11.22.19.09.01;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	96.11.22.18.03.26;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	96.10.10.13.52.11;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	96.10.09.19.02.45;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	96.10.09.18.49.42;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	96.06.04.15.22.02;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	95.10.05.19.39.25;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	95.10.05.19.21.28;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	95.02.15.13.45.04;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.11.09.20.05.34;	author mladjadj;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.14.06.31;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.46
log
@pubsub --> pub
@
text
@
C ++********************************************************************
C
C INITUNIX.F   ABILITY TO SET REGISTERS ON START     JUN 00 ARDEAN LEITH
C              SET MEM REMOVED                       JAN 01 ARDEAN LEITH
C              SET MP REMOVED                        JUN 02 ARDEAN LEITH
C              SPIREOUT                              JUN 05 ARDEAN LEITH
C              REG SET REMOVED                       JAN 06 ARDEAN LEITH
C              MPI CHANGES                           OCT 08 ARDEAN LEITH
C              SET_MPI                               DEC 10 ARDEAN LEITH
C              IUSEPUBSUB                            JAN 16 ARDEAN LEITH
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2016  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  INITUNIX(NUMARG,FCHART,NALPHT,CXNUM,COMMANDLINE,USEPUBSUB)
C
C  PURPOSE:  RECOVERS & PROCESSES COMMAND LINE ARGUMENTS                                    *
C            SETS USE_SPIRE IN CMBLOCK.INC
C            
C  PARAMETERS:  NUMARG      NUMBER OF COMMAND LINE ARGUEMENTS (RETURNED)
C               FCHART      SPIDER OPERATION ON COMMAND LINE  (RETURNED)
C               NALPHT      NO. OF CHARS IN OPERATION         (RETURNED)
C               CXNUM       RESULTS FILE NUMBER               (RETURNED)
C               COMMANDLINE SPIDER EXECUTABLE BEING RUN       (RETURNED)
C               USEPUBSUB   PUBSUB BEING RUN                  (RETURNED)
C                                                     
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE INITUNIX(NUMARG,FCHART,NALPHT,CXNUM,
     &                      COMMANDLINE,USEPUBSUB)

        IMPLICIT NONE
        INCLUDE 'CMBLOCK.INC'

        INTEGER             :: NUMARG,NALPHT
        CHARACTER(LEN=*)    :: FCHART,CXNUM,COMMANDLINE
        LOGICAL             :: USEPUBSUB

        CHARACTER(LEN=1000) :: WHOLECOMMAND
        INTEGER             :: iargc,lnblnk
        INTEGER             :: ICOMM,MYPID,MPIERR
        INTEGER             :: IPUB,LENC,ISTATUS

        CALL SET_MPI(ICOMM,MYPID,MPIERR)  ! SETS ICOMM AND MYPID

        NUMARG = 0

C       GET COMMAND LINE USING iargc
        IF (MYPID <= 0) NUMARG = iargc() 
C       write(6,*) mypid,'  numarg:',numarg

C       GET EXECUTABLE BEING RUN FOR RETURNING TO CALLER --------------
        CALL GETARG(0,COMMANDLINE)

C       CHECK FOR DATA EXTENSION ON COMMAND LINE --------------------          
        FCHART = ''
        IF (NUMARG >= 1) THEN
C          HAS PROJECT/DATA EXTENSION ON COMMAND LINE (ARG. 1)
           CALL GETARG(1,FCHART)
           PRJEXC(1:3) = FCHART(1:3)

           IF (FCHART(4:4) .NE. '/') THEN
              DATEXC(1:3) = PRJEXC(1:3)
           ELSE
              DATEXC(1:3) = FCHART(5:7)
           ENDIF
           IF (DATEXC(1:1) == ' ' .OR. DATEXC(2:2) == ' ' .OR.
     &         DATEXC(3:3) == ' ') 
     &        STOP '*** INVALID DATA EXTENSION ON COMMAND LINE!'
        ENDIF

C       CHECK FOR FIRST OPERATION (USUALLY BATCH) ON COMMAND LINE
        IF (NUMARG >= 2) THEN
C          HAS FIRST OPERATION GIVEN ON COMMAND LINE (ARG. 2)
           CALL GETARG(2,FCHART)
           NALPHT = lnblnk(FCHART)

C          CHECK FOR SPIRE OPERATION  ON COMMAND LINE 
           USE_SPIRE = (FCHART(1:5) == 'SPIRE')
           IF (USE_SPIRE) THEN
              FCHART = FCHART(6:)
              NALPHT = MAX(0,NALPHT-5)
           ENDIF
        ENDIF

C       CHECK FOR RESULTS FILE VERSIONING ON COMMAND LINE (ARG. 3) ---
        CXNUM = CHAR(0)
        IF (NUMARG >= 3) THEN
C          RESULTS FILE VERSIONING GIVEN ON COMMAND LINE (ARG. 3)
           CALL GETARG(3,CXNUM)
           IF (CXNUM(1:1) == '-') THEN
              NUMARG = 2
              CXNUM  = CHAR(0)
           ENDIF
	ENDIF

C       REGISTER SETTING FROM COMMAND LINE (ARG. 4...) DONE IN SPIDER
        IF (NALPHT <= 0) NUMARG = MIN(NUMARG,1)

C       CHECK FOR PUBSUB USAGE (THIS ALTERS COSMETICS ONLY)
        CALL GET_COMMAND(WHOLECOMMAND,LENC,ISTATUS)
        IPUB = INDEX(WHOLECOMMAND(:LENC),'PUBSUB')
        IF (IPUB <=0) IPUB = INDEX(WHOLECOMMAND(:LENC),'pub')
        USEPUBSUB = (IPUB > 0)

#ifdef USE_MPI

        CALL BCAST_MPI('INITUNIX','DATEXC',DATEXC,3,'C',ICOMM)
        CALL BCAST_MPI('INITUNIX','PRJEXC',PRJEXC,3,'C',ICOMM)

        ILEN = LEN(FCHART)
        CALL BCAST_MPI('INITUNIX','FCHART',FCHART,ILEN,'C',ICOMM)

        ILEN = LEN(CXNUM)
        CALL BCAST_MPI('INITUNIX','CXNUM',CXNUM,ILEN,'C',ICOMM)
C       write(6,*) ' cxnum:',cxnum

        ILEN = LEN(COMMANDLINE)
        CALL BCAST_MPI('INITUNIX','COMMANDLINE',COMMANDLINE,ILEN,
     &                 'C',ICOMM)
C       write(6,*) ' commandline:',commandline

        CALL BCAST_MPI('INITUNIX','NUMARG',NUMARG,1,'I',ICOMM)
        CALL BCAST_MPI('INITUNIX','NALPHT',NALPHT,1,'I',ICOMM)
#endif
        END



@


1.45
log
@cosmetic
@
text
@d123 1
a123 1
        IF (IPUB <=0) IPUB = INDEX(WHOLECOMMAND(:LENC),'pubsub')
@


1.44
log
@usepubsub
@
text
@d34 1
a34 1
C  INITUNIX(NUMARG,FCHART,NALPHT,CXNUM,COMMANDLINE)
@


1.43
log
@==, implicit
@
text
@d4 1
a4 1
C INITUNIX.F   ABILITY TO REGISTERS ON START         JUN 00 ARDEAN LEITH
d11 1
a11 1
C              IN_PARALLEL                           JAN 16 ARDEAN LEITH
d40 1
a40 1
C               FCHART      OPERATION ON COMMAND LINE         (RETURNED)
d43 2
a44 1
C               COMMANDLINE SPIDER NAME BEING RUN             (RETURNED)
d49 2
a50 1
        SUBROUTINE INITUNIX(NUMARG,FCHART,NALPHT,CXNUM,COMMANDLINE)
d55 8
a62 5
        INTEGER            :: NUMARG,NALPHT
        CHARACTER(LEN=*)   :: FCHART,CXNUM,COMMANDLINE

        INTEGER            :: iargc,lnblnk
        INTEGER            :: ICOMM,MYPID,MPIERR
d70 1
a70 1
C        write(6,*) mypid,'  numarg:',numarg
d72 1
a72 1
C       GET COMMAND BEING RUN FOR RETURNING TO CALLER --------------
d119 6
@


1.42
log
@SET_MPI
@
text
@d11 1
d16 1
a16 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d50 1
a50 3
#ifdef SP_NT
	use dflib
#endif
d53 1
d56 2
a57 1
        INTEGER FUNCTION  iargc
d64 1
a64 1
        IF (MYPID .LE. 0) NUMARG = iargc() 
d72 1
a72 1
        IF (NUMARG .GE. 1) THEN
d82 2
a83 2
           IF (DATEXC(1:1) .EQ. ' ' .OR. DATEXC(2:2) .EQ. ' ' .OR.
     &         DATEXC(3:3) .EQ. ' ') 
d88 1
a88 1
        IF (NUMARG .GE. 2) THEN
d94 1
a94 1
           USE_SPIRE = (FCHART(1:5) .EQ. 'SPIRE')
d103 1
a103 1
        IF (NUMARG .GE. 3) THEN
d106 1
a106 1
           IF (CXNUM(1:1) .EQ. '-') THEN
d113 1
a113 1
        IF (NALPHT .LE. 0) NUMARG = MIN(NUMARG,1)
@


1.41
log
@GPL_2010
@
text
@d10 1
d58 1
a58 7
#ifdef USE_MPI
        include 'mpif.h'
        ICOMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(ICOMM, MYPID, MPIERR)
#else
        MYPID = -1
#endif
a114 1
        ICOMM = MPI_COMM_WORLD
d124 1
a124 1
C        write(6,*) ' cxnum:',cxnum
d129 1
a129 1
C        write(6,*) ' commandline:',commandline
a131 1

@


1.40
log
@*** empty log message ***
@
text
@a10 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d12 5
a16 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d18 1
a18 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d23 1
a23 1
C=* This program is distributed in the hope that it will be useful,    *
d25 1
a25 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a26 1
C=*                                                                    *
d28 1
a28 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.39
log
@mpi changes
@
text
@d65 2
@


1.38
log
@#ifndef USE_MPI for iargc
@
text
@d4 6
a9 6
C INITUNIX.F     ADDED ABILITY TO SET ONE REGISTER ON START JUNE 2000 AL
C                          SET MEM REMOVED         JAN 01 ARDEAN LEITH
C                          SET MP REMOVED          JUN 02 ARDEAN LEITH
C                          SPIREOUT                JUN 05 ARDEAN LEITH
C                          REG SET REMOVED         JAN 06 ARDEAN LEITH
C
d12 1
a12 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d46 1
a46 1
                                                     
d59 7
a65 1
        INTEGER FUNCTION   iargc
a68 1
#ifndef USE_MPI
d70 2
a71 2
        NUMARG = iargc() 
#endif
d73 1
a73 1
C       GET COMMAND BEING RUN FOR RETURING TO CALLER --------------
d112 4
d121 22
d145 2
@


1.37
log
@moved initial reg set to spider
@
text
@d61 3
a64 1
        NUMARG = 0
d66 1
@


1.36
log
@GPL License fixed
@
text
@d8 1
a57 1
        CHARACTER(LEN=80)  :: MESG,OPC
d59 1
a59 1
        INTEGER FUNCTION   IARGC
d61 1
a61 1
C       GET COMMAND LINE USING IARGC
d63 1
a63 2
        NUMARG = IARGC() 

a67 1

d106 1
a106 19

C       CHECK FOR REGISTER SETTING OPERATION ON COMMAND LINE (ARG. 4...)
        IF (NUMARG .GE. 4) THEN
C          REGISTER SETTING OPERATION GIVEN ON COMMAND LINE (ARG. 4...)
           DO NARG = 4,NUMARG
              CALL GETARG(NARG,OPC)
              CALL SSUPCAS(OPC)
              NLET = lnblnk(OPC)

C             EVALUATE EXPRESSION
              CALL ARASQ(OPC,NLET,IFLAG)
	      IF (IFLAG .NE. 0)THEN
C                EXPRESSION IS NO GOOD - IF BATCH, TERMINATES
                 MESG = 'UNDEFINED INITIAL ARGUMENT: ' // OPC(:NLET)
                 CALL ERRT(101,MESG,NE)
              ENDIF
           ENDDO
	ENDIF

a110 5





@


1.35
log
@HRI GPL License used
@
text
@a9 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d13 1
a13 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a32 6

C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.34
log
@spireout
@
text
@d11 24
@


1.33
log
@*** empty log message ***
@
text
@d22 7
a28 1
C                                                                 
a47 9
C       CHECK FOR SPIRE OPERATION  ON COMMAND LINE -----------------
        IF (NUMARG .GE. 2) THEN
C          HAS FIRST OPERATION GIVEN ON COMMAND LINE (ARG. 2)
           CALL GETARG(2,FCHART)

C          SEE IF THIS SPIDER IS RUNNING UNDER SPIRE
           USE_SPIRE = (INDEX(FCHART,'SPIRE') .GT. 0)
      ENDIF

d52 1
d70 1
a70 3


C       CHECK FOR FIRST OPERATION (USUALLY BATCH)  ON COMMAND LINE
d75 6
a80 4
           ISPIRE = INDEX(FCHART,'SPIRE')
           IF (ISPIRE .GT. 0) THEN
              FCHART(ISPIRE:ISPIRE+4) = '     '
              NALPHT = 0
d84 1
a84 1
C       CHECK FOR RESULTS FILE VERSIONING ON COMMAND LINE (ARG. 3)
d110 1
a110 1
        IF (USE_SPIRE) NUMARG = MIN(NUMARG,1)
@


1.32
log
@removed set mp 2
@
text
@d7 1
d10 6
a15 7
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK        *
C *  COPYRIGHT (C)    , WADSWORTH CENTER FOR LABORATORIES AND          *
C *    RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201 *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS *
C *    OR USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN        *
C *    APPROVAL OF THE CENTER FOR LABORATORIES AND RESEARCH.           *
d18 5
a22 2
C   RECOVERS COMMAND LINE ARGUMENTS                                    *
C                                                                      *
d26 1
a26 1
        SUBROUTINE INITUNIX(NUMARG,FCHART,NALPHT,CXNUM)
d33 3
a35 1
        CHARACTER *(*)     FCHART
a36 3
        CHARACTER * 30     ENVIR
        CHARACTER * 80     MESG,OPC
        CHARACTER *(*)     CXNUM
d38 1
a38 1
C       CHECK FOR DATA EXTENSION ON COMMAND LINE           
d42 15
d72 2
d79 5
d93 1
d112 2
a113 1
        RETURN
a118 15
CCC        IF (NUMARG .GT. 2) THEN
CCCC          SCHEDULING TIME GIVEN ON COMMAND LINE
CCC           COMMAND = ' 
CCC           DO I = 3,NUMARG
CCCC             RECOVER SCHEDULING STRING
CCC              CALL GETARG(I,CTEMP)
CCC              COMMAND = COMMAND // ' ' // CTEMP
CCC           ENDDO
CCC        ENDIF






@


1.31
log
@comments
@
text
@d6 1
a29 3
        LOGICAL        ONSUN,ONUNIX,ONSGI,ONOSF
        COMMON /OPSYS/ ONSUN,ONUNIX,ONSGI,ONOSF

a34 5

C       SET DEFAULT NUMBER OF PROCESSORS TO 2
#ifdef SP_MP
        CALL SETTHREADS(2)
#endif
@


1.30
log
@MEMALLOCABLE removed
@
text
@d40 1
a40 1
        CALL  SETTHREADS(2)
d48 1
d64 1
a64 1
C          FIRST OPERATION GIVEN ON COMMAND LINE (ARG. 2)
d69 1
a69 1
C       CHECK FOR RESULTS FILE VERSIONING ON COMMAND LINE
d76 1
a76 1
C       CHECK FOR REGISTER SETTING OPERATION ON COMMAND LINE
@


1.29
log
@*** empty log message ***
@
text
@d5 1
d29 2
a30 2
        LOGICAL ONSUN,ONUNIX,ONSGI,ONOSF
        COMMON /OPSYS/ ONSUN,ONUNIX,ONSGI,ONOSF,MEMALLOCABLE
d68 2
a69 1
C       CHECK FOR REGISTER SETTING OPERATION ON COMMAND LINE
d71 2
a72 11
C          REGISTER SETTING OPERATION GIVEN ON COMMAND LINE (ARG. 3)
           CALL GETARG(3,OPC)
           CALL SSUPCAS(OPC)
           NLET = lnblnk(OPC)
C          EVALUATE EXPRESSION
           CALL ARASQ(OPC,NLET,IFLAG)
	   IF (IFLAG .NE. 0)THEN
C              EXPRESSION IS NO GOOD - IF BATCH, TERMINATES
               MESG = 'UNDEFINED INITIAL EXPRESSION: ' // OPC(:NLET)
               CALL ERRT(101,MESG,NE)
           ENDIF
d75 1
a75 2
C       CHECK FOR RESULTS FILE VERSIONING ON COMMAND LINE
        CXNUM = CHAR(0)
d77 14
a90 2
C          RESULTS FILE VERSIONING GIVEN ON COMMAND LINE (ARG. 4)
           CALL GETARG(4,CXNUM)
a91 18

C       READ IN THE ENVIRONMENT VARIABLE 'SP_MEMALLOC'.
        MEMALLOCABLE = 50
        CALL GETENV('SP_MEMALLOC',ENVIR)
        NCHAR = lnblnk(ENVIR)
        IF (NCHAR .GT. 0) THEN
           READ(ENVIR,*,IOSTAT=IER) MEMALLOCABLE

           IF (IER .NE. 0) THEN
C             ENVIRONMENT VARIABLE 'SP_MEMALLOC' IS NOT SET?
C             DEFAULT TO 50 MB
              MEMALLOCABLE = 50
           ENDIF 
        ENDIF

        WRITE(NOUT,90) MEMALLOCABLE
90      FORMAT(' YOU HAVE REQUESTED ',I5,' MB OF RUN_TIME MEMORY'/)

@


1.28
log
@bad initial op changed
@
text
@d72 1
a72 1
           NALPHT = lnblnk(OPC)
d74 1
a74 1
           CALL ARASQ(OPC,NALPH,IFLAG)
d77 1
a77 1
               MESG = 'UNDEFINED INITIAL EXPRESSION: ' // OPC(:NALPH)
@


1.27
log
@versioning on command line
@
text
@d34 1
a34 1
        CHARACTER * 80     MESG
d70 3
a72 3
           CALL GETARG(3,FCHART)
           CALL SSUPCAS(FCHART)
           NALPHT = lnblnk(FCHART)
d74 1
a74 1
           CALL ARASQ(FCHART,NALPH,IFLAG)
d77 1
a77 1
               MESG = 'UNDEFINED INITIAL EXPRESSION: ' // FCHART(:NALPH)
@


1.26
log
@added register setting capability
@
text
@d21 1
a21 1
        SUBROUTINE INITUNIX(NUMARG,FCHART,NALPHT)
d32 1
a32 1
        INTEGER FUNCTION   NICE,IARGC
d35 1
d46 1
a46 1
        IF (NUMARG .GT. 0) THEN
d60 6
d68 1
a68 1
        IF (NUMARG .GT. 2) THEN
d82 6
a87 8
C       CHECK FOR FIRST OPERATION ON COMMAND LINE
        IF (NUMARG .GT. 1) THEN
C          FIRST OPERATION GIVEN ON COMMAND LINE (ARG. 2)
           CALL GETARG(2,FCHART)
           NALPHT = lnblnk(FCHART)
        ENDIF


@


1.25
log
@used setthreads
@
text
@d4 1
a4 1
C INITUNIX.F
d16 1
a16 1
C       CONTAINS UNIX AND NT ONLY CODE                                        *
d34 1
d59 16
d81 2
@


1.24
log
@omp
@
text
@d37 1
a37 1
         CALL  omp_set_num_threads(2)
@


1.23
log
@removed unused SP_R8000 code for nicing process
@
text
@d37 1
a37 2
         CALL  mp_destroy()
         CALL  mp_set_numthreads(2)
@


1.22
log
@removed SP_ALLOC
@
text
@d24 1
a24 1
	  use dflib
d35 1
a35 12
C       DO NOT USE FOR DEC OSF/1 OR SUN OR R8000
CCCCC#ifndef __osf__
cccCC#ifndef SP_SUN4
c#ifdef SP_R8000
cccC       LOWER THE PRIORITY FOR THIS PROCESS
ccc        INCR = 19
ccc        I    = NICE(INCR)
ccc#endif
CCCCC#endif
CCCCC#endif

C  Set default number of processors to 2
d37 2
a38 2
         call  mp_destroy()
         call  mp_set_numthreads(2)
@


1.21
log
@CNO_SAVE
@
text
@d16 1
a16 1
C       CONTAINS UNIX ONLY CODE                                        *
a17 1
C        0         2         3         4         5         6         7
a22 2
CNO_SAVE 

d39 4
a42 4
cC       LOWER THE PRIORITY FOR THIS PROCESS
c        INCR = 19
c        I    = NICE(INCR)
c#endif
a76 2
#ifdef SP_ALLOC

a92 3
#else
        MEMALLOCABLE = 0
#endif
@


1.20
log
@set default number of processors to 2
@
text
@a1 16
#ifdef SP_VMS 
 
C   THIS ROUTINE SPECIFIC TO UNIX SPIDER AND IS NOT 
C       USED AT VAX SITES
 
       SUBROUTINE initunix
 
       COMMON /UNITS/LUNC,NIN,NOUT
 
       WRITE(NOUT,*) 'DUMMY CALL: initunix'
       RETURN
       END
 
#else
 

d24 2
a118 1
#endif
@


1.19
log
@NT specific stuff
@
text
@d63 6
@


1.18
log
@priority lowering removed.
@
text
@d1 1
a1 2
 
 
d40 3
d89 1
d110 1
d114 1
a114 1
#endif
d126 5
@


1.17
log
@f90 i format changed
@
text
@d53 5
a57 5
#ifdef SP_R8000
C       LOWER THE PRIORITY FOR THIS PROCESS
        INCR = 19
        I    = NICE(INCR)
#endif
@


1.16
log
@changed code to extension
@
text
@d92 2
a93 2
           READ(ENVIR,8000,IOSTAT=IER) MEMALLOCABLE
8000       FORMAT(I)
@


1.15
log
@lowered priority for spider on ithaca
@
text
@d61 1
a61 1
C       CHECK FOR DATA CODE (EXTENSION) ON COMMAND LINE           
d76 1
a76 1
     &        STOP '*** INVALID DATA CODE ON COMMAND LINE!'
@


1.14
log
@removed memallocable output to results file (not open yet)
@
text
@d51 3
a53 3
#ifndef __osf__
#ifndef SP_SUN4
#ifndef SP_R8000
d58 2
a59 2
#endif
#endif
@


1.13
log
@added ndata output
@
text
@a101 1
        WRITE(NDAT,90) MEMALLOCABLE
@


1.12
log
@message changed
@
text
@d102 1
@


1.11
log
@*** empty log message ***
@
text
@d90 1
a90 1
        NCHAR = lnblnk(OUTPUT)
d102 1
a102 1
90      FORMAT('YOU HAVE REQUESTED ',I5,' MB OF ALLOCABLE MEMORY'/)
@


1.10
log
@aded max memory allocable stuff
@
text
@d88 1
d90 11
a100 8
        MEMALLOCABLE = 50
        READ(ENVIR,8000,IOSTAT=IER) MEMALLOCABLE
8000    FORMAT(I)
        IF (IER .NE. 0) THEN
C          ENVIRONMENT VARIABLE 'SP_MEMALLOC' IS NOT SET?
C          DEFAULT TO 50 MB
           MEMALLOCABLE = 50
        ENDIF 
d102 1
a102 1
90      FORMAT('YOU HAVE REQUESTED ',I5,' MB OF ALLOCABLE MEMORY')
@


1.9
log
@changed back.
@
text
@d43 2
a44 3
C       COMMON OPSYS IS UNIX VS VMS FLAG
	LOGICAL        ONSUN,ONUNIX
        COMMON /OPSYS/ ONSUN,ONUNIX
d46 3
a48 2
        CHARACTER *(*)    FCHART
        INTEGER FUNCTION  NICE,IARGC
d50 1
a50 3
        NUMARG = 0

C       do not use for DEC OSF/1 or SUN or R8000
a60 4
c#ifdef SP_MP
c	 call  mp_set_numthreads(3)
c#endif

d62 1
d86 17
d106 3
a117 5

 
#endif


@


1.8
log
@*** empty log message ***
@
text
@d63 3
a65 3
#ifdef SP_MP
	 call  mp_set_numthreads(3)
#endif
@


1.7
log
@limit number of processors for mp to 3
@
text
@d63 1
a63 1
#ifdef SP_R800
@


1.6
log
@removed priority setting on ithaca
@
text
@d63 4
@


1.5
log
@bad sun cpp expression
@
text
@d52 1
a52 1
C       do not use for DEC OSF/1 or SUN
d55 1
d59 1
@


1.4
log
@removed nice on sun
@
text
@a40 1
#ifdef SP_UNIX
a41 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d54 1
a54 1
#ifndef SP_SUN
@


1.3
log
@priority set to 19
@
text
@d56 1
a56 1
C       do not use for DEC OSF/1
d58 1
a58 1

d62 1
@


1.2
log
@add __osf__ cpp option to port spider to DEC/OSF1(unix) machine
@
text
@d60 1
a60 1
        INCR = 9
@


1.1
log
@cpp_lines_added
@
text
@d56 3
d62 1
d103 6
a108 1
 
@
