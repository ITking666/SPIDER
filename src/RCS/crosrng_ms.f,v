head	1.17;
access;
symbols
	pre_mrcs:1.17
	healthdept_2018:1.17
	pre_getangas:1.16
	GPL2010:1.14
	pre_GPL2010:1.13
	pre_var_equation:1.13
	pre_fftwrings:1.12
	pre_opfiles:1.8
	src:1.8
	best-code:1.8
	x-named-regs:1.8
	x:1.8
	v13-00:1.8
	pre_GPL:1.6
	prec_CA:1.3
	noindx:1.3
	Bproc:1.2
	oct21:1.1;
locks; strict;
comment	@c @;


1.17
date	2018.10.03.14.34.03;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2010.10.22.16.47.31;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.24.15.16.14;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.24.13.25.22;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2008.05.19.12.02.43;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2008.04.09.13.23.53;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2008.03.31.11.51.14;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2008.03.19.12.21.20;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2008.03.19.12.10.19;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.17.19.55.16;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.17.17.52.04;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2005.02.22.15.50.09;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.23.18.49.20;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.17.16.02.57;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.03.18.49.12;	author bimal;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.04.20.49.00;	author bimal;	state Exp;
branches;
next	1.1;

1.1
date	99.08.05.13.22.46;	author pawel;	state Exp;
branches;
next	;


desc
@@


1.17
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C  CROSRNG_MS.F   
C              TRAP FOR COMPILER ERROR ON ALTIX   FEB 2005 ARDEAN LEITH
C              REWRITE USING CROSRNG_COM          FEB 2008 ARDEAN LEITH
C              REWRITE USING FFTW3 RINGS          FEB 2008 ARDEAN LEITH
C              REMOVED TT                         JUN 2010 ARDEAN LEITH
C              REMOVED UNUSED SUBROUTINES         OCT 2010 ARDEAN LEITH
C
C **********************************************************************
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  CROSRNG_MS(CIRC1,CIRC2,LCIRC,NRING,MAXRIN,NUMR,
C             QMAX,POS_MAX, QMAXM,POS_MAXM, TT)
C
C PURPOSE: CROSS CORRELATION OF RADIAL RINGS FOR USE IN ROTATIONAL
C          ALIGNMENT.  CHECKS BOTH STRAIGHT & MIRRORED POSITIONS
C          USES NUMR TABLE FOR MAPPING INTO Q ARRAY 
C          USES SIMPLIFIED LOGIC FOR BOUNDARY VALUES, FLOATING PT. ARITH.
C
C PARAMETERS:
C    CIRC1     - FT OF RINGS MULTIPLIED BY WEIGHTS           (SENT)
C    CIRC2     - FT OF RINGS MULTIPLIED BY WEIGHTS           (SENT)
C    LCIRC     - SIZE OF CIRCS ARRAYS                        (SENT)
C    NRING     - NUMBER OF RINGS                             (SENT)
C    MAXRIN    - LONGEST RING                                (SENT)
C    NUMR      - RING LOCATION POINTERS                      (SENT)
C    QMAX      - CC MAX                                      (RETURNED)
C    POS_MAX   - POSITION OF CC MAX                          (RETURNED)
C    QMAXM     - CC MAX MIRRORED                             (RETURNED)
C    POS_MAXM  - POSITION OF CC MAX MIRRORED                 (RETURNED)
C    FFTW3PLAN - REVERSE PLAN FOR RING FFT                   (SENT)
C
C  NOTES: AUG 04 ATTEMPTED SPEEDUP USING 
C       PREMULTIPLY  ARRAYS ie( CIRC12 = CIRC1 * CIRC2) much slower
C       VARIOUS  OTHER ATTEMPTS  FAILED TO YIELD IMPROVEMENT
C       THIS IS A VERY IMPORTANT COMPUTE DEMAND IN ALIGNMENT & REFINE.
C       OPTIONAL LIMIT ON ANGULAR SEARCH SHOULD BE ADDED.
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

C       USED IN: oracfmskm.f:              

        SUBROUTINE CROSRNG_MS(CIRC1,CIRC2,LCIRC,NRING,MAXRIN,NUMR,
     &                        QMAX,POS_MAX, QMAXM,POS_MAXM, TT)

C       USES NUMR TABLE FOR MAPPING INTO Q ARRAY 
C       USES SIMPLIFIED LOGIC FOR BOUNDARY VALUES, FLOATING PT. ARITH.
C       USES SPIDER FFT,  HAS TT REMAINS OF SGI FFT 

        INTEGER, INTENT(IN) :: NUMR(3,NRING)
        REAL, INTENT(IN)    :: CIRC1(LCIRC), CIRC2(LCIRC)
        DOUBLE PRECISION    :: QMAX,QMAXM
        REAL, INTENT(OUT)   :: POS_MAX, POS_MAXM
        DOUBLE PRECISION    :: TT(*)

C       AUTOMATIC ARRAYS
        DOUBLE PRECISION    :: T(MAXRIN+2) 
        DOUBLE PRECISION    :: Q(MAXRIN+2) 

C       C - STRAIGHT  = CIRC1 * CONJG(CIRC2), ZERO Q ARRAY
        Q = 0.0D0

C       T - MIRRORED  = CONJG(CIRC1) * CONJG(CIRC2), ZERO T ARRAY
        T = 0.0D0

C       PREMULTIPLY  ARRAYS ie( CIRC12 = CIRC1 * CIRC2) much slower

        DO I=1,NRING
           IGO   = NUMR(2,I)
           NVAL  = NUMR(3,I)
           IGOM1 = IGO - 1
           J1    = 1

           T1   = CIRC1(IGO) * CIRC2(IGO)
           Q(1) = Q(1) + T1
           T(1) = T(1) + T1

           IF (NVAL .NE. MAXRIN) THEN
              T1        = CIRC1(IGO+1) * CIRC2(IGO+1)
              Q(NVAL+1) = Q(NVAL+1) + T1
              T(NVAL+1) = T(NVAL+1) + T1
C             T(NVAL+1) VALUE WAS NOT CHANGED EVEN IN EARLIEST VERSION!!

           ELSE
              T1   = CIRC1(IGO+1) * CIRC2(IGO+1)
              Q(2) = Q(2) + T1
              T(2) = T(2) + T1
           ENDIF

           DO J=J1,NVAL,2
              JC     = J + IGOM1

              C1     = CIRC1(JC)
              C2     = CIRC1(JC+1)
              D1     = CIRC2(JC)
              D2     = CIRC2(JC+1)

              T1     = C1 * D1
              T3     = C1 * D2
              T2     = C2 * D2
              T4     = C2 * D1

              Q(J)   = Q(J)   + T1 + T2
              Q(J+1) = Q(J+1) - T3 + T4
              T(J)   = T(J)   + T1 - T2
              T(J+1) = T(J+1) - T3 - T4
           ENDDO
        ENDDO

C       FOR UN-MIRRORED CASE
        CALL CROSRNG_COM(Q,LCIRC,MAXRIN,QMAX,POS_MAX,TT)

C       FOR MIRRORED CASE
        CALL CROSRNG_COM(T,LCIRC,MAXRIN,QMAXM,POS_MAXM,TT)

        END




@


1.16
log
@removed unused crosrng_msp... routines
@
text
@d16 1
a16 1
C=* Email: spider@@wadsworth.org                                        *
@


1.15
log
@new crosrng_ms has sgi tt removed
@
text
@d9 1
d32 2
a33 2
C  CROSRNG_MSP(CIRC1,CIRC2,LCIRC,NRING,MAXRIN,NUMR,
C             QMAX,POS_MAX, QMAXM,TMT, FFTW3PLAN)
a60 188

C--**************************  CROSRNG_MSP  ****************************

	SUBROUTINE CROSRNG_MSP(CIRC1,CIRC2,LCIRC,NRING,MAXRIN,NUMR,
     &                        QMAX,POS_MAX, QMAXM,POS_MAXM, 
     &                        FFTW3PLAN)

C       USES NUMR TABLE FOR MAPPING INTO Q ARRAY 
C       USES SIMPLIFIED LOGIC FOR BOUNDARY VALUES, FLOATING PT. ARITH.
C       USES FFT3 OR NATIVE SPIDER, 
C       LIKE CROSRNG_MSP_NEW    BUT NO SGI FFT TT REMAINS

        INTEGER, INTENT(IN)           :: NUMR(3,NRING)
        REAL, INTENT(IN)              :: CIRC1(LCIRC), CIRC2(LCIRC)
        DOUBLE PRECISION, INTENT(OUT) :: QMAX, QMAXM
        REAL, INTENT(OUT)             :: POS_MAX, POS_MAXM
 
C       AUTOMATIC ARRAYS
	REAL                          :: T(MAXRIN+2) 
	REAL                          :: Q(MAXRIN+2) 

C       ZERO WHOLE Q ARRAY,  STRAIGHT  = CIRC1 * CONJG(CIRC2)
	Q = 0.0D0

C       ZERO T ARRAY,  T - MIRRORED  = CONJG(CIRC1) * CONJG(CIRC2)
	T = 0.0D0

C       PREMULTIPLY  ARRAYS ie( CIRC12 = CIRC1 * CIRC2) much slower

	DO I=1,NRING
	   IGO   = NUMR(2,I)
           IGOM1 = IGO - 1
           NVAL  = NUMR(3,I)     
           J1    = 1

#ifndef SP_LIBFFTW3
C          NATIVE FFT
           IF (NVAL .NE. MAXRIN) THEN
	      T1        = CIRC1(IGO+1) * CIRC2(IGO+1)
	      Q(NVAL+1) = Q(NVAL+1) + T1
	      T(NVAL+1) = T(NVAL+1) + T1
C	      T(NVAL+1) VALUE WAS NOT CHANGED EVEN IN EARLIEST VERSION!!

	   ELSE
	      T1   = CIRC1(IGO+1) * CIRC2(IGO+1)
	      Q(2) = Q(2) + T1
	      T(2) = T(2) + T1
	   ENDIF
           J1    = 3
#endif

	   DO J=J1,NVAL,2
	      JC     = J + IGOM1

 	      C1     = CIRC1(JC)
 	      C2     = CIRC1(JC+1)
              D1     = CIRC2(JC)
              D2     = CIRC2(JC+1)

  	      T1     = C1 * D1
 	      T3     = C1 * D2
 	      T2     = C2 * D2
 	      T4     = C2 * D1

#ifndef SP_LIBFFTW3
	      Q(J)   = Q(J)   + T1 - T2
	      Q(J+1) = Q(J+1) - T3 - T4
	      T(J)   = T(J)   + T1 + T2
	      T(J+1) = T(J+1) - T3 + T4
#else
	      Q(J)   = Q(J)   + T1 + T2
	      Q(J+1) = Q(J+1) - T3 + T4
	      T(J)   = T(J)   + T1 - T2
	      T(J+1) = T(J+1) - T3 - T4
#endif
	   ENDDO
	ENDDO

C       FOR UN-MIRRORED 
        CALL CROSRNG_COM_N(Q,LCIRC,MAXRIN, QMAX, POS_MAX,FFTW3PLAN)

C       FOR MIRRORED 
        CALL CROSRNG_COM_N(T,LCIRC,MAXRIN, QMAXM,POS_MAXM,FFTW3PLAN)

	END

#ifdef NEVER
           IF (NVAL .NE. MAXRIN) THEN
	      Q(J)   = Q(J)   + (T1 + T2) / 2.0
	      Q(J+1) = Q(J+1) - (T3 + T4) / 2.0
	      T(J)   = T(J)   + (T1 - T2) / 2.0
	      T(J+1) = T(J+1) - (T3 - T4) / 2.0
           ELSE
 	      Q(J)   = Q(J)   + T1 + T2
	      Q(J+1) = Q(J+1) - T3 + T4
	      T(J)   = T(J)   + T1 - T2
	      T(J+1) = T(J+1) - T3 - T4
          ENDIF
#endif

C--**************************  CROSRNG_MSP_NEW  ****************************

	SUBROUTINE CROSRNG_MSP_NEW(CIRC1,CIRC2,LCIRC,NRING,MAXRIN,NUMR,
     &                        QMAX,POS_MAX, QMAXM,POS_MAXM, TT,
     &                        FFTW3PLAN)

C       USES NUMR TABLE FOR MAPPING INTO Q ARRAY 
C       USES SIMPLIFIED LOGIC FOR BOUNDARY VALUES, FLOATING PT. ARITH.
C       FOR FFTW3 OR NATIVE SPIDER, HAS REMAINS OF SGI FFT SUPPORT

        INTEGER, INTENT(IN)           :: NUMR(3,NRING)
        REAL, INTENT(IN)              :: CIRC1(LCIRC), CIRC2(LCIRC)
        DOUBLE PRECISION, INTENT(OUT) :: QMAX, QMAXM
        REAL, INTENT(OUT)             :: POS_MAX, POS_MAXM
 	DOUBLE PRECISION, INTENT(IN)  :: TT(*)

C       AUTOMATIC ARRAYS
	REAL                         :: T(MAXRIN+2) 
	REAL                         :: Q(MAXRIN+2) 

C       ZERO WHOLE Q ARRAY,  STRAIGHT  = CIRC1 * CONJG(CIRC2)
	Q = 0.0D0

C       ZERO T ARRAY,  T - MIRRORED  = CONJG(CIRC1) * CONJG(CIRC2)
	T = 0.0D0

C       PREMULTIPLY  ARRAYS ie( CIRC12 = CIRC1 * CIRC2) much slower

	DO I=1,NRING
	   IGO   = NUMR(2,I)
           IGOM1 = IGO - 1
           NVAL  = NUMR(3,I)     
           J1    = 1

#ifndef SP_LIBFFTW3
C          NATIVE FFT
           IF (NVAL .NE. MAXRIN) THEN
	      T1        = CIRC1(IGO+1) * CIRC2(IGO+1)
	      Q(NVAL+1) = Q(NVAL+1) + T1
	      T(NVAL+1) = T(NVAL+1) + T1
C	      T(NVAL+1) VALUE WAS NOT CHANGED EVEN IN EARLIEST VERSION!!

	   ELSE
	      T1   = CIRC1(IGO+1) * CIRC2(IGO+1)
	      Q(2) = Q(2) + T1
	      T(2) = T(2) + T1
	   ENDIF
           J1    = 3
#endif

	   DO J=J1,NVAL,2
	      JC     = J + IGOM1

 	      C1     = CIRC1(JC)
 	      C2     = CIRC1(JC+1)
              D1     = CIRC2(JC)
              D2     = CIRC2(JC+1)

  	      T1     = C1 * D1
 	      T3     = C1 * D2
 	      T2     = C2 * D2
 	      T4     = C2 * D1

#ifndef SP_LIBFFTW3
	      Q(J)   = Q(J)   + T1 - T2
	      Q(J+1) = Q(J+1) - T3 - T4
	      T(J)   = T(J)   + T1 + T2
	      T(J+1) = T(J+1) - T3 + T4
#else
	      Q(J)   = Q(J)   + T1 + T2
	      Q(J+1) = Q(J+1) - T3 + T4
	      T(J)   = T(J)   + T1 - T2
	      T(J+1) = T(J+1) - T3 - T4
#endif
	   ENDDO
	ENDDO

C       FOR UN-MIRRORED 
        CALL CROSRNG_COM_NEW(Q,LCIRC,MAXRIN, QMAX,POS_MAX,TT,FFTW3PLAN)

C       FOR MIRRORED 
        CALL CROSRNG_COM_NEW(T,LCIRC,MAXRIN, QMAXM,POS_MAXM,
     &                       TT,FFTW3PLAN)

	END


C--**************************  CROSRNG_MS  ****************************
@


1.14
log
@GPL_2010
@
text
@d8 1
a10 1
C=*                                                                    *
d31 2
a32 2
C  CROSRNG_MS(CIRC1,CIRC2,LCIRC,NRING,MAXRIN,NUMR,
C             QMAX,POS_MAX, QMAXM,TMT, TT)
d36 2
d40 11
a50 10
C    CIRC1   - FT OF RINGS MULTIPLIED BY WEIGHTS           (SENT)
C    CIRC2   - FT OF RINGS MULTIPLIED BY WEIGHTS           (SENT)
C    LCIRC   - SIZE OF CIRCS ARRAYS                        (SENT)
C    NRING   - NUMBER OF RINGS                             (SENT)
C    MAXRIN  - LONGEST RING                                (SENT)
C    NUMR    - RING LOCATION POINTERS                      (SENT)
C    QMAX    - CC MAX                                      (RETURNED)
C    POS_MAX - POSITION OF CC MAX                          (RETURNED)
C    TT      - USED FOR SGI FFT   (UNUSED NOW)             (SENT)
C
d55 1
a55 1
C       THIS IS A VERY IMPORTANT COMPUTE DEMAND IN ALIGNMEN & REFINE.
a57 3
C       USES NUMR TABLE FOR MAPPING INTO Q ARRAY 
C       USES SIMPLIFIED LOGIC FOR BOUNDARY VALUES, FLOATING PT. ARITH.
C
d61 1
d63 2
a64 4
C--**************************  CROSRNG_MSP_NEW  ****************************

	SUBROUTINE CROSRNG_MSP_NEW(CIRC1,CIRC2,LCIRC,NRING,MAXRIN,NUMR,
     &                        QMAX,POS_MAX, QMAXM,POS_MAXM, TT,
d69 2
d76 1
a76 2
 	DOUBLE PRECISION, INTENT(IN)  :: TT(*)

d78 2
a79 2
	REAL                         :: T(MAXRIN+2) 
	REAL                         :: Q(MAXRIN+2) 
d96 1
a96 1
C          NATIVE OR SGI FFT
d139 1
a139 1
        CALL CROSRNG_COM_NEW(Q,LCIRC,MAXRIN, QMAX,POS_MAX,TT,FFTW3PLAN)
d142 1
a142 2
        CALL CROSRNG_COM_NEW(T,LCIRC,MAXRIN, QMAXM,POS_MAXM,
     &                       TT,FFTW3PLAN)
a145 1

d160 87
d249 2
d256 1
@


1.13
log
@FFTW3 plan changes, FFTW aprings, speed
@
text
@a9 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d11 5
a15 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d17 1
a17 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d22 1
a22 1
C=* This program is distributed in the hope that it will be useful,    *
d24 1
a24 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a25 1
C=*                                                                    *
d27 1
a27 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.12
log
@reverted to pre aprings change
@
text
@d1 1
d5 4
a8 1
C                TRAP FOR COMPILER ERROR ON ALTIX FEB 2005 ARDEAN LEITH
d11 1
a11 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d35 5
a39 1
C  CROSRNG_MS(CIRC1,CIRC2,LCIRC,NRING,MAXRIN,NUMR,QN,TOT,QM,TMT,TT)
d41 10
a50 1
C  CHECKS BOTH STRAIGHT & MIRRORED POSITIONS
a51 2
C  INPUT - FOURIER TRANSFORMS OF RINGS!!
C  CIRC1 ALREADY MULTIPLIED BY WEIGHTS!
d59 3
a64 2
	SUBROUTINE CROSRNG_MS(CIRC1,CIRC2,LCIRC,NRING,MAXRIN,NUMR,
     &                       QN,TOT,QM,TMT,TT)
d66 14
a79 3
	INTEGER           NUMR(3,NRING)
	DIMENSION         CIRC1(LCIRC),CIRC2(LCIRC)
	DOUBLE PRECISION  TT(*),QN,QM
d82 2
a83 5
	DOUBLE PRECISION  T(MAXRIN+2) 
	DOUBLE PRECISION  Q(MAXRIN+2)
	DOUBLE PRECISION  T7(-3:3)

	IP = MAXRIN
d85 1
a85 6
#ifndef SP_LIBFFT
	IP = -LOG2(IP)
#endif

C       C - STRAIGHT  = CIRC1 * CONJG(CIRC2)
C       ZERO Q ARRAY
d88 1
a88 2
C       T - MIRRORED  = CONJG(CIRC1) * CONJG(CIRC2)
C       ZERO T ARRAY
d94 12
a105 11
	   NUMR3I = NUMR(3,I)
	   NUMR2I = NUMR(2,I)

	   T1   = CIRC1(NUMR2I) * CIRC2(NUMR2I)
	   Q(1) = Q(1)+T1
	   T(1) = T(1)+T1

	   IF (NUMR3I .EQ. MAXRIN)  THEN
	      T1   = CIRC1(NUMR2I+1) * CIRC2(NUMR2I+1)
	      Q(2) = Q(2)+T1
	      T(2) = T(2)+T1
d108 3
a110 2
	      T1          = CIRC1(NUMR2I+1) * CIRC2(NUMR2I+1)
	      Q(NUMR3I+1) = Q(NUMR3I+1)+T1
d112 2
d115 2
a116 2
	   DO J=3,NUMR3I,2
	      JC     = J+NUMR2I-1
d128 6
d138 1
a138 1

d142 22
a163 10
C       STRAIGHT (NOT MIRRORED)
#ifdef SP_LIBFFT
	INV         = -1
	LDA         = 1
	Q(MAXRIN+1) = Q(2)
	Q(2)        = 0.0
	Q(MAXRIN+2) = 0.0
	CALL ZDFFT1DU(INV,IP,Q,LDA,TT)
#else
	CALL FFTR_D(Q,IP)
d166 50
a215 8
        JTOT = 0
	QN   = -1.0D20
	DO J=1,MAXRIN
	   IF (Q(J) .GE. QN) THEN
	      QN   = Q(J)
	      JTOT = J
	   ENDIF
	ENDDO
d217 4
a220 9
        IF (JTOT .LE. 0) THEN
C          SOME SORT OF ERROR (PROBABLY COMPILER ON MP ON ALTIX)
           CALL ERRT(101,' NO MAX in CROSRNG_MS, COMPILER ERROR',NE)
           STOP
        ENDIF
 
#ifdef SP_LIBFFT
	QN = QN/MAXRIN
#endif
d222 11
a232 4
	DO K=-3,3
           J     = MOD(JTOT+K+MAXRIN-1,MAXRIN)+1
	   T7(K) = Q(J)
	ENDDO
d234 2
a235 13
C       THIS APPEARS TO INTERPOLATE? al
	CALL PRB1D(T7,7,POS)
	TOT  = FLOAT(JTOT)+POS

C       MIRRORED
#ifdef SP_LIBFFT
 	T(MAXRIN+1) = T(2)
	T(2)        = 0.0
	T(MAXRIN+2) = 0.0
	CALL ZDFFT1DU(INV,IP,T,LDA,TT)
#else
	CALL FFTR_D(T,IP)
#endif
d237 2
a238 8
C       FIND ANGLE
	QM = -1.0D20
	DO J=1,MAXRIN
	   IF (T(J) .GE. QM)  THEN
	      QM   = T(J)
	      JTOT = J
	   ENDIF
	ENDDO
d240 1
a240 3
#ifdef SP_LIBFFT
	QM = QM/MAXRIN
#endif
a241 5
C       FIND ANGLE
	DO K=-3,3
           J     = MOD(JTOT+K+MAXRIN-1,MAXRIN) + 1
	   T7(K) = T(J)
	ENDDO
a242 1
C       THIS APPEARS TO INTERPOLATE? al
a243 2
	CALL PRB1D(T7,7,POS)
	TMT = FLOAT(JTOT) + POS
a244 1
	END
@


1.11
log
@ fftw3 and speedups
@
text
@d4 1
a4 3
C              TRAP FOR COMPILER ERROR ON ALTIX   FEB 2005 ARDEAN LEITH
C              REWRITE USING CROSRNG_COM          FEB 2008 ARDEAN LEITH
C
d7 1
a7 1
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d31 1
a31 5
C  CROSRNG_MS(CIRC1,CIRC2,LCIRC,NRING,MAXRIN,NUMR,
C             QMAX,F_MAXL, QMAXM,TMT, TT)
C
C PURPOSE: CROSS CORRELATION OF RADIAL RINGS FOR USE IN ROTATIONAL
C          ALIGNMENT.  CHECKS BOTH STRAIGHT & MIRRORED POSITIONS
d33 1
a33 10
C PARAMETERS:
C    CIRC1  - FT OF RINGS MULTIPLIED BY WEIGHTS           (SENT)
C    CIRC2  - FT OF RINGS MULTIPLIED BY WEIGHTS           (SENT)
C    LCIRC  - SIZE OF CIRCS ARRAYS                        (SENT)
C    NRING  - NUMBER OF RINGS                             (SENT)
C    MAXRIN - LONGEST RING                                (SENT)
C    NUMR   - RING LOCATION POINTERS                      (SENT)
C    QMAX   - CC MAX                                      (RETURNED)
C    F_MAXL - POSITION OF CC MAX                          (RETURNED)
C    TT     - USED FOR SGI FFT   (UNUSED NOW)             (SENT)
d35 2
a43 3
C       USES NUMR TABLE FOR MAPPING INTO Q ARRAY 
C       USES SIMPLIFIED LOGIC FOR BOUNDARY VALUES, FLOATING PT. ARITH.
C
a47 243
     &                        QMAX,F_MAXL, QMAXM,F_MAXLM, TT)

C       USES NUMR TABLE FOR MAPPING INTO Q ARRAY 
C       USES SIMPLIFIED LOGIC FOR BOUNDARY VALUES, FLOATING PT. ARITH.

        INTEGER, INTENT(IN) :: NUMR(3,NRING)
        REAL, INTENT(IN)    :: CIRC1(LCIRC), CIRC2(LCIRC)
        DOUBLE PRECISION    :: QMAX,QMAXM
        REAL, INTENT(OUT)   :: F_MAXL, F_MAXLM
 	DOUBLE PRECISION    :: TT(*)

C       AUTOMATIC ARRAYS
	REAL                :: T(MAXRIN+2) 
	REAL                :: Q(MAXRIN+2) 

C       Q - STRAIGHT  = CIRC1 * CONJG(CIRC2)
C       ZERO WHOLE Q ARRAY
	Q = 0.0 

C       T - MIRRORED  = CONJG(CIRC1) * CONJG(CIRC2)
C       ZERO T ARRAY
	T = 0.0 

C       PREMULTIPLY  ARRAYS ie( CIRC12 = CIRC1 * CIRC2) much slower

	DO I=1,NRING
	   IGO   = NUMR(2,I)
	   NVAL  = NUMR(3,I)
           IGOM1 = IGO - 1
           J1    = 1

	   T1   = CIRC1(IGO) * CIRC2(IGO)
	   Q(1) = Q(1) + T1
	   T(1) = T(1) + T1

           IF (NVAL .NE. MAXRIN) THEN
	      T1        = CIRC1(IGO+1) * CIRC2(IGO+1)
	      Q(NVAL+1) = Q(NVAL+1) + T1
	      T(NVAL+1) = T(NVAL+1) + T1
C	      T(NVAL+1) VALUE WAS NOT CHANGED EVEN IN EARLIEST VERSION!!

	   ELSE
	      T1   = CIRC1(IGO+1) * CIRC2(IGO+1)
	      Q(2) = Q(2) + T1
	      T(2) = T(2) + T1
	   ENDIF

	   DO J=J1,NVAL,2
	      JC     = J + IGOM1

 	      C1     = CIRC1(JC)
 	      C2     = CIRC1(JC+1)
              D1     = CIRC2(JC)
              D2     = CIRC2(JC+1)

  	      T1     = C1 * D1
 	      T3     = C1 * D2
 	      T2     = C2 * D2
 	      T4     = C2 * D1

	      Q(J)   = Q(J)   + T1 + T2
	      Q(J+1) = Q(J+1) - T3 + T4
	      T(J)   = T(J)   + T1 - T2
	      T(J+1) = T(J+1) - T3 - T4
	   ENDDO
	ENDDO

C       FOR UN-MIRRORED CASE
        CALL CROSRNG_COM(Q,LCIRC,MAXRIN,QMAX,F_MAXL,NRING,IPLAN)

C       FOR MIRRORED CASE
        CALL CROSRNG_COM(T,LCIRC,MAXRIN,QMAXM,F_MAXLM,NRING,IPLAN)

	END

C--**************************  CROSRNG_MSP  ****************************

	SUBROUTINE CROSRNG_MSP(CIRC1,CIRC2,LCIRC,NRING,MAXRIN,NUMR,
     &                        QMAX,F_MAXL, QMAXM,F_MAXLM, TT,
     &                        FFTW3PLAN)

        INTEGER, INTENT(IN) :: NUMR(3,NRING)
        REAL, INTENT(IN)    :: CIRC1(LCIRC), CIRC2(LCIRC)
        DOUBLE PRECISION    :: QMAX,QMAXM
        REAL, INTENT(OUT)   :: F_MAXL, F_MAXLM
 	DOUBLE PRECISION    :: TT(*)

C       AUTOMATIC ARRAYS
	REAL                :: T(MAXRIN+2) 
	REAL                :: Q(MAXRIN+2) 

C       C - STRAIGHT  = CIRC1 * CONJG(CIRC2)
C       ZERO Q ARRAY
	Q = 0.0D0

C       T - MIRRORED  = CONJG(CIRC1) * CONJG(CIRC2)
C       ZERO T ARRAY
	T = 0.0D0

C       PREMULTIPLY  ARRAYS ie( CIRC12 = CIRC1 * CIRC2) much slower

	DO I=1,NRING
	   IGO  = NUMR(2,I)
	   NVAL = NUMR(3,I)

	   T1   = CIRC1(IGO) * CIRC2(IGO)
	   Q(1) = Q(1) + T1
	   T(1) = T(1) + T1

           IF (NVAL .NE. MAXRIN) THEN
	      T1        = CIRC1(IGO+1) * CIRC2(IGO+1)
	      Q(NVAL+1) = Q(NVAL+1) + T1
	      T(NVAL+1) = T(NVAL+1) + T1
C	      T(NVAL+1) VALUE WAS NOT CHANGED EVEN IN EARLIEST VERSION!!

	   ELSE
	      T1   = CIRC1(IGO+1) * CIRC2(IGO+1)
	      Q(2) = Q(2) + T1
	      T(2) = T(2) + T1
	   ENDIF

           IGOM1 = IGO - 1
	   DO J=3,NVAL,2
	      JC     = J + IGOM1

 	      C1     = CIRC1(JC)
 	      C2     = CIRC1(JC+1)
              D1     = CIRC2(JC)
              D2     = CIRC2(JC+1)

  	      T1     = C1 * D1
 	      T3     = C1 * D2
 	      T2     = C2 * D2
 	      T4     = C2 * D1

	      Q(J)   = Q(J)   + T1 + T2
	      Q(J+1) = Q(J+1) - T3 + T4
	      T(J)   = T(J)   + T1 - T2
	      T(J+1) = T(J+1) - T3 - T4

	   ENDDO
	ENDDO

        CALL CROSRNG_COM(Q,LCIRC,MAXRIN,QMAX,F_MAXL,NRING,FFTW3PLAN)
C       FOR MIRRORED TEST
        CALL CROSRNG_COM(T,LCIRC,MAXRIN,QMAXM,F_MAXLM,NRING,FFTW3PLAN)

	END


C--**************************  CROSRNG_MSP_NEW  ****************************

	SUBROUTINE CROSRNG_MSP_NEW(CIRC1,CIRC2,LCIRC,NRING,MAXRIN,NUMR,
     &                        QMAX,F_MAXL, QMAXM,F_MAXLM, TT,
     &                        FFTW3PLAN)

        INTEGER, INTENT(IN)          :: NUMR(3,NRING)
        REAL, INTENT(IN)             :: CIRC1(LCIRC), CIRC2(LCIRC)
        DOUBLE PRECISION             :: QMAX, QMAXM
        REAL, INTENT(OUT)            :: F_MAXL, F_MAXLM
 	DOUBLE PRECISION, INTENT(IN) :: TT(*)

C       AUTOMATIC ARRAYS
	REAL                         :: T(MAXRIN+2) 
	REAL                         :: Q(MAXRIN+2) 

C       ZERO WHOLE Q ARRAY,  STRAIGHT  = CIRC1 * CONJG(CIRC2)
	Q = 0.0D0

C       ZERO T ARRAY,  T - MIRRORED  = CONJG(CIRC1) * CONJG(CIRC2)
	T = 0.0D0

C       PREMULTIPLY  ARRAYS ie( CIRC12 = CIRC1 * CIRC2) much slower

	DO I=1,NRING
	   IGO   = NUMR(2,I)
           IGOM1 = IGO - 1
           NVAL  = NUMR(3,I)     
           J1    = 1
#ifndef SP_LIBFFTW3
           IF (NVAL .NE. MAXRIN) THEN
	      T1        = CIRC1(IGO+1) * CIRC2(IGO+1)
	      Q(NVAL+1) = Q(NVAL+1) + T1
	      T(NVAL+1) = T(NVAL+1) + T1
C	      T(NVAL+1) VALUE WAS NOT CHANGED EVEN IN EARLIEST VERSION!!

	   ELSE
	      T1   = CIRC1(IGO+1) * CIRC2(IGO+1)
	      Q(2) = Q(2) + T1
	      T(2) = T(2) + T1
	   ENDIF
           J1    = 3
#endif

	   DO J=J1,NVAL,2
	      JC     = J + IGOM1

 	      C1     = CIRC1(JC)
 	      C2     = CIRC1(JC+1)
              D1     = CIRC2(JC)
              D2     = CIRC2(JC+1)

  	      T1     = C1 * D1
 	      T3     = C1 * D2
 	      T2     = C2 * D2
 	      T4     = C2 * D1

	      Q(J)   = Q(J)   + T1 + T2
	      Q(J+1) = Q(J+1) - T3 + T4
	      T(J)   = T(J)   + T1 - T2
	      T(J+1) = T(J+1) - T3 - T4
	   ENDDO
	ENDDO

C       FOR UN-MIRRORED 
        CALL CROSRNG_COM_NEW(Q,LCIRC,MAXRIN, QMAX,F_MAXL,
     &                       NRING,TT,FFTW3PLAN)
C       FOR MIRRORED 
        CALL CROSRNG_COM_NEW(T,LCIRC,MAXRIN, QMAXM,F_MAXLM,
     &                       NRING,TT,FFTW3PLAN)

	END


#ifdef NEVER
           IF (NVAL .NE. MAXRIN) THEN
	      Q(J)   = Q(J)   + (T1 + T2) / 2.0
	      Q(J+1) = Q(J+1) - (T3 + T4) / 2.0
	      T(J)   = T(J)   + (T1 - T2) / 2.0
	      T(J+1) = T(J+1) - (T3 - T4) / 2.0
           ELSE
 	      Q(J)   = Q(J)   + T1 + T2
	      Q(J+1) = Q(J+1) - T3 + T4
	      T(J)   = T(J)   + T1 - T2
	      T(J+1) = T(J+1) - T3 - T4
          ENDIF
#endif



C--**************************  CROSRNG_MS_OLD  ****************************

	SUBROUTINE CROSRNG_MS_OLD(CIRC1,CIRC2,LCIRC,NRING,MAXRIN,NUMR,
@


1.10
log
@*** empty log message ***
@
text
@a68 5
#ifdef SP_LIBFFTW3
        USE TYPE_KINDS      
        INTEGER(KIND=I_8)   :: IPLAN = 0     !STRUCTURE POINTER 
#endif

d79 3
a81 3
C       C - STRAIGHT  = CIRC1 * CONJG(CIRC2)
C       ZERO Q ARRAY
	Q = 0.0D0
d85 1
a85 1
	T = 0.0D0
d90 4
a93 2
	   IGO  = NUMR(2,I)
	   NVAL = NUMR(3,I)
d111 1
a111 2
           IGOM1 = IGO - 1
	   DO J=3,NVAL,2
a127 1

d131 1
d134 1
a134 1
C       FOR MIRRORED TEST
d214 90
@


1.9
log
@ plan
@
text
@d57 3
d66 8
d136 1
a136 1
        CALL CROSRNG_COM(Q,LCIRC,MAXRIN,QMAX,F_MAXL,NRING,0.0D0)
d139 1
a139 1
        CALL CROSRNG_COM(T,LCIRC,MAXRIN,QMAXM,F_MAXLM,NRING,0.0D0)
@


1.8
log
@GPL License fixed
@
text
@d4 3
a6 1
C                TRAP FOR COMPILER ERROR ON ALTIX FEB 2005 ARDEAN LEITH
d9 1
a9 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d33 5
a37 1
C  CROSRNG_MS(CIRC1,CIRC2,LCIRC,NRING,MAXRIN,NUMR,QN,TOT,QM,TMT,TT)
d39 10
a48 1
C  CHECKS BOTH STRAIGHT & MIRRORED POSITIONS
a49 2
C  INPUT - FOURIER TRANSFORMS OF RINGS!!
C  CIRC1 ALREADY MULTIPLIED BY WEIGHTS!
d61 149
@


1.7
log
@HRI GPL License used
@
text
@a5 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 6

C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.6
log
@compiler error jtot=0 trap
@
text
@d7 24
@


1.5
log
@slight speed up
@
text
@d3 2
a4 2
C  CROSRNG_MS.F
C
d108 3
a110 2
C
	QN = -1.0D20
d118 6
@


1.4
log
@cosmetic formatting
@
text
@d16 1
a16 1
C CHECKS BOTH STRAIGHT & MIRRORED POSITIONS
d21 6
d56 2
d79 15
a93 11
	      C1     = CIRC1(JC)
	      C2     = CIRC1(JC+1)
	      T1     = C1*CIRC2(JC)
	      T2     = C2*CIRC2(JC+1)
	      T3     = C1*CIRC2(JC+1)
	      T4     = C2*CIRC2(JC)

	      Q(J)   = Q(J)+T1+T2
	      Q(J+1) = Q(J+1)-T3+T4
	      T(J)   = T(J)+T1-T2
	      T(J+1) = T(J+1)-T3-T4
d125 2
d140 1
d153 1
d158 2
@


1.3
log
@header & cosmetic
@
text
@d1 1
a1 1
C++************************************************************************
d3 1
a3 1
C $$ CROSRNG_MS.FOR
d5 8
a12 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
C **************************************************************************
d14 1
d16 1
a16 1
C IMAGE_PROCESSING_ROUTINE
d18 3
a20 1
C        1         2         3         4         5         6         7
d22 18
a39 20
C--************************************************************************
C
C $$ CROSRNG_MS.FOR
C
	SUBROUTINE  CROSRNG_MS
     &   (CIRC1,CIRC2,LCIRC,NRING,MAXRIN,NUMR,QN,TOT,QM,TMT,TT)
C
C  INPUT - Fourier transforms of rings!!!
C  CIRC1 already multiplied by weights!!
C
	INTEGER  NUMR(3,NRING),MAXRIN,NUMR3I,NUMR2I
	DIMENSION  CIRC1(LCIRC),CIRC2(LCIRC)
	DOUBLE PRECISION  TT(*)
	DOUBLE PRECISION  QN,QM,T7(-3:3)
C  Automatic arrays
	DOUBLE PRECISION  T(MAXRIN+2),Q(MAXRIN+2)
	IP=MAXRIN
#ifdef SP_LIBFFT
#else
	IP=-LOG2(IP)
d42 20
a61 17
C C - straight  = CIRC1*CONJG(CIRC2)
	Q=0.0D0
C T - mirrored  = CONJG(CIRC1)*CONJG(CIRC2)
	T=0.0D0

	DO    I=1,NRING
	   NUMR3I=NUMR(3,I)
	   NUMR2I=NUMR(2,I)

	   T1=CIRC1(NUMR2I)*CIRC2(NUMR2I)
	   Q(1)=Q(1)+T1
	   T(1)=T(1)+T1

	   IF(NUMR3I.EQ.MAXRIN)  THEN
	      T1=CIRC1(NUMR2I+1)*CIRC2(NUMR2I+1)
	      Q(2)=Q(2)+T1
	      T(2)=T(2)+T1
d64 2
a65 3
	      T1=CIRC1(NUMR2I+1)*CIRC2(NUMR2I+1)
	      Q(NUMR3I+1)=Q(NUMR3I+1)+T1
C###
d68 14
a81 12
	   DO   J=3,NUMR3I,2
	      JC=J+NUMR2I-1
	      C1=CIRC1(JC)
	      C2=CIRC1(JC+1)
	      T1=C1*CIRC2(JC)
	      T2=C2*CIRC2(JC+1)
	      T3=C1*CIRC2(JC+1)
	      T4=C2*CIRC2(JC)
	      Q(J)=Q(J)+T1+T2
	      Q(J+1)=Q(J+1)-T3+T4
	      T(J)=T(J)+T1-T2
	      T(J+1)=T(J+1)-T3-T4
d84 2
a85 1
C  STRAIGHT
d87 6
a92 8
	INV=-1
	LDA=1
	Q(MAXRIN+1)=Q(2)
	Q(2)=0.0
	Q(MAXRIN+2)=0.0
	CALL  ZDFFT1DU(INV,IP,Q,LDA,TT)
C skip the normalization, divide the maximum instead.
C	CALL  DSCAL1D(IP,1.0D0/DBLE(FLOAT(IP)),Q,LDA)
d94 1
a94 1
	CALL  FFTR_D(Q,IP)
d97 5
a101 5
	QN=-1.0D20
	DO    J=1,MAXRIN
	   IF(Q(J).GE.QN)  THEN
	      QN=Q(J)
	      JTOT=J
d104 1
d106 1
a106 1
	QN=QN/MAXRIN
d108 4
a111 4
C
	DO    K=-3,3
           J=MOD(JTOT+K+MAXRIN-1,MAXRIN)+1
	   T7(K)=Q(J)
d113 4
a116 3
	CALL  PRB1D(T7,7,POS)
	TOT=FLOAT(JTOT)+POS
C  MIRRORED
d118 4
a121 6
 	T(MAXRIN+1)=T(2)
	T(2)=0.0
	T(MAXRIN+2)=0.0
	CALL  ZDFFT1DU(INV,IP,T,LDA,TT)
C skip the normalization, divide the maximum instead.
C	CALL  DSCAL1D(IP,1.0D0/DBLE(FLOAT(IP)),T,LDA)
d123 1
a123 1
	CALL  FFTR_D(T,IP)
d125 6
a130 6
C
	QM=-1.0D20
	DO    J=1,MAXRIN
	   IF(T(J).GE.QM)  THEN
	      QM=T(J)
	      JTOT=J
d133 1
d135 1
a135 1
	QM=QM/MAXRIN
d137 4
a140 4
C
	DO    K=-3,3
           J=MOD(JTOT+K+MAXRIN-1,MAXRIN)+1
	   T7(K)=T(J)
d142 4
a145 2
	CALL  PRB1D(T7,7,POS)
	TMT=FLOAT(JTOT)+POS
@


1.2
log
@replaced log2_p with log2
@
text
@d16 1
d18 1
d41 1
a41 1
C
d46 1
a46 1
C
d48 15
a62 15
	NUMR3I=NUMR(3,I)
	NUMR2I=NUMR(2,I)
C
	T1=CIRC1(NUMR2I)*CIRC2(NUMR2I)
	Q(1)=Q(1)+T1
	T(1)=T(1)+T1
C
	IF(NUMR3I.EQ.MAXRIN)  THEN
	T1=CIRC1(NUMR2I+1)*CIRC2(NUMR2I+1)
	Q(2)=Q(2)+T1
	T(2)=T(2)+T1
C
	ELSE
	T1=CIRC1(NUMR2I+1)*CIRC2(NUMR2I+1)
	Q(NUMR3I+1)=Q(NUMR3I+1)+T1
d64 15
a78 15
	ENDIF
C
	DO   J=3,NUMR3I,2
	JC=J+NUMR2I-1
	C1=CIRC1(JC)
	C2=CIRC1(JC+1)
	T1=C1*CIRC2(JC)
	T2=C2*CIRC2(JC+1)
	T3=C1*CIRC2(JC+1)
	T4=C2*CIRC2(JC)
	Q(J)=Q(J)+T1+T2
	Q(J+1)=Q(J+1)-T3+T4
	T(J)=T(J)+T1-T2
	T(J+1)=T(J+1)-T3-T4
	ENDDO
d96 4
a99 4
	IF(Q(J).GE.QN)  THEN
	QN=Q(J)
	JTOT=J
	ENDIF
d106 2
a107 2
        J=MOD(JTOT+K+MAXRIN-1,MAXRIN)+1
	T7(K)=Q(J)
d125 4
a128 4
	IF(T(J).GE.QM)  THEN
	QM=T(J)
	JTOT=J
	ENDIF
d135 2
a136 2
        J=MOD(JTOT+K+MAXRIN-1,MAXRIN)+1
	T7(K)=T(J)
@


1.1
log
@Initial revision
@
text
@d37 1
a37 1
	IP=-LOG2_P(IP)
@
