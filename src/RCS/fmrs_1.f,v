head	1.29;
access;
symbols
	healthdept_2018:1.29
	pre_getangas:1.28
	GPL2010:1.28
	pre_GPL2010:1.27
	pre_var_equation:1.27
	pre_fftwrings:1.27
	pre_opfiles:1.21
	src:1.21
	best-code:1.21
	x-named-regs:1.21
	x:1.21
	v13-00:1.21
	pre_GPL:1.18
	prec_CA:1.12
	noindx:1.11
	Bproc:1.9
	oct21:1.3
	last77:1.3;
locks; strict;
comment	@c @;


1.29
date	2018.10.03.14.34.06;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2010.06.24.13.25.41;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2008.03.07.20.10.46;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2008.02.29.13.12.17;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2008.02.22.16.54.09;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2008.01.24.15.55.25;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2007.12.17.15.22.45;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2007.12.12.15.54.57;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2005.11.15.21.34.54;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2005.10.17.20.15.08;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.17.18.08.42;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2005.06.02.20.11.10;	author bimal;	state Exp;
branches;
next	1.17;

1.17
date	2005.05.13.20.24.59;	author bimal;	state Exp;
branches;
next	1.16;

1.16
date	2005.05.04.19.40.15;	author bimal;	state Exp;
branches;
next	1.15;

1.15
date	2005.05.04.18.36.44;	author bimal;	state Exp;
branches;
next	1.14;

1.14
date	2005.01.24.18.28.08;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.27.18.00.12;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.30.18.02.51;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2001.05.29.18.35.06;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.11.14.16.51.15;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2000.08.24.18.38.04;	author bimal;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.24.18.14.43;	author bimal;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.17.17.53.56;	author bimal;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.17.17.28.26;	author bimal;	state Exp;
branches;
next	1.5;

1.5
date	99.11.10.23.09.19;	author yuchen;	state Exp;
branches;
next	1.4;

1.4
date	99.11.05.15.05.19;	author bimal;	state Exp;
branches;
next	1.3;

1.3
date	97.10.06.20.43.45;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	97.09.30.14.38.48;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	96.08.27.13.47.49;	author pawel;	state Exp;
branches;
next	;


desc
@1D simple FFT
@


1.29
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C  FMRS_1.F                      ADDED FFTW        AUG 2000 BIMAL RATH
C                                WORK REDIMENSIOND NOV 2005 ARDEAN LEITH
C                                FFTW3 REACTIVATED DEC 2007 ARDEAN LEITH
C                                FMRS REWRITE      JAN 2008 ARDEAN LEITH
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  D REAL MIXED RADIX FFT.
C  INPUT:  X(N) - REAL ARRAY
C  OUTPUT: N EVEN  X(N+2)
C  ORDER OF ELEMENTS:
C  R(0),0.0, R(1), I(1), R(2), I(2), ....., R(N/2-1), I(N/2-1), R(N/2),0.0
C
C         N ODD  X(N+1)
C  R(0),0.0, R(1), I(1), R(2), I(2), ....., R(N/2-1), I(N/2-1), R(N/2),I(N/2)
C 
C  HERE WE FOLLOW THE CONVENTION THAT INTEGER DIVISION 
C  IS ROUNDED DOWN, E.G. 5/2 =2)
C
C  INV: +1 FORWARD FFT
C       -1 INVERSE FFT
C
C  ON OUTPUT INV=0 INDICATES ERROR (NOT GUARANTEED)!!!
C
C--*********************************************************************

        SUBROUTINE  FMRS_1(X,NSAM,INV)

        REAL, INTENT(INOUT) :: X(*)
        INTEGER, INTENT(INOUT) :: INV

        CALL FMRS(X,NSAM,1,1, 0.0D0, .TRUE.,.TRUE., INV,IRTFLG)

        IF (IRTFLG .NE. 0) INV = 0

        END

@


1.28
log
@GPL_2010
@
text
@d14 1
a14 1
C=* Email: spider@@wadsworth.org                                        *
@


1.27
log
@removed docalc from fmrs call
@
text
@a8 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d10 5
a14 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                * 
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d16 1
a16 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.26
log
@docalc parameter for fmrs
@
text
@d58 1
a58 1
        CALL FMRS(X,NSAM,1,1, 0.0D0, .TRUE.,.TRUE.,.TRUE., INV,IRTFLG)
@


1.25
log
@added plan to fmrs call
@
text
@d58 1
a58 1
        CALL FMRS(X,NSAM,1,1,0.0D0, .TRUE.,.TRUE.,INV,IRTFLG)
@


1.24
log
@calls fmrs
@
text
@d58 1
a58 1
        CALL FMRS(X,NSAM,1,1,.TRUE.,.TRUE.,INV,IRTFLG)
@


1.23
log
@removed fftw2
@
text
@d7 1
d10 1
a10 1
C=* Copyright (C) 1985-2007  Health Research Inc.                      *
a47 1
C  ON OUTPUT INV=0 INDICATES ERROR
d49 1
a49 1
C  IMAGE_PROCESSING_ROUTINE
d55 2
a56 1
        INCLUDE 'CMBLOCK.INC'
d58 1
a58 1
        REAL, DIMENSION(*)       :: X
d60 1
a60 83
#ifdef SP_LIBFFT
C       USING SGI_COMPLIB FOR FFT --------------------------------- SGI

        REAL, DIMENSION(NSAM+16) :: WORK

	N = NSAM

	CALL SCFFT1DUI(N,WORK)

	LDA = 1
	IF (INV .GT. 0) THEN
	   CALL SCFFT1DU(INV,N,X,LDA,WORK)
	ELSE
	   CALL CSFFT1DU(INV,N,X,LDA,WORK)
	   QT = 1.0 / FLOAT(N)

	   CALL SSCAL1D(N,QT,X,LDA)
	ENDIF

#else
#if defined (SP_LIBFFTW3)
C       USING FFTW3 LIBRARY CALLS FOR FFT ----------------------- FFTW3
        CALL FMRS_FFTW3(X,NSAM,1,1,INV)
#else

#if defined(SP_LIBFFTW) || defined(SP_LIBFFTWMP)
C       USING FFTW2 LIBRARY CALLS FOR FFT ----------------------- FFTW2
        CALL ERRT(101,'FFTW2 NO LONGER IN USE, DEFINE SP_LIBFFTW3',IER)


#else
	
C       NATIVE SPIDER FFT  (NOT OPTIMAL) ----------------------- SPIDER

        REAL, DIMENSION(NSAM+16) :: WORK

	N = NSAM 

C       INV CAN BE +1 (FORWARD FFT) OR -1 (INVERSE FFT)
        IF (INV)  2,2,1

1       DO I=1,N
           WORK(I) = 0.0
	ENDDO
        CALL FFTMCF(X,WORK,N,N,N,INV)

        IF (MOD(N,2))  12,12,13

12      DO I=N+1,3,-2
           X(I)   = X((I+1)/2)
           X(I+1) = WORK((I+1)/2)
	ENDDO
        X(2)   = 0.0
        X(N+2) = 0.0
        RETURN

13      DO I=N,3,-2
           X(I)   = X(I/2+1)
           X(I+1) = WORK(I/2+1)
	ENDDO

        X(2)= 0.0
        RETURN

2       DO I=2,N/2+1
           WORK(I)     = X(2*I)/N
  	   WORK(N-I+2) = -WORK(I)
	ENDDO

        WORK(1) = 0.0

        DO I=1,N/2+1
	   X(I) = X(2*I-1)/N
	ENDDO
        DO I=N,N/2+2,-1
           X(I) = X(N-I+2)
	ENDDO

        CALL FFTMCF(X,WORK,N,N,N,INV)

#endif
#endif
#endif
@


1.22
log
@split out fmrs_fftw3
@
text
@d85 2
a86 1
C       USING FFTW LIBRARY CALLS FOR FFT ------------------------ FFTW
a87 126
#include "FFTW.INC"

        REAL, DIMENSION(NSAM) :: Y
        INTEGER, SAVE         :: NSAMO=0
        INTEGER, SAVE         :: NSAMOR=0

C       PLAN AND PLANR ARE ACTUALLY POINTERS TO A STRUCTURE 
#if defined (__osf__) || defined (ia64) || defined (__x86_64__)
        INTEGER*8, SAVE :: PLAN=0, PLANR=0
#else
        INTEGER, SAVE :: PLAN=0, PLANR=0
#endif
        LOGICAL, SAVE :: INIT=.TRUE.

#ifdef SP_LIBFFTWMP
        IF (INIT) THEN
C          MUST INITIALIZE THREADS ONCE
           CALL FFTW_F77_THREADS_INIT(IRTFLG);
           IF (IRTFLG .NE. 0) THEN
              CALL ERRT(101,'MULTIPLE THREADS FAILED --FFTW2',IER)
              RETURN
           ENDIF
           INIT = .FALSE.
        ENDIF
        CALL GETTHREADS(NUMTH)
#else
        NUMTH = 1
#endif
c        WRITE(NOUT,90) NUMTH
c90      FORMAT('USING FFTW WITH THREADS: ',I4)

        IF (INV .GT. 0) THEN
C          FORWARD TRANSFORM

           IF (NSAM.NE.NSAMO) THEN
C             SIZE CHANGED, REESTABLISH PLAN
              IF (PLAN .GT. 0) CALL RFFTW_F77_DESTROY_PLAN(PLAN)
              
#ifdef SP_LIBFFTWMP
              CALL RFFTW_F77_CREATE_PLAN(PLAN,NSAM,
     &              FFTW_REAL_TO_COMPLEX, FFTW_ESTIMATE + 
     &                    FFTW_THREADSAFE)
#else
              CALL RFFTW_F77_CREATE_PLAN(PLAN,NSAM,
     &              FFTW_REAL_TO_COMPLEX, FFTW_ESTIMATE)             
#endif
           ENDIF

C          CHANGE THE SIGN CONVENTION OF FFTW TO THAT OF SPIDER
C          SPIDER FORMAT IMAGINARY PARTS HAVE OPPOSITE SIGNS 
C          TO THAT OF FFTW  

           X(NSAM+1) = X(1)
#ifdef SP_LIBFFTWMP
           CALL RFFTW_F77_THREADS(NUMTH,PLAN,1,X(NSAM+1),-1,1,Y,1,1)
#else
           CALL RFFTW_F77(PLAN,1,X(NSAM+1),-1,1,Y,1,1)               
#endif

           NSAMO = NSAM

C          CHANGE FFTW FORMAT TO SPIDER FFT FORMAT 
           NREM = MOD(NSAM,2)
           LSD = NSAM + 2 - NREM
           DO NM =1, LSD/2
              X((NM - 1) * 2 + 1) = Y(NM)
              IF (NM .EQ. 1) THEN
                 X(2 * NM) = 0.0
              ELSEIF (NM .EQ. LSD/2 .AND. NREM .EQ. 0) THEN
                 X(2 * NM) = 0.0
              ELSE
                  X(2 * NM) = Y(NSAM - NM + 2)
              ENDIF

	   ENDDO 
	   
        ELSE
C          REVERSE TRANSFORM
	  
C          CHANGE SPIDER FFT FORMAT TO FFTW FORMAT 
           NREM = MOD(NSAM,2)
           LSD  = NSAM + 2 - NREM
           DO NM =1, LSD/2
              Y(NM) = X((NM-1) * 2 + 1)
              IF ((NM .NE. 1) .AND. 
     &         ((NM .NE. LSD/2) .OR. (NREM .NE. 0))) THEN
                  Y(NSAM - NM + 2) = X(2 * NM)
              ENDIF
           ENDDO
 
           IF (NSAM.NE.NSAMOR) THEN
C             SIZE CHANGED, REESTABLISH PLAN
              IF (PLANR .GT. 0) CALL RFFTW_F77_DESTROY_PLAN(PLANR)
            
#ifdef SP_LIBFFTWMP
              CALL RFFTW_F77_CREATE_PLAN(PLANR,NSAM,
     &              FFTW_COMPLEX_TO_REAL, FFTW_ESTIMATE + 
     &                     FFTW_THREADSAFE)
#else 
              CALL RFFTW_F77_CREATE_PLAN(PLANR,NSAM,
     &              FFTW_COMPLEX_TO_REAL, FFTW_ESTIMATE )          
#endif            
              NSAMOR = NSAM

           ENDIF

C          CHANGE THE SIGN CONVENTION OF FFTW TO THAT OF SPIDER
C          SPIDER FORMAT IMAGINARY PARTS HAVE OPPOSITE SIGNS 
C          TO THAT OF FFTW  

#ifdef SP_LIBFFTWMP
           CALL RFFTW_F77_THREADS(NUMTH,PLANR,1,Y,1,1,X(NSAM+1),-1,1)
#else
           CALL RFFTW_F77(PLANR,1,Y,1,1,X(NSAM+1),-1,1)
#endif
           X(1) = X(NSAM+1)

C          NORMALIZATION NEEDED
           PIX = 1.0 / (NSAM)

c$omp      parallel do private(i)
           DO I=1,NSAM
              X(I) = X(I) * PIX
           ENDDO   
	   
        ENDIF
@


1.21
log
@BUFFER OVERFLOW
@
text
@d6 1
d9 1
a9 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d11 2
a12 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                * C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d59 2
a60 1
        REAL, DIMENSION(NSAM)    :: Y
a61 2
#ifndef SP_LIBFFTW) 
C       NOT NEEDED FOR FFTW
a62 2
#endif

a63 2
#ifdef SP_LIBFFT
C       USING SGI_COMPLIB FOR FFT -------------------------------
d79 4
d85 1
a85 1
C       USING FFTW LIBRARY CALLS FOR FFT --------------------------
d89 3
a91 2
        INTEGER, SAVE :: NSAMO=0
        INTEGER, SAVE :: NSAMOR=0
a164 1
 
d213 1
d216 1
a216 2
#if defined(SP_LIBFFTW3) || defined(SP_LIBFFTW3MP)
C       USING FFTW3 LIBRARY CALLS FOR FFT3
d218 1
a218 121
#include "FFTW3.INC"

        INTEGER, SAVE :: NSAMO=0
        INTEGER, SAVE :: NSAMOR=0

C       PLAN AND PLANR ARE ACTUALLY POINTERS TO A STRUCTURE 

        INTEGER*8, SAVE :: PLAN=0, PLANR=0

        LOGICAL, SAVE :: INIT=.TRUE.


#ifdef SP_LIBFFTW3MP
        IF (INIT) THEN
C          MUST INITIALIZE THREADS ONCE

           CALL SFFTW_INIT_THREADS(IRTFLG)
           IF (IRTFLG .EQ. 0) THEN
              CALL ERRT(101,'MULTIPLE THREADS FAILED --FFTW3',IER)
              RETURN
           ENDIF

           CALL GETTHREADS(NUMTH) 
	   CALL SFFTW_PLAN_WITH_NTHREADS(NUMTH) 	   
           INIT = .FALSE.
        ENDIF
  
#else
        NUMTH = 1
#endif

C        WRITE(NOUT,90) NUMTH
Cl90      FORMAT('USING FFTW WITH THREADS: ',I4)

        IF (INV .GT. 0) THEN
C          FORWARD TRANSFORM
 
	   NREM = MOD(NSAM,2)
           LSD = NSAM + 2 - NREM


           IF (NSAM.NE.NSAMO) THEN
C             SIZE CHANGED, REESTABLISH PLAN
              IF (PLAN .GT. 0) CALL SFFTW_DESTROY_PLAN(PLAN)
              
 	      CALL SFFTW_PLAN_DFT_R2C_1D(PLAN,NSAM,X,X,FFTW_ESTIMATE)             
	      
C             INPUT ARRAY SIZE
	      
C             OUTPUT ARRAY SIZE	      
	      
           ENDIF
	       
	   
C          USE FFTW GURU INTERFACE

           CALL SFFTW_EXECUTE_DFT_R2C(PLAN,X,X) 

	   LDA = NSAM+2-MOD(NSAM,2)
           JH  = LDA/2	

c$omp      parallel do private(i)
	   DO   I = 1,JH	
	      X(2*I) = -X(2*I)           
 	   ENDDO
   
        NSAMO = NSAM

        ELSE
C          REVERSE TRANSFORM
 
C          CHANGE SPIDER FFT FORMAT TO FFTW FORMAT 
           NREM = MOD(NSAM,2)
           LSD  = NSAM + 2 - NREM
	   	   
	   LDA = NSAM+2-MOD(NSAM,2)
           JH  = LDA/2	

c$omp      parallel do private(i)
	   DO   I = 1,JH	
	      X(2*I) = -X(2*I)           
 	   ENDDO

c$omp      parallel do private(NB)
           DO NB = 1,LDA
              Y(NB) = X(NB)
	   ENDDO

           IF (NSAM.NE.NSAMOR) THEN
C             SIZE CHANGED, REESTABLISH PLAN
              IF (PLANR .GT. 0) CALL SFFTW_DESTROY_PLAN(PLANR)
            
               CALL SFFTW_PLAN_DFT_C2R_1D(PLANR,NSAM,X,
     &  	                               X,FFTW_ESTIMATE)                
	        
	      
              NSAMOR = NSAM

           ENDIF
	   
	   
C          USE FFTW GURU INTERFACE
           CALL SFFTW_EXECUTE_DFT_C2R(PLANR,X,X)  	   	   

C          CHANGE THE SIGN CONVENTION OF FFTW TO THAT OF SPIDER
C          SPIDER FORMAT IMAGINARY PARTS HAVE OPPOSITE SIGNS 
C          TO THAT OF FFTW  

C          NORMALIZATION NEEDED
           PIX = 1.0 / (NSAM)

c$omp      parallel do private(i)
           DO I=1,NSAM
              X(I) = X(I) * PIX
           ENDDO	   
	   
        ENDIF
	
	
#else	
C       NATIVE SPIDER FFT  (NOT OPTIMAL) -----------------------------
a221 1

a222 1

@


1.20
log
@GPL License fixed
@
text
@d4 2
a5 2
C  FMRS_1.F                           ADDED FFTW AUG 2000 BIMAL RATH
C
d10 1
a10 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d29 1
d54 9
a62 3
        PARAMETER (LBUF=5000)
        DIMENSION  X(*),WORK(LBUF)
	DIMENSION  Y(NSAM)
d66 1
a66 1
C       USING SGI_COMPLIB FOR FFT
d68 1
a68 6
        IF (N+15 .GT. LBUF)  THEN
           INV = 0
C          INSUFFICIENT BUFFER, INCREASE LBUF AND COMPILE SPIDER
           CALL  ERRT(6,'FMRS_1',NE)
           RETURN
        ENDIF
d70 3
a72 2
	LDA =1
	IF (INV.GT.0)  THEN
d76 3
a78 2
	   QT=1.0/FLOAT(N)
	   CALL  SSCAL1D(N,QT,X,LDA)
d82 1
d84 1
a84 1
C       USING FFTW LIBRARY CALLS FOR FFT
d337 1
a340 6
        IF (N.GT.LBUF)  THEN
           INV = 0
C          INSUFFICIENT BUFFER, INCREASE LBUF AND COMPILE SPIDER
           CALL  ERRT(6,'FMRS_1',NE)
           RETURN
        ENDIF
d343 1
d345 1
d352 1
d360 1
d365 2
a366 1
        X(2)=0.0
d373 1
@


1.19
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a6 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
a49 1
C--************************************************************************
@


1.18
log
@reverted back to using GURU interface as per advice of FFTW developers
@
text
@d2 1
d7 1
d9 1
d11 24
d60 1
@


1.17
log
@copied the image to a fixed buffer and didn't use FFTW GURU INTERFACE
@
text
@d205 1
d207 1
a207 2
	REAL, ALLOCATABLE, DIMENSION(:), SAVE :: XY
	REAL, ALLOCATABLE, DIMENSION(:), SAVE :: AB	
d211 1
a211 1
C         MUST INITIALIZE THREADS ONCE
d228 2
a229 2
C      WRITE(NOUT,90) NUMTH
Cl90   FORMAT('USING FFTW WITH THREADS: ',I4)
d232 1
a232 1
C         FORWARD TRANSFORM
a237 16
	   IF (NSAM.NE.NSAMO) THEN
C            SIZE CHANGED MUST REESTABLISH XY
	      IF (ALLOCATED(XY))  DEALLOCATE(XY)
	   
	      ALLOCATE(XY(LSD),STAT=IRTFLG)
	      IF (IRTFLG.NE.0) THEN
	         CALL ERRT(46,'FMRS_1, XY',IER)
	         RETURN
              ENDIF
	   ENDIF
C         COPYING IMAGE TO BUFFER 
c$omp     parallel do private(i)
	   DO   I = 1,LSD
	      XY(I) = X(I)           
 	   ENDDO	

d239 1
a239 1
C            SIZE CHANGED, REESTABLISH PLAN
d242 5
a246 1
 	      CALL SFFTW_PLAN_DFT_R2C_1D(PLAN,NSAM,XY,XY,FFTW_ESTIMATE)             	      
d249 5
d255 2
a256 3
           CALL SFFTW_EXECUTE(PLAN) 
	   
           JH  = LSD/2	
d258 1
a258 2
C         change from spider format to fftw format
c$omp     parallel do private(i)
d260 1
a260 6
	      XY(2*I) = -XY(2*I)           
 	   ENDDO
C         COPY FROM BUFFER    
c$omp     parallel do private(i)
	   DO   I = 1,LSD
	      X(I) = XY(I)           
d263 1
a263 1
           NSAMO = NSAM
d266 1
a266 1
C         REVERSE TRANSFORM
d268 1
a268 1
C         CHANGE SPIDER FFT FORMAT TO FFTW FORMAT 
d271 3
a273 1
           JH  = LSD/2	
d275 1
a275 17
	   IF (NSAM.NE.NSAMOR) THEN
C            SIZE CHANGED MUST REESTABLISH AB
	      IF (ALLOCATED(AB))  DEALLOCATE(AB)
	   
	      ALLOCATE(AB(LSD),STAT=IRTFLG)
	      IF (IRTFLG.NE.0) THEN
	         CALL ERRT(46,'FMRS_1, AB',IER)
                 RETURN
	      ENDIF
	   ENDIF
C         COPY IMAGE TO BUFFER 	
c$omp     parallel do private(i)
	   DO   I = 1,LSD	
	      AB(I) = X(I)           
 	   ENDDO	   

c$omp     parallel do private(i)
d277 1
a277 1
	      AB(2*I) = -AB(2*I)           
d280 4
d289 4
a292 2
              CALL SFFTW_PLAN_DFT_C2R_1D(PLANR,NSAM,AB,
     &  	                               AB,FFTW_ESTIMATE)                
d294 1
d297 3
a299 1
           CALL SFFTW_EXECUTE(PLANR)  	   	   
d301 3
a303 3
C         CHANGE THE SIGN CONVENTION OF FFTW TO THAT OF SPIDER
C         SPIDER FORMAT IMAGINARY PARTS HAVE OPPOSITE SIGNS 
C         TO THAT OF FFTW  
d305 1
a305 1
C         NORMALIZATION NEEDED
d308 1
a308 1
c$omp     parallel do private(i)
d310 1
a310 1
              X(I) = AB(I) * PIX
d313 3
a315 1
        ENDIF	
d317 1
d322 1
a322 1
C         INSUFFICIENT BUFFER, INCREASE LBUF AND COMPILE SPIDER
d327 1
a327 1
C      INV CAN BE +1 (FORWARD FFT) OR -1 (INVERSE FFT)
@


1.16
log
@converted to the same format as fmrs_2.f and fmrs_3.f for using fftw3
@
text
@a204 1

d206 2
a207 1

d211 1
a211 1
C          MUST INITIALIZE THREADS ONCE
d228 2
a229 2
C        WRITE(NOUT,90) NUMTH
Cl90      FORMAT('USING FFTW WITH THREADS: ',I4)
d232 1
a232 1
C          FORWARD TRANSFORM
d238 16
d255 1
a255 1
C             SIZE CHANGED, REESTABLISH PLAN
d258 1
a258 5
 	      CALL SFFTW_PLAN_DFT_R2C_1D(PLAN,NSAM,X,X,FFTW_ESTIMATE)             
	      
C             INPUT ARRAY SIZE
	      
C             OUTPUT ARRAY SIZE	      
d261 2
a262 1
	       
d264 1
a264 3
C          USE FFTW GURU INTERFACE

           CALL SFFTW_EXECUTE_DFT_R2C(PLAN,X,X) 
d266 2
a267 4
	   LDA = NSAM+2-MOD(NSAM,2)
           JH  = LDA/2	

c$omp      parallel do private(i)
d269 6
a274 1
	      X(2*I) = -X(2*I)           
d277 1
a277 1
        NSAMO = NSAM
d280 1
a280 1
C          REVERSE TRANSFORM
d282 1
a282 1
C          CHANGE SPIDER FFT FORMAT TO FFTW FORMAT 
d285 1
a285 3
	   	   
	   LDA = NSAM+2-MOD(NSAM,2)
           JH  = LDA/2	
d287 17
a303 1
c$omp      parallel do private(i)
d305 1
a305 1
	      X(2*I) = -X(2*I)           
a307 4
c$omp      parallel do private(NB)
           DO NB = 1,LDA
              Y(NB) = X(NB)
	   ENDDO
d313 2
a314 4
               CALL SFFTW_PLAN_DFT_C2R_1D(PLANR,NSAM,X,
     &  	                               X,FFTW_ESTIMATE)                
	        
	      
a315 1

d318 1
a318 3
	   
C          USE FFTW GURU INTERFACE
           CALL SFFTW_EXECUTE_DFT_C2R(PLANR,X,X)  	   	   
d320 3
a322 3
C          CHANGE THE SIGN CONVENTION OF FFTW TO THAT OF SPIDER
C          SPIDER FORMAT IMAGINARY PARTS HAVE OPPOSITE SIGNS 
C          TO THAT OF FFTW  
d324 1
a324 1
C          NORMALIZATION NEEDED
d327 1
a327 1
c$omp      parallel do private(i)
d329 1
a329 1
              X(I) = X(I) * PIX
d332 1
a332 3
        ENDIF
	
	
a333 1

d338 1
a338 1
C          INSUFFICIENT BUFFER, INCREASE LBUF AND COMPILE SPIDER
d343 1
a343 1
C       INV CAN BE +1 (FORWARD FFT) OR -1 (INVERSE FFT)
@


1.15
log
@added fftw3
@
text
@d41 1
a41 1
	DIMENSION NARRAY(1), LINEMBED(1), LONEMBED(1)
d138 3
a140 2
           ENDDO 
 
d144 1
d189 2
a190 1
           ENDDO
d242 2
a243 4
              X(NSAM+1) = X(1)
C	      CALL SFFTW_PLAN_DFT_R2C_1D(PLAN,NSAM,X(NSAM+1),Y,FFTW_ESTIMATE)
              
	      NARRAY(1) = NSAM 
d245 1
a245 1
	      LINEMBED(1) = NSAM
a246 1
	      LONEMBED(1) = LSD
a247 3
              CALL SFFTW_PLAN_MANY_DFT_R2C(PLAN,1,NARRAY,1,
     &	        X(NSAM+1),LINEMBED,-1,1,Y,LONEMBED,1,1,FFTW_ESTIMATE)  

d249 1
a249 2
	   
           X(NSAM+1) = X(1)	    
a251 1
           CALL SFFTW_EXECUTE_DFT_R2C(PLAN,X(NSAM+1),Y) 
d253 11
a263 6
c$omp      parallel do private(NA)
           DO NA = 1, LSD
	      X(NA) = Y(NA)
	   ENDDO  
	   
           NSAMO = NSAM
d271 8
d281 1
a281 1
           DO NB = 1,LSD
d289 3
a291 6
C              CALL SFFTW_PLAN_DFT_C2R_1D(PLANR,NSAM,Y,
C     &  	                               X(NSAM+1),FFTW_ESTIMATE)
                 
	      NARRAY(1) = NSAM 
              LINEMBED(1) = NSAM
	      LONEMBED(1) = LSD     
a292 3
              CALL SFFTW_PLAN_MANY_DFT_C2R(PLANR,1,NARRAY,1,Y,
     &         LINEMBED,1,1,X(NSAM+1),LONEMBED,-1,1,FFTW_ESTIMATE)  
     
d299 1
a299 2
           CALL SFFTW_EXECUTE_DFT_C2R(PLANR,Y,X(NSAM+1)) 
    	   	   
a304 2
           X(1) = X(NSAM+1)

d311 2
a312 1
           ENDDO
d314 2
d317 1
@


1.14
log
@for __x86_64__
@
text
@d41 1
d84 1
a84 1
              CALL ERRT(101,'MULTIPLE THREADS FAILED',IER)
d142 1
a142 1

d190 125
d363 1
@


1.13
log
@ia64
@
text
@d71 1
a71 1
#if defined (__osf__) || defined (ia64)
@


1.12
log
@removed thread msg for fftw
@
text
@d71 3
d75 1
@


1.11
log
@cosmetic & formatting
@
text
@d88 2
a89 2
        WRITE(NOUT,90) NUMTH
90      FORMAT('USING FFTW WITH THREADS: ',I4)
@


1.10
log
@ || do wrong
@
text
@d4 1
a4 1
C $$ FMRS_1.FOR                             ADDED FFTW AUG 2000 BIMAL RATH
d15 4
a18 6
C IMAGE_PROCESSING_ROUTINE
C **************************************************************************
C  1D real mixed radix FFT.
C INPUT:  X(N) - real array
C OUTPUT: N even  X(N+2)
C   Order of elements:
d21 1
a21 1
C         N odd  X(N+1)
d24 6
a29 2
C  Here we follow the convention that integer division 
C  is rounded down, e.g. 5/2 =2)
d31 1
a31 3
C INV: +1 forward FFT
C      -1 inverse FFT
C on output INV=0 indicates error
d34 1
a34 3
C
C $$ FMRS_1.FOR
C
a41 1

d45 3
a47 3
        IF(N+15.GT.LBUF)  THEN
           INV=0
C Insufficient buffer, increase LBUF and compile SPIDER
d51 4
a54 4
	CALL  SCFFT1DUI(N,WORK)
	LDA=1
	IF(INV.GT.0)  THEN
	   CALL  SCFFT1DU(INV,N,X,LDA,WORK)
d56 1
a56 1
	   CALL  CSFFT1DU(INV,N,X,LDA,WORK)
a73 1

a84 1

d89 1
a89 1
90      FORMAT('USING FFTW WITH THREADS: ',i4)
a95 1

a102 2
              
              
d104 1
a104 3
     &              FFTW_REAL_TO_COMPLEX, FFTW_ESTIMATE 
     &                    )
                
a105 2
                

a113 2


a114 1

d116 1
a116 4
      

           CALL RFFTW_F77(PLAN,1,X(NSAM+1),-1,1,Y,1,1) 
                
d140 1
a140 1
           LSD = NSAM + 2 - NREM
a147 1
  
a150 1

d157 1
a157 2
#else
  
d159 2
a160 4
     &              FFTW_COMPLEX_TO_REAL, FFTW_ESTIMATE )
           
#endif 
           
a168 1

a169 2


a171 1

a175 1

d179 1
a179 1
c$omp parallel do private(i)
a182 1

a183 2


d187 3
a189 3
        IF(N.GT.LBUF)  THEN
           INV=0
C Insufficient buffer, increase LBUF and compile SPIDER
d193 5
a197 4
C inv can be +1 (forward FFT) or -1 (inverse FFT)
        IF(INV)  2,2,1
1       DO    I=1,N
           WORK(I)=0.0
d200 5
a204 4
        IF(MOD(N,2))  12,12,13
12      DO    I=N+1,3,-2
           X(I)=X((I+1)/2)
           X(I+1)=WORK((I+1)/2)
d206 2
a207 2
        X(2)=0.0
        X(N+2)=0.0
d209 3
a211 3
13      DO    I=N,3,-2
           X(I)=X(I/2+1)
           X(I+1)=WORK(I/2+1)
d215 4
a218 4
C
2       DO    I=2,N/2+1
           WORK(I)=X(2*I)/N
  	   WORK(N-I+2)=-WORK(I)
d220 4
a223 4
        WORK(1)=0.0
C
        DO    I=1,N/2+1
	   X(I)=X(2*I-1)/N
d225 2
a226 2
        DO    I=N,N/2+2,-1
           X(I)=X(N-I+2)
d228 2
a229 2
C
         CALL FFTMCF(X,WORK,N,N,N,INV)
@


1.9
log
@print out # of threads used
@
text
@d207 1
a207 1
c$doacross local(i)          
@


1.8
log
@adapted FFTW format to SPIDER format
@
text
@d93 2
a94 2
C        WRITE(NOUT,90) NUMTH
C90      FORMAT('USING FFTW WITH THREADS: ',i4)
@


1.7
log
@*** empty log message ***
@
text
@d1 1
d24 1
a24 1
C  R(0),0.0, R(1), I(1), R(2), I(2), ....., R(N/2-1), I(N/2-1), R(N/2),I(N/2-1)
d26 3
d93 2
a94 2
        WRITE(NOUT,90) NUMTH
90      FORMAT('USING FFTW WITH THREADS: ',i4)
d120 5
a126 1
            CALL RFFTW_F77_THREADS_ONE(NUMTH,PLAN,X,Y)
d128 2
d132 3
a134 2
           CALL RFFTW_F77_ONE(PLAN,X,Y)
                 
a139 2
C          SPIDER FORMAT IMAGINARY PARTS HAVE OPPOSITE SIGNS 
C          AS THAT OF FFTW 
d149 1
a149 1
                  X(2 * NM) = -Y(NSAM - NM + 2)
d156 1
a156 2
C          CHANGE SPIDER FFT FORMAT TO FFTW FORMAT
C          IMAGINARY PARTS HAVE OPPOSITE SIGNS AS THAT OF FFTW 
d163 1
a163 1
                  Y(NSAM - NM + 2) = -X(2 * NM)
d188 5
d195 2
a196 1
           CALL RFFTW_F77_THREADS_ONE(NUMTH,PLANR,Y,X)
d198 2
a199 1
           CALL RFFTW_F77_ONE(PLANR,Y,X)
d201 1
a201 1

@


1.6
log
@added fftw
@
text
@d64 1
a64 1
#INCLUDE "FFTW.INC"
@


1.5
log
@a
@
text
@d3 1
a3 1
C $$ FMRS_1.FOR
d33 7
a39 3
         SUBROUTINE  FMRS_1(X,N,INV)
         PARAMETER (LBUF=5000)
         DIMENSION  X(*),WORK(LBUF)
d42 4
a45 2
         IF(N+15.GT.LBUF)  THEN
         INV=0
d47 3
a49 3
         CALL  ERRT(6,'FMRS_1',NE)
         RETURN
         ENDIF
d53 1
a53 1
	CALL  SCFFT1DU(INV,N,X,LDA,WORK)
d55 3
a57 3
	CALL  CSFFT1DU(INV,N,X,LDA,WORK)
	QT=1.0/FLOAT(N)
	CALL  SSCAL1D(N,QT,X,LDA)
d59 141
d201 4
a204 2
         IF(N.GT.LBUF)  THEN
         INV=0
d206 3
a208 3
         CALL  ERRT(6,'FMRS_1',NE)
         RETURN
         ENDIF
d210 32
a241 32
         IF(INV)  2,2,1
1        DO    I=1,N
         WORK(I)=0.0
	 ENDDO
         CALL FFTMCF(X,WORK,N,N,N,INV)
         IF(MOD(N,2))  12,12,13
12       DO    I=N+1,3,-2
         X(I)=X((I+1)/2)
         X(I+1)=WORK((I+1)/2)
	 ENDDO
         X(2)=0.0
         X(N+2)=0.0
         RETURN
13       DO    I=N,3,-2
         X(I)=X(I/2+1)
         X(I+1)=WORK(I/2+1)
	 ENDDO
         X(2)=0.0
         RETURN
C
2        DO    I=2,N/2+1
         WORK(I)=X(2*I)/N
  	 WORK(N-I+2)=-WORK(I)
	 ENDDO
         WORK(1)=0.0
C
         DO    I=1,N/2+1
	 X(I)=X(2*I-1)/N
	 ENDDO
         DO    I=N,N/2+2,-1
         X(I)=X(N-I+2)
	 ENDDO
d244 2
d247 3
a249 1
         END
@


1.4
log
@added image_processing_string
@
text
@d36 1
a36 1
CNO_SAVE
@


1.3
log
@*** empty log message ***
@
text
@d13 2
@


1.2
log
@libfft
@
text
@d60 3
a62 2
1        DO  11  I=1,N
11       WORK(I)=0.0
d65 1
a65 1
12       DO  14  I=N+1,3,-2
d67 2
a68 1
14       X(I+1)=WORK((I+1)/2)
d72 1
a72 1
13       DO  15  I=N,3,-2
d74 2
a75 1
15       X(I+1)=WORK(I/2+1)
d79 1
a79 1
2        DO  27  I=2,N/2+1
d81 2
a82 1
27       WORK(N-I+2)=-WORK(I)
d85 6
a90 4
         DO  28  I=1,N/2+1
28       X(I)=X(2*I-1)/N
         DO  29  I=N,N/2+2,-1
29       X(I)=X(N-I+2)
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
d35 2
a36 1
	 IF(N.GT.LBUF)  THEN
d42 16
d87 1
@
