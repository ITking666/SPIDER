head	1.17;
access;
symbols
	healthdept_2018:1.17
	pre_getangas:1.16
	GPL2010:1.16
	pre_GPL2010:1.15
	pre_var_equation:1.15
	pre_fftwrings:1.15
	pre_opfiles:1.15
	src:1.15
	best-code:1.15
	x-named-regs:1.15
	x:1.15
	v13-00:1.15
	pre_GPL:1.13
	prec_CA:1.13
	noindx:1.13
	Bproc:1.13
	oct21:1.10
	last77:1.10;
locks; strict;
comment	@c @;


1.17
date	2018.10.03.14.34.12;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.24.13.26.29;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.17.19.54.16;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.17.17.51.13;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	99.12.23.20.03.01;	author bimal;	state Exp;
branches;
next	1.12;

1.12
date	99.12.07.19.13.58;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.11.10.23.10.04;	author yuchen;	state Exp;
branches;
next	1.10;

1.10
date	98.11.05.19.03.34;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	98.01.22.22.42.44;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	98.01.22.22.30.51;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	98.01.22.22.26.16;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	98.01.22.22.23.02;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	97.10.10.18.58.28;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	96.12.10.16.04.16;	author ramani;	state Exp;
branches;
next	1.3;

1.3
date	96.12.06.22.12.48;	author ramani;	state Exp;
branches;
next	1.2;

1.2
date	96.12.06.19.08.54;	author ramani;	state Exp;
branches;
next	1.1;

1.1
date	96.04.23.15.08.20;	author mladjadj;	state Exp;
branches;
next	;


desc
@automatic particle picking
@


1.17
log
@email_health_dept
@
text
@C	
C ++********************************************************************
C
C PKD
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C PKD                                                                  *
C
C SUPPORT_ROUTINE
C
C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012                                                                      *
C***********************************************************************

        SUBROUTINE PKD(LUN1,NSAM,NROW,NQ,XYZ,itmp,THRSH,L,NNS,NNR)

        DIMENSION Q(NSAM,-NQ:NQ),G(-NQ:NQ,-NQ:NQ)
        DIMENSION XYZ(3,itmp) 
        LOGICAL T
C
        KM(K)=MOD(K+3*NQ,2*NQ+1)-NQ
        KQ(K)=MOD(K+NROW,NROW)+1
	
        EPSN=1.E-4
        DD=NQ*NQ
        L=0
        AG=0.0
        BG=0.0
        DO    J=-NQ,NQ-1
           CALL  REDLIN(LUN1,Q(1,J),NSAM,KQ(J))
        ENDDO
C       GAUSSIAN OF HALF-WIDTH=NQ
        XN=FLOAT((2*NQ+1)**2)
        XX=FLOAT(NQ*NQ)
        DO  I=-NQ,NQ
           DO  J=-NQ,NQ
              G(I,J)=EXP(-FLOAT(I*I+J*J)/XX)
              AG=AG+G(I,J)
              BG=BG+G(I,J)*G(I,J)
           ENDDO   
        ENDDO
        AVGG=AG/XN
        STDG=SQRT(BG-AG*AG/XN)
        DO  I=-NQ,NQ
           DO  J=-NQ,NQ
              G(I,J)=(G(I,J)-AVGG)/STDG
           ENDDO
        ENDDO
C

        KNSAM=NNS/2+1
        KNROW=NNR/2+1
	
C
        DO    J=1,NROW
           CALL  REDLIN(LUN1,Q(1,KM(J+NQ)),NSAM,KQ(J+NQ-1))
           DO    I=NQ+1,NSAM-NQ
              T=.TRUE.
              AT=0.0
              BT=0.0
              CT=0.0
              Z=Q(I,KM(J))    
              DO  JT=-NQ,NQ
                 JTM=KM(JT+J)
                 DO  IT=-NQ,NQ
                    IF(IT.EQ.0.AND.JT.EQ.0)GO TO 8
                    IF(Z.LT.Q(I+IT,JTM))GOTO 7
8                   CONTINUE
                 ENDDO
              ENDDO         

	      
              DO  JJ=-NQ,NQ
                 JJM=KM(JJ+J)
                 DO  II=-NQ,NQ
                    AT=AT+Q(I+II,JJM)
                    BT=BT+Q(I+II,JJM)*Q(I+II,JJM)
                    CT=CT+G(II,JJ)*Q(I+II,JJM)
                 ENDDO
              ENDDO
              RT=(BT-AT*AT/XN)
              IF(RT.LE.EPSN) THEN
                 COEF=0.0
                 GOTO 7
              ELSE
                 COEF=CT/SQRT(RT)
                 IF(COEF.GE.THRSH)THEN
                    T=.TRUE.
                 ELSE
                    GOTO 7
                 ENDIF
              ENDIF
	      
              IF (T)THEN
                 IF((I-KNSAM).LE.0.OR.(I+KNSAM).GT.NSAM) GOTO 7
                 IF((J-KNROW).LE.0.OR.(J+KNROW).GT.NROW) GOTO 7
                 XX=FLOAT(I)
                 YY=FLOAT(J)
 
                 IF(L.GT.0)  THEN
C     Check whether there were any other peaks in the vicinity
                    DO  LT=1,L
                       IF(((XYZ(1,LT)-XX)**2+
     &                    (XYZ(2,LT)-YY)**2).LE.DD) THEN
                          IF(XYZ(3,LT).LT.Z)  THEN
                             XYZ(1,LT)=XX
                             XYZ(2,LT)=YY
                             XYZ(3,LT)=Z
                          ENDIF
                          GOTO 7
                       ENDIF
                    ENDDO
                 ENDIF
                 L=L+1
                 XYZ(1,L)=XX
                 XYZ(2,L)=YY
                 XYZ(3,L)=Z

              ENDIF
7             CONTINUE
	
           ENDDO

        ENDDO

        END
			
@


1.16
log
@GPL_2010
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.15
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.14
log
@HRI GPL License used
@
text
@a6 2
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      **
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
@


1.13
log
@adapted for dynamical memory allocation
@
text
@d7 1
d9 24
@


1.12
log
@header
@
text
@d1 1
a1 1

d3 3
a5 3
C                                                                      *
C                                                                      *
C                                                                      *
d7 6
a12 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
d15 6
a20 8
C                                                                      *
C                                                                      *
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C        0         2         3         4         5         6         7 *
C23456789012345678901234567890123456789012345678901234567890123456789012
d23 108
a130 1
  	SUBROUTINE PKD(LUN1,NSAM,NROW,NQ,G,Q,XYZ,THRSH,L,NNS,NNR)
d132 1
a132 96
	DIMENSION Q(NSAM,-NQ:NQ),G(-NQ:NQ,-NQ:NQ)
	DIMENSION XYZ(3,*)
	LOGICAL T
C
	KM(K)=MOD(K+3*NQ,2*NQ+1)-NQ
	KQ(K)=MOD(K+NROW,NROW)+1

	EPSN=1.E-4
	DD=NQ*NQ
	L=0
	AG=0.0
	BG=0.0
	DO    J=-NQ,NQ-1
 	 CALL  REDLIN(LUN1,Q(1,J),NSAM,KQ(J))
	ENDDO
C GAUSSIAN OF HALF-WIDTH=NQ
 	XN=FLOAT((2*NQ+1)**2)
	XX=FLOAT(NQ*NQ)
	DO  I=-NQ,NQ
	DO  J=-NQ,NQ
	G(I,J)=EXP(-FLOAT(I*I+J*J)/XX)
	AG=AG+G(I,J)
	BG=BG+G(I,J)*G(I,J)
	ENDDO	
	ENDDO
	AVGG=AG/XN
	STDG=SQRT(BG-AG*AG/XN)
	DO  I=-NQ,NQ
	DO  J=-NQ,NQ
	G(I,J)=(G(I,J)-AVGG)/STDG
	ENDDO
	ENDDO
C
	KNSAM=NNS/2+1
	KNROW=NNR/2+1
C
	DO    J=1,NROW
	CALL  REDLIN(LUN1,Q(1,KM(J+NQ)),NSAM,KQ(J+NQ-1))
	DO  7  I=NQ+1,NSAM-NQ
	T=.TRUE.
  	AT=0.0
        BT=0.0
        CT=0.0
	Z=Q(I,KM(J)) 	
	DO 8 JT=-NQ,NQ
        JTM=KM(JT+J)
	DO 8 IT=-NQ,NQ
	IF(IT.EQ.0.AND.JT.EQ.0)GO TO 8
	IF(Z.LT.Q(I+IT,JTM))GOTO 7
8	CONTINUE
	DO  JJ=-NQ,NQ
	JJM=KM(JJ+J)
	DO  II=-NQ,NQ
	AT=AT+Q(I+II,JJM)
	BT=BT+Q(I+II,JJM)*Q(I+II,JJM)
	CT=CT+G(II,JJ)*Q(I+II,JJM)
	ENDDO
	ENDDO
	RT=(BT-AT*AT/XN)
	IF(RT.LE.EPSN) THEN
	COEF=0.0
	GOTO 7
	ELSE
	COEF=CT/SQRT(RT)
	IF(COEF.GE.THRSH)THEN
	     T=.TRUE.
	ELSE
	     GOTO 7
	ENDIF
	ENDIF
	IF (T)THEN
	IF((I-KNSAM).LE.0.OR.(I+KNSAM).GT.NSAM) GOTO 7
	IF((J-KNROW).LE.0.OR.(J+KNROW).GT.NROW) GOTO 7
	XX=FLOAT(I)
	YY=FLOAT(J)
	IF(L.GT.0)  THEN
C Check whether there were any other peaks in the vicinity
	DO  LT=1,L
	IF(((XYZ(1,LT)-XX)**2+(XYZ(2,LT)-YY)**2).LE.DD) THEN
	IF(XYZ(3,LT).LT.Z)  THEN
	XYZ(1,LT)=XX
	XYZ(2,LT)=YY
	XYZ(3,LT)=Z
	ENDIF
	GOTO 7
	ENDIF
	ENDDO
	ENDIF
	L=L+1
	XYZ(1,L)=XX
	XYZ(2,L)=YY
	XYZ(3,L)=Z
	ENDIF
7	CONTINUE
	ENDDO
	END
d134 2
@


1.11
log
@a
@
text
@d1 24
d26 1
@


1.10
log
@*** empty log message ***
@
text
@d8 1
a8 1
CNO_SAVE
@


1.9
log
@fixed
@
text
@d78 1
a78 1
C Check wheteher there were any other peaks in the vicinity
@


1.8
log
@*** empty log message ***
@
text
@d77 1
a77 1
	IF(L.GT.1)  THEN
d79 1
a79 1
	DO  LT=1,L-1
@


1.7
log
@nosave
@
text
@d80 1
a80 1
	IF((XYZ(1,LT)-XX)**2+(XYZ(2,LT)-YY)**2).LE.DD) THEN
@


1.6
log
@exclusio of close peaks added
@
text
@d8 1
a8 1
C
d80 1
a80 1
	IF((XYZ(1,LT)-XX)**2+XYZ(2,LT)-YY)**2).LE.DD) THEN
@


1.5
log
@*** empty log message ***
@
text
@a1 1
        CHARACTER*1 NULL
a8 2
	NULL=CHAR(0)
C	THRSH=0.65
d10 1
d73 17
a89 6
C	XX=FLOAT(I)
C	YY=FLOAT(J)
	IF((I-KNSAM).LE.0.OR.(I+KNSAM).GT.NSAM)
     &   GOTO 7
	IF((J-KNROW).LE.0.OR.(J+KNROW).GT.NROW)
     &   GOTO 7
d91 2
a92 2
	XYZ(1,L)=FLOAT(I)
	XYZ(2,L)=FLOAT(J)
a93 2
C	WRITE(6,295)L,3,XX,YY,Z
C295	FORMAT(1X,I4,X,I1,3G12.5)
@


1.4
log
@*** empty log message ***
@
text
@d16 3
a18 2
	DO  1  J=-NQ,NQ-1
1	CALL  REDLIN(LUN1,Q(1,J),NSAM,KQ(J))
d22 2
a23 2
	DO 11 I=-NQ,NQ
	DO 11 J=-NQ,NQ
d27 2
a28 1
11	CONTINUE
d31 2
a32 2
	DO 93 I=-NQ,NQ
	DO 93 J=-NQ,NQ
d34 2
a35 1
93	CONTINUE
d40 1
a40 1
	DO  5  J=1,NROW
d54 1
a54 1
	DO 109 JJ=-NQ,NQ
d56 1
a56 1
	DO 109 II=-NQ,NQ
d60 2
a61 1
109	CONTINUE
d89 1
a89 1
5	CONTINUE
@


1.3
log
@error fixed
@
text
@d34 2
a35 2
	ZNSAM=NNS/2+1
	ZNROW=NNR/2+1
d73 1
a73 1
	IF((i-kNSAM).LE.0.OR.(i+kNSAM).GT.NSAM)
d75 1
a75 1
	IF((j-kNROW).LE.0.OR.(j+kNROW).GT.NROW)
@


1.2
log
@saves the total number of peaks in doc file and also excludes peaksnear the edges.
@
text
@d73 1
a73 2
	XYZ(1,L)=FLOAT(I)
	IF((XYZ(1,L)-ZNSAM).LE.0.OR.(XYZ(1,L)+ZNSAM).GT.NSAM)
d75 1
a75 2
	XYZ(2,L)=FLOAT(J)
	IF((XYZ(2,L)-ZNROW).LE.0.OR.(XYZ(2,L)+ZNROW).GT.NROW)
d78 2
@


1.1
log
@automatic particle picking
@
text
@d1 1
a1 3
	SUBROUTINE PKD(LUN1,NSAM,NROW,NQ,G,Q,THRSH)
        COMMON /F_SPEC/ FILEP,NLET,DOCUM,NLETDD
        CHARACTER *80 FILEP,DOCUM
a2 1
        DATA NDOC/55/
d4 1
d34 2
d71 8
d80 3
a82 4
	XX=FLOAT(I)
	YY=FLOAT(J)
	WRITE(NDOC,295)L,3,XX,YY,Z
295	FORMAT(1X,I4,X,I1,3G12.5)
@
