head	1.18;
access;
symbols
	pre_getangas:1.18
	GPL2010:1.18
	pre_GPL2010:1.17
	pre_var_equation:1.17
	pre_fftwrings:1.17
	pre_opfiles:1.17
	src:1.17
	best-code:1.17
	x-named-regs:1.17
	x:1.17
	v13-00:1.17
	pre_GPL:1.15
	prec_CA:1.15
	noindx:1.15
	Bproc:1.12
	oct21:1.8
	last77:1.8;
locks; strict;
comment	@c @;


1.18
date	2010.06.24.13.26.09;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.17.20.49.52;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.17.18.40.17;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.11.14.08.41;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.24.13.32.16;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2001.03.15.14.49.09;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.03.24.19.09.39;	author bimal;	state Exp;
branches;
next	1.11;

1.11
date	2000.03.24.15.08.12;	author bimal;	state Exp;
branches;
next	1.10;

1.10
date	99.12.27.16.12.01;	author bimal;	state Exp;
branches;
next	1.9;

1.9
date	99.12.07.15.52.38;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.03.25.20.12.42;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	98.04.06.19.19.49;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	98.03.05.14.09.40;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	98.03.05.14.02.06;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	97.10.10.17.47.25;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.01.16.16.03.28;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.07.04;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.04;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.18
log
@GPL_2010
@
text
@C ++********************************************************************
C                                                                      *
C   MEDIAN           K WAS WRONG MAR 01 ARDEAN LEITH                                                        *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  MEDIAN(LUN1,LUN2,NSAM,NROW,NSLICE)                                                                    *
C                                                                      *
C  PURPOSE: MEDIAN FILTRATION USING BOX OR CROSS PATTERN KERNAL                                                           *
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C IMAGE_PROCESSING_ROUTINE                                             *
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE MEDIAN(LUN1,LUN2,NSAM,NROW,NSLICE)

        INCLUDE 'CMBLOCK.INC'
 
        REAL, ALLOCATABLE, DIMENSION(:,:,:) :: AIMG
        CHARACTER(LEN=1)                     :: MODE,NULL

        NULL = CHAR(0)

        IF (NSLICE .LE. 1) NSLICE=1

        LENGTH = 3
10      CALL RDPRI1S(LENGTH,NOT_USED,'LENGTH OF FILTER',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (LENGTH .LE. 1) THEN
           CALL ERRT(102,'LENGTH MUST BE GREATER THAN',2) 
           GOTO 10
        ELSEIF (MOD(LENGTH,2) .EQ. 0) THEN
           LENGTH = LENGTH + 1
           WRITE(NOUT,90) LENGTH 
90         FORMAT(' EFFECTIVE LENGTH OF FILTER:',I5)
        ENDIF

        CALL RDPRMC(MODE,NA,.TRUE.,'BOX OR CROSS (B/C)?',NULL,IRTFLG)
        IF (IRTFLG .EQ. -1) GOTO 10
        IF (IRTFLG .NE. 0) RETURN

        IF (MODE .EQ. 'B') THEN
           K = LENGTH * LENGTH
           IF (NSLICE .GT. 1) K = K * LENGTH
        ELSE
           K = 2 * LENGTH - 1
           IF (NSLICE .GT. 1) K = K + LENGTH - 1
        ENDIF
        
        ALLOCATE (AIMG(NSAM,NROW,NSLICE), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'CE MED, AIMG',IER)
           RETURN
        ENDIF

        CALL READV(LUN1,AIMG,NSAM,NROW,NSAM,NROW,NSLICE)

        IF (NSLICE .EQ. 1)  THEN
           CALL MD2(AIMG,NSAM,NROW,LENGTH,K,MODE,LUN2)
        ELSE
           CALL MD3(AIMG,NSAM,NROW,NSLICE,LENGTH,K,MODE,LUN2)
        ENDIF

        DEALLOCATE(AIMG)
       
        END

@


1.17
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.16
log
@HRI GPL License used
@
text
@a5 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.15
log
@nloop,iloop_removed
@
text
@d7 24
@


1.14
log
@extra buggy length calculation removed
@
text
@d37 1
a37 1
10      CALL RDPRI1S(LENGTH,NLOOP,ILOOP,'LENGTH OF FILTER',IRTFLG)
@


1.13
log
@k calculation was buggy (too short)
@
text
@a68 1
        LENGTH = LENGTH / 2 + 1
@


1.12
log
@*** empty log message ***
@
text
@d3 1
a4 1
C                                                                      *
d14 1
a14 1
C                                                                      *
d16 1
a16 1
C  PURPOSE:                                                            *
a21 1
C        0         2         3         4         5         6         7 *
a27 2


d30 1
d32 1
a32 2
        CHARACTER*1  MODE,NULL
        NULL=CHAR(0)
d34 1
a34 1
        IF(NSLICE.LE.1) NSLICE=1
d36 20
a55 7
        CALL RDPRMI(LENGTH,IDUM,NLOOP,ILOOP,'LENGTH OF THE FILTER')
        LENGTH=LENGTH/2+1
        NA=1
        CALL RDPRMC(MODE,NA,.TRUE.,'Box or Cross (B/C)',NULL,IRT)
        IF(MODE.EQ.'B') THEN
           K=LENGTH*LENGTH
        IF(NSLICE.GT.1)  K=K*LENGTH
d57 2
a58 2
           K=2*LENGTH-1
        IF(NSLICE.GT.1)  K=K+LENGTH-1
a60 1
	
d62 1
a62 1
        IF (IRTFLG.NE.0) THEN 
d69 3
a71 4

        IF(NSLICE.EQ.1)  THEN
           CALL  MD2(AIMG,
     $      NSAM,NROW,LENGTH,K,MODE,LUN2)
d73 1
a73 2
           CALL  MD3(AIMG,
     $     NSAM,NROW,NSLICE,LENGTH,K,MODE,LUN2)
d76 1
a76 1
        DEALLOCATE (AIMG)
@


1.11
log
@used readv
@
text
@d52 1
a52 1
        ALLOCATE (AIMG(NROW,NSAM,NSLICE), STAT=IRTFLG)
@


1.10
log
@adapted for dynamical memory allocation
@
text
@d32 1
a32 1
         REAL, ALLOCATABLE, DIMENSION(:) :: AIMG
a33 1

d36 1
a36 1
C
d38 1
a38 1
C
d52 1
a52 1
        ALLOCATE (AIMG(NROW*NSAM*NSLICE), STAT=IRTFLG)
d58 1
d60 1
a60 5
        DO  I = 1,NROW*NSLICE
           INDEX=(I-1)*NSAM+1
           CALL REDLIN(LUN1,AIMG(INDEX),NSAM,I)
        ENDDO
C
d62 1
a62 1
           CALL  MD2(AIMG(1),
d65 1
a65 1
           CALL  MD3(AIMG(1),
d68 1
a68 1
C
d72 1
@


1.9
log
@header
@
text
@a0 1

d20 2
d26 3
a28 1
	SUBROUTINE MEDIAN(LUN1,LUN2,NSAM,NROW,NSLICE,MAXDIM)
a29 2
	INCLUDE 'CMBLOCK.INC'
	COMMON BUF(1)
d31 6
a36 7
        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: Q

        LOGICAL      RUNTIME
 	CHARACTER*1  MODE,NULL
	NULL=CHAR(0)
d38 1
a38 1
	IF(NSLICE.LE.1) NSLICE=1
d40 18
a57 18
	CALL RDPRMI(LENGTH,IDUM,NLOOP,ILOOP,'LENGTH OF THE FILTER')
	LENGTH=LENGTH/2+1
	NA=1
	CALL RDPRMC(MODE,NA,.TRUE.,'Box or Cross (B/C)',NULL,IRT)
	IF(MODE.EQ.'B') THEN
	K=LENGTH*LENGTH
	IF(NSLICE.GT.1)  K=K*LENGTH
	ELSE
	K=2*LENGTH-1
	IF(NSLICE.GT.1)  K=K+LENGTH-1
	ENDIF
        NPIX=NSAM*NROW*NSLICE
        MEMWANT=NPIX+NSAM+K
        CALL CHKMEM(MEMWANT,BUF,MAXDIM,RUNTIME,IPQ,IRTFLG)
          IF (IRTFLG.NE.0)  THEN
	  CALL  ERRT(6,'CEMED ',NE)
	  RETURN
	  ENDIF
a58 1
         Q = >IPQ
a59 1
C
d61 3
a63 3
        INDEX=(I-1)*NSAM+1
          CALL REDLIN(LUN1,Q(INDEX),NSAM,I)
	ENDDO
d65 7
a71 8
	IF(NSLICE.EQ.1)  THEN
	CALL  MD2(Q(1),Q(NPIX+1),NSAM,NROW,LENGTH,Q(NPIX+1+NSAM),
     $		K,MODE,LUN2)
	ELSE
	CALL  MD3(Q(1),Q(NPIX+1),
     $		NSAM,NROW,NSLICE,LENGTH,Q(NPIX+1+NSAM),
     $		K,MODE,LUN2)
	ENDIF
d73 2
a74 1
        IF(RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'CE MED',IRTFLG)
@


1.8
log
@*** empty log message ***
@
text
@d1 24
d26 1
a26 1
C
d29 1
a29 1
#ifdef SP_F90
d33 1
a33 4
#else
        DIMENSION    Q(1)
        POINTER      (IPQ,Q) 
#endif
d58 1
a58 1
#ifdef SP_F90
d60 1
a60 1
#endif
@


1.7
log
@f90 alloc
@
text
@a14 1
CNO_SAVE
d47 1
a47 1
	CALL  MD2(Q,Q(NPIX+1),NSAM,NROW,LENGTH,Q(NPIX+1+NSAM),
d50 1
a50 1
	CALL  MD3(Q,Q(NPIX+1),
@


1.6
log
@alocate mem
@
text
@d5 5
d12 1
d38 3
@


1.5
log
@*** empty log message ***
@
text
@d5 4
a8 1
	CHARACTER*1  MODE,NULL
d14 1
a14 1
	CALL RDPRMI(LENGTH,IDUM,NLOOP,ILOOP,'LENGTH OF THE FILTER$')
d17 1
a17 1
	CALL RDPRMC(MODE,NA,.TRUE.,'Box or Cross (B/C)$',NULL,IRT)
d26 6
a31 4
	IF(NPIX+NSAM.GT.MAXDIM)  THEN
	CALL  ERRT(6,'CEMED ',NE)
	RETURN
	ENDIF
d35 1
a35 1
          CALL REDLIN(LUN1,BUF(INDEX),NSAM,I)
d39 1
a39 1
	CALL  MD2(BUF,BUF(NPIX+1),NSAM,NROW,LENGTH,BUF(NPIX+1+NSAM),
d42 2
a43 2
	CALL  MD3(BUF,BUF(NPIX+1),
     $		NSAM,NROW,NSLICE,LENGTH,BUF(NPIX+1+NSAM),
d47 1
@


1.4
log
@*** empty log message ***
@
text
@a2 1
#ifdef SP_UNIX
a3 3
#else
	INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
@


1.3
log
@nosave
@
text
@d32 1
a32 1
        DO 100 I = 1,NROW*NSLICE
d35 1
a35 1
100     CONTINUE
@


1.2
log
@cpp_lines_added
@
text
@d10 1
@


1.1
log
@Initial revision
@
text
@d3 3
d7 1
@
