head	1.19;
access;
symbols
	healthdept_2018:1.19
	pre_getangas:1.16
	GPL2010:1.16
	pre_GPL2010:1.15
	pre_var_equation:1.15
	pre_fftwrings:1.14
	pre_opfiles:1.13
	src:1.13
	best-code:1.13
	x-named-regs:1.13
	x:1.13
	v13-00:1.13
	pre_GPL:1.11
	prec_CA:1.9
	noindx:1.9
	Bproc:1.7
	oct21:1.6
	last77:1.4;
locks; strict;
comment	@c @;


1.19
date	2018.10.03.14.34.02;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2013.05.09.18.21.17;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2013.05.06.18.36.43;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.24.13.25.14;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2008.12.05.13.28.53;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2007.12.20.18.34.46;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.18.18.54.23;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.18.14.54.06;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.10.18.43.47;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.16.18.15.59;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.09.20.45.06;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.24.19.18.31;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.12.03.20.26.49;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.08.09.20.07.16;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	99.08.09.19.08.14;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	97.10.17.20.50.06;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	97.09.30.19.56.37;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.08.01.18.52.36;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.47.36;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.19
log
@email_health_dept
@
text
@C **********************************************************************
C
C  CHAVA.F                                                    04.11.81          
C                                                             01.12.86          
C               COSMETIC OUTPUT CHANGES            DEC 08 ARDEAN LEITH                                                *
C               MDIM_8                             MAY 13 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2013  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  CHAVA(NKLA, MDIM_8, JFIN, D, PK, VAL, LA, LB, NT, NO, LUNK, MODE)
C*  
C    PURPOSE:                                                                          
C*      HIERARCHICAL ASCENDENT CLASSIFICATION USING THE VARIANCE AS            
C*      AN AGGREGATION CRITERION.  THE DISTANCES ARE IN THE MONO-              
C*      INDEXED TABLE D(MCAR).                                                 
C*                                                                            
C*   INPUT:                                                                    
C*      NKLA            = NUMBER OF ELEMENTS TO BE CLASSIFIED                  
C*      MDIM_8          = NKLA * (NKLA-1) /2                             
C*      JFIN            = 2*NKLA - 1                                          
C*      D(MDIM_8)       = TABLE OF DISTANCES DESTROYED AFTER EXECUTION         
C*      PK(1,...,NKLA)  = WEIGHT OF THE NKLA ELEMENTS                          
C*                                                                             
C*   OUTPUT:                                                                   
C*      PK(NKLA+1,...)      = WEIGHT OF THE NODES OF THE HIERARCHY             
C*      LA(NKLA,LB(NKLA)    = SENIORS AND JUNIORS OF THE                       
C*                            CLASSIFICATION                                   
C*      VAL(NKLA+1,...)     = NODE INDICES                                     
C*      NT(NKLA+1,...)      = SIZE OF CLASSES                                  
C*      NO(NKLA+1,...)      = WORKING ARRAY                                    
C*                                                                             
C*      INTERNAL FUNCTION ... MONO                                             
C*                                                                             
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

       SUBROUTINE CHAVA(NKLA, MDIM_8, JFIN,  D, PK,                         
     &                  VAL, LA, LB, NT, NO, LUNK, MODE)

       INCLUDE 'CMBLOCK.INC'

       INTEGER            :: NKLA,JFIN,LUNK,MODE

       INTEGER*8          :: MDIM_8
       REAL               :: D(MDIM_8), PK(JFIN),VAL(JFIN)                 
       INTEGER            :: LA(NKLA), LB(NKLA),NT(JFIN),NO(JFIN)                                

       CHARACTER (LEN= 1) :: IAST,KLIGN(110)
       INTEGER            :: K1,K2,L,J,JDEB,II1,II2,II,I1,I3,I2

       REAL               :: VMAX,DINF

       INTEGER            :: mono

       DATA  IAST /'*'/

C      MONO-INDEXING OF THE TABLE OF DISTANCES                             
       MONO(K1,K2)= MIN0(K1,K2) + ((MAX0(K1,K2)-1)*(MAX0(K1,K2)-2)/2)            

C      GENERATION OF IDENTIFIERS, NUMBERS IN A4                            

        IF     (MODE == 1) THEN
           WRITE(NDAT,*) ' CLUSTERING CRITERION:  SINGLE LINKAGE'
        ELSEIF (MODE == 2) THEN
           WRITE(NDAT,*) ' CLUSTERING CRITERION:  COMPLETE LINKAGE' 
        ELSEIF (MODE == 3) THEN
           WRITE(NDAT,*) ' CLUSTERING CRITERION:  AVERAGE LINKAGE' 
        ELSEIF (MODE == 4) THEN
           WRITE(NDAT,*) ' CLUSTERING CRITERION:  CENTROID METHOD' 
        ELSEIF (MODE == 5) THEN
           WRITE(NDAT,*) ' CLUSTERING CRITERION:  WARDS METHOD' 
        ENDIF

C       ARRAY OPERATION
        IF (MODE <= 3)  D = SQRT(D)

        WRITE (NDAT,650)                                                           
  650   FORMAT (/,'  DESCRIPTION OF THE HIERARCHY NODES',//,                  
     &            '   NO. SENIOR JUNIOR NO.  WEIGHT  INDEX',/)

        DO L=1,100                                                          
            KLIGN(L) = IAST 
        ENDDO 
                                                          
        DO J = 1,JFIN                                                       
           NO(J)  = J                                                                 
           VAL(J) = 0.0                                                               
           NT(J)  = 1                                                                 
        ENDDO

C       CALCULATIONS AND LISTINGS                                           
C       DETERMINE PAIRWISE DISTANCES FOR ALL PAIRS

        JDEB  = NKLA + 1                                                          
        VMAX  = 0.0 
                                                              
        REWIND(LUNK)          ! REWIND CLUSTER FILE   
                                                         
        DO J=JDEB,JFIN                                                   
           DINF  = D(1)                                                              
           II1   = 1                                                                 
           II2   = 2                                                                 
           II    = 2*NKLA  - J + 1 
                                                  
           DO I1 = 2,II                                                       
              I3    = I1 - 1                                                            
              DO I2 = 1,I3                                                       
                 I1I2  = MONO (I1, I2)                                                     
                 IF (D(I1I2) .GE. DINF) CYCLE                               
                 DINF  = D(I1I2)                                                           
                 II1   = I1                                                                
                 II2   = I2                                                                
              ENDDO                                                                
           ENDDO  
                                                              
           IR      = J - JDEB + 1                                                      
           LA(IR)  = MIN0 (NO(II1), NO(II2))                                           
           LB(IR)  = MAX0 (NO(II1), NO(II2))                                           
           VAL(J)  = DINF                                                              
           LAI     = LA(IR)                                                            
           LBI     = LB(IR)                                                            
           NT(J)   = NT(LAI) + NT(LBI)                                                 
           VA      = VAL(LAI)                                                          
           VB      = VAL(LBI)                        
           P1      = PK(LAI)
           P2      = PK(LBI)
           PK(J)   = P1 + P2
           NO(II1) = J 
                                                               
           DO III = 1,II                                                      
              IF (III==II1 .OR. III == II2) CYCLE                               
              M1    = MONO (III, II1)                                                   
              M2    = MONO (III, II2)                                                   
              JS    = NO(III)                                                           
              VJS   = PK(JS)

              IF (MODE == 1) THEN
                    D(M1) = AMIN1(D(M1),D(M2))
              ELSEIF (MODE == 2) THEN
                    D(M1) = AMAX1(D(M1),D(M2))
              ELSEIF (MODE == 3) THEN
                    D(M1) =(P1*D(M1)+P2*D(M2))/(P1+P2)
              ELSEIF (MODE == 4) THEN
                    D(M1) = ((P1*D(M1)+P2*D(M2))/(P1+P2))-
     &                      (P1*P2*DINF/((P1+P2)**2))
              ELSEIF (MODE == 5) THEN
                    D(M1) = ((VA+VJS)*D(M1)+(VB+VJS)*D(M2)-
     &                   VJS*DINF)/(VA+VB+VJS)
              ENDIF 
           ENDDO 
                                        
           IF (II2 .NE. II) THEN                               
               NO(II2)= NO(II)                                                           
               IT    = II - 1 
                                                           
               DO III = 1,IT                                                      
                  IF (III == II2) CYCLE                               
                  M1    = MONO (III, II2)                                                   
                  M2    = MONO (III, II)                                                    
                  D(M1) = D(M2)                                                             
               ENDDO 
            ENDIF                                                  
            IF (VAL(J) > VMAX) VMAX = VAL(J)                            

C           OVERWRITE CLUSTER FILE ON: LUNK                                                       
            WRITE(LUNK) J,LA(IR),LB(IR),NT(J),PK(J),VAL(J)                         
        ENDDO
                                                                
      REWIND(LUNK)             ! REWIND CLUSTER FILE                                                          
      NKLA1 = NKLA - 1  
   
C     WRITES DESCRIPTION OF HIERARCHY NODES
                                                     
      DO  JJ = 1,NKLA1                                                    
         J    = JJ + NKLA                                                          
         IR   = J - JDEB + 1

C        READ FROM CLUSTER FILE ON: LUNK                                                       
         READ(LUNK) J,LA(IR),LB(IR),NT(J),PK(J),VAL(J)                         
         LIG   = 90.0 * VAL(J) / VMAX + 1.0                                            
         IF (LIG > 75) LIG = 75 
                                
         WRITE(NDAT,660) J,LA(IR),LB(IR),NT(J),PK(J),VAL(J),                       
     &                              (KLIGN(L),L=1,LIG)                          
  660    FORMAT(1X,I5,3I5,2(1PG10.2,1X),90A1)
      ENDDO

      WRITE(NDAT,*) ' '

      END                                                                    

@


1.18
log
@*** empty log message ***
@
text
@d14 1
a14 1
C=* Email: spider@@wadsworth.org                                        *
@


1.17
log
@>2gb alloc
@
text
@d62 2
d65 2
a66 2
       DIMENSION D(MDIM_8), PK(JFIN),VAL(JFIN),LA(NKLA),                 
     &           LB(NKLA),NT(JFIN),NO(JFIN)                                
d69 5
d123 2
a124 1
           II    = 2*NKLA  - J + 1                                                   
d134 3
a136 2
           ENDDO                                                                
           IR     = J - JDEB + 1                                                      
d151 1
a151 1
              IF (III==II1 .OR. III==II2) CYCLE                               
d160 1
a160 1
                     D(M1) = AMAX1(D(M1),D(M2))
d200 1
a200 1
         LIG   = 90.0*VAL(J)/VMAX + 1.0                                            
d207 1
@


1.16
log
@GPL_2010
@
text
@d5 2
a6 1
C               COSMETIC OUTPUT CHANGES          DEC 2008 ARDEAN LEITH                                                *
d12 1
a12 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d30 1
a30 1
C  CHAVA(NKLA, MCARD, JFIN,  D, PK, VAL, LA, LB, NT, NO, LUNK, MODE)
d39 1
a39 1
C*      MCARD           = NKLA * (NKLA-1) /2                             
d41 1
a41 1
C*      D(MCARD)        = TABLE OF DISTANCES DESTROYED AFTER EXECUTION         
d57 1
a57 1
       SUBROUTINE CHAVA(NKLA, MCARD, JFIN,  D, PK,                         
d62 3
a64 2
      DIMENSION D(MCARD), PK(JFIN),VAL(JFIN),LA(NKLA),                 
     &          LB(NKLA),NT(JFIN),NO(JFIN)                                
d66 1
a66 2
      CHARACTER*8  CTM
      CHARACTER*1  IAST,KLIGN(110)
d68 1
a68 1
      DATA  IAST /'*'/
d75 10
a84 10
       IF (MODE .EQ. 1) THEN
  	   WRITE(NDAT,*) ' CLUSTERING CRITERION:  SINGLE LINKAGE'
        ELSEIF (MODE.EQ. 2) THEN
  	   WRITE(NDAT,*) ' CLUSTERING CRITERION:  COMPLETE LINKAGE' 
        ELSEIF (MODE.EQ. 3) THEN
  	   WRITE(NDAT,*) ' CLUSTERING CRITERION:  AVERAGE LINKAGE' 
        ELSEIF (MODE.EQ. 4) THEN
  	   WRITE(NDAT,*) ' CLUSTERING CRITERION:  CENTROID METHOD' 
        ELSEIF (MODE.EQ. 5) THEN
  	   WRITE(NDAT,*) ' CLUSTERING CRITERION:  WARDS METHOD' 
d88 1
a88 1
	IF (MODE.LE.3)  D = SQRT(D)
d96 1
a96 1
	ENDDO 
d110 2
a111 1
        REWIND(LUNK)          ! REWIND CLUSTER FILE                                                            
d142 1
a142 1
              IF (III.EQ.II1 .OR. III.EQ.II2) CYCLE                               
d148 1
a148 1
              IF (MODE.EQ. 1) THEN
d150 1
a150 1
              ELSEIF (MODE.EQ. 2) THEN
d152 1
a152 1
              ELSEIF (MODE.EQ. 3) THEN
d154 1
a154 1
              ELSEIF (MODE.EQ. 4) THEN
d157 1
a157 1
              ELSEIF (MODE.EQ. 5) THEN
d165 2
a166 1
               IT    = II - 1                                                            
d168 1
a168 1
                  IF (III .EQ. II2) CYCLE                               
d174 1
a174 1
            IF (VAL(J) .GT. VMAX) VMAX = VAL(J)                            
d178 1
a178 1
  150    ENDDO
d192 1
a192 1
         IF (LIG .GT. 75) LIG = 75 
a199 1
      RETURN                                                                 
@


1.15
log
@refactor
@
text
@a7 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d9 5
a13 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d15 1
a15 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.14
log
@NFAC,KFAC,READ BUG & REFORMATTING
@
text
@d2 4
a5 1
C  CHAVA.F                    31-JAN-86      13:23:01                  
d9 1
a9 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d33 26
a58 26
C  CHAVA.F
C*                                                                    *         
C*      HIERARCHICAL ASCENDENT CLASSIFICATION USING THE VARIANCE AS   *         
C*      AN AGGREGATION CRITERION.  THE DISTANCES ARE IN THE MONO-     *         
C*      INDEXED TABLE D(MCAR).                                        *         
C*                                                                    *         
C*   INPUT:                                                           *         
C*      NKLA            = NUMBER OF ELEMENTS TO BE CLASSIFIED         *         
C*      MCARD           = NKLA * (NKLA-1) /2                          *         
C*      JFIN            = 2*NKLA - 1                                  *         
C*      D(MCARD)        = TABLE OF DISTANCES DESTROYED AFTER EXECUTION*         
C*      PK(1,...,NKLA)  = WEIGHT OF THE NKLA ELEMENTS                 *         
C*                                                                    *         
C*   OUTPUT:                                                          *         
C*      PK(NKLA+1,...)      = WEIGHT OF THE NODES OF THE HIERARCHY    *         
C*      LA(NKLA,LB(NKLA)    = SENIORS AND JUNIORS OF THE              *         
C*                            CLASSIFICATION                          *         
C*      VAL(NKLA+1,...)     = NODE INDICES                            *         
C*      NT(NKLA+1,...)      = SIZE OF CLASSES                         *         
C*      NO(NKLA+1,...)      = WORKING ARRAY                           *         
C*                                                                    *         
C*      INTERNAL FUNCTION ... MONO                                    *         
C*                                                                    *         
C==04.11.81                                                           *         
C==01.12.86                                                           *         
C*--------------------------------------------------------------------*         
d94 2
a95 2
  650   FORMAT (//2X,'DESCRIPTION OF THE HIERARCHY NODES'      /                  
     &           /1X,'  NO. SENIOR JUNIOR NO.  WEIGHT  INDEX'   /)
d98 1
a98 1
            KLIGN(L)= IAST 
@


1.13
log
@GPL
@
text
@d1 3
a3 1

d29 2
a30 4
                                                                  
C----------------------------------=*=----------------------------------        
C  CHAVA.F                    31-JAN-86      13:23:01                  
C*--------------------------------------------------------------------*         
d36 1
a36 1
C*   INPUT:                                                        *         
d43 1
a43 1
C*   OUTPUT:                                                       *         
d58 1
a58 1
     &                  VAL, LA, LB, NT, NO, NBAND, MODE)
d76 1
a76 1
  	   WRITE(NDAT,*) 'CLUSTERING CRITERION:  SINGLE LINKAGE'
d78 1
a78 1
  	   WRITE(NDAT,*) 'CLUSTERING CRITERION:  COMPLETE LINKAGE' 
d80 1
a80 1
  	   WRITE(NDAT,*) 'CLUSTERING CRITERION:  AVERAGE LINKAGE' 
d82 1
a82 1
  	   WRITE(NDAT,*) 'CLUSTERING CRITERION:  CENTROID METHOD' 
d84 1
a84 1
  	   WRITE(NDAT,*) 'CLUSTERING CRITERION:  WARDS METHOD' 
d91 2
a92 2
  650   FORMAT (//1X,'DESCRIPTION OF THE HIERARCHY NODES'      /                  
     &      //1X,'  NO. SENIOR JUNIOR NO.  WEIGHT   INDEX'   /)
d105 1
a105 1
C       DETERMIN PAIRWISE DISTANCES FOR ALL PAIRS
d110 1
a110 1
        REWIND(NBAND)                                                             
d173 3
a175 1
            WRITE(NBAND) J,LA(IR),LB(IR),NT(J),PK(J),VAL(J)                         
d178 1
a178 1
      REWIND(NBAND)                                                            
d180 3
a182 1
                                                        
d185 4
a188 2
         IR   = J - JDEB + 1                                                       
         READ(NBAND) J,LA(IR),LB(IR),NT(J),PK(J),VAL(J)                         
d190 2
a191 1
         IF (LIG .GT. 90) LIG = 90                                 
d196 1
@


1.12
log
@GPL License added
@
text
@d1 192
@


1.11
log
@1+80 bug on faces
@
text
@a0 166
                                                                  
C----------------------------------=*=----------------------------------        
C  CHAVA.F                    31-JAN-86      13:23:01                  
C*--------------------------------------------------------------------*         
C*                                                                    *         
C*      HIERARCHICAL ASCENDENT CLASSIFICATION USING THE VARIANCE AS   *         
C*      AN AGGREGATION CRITERION.  THE DISTANCES ARE IN THE MONO-     *         
C*      INDEXED TABLE D(MCAR).                                        *         
C*                                                                    *         
C*   INPUT:                                                        *         
C*      NKLA            = NUMBER OF ELEMENTS TO BE CLASSIFIED         *         
C*      MCARD           = NKLA * (NKLA-1) /2                          *         
C*      JFIN            = 2*NKLA - 1                                  *         
C*      D(MCARD)        = TABLE OF DISTANCES DESTROYED AFTER EXECUTION*         
C*      PK(1,...,NKLA)  = WEIGHT OF THE NKLA ELEMENTS                 *         
C*                                                                    *         
C*   OUTPUT:                                                       *         
C*      PK(NKLA+1,...)      = WEIGHT OF THE NODES OF THE HIERARCHY    *         
C*      LA(NKLA,LB(NKLA)    = SENIORS AND JUNIORS OF THE              *         
C*                            CLASSIFICATION                          *         
C*      VAL(NKLA+1,...)     = NODE INDICES                            *         
C*      NT(NKLA+1,...)      = SIZE OF CLASSES                         *         
C*      NO(NKLA+1,...)      = WORKING ARRAY                           *         
C*                                                                    *         
C*      INTERNAL FUNCTION ... MONO                                    *         
C*                                                                    *         
C==04.11.81                                                           *         
C==01.12.86                                                           *         
C*--------------------------------------------------------------------*         

       SUBROUTINE CHAVA(NKLA, MCARD, JFIN,  D, PK,                         
     &                  VAL, LA, LB, NT, NO, NBAND, MODE)

       INCLUDE 'CMBLOCK.INC'

      DIMENSION D(MCARD), PK(JFIN),VAL(JFIN),LA(NKLA),                 
     &          LB(NKLA),NT(JFIN),NO(JFIN)                                

      CHARACTER*8  CTM
      CHARACTER*1  IAST,KLIGN(110)

      DATA  IAST /'*'/

C      MONO-INDEXING OF THE TABLE OF DISTANCES                             
       MONO(K1,K2)= MIN0(K1,K2) + ((MAX0(K1,K2)-1)*(MAX0(K1,K2)-2)/2)            

C      GENERATION OF IDENTIFIERS, NUMBERS IN A4                            

       IF (MODE .EQ. 1) THEN
  	   WRITE(NDAT,*) 'CLUSTERING CRITERION:  SINGLE LINKAGE'
        ELSEIF (MODE.EQ. 2) THEN
  	   WRITE(NDAT,*) 'CLUSTERING CRITERION:  COMPLETE LINKAGE' 
        ELSEIF (MODE.EQ. 3) THEN
  	   WRITE(NDAT,*) 'CLUSTERING CRITERION:  AVERAGE LINKAGE' 
        ELSEIF (MODE.EQ. 4) THEN
  	   WRITE(NDAT,*) 'CLUSTERING CRITERION:  CENTROID METHOD' 
        ELSEIF (MODE.EQ. 5) THEN
  	   WRITE(NDAT,*) 'CLUSTERING CRITERION:  WARDS METHOD' 
        ENDIF

C       ARRAY OPERATION
	IF (MODE.LE.3)  D = SQRT(D)

        WRITE (NDAT,650)                                                           
  650   FORMAT (//1X,'DESCRIPTION OF THE HIERARCHY NODES'      /                  
     &      //1X,'  NO. SENIOR JUNIOR NO.  WEIGHT   INDEX'   /)

        DO L=1,100                                                          
            KLIGN(L)= IAST 
	ENDDO 
                                                          
        DO J = 1,JFIN                                                       
           NO(J)  = J                                                                 
           VAL(J) = 0.0                                                               
           NT(J)  = 1                                                                 
        ENDDO

C       CALCULATIONS AND LISTINGS                                           
C       DETERMIN PAIRWISE DISTANCES FOR ALL PAIRS

        JDEB  = NKLA + 1                                                          
        VMAX  = 0.0 
                                                              
        REWIND(NBAND)                                                             
        DO J=JDEB,JFIN                                                   
           DINF  = D(1)                                                              
           II1   = 1                                                                 
           II2   = 2                                                                 
           II    = 2*NKLA  - J + 1                                                   
           DO I1 = 2,II                                                       
              I3    = I1 - 1                                                            
              DO I2 = 1,I3                                                       
                 I1I2  = MONO (I1, I2)                                                     
                 IF (D(I1I2) .GE. DINF) CYCLE                               
                 DINF  = D(I1I2)                                                           
                 II1   = I1                                                                
                 II2   = I2                                                                
              ENDDO                                                                
           ENDDO                                                                
           IR     = J - JDEB + 1                                                      
           LA(IR)  = MIN0 (NO(II1), NO(II2))                                           
           LB(IR)  = MAX0 (NO(II1), NO(II2))                                           
           VAL(J)  = DINF                                                              
           LAI     = LA(IR)                                                            
           LBI     = LB(IR)                                                            
           NT(J)   = NT(LAI) + NT(LBI)                                                 
           VA      = VAL(LAI)                                                          
           VB      = VAL(LBI)                        
           P1      = PK(LAI)
           P2      = PK(LBI)
           PK(J)   = P1 + P2
           NO(II1) = J 
                                                               
           DO III = 1,II                                                      
              IF (III.EQ.II1 .OR. III.EQ.II2) CYCLE                               
              M1    = MONO (III, II1)                                                   
              M2    = MONO (III, II2)                                                   
              JS    = NO(III)                                                           
              VJS   = PK(JS)

              IF (MODE.EQ. 1) THEN
                    D(M1) = AMIN1(D(M1),D(M2))
              ELSEIF (MODE.EQ. 2) THEN
                     D(M1) = AMAX1(D(M1),D(M2))
              ELSEIF (MODE.EQ. 3) THEN
                    D(M1) =(P1*D(M1)+P2*D(M2))/(P1+P2)
              ELSEIF (MODE.EQ. 4) THEN
                    D(M1) = ((P1*D(M1)+P2*D(M2))/(P1+P2))-
     &                      (P1*P2*DINF/((P1+P2)**2))
              ELSEIF (MODE.EQ. 5) THEN
                    D(M1) = ((VA+VJS)*D(M1)+(VB+VJS)*D(M2)-
     &                   VJS*DINF)/(VA+VB+VJS)
              ENDIF 
           ENDDO 
                                        
           IF (II2 .NE. II) THEN                               
               NO(II2)= NO(II)                                                           
               IT    = II - 1                                                            
               DO III = 1,IT                                                      
                  IF (III .EQ. II2) CYCLE                               
                  M1    = MONO (III, II2)                                                   
                  M2    = MONO (III, II)                                                    
                  D(M1) = D(M2)                                                             
               ENDDO 
            ENDIF                                                  
            IF (VAL(J) .GT. VMAX) VMAX = VAL(J)                            
            WRITE(NBAND) J,LA(IR),LB(IR),NT(J),PK(J),VAL(J)                         
  150    ENDDO
                                                                
      REWIND(NBAND)                                                            
      NKLA1 = NKLA - 1  
                                                        
      DO  JJ = 1,NKLA1                                                    
         J    = JJ + NKLA                                                          
         IR   = J - JDEB + 1                                                       
         READ(NBAND) J,LA(IR),LB(IR),NT(J),PK(J),VAL(J)                         
         LIG   = 90.0*VAL(J)/VMAX + 1.0                                            
         IF (LIG .GT. 90) LIG = 90                                 
         WRITE(NDAT,660) J,LA(IR),LB(IR),NT(J),PK(J),VAL(J),                       
     &                              (KLIGN(L),L=1,LIG)                          
  660    FORMAT(1X,I5,3I5,2(1PG10.2,1X),90A1)
      ENDDO

      RETURN                                                                 
      END                                                                    

@


1.10
log
@CA rewrite
@
text
@a18 1
C*      IDK(NKLA)           = ELEMENT IDENTIFIERS (NUMBERS IN A4)     *         
d61 1
d79 1
@


1.9
log
@removed IDK setting (causes probs in hcls)
@
text
@d1 1
a1 1
C *NAME* = CHAVA.FOR                   31-JAN-86      13:23:01                  
d3 1
a3 12
C           COPYRIGHT 1986 - JEAN-PIERRE BRETAUDIERE                            
C THE UNIVERSITY OF TEXAS HEALTH SCIENCE CENTER AT HOUSTON                      
C MEDICAL SCHOOL - DEPARTMENT OF PATHOLOGY AND LABORATORY MEDICINE              
C P.O. BOX 20708, HOUSTON, TX 77225.                                            
C DISCLAIMER: NO GUARANTEES OF PERFORMANCE ACCOMPANY THIS SOFTWARE,             
C NOR IS ANY RESPONSIBILITY ASSUMED ON THE PART OF THE AUTHOR                   
C OR THE INSTITUTION.  ALL THE SOFTWARE HAS BEEN TESTED EXTENSIVELY             
C AND EVERY EFFORT HAS BEEN MADE TO INSURE ITS RELIABILITY.                     
C THE FOLLOWING SOFTWARE MAY NOT BE COMMUNICATED TO A THIRD PARTY               
C UNDER ANY FORM WITHOUT WRITTEN PERMISSION OF THE AUTHOR.                      
C PLEASE REPORT ANY BUG(S) TO JPB AT (713) 792 52 00.                           
C OR THRU ARPANET AT  ......!rice!ots!ut-path!suprim                            
a5 1
C*                                                                    *         
d10 1
a10 1
C*      INPUT:                                                        *         
d17 1
a17 2
C*      OUTPUT:                                                       *         
C*                                                                    *         
d32 1
a32 1
      SUBROUTINE CHAVA (NKLA, MCARD, JFIN,  D, IDK, PK,                         
d35 3
a37 1
      DIMENSION D(MCARD),IDK(NKLA),PK(JFIN),VAL(JFIN),LA(NKLA),                 
d39 1
a39 1
      COMMON  / ENSOR / LEC,IMP
d45 2
a46 14
C     MONO-INDEXING OF THE TABLE OF DISTANCES                             
      MONO(K1,K2)= MIN0(K1,K2) + ((MAX0(K1,K2)-1)*(MAX0(K1,K2)-2)/2)            

C     GENERATION OF IDENTIFIERS, NUMBERS IN A4                            

	GOTO  (21,22,23,24,25),MODE
 21	WRITE(IMP,31)
	GOTO  29

 22	WRITE(IMP,32)
	GOTO  29

 23	WRITE(IMP,33)
	GOTO  29
d48 1
a48 2
 24	WRITE(IMP,34)
	GOTO  29
d50 11
a60 2
 25	WRITE(IMP,35)
	GOTO  29
d62 1
a62 2
 31	FORMAT('0','CLUSTERING CRITERION: ',
     &	  'SINGLE LINKAGE')
d64 1
a64 17
 32	FORMAT('0','CLUSTERING CRITERION: ',
     &	  'COMPLETE LINKAGE')

 33	FORMAT('0','CLUSTERING CRITERION: ',
     &	  'AVERAGE LINKAGE')

 34	FORMAT('0','CLUSTERING CRITERION: ',
     &	  'CENTROID METHOD')

 35	FORMAT('0','CLUSTERING CRITERION: ',
     &	  'WARD','"','S METHOD')

 29	CONTINUE

	IF (MODE.LE.3)  D=SQRT(D)

        WRITE (IMP,650)                                                           
d70 2
a71 1
	ENDDO                                                           
d73 3
a75 3
           NO(J) = J                                                                 
           VAL(J)= 0.0                                                               
           NT(J) = 1                                                                 
d81 4
a84 3
        VMAX  = 0.0                                                               
        REWIND  NBAND                                                             
        DO 150  J = JDEB,JFIN                                                   
d89 1
a89 1
           DO 110  I1 = 2,II                                                       
d91 1
a91 1
              DO 110  I2 = 1,I3                                                       
d93 1
a93 1
                 IF (D(I1I2) .GE. DINF) GO TO  110                               
d97 34
a130 35
  110         CONTINUE                                                                
              IR    = J - JDEB + 1                                                      
              LA(IR)= MIN0 (NO(II1), NO(II2))                                           
              LB(IR)= MAX0 (NO(II1), NO(II2))                                           
              VAL(J)= DINF                                                              
              LAI   = LA(IR)                                                            
              LBI   = LB(IR)                                                            
              NT(J) = NT(LAI) + NT(LBI)                                                 
              VA    = VAL(LAI)                                                          
              VB    = VAL(LBI)                        
              P1=PK(LAI)
              P2=PK(LBI)
              PK(J) = P1 + P2
              NO(II1)= J                                                                
              DO 120  III = 1,II                                                      
                 IF (III.EQ.II1 .OR. III.EQ.II2) GO TO 120                               
                 M1    = MONO (III, II1)                                                   
                 M2    = MONO (III, II2)                                                   
                 JS    = NO(III)                                                           
                 VJS   = PK(JS)
                 GOTO  (51,52,53,54,55),MODE
 51              D(M1)=AMIN1(D(M1),D(M2))
                 GOTO  120

 52              D(M1)=AMAX1(D(M1),D(M2))
                 GOTO  120

 53              D(M1)=(P1*D(M1)+P2*D(M2))/(P1+P2)
                 GOTO  120

 54              D(M1)=((P1*D(M1)+P2*D(M2))/(P1+P2))-
     &                  (P1*P2*DINF/((P1+P2)**2))
                 GOTO  120

 55              D(M1) = ((VA+VJS)*D(M1)+(VB+VJS)*D(M2)-
d132 16
a147 13
  120         CONTINUE                                                                
              IF (II2 .EQ. II) GO TO  140                               
              NO(II2)= NO(II)                                                           
              IT    = II - 1                                                            
              DO 130  III = 1,IT                                                      
                 IF (III .EQ. II2) GO TO  130                               
                 M1    = MONO (III, II2)                                                   
                 M2    = MONO (III, II)                                                    
                 D(M1) = D(M2)                                                             
  130        CONTINUE                                                                
  140        IF (VAL(J) .GT. VMAX) VMAX = VAL(J)                            
             WRITE (NBAND)  J,LA(IR),LB(IR),NT(J),PK(J),VAL(J)                         
  150 CONTINUE
d149 1
a149 1
      REWIND  NBAND                                                             
d155 1
a155 1
         READ (NBAND) J,LA(IR),LB(IR),NT(J),PK(J),VAL(J)                         
d158 1
a158 1
         WRITE(IMP,660) J,LA(IR),LB(IR),NT(J),PK(J),VAL(J),                       
d160 1
a160 1
  660    FORMAT (1X,I5,3I5,2(1PG10.2,1X),90A1)
d165 1
@


1.8
log
@cosmetic
@
text
@d49 1
a49 1
     &   LB(NKLA),NT(JFIN),NO(JFIN)                                
d56 2
a57 2
C       MONO-INDEXING OF THE TABLE OF DISTANCES                             
        MONO(K1,K2)= MIN0(K1,K2) + ((MAX0(K1,K2)-1)*(MAX0(K1,K2)-2)/2)            
d59 1
a59 4
C       GENERATION OF IDENTIFIERS, NUMBERS                             
        DO  K=1,NKLA
           IDK(K) = K
	ENDDO
a60 1
        WRITE(IMP,*) ' '
a62 1
 31	FORMAT(' ','CLUSTERING CRITERION: SINGLE LINKAGE')
a65 1
 32	FORMAT(' ','CLUSTERING CRITERION: COMPLETE LINKAGE')
d69 1
a69 2
33	FORMAT(' ','CLUSTERING CRITERION: AVERAGE LINKAGE')
 	GOTO  29
a71 1
 34	FORMAT(' ','CLUSTERING CRITERION: CENTROID METHOD')
a74 1
 35	FORMAT(' ','CLUSTERING CRITERION: WARD','"','S METHOD')
d76 16
d94 1
a94 1
	IF (MODE.LE.3)  D = SQRT(D)
d96 2
a97 2
      WRITE (IMP,650)                                                           
  650 FORMAT (//1X,'DESCRIPTION OF THE HIERARCHY NODES'      /                  
d100 76
a175 28
      DO L=1,100                                                          
         KLIGN(L)= IAST 
      ENDDO                                                           
      DO J = 1,JFIN                                                       
         NO(J) = J                                                                 
         VAL(J)= 0.0                                                               
         NT(J) = 1                                                                 
      ENDDO

C     CALCULATIONS AND LISTINGS                                           

      JDEB  = NKLA + 1                                                          
      VMAX  = 0.0                                                               
      REWIND  NBAND                                                             
      DO 150  J = JDEB,JFIN                                                   
         DINF  = D(1)                                                              
         II1   = 1                                                                 
         II2   = 2                                                                 
         II    = 2*NKLA  - J + 1                                                   
         DO 110  I1 = 2,II                                                       
            I3    = I1 - 1                                                            
            DO 110  I2 = 1,I3                                                       
               I1I2  = MONO (I1, I2)                                                     
               IF (D(I1I2) .GE. DINF) GO TO  110                               
               DINF  = D(I1I2)                                                           
               II1   = I1                                                                
               II2   = I2                                                                
  110    CONTINUE
a176 48
         IR    = J - JDEB + 1                                                      
         LA(IR)= MIN0 (NO(II1), NO(II2))                                           
         LB(IR)= MAX0 (NO(II1), NO(II2))                                           
         VAL(J)= DINF                                                              
         LAI   = LA(IR)                                                            
         LBI   = LB(IR)                                                            
         NT(J) = NT(LAI) + NT(LBI)                                                 
         VA    = VAL(LAI)                                                          
         VB    = VAL(LBI)                        
	 P1    = PK(LAI)
	 P2    = PK(LBI)
         PK(J) = P1 + P2
         NO(II1)= J                                                                
	 DO 120  III = 1,II                                                      
            IF (III.EQ.II1 .OR. III.EQ.II2) GO TO 120                               
            M1    = MONO (III, II1)                                                   
            M2    = MONO (III, II2)                                                   
            JS    = NO(III)                                                           
            VJS   = PK(JS)
            GOTO  (51,52,53,54,55),MODE
 51	    D(M1)=AMIN1(D(M1),D(M2))
            GOTO  120

 52	    D(M1)=AMAX1(D(M1),D(M2))
            GOTO  120

 53	    D(M1)=(P1*D(M1)+P2*D(M2))/(P1+P2)
	    GOTO  120

 54	  D(M1)=((P1*D(M1)+P2*D(M2))/(P1+P2))-(P1*P2*DINF/((P1+P2)**2))
	    GOTO  120

 55         D(M1) = ((VA+VJS)*D(M1)+(VB+VJS)*D(M2)-VJS*DINF)/(VA+VB+VJS)
  120    CONTINUE 
                                                               
         IF (II2 .EQ. II) GO TO  140                               
         NO(II2)= NO(II)                                                           
         IT    = II - 1                                                            
         DO 130  III = 1,IT                                                      
            IF (III .EQ. II2) GO TO  130                               
            M1    = MONO (III, II2)                                                   
            M2    = MONO (III, II)                                                    
            D(M1) = D(M2)                                                             
  130    CONTINUE                                                                
  140    IF (VAL(J) .GT. VMAX) VMAX = VAL(J)                            
         WRITE (NBAND)  J,LA(IR),LB(IR),NT(J),PK(J),VAL(J)                         
  150 CONTINUE 
                                                               
d178 3
a180 2
      NKLA1 = NKLA - 1                                                          
      DO JJ = 1,NKLA1                                                    
d183 1
a183 1
         READ (NBAND)   J,LA(IR),LB(IR),NT(J),PK(J),VAL(J)                         
d189 1
a189 1
      ENDDO                                                                
@


1.7
log
@# continue char fails on NT f90
@
text
@d44 1
d47 1
a47 2
C
C                                                                               
d51 3
a53 2
	CHARACTER*8  CTM
	CHARACTER*1  IAST,KLIGN(110)
d55 10
a64 8
C
C
C.......... MONO-INDEXING OF THE TABLE OF DISTANCES                             
C                                                                               
      MONO(K1,K2)= MIN0(K1,K2) + ((MAX0(K1,K2)-1)*(MAX0(K1,K2)-2)/2)            
C                                                                               
C.......... GENERATION OF IDENTIFIERS, NUMBERS IN A4                            
C                                                            
d67 1
d69 1
d71 1
d73 1
d75 3
a77 1
	GOTO  29
d79 1
d81 1
d83 1
a84 10
 31	FORMAT('0','CLUSTERING CRITERION: ',
     &	  'SINGLE LINKAGE')
 32	FORMAT('0','CLUSTERING CRITERION: ',
     &	  'COMPLETE LINKAGE')
 33	FORMAT('0','CLUSTERING CRITERION: ',
     &	  'AVERAGE LINKAGE')
 34	FORMAT('0','CLUSTERING CRITERION: ',
     &	  'CENTROID METHOD')
 35	FORMAT('0','CLUSTERING CRITERION: ',
     &	  'WARD','"','S METHOD')
d86 3
a88 3
C
	IF(MODE.LE.3)  D=SQRT(D)
C
d90 4
a93 1
        DO L=1,100                                                          
d95 9
a103 8
	ENDDO                                                           
        DO 100 J = 1,JFIN                                                       
      NO(J) = J                                                                 
      VAL(J)= 0.0                                                               
  100 NT(J) = 1                                                                 
C                                                                               
C.......... CALCULATIONS AND LISTINGS                                           
C                                                                               
d107 63
a169 56
        DO 150  J = JDEB,JFIN                                                   
      DINF  = D(1)                                                              
      II1   = 1                                                                 
      II2   = 2                                                                 
      II    = 2*NKLA  - J + 1                                                   
        DO 110  I1 = 2,II                                                       
      I3    = I1 - 1                                                            
        DO 110  I2 = 1,I3                                                       
      I1I2  = MONO (I1, I2)                                                     
        IF (D(I1I2) .GE. DINF)         GO TO  110                               
      DINF  = D(I1I2)                                                           
      II1   = I1                                                                
      II2   = I2                                                                
  110   CONTINUE                                                                
      IR    = J - JDEB + 1                                                      
      LA(IR)= MIN0 (NO(II1), NO(II2))                                           
      LB(IR)= MAX0 (NO(II1), NO(II2))                                           
      VAL(J)= DINF                                                              
      LAI   = LA(IR)                                                            
      LBI   = LB(IR)                                                            
      NT(J) = NT(LAI) + NT(LBI)                                                 
      VA    = VAL(LAI)                                                          
      VB    = VAL(LBI)                        
	P1=PK(LAI)
	P2=PK(LBI)
      PK(J) = P1 + P2
      NO(II1)= J                                                                
        DO 120  III = 1,II                                                      
        IF (III.EQ.II1 .OR. III.EQ.II2) GO TO 120                               
      M1    = MONO (III, II1)                                                   
      M2    = MONO (III, II2)                                                   
      JS    = NO(III)                                                           
      VJS   = PK(JS)
	GOTO  (51,52,53,54,55),MODE
 51	D(M1)=AMIN1(D(M1),D(M2))
	GOTO  120
 52	D(M1)=AMAX1(D(M1),D(M2))
	GOTO  120
 53	D(M1)=(P1*D(M1)+P2*D(M2))/(P1+P2)
	GOTO  120
 54	D(M1)=((P1*D(M1)+P2*D(M2))/(P1+P2))-(P1*P2*DINF/((P1+P2)**2))
	GOTO  120
 55   D(M1) = ((VA+VJS)*D(M1)+(VB+VJS)*D(M2)-VJS*DINF)/(VA+VB+VJS)
  120   CONTINUE                                                                
        IF (II2 .EQ. II)               GO TO  140                               
      NO(II2)= NO(II)                                                           
      IT    = II - 1                                                            
        DO 130  III = 1,IT                                                      
        IF (III .EQ. II2)              GO TO  130                               
      M1    = MONO (III, II2)                                                   
      M2    = MONO (III, II)                                                    
      D(M1) = D(M2)                                                             
  130   CONTINUE                                                                
  140   IF (VAL(J) .GT. VMAX)          VMAX = VAL(J)                            
      WRITE (NBAND)  J,LA(IR),LB(IR),NT(J),PK(J),VAL(J)                         
  150   CONTINUE                                                                
d172 7
a178 7
        DO 160  JJ = 1,NKLA1                                                    
      J    = JJ + NKLA                                                          
      IR   = J - JDEB + 1                                                       
      READ (NBAND)   J,LA(IR),LB(IR),NT(J),PK(J),VAL(J)                         
      LIG   = 90.0*VAL(J)/VMAX + 1.0                                            
        IF (LIG .GT. 90)               LIG = 90                                 
      WRITE(IMP,660) J,LA(IR),LB(IR),NT(J),PK(J),VAL(J),                       
d180 5
a184 8
  160   CONTINUE                                                                
         RETURN                                                                 
  650 FORMAT (//1X,'DESCRIPTION OF THE HIERARCHY NODES'      /                  
     &      //1X,'   NO SENIOR JUNIOR NO.  WEIGHT   INDEX'   /)
  660 FORMAT (1X,I5,3I5,2(1PG10.2,1X),90A1)
 2000 FORMAT (I4)                                                             
 3000 FORMAT (A4)                                                             
         END                                                                    
@


1.6
log
@Character conversion removed
@
text
@d45 1
a45 1
     #                  VAL, LA, LB, NT, NO, NBAND, MODE)
d49 1
a49 1
     #   LB(NKLA),NT(JFIN),NO(JFIN)                                
d166 1
a166 1
     #                              (KLIGN(L),L=1,LIG)                          
d170 1
a170 1
     #      //1X,'   NO SENIOR JUNIOR NO.  WEIGHT   INDEX'   /)
@


1.5
log
@*** empty log message ***
@
text
@d45 1
a45 1
     #                  VAL, LA, LB, NT, NO, NBAND, MODE, LLL)
a61 9
	IF(LLL.EQ.0)  THEN                   
	DO  10  K=1,NKLA
	WRITE(CTM,2000)  K
 10	READ(CTM,3000)  IDK(K)
	ELSE
	DO  11  K=1,NKLA
	WRITE(CTM,2000)  IDK(K)
 11	READ(CTM,3000)  IDK(K)
	ENDIF
d85 1
a85 4
	IF(MODE.LE.3)  THEN
	DO  19  K=1,MCARD
 19	D(K)=SQRT(D(K))
	ENDIF
d88 3
a90 2
        DO 90  L=1,100                                                          
   90 KLIGN(L)= IAST                                                            
d165 1
a165 1
      WRITE (IMP,660) J,LA(IR),LB(IR),NT(J),PK(J),VAL(J),                       
@


1.4
log
@H
@
text
@d53 3
a55 3
      DATA  IAST /'*'/ 
CNO_SAVE                                                         
C                                                                               
@


1.3
log
@*** empty log message ***
@
text
@d82 1
a82 1
 31	FORMAT(1H0,22HCLUSTERING CRITERION: ,
d84 1
a84 1
 32	FORMAT(1H0,22HCLUSTERING CRITERION: ,
d86 1
a86 1
 33	FORMAT(1H0,22HCLUSTERING CRITERION: ,
d88 1
a88 1
 34	FORMAT(1H0,22HCLUSTERING CRITERION: ,
d90 2
a91 2
 35	FORMAT(1H0,22HCLUSTERING CRITERION: ,
     &	  'WARD',1H','S METHOD')
@


1.2
log
@nosave
@
text
@d49 1
a49 1
     #   LB(NKLA),NT(JFIN),NO(JFIN),KLIGN(110)                                  
d52 1
@


1.1
log
@Initial revision
@
text
@d52 2
a53 1
      DATA  IAST /'*'/                                                          
@
