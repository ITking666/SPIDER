head	1.9;
access;
symbols
	healthdept_2018:1.9
	pre_getangas:1.8
	GPL2010:1.8
	pre_GPL2010:1.7
	pre_var_equation:1.7
	pre_fftwrings:1.7
	pre_opfiles:1.7
	src:1.7
	best-code:1.7
	x-named-regs:1.7
	x:1.7
	v13-00:1.7
	pre_GPL:1.5
	prec_CA:1.5
	noindx:1.5
	Bproc:1.5
	oct21:1.3
	last77:1.3;
locks; strict;
comment	@c @;


1.9
date	2018.10.03.14.34.23;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2010.06.24.13.27.03;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.17.20.20.36;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.17.18.13.15;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.05.13.46.39;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.11.10.23.11.22;	author yuchen;	state Exp;
branches;
next	1.3;

1.3
date	97.09.30.22.11.41;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	96.01.16.16.33.33;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.53.11;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.9
log
@email_health_dept
@
text
@
C **********************************************************************
C
C                        NOUT USED JUNE 2000 ARDEAN LEITH
C
C **********************************************************************
C *  AUTHOR :                                                              *
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C **********************************************************************

        SUBROUTINE STOCHA(JBASE,  NPIX,  NUMIM,  KFAC,  NITER, 
     &                    LUV, PJ,  S,  U,  TRACE,  SOMP,  V,  BB, 
     &                    D,  AD,  INB, NB, NTMP)

        INCLUDE 'CMBLOCK.INC'

        DIMENSION  S(NPIX, JBASE), PJ(NPIX), U(NPIX), LUV(NUMIM), 
     &           BB(NPIX, JBASE),  V(NPIX),  D(NPIX),  AD(JBASE, JBASE)
        LOGICAL  S_ON_DISK, INB(JBASE),LDUM

C       NAR  =  CENTERING FREQUENCY

        DATA  EPS/1.0E - 4/, NAR/10/, KITER/8/

        S_ON_DISK = .FALSE.
        TRACE     =  0 
 
        DO J  =  1, NPIX                                                        
          V(J)   =  0.0
          PJ(J)  =  0.0
        END DO
        CALL REW(NB,  1)
        SOMP  =  0.0 

C       CALCULATION OF WEIGHTS         
        DO I  =  1, NUMIM                                        
          READ(NB) (U(J), J = 1, NPIX),  PIA,  VAR,  INO

          IF(LUV(I) .NE. 0) THEN
            SOMP  =   SOMP  +  PIA                                              
            DO  J  =  1, NPIX
              PJ(J)  =  PJ(J)  +  U(J)                                    
            END DO

            DO J  =  1, NPIX

C             SET PROTECTION AGAINST UNDERFLOW
c             PJ(J) = AMAX1(PJ(J), 1.0E - 6)

              V(J)  =  V(J)  +  U(J) * U(J) / PIA
            END DO
          END IF
        END DO

        DO J  =  1, NPIX
          TRACE  =  TRACE  +  V(J) / PJ(J)
        END DO
        TRACE  =  TRACE  -  1.0 
        DO J  =  1, NPIX
           PJ(J)  =  PJ(J)/SOMP
        END DO


C	RANDOMIZE S MATRIX.
        DO J  =  1, NPIX
           DO L  =  1, JBASE
              S(J, L)  =  SEN3A(BID)
           END DO
        END DO
                                              
        CALL GSMOD (NPIX,  NPIX,  JBASE,  PJ,  S,  KR,  V)
        
        DO  L = 1, JBASE                    
           INB(L) = .TRUE.
        END DO
        NIT = 0
	LDUM=.TRUE.
        DO WHILE (LDUM)
88        NIT = NIT + 1
          WRITE(NOUT,*) ' ITERATION #:', NIT  
          CALL ITPOW (NUMIM, NPIX, JBASE, NAR, PJ, S, BB, U, V, 
     &                SOMP, TRACE, NB, LUV, INB)

          IF(NIT. GE. KITER - 1) THEN
            IF ((NIT.GT.KITER) .AND. (MOD(NIT - 12, 4) .NE. 0)) THEN
              CONTINUE
            ELSE
              JCASE = 0
              DO   L = 1, JBASE
                IF(INB(L))  JCASE = JCASE + 1
              END DO
              CALL CPROJ (NUMIM,  JBASE,  NPIX,  S,  V,  BB,  U,  AD, 
     &                      SOMP,  PJ,  NB,  LUV, JCASE, INB)
              JCASE = 0
              DO L = 1, JBASE
                IF(INB(L))  THEN
                   JCASE = JCASE + 1
                   D(L) = V(JCASE)
                ENDIF
              END DO
              IF (S_ON_DISK)  THEN
                REWIND NTMP
                AVE = 1.0
                DO  L  =  1, KFAC
                  V(L)  =  0.0                             

C	          U HAS TO HAVE THE AVERAGE SUBSTRATED AND PJ()=1

                  READ(NTMP) (U(J), J = 1, NPIX)
                  DO  J  =  1, NPIX
                     V(L)  =  V(L)  +  PJ(J) * S(J, L) * U(J)
                  END DO
                  IF((1.0 - ABS(V(L))).LT.EPS)  THEN
                     INB(L) = .FALSE.
                  ELSE
                     AVE = AMIN1(AVE, ABS(V(L)))
                  ENDIF
                END DO

                WRITE (NOUT,501) AVE
501             FORMAT('  ***   COSINES OF EIGENVECTORS   *** ', /, 
     &	               '      MINIMUM COSINE            =  ', F8.5)

                WRITE (NOUT,  502) (V(L), L = 1, KFAC)
502             FORMAT(8(2X, F8.5))

                WRITE (NOUT,  505) (INB(L), L = 1, JBASE)
505             FORMAT(8(9X, L1))
    
                IF ((1.0 - AVE) .LT. EPS)  GOTO  80
              ENDIF

              REWIND NTMP
              DO L  =  1, JBASE
                 WRITE(NTMP) (S(J, L), J = 1, NPIX)
              END DO
              S_ON_DISK = .TRUE.
            END IF
          END IF
        END DO

80      CONTINUE
        DO J = 1, NPIX                                      
           PJ(J)  =  PJ(J) * SOMP
        END DO

        END
@


1.8
log
@GPL_2010
@
text
@d13 1
a13 1
C=* Email: spider@@wadsworth.org                                        *
@


1.7
log
@GPL License fixed
@
text
@a7 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d9 5
a13 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d15 1
a15 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.6
log
@HRI GPL License used
@
text
@a2 1
C***************************************************************************
a6 1
C **************************************************************************
d11 1
a11 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a30 7

C *  COPYRIGHT (C)1987 , WADSWORTH CENTER FOR LABORATORIES AND             *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
a31 1
C **************************************************************************
a33 1
C***************************************************************************
@


1.5
log
@nout
@
text
@d2 1
d7 1
d10 24
d40 1
d43 1
@


1.4
log
@a
@
text
@a1 1
C
d4 1
a15 1
C
a16 1
C
d22 2
d33 2
a34 1
        TRACE  =  0  
d55 2
a56 1
c              PJ(J) = AMAX1(PJ(J), 1.0E - 6)
d67 1
a67 1
          PJ(J)  =  PJ(J)/SOMP
d69 2
a70 2
C
C
d73 3
a75 3
          DO L  =  1, JBASE
            S(J, L)  =  SEN3A(BID)
          END DO
d80 2
a81 2
        do  l = 1, jbase                    
          inb(l) = .true.
d87 1
a87 1
          print * , ' Iteration #', nit  
d89 1
a89 1
     &                SOMP, TRACE, NB, LUV, inb)
d92 1
a92 1
            IF((NIT.GT.KITER) .AND. (MOD(NIT - 12, 4) .NE. 0)) THEN
d95 3
a97 3
              jcase = 0
              do   l = 1, jbase
                if(inb(l))  jcase = jcase + 1
d99 8
a106 8
              CALL CPROJ (NUMIM,  JBASE,  NPIX,  S,  v,  BB,  U,  AD, 
     &                      SOMP,  PJ,  NB,  LUV, jcase, inb)
              jcase = 0
              do l = 1, jbase
                if(inb(l))  then
                  jcase = jcase + 1
                  d(l) = v(jcase)
                endif
d108 1
a108 1
              IF(S_ON_DISK)  THEN
d113 3
a115 3
C
C	U HAS TO HAVE THE AVERAGE SUBSTRATED AND PJ()=1
C
d118 1
a118 1
                   V(L)  =  V(L)  +  PJ(J) * S(J, L) * U(J)
d120 5
a124 5
                  if((1.0 - abs(v(l))).lt.eps)  then
                    inb(l) = .false.
                  else
                    AVE = amin1(AVE, ABS(V(L)))
                  endif
d127 9
a135 7
                PRINT  501, AVE
501             FORMAT('   ***   Cosines of eigenvectors   *** ', /, 
     $	           '       Minimum cosine            =  ', F8.5)
                PRINT  502, (V(L), L = 1, KFAC)
502             FORMAT( 8(2X, F8.5))
                print  505, (inb(l), l = 1, jbase)
505             format(8(9x, l1))
d137 1
a137 1
                IF((1.0 - AVE).LT.EPS)  GOTO  80
d142 1
a142 1
                WRITE(NTMP) (S(J, L), J = 1, NPIX)
d151 1
a151 1
          PJ(J)  =  PJ(J) * SOMP
@


1.3
log
@*** empty log message ***
@
text
@d31 1
a31 1
CNO_SAVE
@


1.2
log
@nosave
@
text
@d26 1
a26 1
        LOGICAL  S_ON_DISK, INB(jbase)
d82 2
a83 1
        DO WHILE (1)
a149 1
        RETURN
@


1.1
log
@Initial revision
@
text
@d31 1
a31 1

@
