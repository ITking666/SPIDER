head	1.19;
access;
symbols
	pre_getangas:1.18
	GPL2010:1.18
	pre_GPL2010:1.17
	pre_var_equation:1.17
	pre_fftwrings:1.17
	pre_opfiles:1.17
	src:1.17
	best-code:1.17
	x-named-regs:1.17
	x:1.17
	v13-00:1.17
	pre_GPL:1.15
	prec_CA:1.15
	noindx:1.14
	Bproc:1.10
	oct21:1.9
	last77:1.9;
locks; strict;
comment	@c @;


1.19
date	2014.07.30.15.40.19;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2010.06.24.13.26.44;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.17.20.37.40;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.17.18.28.06;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.20.17.55.13;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2002.03.11.14.08.27;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2001.01.04.17.28.54;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.11.06.14.34.25;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.11.05.19.55.41;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	99.12.07.19.38.40;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.03.26.14.48.05;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	98.04.06.19.33.31;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.10.14.21.19.28;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	96.08.30.20.25.57;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.08.29.15.29.49;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	96.08.29.15.10.55;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.10.06.17.38.25;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.10.11;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.15;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.19
log
@LEN=MAXNAM):: FILNAM
@
text
@
C ++********************************************************************
C                                                          
C  REMEZP                                                              
C                  USED OPFILE                NOV 00 ARDEAN LEITH
C                  USED ALLOCATE              JAN 01 ARDEAN LEITH 
C                  OPFILEC                    FEB 03 ARDEAN LEITH
C                  MAXNAM                     JUL 14 ARDEAN LEITH
C                                                              
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      
C REMEZP(MAXDIM)                                                       
C                                          
C PURPOSE: 	PROGRAM TO DESIGN THE REMEZ FILTER
C                                                                   
C PARAMETERS:                                                         
C                                                                      
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE REMEZP(MAXDIM)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        COMMON A(80),BUF(1024),ROT(29,29,29),BQ(1)

        REAL, ALLOCATABLE, DIMENSION(:) :: Q

C       CHANGES IN COMMON LENGTH SHOULD BE CONSULTED WITH
C       SUBROUTINES CONTAINING ARRAY ROT:
C       ROT_P, ROT3_P, INF_P, INF3_P, INFD3_P, OPSF_P, OPSF3_P

	DOUBLE PRECISION        ROT
	DIMENSION               H(66)
        CHARACTER(LEN=MAXNAM):: FILNAM
	CHARACTER*1             NULL,WHAT

	DATA  NFREQ/128/,IDIM/33/,LUN/9/

        NULL = CHAR(0)

C       LENRO - MEMORY RESERVED IN COMMON BY ROT AND OTHERS
	LENRO=80+1024+2*29**3 

111     CALL RDPRMI(NFILT,IDUM,NOT_USED,'IMPULSE RESPONSE LENGTH')

	NFILT=2*(NFILT/2)+1
	NFCNS=NFILT/2+1
	IF (NFCNS .GT. 29)  GOTO 111
	CALL  RMZ_P(H,NFILT)

        CALL RDPRMC(WHAT,NCHAR,.TRUE.,
     &	      'PLOT FREQUENCY RESPONSE (Y/N)',NULL,IRTFLG)

	IF (WHAT .EQ. 'Y')  THEN
           DO    J=1,NFREQ
              BUF(J)=0.0
           ENDDO
           BUF(1)=H(NFCNS)
           KK=NFCNS-1
           DO    J=KK,1,-1
              K=NFREQ-KK+J
              JJ=KK-J+2
              BUF(JJ)=H(J)
              BUF(K)=H(J)
           ENDDO
           NV=LOG2(NFREQ)
           CALL  FFTR_Q(BUF,NV)
C          50 SCALING FACTOR FOR PICTURE
           DELF=50
           NF2=NFREQ/2+1
           W=BUF(2)
           K=1
           DO J=3,NFREQ,2
              K=K+1
              BUF(K)=BUF(J)
           ENDDO
           BUF(NF2)=W
           LR=NFREQ/((IDIM-1)*2)
	   IF (LR.GT.1)  THEN
	      K=1
	      DO J=2,NF2-1,LR
	         K=K+1
	         Z=0.0
	         DO M=1,LR
 	            Z=Z+BUF(J+M-1)
	         ENDDO
 	         BUF(K)=Z/FLOAT(LR)
	      ENDDO
	      BUF(IDIM)=BUF(NF2)
	   ENDIF
	   DO J=1,IDIM
              BUF(J)=BUF(J)*DELF
	   ENDDO
	   BMA=BUF(1)
	   BMI=BMA
	   DO J=2,IDIM
	      BMA=AMAX1(BMA,BUF(J))
	      BMI=AMIN1(BMI,BUF(J))
	   ENDDO
	   T = (BMA-BMI)/50.0
	   DO J=1,IDIM
	      BUF(J)=(BUF(J)-BMI)/T
	   ENDDO
           WRITE(NOUT,606)
 606       FORMAT(//15X,'***** FREQUENCY RESPONSE *****')
           CALL MRKUR3(BUF,IDIM,0.,0,60)
        ENDIF

 222    CALL RDPRMC(WHAT,NCHAR,.TRUE.,
     &	    'DO YOU LIKE YOUR FILTER (Y/N)',NULL,IRTFLG)

	IF (WHAT .EQ. 'N') THEN
	   GOTO  111
	ELSE
	  CALL  FILERD(FILNAM,NLET,NULL,'FILTER',IRTFLG)
          IF (IRTFLG .NE. 0)  RETURN

333	  WRITE(NOUT,788)
788	  FORMAT(' DIMENSIONS OF RESULTING FILTER IN FOURIER SPACE'/
     &	     ' IF 0 THEN POINT SPREAD FUNCTION IS STORED'/
     &       ' TO BE USED FOR REAL SPACE FILTRATION WITH RC COMMAND') 
	  CALL  RDPRMI(NSAM,NROW,NOT_USED,'(NSAM,NROW)')
	  IF (NSAM .EQ. 0)  THEN
789	     CALL  RDPRMI(IPSF,NDUM,NOT_USED,
     &		  'PRODUCE 2-D OR 3-D PSF? (2/3)')
	     IF (IPSF.NE.2 .AND. IPSF.NE.3)  GOTO  789
C            PSF TO BE USED IN RC
	     IF (IPSF.EQ.3)  THEN
	        IFORM = 3
	        NFIL3 = NFILT
	     ELSE
	        IFORM = 1
	        NFIL3 = 1
	     ENDIF

             MAXIM = 0
             CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'U',IFORM,
     &                   NFILT,NFILT,NFIL3,
     &                   MAXIM,' ',.TRUE.,IRTFLG)
              IF (IRTFLG .NE. 0) RETURN

	      IF (IPSF.EQ.2)  THEN
	         CALL  ROT_P(H,NFCNS,ROT)
	         CALL  OPSF_P(LUN,ROT,NFCNS,BQ,NFILT)
	      ELSE
	         CALL  ROT3_P(H,NFCNS,ROT)
	         CALL  OPSF3_P(LUN,ROT,NFCNS,BQ,NFILT)
	      ENDIF
	      GOTO 9999
	   ENDIF
	
	   CALL  RDPRMI(NSLICE,NDUM,NOT_USED,
     &	       'NUMBER OF SLICES (IF 0 THEN 2-D FILTER), (NSLICE)')
	   NSLICE = MAX0(NSLICE,1)

	   IF (MOD(NSAM,2).EQ.0)  THEN
              IF (NSLICE.EQ.1)  THEN
                 IFORM=-12
              ELSE
	         IFORM=-22
              ENDIF
           ELSE
              IF (NSLICE.EQ.1)  THEN
                 IFORM=-11
              ELSE
                 IFORM=-21
              ENDIF
           ENDIF
           LRCL = NSAM+2-MOD(NSAM,2)

           MEMWANT = LRCL*NROW*NSLICE
           ALLOCATE(Q(MEMWANT),STAT=IRTFLG)
           IF (IRTFLG .NE. 0)  THEN
              CALL  ERRT(102,'UNABLE TO ALLOCATE Q',MEMWANT)
              GOTO 9999
	   ENDIF

           MAXIM = 0
           CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'U',IFORM,LRCL,NROW,NSLICE,
     &                   MAXIM,' ',.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9998

           INV = +1
           IF (NSLICE.EQ.1)  THEN
	      CALL  ROT_P(H,NFCNS,ROT)
	      CALL  INF_Q(Q(1),LRCL,NSAM,NROW,ROT,NFCNS)
	      CALL  FMRS_2(Q(1),NSAM,NROW,INV)
           ELSE
	      CALL  ROT3_P(H,NFCNS,ROT)
              CALL  INF3_P(Q(1),LRCL,NSAM,NROW,NSLICE,ROT,NFCNS)
	      CALL  FMRS_3(Q(1),NSAM,NROW,NSLICE,INV)
           ENDIF
           DO K=1,NROW*NSLICE
              CALL WRTLIN(LUN,Q(1+(K-1)*LRCL),LRCL,K)
           ENDDO

9998       CLOSE(LUN)  
9999       IF (ALLOCATED(Q)) DEALLOCATE(Q)
           RETURN

        ENDIF

        END
@


1.18
log
@GPL_2010
@
text
@d3 7
a9 6
C                                                                      *
C  REMEZP                                                              *
C                                USED OPFILE      NOV 00 ARDEAN LEITH       *
C                                USED ALLOCATE    JAN 01 ARDEAN LEITH     *
C                                OPFILEC          FEB 03 ARDEAN LEITH
C                                                                      *
d14 1
a14 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d31 7
a37 8
C                                                                      *
C REMEZP(MAXDIM)                                                       *
C                                                                      *
C  PURPOSE: 	PROGRAM TO DESIGN THE REMEZ FILTER
C
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
d44 2
d54 4
a57 4
	DOUBLE PRECISION  ROT
	DIMENSION         H(66)
	CHARACTER*81      FILNAM
	CHARACTER*1       NULL,WHAT
d65 1
d67 1
@


1.17
log
@GPL License fixed
@
text
@a9 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d11 5
a15 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d17 1
a17 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d22 1
a22 1
C=* This program is distributed in the hope that it will be useful,    *
d24 1
a24 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a25 1
C=*                                                                    *
d27 1
a27 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.16
log
@HRI GPL License used
@
text
@a9 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d13 1
a13 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a32 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.15
log
@opfilec
@
text
@d11 24
@


1.14
log
@nloop,iloop_removed
@
text
@d5 3
a7 2
C                                USED OPFILE NOV 00 ARDEAN LEITH       *
C                                USED ALLOCATE JAN 01 ARDEAN LEITH     *
a24 1
C        0         2         3         4         5         6         7 *
d142 2
a143 1
             CALL OPFILE(.FALSE.,FILNAM,LUN,'U',IFORM,NFILT,NFILT,NFIL3,
d184 1
a184 1
           CALL OPFILE(.FALSE.,FILNAM,LUN,'U',IFORM,LRCL,NROW,NSLICE,
@


1.13
log
@used allocate, fixed memory leak
@
text
@d50 1
a50 1
111     CALL RDPRMI(NFILT,IDUM,NLOOP,ILOOP,'IMPULSE RESPONSE LENGTH')
d127 1
a127 1
	  CALL  RDPRMI(NSAM,NROW,NLOOP,ILOOP,'(NSAM,NROW)')
d129 1
a129 1
789	     CALL  RDPRMI(IPSF,NDUM,NLOOP,ILOOP,
d156 1
a156 1
	   CALL  RDPRMI(NSLICE,NDUM,NLOOP,ILOOP,
@


1.12
log
@used opfile & cosmetic
@
text
@d5 2
a6 1
C                                   USED OPFILE NOV 00 ARDEAN LEITH    *
d33 1
a33 9
        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: Q

        LOGICAL	RUNTIME

C  CHANGES IN COMMON LENGTH SHOULD BE CONSULTED WITH
C  SUBROUTINES CONTAINING ARRAY ROT:
C    ROT_P, ROT3_P, INF_P, INF3_P, INFD3_P, OPSF_P, OPSF3_P
d35 4
d46 1
a46 1
        NULL=CHAR(0)
d50 1
a50 2
111     CALL RDPRMI(NFILT,IDUM,NLOOP,ILOOP,
     &        	'IMPULSE RESPONSE LENGTH')
d53 1
a53 1
	IF (NFCNS.GT.29)  GOTO 111
d55 1
d78 1
a78 1
           DO    J=3,NFREQ,2
d86 1
a86 1
	      DO    J=2,NF2-1,LR
d96 1
a96 1
	   DO    J=1,IDIM
d101 1
a101 1
	   DO    J=2,IDIM
d105 2
a106 2
	   T =(BMA-BMI)/50.0
	   DO    J=1,IDIM
d117 3
a119 1
	IF (WHAT .EQ. 'Y')  THEN
d121 1
a121 1
          IF(IRTFLG.EQ.-1)  RETURN
d128 1
a128 1
	  IF (NSAM.EQ.0)  THEN
d131 1
a131 1
	     IF (IPSF.NE.2.AND.IPSF.NE.3)  GOTO  789
d134 2
a135 2
	        IFORM=3
	        NFIL3=NFILT
d137 2
a138 2
	        IFORM=1
	        NFIL3=1
d153 1
a153 2
	      CLOSE(LUN)
	      RETURN
d158 2
a159 2
	   NSLICE=MAX0(NSLICE,1)
C
d175 6
a180 7
           MEMWANT=LRCL*NROW*NSLICE
           CALL CHKMEM(MEMWANT,BQ,MAXDIM-LENRO,RUNTIME,IPQ,IRTFLG)
           IF (IRTFLG.NE.0)  THEN
              CALL  ERRT(6,'REMEZ ',NE)
              GOTO  333
           ENDIF
           Q = >IPQ
d185 1
a185 1
           IF (IRTFLG .NE. 0) RETURN
d197 1
a197 1
           DO    K=1,NROW*NSLICE
d200 3
a202 1
           CLOSE(LUN)  
a204 4
	ELSEIF (WHAT .EQ. 'N') THEN
	   GOTO  111
	ELSE
	   GOTO  222
d206 1
@


1.11
log
@usedl opfile
@
text
@d54 1
a54 1
     &	'IMPULSE RESPONSE LENGTH')
d57 1
a57 1
	IF(NFCNS.GT.29)  GOTO 111
d63 52
a114 52
      DO    J=1,NFREQ
        BUF(J)=0.0
      ENDDO
      BUF(1)=H(NFCNS)
      KK=NFCNS-1
      DO    J=KK,1,-1
      K=NFREQ-KK+J
      JJ=KK-J+2
      BUF(JJ)=H(J)
      BUF(K)=H(J)
      ENDDO
         NV=LOG2(NFREQ)
         CALL  FFTR_Q(BUF,NV)
C 50 SCALING FACTOR FOR PICTURE
      DELF=50
      NF2=NFREQ/2+1
      W=BUF(2)
      K=1
      DO    J=3,NFREQ,2
      K=K+1
      BUF(K)=BUF(J)
      ENDDO
      BUF(NF2)=W
	LR=NFREQ/((IDIM-1)*2)
	IF(LR.GT.1)  THEN
	K=1
	DO    J=2,NF2-1,LR
	K=K+1
	Z=0.0
	DO    M=1,LR
 	  Z=Z+BUF(J+M-1)
	ENDDO
 	BUF(K)=Z/FLOAT(LR)
	ENDDO
	BUF(IDIM)=BUF(NF2)
	ENDIF
	DO    J=1,IDIM
          BUF(J)=BUF(J)*DELF
	ENDDO
	BMA=BUF(1)
	BMI=BMA
	DO    J=2,IDIM
	BMA=AMAX1(BMA,BUF(J))
	BMI=AMIN1(BMI,BUF(J))
	ENDDO
	T=(BMA-BMI)/50.0
	DO    J=1,IDIM
	  BUF(J)=(BUF(J)-BMI)/T
	ENDDO
         WRITE(NOUT,606)
 606      FORMAT(//15X,'***** FREQUENCY RESPONSE *****')
        CALL MRKUR3(BUF,IDIM,0.,0,60)
d116 1
d118 2
a119 1
     &	'DO YOU LIKE YOUR FILTER (Y/N)',NULL,IRTFLG)
d121 20
a140 20
	CALL  FILERD(FILNAM,NLET,NULL,'FILTER',IRTFLG)
	IF(IRTFLG.EQ.-1)  RETURN
333	WRITE(NOUT,788)
788	FORMAT(' DIMENSIONS OF RESULTING FILTER IN FOURIER SPACE'/
     &	' IF 0 THEN POINT SPREAD FUNCTION IS STORED'/
     &  ' TO BE USED FOR REAL SPACE FILTRATION WITH RC COMMAND') 
	CALL  RDPRMI(NSAM,NROW,NLOOP,ILOOP,
     &	  '(NSAM,NROW)')
	IF (NSAM.EQ.0)  THEN
789	   CALL  RDPRMI(IPSF,NDUM,NLOOP,ILOOP,
     &		'PRODUCE 2-D OR 3-D PSF? (2/3)')
	   IF (IPSF.NE.2.AND.IPSF.NE.3)  GOTO  789
C          PSF TO BE USED IN RC
	   IF (IPSF.EQ.3)  THEN
	      IFORM=3
	      NFIL3=NFILT
	   ELSE
	      IFORM=1
	      NFIL3=1
	   ENDIF
d142 2
a143 2
          MAXIM = 0
          CALL OPFILE(.FALSE.,FILNAM,LUN,'U',IFORM,NFILT,NFILT,NFIL3,
d145 1
a145 1
          IF (IRTFLG .NE. 0) RETURN
d147 10
a156 10
	  IF(IPSF.EQ.2)  THEN
	     CALL  ROT_P(H,NFCNS,ROT)
	     CALL  OPSF_P(LUN,ROT,NFCNS,BQ,NFILT)
	  ELSE
	     CALL  ROT3_P(H,NFCNS,ROT)
	     CALL  OPSF3_P(LUN,ROT,NFCNS,BQ,NFILT)
	  ENDIF
	  CLOSE(LUN)
	  RETURN
	ENDIF
d158 3
a160 3
	CALL  RDPRMI(NSLICE,NDUM,NLOOP,ILOOP,
     &	  'NUMBER OF SLICES (IF 0 THEN 2-D FILTER), (NSLICE)')
	NSLICE=MAX0(NSLICE,1)
d162 44
a205 43
	IF(MOD(NSAM,2).EQ.0)  THEN
	 IF(NSLICE.EQ.1)  THEN
	 IFORM=-12
	 ELSE
	 IFORM=-22
	 ENDIF
	ELSE
	 IF(NSLICE.EQ.1)  THEN
	 IFORM=-11
	 ELSE
	 IFORM=-21
	 ENDIF
	ENDIF
	LRCL=NSAM+2-MOD(NSAM,2)
C
	MEMWANT=LRCL*NROW*NSLICE
	CALL CHKMEM(MEMWANT,BQ,MAXDIM-LENRO,RUNTIME,IPQ,IRTFLG)
	IF(IRTFLG.NE.0)  THEN
		CALL  ERRT(6,'REMEZ ',NE)
		GOTO  333
	ENDIF
         Q = >IPQ

	CALL  OPENF(FILNAM,LUN,LRCL,NROW,'UNKNOWN',IRTFLG,NSLICE)
	IF(IRTFLG.EQ.-1)  THEN
	CALL  ERRT(4,'REMEZ ',NE)
	ELSE
	  INV=+1
	  IF(NSLICE.EQ.1)  THEN
	    CALL  ROT_P(H,NFCNS,ROT)
	    CALL  INF_Q(Q(1),LRCL,NSAM,NROW,ROT,NFCNS)
	    CALL  FMRS_2(Q(1),NSAM,NROW,INV)
	  ELSE
	    CALL  ROT3_P(H,NFCNS,ROT)
            CALL  INF3_P(Q(1),LRCL,NSAM,NROW,NSLICE,ROT,NFCNS)
	    CALL  FMRS_3(Q(1),NSAM,NROW,NSLICE,INV)
	  ENDIF
		DO    K=1,NROW*NSLICE
		  CALL WRTLIN(LUN,Q(1+(K-1)*LRCL),LRCL,K)
		ENDDO
	   CLOSE(LUN)  
	   RETURN
	 ENDIF
d207 1
a207 1
	GOTO  111
d209 1
a209 1
	GOTO  222
@


1.10
log
@header
@
text
@d4 2
a6 1
C                                                                      *
d16 1
a16 1
C                                                                      *
d37 1
d41 1
a41 1
C
d46 1
d48 1
d51 1
a51 1
C  LENRO - MEMORY RESERVED IN COMMON BY ROT AND OTHERS
d127 2
a128 2
	IF(NSAM.EQ.0)  THEN
789	CALL  RDPRMI(IPSF,NDUM,NLOOP,ILOOP,
d130 24
a153 20
	IF(IPSF.NE.2.AND.IPSF.NE.3)  GOTO  789
C PSF TO BE USED IN RC
	IF(IPSF.EQ.3)  THEN
	IFORM=3
	NFIL3=NFILT
	ELSE
	IFORM=1
	NFIL3=1
	ENDIF
	CALL  OPENF(FILNAM,LUN,NFILT,NFILT,'UNKNOWN',IRTFLG,NFIL3)
	IF(IRTFLG.EQ.-1)  THEN
	CALL  ERRT(4,'REMEZ ',NE)
	RETURN
	ENDIF
	IF(IPSF.EQ.2)  THEN
	CALL  ROT_P(H,NFCNS,ROT)
	CALL  OPSF_P(LUN,ROT,NFCNS,BQ,NFILT)
	ELSE
	CALL  ROT3_P(H,NFCNS,ROT)
	CALL  OPSF3_P(LUN,ROT,NFCNS,BQ,NFILT)
d155 1
a155 3
	CLOSE(LUN)
	RETURN
	ENDIF	
@


1.9
log
@*** empty log message ***
@
text
@d2 16
a17 1
C	PROGRAM TO DESIGN THE REMEZ FILTER
d19 7
d27 1
d30 1
a30 1
#ifdef SP_F90
d34 1
a34 4
#else
        DIMENSION    Q(1)
        POINTER      (IPQ,Q) 
#endif
d46 1
a46 1
C
d56 1
a56 1
     &	'PLOT FREQUENCY RESPONSE (Y/N)',NULL,IRTFLG)
a174 1
#ifdef SP_F90
d176 1
a176 1
#endif
@


1.8
log
@f90 alloc
@
text
@a23 1

a24 1
CNO_SAVE
d26 1
a26 1

d165 2
a166 2
	    CALL  INF_Q(Q,LRCL,NSAM,NROW,ROT,NFCNS)
	    CALL  FMRS_2(Q,NSAM,NROW,INV)
d169 2
a170 2
            CALL  INF3_P(Q,LRCL,NSAM,NROW,NSLICE,ROT,NFCNS)
	    CALL  FMRS_3(Q,NSAM,NROW,NSLICE,INV)
a180 1
	WRITE(NOUT,*)  'YOU BETTER MAKE UP YOUR MIND'
@


1.7
log
@*** empty log message ***
@
text
@d7 5
d14 1
d157 3
@


1.6
log
@fixed
@
text
@d35 3
a37 2
      DO  603  J=1,NFREQ
 603  BUF(J)=0.0
d40 1
a40 1
      DO  604  J=KK,1,-1
d45 1
a45 1
 604  CONTINUE
d53 1
a53 1
      DO  605  J=3,NFREQ,2
d55 2
a56 1
 605  BUF(K)=BUF(J)
d61 1
a61 1
	DO  611  J=2,NF2-1,LR
d64 5
a68 3
	DO  612  M=1,LR
 612	Z=Z+BUF(J+M-1)
 611	BUF(K)=Z/FLOAT(LR)
d71 3
a73 2
	DO  608  J=1,IDIM
 608    BUF(J)=BUF(J)*DELF
d76 1
a76 1
	DO  701  J=2,IDIM
d78 2
a79 1
701	BMI=AMIN1(BMI,BUF(J))
d81 3
a83 2
	DO  702  J=1,IDIM
702	BUF(J)=(BUF(J)-BMI)/T
d165 3
a167 2
		DO  11  K=1,NROW*NSLICE
11		CALL WRTLIN(LUN,Q(1+(K-1)*LRCL),LRCL,K)
@


1.5
log
@bugs fixed
@
text
@d127 1
a127 1
	 IFORM=-11
d131 1
a131 1
	 IFORM=-22
d144 1
a144 1
	CALL  OPENF(FILNAM,LUN,NSAM,NROW,'UNKNOWN',IRTFLG,NSLICE)
@


1.4
log
@new FT version
@
text
@d124 5
a128 2
	IF(NSLICE.EQ.1)
	IFORM=-12
d130 5
a134 1
	IFORM=-11
d136 1
a136 8
	ELSE
	IF(NSLICE.EQ.1)
	IFORM=-22
	ELSE
	IFORM=-21
	ENDIF
	ENDIF
	LRCL=NSAM+2-MOD(NSAM+2)
@


1.3
log
@nosave
@
text
@d3 1
a3 1

a4 1
#ifdef SP_UNIX
d6 4
a9 5
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
        COMMON A(80),BUF(1024),ROT(29,29,29),Q(1)

d13 1
a13 1

d26 1
a26 1
     &	'IMPULSE RESPONSE LENGTH$')
d32 1
a32 1
     &	'PLOT FREQUENCY RESPONSE (Y/N)$',NULL,IRTFLG)
d82 1
a82 1
     &	'DO YOU LIKE YOUR FILTER (Y/N)$',NULL,IRTFLG)
d91 1
a91 1
     &	  '(NSAM,NROW)$')
d94 1
a94 1
     &		'PRODUCE 2-D OR 3-D PSF? (2/3)$')
d111 1
a111 1
	CALL  OPSF_P(LUN,ROT,NFCNS,Q,NFILT)
d114 1
a114 1
	CALL  OPSF3_P(LUN,ROT,NFCNS,Q,NFILT)
d120 15
a134 3
     &	  'NUMBER OF SLICES (IF 0 THEN 2-D FILTER), (NSLICE)$')
	IF(NSLICE.EQ.0)  THEN
	NSLICE=1
d136 5
a140 2
	IF(NSLICE.EQ.1)  THEN
		IF((NSAM+2)*NROW.GT.MAXDIM-LENRO)  THEN
a143 6
C FILE FORMAT F2
	IFORM=-1
	ELSE
C  (3-D FFT)  NEW FORMAT
	IFORM=-7
	ENDIF
d148 1
d150 3
a152 3
	  CALL  ROT_P(H,NFCNS,ROT)
	  CALL  INF_Q(Q,NSAM,NROW,ROT,NFCNS)
	  CALL  MAKEF_Q(LUN,Q,NSAM,NROW)
d154 3
a156 12
	  CALL  ROT3_P(H,NFCNS,ROT)
	    IF(NSAM*NROW*NSLICE.LT.MAXDIM-LENRO)  THEN
            CALL  INF3_P(Q,NSAM,NROW,NSLICE,ROT,NFCNS)
	    CALL  MAKEF3_P(LUN,Q,NSAM,NROW,NSLICE)
	    ELSE
		WRITE(NOUT,1177)
1177	FORMAT(
     &	' WARNING!  FILTER WILL BE PREPARED ON DISC',/,
     &  '           IT WILL TAKE SOME TIME')
	    CALL  INFD3_P(LUN,Q,NSAM,NROW,NSLICE,ROT,NFCNS)
	    CALL  MD3_P(LUN,Q,NSAM,NROW,NSLICE)
	    ENDIF
d158 4
a161 2
	  CLOSE(LUN)  
	  RETURN
@


1.2
log
@cpp_lines_added
@
text
@d22 1
@


1.1
log
@Initial revision
@
text
@d5 3
d9 1
@
