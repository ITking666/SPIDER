head	1.18;
access;
symbols
	healthdept_2018:1.18
	pre_getangas:1.17
	GPL2010:1.17
	pre_GPL2010:1.16
	pre_var_equation:1.16
	pre_fftwrings:1.16
	pre_opfiles:1.16
	src:1.16
	best-code:1.16
	x-named-regs:1.16
	x:1.16
	v13-00:1.16
	pre_GPL:1.15
	prec_CA:1.15
	noindx:1.15
	Bproc:1.12
	oct21:1.6
	last77:1.6;
locks; strict;
comment	@c @;


1.18
date	2018.10.03.14.34.23;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2010.06.24.13.27.04;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.17.20.56.32;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.11.14.08.53;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2002.03.08.21.21.11;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.01.20.26.47;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.08.17.15.51.07;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.08.16.19.19.46;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.08.15.18.04.33;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2000.08.10.16.40.35;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.10.16.07.34;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.07.14.23.04;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.02.11.16.59.56;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	99.02.10.22.03.55;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	99.02.10.18.50.19;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	99.02.10.18.49.03;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	99.02.09.15.38.07;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	99.02.09.14.07.15;	author pawel;	state Exp;
branches;
next	;


desc
@SA 3
@


1.18
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C  SUMALI3.F                USED REG_SET AUG 00 ARDEAN LEITH
C                           REMOVED INPUT REGISTERS AUG 01 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  SUMALI3     
C
C  PURPOSE:  TO 'SUM' ANGLES,SHIFTS FROM TWO ALIGNMENT CYCLES IN 3D
C            ROTATION FIRST, TRANSLATION SECOND
C            Y=R2(R1*X+S)+T
C--*********************************************************************

	SUBROUTINE SUMALI3

	INCLUDE 'CMBLOCK.INC'
	
	DIMENSION         FI1(3),FI2(3),FIO(3),S(3),T(3)
        DOUBLE PRECISION  R2(3,3)

        CALL REG_GET_USED(NSEL_USED)

        IF (NSEL_USED .GT. 6) THEN
C         DEPRECATED REGISTER INPUT USED (AUG 01)
          CALL REG_GET_NSEL(1, FI1(3),FI1(2),FI1(1),S(1),  S(2),IRTFLG)
          CALL REG_GET_NSEL(6, S(3),  FI2(3),FI2(2),FI2(1),T(1),IRTFLG)
          CALL REG_GET_NSEL(11,T(2),  T(3), FDUM, FDUM, FDUM,IRTFLG)
          IREGO = 13
        ELSE
C         PREFERRED INPUT METHOD
          CALL RDPRM3S(FI1(3),FI1(2),FI1(1),NOT_USED,
     &       'FIRST TRANSFORMATION ROTATION ANGLES (PHI, THETHA, PSI)',
     &       IRTFLG)
          IF (IRTFLG .NE. 0) RETURN

          CALL RDPRM3S(S(1),S(2),S(3),NOT_USED,
     &       'FIRST TRANSFORMATION SHIFTS (X, Y, Z)',IRTFLG)
          IF (IRTFLG .NE. 0) RETURN
 
          CALL RDPRM3S(FI2(3),FI2(2),FI2(1),NOT_USED,
     &       'SECOND TRANSFORMATION ROTATION ANGLES (PHI, THETHA, PSI)',
     &       IRTFLG)
          IF (IRTFLG .NE. 0) RETURN

          CALL RDPRM3S(T(1),T(2),T(3),NOT_USED,
     &       'SECOND TRANSFORMATION SHIFTS (X, Y, Z)',IRTFLG)
          IF (IRTFLG .NE. 0) RETURN
          IREGO = 1
        ENDIF

        CALL  BLDR(R2,FI2(1),FI2(2),FI2(3))

        DO J=1,3
           DO K=1,3
              T(J)=T(J)+R2(J,K)*S(K)
           ENDDO
        ENDDO

	CALL CALDS3(FI1,R2,FIO)

        CALL REG_SET_NSEL(IREGO,5,FIO(3),FIO(2),FIO(1),T(1),T(2),IRTFLG)
        CALL REG_SET_NSEL(IREGO+5,1,T(3),0.0,0.0 ,0.0,0.0,IRTFLG)

        RETURN
	END



         SUBROUTINE  CALDS3(FI1,R2,FIO)

	 DOUBLE PRECISION  QUADPI,RAD_TO_DGR
	 PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
	 PARAMETER (RAD_TO_DGR = (180.0/QUADPI))
         DIMENSION         FI1(3),FIO(3)
         DOUBLE PRECISION  R1(3,3),R2(3,3),R3(3,3)
         DOUBLE PRECISION  PSI,THETA,PHI,DEPS

         DATA  DEPS/1.0D-7/

         CALL  BLDR(R1,FI1(1),FI1(2),FI1(3))
         DO I=1,3
            DO J=1,3
               R3(I,J)=0.0
                  DO K=1,3
                     R3(I,J)=R3(I,J)+R2(I,K)*R1(K,J)
	          ENDDO
 	       ENDDO
	    ENDDO

C           LIMIT PRECISION
            DO J=1,3
               DO I=1,3
                  IF(DABS(R3(I,J)).LT.DEPS)  R3(I,J)=0.0D0
                  IF(R3(I,J)-1.0D0.GT.-DEPS)  R3(I,J)=1.0D0
                  IF(R3(I,J)+1.0D0.LT.DEPS)  R3(I,J)=-1.0D0
	       ENDDO
	    ENDDO
C
            IF (R3(3,3).EQ.1.0)  THEN
               THETA=0.0
               PSI=0.0
               IF (R3(1,1).EQ.0.0)  THEN
                  PHI=RAD_TO_DGR*DASIN(R3(1,2))
               ELSE
                  PHI=RAD_TO_DGR*DATAN2(R3(1,2),R3(1,1))
               ENDIF
            ELSEIF (R3(3,3).EQ.-1.0)  THEN
               THETA=180.0
               PSI=0.0
               IF (R3(1,1).EQ.0.0)  THEN
                  PHI = RAD_TO_DGR*DASIN(-R3(1,2))
               ELSE
                  PHI = RAD_TO_DGR*DATAN2(-R3(1,2),-R3(1,1))
               ENDIF
            ELSE
               THETA = RAD_TO_DGR*DACOS(R3(3,3))
               ST    = DSIGN(1.0D0,THETA)
               IF (R3(3,1) .EQ. 0.0)  THEN
                  IF (ST .NE. DSIGN(1.0D0,R3(3,2)))  THEN
                  PHI = 270.0
               ELSE
                  PHI = 90.0
               ENDIF
            ELSE
               PHI = RAD_TO_DGR*DATAN2(R3(3,2)*ST,R3(3,1)*ST)
            ENDIF
            IF (R3(1,3) .EQ. 0.0)  THEN
               IF (ST.NE.DSIGN(1.0D0,R3(2,3)))  THEN
                  PSI = 270.0
               ELSE
                  PSI = 90.0
               ENDIF
            ELSE
               PSI = RAD_TO_DGR*DATAN2(R3(2,3)*ST,-R3(1,3)*ST)
            ENDIF
         ENDIF

         IF (PSI.LT.0.0)     PSI   = PSI+360.0
         IF (THETA.LT.0.0)   THETA = THETA+360.0
         IF (PHI.LT.0.0)     PHI   = PHI+360.0

         FIO(1) = PSI
         FIO(2) = THETA
         FIO(3) = PHI
         END
@


1.17
log
@GPL_2010
@
text
@d13 1
a13 1
C=* Email: spider@@wadsworth.org                                        *
@


1.16
log
@GPL License fixed
@
text
@a7 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d9 5
a13 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d15 1
a15 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.15
log
@nloop,iloop_removed
@
text
@d7 25
a31 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,2001, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH  			   *
C **************************************************************************
d38 1
a38 1
C--*************************************************************************
@


1.14
log
@NLOOPD bug
@
text
@d41 1
a41 1
          CALL RDPRM3S(FI1(3),FI1(2),FI1(1),NLOOP,ILOOP,
d46 1
a46 1
          CALL RDPRM3S(S(1),S(2),S(3),NLOOP,ILOOP,
d50 1
a50 1
          CALL RDPRM3S(FI2(3),FI2(2),FI2(1),NLOOP,ILOOP,
d55 1
a55 1
          CALL RDPRM3S(T(1),T(2),T(3),NLOOP,ILOOP,
@


1.13
log
@removed register input
@
text
@d41 1
a41 1
          CALL RDPRM3S(FI1(3),FI1(2),FI1(1),NLOOPD,ILOOPD,
d46 1
a46 1
          CALL RDPRM3S(S(1),S(2),S(3),NLOOPD,ILOOPD,
d50 1
a50 1
          CALL RDPRM3S(FI2(3),FI2(2),FI2(1),NLOOPD,ILOOPD,
d55 1
a55 1
          CALL RDPRM3S(T(1),T(2),T(3),NLOOPD,ILOOPD,
@


1.12
log
@reg_set_nsel params changed
@
text
@d4 2
a5 1
C  SUMALI3.F                    USED REG_SET AUG 00 ARDEAN LEITH
d9 1
a9 1
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
d31 1
a31 10
C	DO I=1,3
C          FI1(4-I)=PARAM(NSEL(I))
C          S(I)    =PARAM(NSEL(3+I))
C          FI2(4-I)=PARAM(NSEL(6+I))
C          T(I)    =PARAM(NSEL(9+I))
C	ENDDO

        CALL REG_GET_NSEL(1, FI1(3),FI1(2),FI1(1),S(1),  S(2),IRTFLG)
        CALL REG_GET_NSEL(6, S(3),  FI2(3),FI2(2),FI2(1),T(1),IRTFLG)
        CALL REG_GET_NSEL(11,T(2),  T(3), FDUM, FDUM, FDUM,IRTFLG)
d33 28
d71 2
a72 7
c	DO  I=1,3
c          PARAM(NSEL(12+I)) = FIO(4-I)
c          PARAM(NSEL(15+I)) = T(I)
c	ENDDO

        CALL REG_SET_NSEL(13,5,FIO(3),FIO(2),FIO(1) ,T(1),T(2),IRTFLG)
        CALL REG_SET_NSEL(18,1,T(3),0.0,0.0 ,0.0,0.0,IRTFLG)
d84 1
a84 1
         DIMENSION  FI1(3),FIO(3)
d91 2
a92 2
         DO    I=1,3
            DO    J=1,3
d94 1
a94 1
                  DO    K=1,3
d101 2
a102 2
            DO    J=1,3
               DO    I=1,3
d109 1
a109 1
            IF(R3(3,3).EQ.1.0)  THEN
d112 1
a112 1
               IF(R3(1,1).EQ.0.0)  THEN
d117 1
a117 1
            ELSEIF(R3(3,3).EQ.-1.0)  THEN
d120 2
a121 2
               IF(R3(1,1).EQ.0.0)  THEN
                  PHI=RAD_TO_DGR*DASIN(-R3(1,2))
d123 1
a123 1
                  PHI=RAD_TO_DGR*DATAN2(-R3(1,2),-R3(1,1))
d126 5
a130 5
               THETA=RAD_TO_DGR*DACOS(R3(3,3))
               ST=DSIGN(1.0D0,THETA)
               IF(R3(3,1).EQ.0.0)  THEN
                  IF(ST.NE.DSIGN(1.0D0,R3(3,2)))  THEN
                  PHI=270.0
d132 1
a132 1
                  PHI=90.0
d135 1
a135 1
               PHI=RAD_TO_DGR*DATAN2(R3(3,2)*ST,R3(3,1)*ST)
d137 3
a139 3
            IF(R3(1,3).EQ.0.0)  THEN
               IF(ST.NE.DSIGN(1.0D0,R3(2,3)))  THEN
                  PSI=270.0
d141 1
a141 1
                  PSI=90.0
d144 1
a144 1
               PSI=RAD_TO_DGR*DATAN2(R3(2,3)*ST,-R3(1,3)*ST)
@


1.11
log
@bad t ordering on input
@
text
@d39 1
a39 1
        CALL REG_GET_NSEL(11,T(2),  T(3),0.0,0.0,0.0,IRTFLG)
d56 2
a57 2
        CALL REG_SET_NSEL(13,FIO(3),FIO(2),FIO(1) ,T(1),T(2),IRTFLG)
        CALL REG_SET_NSEL(18,T(3),0.0,0.0 ,0.0,0.0,IRTFLG)
d59 1
@


1.10
log
@bad parameter setting
@
text
@d37 1
a37 1
        CALL REG_GET_NSEL(1, FI1(3),FI1(2),FI1(1),S(3),  S(2),IRTFLG)
@


1.9
log
@typs & cosmetic
@
text
@d2 1
a2 1
C++***************************************************************1/5/82
d16 1
a16 1
C  SUMALI3.F    
d25 3
a27 2
	INCLUDE 'CMBLOCK.INC'	
	DIMENSION  FI1(3),FI2(3),FIO(3),S(3),T(3)
d56 2
a57 2
        CALL REG_SET_NSEL(13,FIO(3),FIO(2),FIO(1) ,T(1),T(1),IRTFLG)
        CALL REG_SET_NSEL(18,T(2),0.0,0.0 ,0.0,0.0,IRTFLG)
d132 7
a138 7
         IF(PSI.LT.0.0)  PSI=PSI+360.0
         IF(THETA.LT.0.0)  THETA=THETA+360.0
         IF(PHI.LT.0.0)  PHI=PHI+360.0

         FIO(1)=PSI
         FIO(2)=THETA
         FIO(3)=PHI
@


1.8
log
@used reg_get
@
text
@d29 7
a35 6
c	DO  I=1,3
c          FI1(4-I)=PARAM(NSEL(I))
c          S(I)    =PARAM(NSEL(3+I))
c          FI2(4-I)=PARAM(NSEL(6+I))
c          T(I)    =PARAM(NSEL(9+I))
	ENDDO
d41 3
a43 2
        DO    J=1,3
           DO    K=1,3
d47 1
d49 1
d54 1
d62 5
a66 4
        SUBROUTINE  CALDS3(FI1,R2,FIO)
	DOUBLE PRECISION  QUADPI,RAD_TO_DGR
	PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
	PARAMETER (RAD_TO_DGR = (180.0/QUADPI))
d70 1
d75 16
a90 17
         DO    J=1,3
         R3(I,J)=0.0
         DO    K=1,3
         R3(I,J)=R3(I,J)+R2(I,K)*R1(K,J)
	 ENDDO
 	 ENDDO
	 ENDDO

C<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
C  Limit precision
         DO    J=1,3
         DO    I=1,3
         IF(DABS(R3(I,J)).LT.DEPS)  R3(I,J)=0.0D0
         IF(R3(I,J)-1.0D0.GT.-DEPS)  R3(I,J)=1.0D0
         IF(R3(I,J)+1.0D0.LT.DEPS)  R3(I,J)=-1.0D0
	 ENDDO
	 ENDDO
d92 37
a128 7
         IF(R3(3,3).EQ.1.0)  THEN
         THETA=0.0
         PSI=0.0
         IF(R3(1,1).EQ.0.0)  THEN
         PHI=RAD_TO_DGR*DASIN(R3(1,2))
         ELSE
         PHI=RAD_TO_DGR*DATAN2(R3(1,2),R3(1,1))
d130 1
a130 30
         ELSEIF(R3(3,3).EQ.-1.0)  THEN
         THETA=180.0
         PSI=0.0
         IF(R3(1,1).EQ.0.0)  THEN
         PHI=RAD_TO_DGR*DASIN(-R3(1,2))
         ELSE
         PHI=RAD_TO_DGR*DATAN2(-R3(1,2),-R3(1,1))
         ENDIF
         ELSE
         THETA=RAD_TO_DGR*DACOS(R3(3,3))
         ST=DSIGN(1.0D0,THETA)
         IF(R3(3,1).EQ.0.0)  THEN
         IF(ST.NE.DSIGN(1.0D0,R3(3,2)))  THEN
         PHI=270.0
         ELSE
         PHI=90.0
         ENDIF
         ELSE
         PHI=RAD_TO_DGR*DATAN2(R3(3,2)*ST,R3(3,1)*ST)
         ENDIF
         IF(R3(1,3).EQ.0.0)  THEN
         IF(ST.NE.DSIGN(1.0D0,R3(2,3)))  THEN
         PSI=270.0
         ELSE
         PSI=90.0
         ENDIF
         ELSE
         PSI=RAD_TO_DGR*DATAN2(R3(2,3)*ST,-R3(1,3)*ST)
         ENDIF
         ENDIF
d134 1
a134 1
C<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@


1.7
log
@removed readpq
@
text
@d4 1
a4 1
C  SUMALI3.F
d29 5
a33 5
	DO  I=1,3
           FI1(4-I)=PARAM(NSEL(I))
           S(I)=PARAM(NSEL(3+I))
           FI2(4-I)=PARAM(NSEL(6+I))
           T(I)=PARAM(NSEL(9+I))
d35 4
d46 7
a52 4
	DO  I=1,3
           PARAM(NSEL(12+I)) = FIO(4-I)
           PARAM(NSEL(15+I)) = T(I)
	ENDDO
@


1.6
log
@*** empty log message ***
@
text
@d24 1
d28 1
a28 7
	CALL READPQ(FCHAR)
	DO I=7,18
	   IF (NSEL(I) .GT.99 .OR .NSEL(I).LT.3) THEN
              CALL ERRT(101,'ILLEGAL REGISTER USED',NERR)
              RETURN
           ENDIF
        ENDDO
d30 4
a33 4
	FI1(4-I)=PARAM(NSEL(I))
	S(I)=PARAM(NSEL(3+I))
	FI2(4-I)=PARAM(NSEL(6+I))
	T(I)=PARAM(NSEL(9+I))
d35 6
a40 6
         CALL  BLDR(R2,FI2(1),FI2(2),FI2(3))
         DO    J=1,3
         DO    K=1,3
         T(J)=T(J)+R2(J,K)*S(K)
	 ENDDO
 	 ENDDO
d43 2
a44 2
	PARAM(NSEL(12+I)) = FIO(4-I)
	PARAM(NSEL(15+I)) = T(I)
d47 4
a50 22
C++************************************************************************
C
C $$ CALDS3.FOR
C
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
C **************************************************************************
C
C
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--************************************************************************
C
C $$ CALDS3.FOR
C
         SUBROUTINE  CALDS3(FI1,R2,FIO)
d58 1
a58 1
C
d68 1
a68 1
C
@


1.5
log
@*** empty log message ***
@
text
@d114 1
a114 1
         PHI=DASIND(-R3(1,2))
@


1.4
log
@*** empty log message ***
@
text
@d137 1
a137 1
         PSIRAD_TO_DGR*=DATAN2(R3(2,3)*ST,-R3(1,3)*ST)
@


1.3
log
@trig
@
text
@d74 1
a74 1
	DOUBLE PRECISION  QUADPI,DRG_TO_RAD
@


1.2
log
@*** empty log message ***
@
text
@a26 1
CNO_SAVE
d74 3
a79 3
#ifdef SP_F90
	DOUBLE PRECISION  DCOSD,DSIND,DATAN2D
#endif
a80 1
CNO_SAVE
d106 1
a106 1
         PHI=DASIND(R3(1,2))
d108 1
a108 1
         PHI=DATAN2D(R3(1,2),R3(1,1))
d116 1
a116 1
         PHI=DATAN2D(-R3(1,2),-R3(1,1))
d119 1
a119 1
         THETA=DACOSD(R3(3,3))
d128 1
a128 1
         PHI=DATAN2D(R3(3,2)*ST,R3(3,1)*ST)
d137 1
a137 1
         PSI=DATAN2D(R3(2,3)*ST,-R3(1,3)*ST)
@


1.1
log
@Initial revision
@
text
@d47 1
a47 1
	CALL CALDS(FI1,R2,FIO)
@
