head	1.80;
access;
symbols
	pre_mrcs:1.80
	healthdept_2018:1.80
	pre_getangas:1.69
	GPL2010:1.68
	pre_GPL2010:1.67
	pre_var_equation:1.67
	pre_fftwrings:1.65
	pre_opfiles:1.65
	src:1.65
	best-code:1.63
	named-reg:1.61
	x-named-regs:1.60
	x:1.60
	v13-00:1.59
	pre_GPL:1.58
	prec_CA:1.54
	noindx:1.52
	Bproc:1.31
	oct21:1.28
	last77:1.20;
locks; strict;
comment	@c @;


1.80
date	2018.10.03.14.34.05;	author leith;	state Exp;
branches;
next	1.79;

1.79
date	2016.11.29.16.01.48;	author leith;	state Exp;
branches;
next	1.78;

1.78
date	2016.04.19.16.11.19;	author leith;	state Exp;
branches;
next	1.77;

1.77
date	2016.03.08.16.51.46;	author leith;	state Exp;
branches;
next	1.76;

1.76
date	2014.08.29.14.04.55;	author leith;	state Exp;
branches;
next	1.75;

1.75
date	2014.05.01.14.42.19;	author leith;	state Exp;
branches;
next	1.74;

1.74
date	2014.01.09.17.17.14;	author leith;	state Exp;
branches;
next	1.73;

1.73
date	2013.10.15.18.08.10;	author leith;	state Exp;
branches;
next	1.72;

1.72
date	2013.10.15.17.54.51;	author leith;	state Exp;
branches;
next	1.71;

1.71
date	2012.10.10.15.34.11;	author leith;	state Exp;
branches;
next	1.70;

1.70
date	2011.06.03.15.12.41;	author leith;	state Exp;
branches;
next	1.69;

1.69
date	2010.09.29.16.18.53;	author leith;	state Exp;
branches;
next	1.68;

1.68
date	2010.06.24.13.25.28;	author leith;	state Exp;
branches;
next	1.67;

1.67
date	2009.01.26.13.47.13;	author leith;	state Exp;
branches;
next	1.66;

1.66
date	2008.10.17.12.53.16;	author leith;	state Exp;
branches;
next	1.65;

1.65
date	2006.10.11.13.07.28;	author leith;	state Exp;
branches;
next	1.64;

1.64
date	2006.07.31.14.35.56;	author leith;	state Exp;
branches;
next	1.63;

1.63
date	2006.01.05.15.38.05;	author leith;	state Exp;
branches;
next	1.62;

1.62
date	2005.12.30.16.50.51;	author leith;	state Exp;
branches;
next	1.61;

1.61
date	2005.12.12.15.26.36;	author leith;	state Exp;
branches;
next	1.60;

1.60
date	2005.11.15.21.50.45;	author leith;	state Exp;
branches;
next	1.59;

1.59
date	2005.10.17.20.53.17;	author leith;	state Exp;
branches;
next	1.58;

1.58
date	2004.08.03.14.47.14;	author leith;	state Exp;
branches;
next	1.57;

1.57
date	2004.01.21.17.16.30;	author pawel;	state Exp;
branches;
next	1.56;

1.56
date	2004.01.21.16.54.28;	author pawel;	state Exp;
branches;
next	1.55;

1.55
date	2003.12.03.16.30.44;	author leith;	state Exp;
branches;
next	1.54;

1.54
date	2003.09.03.15.56.50;	author leith;	state Exp;
branches;
next	1.53;

1.53
date	2003.01.28.21.42.27;	author leith;	state Exp;
branches;
next	1.52;

1.52
date	2002.11.19.16.08.01;	author leith;	state Exp;
branches;
next	1.51;

1.51
date	2002.06.26.19.37.44;	author leith;	state Exp;
branches;
next	1.50;

1.50
date	2002.03.11.14.08.47;	author leith;	state Exp;
branches;
next	1.49;

1.49
date	2001.07.27.17.24.39;	author leith;	state Exp;
branches;
next	1.48;

1.48
date	2001.06.20.13.44.05;	author leith;	state Exp;
branches;
next	1.47;

1.47
date	2001.06.01.16.59.43;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2001.04.17.20.28.03;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2001.04.17.20.19.38;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2001.04.09.14.25.10;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2001.03.19.18.02.56;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2001.02.22.14.28.25;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2001.01.05.21.02.03;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	2001.01.04.18.51.18;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2000.11.01.18.08.16;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2000.10.12.18.34.00;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2000.10.12.18.28.40;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2000.09.27.17.37.25;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2000.09.27.16.26.54;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2000.09.26.18.28.27;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2000.09.19.20.00.32;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2000.09.18.18.39.28;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2000.09.14.14.35.59;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2000.08.09.14.07.30;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2000.08.08.18.16.26;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	99.10.19.21.03.16;	author pawel;	state Exp;
branches;
next	1.27;

1.27
date	99.10.05.17.57.11;	author bimal;	state Exp;
branches;
next	1.26;

1.26
date	99.10.05.13.14.51;	author pawel;	state Exp;
branches;
next	1.25;

1.25
date	99.09.15.14.55.19;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	99.08.24.14.09.00;	author pawel;	state Exp;
branches;
next	1.23;

1.23
date	99.08.24.14.03.38;	author pawel;	state Exp;
branches;
next	1.22;

1.22
date	99.08.24.14.01.29;	author pawel;	state Exp;
branches;
next	1.21;

1.21
date	99.08.09.14.18.43;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	99.02.09.16.31.14;	author pawel;	state Exp;
branches;
next	1.19;

1.19
date	99.02.09.14.58.12;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	99.02.08.22.25.02;	author pawel;	state Exp;
branches;
next	1.17;

1.17
date	98.08.04.17.47.29;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	97.08.29.15.24.57;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	97.08.29.14.31.34;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	97.07.16.13.50.12;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	97.07.07.18.12.36;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	96.11.22.15.18.33;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	96.09.30.15.43.07;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	96.09.05.14.37.13;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	95.09.26.18.04.58;	author mladjadj;	state Exp;
branches;
next	1.8;

1.8
date	95.07.07.18.53.03;	author mladjadj;	state Exp;
branches;
next	1.7;

1.7
date	95.05.23.16.22.39;	author mladjadj;	state Exp;
branches;
next	1.6;

1.6
date	94.08.26.14.46.27;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	94.08.26.14.19.39;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	94.07.08.16.12.31;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	94.07.08.14.15.11;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.04.29;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.48.23;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.80
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C    DRIV1
C            CALLS ROUTINES REMOVED FROM DRIVER   MAR 93   ARDEAN LEITH
C            CHANGED READRQ PARAMETERS PASSED     AUG 99   ARDEAN LEITH
C            'FR' MOVED TO SPIDER                 SEP 2000 ARDEAN LEITH
C            'PO' FOR POLAR CONVERSION            SEP 2000 PP
C            'FR L' ADDED                         MAR 2001 ARDEAN LEITH
C            SIMPLIFED WITH SETSYMPAR IN RDPR     APR 2001 ARDEAN LEITH
C            SYMPAR                               JUN 2002 ARDEAN LEITH
C            MULTILINE 'VMS'                      SEP 2003 ARDEAN LEITH
C            'MD' TO SPIDER.f                     DEC 2003 ARDEAN LEITH
C            'VO IA' & 'VO EPT'                   AUG 2004 ARDEAN LEITH
C            'PI IMG'                             JAN 2006 ARDEAN LEITH
C            'VM CD'                              JAN 2009 ARDEAN LEITH
C            'TM' REGISTER                        SEP 2010 ARDEAN LEITH
C            'TM' NOT RESET TO ZERO BUG           JUN 2011 ARDEAN LEITH
C            'VO TA' REMOVED                      OCT 2012 ARDEAN LEITH
C            'PO R'                               OCT 2013 ARDEAN LEITH
C            'NC' SHOULD NOT CLOSE NDAT           JAN 2014 ARDEAN LEITH
C            FINDRIDGES                           APR 2014 ARDEAN LEITH
C            FINDRIDGES(RIDGESONLY)               MAR 2016 ARDEAN LEITH
C            FINDRIDGES(AVGLOC)                   NOV 2016 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2016  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   DRIV1(MAXDIM)
C
C   PURPOSE:   CALLS ROUTINES REMOVED FROM DRIVER 
C
C   PARAMETERS: MAXDIM     MAX LENGTH OF COMMON BUFFER
C
C23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
C--*********************************************************************

      SUBROUTINE DRIV1(MAXDIM)

      INCLUDE 'CMBLOCK.INC'
      INCLUDE 'CMLIMIT.INC'

      CHARACTER (LEN=1)       :: SWITCH
      CHARACTER (LEN=4)       :: CXNUM
      COMMON /DRIV1_COM/ T1,LOOPREG,CXNUM

      CHARACTER(LEN=2*MAXNAM) :: RESPONSE,PROMPT
      CHARACTER(LEN=7)        :: EXTEN
      INTEGER                 :: HRS,MIN,SEC
      LOGICAL                 :: MULTILINE,RIDGESONLY,AVGLOC
      INTEGER                 :: ICOMM,MYPID,MPIERR

      CHARACTER(LEN=1)        :: NULL = CHAR(0)

      INTEGER, PARAMETER      :: LUNDOC = 77

c     MENU/'NC','VM','ME','CK','TM',
c     &    'SR','RR','FR','PO','SA',
c     &    'VO','EV','PI','PB','RI'/   -- IS FOR INITILIZING EXTEN

      CALL SET_MPI(ICOMM,MYPID,MPIERR) ! SETS ICOMM AND MYMPID


      SELECT CASE(FCHAR(1:2))

      CASE('NC','--') !  NEW FILE EXTENSION ----------------------- NC
         !!!!CLOSE(NDAT) jan 2014 al

C        GET THE PROJECT AND DATA EXTENSION
100      IRTFLG = -999

         CALL RDPRMC(EXTEN,NC,.TRUE.,'PROJECT/DATA EXTENSION',
     &             NULL,IRTFLG)

C        MAKE SURE PROJECT EXTENSION IS VALID
         IF (NC < 3 .OR. IRTFLG .NE. 0) THEN
            IF (MYPID .LE. 0)
     &         WRITE(NOUT,*) ' *** EXTENSION MUST BE 3 CHARACTERS'
            GOTO 100
         ENDIF

         PRJEXC(1:3) = EXTEN(1:3)

         IF (EXTEN(4:4) .NE. '/') THEN
            DATEXC(1:3) = PRJEXC(1:3)
         ELSE
            DATEXC(1:3) = EXTEN(5:7)
         ENDIF


       CASE('VM')   !  VMS SPAWN COMMANDS SYSTEM CALL -------------- VM
          IF (FCHAR(4:4) == 'C') THEN
             CALL VMS_CD()
          ELSE
             MULTILINE =  (FCHAR(4:4) == 'M') 
             CALL VMS(MULTILINE)
          ENDIF

       CASE('ME')   !  MENU LISTING -------------------------------- ME
          WRITE(NOUT,*)
     &         ' OPERATION NO LONGER SUPPORTED, USE MANUAL INSTEAD'
          CALL ERRT(100,'DRIV1',NE)


       CASE('CK')   !  CHECKPOINT OPERATION ------------------------ CK
C        WRITE OUT CURRENT OPERATION AND CURRENT ITERATION NUMBER.
         IF (NTRACE.NE.0) THEN
            WRITE(NOUT,9020) FCHAR(1:NALPH)
9020        FORMAT(' ',A)
	    IF (IABSLP .NE. 0 .AND. LOOPREG .NE. 0) THEN
               IF (LOOPREG < 103) THEN 
                  WRITE(NOUT,9040) LOOPREG,IABSLP
9040              FORMAT('  LOOP COUNTER (',I3,') = ',I5)
               ELSE
                  WRITE(NOUT,9041) CHAR(LOOPREG-103),IABSLP
9041              FORMAT('  LOOP INDEX (',A,') = ',I5)
               ENDIF
             ENDIF
          ENDIF


       CASE('TM')   !  TIME OPERATION ------------------------------ TM
C        GET NUMBER OF SEC. SINCE LAST TM, AND COMPUTE HOURS,MIN, & SEC
         TIM  = SECNDS(T1)
	 HRS  = INT(TIM/3600.)
	 HOUR = HRS*3600.
	 MIN  = INT((TIM-HOUR)/60.)
	 SEC  = TIM-HOUR-MIN*60.

	 WRITE(NDAT,9240)HRS,MIN,SEC
9240	 FORMAT(' TIME: ',I2,' HOURS  ',I2,' MINUTES  ',I2,' SECONDS')
       
         CALL REG_SET_NSEL(1,1,TIM,0.0,0.0,0.0,0.0,IRTFLG)
         T1 = SECNDS(0.0)   ! RESET TO ZERO


       CASE('SR')   !  SAVE REGISTERS ------------------------------ SR
          CALL RDPRMC(SWITCH,NLET,.TRUE.,'(S)AVE OR (U)NSAVE',NULL,IRT)
	  IF (IRT .NE. 0) GOTO 9999
           
          CALL ERRT(101,'OBSOLETE OPERATION NO LONGER SUPPORTED',NE)
          GOTO 9999


       CASE('RR')   !  READ REGISTER ------------------------------- RR
          CALL READRQ()
          GOTO 9999


       CASE('FR')   !  FILE READ ----------------------------------- FR
          CALL SYMPAR(LUNDOC)
          GOTO 9999
 
 
       CASE('RI')   !   RIDGE LOCATIONS ---------------------------- RI

          IF (FCHAR(4:5) == 'RV') THEN 
C            FIND RIDGES & VALLEYS 
             RIDGESONLY = .FALSE.
             CALL FINDRIDGES(RIDGESONLY,.FALSE.)

          ELSEIF (FCHAR(4:4) == 'A') THEN 
C            FIND AVERAGE LOCATION OF RIDGES 
             RIDGESONLY = .TRUE.
             AVGLOC     = .TRUE.
             CALL FINDRIDGES(RIDGESONLY,AVGLOC)

          ELSE  
C            FIND VERTICAL RIDGES 
             RIDGESONLY = .TRUE.
             CALL FINDRIDGES(RIDGESONLY,.FALSE.)

          ENDIF


       CASE('PO')   !   POLAR CONVERSION --------------------------- PO

          IF     (FCHAR(4:4) == 'R') THEN
C            CONVERT TO POLAR REPRESENTATION - RAYS ALONG X DIMENSION 
             CALL TO_RAYS()

          ELSEIF (FCHAR(4:4) == 'P') THEN   
             CALL TO_PEAKS()

          ELSE
C            CONVERT TO POLAR REPRESENTATION - RAYS ALONG Y DIMENSION 
             CALL TO_POLAR()
          ENDIF


       CASE('SA')   !    SUM ALIGNMENTS ---------------------------- SA
          IF (FCHAR(4:4) == 'P')    THEN
            CALL SUMALI(.TRUE.)

          ELSEIF(FCHAR(4:4) == '3') THEN
            CALL SUMALI3

          ELSEIF(FCHAR(4:4) == 'E') THEN
            CALL SUMEULER

          ELSE
            CALL SUMALI(.FALSE.)

          ENDIF


       CASE('VO')   !    ------------------------------------------- VO

         IF (FCHAR(4:5) == 'EA')      THEN
           CALL VOEA(MAXDIM)

         ELSEIF (FCHAR(4:6) == 'NEA') THEN
           CALL VONEA()

         ELSEIF (FCHAR(4:6) == 'RAS') THEN
           CALL VORA()

         ELSEIF (FCHAR(4:5) == 'RA')  THEN
           CALL VORA()

         ELSEIF (FCHAR(4:5) == 'MD')  THEN
           CALL VOMD

         ELSEIF (FCHAR(4:5) == 'MQ')  THEN
           CALL VOMQ

         ELSEIF (FCHAR(4:5) == 'EP')  THEN
           CALL VOEPT

         ELSEIF (FCHAR(4:5) == 'IA')  THEN
           CALL VOIA

         ELSEIF (FCHAR(4:5) == 'DA')  THEN
           WRITE(NOUT,*) ' UNDOCUMENTED OPERATION'
           CALL VODA

         ELSEIF (FCHAR(4:5) == 'TA')  THEN
           !CALL VOTA(MAXDIM) oct 2012 al
           CALL ERRT(101,
     &          'UNDOCUMENTED OPERATION, NO LONGER SUPPORTED',NE)
         ENDIF


       CASE('EV')   !    ---SET ENVIRONMENTAL VARIABLE ------------ EV
         IRTFLG = -999
C        IRTFLG = -999 DOES NOT CONVERT INPUT TO UPPERCASE

         CALL RDPRMC(PROMPT,NLET1,.TRUE.,'ENVIRONMENT VARIABLE',
     &               NULL,IRTFLG)
         IF (IRTFLG .NE. 0) GOTO 9999
         IRTFLG = -999
         CALL RDPRMC(RESPONSE,NLET2,.TRUE.,'VALUE',NULL,IRTFLG)
         IF (IRTFLG .NE. 0) GOTO 9999

         CALL SETENV(PROMPT(1:NLET1),RESPONSE(1:NLET2),IRTFLG)


       CASE('PI')   ! --- SEND REGISTER DOWN PIPE ------------------ PI

         IF (FCHAR(4:4) == 'R') THEN
C           SEND REGISTER DOWN PIPE  --------------------------- PI REG
            IRTFLG = -999
            CALL RDPRMC(RESPONSE,NCHAR,.TRUE.,'REGISTER VARIABLE',
     &              CDUM,IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 9999

            CALL REG_PIPE(RESPONSE,IRTFLG)
         ELSE
C          SEND IMAGE DOWN PIPE  ------------------------------- PI IMG
           CALL WRTLIN_PIPE_TOG()
         ENDIF


       CASE('PB')   ! ---  MANIPULATE PDB FILES -------------------  PB
         CALL  PDB

       END SELECT

9999   RETURN
       END




@


1.79
log
@avgloc
@
text
@d32 1
a32 1
C=* Email: spider@@wadsworth.org                                        *
@


1.78
log
@'ri rv'
@
text
@d5 1
a5 1
C            CALLS ROUTINES REMOVED FROM DRIVER   MAR 93
d8 1
a8 1
C            'PO' FOR POLAR CONVERSION            SEP 2000
d24 1
d69 1
a69 1
      LOGICAL                 :: MULTILINE,RIDGESONLY
d179 7
a185 1
             CALL FINDRIDGES(RIDGESONLY)
a187 1

d190 1
a190 1
             CALL FINDRIDGES(RIDGESONLY)
@


1.77
log
@to_rays parameter added
@
text
@d75 3
a77 3
c     DATA MENU/'NC','VM','ME','CK','TM',
c     &         'SR','RR','FR','PO','SA',
c     &         'VO','EV','PI','PB'/   -- IS FOR INITILIZING EXTEN
d173 16
a196 5

          ELSEIF (FCHAR(4:4) == 'V') THEN ! ALSO: 'PO VR'
C            FIND RIDGES & VALLEYS ACROSS IMAGE
             RIDGESONLY = (FCHAR(5:5) == 'R')
             CALL FINDRIDGES(RIDGESONLY)
@


1.76
log
@appears cosmetic and comments only
@
text
@d23 1
d29 1
a29 1
C=* Copyright 1985-2014  Health Research Inc.,                         *
d68 2
a69 1
      LOGICAL                 :: MULTILINE
d179 1
a179 1
          ELSEIF (FCHAR(4:4) == 'P') THEN
d182 1
a182 1
          ELSEIF (FCHAR(4:4) == 'A') THEN
d184 2
a185 1
             CALL FINDRIDGES()
@


1.75
log
@added PO A
@
text
@d7 3
a9 3
C            "FR" REMOVED TO SPIDER               SEP 2000 ARDEAN LEITH
C            "PO" FOR POLAR CONVERSION            SEP 2000
C            "FR L" ADDED                         MAR 2001 ARDEAN LEITH
d12 1
a12 1
C            MULTILINE VMS                        SEP 2003 ARDEAN LEITH
d17 5
a21 5
C            TM register                          SEP 2010 ARDEAN LEITH
C            TM not reset to zero bug             JUN 2011 ARDEAN LEITH
C            VO TA REMOVED                        OCT 2012 ARDEAN LEITH
C            PO R                                 OCT 2013 ARDEAN LEITH
C            'NC' should not close ndat           JAN 2014 ARDEAN LEITH
d137 1
d152 1
d160 1
d165 1
d169 2
a170 1
  
d174 1
d181 2
a183 1
            CALL FINDRIDGES()
d185 1
a185 1

d205 1
d256 1
d271 1
@


1.74
log
@!CLOSE(NDAT) jan 2014 al
gt
@
text
@d22 2
a65 1
      REAL, DIMENSION(103)    :: SAVE
d70 1
d167 10
a176 2
          IF (FCHAR(4:4) == 'R') THEN
            CALL TO_RAYS()
d178 2
a179 1
            CALL TO_POLAR()
d186 1
d189 1
d192 1
d195 1
@


1.73
log
@*** empty log message ***
@
text
@d21 1
d26 1
a26 1
C=* Copyright 1985-2013  Health Research Inc.,                         *
d81 1
a81 1
         CLOSE(NDAT)
d86 1
a86 1
         CALL RDPRMC(EXTEN,NC,.TRUE.,'ENTER PROJECT/DATA EXTENSION',
d90 1
a90 1
         IF (NC .LT. 3 .OR. IRTFLG .NE. 0) THEN
a102 1
         !!write(6,*) ' got: ',PRJEXC,'/',DATEXC
d125 1
a125 1
               IF (LOOPREG .LT. 103) THEN 
@


1.72
log
@added to_polar call for 'PO R'
@
text
@d20 1
a20 1
C            PO R                                 SUG 2013 ARDEAN LEITH
d67 1
a67 1
      CHARACTER(LEN=1)        :: CHAR(0)
@


1.71
log
@removed vota,  call for vora has no params now
@
text
@d20 1
d25 1
a25 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d52 1
a52 1
        SUBROUTINE DRIV1(MAXDIM)
d54 2
a55 2
        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'
d57 3
a59 3
        CHARACTER (LEN=1)       :: NULL,SWITCH
        CHARACTER (LEN=4)       :: CXNUM
        COMMON /DRIV1_COM/ T1,LOOPREG,CXNUM
d61 5
a65 5
        CHARACTER(LEN=2*MAXNAM) :: RESPONSE,PROMPT
        CHARACTER(LEN=7)        :: EXTEN
        REAL, DIMENSION(103)    :: SAVE
        INTEGER                 :: HRS,MIN,SEC
        LOGICAL                 :: MULTILINE
d67 2
a68 3
c        DATA MENU/'NC','VM','ME','CK','TM',
c     &            'SR','RR','FR','PO','SA',
c     &            'VO','EV','PI','PB'/   -- IS FOR INITILIZING EXTEN
d70 3
a72 1
        CALL SET_MPI(ICOMM,MYPID,MPIERR) ! SETS ICOMM AND MYMPID
d74 1
a74 1
        NULL   = CHAR(0)
a75 1
        LUNDOC = 77
d79 2
a80 2
       CASE('NC','--') !  NEW FILE EXTENSION -------------------------- NC
       CLOSE(NDAT)
d82 2
a83 2
C      GET THE PROJECT AND DATA EXTENSION
100    IRTFLG = -999
d85 1
a85 1
       CALL RDPRMC(EXTEN,NC,.TRUE.,'ENTER PROJECT/DATA EXTENSION',
d88 15
a102 16
C      MAKE SURE PROJECT EXTENSION IS VALID
       IF (NC .LT. 3 .OR. IRTFLG .NE. 0) THEN
          IF (MYPID .LE. 0)
     &       WRITE(NOUT,*) ' *** EXTENSION MUST BE 3 CHARACTERS'
          GOTO 100
       ENDIF

       PRJEXC(1:3) = EXTEN(1:3)

       IF (EXTEN(4:4) .NE. '/') THEN
          DATEXC(1:3) = PRJEXC(1:3)
       ELSE
          DATEXC(1:3) = EXTEN(5:7)
       ENDIF
       !!write(6,*) ' got: ',PRJEXC,'/',DATEXC
       GOTO 9999
d106 6
a111 7
       IF  (FCHAR(4:4) == 'C') THEN
          CALL VMS_CD()
       ELSE
          MULTILINE =  (FCHAR(4:4) == 'M') 
          CALL VMS(MULTILINE)
       ENDIF
       GOTO 9999
d113 4
a117 4
       CASE('ME')   !  MENU LISTING -------------------------------- ME
       WRITE(NOUT,*)' OPERATION NO LONGER SUPPORTED, USE MANUAL INSTEAD'
       CALL ERRT(100,'DRIV1',NE)
       GOTO 9999
d120 12
a131 11
C      WRITE OUT CURRENT OPERATION AND CURRENT ITERATION NUMBER.
       IF (NTRACE.NE.0) THEN
          WRITE(NOUT,9020) FCHAR(1:NALPH)
9020      FORMAT(' ',A)
	  IF (IABSLP .NE. 0 .AND. LOOPREG .NE. 0) THEN
             IF (LOOPREG .LT. 103) THEN 
                WRITE(NOUT,9040) LOOPREG,IABSLP
9040            FORMAT('  LOOP COUNTER (',I3,') = ',I5)
             ELSE
                WRITE(NOUT,9041) CHAR(LOOPREG-103),IABSLP
9041            FORMAT('  LOOP INDEX (',A,') = ',I5)
d133 1
a133 3
           ENDIF
        ENDIF
	GOTO 9999
d136 6
a141 6
C       GET NUMBER OF SEC. SINCE LAST TM, AND COMPUTE HOURS,MIN, & SEC
        TIM  = SECNDS(T1)
	HRS  = INT(TIM/3600.)
	HOUR = HRS*3600.
	MIN  = INT((TIM-HOUR)/60.)
	SEC  = TIM-HOUR-MIN*60.
d143 2
a144 2
	WRITE(NDAT,9240)HRS,MIN,SEC
9240	FORMAT(' TIME: ',I2,' HOURS  ',I2,' MINUTES  ',I2,' SECONDS')
d146 2
a147 5
        CALL REG_SET_NSEL(1,1,TIM,0.0,0.0,0.0,0.0,IRTFLG)
        T1 = SECNDS(0.0)   ! RESET TO ZERO

	GOTO 9999

d150 2
a151 2
        CALL RDPRMC(SWITCH,NLET,.TRUE.,'(S)AVE OR (U)NSAVE',NULL,IRT)
	IF (IRT .NE. 0) GOTO 9999
d153 2
a154 2
        CALL ERRT(101,'OBSOLETE - OPERATION NO LONGER SUPPORTED',NE)
        GOTO 9999
d157 2
a158 2
        CALL READRQ()
        GOTO 9999
d161 2
a162 2
        CALL SYMPAR(LUNDOC)
        GOTO 9999
d165 17
a181 15
        CALL TO_POLAR()
        GOTO 9999


       CASE('SA')   !    SUM ALIGNMENTS --------------------------- SA
        IF (FCHAR(4:4) == 'P') THEN
          CALL SUMALI(.TRUE.)
        ELSEIF(FCHAR(4:4) == '3') THEN
          CALL SUMALI3
        ELSEIF(FCHAR(4:4) == 'E') THEN
          CALL SUMEULER
        ELSE
          CALL SUMALI(.FALSE.)
        ENDIF
	GOTO 9999
d185 1
a185 1
        IF (FCHAR(4:5) == 'EA') THEN
d188 1
a188 1
        ELSEIF (FCHAR(4:6) == 'NEA') THEN
d191 1
a191 1
        ELSEIF (FCHAR(4:6) == 'RAS') THEN
d194 1
a194 1
        ELSEIF (FCHAR(4:5) == 'RA')  THEN
d197 1
a197 1
        ELSEIF (FCHAR(4:5) == 'MD')  THEN
d200 1
a200 1
        ELSEIF (FCHAR(4:5) == 'MQ')  THEN
d203 1
a203 1
        ELSEIF (FCHAR(4:5) == 'EP')  THEN
d206 1
a206 1
        ELSEIF (FCHAR(4:5) == 'IA')  THEN
d209 1
a209 1
        ELSEIF (FCHAR(4:5) == 'DA')  THEN
d213 1
a213 1
        ELSEIF (FCHAR(4:5) == 'TA')  THEN
d216 2
a217 3
     &     'UNDOCUMENTED OPERATION, NO LONGER SUPPORTED',NE)
        ENDIF
        GOTO 9999
d221 2
a222 2
        IRTFLG = -999
C       IRTFLG = -999 DOES NOT CONVERT INPUT TO UPPERCASE
d224 6
a229 6
        CALL RDPRMC(PROMPT,NLET1,.TRUE.,'ENVIRONMENT VARIABLE',
     &              NULL,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999
        IRTFLG = -999
        CALL RDPRMC(RESPONSE,NLET2,.TRUE.,'VALUE',NULL,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999
d231 1
a231 2
        CALL SETENV(PROMPT(1:NLET1),RESPONSE(1:NLET2),IRTFLG)
        GOTO 9999
d235 4
a238 4
        IF (FCHAR(4:4) == 'R') THEN
C          SEND REGISTER DOWN PIPE  ---------------------------- PI REG
           IRTFLG = -999
           CALL RDPRMC(RESPONSE,NCHAR,.TRUE.,'REGISTER VARIABLE',
d240 1
a240 1
           IF (IRTFLG .NE. 0) GOTO 9999
d242 2
a243 2
           CALL REG_PIPE(RESPONSE,IRTFLG)
        ELSE
d246 1
a246 2
        ENDIF
        GOTO 9999
d249 1
a249 2
        CALL  PDB
        GOTO 9999
@


1.70
log
@TM not reset to zero bug
@
text
@d5 5
a9 4
C            CHANGED READRQ PARAMETERS PASSED AUG 99 ARDEAN LEITH
C            "FR" REMOVED TO SPIDER SEPT 00  ARDEAN LEITH
C            "PO" FOR POLAR CONVERSION SEPT 00
C            "FR L" ADDED MAR 01 ARDEAN LEITH
d19 1
d24 1
a24 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d44 1
a44 1
C   PURPOSE:   CALLS ROUTINES REMOVED FROM DRIVER IN MAR 93
d106 1
a106 1
       IF  (FCHAR(4:4) .EQ. 'C') THEN
d109 1
a109 1
          MULTILINE =  (FCHAR(4:4) .EQ. 'M') 
d175 1
a175 1
        IF (FCHAR(4:4) .EQ. 'P') THEN
d177 1
a177 1
        ELSEIF(FCHAR(4:4) .EQ. '3') THEN
d179 1
a179 1
        ELSEIF(FCHAR(4:4) .EQ. 'E') THEN
d188 1
a188 1
        IF (FCHAR(4:5) .EQ. 'EA') THEN
d190 2
a191 1
        ELSEIF (FCHAR(4:6) .EQ. 'NEA') THEN
d193 8
a200 7
        ELSEIF (FCHAR(4:6) .EQ. 'RAS') THEN
           CALL VORA(MAXDIM)
        ELSEIF (FCHAR(4:5) .EQ. 'RA') THEN
           CALL VORA(MAXDIM)
        ELSEIF (FCHAR(4:5) .EQ. 'TA') THEN
           CALL VOTA(MAXDIM)
        ELSEIF (FCHAR(4:5) .EQ. 'MD') THEN
d202 2
a203 1
        ELSEIF (FCHAR(4:5) .EQ. 'MQ') THEN
d205 2
a206 3
        ELSEIF (FCHAR(4:5) .EQ. 'DA') THEN
           CALL VODA
        ELSEIF (FCHAR(4:5) .EQ. 'EP') THEN
d208 2
a209 1
        ELSEIF (FCHAR(4:5) .EQ. 'IA') THEN
d211 9
d240 1
a240 1
        IF (FCHAR(4:4) .EQ. 'R') THEN
d260 2
a261 2
9999    RETURN
        END
@


1.69
log
@tm [reg]
@
text
@d17 1
d22 1
a22 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d147 1
@


1.68
log
@GPL_2010
@
text
@d16 1
a16 1
C
d67 1
a67 7
#ifdef USE_MPI
        INCLUDE 'mpif.h'
        ICOMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(ICOMM, MYPID,  MPIERR)
#else
        mypid = -1
#endif
d144 3
a156 12
C	IF (SWITCH .EQ. 'S') THEN
C          SAVE THE REGISTERS
C          CALL REG_SAVE(IRTFLG)
C       ELSEIF (SWITCH .EQ. 'U') THEN
C          UNSAVE THE REGISTERS
C          CALL REG_UNSAVE(IRTFLG)
C       ELSE
C           WRITE(NOUT,*) ' *** UNKNOWN SR OPTION'
C           GOTO 600
C       ENDIF
C	GOTO 9999

a211 3
#if defined(__osf__)
        CALL ERRT(101,'OPERATION NOT AVAILBLE IN COMPAQ F90',IDUM)
#else
a219 1
#endif
a233 1

@


1.67
log
@vm cd
@
text
@a17 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d19 5
a23 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d25 1
a25 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d30 1
a30 1
C=* This program is distributed in the hope that it will be useful,    *
d32 1
a32 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a33 1
C=*                                                                    *
d35 1
a35 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.66
log
@-- for mpi
@
text
@d14 2
a15 1
C            'PI IMG"                             JAN 2006 ARDEAN LEITH
d19 1
a19 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d113 6
a118 2
       MULTILINE =  (FCHAR(4:4) .EQ. 'M') 
       CALL VMS(MULTILINE)
d121 1
@


1.65
log
@added vonea
@
text
@d68 9
a76 1
c     &            'VO','EV','PI','PB'/
d84 1
a84 1
       CASE('NC')   !  NEW FILE EXTENSION -------------------------- NC
d86 1
d89 1
d95 2
a96 1
          WRITE(NOUT,*) ' *** EXTENSION MUST BE 3 CHARACTERS'
d107 1
@


1.64
log
@nalph --> nlet
@
text
@d184 1
d187 2
@


1.63
log
@*** empty log message ***
@
text
@d140 1
a140 1
        CALL RDPRMC(SWITCH,NALPH,.TRUE.,'(S)AVE OR (U)NSAVE',NULL,IRT)
@


1.62
log
@img pipe
@
text
@d183 1
a183 1
       CASE('VA')   !    ------------------------------------------- VO
@


1.61
log
@native named registers
@
text
@d14 1
d56 13
a68 16
        CHARACTER (LEN=1) ::   NULL,SWITCH
        CHARACTER (LEN=4) ::   CXNUM
        COMMON /DRIV1_COM/     T1,LOOPREG,CXNUM

	PARAMETER             (NMENU=14)
        CHARACTER(LEN=2) ::   MENU(NMENU)

        CHARACTER(LEN=160)    :: RESPONSE,PROMPT
        CHARACTER(LEN=7)      :: EXTEN
        REAL, DIMENSION(103)  :: SAVE
        INTEGER               :: HRS,MIN,SEC
        LOGICAL               :: MULTILINE

        DATA MENU/'NC','VM','ME','CK','TM',
     &            'SR','RR','FR','PO','SA',
     &            'VO','EV','PI','PB'/
d74 1
a74 14
C       CARRY OUT THE OPERATION
        IFUNC = 0
        DO I = 1,NMENU
           IF (MENU(I)(1:2) .EQ. FCHAR(1:2)) THEN
              IFUNC = I
              GOTO 10
           ENDIF
        ENDDO
10      CONTINUE
        IF (IFUNC .LE. 0) RETURN

        GOTO  (  100,  200,  300,  400,  500,
     &           600,  700,  800,  900, 1000,
     &          1100, 1300, 1400, 1500 ), IFUNC
d76 1
a76 1
C      NEW FILE EXTENSION -- NEW EXTENSION ------------------------- NC
d99 2
a100 3
C      SYSTEM CALL ------------------------------------------------- VM
C      VMS SPAWN COMMANDS
200    MULTILINE =  (FCHAR(4:4) .EQ. 'M') 
d104 1
a104 3

C      MENU LISTING ------------------------------------------------ ME
300    CONTINUE
d109 1
a109 1
C      CHECKPOINT OPERATION ---------------------------------------- CK
d111 1
a111 1
400    IF (NTRACE.NE.0) THEN
d126 3
a128 4
C       TIME OPERATION --------------------------------------------- TM
C       GET THE NUMBER OF SECONDS SINCE LAST TM, AND COMPUTE HOURS, 
C       MIN, & SEC
500     TIM  = SECNDS(T1)
d138 4
a141 3
C       SAVE REGISTERS --------------------------------------------- SR
600     CALL RDPRMC(SWITCH,NALPH,.TRUE.,'(S)AVE OR (U)NSAVE',NULL,IRT)
	IF (IRT .NE. 0 .OR. NALPH .EQ. 0) GOTO 600
d158 2
a159 3
C       READ REGISTER ---------------------------------------------- RR

700     CALL READRQ()
d162 2
a163 3
C       FILE READ -------------------------------------------------- FR

800     CALL SYMPAR(LUNDOC)
d166 1
a166 3

C       POLAR CONVERSION ------------------------------------------- PO
900     CONTINUE
d171 2
a172 2
C       SUM ALIGNMENTS --------------------------------------------- SA
1000    IF (FCHAR(4:4) .EQ. 'P') THEN
d183 2
a184 2
C       ------------------------------------------------------------ VO
1100    IF (FCHAR(4:5) .EQ. 'EA') THEN
d206 2
a207 2
C       SET ENVIRONMENTAL VARIABLE -------------------------------- EV
1300    IRTFLG = -999
d224 1
a224 1
C       SEND REGISTER DOWN PIPE  ------------------------------ PI REG
d226 4
a229 2
1400    IRGFLG = -999
        CALL RDPRMC(RESPONSE,NCHAR,.TRUE.,'REGISTER VARIABLE',
d231 5
a235 1
        IF (IRTFLG .NE. 0) GOTO 9999
d237 2
a238 1
        CALL REG_PIPE(RESPONSE,IRTFLG)
d241 2
a242 2
C       MANIPULATE PDB FILES -------------------------------------  PB
1500    CALL  PDB
d245 2
@


1.60
log
@named register support
@
text
@a13 1
C            'DV'                                 NOV 2005 ARDEAN LEITH
d59 1
a59 1
	PARAMETER             (NMENU=15)
d70 1
a70 1
     &            'VO','EV','PI','PB','DV'/
d89 1
a89 1
     &          1100, 1300, 1400, 1500, 1600), IFUNC
d131 1
a131 1
9020      FORMAT(1X,A)
d135 1
a135 1
9040            FORMAT(1X,' LOOP COUNTER (',I3,') = ',I5)
d138 1
a138 1
9041            FORMAT(1X,' LOOP INDEX (',A,') = ',I5)
d160 5
a164 1
	IF (SWITCH .EQ. 'S') THEN
d166 2
a167 3
           CALL REG_SAVE(IRTFLG)

	ELSEIF (SWITCH .EQ. 'U') THEN
d169 6
a174 7
           CALL REG_UNSAVE(IRTFLG)

        ELSE
            WRITE(NOUT,*) ' *** UNKNOWN SR OPTION'
            GOTO 600
        ENDIF
	GOTO 9999
d247 4
a250 1
1400    CALL RDPRI1S(IREG,NOT_USED,'REGISTER NUMBER',IRTFLG)
d253 1
a253 1
        CALL REG_PIPE(IREG,IRTFLG)
a257 13

C       DEFINE VARIABLES ------------------------------------------ DV

1600    NCT = lnblnkn(FCHAR)
        SELECT CASE(FCHAR(4:NCT))

        CASE ('S','SL','SG','SF')
          CALL SYMPAR(LUNDOC)

        CASE ('R','RL','RG','RF')
          CALL DEFREAL(IRTFLG)

        END SELECT
a262 51
C++*********************************************************************
C
C  DEFREAL.F -- CREATED 1/11/05 ARDEAN LEITH 
C
C **********************************************************************
C
C DEFREAL(LUNDOC)
C
C PURPOSE: DEFINES REAL VARIABLE
C             
C PARAMETERS:     IRTFLG        ERROR FLAG (0 IS NORMAL)       RETURNED
C
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

      SUBROUTINE DEFREAL(IRTFLG)

      INCLUDE 'CMBLOCK.INC' 
      INCLUDE 'CMLIMIT.INC' 
 
      CHARACTER (LEN=160) :: VARSET,RESPONSE

C     SET IRTFLG TO INHIBIT UPPERCASE CHANGES
      IRTFLG = -999
      CALL RDPR('REAL VARIABLE NAME & OPTIONAL VALUE',NCHAR,RESPONSE,
     &          .TRUE.,.FALSE.,.FALSE.,.TRUE.,.TRUE.,.TRUE., IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     FIND END OF VARIABLE NAME IN VARSET
      IRITBRAK = INDEX(RESPONSE,']')

      IF (IRITBRAK .GT. 0 .AND. IRITBRAK .LT. NCHAR) THEN
C        FOUND VARIABLE NAME
         IEQ = INDEX(RESPONSE(IRITBRAK+1:),'=')
         IF (IEQ .LE. 0) THEN
C           PUT IN EQUAL SIGN            
            RESPONSE = RESPONSE(1:IRITBRAK) // '=' // 
     &                RESPONSE(IRITBRAK+1:)
         ENDIF

         IRTFLG = -999
         CALL RDPR(RESPONSE,NCHAR,VARSET,
     &          .FALSE.,.FALSE.,.TRUE.,.TRUE.,.TRUE.,.TRUE., IRTFLG)
         IF (IRTFLG .NE. 0) RETURN

         CALL ARASQ(VARSET,NCHAR,IRTFLG)
      ENDIF

      RETURN
      END
@


1.59
log
@GPL License fixed
@
text
@d14 1
d60 1
a60 1
	PARAMETER             (NMENU=14)
d71 1
a71 1
     &            'VO','EV','PI','PB'/
d90 1
a90 1
     &          1100, 1300, 1400, 1500), IFUNC
d101 1
a101 1
          WRITE(NOUT,*) '*** EXTENSION MUST BE 3 CHARACTERS'
d170 1
a170 1
            WRITE(NOUT,*) '*** UNKNOWN SR OPTION'
d252 1
a252 1
C       MANIPULATE PDB FILES ----------------------------------  PB
d255 12
d272 54
@


1.58
log
@vo ia & vo ept
@
text
@d2 1
a2 1
C++************************************************************************
d16 23
a38 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.57
log
@*** empty log message ***
@
text
@d13 1
d201 4
@


1.56
log
@call pdb
@
text
@d232 1
a232 1
        GOTO 999
@


1.55
log
@'MD' moved to spider.f
@
text
@d41 1
a41 1
	PARAMETER             (NMENU=13)
d52 1
a52 1
     &            'VO','EV','PI'/
d71 1
a71 1
     &          1100, 1300, 1400), IFUNC
d229 4
@


1.54
log
@vm m
@
text
@d12 2
d41 1
a41 1
	PARAMETER             (NMENU=14)
d52 1
a52 1
     &            'VO','MD','EV','PI'/
d69 3
a71 3
        GOTO  (  100,  200,   300,  400,  500,
     &           600,  700,   800,  900, 1000,
     &          1100, 1200,  1300, 1400), IFUNC
a202 3
C       SET MODE -------------------------------------------------- MO
1200    CALL SETMODE
        GOTO 9999
@


1.53
log
@*** empty log message ***
@
text
@d9 3
a11 3
C            SIMPLIFED WITH SETSYMPAR IN RDPR APR 2001 ARDEAN LEITH
C            SYMPAR JUNE 2002 ARDEAN LEITH
C
d42 5
a46 4
        CHARACTER(LEN=160)    ::   RESPONSE,PROMPT
        CHARACTER(LEN=7)      ::   EXTEN
        REAL, DIMENSION(103)  ::   SAVE
        INTEGER ::                 HRS,MIN,SEC
d96 2
a97 1
200    CALL VMS
@


1.52
log
@sympar only has one parameter
@
text
@d208 1
a208 1
        CALL ERRT(101,'OPERATION NOT AVAILBALE IN COMPAQ F90',IDUM)
@


1.51
log
@sympar
@
text
@d159 1
a159 1
800     CALL SYMPAR(LUNDOC,IRTFLG)
@


1.50
log
@nloop,iloop_removed
@
text
@d10 1
a10 2
C            "EV" ADDED APRIL 01 ARDEAN LEITH
C            "PI" ADDED JULY 01 ARDEAN LEITH
d14 1
a14 1
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
d53 2
a157 2
C       GET "?-----? STRING & PARAMETER NUMBER AND ASSOCIATE THEM 
C       IRTFLG = 9  MAKES FILERD KEEP ANY EXTENSION
d159 1
a159 17
800     IRTFLG = -999
        CALL RDPRMC(RESPONSE,NCHAR,.TRUE.,
     &            'SYMBOLIC PARAMETER PROMPT & NUMBER',NULL,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        IF (FCHAR(4:4) .EQ. 'T') THEN
C          TEST OF FILENAME SUBSTITUTION MECHANISM
           IRTFLG = -999
           CALL RDPRMC(PROMPT,NLET2,.FALSE.,'CORRECT NAME',NULL,IRTFLG)
           IF (IRTFLG .EQ. 0 .AND. 
     &         RESPONSE(1:NCHAR) .NE. PROMPT(1:NLET2)) THEN
              WRITE(NOUT,*) '*** ERROR IN FILENAME FORMATION!!!'
              WRITE(NOUT,9065) RESPONSE(1:NCHAR),PROMPT(1:NLET2)
9065          FORMAT( '*** GOT: ',A,'  SHOULD BE: ',A/)
              CALL ERRT(100,' ',NE)
           ENDIF
        ENDIF
d162 1
@


1.49
log
@reg_pipe added
@
text
@d238 1
a238 1
1400    CALL RDPRI1S(IREG,NLOOP,ILOOP,'REGISTER NUMBER',IRTFLG)
@


1.48
log
@putenv not available on osf unix??
@
text
@d11 1
d24 1
a24 1
C   PURPOSE:   A MAIN DRIVER FOR ROUTINES REMOVED FROM DRIVER IN MAR 93
d40 1
a40 1
	PARAMETER             (NMENU=13)
d50 1
a50 1
     &            'VO','MD','EV'/
d67 1
a67 1
     &          1100, 1200,  1300), IFUNC
d89 1
a89 1
       GOTO 5000
d95 1
a95 1
       GOTO 5000
d102 1
a102 1
       GOTO 5000
d119 1
a119 1
	GOTO 5000
d132 1
a132 1
	GOTO 5000
d149 1
a149 1
	GOTO 5000
d154 1
a154 1
        GOTO 5000
d163 1
a163 1
        IF (IRTFLG .NE. 0) GOTO 5000
d177 1
a177 1
        GOTO 5000
d182 1
a182 1
        GOTO 5000
d195 1
a195 1
	GOTO 5000
d213 1
a213 1
        GOTO 5000
d217 1
a217 1
        GOTO 5000
a224 1
        GOTO 5000
d228 1
a228 1
        IF (IRTFLG .NE. 0) GOTO 5000
d231 1
a231 1
        IF (IRTFLG .NE. 0) GOTO 5000
a233 1
        GOTO 5000
d235 1
d237 9
a245 1
5000    RETURN
@


1.47
log
@vo ras added
@
text
@d221 5
d235 1
@


1.46
log
@*** empty log message ***
@
text
@d197 15
a211 21
1100    CALL CHKINPQ('EA,RA,TA,MD,MQ,DA',FCHAR(4:),JCALL)
        GOTO (1101,1102,1103,1104,1105,1106,1107) JCALL     

1101    GOTO 5000

1102    CALL VOEA(MAXDIM)
        GOTO 5000

1103    CALL VORA(MAXDIM)
        GOTO 5000

1104    CALL VOTA(MAXDIM)
        GOTO 5000

1105    CALL VOMD
        GOTO 5000

1106    CALL VOMQ
        GOTO 5000

1107    CALL VODA
@


1.45
log
@added ev
@
text
@d227 2
a228 1
        CALL RDPRMC(PROMPT,NLET,.TRUE.,'VARIABLE',NULL,IRTFLG)
d231 1
a231 1
        CALL RDPRMC(RESPONSE,NLET,.TRUE.,'VALUE',NULL,IRTFLG)
d234 1
a234 1
        CALL SETENV(PROMPT,RESPONSE,IRTFLG)
@


1.44
log
@rdpr simplification for symbolic parameters & variable subs.
@
text
@d10 1
d39 1
a39 1
	PARAMETER             (NMENU=12)
d49 1
a49 1
     &            'VO','MD'/
d66 1
a66 1
     &          1100, 1200), IFUNC
d222 12
@


1.43
log
@'FR L'.
@
text
@d9 1
d151 1
a151 22
700     IF (COPT .EQ. 'B') THEN
C          IRTFLG = -999  DOES NOT CONVERT TO UPPERCASE
           CALL RDPRMC(PROMPT,NLET,.FALSE.,' ',NULL,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           CALL CHARINSIDE(PROMPT,'?','?',.FALSE.,.FALSE., 
     &                   IGO,IEND,NCHAR)
           IF (IGO .GT. 0) THEN
C             SET SYMBOLIC PARAMETER
              CALL SETSYMPAR(PROMPT(1:NLET),RESPONSE,NLET,IRTFLG)
           ELSE
              RESPONSE = PROMPT(1:NLET)
           ENDIF

C          SET REGISTERS (~ MAKES READRQ USE RESPONSE INSTEAD OF READING)
           RESPONSE = '~' // RESPONSE(1:NLET)
           CALL READRQ(RESPONSE)
        ELSE
C          SET REGISTERS  (NULL MAKES READRQ READ INPUT)
           CALL READRQ(CHAR(0))
        ENDIF

d156 1
a156 1
C       IRTFLG = 9  MAKES FILERD KEEP EXTENSION
d158 3
a160 3
800     IRTFLG = 9
        CALL FILERD(RESPONSE,NCHAR,NULL,
     &            'SYMBOLIC PARAMETER PROMPT & NUMBER~',IRTFLG)
@


1.42
log
@?xxxx?<1> anywhere now
@
text
@d8 1
@


1.41
log
@removed unused var
@
text
@d27 1
a27 1
        SUBROUTINE DRIV1(MAXDIM,IRTRET)
d30 1
d32 11
a42 11
        CHARACTER *1   NULL,SWITCH
        CHARACTER *4   CXNUM
        COMMON /DRIV1_COM/ T1,LOOPREG,CXNUM

	PARAMETER      (NMENU=12)
        CHARACTER *2   MENU(NMENU)

        CHARACTER *81  FILNAM,LINE
        CHARACTER *7   EXTEN
        DIMENSION      SAVE(103)
        INTEGER        HRS,MIN,SEC
a48 1
        IRTRET = 0
d147 1
a148 1
C       READ REGISTER ---------------------------------------------- RR
d150 19
a168 8
            CALL FILERD(FILNAM,NLETI,NULL,' ',IRTFLG)
            BACKSPACE(NIN)
            IBCNT = IBCNT - 1
            IF (FILNAM(1:1) .EQ. '?') THEN
C              NEED TO USE "FR" HERE 
               IRTRET = 2
               RETURN
            ENDIF
a169 1
        CALL READRQ(CHAR(0))
d173 23
a195 3
C       FILE READ - (HANDLED IN SPIDER.F NOW) ---------------------- FR
800     GOTO 5000

@


1.40
log
@MEMALLOCABLE removed
@
text
@a34 3
        LOGICAL ONSUN,ONUNIX,ONSGI,ONOSF
        COMMON /OPSYS/ ONSUN,ONUNIX,ONSGI,ONOSF

d38 1
a38 1
        CHARACTER *81  FILNAM,DIRNAM,LINE
a41 3
        CHARACTER * 9  ENVVAR

        DATA ENVVAR/'SPMAN_DIR'/
@


1.39
log
@iti not defined, used nout instead
@
text
@d36 1
a36 1
        COMMON /OPSYS/ ONSUN,ONUNIX,ONSGI,ONOSF,MEMALLOCABLE
@


1.38
log
@xnum in common
@
text
@d109 1
a109 1
          WRITE(ITI,9020) FCHAR(1:NALPH)
d113 1
a113 1
                WRITE(ITI,9040) LOOPREG,IABSLP
d116 1
a116 1
                WRITE(ITI,9041) CHAR(LOOPREG-103),IABSLP
@


1.37
log
@no procX file changes
@
text
@d32 2
a33 1
        COMMON /DRIV1_COM/ T1,LOOPREG
@


1.36
log
@common in 2x
@
text
@d4 4
a7 2
C    DRIV1   CHANGED READRQ PARAMETERS PASSED AUG 99 ARDEAN LEITH
C            'PO' IS NOW TO_POLAR SEPT 00 PAWEL
d27 1
a27 1
        SUBROUTINE DRIV1(MAXDIM)
d32 1
d34 2
a35 2
	CHARACTER * 4         XNUM
        COMMON /DRIV1_COM/ T1,LOOPREG,XNUM
d53 1
d154 12
a165 1
700     CALL READRQ(FCHAR)
d168 2
a169 14
C       FILE READ - READ IN A FILE NAME FOR BATCH RUNS ------------- FR
800     CALL FILERD(FILNAM,NLET1,NULL,'NAME FOR',IRTFLG)
        IF (FCHAR(4:4) .EQ. 'T') THEN
C          TEST OF FILENAME SUBSTITUTION MECHANISM
           IRTFLG = -999
           CALL RDPRMC(LINE,NLET2,.FALSE.,'CORRECT NAME',NULL,IRTFLG)
           IF (IRTFLG .EQ. 0 .AND. 
     &         FILNAM(1:NLET1) .NE. LINE(1:NLET2)) THEN
              WRITE(NOUT,*) '*** ERROR IN FILENAME FORMATION!!!'
              CALL ERRT(100,'DRIV1',NE)
           ENDIF
        ENDIF

	GOTO 5000
d171 1
a171 1
C       POLAR CONVERSION -------------------------------------------- PO
d177 1
a177 1
C       SUM ALIGNMENTS -------------------------------------------- SA
@


1.35
log
@xnum in common
@
text
@a33 2
        COMMON /DRIV1_COM/ T1,LOOPREG

@


1.34
log
@added 'PO" for to_polar
@
text
@d30 4
@


1.33
log
@reverted to pre procX version
@
text
@d4 2
a5 2
C    DRIV1
C            CHANGED READRQ PARAMETERS PASSED AUG 99 ARDEAN LEITH
a31 3
        LOGICAL ONSUN,ONUNIX,ONSGI,ONOSF
        COMMON /OPSYS/ ONSUN,ONUNIX,ONSGI,ONOSF,MEMALLOCABLE

d166 4
a169 5
C       MAKE POEM (USUALLY DUMMIED OUT) ---------------------------- PO
900     WRITE (NOUT,*) '*** NO LONGER SUPPORTED'
        CALL ERRT(100,'DRIV1',IDUM)
C       CALL POEM
	GOTO 5000
@


1.32
log
@Bproc RR & FR changes
@
text
@a5 1
C            "FR" REMOVED TO SPIDER SEPT 00  ARDEAN LEITH
d25 1
a25 1
        SUBROUTINE DRIV1(MAXDIM,IRTRET)
a50 1
        IRTRET = 0
d151 14
a164 9
700     IF (COPT .EQ. 'B') THEN
            CALL FILERD(FILNAM,NLETI,NULL,' ',IRTFLG)
            BACKSPACE(NIN)
            IBCNT = IBCNT - 1
            IF (FILNAM(1:1) .EQ. '?') THEN
C              NEED TO USE "FR" HERE 
               IRTRET = 2
               RETURN
            ENDIF
a165 1
        CALL READRQ(CHAR(0))
d167 1
a167 4
        GOTO 5000

C       FILE READ - (HANDLED IN SPIDER.F NOW) ---------------------- FR
800     GOTO 5000
@


1.31
log
@changed fr prompt
@
text
@d6 1
d26 1
a26 1
        SUBROUTINE DRIV1(MAXDIM)
d52 1
d153 12
a164 1
700     CALL READRQ(FCHAR)
d167 2
a168 14
C       FILE READ - READ IN A FILE NAME FOR BATCH RUNS ------------- FR
800     CALL FILERD(FILNAM,NLET1,NULL,'NAME FOR',IRTFLG)
        IF (FCHAR(4:4) .EQ. 'T') THEN
C          TEST OF FILENAME SUBSTITUTION MECHANISM
           IRTFLG = -999
           CALL RDPRMC(LINE,NLET2,.FALSE.,'CORRECT NAME',NULL,IRTFLG)
           IF (IRTFLG .EQ. 0 .AND. 
     &         FILNAM(1:NLET1) .NE. LINE(1:NLET2)) THEN
              WRITE(NOUT,*) '*** ERROR IN FILENAME FORMATION!!!'
              CALL ERRT(100,'DRIV1',NE)
           ENDIF
        ENDIF

	GOTO 5000
@


1.30
log
@*** empty log message ***
@
text
@d155 1
a155 1
800     CALL FILERD(FILNAM,NLET1,NULL,'INPUT',IRTFLG)
@


1.29
log
@changes for reg_set
@
text
@a60 1

d151 1
a151 1
700     CALL REG_READRQ(FCHAR)
d190 1
a190 2
        GOTO 
     $  (1101,1102,1103,1104,1105,1106,1107) JCALL     
@


1.28
log
@voda added
@
text
@d136 1
a136 1
	IF (SWITCH .EQ. 'S' .OR. SWITCH .EQ. 's') THEN
d138 1
a138 3
	   DO I = 1, 103
	     SAVE(I) = PARAM(I)
           ENDDO
d140 1
a140 1
	ELSEIF (SWITCH .EQ. 'U' .OR. SWITCH .EQ. 'u') THEN
d142 1
a142 3
	   DO I = 1, 103
	     PARAM(I) = SAVE(I)
           ENDDO
d152 1
a152 1
700     CALL READRQ(FCHAR)
@


1.27
log
@removed VO FIT
@
text
@d194 1
a194 1
1100    CALL CHKINPQ('EA,RA,TA,MD,MQ',FCHAR(4:),JCALL)
d196 1
a196 1
     $  (1101,1102,1103,1104,1105,1106) JCALL     
d213 3
@


1.26
log
@VECTOP removed
@
text
@d194 1
a194 1
1100    CALL CHKINPQ('EA,RA,TA,MD,MQ,FITP$',FCHAR(4:),JCALL)
d196 1
a196 1
     $  (1101,1102,1103,1104,1105,1106,1108) JCALL     
a212 3
        GOTO 5000

1108    CALL CALLFITPLANE(16)
@


1.25
log
@loop index converted to register
@
text
@d198 1
a198 2
1101    CALL VECTOP
        GOTO 5000
@


1.24
log
@*** empty log message ***
@
text
@d29 2
a30 2
        CHARACTER *1   NULL,SWITCH,DINDEX
        COMMON /DRIV1_COM/ NUMREP,T1,DINDEX
d108 9
a116 2
          IF (IABSLP .NE. 0) WRITE(ITI,9040) DINDEX,IABSLP
9040      FORMAT(1X,A,' = ',I4)
@


1.23
log
@*** empty log message ***
@
text
@d203 1
a203 1
1105    CALL VOMD(MAXDIM)
d206 1
a206 1
1106    CALL VOMQ(MAXDIM)
@


1.22
log
@vo mq added
@
text
@d206 1
a206 1
1105    CALL VOMQ(MAXDIM)
@


1.21
log
@readrq parameters changed
@
text
@d187 1
a187 1
1100    CALL CHKINPQ('EA,RA,TA,MD,FITP$',FCHAR(4:),JCALL)
d189 1
a189 1
     $  (1101,1102,1103,1104,1105,1108) JCALL     
d204 3
@


1.20
log
@SA E
@
text
@d5 1
d7 8
a14 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1993, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
a26 1
CNO_SAVE
d149 1
a149 1
700     CALL READRQ(FCHAR,NUMREP,ILOOP)
@


1.19
log
@removed poem
@
text
@d180 2
d188 1
a188 1
1100    CALL CHKINPQ('EA,RA,TA,MD,CEUL,FITP,GZ,GZD$',FCHAR(4:),JCALL)
d190 1
a190 1
     $  (1101,1102,1103,1104,1105,1107,1108,1109,1110) JCALL     
a206 3
1107    CALL COMBEUL1(16,17)
        GOTO 5000

a207 6
        GOTO 5000

1109    CALL MRGETZ
        GOTO 5000

1110    CALL MRGETZD(16,17)
@


1.18
log
@SA 3
added
@
text
@d169 3
a171 1
900     CALL POEM
@


1.17
log
@removed "ME"
@
text
@d176 2
@


1.16
log
@typo
@
text
@a98 1
C      MENU LISTING FROM MANUAL CHAPTER "ME.MAN"  ('ME')
d100 2
a101 14

       IF (ONUNIX) THEN
C        READ IN THE ENVIRONMENT VARIABLE 'SPMAN_DIR'.
         CALL MYGETENV(ENVVAR,DIRNAM,NCHAR,
     &                 'DIR_CONTAINING_SPIDER_MANUALS',IRTFLG)
         IF (IRTFLG .NE. 0) GOTO 5000

C        SPMAN IS DEFINED OK
         LINE = DIRNAM(1:NCHAR) // '/me.man' // NULL
         CALL NUMENU(LINE,33,20,65,IRTFLG)
       ELSE
C        ON VAX NOW
         CALL NUMENU('SPMAN_DIR:ME.MAN',33,20,65,IRTFLG)
       ENDIF
d109 1
a109 1
          IF (IABSLP.NE.0) WRITE(ITI,9040) DINDEX,IABSLP
@


1.15
log
@changed code to extension
@
text
@d73 1
a73 1
       CALL RDPRMC(EXTEN,NC,.TRUE.,'ENTER PROJECT/DATA EXTENSION,
@


1.14
log
@CNO_SAVE
@
text
@d69 1
a69 1
C      NEW FILE EXTENSION -- NEW CODE ------------------------------ NC
d71 1
a71 1
C      GET THE PROJECT AND DATA CODE
d73 1
a73 1
       CALL RDPRMC(EXTEN,NC,.TRUE.,'ENTER PROJECT/DATA CODE',
d76 1
a76 1
C      MAKE SURE PROJECT CODE IS VALID
d78 1
a78 1
          WRITE(NOUT,*) '*** CODE MUST BE 3 CHARACTERS'
@


1.13
log
@added "fr t" for testing filename substitution
@
text
@d27 1
@


1.12
log
@CHANGED COMMON OPSYS
@
text
@d166 12
a177 1
800     CALL FILERD(FILNAM,NLET,NULL,'INPUT',IRTFLG)
@


1.11
log
@used mygetenv
@
text
@d32 2
a33 2
        LOGICAL        ONSUN,ONUNIX
        COMMON /OPSYS/ ONSUN,ONUNIX
@


1.10
log
@obsolete call to ref3d removed
@
text
@a26 1
#ifdef SP_UNIX
a27 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
a28 1

d103 7
a109 19
         CALL GETENV(ENVVAR,DIRNAM)
         NCHAR = lnblnk(DIRNAM)

         IF (NCHAR .LE. 0 .OR. NCHAR .GT. 74) THEN
           WRITE(NOUT,*) ' HELP DIRECTORY NOT FOUND. '
           WRITE(NOUT,*) ' ADD TO YOUR .cshrc FILE THE FOLLOWING LINE:'
           WRITE(NOUT,*) ' setenv SPMAN_DIR "/local/spider/man/" '
           WRITE(NOUT,*) ' WHERE "/local/spider/man/" IS DIRECTORY'
           WRITE(NOUT,*) ' WHERE THE MANUAL FILES (*.man) ARE STORED'
           WRITE(NOUT,*) ' '
           WRITE(NOUT,*) ' PLEASE NOTE THE LAST / IN THE PATH'
           GOTO 5000
         ELSE
C          SPMAN IS DEFINED OK

           LINE = DIRNAM(1:NCHAR) // '/me.man' // NULL

           CALL NUMENU(LINE,33,20,65,IRTFLG)
         ENDIF
d112 1
a112 1
         CALL NUMENU('SPMAN_DIR:ME.MAN', 33,20,65,IRTFLG)
@


1.9
log
@new version from MR
@
text
@d200 1
a200 1
1100    CALL CHKINPQ('EA,RA,TA,MD,R3,CEUL,FITP,GZ,GZD$',FCHAR(4:),JCALL)
d202 1
a202 1
     $  (1101,1102,1103,1104,1105,1106,1107,1108,1109,1110) JCALL     
a216 4
        GOTO 5000

1106    CONTINUE
C       CALL REF3D
@


1.8
log
@dindex is a character
@
text
@d28 1
a28 1
	INCLUDE 'CMBLOCK.INC' 
d30 1
a30 1
	INCLUDE 'COMMON1:CMBLOCK.INC' 
d33 1
d200 3
a202 2
1100    CALL CHKINPQ('EA,RA,TA,MD,R3,CEUL$',FCHAR(4:),JCALL)
        GOTO (1101,1102,1103,1104,1105,1106,1107) JCALL     
d226 8
@


1.7
log
@change fchar(4:nalph) to fchar(4:)
@
text
@d33 1
a43 1
        CHARACTER *1   NULL,SWITCH
@


1.6
log
@alignment off on driv1_com
@
text
@d199 1
a199 1
1100    CALL CHKINPQ('EA,RA,TA,MD,R3,CEUL$',FCHAR(4:NALPH),JCALL)
@


1.5
log
@added numrep to driv1_com
@
text
@d33 1
a33 1
        COMMON /DRIV1_COM/ T1,DINDEX,NUMREP
@


1.4
log
@added / to me.man
@
text
@d33 1
a33 1
        COMMON /DRIV1_COM/ T1,DINDEX
@


1.3
log
@ME works on Unix now
@
text
@d122 1
a122 1
           LINE = DIRNAM(1:NCHAR) // 'me.man' // NULL
@


1.2
log
@cpp_lines_added
@
text
@d41 1
a41 1
        CHARACTER *81  FILNAM
d46 1
d48 2
d104 1
d106 20
a125 1
          CALL NUMENU('$SPMAN_DIR:ME.MAN',33,17,65,IRTFLG)
d127 2
a128 1
          CALL NUMENU('SPMAN_DIR:ME.MAN', 33,20,65,IRTFLG)
@


1.1
log
@Initial revision
@
text
@d27 3
d31 1
@
