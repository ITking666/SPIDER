head	1.40;
access;
symbols
	healthdept_2018:1.40
	pre_getangas:1.28
	GPL2010:1.28
	pre_GPL2010:1.27
	pre_var_equation:1.27
	pre_fftwrings:1.27
	pre_opfiles:1.27
	src:1.27
	best-code:1.27
	x-named-regs:1.27
	x:1.27
	v13-00:1.27
	pre_GPL:1.23
	prec_CA:1.23
	noindx:1.22
	Bproc:1.21
	oct21:1.18
	last77:1.14;
locks; strict;
comment	@c @;


1.40
date	2018.10.03.14.34.15;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2014.05.15.16.22.09;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2012.09.25.12.40.55;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2012.09.13.17.17.29;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2012.03.05.20.44.53;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2012.02.29.17.04.17;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2012.02.28.15.30.56;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2012.02.27.19.59.34;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2012.02.24.14.13.53;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2012.02.23.15.33.47;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2012.02.22.19.00.31;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2011.06.03.18.15.23;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2010.06.24.13.26.46;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2005.10.18.14.05.50;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2005.10.18.14.03.49;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2005.10.17.20.33.17;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2005.10.17.18.24.01;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2003.02.20.17.54.58;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2002.03.11.14.08.20;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2000.08.02.18.10.27;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2000.07.17.17.45.21;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2000.02.03.15.30.07;	author bimal;	state Exp;
branches;
next	1.18;

1.18
date	99.04.09.21.34.03;	author pawel;	state Exp;
branches;
next	1.17;

1.17
date	99.04.09.18.51.06;	author pawel;	state Exp;
branches;
next	1.16;

1.16
date	99.04.09.18.01.36;	author pawel;	state Exp;
branches;
next	1.15;

1.15
date	99.04.09.17.32.43;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	98.04.06.19.36.21;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	98.02.12.17.22.48;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	97.10.29.16.04.31;	author hedget;	state Exp;
branches;
next	1.11;

1.11
date	97.10.17.15.19.23;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	97.10.14.21.19.31;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	96.09.05.14.04.57;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	96.09.05.13.59.47;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	96.09.05.13.28.37;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	96.04.04.15.09.10;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.01.19.15.21.41;	author ramani;	state Exp;
branches;
next	1.4;

1.4
date	96.01.05.18.53.44;	author ramani;	state Exp;
branches;
next	1.3;

1.3
date	94.11.01.10.11.10;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.10.17;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.18;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.40
log
@email_health_dept
@
text
@C++*********************************************************************
C
C    RFACTSDO.F    ADDED FOURIER INPUT          JUL  2000 ARDEAN LEITH
C                  OPFILEC                      FEB  2003 ARDEAN LEITH
C                  FSCOP                        FEB  2012 ARDEAN LEITH
C                  MASK                         SEP  2012 ARDEAN LEITH
C                  FSCCUT                       SEP  2012 ARDEAN LEITH
C                  WANTSQRTS                    MAY  2014 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C PURPOSE: DIFFERENTIAL CORRELATION COEFFICIENT  AND PHASE RESIDUAL
C          COMPARISON OF 
C          TWO FOURIER TRANSFORMS ON A SERIES OF RINGS.  FOLLOWS
C          PHILOSOPHY OF FRANK ET AL. SCIENCE 214 (1981) 1353-1355. 
C          IN THE CURRENT ROUTINE, ALL RINGS ARE COMPUTED AT ONCE,
C          BUT SCALE SEARCH IS DONE ON EACH RING SEPARATELY.  THUS THE
C          RESULT IS EQUIVALENT TO THE RESULT OF APPLYING A SERIES
C          OF CALLS TO "RF S" WITH SUCCESSIVE RINGS.
C          NOTE THAT THIS APPROACH WILL LEAD TO UNREASONABLE PHASE 
C          RESIDUAL RESULTS IF THE TWO FOURIER TRANSFORMS HAVE 
C          STRONGLY DIFFERENT RADIAL BEHAVIORS.
C
C OPERATIONS:  'RF' and 'FRC'
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C-************************************************************************

        SUBROUTINE RFACTSDO(FSCOP)

        INCLUDE 'CMLIMIT.INC'      
        INCLUDE 'CMBLOCK.INC'      
 
        LOGICAL               :: FSCOP

        INTEGER               :: NX,NY,NZ,NX2,NY2,NZ2
        INTEGER               :: ITYPE1,ITYPE2,MAXIM
        REAL                  :: PIXSIZ,RADMASK,FSCCUT
        LOGICAL               :: WANTSQRTS = .FALSE.

        REAL, ALLOCATABLE     :: AIMG(:,:),BIMG(:,:),CSUM1(:),CSUM(:)
        REAL, ALLOCATABLE     :: PR(:,:),AMP(:,:),AVSUM(:,:)
        REAL, ALLOCATABLE     :: CSUM2(:)
        INTEGER, ALLOCATABLE  :: LR(:)

        CHARACTER (LEN=1)     :: SER
        CHARACTER(LEN=MAXNAM) :: FILNAM1,FILNAM2

        INTEGER, PARAMETER    :: NSCALE = 20
        INTEGER, PARAMETER    :: LUN1   = 21
        INTEGER, PARAMETER    :: LUN2   = 22
        INTEGER, PARAMETER    :: LUNGP  = 23
        INTEGER, PARAMETER    :: LUNDOC = 89

        CALL SET_MPI(ICOMM,MYPID,MPIERR)

C       INPUT FIRST IMAGE
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNAM1,LUN1,'O',ITYPE1,
     &               NX1,NY1,NZ1,MAXIM,
     &               'FIRST INPUT IMAGE~',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (NZ1 > 1) THEN
           CALL ERRT(101,'OPERATION ONLY FOR IMAGES',NE)
           GOTO 9998
        ELSEIF (ITYPE1 < 0) THEN
C          FOURIER INPUT FILE
           LSD1 = NX1
           NX   = NX1 - MOD(-ITYPE1,10)
        ELSE
C          REAL INPUT FILE
           LSD1 = NX1 + 2 - MOD(NX1,2)
           NX   = NX1
        ENDIF

C       INPUT SECOND IMAGE
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNAM2,LUN2,'O',ITYPE2,
     &               NX2,NY2,NZ2,MAXIM,
     &               'SECOND INPUT IMAGE~',.TRUE.,IRTFLG)

        IF (IRTFLG .NE. 0) THEN
           GOTO 9998
        ELSEIF (ITYPE2 < 0 .AND. ITYPE1 > 0) THEN
C          FIRST FILE IS NOT FOURIER INPUT FILE
           CALL ERRT(101,'BOTH FILES MUST BE FOURIER FORMAT',NE)
           GOTO 9998
        ELSEIF (ITYPE2 < 0) THEN
C          SECOND FILE IS A FOURIER INPUT FILE
           LSD2  = NX2
        ELSE
C          SECOND FILE IS A REAL INPUT FILE
           LSD2  = NX2 + 2 - MOD(NX2,2)
        ENDIF

        CALL SIZCHK(UNUSED,LSD1,NY1,NZ1,0,
     &                     LSD2,NY2,NZ2,0,IRTFLG)

        LSD        = LSD1
        NY         = NY1 
        NZ         = NZ1 

        PIXSIZ     = 1
        FMAXSPFREQ = 0.5 / PIXSIZ
        RADMASK    = 0
        WI         = 0.5    ! RING WIDTH
        FSCCUT     = 0.5    ! DEFAULT RESOLUTION CUT LINE
 
        IF (FSCOP) THEN 
           SCALE1 = 0.2     ! SCALE FACTOR1
           SCALE2 = 2.0     ! SCALE FACTOR2

           IF (ITYPE1 > 0 .AND. ITYPE2 > 0) THEN
              CALL RDPRM2S(WI, RADMASK, NOT_USED, 
     &          'RING WIDTH (RECIPROCAL SPACE UNITS), MASKING RADIUS',
     &          IRTFLG)
           ELSE
              CALL RDPRM1S(WI, NOT_USED, 
     &          'RING WIDTH (RECIPROCAL SPACE UNITS)',IRTFLG)
           ENDIF
           IF (IRTFLG .NE. 0) GOTO 9999

           WIP    = 1.0 / WI
           CALL RDPRM2S(PIXSIZ, FSCCUT, NOT_USED, 
     &         'PIXEL SIZE (A) & RESOLUTION CUTOFF',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

           FMAXSPFREQ = 0.5 / PIXSIZ
        
        ELSE 
           CALL RDPRM1S(WI, NOT_USED, 
     &        'RING WIDTH (RECIPROCAL SPACE UNITS)',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

           CALL RDPRM2S(SCALE1,SCALE2,NOT_USED,
     &                'SCALE FACTORS (LOWER,UPPER)',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

        ENDIF

C       MISSING ANGLE STUFF IS ZEROED
        SER    = 'C'
        SSANG  = 90.0

C       FACTOR FOR NOISE COMPARISON
        FACT   = 3.0
        DSCALE = (SCALE2-SCALE1) / FLOAT(NSCALE-1)
        Y1     = FLOAT(MAX(NX,NY))
        INC    = INT(Y1/WI) / 2+1

        ALLOCATE (AIMG(LSD,NY), 
     &            BIMG(LSD,NY), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           MWANT = 2*LSD*NY
           CALL ERRT(46,'RFACTSDO; AIMG & BIMG',MWANT)
           GOTO 9999
        ENDIF

        IF (ITYPE1 > 0) THEN
C          FIRST INPUT FILE IS REAL SPACE, NOT FOURIER
           CALL READV(LUN1,AIMG,LSD,NY,NX1,NY,NZ)
        ELSE
C          FIRST INPUT IS FOURIER ALREADY
           CALL READV(LUN1,AIMG, LSD,NY,NX1,NY,NZ)
        ENDIF
	
        IF (ITYPE2 > 0) THEN
C          SECOND INPUT FILE IS REAL SPACE, NOT FOURIER
           CALL READV(LUN2,BIMG, LSD,NY,NX2,NY,NZ)
        ELSE
C          SECOND INPUT IS FOURIER ALREADY
           CALL READV(LUN2,BIMG, LSD,NY,NX2,NY,NZ)
        ENDIF

        IF (RADMASK > 0) THEN
C          SUPERGAUSSIAN MASKING WANTED

           XCEN       = (NX/2) + 1
           YCEN       = (NY/2) + 1
 	   TNM        = ALOG(1.0 / TINY(TNM))
           RADMASKSQI = 1.0 / (RADMASK**2)

           DO J = 1,NY
              DO I = 1,NX
	        EEE = 0.5 * ((I - XCEN) **2 * RADMASKSQI +
     &                       (J - YCEN) **2 * RADMASKSQI)

	        IF (EEE  >= TNM) THEN
	           AIMG(I,J) = 0.0
	           BIMG(I,J) = 0.0
	        ELSE  
	           EEE       = 0.5 * (2*EEE)**2
                   AIMG(I,J) = EXP(-EEE) * AIMG(I,J)
                   BIMG(I,J) = EXP(-EEE) * BIMG(I,J)
	        ENDIF
             ENDDO
          ENDDO
        ENDIF

        IF (ITYPE1 > 0) THEN
C          FIRST INPUT FILE IS REAL SPACE, NOT FOURIER
           INV = 1
           CALL FMRS_3(AIMG,NX1,NY,NZ,INV)
           IF (INV == 0) THEN
              CALL ERRT(101,'FFT ERROR',NE)
              GOTO 9999
           ENDIF
        ENDIF
	
        IF (ITYPE2 > 0) THEN
C          SECOND INPUT FILE IS REAL SPACE, NOT FOURIER
           INV = 1
           CALL FMRS_3(BIMG,NX2,NY,NZ,INV)
           IF (INV == 0)THEN
              CALL ERRT(101,'FFT ERROR',NE)
              GOTO 9999
           ENDIF 
        ENDIF

        ALLOCATE(PR(NSCALE,INC), AMP(NSCALE,INC),CSUM1(INC),
     &           LR(INC),CSUM(INC),CSUM2(INC), AVSUM(NSCALE,INC),
     &           STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           MWANT = 3*NSCALE * INC + 4*INC
           CALL ERRT(46,'RFACTSDO; PR... ',MWANT)
           GOTO 9999
        ENDIF

C       CALCULATIONS
        CALL PR3DB(AIMG,BIMG,PR,AMP,CSUM1,LR,CSUM,CSUM2,
     &      AVSUM,LSD,NX,NY,NZ,DSCALE,NSCALE,SCALE1,
     &      SSANG,INC,Y1,WI,SER)

C       WRITE RESULT INTO DOC FILE AND RESULT FILE
        CALL RFACTSD2(PR,AMP,CSUM1,LR,CSUM,CSUM2,AVSUM,
     &                NSCALE,INC,WI,FACT,.TRUE.,
     &                LUNDOC,FSCOP,FMAXSPFREQ,LUNGP,FSCCUT,
     &                WANTSQRTS)

        IF (MYPID <= 0) WRITE(NOUT,*)' '

9999    IF (ALLOCATED(AIMG))  DEALLOCATE (AIMG)
        IF (ALLOCATED(BIMG))  DEALLOCATE (BIMG)
        IF (ALLOCATED(PR))    DEALLOCATE (PR)
        IF (ALLOCATED(AMP))   DEALLOCATE (AMP)
        IF (ALLOCATED(CSUM1)) DEALLOCATE (CSUM1)
        IF (ALLOCATED(LR))    DEALLOCATE (LR)
        IF (ALLOCATED(CSUM))  DEALLOCATE (CSUM)
        IF (ALLOCATED(CSUM2)) DEALLOCATE (CSUM2)
        IF (ALLOCATED(AVSUM)) DEALLOCATE (AVSUM)

9998    CLOSE(LUN1)
        CLOSE(LUN2)
        CLOSE(LUNDOC)
        CLOSE(LUNGP)

        END
@


1.39
log
@wantsqrts
@
text
@d16 1
a16 1
C=* Email: spider@@wadsworth.org                                        *
@


1.38
log
@fsc cutoff
@
text
@d8 1
d14 1
a14 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d44 2
d59 1
d258 2
a259 1
     &                LUNDOC,FSCOP,FMAXSPFREQ,LUNGP,FSCCUT)
@


1.37
log
@mask
@
text
@d3 5
a7 4
C    RFACTSDO.F              ADDED FOURIER INPUT JULY 2000 ARDEAN LEITH
C                            OPFILEC             FEB  03   ARDEAN LEITH
C                            FSCOP               FEB  12   ARDEAN LEITH
C                            MASK                SEP  12   ARDEAN LEITH
d55 1
a55 1
        REAL                  :: PIXSIZ,RADMASK
d124 1
d140 3
a142 4
           WIP      = 1.0 / WI

           CALL RDPRM1S(PIXSIZ, NOT_USED, 
     &                 'PIXEL SIZE (ANGSTROMS)',IRTFLG)
d254 1
a254 1
     &                LUNDOC,FSCOP,FMAXSPFREQ,LUNGP)
@


1.36
log
@reciprocal space shell unit
@
text
@d6 1
d54 1
a54 1
        REAL                  :: PIXSIZ
d56 1
a56 1
        REAL, ALLOCATABLE     :: AIMG(:),BIMG(:),CSUM1(:),CSUM(:)
d100 4
d108 1
d121 2
d128 8
a135 3
           WI = 0.5
           CALL RDPRM1S(WI, NOT_USED, 
     &        'RING WIDTH (IN RECIPROCAL SPACE UNITS)',IRTFLG)
d137 2
a138 1
           WIP = 1.0 / WI
d141 1
a141 1
     &                 'PIXEL SIZE (IN ANGSTROMS)',IRTFLG)
d143 1
d145 1
a146 1
           WI = 0.5
d148 1
a148 1
     &        'RING WIDTH (IN RECIPROCAL SPACE UNITS)',IRTFLG)
d167 2
a168 2
        ALLOCATE (AIMG(LSD*NY), 
     &            BIMG(LSD*NY), STAT=IRTFLG)
d175 47
a221 15
        IF (ITYPE1 .EQ. 1) THEN
C          INPUT FILES ARE REAL SPACE, NOT FOURIER
           DO  I = 1,NY
              CALL REDLIN(LUN1,AIMG(1+(I-1)*LSD),NX,I)
           ENDDO

           DO  I = 1,NY
              CALL REDLIN(LUN2,BIMG(1+(I-1)*LSD),NX,I)
           ENDDO

C          CONVERT TO FOURIER SPACE
           INV = +1
           CALL FMRS_2(AIMG,NX,NY,INV)
           IF (INV .EQ. 0) THEN
              CALL ERRT(101,'FFT ERROR',NE)           
d224 7
a230 4

           INV = +1
           CALL FMRS_2(BIMG,NX,NY,INV)
           IF (INV .EQ. 0)THEN
d233 1
a233 5
           ENDIF
        ELSE
C          INPUT IS FOURIER ALREADY
           CALL READV(LUN1,AIMG,LSD,NY,NX,NY,NZ)
           CALL READV(LUN2,BIMG,LSD,NY,NX,NY,NZ)
@


1.35
log
@FMAXSPFREQ bug
@
text
@d120 3
a122 3
           WIP = 2
           CALL RDPRM1S(WIP, NOT_USED, 
     &                 'RING WIDTH (IN PIXELS)',IRTFLG)
d124 1
a124 1
           WI = 1.0 / WIP    ! TO RECIPROCAL SPACE SAMPLING UNITS
a134 1
           WIP = 1.0 / WI
@


1.34
log
@PIXSIZZZ -> PIXSIZ
@
text
@d53 1
d109 3
a111 3
        LSD = LSD1
        NY  = NY1 
        NZ  = NZ1 
d113 2
a114 1
        PIXSIZ = 1
d129 1
a129 1

d208 1
a208 1
     &                LUNDOC,FSCOP,PIXSIZ,LUNGP)
@


1.33
log
@pixelsize, wip
@
text
@d112 1
a112 1
        PIXSIZZZ = 1
d124 1
a124 1
           CALL RDPRM1S(PIXSIZZZ, NOT_USED, 
d206 1
a206 1
     &                LUNDOC,FSCOP,PIXSIZZZ,LUNGP)
@


1.32
log
@prompts
@
text
@d112 1
a112 1
        FMAXSPFREQ = 1
d118 2
a119 2
           WI     = 2
           CALL RDPRM1S(WI, NOT_USED, 
d122 1
a122 1
           WI = 1.0 / WI    ! TO RECIPROCAL SPACE SAMPLING UNITS
d124 2
a125 2
           CALL RDPRM1S(FMAXSPFREQ, NOT_USED, 
     &                 'MAXIMUM SPATIAL FREQUENCY',IRTFLG)
d129 1
a129 1
           WI         = 0.5
d131 1
a131 2
     &        'RING WIDTH (IN RECIPROCAL SPACE UNITS)',
     &        IRTFLG)
d133 1
d136 1
a136 1
     &                'SCALE FACTORS(LOWER,UPPER)',IRTFLG)
d206 1
a206 1
     &                LUNDOC,FSCOP,FMAXSPFREQ,LUNGP)
@


1.31
log
@LUNGP  = 23
@
text
@a77 1
C          ONLY FOR VOLUMES
d131 1
a131 1
     &        'RING WIDTH (IN RECIPROCAL SPACE SAMPLING UNITS)',
d136 1
a136 1
     &                'SCALE FACTOR (LOWER,UPPER)',IRTFLG)
@


1.30
log
@rewrite
@
text
@d65 1
a65 1
        INTEGER, PARAMETER    :: LUNGP  = 22
d206 1
a206 1
     &                NSCALE,INC,WI,FACT,NOUT,.TRUE.,
@


1.29
log
@formatting of output for 2d
@
text
@d5 1
d11 1
a11 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d44 1
a44 3
        SUBROUTINE RFACTSDO(LUN1,LUN2,NSAM, NROW, NSLICE,
     &                                NSAM2,NROW2,NSLICE2,
     &                                ITYPE1,ITYPE2)
d46 1
d49 1
a49 4
        REAL, ALLOCATABLE, DIMENSION(:)    :: AIMG,BIMG,CSUM1,CSUM
        REAL, ALLOCATABLE, DIMENSION(:,:)  :: PR,AMP,AVSUM
        REAL, ALLOCATABLE, DIMENSION(:)    :: CSUM2
        INTEGER, ALLOCATABLE, DIMENSION(:) :: LR
d51 2
a52 1
        CHARACTER*1       SER
d54 54
a107 1
        PARAMETER(NSCALE=20)
d109 3
a111 1
        CALL RDPRM(WI,NOT_USED,'RING WIDTH')
d113 26
a138 2
        CALL RDPRM2(SCALE1,SCALE2,NOT_USED,
     &             'SCALE FACTOR(LOWER,UPPER)')
a139 6
        IF (ITYPE1 .LT. 0) THEN
C          FOURIER INPUT FILES
           LSD  = NSAM
           NSAM = NSAM - MOD(-ITYPE2,10)
        ELSE
           LSD = NSAM+2-MOD(NSAM,2)
d142 1
d148 9
a156 7
        DSCALE = (SCALE2-SCALE1)/FLOAT(NSCALE-1)
        Y1     = FLOAT(MAX0(NSAM,NROW))
        INC    = INT(Y1/WI)/2+1

        ALLOCATE (AIMG(LSD*NROW),BIMG(LSD*NROW), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF, AIMG & BIMG',IER)
d162 2
a163 2
           DO  I = 1,NROW
              CALL REDLIN(LUN1,AIMG(1+(I-1)*LSD),NSAM,I)
d166 2
a167 2
           DO  I = 1,NROW
              CALL REDLIN(LUN2,BIMG(1+(I-1)*LSD),NSAM,I)
d172 3
a174 3
           CALL FMRS_2(AIMG,NSAM,NROW,INV)
           IF (INV.EQ.0) THEN
              CALL ERRT(38,'RF ',NE)           
d179 3
a181 3
           CALL FMRS_2(BIMG,NSAM,NROW,INV)
           IF (INV.EQ.0)THEN
              CALL ERRT(38,'RF ',NE)
d186 2
a187 3
           CALL READV(LUN1,AIMG,LSD,NROW,NSAM,NROW,NSLICE)
           CALL READV(LUN2,BIMG,LSD,NROW,NSAM,NROW,NSLICE)

d193 3
a195 2
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF,  ARRAYS',IER)
d199 1
d201 1
a201 1
     &      AVSUM,LSD,NSAM,NROW,NSLICE,DSCALE,NSCALE,SCALE1,
a204 12
        WRITE(NOUT,*) '2D PHASE RESIDUE AND FOURIER SHELL CORRELATION'

        WRITE(NOUT,5600) WI
5600    FORMAT(' RING WIDTH: ',G12.5)

        WRITE(NOUT,5700)
5700    FORMAT(10X,'|NUMBER|','|RING RADIUS',
     &             '|DPH|','   |FRC|','  |FRCCRIT|',' |PIXELS|')          

        WRITE(NOUT,5800)
5800    FORMAT(10X,'        ',' NORMALIZED|')             

d206 2
a207 1
     &                 NSCALE,INC,WI,FACT,NOUT,.TRUE.)
d209 1
a209 2
9999    CLOSE(LUN1)
        CLOSE(LUN2)
d211 1
a211 1
        IF (ALLOCATED(AIMG))  DEALLOCATE (AIMG)
d220 5
@


1.28
log
@GPL_2010
@
text
@d28 11
a38 11
C    RFACTSDO: DIFFERENTIAL R-FACTOR AND PHASE RESIDUAL COMPARISON OF 
C              TWO FOURIER TRANSFORMS ON A SERIES OF RINGS.  FOLLOWS
C              PHILOSOPHY OF FRANK ET AL. SCIENCE 214 (1981) 1353-1355. 
C              IN THE CURRENT ROUTINE, ALL RINGS ARE COMPUTED AT ONCE,
C              BUT SCALE SEARCH IS DONE ON EACH RING SEPARATELY.  THUS THE
C              RESULT IS EQUIVALENT TO THE RESULT OF APPLYING A SERIES
C              OF CALLS TO "RF S" WITH SUCCESSIVE RINGS.
C NOTE THAT THIS APPROACH WILL LEAD TO UNREASONABLE PHASE RESIDUAL RESULTS 
C IF THE TWO FOURIER TRANSFORMS HAVE STRONGLY DIFFERENT RADIAL BEHAVIORS.
C
C IMAGE_PROCESSING_ROUTINE
d43 3
a45 3
        SUBROUTINE RFACTSDO(LUN1,LUN2,NSAM,NROW,NSLICE,
     &                               NSAM2,NROW2,NSLICE2,
     &                               ITYPE1,ITYPE2)
d49 3
a51 3
        REAL, ALLOCATABLE, DIMENSION(:) ::    AIMG,BIMG,CSUM1,CSUM
        REAL, ALLOCATABLE, DIMENSION(:,:) ::  PR,AMP,AVSUM
        REAL, ALLOCATABLE, DIMENSION(:) ::    CSUM2
d129 2
a130 2
C     WRITE RESULT INTO DOC FILE AND RESULT FILE
      WRITE(NOUT,*) '2D PHASE RESIDUE AND FOURIER SHELL CORRELATION'
d132 2
a133 2
      WRITE(NOUT,5600) WI
5600  FORMAT(1X,'RING WIDTH = ',G12.5)
d135 3
a137 3
      WRITE(NOUT,5700)
5700  FORMAT(10X,'|NUMBER|','|RING RADIUS',
     &           '|DPH|','|FRC|','|FRCCRIT|','|PIXELS|')          
d139 2
a140 2
      WRITE(NOUT,5800)
5800  FORMAT(10X,'        ',' NORMALIZED|')             
d142 2
a143 2
        CALL  RFACTSD2(PR,AMP,CSUM1,LR,CSUM,CSUM2,AVSUM,
     &                 NSCALE,INC,WI,FACT,NOUT)
d147 1
a157 1
        RETURN
@


1.27
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.26
log
@GPL License fixed
@
text
@a29 1
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE DIVISION OF    *
@


1.25
log
@GPL License fixed
@
text
@a30 1
C *    THE DIVISION OF LABORATORIES AND RESEARCH                           *
@


1.24
log
@HRI GPL License used
@
text
@a1 1
C++*************************************************************************
a6 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 3

C *  COPYRIGHT (C)1981, 1989 DIVISION OF LABORATORIES AND                  *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
a30 2
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
a32 1
C **************************************************************************
@


1.23
log
@opfilec
@
text
@d1 1
d7 1
d9 1
d11 24
d41 1
@


1.22
log
@nloop,iloop_removed
@
text
@d3 2
a4 1
C    RFACTSDO.F                 ADDED FOURIER INPUT JULY 2000 ARDEAN LEITH
a27 1
C        1         2         3         4         5         6         7
d31 3
a33 1
        SUBROUTINE RFACTSDO
d42 1
a42 2
        CHARACTER *81     FILNAM1,FILNAM2
        CHARACTER*1       NULL,SER
a44 33
        DATA  LUN1,LUN2/21,22/

C       INPUT FIRST IMAGE

        MAXIM = 0
        CALL OPFILE(.TRUE.,FILNAM1,LUN1,'O',ITYPE1,NSAM,NROW,
     &          NSLICE,MAXIM,'FIRST INPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (ITYPE1 .GT. 1)THEN
           CLOSE(LUN1)
           CALL ERRT(2,'RF',NE)
           RETURN
        ENDIF

C       INPUT SECOND IMAGE

        MAXIM = 0
        CALL OPFILE(.TRUE.,FILNAM2,LUN2,'O',ITYPE2,NSAM2,NROW2,
     &          NSLICE2,MAXIM,'SECOND INPUT',.TRUE.,IRTFLG)

        IF (IRTFLG .NE. 0) THEN
           CLOSE(LUN1)
           RETURN

        ELSEIF (ITYPE1 .NE. ITYPE2) THEN
           CALL ERRT(2,'RF',NE)
           GOTO 9999

        ELSEIF (NSAM.NE.NSAM2 .OR. NROW.NE.NROW2) THEN        
           CALL ERRT(1,'RF',NE)
           GOTO 9999
        ENDIF
@


1.21
log
@can taked mixed fourier and real
@
text
@d3 1
a3 1
C    RFACTSDO.F              DDED FOURIER INPUT JULY 2000 ARDEAN LEITH
d53 1
a53 1
        IF (ITYPE1 .GT. 1) THEN
d69 4
d78 1
a78 1
        CALL RDPRM(WI,NLOOP,ILOOP,'RING WIDTH')
d80 1
a80 1
        CALL RDPRM2(SCALE1,SCALE2,NLOOP,ILOOP,
d88 1
a88 1
           LSD = NSAM + 2 - MOD(NSAM,2)
d96 1
a96 1
        DSCALE = (SCALE2 - SCALE1) / FLOAT(NSCALE-1)
d98 1
a98 1
        INC    = INT(Y1 / WI) / 2 + 1
d107 1
a107 1
C          FIRST INPUT FILE IS REAL SPACE, NOT FOURIER
d112 4
a122 11
        ELSE
C          FIRST INPUT IS FOURIER ALREADY
           CALL READV(LUN1,AIMG,LSD,NROW,NSAM,NROW,NSLICE)
        ENDIF

        IF (ITYPE2 .GE 1. 1) THEN
C          SECOND INPUT FILE IS REAL SPACE, NOT FOURIER

           DO  I = 1,NROW
              CALL REDLIN(LUN2,BIMG(1+(I-1)*LSD),NSAM,I)
           ENDDO
d131 2
a132 1
C          SECOND INPUT IS FOURIER ALREADY
d134 1
@


1.20
log
@fourier input allowed
@
text
@d3 1
a3 1
C    RFACTSDO.F                 ADDED FOURIER INPUT JULY 2000 ARDEAN LEITH
d53 1
a53 1
        IF (ITYPE1 .GT. 1)THEN
a68 4
        ELSEIF (ITYPE1 .NE. ITYPE2) THEN
           CALL ERRT(2,'RF',NE)
           GOTO 9999

d84 1
a84 1
           LSD = NSAM+2-MOD(NSAM,2)
d92 1
a92 1
        DSCALE = (SCALE2-SCALE1)/FLOAT(NSCALE-1)
d94 1
a94 1
        INC    = INT(Y1/WI)/2+1
d103 1
a103 1
C          INPUT FILES ARE REAL SPACE, NOT FOURIER
a107 4
           DO  I = 1,NROW
              CALL REDLIN(LUN2,BIMG(1+(I-1)*LSD),NSAM,I)
           ENDDO

d115 11
d134 1
a134 2
C          INPUT IS FOURIER ALREADY
           CALL READV(LUN1,AIMG,LSD,NROW,NSAM,NROW,NSLICE)
a135 1

@


1.19
log
@adapted for dynamical memory allocation
@
text
@d3 1
a3 1
C    RFACTSDO.FOR
d35 6
a40 5
        REAL, ALLOCATABLE, DIMENSION(:) :: AIMG,BIMG,CSUM1,CSUM
        REAL, ALLOCATABLE, DIMENSION(:,:) :: PR,AMP,AVSUM
        REAL, ALLOCATABLE, DIMENSION(:) :: CSUM2
        INTEGER, ALLOCATABLE, DIMENSION(:) ::LR
        CHARACTER *81   FILNAM1,FILNAM2
a44 1
 
d46 1
a47 2
C   ----------------------INPUT FIRST IMAGE

d49 3
a51 8

        CALL OPFILE(.TRUE.,FILNAM1,LUN1,'O',ITYPE,NSAM,NROW,
     &    NSLICE,MAXIM,'FIRST INPUT',.FALSE.,IRTFLG)
 
       IF (IRTFLG .NE. 0) THEN
           CALL ERRT(4,'RF ',NE)
           RETURN
        ENDIF
d53 1
a53 1
        IF(ITYPE.NE.1)THEN
d59 1
a59 1
C   ----------------------INPUT SECOND IMAGE
d62 2
a63 3

        CALL OPFILE(.TRUE.,FILNAM2,LUN2,'O',ITYPE,NSAM2,NROW2,
     &    NSLICE,MAXIM,'SECOND INPUT',.FALSE.,IRTFLG)
a65 1
           CALL ERRT(4,'RF ',NE)
a67 1
        ENDIF
d69 1
a69 1
        IF(ITYPE.NE.1)THEN
d71 1
a71 4
           CLOSE(LUN1)
           CLOSE(LUN2)
           RETURN
        ENDIF
d73 1
a73 1
        IF (NSAM.NE.NSAM2.OR.NROW.NE.NROW2) THEN        
d75 1
a75 3
           CLOSE(LUN1)
           CLOSE(LUN2)
           RETURN
d81 1
a81 70
     &    'SCALE FACTOR(LOWER,UPPER)')

        SER='C'
        SSANG=90.0
C  FACTOR FOR NOISE COMPARISON
        FACT=3.0
        LSD=NSAM+2-MOD(NSAM,2)
        DSCALE=(SCALE2-SCALE1)/FLOAT(NSCALE-1)
        Y1=FLOAT(MAX0(NSAM,NROW))
        INC=INT(Y1/WI)/2+1

        ALLOCATE (AIMG(LSD*NROW), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF, AIMG',IER)
           RETURN
        ENDIF

        ALLOCATE (BIMG(LSD*NROW), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF, BIMG',IER)
           RETURN
        ENDIF

        DO  I = 1,NROW
           CALL REDLIN(LUN1,AIMG(1+(I-1)*LSD),NSAM,I)
        ENDDO
        CLOSE(LUN1)
        DO  I = 1,NROW
           CALL REDLIN(LUN2,BIMG(1+(I-1)*LSD),NSAM,I)
        ENDDO
        CLOSE(LUN2)

        INV=+1
        CALL FMRS_2(AIMG,NSAM,NROW,INV)
        IF (INV.EQ.0) THEN
           CALL ERRT(38,'RF ',NE)           
           RETURN
        ENDIF

        INV=+1
        CALL FMRS_2(BIMG,NSAM,NROW,INV)
        IF (INV.EQ.0)THEN
           CALL ERRT(38,'RF ',NE)
           RETURN
        ENDIF
        NSLICE=1

        ALLOCATE (PR(NSCALE,INC), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF, PR',IER)
           RETURN
        ENDIF

        ALLOCATE (AMP(NSCALE,INC), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF, AMP',IER)
           RETURN
        ENDIF

        ALLOCATE (CSUM1(INC), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF, CSUM1',IER)
           RETURN
        ENDIF

        ALLOCATE (LR(INC), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF, LR',IER)
           RETURN
        ENDIF
d83 51
a133 5
        ALLOCATE (CSUM(INC), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF, CSUM',IER)
           RETURN
        ENDIF
a134 4
        ALLOCATE (CSUM2(INC), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'RF, CSUM2',IER)
           RETURN
d137 3
a139 1
        ALLOCATE (AVSUM(NSCALE,INC), STAT=IRTFLG)
d141 2
a142 2
           CALL ERRT(46,'RF, AVSUM',IER)
           RETURN
d149 1
a149 1
C   ---------------TO WRITE RESULT INTO DOC FILE AND RESULT FILE
d151 1
d154 1
d157 2
a158 1
     $ '|DPH|','|FRC|','|FRCCRIT|','|PIXELS|')          
d163 13
a175 1
     &  NSCALE,INC,WI,FACT,NOUT)
d177 1
a177 9
        DEALLOCATE (AIMG)
        DEALLOCATE (BIMG)
        DEALLOCATE (PR)
        DEALLOCATE (AMP)
        DEALLOCATE (CSUM1)
        DEALLOCATE (LR)
        DEALLOCATE (CSUM)
        DEALLOCATE (CSUM2)
        DEALLOCATE (AVSUM)
@


1.18
log
@new version
@
text
@d7 1
a7 1
C *  COPYRIGHT (C)1981, 1989 DIVISION OF LABORATORIES AND		   *
d12 1
a12 1
C *    THE DIVISION OF LABORATORIES AND RESEARCH			   *
d17 5
a21 5
C	       PHILOSOPHY OF FRANK ET AL. SCIENCE 214 (1981) 1353-1355. 
C	       IN THE CURRENT ROUTINE, ALL RINGS ARE COMPUTED AT ONCE,
C 	       BUT SCALE SEARCH IS DONE ON EACH RING SEPARATELY.  THUS THE
C	       RESULT IS EQUIVALENT TO THE RESULT OF APPLYING A SERIES
C	       OF CALLS TO "RF S" WITH SUCCESSIVE RINGS.
d25 4
d31 11
a41 2
	SUBROUTINE RFACTSDO(MAXDIM)
        INCLUDE 'CMBLOCK.INC'
d43 4
a46 14
	COMMON       BUF(1)
#ifdef SP_F90
        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: Q
#else
	DIMENSION    Q(1)
	POINTER      (IPQ,Q) 
#endif
	LOGICAL      RUNTIME
	CHARACTER *81   FILNAM1,FILNAM2
	CHARACTER*1       NULL,SER
	DATA  LUN1,LUN2/21,22/
	NULL=CHAR(0)
d48 17
a64 11
	CALL FILERD (FILNAM1,NLET,NULL,'FIRST INPUT',IRTFLG)
	CALL OPENFB(BUF,FILNAM1,LUN1,NSAM,NROW,'O',NF,NSLICE)
	IF (NF.EQ.1) THEN
         CALL ERRT(4,'RF',NE)
         RETURN
	ENDIF
	IF(IFORM.NE.1)THEN
         CLOSE(LUN1)
	 CALL ERRT(2,'RF',NE)
	 RETURN
	ENDIF
d66 33
a98 23
	CALL FILERD (FILNAM2,NLET,NULL,'SECOND INPUT',IRTFLG)
	CALL OPENFB(BUF,FILNAM2,LUN2,NSAM2,NROW2,'O',NF,NSLICE)
	IF (NF.EQ.1) THEN
 	 CALL ERRT(4,'RF',NE)
	 RETURN
	ENDIF
	IF(IFORM.NE.1)THEN
	 CALL ERRT(2,'RF',NE)
	 RETURN
	ENDIF
C
	IF (NSAM.NE.NSAM2.OR.NROW.NE.NROW2) THEN	
	 CALL ERRT(1,'RF',NE)
	 CLOSE(LUN2)
	 RETURN
	ENDIF
C
	CALL RDPRM(WI,NLOOP,ILOOP,'RING WIDTH')
C
	CALL RDPRM2(SCALE1,SCALE2,NLOOP,ILOOP,
     &	  'SCALE FACTOR(LOWER,UPPER)')
	SER='C'
	SSANG=90.0
d100 86
a185 48
	FACT=3.0
	LSD=NSAM+2-MOD(NSAM,2)
	DSCALE=(SCALE2-SCALE1)/FLOAT(NSCALE-1)
	Y1=FLOAT(MAX0(NSAM,NROW))
	INC=INT(Y1/WI)/2+1
	K1=1
	K2=K1+LSD*NROW
	K3=K2+LSD*NROW
	K4=K3+INC*NSCALE
	K5=K4+INC*NSCALE
	K6=K5+INC
	K7=K6+INC
	K8=K7+INC
	K9=K8+INC
        MEMWANT=K9+INC*NSCALE
        CALL CHKMEM(MEMWANT,BUF,MAXDIM,RUNTIME,IPQ,IRTFLG)
	IF(IRTFLG.NE.0)  THEN
	   CLOSE(LUN1)
	   CLOSE(LUN2)
	   CALL ERRT(6,'RF',NE)
	   RETURN
	ENDIF
#ifdef SP_F90
         Q = >IPQ
#endif
          DO  I = 1,NROW
             CALL REDLIN(LUN1,Q(K1+(I-1)*LSD),NSAM,I)
          ENDDO
          CLOSE(LUN1)
          DO  I = 1,NROW
             CALL REDLIN(LUN2,Q(K2+(I-1)*LSD),NSAM,I)
          ENDDO
	  CLOSE(LUN2)
	INV=+1
	CALL FMRS_2(Q(K1),NSAM,NROW,INV)
	IF (INV.EQ.0) THEN
	   CALL ERRT(38,'RF ',NE)
	   RETURN
	ENDIF
	INV=+1
	CALL FMRS_2(Q(K2),NSAM,NROW,INV)
	IF (INV.EQ.0)THEN
	   CALL ERRT(38,'RF ',NE)
	   RETURN
	ENDIF
	NSLICE=1
	CALL PR3DB(Q(K1),Q(K2),Q(K3),Q(K4),Q(K5),Q(K6),Q(K7),Q(K8),
     &      Q(K9),LSD,NSAM,NROW,NSLICE,DSCALE,NSCALE,SCALE1,
d187 1
d194 1
a194 1
     $ '|DPH|','|FRC|','|FRCCRIT|','|PIXELS|')		
d196 3
a198 3
5800  FORMAT(10X,'        ',' NORMALIZED|')		
C
	CALL  RFACTSD2(Q(K3),Q(K4),Q(K5),Q(K6),Q(K7),Q(K8),Q(K9),
d200 11
a210 2
	IF(RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'RF',IRTFLG)
	END
@


1.17
log
@fixed
@
text
@d41 1
a41 2
	CHARACTER*1       NULL
	EQUIVALENCE (JDUM,DUM)
d78 5
a82 1
C
a83 3
	K1=1
	K2=K1+NSAM*NROW
	K3=K2+NSAM*NROW
d86 3
d91 1
a91 1
	K6=K5+INC*NSCALE
d93 3
a95 4
	K8=K7+INC*NSCALE
	K9=K8+INC*NSCALE

        MEMWANT=MAX0(K9+INC*NSCALE,K3+2*MAX0(NSAM,NROW))
d107 1
a107 1
             CALL REDLIN(LUN1,Q(K1+(I-1)*NSAM),NSAM,I)
d111 1
a111 1
             CALL REDLIN(LUN2,Q(K2+(I-1)*NSAM),NSAM,I)
d114 2
a115 2
	INV=1
	CALL FMR_2(Q(K1),NSAM,NROW,Q(K3),INV)
d120 2
a121 2
	INV=1
	CALL FMR_2(Q(K2),NSAM,NROW,Q(K3),INV)
d125 5
a129 4
	ENDIF 
	CALL RFACTSD2(Q(K1),Q(K2),Q(K3),Q(K4),Q(K5),Q(K6),
     &  Q(K7),Q(K8),Q(K9),NSAM,NROW,DSCALE,NSCALE,SCALE1,
     &  INC,Y1,WI)
d131 1
a131 5
      WRITE(NOUT,*) 'THIS PROGRAM IS DEVELOPED FOR 2D RESOLUTION  '
      WRITE(NOUT,*) 'ESTIMATION BY THE METHOD OF PHASE RESIDUES AND' 
      WRITE(NOUT,*) 'FOURIER RING CORRELATION'
      WRITE(NOUT,*) 'FOLLOWING IS THE RESULT OF PR AND FRC '
      WRITE(NOUT,*) '(ALSO IN DOC FILE)'
d140 2
a141 2
	CALL  RFACTOUT(Q(K3),Q(K4),Q(K5),Q(K6),Q(K7),Q(K8),Q(K9),
     &  NSCALE,INC,WI,NOUT)
a142 51
	END
C
	SUBROUTINE  RFACTOUT(PR,AMP,CSUM1,LR,CSUM,CSUM2,AVSUM,
     &  NSCALE,INC,WI,NOUT)
	PARAMETER (NLIST=6)
	DIMENSION       DLIST(NLIST)
	DIMENSION  PR(NSCALE,INC),AMP(NSCALE,INC),CSUM1(NSCALE,INC),
     &		CSUM(NSCALE,INC),CSUM2(NSCALE,INC),AVSUM(NSCALE,INC)
	INTEGER  LR(INC)
	DATA  NDOC/88/
	PI=4.0*DATAN(1.0D0)
	DO  L=1,INC 
	JDUM=LR(L)
	IF(JDUM.NE.0) THEN
	DLIST(1)= L
	DLIST(2)=FLOAT(L-1)/FLOAT(INC-1)*0.5
	DLIST(5)=3./SQRT(PI*WI*(FLOAT(L)-0.5))
	DLIST(6)=JDUM
C
	RFMIN=AVSUM(1,L)/AMP(1,L)
	NSCM=1
	IFOUND=0
	DO  NSC=2,NSCALE
	RFM=AVSUM(NSC,L)/AMP(NSC,L)
	IF(RFM.LT.RFMIN) THEN
	NSCM=NSC
	RFMIN=RFM
	IFOUND=1
	ENDIF
	ENDDO
C
	IF(IFOUND.EQ.0)   WRITE(NOUT,436)  L
436	FORMAT(' *** NO MINIMUM IN RFACT CURVE FOUND FOR RING = ',I5)
C
C NSCM IS THE NUMBER OF THE ELEMENT IN EACH ARRAY WITH THE CORRECT
C SCALING. SCALE IS THE CORRECT SCALING.
C
	BK1=AMP(NSCM,L)
	BK2=PR(NSCM,L)
	IF(BK1.NE.0.) DLIST(3)=SQRT(BK2/BK1)
	BK3=CSUM2(NSCM,L)
	BK4=CSUM1(NSCM,L)
	BK5=CSUM(NSCM,L)
	IF( BK3.NE.0.OR.BK4.NE.0.) DLIST(4)=BK5/SQRT(BK4*BK3)
756     CALL SAVD(NDOC,DLIST,NLIST,IRTFLG)
	WRITE(NOUT,6100)  L,(DLIST(K),K=2,5),JDUM
6100    FORMAT (1X,I4,4(2X,F12.5),4X,I6)
	ENDIF
	ENDDO
	CALL SAVDC
	CLOSE(NDOC)
@


1.16
log
@*** empty log message ***
@
text
@d146 1
a146 1
	SUBROUTINE  RFACTOUT(QK3,QK4,QK5,QK6,QK7,QK8,QK9,
d150 3
a152 2
	DIMENSION  QK3(*),QK4(*),QK5(*),QK7(*),QK8(*),QK9(*)
	INTEGER  QK6(*)
d156 1
a156 1
	JDUM=QK6(L)
d163 1
a163 1
	RFMIN=QK9((L-1)*NSCALE+1)/QK4((L-1)*NSCALE+1)
a164 1
	LCUR=L
d167 1
a167 1
	RFM=QK9((L-1)*NSCALE+NSC)/QK4((L-1)*NSCALE+NSC)
d175 1
a175 1
	IF(IFOUND.EQ.0)   WRITE(NOUT,436)LCUR
d181 2
a182 2
	BK1=QK4((L-1)*NSCALE+NSCM)
	BK2=QK3((L-1)*NSCALE+NSCM)
d184 3
a186 3
	BK3=QK8((L-1)*NSCALE+NSCM)
	BK4=QK5((L-1)*NSCALE+NSCM)
	BK5=QK7((L-1)*NSCALE+NSCM)
d188 2
a189 2
756     CALL SAVD(NDOC, DLIST, NLIST, IRTFLG)
	WRITE(NOUT,6100)L,(DLIST(K),K=2,5),JDUM
@


1.15
log
@new version
@
text
@d155 1
a155 1
	JDUM=QK6(L-1)
d162 1
a162 2
	NSCM=0
	RFMIN=QK9((L-1)*NSCALE)/QK4((L-1)*NSCALE)
d166 2
a167 2
	DO  NSC=1,NSCALE
	RFM=QK9((L-1)*NSCALE+(NSC-1))/QK4((L-1)*NSCALE+(NSC-1))
@


1.14
log
@f90 alloc
@
text
@a41 1
	DIMENSION       DLIST(6)
d43 1
a43 2
	DATA  LUN1,LUN2/21,22/,NDOC/88/
CNO_SAVE
a44 1
	PI=4.0*ATAN(1.00)
a127 1
      NLIST=6
d141 16
a156 3
	DO 6000 L=1,INC 
	DUM=Q(K6+L-1)
	IF(DUM.EQ.0.0) GO TO 6000
d163 1
a163 1
	RFMIN=Q(K9+(L-1)*NSCALE)/Q(K4+(L-1)*NSCALE)
d168 1
a168 1
	RFM=Q(K9+(L-1)*NSCALE+(NSC-1))/Q(K4+(L-1)*NSCALE+(NSC-1))
d182 2
a183 2
	BK1=Q(K4+(L-1)*NSCALE+NSCM)
	BK2=Q(K3+(L-1)*NSCALE+NSCM)
d185 3
a187 3
	BK3=Q(K8+(L-1)*NSCALE+NSCM)
	BK4=Q(K5+(L-1)*NSCALE+NSCM)
	BK5=Q(K7+(L-1)*NSCALE+NSCM)
d192 2
a193 2
6000	CONTINUE

a195 1
	IF(RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'RF',IRTFLG)
@


1.13
log
@freq fixed
@
text
@d31 5
d38 1
d104 3
@


1.12
log
@modified intrinisic function call for f90 compatibility
@
text
@d140 1
a140 1
	DLIST(2)=(FLOAT(L-1)*WI+(WI/2.0))/Y1
@


1.11
log
@R
@
text
@d82 1
a82 1
	INC=JINT(Y1/WI)/2+1
@


1.10
log
@*** empty log message ***
@
text
@d44 1
a44 1
	CALL OPENFB(BUF,FILNAM1,LUN1,NSAM,NROW,'R',NF,NSLICE)
d56 1
a56 1
	CALL OPENFB(BUF,FILNAM2,LUN2,NSAM2,NROW2,'R',NF,NSLICE)
@


1.9
log
@*** empty log message ***
@
text
@d149 1
a149 1
	DO 540 NSC=1,NSCALE
d156 1
a156 1
540	CONTINUE
@


1.8
log
@bugs fixed
@
text
@d178 1
a178 1
	IF(ROUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'RF',IRTFLG)
@


1.7
log
@cleared
@
text
@a91 1
	IF (MEMWANT .GT. MAXDIM) THEN
d176 1
a176 1
	ALL SAVDC
@


1.6
log
@error 38
@
text
@d27 1
a27 2
	SUBROUTINE RFACTSDO(maxdim)
#ifdef SP_UNIX  
a28 3
#else
	INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d30 9
a38 15

#ifdef SP_ALLOC
      COMMON       BUF(1024)
      DIMENSION    Q(1)
      POINTER      (IPQ,Q) 
      LOGICAL      RUNTIME
#else
      COMMON          BUF(1024),Q(1)
#endif
      CHARACTER *81   FILNAM1,FILNAM2
      CHARACTER*1       NULL
      DIMENSION       DLIST(6)
      EQUIVALENCE (JDUM,DUM)
      DATA  lun1/77/,NDOC/88/

d40 2
a41 3

      NULL=CHAR(0)
      PI=4.0*ATAN(1.00)
d43 4
a46 5
      CALL FILERD (FILNAM1,NLET,NULL,'FIRST INPUT',IRTFLG)
      CALL OPENFB(BUF,FILNAM1,LUN1,NSAM,NROW,'OLD',NF,Nslice)

      IF (NF.EQ.1) THEN
         CALL ERRT(4,'RF M',NE)
d48 13
a60 2
      ENDIF
C
d62 2
a63 2
	CALL ERRT(2,'RF M',NE)
	RETURN
d66 5
a70 1
      CALL FILERD (FILNAM2,NLET,NULL,'SECOND INPUT',IRTFLG)
d72 1
a72 1
      CALL RDPRM(WI, NLOOP, ILOOP, 'RING WIDTH')
d75 1
a75 1
     &  'SCALE FACTOR(LOWER,UPPER)')
a77 1

a82 1

d91 1
a91 5
#ifdef SP_ALLOC
        CALL ALLOCIT(MEMWANT,RUNTIME,IPQ,'RF M',IRTFLG)
        IF (.NOT.RUNTIME)  THEN
#else

d93 1
a93 1
#endif
d95 2
a96 1
	   CALL ERRT(6,'RF M',NE)
d99 1
a99 2

          DO  I = 1, NROW
d102 3
a104 26

       CLOSE(LUN1)

C   ----------------------INPUT SECOND IMAGE

      CALL OPENFB(BUF,FILNAM2,LUN1,NSAM2,NROW2,'OLD',NF,Nslice)

      IF (NF.EQ.1) THEN
      CALL ERRT(4,'RF M',NE)
      RETURN
      ENDIF
C
	IF(IFORM.NE.1)THEN
	CALL ERRT(2,'RF M',NE)
	RETURN
	ENDIF
C

      IF (NSAM.NE.NSAM2.OR.NROW.NE.NROW2) THEN	
	 CALL ERRT(1,'RF M',NE)
         CLOSE(LUN1)
         RETURN
      ENDIF
 
          DO  I = 1, NROW
            CALL REDLIN(LUN1,Q(K2+(I-1)*NSAM),NSAM,I)
d106 1
a106 3

	CLOSE(LUN1)

d110 1
a110 1
	   CALL ERRT(38,'RF M ',NE)
d116 1
a116 1
	   CALL ERRT(38,'RF M ',NE)
a118 1

a121 1

d136 8
a143 7
      DO 6000 L=1,INC 
         DUM=Q(K6+L-1)
	IF(DUM.EQ.0.0)GO TO 6000
         DLIST(1)= L
         DLIST(2)=(FLOAT(L-1)*WI+(WI/2.0))/Y1
         DLIST(5)=3./SQRT(PI*WI*(FLOAT(L)-0.5))
	 DLIST(6)=JDUM
d147 1
d149 1
d152 1
a152 1
	IF(RFM.GE.RFMIN)GO TO 540
d155 2
d159 1
a159 2
	IF(NSCM.EQ.0)THEN
	WRITE(NOUT,436)LCUR
a160 2
	GO TO 756
	ENDIF
d167 1
a167 3
	IF(BK1.NE.0.)THEN
	DLIST(3)=SQRT(BK2/BK1)
	ENDIF
d171 1
a171 3
	IF( BK3.NE.0.OR.BK4.NE.0.)THEN
	DLIST(4)=BK5/SQRT(BK4*BK3)
	ENDIF
a174 2
	IF(NSCM.EQ.0)GO TO 999
C
d177 4
a180 9
999    CALL SAVDC
       CLOSE(NDOC)
#ifdef SP_ALLOC
      CALL ALLOCIT(0,RUNTIME,IPQ,'RF M',IRTFLG)
#endif
 
      RETURN
      END
C
@


1.5
log
@ changes w.r.t doc. file
@
text
@d138 1
a138 1
	   CALL ERRT(1,'FMR_2 ',NE)
d144 1
a144 1
	   CALL ERRT(1,'FMR_2 ',NE)
@


1.4
log
@saves results in doc file, takes input real images,
does not need powers of two dimensions.
@
text
@d185 3
a187 2
	PRINT*,'*** NO MINIMUM IN RFACT CURVE FOUND FOR RING ',LCUR
	RETURN
d204 1
a204 1
         CALL SAVD(NDOC, DLIST, NLIST, IRTFLG)
d207 2
a208 1

d211 2
a212 2
      CALL SAVDC
      CLOSE(NDOC)
@


1.3
log
@buffers increased
@
text
@a0 1

d3 1
a3 1
C $$ RFACTSDO.FOR
d15 1
a15 1
C $$ RFACTSDO: DIFFERENTIAL R-FACTOR AND PHASE RESIDUAL COMPARISON OF 
d27 7
a33 1
	SUBROUTINE RFACTSDO(LUN1,LUN2)
d35 40
a74 2
	PARAMETER NRING=300	
C       MAX NUMBER OF RINGS IN FOURIER SPACE
d76 18
a93 2
	PARAMETER NSCALE=20	
C       SIZE OF ARRAY FOR SCALE SEARCH
d95 1
a95 6
	COMMON DUMMY(80),BUF(5000),TOTSUM,ASUM,PHSUM,QSUM,ESUM,SUM,CSUM1,
     1               CSUM2,CSUM,NCOUNT
#ifdef SP_UNIX
	INCLUDE 'CMBLOCK.INC'
#else
	INCLUDE 'COMMON1:CMBLOCK.INC'
d97 8
d106 1
a106 2
	REAL TOTSUM(NSCALE,NRING),ASUM(NSCALE,NRING),
     1              PHSUM(NSCALE,NRING)
d108 1
a108 154
C	REAL QSUM(NSCALE,NRING)
C	REAL ESUM(NSCALE,NRING),SUM(NSCALE,NRING)
        REAL CSUM1(NSCALE,NRING),CSUM2(NSCALE,NRING)
	COMPLEX BUF,F1,F2,CSUM(NSCALE,NRING)
	INTEGER NCOUNT(NRING)
        CHARACTER*1 NULL
	CHARACTER *81 FIL1,FIL2

	DATA PI/3.14159/

        NULL=CHAR(0)

	CALL VERSION('RFACTSDO 12/20/89$')

	NDAT1=NDAT
	IF (FCHAR(5:5) .EQ. 'T') NDAT1=NOUT
	CALL FILERD(FIL1,NLET,NULL,'FIRST FOURIER',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

	CALL OPENF(FIL1,LUN1,NSAM,NROW,'R',NF,NDUM)
	IF (NF.NE.2)RETURN
	IF (IFORM.NE.-1)GOTO 900

	CALL FILERD(FIL2,NLET,NULL,'SECOND FOURIER',IRTFLG)
        IF (IRTFLG.NE.0) GOTO 999
	CALL OPENF(FIL2,LUN2,NSAM,NROW,'R',NF,NDUM)
	IF (NF.NE.2) GOTO 999
	IF (IFORM.NE.-1)GOTO 900
	CALL RDPRM2(RESL,RESU,NLOOP,ILOOP,
     1       'LOWER, UPPER RESOLUTION LIMITS')
        IF (RESL.LE.0.5) RESL=RESL*FLOAT(NSAM)
        IF (RESU.LE.0.5) RESU=RESU*FLOAT(NSAM)
	RESL2=RESL**2
	RESU2=RESU**2
	CALL RDPRM(DELTAR,NLOOP,ILOOP,'RING WIDTH$')
        IF (DELTAR.LE.0.5) DELTAR=DELTAR*FLOAT(NSAM)
	NR=(RESU-RESL)/DELTAR
        CALL RDPRM2(SCALE1,SCALE2,NLOOP,ILOOP,
     1     'SCALE FACTOR (LOWER, UPPER)$')
        DSCALE=(SCALE2-SCALE1)/FLOAT(NSCALE-1)
	NROW1=NROW/2-1
	NSAMH = NSAM/2
	NROWH=NROW/2
	JRPR=0
C CLEAR ARRAYS
	DO 25 IR=1,NR
        NCOUNT(IR)=0
        DO 15 NSC=1,NSCALE
	TOTSUM(NSC,IR)=0
	ASUM(NSC,IR)=0
	PHSUM(NSC,IR)=0
C	QSUM(NSC,IR)=0
C	ESUM(NSC,IR)=0
C	SUM(NSC,IR)=0
	CSUM(NSC,IR)=0
	CSUM1(NSC,IR)=0
15	CSUM2(NSC,IR)=0
25      CONTINUE
	
C	IF (FCHAR(4:4).EQ.'L'.OR.FCHAR(5:5).EQ.'L') WRITE(NDAT1,36)
36	FORMAT('1     H     K     AMP(1)  AMP(2)  PH(1)   PH(2)  DPHI'/)
30      CONTINUE
        KYUP=-1

	DO 100 KX=0,NSAMH
	KX2=KX**2
        IF(KX.GT.0) KYUP=NROWH
	DO 50 KY = -NROW1,KYUP
	IF(KX2+KY**2.GE.RESU2)GOTO 50
	IF(KX2+KY**2.LT.RESL2)GOTO 50
	CALL FFIND(NSAM,NROW,KX,KY,JR,NADDR,PHFACT)
	IF(JR.EQ.JRPR)GOTO 60
	JRPR = JR
	CALL REDLIN(LUN1,BUF,NSAM,JR)
	CALL REDLIN(LUN2,BUF(NSAM+1),NSAM,JR)
60	CONTINUE
	F1=BUF(NADDR)
C FIGURE OUT THE RING NUMBER
        J=(SQRT(FLOAT(KX2+KY**2))-RESL)/DELTAR+1.
        IF(J.LT.1) GOTO 50
        NCOUNT(J)=NCOUNT(J)+1

C INNERMOST SCALE LOOP
        DO 40 NSC=1,NSCALE
        SCALE=SCALE1+(NSC-1)*DSCALE
	F2=BUF(NSAM+NADDR)*SCALE
	AVF = (CABS(F1)+CABS(F2))/2.

	TOTSUM(NSC,J)=TOTSUM(NSC,J)+AVF
C	SUM(NSC,J)=SUM(NSC,J)+CABS(F1-F2)
	ASUM(NSC,J)=ASUM(NSC,J)+ABS(CABS(F1)-CABS(F2))
C	QSUM(NSC,J)=QSUM(NSC,J)+CABS(F1-F2)**2
C	ESUM(NSC,J)=ESUM(NSC,J)+0.5*(CABS(F1)**2 + CABS(F2)**2)

	PHI1=0
	PHI2=0
	DPH=0
	F1I=AIMAG(F1)
	F1R=REAL(F1)
	F2I=AIMAG(F2)
	F2R=REAL(F2)
	
	IF (F1R .NE. 0.) THEN
		PHI1=ATAN2(F1I,F1R)
	ENDIF
	IF (F2R.NE.0.) THEN
		PHI2=ATAN2(F2I,F2R)
		DPH=PHI1-PHI2
		IF(DPH.GT.PI)DPH=2*PI-DPH
		IF(DPH.LT.-PI)DPH=DPH+2*PI
		PHSUM(NSC,J)=PHSUM(NSC,J)+AVF*DPH**2
	ENDIF
C	IF (FCHAR(4:4) .EQ. 'L' .OR. FCHAR(5:5) .EQ. 'L')
C	1 WRITE(NDAT1,51)KX,KY,CABS(F1),CABS(F2),PHI1*180/PI,
C	2 PHI2*180/PI,DPH*180/PI
51	FORMAT(1X,2I6,2F10.3,2F10.2,F10.3)
C
	CSUM(NSC,J)=CSUM(NSC,J)+F1*CONJG(F2)
	CSUM1(NSC,J)=CABS(F1)**2+CSUM1(NSC,J)
	CSUM2(NSC,J)=CABS(F2)**2+CSUM2(NSC,J)
40	CONTINUE
50	CONTINUE
100	CONTINUE
C
	WRITE(NDAT1,101)
101	FORMAT(/2X,'  RADIUS  (NORM.)  SCALE  RF(MP)    DPHI   FRC',
     1        '    FRCCRIT   NO. OF PTS.'/)
	DO 200 J=1,NR
	IF (NCOUNT(J).EQ.0) GOTO 200
C SCALE SEARCH FOR THIS RING
        NSCM=0
        RFMMIN=ASUM(1,J)/TOTSUM(1,J)
        JCUR=J
        DO 120 NSC=1,NSCALE
	RFM=ASUM(NSC,J)/TOTSUM(NSC,J)
        IF (RFM.GE.RFMMIN) GOTO 120
        NSCM=NSC
        RFMMIN=RFM
120     CONTINUE
        IF (NSCM.EQ.0) GOTO 950
C
        SCALE=SCALE1+(FLOAT(NSCM-1))*DSCALE
C NSCM IS THE NUMBER OF THE ELEMENT IN EACH ARRAY WITH THE CORRECT SCALING
C SCALE IS THE CORRECT SCALING
C	RF=SUM(NSCM,J)/TOTSUM(NSCM,J)
	PHRES=SQRT(PHSUM(NSCM,J)/TOTSUM(NSCM,J))*180./3.14159
C	REU=SQRT(QSUM(NSCM,J)/ESUM(NSCM,J))
	CRIT=2./SQRT(PI*(FLOAT(J)-0.5)*DELTAR+RESL)
	RINGC=REAL(CSUM(NSCM,J))/SQRT(CSUM1(NSCM,J)*CSUM2(NSCM,J))
	RADM=RESL+FLOAT(J-1)*DELTAR+DELTAR/2.
	WRITE(NDAT1,199) RADM,RADM/FLOAT(NSAM),SCALE,RFMMIN,PHRES,
     1          RINGC,CRIT,NCOUNT(J)
199	FORMAT(2X,F8.1,3F8.3,F8.1,2F8.3,I12)
200	CONTINUE
d110 9
a118 2
999	CLOSE(LUN1)
	CLOSE(LUN2)
d120 2
d123 63
a185 5
950     WRITE(NOUT,951) JCUR
951     FORMAT(' *** NO MINIMUM IN RFACT CURVE FOUND FOR RING ',I3)
        GOTO 999

900	CALL ERRT(2,'RFACTSDO',NE)
d187 31
a217 1
	END
@


1.2
log
@cpp_lines_added
@
text
@d30 1
a30 1
	PARAMETER NRING=50	
d36 1
a36 1
	COMMON DUMMY(80),BUF(512),TOTSUM,ASUM,PHSUM,QSUM,ESUM,SUM,CSUM1,
@


1.1
log
@Initial revision
@
text
@d38 3
d42 1
@
