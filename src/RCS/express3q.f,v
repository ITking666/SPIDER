head	1.13;
access;
symbols
	pre_getangas:1.12
	GPL2010:1.12
	pre_GPL2010:1.11
	pre_var_equation:1.11
	pre_fftwrings:1.11
	pre_opfiles:1.11
	src:1.11
	best-code:1.11
	named-reg:1.10
	x-named-regs:1.9
	x:1.9
	v13-00:1.8
	pre_GPL:1.6
	prec_CA:1.6
	noindx:1.6
	Bproc:1.5
	oct21:1.5
	last77:1.4;
locks; strict;
comment	@c @;


1.13
date	2011.12.06.13.55.37;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2010.06.24.13.25.33;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.12.20.17.59;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.12.15.27.00;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.15.21.50.49;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.17.20.23.31;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.17.18.15.43;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.23.20.09.01;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.05.12.19.55.45;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.03.05.19.52.57;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	99.02.04.14.53.35;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	96.07.08.14.31.50;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	96.07.02.13.40.52;	author leith;	state Exp;
branches;
next	;


desc
@neew
@


1.13
log
@! COMMENT DELIMITER
@
text
@
C++*********************************************************************
C
C   EXPRESS3Q.F             FILENAMES LENGTHENED   JAN 89 ArDean Leith
C                           MERGED WITH EXPRESSQ   FEB 99 ArDean Leith
C                           NGOT ADDED             MAY 01 ArDean Leith
C                           FROM EXPRESS3Q         NOV 05 ARDEAN LEITH
C                           REWRITTEN              NOV 05 ARDEAN LEITH
C                           ALLOW BLANKS           JAN 06 ARDEAN LEITH
C                           ! COMMENT DELIMITER    DEC 11 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C     EXPRESS3Q(STRING,ISTACK,NVAL,VALUES,NGOT,INPARLOOP,IRTFLG)
C
C     PURPOSE:    EVALUATES EXPRESSIONS IN STRING.
C
C     PARAMETERS: STRING        INPUT STRING                     (SENT)
C                 ISTACK        REGISTER STACK LEVEL             (SENT)
C                 NVAL          MAX NUMBER OF RETURNED VALUES    (SENT)
C                 VALUES        RETURNED VALUES                  (RET.)
C                 NGOT          NUMBER OF RETURNED VALUES        (RET.)
C                 INPARLOOP     INSIDE () FOR LOOP               (RET.)
C                 IRTFLG        ERROR FLAG                       (RET.)
C
C--*******************************************************************
       
	SUBROUTINE EXPRESS3Q(STRING,ISTACK,NVAL,
     &                     VALUES,NGOT,INPARLOOP,IRTFLG)

	INCLUDE 'CMBLOCK.INC' 

        CHARACTER(LEN=*)      :: STRING
        REAL                  :: VALUES(NVAL)
	LOGICAL               :: INPARLOOP

        INTEGER,PARAMETER     :: LENEXP  = 80  ! EXPR LENGTH LIMIT
        CHARACTER(LEN=LENEXP) :: EXPR
	LOGICAL               :: HASCOMMA

        NGOT  = 0

C       ASSUME COMMENT (AFTER SEMICOLON) ALREADY REMOVED
        NCHAR = LEN(STRING)

C       AN EXPRESSION CAN BE DELIMINATED BY BLANK, ',', OR ';'
        LOCCOMMA  = INDEX(STRING,',')
        HASCOMMA  = (LOCCOMMA .GT. 0)

        INPARLOOP = .FALSE.
        I         = 1
        DO WHILE (I .LE. NCHAR)

C         GET NEXT EXPRESSION IN STRING
          CALL GETNEXTEXP(STRING(1:NCHAR),I,HASCOMMA,
     &                    IGORET,EXPR,NLET,IRTFLG)
          IF (IRTFLG .NE. 0) THEN
             WRITE(NOUT,*) ' *** INVALID EXPRESSION IN INPUT: ',
     &                     STRING(1:NCHAR)
             RETURN
          ENDIF

C         EXIT LOOP IF NO MORE EXPRESSION(S) RETURNED
          IF (NLET .LE. 0) EXIT

C         CHECK FOR INTIAL OR FINAL UNBALANCED ()
          NLEFPAR = 0
          NRITPAR = 0
          DO J=1,NLET
            IF (EXPR(J:J) .EQ. '(') NLEFPAR = NLEFPAR + 1
            IF (EXPR(J:J) .EQ. ')') NRITPAR = NRITPAR + 1
          ENDDO

          IF (NLEFPAR .GT. NRITPAR .AND. NGOT .EQ. 0 .AND.
     &        EXPR(1:1) .EQ. '(') THEN
              INPARLOOP = .TRUE.
C             STRIP EXTRA INITIAL PARENTHESIS
              EXPR = EXPR(2:NLET)
              NLET = NLET - 1

          ELSEIF (NLEFPAR .LT. NRITPAR .AND. EXPR(NLET:NLET).EQ.')')THEN
C             STRIP EXTRA FINAL PARENTHESIS
              EXPR = EXPR(1:NLET-1)
              NLET = NLET - 1

          ENDIF

C         EVALUATE THE EXPRESSION IN THIS SUB-STRING
          CALL EVALNQ(ISTACK,EXPR(1:NLET),NLET,RETVALUE,IRTFLG)
          IF (IRTFLG .NE. 0) RETURN

C         EXPRESSION RETURNS A VALID VALUE
          NGOT         = NGOT + 1
          VALUES(NGOT) = RETVALUE
          I            = IGORET
          IF (NGOT .GE. NVAL) RETURN
       ENDDO

       IF (STRING(1:1) .EQ. '(' .AND. STRING(NCHAR:NCHAR) .EQ. ')'.AND.
     &      NGOT .EQ. 1) INPARLOOP = .TRUE.

       END
       

C++************************ GETNEXTEXP ***************************
C
C    GETNEXTEXP.F  GETNEXTEXP ACCEPTS TAB NOV 99 ARDEAN LEITH
C
C **********************************************************************
C
C    GETNEXTEXP(STRING,IFIRST,HASCOMMA,
C               INEXT,STRINGOUT,NCHAR,IRTFLG)
C
C    PURPOSE:           GETS NEXT EXPRESSION DELIMITED BY A COMMA, 
C                       SEMICOLON, OR OPTIONALLY BY A BLANK, 
C                       FROM STRING, RETURNS EXPRESSION STRING
C                       NO MORE EXP. LEFT IN STRING, NCHAR IS ZERO.
C
C    PARAMETERS:
C	  STRING	INPUT STRING                             (SENT)
C	  IFIRST        FIRST CHAR TO BE SCANNED FOR EXP.        (SENT)
C	  INEXT		START OF NEXT EXPRESSION                 (RET.)
C	  HASCOMMA	HAS , BETWEEN EXPRESSIONS                (SENT)
C	  STRINGOUT	RETURNED EXPRESSION                      (RET.)
C	  NCHAR		LENGTH OF RETURNED EXPRESSION            (RET.)
C	  IRTFLG	ERROR FLAG                               (RET.)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

      SUBROUTINE GETNEXTEXP(STRING,IFIRST,HASCOMMA,
     &                      INEXT,STRINGOUT,NCHAR,IRTFLG)

C     EXPRESSION DELIMITER IS A COMMA, SEMICOLON, & OPTIONALLY A BLANK

      CHARACTER(LEN=*) :: STRING,STRINGOUT
      CHARACTER(LEN=1) :: CTEMP
      LOGICAL          :: HASCOMMA

C     SET DEFAULT RETURN VALUES
      INEXT   = 0
      NCHAR   = 0

C     FIND LAST CHAR POSITION IN STRING
      ILEN = LEN(STRING)

      DO I =IFIRST,ILEN 
         CTEMP = STRING(I:I)
         INEXT = I + 1

         IF (CTEMP .EQ. ';' .OR. CTEMP .EQ. '!') THEN
C           START OF COMMENT, THIS IS END
            EXIT

         ELSEIF (CTEMP .EQ. ',') THEN
C           EXPRESSION END ENCOUNTERED
            EXIT

         ELSEIF (HASCOMMA .AND.
     &           NCHAR .GT. 0 .AND.
     &           CTEMP .LE. CHAR(31) ) THEN
C           END AT A NON-PRINTING CHAR.
            EXIT

         ELSEIF (.NOT. HASCOMMA .AND.
     &          (NCHAR .GT. 0 .AND.
     &          (CTEMP .EQ. ' ' .OR. CTEMP .LE. CHAR(31)))) THEN
C           END AT THE BLANK, OR NON-PRINTING CHAR.
            EXIT

         ELSEIF (CTEMP .NE. ' ' .AND. CTEMP .GT. CHAR(31)) THEN
C           INSIDE AN EXPRESSION (IGNORES BLANKS)
            NCHAR                  = NCHAR + 1
            STRINGOUT(NCHAR:NCHAR) = CTEMP 
         ENDIF
      ENDDO

C     EXPRESSION FOUND OR RAN OFF END OF STRING
      IRTFLG = 0

      RETURN
      END


        
     
@


1.12
log
@GPL_2010
@
text
@d4 7
a10 6
C   EXPRESS3Q.F             FILENAMES LENGTHENED JAN 89 ArDean Leith
C                           MERGED WITH EXPRESSQ FEB 99 ArDean Leith
C                           NGOT ADDED           MAY 01 ArDean Leith
C                           FROM EXPRESS3Q       NOV 05 ARDEAN LEITH
C                           REWRITTEN            NOV 05 ARDEAN LEITH
C                           ALLOW BLANKS         JAN 06 ARDEAN LEITH
d171 1
a171 1
         IF (CTEMP .EQ. ';') THEN
@


1.11
log
@ALLOW BLANKS
@
text
@a11 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d13 5
a17 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d19 1
a19 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d24 1
a24 1
C=* This program is distributed in the hope that it will be useful,    *
d26 1
a26 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a27 1
C=*                                                                    *
d29 1
a29 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.10
log
@native named registers
@
text
@d9 1
d58 1
a59 1
	LOGICAL               :: INPARLOOP
d62 1
d70 2
d73 2
a74 2
        INPARLOOP    = .FALSE.
        I            = 1
d78 2
a79 1
          CALL GETNEXTEXP(STRING(1:NCHAR),I,IGORET,EXPR,NLET,IRTFLG)
d134 2
a135 1
C    GETNEXTEXP(STRING,IFIRST,IGO,IEND)
d146 1
d154 1
a154 1
      SUBROUTINE GETNEXTEXP(STRING,IFIRST,
d161 1
d182 9
a190 2
         ELSEIF (NCHAR .GT. 0 .AND.
     &          (CTEMP .EQ. ' ' .OR. CTEMP .LE. CHAR(31))) THEN
d195 1
a195 1
C           INSIDE AN EXPRESSION (SKIPS BLANKS)
@


1.9
log
@named register support
@
text
@d4 5
a8 3
C   EXPRESS3Q.F               FILENAMES LENGTHENED JAN 89 ArDean Leith
C                             MERGED WITH EXPRESSQ FEB 99 ArDean Leith
C                             NGOT ADDED           MAY 01 ArDean Leith
d36 1
a36 1
C     EXPRESS3Q(STRING,NCHART,VAL1,VAL2,VAL3,NGOT)
d38 1
a38 3
C     PURPOSE:     RETURNS TRUE AND EVALUATES ONE - THREE REGISTER 
C                  EXPRESSIONS IF "X" OCCURS IN INPUT LINE.  OTHERWISE 
C                  RETURNS FALSE.
d41 3
a43 4
C                 NCHART        NO. OF CHARS IN INPUT STRING     (SENT)
C                 VAL1          FIRST RETURNED VALUE             (RET.)
C                 VAL2          SECOND RETURNED VALUE            (RET.)
C                 VAL3          THIRD RETURNED VALUE             (RET.)
d45 2
d49 3
d53 1
a53 1
	SUBROUTINE EXPRESS3Q(STRING,NCHART,VAL1,VAL2,VAL3,NGOT)
d55 2
a56 1
	INCLUDE 'CMBLOCK.INC' 
d58 22
a79 1
	LOGICAL        COMMA
d81 2
a82 2
        CHARACTER *(*) STRING
        CHARACTER *80  SQSTR
d84 19
a102 2
	COMMA     = .FALSE.
        NGOT      = 0
a103 16
C       DETERMINE IF INPUT LINE CONTAINS A REGISTER 'X'
C       MAKE SURE 'X' IS BEFORE COMMENT IF IT EXISTS
        IX    = INDEX(STRING(1:NCHART),'X')
        ISEMI = INDEX(STRING(1:NCHART),';')

C       IF THERE IS NO 'X' IN THIS STRING RETURN IS FALSE
        IF (IX .LE. 0 .OR. (ISEMI .GT. 0 .AND. IX .GT. ISEMI)) RETURN

        NCHAR = 0
       DO I = 1,NCHART
C         STOP COPYING TO SQSTR IF COMMENT START (;) ENCOUNTERED
          IF (STRING .EQ. ';') EXIT
          IF (STRING(I:I) .NE. ' ') THEN
C             COPY STRING CHARACTER TO SQSTR
              NCHAR              = NCHAR + 1
              SQSTR(NCHAR:NCHAR) = STRING(I:I)
d105 10
d117 4
a121 2
C      FIND REGISTER EXPRESSION STRING BETWEEN START AND COMMA OR 
C      BETWEEN START AND FIRST SEMICOLON OR BETWEEN START AND FINISH
d123 65
a187 74
       IGO    = 1
       ICOUNT = INDEX(SQSTR(IGO:NCHAR),',') - 1
       COMMA  = (ICOUNT .GE. 0)
       IF (ICOUNT .LE. 0) ICOUNT = NCHAR
       IEND  = IGO + ICOUNT - 1

       INEXT = IEND
       IF (SQSTR(IGO:IGO) .EQ. '(' .AND. SQSTR(IEND:IEND) .EQ. ')')THEN
C          REMOVE ENCLOSING ()'S
           IGO    = IGO  + 1
           IEND   = IEND - 1 
           ICOUNT = ICOUNT - 2 
       ENDIF

C      EVALUATE THE REGISTER EXPRESSION IN THIS SUB-STRING
       CALL EVALNQ(SQSTR(IGO:IEND),ICOUNT,VAL1,IFLAG)

       IF (IFLAG .NE. 0) THEN
           WRITE(NOUT,*) ' *** INVALID REGISTER EXPRESSION IN INPUT'
           RETURN
       ENDIF

C      IF NO COMMA FOUND THEN THERE IS NO MORE INPUT TO BE CHECKED
       NGOT = 1
       IF (.NOT. COMMA) RETURN

C      ------------------------------------------------------- 2ND

       IGO    = INEXT + 2
       ICOUNT = INDEX(SQSTR(IGO:NCHAR),',') - 1
       COMMA  = (ICOUNT .GE. 0)
       IF (ICOUNT .LE. 0) ICOUNT = NCHAR - IGO + 1
       IEND   = IGO + ICOUNT - 1
     
       INEXT = IEND
       IF (SQSTR(IGO:IGO) .EQ. '(' .AND. SQSTR(IEND:IEND) .EQ. ')')THEN
C          REMOVE ENCLOSING ()'S
           IGO    = IGO  + 1
           IEND   = IEND - 1 
           ICOUNT = ICOUNT - 2 
        ENDIF

C       EVALUATE THE REGISTER EXPRESSION IN THIS SUB-STRING
        CALL EVALNQ(SQSTR(IGO:IEND),ICOUNT,VAL2,IFLAG)

        IF (IFLAG .NE. 0) THEN
            WRITE(NOUT,*)'*** INVALID 2ND REGISTER EXPRESSION IN INPUT'
            RETURN
        ENDIF

C       IF NO COMMA FOUND THEN THERE IS NO MORE INPUT TO BE CHECKED
        NGOT = 2
        IF (.NOT. COMMA) RETURN

C       ------------------------------------------------------ THIRD

        IGO    = INEXT + 2
        ICOUNT = INDEX(SQSTR(IGO:NCHAR),',') - 1
        IF (ICOUNT .LE. 0) ICOUNT = NCHAR - IGO + 1
        IEND   = IGO + ICOUNT - 1
     
        IF (SQSTR(IGO:IGO) .EQ. '(' .AND. SQSTR(IEND:IEND) .EQ. ')')THEN
C          REMOVE ENCLOSING ()'S
           IGO    = IGO  + 1
           IEND   = IEND - 1 
           ICOUNT = ICOUNT - 2 
        ENDIF

C       EVALUATE THE REGISTER EXPRESSION IN THIS SUB-STRING
        CALL EVALNQ(SQSTR(IGO:IEND),ICOUNT,VAL3,IFLAG)
        IF (IFLAG .NE. 0) THEN
            WRITE(NOUT,*)'*** INVALID 3RD REGISTER EXPRESSION IN INPUT'
            RETURN
        ENDIF
d189 2
a190 1
        NGOT = 3
a191 2
        RETURN
        END
d193 2
@


1.8
log
@GPL License fixed
@
text
@d70 4
a73 4
        DO I = 1,NCHART
C          STOP COPYING TO SQSTR IF COMMENT START (;) ENCOUNTERED
           IF (STRING .EQ. ';') GOTO 10
           IF (STRING(I:I) .NE. ' ') THEN
d77 2
a78 2
           ENDIF
        ENDDO
a79 5
10      IF (SQSTR(1:1) .EQ. '(' .AND. SQSTR(NCHAR:NCHAR) .EQ. ')') THEN
C          REMOVE OUTER ENCLOSING ()'S
           SQSTR(1:NCHAR-2) = SQSTR(2:NCHAR-1)
           NCHAR = NCHAR - 2 
        ENDIF
d81 2
a82 2
C       FIND REGISTER EXPRESSION STRING BETWEEN START AND COMMA OR 
C       BETWEEN START AND FIRST SEMICOLON OR BETWEEN START AND FINISH
d84 13
a96 5
        IGO    = 1
        ICOUNT = INDEX(SQSTR(IGO:NCHAR),',') - 1
        COMMA  = (ICOUNT .GE. 0)
        IF (ICOUNT .LE. 0) ICOUNT = NCHAR
        IEND  = IGO + ICOUNT - 1
d98 2
a99 2
C       EVALUATE THE REGISTER EXPRESSION IN THIS SUB-STRING
        CALL EVALNQ(SQSTR(IGO:IEND),ICOUNT,VAL1,IFLAG)
d101 1
a101 1
	IF (IFLAG .NE. 0) THEN
d104 1
a104 1
	ENDIF
d106 19
a124 5
C       IF NO COMMA FOUND THEN THERE IS NO MORE INPUT TO BE CHECKED
        NGOT = 1
	IF (.NOT. COMMA) RETURN

C       ------------------------------------------------------- 2ND
a125 6
        IGO    = IEND + 2
        ICOUNT = INDEX(SQSTR(IGO:NCHAR),',') - 1
        COMMA  = (ICOUNT .GE. 0)
        IF (ICOUNT .LE. 0) ICOUNT = NCHAR - IGO + 1
        IEND   = IGO + ICOUNT - 1
     
d129 4
a132 5
	IF (IFLAG .NE. 0) THEN
           WRITE(NOUT,*) 
     &       '*** INVALID 2ND REGISTER EXPRESSION IN INPUT'
           RETURN
	ENDIF
d136 1
a136 1
	IF (.NOT. COMMA) RETURN
d140 1
a140 1
        IGO    = IEND + 2
d145 7
d154 4
a157 5
	IF (IFLAG .NE. 0) THEN
           WRITE(NOUT,*) 
     &       '*** INVALID 3RD REGISTER EXPRESSION IN INPUT'
           RETURN
	ENDIF
d162 1
a162 2

	END
@


1.7
log
@HRI GPL License used
@
text
@a2 1
C++*************************************************************************
a8 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d12 1
a12 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a31 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.6
log
@should be subroutine & had register 2 & 3 set to zero bug
@
text
@d2 1
d11 24
@


1.5
log
@for (X11) responeses
@
text
@d4 1
a4 1
C   EXPRESS3Q.FOR             FILENAMES LENGTHENED JAN 89 ArDean Leith
d6 1
d17 1
a17 1
C     EXPRESS3Q(STRING,NCHART,VAL1,VAL2,VAL3)
d28 1
d32 1
a32 1
	LOGICAL FUNCTION EXPRESS3Q(STRING,NCHART,VAL1,VAL2,VAL3)
a40 1
	EXPRESS3Q = .FALSE.
d42 1
a51 4
C*      ADDED MAY 10 1990 al
        VAL2 = 0.0
        VAL3 = 0.0

d64 3
a66 3
C           REMOVE OUTER ENCLOSING ()'S
            SQSTR(1:NCHAR-2) = SQSTR(2:NCHAR-1)
            NCHAR = NCHAR - 2 
a84 1
	EXPRESS3Q = .TRUE.
d87 1
a103 1
           EXPRESS3Q = .FALSE.
a106 2
	EXPRESS3Q = .TRUE.

d108 1
a122 1
           EXPRESS3Q = .FALSE.
d126 2
a127 1
	EXPRESS3Q = .TRUE.
@


1.4
log
@need isemi test
@
text
@d4 2
a5 1
C   EXPRESS3Q.FOR             FILENAMES LENGTHENED JAN 89 al
d7 8
a14 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d16 1
a16 1
C     EXPRESS3Q(STRING,NCHAR,VAL1,VAL2,VAL3)
a20 1
C                  
d22 5
a26 5
C     PARAMETERS: STRING        INPUT STRING
C                 NCHAR         NO. OF CHARS IN INPUT STRING
C                 VAL1          FIRST RETURNED VALUE
C                 VAL2          SECOND RETURNED VALUE
C                 VAL3          THIRD RETURNED VALUE
d30 1
a30 1
	LOGICAL FUNCTION EXPRESS3Q(STRING,NCHAR,VAL1,VAL2,VAL3)
a37 1
        CHARACTER      ST
d42 1
a42 1
C       DETERMINE IF INPUT LINE CONTAINS A REGISTER "X"
d44 2
a45 2
        IX    = INDEX(STRING(1:NCHAR),'X')
        ISEMI = INDEX(STRING(1:NCHAR),';')
d47 1
a47 1
C       IF THERE IS NO 'X' RETURN
d54 18
a71 1
C       FIND FIRST REGISTER EXPRESSION STRING BETWEEN START AND COMMA OR 
d74 5
a78 21
C       ZERO THE SQUEEZED SUB-STRING
	ICOUNT = 0
        SQSTR  = CHAR(0)

	DO  I=1,NCHAR
           IC = I
           ST = STRING(I:I)

           IF (ST .EQ. ';') THEN
              GOTO 15

           ELSEIF (ST .EQ. ',') THEN
              COMMA =.TRUE.
              GOTO 15

           ELSEIF (ST .NE. ' ') THEN
C             SQUEEZE BLANKS OUT OF EXPRESSION
              ICOUNT = ICOUNT + 1
              SQSTR(ICOUNT:ICOUNT) = ST
           ENDIF
        ENDDO
d81 1
a81 1
15      CALL EVALNQ(SQSTR(1:ICOUNT),ICOUNT,VAL1,IFLAG)
d91 1
d94 8
a101 21
C       ZERO THE SQUEEZED SUB-STRING
	ICOUNT2 = 0
        SQSTR   = CHAR(0)

	DO  I=IC+1,NCHAR
           IC = I
           ST = STRING(I:I)

           IF (ST .EQ. ';') THEN
              GOTO 22

           ELSEIF (ST .EQ. ',') THEN
              COMMA =.TRUE.
              GOTO 22

           ELSEIF (ST .NE. ' ') THEN
C             SQUEEZE BLANKS OUT OF EXPRESSION
              ICOUNT2 = ICOUNT2 + 1
              SQSTR(ICOUNT2:ICOUNT2) = ST
           ENDIF
        ENDDO
a102 2
C       EVALUATE THE REGISTER EXPRESSION IN THIS SUB-STRING
22      CALL EVALNQ(SQSTR,ICOUNT2,VAL2,IFLAG)
d114 1
d117 5
a121 18
C       ZERO THE SQUEEZED SUB-STRING
	ICOUNT3 = 0
        SQSTR   = CHAR(0)

	DO  I=IC+1,NCHAR
           IC = I
           ST = STRING(I:I)

           IF (ST .EQ. ';' .OR. ST .EQ. ',') THEN
              GOTO 33

           ELSEIF (ST .NE. ' ') THEN
C             SQUEEZE BLANKS OUT OF EXPRESSION
              ICOUNT3 = ICOUNT3 + 1
              SQSTR(ICOUNT3:ICOUNT3) = ST
           ENDIF
        ENDDO

d123 1
a123 1
33      CALL EVALNQ(SQSTR,ICOUNT3,VAL3,IFLAG)
d126 1
a126 1
     &       '*** INVALID 2ND REGISTER EXPRESSION IN INPUT'
@


1.3
log
@CNO_SAVE
@
text
@a32 2
CNO_SAVE 

d42 1
a42 1
	COMMA    = .FALSE.
d45 6
a50 2
        IX = INDEX(STRING(1:NCHAR),'X')
        IF (IX .LE. 0) RETURN
@


1.2
log
@bad return
@
text
@d33 2
@


1.1
log
@Initial revision
@
text
@d41 1
a41 1
	EXPRESSQ = .FALSE.
d84 1
a84 1
	EXPRESSQ = .TRUE.
d117 1
a117 1
           EXPRESSQ = .FALSE.
d121 1
a121 1
	EXPRESSQ = .TRUE.
d150 1
a150 1
           EXPRESSQ = .FALSE.
d154 1
a154 1
	EXPRESSQ = .TRUE.
@
