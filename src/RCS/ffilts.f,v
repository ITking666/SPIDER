head	1.32;
access;
symbols
	pre_mrcs:1.32
	healthdept_2018:1.32
	pre_getangas:1.27
	GPL2010:1.27
	pre_GPL2010:1.26
	pre_var_equation:1.26
	pre_fftwrings:1.26
	pre_opfiles:1.23
	src:1.23
	best-code:1.23
	x-named-regs:1.23
	x:1.23
	v13-00:1.23
	pre_GPL:1.22
	prec_CA:1.20
	noindx:1.19
	Bproc:1.16
	oct21:1.14
	last77:1.14;
locks; strict;
comment	@c @;


1.32
date	2018.10.03.14.34.05;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2018.01.31.20.34.53;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2017.12.08.17.01.56;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2014.12.03.14.58.58;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2012.11.28.19.11.55;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2010.06.24.13.25.34;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2007.03.27.17.27.33;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2007.03.21.18.06.40;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2007.03.19.13.16.01;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2005.10.17.20.59.02;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2004.03.01.20.46.46;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2004.03.01.13.47.45;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2003.02.20.21.49.25;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2002.03.11.14.08.55;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2001.10.29.14.20.28;	author bbaxter;	state Exp;
branches;
next	1.17;

1.17
date	2000.11.06.15.04.30;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2000.01.06.17.21.39;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	99.11.10.23.09.16;	author yuchen;	state Exp;
branches;
next	1.14;

1.14
date	98.06.08.18.29.03;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	98.03.05.15.45.02;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	98.03.05.15.43.54;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	98.03.05.15.42.57;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	98.03.05.15.40.15;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	98.03.05.15.38.19;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	98.02.12.17.10.58;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.10.17.15.18.48;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.10.06.20.43.29;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.11.22.15.31.45;	author ramani;	state Exp;
branches;
next	1.4;

1.4
date	96.09.04.15.34.33;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.08.30.15.14.07;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	96.08.29.15.42.05;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	96.08.27.15.26.44;	author pawel;	state Exp;
branches;
next	;


desc
@FF simple
@


1.32
log
@email_health_dept
@
text
@C++*******************************************************************
C
C FFILTS.F               USED OPFILE               NOV 00 ARDEAN LEITH
C                        ADDED BFACTOR             OCT 01 BILL BAXTER
C                        OPFILEC                   FEB 03 ARDEAN LEITH
C                        GAUSSIAN BUG              FEB 04 PP
C                        SAMPLED ADDED             MAR 07 C. RENKEN
C                        SQRT2M1 in BUTTERWORTH    JAN 18 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  FFILTS(LUN,NX,NY,NZ,NXO)

C  PARAMETERS:
C        LUN         LOGICAL UNIT NUMBER OF FOURIER FILE TO BE FILTERED
C        LUN         LOGICAL UNIT NUMBER OF FOURIER FILE OUTPUT
C        NX,NY,NZ    DIMENSIONS OF FOURIER FILE
C        NXO         X DIMENSION OF ORIGINAL REAL-SPACE FILE
C
C--*******************************************************************

	SUBROUTINE FFILTS(LUN,LUNO,NX,NY,NZ,NXO)

	INCLUDE 'CMBLOCK.INC' 
	INCLUDE 'CMLIMIT.INC' 

	COMMON                 B(1)
	EQUIVALENCE            (CB,B)
	COMPLEX             :: CB(1)
        CHARACTER *(MAXNAM) :: FILNAM
	CHARACTER*1         :: NULL = CHAR(0)

        REAL                :: SQRT2M1

	INTEGER, PARAMETER  :: LUNF = 27

951     WRITE(NOUT,1009)
 1009   FORMAT
     &     ('  1 - LOW-PASS,              2 - HIGH-PASS'         ,/,
     &      '  3 - GAUSS.  LOW-PASS,      4 - GAUSS.  HIGH-PASS' ,/,
     &      '  5 - FERMI                  6 - FERMI'             ,/,
     &      '  7 - BUTTER. LOW-PASS,      8 - BUTTER. HIGH-PASS' ,/,
     &      '  9 - REMEZ,                10 - B FACTOR',/,
     &      ' 11 - SAMPLED SPACE')

        IOPT = 1
        CALL RDPRI1S(IOPT,NOT_USED,'FILTER TYPE (1-11)',IRTFLG)
	IF (IOPT <1 .OR. IOPT > 11) THEN 
           CALL  ERRT(102,'UNKNOWN FILTER TYPE',IOPT)
           GOTO  951
        ENDIF


	IF (IOPT == 10)  THEN
C          B FACTOR FILTER *************************************************
           CALL BFACT(LUN,LUNO,NX,NY,NZ,NXO)
	   RETURN
	ENDIF


	IF (IOPT == 9)  THEN
C          REMEZ FILTER *************************************************
           MAXIM  = 0
           CALL OPFILEC(0,.TRUE.,FILNAM,LUNF,'O',IFORM,NS1,NR1,NSL1,
     &                   MAXIM,'FILTER',.TRUE.,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

	   IF (IFORM > 0 .OR.
     & 	      NS1.NE.NX .OR. NR1.NE.NY .OR. NSL1.NE.NZ) THEN
              CALL  ERRT(101,'INCONSISTENT IMAGE SIZE FOR FILTER',NE)
              CLOSE(LUNF)
              RETURN
	   ENDIF

	   NS2 = NX/2

	   DO K=1,NZ
	     DO J=1,NY
		NR = (K-1)*NY+J
		CALL REDLIN(LUN,CB,NX,NR )
		CALL REDLIN(LUNF,CB(NS2+1),NX,NR)

		DO I=1,NX/2
		   CB(I)=CB(I)*CB(I+NS2)
		ENDDO

		CALL WRTLIN(LUNO,CB,NX,NR)
	     ENDDO
	   ENDDO

           CLOSE(LUNF)
	   RETURN
	ENDIF


	IF (IOPT == 7 .OR. IOPT == 8)  THEN
C          BUTTERWORTH FILTER ****************************************
           EPS = 0.882
           AA  = 10.624

           CALL RDPRM2S(FP,FS,NOT_USED,
     &        'LOWER & UPPER LIMITING FREQ. (IN FREQ UNITS)', IRTFLG)

           ORD   = 2.  * ALOG10(EPS / SQRT(AA**2-1.0))
           ORD   = ORD / ALOG10(FP  / FS)

	   IF (FP > 0.5)  FP = FP / NXO   
	   IF (FS > 0.5)  FS = FS / NXO   

           PARM1 = FP / (EPS)**(2./ORD)

           GO TO 5768
	ENDIF


	IF (IOPT == 11)THEN

C          SAMPLED SPACE FILTER *********************************
           CALL RDPRI1S(NUMPRJ,NOT_USED,
     &                  'NUMBER OF PROJECTIONS',IRTFLG)
	   GOTO 5768	
        ENDIF



C       OTHER FILTERS ***********************************************

   	CALL RDPRM1S(PARM1,NOT_USED, 
     &        'FILTER RADIUS (IN FREQUENCY OR PIXEL UNITS)',IRTFLG)

	IF (PARM1 < 0.0 .OR. PARM1 > 0.5) PARM1 = PARM1 / NXO


	IF (IOPT == 5 .OR. IOPT == 6)  THEN
C          FERMI DISTRIBUTION FILTER ********************************
	   CALL RDPRM1S(TEMP,NOT_USED,
     &                 'TEMPERATURE (0=CUTOFF)',IRTFLG)

C          EXPONENTIAL FOR HIGH-PASS OPTION
	   IF (IOPT == 6) TEMP = -TEMP
	ENDIF


5768	NS2 = NX/2
	NR2 = NY/2
	NL2 = NZ/2

	X1  = FLOAT(NXO/2)**2
	Y1  = FLOAT(NR2)**2

        !write(6,*) ' nx,nxo,x1: ',nx,NXO,x1

	IF (NZ == 1) THEN
	   Z1   = 1.0
	ELSE
	   Z1   = FLOAT(NL2)**2
	ENDIF

	PARM    = PARM1**2

        SQRT2M1 = (SQRT(2.0)-1)

	DO K=1,NZ
	   IZ = K-1
	   IF (IZ  >  NL2)  IZ = IZ-NZ

	   DO J=1,NY
	      IY = J-1
	      IF (IY  >  NR2)  IY = IY-NY
	      NR = J+(K-1)*NY
	      CALL  REDLIN(LUN,B,NX,NR )

	      DO  2  I=1,NS2
	         IX=I-1
		 IF (IOPT  ==  11) GOTO 800

	         GOTO(100,200,300,400,500,500,600,700),IOPT


C       LOWPASS ******************************************************
100	IF (0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)
     &	        >  PARM)  CB(I) = CMPLX(0.0,0.0)
	GOTO  2

C       HIGH PASS ****************************************************
200	IF((IX.NE.0 .OR. IY.NE.0 .OR. IZ.NE.0) .AND.
     &      0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)
     &	       .LE. PARM)  CB(I) = CMPLX(0.0,0.0)
	GOTO  2

C       GAUSSIAN LOW PASS ********************************************
300  	F =0.125*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/PARM
	IF (F .LT. 16.0)  THEN
	   CB(I) = CB(I) * EXP(-F)
	ELSE
	   CB(I) = CMPLX(0.0,0.0)
	ENDIF
	GOTO  2

C       GAUSSIAN HIGH PASS ********************************************
400	IF (IX.NE.0 .OR. IY.NE.0 .OR. IZ.NE.0)  THEN
  	   F=0.125*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/
     &         PARM
	   IF (F .LT. 16.0)  THEN
	      CB(I) = CB(I) * (1.0-EXP(-F))
	   ENDIF
	ENDIF
	GOTO  2

C       FERMI DISTRIBUTION FILTER *************************************
500	ARG = (0.5*SQRT(
     &	   FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)-PARM1)/TEMP
	ARG = AMIN1(AMAX1(ARG,-10.0),10.0)
	IF (IOPT == 6.AND.IX.NE.0.AND.IY.NE.0.AND.IZ.NE.0) GOTO 2
	CB(I) = CB(I) * (1.0/(1.0+EXP(ARG)))
	GOTO 2

C       BUTTERWORTH  LOWPASS FILTER **********************************
600	ARG = 0.5*SQRT(
     &	   FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)
	CB(I) = CB(I) * SQRT(1.0/(1.0+SQRT2M1*(ARG/PARM1)**ORD))
	GOTO 2

C       BUTTERWORTH HIGHPASS FILTER **********************************
700     IF (IX.NE.0 .OR. IY.NE.0 .OR. IZ.NE.0) THEN
           ARG = 0.5*SQRT(
     &	      FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)
	   CB(I) = CB(I)*(1.0-SQRT(1.0/(1.0+SQRT2M1*(ARG/PARM1)**ORD)))
	ENDIF
        GOTO 2

C          SAMPLED SPACE FILTER **************************************
800        ARG = SQRT(FLOAT(IX*IX + IY*IY + IZ*IZ))
	   IF (ARG  ==  0.0) ARG = 1.0

           F = 3*NUMPRJ*((ARG+0.5)**2 - (ARG-0.5)**2)/
     &            (4*((ARG+0.5)**3 - (ARG-0.5)**3))

	   IF (F  >  1) F = 1.0
           CB(I) = CB(I) * F
 


2	   CONTINUE
	   CALL WRTLIN(LUNO,B,NX,NR)

	   ENDDO
	ENDDO

	END
@


1.31
log
@butterworth location of bands altered
@
text
@d16 1
a16 1
C=* Email: spider@@wadsworth.org                                        *
@


1.30
log
@removed incorrect x1 comment
@
text
@d3 6
a8 5
C FFILTS.F                          USED OPFILE   NOV 00 ARDEAN LEITH
C                                   ADDED BFACTOR OCT 01 BILL BAXTER
C                                   OPFILEC       FEB 03 ARDEAN LEITH
C                                   GAUSSIAN BUG  FEB 04 PP
C                                   SAMPLED ADDED MAR 07 C. RENKEN
d53 2
d127 2
a128 2
	   IF (FP > 0.5)  FP = FP / NX  ! NOT TESTED
	   IF (FS > 0.5)  FS = FS / NX  ! NOT TESTED
d145 1
d148 1
a148 1
952	CALL RDPRM1S(PARM1,NOT_USED, 
d151 1
a151 1
	IF (PARM1 < 0.0 .OR. PARM1 > 0.5) PARM1 = 0.5 * PARM1/(NXO/2)
d167 1
d174 1
a174 1
	   Z1 = 1.0
d176 1
a176 1
	   Z1 = FLOAT(NL2)**2
d178 4
a181 1
	PARM = PARM1**2
d185 1
a185 1
	   IF (IZ .GT. NL2)  IZ = IZ-NZ
d189 1
a189 1
	      IF (IY .GT. NR2)  IY = IY-NY
d195 1
a195 1
		 IF (IOPT .EQ. 11) GOTO 800
d199 1
d202 1
a202 1
     &	       .GT. PARM)  CB(I) = CMPLX(0.0,0.0)
d234 1
a234 1
	IF (IOPT.EQ.6.AND.IX.NE.0.AND.IY.NE.0.AND.IZ.NE.0) GOTO 2
d241 1
a241 1
	CB(I) = CB(I) * SQRT(1.0/(1.0+(ARG/PARM1)**ORD))
d248 1
a248 1
	   CB(I) = CB(I)*(1.0-SQRT(1.0/(1.0+(ARG/PARM1)**ORD)))
d252 3
a254 3
C       SAMPLED SPACE FILTER *****************************************
800     ARG = SQRT(FLOAT(IX*IX + IY*IY + IZ*IZ))
	IF (ARG .EQ. 0.0) ARG = 1.0
d256 1
a256 1
        F = 3*NUMPRJ*((ARG+0.5)**2 - (ARG-0.5)**2)/
d259 2
a260 2
	IF (F .GT. 1) F = 1.0
        CB(I) = CB(I) * F
d262 2
@


1.29
log
@note on nx vs nxf  used for x1
@
text
@a37 8
C  
C  NOTE:
C        'FF' (ffilts.f)            SETS X1 TO: (NX  / 2)**2 BUT
C        'FQ' (four_fq.f or fq_q.f) SETS X1 TO: (NXF / 2)**2 WHERE
C             NX  IS X DIMENSION OF POSSIBLY PADDED IMAGE
C             NXF IS SLIGHTLY LARGER DUE TO MIXED RADIX FOURIER PAD
C        SO THEY GIVE SLIGHTLY DIFFERENT RESULTS.  I SUSPECT THAT
C        'FF' IS ACTUALLY CORRECT?
d165 2
@


1.28
log
@freq & pixel specification, NX, cosmetic rewrite
@
text
@d31 3
a33 1
C      FFILTS(LUN,NX,NY,NZ,NXO)
d35 3
a37 2
C        NX,NY,NZ   DIMENSIONS OF FOURIER FILE
C        NXO              DIMENSION  OF CORRESPONDING REAL-SPACE FILE
d39 8
d54 2
a55 2
	COMMON                B(1)
	EQUIVALENCE           (CB,B)
d58 1
a58 1
	CHARACTER*1         :: NULL
a60 2

        NULL = CHAR(0)
@


1.27
log
@GPL_2010
@
text
@d31 1
a31 1
C      FFILTS(LUN,NSAM,NROW,NSLICE,NSAMO)
d33 2
a34 2
C        NSAM,NROW,NSLICE   DIMENSIONS OF FOURIER FILE
C        NSAMO              DIMENSION  OF CORRESPONDING REAL-SPACE FILE
d38 1
a38 1
	SUBROUTINE FFILTS(LUN,LUNO,NSAM,NROW,NSLICE,NSAMO)
d45 3
a47 3
	COMPLEX               CB(1)
        CHARACTER *(MAXNAM)   FILNAM
	CHARACTER*1           NULL
d49 1
a49 1
	DATA LUNF/27/
d54 12
a65 11
1009    FORMAT
     &    ('  1 - LOW-PASS,       2 - HIGH-PASS',/,
     &     '  3 - GAUSS LOW-PASS, 4 - GAUSS HIGH-PASS',/,
     &     '  5 - FERMI LOW-PASS, 6 - FERMI HIGH-PASS',/,
     &     '  7 - BUTER LOW-PASS, 8 - BUTER HIGH-PASS',/,
     &     '  9 - REMEZ,         10 - B FACTOR',/,
     &     ' 11 - SAMPLED SPACE')

        CALL RDPRMI(IOPT,IDUM,NOT_USED,'FILTER TYPE (1-11)')
	IF (IOPT.LT.1 .OR. IOPT.GT.11) THEN 
           CALL  ERRT(102,'NO SUCH FILTER TYPE',IOPT)
d69 4
a72 3
C       B FACTOR FILTER *************************************************
	IF (IOPT .EQ. 10)  THEN
           CALL BFACT(LUN,LUNO,NSAM,NROW,NSLICE,NSAMO)
d76 3
a78 2
C       REMEZ FILTER *************************************************
	IF (IOPT .EQ. 9)  THEN
d84 3
a86 3
	   IF (IFORM .GT .0 .OR.
     & 	      NS1.NE.NSAM .OR. NR1.NE.NROW .OR. NSL1.NE.NSLICE) THEN
              CALL  ERRT(2,'FILT2 ',NE)
d91 9
a99 7
	   NS2=NSAM/2
	   DO K=1,NSLICE
	     DO J=1,NROW
		NR=(K-1)*NROW+J
		CALL REDLIN(LUN,CB,NSAM,NR )
		CALL REDLIN(LUNF,CB(NS2+1),NSAM,NR)
		DO I=1,NSAM/2
d102 2
a103 1
		CALL WRTLIN(LUNO,CB,NSAM,NR)
d106 1
d111 3
a113 2
CC      BUTTERWORTH FILTER *******************************************
	IF (IOPT.EQ.7.OR.IOPT.EQ.8)  THEN
d117 8
a124 2
           CALL RDPRM2(FP,FS,NOT_USED,
     &        'PASS-BAND FREQUENCY & STOP-BAND FREQUENCY')
d126 1
a126 3
           ORD   = 2.*ALOG10(EPS/SQRT(AA**2-1.0))
           ORD   = ORD/ALOG10(FP/FS)
           PARM1 = FP/(EPS)**(2./ORD)
d132 5
a136 3
C       FOR SAMPLED SPACE FILTER *******************************
	IF (IOPT .EQ. 11)THEN
           CALL RDPRM(NUMPRJ,NOT_USED,'NUMBER OF PROJECTIONS')
d140 1
d143 2
a144 2
952	CALL  RDPRM(PARM1,NOT_USED,'FILTER RADIUS')
	IF (PARM1.LT.0.0.OR.PARM1.GT.0.5)  PARM1 = 0.5*PARM1/(NSAMO/2)
d146 7
a152 3
C       FERMI DISTRIBUTION FILTER ***********************************
	IF (IOPT.EQ.5 .OR. IOPT.EQ.6)  THEN
	   CALL RDPRM(TEMP,NOT_USED,'TEMPERATURE(0=CUTOFF)')
d155 1
a155 1
	   IF (IOPT.EQ.6) TEMP=-TEMP
d158 5
a162 4
5768	NS2 = NSAM/2
	NR2 = NROW/2
	NL2 = NSLICE/2
	X1  = FLOAT(NSAMO/2)**2
d164 2
a165 1
	IF (NSLICE .EQ. 1) THEN
d172 1
a172 1
	DO K=1,NSLICE
d174 3
a176 2
	   IF (IZ .GT. NL2)  IZ = IZ-NSLICE
	   DO J=1,NROW
d178 4
a181 3
	      IF (IY .GT. NR2)  IY = IY-NROW
	      NR = J+(K-1)*NROW
	      CALL  REDLIN(LUN,B,NSAM,NR )
d184 2
a185 1
		 IF (IOPT.EQ.11) GOTO 800
d250 2
a251 2
2	CONTINUE
	CALL WRTLIN(LUNO,B,NSAM,NR)
d253 1
d255 1
a255 1
	ENDDO
@


1.26
log
@C.R.'s changes
@
text
@a9 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2007  Health Research Inc.                      *
d11 5
a15 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d17 1
a17 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d22 1
a22 1
C=* This program is distributed in the hope that it will be useful,    *
d24 1
a24 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a25 1
C=*                                                                    *
d27 1
a27 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.25
log
@*** empty log message ***
@
text
@d223 4
a226 2
	F   = 3*NUMPRJ * ((ARG+0.5)**2    + (ARG-0.5)**2) /
     &	                 (4*((ARG+0.5)**3 + (ARG-0.5)**3))
@


1.24
log
@SAMPLED SPACE FILTER algoritm changed
@
text
@d221 2
a222 1
800     ARG = SQRT(FLOAT(IX*IX) + FLOAT(IY*IY) + FLOAT(IZ*IZ))	      
d225 1
a225 1
	IF (F .GT. 1) F = 1
@


1.23
log
@GPL License fixed
@
text
@d7 2
d11 1
a11 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d59 12
a70 8
     &    (' 1 - LOW-PASS,       2 - HIGH-PASS',/,
     &     ' 3 - GAUSS LOW-PASS, 4 - GAUSS HIGH-PASS',/,
     &     ' 5 - FERMI LOW-PASS, 6 - FERMI HIGH-PASS',/,
     &     ' 7 - BUTER LOW-PASS, 8 - BUTER HIGH-PASS',/,
     &     ' 9 - REMEZ,         10 - B FACTOR')

        CALL RDPRMI(IOPT,IDUM,NOT_USED,'FILTER TYPE (1-10)')
	IF (IOPT.LT.1 .OR. IOPT.GT.10)  GOTO  951
a72 1

a78 1

d80 2
a81 2
            MAXIM  = 0
            CALL OPFILEC(0,.TRUE.,FILNAM,LUNF,'O',IFORM,NS1,NR1,NSL1,
d83 1
a83 1
            IF (IRTFLG .NE. 0) RETURN
d85 6
a90 5
	    IF (IFORM.GT.0 .OR.
     & 		NS1.NE.NSAM.OR.NR1.NE.NROW.OR.NSL1.NE.NSLICE) THEN
                CALL  ERRT(2,'FILT2 ',NE)
                CLOSE(LUNF)
	    ENDIF
d92 3
a94 3
	NS2=NSAM/2
	DO K=1,NSLICE
	    DO J=1,NROW
d96 4
a99 4
		CALL  REDLIN(LUN,CB,NSAM,NR )
		CALL  REDLIN(LUNF,CB(NS2+1),NSAM,NR)
		DO    I=1,NSAM/2
		CB(I)=CB(I)*CB(I+NS2)
d101 5
a105 5
		CALL  WRTLIN(LUNO,CB,NSAM,NR)
	    ENDDO
	ENDDO
882	CLOSE(LUNF)
	RETURN
d124 6
d165 1
d168 1
a168 1
C LOWPASS ***********************************************************
d173 1
a173 2
C HIGH PASS *********************************************************

d179 1
a179 2
C GAUSSIAN LOW PASS *************************************************

d188 1
a188 2
C GAUSSIAN HIGH PASS ***********************************************

d198 2
a199 3
C FERMI DISTRIBUTION FILTER ****************************************

500	ARG=(0.5*SQRT(
d206 1
a206 2
C BUTTERWORTH  LOWPASS FILTER *************************************

d212 2
a213 3
C BUTTERWORTH HIGHPASS FILTER *************************************

700     IF (IX.NE.0 .OR. IY.NE.0 .OR.IZ.NE.0) THEN
d218 1
d220 7
d228 1
a228 1
	CALL  WRTLIN(LUNO,B,NSAM,NR)
@


1.22
log
@typo on line 1
@
text
@d8 23
a30 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.21
log
@gauss bug 0.125 now
@
text
@d1 1
a1 1
/C++*******************************************************************
@


1.20
log
@opfilec
@
text
@d1 1
a1 1
C++*******************************************************************
d3 1
a3 2
C FFILTS.F 
C                                   USED OPFILE NOV 00 ARDEAN LEITH
d6 9
a15 10
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
C
d26 1
d28 5
a32 5
	COMMON        B(1)
	COMPLEX       CB(1)
	CHARACTER*81  FILNAM
	CHARACTER*1   NULL
	EQUIVALENCE   (CB,B)
d47 1
a47 1
	IF (IOPT.LT.1.OR.IOPT.GT.10)  GOTO  951
d52 1
a52 1
       CALL BFACT(LUN,LUNO,NSAM,NROW,NSLICE,NSAMO)
d71 2
a72 2
	DO    K=1,NSLICE
	    DO    J=1,NROW
d88 2
a89 2
           EPS=0.882
           AA=10.624
d94 3
a96 3
           ORD=2.*ALOG10(EPS/SQRT(AA**2-1.0))
           ORD=ORD/ALOG10(FP/FS)
           PARM1=FP/(EPS)**(2./ORD)
d105 1
a105 1
	IF (PARM1.LT.0.0.OR.PARM1.GT.0.5)  PARM1=0.5*PARM1/(NSAMO/2)
d108 1
a108 2
	IF (IOPT.EQ.5.OR.IOPT.EQ.6)  THEN

d112 1
a112 1
	   IF(IOPT.EQ.6) TEMP=-TEMP
d114 8
a121 7
5768	NS2=NSAM/2
	NR2=NROW/2
	NL2=NSLICE/2
	X1=FLOAT(NSAMO/2)**2
	Y1=FLOAT(NR2)**2
	IF(NSLICE.EQ.1) THEN
	   Z1=1.0
d123 1
a123 1
	   Z1=FLOAT(NL2)**2
d125 1
a125 1
	PARM=PARM1**2
d127 7
a133 7
	DO    K=1,NSLICE
	   IZ=K-1
	   IF(IZ.GT.NL2)  IZ=IZ-NSLICE
	   DO    J=1,NROW
	      IY=J-1
	      IF(IY.GT.NR2)  IY=IY-NROW
	      NR=J+(K-1)*NROW
d137 1
a137 1
	      GOTO(100,200,300,400,500,500,600,700),IOPT
d141 1
a141 1
     &	       .GT. PARM)  CB(I)=CMPLX(0.0,0.0)
d148 1
a148 1
     &	       .LE. PARM)  CB(I)=CMPLX(0.0,0.0)
d153 3
a155 3
300  	F=(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/(2.*PARM)
	IF(F.LT.16.0)  THEN
	   CB(I)=CB(I)*EXP(-F)
d157 1
a157 1
	   CB(I)=CMPLX(0.0,0.0)
d164 4
a167 3
  	   F=(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/(2.*PARM)
	   IF(F.LT.16.0)  THEN
	      CB(I)=CB(I)*(1.0-EXP(-F))
d176 1
a176 1
	ARG=AMIN1(AMAX1(ARG,-10.0),10.0)
d178 1
a178 1
	CB(I)=CB(I)*(1.0/(1.0+EXP(ARG)))
d183 1
a183 1
600	ARG=0.5*SQRT(
d185 1
a185 1
	CB(I)=CB(I)*SQRT(1.0/(1.0+(ARG/PARM1)**ORD))
d191 3
a193 3
           ARG=0.5*SQRT(
     &	   FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)
	   CB(I)=CB(I)*(1.0-SQRT(1.0/(1.0+(ARG/PARM1)**ORD)))
d198 1
@


1.19
log
@nloop,iloop_removed
@
text
@d6 1
d61 1
a61 1
            CALL OPFILE(.TRUE.,FILNAM,LUNF,'O',IFORM,NS1,NR1,NSL1,
@


1.18
log
@added bfactor
@
text
@d46 1
a46 1
        CALL RDPRMI(IOPT,IDUM,NLOOP,ILOOP,'FILTER TYPE (1-10)')
d91 1
a91 1
           CALL RDPRM2(FP,FS,NLOOP,ILOOP,
d104 1
a104 1
952	CALL  RDPRM(PARM1,NLOOP,ILOOP,'FILTER RADIUS')
d110 1
a110 1
	   CALL RDPRM(TEMP,NLOOP,ILOOP,'TEMPERATURE(0=CUTOFF)')
@


1.17
log
@used opfile & cosmetic
@
text
@d5 1
d44 1
a44 1
     &     ' 9 - REMEZ')
d46 9
a54 2
        CALL RDPRMI(IOPT,IDUM,NLOOP,ILOOP,'FILTER TYPE (1-9)')
	IF (IOPT.LT.1.OR.IOPT.GT.9)  GOTO  951
@


1.16
log
@ibm complained of missing )?
@
text
@d3 2
a4 1
C $$ FFILTS.FOR 
a24 2
	COMMON DUMMY(80),B(1)
	COMPLEX CB(1)
d26 3
d31 2
a32 1
	EQUIVALENCE  (CB,B)
a33 1
        NULL=CHAR(0)
d35 2
d45 4
a48 2
        CALL RDPRMI(IOPT,IDUM,NLOOP,ILOOP,'Filter type (1-9)')
	IF(IOPT.LT.1.OR.IOPT.GT.9)  GOTO  951
d50 5
a54 1
C       REMEZ FILTER
a55 8
	IF (IOPT.EQ.9)  THEN
	    CALL  FILERD(FILNAM,NLETI,NULL,'FILTER',IRTFLG)
	    IF (IRTFLG.EQ.-1)  RETURN
	    CALL  OPENF(FILNAM,LUNF,NS1,NR1,'O',NF,NSL1)
	    IF (NF.EQ.1)  THEN
	       NER=4
	       GOTO  881
	    ENDIF
d58 2
a59 2
	    NER=2
	    GOTO  881
d61 1
a61 1
C
a73 2
	GOTO  882
881	CALL  ERRT(NER,'FF ',NE)
d78 1
a78 1
CC      BUTTERWORTH FILTER
d94 1
a94 1
C       OTHER FILTERS
d97 4
a100 1
	IF(PARM1.LT.0.0.OR.PARM1.GT.0.5)  PARM1=0.5*PARM1/(NSAMO/2)
d102 4
a105 7
C       FERMI DISTRIBUTION FILTER ********************
	IF(IOPT.EQ.5.OR.IOPT.EQ.6)  THEN
C
	 CALL RDPRM(TEMP,NLOOP,ILOOP,'TEMPERATURE(0=CUTOFF)')
C
C  EXPONENTIAL FOR HIGH-PASS OPTION
	 IF(IOPT.EQ.6) TEMP=-TEMP
d113 1
a113 1
	Z1=1.0
d115 1
a115 1
	Z1=FLOAT(NL2)**2
d118 1
a118 1
C
d120 10
a129 10
	IZ=K-1
	IF(IZ.GT.NL2)  IZ=IZ-NSLICE
	DO    J=1,NROW
	IY=J-1
	IF(IY.GT.NR2)  IY=IY-NROW
	NR=J+(K-1)*NROW
	CALL  REDLIN(LUN,B,NSAM,NR )
	DO  2  I=1,NS2
	IX=I-1
	GOTO(100,200,300,400,500,500,600,700),IOPT
d131 2
a132 2
C LOWPASS ********************************
100	IF(0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)
d136 1
a136 1
C HIGH PASS ******************
d139 1
a139 1
     &  0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)
d143 1
a143 1
C GAUSSIAN LOW PASS ***************************
d145 1
a145 2
300  	F=
     & (FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/(2.*PARM)
d147 1
a147 1
	CB(I)=CB(I)*EXP(-F)
d149 1
a149 1
	CB(I)=CMPLX(0.0,0.0)
d153 1
a153 1
C GAUSSIAN HIGH PASS ********************************
d155 5
a159 5
400	IF(IX.NE.0 .OR. IY.NE.0 .OR. IZ.NE.0)  THEN
  	F=(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/(2.*PARM)
	IF(F.LT.16.0)  THEN
	CB(I)=CB(I)*(1.0-EXP(-F))
	ENDIF
d163 1
a163 1
C FERMI DISTRIBUTION FILTER ********************
d166 1
a166 1
     &	FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)-PARM1)/TEMP
d168 1
a168 1
	IF(IOPT.EQ.6.AND.IX.NE.0.AND.IY.NE.0.AND.IZ.NE.0)GOTO 2
d172 1
a172 1
C BUTTERWORTH  LOWPASS FILTER **********************
d175 1
a175 1
     &	FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)
d179 1
a179 1
C BUTTERWORTH HIGHPASS FILTER *********************
d181 1
a181 1
700     IF(IX.NE.0 .OR. IY.NE.0 .OR.IZ.NE.0)THEN
@


1.15
log
@a
@
text
@d15 1
a15 4
C
C $$ FFILTS:
C
C      CALL FFILTS(LUN,NSAM,NROW,NSLICE,NSAMO)
d21 1
a21 2
C
C
d23 1
a32 1
C --
d43 4
a46 3
C REMEZ FILTER
C
	IF(IOPT.EQ.9)  THEN
d48 1
a48 1
	    IF(IRTFLG.EQ.-1)  RETURN
d50 3
a52 3
	    IF(NF.EQ.1)  THEN
	    NER=4
	    GOTO  881
d54 1
a54 1
	    IF(IFORM.GT.0 .OR.
d77 14
a90 14
C
C Butterworth filter
	if(IOPT.EQ.7.OR.IOPT.EQ.8)  THEN
              EPS=0.882
              AA=10.624
C
             CALL RDPRM2(FP,FS,NLOOP,ILOOP,
     &       'PASS-BAND FREQUENCY & STOP-BAND FREQUENCY??')
C
             ORD=2.*ALOG10(EPS/SQRT(AA**2-1.0))
             ORD=ORD/ALOG10(FP/FS)
             PARM1=FP/(EPS)**(2./ORD)
C
             GO TO 5768
d93 3
a95 3
c
C OTHER FILTERS
c
d98 2
a99 1
C FERMI DISTRIBUTION FILTER ********************
d130 1
d135 1
a135 1
C
d137 1
a137 1
C
d142 1
a142 1
C
d144 1
a144 1
C
d153 1
a153 1
C
d155 1
a155 1
C
d163 1
a163 1
C
d165 1
a165 1
C
d172 1
d174 1
a174 1
C
d179 1
a179 1
C
d181 1
a181 1
C
d183 3
a185 3
        ARG=0.5*SQRT(
     &	FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)
	CB(I)=CB(I)*(1.0-SQRT(1.0/(1.0+(ARG/PARM1)**ORD)))
d187 1
a187 1
C
@


1.14
log
@2D case fixed
@
text
@d35 1
a35 1
CNO_SAVE
@


1.13
log
@*** empty log message ***
@
text
@d114 3
d118 1
d134 1
a134 1
     &	       .GT. PARM)  CB(I)=0.0
d141 1
a141 1
     &	       .LE. PARM)  CB(I)=0.0
d151 1
a151 1
	CB(I)=0.0
@


1.12
log
@*** empty log message ***
@
text
@d143 1
a143 1
     & FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/(2.*PARM))
@


1.11
log
@*** empty log message ***
@
text
@d154 1
a154 1
  	F=FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/(2.*PARM)
@


1.10
log
@*** empty log message ***
@
text
@d154 1
a154 1
  	F=FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/(2.*PARM))
@


1.9
log
@gaussian fixed
@
text
@d153 2
a154 3
400	IF(IX.NE.0 .OR. IY.NE.0 .OR. IZ.NE.0)  then
  	F=
	FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/(2.*PARM))
@


1.8
log
@freq fixed
@
text
@d142 7
a148 2
300	CB(I)=CB(I)*EXP(-0.25*(
     &	  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/(2.*PARM))
d153 7
a159 3
400	IF(IX.NE.0 .OR. IY.NE.0 .OR. IZ.NE.0)
     &	CB(I)=CB(I)*(1.0-EXP(-0.25*(
     &	FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/(2.*PARM)))
@


1.7
log
@R
@
text
@d100 1
a100 1
	IF(PARM1.LT.0.0.OR.PARM1.GT.0.5)  PARM1=0.5*PARM1/(NSAMO/2+1)
d112 3
a114 3
	X1=FLOAT(NSAMO)**2
	Y1=FLOAT(NROW)**2
	Z1=FLOAT(NSLICE)**2
d129 1
a129 1
100	IF(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1
d136 1
a136 1
     &  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1
d142 1
a142 1
300	CB(I)=CB(I)*EXP(-(
d149 1
a149 1
     &	CB(I)=CB(I)*(1.0-EXP(-(
d155 1
a155 1
500	ARG=(SQRT(
d163 1
a163 1
600	ARG=SQRT(
d171 1
a171 1
        ARG=SQRT(
@


1.6
log
@*** empty log message ***
@
text
@d52 1
a52 1
	    CALL  OPENF(FILNAM,LUNF,NS1,NR1,'R',NF,NSL1)
@


1.5
log
@Ed egelman's request: gaussian filter has x^2/(2*sigma^2) i.e., additional factor of 2. in denominator.
@
text
@d64 2
a65 2
	DO  77  K=1,NSLICE
	    DO  77  J=1,NROW
d69 6
a74 3
		DO  78  I=1,NSAM/2
78		CB(I)=CB(I)*CB(I+NS2)
77		CALL  WRTLIN(LUNO,CB,NSAM,NR)
d117 1
a117 1
	DO  1  K=1,NSLICE
d120 1
a120 1
	DO  1  J=1,NROW
d178 2
a179 1
1	CONTINUE
@


1.4
log
@FF output added
@
text
@d140 1
a140 1
     &	  FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/PARM)
d147 1
a147 1
     &	FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1+FLOAT(IZ*IZ)/Z1)/PARM))
@


1.3
log
@bug fixed
@
text
@d26 1
a26 1
	SUBROUTINE FFILTS(LUN,NSAM,NROW,NSLICE,NSAMO)
d71 1
a71 1
77		CALL  WRTLIN(LUN,CB,NSAM,NR)
d174 1
a174 1
	CALL  WRTLIN(LUN,B,NSAM,NR)
@


1.2
log
@corrected
@
text
@d106 2
a107 1
5768	NR2=NROW/2
d122 2
a123 1
	DO  2  I=1,NSAM
d127 1
a127 1
     &	       .GT. PARM)  B(I)=0.0
d134 1
a134 1
     &	       .LE. PARM)  B(I)=0.0
d139 1
a139 1
300	B(I)=B(I)*EXP(-(
d146 1
a146 1
     &	B(I)=B(I)*(1.0-EXP(-(
d156 1
a156 1
	B(I)=B(I)*(1.0/(1.0+EXP(ARG)))
d162 1
a162 1
	B(I)=B(I)*SQRT(1.0/(1.0+(ARG/PARM1)**ORD))
d170 1
a170 1
	B(I)=B(I)*(1.0-SQRT(1.0/(1.0+(ARG/PARM1)**ORD)))
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
C      CALL FFILTS(LUN,NSAM,NROW,NSLICE)
d20 2
a21 1
C        NSAM,NROW,NSLICE   DIMENSIONS OF CORRESPONDING REAL-SPACE FILE
d26 1
a26 1
	SUBROUTINE FFILTS(LUN,NSAM,NROW,NSLICE)
d28 1
d32 1
d52 1
a52 1
	    CALL  OPENF(FILNAM,LUNF,NS1,NR1,'OLD',NF,NSL1)
d57 1
a57 1
	    IF(IFORM.NE.-7 .OR.
d63 1
d67 5
a71 36
		CALL  REDLIN(LUN,B,NSAM,NR )
		CALL  REDLIN(LUNF,B(NSAM+1),NSAM,NR)
		IF(J.LT.3)  THEN
		  IF(K.LT.3)  THEN
		    B(1)=B(1)*B(NSAM+1)
		    B(2)=B(2)*B(NSAM+2)
		  ELSE
		      IF(MOD(K-1,2).EQ.0)  THEN
			IF(J.EQ.1)  THEN
			Z1=B(NSAM+1)
			Z2=B(NSAM+2)
			ELSE
			Z3=B(NSAM+1)
			Z4=B(NSAM+2)
			ENDIF
		      ENDIF
		    IF(J.EQ.1)  THEN
		    B(1)=B(1)*Z1
		    B(2)=B(2)*Z2
		    ELSE
		    B(1)=B(1)*Z3
		    B(2)=B(2)*Z4
		    ENDIF
		  ENDIF      
		ELSE
		      IF(MOD(J-1,2).EQ.0)  THEN
			Y1=B(NSAM+1)
			Y2=B(NSAM+2)
		      ENDIF
		    B(1)=B(1)*Y1
		    B(2)=B(2)*Y2
		ENDIF      
		    DO  78  I=3,NSAM,2
		    B(I)=B(I)*B(NSAM+I)
78		    B(I+1)=B(I+1)*B(NSAM+I)
77		CALL  WRTLIN(LUN,B,NSAM,NR)
d73 1
a73 1
881	CALL  ERRT(NER,'FILT2 ',NE)
d97 1
a97 1
	IF(PARM1.LT.0.0.OR.PARM1.GT.0.5)  PARM1=0.5*PARM1/(NSAM/2+1)
d106 1
a106 2
5768	NS2=NSAM/2
	NR2=NROW/2
d108 1
a108 1
	X1=FLOAT(NSAM)**2
@
