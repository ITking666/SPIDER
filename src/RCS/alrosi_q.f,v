head	1.15;
access;
symbols
	pre_getangas:1.13
	GPL2010:1.13
	pre_GPL2010:1.12
	pre_var_equation:1.12
	pre_fftwrings:1.12
	pre_opfiles:1.11
	src:1.11
	best-code:1.11
	x-named-regs:1.11
	x:1.11
	v13-00:1.11
	pre_GPL:1.9
	prec_CA:1.9
	noindx:1.9
	Bproc:1.6
	oct21:1.5
	last77:1.4;
locks; strict;
comment	@c @;


1.15
date	2017.11.28.16.42.42;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2017.11.28.14.39.41;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2010.06.24.13.25.02;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2008.02.19.16.37.09;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.17.20.42.27;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.17.18.32.50;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.30.20.09.43;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.21.20.52.58;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2000.09.28.20.18.22;	author bimal;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.21.19.39.01;	author bimal;	state Exp;
branches;
next	1.5;

1.5
date	99.10.01.19.58.15;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	99.02.26.22.01.29;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	99.02.11.15.33.33;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	99.02.10.15.47.18;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	97.09.30.14.22.16;	author pawel;	state Exp;
branches;
next	;


desc
@@


1.15
log
@removed debug output
@
text
@C++*********************************************************************
C
C ALROSI_Q.F    REFACTOR WHILE TRACING BUG       NOV  2017 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2017  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C ALROSI_Q
C
C VARIABLES:
C          A      : IMAGE DATA
C          ATMP=B : SHIFTED IMAGE A
C          B=D    : MT ,  OUT: ROTATED IMAGE ATMP --> FFT 
C          C      : CROSS CORRELATED REFER WITH B
C          REFER  : FFT OF SHIFTED IMAGE
C
C CALLING:  CALL ALROSI_Q(A,B,   D,C,REFER,LSD,NX,NY,NSI,.........
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE ALROSI_Q(A,ATMP,B,C,REFER,LSD,NX,NY,NSI,
     &                      PARA,NOCHANGE,
     &                      A_CIRC,REFER_CIRC,LCIRC,JACUP,
     &                      NUMR,NRING,MAXRIN,TEMP,MODE,KTN)

        PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
        PARAMETER (DGR_TO_RAD = (QUADPI/180))

        DIMENSION         A(LSD,NY),B(LSD,NY),C(LSD,NY)
        DIMENSION         REFER(LSD,NY),ATMP(LSD,NY),PARA(3)
        INTEGER           NUMR(3,NRING),MAXRIN
        DOUBLE PRECISION  TEMP(MAXRIN+2,2),TOTMIN
        DIMENSION         A_CIRC(LCIRC),REFER_CIRC(LCIRC)
        LOGICAL           NOCHANGE
        CHARACTER*1       MODE

        NSNR = LSD * NY

C       ATMP HAS TO BE UPDATED BEFORE THE CALL

        NOCHANGE = .FALSE.

        DO ITER = 1, 25

C         INTERPOLATE ATMP INTO POLAR COORDINATES A_CIRC
          CALL ALRQ_Q(ATMP,LSD,NX,NY,NUMR,A_CIRC,LCIRC,NRING,MODE,IPIC)

C         FFT OF POLAR RINGS IN A_CIRC
          CALL FOURING_Q(A_CIRC,LCIRC,NUMR,NRING,TEMP,MODE)

C         FIND MAX LOC OF CROSS-CORRELATED FFT RINGS
          CALL CROSRNG_Q
     &     (REFER_CIRC,A_CIRC,LCIRC,NRING,TEMP,TEMP(1,2),
     &      MAXRIN,JACUP,NUMR,TOTMIN,TOT,MODE)

C         ROTATE ATMP BY ANGLE ROTMP INTO B
          ROTMP = ANG(TOT,MODE)
          CALL RTQ_Q(ATMP,B,LSD,NX,NY,ROTMP)

C         FORWARD FFT ON: B
          INS = 1
          CALL FMRS_2(B,NX,NY,INS)

C         CROSS CORRELATE  REFER WITH B (BOTH FFT'S),  OUTPUT IS: C
          CALL CCRS_2(REFER,B,C, LSD,NX,NY)

C         FIND PEAK IN: C 
          CALL FINDMX_Q(C,LSD,NX,NY,NSI,CMX1,SX1,SY1)

          !write(6,*) ' In alrosi_q,ix:', ix,iy, ic,jc, sx,sy, nsi
          !write(6,*) ' In alrosi_q,D:', d(ix,iy)

          DD = ((COS(ROTMP*DGR_TO_RAD)-1.0) * NUMR(1,NRING)+SX1)**2
     &       + (SIN(ROTMP*DGR_TO_RAD) * NUMR(1,NRING)+SY1)**2

          IF (DD < 0.25 )  THEN
             IF (ITER == 1)  NOCHANGE = .TRUE.

C            NEXT LINE WOULD BE USED FOR NON-ZERO TOT ONLY
C            CALL UPDTC(REFER_CIRC,A_CIRC,LCIRC,NRING,NUMR,TOT,MAXRIN,KTN)

C            WEIGHTED ADD A_CIRC TO REFER_CIRC
C            REFER_CIRC(I)=(REFER_CIRC(I)*(IMI-1)+A_CIRC(I))/FLOAT(IMI)
             CALL UPDTF(REFER_CIRC,A_CIRC,LCIRC,KTN)

C            WEIGHTED ADD SHIFTED IMAGE B TO THE SHIFTED REFERENCE REFER
             CALL UPDTF(REFER,B,NSNR,KTN)
             RETURN
          ENDIF

          CALL SUMAP(PARA(1),PARA(2),PARA(3),ROTMP,SX1,SY1,P1,P2,P3)

C         ROTATE IMAGE A INTO ATMP
          PARA(1) = P1
          PARA(2) = P2
          PARA(3) = P3
          CALL RTQS_Q(A,ATMP,LSD,NX,NY,PARA(1),PARA(2),PARA(3))

        ENDDO

        END

@


1.14
log
@cosmetic rewrite while chasing bug elsewhere
@
text
@d87 2
a88 2
C         FIND PEAK IN: C !!!!!!!!!!!! CRASHES HERE SOMETIMES
          CALL FINDMX_Q_TEST(C,LSD,NX,NY,NSI,CMX1,SX1,SY1)
@


1.13
log
@GPL_2010
@
text
@d3 1
a3 1
C ALROSI_Q.F
d9 1
a9 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d27 10
a36 1
C IMAGE_PROCESSING_ROUTINE
d41 4
a44 3
        SUBROUTINE  ALROSI_Q(A,ATMP,B,C,REFER,LSD,NSAM,NROW,NSI,
     &     PARA,NOCHANGE,
     &    A_CIRC,REFER_CIRC,LCIRC,JACUP,NUMR,NRING,MAXRIN,TEMP,MODE,KTN)
d49 3
a51 3
        DIMENSION   A(LSD,NROW),B(LSD,NROW),C(LSD,NROW)
        DIMENSION   REFER(LSD,NROW),ATMP(LSD,NROW),PARA(3)
        INTEGER  NUMR(3,NRING),MAXRIN
d53 3
a55 3
        DIMENSION  A_CIRC(LCIRC),REFER_CIRC(LCIRC)
        LOGICAL  NOCHANGE
        CHARACTER*1 MODE
d57 1
a57 1
        NSNR=LSD*NROW
d61 9
a69 7
        ITER=0
        NOCHANGE=.FALSE.
101     ITER=ITER+1
        CALL  ALRQ_Q
     &     (ATMP,LSD,NSAM,NROW,NUMR,A_CIRC,LCIRC,NRING,MODE,IPIC)
        CALL  FOURING_Q
     &     (A_CIRC,LCIRC,NUMR,NRING,TEMP,MODE)
d71 2
a72 1
        CALL  CROSRNG_Q
d74 15
a88 1
     &     MAXRIN,JACUP,NUMR,TOTMIN,TOT,MODE)
d90 2
a91 2
        ROTMP=ANG(TOT,MODE)
        CALL  RTQ_Q(ATMP,B,LSD,NSAM,NROW,ROTMP)
d93 27
a119 2
        INS=1
        CALL  FMRS_2(B,NSAM,NROW,INS)
a120 25
        LSC = NSAM+2-MOD(NSAM,2)
        CALL CCRS_2(REFER,B,C, LSC,NSAM,NROW)

        CALL  FINDMX_Q(C,LSD,NSAM,NROW,NSI,CMX1,SX1,SY1)

        DD = ((COS(ROTMP*DGR_TO_RAD)-1.0)*NUMR(1,NRING)+SX1)**2
     &     +(SIN(ROTMP*DGR_TO_RAD)*NUMR(1,NRING)+SY1)**2
        IF (DD .LT. 0.25 )  THEN
           IF (ITER .EQ. 1)  NOCHANGE=.TRUE.

C          NEXT LINE WOULD BE USED FOR NON-ZERO TOT ONLY
C          CALL  UPDTC(REFER_CIRC,A_CIRC,LCIRC,NRING,NUMR,TOT,MAXRIN,KTN)

           CALL  UPDTF(REFER_CIRC,A_CIRC,LCIRC,KTN)
           CALL  UPDTF(REFER,B,NSNR,KTN)
           RETURN
        ENDIF

        CALL  SUMAP(PARA(1),PARA(2),PARA(3),ROTMP,SX1,SY1,P1,P2,P3)
        PARA(1 )= P1
        PARA(2) = P2
        PARA(3) = P3
        CALL  RTQS_Q(A,ATMP,LSD,NSAM,NROW,PARA(1),PARA(2),PARA(3))
        IF(ITER .GT. 25)  RETURN
        GOTO 101
d122 1
@


1.12
log
@ccrs_ added parameter
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.11
log
@GPL License fixed
@
text
@d72 4
a75 1
        CALL  CCRS_2(REFER,B,C,NSAM,NROW)
@


1.10
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a5 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
a29 1
C **************************************************************************
a34 1
C--************************************************************************
@


1.9
log
@ccr* phase parameter removed
@
text
@d1 1
d6 1
d8 1
d10 24
d40 1
d46 1
@


1.8
log
@ccrs_2 added parameter
@
text
@d56 1
a56 1
        CALL  CCRS_2(REFER,B,C,NSAM,NROW,.FALSE.)
@


1.7
log
@header and cosmetic
@
text
@d3 1
a3 1
C $$ ALROSI_Q.FOR
a16 1
C        1         2         3         4         5         6         7
a18 3
C
C $$ ALROSI_Q.FOR
C
d21 2
a22 2
     &  PARA,NOCHANGE,
     &  A_CIRC,REFER_CIRC,LCIRC,JACUP,NUMR,NRING,MAXRIN,TEMP,MODE,KTN)
d43 1
a43 1
     &  (ATMP,LSD,NSAM,NROW,NUMR,A_CIRC,LCIRC,NRING,MODE,IPIC)
d45 1
a45 1
     &  (A_CIRC,LCIRC,NUMR,NRING,TEMP,MODE)
d48 2
a49 2
     &  (REFER_CIRC,A_CIRC,LCIRC,NRING,TEMP,TEMP(1,2),
     &  MAXRIN,JACUP,NUMR,TOTMIN,TOT,MODE)
d56 1
a56 1
        CALL  CCRS_2(REFER,B,C,NSAM,NROW)
d59 1
a59 1
        DD=((COS(ROTMP*DGR_TO_RAD)-1.0)*NUMR(1,NRING)+SX1)**2
d61 2
a62 2
        IF(DD.LT.0.25 )  THEN
           IF(ITER.EQ.1)  NOCHANGE=.TRUE.
d73 3
a75 3
        PARA(1)=P1
        PARA(2)=P2
        PARA(3)=P3
d77 1
a77 1
        IF(ITER.GT.25)  RETURN
@


1.6
log
@replaced ccrs_2r with ccrs_2
@
text
@d15 1
d17 1
a17 1
C
d23 61
a83 58
         SUBROUTINE  ALROSI_Q(A,ATMP,B,C,REFER,LSD,NSAM,NROW,NSI,
     &   WRK,PARA,NOCHANGE,
     &   A_CIRC,REFER_CIRC,LCIRC,JACUP,NUMR,NRING,MAXRIN,TEMP,MODE,KTN)
	PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
	PARAMETER (DGR_TO_RAD = (QUADPI/180))
         DIMENSION   A(LSD,NROW),B(LSD,NROW),C(LSD,NROW)
         DIMENSION   REFER(LSD,NROW),ATMP(LSD,NROW),PARA(3),WRK(*)
         INTEGER  NUMR(3,NRING),MAXRIN
         DOUBLE PRECISION  TEMP(MAXRIN+2,2),TOTMIN
         DIMENSION  A_CIRC(LCIRC),REFER_CIRC(LCIRC)
         LOGICAL  NOCHANGE
         CHARACTER*1 MODE
C
         NSNR=LSD*NROW
C
C  atmp has to be updated before the call
C
         ITER=0
         NOCHANGE=.FALSE.
101      ITER=ITER+1
         CALL  ALRQ_Q
     &   (ATMP,LSD,NSAM,NROW,NUMR,A_CIRC,LCIRC,NRING,MODE,IPIC)
         CALL  FOURING_Q
     &   (A_CIRC,LCIRC,NUMR,NRING,TEMP,MODE)

         CALL  CROSRNG_Q
     &   (REFER_CIRC,A_CIRC,LCIRC,NRING,TEMP,TEMP(1,2),
     &   MAXRIN,JACUP,NUMR,TOTMIN,TOT,MODE)
C
         ROTMP=ANG(TOT,MODE)
         CALL  RTQ_Q(ATMP,B,LSD,NSAM,NROW,ROTMP)
C
         INS=1
         CALL  FMRS_2(B,NSAM,NROW,INS)
         CALL  CCRS_2(REFER,B,C,NSAM,NROW)
         CALL  FINDMX_Q(C,LSD,NSAM,NROW,NSI,CMX1,SX1,SY1)
C
         DD=((COS(ROTMP*DGR_TO_RAD)-1.0)*NUMR(1,NRING)+SX1)**2
     &   +(SIN(ROTMP*DGR_TO_RAD)*NUMR(1,NRING)+SY1)**2
         IF(DD.LT.0.25 )  THEN
         IF(ITER.EQ.1)  NOCHANGE=.TRUE.
C
C next line would be used for non-zero tot only
C     call  updtc(refer_circ,a_circ,lcirc,nring,numr,tot,maxrin,ktn)
C
         CALL  UPDTF(REFER_CIRC,A_CIRC,LCIRC,KTN)
         CALL  UPDTF(REFER,B,NSNR,KTN)
         RETURN
         ENDIF
C
         CALL  SUMAP(PARA(1),PARA(2),PARA(3),ROTMP,SX1,SY1,P1,P2,P3)
         PARA(1)=P1
         PARA(2)=P2
         PARA(3)=P3
         CALL  RTQS_Q(A,ATMP,LSD,NSAM,NROW,PARA(1),PARA(2),PARA(3))
         IF(ITER.GT.25)  RETURN
         GOTO 101
         END
@


1.5
log
@*** empty log message ***
@
text
@d56 1
a56 1
         CALL  CCRS_2R(REFER,B,C,LSD/2,NSAM,NROW)
@


1.4
log
@ff
@
text
@a33 1
CNO_SAVE
@


1.3
log
@*** empty log message ***
@
text
@d29 1
a29 1
         INTEGER*2  NUMR(3,NRING),MAXRIN
@


1.2
log
@trig
@
text
@d26 1
a26 1
	PARAMETER (DRG_TO_RAD = (QUADPI/180))
d60 2
a61 2
         DD=((COS(ROTMP*DRG_TO_RAD)-1.0)*NUMR(1,NRING)+SX1)**2
     &   +(SIN(ROTMP*DRG_TO_RAD)*NUMR(1,NRING)+SY1)**2
@


1.1
log
@Initial revision
@
text
@d25 2
d60 2
a61 2
         DD=((COSD(ROTMP)-1.0)*NUMR(1,NRING)+SX1)**2
     &   +(SIND(ROTMP)*NUMR(1,NRING)+SY1)**2
@
