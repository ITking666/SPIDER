head	1.26;
access;
symbols
	pre_getangas:1.24
	GPL2010:1.24
	pre_GPL2010:1.23
	pre_var_equation:1.23
	pre_fftwrings:1.23
	pre_opfiles:1.23
	src:1.23
	best-code:1.23
	x-named-regs:1.23
	x:1.23
	v13-00:1.23
	pre_GPL:1.21
	prec_CA:1.21
	noindx:1.20
	Bproc:1.17
	oct21:1.9
	last77:1.9;
locks; strict;
comment	@c @;


1.26
date	2015.02.20.14.36.23;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2012.03.28.19.34.51;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2010.06.24.13.25.11;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2005.10.17.20.17.10;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.17.18.10.23;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2003.02.18.21.49.46;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2001.04.18.18.14.31;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2001.03.14.18.55.57;	author bimal;	state Exp;
branches;
next	1.18;

1.18
date	2001.03.02.21.43.26;	author bimal;	state Exp;
branches;
next	1.17;

1.17
date	2000.08.17.15.59.28;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2000.08.15.18.55.22;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2000.08.15.18.45.09;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2000.08.10.14.33.13;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	99.12.27.15.21.13;	author bimal;	state Exp;
branches;
next	1.12;

1.12
date	99.12.27.15.20.22;	author bimal;	state Exp;
branches;
next	1.11;

1.11
date	99.11.15.21.29.06;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	99.11.10.23.09.09;	author yuchen;	state Exp;
branches;
next	1.9;

1.9
date	99.02.04.16.52.07;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	98.09.10.15.12.02;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	97.10.01.21.33.28;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	96.11.06.18.56.16;	author ramani;	state Exp;
branches;
next	1.5;

1.5
date	96.11.05.19.22.02;	author ramani;	state Exp;
branches;
next	1.4;

1.4
date	96.09.12.14.24.11;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.01.12.22.05.19;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.02.54;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.47.33;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.26
log
@lnblnkn used
@
text
@
C ++********************************************************************
C                                                                      *
C CCC.F                                                                *
C                             USED REG_SET      AUG 00 ARDEAN LEITH
C                             PULLED OPFILEC    FEB 03 ARDEAN LEITH
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  CCC(LUN1,FILNAM1,NSAM1,NROW1,NSLICE1,LUN2,FILNAM2,
C      NSAM2,NROW2,NSLICE2,LUNM,FILNAMM)
C  
C  PURPOSE: COMPUTES THE PEARSON CORRELATION COEFFICIENT AND 
C           EUCLIDEAN DISTANCE BETWEEN TWO IMAGES/VOLUMES BY 
C           DIRECT COMPUTATION.
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE CCC(LUN1,FILNAM1,NSAM1,NROW1,NSLICE1,
     &                 LUN2,FILNAM2,NSAM2,NROW2,NSLICE2,
     &                 LUNM,FILNAMM)

        INCLUDE 'CMBLOCK.INC'

        CHARACTER(LEN=*) :: FILNAM1,FILNAM2,FILNAMM 

        REAL             :: AIMG(NSAM1), BIMG(NSAM1), CIMG(NSAM1)

        DOUBLE PRECISION :: SUM,DAV1,DVAR1,DAV2,DVAR2,DCC

        DAV1  = 0.D0
        DVAR1 = 0.D0
        DAV2  = 0.D0
        DVAR2 = 0.D0
        DCC   = 0.D0
        N     = 0
        SUM   = 0.0

        DO  I=1,NROW1*NSLICE1

           CALL REDLIN(LUN1,AIMG,NSAM1,I)
           CALL REDLIN(LUN2,BIMG,NSAM1,I)
           CALL REDLIN(LUNM,CIMG,NSAM1,I)

           DO  K=1,NSAM1
              IF (CIMG(K) .GT. 0.5) THEN
                 DAV1  = DAV1  + AIMG(K)
                 DVAR1 = DVAR1 + AIMG(K) * DBLE(AIMG(K))
                 DAV2  = DAV2  + BIMG(K)
                 DVAR2 = DVAR2 + BIMG(K) * DBLE(BIMG(K))
                 DCC   = DCC   + AIMG(K) * DBLE(BIMG(K))
                 N     = N     + 1
                 SUM   = SUM + (AIMG(K) - BIMG(K))*
     &                     DBLE(AIMG(K) - BIMG(K))
              ENDIF
           ENDDO
        ENDDO
        DAV1  = DAV1 / FLOAT(N)
        DVAR1 = DVAR1/ FLOAT(N)-DAV1**2
        DAV2  = DAV2 / FLOAT(N)
        DVAR2 = DVAR2/ FLOAT(N)-DAV2**2
        DCC   = DCC  / FLOAT(N)-DAV1*DAV2
        DCC   = DCC  / SQRT(DVAR1*DVAR2)

        DVAR1 = DSQRT(DVAR1*N / FLOAT(N-1))
        DVAR2 = DSQRT(DVAR2*N / FLOAT(N-1))

        FDCC   = DCC
        FDAV1  = DAV1
        FDVAR1 = DVAR1
        FDAV2  = DAV2
        FDVAR2 = DVAR2
        FSUM   = SUM

        CALL REG_SET_NSEL(1,5,FDCC,FDAV1,FDVAR1,
     &                      FDAV2,FDVAR2,IRTFLG)
        CALL REG_SET_NSEL(6,1,FSUM,0.0, 0.0, 0.0, 0.0,IRTFLG)

        IF (VERBOSE) THEN
C          SKIP FILE INFO IF NOT-VERBOSE

           NLET = LNBLNKN(FILNAM1)
           WRITE(NOUT,501) FILNAM1(1:NLET)
501        FORMAT('  IMAGE NO. 1: ',A)

           WRITE(NOUT,502) DAV1,DVAR1
502        FORMAT('       AV = ',G12.5,'  S.D. = ',G12.5,/)

           NLET = LNBLNKN(FILNAM2)
           WRITE(NOUT,503) FILNAM2(1:NLET)
503        FORMAT('  IMAGE NO. 2: ',A)

           WRITE(NOUT,502) DAV2,DVAR2

           NLET = LNBLNKN(FILNAMM)
           WRITE(NOUT,504) FILNAMM(1:NLET)
504        FORMAT('  MASK USED:  ',A)
        ENDIF

        WRITE(NOUT,505) DCC
505     FORMAT('       CROSS-CORRELATION COEFFICIENT:',F10.5)

        WRITE(NOUT,508) SUM
508     FORMAT('       EUCLIDEAN DISTANCE:           ',G10.3/)

        RETURN
        END

@


1.25
log
@cosmetic
@
text
@d103 1
a103 1
           NLET = LNBLNK(FILNAM1)
d110 1
a110 1
           NLET = LNBLNK(FILNAM2)
d116 1
a116 1
           NLET = LNBLNK(FILNAMM)
@


1.24
log
@GPL_2010
@
text
@d30 2
a31 1
C  CCC(LUN1,FILNAM1,NSAM1,NROW1,NSLICE1,LUN2,FILNAM2,NSAM2,NROW2,NSLICE2)
d33 3
a35 1
C SUPPORT_ROUTINE
d46 1
a46 1
        CHARACTER(LEN=*)      ::  FILNAM1,FILNAM2,FILNAMM 
d48 1
a48 1
        DIMENSION        AIMG(NSAM1), BIMG(NSAM1), CIMG(NSAM1)
d50 1
a50 1
        DOUBLE PRECISION SUM,DAV1,DVAR1,DAV2,DVAR2,DCC
d61 1
d65 1
d68 8
a75 8
                 DAV1  = DAV1+AIMG(K)
                 DVAR1 = DVAR1+AIMG(K)*DBLE(AIMG(K))
                 DAV2  = DAV2+BIMG(K)
                 DVAR2 = DVAR2+BIMG(K)*DBLE(BIMG(K))
                 DCC   = DCC+AIMG(K)*DBLE(BIMG(K))
                 N     = N+1
                 SUM   = SUM+(AIMG(K)-BIMG(K))*
     &                   DBLE(AIMG(K)-BIMG(K))
d79 6
a84 6
        DAV1  = DAV1/FLOAT(N)
        DVAR1 = DVAR1/FLOAT(N)-DAV1**2
        DAV2  = DAV2/FLOAT(N)
        DVAR2 = DVAR2/FLOAT(N)-DAV2**2
        DCC   = DCC/FLOAT(N)-DAV1*DAV2
        DCC   = DCC/SQRT(DVAR1*DVAR2)
d86 2
a87 2
        DVAR1 = DSQRT(DVAR1*N/FLOAT(N-1))
        DVAR2 = DSQRT(DVAR2*N/FLOAT(N-1))
d105 1
a105 1
501        FORMAT(' IMAGE NO. 1: ',A)
d112 1
a112 1
503        FORMAT(' IMAGE NO. 2: ',A)
d122 1
a122 1
505     FORMAT('       CROSS-CORRELATION COEFFICIENT = ',F10.5)
d125 1
a125 1
508     FORMAT('       EUCLIDEAN DISTANCE =            ',G10.3/)
@


1.23
log
@GPL License fixed
@
text
@a8 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d10 5
a14 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d16 1
a16 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.22
log
@HRI GPL License used
@
text
@a8 2
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      **
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
d12 1
a12 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a31 6

C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
@


1.21
log
@opfilec
@
text
@d9 1
d11 24
@


1.20
log
@N_VERBOSE --> VERBOSE
@
text
@d5 3
a7 2
C                                  USED REG_SET AUG 00 ARDEAN LEITH
C                                                               *
a20 1
C        1         2         3         4         5         6         7  
d25 2
a26 1
     &                           LUN2,FILNAM2,NSAM2,NROW2,NSLICE2)
d30 2
a31 2
        CHARACTER *81    FILNAM1,FILNAM2,FILNAMM
C        COMMON /COMMUN/  FILNAM1,FILNAM2,FILNAMM
a35 13
        DATA LUNM/23/


        MAXIMM = 0
        CALL OPFIL(.TRUE.,FILNAMM,LUNM,'O',NSAMM,NROWM,NSLICEM,
     &                   MAXIMM,'MASK',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0)  GOTO 998

        IF (NSAM1.NE.NSAMM.OR.NROW1.NE.NROWM.OR.NSLICE1.NE.NSLICEM) THEN
           CALL ERRT(1,'CCC.F',NE)
           GOTO  997
        ENDIF

a70 6
C       IF (NSEL(1).NE. 0.) PARAM(NSEL(1)) = DCC
C       IF (NSEL(2).NE. 0.) PARAM(NSEL(2)) = DAV1
C       IF (NSEL(3).NE. 0.) PARAM(NSEL(3)) = DVAR1
C       IF (NSEL(4).NE. 0.) PARAM(NSEL(4)) = DAV2
C       IF (NSEL(5).NE. 0.) PARAM(NSEL(5)) = DVAR2
C       IF (NSEL(6).NE. 0.) PARAM(NSEL(6)) = SUM
a107 6



997     CLOSE(LUNM)
998     CLOSE(LUN2)
        CLOSE(LUN1)
@


1.19
log
@path
@
text
@d1 1
d100 1
a100 1
        IF (N_VERBOSE .EQ. 1) THEN
@


1.18
log
@used automatic arrays
@
text
@d26 1
a26 1
        INCLUDE '/net/bali/usr1/spider/src/CMBLOCK.INC'
@


1.17
log
@reg_set_nsel params changed
@
text
@d15 1
a15 1
C  CCC                                                                 *
d19 2
a20 2
C        1         2         3         4         5         6         7 *
C23456789012345678901234567890123456789012345678901234567890123456789012                                                                  *
d23 2
a24 1
        SUBROUTINE CCC
d26 1
a26 1
        INCLUDE 'CMBLOCK.INC'
a27 1
        COMMON           BUF(1)
d29 2
a30 2
        COMMON /COMMUN/  FILNAM1,FILNAM2,FILNAMM
        REAL, ALLOCATABLE, DIMENSION(:) :: AIMG, BIMG, CIMG
d34 1
a34 1
        DATA LUN1,LUN2,LUNM/21,22,23/
a35 9
        MAXIM1 = 0
        CALL OPFIL(.TRUE.,FILNAM1,LUN1,'O',NSAM1,NROW1,NSLICE1,
     &                   MAXIM1,'INPUT1',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        MAXIM2 = 0
        CALL OPFIL(.TRUE.,FILNAM2,LUN2,'O',NSAM2,NROW2,NSLICE2,
     &                   MAXIM2,'INPUT2',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 999
a36 5
        IF (NSAM1.NE.NSAM2.OR.NROW1.NE.NROW2.OR.NSLICE1.NE.NSLICE2) THEN
           CALL ERRT(1,'CCC.F',NE)
           GOTO 998
        ENDIF

a53 6
 
        ALLOCATE (AIMG(NSAM1), BIMG(NSAM1), CIMG(NSAM1),STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'CCC, AIMG,BIMG,CIMG',IER)
           RETURN
        ENDIF
a126 4
        DEALLOCATE (AIMG)
        DEALLOCATE (BIMG)
        DEALLOCATE (CIMG)

d130 1
a130 1
999     CLOSE(LUN1)
d134 1
@


1.16
log
@float does not work for double conversion
@
text
@d115 1
a115 1
        CALL REG_SET_NSEL(1,FDCC,FDAV1,FDVAR1,
d117 1
a117 1
        CALL REG_SET_NSEL(6,FSUM,0.0, 0.0, 0.0, 0.0,IRTFLG)
@


1.15
log
@bad register setting.
@
text
@d108 6
d115 3
a117 3
        CALL REG_SET_NSEL(1,FLOAT(DCC),FLOAT(DAV1),FLOAT(DVAR1),
     &                      FLOAT(DAV2),FLOAT(DVAR2),IRTFLG)
        CALL REG_SET_NSEL(6,FLOAT(SUM),0.0, 0.0, 0.0, 0.0,IRTFLG)
@


1.14
log
@used reg_set
@
text
@d47 1
a47 1
           CALL ERRT(101,'INCONSISTENT PICTURE DIMENSIONS',NE)
d57 1
a57 1
           CALL ERRT(101,'INCONSISTENT PICTURE DIMENSIONS',NE)
d71 1
a71 1
           CALL ERRT(46,'CC C, AIMG,BIMG,CIMG',IER)
d109 3
a111 1
        CALL REG_SET_NSEL(1,DCC,DAV1,DVAR1,DAV2,SUM,IRTFLG)
@


1.13
log
@*** empty log message ***
@
text
@d4 2
a5 1
C                                                                      *
d15 1
a15 2
C  CCC                                                        *
C  
a26 1

d69 1
a69 14
        ALLOCATE (AIMG(NSAM1), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'CC C, AIMG',IER)
           RETURN
        ENDIF

        ALLOCATE (BIMG(NSAM1), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'CC C, BIMG',IER)
           DEALLOCATE (AIMG)
           RETURN
        ENDIF

        ALLOCATE (CIMG(NSAM1), STAT=IRTFLG)
d71 1
a71 3
           CALL ERRT(46,'CC C, CIMG',IER)
           DEALLOCATE (AIMG)
           DEALLOCATE (BIMG)
a74 2


d98 1
a98 1
C
d101 7
a107 7
C
        IF (NSEL(1).NE. 0.) PARAM(NSEL(1)) = DCC
        IF (NSEL(2).NE. 0.) PARAM(NSEL(2)) = DAV1
        IF (NSEL(3).NE. 0.) PARAM(NSEL(3)) = DVAR1
        IF (NSEL(4).NE. 0.) PARAM(NSEL(4)) = DAV2
        IF (NSEL(5).NE. 0.) PARAM(NSEL(5)) = DVAR2
        IF (NSEL(6).NE. 0.) PARAM(NSEL(6)) = SUM
d109 1
@


1.12
log
@adapted for dynamical memory allocation
@
text
@d25 1
a25 1
        INCLUDE '/net/ithaca/usr1/spider/src/CMBLOCK.INC'
@


1.11
log
@mask input file name fixed
@
text
@d14 1
a14 1
C  CCC(MAXDIM)                                                         *
d16 5
a20 2
C  PARAMETERS:          MAXDIM     LENGTH OF COMMON BUFFER
C                                                                    *
d23 1
a23 1
	SUBROUTINE CCC(MAXDIM)
d25 1
a25 1
	INCLUDE 'CMBLOCK.INC'
d28 1
a28 1
	COMMON           BUF(1)
d31 1
d33 1
a33 1
	DOUBLE PRECISION SUM,DAV1,DVAR1,DAV2,DVAR2,DCC
d35 1
a35 1
	DATA LUN1,LUN2,LUNM/21,22,23/
d40 1
a40 1
	IF (IRTFLG .NE. 0) RETURN
d45 1
a45 1
	IF (IRTFLG .NE. 0) GOTO 999
d47 1
a47 1
	IF (NSAM1.NE.NSAM2.OR.NROW1.NE.NROW2.OR.NSLICE1.NE.NSLICE2) THEN
d50 1
a50 1
	ENDIF
d55 1
a55 1
	IF (IRTFLG .NE. 0)  GOTO 998
d57 1
a57 1
	IF (NSAM1.NE.NSAMM.OR.NROW1.NE.NROWM.OR.NSLICE1.NE.NSLICEM) THEN
d60 22
a81 1
	ENDIF
d83 21
a103 27
	NOFFS1 = 1
	NOFFS2 = NOFFS1+NSAM1
	NOFFSM = NOFFS2+NSAM1
	IF (NOFFSM+NSAM1 .GT. MAXDIM)  THEN
           CALL  ERRT(6,'CCC ',NE)
           GOTO 997
	ENDIF

	DAV1  = 0.D0
	DVAR1 = 0.D0
	DAV2  = 0.D0
	DVAR2 = 0.D0
	DCC   = 0.D0
	N     = 0
	SUM   = 0.0

	DO  I=1,NROW1*NSLICE1
           CALL REDLIN(LUN1,BUF(NOFFS1),NSAM1,I)
           CALL REDLIN(LUN2,BUF(NOFFS2),NSAM1,I)
           CALL REDLIN(LUNM,BUF(NOFFSM),NSAM1,I)
           DO  K=0,NSAM1-1
              IF (BUF(NOFFSM+K) .GT. 0.5) THEN
                 DAV1  = DAV1+BUF(NOFFS1+K)
                 DVAR1 = DVAR1+BUF(NOFFS1+K)*DBLE(BUF(NOFFS1+K))
                 DAV2  = DAV2+BUF(NOFFS2+K)
                 DVAR2 = DVAR2+BUF(NOFFS2+K)*DBLE(BUF(NOFFS2+K))
                 DCC   = DCC+BUF(NOFFS1+K)*DBLE(BUF(NOFFS2+K))
d105 2
a106 2
                 SUM   = SUM+(BUF(NOFFS1+K)-BUF(NOFFS2+K))*
     &                   DBLE(BUF(NOFFS1+K)-BUF(NOFFS2+K))
d109 7
a115 7
	ENDDO
	DAV1  = DAV1/FLOAT(N)
	DVAR1 = DVAR1/FLOAT(N)-DAV1**2
	DAV2  = DAV2/FLOAT(N)
	DVAR2 = DVAR2/FLOAT(N)-DAV2**2
	DCC   = DCC/FLOAT(N)-DAV1*DAV2
	DCC   = DCC/SQRT(DVAR1*DVAR2)
d117 2
a118 2
	DVAR1 = DSQRT(DVAR1*N/FLOAT(N-1))
	DVAR2 = DSQRT(DVAR2*N/FLOAT(N-1))
d120 6
a125 6
	IF (NSEL(1).NE. 0.) PARAM(NSEL(1)) = DCC
	IF (NSEL(2).NE. 0.) PARAM(NSEL(2)) = DAV1
	IF (NSEL(3).NE. 0.) PARAM(NSEL(3)) = DVAR1
	IF (NSEL(4).NE. 0.) PARAM(NSEL(4)) = DAV2
	IF (NSEL(5).NE. 0.) PARAM(NSEL(5)) = DVAR2
	IF (NSEL(6).NE. 0.) PARAM(NSEL(6)) = SUM
d127 1
d132 2
a133 2
	   WRITE(NOUT,501) FILNAM1(1:NLET)
501	   FORMAT(' IMAGE NO. 1: ',A)
d135 2
a136 2
	   WRITE(NOUT,502) DAV1,DVAR1
502	   FORMAT('       AV = ',G12.5,'  S.D. = ',G12.5,/)
d139 2
a140 2
	   WRITE(NOUT,503) FILNAM2(1:NLET)
503	   FORMAT(' IMAGE NO. 2: ',A)
d142 1
a142 1
	   WRITE(NOUT,502) DAV2,DVAR2
d145 2
a146 2
	   WRITE(NOUT,504) FILNAMM(1:NLET)
504	   FORMAT('  MASK USED:  ',A)
d149 10
a158 2
	WRITE(NOUT,505) DCC
505	FORMAT('       CROSS-CORRELATION COEFFICIENT = ',F10.5)
a159 2
	WRITE(NOUT,508) SUM
508	FORMAT('       EUCLIDEAN DISTANCE =            ',G10.3/)
d163 1
a163 1
999	CLOSE(LUN1)
d166 1
a166 1
	END
@


1.10
log
@a
@
text
@d50 1
a50 1
     &                   MAXIMM,'INPUT2',.FALSE.,IRTFLG)
@


1.9
log
@equation for standard deviation corrected
@
text
@d23 1
a23 1
CNO_SAVE
@


1.8
log
@added N_VERBOSE TEST, cosmetic & output format changed
@
text
@d97 4
a100 4

	DVAR1 = DSQRT(DVAR1)
	DVAR2 = DSQRT(DVAR2)

@


1.7
log
@*** empty log message ***
@
text
@d1 19
d21 1
d23 8
a30 5
	COMMON BUF(1)
        COMMON /COMMUN/ FILNAM1,FILNAM2,FILNAMM
        CHARACTER *81 FILNAM1,FILNAM2,FILNAMM
        CHARACTER     NULL
	DOUBLE PRECISION      SUM,DAV1,DVAR1,DAV2,DVAR2,DCC
d32 14
a45 15
CNO_SAVE
        NULL=CHAR(0)
C
	CALL FILERD(FILNAM1,NLET1,NULL,'INPUT1',IRTFLG)
	IF(IRTFLG .NE. 0) RETURN
	CALL OPENF(FILNAM1,LUN1,NSAM1,NROW1,'OLD',NF,NSLICE1)

	CALL FILERD(FILNAM2,NLET2,NULL,'INPUT2',IRTFLG)
	IF(IRTFLG .NE. 0) RETURN
	CALL OPENF(FILNAM2,LUN2,NSAM2,NROW2,'OLD',NF,NSLICE2)
	IF (NSAM2.NE.NSAM2 .OR. 
     &      NROW2.NE.NROW1 .OR. NSLICE1.NE.NSLICE2) THEN
		CALL ERRT(101,'INCONSISTENT PICTURE DIMENSIONS',NE)
		CLOSE(LUN1)
		RETURN
d48 8
a55 5
	CALL FILERD(FILNAMM,NLETM,NULL,'MASK',IRTFLG)
	IF (IRTFLG .NE. 0) THEN
		CLOSE(LUN1)
		CLOSE(LUN2)
		RETURN
d57 7
a63 5
	CALL OPENF(FILNAMM,LUNM,NSAMM,NROWM,'OLD',NF,NSLICEM)
	IF (NSAMM.NE.NSAM1 .OR. 
     &       NROWM.NE.NROW1 .OR. NSLICEM.NE.NSLICE1) THEN
		CALL ERRT(101,'INCONSISTENT PICTURE DIMENSIONS',NE)
		GOTO  999
d65 9
a73 18
C
	NTOT=NSAM1*NROW1*NSLICE1
	NOFFS1=1
	NOFFS2=NOFFS1+NSAM1
	NOFFSM=NOFFS2+NSAM1
	IF(NOFFSM+NSAM1.GT.MAXDIM)  THEN
		CALL  ERRT(6,'CCC ',NE)
		GOTO 999
	ENDIF
C
	DAV1=0.D0
	DVAR1=0.D0
	DAV2=0.D0
	DVAR2=0.D0
	DCC=0.D0
	N=0
	SUM=0.0
C
d75 15
a89 14
		CALL REDLIN(LUN1,BUF(NOFFS1),NSAM1,I)
		CALL REDLIN(LUN2,BUF(NOFFS2),NSAM1,I)
		CALL REDLIN(LUNM,BUF(NOFFSM),NSAM1,I)
	DO  K=0,NSAM1-1
	IF(BUF(NOFFSM+K).GT.0.5) THEN
		DAV1=DAV1+BUF(NOFFS1+K)
		DVAR1=DVAR1+BUF(NOFFS1+K)*DBLE(BUF(NOFFS1+K))
		DAV2=DAV2+BUF(NOFFS2+K)
		DVAR2=DVAR2+BUF(NOFFS2+K)*DBLE(BUF(NOFFS2+K))
		DCC=DCC+BUF(NOFFS1+K)*DBLE(BUF(NOFFS2+K))
		N=N+1
                SUM=SUM+(BUF(NOFFS1+K)-BUF(NOFFS2+K))*
     &              DBLE(BUF(NOFFS1+K)-BUF(NOFFS2+K))
	ENDIF
d91 37
a127 28
	ENDDO
	DAV1=DAV1/FLOAT(N)
	DVAR1=DVAR1/FLOAT(N)-DAV1**2
	DAV2=DAV2/FLOAT(N)
	DVAR2=DVAR2/FLOAT(N)-DAV2**2
	DCC=DCC/FLOAT(N)-DAV1*DAV2
	DCC=DCC/SQRT(DVAR1*DVAR2)
C
	DVAR1=DSQRT(DVAR1)
	DVAR2=DSQRT(DVAR2)
C
	IF (NSEL(1).NE.0.) PARAM(NSEL(1))=DCC
	IF (NSEL(2).NE.0.) PARAM(NSEL(2))=DAV1
	IF (NSEL(3).NE.0.) PARAM(NSEL(3))=DVAR1
	IF (NSEL(4).NE.0.) PARAM(NSEL(4))=DAV2
	IF (NSEL(5).NE.0.) PARAM(NSEL(5))=DVAR2
	IF (NSEL(6).NE.0.) PARAM(NSEL(6))=SUM
C
	WRITE(NOUT,501) (FILNAM1(K:K),K=1,NLET1)
501	FORMAT(' ** IMAGE NO. 1: ',80A1)
	WRITE(NOUT,502) DAV1,DVAR1
502	FORMAT('          AV = ',G12.5,'  S.D. = ',G12.5)
        WRITE(NOUT,*) ' '

	WRITE(NOUT,503) (FILNAM2(K:K),K=1,NLET2)
503	FORMAT(' ** IMAGE NO. 2: ',80A1)
	WRITE(NOUT,502) DAV2,DVAR2
        WRITE(NOUT,*) ' '
a128 2
	WRITE(NOUT,504) (FILNAMM(K:K),K=1,NLETM)
504	FORMAT(' **  MASK USED:   ',80A1)
d130 2
a131 1
505	FORMAT('0**       CROSS-CORRELATION COEFFICIENT = ',F10.5//)
d133 4
a136 2
508	FORMAT('0**       EUCLIDEAN DISTANCE = ',G10.3//)
C
d138 2
a139 2
	CLOSE(LUN2)
	CLOSE(LUNM)
@


1.6
log
@saved the distance in register
@
text
@d56 1
a56 1
	DO 100 I=1,NROW1*NSLICE1
d60 1
a60 1
	DO 400 K=0,NSAM1-1
d71 2
a72 2
400	CONTINUE
100	CONTINUE
@


1.5
log
@added calculation of euclidean distance
@
text
@d88 1
d106 1
a106 1
508	FORMAT('0**       EUCLIDEAN DISTANCE = ',F10.5//)
@


1.4
log
@lunits corrected
@
text
@d7 1
a7 1
	DOUBLE PRECISION        DAV1,DVAR1,DAV2,DVAR2,DCC
d54 1
d68 2
d88 1
d105 2
@


1.3
log
@nosave
@
text
@d1 1
a1 4

	SUBROUTINE CCC(LUN1,LUN2,LUNM,MAXDIM)

#ifdef SP_UNIX
a2 3
#else
	INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
a4 1

d8 1
@


1.2
log
@cpp_lines_added
@
text
@d15 1
a15 1

@


1.1
log
@Initial revision
@
text
@d4 3
d8 1
@
