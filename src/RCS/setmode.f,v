head	1.83;
access;
symbols
	healthdept_2018:1.83
	pre_getangas:1.67
	GPL2010:1.67
	pre_GPL2010:1.66
	pre_var_equation:1.66
	pre_fftwrings:1.66
	pre_opfiles:1.63
	src:1.63
	best-code:1.59
	named-reg:1.59
	x-named-regs:1.58
	x:1.58
	v13-00:1.58
	pre_GPL:1.56
	prec_CA:1.51
	noindx:1.46
	Bproc:1.34
	oct21:1.30
	last77:1.26;
locks; strict;
comment	@c @;


1.83
date	2018.10.03.14.34.16;	author leith;	state Exp;
branches;
next	1.82;

1.82
date	2016.03.30.16.01.09;	author leith;	state Exp;
branches;
next	1.81;

1.81
date	2016.03.29.18.28.43;	author leith;	state Exp;
branches;
next	1.80;

1.80
date	2015.12.18.14.40.21;	author leith;	state Exp;
branches;
next	1.79;

1.79
date	2015.12.17.17.27.02;	author leith;	state Exp;
branches;
next	1.78;

1.78
date	2013.08.30.16.05.05;	author leith;	state Exp;
branches;
next	1.77;

1.77
date	2013.05.01.15.13.43;	author leith;	state Exp;
branches;
next	1.76;

1.76
date	2013.05.01.14.43.38;	author leith;	state Exp;
branches;
next	1.75;

1.75
date	2012.04.10.16.05.21;	author leith;	state Exp;
branches;
next	1.74;

1.74
date	2012.04.02.16.18.38;	author leith;	state Exp;
branches;
next	1.73;

1.73
date	2012.04.02.16.08.56;	author leith;	state Exp;
branches;
next	1.72;

1.72
date	2011.09.28.16.44.41;	author leith;	state Exp;
branches;
next	1.71;

1.71
date	2011.09.28.15.59.08;	author leith;	state Exp;
branches;
next	1.70;

1.70
date	2011.07.25.16.02.06;	author leith;	state Exp;
branches;
next	1.69;

1.69
date	2011.07.25.15.09.10;	author leith;	state Exp;
branches;
next	1.68;

1.68
date	2011.06.16.16.38.34;	author leith;	state Exp;
branches;
next	1.67;

1.67
date	2010.06.24.13.26.53;	author leith;	state Exp;
branches;
next	1.66;

1.66
date	2007.12.20.19.36.54;	author leith;	state Exp;
branches;
next	1.65;

1.65
date	2007.12.12.15.59.10;	author leith;	state Exp;
branches;
next	1.64;

1.64
date	2007.09.19.18.36.19;	author leith;	state Exp;
branches;
next	1.63;

1.63
date	2006.11.01.19.21.31;	author leith;	state Exp;
branches;
next	1.62;

1.62
date	2006.07.31.14.36.28;	author leith;	state Exp;
branches;
next	1.61;

1.61
date	2006.06.27.15.17.48;	author leith;	state Exp;
branches;
next	1.60;

1.60
date	2006.06.27.14.39.48;	author leith;	state Exp;
branches;
next	1.59;

1.59
date	2005.12.12.15.30.22;	author leith;	state Exp;
branches;
next	1.58;

1.58
date	2005.10.17.20.47.13;	author leith;	state Exp;
branches;
next	1.57;

1.57
date	2005.10.17.18.37.35;	author leith;	state Exp;
branches;
next	1.56;

1.56
date	2004.04.05.14.48.01;	author leith;	state Exp;
branches;
next	1.55;

1.55
date	2004.02.11.17.45.18;	author leith;	state Exp;
branches;
next	1.54;

1.54
date	2003.12.03.16.31.10;	author leith;	state Exp;
branches;
next	1.53;

1.53
date	2003.11.24.17.24.48;	author leith;	state Exp;
branches;
next	1.52;

1.52
date	2003.10.28.16.54.09;	author leith;	state Exp;
branches;
next	1.51;

1.51
date	2003.10.07.15.55.35;	author leith;	state Exp;
branches;
next	1.50;

1.50
date	2003.08.06.19.46.25;	author leith;	state Exp;
branches;
next	1.49;

1.49
date	2003.07.29.14.16.25;	author leith;	state Exp;
branches;
next	1.48;

1.48
date	2003.07.22.20.52.48;	author leith;	state Exp;
branches;
next	1.47;

1.47
date	2003.07.11.16.14.35;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2002.07.08.13.13.47;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2002.07.02.16.41.47;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2002.03.11.14.08.39;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2001.08.06.13.05.33;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2001.07.31.18.33.39;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2001.07.30.16.31.47;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	2001.04.18.18.15.15;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2001.01.04.18.51.26;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2000.11.06.21.27.39;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2000.11.06.19.01.12;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2000.10.10.19.33.00;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2000.09.29.17.50.15;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2000.08.14.20.08.07;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2000.08.14.15.12.23;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2000.08.08.18.18.06;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2000.03.28.16.35.03;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	99.07.07.20.11.04;	author pawel;	state Exp;
branches;
next	1.29;

1.29
date	99.06.07.20.45.02;	author pawel;	state Exp;
branches;
next	1.28;

1.28
date	99.04.06.22.22.11;	author pawel;	state Exp;
branches;
next	1.27;

1.27
date	99.04.06.22.19.17;	author pawel;	state Exp;
branches;
next	1.26;

1.26
date	99.03.29.18.38.06;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	99.03.15.15.27.43;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	99.03.12.20.50.20;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	98.09.11.17.48.54;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	98.04.17.18.39.00;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	98.04.07.14.19.35;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	98.01.27.17.16.41;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	97.10.01.18.12.51;	author pawel;	state Exp;
branches;
next	1.18;

1.18
date	97.04.25.13.59.15;	author pawel;	state Exp;
branches;
next	1.17;

1.17
date	97.03.25.18.45.04;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	97.03.17.14.22.16;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	96.11.22.19.09.14;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	96.11.22.17.54.29;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	95.09.13.19.33.21;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	95.08.11.17.40.50;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	95.05.23.20.05.41;	author mladjadj;	state Exp;
branches;
next	1.10;

1.10
date	95.05.04.18.05.42;	author mladjadj;	state Exp;
branches;
next	1.9;

1.9
date	95.05.03.13.29.43;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	95.05.01.20.03.17;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	95.04.28.15.56.37;	author mladjadj;	state Exp;
branches;
next	1.6;

1.6
date	95.04.20.21.00.25;	author mladjadj;	state Exp;
branches;
next	1.5;

1.5
date	95.04.19.21.24.50;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	95.04.19.20.24.27;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	95.03.21.20.56.09;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.10.55;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.43;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.83
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C SETMODE                  REMOVED FROM DRIVER.F   MAR 93 ARDEAN LEITH
C                          F90 CHANGES           APRIL 98 ARDEAN LEITH
C                          NO RESULTS ADDED       SEPT 98 ARDEAN LEITH
C                          ADDED SET REGS          AUG 00 ARDEAN LEITH
C                          SET MEM REMOVED         JAN 01 ARDEAN LEITH
C                          REG PIPE ADDED          JUL 01 ARDEAN LEITH
C                          DELAY FREE              JUN 02 ARDEAN LEITH
C                          OMP_GET_NUM_PROCS       JUL 03 ARDEAN LEITH
C                          RDPRI1S(ISEED           OCT 03 ARDEAN LEITH
C                          NOUT REDIRECT           OCT 03 ARDEAN LEITH
C                          SELECT REWRITE          NOV 03 ARDEAN LEITH
C                          TO_TERM                 DEC 03 ARDEAN LEITH
C                          SAVED ISEED             FEB 04 ARDEAN LEITH
C                          SET REGS REMOVED        NOV 05 ARDEAN LEITH
C                          LEGACY () INPUT         JUN 06 ARDEAN LEITH
C                          CVARS                   OCT 06 ARDEAN LEITH
C                          IF TERMOFF, NOUT   = 3  SEP 07 ARDEAN LEITH
C                          SET FFTW THREADS        DEC 07 ARDEAN LEITH
C                          SET USE_FBP_INTERP      JUN 11 ARDEAN LEITH
C                          SET USE_FBS_INTERP      JUL 11 ARDEAN LEITH
C                          NO USE_FBP_INTERP       SEP 11 ARDEAN LEITH
C                          USE_FBP_INTERP          APR 12 ARDEAN LEITH
C                          VERBOSE                 APR 12 ARDEAN LEITH
C                          UNUSED DELAY REMOVED    APR 13 ARDEAN LEITH
C                          OUTPUT FORMATTING       AUG 13 ARDEAN LEITH
C                          IN_PARALLEL             DEC 15 ARDEAN LEITH
C                          SET MP FAILS ON GYAN    MAR 16 ARDEAN LEITH
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2016  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   SETMODE(RES_TO_TERM)
C
C   PURPOSE:   CONTAINS CODE FOR SETTING VARIOUS OPTIONAL MODES 
C
C   NOTE:   ON AN OLDER SYSTEM (valcour)
C      OMP_GET_MAX_THREADS() = 1  in a serial   region (compiled with OMP)
C      OMP_GET_MAX_THREADS() = 1  in a parallel region (compiled with OMP)
C      OMP_GET_NUM_PROCS()   = 8
C           ON AN 2016 INTEL SYSTEM (gyan)
C      OMP_GET_MAX_THREADS() = 20  in a serial   region (compiled with OMP)
C      OMP_GET_MAX_THREADS() = 20  in a parallel region (compiled with OMP)
C      OMP_GET_NUM_PROCS()   = 40
C      
C      I FOUND THIS VIA GOOGLE BUT ANOTHER SITE CONTRADICTS IT??
C      Function omp_get_max_threads 
C      should be called *before* you enter a parallel region to 
C      determine the number of threads available and omp_get_num_threads 
C      should be called *inside* a parallel region to determine the 
C      number of threads you have. When you call omp_get_max_threads 
C      inside a parallel region or omp_get_num_threads outside a 
C      parallel region, the results are undefined. 
C      THUS I HAVE ADDED A TRAP TO LIMIT 
C
C23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
C--*********************************************************************

        SUBROUTINE SETMODE(RES_TO_TERM)

        IMPLICIT NONE

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'
 
        LOGICAL               :: RES_TO_TERM

C       RANDOM NUMBER GENERATOR SEED
        INTEGER, ALLOCATABLE  :: ISEEDVAL(:)

        INTEGER               :: OMP_GET_NUM_PROCS 
        INTEGER               :: OMP_GET_NUM_THREADS 
        INTEGER               :: OMP_GET_MAX_THREADS 
        INTEGER               :: NP,NMAXTH

C       NUMBER OF OPERATIONS IN MODE MENU
        INTEGER, PARAMETER    :: IMOFNC = 29
        CHARACTER(LEN=12)     :: MOMENU(IMOFNC)
        CHARACTER(LEN=12)     :: MODE

        CHARACTER(LEN=MAXNAM) :: PIPENAME,FILOPENED
        CHARACTER(LEN=1)      :: NULL = CHAR(0)
        LOGICAL               :: ISOPEN
        INTEGER               :: MPINUSE   = 0 
        INTEGER               :: NUM_OMP_THREADS,NUM_OMP_PROCS 
        LOGICAL               :: RESULTS   = .TRUE. 
        LOGICAL               :: REGPIPE   = .FALSE. 

        INTEGER               :: ISEED,NLET
        INTEGER               :: IRTFLG,IREGS,NCHAR,ICVARS,NOT_USED
        INTEGER               :: IDUM,NUMBITS,I,IER

        SAVE    FILOPENED,ISEED

        DATA MOMENU/'ME          ','STA        ',
     &              'TR ON       ','TR OFF     ',
     &              'OP ON       ','OP OFF     ',
     &              'VB ON       ','VB OFF     ',
     &              'INLN BUFF   ','SET MP     ',
     &              'SET MEM     ','SET SEED   ',
     &              'NO RESULTS  ','SET REGS   ',
     &              'PIPE        ','SET VARS   ',
     &              'RESULTS ON  ','RESULTS OFF',
     &              'TERM ON     ','TERM OFF   ',
     &              '() ON       ','() OFF     ',
     &              'FBS ON      ','FBS OFF    ',
     &              'LONGCOL ON  ','LONGCOL OFF',
     &              'PARALLEL    ','NO PARALLEL',
     &              'SET THREADS '/

C       MODE SWITCH OPERATION
C       READ IN THE MODE.  IF NOTHING TYPED IN, GET NEXT OPERATION
9400    CALL RDPRMC(MODE,NLET,.TRUE.,'MODE',NULL,IRTFLG)
        IF (MODE(1:1)  ==  ' ') RETURN

        SELECT CASE(MODE)

      CASE("ME")
C       MENU ------------------------------------------------------ ME
        WRITE(NOUT,9610)
9610    FORMAT(/
     &  '  ME          ',T19, ' MODE MENU'/
     &  '  STA         ',T19, ' STATUS OF MODES '/
     &  '  TR ON       ',T19, ' TRACE ON '/
     &  '  TR OFF      ',T19, ' TRACE OFF '/
     &  '  OP ON       ',T19, ' SHOW OPERATION '/
     &  '  OP OFF      ',T19, ' SHOW OPERATION OFF '/
     &  '  VB ON       ',T19, ' VERBOSE ON '/
     &  '  VB OFF      ',T19, ' VERBOSE OFF '/
     &  '  SET SEED    ',T19, ' SET RANDOM NUMBER SEED '/
     &  '  SET REGS    ',T19, ' SET NUMBER OF REGISTER VARIABLES '/
     &  '  SET VARS    ',T19, ' SET NUMBER OF SYMBOLIC VARIABLES '/
     &  '  RESULTS OFF ',T19, ' NO RESULTS FILE '/
     &  '  RESULTS ON  ',T19, ' USE RESULTS FILE '/
     &  '  PIPE        ',T19, ' OPEN REGISTER OUTPUT PIPE'/
     &  '  TERM ON     ',T19, ' OUTPUT TO TERMINAL, NOT RESULTS '/
     &  '  TERM OFF    ',T19, ' OUTPUT TO RESULTS, NOT TERMINAL '/
     &  '  () ON       ',T19, ' () NEEDED FOR SIMPLE LIST IN LOOP '/
     &  '  () OFF      ',T19, ' () NOT NEEDED FOR SIMPLE LIST IN LOOP '/
     &  '  FBS ON      ',T19, ' FBS INTERPOLATION USED '/
     &  '  FBS OFF     ',T19, ' FBS INTERPOLATION NOT USED '/
     &  '  LONGCOL ON  ',T19, ' LONG  ALIGNMENT DOC FILE COLS '/
     &  '  LONGCOL OFF ',T19, ' SHORT ALIGNMENT DOC FILE COLS '/
     &  '  SET THREADS ',T19, ' SET NUMBER OF FFTW3 THREADS'/
     &  '  PARALLEL ON ',T19, ' RUNNING SPIDERS IN PARALLEL '/
     &  '  PARALLEL OFF',T19, ' NOT RUNNING SPIDERS IN PARALLEL ')

#ifdef SP_MP
        WRITE(NOUT,9611)
9611    FORMAT(
     &  '  SET MP      ',T19, ' SET MAX. NO. OF PROCESSORS USED ')
#endif

        WRITE(NOUT,*) ' '


      CASE("STA")
C       DETERMINE STATUS ------------------------------------------ STA
        IF (NTRACE == 1)      WRITE(NOUT,9630) MOMENU(3)(:10)
        IF (NTRACE == 0)      WRITE(NOUT,9630) MOMENU(4)(:10)
        IF (NTRACE < 0)       WRITE(NOUT,9630) MOMENU(6)(:10)
        IF (NTRACE == 0)      WRITE(NOUT,9630) MOMENU(5)(:10)
        IF (VERBOSE)          WRITE(NOUT,9630) MOMENU(7)(:10)
        IF (.NOT. VERBOSE)    WRITE(NOUT,9630) MOMENU(8)(:10)
        IF (LEGACYPAR)        WRITE(NOUT,9630) MOMENU(21)(:10)
        IF (.NOT. LEGACYPAR)  WRITE(NOUT,9630) MOMENU(22)(:10)
        IF (RESULTS)          WRITE(NOUT,*)' HAS RESULTS FILE'
        IF (.NOT. RESULTS)    WRITE(NOUT,*)' NO  RESULTS FILE'
                              WRITE(NOUT,*)' RANDOM NUMBER SEED: ',ISEED
        IF (REGPIPE)          WRITE(NOUT,*)' REGISTER PIPE OPEN'
        IF (RES_TO_TERM)      WRITE(NOUT,*)' RESULTS OUTPUT TO TERMINAL'
        IF (USE_FBS_INTERP)   WRITE(NOUT,*)' FBS INTERPOLATION USED'
        IF (.NOT. USE_FBS_INTERP)  
     &                        WRITE(NOUT,*)' FBS INTERPOLATION NOT USED'
        IF (USE_LONGCOL)      WRITE(NOUT,*)' LONG  ALIGN DOC FILE COLS'
        IF (.NOT. USE_LONGCOL)WRITE(NOUT,*)' SHORT ALIGN DOC FILE COLS'
        IF (IN_PARALLEL)      WRITE(NOUT,*)
     &                                    ' RUNNING SPIDERS IN PARALLEL'
        IF (.NOT. IN_PARALLEL)WRITE(NOUT,*)
     &                                ' NOT RUNNING SPIDERS IN PARALLEL'

        CALL REG_GET_NUMS(IREGS,NCHAR)
                       WRITE(NOUT,*)' NUMBER OF REGISTERS:      ',IREGS
                       WRITE(NOUT,*)' NUMBER OF REGISTER CHARS: ',NCHAR

        CALL SYMPAR_GET_NUMS(ICVARS,NCHAR)
                       WRITE(NOUT,*)' NUMBER OF VARIABLES:      ',ICVARS
                       WRITE(NOUT,*)' NUMBER OF VARIABLE CHARS: ',NCHAR
9630    FORMAT(2X,A)

#ifdef SP_MP
        WRITE(NOUT,*) ' NUMBER OF OMP PROCESSORS USED:',MPINUSE
        WRITE(NOUT,*) ' NUMBER OF FFTW THREADS:       ',NUMFFTWTH

        NP = OMP_GET_MAX_THREADS()
        WRITE(NOUT,*) ' MAX NUMBER OF OMP THREADS:    ',NP
        NP = OMP_GET_NUM_PROCS()
        WRITE(NOUT,*) ' NUMBER OF OMP PROCESSORS:     ',NP

!c$omp   parallel 
!c$omp   master
!        NP = OMP_GET_MAX_THREADS()
!c$omp   end master
!c$omp   end parallel
!         WRITE(NOUT,*) ' MAX NUMBER OF OMP THREADS: ',NP
!c$omp   parallel private(np)
!        NP = OMP_GET_MAX_THREADS()
!c$omp   single
!c$omp   end single
!c$omp   end parallel
!        WRITE(NOUT,*) ' MAX NUMBER OF OMP THREADS: ',NP
#endif

        GOTO 9400


      CASE("TR ON")
C       TRACE ON --------------------------------------------- TRACE ON
        NTRACE = 1

      CASE("TR OFF")
C       TRACE OFF ------------------------------------------- TRACE OFF
        NTRACE = 0

      CASE("OP ON")
C       SET OP ON ----------------------------------------------- OP ON
        NTRACE = -1

      CASE("VB ON","VERBOSE","VERBOSE ON")
C       SET VERBOSE FILE DATA ------------------------------ VERBOSE ON
        VERBOSE = .TRUE.

      CASE("VB OFF","NON VERBOSE","NOT VERBOSE")
C       SET NON-VERBOSE FILE DATA ------------------------- VERBOSE OFF
        VERBOSE = .FALSE.

      CASE("SET REGS")
C       SET NUMBER OF REGISTER VARIABLES  -------------------- SET REGS
        CALL REG_REINIT(IRTFLG)

      CASE("SET VARS")
C       SET NUMBER OF REGISTER VARIABLES  -------------------- SET VARS
        CALL SYMPAR_REINIT(IRTFLG)

      CASE("PIPE")
C       SEND REGISTER SETTINGS DOWN PIPE ------------------------ PIPE
C       ~9 ALLOWS EXTENSION
        CALL FILERD(PIPENAME,NLET,CHAR(0),'PIPE~9',IRTFLG)  
        CALL REG_OPENPIPE(PIPENAME(1:NLET),IRTFLG)


      CASE("SET MP")
C       SET NUMBER OF PROCESSORS WANTED ------------------------ SET MP
        CALL RDPRI1S(MPINUSE,NOT_USED,
     &             'NUMBER OF PROCESSORS WANTED (OR 0 FOR ALL)',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

#ifdef SP_MP
        IF (MPINUSE <= 0) THEN
C          USE ALL AVAILABLE PROCESSORS
C          GET NUMBER OF PROCESSORS WITH SYSTEM CALL
           MPINUSE = OMP_GET_NUM_PROCS()

C          HACK FOR INCONSISTENT OMP_GET_NUM_PROCS VALUES ON GYAN 2016
           NMAXTH = OMP_GET_MAX_THREADS()
           IF (MPINUSE >  NMAXTH .AND. NMAXTH > 1) MPINUSE = NMAXTH
        ENDIF

C       SET NUMBER OF PROCESSORS 
        CALL SETTHREADS(MPINUSE)
        WRITE(NOUT,*) ' OMP PROCESSORS IN USE: ',MPINUSE 

#else
        WRITE(NOUT,*) ' *** NOT COMPILED FOR MULTIPLE PROCESSORS' 
#endif


      CASE("SET THREADS")
C       SET NUMBER OF FFTW THREADS ------------------------ SET THREADS
        CALL RDPRI1S(NUMFFTWTH,NOT_USED,
     &           'NUMBER OF FFTW THREADS WANTED (OR 0 FOR ALL)',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

#ifdef SP_MP
        IF (NUMFFTWTH <= 0) THEN
C          GET NUMBER OF PROCESSORS WITH SYSTEM CALL
           NUMFFTWTH = OMP_GET_NUM_PROCS()
           WRITE(NOUT,*) '  FFTW3 THREADS REQUESTED: ',NUMFFTWTH 
        ENDIF
#else
        WRITE(NOUT,*) ' *** NOT COMPILED FOR MULTIPLE PROCESSORS' 
        WRITE(NOUT,*) ' FFTW3 THREADS ALLOWED: ',NUMFFTWTH 
#endif




      CASE("SET MEM")
C       SET ALLOCABLE MEMORY ---------------------------------- SET MEM
        CALL RDPRIS(IDUM,IDUM,NOT_USED,
     &             'SET MEM NO LONGER USED IN SPIDER ',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

      CASE("SET SEED")
C       SET RANDOM NUMBER SEED ------------------------------- SET SEED
        CALL RDPRI1S(ISEED,NOT_USED, 'NEW SEED',IRTFLG)
        CALL RANDOM_SEED(SIZE=NUMBITS)
        ALLOCATE(ISEEDVAL(NUMBITS))

        DO  I=1,NUMBITS 
           ISEEDVAL(I)= I * ISEED
        ENDDO

        CALL RANDOM_SEED(PUT=ISEEDVAL)
        DEALLOCATE(ISEEDVAL)

      CASE("RESULTS OFF", "NO RESULTS")
C       DESTROY RESULTS FILE ------------------------------- NO RESULTS
C       DESTROY RESULTS FILE ------------------------------- RESULTS OFF
        RESULTS = .FALSE.
        INQUIRE(UNIT=NDAT,OPENED=ISOPEN,NAME=FILOPENED)
        WRITE(NDAT,*) '  RESULTS FILE TERMINATED AT USERS REQUEST' 
        WRITE(NDAT,*) '  ' 
        CLOSE(NDAT)
        OPEN(NDAT,FILE='/dev/null',IOSTAT=IER)
        IF (IER .NE. 0) 
     &        STOP '*** SPIDER UNABLE TO OPEN /dev/null FILE ***'
        WRITE(NOUT,*) ' RESULTS FILE TERMINATED AT USERS REQUEST' 
        WRITE(NOUT,*) ' '


      CASE("RESULTS ON", "WANT RESULTS","RESULTS")
C       RESTART RESULTS FILE ------------------------------- RESULTS ON
        CLOSE(NDAT)
        OPEN(NDAT,FILE=FILOPENED,STATUS='OLD',POSITION='APPEND',
     &          IOSTAT=IER)
        IF (IER  ==  0) THEN
           WRITE(NOUT,*) ' RESULTS FILE REOPENED: ',FILOPENED 
        ENDIF

      CASE("TERM ON")
C       TERM ON ---------------------------------------------- TERM ON
C       FORCE OUTPUT TO TERMINAL NOT RESULTS FILE
        RES_TO_TERM = .TRUE.
        NDAT   = 6
        NOUT   = NDAT
        WRITE(NOUT,*) ' DIVERT ALL OUTPUT TO TERMINAL'

      CASE("TERM OFF")
C       TERM OFF   ------------------------------------------ TERM OFF
C       NORMAL OUTPUT TO RESULTS FILE NOT TERMINAL
        RES_TO_TERM = .FALSE.
        NDAT   = 3
        NOUT   = 3
        WRITE(NOUT,*) ' OUTPUT TO RESULTS FILE (NOT TERMINAL)' 
        WRITE(NOUT,*) ' '

      CASE("() ON")
C       () ON ------------------------------------------------- () ON
        LEGACYPAR = .TRUE.
        WRITE(NOUT,*) ' () NEEDED AROUND SIMPLE LIST IN INPUT LOOP'
        WRITE(NOUT,*) ' '

      CASE("() OFF")
C       () OFF   ---------------------------------------------- () OFF
        LEGACYPAR = .FALSE.
        WRITE(NOUT,*) ' () NOT NEEDED AROUND SIMPLE LIST IN INPUT LOOP'
        WRITE(NOUT,*) ' '

      CASE("FBS ON","USE FBS","FBS")
C       FBS ON ------------------------------------------------ FBS ON
        USE_FBS_INTERP = .TRUE.
        WRITE(NOUT,*) ' USING FBS INTERPOLATION'
        WRITE(NOUT,*) ' '

      CASE("FBS OFF","NO FBS")
C       FBS OFF-- --------------------------------------------- FBS ON
        USE_FBS_INTERP = .FALSE.
        WRITE(NOUT,*) ' NOT USING FBS INTERPOLATION'
        WRITE(NOUT,*) ' '

      CASE("LONGCOL ON","LONGCOL","LONG DOC COL")
C       LONGCOL ON ----------------------------------------- LONGCOL ON
        USE_LONGCOL = .TRUE.
        WRITE(NOUT,*) ' LONG ALIGNMENT DOC FILE COLUMNS'
        WRITE(NOUT,*) ' '

      CASE("LONGCOL OFF","SHORT DOC COL")
C       LONGCOL OFF --------------------------------------- LONGCOL OFF
        USE_LONGCOL = .FALSE.
        WRITE(NOUT,*) ' SHORT ALIGNMENT DOC FILE COLUMNS'
        WRITE(NOUT,*) ' '

      CASE("IN_PARALLEL OFF","PARALLEL OFF","NO PARALLEL")
C       IN_PARALLEL OFF --------------------------------------- IN_PARALLEL OFF
        IN_PARALLEL = .FALSE.
        WRITE(NOUT,*) ' NOT RUNNING SPIDERS IN PARALLEL'
        WRITE(NOUT,*) ' '

      CASE("IN_PARALLEL ON","PARALLEL ON","PARALLEL" )
C       IN_PARALLEL ON ---------------------------------------- IN_PARALLEL ON
        IN_PARALLEL = .TRUE.
        WRITE(NOUT,*) ' RUNNING SPIDERS IN PARALLEL'
        WRITE(NOUT,*) ' '


      CASE DEFAULT
        WRITE(NOUT,*) '  *** UNKNOWN MODE'

      END SELECT

      END

@


1.82
log
@HACK FOR INCONSISTENT OMP_GET_NUM_PROCS VALUES ON GYAN (intel)
@
text
@d37 1
a37 1
C=* Email: spider@@wadsworth.org                                        *
@


1.81
log
@OMP PROCESSORS IN USE echo always after setting
@
text
@d30 1
a30 1
C                          SET MP                  MAR 16 ARDEAN LEITH
d57 19
d90 1
d93 2
a94 1

d203 2
a204 2
                       WRITE(NOUT,*)' NUMBER OF REGISTERS: ',     IREGS
                       WRITE(NOUT,*)' NUMBER OF REGISTER CHAR.: ',NCHAR
d207 3
a209 2
                       WRITE(NOUT,*)' NUMBER OF VARIABLES: ',    ICVARS
                       WRITE(NOUT,*)' NUMBER OF VARIABLE CHAR.: ',NCHAR
d212 20
a231 2
        WRITE(NOUT,*) ' NUMBER OF PROCESSORS USED:',MPINUSE
        WRITE(NOUT,*) ' NUMBER OF FFTW THREADS: ',NUMFFTWTH
a233 1
9630    FORMAT(2X,A)
a278 5
!        NUM_OMP_PROCS   = OMP_GET_NUM_PROCS()
!        NUM_OMP_THREADS = OMP_GET_NUM_THREADS()
!        WRITE(NOUT,*) ' NUMBER OF OMP PROCS & THREADS:',
!     &                  NUM_OMP_PROCS,NUM_OMP_THREADS

d280 1
d283 4
d289 1
a289 1
C       SET NUMBER OF PROCESSORS WITH SYSTEM CALL
@


1.80
log
@added in_parallel to replace say_stop
@
text
@d30 1
d35 1
a35 1
C=* Copyright 1985-2015  Health Research Inc.,                         *
d72 1
d84 1
d141 1
a141 1
     &  '  LONGCOL ON  ',T19, ' LONG ALIGNMENT DOC FILE COLS '/
d143 1
a149 1
     &  '  SET THREADS ',T19, ' SET NUMBER OF FFTW3 THREADS'/
d240 5
a247 1
           WRITE(NOUT,*) ' OMP PROCESSORS IN USE: ',MPINUSE 
d251 3
a253 1
        CALL  SETTHREADS(MPINUSE)
@


1.79
log
@saystop,  ==, implicit
@
text
@d29 1
a29 1
C                          SAYSTOP                 DEC 15 ARDEAN LEITH
d52 1
a52 1
C   SETMODE(RES_TO_TERM,SAYSTOP)
d59 1
a59 1
        SUBROUTINE SETMODE(RES_TO_TERM,SAYSTOP)
a66 1
        LOGICAL               :: SAYSTOP 
d104 1
a104 1
     &              'SAYSTOP ON  ','SAYSTOP OFF',
d140 2
a141 2
     &  '  SAYSTOP ON  ',T19, ' SAYS STOP WHEN SPIDER ENDS '/
     &  '  SAYSTOP OFF ',T19, ' DOES NOT SAY STOP WHEN SPIDER ENDS ')
d173 4
a176 2
        IF (SAYSTOP)          WRITE(NOUT,*)' SAYS STOP AT END'
        IF (.NOT. SAYSTOP)    WRITE(NOUT,*)' DOES NOT SAY STOP AT END'
d366 4
a369 4
      CASE("SAYSTOP OFF")
C       SAYSTOP OFF --------------------------------------- SAYSTOP OFF
        SAYSTOP = .FALSE.
        WRITE(NOUT,*) ' DO NOT ECHO STOP WHEN SPIDER ENDS'
d372 4
a375 4
      CASE("SAYSTOP ON")
C       SAYSTOP ON ---------------------------------------- SAYSTOP ON
        SAYSTOP = .TRUE.
        WRITE(NOUT,*) ' ECHO STOP WHEN SPIDER ENDS'
@


1.78
log
@OUTPUT FORMATTING
@
text
@d29 1
d34 1
a34 1
C=* Copyright 1985-2013  Health Research Inc.,                         *
d52 1
a52 1
C   SETMODE(RES_TO_TERM)
d59 3
a61 1
        SUBROUTINE SETMODE(RES_TO_TERM)
d66 3
d75 1
a75 1
        PARAMETER (IMOFNC = 27)
d81 8
a88 2
        LOGICAL               :: RESULTS,REGPIPE,TORESULTS,ISOPEN
        LOGICAL               :: RES_TO_TERM
d105 1
a107 6
        DATA MPINUSE/0/ 
        DATA RESULTS/.TRUE./
        DATA REGPIPE/.FALSE./
        DATA TORESULTS/.FALSE./
        DATA USE_LONGCOL/.FALSE./

d111 1
a111 1
        IF (MODE(1:1) .EQ. ' ') RETURN
d140 3
a142 1
     &  '  LONGCOL OFF ',T19, ' SHORT ALIGNMENT DOC FILE COLS ')
d156 4
a159 4
        IF (NTRACE.EQ.1)      WRITE(NOUT,9630) MOMENU(3)(:10)
        IF (NTRACE.EQ.0)      WRITE(NOUT,9630) MOMENU(4)(:10)
        IF (NTRACE.LT.0)      WRITE(NOUT,9630) MOMENU(6)(:10)
        IF (NTRACE.EQ.0)      WRITE(NOUT,9630) MOMENU(5)(:10)
d162 2
a163 2
        IF (LEGACYPAR)        WRITE(NOUT,9630) MOMENU(22)(:10)
        IF (.NOT. LEGACYPAR)  WRITE(NOUT,9630) MOMENU(23)(:10)
d165 1
a165 1
        IF (.NOT. RESULTS)    WRITE(NOUT,*)' NO RESULTS FILE'
d174 2
d200 1
a200 1
        NTRACE =  0
a216 1
        RETURN
a220 1
        RETURN
d236 1
a236 1
        IF (MPINUSE .LE. 0) THEN
d245 1
a245 1
        WRITE(NOUT,*) '*** NOT COMPILED FOR MULTIPLE PROCESSORS' 
d256 1
a256 1
        IF (NUMFFTWTH .LE. 0) THEN
d259 1
a259 1
           WRITE(NOUT,*) ' FFTW3 THREADS REQUESTED: ',NUMFFTWTH 
d262 1
a262 1
        WRITE(NOUT,*) '*** NOT COMPILED FOR MULTIPLE PROCESSORS' 
d293 1
a293 1
        WRITE(NDAT,*) ' RESULTS FILE TERMINATED AT USERS REQUEST' 
d308 1
a308 1
        IF (IER .EQ. 0) THEN
d365 12
d379 1
a379 1
        WRITE(NOUT,*) '*** UNKNOWN MODE'
@


1.77
log
@*** empty log message ***
@
text
@d28 1
d155 6
a160 6
        IF (RESULTS)          WRITE(NOUT,*) 'HAS RESULTS FILE'
        IF (.NOT. RESULTS)    WRITE(NOUT,*) 'NO RESULTS FILE'
                              WRITE(NOUT,*) 'RANDOM NUMBER SEED: ',ISEED
        IF (REGPIPE)          WRITE(NOUT,*) 'REGISTER PIPE OPEN'
        IF (RES_TO_TERM)      WRITE(NOUT,*) 'RESULTS OUTPUT TO TERMINAL'
        IF (USE_FBS_INTERP)   WRITE(NOUT,*) 'FBS INTERPOLATION USED'
d162 3
a164 3
     &                        WRITE(NOUT,*) 'FBS INTERPOLATION NOT USED'
        IF (USE_LONGCOL)      WRITE(NOUT,*) 'LONG  ALIGN DOC FILE COLS'
        IF (.NOT. USE_LONGCOL)WRITE(NOUT,*) 'SHORT ALIGN DOC FILE COLS'
d167 2
a168 2
                       WRITE(NOUT,*) 'NUMBER OF REGISTERS: ',     IREGS
                       WRITE(NOUT,*) 'NUMBER OF REGISTER CHAR.: ',NCHAR
d171 2
a172 2
                       WRITE(NOUT,*) 'NUMBER OF VARIABLES: ',    ICVARS
                       WRITE(NOUT,*) 'NUMBER OF VARIABLE CHAR.: ',NCHAR
d175 2
a176 2
        WRITE(NOUT,*) 'NUMBER OF PROCESSORS USED:',MPINUSE
        WRITE(NOUT,*) 'NUMBER OF FFTW THREADS: ',NUMFFTWTH
d179 1
a179 1
9630    FORMAT(1X,A)
@


1.76
log
@delay removed, tabs
@
text
@d68 1
a68 1
        PARAMETER (IMOFNC = 29)
d109 1
a109 1
30      WRITE(NOUT,9610)
d146 1
a146 1
35      IF (NTRACE.EQ.1)      WRITE(NOUT,9630) MOMENU(3)(:10)
a360 1
5000  RETURN
@


1.75
log
@added options, fixed comments
@
text
@d27 1
a27 1
C
d32 1
a32 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d59 2
a60 2
	INCLUDE 'CMBLOCK.INC'
	INCLUDE 'CMLIMIT.INC'
d63 1
a63 1
	INTEGER, ALLOCATABLE  :: ISEEDVAL(:)
d73 3
a75 3
	CHARACTER(LEN=1)      :: NULL = CHAR(0)
	LOGICAL               :: RESULTS,REGPIPE,TORESULTS,ISOPEN
	LOGICAL               :: RES_TO_TERM
d77 1
a77 1
        SAVE 	FILOPENED,ISEED
a86 1
     &              'DELAY ON    ','DELAY OFF  ',
d102 2
a103 2
9400	CALL RDPRMC(MODE,NLET,.TRUE.,'MODE',NULL,IRTFLG)
	IF (MODE(1:1) .EQ. ' ') RETURN
d110 9
a118 11
9610	FORMAT(/
     &	'  ME          ',T19, ' MODE MENU'/
     &	'  STA         ',T19, ' STATUS OF MODES '/
     &	'  TR ON       ',T19, ' TRACE ON '/
     &	'  TR OFF      ',T19, ' TRACE OFF '/
     &	'  OP ON       ',T19, ' SHOW OPERATION '/
     &	'  OP OFF      ',T19, ' SHOW OPERATION OFF '/
     &	'  VB ON       ',T19, ' VERBOSE ON '/
     &	'  VB OFF      ',T19, ' VERBOSE OFF '/
     &	'  DELAY ON    ',T19, ' DELAY ON '/
     &	'  DELAY OFF   ',T19, ' DELAY OFF '/
d136 1
a136 1
9611	FORMAT(
d141 1
a141 1
      	WRITE(NOUT,*) ' '
d148 1
a148 1
	IF (NTRACE.LT.0)      WRITE(NOUT,9630) MOMENU(6)(:10)
a151 2
       !IF (DELAY_FREE)       WRITE(NOUT,9630) MOMENU(17)(:10)
       !IF (.NOT. DELAY_FREE) WRITE(NOUT,9630) MOMENU(18)(:10)
d156 1
a156 1
	                      WRITE(NOUT,*) 'RANDOM NUMBER SEED: ',ISEED
d178 2
a179 2
9630	FORMAT(1X,A)
	GOTO 9400
d184 1
a184 1
 	NTRACE = 1
d268 2
a269 2
	CALL RANDOM_SEED(SIZE=NUMBITS)
	ALLOCATE(ISEEDVAL(NUMBITS))
d271 3
a273 3
	DO  I=1,NUMBITS	
	   ISEEDVAL(I)= I * ISEED
	ENDDO
d275 2
a276 2
	CALL RANDOM_SEED(PUT=ISEEDVAL)
	DEALLOCATE(ISEEDVAL)
a301 11

      CASE("DELAY ON","DELAY FREE")
C       SET DELAY DEALLOCATION ------------------------------ DELAY ON
        DELAY_FREE = .TRUE.


      CASE("DELAY OFF")
C       SET NON-DELAY -------------------------------------- DELAY OFF
        DELAY_FREE = .FALSE.   ! NOT USED ANYMORE?? jun 2011


d357 1
a357 1
	WRITE(NOUT,*) '*** UNKNOWN MODE'
@


1.74
log
@PARAMETER (IMOFNC = 29) for more menu listings
@
text
@d25 2
a26 1
C                          USE_FBP_INTERP       APR 12 ARDEAN LEITH
d199 1
a199 1
      CASE("VB ON","VERBOSE")
d203 1
a203 1
      CASE("VB OFF","NON VERBOSE")
d298 1
a298 1
      CASE("RESULTS ON", "WANT RESULTS")
d308 1
a308 1
      CASE("DELAY ON")
d336 1
a336 1
C       () ON -------------------------------------------------- () ON
d347 1
a347 1
      CASE("FBS ON")
d353 1
a353 1
      CASE("FBS OFF")
d359 2
a360 2
      CASE("LONGCOL ON")
C       LONGCOL ON ------------------------------------------------ FBS ON
d365 2
a366 2
      CASE("LONGCOL OFF")
C       LONGCOL OFF-- --------------------------------------------- FBS ON
@


1.73
log
@LONGCOL OFF.
@
text
@d67 1
a67 1
        PARAMETER (IMOFNC = 27)
@


1.72
log
@*** empty log message ***
@
text
@d25 1
d31 1
a31 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d62 2
a63 2
	INTEGER, ALLOCATABLE, DIMENSION(:) :: ISEEDVAL
        INTEGER                            :: OMP_GET_NUM_PROCS 
d72 1
a72 1
	CHARACTER(LEN=1)      :: NULL
d91 1
d98 1
a98 2

	NULL = CHAR(0)
d132 3
a134 1
     &  '  FBS OFF     ',T19, ' FBS INTERPOLATION NOT USED ')
d148 16
a163 16
35      IF (NTRACE.EQ.1)     WRITE(NOUT,9630) MOMENU(3)(:10)
        IF (NTRACE.EQ.0)     WRITE(NOUT,9630) MOMENU(4)(:10)
	IF (NTRACE.LT.0)     WRITE(NOUT,9630) MOMENU(6)(:10)
        IF (NTRACE.EQ.0)     WRITE(NOUT,9630) MOMENU(5)(:10)
        IF (VERBOSE)         WRITE(NOUT,9630) MOMENU(7)(:10)
        IF (.NOT. VERBOSE)   WRITE(NOUT,9630) MOMENU(8)(:10)
       !IF (DELAY_FREE)      WRITE(NOUT,9630) MOMENU(17)(:10)
       !IF (.NOT. DELAY_FREE)WRITE(NOUT,9630) MOMENU(18)(:10)
        IF (LEGACYPAR)       WRITE(NOUT,9630) MOMENU(22)(:10)
        IF (.NOT. LEGACYPAR) WRITE(NOUT,9630) MOMENU(23)(:10)
        IF (RESULTS)         WRITE(NOUT,*) 'HAS RESULTS FILE'
        IF (.NOT. RESULTS)   WRITE(NOUT,*) 'NO RESULTS FILE'
	                     WRITE(NOUT,*) 'RANDOM NUMBER SEED: ',ISEED
        IF (REGPIPE)         WRITE(NOUT,*) 'REGISTER PIPE OPEN'
        IF (RES_TO_TERM)     WRITE(NOUT,*) 'RESULTS OUTPUT TO TERMINAL'
        IF (USE_FBS_INTERP)  WRITE(NOUT,*) 'FBS INTERPOLATION USED'
d165 3
a167 1
     &                       WRITE(NOUT,*) 'FBS INTERPOLATION NOT USED'
d170 1
a170 1
                       WRITE(NOUT,*) 'NUMBER OF REGISTERS: ',IREGS
d174 1
a174 1
                       WRITE(NOUT,*) 'NUMBER OF VARIABLES: ',ICVARS
d198 1
a198 1
      CASE("VB ON")
d202 1
a202 1
      CASE("VB OFF")
d357 13
@


1.71
log
@no more use_fbp
@
text
@d66 1
a66 1
        PARAMETER (IMOFNC = 29)
@


1.70
log
@typo
@
text
@d24 1
a88 1
     &              'FBP ON      ','FBP OFF    ',
a129 2
     &  '  FBP ON      ',T19, ' FBP INTERPOLATION USED '/
     &  '  FBP OFF     ',T19, ' FBP INTERPOLATION NOT USED '/
a159 3
        IF (USE_FBP_INTERP)  WRITE(NOUT,*) 'FBP INTERPOLATION USED'
        IF (.NOT. USE_FBP_INTERP)  
     &                       WRITE(NOUT,*) 'FBP INTERPOLATION NOT USED'
a338 12
        WRITE(NOUT,*) ' '

      CASE("FBP ON")
C       FBP ON ------------------------------------------------ FBP ON
        USE_FBP_INTERP = .TRUE.
        WRITE(NOUT,*) ' USING FBP INTERPOLATION'
        WRITE(NOUT,*) ' '

      CASE("FBP OFF")
C       FBP OFF-- --------------------------------------------- FBP ON
        USE_FBP_INTERP = .FALSE.
        WRITE(NOUT,*) ' NOT USING FBP INTERPOLATION'
@


1.69
log
@added USE_FBS_INTERP
@
text
@d131 1
a131 1
     &  '  FBP OFF     ',T19, ' FBP INTERPOLATION NOT USED ')
@


1.68
log
@USE_FBP_INTERP = .FALSE., 'CP TO OPEND BUG FIXED', 19.10
@
text
@d23 1
d65 1
a65 1
        PARAMETER (IMOFNC = 27)
d89 1
d132 2
d153 2
a154 2
        !IF (DELAY_FREE)      WRITE(NOUT,9630) MOMENU(17)(:10)
        !IF (.NOT. DELAY_FREE)WRITE(NOUT,9630) MOMENU(18)(:10)
d165 3
d356 12
@


1.67
log
@GPL_2010
@
text
@d22 2
a23 1

d28 1
a28 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d64 1
a64 1
        PARAMETER (IMOFNC = 25)
d87 1
d127 3
a129 1
     &  '  () OFF      ',T19, ' () NOT NEEDED FOR SIMPLE LIST IN LOOP')
d144 1
a144 1
	IF (NTRACE.EQ.0)     WRITE(NOUT,9630) MOMENU(4)(:10)
d146 9
a154 9
	IF (NTRACE.EQ.0)     WRITE(NOUT,9630) MOMENU(5)(:10)
	IF (VERBOSE)         WRITE(NOUT,9630) MOMENU(7)(:10)
	IF (.NOT. VERBOSE)   WRITE(NOUT,9630) MOMENU(8)(:10)
	IF (DELAY_FREE)      WRITE(NOUT,9630) MOMENU(17)(:10)
	IF (.NOT. DELAY_FREE)WRITE(NOUT,9630) MOMENU(18)(:10)
	IF (LEGACYPAR)       WRITE(NOUT,9630) MOMENU(22)(:10)
	IF (.NOT. LEGACYPAR) WRITE(NOUT,9630) MOMENU(23)(:10)
	IF (RESULTS)         WRITE(NOUT,*) 'HAS RESULTS FILE'
	IF (.NOT. RESULTS)   WRITE(NOUT,*) 'NO RESULTS FILE'
d156 5
a160 2
	IF (REGPIPE)         WRITE(NOUT,*) 'REGISTER PIPE OPEN'
	IF (RES_TO_TERM)     WRITE(NOUT,*) 'RESULTS OUTPUT TO TERMINAL'
d307 1
a307 1
        DELAY_FREE = .FALSE.
d337 12
@


1.66
log
@NUMFFTWTH
@
text
@a23 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2007  Health Research Inc.                      *
d25 5
a29 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d31 1
a31 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d36 1
a36 1
C=* This program is distributed in the hope that it will be useful,    *
d38 1
a38 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a39 1
C=*                                                                    *
d41 1
a41 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.65
log
@fftw3 threads setter for  fmrs_fftw3
@
text
@a95 1
        DATA NUMFFTWTH/0/
@


1.64
log
@>IF TERMOFF, NOUT   = 3
@
text
@d21 1
a61 1
	INTEGER                            :: BIT_SIZE
d67 3
a69 3
        PARAMETER (IMOFNC = 24)
        CHARACTER(LEN=11)     :: MOMENU(IMOFNC)
        CHARACTER(LEN=11)     :: MODE
d78 13
a90 12
        DATA MOMENU/'ME         ','STA        ',
     &              'TR ON      ','TR OFF     ',
     &              'OP ON      ','OP OFF     ',
     &              'VB ON      ','VB OFF     ',
     &              'INLN BUFF  ','SET MP     ',
     &              'SET MEM    ','SET SEED   ',
     &              'NO RESULTS ','SET REGS   ',
     &              'PIPE       ','SET VARS   ',
     &              'DELAY ON   ','DELAY OFF  ',
     &              'RESULTS ON ','RESULTS OFF',
     &              'TERM ON    ','TERM OFF   ',
     &              '() ON      ','() OFF     '/
d96 1
d111 20
a130 20
     &	'  ME   '     ,T19, ' MODE MENU'/
     &	'  STA   '    ,T19, ' STATUS OF MODES '/
     &	'  TR ON     ',T19, ' TRACE ON '/
     &	'  TR OFF    ',T19, ' TRACE OFF '/
     &	'  OP ON     ',T19, ' SHOW OPERATION '/
     &	'  OP OFF    ',T19, ' SHOW OPERATION OFF '/
     &	'  VB ON     ',T19, ' VERBOSE ON '/
     &	'  VB OFF    ',T19, ' VERBOSE OFF '/
     &	'  DELAY ON  ',T19, ' DELAY ON '/
     &	'  DELAY OFF ',T19, ' DELAY OFF '/
     &  '  SET SEED  ',T19, ' SET RANDOM NUMBER SEED '/
     &  '  SET REGS  ',T19, ' SET NUMBER OF REGISTER VARIABLES '/
     &  '  SET VARS  ',T19, ' SET NUMBER OF SYMBOLIC VARIABLES '/
     &  '  RESULTS OFF',T19,' NO RESULTS FILE '/
     &  '  RESULTS ON',T19, ' USE RESULTS FILE '/
     &  '  PIPE      ',T19, ' OPEN REGISTER OUTPUT PIPE'/
     &  '  TERM ON   ',T19, ' OUTPUT TO TERMINAL, NOT RESULTS '/
     &  '  TERM OFF  ',T19, ' OUTPUT TO RESULTS, NOT TERMINAL '/
     &  '  () ON     ',T19, ' () NEEDED FOR SIMPLE LIST IN LOOP '/
     &  '  () OFF    ',T19, ' () NOT NEEDED FOR SIMPLE LIST IN LOOP')
d135 2
a136 1
     &  '  SET MP  '  ,T19, ' SET MAX. NO. OF PROCESSORS USED ')
d169 2
a170 5
        IF (MPINUSE .LE. 0) THEN
      	   WRITE(NOUT,*) 'NUMBER OF PROCESSORS USED:   ALL'
        ELSE
	   WRITE(NOUT,*) 'NUMBER OF PROCESSORS USED:',MPINUSE
        ENDIF
d233 21
d267 1
a267 1
	   ISEEDVAL(I)= I*ISEED
@


1.63
log
@cvar variables
@
text
@d20 2
a21 1
C
d24 1
a24 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d300 1
@


1.62
log
@nalph --> nlet
@
text
@d19 1
d66 1
a66 1
        PARAMETER (IMOFNC = 23)
d84 1
a84 1
     &              'PIPE       ',
d120 1
d160 4
d201 5
@


1.61
log
@legacypar
@
text
@d98 1
a98 1
9400	CALL RDPRMC(MODE,NALPH,.TRUE.,'MODE',NULL,IRTFLG)
@


1.60
log
@LEGACYPAR
@
text
@a92 1
        DATA LEGACYPAR/.TRUE./
d122 4
a125 4
     &  '  TERM ON   ',T19, ' OUTPUT TO TERMINAL, NOT RESULTS'/
     &  '  TERM OFF  ',T19, ' OUTPUT TO RESULTS, NOT TERMINAL')/
     &  '  () ON     ',T19,' () NEEDED FOR SIMPLE LIST IN LOOP')/
     &  '  () OFF    ',T19,' () NOT NEEDED FOR SIMPLE LIST IN LOOP')
a292 1
C       FORCE OUTPUT TO TERMINAL NOT RESULTS FILE
d295 1
a298 1
C       NORMAL OUTPUT TO RESULTS FILE NOT TERMINAL
d301 1
@


1.59
log
@native named registers
@
text
@d18 1
d65 1
a65 1
        PARAMETER (IMOFNC = 21)
d82 1
a82 1
     &              'NO RESULTS ','SET REGS    ',
d86 2
a87 1
     &              'TERM ON    ','TERM OFF   '/
d93 1
d124 3
a126 1
     &  '  TERM OFF  ',T19, ' OUTPUT TO RESULTS, NOT TERMINAL')
d147 2
d292 12
@


1.58
log
@GPL License fixed
@
text
@d17 1
d81 1
a81 1
     &              'NO RESULTS ','SET REGS   ',
d116 1
a116 1
     &  '  SET REGS  ',T19, ' SET NUMBER OF REGISTERS '/
d148 3
a150 2
        CALL REG_GET_NUMS(IREGS)
	                    WRITE(NOUT,*) 'NUMBER OF REGISTERS: ',IREGS
d185 3
a187 14
C       SET NUMBER OF REGISTERS AVAILABLE -------------------  SET REGS
        IF (FROMBATCH .OR. COPT .EQ. 'B') THEN
C          IN BATCH MODE, MUST STOP IMMEDIATELY
           CALL ERRT(101,
     &      'CAN NOT ALTER NUMBER OF REGISTERS INSIDE BATCH/PROCEDURE',
     &      IDUM)
           RETURN
        ENDIF

        CALL REG_GET_NUMS(IREGS)
        CALL RDPRI1S(IREGS,NOT_USED,
     &             'NUMBER OF REGISTERS WANTED',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
        CALL REG_BUILD(IREGS,IRTFLG)
d191 1
a191 1
C        ~9 ALLOWS EXTENSION
@


1.57
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a18 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d22 1
a22 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a41 6

C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.56
log
@~9 for allowing extension
@
text
@d2 1
d21 24
@


1.55
log
@saved iseed
@
text
@d183 2
a184 2
        IRTFLG = 9
        CALL FILERD(PIPENAME,NLET,CHAR(0),'PIPE',IRTFLG)  
@


1.54
log
@TERM ON
@
text
@d16 1
d55 1
a55 1
        SAVE 	FILOPENED
@


1.53
log
@term on, select
@
text
@d15 1
d26 1
a26 1
C   SETMODE
d33 1
a33 1
        SUBROUTINE SETMODE
a37 3
        CHARACTER (LEN=4) ::   CXNUM
        COMMON /DRIV1_COM/ T1,LOOPREG,CXNUM

d52 1
a52 1
	LOGICAL               :: TOTERM
a71 1
        DATA TOTERM/.FALSE./
d127 1
a127 1
	IF (TOTERM)          WRITE(NOUT,*) 'RESULTS OUTPUT TO TERMINAL'
d263 1
a263 1
        TOTERM = .TRUE.
d265 2
a266 1
        WRITE(NOUT,*) ' DIVERT RESULTS OUTPUT TO TERMINAL'
d271 1
a271 1
        TOTERM = .FALSE.
@


1.52
log
@added results diversion to terminal
@
text
@d14 1
d41 1
a41 1
	INTEGER  :: BIT_SIZE
d43 1
a43 1
        INTEGER :: OMP_GET_NUM_PROCS 
d47 3
a49 1
        PARAMETER (IMOFNC = 22)
a51 1
        CHARACTER(LEN=11)     :: MODE,MOMENU(IMOFNC)
d65 1
a65 1
     &              'PIPE       ','TO RESULTS ',
d70 3
a72 1
        DATA MPINUSE/0/,RESULTS/.TRUE./,REGPIPE/.FALSE./
d81 1
a81 1
	IF (MODE(1:1) .EQ .' ') RETURN
d83 1
a83 10
C       LOOK THRU THE MENU OF MODES, AND GO TO THE APPROPRIATE ONE.
	DO I=1,IMOFNC
C          COPY MODE TO TEMP & UPCASE IT FOR COMPARISON...
           IF (MODE .EQ. MOMENU(I)(:10)) THEN
              GOTO (30, 35, 40, 45, 50, 45, 55, 60, 80, 85, 
     &              90, 95,100, 70, 75,105,110,115,100,100,125),I
           ENDIF
        ENDDO
	WRITE(NOUT,*) '*** UNKNOWN MODE'
	GOTO 9400
d85 1
a103 1
     &  '  TO RESULTS',T19, ' OUTPUT TO RESULTS FILE '/
a113 1
	GOTO 5000
d116 1
d118 7
a124 7
35      IF (NTRACE.EQ.1)    WRITE(NOUT,9630) MOMENU(3)(:10)
	IF (NTRACE.EQ.0)    WRITE(NOUT,9630) MOMENU(4)(:10)
	IF (NTRACE.LT.0)    WRITE(NOUT,9630) MOMENU(6)(:10)
	IF (NTRACE.EQ.0)    WRITE(NOUT,9630) MOMENU(5)(:10)
	IF (VERBOSE)        WRITE(NOUT,9630) MOMENU(7)(:10)
	IF (.NOT. VERBOSE)  WRITE(NOUT,9630) MOMENU(8)(:10)
	IF (DELAY_FREE)     WRITE(NOUT,9630) MOMENU(17)(:10)
d126 5
a130 5
	IF (RESULTS)        WRITE(NOUT,*) 'HAS RESULTS FILE'
	IF (.NOT. RESULTS)  WRITE(NOUT,*) 'NO RESULTS FILE'
	                    WRITE(NOUT,*) 'RANDOM NUMBER SEED: ',ISEED
	IF (REGPIPE)        WRITE(NOUT,*) 'REGISTER PIPE OPEN'
	IF (TOTERM)         WRITE(NOUT,*) 'RESULTS OUTPUT TO TERMINAL'
d146 2
d149 1
a149 2
40	NTRACE = 1
	GOTO 5000
d151 1
d153 1
a153 2
45      NTRACE =  0
        GOTO 5000
d155 1
d157 1
a157 2
50      NTRACE = -1
	GOTO 5000
d159 1
d161 1
a161 2
55      VERBOSE = .TRUE.
        GOTO 5000
d163 1
d165 1
a165 2
60      VERBOSE = .FALSE.
        GOTO 5000
d167 1
d169 1
a169 1
70      IF (FROMBATCH .OR. COPT .EQ. 'B') THEN
a181 1
        GOTO 5000
d183 1
d185 1
a185 1
75      IRTFLG = 9
a187 1
        GOTO 5000
a188 4
C	USER WANTS TO ALTER THE INCORE BUFFER ------------- INLN TOGGLE
C       ON UNIX THIS CALL TOGGLES MEANING OF _FILES ONLY
80      CALL ERRT(101,'OPERATION NO LONGER SUPPORTED',NE)
        GOTO 5000
d190 1
a191 1
85      CONTINUE
a207 1
        GOTO 5000
d209 1
a210 1
90      CONTINUE
a213 1
        GOTO 5000
d215 1
d217 1
a217 1
95      CALL RDPRI1S(ISEED,NOT_USED, 'NEW SEED',IRTFLG)
a218 1

a226 1
        GOTO 5000
d228 1
d230 8
a237 8
100     IF (RESULTS) THEN
           RESULTS = .FALSE.
           INQUIRE(UNIT=NDAT,OPENED=ISOPEN,NAME=FILOPENED)
           WRITE(NDAT,*) ' RESULTS FILE TERMINATED AT USERS REQUEST' 
           WRITE(NDAT,*) '  ' 
           CLOSE(NDAT)
           OPEN(NDAT,FILE='/dev/null',IOSTAT=IER)
           IF (IER .NE. 0) 
d239 8
a246 5
           WRITE(NOUT,*) ' RESULTS FILE TERMINATED AT USERS REQUEST' 
           WRITE(NOUT,*) ' '
        ELSE
           CLOSE(NDAT)
           OPEN(NDAT,FILE=FILOPENED,STATUS='OLD',POSITION='APPEND',
d248 2
a249 3
           IF (IER .EQ. 0) THEN
              WRITE(NOUT,*) ' RESULTS FILE REOPENED: ',FILOPENED 
           ENDIF
a250 1
        GOTO 5000
d252 4
a255 15
C       TO RESULTS FILE ------------------------------- TO RESULTS
105     IF (TORESULTS) THEN
C          NORMAL OUTPUT TO TERMINAL
           TORESULTS = .FALSE.
           NOUT      = 6
           WRITE(NDAT,*) ' HALTED OUTPUT DIVERSION TO RESULTS FILE'
        ELSE
C          FORCE OUTPUT TO RESULTS FILE NOT TERMINAL
           TORESULTS = .TRUE.
           NOUT      = NDAT
           NLOG      = 0
           WRITE(NDAT,*) ' DIVERT OUTPUT TO RESULTS FILE (NOT TERMINAL)' 
        ENDIF
        WRITE(NOUT,*) ' '
        GOTO 5000
a256 3
C       SET DELAY DEALLOCATION ----------------------------- DELAY ON
110     DELAY_FREE = .TRUE.
        GOTO 5000
d258 1
d260 2
a261 2
115     DELAY_FREE = .FALSE.
        GOTO 5000
d263 13
a275 12
C       TO RESULTS FILE ------------------------------- TO RESULTS
125     IF (TOTERM) THEN
C          FORCE OUTPUT TO TERMINAL NOT RESULTS FILE
           TOTERM = .TRUE.
           NDAT   = 6
           WRITE(NOUT,*) ' DIVERT RESULTS OUTPUT TO TERMINAL'
        ELSE
C          NORMAL OUTPUT TO RESULTS FILE NOT TERMINAL
           TOTERM = .FALSE.
           NDAT   = 3
           WRITE(NOUT,*) ' OUTPUT TO RESULTS FILE (NOT TERMINAL)' 
        ENDIF
d277 8
a284 3
        GOTO 5000
5000    RETURN
        END
@


1.51
log
@rdpri1s
@
text
@d13 1
d46 1
a46 1
        PARAMETER (IMOFNC = 20)
d49 2
a50 2
        CHARACTER(LEN=10)     :: MODE,MOMENU(IMOFNC)
	CHARACTER(LEN=10)     :: NULL
d52 1
d56 11
a66 10
        DATA MOMENU/'ME        ','STA       ',
     &              'TR ON     ','TR OFF    ',
     &              'OP ON     ','OP OFF    ',
     &              'VB ON     ','VB OFF    ',
     &              'INLN BUFF ','SET MP    ',
     &              'SET MEM   ','SET SEED  ',
     &              'NO RESULTS','SET REGS  ',
     &              'PIPE      ','TO RESULTS',
     &              'DELAY ON  ','DELAY OFF ',
     &              'RESULTS ON','RESULTS OF'/
d70 1
d84 1
a84 1
     &              90, 95,100, 70, 75,105,110,115,100,100),I
d108 3
a110 1
     &  '  TO RESULTS',T19, ' OUPUT TO RESULTS FILE ')
d135 1
d285 14
@


1.50
log
@output mp for mp = 0 request
@
text
@d12 1
d219 1
a219 1
95      CALL RDPRIS(ISEED,IDUM,NOT_USED, 'NEW SEED',IRTFLG)
@


1.49
log
@NOT COMPILED FOR MP NOW READS IN # PROC FIRST
@
text
@d200 1
@


1.48
log
@OMP_GET_NUM_PROCS
@
text
@a191 1
#ifdef SP_MP
d196 1
@


1.47
log
@results on
@
text
@d11 1
d38 1
a38 1
	INTEGER  BIT_SIZE
d40 1
d42 1
d194 1
a194 1
     &             'NUMBER OF PROCESSORS WANTED',IRTFLG)
d196 5
@


1.46
log
@onunix common removed
@
text
@d41 1
a41 1
        PARAMETER (IMOFNC = 18)
d43 4
a46 6
        CHARACTER(LEN=MAXNAM) :: PIPENAME
 
        CHARACTER * 10         MODE
        CHARACTER * 10         MOMENU(IMOFNC)
	CHARACTER * 1 	       NULL
	LOGICAL                RESULTS,REGPIPE,TORESULTS
d48 2
d58 2
a59 1
     &              'DELAY ON  ','DELAY OFF '/
d69 1
a69 1
	IF (MODE(1:1).EQ.' ') RETURN
d75 2
a76 2
              GOTO (30, 35, 40, 45, 50,  45, 55, 60,  
     &              80, 85, 90, 95, 100, 70,75, 105, 110,115),I
d97 2
a98 1
     &  '  NO RESULTS',T19, ' NO RESULTS FILE '/
d225 1
d235 6
a240 1
           WRITE(NOUT,*) ' NO CURRENT RESULTS FILE TO TERMINATE'
@


1.45
log
@delay_free added
@
text
@a32 3
        LOGICAL        ONSUN,ONUNIX,ONSGI,ONOSF
        COMMON /OPSYS/ ONSUN,ONUNIX,ONSGI,ONOSF

@


1.44
log
@nloop,iloop_removed
@
text
@d10 1
d14 1
a14 1
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
d33 1
a33 1
        LOGICAL ONSUN,ONUNIX,ONSGI,ONOSF
d44 1
a44 1
        PARAMETER (IMOFNC = 16)
d60 2
a61 1
     &              'PIPE      ','TO RESULTS'/
d78 1
a78 1
     &              80, 85, 90, 95, 100, 70,75, 105),I
d95 2
d120 2
d138 1
a138 1
9630	FORMAT(1X,A7)
d253 8
@


1.43
log
@NECHO --> NOUT
@
text
@d165 1
a165 1
        CALL RDPRI1S(IREGS,NLOOP,ILOOP,
d185 1
a185 1
        CALL RDPRI1S(MPINUSE,NLOOP,ILOOP,
d198 1
a198 1
        CALL RDPRIS(IDUM,IDUM,NLOOP,ILOOP,
d204 1
a204 1
95      CALL RDPRIS(ISEED,IDUM,NLOOP,ILOOP, 'NEW SEED',IRTFLG)
@


1.42
log
@TO RESULTS
@
text
@a237 1
           NECHO     = NOUT
a242 1
           NECHO     = NOUT
@


1.41
log
@added oputput pipe
@
text
@d43 1
a43 1
        PARAMETER (IMOFNC = 15)
d50 1
a50 1
	LOGICAL                RESULTS,REGPIPE
d59 1
a59 1
     &              'PIPE'/
d62 1
d76 1
a76 1
     &              80, 85, 90, 95, 100, 70,75),I
d96 2
a97 1
     &  '  PIPE      ',T19, ' OPEN REGISTER OUTPUT PIPE')
d231 18
@


1.40
log
@N_VERBOSE --> VERBOSE
@
text
@d9 1
d22 1
a22 1
C   PURPOSE:   CONTAINS CODE FOR SETTING VARIOUS MODES 
d30 1
d35 3
d43 1
a43 1
        PARAMETER (IMOFNC = 14)
d45 2
d50 1
a50 1
	LOGICAL                RESULTS
d58 2
a59 1
     &              'NO RESULTS','SET REGS  '/
d61 1
a61 1
        DATA MPINUSE/0/,RESULTS/.TRUE./
a68 1
        CALL SSUPCAS(MODE)
d74 2
a75 2
              GOTO (30, 35, 40, 45, 50, 45, 55, 60,  
     &              80, 85, 90, 95, 100, 70),I
d94 2
a95 1
     &  '  NO RESULTS',T19, ' NO RESULTS FILE ')
d117 2
a129 2


d167 6
@


1.39
log
@MEMALLOCABLE removed
@
text
@d104 2
a105 2
	IF (N_VERBOSE.EQ.1) WRITE(NOUT,9630) MOMENU(7)(:10)
	IF (N_VERBOSE.EQ.0) WRITE(NOUT,9630) MOMENU(8)(:10)
d138 1
a138 1
55      N_VERBOSE = 1
d141 2
a142 2
C       SET VERBOSE FILE DATA ------------------------------ VERBOSE ON
60      N_VERBOSE = 0
@


1.38
log
@crash on iseedval output
@
text
@d8 1
d10 8
a17 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1993, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d31 1
a31 1
        COMMON /OPSYS/ ONSUN,ONUNIX,ONSGI,ONOSF,MEMALLOCABLE
a94 3
        WRITE(NOUT,9612)
9612	FORMAT(
     &  '  SET MEM '  ,T19, ' SET MAX. BYTES ALLOCABLE MEMORY ')
a119 1
      	WRITE(NOUT,*) 'MAX. MB ALLOCABLE MEMORY: ',MEMALLOCABLE
d182 2
a183 2
        CALL RDPRIS(MEMALLOCABLE,IDUM,NLOOP,ILOOP,
     &             'ALLOCABLE MEMORY (IN MEGABYTES)',IRTFLG)
@


1.37
log
@fixed status report
@
text
@d4 1
a4 1
C SETMODE                  REMOVED FROM DRIVER.FOR MAR 93 ARDEAN LEITH
d111 1
a111 2
	                    WRITE(NOUT,*) 'RANDOM NUMBER SEED: ',
     &                                     ISEEDVAL
d113 1
a113 2
	                    WRITE(NOUT,*) 'NUMBER OF REGISTERS: ',
     &                                     IREGS
@


1.36
log
@removed:  NUMBITS=NUMBITS/BIT_SIZE(ILOOP)
@
text
@a84 1
     &  '  INLN BUFF ',T19, ' TOGGLE INCORE BUFFER ON/OFF'/
d103 6
a108 6
35      IF (NTRACE.EQ.1)    WRITE(NOUT,9630) MOMENU(5)(:10)
	IF (NTRACE.EQ.0)    WRITE(NOUT,9630) MOMENU(6)(:10)
	IF (NTRACE.LT.0)    WRITE(NOUT,9630) MOMENU(7)(:10)
	IF (NTRACE.EQ.0)    WRITE(NOUT,9630) MOMENU(8)(:10)
	IF (N_VERBOSE.EQ.1) WRITE(NOUT,9630) MOMENU(9)(:10)
	IF (N_VERBOSE.EQ.0) WRITE(NOUT,9630) MOMENU(10)(:10)
d125 1
a125 1
      	WRITE(NOUT,*) ' MAX. MB ALLOCABLE MEMORY: ',MEMALLOCABLE
d139 1
@


1.35
log
@reg_build call needed irtflg
@
text
@d196 1
a196 2
C       ARGUMENT OF BIT_SIZE HAS TO BE ANY INTEGER VARIABLE
	NUMBITS = NUMBITS/BIT_SIZE(ISEED)
d200 1
a200 1
	   ISEEDVAL(I )= I*ISEED
@


1.34
log
@typo
@
text
@d164 1
a164 1
        CALL REG_BUILD(IREGS)
@


1.33
log
@register prompt corrected
@
text
@d162 1
a162 1
     &             'NUMBER OF REGISTERS WANTED,IRTFLG)
d176 1
a176 1
     &             'NUMBER OF PROCESSORS WANTED,IRTFLG)
@


1.32
log
@changes for reg_set
@
text
@d8 1
d155 2
a156 1
     &      'REGISTER CHANGE NOT ALLOWED INSIDE BATCH/PROCEDURE',IDUM)
d162 1
a162 1
     &             'NUMBER OF PROCESSORS REQUESTED',IRTFLG)
d176 1
a176 1
     &             'NUMBER OF PROCESSORS REQUESTED',IRTFLG)
@


1.31
log
@used setthreads
@
text
@d4 4
a7 4
C SETMODE                             REMOVED FROM DRIVER.FOR MAR 93 al
C                                     F90 CHANGES APRIL 98 al
C                                     NO RESULTS ADDED SEPT 98 al
C
d37 1
a37 1
        PARAMETER (IMOFNC = 15)
a47 1
     &              'MOSAIC ON ','MOSAIC OFF',
d50 1
a50 1
     &              'NO RESULTS'/
d66 2
a67 2
              GOTO (30, 35, 40, 45, 50, 45, 55, 60, 70, 75, 
     &              80, 85, 90, 95, 100),I
d73 1
a73 1
C       MENU  ME
a83 2
     &  '  MOSAIC ON ',T19, ' MOSAIC HELP ON'/
     &  '  MOSAIC OFF',T19, ' MOSAIC HELP OFF'/
d86 1
d102 1
a102 1
C       DETERMINE STATUS  STA
a108 2
	IF (N_MOSAIC.EQ.1)  WRITE(NOUT,9630) MOMENU(11)(:10)
	IF (N_MOSAIC.EQ.0)  WRITE(NOUT,9630) MOMENU(12)(:10)
d113 3
d150 7
a156 3
C       SET USE OF MOSAIC ON -------------------------------  MOSAIC ON
70      N_MOSAIC = 1
        GOTO 5000
d158 5
a162 2
C       SET USE OF MOSAIC OFF ------------------------------ MOSAIC OFF
75      N_MOSAIC = 0
d173 1
a173 1
        CALL RDPRIS(MPINUSE,IDUM,NLOOP,ILOOP,
d194 2
a195 2
C  ARGUMENT OF BIT_SIZE HAS TO BE ANY INTEGER VARIABLE
	NUMBITS=NUMBITS/BIT_SIZE(ISEED)
d197 1
d199 1
a199 1
	ISEEDVAL(I)= I*ISEED
d201 1
@


1.30
log
@f90 rundom numbers
@
text
@d172 1
a172 1
        CALL  omp_set_num_threads(MPINUSE)
@


1.29
log
@omp
@
text
@d32 3
a34 4
#ifdef SP_F90
	INTEGER  ISEEDVAL(1)
#endif
        COMMON /RNDMSEED/ ISEEDVAL
d186 8
a193 2
95      CALL RDPRIS(ISEEDVAL,IDUM,NLOOP,ILOOP, 'NEW SEED',IRTFLG)
#ifdef SP_F90
d195 1
a195 1
#endif
@


1.28
log
@*** empty log message ***
@
text
@d173 1
a173 2
	CALL  mp_destroy()
        CALL  mp_set_numthreads(MPINUSE)
@


1.27
log
@random for f90
@
text
@d191 1
a191 1
#else
@


1.26
log
@removed inln_buf common block (unused)
@
text
@d32 3
d189 3
@


1.25
log
@SP_ALLOC removed
@
text
@a26 17

#ifdef SP_F90
C     ----------- F90 SPECIFIC CODE FOLLOWS ------------------
C     USE INLINE BUFFER COMMON AREA
      USE INLN_INFO
C     ----------- F90 SPECIFIC CODE ENDS ------------------
#else
C     ----------- F77 SPECIFIC CODE FOLLOWS ------------------
#if defined(SP_SUN4) || defined(SP_NT)
        INTEGER * 4     LOCLUN
#else
        INTEGER * 8     LOCLUN
#endif
        COMMON /LUNARB/ LOCLUN(100),NSAMLUN(100),NWORDLUN(100)
C     ----------- F77 SPECIFIC CODE ENDS ------------------
#endif

@


1.24
log
@removed USEINLN
@
text
@a111 1
#ifdef SP_ALLOC
a114 1
#endif
a174 2

C       ON VAX THIS IS LIMITED TO TWO ARRAYS IN A FIXED LENGTH OF SPACE
a195 1
#ifdef SP_ALLOC
a198 3
#else
        WRITE(NOUT,*) '*** NOT COMPILED FOR ALLOCABLE MEMORY' 
#endif
@


1.23
log
@added NO RESULTS
@
text
@a26 1
CNO_SAVE
d40 1
a40 2
        LOGICAL         USEINLN
        COMMON /LUNARB/ LOCLUN(100),NSAMLUN(100),NWORDLUN(100),USEINLN
a131 2
	IF (USEINLN)        WRITE(NOUT,*) 'INLN BUFF ON'
	IF (.NOT. USEINLN)  WRITE(NOUT,*) 'INLN BUFF OFF'
a142 1
#ifdef SP_ALLOC
a143 1
#endif
d180 1
a180 1
80      CALL INITINLN(.TRUE.,IRTFLG)
@


1.22
log
@added set seed
@
text
@d6 1
d54 1
a54 1
        PARAMETER (IMOFNC = 14)
d59 2
a60 1
	
d67 2
a68 1
     &              'SET MEM   ','SET SEED  '/
d70 1
a70 1
        DATA MPINUSE/0/
d85 1
a85 1
     &              80, 85, 90, 95),I
d105 2
a106 1
     &  '  SET SEED  ',T19, ' SET RANDOM NUMBER SEED ')
d132 2
d166 1
a166 1
C       SET VERBOSE FILE DATA ------------------------------- VERBOSE ON
d170 1
a170 1
C       SET VERBOSE FILE DATA ------------------------------- VERBOSE ON
d189 1
a189 1
C       SET NUMBER OF PROCESSORS WANTED ---------------------- SET MP
d204 1
a204 1
C       SET ALLOCABLE MEMORY ------------------------------- SET MEM
d215 1
a215 1
C       SET RANDOM NUMBER SEED ---------------------------- SET SEED
d219 15
@


1.21
log
@f90 changes
@
text
@d50 2
d53 1
a53 1
        PARAMETER (IMOFNC = 13)
d65 1
a65 1
     &              'SET MEM   '/
d68 3
a70 1
	NULL=CHAR(0)
d82 1
a82 1
     &              80, 85, 90),I
d101 2
a102 1
     &  '  INLN BUFF ',T19, ' TOGGLE INCORE BUFFER ON/OFF')
d120 4
a123 4
35      IF (NTRACE.EQ.1) WRITE(NOUT,9630) MOMENU(5)(:10)
	IF (NTRACE.EQ.0) WRITE(NOUT,9630) MOMENU(6)(:10)
	IF (NTRACE.LT.0) WRITE(NOUT,9630) MOMENU(7)(:10)
	IF (NTRACE.EQ.0) WRITE(NOUT,9630) MOMENU(8)(:10)
d130 2
d149 1
a149 1
C       TRACE ON
d153 1
a153 1
C       TRACE OFF
d160 1
a160 1
C       SET VERBOSE FILE DATA
d164 1
a164 1
C       SET VERBOSE FILE DATA
d168 1
a168 1
C       SET USE OF MOSAIC ON
d172 1
a172 1
C       SET USE OF MOSAIC OFF
d176 2
a177 1
C	USER WANTS TO ALTER THE INCORE BUFFER 
d183 1
a183 1
C       SET NUMBER OF PROCESSORS WANTED
d198 1
a198 1
C       SET ALLOCABLE MEMORY
d208 5
@


1.20
log
@ used 4 byte pointers on nt
@
text
@d4 2
a5 1
C SETMODE
d19 1
a19 2
C   PURPOSE:   CONTAINS CODE FOR SETTING MODE IN SPIDER 
C              REMOVED FROM DRIVER.FOR MAR 93 al
d26 1
a26 1
	INCLUDE 'CMBLOCK.INC' 
d28 9
a36 5
#ifdef SP_ALLOC
C       RUN-TIME ALLOCATION SPECIFIC CODE FOLLOWS

#ifdef SP_NT
        INTEGER         LOCLUN
d42 1
a42 3
#else
        LOGICAL         USEINLN
        COMMON /LUNARB/ LOCLUN(100),NSAMLUN(100),NWORDLUN(100),USEINLN
d44 3
@


1.19
log
@*** empty log message ***
@
text
@d31 3
d35 1
@


1.18
log
@SET MP corrected
@
text
@d56 2
a57 2
        DATA NULL/0/,MPINUSE/0/
	
@


1.17
log
@memory msg wrong
@
text
@d174 1
@


1.16
log
@removed SPOOL/IPRTT stuff (no longer useable)
@
text
@d126 1
a126 1
      	WRITE(NOUT,*) ' MAX. MB ALLOCABLE MEMORY:',SP_ALLOCMEM
@


1.15
log
@bug in if statement
@
text
@d42 1
a42 1
        PARAMETER (IMOFNC = 15)
d48 1
a48 2
        DATA MOMENU/'PR ON     ','PR OFF    ',
     &              'ME        ','STA       ',
d68 1
a68 1
              GOTO (20, 25, 30, 35, 40, 45, 50, 45, 55, 60, 70, 75,
a74 8
C       PRINTING MODE ON  PR ON
20      IPRTT=1
	GOTO 5000

C       PRINTING MODE OFF  PR OFF
25	IPRTT=0
	GOTO 5000

a77 2
     &  '  PR ON   '  ,T19, ' PRINTING ON '/
     &	'  PR OFF  '  ,T19, ' PRINTING OFF '/
d95 1
d106 1
a106 3
35      IF (IPRTT.EQ.1)  WRITE(NOUT,9630) MOMENU(1)(:10)
	IF (IPRTT.EQ.0)  WRITE(NOUT,9630) MOMENU(2)(:10)
	IF (NTRACE.EQ.1) WRITE(NOUT,9630) MOMENU(5)(:10)
@


1.14
log
@added set mp and set mem
@
text
@d128 1
d131 1
a131 1
     &	   WRITE(NOUT,*) 'NUMBER OF PROCESSORS USED:   ALL'
@


1.13
log
@changed menu description.
@
text
@a25 1
#ifdef SP_UNIX
a26 3
#else
	INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
d29 1
a29 1
C     RUN-TIME ALLOCATION SPECIFIC CODE FOLLOWS
d31 3
a33 3
      INTEGER * 8     LOCLUN
      LOGICAL         USEINLN
      COMMON /LUNARB/ LOCLUN(100),NSAMLUN(100),NWORDLUN(100),USEINLN
d35 2
a36 2
      LOGICAL         USEINLN
      COMMON /LUNARB/ LOCLUN(100),NSAMLUN(100),NWORDLUN(100),USEINLN
d38 2
d42 1
a42 1
        PARAMETER (IMOFNC = 13)
d54 2
a55 1
     &              'INLN BUFF '/
d57 1
a57 1
        DATA NULL/0/
d62 1
a62 1
	IF (MODE(1:1).EQ.' ') GOTO 5000
d70 1
a70 1
     &              80),I
d87 25
a111 13
     &  '  PR ON   '  ,T12, ' PRINTING ON '/
     &	'  PR OFF  '  ,T12, ' PRINTING OFF '/
     &	'  ME   '     ,T12, ' MODE MENU'/
     &	'  STA   '    ,T12, ' STATUS OF MODES '/
     &	'  TR ON     ',T12, ' TRACE ON '/
     &	'  TR OFF    ',T12, ' TRACE OFF '/
     &	'  OP ON     ',T12, ' SHOW OPERATION '/
     &	'  OP OFF    ',T12, ' SHOW OPERATION OFF '/
     &	'  VB ON     ',T12, ' VERBOSE ON '/
     &	'  VB OFF    ',T12, ' VERBOSE OFF '/
     &  '  MOSAIC ON ',T12, ' MOSAIC HELP ON'/
     &  '  MOSAIC OFF',T12, ' MOSAIC HELP OFF'/
     &  '  INLN BUFF ',T12, ' TOGGLE INCORE BUFFER ON/OFF'/)
d114 1
d126 14
a139 2
	IF (USEINLN)        WRITE(NOUT,*) ' INLN BUFF ON'
	IF (.NOT. USEINLN)  WRITE(NOUT,*) ' INLN BUFF OFF'
d175 25
@


1.12
log
@new runtime inline buffer alteration
@
text
@d32 11
a47 1
        CHARACTER * 80         FILNAM
d100 1
a100 1
     &  '  INLN BUFF ',T12, ' INCORE  BUFFER '/)
d112 5
a116 2
	IF (N_MOSAIC.EQ.1) WRITE(NOUT,9630) MOMENU(11)(:10)
	IF (N_MOSAIC.EQ.0) WRITE(NOUT,9630) MOMENU(12)(:10)
d149 1
a149 1
C       ON UNIX THIS CALL DOES NOTHING
@


1.11
log
@allow use of inlined buff 1 and 2 simultaneously
@
text
@a34 13
C +++++++
C	SEE SPIDER.F FOR MODE DETAILS.

C       INLNAM 1&2 ARE THE NAME ASSIGNED TO EACH INLINED ARRAY
        CHARACTER * 80 INLNAM1,INLNAM2
        COMMON/CINLN_NAMES/INLNAM1,INLNAM2
C       DEFAULT VALUE OF INLNSIZE = ISZBUF/2 
        INTEGER INLNSIZE, ISZBUF0
        COMMON/INLN_FLAGS/INLNSIZE,ISZBUF0
	INTEGER ACT1,RECLN01,RECLN11,ACT2,RECLN02,RECLN12
	COMMON/LUNYP/ACT1,RECLN01,RECLN11,ACT2,RECLN02,RECLN12
C ------

d134 4
a137 34
C
C	USER WANTS TO USE THE INCORE BUFFER (DIVIDED IN TWO
C	ARRAYS) AND ASSIGN A NAME TO EACH BUFFER (INLNAMi i=1,2)
C	OF  INLNSIZE SIZE FOR BUFFER 1 AND (ISZBUF0 - INLNSIZE) SIZE
C	FOR BUFFER 2.
C
C       ASSIGN NAMES TO THE INCORE BUFFERS
80      NLET = 0
	IRTFLG= -999
	CALL RDPRMC(FILNAM,NLET,.TRUE.,
     &      'NAME OF FIRST INLINED BUFFER',NULL,IRTFLG)
        IF(NLET .GT. 0) INLNAM1 = FILNAM(1:NLET) // NULL
	NLET = 0
	IRTFLG= -999
        CALL RDPRMC(FILNAM,NLET,.TRUE.,
     &      'NAME OF SECOND 2 INLINED BUFFER',NULL,IRTFLG)
        IF(NLET .GT. 0) INLNAM2 = FILNAM(1:NLET) // NULL
	CALL RDPRMI(I1,I2,NLOOP,ILOOP,
     &      'TOTAL SIZE FOR EACH BUFFER (EX:4000,5000)$')
        IF((I1+I2+2048) .LT. ISZBUF0) THEN
	  WRITE(NOUT,102) INLNAM1
102	  FORMAT('NAME OF FIRST BUFFER:        ',A80)
	  WRITE(NOUT,103) INLNAM2
103	  FORMAT('NAME OF SECOND BUFFER:       ',A80)
C         ADD LARGER HEADER SIZE ALLOWED
	  INLNSIZE = I1+1024
	  I2 = ISZBUF0 - INLNSIZE
	  WRITE(NOUT,101) INLNSIZE,I2
101	  FORMAT('BUFF1 SIZE:',I10,'      BUFF2 SIZE:',I12)
	ELSE
	  WRITE(NOUT,100) ISZBUF0 - 2048
100	  FORMAT('TOTAL SIZE (BUFF1 + BUFF2) ALLOWED:',I12)
	END IF
c	
@


1.10
log
@changes for inlined buff by adding lunini array
@
text
@d44 2
a45 2
	INTEGER ACTIV,RECLN01,RECLN11,RECLN02,RECLN12
	COMMON/LUNYP/ACTIV,RECLN01,RECLN11,RECLN02,RECLN12
d166 1
a166 1
        IF((I1+I2) .LT. ISZBUF0) THEN
d171 2
a172 1
	  INLNSIZE = I1
d177 1
a177 1
	  WRITE(NOUT,100) ISZBUF0
@


1.9
log
@removed unused prompt
@
text
@d44 2
a45 3
C       FORTRAN UNIT ASSOCIATED WITH EACH FILENAME
        INTEGER INLUN1,RECLN01,RECLN11,INLUN2,RECLN02,RECLN12
        COMMON/LUNYP/INLUN1,RECLN01,RECLN11,INLUN2,RECLN02,RECLN12
@


1.8
log
@bad spelling of N_MOSAIC
@
text
@d49 1
a49 1
        CHARACTER * 10         MODE,PROMPT
@


1.7
log
@added comments for inlined buffers
@
text
@d37 1
a37 1
C
d145 1
a145 1
75      N_ MOSAIC = 0
@


1.6
log
@fixed uppercassing on inlined buff name
@
text
@d35 3
d47 1
d147 7
a153 1
 
@


1.5
log
@removed unused variable prompt
@
text
@d45 1
a45 1
        CHARACTER * 10         MODE
d146 1
d149 1
a149 1
        IF(NLET .GT. 0) INLNAM1 = FILNAM
d151 1
d154 1
a154 1
        IF(NLET .GT. 0) INLNAM2 = FILNAM
@


1.4
log
@added INLN BUFF for incore buffers
@
text
@d45 1
a45 1
        CHARACTER * 10         MODE,PROMPT
@


1.3
log
@added mosaic on & mosaic off to mode
@
text
@d33 1
a33 1
        PARAMETER (IMOFNC = 12)
d35 11
a45 1
        CHARACTER * 10         MODE
d47 3
a49 1

d55 2
a56 1
     &              'MOSAIC ON ','MOSAIC OFF'/
d58 2
a59 1

d70 2
a71 1
              GOTO (20, 25, 30, 35, 40, 45, 50, 45, 55, 60, 70, 75),I
d99 2
a100 1
     &  '  MOSAIC OFF',T12, ' MOSAIC HELP OFF'/)
d142 27
@


1.2
log
@cpp_lines_added
@
text
@d18 1
a18 1
C   PURPOSE:   CONTAINS CODE FRO SETTING MODE IN SPIDER 
d33 1
a33 1
        PARAMETER (IMOFNC = 10)
d35 2
a36 2
        CHARACTER * 7         MODE
        CHARACTER * 8         MOMENU(IMOFNC)
d38 6
a43 5
        DATA MOMENU/'PR ON   ','PR OFF  ',
     &              'ME      ','STA     ',
     &              'TR ON   ','TR OFF  ',
     &              'OP ON   ','OP OFF  ',
     &              'VB ON   ','VB OFF  '/
d55 2
a56 2
           IF (MODE .EQ. MOMENU(I)(:7)) THEN
              GOTO (20, 25, 30, 35, 40, 45, 50, 45, 55,60),I
d73 12
a84 10
     &  '  PR ON '  ,T12, ' PRINTING ON '/
     &	'  PR OFF ' ,T12, ' PRINTING OFF '/
     &	'  ME '     ,T12, ' MODE MENU'/
     &	'  STA '    ,T12, ' STATUS OF MODES '/
     &	'  TR ON   ',T12, ' TRACE ON '/
     &	'  TR OFF  ',T12, ' TRACE OFF '/
     &	'  OP ON   ',T12, ' SHOW OPERATION '/
     &	'  OP OFF  ',T12, ' SHOW OPERATION OFF '/
     &	'  VB ON   ',T12, ' VERBOSE ON '/
     &	'  VB OFF  ',T12, ' VERBOSE OFF '/)
d88 10
a97 8
35      IF (IPRTT.EQ.1)  WRITE(NOUT,9630) MOMENU(1)(:7)
	IF (IPRTT.EQ.0)  WRITE(NOUT,9630) MOMENU(2)(:7)
	IF (NTRACE.EQ.1) WRITE(NOUT,9630) MOMENU(5)(:7)
	IF (NTRACE.EQ.0) WRITE(NOUT,9630) MOMENU(6)(:7)
	IF (NTRACE.LT.0) WRITE(NOUT,9630) MOMENU(7)(:7)
	IF (NTRACE.EQ.0) WRITE(NOUT,9630) MOMENU(8)(:7)
	IF (N_VERBOSE.EQ.1) WRITE(NOUT,9630) MOMENU(9)(:7)
	IF (N_VERBOSE.EQ.0) WRITE(NOUT,9630) MOMENU(10)(:7)
d118 8
@


1.1
log
@Initial revision
@
text
@d26 3
d30 1
@
