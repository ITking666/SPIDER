head	1.32;
access;
symbols
	pre_getangas:1.21
	GPL2010:1.21
	pre_GPL2010:1.20
	pre_var_equation:1.20
	pre_fftwrings:1.20
	pre_opfiles:1.20
	src:1.20
	best-code:1.20
	x-named-regs:1.20
	x:1.20
	v13-00:1.20
	pre_GPL:1.18
	prec_CA:1.18
	noindx:1.18
	Bproc:1.17
	oct21:1.15
	last77:1.12;
locks; strict;
comment	@c @;


1.32
date	2014.12.17.13.52.56;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2014.12.05.14.14.59;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2014.02.25.16.10.04;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2014.02.22.14.52.45;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2013.06.06.18.33.26;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2012.05.14.14.22.52;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2012.05.11.13.36.51;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2012.03.12.15.25.55;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2012.01.12.19.16.40;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2012.01.09.14.32.55;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2012.01.06.16.26.17;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2010.06.24.13.26.07;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2005.10.17.20.03.43;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.17.17.59.04;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2002.03.11.14.07.54;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2000.03.22.18.58.23;	author pawel;	state Exp;
branches;
next	1.16;

1.16
date	2000.03.21.22.33.33;	author pawel;	state Exp;
branches;
next	1.15;

1.15
date	99.09.13.16.12.28;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	99.05.27.20.25.48;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	99.05.27.19.20.31;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	97.10.10.17.47.21;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	97.01.14.18.42.18;	author mladjadj;	state Exp;
branches;
next	1.10;

1.10
date	96.09.24.19.04.42;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	96.09.24.17.10.41;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	96.09.19.16.17.18;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	96.05.03.13.58.17;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	96.02.07.19.30.24;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	96.02.05.16.51.58;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	96.01.16.16.01.30;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.01.03.20.20.04;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	95.12.19.17.59.51;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.01;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.32
log
@prompt for ma x
@
text
@ 
C++********************************************************************
C
C  MASK.F        ADDED INNER BI                   SEP 99 ARDEAN LEITH
C                NXR = -9999999 RDRPIS FLOAT BUG  MAR 12 ARDEAN LEITH          
C                NZR BUG                          MAY 12 ARDEAN LEITH          
C                PROMTS FIXED                     FEB 14 ARDEAN LEITH          
C                ADDED MIN BACKGROUND             DEC 14 ARDEAN LEITH
C                    
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   MASK(LUNI,LUNO,NX,NY,B,FMIN1)
C
C   PARAMETERS:
C        LUNI               LOGICAL UNIT NUMBER OF INPUT FILE    (SENT)
C        LUNO               LOGICAL UNIT NUMBER OF OUTPUT FILE   (SENT)
C        NX,NY,NZ           DIMENSIONS OF FILE                   (SENT)
C        B                  AVERAGE OF INPUT FILE      (SENT / ALTREED)
C        FMIN1              MIN OF INPUT FILE          (SENT)
C
C--********************************************************************

      SUBROUTINE MASK(LUNI,LUNO,NX,NY,NZ,B,FMIN1)

      INCLUDE 'CMBLOCK.INC' 

      INTEGER              :: LUNI,LUNO,NX,NY,NZ 
      REAL                 :: B,FMIN1

      REAL                 :: BUF(NX)

      INTEGER              :: ILIST(3) 
      CHARACTER (LEN=1)    :: MODE,NULL,ANS
      DOUBLE PRECISION     :: DAV,AVC,AVCI

      PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)

      IF (FCHAR(4:4) == 'L') THEN
C        MASK A LINE ACROSS IMAGE
         IF (NZ > 1) THEN
C           3-D FILE
            CALL RDPRI1S(NZR,NOT_USED,'SLICE NUMBER',IRTFLG)
            IF (IRTFLG .NE. 0) RETURN
         ELSE
            NZR = 1
         ENDIF

         CALL RDPRI1S(NYR,NOT_USED,
     &        'LINE NUMBER TO BE MASKED',IRTFLG)
            IF (IRTFLG .NE. 0) RETURN

         CALL RDPRM1S(B,NOT_USED,'BACKGROUND',IRTFLG)
         IF (IRTFLG .NE. 0) RETURN

         IRECT = (NZR - 1) * NY + NYR

         DO I = 1,NY*NZ
            CALL REDLIN(LUNI,BUF,NX,I)

            IF (I == IRECT) THEN
C              MASK THIS LINE 
               BUF = B
            ENDIF
            CALL WRTLIN(LUNO,BUF,NX,I)
         ENDDO
         RETURN          

      ELSE
         RAD  = 0.0
         RADI = 0.0

         IF (FCHAR(4:4) == 'X' .OR.
     &       FCHAR(4:4) == 'Y' .OR.
     &       FCHAR(4:4) == 'Z') THEN
           CALL RDPRM2S(RAD,RADI,NOT_USED,
     &                  'OUTER & INNER HALFWIDTH EXTENTS',IRTFLG)
         ELSE
            CALL RDPRM2S(RAD,RADI,NOT_USED,
     &                   'OUTER & INNER RADII',IRTFLG) 
         ENDIF
         IF (IRTFLG .NE. 0) RETURN

         IF (RAD == 0.0) THEN
C           FOR INNER ONLY MASKING, SET OUTER RADIUS TO HUGE VALUE
            RAD = HUGE(RAD)
         ENDIF

         IF (RAD < 0.0 .OR. RADI < 0.0 .OR. RAD < RADI)  THEN
             CALL ERRT(101,'INCONSISTENT INPUT PARAMETERS',IER)
             RETURN
          ENDIF
       ENDIF

       IF (FCHAR(4:4) == 'X' .OR. 
     &     FCHAR(4:4) == 'Y' .OR.
     &     FCHAR(4:4) == 'Z') THEN

          CALL RDPRMC(MODE,NCHAR,.TRUE.,
     &     'SHARP, COSINE, GAUSSIAN EDGE, OR TRUE GAUSSIAN (S/C/G/T)',
     &      NULL,IRTFLG)
          IF (MODE == 'S') MODE = 'D'
       ELSE
          CALL RDPRMC(MODE,NCHAR,.TRUE.,
     &     'DISK, COSINE, GAUSSIAN EDGE, OR TRUE GAUSSIAN (D/C/G/T)',
     &     NULL,IRTFLG)
       ENDIF
       IF (IRTFLG .NE. 0) RETURN

C       BACKGROUND CHOICES:
C       DAV     BACKGROUND IS SET EQUAL TO THE AVERAGE OF THE
C               IMAGE BEFORE MASKING
C       PREV AV BACKGROUND IS SET EQUAL TO THE AVERAGE OF THE
C               IMAGE AREA PASSED BY THE MASK
C       CIRCUMF BACKGROUND IS SET EQUAL TO THE AVERAGE OF THE 
C               PIXELS ALONG THE MASK'S CIRCUMFERENCE
C       MIN     BACKGROUND IS SET EQUAL TO PREVIOUS FILE MINIMUM
C       EXTERNAL  BACKGROUND IS SET TO A VALUE SUPPLIED EXTERNALLY

        CALL RDPRMC(ANS,NCHAR,.TRUE.,
     &'AVG, PREV AVG, CIRCUMF, MIN, OR EXTERNAL BACKGROUND (A/P/C/M/E)',
     &      NULL,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (ANS == 'E') THEN
           B = 0.0
           CALL RDPRM1S(B,NOT_USED,'BACKGROUND',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

        ELSEIF (ANS == 'M') THEN
           B = FMIN1
           WRITE(NOUT,'(A,1PG12.2)') '  Mask background: ',B
        ENDIF

        NXR = (NX/2) + 1
        NYR = (NY/2) + 1
        NZR = (NZ/2) + 1

        IF (FCHAR(4:4) == 'X') THEN
        
           NYR = 1
           NZR = 1
           CALL RDPRI1S(NXR,NOT_USED,
     &        'X CENTER OF MASK OR <CR> FOR IMAGE CENTER',
     &        IRTFLG)

         ELSEIF ( FCHAR(4:4) == 'Y') THEN
            
           NXR = 1
           NZR = 1
           NVAL = 2
           CALL RDPRAI(ILIST,2,NVAL,ILOW,IHI,
     &         'Y CENTER OF MASK OR <CR> FOR IMAGE CENTER',
     &         .FALSE.,IRTFLG)

           !write(6,*) nval, ilist

           IF     (NVAL == 0) THEN
               NYR = (NY/2) + 1
           ELSEIF (NVAL == 1) THEN
               NYR = ILIST(1)
           ELSE 
               NYR = ILIST(2)
           ENDIF

         ELSEIF ( FCHAR(4:4) == 'Z') THEN
            
           NXR = 1
           NYR = 1
           NVAL = 3
           CALL RDPRAI(ILIST,3,NVAL,ILOW,IHI,
     &         'Z CENTER OF MASK OR <CR> FOR VOLUME CENTER',
     &         .FALSE.,IRTFLG)

           IF     (NVAL == 0) THEN
               NZR = (NZ/2) + 1
           ELSEIF (NVAL == 1) THEN
               NZR = ILIST(1)
           ELSEIF (NVAL == 2) THEN
               NZR = (NZ/2) + 1
           ELSE 
               NZR = ILIST(3)
           ENDIF
        
         ELSEIF (NZ == 1) THEN

            CALL RDPRI2S(NXR,NYR,NOT_USED,
     &         'MASK CENTER LOCATION (X,Y) OR <CR> FOR IMAGE CENTER',
     &         IRTFLG)

         ELSE

            CALL RDPRI3S(NXR,NYR,NZR,NOT_USED,
     &        'MASK CENTER LOCATION (X,Y,Z) OR <CR> FOR VOLUME CENTER',
     &        IRTFLG)
         ENDIF

        IF (IRTFLG .NE. 0) RETURN


        !IF (NXR == HUGE(NXR)) THEN  ! FAILS AS HUGE(NXR) NOW < 0!!
        IF (NXR == -9999999) THEN
           NXR = (NX/2) + 1
           NYR = (NY/2) + 1
           IF (NZ > 1) NZR = (NZ/2) + 1
        ENDIF

C       ALTHOUGH MASK CENTER COORDINATES MAY BE OUTSIDE THE IMAGE
C       ITSELF, CHECK TO BE SURE HE RADIUS IS LARGE ENOUGH SO
C       THAT THE MASK WILL AT LEAST HAVE AN EFFECT ON THE IMAGE.
C       (APPLIES ONLY TO EXCLUSIVE OUTSIDE MASKING)

        IF (RAD > 0) THEN
C          POSITIVE OUTER RADIUS GIVEN
           IF (((NXR + RAD)      <  0.0) .OR.
     &         ((NXR - RAD - NX) >= 0.0) .OR.
     &         ((NYR + RAD)      <  0.0) .OR.
     &         ((NYR - RAD - NY) >= 0.0) .OR.
     &         ((NZR + RAD)      <  0.0) .OR.
     &         ((NZR - RAD-NZ)   >= 0.0)) THEN
              WRITE(NOUT,61)
61            FORMAT(' *** MASK OUTSIDE IMAGE; NO ACTION TAKEN')
              RETURN
           ENDIF

        ELSEIF (RAD <= 0.0) THEN
C          INNER ONLY MASKING, SET OUTER RADIUS TO HUGE VALUE
           RAD = HUGE(RAD)
        ENDIF

        RAD2   = RAD     **2
        RADI2  = RADI    **2
        RAD2P  = (RAD+1) **2
        RADI2P = (RADI-1)**2

C       RAD2P IS USED TO DEFINE A NON-EMPTY SET OF POINTS
C       ALONG THE MASK'S CIRCUMFERENCE

        IF (ANS == 'P' .OR. ANS == 'C') THEN
           DAV   = 0.0
           NAV   = 0.0
           AVC   = 0.0
           NAVC  = 0.0
           AVCI  = 0.0
           NAVCI = 0.0

           DO  J = 1,NZ
             FI2 = FLOAT(J-NZR)**2

             DO  I = 1,NY
               FI1 = FLOAT(I-NYR)**2 + FI2
               CALL REDLIN(LUNI,BUF,NX,I+(J-1)*NY)

               DO  K = 1,NX
                 CRAD2 = FI1 + FLOAT(K-NXR)**2
                 IF (CRAD2 <= RAD2 .AND. CRAD2 >= RADI2) THEN
                    DAV = DAV + BUF(K)
                    NAV = NAV + 1
                 ENDIF

C                PROVISION FOR CIRCUMFERENCE OPTION
                 IF (ANS == 'C') THEN
                    IF (CRAD2 >= RAD2 .AND. CRAD2 <= RAD2P) THEN
C                      FIND OUTER CIRCUMFERENCE
                       AVC  = AVC + BUF(K)
                       NAVC = NAVC + 1
                    ENDIF

                    IF (RADI2 > 0.0 .AND.
     &                 CRAD2 >= RADI2P .AND. CRAD2 <= RADI2) THEN
C                      FIND INNER CIRCUMFERENCE
                       AVCI  = AVCI  + BUF(K)
                       NAVCI = NAVCI + 1
                    ENDIF
                 ENDIF
               ENDDO
            ENDDO
          ENDDO

           DAV = DAV / NAV
           B   = DAV
           IF (ANS == 'C') THEN
              IF (NAVC >  0) THEN    
                 B = AVC / NAVC
                 WRITE(NOUT,21) B
21               FORMAT('  AVERAGE ALONG OUTER CIRCUMFERENCE:',1PG12.4)
              ENDIF

              IF (NAVCI > 0) THEN
                 BI = AVCI / NAVCI
                 WRITE(NOUT,22) BI
22               FORMAT('  AVERAGE ALONG INNER CIRCUMFERENCE:',1PG12.4)
              ENDIF
           ENDIF
        ENDIF

C       COSINE, GAUSSIAN OR STRAIGHT CUTOFF (DISK) ...
C       MASKS IN ONE DIRECTION
        IF (FCHAR(4:4)     == 'X') THEN
           SWITCHZ = 0.0
           SWITCHY = 0.0
           SWITCHX = 1.0

        ELSEIF (FCHAR(4:4) == 'Y') THEN
           SWITCHZ = 0.0
           SWITCHY = 1.0
           SWITCHX = 0.0

        ELSEIF (FCHAR(4:4) == 'Z') THEN
           SWITCHZ = 1.0
           SWITCHY = 0.0
           SWITCHX = 0.0

        ELSE
           SWITCHZ = 1.0
           SWITCHY = 1.0
           SWITCHX = 1.0
        ENDIF

        IF (MODE == 'C' ) THEN
C          COSINE EDGE MASKING

           CALL RDPRM1S(HW,NOT_USED,'FALLOFF WIDTH',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           DO  J = 1,NZ
            FI2 = FLOAT(J-NZR)**2*SWITCHZ
            DO  I = 1,NY
              FI1 = FLOAT(I-NYR)**2 *SWITCHY+FI2
              CALL REDLIN(LUNI,BUF,NX,I+(J-1)*NY)

              DO  K = 1,NX
                 CRAD2 = FI1 + SWITCHX * FLOAT(K-NXR)**2
                 IF (CRAD2 > RAD2) THEN
                    SRAD2  = SQRT(CRAD2)
                    WGH    =
     &              (1.0+COS(QUADPI*AMIN1(1.0,ABS(SRAD2-RAD)/HW)))*0.5
                    BUF(K) = B + (BUF(K)-B) * WGH

                 ELSEIF (CRAD2 < RADI2) THEN
                    SRAD2 = SQRT(CRAD2)
                    WGH   =
     &              (1.0+COS(QUADPI*AMIN1(1.0,ABS(SRAD2-RADI)/HW)))*0.5
                 BUF(K) = B + (BUF(K)-B) * WGH
                 ENDIF
              ENDDO
             CALL WRTLIN(LUNO,BUF,NX,I+(J-1)*NY)
            ENDDO
           ENDDO

        ELSE IF (MODE == 'G' ) THEN
C          GAUSSIAN EDGE MASKING

           CALL RDPRM1S(HW,NOT_USED,'FALLOFF HALFWIDTH',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           HW = -1./(HW**2)
           DO  J = 1,NZ
            FI2 = FLOAT(J-NZR)**2 * SWITCHZ

            DO  I = 1,NY
              FI1 = FLOAT(I-NYR)**2 * SWITCHY + FI2
              CALL REDLIN(LUNI,BUF,NX,I+(J-1)*NY)

              DO  K = 1,NX
                 CRAD2 = FI1 + SWITCHX*FLOAT(K-NXR)**2
                 IF (CRAD2 > RAD2) THEN
                    SRAD2  = SQRT(CRAD2)
                    WGH    = HW*(SRAD2-RAD)**2

                    IF (WGH < -50.0)  THEN
                       WGH = 0.0
                    ELSE
                       WGH = EXP(WGH)
                    ENDIF
                    BUF(K) = B + (BUF(K)-B) * WGH

                 ELSEIF (CRAD2 < RADI2) THEN
                    SRAD2  = SQRT(CRAD2)
                    WGH = HW * (SRAD2-RADI)**2
                    IF (WGH < -50.0)  THEN
                       WGH = 0.0
                    ELSE
                       WGH = EXP(WGH)
                    ENDIF
                    BUF(K) = B+(BUF(K)-B) * WGH
                 ENDIF
              ENDDO
             CALL WRTLIN(LUNO,BUF,NX,I+(J-1)*NY)
            ENDDO
          ENDDO

        ELSE IF (MODE == 'T' ) THEN
C          TRUE GAUSSIAN MASKING
           IF (RADI .NE. 0.0)  THEN
              CALL  ERRT(101,
     &           ' NO INNER MASKING FOR TRUE GAUSSIAN MASK',IER)
              RETURN
           ENDIF

           HW = -1.0 / (RAD**2)
           DO  J = 1,NZ
             FI2 = SWITCHZ*FLOAT(J-NZR)**2

             DO  I = 1,NY
               FI1 = SWITCHY*FLOAT(I-NYR)**2+FI2
               CALL REDLIN(LUNI,BUF,NX,I+(J-1)*NY)

               DO K=1,NX
                 CRAD2  = (FI1+SWITCHX*FLOAT(K-NXR)**2)*HW
                 IF (CRAD2 < -50.0)  THEN
                    BUF(K) = B
                 ELSE
                    BUF(K) = B + (BUF(K)-B) * EXP(CRAD2)
                 ENDIF
               ENDDO

               CALL WRTLIN(LUNO,BUF,NX,I+(J-1)*NY)
             ENDDO
           ENDDO

        ELSE
C          DISK MASKING
           DO  J = 1,NZ
             FI2 = SWITCHZ * FLOAT(J-NZR)**2
             DO  I = 1,NY
               FI1 = SWITCHY * FLOAT(I-NYR)**2 + FI2
               CALL REDLIN(LUNI,BUF,NX,I+(J-1)*NY)

               DO  K = 1,NX
                  CRAD2 = FI1 + SWITCHX * FLOAT(K-NXR)**2
                  IF (CRAD2 > RAD2 .OR. CRAD2 < RADI2) BUF(K) = B
                  IF (ANS == 'C'  .AND. CRAD2 < RADI2) BUF(K) = BI
               ENDDO

               CALL WRTLIN(LUNO,BUF,NX,I+(J-1)*NY)
             ENDDO
           ENDDO
        ENDIF

        END

@


1.31
log
@min mask
@
text
@d38 1
a38 1
C        B		    AVERAGE OF INPUT FILE      (SENT / ALTREED)
d112 1
a112 1
      ENDIF
d114 10
a123 1
        CALL RDPRMC(MODE,NCHAR,.TRUE.,
d126 2
a127 2
        IF (IRTFLG .NE. 0) RETURN

d130 8
a137 8
C	DAV	BACKGROUND IS SET EQUAL TO THE AVERAGE OF THE
C		IMAGE BEFORE MASKING
C	PREV AV	BACKGROUND IS SET EQUAL TO THE AVERAGE OF THE
C		IMAGE AREA PASSED BY THE MASK
C	CIRCUMF	BACKGROUND IS SET EQUAL TO THE AVERAGE OF THE 
C		PIXELS ALONG THE MASK'S CIRCUMFERENCE
C	MIN	BACKGROUND IS SET EQUAL TO PREVIOUS FILE MINIMUM
C	EXTERNAL  BACKGROUND IS SET TO A VALUE SUPPLIED EXTERNALLY
d139 1
a139 1
	CALL RDPRMC(ANS,NCHAR,.TRUE.,
d144 1
a144 1
	IF (ANS == 'E') THEN
d146 1
a146 1
	   CALL RDPRM1S(B,NOT_USED,'BACKGROUND',IRTFLG)
d149 1
a149 1
	ELSEIF (ANS == 'M') THEN
d151 1
a151 1
           WRITE(6,'(A,ES12.2)') '  MASK BACKGROUND: ',B
d234 1
a234 1
	   IF (((NXR + RAD)      <  0.0) .OR.
d241 1
a241 1
61	      FORMAT(' *** MASK OUTSIDE IMAGE; NO ACTION TAKEN')
d252 2
a253 2
	RAD2P  = (RAD+1) **2
	RADI2P = (RADI-1)**2
d260 5
a264 5
	   NAV   = 0.0
	   AVC   = 0.0
	   NAVC  = 0.0
	   AVCI  = 0.0
	   NAVCI = 0.0
d295 3
a297 3
	       ENDDO
	    ENDDO
	  ENDDO
d300 2
a301 2
	   B   = DAV
	   IF (ANS == 'C') THEN
d313 1
a313 1
	   ENDIF
d318 19
a336 19
	IF (FCHAR(4:4)     == 'X') THEN
	   SWITCHZ = 0.0
	   SWITCHY = 0.0
	   SWITCHX = 1.0

	ELSEIF (FCHAR(4:4) == 'Y') THEN
	   SWITCHZ = 0.0
	   SWITCHY = 1.0
	   SWITCHX = 0.0

	ELSEIF (FCHAR(4:4) == 'Z') THEN
	   SWITCHZ = 1.0
	   SWITCHY = 0.0
	   SWITCHX = 0.0

	ELSE
	   SWITCHZ = 1.0
	   SWITCHY = 1.0
	   SWITCHX = 1.0
d339 1
a339 1
	IF (MODE == 'C' ) THEN
d342 1
a342 1
	   CALL RDPRM1S(HW,NOT_USED,'FALLOFF WIDTH',IRTFLG)
d359 1
a359 1
		 ELSEIF (CRAD2 < RADI2) THEN
d361 1
a361 1
		    WGH   =
d364 2
a365 2
	         ENDIF
	      ENDDO
d367 2
a368 2
	    ENDDO
	   ENDDO
d373 1
a373 1
	   CALL RDPRM1S(HW,NOT_USED,'FALLOFF HALFWIDTH',IRTFLG)
d388 1
a388 1
		    WGH    = HW*(SRAD2-RAD)**2
d390 5
a394 5
		    IF (WGH < -50.0)  THEN
		       WGH = 0.0
		    ELSE
		       WGH = EXP(WGH)
		    ENDIF
d397 1
a397 1
		 ELSEIF (CRAD2 < RADI2) THEN
d399 6
a404 6
		    WGH = HW * (SRAD2-RADI)**2
		    IF (WGH < -50.0)  THEN
		       WGH = 0.0
		    ELSE
		       WGH = EXP(WGH)
		    ENDIF
d406 2
a407 2
	         ENDIF
	      ENDDO
d409 2
a410 2
	    ENDDO
	  ENDDO
d414 2
a415 2
	   IF (RADI .NE. 0.0)  THEN
	      CALL  ERRT(101,
d417 2
a418 2
	      RETURN
	   ENDIF
d430 1
a430 1
		 IF (CRAD2 < -50.0)  THEN
d432 1
a432 1
		 ELSE
d434 1
a434 1
		 ENDIF
d437 3
a439 3
	       CALL WRTLIN(LUNO,BUF,NX,I+(J-1)*NY)
	     ENDDO
	   ENDDO
d456 3
a458 3
	     ENDDO
	   ENDDO
	ENDIF
@


1.30
log
@rewrite
@
text
@d8 2
a9 1
C                     
d32 1
a32 1
C   MASK(LUNI,LUNO,NX,NY,B)
d39 1
d43 1
a43 1
        SUBROUTINE MASK(LUNI,LUNO,NX,NY,NZ,B)
d45 1
a45 1
        INCLUDE 'CMBLOCK.INC' 
d47 2
a48 2
        INTEGER              :: LUNI,LUNO,NX,NY,NZ 
        REAL                 :: B
d50 1
a50 1
        REAL                 :: BUF(NX)
d52 3
a54 3
        INTEGER              :: ILIST(3) 
        CHARACTER (LEN=1)    :: MODE,NULL,ANS
        DOUBLE PRECISION     :: DAV,AVC,AVCI
d56 1
a56 1
        PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
d127 1
d131 1
a131 1
     &'AVG, PREV AVG, CIRCUMF, OR EXTERNAL BACKGROUND (A/P/C/E)',
d139 4
d166 1
a166 1
           write(6,*) nval, ilist
@


1.29
log
@extent not radii
@
text
@d7 1
d13 1
a13 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d50 1
d89 1
d93 2
a94 1
           CALL RDPRM2S(RAD,RADI,NOT_USED,'OUTER & INNER EXTENT',IRTFLG)
d96 2
a97 1
            CALL RDPRM2S(RAD,RADI,NOT_USED,'OUTER & INNER RADII',IRTFLG) 
d101 1
a101 1
         IF (RAD .EQ. 0.0) THEN
d128 1
a128 1
     &'AVG, PREV AVG, CIRCUMFERANCE, OR EXTERNAL BACKGROUND? (A/P/C/E)',
d138 10
a147 5
        NXR = -9999999
        NZR = 1
        IF (NZ == 1) THEN    ! IMAGE
           CALL RDPRIS(NXR,NYR,NOT_USED,
     &        'MASK CENTER,  IX,IY (OR <CR> FOR IMAGE CENTER)',
d149 49
a197 3
        ELSE                 ! VOLUME
           CALL RDPRI3S(NXR,NYR,NZR,NOT_USED,
     &        'MASK CENTER,  IX,IY,IZ (OR <CR> FOR VOLUME CENTER)',
d199 2
a200 1
        ENDIF
d289 1
a289 1
21               FORMAT('  Average along outer circumference:',1PG12.4)
d295 1
a295 1
22               FORMAT('  Average along inner circumference:',1PG12.4)
@


1.28
log
@*** empty log message ***
@
text
@d50 1
a50 1
	DOUBLE PRECISION     :: DAV,AVC,AVCI
d52 1
a52 1
	PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
d54 1
a54 1
	IF (FCHAR(4:4) == 'L') THEN
d68 1
a68 1
	 CALL RDPRM1S(B,NOT_USED,'BACKGROUND',IRTFLG)
d87 7
a93 1
         CALL RDPRM2S(RAD,RADI,NOT_USED,'OUTER & INNER RADII',IRTFLG)
d96 1
a96 1
	 IF (RAD .EQ. 0.0) THEN
d101 4
a104 4
	 IF (RAD < 0.0 .OR. RADI < 0.0 .OR. RAD < RADI)  THEN
	    CALL ERRT(101,'INCONSISTENT INPUT PARAMETERS',IER)
	    RETURN
	 ENDIF
d282 1
a282 1
		    WGH    =
@


1.27
log
@RDPRI3S(NXR,NYR,NZR bug
@
text
@d58 1
a58 1
            CALL RDPRI1S(NZR,NOT_USED,'ENTER SLICE NUMBER',IRTFLG)
d65 1
a65 1
     &        'ENTER LINE NUMBER TO BE MASKED',IRTFLG)
d68 1
a68 1
	 CALL RDPRM1S(B,NOT_USED,'ENTER BACKGROUND',IRTFLG)
d102 1
a102 1
     &     '(D)isk, (C)osine, (G)aussian edge, or (T)rue Gaussian',
d117 2
a118 1
     &   '(A)V, (P)REV AV, (C)IRCUMF, OR (E)XTERNAL',NULL,IRTFLG)
d123 1
a123 1
	   CALL RDPRM1S(B,NOT_USED,'ENTER BACKGROUND',IRTFLG)
d129 1
a129 1
        IF (NZ == 1) THEN
d131 3
a133 3
     &      'MASK CENTER COORDINATES  IX,IY (OR <CR> FOR IMAGE CENTER)',
     &       IRTFLG)
        ELSE
d135 2
a136 2
     &   'MASK CENTER COORDINATES  IX,IY,IZ (OR <CR> FOR IMAGE CENTER)',
     &     IRTFLG)
d140 1
d226 1
a226 1
21               FORMAT('  AVERAGE ALONG OUTER CIRCUMFERENCE: ',1PG12.4)
d232 1
a232 1
22               FORMAT('  AVERAGE ALONG INNER CIRCUMFERENCE: ',1PG12.4)
d263 1
a263 1
	   CALL RDPRM1S(HW,NOT_USED,'WIDTH',IRTFLG)
d294 1
a294 1
	   CALL RDPRM1S(HW,NOT_USED,'HALFWIDTH',IRTFLG)
d336 2
a337 2
	      WRITE(NOUT,*) ' NO INNER MASKING FOR TRUE GAUSSIAN MASK'
	      CALL  ERRT(14,'MA',IER)
@


1.26
log
@results file formatting
@
text
@d6 2
a7 1
                     
d133 1
a133 1
           CALL RDPRI3S(NXR,NYR,NOT_USED,
d147 1
a147 1
C       ITSELF, CHECK TO BE SURE THAT THE RADIUS IS LARGE ENOUGH SO
@


1.25
log
@NXR = -9999999 RDRPIS FLOAT BUG
@
text
@d223 1
a223 1
21               FORMAT(' AVERAGE ALONG OUTER CIRCUMFERENCE: ',G12.4)
d229 1
a229 1
22               FORMAT(' AVERAGE ALONG INNER CIRCUMFERENCE: ',G12.4)
@


1.24
log
@==
@
text
@d4 3
a6 2
C  MASK.F        ADDED INNER BI SPETP 99 ARDEAN LEITH
C                       
d11 1
a11 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d125 1
a125 1
        NXR = HUGE(NXR)
d138 2
a139 1
        IF (NXR == HUGE(NXR)) THEN
@


1.23
log
@<CR> for center, NX, many cosmetic, rdprIs
@
text
@d57 1
a57 1
            IF (IRTFLG /= 0) RETURN
d64 1
a64 1
            IF (IRTFLG /= 0) RETURN
d67 1
a67 1
         IF (IRTFLG /= 0) RETURN
d86 1
a86 1
         IF (IRTFLG /= 0) RETURN
d102 1
a102 1
        IF (IRTFLG /= 0) RETURN
d116 1
a116 1
        IF (IRTFLG /= 0) RETURN
d121 1
a121 1
           IF (IRTFLG /= 0) RETURN
d135 1
a135 1
        IF (IRTFLG /= 0) RETURN
d259 1
a259 1
           IF (IRTFLG /= 0) RETURN
d290 1
a290 1
           IF (IRTFLG /= 0) RETURN
d330 1
a330 1
	   IF (RADI /= 0.0)  THEN
d366 1
a366 1
                  CRAD2 = FI1 + SWITCHX*FLOAT(K-NXR)**2
@


1.22
log
@iz...
@
text
@d28 1
a28 1
C   MASK(LUNI,LUNO,NSAM,NROW,B)
d33 1
a33 1
C        NSAM,NROW,NSLICE   DIMENSIONS OF FILE                   (SENT)
d38 1
a38 1
        SUBROUTINE MASK(LUNI,LUNO,NSAM,NROW,NSLICE,B)
d42 7
a48 1
        DIMENSION           BUF(NSAM)
d52 1
a52 4
        CHARACTER * 1    MODE,NULL,ANS
	DOUBLE PRECISION DAV,AVC,AVCI

	IF (FCHAR(4:4) .EQ. 'L') THEN
d54 1
a54 1
         IF (NSLICE .GT. 1) THEN
d56 2
a57 1
            CALL RDPRMI(NSLICER,NDUM,NOT_USED,'ENTER SLICE NUMBER')
d59 1
a59 1
            NSLICER = 1
d62 6
a67 2
         CALL RDPRMI(NROWR,NDUM,NOT_USED,
     &        'ENTER LINE NUMBER TO BE MASKED')
d69 1
a69 2
	 CALL RDPRM(B,NOT_USED,'ENTER BACKGROUND')
         IRECT = (NSLICER - 1) * NROW + NROWR
d71 4
a74 3
         DO I = 1,NROW*NSLICE
            CALL REDLIN(LUNI,BUF,NSAM,I)
            IF (I .EQ. IRECT) THEN
d76 1
a76 1
                  BUF = B
d78 1
a78 1
            CALL WRTLIN(LUNO,BUF,NSAM,I)
a79 1
               
d86 2
a87 1
         IF (IRTFLG .NE. 0) RETURN
d90 1
a90 1
            RAD = NSAM * 20
d92 3
a94 2
	 IF (RAD.LT.0.0 .OR. RADI.LT.0.0 .OR. RAD.LT.RADI)  THEN
	    CALL ERRT(14,'MA',IER)
d102 1
a102 1
        IF (IRTFLG .NE. 0) RETURN
a105 1

d108 1
a108 1
C	PREC AV	BACKGROUND IS SET EQUAL TO THE AVERAGE OF THE
d115 2
a116 1
     &   '(A)V, (P)REC AV, (C)IRCUMF, OR (E)XTERNAL',NULL,IRTFLG)
d118 5
a122 1
	IF (ANS .EQ. 'E') CALL RDPRM(B,NOT_USED,'ENTER BACKGROUND')
d124 6
a129 5
        CALL RDPRMI(NSAMR,NROWR,NOT_USED,
     &              'MASK CENTER COORDINATES (IX, IY)')
        IF (NSLICE .GT. 1) THEN
           CALL RDPRMI(NSLICER,NDUMP,NOT_USED,
     &                 'MASK CENTER COORDINATE (IZ)')
d131 11
a141 2
           NSLICER = 1
	ENDIF
d143 1
a143 1
C       ALTHOUGH THE MASK CENTER COORDINATES MAY BE OUTSIDE THE IMAGE
d148 1
a148 1
        IF (RAD .GT. 0) THEN
d150 6
a155 6
	   IF (((NSAMR + RAD)          .LT. 0.0) .OR.
     &         ((NSAMR - RAD - NSAM)   .GE. 0.0) .OR.
     &         ((NROWR + RAD)          .LT. 0.0) .OR.
     &         ((NROWR - RAD - NROW)   .GE. 0.0) .OR.
     &         ((NSLICER + RAD)        .LT. 0.0) .OR.
     &         ((NSLICER - RAD-NSLICE) .GE. 0.0)) THEN
d160 2
a161 1
        ELSEIF (RAD .LE. 0.0) THEN
d163 1
a163 1
           RAD = NSAM * 20
d166 3
a168 3
        RAD2   = RAD**2
        RADI2  = RADI**2
	RAD2P  = (RAD+1)**2
d174 1
a174 2
        IF (ANS .EQ. 'P' .OR. ANS .EQ. 'C') THEN
C          "P" OR "C" OPTION
d182 10
a191 8
           DO  J = 1,NSLICE
             FI2 = FLOAT(J-NSLICER)**2
             DO  I = 1,NROW
               FI1 = FLOAT(I-NROWR)**2+FI2
               CALL REDLIN(LUNI,BUF,NSAM,I+(J-1)*NROW)
               DO  K = 1,NSAM
                 CRAD2 = FI1 + FLOAT(K-NSAMR)**2
                 IF (CRAD2 .LE. RAD2 .AND. CRAD2 .GE. RADI2) THEN
d197 2
a198 2
                 IF (ANS .EQ. 'C') THEN
                    IF (CRAD2 .GE. RAD2 .AND. CRAD2 .LE. RAD2P) THEN
d203 3
a205 2
                    IF (RADI2 .GT. 0.0 .AND.
     &                 CRAD2 .GE. RADI2P .AND. CRAD2 .LE. RADI2) THEN
d207 1
a207 1
                       AVCI  = AVCI + BUF(K)
d217 2
a218 2
	   IF (ANS .EQ. 'C') THEN
              IF (NAVC .GT. 0) THEN    
d223 2
a224 1
              IF (NAVCI .GT. 0) THEN
d234 1
a234 1
	IF (FCHAR(4:4) .EQ. 'X') THEN
d238 2
a239 1
	ELSEIF (FCHAR(4:4) .EQ. 'Y') THEN
d243 2
a244 1
	ELSEIF (FCHAR(4:4) .EQ. 'Z') THEN
d248 1
d255 1
a255 1
	IF (MODE .EQ. 'C' ) THEN
d258 12
a269 9
	   CALL RDPRM(HW,NOT_USED,'WIDTH')
           DO  J = 1,NSLICE
            FI2 = FLOAT(J-NSLICER)**2*SWITCHZ
            DO  I = 1,NROW
              FI1 = FLOAT(I-NROWR)**2 *SWITCHY+FI2
              CALL REDLIN(LUNI,BUF,NSAM,I+(J-1)*NROW)
              DO  K = 1,NSAM
                 CRAD2 = FI1 + SWITCHX*FLOAT(K-NSAMR)**2
                 IF (CRAD2 .GT. RAD2) THEN
d273 1
a273 1
                    BUF(K) = B+(BUF(K)-B)*WGH
d275 1
a275 1
		 ELSEIF (CRAD2 .LT. RADI2) THEN
d279 1
a279 1
                 BUF(K) = B+(BUF(K)-B)*WGH
d282 1
a282 1
             CALL WRTLIN(LUNO,BUF,NSAM,I+(J-1)*NROW)
d286 1
a286 1
        ELSE IF (MODE .EQ. 'G' ) THEN
d289 3
a291 1
	   CALL RDPRM(HW,NOT_USED,'HALFWIDTH')
d293 10
a302 8
           DO  J = 1,NSLICE
            FI2 = FLOAT(J-NSLICER)**2*SWITCHZ
            DO  I = 1,NROW
              FI1 = FLOAT(I-NROWR)**2 *SWITCHY + FI2
              CALL REDLIN(LUNI,BUF,NSAM,I+(J-1)*NROW)
              DO  K = 1,NSAM
                 CRAD2 = FI1 + SWITCHX*FLOAT(K-NSAMR)**2
                 IF (CRAD2.GT.RAD2) THEN
d305 2
a306 1
		    IF (WGH .LT. -50.0)  THEN
d311 3
a313 2
                    BUF(K) = B+(BUF(K)-B)*WGH
		 ELSEIF (CRAD2 .LT. RADI2) THEN
d315 2
a316 2
		    WGH=HW*(SRAD2-RADI)**2
		    IF (WGH.LT.-50.0)  THEN
d321 1
a321 1
                    BUF(K) = B+(BUF(K)-B)*WGH
d324 1
a324 1
             CALL WRTLIN(LUNO,BUF,NSAM,I+(J-1)*NROW)
d328 1
a328 1
        ELSE IF (MODE .EQ. 'T' ) THEN
d330 1
a330 1
	   IF (RADI .NE. 0.0)  THEN
d337 10
a346 8
           DO  J = 1,NSLICE
             FI2 = SWITCHZ*FLOAT(J-NSLICER)**2
             DO  I = 1,NROW
               FI1 = SWITCHY*FLOAT(I-NROWR)**2+FI2
               CALL REDLIN(LUNI,BUF,NSAM,I+(J-1)*NROW)
               DO K=1,NSAM
                 CRAD2  = (FI1+SWITCHX*FLOAT(K-NSAMR)**2)*HW
		 IF (CRAD2.LT.-50.0)  THEN
d349 1
a349 1
                    BUF(K) = B+(BUF(K)-B)*EXP(CRAD2)
d352 2
a353 1
	       CALL WRTLIN(LUNO,BUF,NSAM,I+(J-1)*NROW)
d356 1
d359 11
d371 1
a371 11
           DO  J = 1,NSLICE
             FI2 = SWITCHZ*FLOAT(J-NSLICER)**2
             DO  I = 1,NROW
               FI1 = SWITCHY*FLOAT(I-NROWR)**2+FI2
               CALL REDLIN(LUNI,BUF,NSAM,I+(J-1)*NROW)
               DO  K = 1,NSAM
                  CRAD2 = FI1 + SWITCHX*FLOAT(K-NSAMR)**2
                  IF (CRAD2.GT.RAD2 .OR. CRAD2.LT.RADI2) BUF(K) = B
                  IF (ANS .EQ. 'C' .AND. CRAD2 .LT. RADI2) BUF(K) = BI
               ENDDO
               CALL WRTLIN(LUNO,BUF,NSAM,I+(J-1)*NROW)
d374 1
a375 1
	ENDIF
@


1.21
log
@GPL_2010
@
text
@d112 1
a112 1
     &              'MASK CENTER COORDINATES (NSAM, NROW)')
d115 1
a115 1
     &                 'MASK CENTER COORDINATE (NSLICE)')
@


1.20
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.19
log
@HRI GPL License used
@
text
@a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.18
log
@nloop,iloop_removed
@
text
@d8 24
@


1.17
log
@gaussian edge fixed
@
text
@d40 1
a40 1
            CALL RDPRMI(NSLICER,NDUM,NLOOP,ILOOP,'ENTER SLICE NUMBER')
d45 1
a45 1
         CALL RDPRMI(NROWR,NDUM,NLOOP,ILOOP,
d48 1
a48 1
	 CALL RDPRM(B,NLOOP,ILOOP,'ENTER BACKGROUND')
d65 1
a65 1
         CALL RDPRM2S(RAD,RADI,NLOOP,ILOOP,'OUTER & INNER RADII',IRTFLG)
d96 1
a96 1
	IF (ANS .EQ. 'E') CALL RDPRM(B,NLOOP,ILOOP,'ENTER BACKGROUND')
d98 1
a98 1
        CALL RDPRMI(NSAMR,NROWR,NLOOP,ILOOP,
d101 1
a101 1
           CALL RDPRMI(NSLICER,NDUMP,NLOOP,ILOOP,
d215 1
a215 1
	   CALL RDPRM(HW,NLOOP,ILOOP,'WIDTH')
d243 1
a243 1
	   CALL RDPRM(HW,NLOOP,ILOOP,'HALFWIDTH')
@


1.16
log
@corrected for 3D
@
text
@d29 1
a29 1
        COMMON           BUF(1)
d55 1
a55 3
               DO J = 1,NSAM
                  BUF(J) = B
               ENDDO
d248 1
a248 1
              FI1 = FLOAT(I-NROWR)**2 *SWITCHY
a318 1
        RETURN
@


1.15
log
@disk, circmference background changed
@
text
@d222 1
a222 1
              CALL REDLIN(LUNI,BUF,NSAM,I)
d238 1
a238 1
             CALL WRTLIN(LUNO,BUF,NSAM,I)
d251 1
a251 1
              CALL REDLIN(LUNI,BUF,NSAM,I)
d274 1
a274 1
             CALL WRTLIN(LUNO,BUF,NSAM,I)
@


1.14
log
@T corrected
@
text
@d4 10
a13 1
C  MASK.FOR
a14 10
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981 , DIVISION OF LABORATORIES AND                      *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE DIVISION OF    *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE DIVISION OF LABORATORIES AND RESEARCH			   *
C **************************************************************************
C
d18 4
a21 4
C        LUNI               LOGICAL UNIT NUMBER OF INPUT FILE
C        LUNO               LOGICAL UNIT NUMBER OF OUTPUT FILE
C        NSAM,NROW,NSLICE   DIMENSIONS OF FILE
C        B		    AVERAGE OF INPUT FILE
d31 2
d34 1
a34 2
	DOUBLE PRECISION DAV,AVC
	PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
d54 1
d56 1
a56 1
                 BUF(J) = B
a61 3
C        TELL LABEL THAT FMIN & FMAX ARE NOT CALCULATED YET
         CALL SETPRM(LUNO,NSAM,NROW,0.0,0.0,0.0,'U')

d70 2
a71 2
C          FOR INNER ONLY MASKING, SET OUTER RADIUS TO HUGE VALUE
           RAD = NSAM * 20
d73 3
a75 3
	 IF(RAD.LT.0.0.OR.RADI.LT.0.0.OR.RAD.LT.RADI)  Then
	 CALL  ERRT(14,'MA',IER)
	 RETURN
d116 10
a125 17
           CKSAM1 = NSAMR + RAD
	   IF (CKSAM1  .LT. 0.0) GOTO 60
	   CKSAM2 = NSAMR - RAD - NSAM
	   IF (CKSAM2  .GE. 0.0) GOTO 60
	   CKROW1 = NROWR+RAD
	   IF (CKROW1  .LT. 0.0) GOTO 60
	   CKROW2 = NROWR - RAD - NROW
	   IF (CKROW2  .GE. 0.0) GOTO 60
	   CKSLIC1 = NSLICER + RAD
	   IF (CKSLIC1 .LT. 0.0) GOTO 60
	   CKSLIC2 = NSLICER - RAD-NSLICE
	   IF (CKSLIC2 .GE. 0.0) GOTO 60
	   GOTO  62
60		WRITE(NOUT,61)
61	FORMAT(' *** MASK OUTSIDE IMAGE; NO ACTION TAKEN')
		RETURN
62	CONTINUE
d127 1
a127 1
C          FOR INNER ONLY MASKING, SET OUTER RADIUS TO HUGE VALUE
d131 4
a134 3
        RAD2  = RAD**2
        RADI2 = RADI**2
	RAD2P = (RAD+1)**2
d142 1
a142 1
	   FNAV  = 0.0
d144 4
a147 1
	   FNAVC = 0.0
d156 2
a157 2
                   DAV  = DAV + BUF(K)
                   FNAV = FNAV + 1.0
d161 12
a172 5

                 IF (ANS .EQ. 'C' .AND. 
     &              CRAD2 .GE. RAD2 .AND. CRAD2 .LE. RAD2P) THEN
                    AVC   = AVC + BUF(K)
                    FNAVC = FNAVC + 1.0
d178 1
a178 1
           DAV = DAV / FNAV
d180 11
a190 4
	   IF (ANS .EQ. 'C')THEN
              B = AVC / FNAVC
              WRITE(NOUT,21) B
21            FORMAT(' AVERAGE ALONG CIRCUMFERENCE ',G12.4)
d195 18
a212 18
C  Masks in one direction
	   IF (FCHAR(4:4) .EQ. 'X') THEN
	        SWITCHZ = 0.0
	        SWITCHY = 0.0
		SWITCHX = 1.0
           ELSEIF (FCHAR(4:4) .EQ. 'Y') THEN
	        SWITCHZ = 0.0
	        SWITCHY = 1.0
		SWITCHX = 0.0
           ELSEIF (FCHAR(4:4) .EQ. 'Z') THEN
	        SWITCHZ = 1.0
	        SWITCHY = 0.0
		SWITCHX = 0.0
	   ELSE
	        SWITCHZ = 1.0
	        SWITCHY = 1.0
		SWITCHX = 1.0
	   ENDIF
d225 10
a234 3
                 IF(CRAD2.GT.RAD2) THEN
                 SRAD2  = SQRT(CRAD2)
		 WGH=(1.0+COS(QUADPI*AMIN1(1.0,ABS(SRAD2-RAD)/HW)))*0.5
a235 4
		 ELSEIF(CRAD2.LT.RADI2) THEN
                 SRAD2  = SQRT(CRAD2)
		 WGH=(1.0+COS(QUADPI*AMIN1(1.0,ABS(SRAD2-RADI)/HW)))*0.5
                 BUF(K) = B+(BUF(K)-B)*WGH
d254 18
a271 18
                 IF(CRAD2.GT.RAD2) THEN
                  SRAD2  = SQRT(CRAD2)
		  WGH=HW*(SRAD2-RAD)**2
		  IF(WGH.LT.-50.0)  THEN
		   WGH=0.0
		  ELSE
		   WGH=EXP(WGH)
		  ENDIF
                  BUF(K) = B+(BUF(K)-B)*WGH
		 ELSEIF(CRAD2.LT.RADI2) THEN
                  SRAD2  = SQRT(CRAD2)
		  WGH=HW*(SRAD2-RADI)**2
		  IF(WGH.LT.-50.0)  THEN
		   WGH=0.0
		  ELSE
		   WGH=EXP(WGH)
		  ENDIF
                  BUF(K) = B+(BUF(K)-B)*WGH
d280 4
a283 4
	   IF(RADI.NE.0.0)  THEN
	 WRITE(NOUT,*)  ' NO INNER MASKING FOR TRUE GAUSSIAN MASK'
		CALL  ERRT(14,'MA',IER)
		RETURN
d286 1
a286 1
           HW =-1.0 / (RAD**2)
d294 2
a295 2
		 IF(CRAD2.LT.-50.0)  THEN
                 BUF(K) = B
d297 1
a297 1
                 BUF(K) = B+(BUF(K)-B)*EXP(CRAD2)
d300 1
a300 1
	   CALL WRTLIN(LUNO,BUF,NSAM,I+(J-1)*NROW)
d312 3
a314 2
                 CRAD2 = FI1 + SWITCHX*FLOAT(K-NSAMR)**2
                 IF (CRAD2.GT.RAD2.OR.CRAD2.LT.RADI2) BUF(K) = B
d321 1
a321 3

C       SET FILE STATISTICS TO BE UNDETERMINED
        CALL SETPRM(LUNO,NSAM,NROW,0.0,0.0,0.0,'U')
@


1.13
log
@CORRECT VERSION
@
text
@d285 1
a285 1
                 BUF(K) = B+(BUF(K)-B)*CRAD2
@


1.12
log
@*** empty log message ***
@
text
@a28 1
CNO_SAVE
d32 1
a32 1
        CHARACTER * 1    ANS1,NULL,ANS
d34 1
d36 1
a36 1
1      IF (FCHAR(4:4) .EQ. 'L') THEN
d71 8
a78 2
C        FOR INNER ONLY MASKING, SET OUTER RADIUS TO HUSGE VALUE
         IF (RAD .EQ. 0) RAD = NSAM * 20
d81 2
a82 2
        CALL RDPRMC(ANS1,NCHAR,.TRUE.,
     &     '(D)ISK, (G)AUSSIAN EDGE, OR (T)RUE GAUSSIAN',
d84 1
a84 1
        IF (IRTFLG .NE. 0) GOTO 1
d103 1
a103 1
     &              'MASK CENTER COOS (NSAM, NROW)')
d106 1
a106 1
     &                 'MASK CENTER COOS (NSLICE)')
d130 5
a134 1

d185 19
a203 1
C       GAUSSIAN OR STRAIGHT CUTOFF (DISK) ...
d205 2
a206 2
        IF (ANS1 .NE. 'G' .AND. ANS1 .NE. 'T') THEN
C          DISK MASKING
d208 1
d210 18
a227 10
             FI2 = FLOAT(J-NSLICER)**2
             DO  I = 1,NROW
               FI1 = FLOAT(I-NROWR)**2+FI2
               CALL REDLIN(LUNI,BUF,NSAM,I+(J-1)*NROW)
               DO  K = 1,NSAM
                 CRAD2 = FI1 + FLOAT(K-NSAMR)**2
                 IF (CRAD2.GT.RAD2.OR.CRAD2.LT.RADI2) BUF(K) = B
               ENDDO
               CALL WRTLIN(LUNO,BUF,NSAM,I+(J-1)*NROW)
	     ENDDO
d230 1
a230 1
        ELSE IF (ANS1 .EQ. 'G' ) THEN
a232 6
80         IF (NSLICE .GT. 1)  THEN
              WRITE(NOUT,*) '*** Sorry, option not supported for 3-D'
              CALL ERRT(100,'MASK',IER)
              RETURN
	   ENDIF

a233 4
	   SWITCHY = 1.0
	   SWITCHX = 1.0
	   IF (FCHAR(4:4) .EQ. 'X') SWITCHX = 0.0
           IF (FCHAR(4:4) .EQ. 'Y') SWITCHY = 0.0
d235 4
a238 2
           DO  I = 1,NROW
              FI1 = FLOAT(I-NROWR)**2 *SWITCHX
d240 22
a261 7
              DO 90 K = 1,NSAM
                 CRAD2 = FI1 + SWITCHY*FLOAT(K-NSAMR)**2
                 IF (CRAD2.LE.RAD2.AND.CRAD2.GE.RADI2) GOTO 90
                 SRAD2  = SQRT(CRAD2)
                 BUF(K) = B+(BUF(K)-B)*(EXP(HW*(SRAD2-RAD)**2)
     &			    +EXP(HW*(SRAD2-RADI)**2))
90           CONTINUE
d263 2
a264 1
	   ENDDO
d266 1
a266 1
        ELSE IF (ANS1 .EQ. 'T' ) THEN
d268 5
d274 1
a274 1
200        HW =-1.0 / (RAD**2)
d276 1
a276 1
             FI2 = FLOAT(J-NSLICER)**2
d278 1
a278 1
               FI1 = FLOAT(I-NROWR)**2+FI2
d281 6
a286 2
                 CRAD2  = FI1+FLOAT(K-NSAMR)**2
                 BUF(K) = B+(BUF(K)-B)*EXP(HW*CRAD2)
d291 17
a307 1
        ENDIF
a310 6
        RETURN


60	WRITE(NOUT,61)
61	FORMAT(' *** MASK OUTSIDE IMAGE; NO ACTION TAKEN')
	RETURN
@


1.11
log
@remove non reachable statement
@
text
@d143 1
a143 1
           DO 20 J = 1,NSLICE
d145 1
a145 1
             DO 20 I = 1,NROW
d148 1
a148 1
               DO 10 K = 1,NSAM
d162 3
a164 2
10            CONTINUE
20         CONTINUE
d180 1
a180 1
           DO 50 J = 1,NSLICE
d182 1
a182 1
             DO 50 I = 1,NROW
d190 2
a191 1
50         CONTINUE
d208 1
a208 1
           DO 100 I = 1,NROW
d219 1
a219 1
100        CONTINUE
d225 1
a225 1
           DO 250 J = 1,NSLICE
d227 1
a227 1
             DO 250 I = 1,NROW
d234 3
a236 1
250	   CALL WRTLIN(LUNO,BUF,NSAM,I+(J-1)*NROW)
@


1.10
log
@used cmblock to transfer fchar
@
text
@a242 3

900	CALL ERRT(23,'MASK',IER)
	RETURN
@


1.9
log
@merged 'ma i' into 'ma' operation
@
text
@d1 1
a1 1

d19 2
a20 2
C        LUNI        LOGICAL UNIT NUMBER OF INPUT FILE
C        LUNO        LOGICAL UNIT NUMBER OF OUTPUT FILE
d22 1
a22 1
C        B		AVERAGE OF INPUT FILE
d28 4
a31 3
        COMMON BUF(1)
        COMMON /UNITS/LUNC,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
	COMMON /BATCH/IBCNT,NLOOP,IABSLP,ILOOP
d34 1
a34 2
	DOUBLE PRECISION AV,AVC
CNO_SAVE
d75 4
a78 4
       CALL RDPRMC(ANS1,NCHAR,.TRUE.,
     &    '(D)ISK, (G)AUSSIAN EDGE, OR (T)RUE GAUSSIAN',
     &    NULL,IRTFLG)
         IF (IRTFLG .NE. 0) GOTO 1
d83 1
a83 1
C	AV	BACKGROUND IS SET EQUAL TO THE AVERAGE OF THE
d139 1
a139 1
           AV    = 0.0
d151 1
a151 1
                   AV   = AV + BUF(K)
d165 2
a166 2
           AV = AV/FNAV
	   B  = AV
d195 2
a196 2
              WRITE(NOUT,*)  '*** Sorry, option not supported for 3-D'
              CALL ERRT(100,'MASK  ',IER)
a237 1

@


1.8
log
@bad radiius order in input
@
text
@d16 1
a16 1
C   MASK(LUNI,LUNO,NSAM,NROW,B,IOPT)
a22 3
C	 IOPT		CHARACTER SPECIFYING MASKING
C			MODE:	" "	OUTSIDE MASKING
C				"I"	INSIDE MASKING
d26 1
a26 1
        SUBROUTINE MASK(LUNI,LUNO,NSAM,NROW,NSLICE,B,IOPT)
d32 1
a32 1
        CHARACTER * 1    ANS1,NULL,IOPT,ANS
d36 1
a36 3
CCC     VERSION('MASK 12/19/95')

1      IF (IOPT .EQ. 'L') THEN
a65 5
      ELSEIF (IOPT .EQ. 'I') THEN
         IINT = 2
         CALL RDPRM(RADI,NLOOP,ILOOP,'RADIUS')
         RAD  = NSAM *10
      
a66 1
         IINT = 1
d71 2
d110 2
a111 2
        IF (IINT .EQ. 1) THEN
C          INNER AND OUTER RADII
d124 4
d139 4
a142 4
           AV    = 0.
	   FNAV  = 0.
	   AVC   = 0.
	   FNAVC = 0.
d152 1
a152 1
                   FNAV = FNAV + 1.
d159 2
a160 2
                    AVC   = AVC+BUF(K)
                    FNAVC = FNAVC+1.0
d203 2
a204 2
	   IF (IOPT .EQ. 'X') SWITCHX=0.0
           IF (IOPT .EQ. 'Y') SWITCHY=0.0
d245 1
a245 1
900	CALL ERRT(23,'MASK  ',IER)
@


1.7
log
@removed unused statements that atered av, sig in common
@
text
@a25 1
C				"C"	COMBINED INSIDE&OUTSIDE
a37 1
	CALL VERSION('MASK 12/19/95')
d39 3
a41 1
      IF (IOPT .EQ. 'L') THEN
d73 1
a73 1
         CALL RDPRM(RADI,NLOOP,ILOOP,'INSIDE RADIUS')
a75 4
      ELSEIF (IOPT .EQ. 'C') THEN
         IINT = 3
         CALL RDPRM(RAD,NLOOP,ILOOP,'OUTSIDE RADIUS')
         CALL RDPRM(RADI,NLOOP,ILOOP,'INSIDE RADIUS')
d78 4
a81 2
         CALL RDPRM(RAD, NLOOP,ILOOP,'OUTSIDE RADIUS')
         RADI = 0.
d87 1
d120 5
a124 4
           CKSAM1 = NSAMR+RAD
	   IF (CKSAM1.LT.0.0)GOTO 60
	   CKSAM2 = NSAMR-RAD-NSAM
	   IF (CKSAM2.GE.0.0)GOTO 60
d126 7
a132 7
	   IF (CKROW1.LT.0.0)GOTO 60
	   CKROW2 = NROWR-RAD-NROW
	   IF (CKROW2 .GE. 0.0)GOTO 60
	   CKSLIC1 = NSLICER+RAD
	   IF (CKSLIC1 .LT. 0.0)GOTO 60
	   CKSLIC2 = NSLICER-RAD-NSLICE
	   IF (CKSLIC2 .GE. 0.0)GOTO 60
a141 2


d208 2
a209 2
	   IF (IOPT.EQ.'X') SWITCHX=0.0
           IF (IOPT.EQ.'Y') SWITCHY=0.0
@


1.6
log
@bad test for t option
@
text
@a35 4
C       ADDED FEB 96 FOR BACKGROUND = AV al
        COMMON /MASTER/ NSAMC,NROWC,IREC,NHISTREC,IFORM,IMAMI,
     &                  FMAXT,FMINT,AV,SIGT,IHIST,IPROT

d37 1
a37 1
	DOUBLE PRECISION AV,SIG,AVC
d67 1
a67 4
         FMIN = 0.0
         FMAX = 0.0
         AV   = 0.0
         CALL SETPRM(LUNO,NSAM,NROW,FMAX,FMIN,AV,'U')
a141 5
        IF (ANS .EQ. 'A') THEN
C          SET DEFAULT BACKGROUND (USED FOR "A" OPTION)
        
           B = AV
        ENDIF
a147 1
	   SIG   = 0.
a149 2
           FMAX  = -1.E10
           FMIN  = -FMAX
d158 2
a159 6
                   SBUF = BUF(K)
                   AV   = AV+SBUF
                   SIG  = SIG+SBUF**2
                   FNAV = FNAV+1.
                   IF (SBUF .GT. FMAX) FMAX = SBUF
                   IF (SBUF .LT. FMIN) FMIN = SBUF
d177 1
a177 1
21            FORMAT(' ** AVERAGE ALONG CIRCUMFERENCE ',G12.4)
a178 1
	   SIG1 = SQRT((SIG-FNAV*B**2)/(FNAV-1.))
@


1.5
log
@added common master to get av value
@
text
@d203 1
a203 1
        IF (ANS1 .NE. 'G' .AND. ANS1 .NE. 'G') THEN
@


1.4
log
@\nosave
@
text
@d36 4
d73 1
@


1.3
log
@bad background if "E" chosen
@
text
@d38 1
a38 1

@


1.2
log
@bad statistics entered in file fixed, bad background with a option fixed
@
text
@d144 6
a149 2
C       SET DEFAULT BACKGROUND (USED FOR "A" OPTION)
        B = AV
@


1.1
log
@Initial revision
@
text
@a33 1
        COMMON /MASTER/NSAMC,NROWC,IREC,NLABEL,IFORM,IMAMI
d36 1
a36 1
        CHARACTER * 1 ANS1,NULL,G,Y,IOPT,P,ANS,A
d39 1
a39 1
        DATA G/'G'/,Y/'Y'/,P/'P'/,A/'A'/
a40 2
	CALL VERSION('MASK 7/7/93')

d43 1
a43 1
         IF (IFORM .EQ. 3) THEN
d122 16
a137 14
        IF (IINT .NE. 1) GOTO 5
        CKSAM1 = NSAMR+RAD
	IF (CKSAM1.LT.0.0)GOTO 60
	CKSAM2 = NSAMR-RAD-NSAM
	IF (CKSAM2.GE.0.0)GOTO 60
	CKROW1 = NROWR+RAD
	IF (CKROW1.LT.0.0)GOTO 60
	CKROW2 = NROWR-RAD-NROW
	IF (CKROW2 .GE. 0.0)GOTO 60
	CKSLIC1 = NSLICER+RAD
	IF (CKSLIC1 .LT. 0.0)GOTO 60
	CKSLIC2 = NSLICER-RAD-NSLICE
	IF (CKSLIC2 .GE. 0.0)GOTO 60
5       RAD2  = RAD**2
d144 2
a145 43
	CALL CHKINPQ('P,C,A,E',ANS,ICALL)
	GOTO(900,8,8,25,25),ICALL

8       AV    = 0.
	FNAV  = 0.
	SIG   = 0.
	AVC   = 0.
	FNAVC = 0.
        FMAX  = -1.E10
        FMIN  = -FMAX
        DO 20 J = 1,NSLICE
          FI2 = FLOAT(J-NSLICER)**2
          DO 20 I = 1,NROW
            FI1 = FLOAT(I-NROWR)**2+FI2
            CALL REDLIN(LUNI,BUF,NSAM,I+(J-1)*NROW)
            DO 10 K = 1,NSAM
              CRAD2 = FI1 + FLOAT(K-NSAMR)**2
              IF (CRAD2 .LE. RAD2 .AND. CRAD2 .GE. RADI2) THEN
                SBUF = BUF(K)
                AV   = AV+SBUF
                SIG  = SIG+SBUF**2
                FNAV = FNAV+1.
                IF (SBUF .GT. FMAX) FMAX = SBUF
                IF (SBUF .LT. FMIN) FMIN = SBUF
              ENDIF

C             PROVISION FOR CIRCUMFERENCE OPTION

              IF (ANS .NE. 'C') GOTO 10
              IF (CRAD2 .GE. RAD2 .AND. CRAD2 .LE. RAD2P) THEN
                AVC   = AVC+BUF(K)
                FNAVC = FNAVC+1.
              ENDIF
10         CONTINUE
20      CONTINUE
        AV = AV/FNAV
	B  = AV
	IF (ANS .EQ. 'C')THEN
           B = AVC / FNAVC
           WRITE(NOUT,21) B
21         FORMAT(' ** AVERAGE ALONG CIRCUMFERENCE ',F8.2)
	ENDIF
	SIG1 = SQRT((SIG-FNAV*B**2)/(FNAV-1.))
d147 44
a190 2
C       PUT NEW STATISTICAL PARMS INTO LABEL
        CALL SETPRM(LUNO,NSAM,NROW,FMAX,FMIN,AV,'U')
d194 2
a195 2
25      IF (ANS1.EQ.'G') GOTO 80
        IF (ANS1.EQ.'T') GOTO 200
d197 11
a207 1
C - DISK MASKING
d209 2
a210 11
        DO 50 J = 1,NSLICE
          FI2 = FLOAT(J-NSLICER)**2
          DO 50 I = 1,NROW
            FI1 = FLOAT(I-NROWR)**2+FI2
            CALL REDLIN(LUNI,BUF,NSAM,I+(J-1)*NROW)
            DO  K = 1,NSAM
              CRAD2 = FI1 + FLOAT(K-NSAMR)**2
              IF(CRAD2.GT.RAD2.OR.CRAD2.LT.RADI2) BUF(K) = B
            ENDDO
50      CALL WRTLIN(LUNO,BUF,NSAM,I+(J-1)*NROW)
        RETURN
d212 40
a251 3
60	WRITE(NOUT,61)
61	FORMAT(' *** MASK OUTSIDE IMAGE; NO ACTION TAKEN')
	RETURN
d253 3
a256 1
C - GAUSSIAN EDGE MASKING
a257 4
80      IF (NSLICE.GT.1)  THEN
          WRITE(NOUT,*)  ' Sorry, option not supported for 3-D'
          RETURN
	ENDIF
d259 2
a260 32
	CALL RDPRM(HW,NLOOP,ILOOP,'HALFWIDTH')
	SWITCHY = 1.
	SWITCHX = 1.
	IF (IOPT.EQ.'X') SWITCHX=0.
	IF (IOPT.EQ.'Y') SWITCHY=0.
        HW = -1./(HW**2)
        DO 100 I = 1,NROW
          FI1 = FLOAT(I-NROWR)**2 *SWITCHX
          CALL REDLIN(LUNI,BUF,NSAM,I)
          DO 90 K = 1,NSAM
            CRAD2 = FI1 + SWITCHY*FLOAT(K-NSAMR)**2
            IF (CRAD2.LE.RAD2.AND.CRAD2.GE.RADI2) GOTO 90
            SRAD2  = SQRT(CRAD2)
            BUF(K) = B+(BUF(K)-B)*(EXP(HW*(SRAD2-RAD)**2)
     1			    +EXP(HW*(SRAD2-RADI)**2))
90        CONTINUE
100     CALL WRTLIN(LUNO,BUF,NSAM,I)
        RETURN

C - TRUE GAUSSIAN MASKING

200     HW =-1./(RAD**2)
        DO 250 J = 1,NSLICE
          FI2 = FLOAT(J-NSLICER)**2
          DO 250 I = 1,NROW
            FI1 = FLOAT(I-NROWR)**2+FI2
            CALL REDLIN(LUNI,BUF,NSAM,I+(J-1)*NROW)
            DO K=1,NSAM
              CRAD2  = FI1+FLOAT(K-NSAMR)**2
              BUF(K) = B+(BUF(K)-B)*EXP(HW*CRAD2)
            ENDDO
250	CALL WRTLIN(LUNO,BUF,NSAM,I+(J-1)*NROW)
@
