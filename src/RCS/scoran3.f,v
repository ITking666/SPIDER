head	1.32;
access;
symbols
	pre_mrcs:1.32
	healthdept_2018:1.32
	pre_getangas:1.31
	GPL2010:1.31
	pre_GPL2010:1.30
	pre_var_equation:1.30
	pre_fftwrings:1.29
	pre_opfiles:1.29
	src:1.29
	best-code:1.29
	x-named-regs:1.29
	x:1.29
	v13-00:1.29
	pre_GPL:1.27
	prec_CA:1.20
	noindx:1.20
	Bproc:1.14
	oct21:1.13
	last77:1.13;
locks; strict;
comment	@c @;


1.32
date	2018.10.03.14.34.16;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2010.06.24.13.26.52;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2009.03.25.12.31.47;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2005.10.17.20.40.35;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2005.10.17.18.30.58;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2004.02.02.20.08.43;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2004.01.23.17.16.33;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2004.01.16.15.47.01;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2003.12.10.20.03.43;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2003.12.09.19.15.10;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2003.11.21.18.42.35;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2003.10.16.16.43.28;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2002.08.26.15.07.29;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2002.08.14.13.38.20;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2002.03.12.18.04.57;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.21.16.31.20;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2001.06.18.20.28.58;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2001.01.03.21.29.36;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2000.04.24.20.30.37;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	99.03.25.20.25.39;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	98.04.06.19.40.11;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	97.12.01.19.08.27;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	96.11.27.19.24.33;	author mladjadj;	state Exp;
branches;
next	1.9;

1.9
date	96.08.06.20.23.41;	author mladjadj;	state Exp;
branches;
next	1.8;

1.8
date	96.08.01.19.17.28;	author mladjadj;	state Exp;
branches;
next	1.7;

1.7
date	96.07.23.14.03.21;	author mladjadj;	state Exp;
branches;
next	1.6;

1.6
date	95.10.06.16.04.54;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	95.10.05.15.49.23;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	95.10.04.18.50.47;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	95.01.03.20.09.07;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.08.29.18.47.08;	author mladjadj;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.39;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.32
log
@email_health_dept
@
text
@
C **********************************************************************
C
C   SCORAN3               USED ALLOCATE       JAN 2001 ARDEAN LEITH
C                         ENLARGED MADAR      MAR 2002 ARDEAN LEITH
C                         TSIZE BUG           AUG 2002 ARDEAN LEITH
C                         REWRITTEN           SEP 2003 ARDEAN LEITH
C                         LUNE HEADER SPACE   MAR 2009 ARDEAN LEITH
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C *********************************************************************
C
C   SCORAN3(NUMIM, NFAC, NPIX, INUMBR,LUNS, LUNI, LUNP, LUNE, 
C           WEIGHTI,WEIGHTP, TRANSPOSE)
C
C       NUMIM	  NUMBER OF IMAGES                               (INPUT)
C	NFAC 	  NUMBER OF EIGENVECTORS REQUESTED               (INPUT)
C	NPIX      NUMBER OF ACTIVE PIXELS PER IMAGE              (INPUT)
C       INUMBR	  IMAGE NUMBER LIST                              (INPUT)
C	USE_PCA   CORAN VS PCA FLAG                              (INPUT)
C	LUNS	  SEQUENTIAL IMAGE FILE I/O UNIT (INPUT FILE)    (INPUT)
C	LUNI      IMAGE COORDINATE FILE I/O UNIT (OUTPUT FILE)   (INPUT)
C	LUNP      PIXEL COORDINATE FILE I/O UNIT (OUTPUT FILE)   (INPUT)
C	LUNE	  EIGENVALUE  FILE I/O UNIT (OUTPUT FILE)        (INPUT)
C	WEIGHTI	  SUM OF PIXEL VALUES FOR THIS IMAGE             (INPUT)
C	WEIGHTP	  SUM OF PIXEL VALUES AT THIS PIXEL              (INPUT)
C	TRANSPOSE TRANSPOSE FLAG                                 (INPUT)
C
C       ALL FILES ARE FORMATTED EXCEPT FOR LUNS!
C
C  CALL TREE:
C     JPMSK1 ---> SCORAN3 --->  INCOR3
C                             | GETCOO
C                             | GETCOOT
C
C **********************************************************************

        SUBROUTINE SCORAN3(NUMIM, NFAC, NPIX, INUMBR, USE_PCA,
     &                     LUNS, LUNI, LUNP, LUNE, 
     &                     WEIGHTI,WEIGHTP,
     &                     TRANSPOSE, SUMW)
 
        INCLUDE 'CMBLOCK.INC'

        INTEGER, DIMENSION(NUMIM)          :: INUMBR
        REAL, DIMENSION(NUMIM)             :: WEIGHTI
        REAL, DIMENSION(NPIX)              :: WEIGHTP

        REAL, ALLOCATABLE, DIMENSION(:,:)  :: MATS
        REAL, ALLOCATABLE, DIMENSION(:)    :: EVALS
        REAL, ALLOCATABLE, DIMENSION(:)    :: BLU
        REAL, ALLOCATABLE, DIMENSION(:)    :: BLCO

        REAL, DIMENSION(NFAC)              :: BLW
        LOGICAL                            :: TRANSPOSE, USE_PCA

        IF (TRANSPOSE) THEN
           WRITE(NOUT,*) ' IN-CORE SOLUTION, TRANSPOSED DATA --- '

           MWANT = NUMIM**2 + 3*NUMIM
           ALLOCATE(MATS(NUMIM,NUMIM),EVALS(NUMIM),BLU(NUMIM),
     &              BLCO(NUMIM),STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN
              CALL ERRT(46,'MATS',MWANT)
              RETURN
           ENDIF

           CALL INCORT(NPIX, NUMIM, NFAC, LUNS, USE_PCA, MATS,  
     &                EVALS, BLU, WEIGHTI,WEIGHTP, TRACE, SUMW,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

           CALL GETCOOT(NFAC, NUMIM, NPIX, INUMBR, USE_PCA, MATS, 
     &		     EVALS,  WEIGHTI, WEIGHTP, SUMW, BLCO, BLU, BLW,
     &		     LUNS, LUNI, LUNP)

         ELSE
           WRITE(NOUT,*) ' IN-CORE SOLUTION --- '

           MWANT = NPIX**2 + 3*NPIX
           ALLOCATE (MATS(NPIX,NPIX), EVALS(NPIX), BLU(NPIX),
     &               BLCO(NPIX), STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN
               CALL ERRT(46,'MATS',MWANT)
               RETURN
           ENDIF

           CALL INCOR3(NUMIM, NPIX, NFAC, LUNS, USE_PCA, MATS,  
     &                 EVALS, BLU, WEIGHTI,WEIGHTP, TRACE, SUMW,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

           CALL GETCOO(NFAC, NPIX, NUMIM, INUMBR, USE_PCA, MATS,
     &		     EVALS,  WEIGHTI, WEIGHTP, SUMW, BLCO, BLU, BLW,
     &		     LUNS, LUNI, LUNP)
        ENDIF

C       FIND SIZE OF EIGENVECTS ARRAY
	N = NPIX
        IF (TRANSPOSE) N = NUMIM

        KIND_PCA = 0
        IF (USE_PCA) KIND_PCA = 1

C       WRITE EIGEN FILE HEADER
        WRITE(LUNE,90) NFAC, SUMW, TRACE, KIND_PCA, N
90      FORMAT(I10,' ',1PG12.5,' ',1PG12.5,' ',I10,' ',I10)

C       SAVE EIGENVALUES TO _EIG FILE (ONE FACTOR PER LINE)
	CUL = 0.0
	DO I = 1, NFAC
           PER = 100.0 * EVALS(I) / TRACE
           CUL = CUL + PER

           WRITE(LUNE,91) EVALS(I), PER, CUL
 91        FORMAT(1PE12.5,'  ',E12.5,'  ', E12.5)
        ENDDO

C       SAVE EIGENVECTORS ARRAY TO _EIG FILE 
	DO I = 1, N
           WRITE(LUNE,92) (MATS(I,J),J=1,N)
92         FORMAT(10(1PG12.5,' '))
        ENDDO

9999    IF (ALLOCATED(MATS))   DEALLOCATE(MATS)
        IF (ALLOCATED(EVALS))  DEALLOCATE(EVALS)
        IF (ALLOCATED(BLU))    DEALLOCATE(BLU)
        IF (ALLOCATED(BLCO))   DEALLOCATE(BLCO)

        RETURN
        END 

      
 
@


1.31
log
@GPL_2010
@
text
@d15 1
a15 1
C=* Email: spider@@wadsworth.org                                        *
@


1.30
log
@added blank between header values
@
text
@a9 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d11 5
a15 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d17 1
a17 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d22 1
a22 1
C=* This program is distributed in the hope that it will be useful,    *
d24 1
a24 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a25 1
C=*                                                                    *
d27 1
a27 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.29
log
@GPL License fixed
@
text
@d4 5
a8 5
C   SCORAN3               USED ALLOCATE  JAN 2001 ARDEAN LEITH
C                         ENLARGED MADAR MAR 2002 ARDEAN LEITH
C                         TSIZE BUG      AUG 2002 ARDEAN LEITH
C                         REWRITTEN      SEP 2003 ARDEAN LEITH
C
d11 1
a11 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d127 1
a127 1
90      FORMAT(I10,1PG12.5,' ',1PG12.5,I10,I10)
@


1.28
log
@HRI GPL License used
@
text
@a2 1
C***************************************************************************
a9 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d13 1
a13 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a32 6

C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a58 1
C***************************************************************************
@


1.27
log
@new EIGEN FILE HEADER has n
@
text
@d2 1
d12 24
d66 1
@


1.26
log
@file formats
@
text
@d101 4
a104 1
C       SAVE EIGENVALUES TO FILE
d108 3
a110 2
        WRITE(LUNE,90) NFAC, SUMW, TRACE, KIND_PCA
90      FORMAT(I10,1PG12.5,' ',1PG12.5)
a122 3
	N = NPIX
        IF (TRANSPOSE) N = NUMIM

@


1.25
log
@rewrite for mats
@
text
@d102 4
a105 1
        WRITE(LUNE,90) NFAC, SUMW, TRACE
d118 8
a125 5
        IF (USE_PCA) THEN
C         STORE PIXEL AVERAGES TEN PER LINE
          WRITE(LUNE,92) WEIGHTP 
92        FORMAT(10(1PG12.5,' '))
        ENDIF
@


1.24
log
@file formats changed
@
text
@d18 1
a18 1
C   SCORAN3(NUMIM, NFAC, NPIX, NMASK, INUMBR,LUNS, LUNI, LUNP, LUNE, 
d23 1
a23 2
C	NPIX      NUMBER OF PIXELS PER IMAGE                     (INPUT)
C	NMASK     NUMBER OF ACTIVE PIXELS PER IMAGE              (INPUT)
d30 2
a31 2
C	WEIGHTI	  SUM OF ENTRIES BY  IMAGE                       (INPUT)
C	WEIGHTP	  SUM OF ENTRIES BY  PIXEL                       (INPUT)
d36 5
d43 1
a43 1
        SUBROUTINE SCORAN3(NUMIM, NFAC, NPIX, NMASK, INUMBR, USE_PCA,
d46 1
a46 1
     &                     TRANSPOSE)
d52 1
a52 1
        REAL, DIMENSION(NMASK)             :: WEIGHTP
d54 2
a55 2
        REAL, ALLOCATABLE, DIMENSION(:,:)  :: BLS
        REAL, ALLOCATABLE, DIMENSION(:)    :: BLD
a57 1
        REAL, ALLOCATABLE, DIMENSION(:)    :: EIGVEC
d66 2
a67 2
           ALLOCATE(BLS(NUMIM,NUMIM),BLD(NUMIM),BLU(NUMIM),BLCO(NUMIM),
     &               STAT=IRTFLG)
d69 1
a69 1
              CALL ERRT(46,'BLS',MWANT)
d73 2
a74 2
           CALL INCOR3(NMASK, NUMIM, NFAC, LUNS, USE_PCA,  
     &          BLS, BLD, BLU, WEIGHTI, TRACE, SUMW,IRTFLG)
d77 2
a78 2
           CALL GETCOOT(NFAC, NUMIM, NMASK, INUMBR, USE_PCA,  
     &		     BLS, BLD,  WEIGHTI, SUMW, BLCO, BLU, BLW,
d84 3
a86 3
           MWANT = NMASK**2 + 3*NMASK
           ALLOCATE (BLS(NMASK,NMASK),BLD(NMASK),BLU(NMASK),BLCO(NMASK),
     &               STAT=IRTFLG)
d88 1
a88 1
               CALL ERRT(46,'BLS',MWANT)
d92 2
a93 2
           CALL INCOR3(NUMIM, NMASK, NFAC, LUNS, USE_PCA,  
     &         BLS, BLD, BLU, WEIGHTP, TRACE, SUMW,IRTFLG)
d96 2
a97 2
           CALL GETCOO(NFAC, NMASK, NUMIM, INUMBR, USE_PCA, 
     &		     BLS, BLD,  WEIGHTP, SUMW, BLCO, BLU, BLW,
d108 1
a108 1
           PER = 100.0 * BLD(I) / TRACE
d111 1
a111 1
           WRITE(LUNE,91) BLD(I), PER, CUL
d121 2
a122 2
9999    IF (ALLOCATED(BLS))    DEALLOCATE(BLS)
        IF (ALLOCATED(BLD))    DEALLOCATE(BLD)
@


1.23
log
@getcoo.f parameters inverted
@
text
@d102 5
a106 2
        WRITE(LUNE,91) (BLD(K), K = 1, NFAC)
91      FORMAT(100000(1PG12.5,' '))
d108 4
d113 3
a115 7
C         STORE PIXEL AVERAGES
          IF (TRANSPOSE) THEN
             WRITE(LUNE,92) WEIGHTP 
92           FORMAT(1PG12.5)
          ELSE
             WRITE(LUNE,92) WEIGHTI
          ENDIF
@


1.22
log
@mask bug
@
text
@a73 1
CC         CALL GETCOOT(NFAC, NUMIM, NPIX, INUMBR, USE_PCA,  
a88 1
CC         CALL INCOR3(NUMIM, NPIX, NFAC, LUNS, USE_PCA,  
d93 1
a93 2
CC         CALL GETCOO(NFAC, NUMIM, NPIX,INUMBR, USE_PCA, 
           CALL GETCOO(NFAC, NUMIM, NMASK, INUMBR, USE_PCA, 
@


1.21
log
@CA & CL rewrite
@
text
@d18 1
a18 1
C   SCORAN3(NUMIM, NFAC, NPIX, INUMBR,LUNS, LUNI, LUNP, LUNE, 
d24 1
d39 1
a39 1
        SUBROUTINE SCORAN3(NUMIM, NFAC, NPIX, INUMBR, USE_PCA,
d48 1
a48 1
        REAL, DIMENSION(NPIX)              :: WEIGHTP
d70 1
a70 1
           CALL INCOR3(NPIX, NUMIM, NFAC, LUNS, USE_PCA,  
d74 2
a75 1
           CALL GETCOOT(NFAC, NUMIM, NPIX, INUMBR, USE_PCA,  
d82 2
a83 2
           MWANT = NPIX**2 + 3*NPIX
           ALLOCATE (BLS(NPIX,NPIX),BLD(NPIX),BLU(NPIX),BLCO(NPIX),
d90 2
a91 1
           CALL INCOR3(NUMIM, NPIX, NFAC, LUNS, USE_PCA,  
d95 2
a96 1
           CALL GETCOO(NFAC, NUMIM, NPIX,INUMBR, USE_PCA, 
@


1.20
log
@try to get aound integer 32 bit limit
@
text
@d4 1
a4 2
C   SCORAN3 
C                         USED ALLOCATE  JAN 2001 ARDEAN LEITH
d7 1
d16 1
a16 1
C *********************************************************************C **************************************************************************
d18 2
a19 2
C   SCORAN3(NUMIM, NFAC, NSAM, NROW, NPIX, LSAV, 
C	   LIMA, LPIX, LEIG, LUV, IMAR, MADAR, NACT, NOUT)
d21 12
a32 9
C	NFAC 	NUMBER OF EIGENVECTORS REQUESTED
C       NUMIM	NUMBER OF IMAGES
C       NACT    NUMBER OF ACTIVE IMAGES
C	NPIX    NUMBER OF PIXELS PER IMAGE
C	LSAV	SEQUENTIAL IMAGE FILE (INPUT)
C	LIMA    IMAGE COORDINATE FILE (OUTPUT)
C	LPIX    PIXEL COORDINATE FILE (OUTPUT)
C	LEIG	EIGENSTUFF FILE (OUTPUT)
C	LTMP	SCRATCH FILE IO-UNIT
d34 1
a34 2
C       ALL FILES MUST BE UNFORMATTED!
C	LUV	LOGICAL UTILITY VECTOR (1 = ACTIVE,  0 = INACTIVE)
d38 58
a95 3
        SUBROUTINE SCORAN3(NUMIM, NFAC, NSAM, NROW, NPIX, LSAV, 
     &	                   LIMA, LPIX, LEIG, LUV, 
     &                     IMAR, MADAR, NACT, NOUT)
d97 16
a112 72
        DIMENSION  LUV(*), IMAR(*), MADAR(*)

        REAL, ALLOCATABLE, DIMENSION(:) ::  B

#ifndef SP_32
        INTEGER *8       SIZE1,SIZE2,TSIZE
#else
        INTEGER *4       SIZE1,SIZE2,TSIZE
#endif

        DATA     LTMP, LTRANSP/78, 79/

        NINACT = NUMIM - NACT 
        NFAC   =  MIN0(NFAC + 1, NACT, NPIX) - 1

C       CREATE HEADERS FOR COO FILES IMC ***  AND PIX *** 
        CALL REW(LIMA, 0)
        WRITE(LIMA) NUMIM, NFAC, NSAM, NROW, NINACT
        CALL REW(LPIX, 0)
        WRITE(LPIX) NPIX, NFAC, NSAM, NROW, NINACT

C       TRY TO DO SOME CALCULATIONS TO CHOOSE THE QUICKEST METHOD
C       ACCORDING TO THE SIZE OF THE PROBLEM

        SIZE1 = NPIX  
        SIZE1 = SIZE1 * NPIX + 4 * NPIX + NFAC

        TSIZE = NACT * NACT + 4 * NACT + NFAC

C       IBM "MAX" CAN NOT HANDLE INTEGER * 8
C       SIZE2 = MAX( (NPIX*NACT), TSIZE)
        SIZE2 = NPIX * NACT
        IF (TSIZE .GT. SIZE2) SIZE2 = TSIZE
 
C       TSIZE = MIN(SIZE1,SIZE2)
        TSIZE = SIZE1
        IF (SIZE2 .LT. SIZE1) TSIZE = SIZE2

	WRITE(NOUT,7891)  SIZE1,SIZE2
7891	FORMAT('  Memory needed. In-core:',I12,'  Transposed:',I12)

        IF (200*NFAC .LT. MIN0(NPIX,NACT)) THEN
c	   SMALL NUMBER OF FACTORS: GOTO ITERATIVE METHOD	
           GOTO 310
	ELSE
           ALLOCATE(B(TSIZE),STAT=IRTFLG)
           IF (IRTFLG .EQ. 0)  THEN  
	      IF (TSIZE .EQ. SIZE1) GOTO 110
	      GOTO 210
	   ENDIF
	ENDIF
	GOTO 310


C       IN  -  CORE SOLUTION ----------------------------------------
C       MEMORY SEGMENTATION POINTERS

110     LD    =  1
        LS    =  LD  +  NPIX
        LU    =  LS  +  NPIX * NPIX
        LPJ   =  LU  +  NPIX
        LCO   =  LPJ +  NPIX
        LW    =  LCO +  NPIX 
        LMAX  =  LW  +  NFAC
        WRITE(NOUT,*) ' --- IN - CORE SOLUTION'
 
        CALL INCOR3(NUMIM, NPIX, NACT, NFAC, B(LS), B(LD), 
     &        B(LU), B(LPJ), TRACE, SOM, LSAV, LUV)

        CALL  GETCOO(NFAC, NPIX, NPIX, NUMIM, B(LS), B(LD), 
     &		     TRACE, B(LPJ), SOM, B(LCO), B(LU), B(LW),
     &		     LSAV, LIMA, LPIX, LUV, MADAR)
d114 4
a117 2
        WRITE(LEIG) NFAC, SOM, TRACE
        WRITE(LEIG) (B(LD + K), K = 0, NFAC - 1)
a118 1
        IF (ALLOCATED(B)) DEALLOCATE(B)
d120 1
a121 46


C       TRANSPOSED  SOLUTION ----------------------------------------
C       MEMORY SEGMENTATION POINTERS  
C       NOTE: TRANSPOSE USES T(NPIX,NACT); IMPORTANT FOR B ARRAY ALLOCATION
     
210     LD    =  1
        LS    =  LD  +  NACT
        LU    =  LS  +  NACT * NACT
        LPJ   =  LU  +  NACT
        LCO   =  LPJ +  NACT
        LW    =  LCO +  NACT
        LMAX  =  LW  +  NFAC

        IF (NACT .EQ. NUMIM)  THEN
          WRITE(NOUT,*)
     &         ' --- IN - CORE SOLUTION USING TRANSPOSED DATA'

          OPEN(FILE = 'TRANSPOSED.FILE', UNIT = LTRANSP, 
     &			STATUS = 'UNKNOWN', FORM = 'UNFORMATTED')
 
          CALL TRANSPOSE(B(1), NPIX, NACT, NUMIM, LUV, LSAV,
     &                      LTRANSP)

          CALL INCOR3(NPIX, NACT, NPIX, NFAC, B(LS), B(LD), 
     &          B(LU), B(LPJ), TRACE, SOM, LTRANSP, MADAR)

          CALL  GETCOOT(NFAC, NACT, NACT, NPIX, B(LS), B(LD), 
     &                      TRACE, B(LPJ), SOM, B(LCO), B(LU), B(LW),
     &                      LTRANSP,LPIX, LIMA, MADAR, LUV)

          CLOSE(LTRANSP, STATUS = 'DELETE')
          WRITE(LEIG) NFAC, SOM, TRACE
          WRITE(LEIG) (B(LD + K), K = 0, NFAC - 1)
	  
          IF (ALLOCATED(B)) DEALLOCATE(B)
 	  
          RETURN
        ELSE
          WRITE(NOUT,*)'MEMORY SUFFICIENT FOR IN - CORE SOLUTION '
          WRITE(NOUT,*)'USING TRANSPOSED DATA. UNFORTUNATELY '
          WRITE(NOUT,*)'CANNOT HANDLE INACTIVE IMAGES'
          WRITE(NOUT,*)'***>>> TRYING ITERATIVE SOLUTION '
	  
           IF (ALLOCATED(B)) DEALLOCATE(B)
        END IF
a123 53
C       ITERATIVE SOLUTION --------------------------------------------
C	MEMORY SEGMENTATION POINTERS

310     JBASE  =  NFAC  +  3
        LBASE  =  JBASE
        KB     =  LBASE
        LS	 =  1
        LD	 =  LS   +  NPIX * JBASE
        LPJ	 =  LD   +  NPIX
        LCO	 =  LPJ  +  NPIX
        LU	 =  LCO  +  NPIX
        LV	 =  LU   +  NPIX
        LW	 =  LV   +  NPIX
        LBZ	 =  LW   +  NFAC
        LAD	 =  LBZ  +  NPIX * JBASE
        LINB     =  LAD  +  JBASE * JBASE
        LMAX     =  LINB +  JBASE
	
        ALLOCATE(B(LMAX),STAT=IRTFLG)
        IF (IRTFLG .NE. 0)  THEN 
           WRITE(NOUT,* )
     &       ' *** MEMORY INSUFFICIENT FOR ITERATIVE SOLUTION'
           WRITE(NOUT,*)'    NEEDED ', LMAX
           CALL ERRT(100, 'SCORAN3', NE)
           RETURN
        ENDIF

        WRITE(NOUT,*) 
     &    ' --- ITERATIVE SOLUTION, USING SCRATCH FILE: SCR999.DAT'

        OPEN(LTMP, FILE = 'SCR999.DAT', STATUS = 'UNKNOWN', 
     &             FORM = 'UNFORMATTED')
 
        CALL STOCHA(JBASE, NPIX, NUMIM, NFAC, NITER, LUV, B(LPJ), 
     &	            B(LS), B(LU), TRACE, SOM, B(LV), B(LBZ), B(LD), 
     &	            B(LAD), B(LINB), LSAV, LTMP)

        CLOSE(LTMP, STATUS = 'DELETE')

C       PUT EIGENVECTORS IN DECENDING ORDER ...
        CALL ORDERE(NPIX,NFAC,B(LS),B(LD))

        CALL GETCOO(NFAC, KB, NPIX, NUMIM, B(LS), B(LD), 
     &              TRACE, B(LPJ), SOM, B(LCO), B(LU), B(LW),
     &	            LSAV, LIMA, LPIX, LUV, MADAR)
        
        WRITE(LEIG) NFAC, SOM, TRACE
        WRITE(LEIG) (B(LD + K), K = 0, NFAC - 1)

        IF (ALLOCATED(B)) DEALLOCATE(B)
 
        END

@


1.19
log
@bad TSIZE calc
@
text
@d64 3
a66 1
        SIZE1 = NPIX * NPIX + 4 * NPIX + NFAC 
@


1.18
log
@*** empty log message ***
@
text
@d7 2
a8 1
C    
d11 1
a11 1
C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
d74 1
a74 1
        IF (SIZE2 .GT. TSIZE) TSIZE = SIZE2
@


1.17
log
@for ibm
@
text
@d5 2
a6 1
C                         USED ALLOCATE JAN 2001 ARDEAN LEITH
d40 1
d42 1
d76 1
a76 1
7891	FORMAT(' Memory needed. In-core:',I12,'  Transposed:',I12)
d115 1
@


1.16
log
@added msg about method
@
text
@d61 11
a71 3
        TSIZE = NACT * NACT + 4 * NACT + NFAC 
	SIZE2 = MAX0( (NPIX*NACT), TSIZE)
        TSIZE = MIN0(SIZE1,SIZE2)
@


1.15
log
@used allocate
@
text
@d7 8
a14 8
C **************************************************************************
C *  COPYRIGHT (C)1987 , WADSWORTH CENTER FOR LABORATORIES AND             *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
d17 1
a17 1
C	   LIMA, LPIX, LEIG, Q, MEM, LUV, IMAR, MADAR, NACT, NOUT)
d27 1
a27 1
C	LTMP	SCRATCH FILE
a29 1
C	Q	ARRAY OF FOUR - BYTE WORDS WITH DIMENSION MEM
d35 1
a35 1
     &	                   LIMA, LPIX, LEIG, Q, MEM, LUV, 
d38 1
a38 2
        DIMENSION  LUV(*), IMAR(*), MADAR(*),Q(*)
        INTEGER  :: ANS,SIZE1,SIZE2,TSIZE 
d40 5
d64 2
a65 2
	WRITE(NOUT,7891)  SIZE1,SIZE2,MEM
7891	FORMAT(' Memory needed. In-core:',I8,'  Transposed:',I8)
d178 3
@


1.14
log
@SP_F90 removed
@
text
@d3 4
a6 1
C        
d16 3
d40 2
a41 1
        INTEGER    K, LTRANSP, LTMP, ANS,SIZE1,SIZE2,TSIZE 
d43 1
a43 3
        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: B
a44 2
        LOGICAL    RUNTIME 
        DATA     LTMP, LTRANSP/78, 79/
d62 1
a62 2
7891	FORMAT(' Memory needed. In-core:',I8,'  Transposed:',I8,
     &     ' Available:',I10)
d64 1
a64 1
        IF (200*NFAC.LT. MIN0(NPIX,NACT)) THEN
d68 1
a68 1
           CALL CHKMEM(TSIZE,Q,MEM,RUNTIME,IPQ,IRTFLG)
a69 3

              B = >IPQ

d72 2
a73 2
	   END IF
	END IF
d99 1
a99 1
        IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'scoran3',IRTFLG) 
d136 2
a137 2
          IF(RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'scoran3',IRTFLG) 
	  
d145 1
a145 1
          IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'scoran3',IRTFLG)
d167 1
a167 1
	CALL CHKMEM(LMAX,Q,MEM,RUNTIME,IPQ,IRTFLG)
d171 1
a171 1
           WRITE(NOUT,*)'    NEEDED ', LMAX, ' AVAILABLE: ', MEM
a175 1
        B = >IPQ
d195 2
a196 2
        IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'SCORAN3',IRTFLG) 

@


1.13
log
@*** empty log message ***
@
text
@d35 1
a35 1
#ifdef SP_F90
d39 1
a39 4
#else
        DIMENSION  B(1)
        POINTER    (IPQ,B) 
#endif
d68 3
a70 3
#ifdef SP_F90
         B = >IPQ
#endif
d177 1
a177 3
#ifdef SP_F90
         B = >IPQ
#endif
@


1.12
log
@f90 alloc
@
text
@a43 1

a44 2
CNO_SAVE          

d126 1
a126 1
          CALL TRANSPOSE(B, NPIX, NACT, NUMIM, LUV, LSAV,
@


1.11
log
@fixed chkmem return bug
@
text
@d35 5
d42 1
d74 3
d183 3
a206 1
        RETURN
@


1.10
log
@use of chkmem instead of allocit
@
text
@a3 1
C
a4 1
C *  AUTHOR :                                                              *
a25 1
C 
d33 7
a39 7
        
        DIMENSION LUV(*), IMAR(*), MADAR(*),Q(*)
        INTEGER K, LTRANSP , LTMP, ans,SIZE1,SIZE2,TSIZE 
        DIMENSION B(1)
        POINTER   (IPQ,B) 
        LOGICAL   RUNTIME 
        DATA  LTMP, LTRANSP/78, 79/
d43 1
a43 1
        NFAC  =  MIN0(NFAC + 1, NACT, NPIX)  -  1
a50 1

d59 2
a60 3
7891	FORMAT(' Memory needed. In-core:',i8,'  Transposed:',i8,
     &     ' Available:',i8)

d62 2
a63 2
        IF( 200*NFAC.LT. MIN0(NPIX,NACT)) THEN
c	   small number of factors: GOTO iterative method	
d67 2
a68 2
           IF(IRTFLG.EQ.0)  THEN  
	      IF(TSIZE.EQ.SIZE1) GOTO 110
d71 1
a71 1
	ENDIF
d75 2
a76 2
C         I N  -  C O R E   S O L U T I O N
 
a77 2
C              MEMORY SEGMENTATION POINTERS
C
d85 1
a85 1
        WRITE(NOUT,*) ' ***  IN - CORE SOLUTION'
d97 1
a97 2
        IF(RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'scoran3',IRTFLG) 

a99 1
C       T R A N S P O S E D   S O L U T I O N
d101 1
d103 2
a104 2
C       note: transpose uses T(NPIX,NACT); important for B array allocation
c     
d113 1
a113 1
        IF(NACT .EQ. NUMIM)  THEN
d115 1
a115 1
     &         ' *** IN - CORE SOLUTION USING TRANSPOSED DATA'
d143 1
a143 1
          IF(RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'scoran3',IRTFLG)
d147 1
a147 3
C       ITERATIVE   SOLUTION
 
	
d166 1
a166 1
        IF(IRTFLG.EQ.0)  THEN 
d169 2
a170 3
           WRITE(NOUT,*)
     &       '    NEEDED ', LMAX, ' AVAILABLE ', MEM
           CALL ERRT(100, 'JPMSK3', NE)
d184 1
a184 1
        CALL  ORDERE(NPIX,NFAC,B(LS),B(LD))
d193 1
a193 1
        IF(RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'scoran3',IRTFLG) 
@


1.9
log
@better pointer memory calculations
@
text
@d37 5
a41 9
        DIMENSION LUV(*), IMAR(*), MADAR(*)
        INTEGER K, LTRANSP , LTMP, ans,SIZE1,SIZE2,TSIZE
#ifdef SP_ALLOC
         DIMENSION B(1)
         POINTER   (IPQ,B) 
         LOGICAL         RUNTIME
#else
         DIMENSION Q(*)
#endif
d44 1
d71 2
a72 6
#ifdef SP_ALLOC
	   CALL ALLOCIT(TSIZE,RUNTIME,IPQ,'scoran3',IRTFLG)
           IF(RUNTIME)  THEN
#else
           IF(TSIZE.LT.MEM) THEN
#endif
d93 1
a93 2

#ifdef SP_ALLOC
d104 1
a104 12
        CALL ALLOCIT(0,RUNTIME,IPQ,'scoran3',IRTFLG)
#else

        CALL INCOR3(NUMIM, NPIX, NACT, NFAC, Q(LS), Q(LD), 
     &              Q(LU), Q(LPJ), TRACE, SOM, LSAV, LUV)

        CALL  GETCOO(NFAC, NPIX, NPIX, NUMIM, Q(LS), Q(LD), 
     &		     TRACE, Q(LPJ), SOM, Q(LCO), Q(LU), Q(LW),
     &		     LSAV, LIMA, LPIX, LUV, MADAR)

        WRITE(LEIG) NFAC, SOM, TRACE
        WRITE(LEIG) (Q(LD + K), K = 0, NFAC - 1)
a105 2
#endif

d127 1
a127 1
#ifdef SP_ALLOC
d142 3
a144 20
          CALL ALLOCIT(0,RUNTIME,IPQ,'scoran3',IRTFLG)
#else

          CALL TRANSPOSE(Q, NPIX, NACT, NUMIM, LUV, LSAV,
     &                      LTRANSP)

          CALL INCOR3(NPIX, NACT, NPIX, NFAC, Q(LS), Q(LD), 
     &          Q(LU), Q(LPJ), TRACE, SOM, LTRANSP, MADAR)

          CALL  GETCOOT(NFAC, NACT, NACT, NPIX, Q(LS), Q(LD), 
     &                      TRACE, Q(LPJ), SOM, Q(LCO), Q(LU), Q(LW),
     &                      LTRANSP,LPIX, LIMA, MADAR, LUV)

          CLOSE(LTRANSP, STATUS = 'DELETE')
          WRITE(LEIG) NFAC, SOM, TRACE
          WRITE(LEIG) (Q(LD + K), K = 0, NFAC - 1)

#endif

           RETURN
d150 3
a152 4
#ifdef SP_ALLOC
      IF(RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'scoran3',IRTFLG)
#endif
         END IF
d175 3
a177 7
#ifdef SP_ALLOC
         CALL ALLOCIT(LMAX,RUNTIME,IPQ,'scoran3',IRTFLG)
         IF(.NOT.RUNTIME)  THEN
#else
         IF(LMAX.GT.MEM) THEN
#endif
          WRITE(NOUT,* )
d179 1
a179 1
          WRITE(NOUT,*)
d181 2
a182 2
          CALL ERRT(100, 'JPMSK3', NE)
          RETURN
d187 1
a187 1
#ifdef SP_ALLOC
d204 1
a204 19
        CALL ALLOCIT(0,RUNTIME,IPQ,'scoran3',IRTFLG)
#else
        CALL STOCHA(JBASE, NPIX, NUMIM, NFAC, NITER, LUV, Q(LPJ), 
     &	            Q(LS), Q(LU), TRACE, SOM, Q(LV), Q(LBZ), Q(LD), 
     &	            Q(LAD), Q(LINB), LSAV, LTMP)

        CLOSE(LTMP, STATUS = 'DELETE')

C       PUT EIGENVECTORS IN DECENDING ORDER ...
        CALL  ORDERE(NPIX,NFAC,Q(LS),Q(LD))

        CALL GETCOO(NFAC, KB, NPIX, NUMIM, Q(LS), Q(LD), 
     &              TRACE, Q(LPJ), SOM, Q(LCO), Q(LU), Q(LW),
     &	            LSAV, LIMA, LPIX, LUV, MADAR)
        
        WRITE(LEIG) NFAC, SOM, TRACE
        WRITE(LEIG) (Q(LD + K), K = 0, NFAC - 1)
#endif

@


1.8
log
@possible prob. temp retrieval of r1.6 version
@
text
@d37 1
a37 1
        DIMENSION Q(*), LUV(*), IMAR(*), MADAR(*)
d39 7
d61 3
a63 2
        SIZE1 = NPIX * NPIX + 4 * NPIX + NFAC
        SIZE2 = NPIX * (NACT + 1)
a68 1
C       DOES THE PROBLEM FIT IN MEMORY ?
d70 17
a86 24
        IF(TSIZE .LT. MEM) THEN
          IF( 50*NFAC.LT. MIN0(NPIX,NACT)) THEN
C           TRY THE ITERATIVE METHOD.
            GOTO 310
          ELSE
            IF (NACT .LT. NPIX) THEN
C             TRY THE TRANSPOSE METHOD.
              GOTO 210
            ELSE
C             TRY THE IN-CORE METHOD.
              GOTO 110
            END IF
          END IF
        ELSE
C         TRY THE ITERATIVE METHOD.
          GOTO 310
        END IF

C       NOTE THAT YOU SHOULD NEVER COME HERE, BUT FOR CONSISTENCY ...

C        WRITE(NOUT,* )
C     $   ' *** MEMORY INSUFFICIENT FOR A SOLUTION OF CA S FOR CORAN'
C        RETURN
 
d92 6
a97 7
110     LD  =  1
        LS  =  LD  +  NPIX
        LU  =  LS  +  NPIX * NPIX
        LPJ  =  LU  +  NPIX
        LCO  =  LPJ  +  NPIX
        LCOORD  =  LCO  +  NPIX
        LW  =  LCOORD  +  NPIX * NFAC
d101 14
d116 1
a116 1
     &        Q(LU), Q(LPJ), TRACE, SOM, LSAV, LUV)
d120 1
a120 1
     &		      LSAV, LIMA, LPIX, LUV, MADAR)
d124 3
d131 9
a139 8
C       MEMORY SEGMENTATION POINTERS         
210     LD  =  1
        LS  =  LD  +  NACT
        LU  =  LS  +  NACT * NACT
        LPJ  =  LU  +  NACT
        LCO  =  LPJ  +  NACT
        LCOORD  =  LCO  +  NACT
        LW  =  LCOORD  +  NACT * NFAC
d141 1
d148 17
d179 4
a182 1
          RETURN
d188 4
a191 1
        END IF
d203 2
a204 2
        LD	 =  LS  +  NPIX * KB
        LPJ	 =  LD  +  MAX0( NPIX,JBASE)
d207 13
a219 7
        LV	 =  LU  +  MAX0(NPIX,JBASE)
        LW	 =  LV  +  MAX0(NPIX,JBASE)
        LBZ	 =  LW  +  NFAC
        LAD	 =  LBZ  +  NPIX * LBASE
        LINB     =  LAD  +  LBASE * LBASE
        LMAX     =  LINB  + LBASE
        IF (LMAX .GT. MEM) THEN
d230 6
d237 12
d264 3
@


1.7
log
@correct alloc of memory
@
text
@d37 1
a37 1
        DIMENSION LUV(*), IMAR(*), MADAR(*)
a38 7
#ifdef SP_ALLOC
         DIMENSION B(1)
         POINTER   (IPQ,B) 
         LOGICAL         RUNTIME
#else
         DIMENSION Q(*)
#endif
d54 2
a55 2
        SIZE1 = NPIX * NPIX + 3 * NPIX + NFAC * NPIX
        SIZE2 = NACT * NACT + 3 * NACT + NFAC * NACT + NFAC 
d61 1
d63 24
a86 17
        IF( 200*NFAC.LT. MIN0(NPIX,NACT)) THEN
c	   small number of factors: GOTO iterative method	
           GOTO 310
	ELSE
#ifdef SP_ALLOC
	   CALL ALLOCIT(TSIZE,RUNTIME,IPQ,'scoran3',IRTFLG)
           IF(RUNTIME)  THEN
#else
           IF(TSIZE.LT.MEM) THEN
#endif
	      IF(TSIZE.EQ.SIZE1) GOTO 110
	      GOTO 210
	   END IF
	ENDIF
	GOTO 310


d97 2
a98 2
ccccc   LCOORD  =  LCO  +  NPIX    ccccc   LW  =  LCOORD  +  NPIX * NFAC
        LW  =  LCO +  NPIX * NFAC
a101 14
#ifdef SP_ALLOC
        CALL INCOR3(NUMIM, NPIX, NACT, NFAC, B(LS), B(LD), 
     &        B(LU), B(LPJ), TRACE, SOM, LSAV, LUV)

        CALL  GETCOO(NFAC, NPIX, NPIX, NUMIM, B(LS), B(LD), 
     &		     TRACE, B(LPJ), SOM, B(LCO), B(LU), B(LW),
     &		      LSAV, LIMA, LPIX, LUV, MADAR)

        WRITE(LEIG) NFAC, SOM, TRACE
        WRITE(LEIG) (B(LD + K), K = 0, NFAC - 1)

        CALL ALLOCIT(0,RUNTIME,IPQ,'scoran3',IRTFLG)
#else

a110 3

#endif

d121 2
a122 2
ccccc   LCOORD  =  LCO  +  NACT    cccccc   LW  =  LCOORD  +  NACT * NFAC
        LW  =  LCO  +  NACT * NFAC
a123 1

a129 17
#ifdef SP_ALLOC
          CALL TRANSPOSE(Q, NPIX, NACT, NUMIM, LUV, LSAV,
     &                      LTRANSP)

          CALL INCOR3(NPIX, NACT, NPIX, NFAC, B(LS), B(LD), 
     &          B(LU), B(LPJ), TRACE, SOM, LTRANSP, MADAR)

          CALL  GETCOOT(NFAC, NACT, NACT, NPIX, B(LS), B(LD), 
     &                      TRACE, B(LPJ), SOM, B(LCO), B(LU), B(LW),
     &                      LTRANSP,LPIX, LIMA, MADAR, LUV)

          CLOSE(LTRANSP, STATUS = 'DELETE')
          WRITE(LEIG) NFAC, SOM, TRACE
          WRITE(LEIG) (B(LD + K), K = 0, NFAC - 1)
	  
          CALL ALLOCIT(0,RUNTIME,IPQ,'scoran3',IRTFLG)
#else
d144 1
a144 4

#endif

           RETURN
d150 1
a150 4
#ifdef SP_ALLOC
      IF(RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'scoran3',IRTFLG)
#endif
         END IF
d172 1
a172 6
#ifdef SP_ALLOC
         CALL ALLOCIT(LMAX,RUNTIME,IPQ,'scoran3',IRTFLG)
         IF(.NOT.RUNTIME)  THEN
#else
         IF(LMAX.GT.MEM) THEN
#endif
a182 6
#ifdef SP_ALLOC
        CALL STOCHA(JBASE, NPIX, NUMIM, NFAC, NITER, LUV, B(LPJ), 
     &	            B(LS), B(LU), TRACE, SOM, B(LV), B(LBZ), B(LD), 
     &	            B(LAD), B(LINB), LSAV, LTMP)

        CLOSE(LTMP, STATUS = 'DELETE')
a183 12
C       PUT EIGENVECTORS IN DECENDING ORDER ...
        CALL  ORDERE(NPIX,NFAC,B(LS),B(LD))

        CALL GETCOO(NFAC, KB, NPIX, NUMIM, B(LS), B(LD), 
     &              TRACE, B(LPJ), SOM, B(LCO), B(LU), B(LW),
     &	            LSAV, LIMA, LPIX, LUV, MADAR)
        
        WRITE(LEIG) NFAC, SOM, TRACE
        WRITE(LEIG) (B(LD + K), K = 0, NFAC - 1)

        CALL ALLOCIT(0,RUNTIME,IPQ,'scoran3',IRTFLG)
#else
a198 3
#endif


@


1.6
log
@nosave
@
text
@d37 1
a37 1
        DIMENSION Q(*), LUV(*), IMAR(*), MADAR(*)
d39 7
d61 2
a62 2
        SIZE1 = NPIX * NPIX + 4 * NPIX + NFAC
        SIZE2 = NPIX * (NACT + 1)
a67 1
C       DOES THE PROBLEM FIT IN MEMORY ?
d69 17
a85 24
        IF(TSIZE .LT. MEM) THEN
          IF( 50*NFAC.LT. MIN0(NPIX,NACT)) THEN
C           TRY THE ITERATIVE METHOD.
            GOTO 310
          ELSE
            IF (NACT .LT. NPIX) THEN
C             TRY THE TRANSPOSE METHOD.
              GOTO 210
            ELSE
C             TRY THE IN-CORE METHOD.
              GOTO 110
            END IF
          END IF
        ELSE
C         TRY THE ITERATIVE METHOD.
          GOTO 310
        END IF

C       NOTE THAT YOU SHOULD NEVER COME HERE, BUT FOR CONSISTENCY ...

C        WRITE(NOUT,* )
C     $   ' *** MEMORY INSUFFICIENT FOR A SOLUTION OF CA S FOR CORAN'
C        RETURN
 
d96 2
a97 2
        LCOORD  =  LCO  +  NPIX
        LW  =  LCOORD  +  NPIX * NFAC
d101 14
d124 3
d137 2
a138 2
        LCOORD  =  LCO  +  NACT
        LW  =  LCOORD  +  NACT * NFAC
d140 1
d147 17
d178 4
a181 1
          RETURN
d187 4
a190 1
        END IF
d212 6
a217 1
        IF (LMAX .GT. MEM) THEN
d228 6
d235 12
d262 3
@


1.5
log
@name in open changed to file (f77)
@
text
@d40 1
a40 1
          
@


1.4
log
@change write(* to write(nout
@
text
@d1 1
a1 1
C
a14 8
C
C***************************************************************************
C

        SUBROUTINE SCORAN3(numim, NFAC, nsam, nrow, npix, LSAV, 
     &	                   LIMA, LPIX, LEIG, Q, MEM, LUV, 
     &                     IMAR, MADAR, NACT, nout)

d28 9
a36 1
C         
d50 1
a50 1
C
d53 1
a53 1
C
d60 1
a60 1
C
d62 1
a62 1
C
d80 1
a80 1
C
d82 5
a86 5
C
c        WRITE(NOUT,* )
c     $   ' *** MEMORY INSUFFICIENT FOR A SOLUTION OF CA S FOR CORAN'
c        RETURN
C 
d88 2
a89 2
C 
C
d112 1
a112 1
C
d114 1
a114 1
C
d128 1
a128 1
          OPEN(NAME = 'TRANSPOSED.FILE', UNIT = LTRANSP, 
d152 1
a152 1
C 
d154 2
a155 2
C 
C	
d181 1
a181 1
        OPEN(LTMP, NAME = 'SCR999.DAT', STATUS = 'UNKNOWN', 
d189 4
a192 4
c
c  Put eigenvectors in decending order ...
                call  ordere(npix,nfac,q(ls),q(ld))
C
d199 1
d201 1
@


1.3
log
@correct write to eig*** file (to write eigenvalues)
@
text
@d57 1
a57 1
	WRITE(*,7891)  SIZE1,SIZE2,MEM
@


1.2
log
@comment out unreachable stat. write(nout,*)
@
text
@d198 1
a198 1
        WRITE(LEIG) (Q(LS + K), K = 0, NFAC - 1)
@


1.1
log
@Initial revision
@
text
@d83 3
a85 3
        WRITE(NOUT,* )
     $   ' *** MEMORY INSUFFICIENT FOR A SOLUTION OF CA S FOR CORAN'
        RETURN
a166 4
CXXXX     
C
C	WATCH FOR THE DIMENSION OF V, AND Q(LPJ) AND Q(LV)
CXXXXX
@
