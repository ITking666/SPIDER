head	1.16;
access;
symbols
	pre_mrcs:1.16
	healthdept_2018:1.16
	pre_getangas:1.15
	GPL2010:1.15
	pre_GPL2010:1.14
	pre_var_equation:1.14
	pre_fftwrings:1.14
	pre_opfiles:1.14
	src:1.14
	best-code:1.14
	x-named-regs:1.14
	x:1.14
	v13-00:1.14
	pre_GPL:1.12
	prec_CA:1.12
	noindx:1.12
	Bproc:1.12
	oct21:1.7
	last77:1.7;
locks; strict;
comment	@c @;


1.16
date	2018.10.03.14.34.08;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.24.13.25.55;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.17.20.47.54;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.17.18.38.17;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.08.17.15.59.41;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.08.10.15.01.36;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.03.24.18.41.29;	author bimal;	state Exp;
branches;
next	1.9;

1.9
date	99.12.27.17.08.55;	author bimal;	state Exp;
branches;
next	1.8;

1.8
date	99.11.10.23.09.21;	author yuchen;	state Exp;
branches;
next	1.7;

1.7
date	98.08.13.21.29.02;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.10.09.14.31.25;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	97.07.11.13.50.28;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	97.07.10.15.52.54;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	97.07.10.15.09.30;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	97.07.09.19.13.41;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	97.07.09.18.55.47;	author pawel;	state Exp;
branches;
next	;


desc
@CE OD
@


1.16
log
@email_health_dept
@
text
@C++*********************************************************************
C
C HISTODC.F
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C
C IMAGE_PROCESSING_ROUTINE
C
C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE  HISTODC(XR,N,LENH)

        INCLUDE 'CMBLOCK.INC'

        DIMENSION  XR(N),H1(LENH),H2(LENH)

C       GENERATE GAUSSIAN DISTRIBUTION - THIS WILL BE EXPECTED DISTRIBUTION
C       OF PIXEL VALUES AFTER THE TRANSFORMATION.

        SPI=0.0
        DO    I=1,LENH
           X=6.0*FLOAT(I-1)/FLOAT(LENH-1)-3.0
           H1(I)=EXP(-X*X/2.0)
           SPI=SPI+H1(I)
        ENDDO
        DO    I=1,LENH
           H1(I)=H1(I)/SPI
        ENDDO

        XRMI=XR(1)
        XRMA=XRMI
        DO    I=2,N
           XRMI=AMIN1(XRMI,XR(I))
           XRMA=AMAX1(XRMA,XR(I))
        ENDDO
C   B
        XCEN=(XRMA-XRMI)/2.0+XRMI
        TOL=0.001
        CHIMIN=GOLDEN(XRMI,XCEN,XRMA,TOL,B,N,LENH,XR,H1,H2,A,C)

         WRITE(NOUT,206)  A,B,C,CHIMIN
206      FORMAT(' The transformation is  A*(ALOG10(x+B)+C)',/,
     &   ' Parameters found     A =',1pe12.5,'   B =',1pe12.5,
     &   '   C =',1pe12.5,/,
     &   ' Chi-square     =',1pe12.5)

C        IF(NSEL(1).NE.0)  PARAM(NSEL(1))=A
C        IF(NSEL(2).NE.0)  PARAM(NSEL(2))=B
C        IF(NSEL(3).NE.0)  PARAM(NSEL(3))=C
         CALL REG_SET_NSEL(1,3,A,B,C,0.0,0.0,IRTFLG)

         END



      FUNCTION GOLDEN(AX,BX,CX,TOL,XMIN,N,LENH,XI,H1,H2,A,AVR)

      DIMENSION  XI(N),H1(LENH),H2(LENH)
      REAL GOLDEN,AX,BX,CX,TOL,XMIN,F,R,C
      PARAMETER (R=.61803399,C=1.-R)
      REAL F1,F2,X0,X1,X2,X3

      X0=AX
      X3=CX
      IF(ABS(CX-BX).GT.ABS(BX-AX))THEN
         X1=BX
         X2=BX+C*(CX-BX)
      ELSE
         X2=BX
         X1=BX-C*(BX-AX)
      ENDIF

      F1=FHODT(X1,N,LENH,XI,H1,H2,A,AVR)
      F2=FHODT(X2,N,LENH,XI,H1,H2,A,AVR)
1     IF (ABS(X3-X0).GT.TOL*(ABS(X1)+ABS(X2))) THEN
         IF (F2.LT.F1) THEN
            X0=X1
            X1=X2
            X2=R*X1+C*X3
            F1=F2
            F2=FHODT(X2,N,LENH,XI,H1,H2,A,AVR)
         ELSE
            X3=X2
            X2=X1
            X1=R*X2+C*X0
            F2=F1
            F1=FHODT(X1,N,LENH,XI,H1,H2,A,AVR)
         ENDIF
         GOTO 1
      ENDIF
      IF(F1.LT.F2)THEN
         GOLDEN=F1
         XMIN=X1
      ELSE
         GOLDEN=F2
         XMIN=X2
      ENDIF
      RETURN
      END
@


1.15
log
@GPL_2010
@
text
@d11 1
a11 1
C=* Email: spider@@wadsworth.org                                        *
@


1.14
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.13
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a5 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
a29 1
C **************************************************************************
a36 1
C--************************************************************************
@


1.12
log
@reg_set_nsel params changed
@
text
@d1 1
d6 1
d8 1
d10 24
d40 1
d48 1
@


1.11
log
@usedj reg_set_nsel
@
text
@d61 1
a61 1
         CALL REG_SET_NSEL(1,A,B,C,0.0,0.0,IRTFLG)
@


1.10
log
@cosmetic
@
text
@d3 1
a3 1
C $$ HISTODC.FOR
a19 2
C
C
d21 1
a21 3
C
C $$ HISTODC.FOR
C
d23 1
d25 1
d28 3
a30 2
C  Generate Gaussian distribution - this will be expected distribution
C   of pixel values AFTER the transformation.
d58 5
a62 3
         IF(NSEL(1).NE.0)  PARAM(NSEL(1))=A
         IF(NSEL(2).NE.0)  PARAM(NSEL(2))=B
         IF(NSEL(3).NE.0)  PARAM(NSEL(3))=C
d65 3
a67 1
      FUNCTION GOLDEN(ax,bx,cx,tol,xmin,N,LENH,XI,H1,H2,A,AVR)
d70 1
a70 1
      REAL golden,ax,bx,cx,tol,xmin,f,R,C
d72 1
a72 1
      REAL f1,f2,x0,x1,x2,x3
@


1.9
log
@adapted for dynamical memory allocation
@
text
@d34 3
a36 3
        X=6.0*FLOAT(I-1)/FLOAT(LENH-1)-3.0
        H1(I)=EXP(-X*X/2.0)
        SPI=SPI+H1(I)
d39 1
a39 1
        H1(I)=H1(I)/SPI
d41 1
a41 1
C
d45 2
a46 2
        XRMI=AMIN1(XRMI,XR(I))
        XRMA=AMAX1(XRMA,XR(I))
d52 1
a52 1
C
d58 1
a58 1
C
d63 1
a63 1
C
d65 2
a66 1
        DIMENSION  XI(N),H1(LENH),H2(LENH)
d70 37
a106 35
      x0=ax
      x3=cx
      if(abs(cx-bx).gt.abs(bx-ax))then
        x1=bx
        x2=bx+C*(cx-bx)
      else
        x2=bx
        x1=bx-C*(bx-ax)
      endif
      f1=FHODT(X1,N,LENH,XI,H1,H2,A,AVR)
      f2=FHODT(X2,N,LENH,XI,H1,H2,A,AVR)
1     if(abs(x3-x0).gt.tol*(abs(x1)+abs(x2)))then
        if(f2.lt.f1)then
          x0=x1
          x1=x2
          x2=R*x1+C*x3
          f1=f2
          f2=FHODT(X2,N,LENH,XI,H1,H2,A,AVR)
        else
          x3=x2
          x2=x1
          x1=R*x2+C*x0
          f2=f1
          f1=FHODT(X1,N,LENH,XI,H1,H2,A,AVR)
        endif
      goto 1
      endif
      if(f1.lt.f2)then
        golden=f1
        xmin=x1
      else
        golden=f2
        xmin=x2
      endif
      return
@


1.8
log
@a
@
text
@d12 1
a12 1
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
d16 1
d18 4
d26 3
a28 3
	SUBROUTINE  HISTODC(XR,H1,H2,N,LENH)
	INCLUDE 'CMBLOCK.INC'
	DIMENSION  XR(N),H1(LENH),H2(LENH)
d32 16
a47 16
	SPI=0.0
	DO    I=1,LENH
	X=6.0*FLOAT(I-1)/FLOAT(LENH-1)-3.0
	H1(I)=EXP(-X*X/2.0)
	SPI=SPI+H1(I)
	ENDDO
	DO    I=1,LENH
	H1(I)=H1(I)/SPI
	ENDDO
C
	XRMI=XR(1)
	XRMA=XRMI
	DO    I=2,N
	XRMI=AMIN1(XRMI,XR(I))
	XRMA=AMAX1(XRMA,XR(I))
	ENDDO
d49 3
a51 3
	XCEN=(XRMA-XRMI)/2.0+XRMI
	TOL=0.001
	CHIMIN=GOLDEN(XRMI,XCEN,XRMA,TOL,B,N,LENH,XR,H1,H2,A,C)
d65 1
a65 1
	DIMENSION  XI(N),H1(LENH),H2(LENH)
@


1.7
log
@*** empty log message ***
@
text
@d24 1
a24 1
CNO_SAVE
@


1.6
log
@*** empty log message ***
@
text
@d44 3
a46 10
	CHIMIN=1.0E23
	DO    B=-XRMI+1.0,XRMA,1.0
	CHI2=FHODT(B,N,LENH,XR,H1,H2,A,C)
	IF(CHI2.LT.CHIMIN)  THEN
	CHIMIN=CHI2
	AM=A
	BM=B
	CM=C
	ENDIF
	ENDDO
d48 1
a48 1
         WRITE(NOUT,206)  AM,BM,CM,CHIMIN
d58 42
@


1.5
log
@*** empty log message ***
@
text
@d28 1
a28 1
	DO  2  I=1,LENH
d31 5
a35 3
2	SPI=SPI+H1(I)
	DO  3  I=1,LENH
3	H1(I)=H1(I)/SPI
d39 1
a39 1
	DO  1  I=2,N
d41 2
a42 1
1	XRMA=AMAX1(XRMA,XR(I))
d45 1
a45 1
	DO  4  B=-XRMI+1.0,XRMA,1.0
d53 1
a53 1
4	CONTINUE
@


1.4
log
@previous
@
text
@d21 3
a23 6
         SUBROUTINE  HISTODC(XR,H1,H2,N,LENH,ITRMAX,NOUT)
         DIMENSION  XR(N),H1(3*LENH),H2(3*LENH)
         COMMON  /PARTR/  RXR,XRMI
         DIMENSION  AK(1),P(2,1),Y(2)
         DIMENSION PR(1),PRR(1),PBAR(1)
         EXTERNAL  FHOD
d27 7
a33 7
	 SPI=0.0
         DO  2  I=1,3*LENH
	 X=6.0*FLOAT(I-1)/FLOAT(3*LENH-1)-3.0
	 H1(I)=EXP(-X*X)
2	 SPI=SPI+H1(I)
         DO  3  I=1,3*LENH
3	 H1(I)=H1(I)/SPI
d35 5
a39 17
         XRMI=XR(1)
         XRMA=XRMI
         AVR=XRMI
         SR=XRMI**2
         DO  1  I=2,N
         AVR=AVR+XR(I)
         SR=SR+XR(I)*XR(I)
         XRMI=AMIN1(XRMI,XR(I))
1        XRMA=AMAX1(XRMA,XR(I))
C     ximi=amin1(ximi,xi(i))
C1    xima=amax1(xima,xi(i))
         RXR=XRMA-XRMI
C     rxi=xima-ximi
         AVR=AVR/N
         SR=SQRT((SR-N*AVR*AVR)/(N-1))
C   A
         A=1.0
d41 10
a50 9
         B=1.0
         P(1,1)=-XRMI+B
         P(2,1)=XRMA
C   C
	 IF(AVR.GT.0.0)  THEN
         C=-ALOG10(AVR)
	 ELSE
	 C=1.0
	 ENDIF
d52 2
a53 14
         DO  4  I=1,2
         AK(1)=P(I,1)
4        Y(I)=FHOD(AK)
         WRITE(NOUT,205)  A,B,C,Y(2)
205      FORMAT(' The transformation is  A*(ALOG10(x+B)+C)',/,
     &   ' Initial parameters   A =',1pe12.5,'   B =',1pe12.5,
     &	 '   C =',1pe12.5,/,
     &   ' Initial chi-square     =',1pe12.5)
C
         N2=3
         EPS=0.0001
         CALL  AMOEBA(P,Y,N2,EPS,FHOD,ITER,ITRMAX,PR,PRR,PBAR)
         WRITE(NOUT,206)  ITER,P(2,1),P(2,2),P(2,3),Y(2)
206      FORMAT(' Minimum was found in ',i3,' iterations.',/,
d56 1
a56 4
     &   ' Final   chi-square     =',1pe12.5)
C     do  6  i=1,4
C6    print  203,(p(i,j),j=1,3)
C203  format(3(3x,e12.5))
d58 3
a60 3
	do  i=1,3*lenh
	write(87,*)  i,h1(i),h2(i)/n
	enddo
@


1.3
log
@*** empty log message ***
@
text
@d24 2
a25 2
         DIMENSION  AK(3),P(4,3),Y(4)
         DIMENSION PR(3),PRR(3),PBAR(3)
a54 4
         P(1,1)=0.9*A
         P(2,1)=A
         P(3,1)=1.1*A
         P(4,1)=1.1*A
d56 3
a58 5
         B=0.0
         P(1,2)=-XRMI
         P(2,2)=B
         P(3,2)=XRMA/2.0
         P(4,2)=XRMA
a64 4
         P(1,3)=0.0
         P(2,3)=C
         P(3,3)=1.5*C
         P(4,3)=2*C
d66 1
a66 1
         DO  4  I=1,4
a67 2
         AK(2)=P(I,2)
         AK(3)=P(I,3)
d70 1
a70 1
205      FORMAT(' The transformation is  A*ALOG10(x+B)+C',/,
d87 3
@


1.2
log
@*** empty log message ***
@
text
@d30 1
a30 1
	 SPI=SQRT(4.0*ATAN(1.0))
d33 4
a36 1
2        H1(I)=EXP(-X*X)/SPI
@


1.1
log
@Initial revision
@
text
@d80 2
a81 1
     &   ' Initial parameters   A =',1pe12.5,'   B =',1pe12.5,'   C =',1pe12.5,/,
d89 2
a90 1
     &   ' Parameters found     A =',1pe12.5,'   B =',1pe12.5,'   C =',1pe12.5,/,
@
