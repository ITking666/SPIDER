head	1.23;
access;
symbols
	pre_mrcs:1.23
	healthdept_2018:1.23
	pre_getangas:1.11
	GPL2010:1.10
	pre_GPL2010:1.9
	pre_var_equation:1.9
	pre_fftwrings:1.9
	pre_opfiles:1.9
	src:1.9
	best-code:1.9
	x-named-regs:1.9
	x:1.9
	v13-00:1.9
	pre_GPL:1.8
	prec_CA:1.8
	noindx:1.8
	Bproc:1.8
	oct21:1.3
	last77:1.3;
locks; strict;
comment	@c @;


1.23
date	2018.10.03.14.34.12;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2012.07.19.15.54.23;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2012.04.11.16.41.28;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2012.02.23.14.39.07;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2012.02.23.14.35.53;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2011.12.20.13.15.12;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2011.12.19.17.41.04;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2011.12.15.19.04.57;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2011.12.15.17.49.10;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2011.12.15.17.33.40;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2011.12.15.16.12.41;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2011.12.08.19.20.04;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2011.01.03.13.57.22;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2010.06.24.13.26.32;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.17.20.54.57;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.24.16.22.17;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.12.18.42.36;	author bimal;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.06.16.59.37;	author bimal;	state Exp;
branches;
next	1.5;

1.5
date	99.12.07.19.14.25;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.11.10.23.10.05;	author yuchen;	state Exp;
branches;
next	1.3;

1.3
date	97.10.10.18.59.14;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.01.26.21.03.20;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.51.32;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.23
log
@email_health_dept
@
text
@C ++********************************************************************
C                                                                      *
C   PRJCQ.F     SPEEDED UP                       FEB 2000 ARDEAN LEITH *
C               COMMON PAR REMOVED               DEC 2010 ARDEAN LEITH *                                                                  *
C               PRJCQ_FBS3                       DEC 2011 G KISHCHENKO *
C               PRJCQ_FBS3 REWRITE               DEC 2011 ARDEAN LEITH *
C               PRJCQ_FBS3 REMOVED               APR 2012 G KISHCHENKO *
C               PRJCQ_N3 REMOVED                 APR 2012 G KISHCHENKO *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2012  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can reIribute it and/or               *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is Iributed in the hope that it will be useful,             *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  PRJCQ_N(CUBE,LTC,DM,PRJ,N,IPCUBE,NN,LDP,LDPNM)
C                                                                      *
C  PURPOSE:  PROJECTS CUBE INTO B                                      * 
C            PROJECTION FROM VOLUME TO PLANE USING 2D BILINEAR 
C            INTERPOLATION SEE ATTIC OR RCS FOR UNSUCCESSFUL 3D 
C            TRILINEAR & FBS ATTEMPTS
C                                                                      *
C  PARAMETERS:  CUBE    INPUT VOLUME                             SENT  *
C               B       OUTPUT PROJECTION IMAGE                  RET.  *
C               NN      CUBE DIMENSIONS                          SENT  *
C               N       IMAGE DIMENSION (SQUARE)                 SENT  *
C                                                                      *
C  CALLERS: bpcg, bprp
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE PRJCQ_N(CUBE,LTC,DM,PRJ,N,IPCUBE,NN,LDP,LDPNM)

        IMPLICIT NONE

        REAL      :: CUBE(LTC)
        INTEGER   :: LTC
        REAL      :: DM(9) 
        REAL      :: PRJ(N,N)
        INTEGER   :: N
        INTEGER   :: IPCUBE(5,NN)
        INTEGER   :: NN,LDP,LDPNM

        INTEGER   :: I,J,IQX,IQY
        REAL      :: DX,DY,DY1M,DX1M,XB,YB

        DO I=1,NN
           XB = (IPCUBE(3,I)-LDP) * DM(1) + (IPCUBE(4,I)-LDP) * DM(2) +
     &          (IPCUBE(5,I)-LDP) * DM(3) + LDPNM
           YB = (IPCUBE(3,I)-LDP) * DM(4) + (IPCUBE(4,I)-LDP) * DM(5) +
     &          (IPCUBE(5,I)-LDP) * DM(6) + LDPNM

           DO J=IPCUBE(1,I),IPCUBE(2,I)
              IQX    = IFIX(XB)
              IQY    = IFIX(YB)

              DX   = (XB - IQX)
              DY   = (YB - IQY) * CUBE(J)

              DX1M = (1.0 - DX)
              DY1M = (CUBE(J) - DY)

              PRJ(IQX,IQY)    = PRJ(IQX,IQY)     + DX1M * DY1M 
              PRJ(IQX+1,IQY)  = PRJ(IQX+1,IQY)   + DX   * DY1M 
              PRJ(IQX,IQY+1)  = PRJ(IQX,IQY+1)   + DX1M * DY         
              PRJ(IQX+1,IQY+1)= PRJ(IQX+1,IQY+1) + DX   * DY         

              XB = XB + DM(1)
              YB = YB + DM(4)
           ENDDO
        ENDDO

        END

C******************************* PRJCQ_FBS3 ****************************

C       PROJECTION USING 3D FBS INTERPOLATION
C       CALLED WITHIN:  parallel do private(l_th),schedule(static)        
C                       PRJOUT IS LOCAL TO EACH THREAD        

        SUBROUTINE  PRJCQ_FBS3(CUBE, DM, 
     &                         PRJOUT, N,NXLD, XYZ,
     &                         X1, Y1, Z1,
     &                         XY2,XZ2,YZ2)

        IMPLICIT NONE

        REAL              :: CUBE(N,N,N)
        REAL              :: DM(9) 
        REAL              :: PRJOUT(N,N)
        INTEGER           :: N,NXLD
        REAL              :: XYZ(NXLD, N,N)
        REAL              :: X1 (NXLD, N,N)
        REAL              :: Y1 (NXLD, N,N)
        REAL              :: Z1 (NXLD, N,N)
        REAL              :: XY2(NXLD, N,N)
        REAL              :: XZ2(NXLD, N,N)
        REAL              :: YZ2(NXLD, N,N)

        INTEGER           :: I,J,K
        INTEGER           :: IOX, IOY, IOZ

	REAL              :: XB, YB, ZB
        REAL              :: DM1,DM2,DM3

        REAL              :: fbs3

        DM1  = DM(1)
        DM2  = DM(2)
        DM3  = DM(3)

        PRJOUT = 0   ! ARRAY ZERO

        DO K=1,N
          DO J=1,N

             XB  = -N/2*DM(1) + (J-N/2-1)*DM(4) +
     &             (K-N/2-1)*DM(7) + N/2+1

             YB  = -N/2*DM(2) + (J-N/2-1)*DM(5) +
     &             (K-N/2-1)*DM(8) + N/2+1

             ZB  = -N/2*DM(3) + (J-N/2-1)*DM(6) +
     &               (K-N/2-1)*DM(9) + N/2+1

             DO I=1,N
                IOX = IFIX(XB)
                IOY = IFIX(YB)
                IOZ = IFIX(ZB)

                IF (IOX >= 1 .AND. IOX <  N  .AND.
     &              IOY >= 1 .AND. IOY <  N  .AND.
     &              IOZ >= 1 .AND. IOZ <  N) THEN

                   PRJOUT(I,J) = PRJOUT(I,J) + 
     &                  FBS3(XB,YB,ZB,
     &                         NXLD, N, N, N,
     &                         CUBE,N,  XYZ,
     &                         X1, Y1, Z1,
     &                         XY2,XZ2,YZ2)
                ENDIF
                XB = XB + DM1
                YB = YB + DM2
                ZB = ZB + DM3
             ENDDO
          ENDDO
        ENDDO

        END


@


1.22
log
@>         SUBROUTINE  PRJCQ_FBS3(CUBE, DM,
put back in.  and used in 'BP CG'
@
text
@d15 1
a15 1
C=* Email: spider@@wadsworth.org                                        *
@


1.21
log
@PRJCQ_FBS3, PRJCQ_N3 REMOVED
@
text
@d91 75
@


1.20
log
@comment
@
text
@d7 2
d13 1
a13 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d31 1
a31 1
C  PRJCQ(CUBE,LTC,DM,B,N,IPCUBE,NN)                                    *                                                                   *
d34 3
d43 1
a43 10
C  CONTAINS:                                                           *
C       PRJCQ_FBS3  USING 3D FBS INTERPOLATION                         *
C          CALLS: FBS3_PREP AND FUNCTION FBS3                          *
C                                                                      *
C       PRJCQ_N  USING 2D BILINEAR INTERPOLATION                       *
C                                                                      *
C       PRJCQ_N3 USING 3D TRLINEAR INTERPOLATION                       *
C                                                                      *
C       PRJCQ  ( PRJCQ_N = PRJCQ ) USING 2D BILINEAR INTERPOLATION     *
C               USED IN: bprp.f has common /par/                       *
d48 1
a48 80
C       PROJECTION USING 3D FBS INTERPOLATION
C       CALLED WITHIN:  parallel do private(l_th),schedule(static)        
C                       PRJOUT IS LOCAL TO EACH THREAD        

        SUBROUTINE  PRJCQ_FBS3(CUBE, DM, 
     &                         PRJOUT, N,NXLD, XYZ,
     &                         X1, Y1, Z1,
     &                         XY2,XZ2,YZ2)

        IMPLICIT NONE

        REAL              :: CUBE(N,N,N)
        REAL              :: DM(9) 
        REAL              :: PRJOUT(N,N)
        INTEGER           :: N,NXLD
        REAL              :: XYZ(NXLD, N,N)
        REAL              :: X1 (NXLD, N,N)
        REAL              :: Y1 (NXLD, N,N)
        REAL              :: Z1 (NXLD, N,N)
        REAL              :: XY2(NXLD, N,N)
        REAL              :: XZ2(NXLD, N,N)
        REAL              :: YZ2(NXLD, N,N)

        INTEGER           :: I,J,K
        INTEGER           :: IOX, IOY, IOZ

	REAL              :: XB, YB, ZB
        REAL              :: DM1,DM2,DM3

        REAL              :: fbs3

        DM1  = DM(1)
        DM2  = DM(2)
        DM3  = DM(3)

        PRJOUT = 0   ! ARRAY ZERO

        DO K=1,N
          DO J=1,N

             XB  = -N/2*DM(1) + (J-N/2-1)*DM(4) +
     &             (K-N/2-1)*DM(7) + N/2+1

             YB  = -N/2*DM(2) + (J-N/2-1)*DM(5) +
     &             (K-N/2-1)*DM(8) + N/2+1

             ZB  = -N/2*DM(3) + (J-N/2-1)*DM(6) +
     &               (K-N/2-1)*DM(9) + N/2+1

             DO I=1,N
                IOX = IFIX(XB)
                IOY = IFIX(YB)
                IOZ = IFIX(ZB)

                IF (IOX >= 1 .AND. IOX <  N  .AND.
     &              IOY >= 1 .AND. IOY <  N  .AND.
     &              IOZ >= 1 .AND. IOZ <  N) THEN

                   PRJOUT(I,J) = PRJOUT(I,J) + 
     &                  FBS3(XB,YB,ZB,
     &                         NXLD, N, N, N,
     &                         CUBE,N,  XYZ,
     &                         X1, Y1, Z1,
     &                         XY2,XZ2,YZ2)
                ENDIF
                XB = XB + DM1
                YB = YB + DM2
                ZB = ZB + DM3
             ENDDO
          ENDDO
        ENDDO

        END

C******************************* PRJCQ_N ****************************

C       PROJECTION USING 2D BILINEAR INTERPOLATION
C       CALLERS: bpcg, bprp

        SUBROUTINE PRJCQ_N(CUBE,LTC,DM,PRJOUT,N,IPCUBE,NN,LDP,LDPNM)
d55 1
a55 1
        REAL      :: PRJOUT(N,N)
d61 1
a61 2
        REAL      :: CT,DIPX,DIPY,DIPY1M,DIPX1M,XB,YB

d73 10
a82 11
              CT     = CUBE(J)
              DIPX   = (XB - IQX)
              DIPY   = (YB - IQY)  * CT

              DIPY1M = (CT - DIPY)
              DIPX1M = (1.0 - DIPX)

              PRJOUT(IQX,IQY)    = PRJOUT(IQX,IQY)     + DIPX1M * DIPY1M 
              PRJOUT(IQX+1,IQY)  = PRJOUT(IQX+1,IQY)   + DIPX   * DIPY1M 
              PRJOUT(IQX,IQY+1)  = PRJOUT(IQX,IQY+1)   + DIPX1M * DIPY         
              PRJOUT(IQX+1,IQY+1)= PRJOUT(IQX+1,IQY+1) + DIPX   * DIPY         
d88 1
a90 87
C****************************** PRJCQ_N3 ******************************

C       PROJECTION USING 3D TRLINEAR INTERPOLATION
C       NOT BETTER THAN 2D BILINEAR INTERPOLATION!

          
        SUBROUTINE PRJCQ_N3(CUBE,LTC,DM,
     &	                  B,N,IPCUBE,NN,LDP,LDPNM)

        DIMENSION     CUBE(N,N,N)
        DIMENSION     DM(9)
        DIMENSION     B(N,N)
        INTEGER       IPCUBE(5,NN)

        INTEGER       I,J,K,I2,J2
        INTEGER       LDPX, LDPY, LDPZ
        INTEGER       IOX, IOY, IOZ
	REAL          XB, YB, ZB
	REAL          DX, DY, DZ
	REAL          A1,A2,A3,A4,A5,A6,A61,A7,A8

        DM1 = DM(1)
        DM2 = DM(2)
        DM3 = DM(3)

        DO K=1,N
          DO J=1,N

               XB = -N/2*DM(1) + (J-N/2-1)*DM(4) +
     &              (K-N/2-1)*DM(7) + N/2+1

               YB = -N/2*DM(2) + (J-N/2-1)*DM(5) +
     &              (K-N/2-1)*DM(8) + N/2+1

               ZB = -N/2*DM(3) + (J-N/2-1)*DM(6) +
     &              (K-N/2-1)*DM(9) + N/2+1
               J2 = J

               IF (.NOT.(J2.LT.1 .OR. J2.GT.N))  THEN
                  DO I=1,N
                     IOX    = IFIX(XB)
                     IF(.NOT.(IOX.LT.1 .OR. IOX.GE.N))  THEN
                        IOY    = IFIX(YB)
                        IF (.NOT.(IOY.LT.1 .OR. IOY.GE.N))  THEN
                            IOZ    = IFIX(ZB)
                            IF (.NOT.(IOZ.LT.1 .OR. IOZ.GE.N)) THEN
                               I2=I
                               IF (.NOT.(I2.LT.1 .OR. I2.GT.N))THEN

                               DX = XB-IOX
                               DY = YB-IOY
                               DZ = ZB-IOZ

                               A1 = CUBE(IOX,IOY,IOZ)
                               A2 = CUBE(IOX+1,IOY,IOZ) - A1
                               A3 = CUBE(IOX,IOY+1,IOZ) - A1
                               A4 = CUBE(IOX,IOY,IOZ+1) - A1
                               A5 = -A2 - CUBE(IOX,IOY+1,IOZ) + 
     &                              CUBE(IOX+1,IOY+1,IOZ)
                               A61= - CUBE(IOX,IOY,IOZ+1) + 
     &                              CUBE(IOX+1,IOY,IOZ+1)
                               A6 = -A2 + A61
                               A7 = -A3 - CUBE(IOX,IOY,IOZ+1) + 
     &                              CUBE(IOX,IOY+1,IOZ+1)
                               A8 = -A5 - A61 -
     &                              CUBE(IOX,IOY+1,IOZ+1) + 
     &                              CUBE(IOX+1,IOY+1,IOZ+1)
                               B(I2,J2) = B(I2,J2)+
     &                            A1 + DZ*(A4 + A6*DX + 
     &                           (A7 + A8*DX)*DY) + A3*DY +
     &                            DX*(A2 + A5*DY)

                              ENDIF
                           ENDIF
                        ENDIF
                     ENDIF

                     XB = XB + DM1
                     YB = YB + DM2
                     ZB = ZB + DM3

                  ENDDO
               ENDIF
            ENDDO
         ENDDO

	 END
@


1.19
log
@removed prjcq (no longer used)
@
text
@d129 1
a129 1
        CALLERS: bpcg, bprp
@


1.18
log
@cosmetic
@
text
@d129 1
d178 1
a178 1
C       NOT BETTER THAN 2D BILINEAR INTERPOLATION
d180 1
a262 39
C********************************* PRJCQ *****************************

C       PROJECTION USING 2D BILINEAR INTERPOLATION (CALLER: BPRP.F)
C       PROJECTION USING 2D BILINEAR INTERPOLATION

        SUBROUTINE PRJCQ(CUBE,LTC,DM,B,N,IPCUBE,NN)

        DIMENSION     DM(9),CUBE(LTC),B(N,N)
        INTEGER       IPCUBE(5,NN)
        COMMON /PAR/  LDP,NM,LDPNM

        DO    I=1,NN
           XB = (IPCUBE(3,I)-LDP)*DM(1)+(IPCUBE(4,I)-LDP)*DM(2)+
     &          (IPCUBE(5,I)-LDP)*DM(3) + LDPNM
           YB = (IPCUBE(3,I)-LDP)*DM(4)+(IPCUBE(4,I)-LDP)*DM(5)+
     &          (IPCUBE(5,I)-LDP)*DM(6) + LDPNM

           DO J=IPCUBE(1,I),IPCUBE(2,I)
              IQX    = IFIX(XB)
              IQY    = IFIX(YB)

              CT     = CUBE(J)
              DIPX   = (XB - IQX)
              DIPY   = (YB - IQY)  * CT

              DIPY1M = (CT - DIPY)
              DIPX1M = (1.0 - DIPX)

              B(IQX,IQY)    = B(IQX,IQY)     + DIPX1M * DIPY1M 
              B(IQX+1,IQY)  = B(IQX+1,IQY)   + DIPX   * DIPY1M 
              B(IQX,IQY+1)  = B(IQX,IQY+1)   + DIPX1M * DIPY         
              B(IQX+1,IQY+1)= B(IQX+1,IQY+1) + DIPX   * DIPY         

              XB = XB + DM(1)
              YB = YB + DM(4)
           ENDDO
        ENDDO

        END
@


1.17
log
@fbs3 nxp parameter
@
text
@d31 1
a31 1
C  PURPOSE:  PROJECTS CUBE INTO B                                      *                                                        *
d47 1
a47 1
C               USED IN: bprp.f has common /par/                       *                                                *
@


1.16
log
@cosmetic, var renamed --> prjout
@
text
@d81 1
a81 1
        REAL              :: fbs3_n
d111 1
a111 1
     &                  FBS3_N(XB,YB,ZB,
d113 1
a113 1
     &                         CUBE,  XYZ,
@


1.15
log
@comments
@
text
@d6 1
d47 1
d53 2
a54 1
C       CALLED WITHIN:  PARALLEL DO PRIVATE(L_TH),SCHEDULE(STATIC)
d57 1
a57 1
     &                         PROJ, N,NXLD, XYZ,
d64 2
a65 2
        REAL              :: DM(9)
        REAL              :: PROJ(N,N)
d68 6
a73 6
        REAL              :: X1   (NXLD, N,N)
        REAL              :: Y1   (NXLD, N,N)
        REAL              :: Z1   (NXLD, N,N)
        REAL              :: XY2  (NXLD, N,N)
        REAL              :: XZ2  (NXLD, N,N)
        REAL              :: YZ2  (NXLD, N,N)
d75 1
a75 1
        INTEGER           :: I,J,K,I2,J2
d87 1
a87 1
        PROJ    = 0   !ARRAY
a90 2
             XB = -N/2*DM(1) + (J-N/2-1)*DM(4) +
     &            (K-N/2-1)*DM(7) + N/2+1
d92 2
a93 2
             YB = -N/2*DM(2) + (J-N/2-1)*DM(5) +
     &            (K-N/2-1)*DM(8) + N/2+1
d95 5
a99 2
             ZB = -N/2*DM(3) + (J-N/2-1)*DM(6) +
     &              (K-N/2-1)*DM(9) + N/2+1
d102 21
a122 14
               IOX = IFIX(XB)
               IOY = IFIX(YB)
               IOZ = IFIX(ZB)

               IF (.NOT.(IOX.LT.1 .OR. IOX.GE.N))  THEN
                  IF (.NOT.(IOY.LT.1 .OR. IOY.GE.N))  THEN
                      IF (.NOT.(IOZ.LT.1 .OR. IOZ.GE.N)) THEN

                         PROJ(I,J) = PROJ(I,J) + 
     &                            FBS3_N(XB,YB,ZB,
     &                            NXLD, N, N, N,
     &                            CUBE, XYZ,
     &                            X1, Y1, Z1,
     &                            XY2,XZ2,YZ2)
d124 1
a124 3
                        ENDIF
                     ENDIF
                  ENDIF
d126 1
a126 3
                  XB = XB + DM1
                  YB = YB + DM2
                  ZB = ZB + DM3
d128 1
a128 3
               ENDDO
            ENDDO
         ENDDO
d130 1
a130 1
	 END
d132 1
a132 1
C******************************* PRJCQ_N ****************************
d134 7
a140 1
C       PROJECTION USING 2D BILINEAR INTERPOLATION
d142 2
a143 1
        SUBROUTINE PRJCQ_N(CUBE,LTC,DM,B,N,IPCUBE,NN,LDP,LDPNM)
a144 2
        REAL      :: DM(9),CUBE(LTC),B(N,N)
        INTEGER   :: IPCUBE(5,NN)
d163 4
a166 4
              B(IQX,IQY)    = B(IQX,IQY)     + DIPX1M * DIPY1M 
              B(IQX+1,IQY)  = B(IQX+1,IQY)   + DIPX   * DIPY1M 
              B(IQX,IQY+1)  = B(IQX,IQY+1)   + DIPX1M * DIPY         
              B(IQX+1,IQY+1)= B(IQX+1,IQY+1) + DIPX   * DIPY         
d177 1
a177 1
C       IT IS NOT BETTER THAN 2D BILINEAR INTERPOLATION
d182 4
a186 2
        DIMENSION     DM(9),CUBE(N,N,N),B(N,N)
        INTEGER       IPCUBE(5,NN)
d264 1
@


1.14
log
@bug in do loop & if order
@
text
@a5 1
C               PRJCQ_FBS3 REWRITE               DEC 2011 ARDEAN LEITH *
d51 1
d54 1
a54 1
     &                         PRJOUT, N,NXLD, XYZ,
d61 2
a62 2
        REAL              :: DM(9) 
        REAL              :: PRJOUT(N,N)
d65 6
a70 6
        REAL              :: X1 (NXLD, N,N)
        REAL              :: Y1 (NXLD, N,N)
        REAL              :: Z1 (NXLD, N,N)
        REAL              :: XY2(NXLD, N,N)
        REAL              :: XZ2(NXLD, N,N)
        REAL              :: YZ2(NXLD, N,N)
d72 1
a72 1
        INTEGER           :: I,J,K
d84 1
a84 1
        PRJOUT = 0   ! ARRAY ZERO
d88 2
d91 2
a92 2
             XB  = -N/2*DM(1) + (J-N/2-1)*DM(4) +
     &             (K-N/2-1)*DM(7) + N/2+1
d94 2
a95 2
             YB  = -N/2*DM(2) + (J-N/2-1)*DM(5) +
     &             (K-N/2-1)*DM(8) + N/2+1
d97 15
a111 2
             ZB  = -N/2*DM(3) + (J-N/2-1)*DM(6) +
     &               (K-N/2-1)*DM(9) + N/2+1
d113 7
a119 15
             DO I=1,N
                IOX = IFIX(XB)
                IOY = IFIX(YB)
                IOZ = IFIX(ZB)

                IF (IOX >= 1 .AND. IOX <  N  .AND.
     &              IOY >= 1 .AND. IOY <  N  .AND.
     &              IOZ >= 1 .AND. IOZ <  N) THEN

                   PRJOUT(I,J) = PRJOUT(I,J) + 
     &                  FBS3_N(XB,YB,ZB,
     &                         NXLD, N, N, N,
     &                         CUBE,  XYZ,
     &                         X1, Y1, Z1,
     &                         XY2,XZ2,YZ2)
d121 3
a123 7
                   XB = XB + DM1
                   YB = YB + DM2
                   ZB = ZB + DM3
                ENDIF
             ENDDO
          ENDDO
        ENDDO
d125 1
a125 1
        END
d251 1
a251 1
C       PROJECTION USING 2D BILINEAR INTERPOLATION
@


1.13
log
@rewrite for fbs3_n  and var rename
@
text
@d74 1
d98 8
a105 7
             IOX = IFIX(XB)
             IOY = IFIX(YB)
             IOZ = IFIX(ZB)

             IF (IOX >= 1 .AND. IOX <  N  .AND.
     &           IOY >= 1 .AND. IOY <  N  .AND.
     &           IOZ >= 1 .AND. IOZ <  N) THEN
a106 1
                DO I=1,N
d117 2
a118 2
                ENDDO
             ENDIF
@


1.12
log
@fbs3 routine added
@
text
@d6 1
d54 1
a54 1
     &                         B, N,NXLD, CUBE0,
d58 2
d61 2
a62 1
        DIMENSION         :: DM(9),B(N,N)
d64 7
a70 7
        REAL              :: CUBE0(NXLD, N,N)
        REAL              :: X1   (NXLD, N,N)
        REAL              :: Y1   (NXLD, N,N)
        REAL              :: Z1   (NXLD, N,N)
        REAL              :: XY2  (NXLD, N,N)
        REAL              :: XZ2  (NXLD, N,N)
        REAL              :: YZ2  (NXLD, N,N)
d72 1
a72 2
        REAL, ALLOCATABLE :: CUBE1(:,:,:)
        INTEGER           :: I,J,K,I2,J2
a73 1

d77 1
a77 3
        REAL              :: fbs3

        NXLD = N + 2 - MOD(N,2)
d83 1
a83 1
        B    = 0   !ARRAY
d85 5
a89 13
        ALLOCATE (CUBE1(NXLD, N, N), STAT=IRTFLG )
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(46,'PRJCQ_FBS3; CUBE1....',NXLD*N*N)
           RETURN
        ENDIF 

        DO K = 1,N
           DO J = 1,N
              DO I = N + 1,NXLD
                 CUBE1(I,J,K) = 0
              ENDDO
           ENDDO
        ENDDO
d91 2
a92 7
        DO K = 1,N
           DO J = 1,N
              DO I = 1,N
                 CUBE1(I,J,K) = CUBE(I,J,K)
              ENDDO
           ENDDO
        ENDDO
d94 2
a95 4
        DO K=1,N
          DO J=1,N
             XB = -N/2*DM(1) + (J-N/2-1)*DM(4) +
     &            (K-N/2-1)*DM(7) + N/2+1
d97 7
a103 2
             YB = -N/2*DM(2) + (J-N/2-1)*DM(5) +
     &            (K-N/2-1)*DM(8) + N/2+1
a104 4
             ZB = -N/2*DM(3) + (J-N/2-1)*DM(6) +
     &              (K-N/2-1)*DM(9) + N/2+1
             J2 = J
             IF (.NOT.(J2.LT.1 .OR. J2.GT.N))  THEN
d106 6
a111 29
                  IOX    = IFIX(XB)
                  IF(.NOT.(IOX.LT.1 .OR. IOX.GE.N))  THEN
                     IOY    = IFIX(YB)
                     IF (.NOT.(IOY.LT.1 .OR. IOY.GE.N))  THEN
                         IOZ    = IFIX(ZB)
                         IF (.NOT.(IOZ.LT.1 .OR. IOZ.GE.N)) THEN
                            I2=I
                            IF (.NOT.(I2.LT.1 .OR. I2.GT.N))THEN

                               B(I2,J2) = B(I2,J2) + 
     &                            FBS3(XB,YB,ZB,
     &                            NXLD, N, N, N,
     &                            CUBE1, CUBE0,
     &                            X1, Y1, Z1,
     &                            XY2,XZ2,YZ2)

                              ENDIF
                           ENDIF
                        ENDIF
                     ENDIF

                     XB = XB + DM1
                     YB = YB + DM2
                     ZB = ZB + DM3

                  ENDDO
               ENDIF
            ENDDO
         ENDDO
d113 7
a119 1
         IF (ALLOCATED(CUBE1))  DEALLOCATE (CUBE1)
d121 1
a121 1
	 END
@


1.11
log
@COMMON PAR REMOVED in prjcq_n
@
text
@d3 3
a5 2
C   PRJCQ.F             SPEEDED UP               FEB 2000 ARDEAN LEITH *
C                       COMMON PAR REMOVED       DEC 2010 ARDEAN LEITH *                                                                  *
d10 1
a10 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d14 1
a14 1
C=* SPIDER is free software; you can redistribute it and/or            *
d19 1
a19 1
C=* SPIDER is distributed in the hope that it will be useful,          *
d37 10
d50 108
d163 1
a163 1
        DO    I=1,NN
d191 1
d193 2
a194 5
#ifdef NEVER
C             B(IQX,IQY)    = B(IQX,IQY)     + (1.0-DIPX)*(1.0-DIPY)*CT
C             B(IQXP1,IQY)  = B(IQXP1,IQY)   +      DIPX *(1.0-DIPY)*CT
C             B(IQX,IQYP1)  = B(IQX,IQYP1)   + (1.0-DIPX)*     DIPY *CT
C             B(IQXP1,IQYP1)= B(IQXP1,IQYP1) +      DIPX *     DIPY *CT
d196 2
a197 1
#endif
d200 80
d312 1
@


1.10
log
@GPL_2010
@
text
@d3 2
a4 2
C   PRJCQ.F             SPEEDED UP  FEB 2000 ARDEAN LEITH              *
C                                                                      *
a35 3
C IMAGE_PROCESSING_ROUTINE                                             *
C                                                                      *
C        0         2         3         4         5         6         7 *
d39 43
a115 8

#ifdef NEVER
C             B(IQX,IQY)    = B(IQX,IQY)     + (1.0-DIPX)*(1.0-DIPY)*CT
C             B(IQXP1,IQY)  = B(IQXP1,IQY)   +      DIPX *(1.0-DIPY)*CT
C             B(IQX,IQYP1)  = B(IQX,IQYP1)   + (1.0-DIPX)*     DIPY *CT
C             B(IQXP1,IQYP1)= B(IQXP1,IQYP1) +      DIPX *     DIPY *CT

#endif
@


1.9
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.8
log
@tuning
@
text
@d6 23
a28 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.7
log
@*** empty log message ***
@
text
@d3 1
a3 1
C   PRJCQ.F                                                            *
d14 1
d16 1
d18 4
a21 1
C  PURPOSE:                                                            *
a22 2
C  PARAMETERS:                                                         *
C
d24 1
a24 1
C
d29 1
a29 1
        SUBROUTINE  PRJCQ(CUBE,LTC,DM,B,N,IPCUBE,NN)
d31 2
a32 2
        DIMENSION  DM(9),CUBE(LTC),B(n,n)
        INTEGER  IPCUBE(5,NN)
d36 23
a58 16
           XB=(IPCUBE(3,I)-LDP)*DM(1)+(IPCUBE(4,I)-LDP)*DM(2)+
     &     (IPCUBE(5,I)-LDP)*DM(3)
           YB=(IPCUBE(3,I)-LDP)*DM(4)+(IPCUBE(4,I)-LDP)*DM(5)+
     &     (IPCUBE(5,I)-LDP)*DM(6)
           DO    J=IPCUBE(1,I),IPCUBE(2,I)
              IQX=IFIX(XB+FLOAT(LDPNM))
              IQY=IFIX(YB+FLOAT(LDPNM))
              DIPX=XB+LDPNM-IQX
              DIPY=YB+LDPNM-IQY
              CT=CUBE(J)
              B(IQX,IQY)    =B(IQX,IQY)     +(1.0-DIPX)*(1.0-DIPY)*CT
              B(IQX+1,IQY)  =B(IQX+1,IQY)   +     DIPX *(1.0-DIPY)*CT
              B(IQX,IQY+1)  =B(IQX,IQY+1)   +(1.0-DIPX)*     DIPY *CT
              B(IQX+1,IQY+1)=B(IQX+1,IQY+1) +     DIPX *     DIPY *CT
              XB=XB+DM(1)
              YB=YB+DM(4)
d62 9
@


1.6
log
@cosmetic
@
text
@a0 1

d3 1
a3 1
C                                                                      *
@


1.5
log
@header
@
text
@d20 3
a22 1
C                                                                      *
d27 1
a27 1
	SUBROUTINE  PRJCQ(CUBE,LTC,DM,B,N,IPCUBE,NN)
d30 2
a31 2
	INTEGER  IPCUBE(5,NN)
	COMMON /PAR/  LDP,NM,LDPNM
d33 20
a52 20
	DO    I=1,NN
	XB=(IPCUBE(3,I)-LDP)*DM(1)+(IPCUBE(4,I)-LDP)*DM(2)+
     &	  (IPCUBE(5,I)-LDP)*DM(3)
	YB=(IPCUBE(3,I)-LDP)*DM(4)+(IPCUBE(4,I)-LDP)*DM(5)+
     &	  (IPCUBE(5,I)-LDP)*DM(6)
	DO    J=IPCUBE(1,I),IPCUBE(2,I)
	IQX=IFIX(XB+FLOAT(LDPNM))
	IQY=IFIX(YB+FLOAT(LDPNM))
	DIPX=XB+LDPNM-IQX
	DIPY=YB+LDPNM-IQY
	CT=CUBE(J)
	B(IQX,IQY)    =B(IQX,IQY)     +(1.0-DIPX)*(1.0-DIPY)*CT
	B(IQX+1,IQY)  =B(IQX+1,IQY)   +     DIPX *(1.0-DIPY)*CT
	B(IQX,IQY+1)  =B(IQX,IQY+1)   +(1.0-DIPX)*     DIPY *CT
	B(IQX+1,IQY+1)=B(IQX+1,IQY+1) +     DIPX *     DIPY *CT
	XB=XB+DM(1)
	YB=YB+DM(4)
	ENDDO
	ENDDO
	END
@


1.4
log
@a
@
text
@d1 24
d26 1
@


1.3
log
@*** empty log message ***
@
text
@d5 1
a5 1
CNO_SAVE
@


1.2
log
@nosave
@
text
@d6 1
a6 1
	DO  1  I=1,NN
d11 1
a11 1
	DO  1  J=IPCUBE(1,I),IPCUBE(2,I)
d22 3
a24 1
1	YB=YB+DM(4)
@


1.1
log
@Initial revision
@
text
@d5 1
@
