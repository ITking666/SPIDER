head	1.20;
access;
symbols
	healthdept_2018:1.20
	pre_getangas:1.15
	GPL2010:1.15
	pre_GPL2010:1.14
	pre_var_equation:1.13
	pre_fftwrings:1.13
	pre_opfiles:1.13
	src:1.13
	best-code:1.13
	x-named-regs:1.13
	x:1.13
	v13-00:1.13
	pre_GPL:1.11
	prec_CA:1.8
	noindx:1.8
	Bproc:1.8
	oct21:1.4
	last77:1.3;
locks; strict;
comment	@c @;


1.20
date	2018.10.03.14.34.08;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2014.05.30.14.02.09;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2012.05.08.14.07.01;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2011.08.09.19.29.07;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2011.06.22.15.50.26;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.24.13.25.58;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2010.01.19.14.14.34;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.17.20.09.03;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.17.18.03.36;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2005.06.03.18.36.30;	author cyang;	state Exp;
branches;
next	1.10;

1.10
date	2005.01.25.16.57.05;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.30.20.00.08;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.17.15.59.47;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.17.14.29.56;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.08.18.18.16;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.07.18.32.03;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.08.09.20.04.20;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	97.10.10.15.00.33;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	97.10.10.14.48.55;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	97.09.11.15.02.26;	author leith;	state Exp;
branches;
next	;


desc
@new
@


1.20
log
@email_health_dept
@
text
@C++*********************************************************************
C                                                                      *
C  INQUIREIF.F                NEW ROUTINE          SEP 97 ARDEAN LEITH *
C                             READPQ ADDED         AUG 99 ARDEAN LEITH *
C                             USED REG_            AUG 00 ARDEAN LEITH *
C                             ACCEPTS *            JAN 05 ARDEAN LEITH *
C                             'IQ DI'              JAN 10 ARDEAN LEITH *
C                             ACCEPTS EXTENSION    JUN 11 ARDEAN LEITH *
C                             EXTENSION ../NAM BUG AUG 11 ARDEAN LEITH *
C                             LESS VERBOSE         MAY 14 ARDEAN LEITH *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   INQUIREIF    DETERMINES IF A FILE/DIR EXISTS
C
C--*********************************************************************

        SUBROUTINE INQUIREIF(TYPET)

        INCLUDE 'CMLIMIT.INC' 
        INCLUDE 'CMBLOCK.INC' 
 
        CHARACTER (LEN=*)      :: TYPET
        CHARACTER (LEN=MAXNAM) :: FILNAM
        CHARACTER (LEN=1)      :: NULL
        LOGICAL                :: EX,ISOPEN
        LOGICAL, PARAMETER     :: FROMBACK = .TRUE.

        CALL SET_MPI(ICOMM,MYPID,MPIERR)

        NULL   = CHAR(0)
        EX     = .FALSE.
        ISOPEN = .FALSE.

        IF (TYPET .EQ. 'DIR') THEN
           CALL FILERD(FILNAM,NLET,NULL,
     &         'QUERY EXISTANCE OF DIRECTORY~',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 1000

        ELSE
           CALL FILERD(FILNAM,NLET,NULL,'QUERY EXISTANCE OF~9',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 1000

C          MERGE FILNAM WITH DATEXC IF NECESARY
           ILOCAT  = INDEX(FILNAM,'@@')
           ILOCDOT = INDEX(FILNAM,'.')
           !write(6,*) 'filnam:',filnam(1:20)

           IF ((FILNAM(1:1) .NE. '_') .AND. 
     &         (ILOCAT  == 0)      ) THEN

C              SEE IF HAS EXTENSION ALREADY
               ISLASH = INDEX(FILNAM(1:NLET),'/',BACK=FROMBACK)
               IDOT   = INDEX(FILNAM(1:NLET),'.',BACK=FROMBACK)

               !write(6,*) 'islash,idot:',islash,idot

               IF ((ISLASH <= 0 .AND. 
     &              IDOT   <= 0) .OR.
     &             (IDOT   < ISLASH)) THEN

C                MERGE FILNAM WITH DATEXC 
                 CALL FILCAN(FILNAM,NLET,NULL,NULL,FILNAM,DATEXC,IRTFLG)
                 IF (IRTFLG .NE. 0) RETURN
              ENDIF
           ENDIF
        ENDIF

C       FIND IF FILE/DIR EXISTS
        CALL INQUIREIF1(33,FILNAM,TYPET,EX,ISOPEN,LUNOP,
     &                  INLNED,IMGNUM,IRTFLG)

C       SET REGISTERS (IF NECESSARY)
1000    VAL1 = 0.0
        IF (EX) VAL1 = 1.0

        VAL2 = 0.0
        IF (ISOPEN) VAL2 = 1.0

        CALL REG_SET_NSEL(1,2,VAL1,VAL2, 0.0, 0.0, 0.0,IRTFLG)

        IF (MYPID <= 0) THEN
           IF (TYPET == 'DIR') THEN
              IF (EX) THEN
                 WRITE(NOUT,*)' DIRECTORY EXISTS: ',FILNAM(1:NLET)
              ELSE  
                 WRITE(NOUT,*)' DIRECTORY DOES NOT EXIST: ',
     &                        FILNAM(1:NLET)
              ENDIF
           ELSE
              IF (EX) THEN
                 WRITE(NOUT,*)' FILE EXISTS: ',FILNAM(1:NLET)
              ELSE  
                 WRITE(NOUT,*)' FILE DOES NOT EXIST: ',FILNAM(1:NLET)
              ENDIF
           ENDIF
           IF (VERBOSE) WRITE(NOUT,*) ' '
        ENDIF

        END





@


1.19
log
@LESS VERBOSE
@
text
@d17 1
a17 1
C=* Email: spider@@wadsworth.org                                        *
@


1.18
log
@sent typet to inquireif1  (intel ifort needs)
@
text
@d10 1
d15 1
a15 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
a114 1
              WRITE(NOUT,*) ' '
d116 1
a116 1
           WRITE(NOUT,*) ' '
@


1.17
log
@EXTENSION ../NAM BUG
@
text
@a40 2
        COMMON         BUF(1)

d68 1
a68 1
     &         (ILOCAT  .EQ. 0)      ) THEN
d76 2
a77 1
               IF ((ISLASH <= 0 .AND. IDOT <= 0) .OR.
d88 1
a88 1
        CALL INQUIREIF1(33,FILNAM,BUF,640000,EX,ISOPEN,LUNOP,
d100 2
a101 2
        IF (MYPID .LE. 0) THEN
           IF (TYPET .EQ. 'DIR') THEN
@


1.16
log
@ACCEPTS EXTENSION bug
@
text
@d9 1
d47 1
a69 1
     &         (ILOCDOT .EQ. 0)       .AND. 
d71 14
a84 3
C             MERGE FILNAM WITH DATEXC 
              CALL FILCAN(FILNAM,NLET,NULL,NULL,FILNAM,DATEXC,IRTFLG)
              IF (IRTFLG .NE. 0) RETURN
a85 1

@


1.15
log
@GPL_2010
@
text
@d2 7
a8 6
C
C  INQUIREIF.F                NEW ROUTINE      SEP 97 ARDEAN LEITH
C                             READPQ ADDED     AUG 99 ARDEAN LEITH
C                             USED REG_        AUG 00 ARDEAN LEITH
C                             ACCEPTS *        JAN 05 ARDEAN LEITH
C                             'IQ DI'          JAN 10 ARDEAN LEITH
d13 1
a13 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d35 1
a35 1
        SUBROUTINE INQUIREIF(TYPE)
d42 1
a42 1
        CHARACTER (LEN=*)      :: TYPE
d49 3
a51 1
        NULL = CHAR(0)
d53 1
a53 1
        IF (TYPE .EQ. 'DIR') THEN
d56 2
d59 2
a60 5
           CALL FILERD(FILNAM,NLET,NULL,'QUERY EXISTANCE OF',IRTFLG)
        ENDIF
        IF (IRTFLG .NE. 0) THEN
           EX     = .FALSE.
           ISOPEN = .FALSE.
a61 1
        ELSE
d63 8
a70 3
           ILOCAT = INDEX(FILNAM,'@@')
           IF (TYPE .NE. 'DIR' .AND. FILNAM(1:1) .NE. '_' .AND. 
     &         ILOCAT .EQ. 0) THEN
a74 3
C          FIND IF IT EXISTS
           CALL INQUIREIF1(33,FILNAM,BUF,640000,EX,ISOPEN,LUNOP,
     &                     INLNED,IMGNUM,IRTFLG)
d77 4
d82 1
a82 1
        VAL1 = 0.0
d91 1
a91 1
           IF (TYPE .EQ. 'DIR') THEN
@


1.14
log
@iq di
@
text
@d9 3
a11 2
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
@


1.13
log
@GPL License fixed
@
text
@d7 1
d9 5
a13 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d15 1
a15 6
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d30 1
a30 1
C   INQUIREIF    DETERMINES IF A FILE EXISTS
d34 1
a34 1
        SUBROUTINE INQUIREIF()
d41 1
d46 2
a47 7
#ifdef USE_MPI    
        include 'mpif.h'
        ICOMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(ICOMM, MYPID, IERR) 
#else 
        MYPID = -1
#endif 
d50 6
a55 1
        CALL FILERD(FILNAM,NLET,NULL,'QUERY EXISTANCE OF',IRTFLG)
d63 2
a64 1
           IF (FILNAM(1:1) .NE. '_' .AND. ILOCAT .EQ. 0) THEN
d84 14
a97 4
           IF (EX) THEN
              WRITE(NOUT,*)' FILE EXISTS: ',FILNAM(1:NLET)
           ELSE  
              WRITE(NOUT,*)' FILE DOES NOT EXIST: ',FILNAM(1:NLET)
d101 1
a101 1
        RETURN
@


1.12
log
@HRI GPL License used
@
text
@a7 2
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      **
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
d11 1
a11 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a30 6

C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
@


1.11
log
@removed MPI_BARRIER to reduce comm overhead
@
text
@d8 1
d10 24
@


1.10
log
@accepts * input
@
text
@a74 5

#ifdef USE_MPI
        CALL MPI_BARRIER(ICOMM,IERR)
#endif

@


1.9
log
@mpi
@
text
@d3 4
a6 4
C  INQUIREIF.F                NEW ROUTINE  SEPT 97 ARDEAN LEITH
C                             READPQ ADDED AUG 99 ARDEAN LEITH
C                             USED REG_  AUG 00   ARDEAN LEITH
C
d22 1
d27 4
a30 3
        CHARACTER *81  FILNAM
        CHARACTER      NULL
        LOGICAL        EX,ISOPEN
d33 2
a34 3
        INTEGER  MYPID, COMM, IERR 
        COMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(COMM, MYPID, IERR) 
d41 11
a51 1
        IF (IRTFLG .EQ. -1) RETURN
d53 3
a55 5
C       MERGE FILNAM WITH DATEXC IF NECESARY
        ILOCAT = INDEX(FILNAM,'@@')
        IF (FILNAM(1:1) .NE. '_' .AND. ILOCAT .EQ. 0) THEN
           CALL FILCAN(FILNAM,NLET,NULL,NULL,FILNAM,DATEXC,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
a57 4
C       FIND IF IT EXISTS
        CALL INQUIREIF1(33,FILNAM,BUF,640000,EX,ISOPEN,LUNOP,
     &                  INLNED,IMGNUM,IRTFLG)

d67 1
a67 2
#ifdef USE_MPI
        IF (MYPID .EQ. 0) THEN
d75 3
a77 8
        CALL MPI_BARRIER(COMM,IERR)
#else
        IF (EX) THEN
           WRITE(NOUT,*)' FILE EXISTS: ',FILNAM(1:NLET)
        ELSE          
           WRITE(NOUT,*)' FILE DOES NOT EXIST: ',FILNAM(1:NLET)
        ENDIF
        WRITE(NOUT,*) ' '
@


1.8
log
@reg_set_nsel params changed
@
text
@d29 8
a36 1

d62 11
d79 1
@


1.7
log
@reg_set_nsel call wrong
@
text
@d53 1
a53 1
        CALL REG_SET_NSEL(1,VAL1,VAL2, 0.0, 0.0, 0.0,IRTFLG)
@


1.6
log
@changes for reg_set
@
text
@d49 1
d52 2
a53 1
        CALL REG_SET_NSEL(1,VAL1,VAL2,IRTFLG)
@


1.5
log
@removed readpq call
@
text
@d5 2
a6 1
C                   
d46 6
a51 13
        IF (NSEL(1) .GT. 0) THEN
C          ONE REGISTER SPECIFIED ON COMMAND LINE

           PARAM(NSEL(1)) = 0.0
           IF (EX) PARAM(NSEL(1)) = 1.0
        ENDIF

        IF (NSEL(2) .GT. 0) THEN
C          TWO REGISTERS SPECIFIED ON COMMAND LINE

           PARAM(NSEL(2)) = 0.0
           IF (ISOPEN) PARAM(NSEL(2)) = 1.0
        ENDIF
@


1.4
log
@need readpq
@
text
@a30 3
C       SEE IF REGISTERS SPECIFIED
        CALL READPQ(FCHAR)

@


1.3
log
@split of inquireif1.f
@
text
@d3 3
a5 2
C  INQUIREIF.F                                  NEW ROUTINE  SEPT 97 al
C                                
a19 1
CNO_SAVE
d30 3
@


1.2
log
@now handles stacks & inline images
@
text
@a66 1

a68 121
C       ----------------------- INQUIREIF1 -------------------------

        SUBROUTINE INQUIREIF1(LUN,FILNAM,BUF,NBUFSIZ,EX,ISOPEN,LUNOP,
     7                        INLNED,IMGNUM,IRTFLG)

CNO_SAVE

        INCLUDE 'CMBLOCK.INC' 
 
C       DO NOT CHANGE NUMINLN WITHOUT SEARCH FOR OTHER OCCURANCES!
        PARAMETER       (NUMINLN = 9)
        INTEGER * 8     LOCBUF
        COMMON /LUNARC/ LOCBUF(NUMINLN), NWORDBUF(NUMINLN), 
     &                  NSAMBUF(NUMINLN),IRECBUF(NUMINLN),
     &                  LABRECBUF(NUMINLN)

        COMMON /LUNARA/ LUNARA(100),LUNSTK(100)

        DIMENSION       BUF(*)
        CHARACTER *(*)  FILNAM
        CHARACTER       NULL,FIRSTC
        LOGICAL         EX,ISOPEN,STACKOPN

        NULL    = CHAR(0)

        NLET    = lnblnk(FILNAM)
        FIRSTC  = FILNAM(1:1)
        ILOCAT  = INDEX(FILNAM,'@@')
        NAMEND  = NLET
        IF (ILOCAT .GT. 1) NAMEND = ILOCAT - 1
        EX      = .FALSE.
        ISOPEN  = .FALSE.
        INLNED  = 0
        IMGNUM  = 0

        IF (FIRSTC .NE. '_' .AND. ILOCAT .LE. 0) THEN
C          NO LEADING '_' OR '@@' MEANS FILE_BASED IMAGE OR OTHER FILE 

C          SEE IF THIS FILE EXISTS, (RETURNS EX, ISOPEN, LUNOP)
           INQUIRE(FILE=FILNAM(1:NAMEND),EXIST=EX,OPENED=ISOPEN,
     &             NUMBER=LUNOP,ERR=999)

           RETURN

        ELSEIF (FIRSTC .NE. '_') THEN
C          NO LEADING '_' MEANS FILE_BASED STACK 

C          CHECK TO SEE IF IMAGE EXISTS IN THIS EXISTING STACK
C          SET IFOUND TO DECREASE OPENING OUTPUT INFO
           IFOUND = -4
           CALL OPENFB(BUF,FILNAM,LUN,NSAM,NROW,'Z',NF,NSLICE)
           IFOUND = 0
           IF (NF .EQ. 2) THEN
              EX = .TRUE.
              CLOSE(LUN)
           ENDIF
           RETURN

        ELSEIF (FIRSTC .EQ. '_') THEN
C          INLINE IMAGE FILE OR OVERALL INLINE STACK ACCESS WANTED

C          RETRIVE INLINE BUFFER NUMBER FROM FILE NAME
           CALL INLNBUF(FILNAM,NLET,INLNED,IRTFLG)
           IF (IRTFLG .NE. 0)  RETURN

C          SEE IF INLINE STACK EXISTS NOW
           STACKOPN = (NSAMBUF(INLNED) .GT. 0)
           IF (.NOT. STACKOPN) RETURN

C          HAVE EXISTING INLINE BUFFER, TIE IT TO LUN & GET NSAM
C          NEED TO OVERRIDE ERRT IN OPENINLN
           CALL OPENINLN(LUN,INLNED,.FALSE.,NSAM,0,.FALSE.,IRTFLG)
C          IRTFLG WILL BE SET IF INLINE FILE DOES NOT EXIST
           IF (IRTFLG .NE. 0)  RETURN

           IF (ILOCAT .EQ. 0) THEN
C              SIMPLE INLINE IMAGE OR OVERALL INLINE STACK
               EX = .TRUE.
               RETURN
           ENDIF                 

C           FIND IMAGE NUMBER WITHIN STACK 
            READ(FILNAM(ILOCAT+1:),8000,IOSTAT=IER) IMGNUM
8000        FORMAT(I)
            IF (IER .NE. 0) THEN
               CALL ERRT(101,'UNABLE TO INTERPRET IMAGE NUMBER',NE)
               RETURN
            ENDIF

C          SET OFFSET INTO LUNSTK, ALL IMAGES SHOULD HAVE IREC 
C          SAME AS THE HEADER          
           LUNARA(LUN) = LABRECBUF(INLNED)
           LUNSTK(LUN) = (IMGNUM-1)* IRECBUF(INLNED) + LUNARA(LUN)

C          GET SPECIFIED IMAGE HEADER FROM STACK LOCATION
           CALL REDHED(LUN,BUF,NBUFSIZ,NSAM,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

C          SEE IF QUERIED IMAGE IS IN THE STACK
           IMUSED = BUF(25)
           IF (IMUSED .GT. 0) EX = .TRUE.

        ELSE
C          REGULAR IMAGE STACK WANTED
C          SEE IF THIS STACK FILE EXISTS
           INQUIRE(FILE=FILNAM,EXIST=EX,OPENED=ISOPEN,NUMBER=LUNOP,
     &          ERR=999)

C          SEE IF THIS STACKED IMAGE EXISTS IN THE FILE
        ENDIF

        RETURN



999     WRITE(NOUT,*)'*** ERROR INQUIRING ABOUT FILE: ',FILNAM(1:NLET)
        CALL ERRT(100,' ',NE)
        EX = .FALSE.
        RETURN

        END
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
C++*************************************************************************
d3 1
a3 1
C  INQUIREIF.F                                   ADDED  SEPT 97 al
d5 8
a12 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d14 1
a14 1
C   UTIL4    DRIVER FOR CERTAIN ROUTINES
d16 1
a16 1
C--*************************************************************************
a18 1

d23 1
a23 1
        COMMON         FILNAM
d34 5
a38 12
C       MERGE FILNAM WITH DATEXC
        CALL FILCAN(FILNAM,NLET,NULL,NULL,FILNAM,DATEXC,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

C       SEE IF FILE EXISTS
        INQUIRE(FILE=FILNAM,EXIST=EX,OPENED=ISOPEN,NUMBER=LUNOP,
     &          IOSTAT=IOS)

        IF (IOS .NE. 0) THEN
          WRITE(NOUT,*)'*** ERROR INQUIRING ABOUT FILE: ',FILNAM(1:NLET)
          CALL ERRT(100,' ',NE)
          RETURN
d41 4
d53 1
a53 1
C          TWP REGISTERS SPECIFIED ON COMMAND LINE
d58 1
a58 1
        
d60 1
a60 1
           WRITE(NOUT,*) '   QUERIED FILE EXISTS: ',FILNAM(1:NLET)
d62 117
a178 2
           WRITE(NOUT,*) 
     &           '   QUERIED FILE DOES NOT EXIST: ',FILNAM(1:NLET)
d182 8
d191 3
@
