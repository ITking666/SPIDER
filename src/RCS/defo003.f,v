head	1.19;
access;
symbols
	pre_mrcs:1.19
	healthdept_2018:1.19
	pre_getangas:1.15
	GPL2010:1.15
	pre_GPL2010:1.14
	pre_var_equation:1.14
	pre_fftwrings:1.14
	pre_opfiles:1.14
	src:1.14
	best-code:1.14
	x-named-regs:1.14
	x:1.14
	v13-00:1.14
	pre_GPL:1.12
	prec_CA:1.12
	noindx:1.12
	Bproc:1.11
	oct21:1.10
	last77:1.9;
locks; strict;
comment	@c @;


1.19
date	2018.10.03.14.34.04;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2014.11.25.13.37.45;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2014.11.10.19.00.55;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2014.11.05.18.37.44;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.24.13.25.24;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.17.20.38.02;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.17.18.28.26;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.11.14.08.27;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.05.17.18.09.39;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	99.07.14.19.29.00;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.02.04.14.38.22;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	98.01.28.19.32.11;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	98.01.26.22.34.01;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	98.01.26.15.40.40;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	97.10.03.21.10.57;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.07.31.20.32.11;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	95.07.06.20.29.29;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.08.29.12.58.23;	author mladjadj;	state Exp;
branches;
next	1.1;

1.1
date	94.07.05.13.15.05;	author leith;	state Exp;
branches;
next	;


desc
@ wrong col in distrib code
@


1.19
log
@email_health_dept
@
text
@C++*********************************************************************
C
C  DEFO003.F     FIX OF UNWORKING CODE           NOV 2014 ARDEAN LEITH
C 
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  DEFO003(INUM,N,KFR,A,NX,SPMAX,LUN1,BUF,MAXMINS,IRTFLG)
C
C  PURPOSE: SEARCH FOR LOCAL MINIMA ALONG: BUF
C
C  PARAMETERS:
C     INUM     POSITION OF THE IMAGE IN THE SERIES               (SENT)
C     NMIN     NUMBER OF MINIMA                                  (RET.)
C     KFR      ARRAY OF RADII     POINTS OF MINIMA               (RET.)
C     B        ARRAY OF SP. FREQ. POINTS OF MINIMA               (RET.)
C     A        ARRAY OF AMPLITUDES OF MINIMA                     (RET.)
C     NX       DIMENSION OF IMAGE                                (SENT)
C     SPMAX    MAX SPATIAL FREQUENCY                             (RET.)
C     LUN1     INPUT UNIT                                        (SENT)
C     BUF      WORKING SPACE                                     (RET.)       
C     MAXMINS  MAX NUMBER OF MINIMA                              (SENT)
C     IRTFLG   ERROR FLAG                                        (RET.)
C 
C  NOTE:  FIXED ADDRESSING OUTSIDE BUFFER BY OMITTING SEARCH FOR
C         MIN AT LEFT.  al nov 2014
C      
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE DEFO003(INUM,NMIN,KFR,B,A,NX,SPMAX,LUN1,
     &                     BUF,MAXMINS,IRTFLG)

        IMPLICIT NONE
        INCLUDE 'CMBLOCK.INC' 

        INTEGER            :: INUM,NMIN,NX
        REAL               :: SPMAX 
        REAL               :: KFR(MAXMINS),B(MAXMINS),A(MAXMINS)
        REAL               :: BUF(NX)
        INTEGER            :: LUN1 
        INTEGER            :: MAXMINS,IRTFLG 

        INTEGER            :: NEIB,NOT_USED,I,J,NC
        REAL               :: SC,BX,X1,X2,X3,Y1,Y2,Y3,A1,A2,A3
        CHARACTER          :: CHO
        LOGICAL            :: FLAG
        CHARACTER          :: NULL = CHAR(0)

        FLAG   = .TRUE.
        IRTFLG = 1

        IF (INUM == 1) THEN
           CALL RDPRM1S(SPMAX,NOT_USED,
     &                  'MAX SPATIAL FREQUENCY [A-1]',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
        ENDIF

20      WRITE(NOUT,25)
25      FORMAT('  SEARCHING FOR MINIMA')

        CALL RDPRI1S(NEIB,NOT_USED,
     &              'SEARCH NEIGHBORHOOD DISTANCE',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

C       READ FIRST LINE FROM IMAGE
        CALL REDLIN(LUN1,BUF,NX,1)

        SC     = SPMAX / FLOAT(NX)
        NMIN = 0

        DO I=2,NX-1
           BX = BUF(I)

           IF (BX < BUF(I+1)) THEN
C             THIS IS A LOCAL MINIMUM

C             CHECK IF NOT A LOCAL MINIMUM OVER CURRENT NEIGHBORHOOD
              DO J=I,I-NEIB,-1
                 IF (J > 0   .AND. BX > BUF(J)) FLAG = .FALSE.
              ENDDO

              DO J=I,I+NEIB
                 IF (J <= NX .AND. BX > BUF(J))  FLAG = .FALSE.
              ENDDO

              IF (FLAG) THEN
C               A LOCAL MINIMUM OVER CURRENT NEIGHBORHOOD

                IF (NMIN >= MAXMINS) THEN
                   CALL ERRT(102,'MINIMA OVERFLOW',NMIN)
                   IRTFLG = 1
                   RETURN
                ENDIF
                NMIN = NMIN + 1

C               FIT INTO PARABOLIC
C               Y = A1+A2*X+A3*X**2
C               A3 =[(Y1-Y3)(X2-X3)-(Y2-Y3)(X1-X3)]/[(X1^2-X3^2)(X2-X3)-
C                 (X2^2-X3^2)(X1-X3)]
C               A2 = [(Y1-Y3)(X2^2-X3^2)-(Y2-Y3)(X1^2-X3^2)]/[(X1-X3)
C                (X2^2-X3^2)-(X2-X3)
C               *(X1^2-X3^2)]
C               A1 = [(Y1X3^2-Y3X1^2)(X2X3^2-X3X2^2)-(Y2X3^2-Y3X2^2)
C                  (X1X3^2-X3X1^2)]/
C               [(X3^2-X1^2)(X2X3^2-X3X2^2)-(X3^2-X2^2)(X1X3^2-X3X1^2)]
C               XMIN = -0.5A2/A3
C               YMIN = A1-0.25A2^2/A3

                X1 = FLOAT(I-1)
                X2 = FLOAT(I)
                X3 = FLOAT(I+1)
                Y1 = BUF(I-1)
                Y2 = BUF(I)
                Y3 = BUF(I+1)
                A1 = ((Y1*X3**2-Y3*X1**2) * (X2*X3**2-X3*X2**2) -
     &                (Y2*X3**2-Y3*X2**2) * (X1*X3**2-X3*X1**2))
                A1 = A1 / 
     &                 ((X3**2-X1**2)*(X2*X3**2-X3*X2**2)-(X3**2-X2**2)*
     &                 (X1*X3**2-X3* X1**2))
                A2 = ((Y1-Y3)*(X2**2-X3**2)-(Y2-Y3)*(X1**2-X3**2))
                A2 = A2 / ((X1-X3)*(X2**2-X3**2)-(X2-X3)*(X1**2-X3**2))
                A3 = ((Y1-Y3)*(X2-X3) - (Y2-Y3)*(X1-X3))
                A3 = A3 / ((X1**2-X3**2)*(X2-X3)-(X2**2-X3**2)*(X1-X3))

                A(NMIN)   = A1 - 0.25 * A2**2 / A3
                KFR(NMIN) = -0.5 * A2 / A3
             ELSE
                FLAG = .TRUE.
             ENDIF      
           ENDIF
        ENDDO

        WRITE(NOUT,*) ' ' 
        WRITE(NOUT,90) NMIN
90      FORMAT('  CURVE HAS: ',I0,'  MINIMA:')

        WRITE(NOUT,'(A)') '     #  LOCATION  LOCATION       AMPLITUDE'
        WRITE(NOUT,'(A)') '       (PIXELS)    (A-1)'

        DO I=1,NMIN
           B(I) = ABS(KFR(I)) * SC

           WRITE(NOUT,93) ,I ,KFR(I),  B(I),           A(I)
93         FORMAT('  ',  I4, F8.2, 3X,F7.4,'         ',F8.4)

c          WRITE(NOUT,*) '#',I ,KFR(I), B(I), '(A-1)   A=',A(I)
        ENDDO
        WRITE(NOUT,*) ' ' 

        CALL RDPRMC(CHO,NC,.TRUE.,'CHANGE SEARCH NEIGHBORHOOD? (Y/N)',
     &              NULL,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (CHO == 'Y') GOTO 20

        IRTFLG = 0

        END
@


1.18
log
@several fatal bugs fixed,  rewrite
@
text
@d11 1
a11 1
C=* Email: spider@@wadsworth.org                                        *
@


1.17
log
@formatting
@
text
@d3 1
a3 2
C  DEFO003.F
C            ATTEMPTED FIX OF UNWORKING CODE     NOV 2014 ARDEAN LEITH
d27 1
a27 1
C  DEFO003(INUM,N,KFR,A,NX,SPMAX,LUN1,BUF,NUMMIN,IRTFLG)
d29 1
a29 1
C  PURPOSE: SEARCH THE MINIMA
d32 15
a46 13
C     INUM  : POSITION OF THE IMAGE IN THE SERIES                (SENT)
C     ICOUNT: NUMBER OF MINIMA                                   (RET.)
C     KFR   : ARRAY OF SP. FREQ. POINTS OF MINIMA                (RET.)
C     A     :                                                    (SENT)
C     NX    : DIMENSION OF IMAGE                                 (SENT)
C     SPMAX : MAX SPATIAL FREQUENCY                              (RET.)
C     LUN1  :                                                    (SENT)
C     BUF   : WORKING SPACE                                      (RET.)       
C     NUMMIN:                                                    (SENT)
C     IRTFLG:
C       
C  NOTE:      I DID NOT WRITE THIS MESS al !!!!
C
d50 2
a51 4
        SUBROUTINE DEFO003(INUM,ICOUNT,KFR,A,NX,SPMAX,LUN1,
     &                     BUF,NUMMIN,IRTFLG)

C       (I DID NOT WRITE THIS MESS al!!!!)
d53 1
d56 1
a56 1
        INTEGER            :: INUM,ICOUNT,NX
d58 1
a58 1
        REAL               :: A(NUMMIN),B(NUMMIN),KFR(NUMMIN)
d61 1
a61 1
        INTEGER            :: NUMMIN,IRTFLG 
d63 2
d80 1
d89 1
a89 1
        ICOUNT = 0
d91 1
a91 1
        DO I=1,NX-1
d95 3
a97 1
C             THIS IS A LOCAL LEFSIDE MINIMUM
d99 1
a99 2
C                CHECK IF NOT A LOCAL MINIMUM OVER CURRENT NEIGHBORHOOD
                 IF (BX > BUF(J)) FLAG = .FALSE.
d103 1
a103 2
C                CHECK IF NOT A LOCAL MINIMUM OVER CURRENT NEIGHBORHOOD
                 IF (BX > BUF(J))  FLAG = .FALSE.
d109 2
a110 2
                IF (ICOUNT >= NUMMIN) THEN
                   CALL ERRT(102,'MINIMA OVERFLOW',ICOUNT)
d114 1
a114 1
                ICOUNT = ICOUNT + 1
d145 2
a146 2
                A(ICOUNT)   = A1 - 0.25 * A2**2 / A3
                KFR(ICOUNT) = -0.5 * A2 / A3
d154 1
a154 1
        WRITE(NOUT,90) ICOUNT
d157 2
a158 4
        WRITE(NOUT,91) 
91      FORMAT('  #     RADIUS   RADIUS (FREQ)   AMPLITUDE')
        WRITE(NOUT,92) 
92      FORMAT('       (PIXELS)    (A-1)')
d160 1
a160 1
        DO I=1,ICOUNT
d162 1
a174 2

        !CLOSE(LUN1)
@


1.16
log
@ATTEMPTED FIX OF UNWORKING CODE
@
text
@a89 1
           !if (i < 30)  write(6,*) ' i,bx:',i,bx,nummin
a104 1
                !write(6,*) ' i,bx:',i,bx
d150 8
a157 2
        WRITE(NOUT,50) ICOUNT
50      FORMAT('  CURVE HAS: ',I0,'  MINIMA:')
d161 4
a164 1
           WRITE(NOUT,*) '#',I ,KFR(I), B(I), '(A-1)', '   A=',A(I)
d166 1
@


1.15
log
@GPL_2010
@
text
@d4 2
a5 1
C
d10 1
a10 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d27 2
a28 1
C  DEFO003(INUM,N,KFR,A,NSAM,SPMAX,LUN1,BUF,NUMMIN,IRTFLG)
d35 7
a41 7
C     KFR   : ARRAY OF SP. FREQ. POINTS OF MINIMUM
C     A     : 
C     NSAM  : DIMENSION OF IMAGE                                 (SENT.)
C     SPMAX : MAX. OF SP. FREQUENCE                               (RET.)
C     LUN1:                                                       (SENT)
C     BUF   :                                                     (RET.)       
C     NUMMIN:                                                     (SENT)
d43 3
a45 1
C	
d49 1
a49 1
	SUBROUTINE DEFO003(INUM,ICOUNT,KFR,A,NSAM,SPMAX,LUN1,
a51 1
C       NSAM APEARS TO BE LIMITED TO 512 al
d56 10
a65 2
        REAL, DIMENSION(NUMMIN) :: A,B,KFR
        REAL, DIMENSION(NSAM) :: BUF
d67 2
a68 2
	CHARACTER *1   CHO,NULL
	LOGICAL        FLAG
d70 28
a97 3
	NULL   = CHAR(0)
	FLAG   = .TRUE.
        IRTFLG = 1
d99 3
a101 18
	IF (INUM .EQ. 1) THEN
	   CALL RDPRM(SPMAX,NOT_USED,'MAXIMUM SP. FREQ [A-1]')
	ENDIF

20	WRITE(NOUT,25)
25	FORMAT(' SEARCHING FOR MINIMA')
	CALL RDPRMI(NEIB,NDUM,NOT_USED,
     &            ' SEARCH NEIGHBOUR AREA[POINT]')

	CALL REDLIN(LUN1,BUF,NSAM,1)

        SC     = SPMAX/FLOAT(NSAM)
	ICOUNT = 0
	DO I=1,NSAM-1
	   BX = BUF(I)
	   IF (BX .LT. BUF(I+1)) THEN
	      DO J=I,I-NEIB,-1
                 IF (BX .GT. BUF(J)) FLAG=.FALSE.
d103 1
a103 3
	      DO J=I,I+NEIB
                 IF (BX .GT. BUF(J))  FLAG=.FALSE.
	      ENDDO
d105 6
a110 2
                IF (ICOUNT .GE. NUMMIN) THEN
                   CALL ERRT(101,'EXCESSIVE NUMBER OF MINIMA',NDUM)
d113 1
a113 1
	        ICOUNT = ICOUNT + 1
d116 2
a117 2
C               Y=A1+A2*X+A3*X**2
C               A3=[(Y1-Y3)(X2-X3)-(Y2-Y3)(X1-X3)]/[(X1^2-X3^2)(X2-X3)-
d119 1
a119 1
C               A2=[(Y1-Y3)(X2^2-X3^2)-(Y2-Y3)(X1^2-X3^2)]/[(X1-X3)
d122 1
a122 1
C               A1=[(Y1X3^2-Y3X1^2)(X2X3^2-X3X2^2)-(Y2X3^2-Y3X2^2)
d125 40
a164 2
C               XMIN=-0.5A2/A3
C               YMIN=A1-0.25A2^2/A3
d166 1
a166 31
	        X1=FLOAT(I-1)
	        X2=FLOAT(I)
	        X3=FLOAT(I+1)
	        Y1=BUF(I-1)
	        Y2=BUF(I)
	        Y3=BUF(I+1)
	        A1=((Y1*X3**2-Y3*X1**2)*(X2*X3**2-X3*X2**2)-
     &           (Y2*X3**2-Y3*X2**2)* (X1*X3**2-X3*X1**2))
	        A1=A1/((X3**2-X1**2)*(X2*X3**2-X3*X2**2)-(X3**2-X2**2)*
     &           (X1*X3**2-X3* X1**2))
	        A2=((Y1-Y3)*(X2**2-X3**2)-(Y2-Y3)*(X1**2-X3**2))
	        A2=A2/((X1-X3)*(X2**2-X3**2)-(X2-X3)*(X1**2-X3**2))
	        A3=((Y1-Y3)*(X2-X3)-(Y2-Y3)*(X1-X3))
	        A3=A3/((X1**2-X3**2)*(X2-X3)-(X2**2-X3**2)*(X1-X3))
	        A(ICOUNT)   = A1-0.25*A2**2/A3
	        KFR(ICOUNT) = -0.5*A2/A3
	     ELSE
	        FLAG = .TRUE.
	     ENDIF	
	   ENDIF
	ENDDO

	WRITE(NOUT,50)
50	FORMAT(' IMAGE HAS FOLLOWING MINIMA')
	DO I=1,ICOUNT
	   B(I) = ABS(KFR(I))*SC
	   WRITE(NOUT,*) '#',I,KFR(I),B(I),'(A-1)','   A=',A(I)
	ENDDO
	CALL RDPRMC(CHO,NC,.TRUE.,'CHANGE SEARCHING NEIGHBOUR (Y/N)',
     &              NULL,IRT)
	IF (CHO .EQ. 'Y' .OR. CHO .EQ. 'y') GOTO 20
d168 1
a168 2
	CLOSE(LUN1)
	IRTFLG = 0
d170 1
a170 2
	RETURN
	END
@


1.14
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.13
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a5 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
a29 1
C **************************************************************************
a47 1
C--************************************************************************
@


1.12
log
@nloop,iloop_removed
@
text
@d1 1
d6 1
d8 1
d10 24
d40 1
d59 1
@


1.11
log
@fixed buffer overrun in noise.f, changed parameters to noise.f
@
text
@d52 1
a52 1
	   CALL RDPRM(SPMAX,NLOOP,ILOOP,'MAXIMUM SP. FREQ [A-1]')
d57 1
a57 1
	CALL RDPRMI(NEIB,NDUM,NLOOP,ILOOP,
@


1.10
log
@common bug fixed
@
text
@d14 1
a14 1
C  DEFO003(INUM,N,KFR,A,NSAM,SPMAX,LUN1,IRTFLG)
d16 1
a16 1
C  PURPOSE: SEARCH THE MINIMUM
d19 2
a20 2
C     INUM  : POSITION OF THE IMAGE IN THE SERIES
C     N     : NUMBER OF MINIMUM
d22 7
a28 4
C     NSAM  : DIMENSION OF IMAGE
C     SPMAX : MAX. OF SP. FREQUENCE
C     LUN1:
C     IRTLFG:
d33 2
a34 1
	SUBROUTINE DEFO003(INUM,N,KFR,A,NSAM,SPMAX,LUN1,IRTFLG)
a35 1
C       WARNING DEFO003 RETURNS DATA IN BUF!!!!!!!
a37 1
	COMMON ADUM(1384),BUF(1)
d41 2
a42 2
	DIMENSION A(*),B(20)
	REAL      KFR(*)
d44 2
a45 13
C       WARNING IMFILE RETURNED TO NOISE.F FROM DEFO003.F al
	CHARACTER*81   IMFILE
	COMMON /IMFILE/IMFILE

	CHARACTER *1 CHO,NULL
	LOGICAL      FLAG

	NULL  = CHAR(0)
	FLAG  = .TRUE.
        MAXIM = 0
	CALL OPFIL(.TRUE.,IMFILE,LUN1,'O',NSAM,NROW,NSLICE,
     &             MAXIM,'IMAGE', .FALSE.,IRTFLG)
	IF (IRTFLG .NE. 0) RETURN
d47 4
a50 2
	WRITE(NOUT,10)NSAM,NROW
10	FORMAT(' FILE"S DIMENSION:', I5,' X',I5)
d54 1
d62 2
a63 2
        SC=SPMAX/FLOAT(NSAM)
	ICOUNT=0
d65 1
a65 1
	   BX=BUF(I)
d67 45
a111 8
	   DO J=I,I-NEIB,-1
              IF(BX .GT. BUF(J)) THEN
	      FLAG=.FALSE.
	   ENDIF
        ENDDO
	DO J=I,I+NEIB
           IF(BX .GT. BUF(J)) THEN
	      FLAG=.FALSE.
a113 35
        IF (FLAG) THEN
	  ICOUNT=ICOUNT+1
C   FIT INTO PARABOLIC
C   Y=A1+A2*X+A3*X**2
C   A3=[(Y1-Y3)(X2-X3)-(Y2-Y3)(X1-X3)]/[(X1^2-X3^2)(X2-X3)-(X2^2-X3^2)(X1-X3)]
C   A2=[(Y1-Y3)(X2^2-X3^2)-(Y2-Y3)(X1^2-X3^2)]/[(X1-X3)(X2^2-X3^2)-(X2-X3)
C      *(X1^2-X3^2)]
C   A1=[(Y1X3^2-Y3X1^2)(X2X3^2-X3X2^2)-(Y2X3^2-Y3X2^2)(X1X3^2-X3X1^2)]/
C  [(X3^2-X1^2)(X2X3^2-X3X2^2)-(X3^2-X2^2)(X1X3^2-X3X1^2)]
C   XMIN=-0.5A2/A3
C   YMIN=A1-0.25A2^2/A3

	X1=FLOAT(I-1)
	X2=FLOAT(I)
	X3=FLOAT(I+1)
	Y1=BUF(I-1)
	Y2=BUF(I)
	Y3=BUF(I+1)
	A1=((Y1*X3**2-Y3*X1**2)*(X2*X3**2-X3*X2**2)-
     &     (Y2*X3**2-Y3*X2**2)*
     &  (X1*X3**2-X3*X1**2))
	A1=A1/((X3**2-X1**2)*(X2*X3**2-X3*X2**2)-(X3**2-X2**2)*
     &  (X1*X3**2-X3*
     &  X1**2))
        A2=((Y1-Y3)*(X2**2-X3**2)-(Y2-Y3)*(X1**2-X3**2))
	A2=A2/((X1-X3)*(X2**2-X3**2)-(X2-X3)*(X1**2-X3**2))
        A3=((Y1-Y3)*(X2-X3)-(Y2-Y3)*(X1-X3))
	A3=A3/((X1**2-X3**2)*(X2-X3)-(X2**2-X3**2)*(X1-X3))
	A(ICOUNT)=A1-0.25*A2**2/A3
	     KFR(ICOUNT)=-0.5*A2/A3
	  ELSE
	     FLAG=.TRUE.
	  ENDIF	
	ENDIF
	ENDDO
a116 1
	N=ICOUNT
d118 1
a118 1
	   B(I)=ABS(KFR(I))*SC
@


1.9
log
@CNO_SAVE
@
text
@d14 1
a14 1
C     DEFO003(INUM,N,KFR,A,NSAM,SPMAX,LUN1,IRTFLG)
d32 4
a35 1
CNO_SAVE 
a36 3
C       I DO NOT KNOW IF SAVE IS NEEDED FEB 99 al
        SAVE

d42 1
a45 2
        COMMON BUF(1)

d48 3
a50 2
	NULL=CHAR(0)
	FLAG = .TRUE.
d65 3
a67 2
	NLIST=1
	CALL REDLIN(LUN1,BUF,NSAM,NLIST)
a122 1
C	   B(I)=ABS(FLOAT(KFR(I)))*SC
d126 1
a126 1
	CALL RDPRMC(CHO,NC,.TRUE.,' CHANGE SEARCHING NEIGHBOUR (Y/N)',
@


1.8
log
@*** empty log message ***
@
text
@d32 5
@


1.7
log
@*** empty log message ***
@
text
@d40 1
a40 1
        COMMON B(20),BUF(1)
@


1.6
log
@f90 formating, used common blocks
@
text
@d42 1
a42 1
	CHARACTER *1 CHO
d44 1
a44 1

@


1.5
log
@*** empty log message ***
@
text
@d3 1
a3 1
C $$ DEFO003.FOR
d14 1
a14 1
C $$ DEFO003: SEARCH THE MINIMUM
d16 7
a22 4
C     INUM: POSITION OF THE IMAGE IN THE SERIES
C     N : NUMBER OF MINIMUM
C     KFR : ARRAY OF SP. FREQ. POINTS OF MINIMUM
C     NSAM : DIMENSION OF IMAGE
d25 2
a26 1
C     IRTLFG:	
d29 1
a29 1
C
d32 1
d34 2
a35 5
#ifdef SP_UNIX
        INCLUDE 'CMBLOCK.INC' 
#else
        INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
d37 1
d39 10
a48 8
	common adum(2048),buf(1)
	DIMENSION A(*),b(20)
	real KFR(*)
	CHARACTER*81 IMFILE,CHO*1
	LOGICAL FLAG
	FLAG=.TRUE.
	CALL OPFIL(.TRUE.,IMFILE,LUN1,'O',NSAM,NROW,NSLICE,IFORM,'IMAGE',
     &  .FALSE.,IRTFLG)
d50 1
d52 3
a54 3
10	FORMAT(' FILE"S DIMENSION:', I4,' X',I4)
	IF(INUM .EQ. 1) THEN
	CALL RDPRM(SPMAX,NLOOP,ILOOP,'MAXIMUM SP. FREQ [A-1]$')
d58 2
a59 1
	CALL RDPRMI(NEIB,NDUM,NLOOP,ILOOP,' SEARCH NEIGHBOUR AREA[POINT]$')
d65 6
a70 6
	BX=BUF(I)
	IF (BX .LT. BUF(I+1)) THEN
	DO J=I,I-NEIB,-1
	  IF(BX .GT. BUF(J)) THEN
	  FLAG=.FALSE.
	  ENDIF
d73 3
a75 3
          IF(BX .GT. BUF(J)) THEN
	  FLAG=.FALSE.
	  ENDIF
d77 1
a77 1
	  IF(FLAG) THEN
d79 28
a106 26
c   fit into parabolic
c   y=a1+a2*x+a3*x**2
c   a3=[(y1-y3)(x2-x3)-(y2-y3)(x1-x3)]/[(x1^2-x3^2)(x2-x3)-(x2^2-x3^2)(x1-x3)]
c   a2=[(y1-y3)(x2^2-x3^2)-(y2-y3)(x1^2-x3^2)]/[(x1-x3)(x2^2-x3^2)-(x2-x3)
c      *(x1^2-x3^2)]
c   a1=[(y1x3^2-y3x1^2)(x2x3^2-x3x2^2)-(y2x3^2-y3x2^2)(x1x3^2-x3x1^2)]/
c  [(x3^2-x1^2)(x2x3^2-x3x2^2)-(x3^2-x2^2)(x1x3^2-x3x1^2)]
c   xmin=-0.5A2/a3
c   ymin=a1-0.25a2^2/a3

	x1=float(i-1)
	x2=float(i)
	x3=float(i+1)
	y1=buf(i-1)
	y2=buf(i)
	y3=buf(i+1)
	a1=((y1*x3**2-y3*x1**2)*(x2*x3**2-x3*x2**2)-(y2*x3**2-y3*x2**2)*
     &  (x1*x3**2-x3*x1**2))
	a1=a1/((x3**2-x1**2)*(x2*x3**2-x3*x2**2)-(x3**2-x2**2)*(x1*x3**2-x3*
     &  x1**2))
        a2=((y1-y3)*(x2**2-x3**2)-(y2-y3)*(x1**2-x3**2))
	a2=a2/((x1-x3)*(x2**2-x3**2)-(x2-x3)*(x1**2-x3**2))
        a3=((y1-y3)*(x2-x3)-(y2-y3)*(x1-x3))
	a3=a3/((x1**2-x3**2)*(x2-x3)-(x2**2-x3**2)*(x1-x3))
	a(icount)=a1-0.25*a2**2/a3
	  KFR(ICOUNT)=-0.5*A2/a3
d108 1
a108 1
	  FLAG=.TRUE.
d117 3
a119 3
C	b(I)=ABS(FLOAT(KFR(I)))*SC
	b(I)=ABS(KFR(I))*SC
	WRITE(NOUT,*) '#',I,KFR(I),b(I),'(A-1)','   A=',a(I)
d121 4
a124 2
	CALL RDPRMC(CHO,NC,.TRUE.,' CHANGE SEARCHING NEIGHBOUR (Y/N)',NULL,IRT)
	IF(CHO .EQ. 'Y' .OR. CHO .EQ. 'y') GOTO 20
d126 2
a127 1
	IRTFLG=0
@


1.4
log
@correct warnings from VAX
@
text
@d57 1
a57 1
	DO 40 I=1,NSAM-1
d102 1
a102 1
40 	CONTINUE
@


1.3
log
@changes done by june Zhu
@
text
@a27 1
	INCLUDE 'CMBLOCK.INC'
d29 6
d108 2
a109 1
	b(I)=ABS(FLOAT(KFR(I)))*SC
@


1.2
log
@corrections by Jun Zhu from germany
@
text
@a0 7
#ifdef SP_DISTRIB
      SUBROUTINE DEFO003
      COMMON /UNITS/LUNC,NIN,NOUT
      WRITE(NOUT,*) 'DUMMY CALL: DEFO003'
      RETURN
      END
#else
d22 3
a24 1
C     IRTLFG:
d26 1
a26 1
C--************************************************************************
d28 1
a28 1
	SUBROUTINE DEFO003(INUM,N,KFR,A,NSAM,SPMAX,LUN1,IRTFLG)
a29 5
#ifdef SP_UNIX
        INCLUDE 'CMBLOCK.INC'
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d31 3
a33 1
	DIMENSION BUF(2048),A(*),KFR(*)
a51 1
C	BMIN=BUF(1)
a55 1
C	  WRITE(NOUT,*) 'STEP1',I,BX,FLAG
a63 1
C	WRITE(NOUT,*) 'STEP2',I,FLAG
d67 26
a92 2
	  KFR(ICOUNT)=I
C	WRITE(NOUT,*) I
d95 1
a95 3
	  ENDIF
C	ELSE
C	BMIN=BX
d98 1
d103 2
a104 3
	A(I)=ABS(FLOAT(KFR(I)))*SC
	WRITE(NOUT,*) '#',I,KFR(I),A(I),'(A-1)','   A=',BUF(KFR(I))
	A(I)=BUF(KFR(I))
d106 1
a106 4
	WRITE(NOUT,60)
60	FORMAT(' CHANGE SEARCHING NEIGHBOUR (Y/N)',$)
	READ(*,70)CHO
70	FORMAT(A1)
a111 1
#endif
@


1.1
log
@Initial revision
@
text
@a0 1

a7 1

d10 1
a10 1
C  DEFO003.FOR
d12 1
a12 1
C **********************************************************************
d20 2
a21 2
C **********************************************************************
C     DEFO003: SEARCH THE MINIMUM
d29 1
a29 3
C     IRTLFG:	
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************
d31 2
d34 1
d38 1
a38 1
	INCLUDE 'COMMON1:CMBLOCK.INC'
d40 1
a40 1
	COMMON /COMMUN/IMFILE
a43 1

d45 2
a46 2
	CALL OPFIL(.TRUE.,IMFILE,LUN1,'O',NSAM,NROW,NSLICE,
     &             IFORM,'IMAGE',.FALSE.,IRTFLG)
d50 2
a51 2
	IF (INUM .EQ. 1) THEN
	  CALL RDPRM(SPMAX,NLOOP,ILOOP,'MAXIMUM SP. FREQ [A-1]')
d55 1
a55 2
	CALL RDPRMI(NEIB,NDUM,NLOOP,ILOOP,
     &              ' SEARCH NEIGHBOR AREA[POINT]')
d60 4
a63 4
	BMIN=BUF(1)
	DO 40 I=1,NSAM
	BX = BUF(I)
	IF (BX .LT. BMIN) THEN
d66 1
a66 1
	  IF (BX .GT. BUF(J)) THEN
d72 1
a72 1
	    FLAG=.FALSE.
d77 3
a79 3
	    ICOUNT=ICOUNT+1
	    KFR(ICOUNT)=I
C	    WRITE(NOUT,*) I
d81 4
a84 4
	   FLAG=.TRUE.
	  ENDIF	
	ELSE
	 BMIN=BX
d91 3
a93 3
	  A(I)=ABS(FLOAT(KFR(I)))*SC
	  WRITE(NOUT,*) '#',I,KFR(I),A(I),'(A-1)','   A=',BUF(KFR(I))
	  A(I)=BUF(KFR(I))
d96 1
a96 1
60	FORMAT(' CHANGE SEARCHING NEIGHBOR (Y/N)',$)
d99 1
a99 2

	IF (CHO .EQ. 'Y' .OR. CHO .EQ. 'y') GOTO 20
a104 1

@
