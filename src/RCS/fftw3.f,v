head	1.18;
access;
symbols
	healthdept_2018:1.18
	pre_getangas:1.15
	GPL2010:1.15
	pre_GPL2010:1.14
	pre_var_equation:1.14
	pre_fftwrings:1.10;
locks; strict;
comment	@c @;


1.18
date	2018.10.03.14.34.05;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2014.12.12.16.03.32;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2012.12.17.14.32.11;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.24.13.25.35;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2008.12.08.15.07.13;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2008.07.28.14.39.45;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2008.05.28.14.42.12;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2008.05.19.12.02.50;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2008.03.19.13.40.51;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2008.03.19.13.26.02;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2008.03.19.13.23.43;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2008.03.12.15.24.42;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2008.03.07.20.10.43;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2008.03.03.13.03.05;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2008.02.29.19.04.13;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2008.02.29.18.20.23;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2008.02.29.15.41.17;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2008.02.29.13.12.29;	author leith;	state Exp;
branches;
next	;


desc
@@


1.18
log
@email_health_dept
@
text
@C++*********************************************************************
C
C FFTW3.F                 CREATED FROM FMRS3.F    DEC 2007 ARDEAN LEITH
C                         NUMTHWANTR              JAN 2008 ARDEAN LEITH
C                         INSIDE OMP THREAD OK    JAN 2008 ARDEAN LEITH
C                         REWRITE                 JAN 2008 ARDEAN LEITH
C                         MAKEPLANB               MAR 2008 ARDEAN LEITH
C                         ECHO FORMATTING         DEC 2014 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  FFTW3_MAKEPLANB(BUF,LDA,NX,NY,NZ,NUMTHINOUT, PLAN,INV,IRTFLG)
C
C  PURPOSE:   USES PRE_EXISTING BUFFER, CREATES PLAN
C
C
C  FFTW3_MAKEPLAN (NX,NY,NZ,NUMTHINOUT, PLAN,INV,IRTFLG)
C
C  PURPOSE:   ALLOCATES AND FREES BUFFER, CREATES PLAN
C
C
C  FFTW3_USEPLAN(BUF,NX,NY,NZ, SPIDER_SIGN, SPIDER_SCALE,PLAN,INV,IRTFLG)
C
C  PURPOSE:   USES A FFTW3 PLAN TO DO A FFT ON BUF
C
C
C  FFTW3_KILLPLAN(PLAN,IRTFLG)
C
C  PURPOSE:   DESTROYS A FFTW3 PLAN.
C
C
C  PARAMETERS:  BUF     ARRAY (LDA*NY*NZ)                SENT/RET.
C               NX..    DIMENSONS                             SENT
C               INV     1=REG. FILE, -1= FOURIER FILE         SENT
C               IRTFLG  ERROR FLAG (O=NORMAL)                 RET.
C   
C  NOTES:    REAL MIXED RADIX FFT.
C            INPUT:  A(N) - REAL ARRAY
C            OUTPUT: N EVEN  A(N+2)
C            ORDER OF ELEMENTS:
C            R(0),0.0, R(1), I(1), R(2), I(2), ....., 
C                  R(N/2-1), I(N/2-1), R(N/2),0.0
C
C            N ODD  X(N+1)
C                 R(0),0.0, R(1), I(1), R(2), I(2), ....., 
C                 R(N/2-1), I(N/2-1), R(N/2),I(N/2)
C            (INTEGER DIVISION ROUNDS DOWN, E.G. 5/2 =2)
C
C--*********************************************************************


       MODULE TYPE_KINDS

       INTEGER, PARAMETER, PUBLIC  :: I_4  = SELECTED_INT_KIND(8)  !I*4
       INTEGER, PARAMETER, PRIVATE :: I_8T = SELECTED_INT_KIND(16) !I*8
       INTEGER, PARAMETER, PUBLIC  :: I_8  = (((1 + SIGN(1,I_8T)) / 2)*
     &                     I_8T) + (((1 - SIGN(1,I_8T))/2) * I_4 )! I*8

C       USAGE:  USE TYPE_KINDS
C       USAGE:  INTEGER(KIND=I_8) :: INTPOINTER

        END MODULE TYPE_KINDS


C       ---------------  FFTW3_MAKEPLAN -----------------------------

	SUBROUTINE FFTW3_MAKEPLAN(NX,NY,NZ,NUMTHINOUT,
     &                            PLAN,INV,IRTFLG)

        USE TYPE_KINDS

        INCLUDE 'CMBLOCK.INC'

        INTEGER, INTENT(INOUT) :: NUMTHINOUT
        INTEGER, INTENT(IN)    :: INV
        INTEGER, INTENT(OUT)   :: IRTFLG
	
C       PLAN IS A POINTER TO A STRUCTURE 
        INTEGER(KIND=I_8), INTENT(INOUT) :: PLAN

        INTEGER           :: OMP_GET_NUM_THREADS
        LOGICAL, SAVE     :: MUST_INIT = .TRUE.

	REAL, ALLOCATABLE, DIMENSION(:,:,:) :: AF

C       USING FFTW3 LIBRARY CALLS FOR FFT

#include "FFTW3.INC"

        IRTFLG = 1

#ifdef SP_MP
C       COMPILED FOR OMP USE

        IF (NUMTHINOUT .EQ. 0) THEN
           NUMTHWANT = NUMFFTWTH
        ELSE 
C          INPUT HAS SPECIFIED NUMTHINOUT     
           NUMTHWANT = NUMTHINOUT
        ENDIF

c       write(6,*) ' numthwant:',numthwant

        NUMTH = OMP_GET_NUM_THREADS()

        IF (NUMTH .GT. 1) THEN
C          CURRENTLY INSIDE OMP PARALLEL SECTION --> FFTW3 ERRORS

           WRITE(NOUT,98)NX,NY,NZ,NUMTHWANT,INV
 98        FORMAT('  Trying to create FFTW3 plan for: (',
     &               I0,',', I0,',', I0,') Threads: ',I0,' INV: ',I0)              

           CALL ERRT(102,
     &       'PGM ERROR, CAN NOT CALL FFTW3_MAKEPLAN WITHIN OMP ||:',
     &       NUMTH)
           RETURN
        ENDIF

        IF (NUMTHWANT .GT. 1 .AND. MUST_INIT) THEN        
C          MUST INITIALIZE THREADS ONCE

           WRITE(NOUT,*) ' Initializing FFTW3 for threaded use' 

           IRTFLGL = -4
           CALL SFFTW_INIT_THREADS(IRTFLGL)

	   IF (IRTFLGL .EQ. 0) THEN
              CALL ERRT(101,'FFTW3 MULTIPLE THREADS INIT. FAILED',IER)
              RETURN
           ENDIF
           MUST_INIT = .FALSE.
        ENDIF

#else
        IF (NUMFFTWTH .EQ. 0) WRITE(NOUT,*) ' Single threaded FFTW3 ' 
        NUMFFTWTH = 1
        NUMTHWANT = 1
#endif

        LDA = NX + 2 - MOD(NX,2)
        JH  = LDA/2

C       ALLOCATE TEST ARRAY: AF
        ALLOCATE(AF(LDA,NY,NZ), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(46,'FMRS_FFTW3, AF',LDA*NY*NZ)
           RETURN
        ENDIF

        IF (INV .GT. 0) THEN
C          CREATE PLAN FOR FORWARD TRANSFORM

          !write(6,*) 'fftw3Creating -> plan:',NX,NY,NUMTHWANT,lda

#ifdef SP_MP
          !write(6,*) 'sfftw_plan_with_nthreads:',numthwant
          CALL SFFTW_PLAN_WITH_NTHREADS(NUMTHWANT)
#endif

C         DESTROY EXISTING OLD PLAN
          !write(6,*) 'calling : sfftw_destroy_plan: ',PLAN
          IF (PLAN .GT. 0) CALL SFFTW_DESTROY_PLAN(PLAN)

          IF (NZ .GT. 1) THEN
             CALL SFFTW_PLAN_DFT_R2C_3D(PLAN,NX,NY,NZ,
     &                                  AF,AF,FFTW_MEASURE)
          ELSEIF (NY .GT. 1) THEN
             !write(6,*) 'calling : SFFTW_PLAN_DFT_R2C_2D '
             CALL SFFTW_PLAN_DFT_R2C_2D(PLAN,NX,NY,
     &                                  AF,AF,FFTW_MEASURE)
          ELSE
C            BIMAL SAID USE ESTIMATE, I DO NOT KNOW WHY?
	     CALL SFFTW_PLAN_DFT_R2C_1D(PLAN,NX,
     &                                  AF,AF,FFTW_ESTIMATE)
          ENDIF

          !write(6,90)PLAN,NX,NY,NZ,NUMTHWANT
          IF (VERBOSE) WRITE(NOUT,90)PLAN,NX,NY,NZ,NUMTHWANT
 90       FORMAT('  New Forward FFTW3 Plan: ',I0,' ( ',
     &              I0,', ', I0,', ', I0,') Threads: ',I0)              

       ELSE
C         REVERSE TRANSFORM

          IF (PLAN .GT. 0) CALL SFFTW_DESTROY_PLAN(PLAN)
#ifdef SP_MP
          CALL SFFTW_PLAN_WITH_NTHREADS(NUMTHWANT)
#endif
                  
          IF (NZ .GT. 1) THEN
             CALL SFFTW_PLAN_DFT_C2R_3D(PLAN,NX,NY,NZ,
     &                                  AF,AF,FFTW_MEASURE)
          ELSEIF (NY .GT. 1) THEN
             CALL SFFTW_PLAN_DFT_C2R_2D(PLAN,NX,NY,
     &                                   AF,AF,FFTW_MEASURE)
          ELSE
	     CALL SFFTW_PLAN_DFT_C2R_1D(PLAN,NX, AF,AF,FFTW_MEASURE)
          ENDIF

          !write(6,91)PLAN,NX,NY,NZ,NUMTHWANT
          IF (VERBOSE) WRITE(NOUT,91)PLAN,NX,NY,NZ,NUMTHWANT
 91       FORMAT('  New Reverse FFTW3 Plan: ',I0,' ( ',
     &              I0,', ', I0,', ', I0,') Threads: ',I0)              
        ENDIF

C       FREE MEMORY	   
        IF (ALLOCATED(AF)) DEALLOCATE(AF)

        NUMTHINOUT = NUMTHWANT
        IRTFLG  = 0

	END


C       ---------------  FFTW3_MAKEPLANB -----------------------------

	SUBROUTINE FFTW3_MAKEPLANB(AF,LDA,NX,NY,NZ,
     &                             NUMTHINOUT, PLAN,INV,IRTFLG)

        USE TYPE_KINDS

	REAL,    INTENT(INOUT)           :: AF(LDA,NY,NZ)
        INTEGER, INTENT(INOUT)           :: NUMTHINOUT
        INTEGER, INTENT(IN)              :: INV
        INTEGER, INTENT(OUT)             :: IRTFLG
	
C       PLAN IS A POINTER TO A STRUCTURE 
        INTEGER(KIND=I_8), INTENT(INOUT) :: PLAN

        INTEGER                          :: OMP_GET_NUM_THREADS
        LOGICAL, SAVE                    :: MUST_INIT = .TRUE.

        INCLUDE 'CMBLOCK.INC'


C       USING FFTW3 LIBRARY CALLS FOR FFT

#include "FFTW3.INC"

        IRTFLG = 1

#ifdef SP_MP
C       COMPILED FOR OMP USE

        IF (NUMTHINOUT .EQ. 0) THEN
           NUMTHWANT = NUMFFTWTH
        ELSE 
C          INPUT HAS SPECIFIED NUMTHINOUT     
           NUMTHWANT = NUMTHINOUT
        ENDIF

c       !write(6,*) ' NUMTHWANT:',NUMTHWANT
        NUMTH = OMP_GET_NUM_THREADS()

        !write(6,*) ' Current omp threads in fftw3 call:',NUMTH
        IF (NUMTH .GT. 1) THEN
C          CURRENTLY INSIDE OMP PARALLEL SECTION --> FFTW3 ERRORS

           WRITE(NOUT,98)NX,NY,NZ,NUMTHINOUT,INV
 98        FORMAT('  Trying to create FFTW3 plan for: ( ',
     &               I0,', ',I0,', ',I0,') Threads: ',I0,' INV: ',I0)              

           CALL ERRT(101,
     &       'PGM ERROR, CAN NOT CALL FFTW3_MAKEPLAN WITHIN OMP ||:',
     &        NUMTH)
           RETURN
        ENDIF

        IF (NUMTHWANT .GT. 1 .AND. MUST_INIT) THEN        
C          MUST INITIALIZE THREADS ONCE

           WRITE(NOUT,*) ' Initializing FFTW3 for threaded use' 

           IRTFLGL = -4
           CALL SFFTW_INIT_THREADS(IRTFLGL)

	   IF (IRTFLGL .EQ. 0) THEN
              CALL ERRT(101,
     &           'FFTW3 MULTIPLE THREADS INITIALIZATION FAILED',IER)
              RETURN
           ENDIF
           MUST_INIT = .FALSE.
        ENDIF

#else
        IF (NUMFFTWTH .EQ. 0) WRITE(NOUT,*) ' Single threaded FFTW3 ' 
        NUMFFTWTH = 1
        NUMTHWANT = 1
#endif

        LDA = NX + 2 - MOD(NX,2)
        JH  = LDA/2

        IF (INV .GT. 0) THEN
C          CREATE PLAN FOR FORWARD TRANSFORM
           !write(6,*) 'Creating forward plan:',NX,NY,NUMTHWANT

#ifdef SP_MP
          CALL SFFTW_PLAN_WITH_NTHREADS(NUMTHWANT)
#endif

C         DESTROY EXISTING OLD PLAN
          IF (PLAN .GT. 0) CALL SFFTW_DESTROY_PLAN(PLAN)

          IF (NZ .GT. 1) THEN
             CALL SFFTW_PLAN_DFT_R2C_3D(PLAN,NX,NY,NZ,
     &                                  AF,AF,FFTW_MEASURE)
          ELSEIF (NY .GT. 1) THEN
             CALL SFFTW_PLAN_DFT_R2C_2D(PLAN,NX,NY,
     &                                  AF,AF,FFTW_MEASURE)
          ELSE
C            BIMAL SAID USE ESTIMATE, I DO NOT KNOW WHY?
	     CALL SFFTW_PLAN_DFT_R2C_1D(PLAN,NX,
     &                                  AF,AF,FFTW_ESTIMATE)
          ENDIF

          !write(6,90)PLAN,NX,NY,NZ,NUMTHWANT
          IF (VERBOSE) WRITE(NOUT,90)PLAN,NX,NY,NZ,NUMTHWANT
 90       FORMAT('  New Forward FFTW3 Plan: ',I0,' ( ',
     &              I0,', ', I0,', ', I0,') Threads: ',I0)              

       ELSE
C         REVERSE TRANSFORM

          IF (PLAN .GT. 0) CALL SFFTW_DESTROY_PLAN(PLAN)
#ifdef SP_MP
          CALL SFFTW_PLAN_WITH_NTHREADS(NUMTHWANT)
#endif
                  
          IF (NZ .GT. 1) THEN
             CALL SFFTW_PLAN_DFT_C2R_3D(PLAN,NX,NY,NZ,
     &                                  AF,AF,FFTW_MEASURE)
          ELSEIF (NY .GT. 1) THEN
             CALL SFFTW_PLAN_DFT_C2R_2D(PLAN,NX,NY,
     &                                   AF,AF,FFTW_MEASURE)
          ELSE
	     CALL SFFTW_PLAN_DFT_C2R_1D(PLAN,NX, AF,AF,FFTW_MEASURE)
          ENDIF

c         write(6,91)PLAN,NX,NY,NZ,NUMTHWANT
          IF (VERBOSE) WRITE(NOUT,91)PLAN,NX,NY,NZ,NUMTHWANT
 91       FORMAT('  New Reverse FFTW3 Plan: ',I0,' ( ',
     &              I0,', ', I0,', ', I0,') Threads: ',I0)              
        ENDIF

        NUMTHINOUT = NUMTHWANT
        IRTFLG  = 0

	END




C     ----------------- FFTW3_USEPLAN -------------------------------

	SUBROUTINE FFTW3_USEPLAN(BUF, NX,NY,NZ, 
     &                           SPIDER_SIGN, SPIDER_SCALE, 
     &                           PLAN,INV,IRTFLG)

        USE TYPE_KINDS

	REAL ,INTENT(INOUT)  :: BUF(*)
        LOGICAL, INTENT(IN)  :: SPIDER_SIGN, SPIDER_SCALE
        INTEGER              :: INV
        INTEGER, INTENT(OUT) :: IRTFLG

C       PLAN IS A POINTER TO A STRUCTURE 
        INTEGER(KIND=I_8), INTENT(IN) :: PLAN

C       USING FFTW3 LIBRARY CALLS FOR FFT

        IRTFLG = 1
        IF (PLAN .EQ. 0) THEN
           CALL ERRT(101,'NO EXISTING FFTW3 PLAN',NE)
           RETURN
        ENDIF

        LDA = NX + 2 - MOD(NX,2)
        JH  = LDA / 2

        IF (INV .GT. 0) THEN
C          FORWARD TRANSFORM, USING FFTW3 GURU INTERFACE

c           write(6,90)PLAN
c           IF (VERBOSE) WRITE(NOUT,90)PLAN,NX,NY,NZ 
 90        FORMAT( '  Forward FFTW3, Plan:   ',I0 ' ( ',
     &              I0,',' , I0,', ', I0,')')

           CALL SFFTW_EXECUTE_DFT_R2C(PLAN,BUF,BUF) 

           IF (SPIDER_SIGN) THEN
C             CHANGE FFTW FORMAT TO SPIDER FFT FORMAT 
C             SPIDER IMAGINARY PARTS HAVE OPPOSITE SIGNS FROM FFTW 

c$omp         parallel do private(i)
	      DO I = 2,2*JH*NY*NZ,2	
	         BUF(I) = -BUF(I)           
   	      ENDDO
           ENDIF

        ELSE

C          REVERSE TRANSFORM, USING FFTW3 GURU INTERFACE

c          write(6,91)PLAN
c           IF (VERBOSE) WRITE(NOUT,91)PLAN,NX,NY,NZ
 91        FORMAT( '  Reverse FFTW3, Plan:   ', I0 ' ( ',
     &              I0,', ', I0,', ', I0,') ')
              
           IF (SPIDER_SIGN) THEN
C             CHANGE FFTW FORMAT TO SPIDER FFT FORMAT 
C             SPIDER IMAGINARY PARTS HAVE OPPOSITE SIGNS FROM FFTW 

c$omp         parallel do private(i)
	      DO I = 2,2*JH*NY*NZ,2	
	         BUF(I) = -BUF(I)           
 	      ENDDO
           ENDIF

C          USING FFTW3 GURU INTERFACE FOR BACK TRANSFORM
           CALL SFFTW_EXECUTE_DFT_C2R(PLAN,BUF,BUF)

           IF (SPIDER_SCALE) THEN
C             SCALING NEEDED
              PIX = 1.0 / FLOAT (NX * NY * NZ)

c$omp         parallel do private(i)
              DO I=1,LDA*NY*NZ
                 BUF(I) = BUF(I) * PIX
              ENDDO
           ENDIF

        ENDIF
        IRTFLG = 0

	END

C     ----------------- FFTW3_KILLPLAN -------------------------------

	SUBROUTINE FFTW3_KILLPLAN(PLAN,IRTFLG)

        USE TYPE_KINDS

C       PLAN IS A POINTER TO A STRUCTURE 
        INTEGER(KIND=I_8), INTENT(INOUT) :: PLAN

        INTEGER, INTENT(OUT)             :: IRTFLG

C       USING FFTW3 LIBRARY CALLS FOR FFT, DESTROY EXISTING OLD PLAN
        IF (PLAN .GT. 0) THEN
           CALL SFFTW_DESTROY_PLAN(PLAN)
           PLAN = 0
        ENDIF

        IRTFLG = 0
        END

C     ----------------- FFTW3_KILLPLANS-------------------------------

	SUBROUTINE FFTW3_KILLPLANS(PLANS,NPLANS,IRTFLG)

        USE TYPE_KINDS

C       PLAN IS A POINTER TO A STRUCTURE 
        INTEGER(KIND=I_8), INTENT(INOUT) :: PLANS(NPLANS)

        INTEGER, INTENT(OUT)             :: IRTFLG

C       USING FFTW3 LIBRARY CALLS FOR FFT, DESTROY EXISTING OLD PLAN
        DO N = 1,NPLANS
           IF (PLANS(N) .GT. 0) THEN
              CALL SFFTW_DESTROY_PLAN(PLANS(N))
              PLANS(N) = 0
           ENDIF
        ENDDO

        IRTFLG = 0
        END




C     ----------------- FFTW3_INIT_THREADS ---------------------------

	SUBROUTINE FFTW3_INIT_THREADS(IRTFLG)

        INCLUDE 'CMBLOCK.INC'

#if defined (SP_MP) 

        IF (NUMFFTWTH .EQ. 0) THEN
C          FIRST TIME FFTW3 CALLED, SET NUMFFTWTH TO ALL POSSIBLE
           CALL GETTHREADS(NUMFFTWTH)

C          IF (VERBOSE) WRITE(NOUT,92) NUMFFTWTH
 92        FORMAT( '  Number of OMP threads possible:', I0)
        ENDIF
#else
        NUMFFTWTH = 1
#endif

        IRTFLG = 0
        END

@


1.17
log
@output msg formatting I0,  nx
@
text
@d16 1
a16 1
C=* Email: spider@@wadsworth.org                                        *
@


1.16
log
@no more spider fft compilation
@
text
@d8 1
d14 1
a14 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d32 2
a33 1
C  FFTW3_MAKEPLANB(BUF,LDA,NSAM,NROW,NSLICE,NUMTHINOUT, PLAN,INV,IRTFLG)
d36 3
a38 1
C  FFTW3_MAKEPLAN (        NSAM,NROW,NSLICE,NUMTHINOUT, PLAN,INV,IRTFLG)
d41 5
a45 3
C  FFTW3_USEPLAN(BUF, NSAM,NROW,NSLICE, SPIDER_SIGN, SPIDER_SCALE, 
C                PLAN,INV,IRTFLG)
C  PURPOSE:  USES A FFTW3 PLAN TO DO A FFT ON BUF
a47 1
C  PURPOSE:  DESTROYS A FFTW3 PLAN.
d49 5
a53 2
C  PARAMETERS:  BUF     ARRAY (LDA*NROW*NSLICE)               SENT/RET.
C               NSAM..  DIMENSONS                             SENT
d56 2
a57 2
C
C  PURPOSE:  REAL MIXED RADIX FFT.
d87 1
a87 1
	SUBROUTINE FFTW3_MAKEPLAN(NSAM,NROW,NSLICE,NUMTHINOUT,
d129 1
a129 1
           WRITE(NOUT,98)NSAM,NROW,NSLICE,NUMTHWANT,INV
d131 1
a131 1
     &               I6,',', I6,',', I6,') Threads:',I3,' INV:',I2)              
d160 1
a160 1
        LDA = NSAM + 2 - MOD(NSAM,2)
d164 1
a164 1
        ALLOCATE(AF(LDA,NROW,NSLICE), STAT=IRTFLG)
d166 1
a166 1
           CALL ERRT(46,'FMRS_FFTW3, AF',LDA*NROW*NSLICE)
d173 1
a173 1
          !write(6,*) 'fftw3Creating -> plan:',nsam,nrow,NUMTHWANT,lda
d184 2
a185 2
          IF (NSLICE .GT. 1) THEN
             CALL SFFTW_PLAN_DFT_R2C_3D(PLAN,NSAM,NROW,NSLICE,
d187 1
a187 1
          ELSEIF (NROW .GT. 1) THEN
d189 1
a189 1
             CALL SFFTW_PLAN_DFT_R2C_2D(PLAN,NSAM,NROW,
d193 1
a193 1
	     CALL SFFTW_PLAN_DFT_R2C_1D(PLAN,NSAM,
d197 4
a200 4
          !write(6,90)PLAN,NSAM,NROW,NSLICE,NUMTHWANT
          IF (VERBOSE) WRITE(NOUT,90)PLAN,NSAM,NROW,NSLICE,NUMTHWANT
 90       FORMAT('  New Forward FFTW3 Plan:',I15,' (',
     &              I6,',', I6,',', I6,') Threads:',I3)              
d210 2
a211 2
          IF (NSLICE .GT. 1) THEN
             CALL SFFTW_PLAN_DFT_C2R_3D(PLAN,NSAM,NROW,NSLICE,
d213 2
a214 2
          ELSEIF (NROW .GT. 1) THEN
             CALL SFFTW_PLAN_DFT_C2R_2D(PLAN,NSAM,NROW,
d217 1
a217 1
	     CALL SFFTW_PLAN_DFT_C2R_1D(PLAN,NSAM, AF,AF,FFTW_MEASURE)
d220 4
a223 4
          !write(6,91)PLAN,NSAM,NROW,NSLICE,NUMTHWANT
          IF (VERBOSE) WRITE(NOUT,91)PLAN,NSAM,NROW,NSLICE,NUMTHWANT
 91       FORMAT('  New Reverse FFTW3 Plan:',I15,' (',
     &              I6,',', I6,',', I6,') Threads:',I3)              
d237 1
a237 1
	SUBROUTINE FFTW3_MAKEPLANB(AF,LDA,NSAM,NROW,NSLICE,
d242 1
a242 1
	REAL,    INTENT(INOUT)           :: AF(LDA,NROW,NSLICE)
d279 3
a281 3
           WRITE(NOUT,98)NSAM,NROW,NSLICE,NUMTHINOUT,INV
 98        FORMAT('  Trying to create FFTW3 plan for: (',
     &               I6,',', I6,',', I6,') Threads:',I3,' INV:',I2)              
d311 1
a311 1
        LDA = NSAM + 2 - MOD(NSAM,2)
d316 1
a316 1
           !write(6,*) 'Creating forward plan:',nsam,nrow,NUMTHWANT
d325 2
a326 2
          IF (NSLICE .GT. 1) THEN
             CALL SFFTW_PLAN_DFT_R2C_3D(PLAN,NSAM,NROW,NSLICE,
d328 2
a329 2
          ELSEIF (NROW .GT. 1) THEN
             CALL SFFTW_PLAN_DFT_R2C_2D(PLAN,NSAM,NROW,
d333 1
a333 1
	     CALL SFFTW_PLAN_DFT_R2C_1D(PLAN,NSAM,
d337 4
a340 4
          !write(6,90)PLAN,NSAM,NROW,NSLICE,NUMTHWANT
          IF (VERBOSE) WRITE(NOUT,90)PLAN,NSAM,NROW,NSLICE,NUMTHWANT
 90       FORMAT('  New Forward FFTW3 Plan:',I15,' (',
     &              I6,',', I6,',', I6,') Threads:',I3)              
d350 2
a351 2
          IF (NSLICE .GT. 1) THEN
             CALL SFFTW_PLAN_DFT_C2R_3D(PLAN,NSAM,NROW,NSLICE,
d353 2
a354 2
          ELSEIF (NROW .GT. 1) THEN
             CALL SFFTW_PLAN_DFT_C2R_2D(PLAN,NSAM,NROW,
d357 1
a357 1
	     CALL SFFTW_PLAN_DFT_C2R_1D(PLAN,NSAM, AF,AF,FFTW_MEASURE)
d360 4
a363 4
c         write(6,91)PLAN,NSAM,NROW,NSLICE,NUMTHWANT
          IF (VERBOSE) WRITE(NOUT,91)PLAN,NSAM,NROW,NSLICE,NUMTHWANT
 91       FORMAT('  New Reverse FFTW3 Plan:',I15,' (',
     &              I6,',', I6,',', I6,') Threads:',I3)              
d376 1
a376 1
	SUBROUTINE FFTW3_USEPLAN(BUF, NSAM,NROW,NSLICE, 
d398 1
a398 1
        LDA = NSAM + 2 - MOD(NSAM,2)
d405 3
a407 3
c           IF (VERBOSE) WRITE(NOUT,90)PLAN,NSAM,NROW,NSLICE 
 90        FORMAT( '  Forward FFTW3, Plan:   ',I15 ' (',
     &              I6,',', I6,',', I6,')')
d416 1
a416 1
	      DO I = 2,2*JH*NROW*NSLICE,2	
d426 3
a428 3
c           IF (VERBOSE) WRITE(NOUT,91)PLAN,NSAM,NROW,NSLICE
 91        FORMAT( '  Reverse FFTW3, Plan:   ', I15 ' (',
     &              I6,',', I6,',', I6,') ')
d435 1
a435 1
	      DO I = 2,2*JH*NROW*NSLICE,2	
d445 1
a445 1
              PIX = 1.0 / FLOAT (NSAM * NROW * NSLICE)
d448 1
a448 1
              DO I=1,LDA*NROW*NSLICE
d516 1
a516 1
 92        FORMAT( '  Number of OMP threads possible:', I3)
@


1.15
log
@GPL_2010
@
text
@a97 6
#ifndef SP_LIBFFTW3
C       NOT COMPILED FOR FFTW3
        PLAN   = 0
        IRTFLG = 0
        RETURN
#else
a222 1
#endif
a247 6
#ifndef SP_LIBFFTW3
C       NOT COMPILED FOR FFTW3
        PLAN   = 0
        IRTFLG = 0
        RETURN
#else
a359 1
#endif
a381 1
#ifdef SP_LIBFFTW3 
a447 8
#else
        WRITE(NOUT,*)'  NOT COMPILED FOR FFTW3'

        CALL FMRS(BUF,NSAM,NROW,NSLICE,0, 
     &            SPIDER_SIGN, SPIDER_SCALE,
     &            INV,IRTFLG)
 
#endif
a460 1
#ifdef SP_LIBFFTW3 
d466 1
a466 1
#endif
a480 1
#ifdef SP_LIBFFTW3 
d488 1
a488 1
#endif
d501 1
a501 1
#if defined (SP_MP) && defined (SP_LIBFFTW3)
@


1.14
log
@FFTW3_KILLPLANS
@
text
@a9 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d11 5
a15 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d17 1
a17 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d22 1
a22 1
C=* This program is distributed in the hope that it will be useful,    *
d24 1
a24 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a25 1
C=*                                                                    *
d27 1
a27 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.13
log
@inv intent unused on fftw3_useplan
@
text
@d498 25
@


1.12
log
@OMP_GET_NUM_THREADS bug
@
text
@d394 1
a394 1
        INTEGER, INTENT(OUT) :: INV
@


1.11
log
@FFTW3 plan changes
@
text
@d117 9
a140 9
        IF (NUMTHINOUT .EQ. 0) THEN
           NUMTHWANT = NUMFFTWTH
        ELSE 
C          INPUT HAS SPECIFIED NUMTHINOUT     
           NUMTHWANT = NUMTHINOUT
        ENDIF

c       write(6,*) ' numthwant:',numthwant

d274 9
a282 1
        NUMTH = OMP_GET_NUM_PROCS()
a297 9
        IF (NUMTHINOUT .EQ. 0) THEN
           NUMTHWANT = NUMFFTWTH
        ELSE 
C          INPUT HAS SPECIFIED NUMTHINOUT     
           NUMTHWANT = NUMTHINOUT
        ENDIF

c       !write(6,*) ' NUMTHWANT:',NUMTHWANT

@


1.10
log
@*** empty log message ***
@
text
@d7 1
d35 6
a40 1
C  FFTW3_MAKEPLAN(NSAM,NROW,NSLICE,NUMTHINOUT, PLAN,INV,IRTFLG)
d43 2
d46 1
d119 6
a124 2
c       write(6,*) ' Current omp threads in fftw3 call:',
c     &              NUMTH,NUMFFTWTH,NUMTHINOUT
d126 1
a126 3
         IF (NUMTH .GT. 1) THEN
C          CURRENTLY INSIDE OMP PARALLEL SECTION --> FFTW3 ERRORS
           CALL ERRT(101,
d139 1
a139 1
c       write(6,*) ' NUMTHWANT:',NUMTHWANT
d150 1
a150 2
              CALL ERRT(101,
     &           'FFTW3 MULTIPLE THREADS INITIALIZATION FAILED',IER)
d174 2
a175 1
c          write(6,*) 'Creating forward plan:',nsam,nrow,NUMTHWANT
d178 1
d183 1
d185 1
d190 1
d199 1
a199 1
c         write(6,90)PLAN,NSAM,NROW,NSLICE,NUMTHWANT
d222 1
a222 1
c         write(6,91)PLAN,NSAM,NROW,NSLICE,NUMTHWANT
d238 145
a392 2
        INCLUDE 'CMBLOCK.INC'
	
d411 1
a411 1
        JH  = LDA/2
@


1.9
log
@verbose
@
text
@d313 1
a313 1
        CALL FMRS(BUF,NSAM,NROW,NSLICE,0_long, 
@


1.8
log
@iplan
@
text
@d258 2
a259 2
c          write(6,90)PLAN
           IF (VERBOSE) WRITE(NOUT,90)PLAN,NSAM,NROW,NSLICE 
d280 1
a280 1
           IF (VERBOSE) WRITE(NOUT,91)PLAN,NSAM,NROW,NSLICE
@


1.7
log
@ rewrite
@
text
@d313 1
a313 1
        CALL FMRS(BUF,NSAM,NROW,NSLICE,0.0D0, 
@


1.6
log
@removed docalc from fmrs call
@
text
@d91 1
a91 1
	REAL, ALLOCATABLE, DIMENSION(:) :: AF
a121 7
           IF (NUMFFTWTH .EQ. 0) THEN
C             FIRST TIME FFTW3 CALLED, SET NUMFFTWTH TO ALL POSSIBLE
              CALL GETTHREADS(NUMFFTWTH)

C             IF (VERBOSE) WRITE(NOUT,92)NUMFFTWTH
 92           FORMAT( '  NUMBER OF OMP THREADS POSSIBLE:', I3)
           ENDIF
d127 1
d156 1
a156 1
        ALLOCATE(AF(LDA*NROW*NSLICE), STAT=IRTFLG)
d158 1
a158 1
           CALL ERRT(46,'FFTW3, AF',LDA*NROW*NSLICE)
d164 1
a164 1
c           write(6,*) 'Creating forward plan:',nsam,nrow,NUMTHWANT
d187 1
a187 1
     &              I5,',', I5,',', I5,') Threads:',I3)              
d210 1
a210 1
     &              I5,',', I5,',', I5,') Threads:',I3)              
d259 3
a261 2
           IF (VERBOSE) WRITE(NOUT,90)PLAN
 90        FORMAT( '  Forward FFTW3 Using Plan:', I15)              
d279 4
a282 3
c           write(6,91)PLAN
           IF (VERBOSE) WRITE(NOUT,91)PLAN
 91        FORMAT( '  Reverse FFTW3 Using Plan:', I15)
d329 1
a329 1
        INTEGER, INTENT(OUT)   :: IRTFLG
d341 23
@


1.5
log
@cosmetic output
@
text
@d164 1
a164 1
           CALL ERRT(46,'FMRS_FFTW3, AF',LDA*NROW*NSLICE)
d318 1
a318 1
     &            .TRUE., SPIDER_SIGN, SPIDER_SCALE,
@


1.4
log
@*** empty log message ***
@
text
@d193 1
a193 1
     &              I5,',', I5,',', I5,) Threads:',I3)              
d216 1
a216 1
     &              I5,',', I5,',', I5,) Threads:',I3)              
@


1.3
log
@plan details output
@
text
@d126 1
a126 1
              IF (VERBOSE) WRITE(NOUT,92)NUMFFTWTH
@


1.2
log
@.
@
text
@a187 2
c            write(6,93)PLAN,NSAM
 93          FORMAT('  Forward 1D FFTW3 Plan:',I15,'  Length:',I6)              
d190 4
a193 3
c          write(6,90)PLAN,NUMTHWANT
          IF (VERBOSE) WRITE(NOUT,90)PLAN,NUMTHWANT
 90       FORMAT('  Forward FFTW3 Plan:',I15,'  created, Threads:',I3)              
a202 2
c         write(6,*) 'Creating reverse plan:',nsam,nrow,NUMTHWANT

d210 1
a210 4
	     CALL SFFTW_PLAN_DFT_C2R_1D(PLAN,NSAM,
     &                                  AF,AF,FFTW_MEASURE)
c            write(6,94)PLAN,NSAM
 94          FORMAT('  Reverse 1D FFTW3 Plan:',I15,'  Length:',I6)              
d213 4
a216 3
c         write(6,91)PLAN,NUMTHWANT
          IF (VERBOSE) WRITE(NOUT,91)PLAN,NUMTHWANT
 91       FORMAT('  Reverse FFTW3 Plan:',I15,'  created,  Threads:',I3)              
@


1.1
log
@renamed from fmrs_fftw3.f
@
text
@a97 1
        
a125 1
              !write(6,92)numfftwth 
@

