head	1.22;
access;
symbols
	pre_mrcs:1.22
	healthdept_2018:1.22
	pre_getangas:1.21
	GPL2010:1.21
	pre_GPL2010:1.20
	pre_var_equation:1.20
	pre_fftwrings:1.20
	pre_opfiles:1.20
	src:1.20
	best-code:1.20
	named-reg:1.20
	x-named-regs:1.19
	x:1.19
	v13-00:1.19
	pre_GPL:1.17
	prec_CA:1.16
	noindx:1.16
	Bproc:1.11
	oct21:1.4;
locks; strict;
comment	@c @;


1.22
date	2018.10.03.14.34.02;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2010.06.24.13.25.14;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2005.12.12.15.26.28;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.17.20.21.12;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.17.18.13.46;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2003.11.24.17.25.21;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2002.07.02.18.05.49;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.19.18.40.52;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.16.20.04.33;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2001.02.02.20.21.07;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2001.01.23.15.45.54;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.08.09.19.17.57;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.08.08.18.16.19;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.10.18.06.50;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.07.17.28.06;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.11.04.15.16.35;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.11.04.14.37.40;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.11.04.13.57.13;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.08.31.13.14.57;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	99.08.17.15.20.46;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	99.06.23.12.49.08;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	99.06.17.19.11.43;	author leith;	state Exp;
branches;
next	;


desc
@used by lundoc
@


1.22
log
@email_health_dept
@
text
@
C++*******************************************************************
C
C    CHKSTR.FOR       ADAPTED FROM CHKSTR        AUG 89  ArDean Leith
C                     IGNORE COMMENT NOW         AUG 99  ArDean Leith
C                     GETNEXTTOKEN ACCEPTS TAB   NOV 99 ARDEAN LEITH
C                     SPLIT GETNEXTTOKEN TO FILE JAN 00 ARDEAN LEITH
C                     'RR' X? BINDING TIME BUG   NOV 01 ARDEAN LEITH
C                     [] REG SUPPORT             NOV 05 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    CHKSTR(STRING,NCHAR,TYPE,NUML,FNUML,NMAX,INUM,IRTFLG)
C
C    PURPOSE:           EXTRACTS INTERGER OR REAL VALUES FROM STRING.  
C                       CAN SUBSTITUTE FOR REGISTER CONTENT OR RETURN
C                       REGISTER NUMBER LISTING         
C    PARAMETERS:
C	  STRING	INPUT STRING                             (SENT)
C	  NCHAR		# OF CHARACTERS IN INPUT STRING          (SENT)
C	  TYPE		TYPE OF NUMBERS RETURNED                 (SENT)
C                       I  = INTEGER LIST OF REGISTER CONTENTS
C                       R  = FLOATING LIST
C                       IT = REGISTER NUMBERS IN NUML
C                       RE = FLOATING LIST OF REGISTER CONTENTS
C                            AND INTEGER LIST OF REGISTER NUMBERS
C
C	  NUML		INTEGER ARRAY, IF NEEDED                 (RET.)
C	  FNUML		REAL ARRAY, IF NEEDED                    (RET.)
C	  NMAX          SIZE OR NUML AND FNUML                   (SENT)
C	  INUM		# OF NUMBERS RETURNED IN NUML OR FNUML   (RET.)
C	  IRTFLG	ERROR FLAG, =0 IF ALL O.K.               (RET.)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

      SUBROUTINE CHKSTR(STRING,NCHAR,TYPE,NUML,FNUML,NMAX,INUM,IRTFLG)

      INCLUDE 'CMBLOCK.INC'
      INCLUDE 'CMLIMIT.INC'

      CHARACTER(LEN=*)  :: STRING,TYPE
      INTEGER           :: NUML(NMAX)
      REAL              :: FNUML(NMAX)
      LOGICAL           :: RFLAG

      INUM   = 0
      IRTFLG = 1
      IFIRST = 1

      IF (TYPE .EQ. 'IRRE' .OR. TYPE .EQ. 'IR') THEN
C         OBSOLETE
          WRITE(NOUT,*) ' *** PGM ERROR OBSOLETE TYPE: ',TYPE,
     &                  ' IN CHKSTR'
          CALL ERRT(101,'PGM ERROR OBSOLETE TYPE IN CHKSTR',NE)
          RETURN     
      ENDIF

      DO
c       GET TOKEN (CHAR. STRING DELIMITED BY A ", ()") FROM STRING
        CALL GETNEXTTOKEN(STRING(1:NCHAR),IFIRST,IGO,IEND)
        IF (IGO .LE. 0) THEN
C          ALL TOKENS FROM STRING HAVE BEEN EVALUATED
           IRTFLG = 0
           RETURN
        ENDIF

C       TOKEN RETURNED
          
        RFLAG = .FALSE.
        IF (STRING(IGO:IGO) .EQ. '[')THEN
C          TOKEN STARTS WITH '[', SO IS A REGISTER REFERENCE
           IF (IGO .GE. NCHAR) RETURN
           RFLAG = .TRUE.
        ENDIF

        INUM = INUM + 1
        IF (INUM .GT. NMAX) THEN
C          PREVENT NUML OVERFLOW!!
           WRITE(NOUT,91) NMAX
91         FORMAT('*** ONLY: ',I6,
     &            '  VALUES RETURNED BY CHKSTR TO PREVENT OVERFLOW'/)
           RETURN
        ENDIF

        IF (RFLAG) THEN
C          GET REGISTER VALUE & NUMBER FROM TOKEN
           CALL REG_GET_VAR(0,STRING(IGO:IEND),.FALSE.,FVAL,IREG,
     &                      IEND,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
           IEND = IEND + IGO -1

           IF (TYPE .EQ. 'R') THEN
C             RETURN FLOATING POINT IN FNUML
              FNUML(INUM) = FVAL

           ELSEIF (TYPE .EQ. 'RE') THEN
C             RETURN FLOATING POINT IN FNUML & IREG IN INUML
              FNUML(INUM) = FVAL
              NUML(INUM)  = IREG

           ELSEIF (TYPE .EQ. 'I') THEN
C             EXTRACT FLOATING POINT AND RETURN AS INTEGER 
              NUML(INUM) = FVAL

           ELSEIF (TYPE .EQ. 'IT') THEN
C             RETURN REGISTER NUMBERS IN NUML, (NOT REGISTER CONTENTS)
C             ACCEPTS [] INPUT AND RETURNS REGISTER NUMBER             
              NUML(INUM) = IREG 
           ENDIF

        ELSEIF (TYPE .EQ. 'I') THEN
C          EXTRACT INTEGER      
           READ(STRING(IGO:IEND),*,IOSTAT=IERR) NUML(INUM)
           IF (IERR .NE. 0) THEN
              WRITE(NOUT,*) 'BAD INPUT STRING: ',STRING(IGO:IEND)
              RETURN
           ENDIF
            IF (IERR .NE. 0) RETURN

        ELSEIF (TYPE .EQ. 'R' .OR. TYPE .EQ. 'RE') THEN
C          EXTRACT REAL NUMBER    
           READ(STRING(IGO:IEND),*,IOSTAT=IERR) FNUML(INUM)
           IF (IERR .NE. 0) THEN
              WRITE(NOUT,*) 'BAD INPUT STRING: ',STRING(IGO:IEND)
              RETURN
c             WRITE(NOUT,*) 'NO. CHARACTERS IN STRING: ',NCHAR
c             WRITE(NOUT,*) 'IFIRST: ',IFIRST,'  INUM: ',INUM,
c     &                     '  IGO: ',IGO,' IEND: ',IEND
           ENDIF
           IF (TYPE .EQ. 'RE') NUML(INUM) = 0
        ENDIF
        IFIRST = IEND + 1

        IF (IFIRST .GT. NCHAR) EXIT
      ENDDO

79    IRTFLG = 0

      RETURN
      END



        
             
@


1.21
log
@GPL_2010
@
text
@d17 1
a17 1
C=* Email: spider@@wadsworth.org                                        *
@


1.20
log
@native named registers
@
text
@a11 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d13 5
a17 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d19 1
a19 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d24 1
a24 1
C=* This program is distributed in the hope that it will be useful,    *
d26 1
a26 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a27 1
C=*                                                                    *
d29 1
a29 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.19
log
@GPL License fixed
@
text
@d9 1
d40 1
a40 1
C                       CAN SUBSTITUTE FOR REGISTER CONTENT OR RETRUN
a46 2
C                       IR = INTEGER LIST OF TESTED REGISTER NUMBERS
C                            (HAVE ADDED +1)(TESTS FOR RANGE)
d48 1
d50 1
a50 5
C                           (EVALUATES REGISTERS BEFORE RETURN)
C                       IRRE = INTEGER LIST OF REGISTER NUMBERS
C                              (HAVE ADDED +1)(TESTS FOR RANGE)
C                              FLOATING LIST OF REGISTER CONTENTS
C                              (EVALUATES REGISTERS BEFORE RETURN)
d66 4
a69 9
      DIMENSION      NUML(NMAX),FNUML(NMAX)

      CHARACTER *(*) STRING,TYPE
      LOGICAL        RFLAG

C     FOR LOCAL SYMBOLIC PARAMETER HANDLING 
      INTEGER, DIMENSION(MAXPRC) :: IPSTACK,IPNUMSTACK,IPARNUM
      COMMON /QSTR_STUFF1/ ISTOP,ITI,ITIN,IWHERE,IPSTACK,
     &                     IPNUMSTACK,IPARNUM
d75 8
d95 2
a96 4
        IF (STRING(IGO:IGO) .EQ. 'X' .OR. STRING(IGO:IGO) .EQ. 'x') 
     &     THEN
C          TOKEN STARTS WITH 'X' SO IS A REGISTER REFERENCE
C          IF NO NUMBER AFTER X, THEN THIS IS AN ERROR
d101 8
a108 13
        IF (RFLAG .OR.
     &     TYPE .EQ. 'IT' .OR. TYPE .EQ. 'IR' .OR. TYPE .EQ. 'IRRE')THEN
C          GET REGISTER NUMBER FROM TOKEN
           CALL REGPARSE(STRING(IGO:IEND),IVAL,IRGO,IREND,.FALSE.,IERR)
           IF (IERR .NE. 0) RETURN
          
           CALL REG_CHK(IVAL,.FALSE.,IRTFLG)
           IF (IRTFLG .NE. 0) THEN
C             REGISTER OUT OF RANGE
              WRITE(NOUT,90) IVAL
90            FORMAT('*** ILLEGAL REGISTER VALUE: ',I6/)
              RETURN
           ENDIF
d110 10
a119 20
           INUM = INUM + 1
           IF (INUM .GT. NMAX) THEN
C             PREVENT NUML OVERFLOW!!
              WRITE(NOUT,91) NMAX
91            FORMAT('*** ONLY: ',I6,
     &               '  VALUES RETURNED BY CHKSTR TO PREVENT OVERFLOW'/)
              RETURN
           ENDIF
       
           IF (TYPE .EQ. 'IT') THEN
C             RETURN REGISTER NUMBERS IN NUML, NOT ADJUSTED + 1
C             WILL ACCEPT EITHER X<DIGIT>.. OR <DIGIT>.. INPUT  
C             AND RETURNS REGISTER NUMBER  (NOT REGISTER CONTENTS)
              NUML(INUM) = IVAL 

           ELSEIF (TYPE .EQ. 'IR') THEN
C             RETURN REGISTER NUMBERS IN NUML, ADJUSTED + 1
C             WILL ACCEPT EITHER X<DIGIT>. OR <DIGIT>. INPUT  
C             AND RETURNS REGISTER NUMBER + 1 (NOT REGISTER CONTENTS)
              NUML(INUM) = IVAL + 1
d122 3
a124 9
C             EXTRACT FLOATING POINT NUMBER FROM REGISTER     
C             FNUML(INUM) = PARAM(IVAL + 1)
              IF (FROMBATCH .AND.
     &           FCHAR(1:2) .EQ. 'RR' .AND. FCHAR(4:4) .NE. 'L') THEN
C                'RR' SUBSTITUTION FROM PREVIOUS BANK!
                 CALL REG_GET_BANKED(ISTOP,IVAL,FNUML(INUM),IRTFLG)
              ELSE
                 CALL REG_GET(IVAL,FNUML(INUM),.TRUE.,IRTFLG)
              ENDIF
d127 1
a127 9
C             EXTRACT FLOATING POINT AND CONVERT TO INTEGER 
C             FVAL        = PARAM(IVAL + 1)
              IF (FROMBATCH .AND.
     &           FCHAR(1:2) .EQ. 'RR' .AND. FCHAR(4:4) .NE. 'L') THEN
C                'RR' SUBSTITUTION FROM PREVIOUS BANK!
                 CALL REG_GET_BANKED(ISTOP,IVAL,FVAL,IRTFLG)
              ELSE
                 CALL REG_GET(IVAL,FVAL,.TRUE.,IRTFLG)
              ENDIF
d130 4
a133 13
           ELSEIF (TYPE .EQ. 'IRRE') THEN
C             EXTRACT FLOATING POINT NUMBER FROM REGISTER     
C             FNUML(INUM) = PARAM(IVAL + 1)
              IF (FROMBATCH .AND.
     &           FCHAR(1:2) .EQ. 'RR' .AND. FCHAR(4:4) .NE. 'L') THEN
C                'RR' SUBSTITUTION FROM PREVIOUS BANK!
                 CALL REG_GET_BANKED(ISTOP,IVAL,FNUML(INUM),IRTFLG)
              ELSE
                 CALL REG_GET(IVAL,FNUML(INUM),.TRUE.,IRTFLG)
              ENDIF

C             AND RETURNS REGISTER NUMBER + 1 IN NUML ARRAY
              NUML(INUM)  = IVAL + 1
d137 1
a137 2
C          EXTRACT INTEGER     
           INUM = INUM + 1
d139 5
a143 1
           IF (IERR .NE. 0) RETURN
a146 1
           INUM = INUM + 1
a147 1

d149 5
a153 5
               WRITE(NOUT,*) 'BAD STRING(IGO:IEND): ',STRING(IGO:IEND)
c               WRITE(NOUT,*) 'IFIRST: ',IFIRST,'  INUM: ',INUM,
c     &                       '  IGO: ',IGO,' IEND: ',IEND
               WRITE(NOUT,*) 'NO. CHARACTERS IN STRING: ',NCHAR
               RETURN
d155 1
@


1.18
log
@HRI GPL License used
@
text
@a10 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d14 1
a14 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a33 6

C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.17
log
@NLOG
@
text
@d12 24
@


1.16
log
@iparnum
@
text
@d60 1
a60 1
      COMMON /QSTR_STUFF1/ ISTOP,ITI,ITIN,IWHERE,NLOG,IPSTACK,
@


1.15
log
@removed debug output left in by error
@
text
@d58 2
a59 2
C     FOR SYMBOLIC PARAMETER HANDLING 
      INTEGER, DIMENSION(MAXPRC) :: IPSTACK,IPNUMSTACK
d61 2
a62 1
     &                     IPNUMSTACK
@


1.14
log
@'RR' answered with x?? from batch bug fixed
@
text
@a126 1
                 write(6,*) 'istop: ',istop
@


1.13
log
@answ(1:locsemi)
@
text
@d8 1
d10 8
a17 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d51 1
d58 4
d124 8
a131 1
              CALL REG_GET(IVAL,FNUML(INUM),.TRUE.,IRTFLG)
d136 7
a142 1
              CALL REG_GET(IVAL,FVAL,.TRUE.,IRTFLG)
d148 7
a154 1
              CALL REG_GET(IVAL,FNUML(INUM),.TRUE.,IRTFLG)
@


1.12
log
@incore procedures
@
text
@d146 8
a153 1
           IF (IERR .NE. 0) RETURN
@


1.11
log
@parsing of reg changed
@
text
@d63 1
a63 1
        CALL GETNEXTTOKEN(STRING,IFIRST,IGO,IEND)
d150 1
a150 1
        IF (IGO .GT. NCHAR) EXIT
@


1.10
log
@changes for reg_set
@
text
@a75 1
           IGO = IGO + 1
d77 1
a77 1
           IF (IGO .GT. NCHAR) RETURN
d81 2
a82 1
        IF (TYPE .EQ. 'IR' .OR. TYPE .EQ. 'IRRE' .OR. RFLAG) THEN
d84 1
a84 3
           IF (TYPE .EQ. 'IR' .AND. .NOT. RFLAG) IGO = IGO + 1
           CALL REGPARSE(STRING(IGO-1:IEND),IVAL,IRGO,IREND,
     &                   .FALSE.,IERR)
d106 1
a106 1
C             WILL ACCEPT EITHER X<DIGIT><DIGIT> OR <DIGIT><DIGIT> INPUT  
d112 1
a112 1
C             WILL ACCEPT EITHER X<DIGIT><DIGIT> OR <DIGIT><DIGIT> INPUT  
@


1.9
log
@split out getnexttoken
@
text
@d84 3
a86 1
           READ(STRING(IGO:IEND),*,IOSTAT=IERR) IVAL
d88 3
a90 2

           IF (IVAL .LT. 0 .OR. IVAL .GT. 102) THEN
d93 1
a93 1
90            FORMAT('*** REGISTER OUT OF RANGE 0...102): ',I6/)
d106 7
a112 1
           IF (TYPE .EQ. 'IR') THEN
d120 2
a121 1
              FNUML(INUM) = PARAM(IVAL + 1)
d125 2
a126 1
              FVAL        = PARAM(IVAL + 1)
d131 2
a132 1
              FNUML(INUM) = PARAM(IVAL + 1)
@


1.8
log
@ibm showed iend=i error
@
text
@d4 4
a7 4
C    CHKSTR.FOR       ADAPTED FROM CHKSTRQ JUNE 99 ArDean Leith
C                     ADAPTED FROM CHKSTR  AUG 89  ArDean Leith
C                     IGNORE COMMENT NOW   AUG 99  ArDean Leith
C                     GETNEXTTOKEN ACCEPTS TAB NOV 99 ARDEAN LEITH
d82 1
a82 1
        IF (TYPE .EQ. 'IR' .or. TYPE .EQ. 'IRRE' .OR. RFLAG) THEN
d132 1
a132 1
        ELSEIF (TYPE .EQ. 'R') THEN
a147 35
C     ----------------- GETNEXTTOKEN ----------------------------------

      SUBROUTINE GETNEXTTOKEN(STRING,IFIRST,IGO,IEND)

C     TOKEN DELIMITER IS A COMMA, BLANK, OR SEMICOLON
      CHARACTER *(*) STRING
      CHARACTER      CTEMP

C     SET DEFAULT RETURN VALUES
      IGO   = 0
      IEND  = 0
      ILAST = LEN(STRING)

      DO I = IFIRST,ILAST
         CTEMP = STRING(I:I)
         IF (CTEMP .EQ. ';') THEN
C            START OF COMMENT, THIS IS TOKEN END
            EXIT
         ELSEIF (CTEMP .NE. ',' .AND. CTEMP .NE. ' ' .AND.
     &           CTEMP .NE. '(' .AND. CTEMP .NE. ')' .AND.
     &           CTEMP .GT. CHAR(31)) THEN
C           ARE INSIDE A TOKEN, SET IGO IF THIS IS FIRST CHAR INSIDE
            IF (IGO .EQ. 0) IGO = I
            IEND = I

         ELSEIF (IGO .GT. 0) THEN
C           TOKEN END ENCOUNTERED
            EXIT
         ENDIF
      ENDDO

C     TOKEN FOUND OR RAN OFF END OF STRING

      RETURN
      END
@


1.7
log
@comments
@
text
@a174 1
            IEND = I
@


1.6
log
@comments added
@
text
@d23 1
a23 1
C                       REGISTER NUBER LISTING LISTING         
d28 1
a28 1
C                       I  = INTEGER LIST
@


1.5
log
@put tab test in getnexttoken
@
text
@d7 1
d21 3
d29 1
a29 1
C                       IR = INTEGER LIST OF REGISTER NUMBERS
@


1.4
log
@added irre
@
text
@a56 1
#ifdef SP_F90
d58 1
a58 4
#else
      DO WHILE (.TRUE.)
#endif 
c       GET TOKEN (CHAR. STRING DELIMITED BY A "," OR A " ") FROM STRING
d136 1
a136 5
#ifdef SP_F90
      IF (IGO .GT. NCHAR) EXIT
#else
      IF (IGO .GT. NCHAR) GOTO 79
#endif 
d144 1
a145 1

a160 1
#ifdef SP_F90
d162 3
a164 4
#else
            RETURN
#endif 
         ELSEIF (CTEMP .NE. ',' .AND. CTEMP .NE. ' ') THEN
a171 1
#ifdef SP_F90
a172 3
#else
            RETURN
#endif 
@


1.3
log
@"I" register return bug & ; hndling changed
@
text
@d29 6
a34 1
C                           (EVALUTE REGISTERS BEFORE RETURN)
d37 1
a37 1
C	  NCHAR		SIZE OR NUML OR FNUML                    (SENT)
d82 1
a82 1
        IF (TYPE .EQ. 'IR' .OR. RFLAG) THEN
d95 8
a102 1

d109 1
a109 1
           ELSEIF (TYPE .EQ. 'R') THEN
d117 7
@


1.2
log
@f90 ifdef
@
text
@d6 1
a50 17
#ifdef NEVER
------------------?????????????
C       DELETE HEADING '(' AND TRAILING ')'  AROUND REGISTER EXPRESSION
	DO 2 I=1,NCHAR
          IF (STRING(I:I).EQ.' ') GOTO 2
          IF (STRING(I:I).EQ.'(') STRING(I:I)=' '
          GOTO 3
2	CONTINUE

3	DO 4 I=NCHAR,1,-1
          IF (STRING(I:I).EQ.' ') GOTO 4
          IF (STRING(I:I).EQ.')') STRING(I:I) = ' '
          GOTO 5
4	CONTINUE
      ENDIF
--------------------?
#endif
d104 1
a104 1
              FNUML(INUM) = FVAL
d137 1
d148 8
a155 1
         IF (CTEMP .NE. ',' .AND. CTEMP .NE. ' ') THEN
@


1.1
log
@Initial revision
@
text
@d68 5
a72 1
      DO 
d137 5
a141 1
        IF (IGO .GT. NCHAR) EXIT
d144 1
a144 1
      IRTFLG = 0
d171 1
d173 3
@
