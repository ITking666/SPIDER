head	1.15;
access;
symbols;
locks; strict;
comment	@c @;


1.15
date	2016.11.29.18.42.15;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2016.11.29.16.08.08;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2016.10.21.16.20.47;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2016.10.21.15.07.31;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2016.04.20.15.15.27;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2016.04.19.16.11.33;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2016.03.09.18.36.43;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2016.03.08.19.22.14;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2016.03.08.19.17.13;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2016.03.07.19.30.26;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2014.12.03.18.41.44;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2014.08.05.13.47.23;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.01.14.42.34;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2014.04.23.14.15.53;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.15.17.55.43;	author leith;	state Exp;
branches;
next	;


desc
@@


1.15
log
@increased number of ridges/valleys found
@
text
@C **********************************************************************
C
C  FINDRIDGES     NEW                              AUG 13 ArDean Leith
C                 ADDED RIDGE SEPERATION           OCT 16 ArDean Leith
C                 ADDED AVGLOC                     NOV 16 ArDean Leith
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2016 Health Research Inc.,                          *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C FINDRIDGES(RIDGESONLY,AVGLOC)
C
C PURPOSE:   FIND RIDGES AND VALLEYS RUNNING UP/DOWN AN IMAGE.
C            USUALLY USED WITH POWER SPECTRA CONVERTED TO POLAR VIEW
C            WITH 'PO R'
C
C PARAMETERS:  RIDGESONLY    FINDS FIRST 2 RIDGES ACROSS IMAGE FOR
C                            RAY HAVING GREATEST FIRST RIDGE DISTANCE
C
C OPERATIONS: 'RI R'  & 'RI RV'
C
C **********************************************************************

        SUBROUTINE FINDRIDGES(RIDGESONLY,AVGLOC)

        IMPLICIT NONE
        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC' 
 
        LOGICAL               :: RIDGESONLY,AVGLOC

        CHARACTER(LEN=MAXNAM) :: FILNAM,DOCNAM
        CHARACTER(LEN=84)     :: FORMOUT
        CHARACTER(LEN=96)     :: COMMENT

        REAL, ALLOCATABLE     :: BUF(:,:)
        REAL, ALLOCATABLE     :: CURVE(:)

        REAL                  :: DLIST(9)
        INTEGER               :: IRAY_SHORT,IRAY_LONG
        INTEGER               :: MAXIM,ITYPE,NX,NY,NZ,IRTFLG,IER,NLET
        INTEGER               :: NA,NR,IROW,ISEL,NSUM,N1,N2,J,I,MIND
        REAL                  :: ANGLE_L,ANGLE_S
        REAL                  :: RADRIDGEAVG1,RADRIDGEAVG2,RADRIDGEAVG3
        REAL                  :: RADVALAVG1,RADVALAVG2
        INTEGER               :: IRADVAL1,IRADVAL2,NAVG
        INTEGER               :: IRADRIDGESHORT,IRADRIDGELONG
        INTEGER               :: IASTIG,NMIN,NMAX,NSEPER,ISEP
        INTEGER               :: IRADRIDGEMAX,IRADRIDGEMIN,IRADRIDGE
        INTEGER               :: IRADRIDGEMAX2,IRADRIDGE2,NOT_USED
        INTEGER               :: IRADRIDGEMAX3,IRADRIDGE3
        REAL                  :: VALRIDG 

        LOGICAL               :: ADDEXT,GETNAME,ISOLD
        LOGICAL               :: APPEND,MESSAGE,NEWFILE
        INTEGER               :: LUNDOCNO,NLETD,KEY,NDIGITS
 
        INTEGER, PARAMETER    :: NUMMINS = 6!5 ! MAX NUMBER OF VALLEYS
        INTEGER, PARAMETER    :: NUMMAXS = 6!5 ! MAX NUMBER OF RIDGES

        INTEGER               :: LOCVALLEY(NUMMINS),LOCRIDGE(NUMMAXS)
        REAL                  :: VALVALLEY(NUMMINS),VALRIDGE(NUMMAXS)

        INTEGER, PARAMETER    :: LUNIN   = 20
        INTEGER, PARAMETER    :: LUNDOCN = 80

        CHARACTER(LEN=1)      :: NULL   = CHAR(0)

C       OPEN INPUT FILE
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNAM,LUNIN,'O',ITYPE,NX,NY,
     &              NZ,MAXIM,'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (NZ > 1)  THEN
           CALL ERRT(101,'DOES NOT WORK ON VOLUMES',IER)
           RETURN
        ENDIF

        ALLOCATE (BUF(NX,NY),
     &            CURVE(NX), 
     &            STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'FINDRIDGES; BUF, CURVE',NX*NY + NX)
           GOTO 9999
        ENDIF

C       LOAD INPUT IMAGE
        CALL REDVOL(LUNIN,NX,NY, 1,1, BUF,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999
           
        ADDEXT  = .TRUE.
        GETNAME = .TRUE.
        ISOLD   = .FALSE.
        APPEND  = .TRUE.
        MESSAGE = .FALSE. 
        IRTFLG  = -8         ! NO IC USE

        CALL OPENDOC(DOCNAM,ADDEXT,NLETD,LUNDOCN,LUNDOCNO,GETNAME,
     &         'OUTPUT DOC',ISOLD,APPEND,MESSAGE,NEWFILE,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999


        NSEPER = 1
        NSUM   = 1
        CALL RDPRI2S(NSEPER,NSUM,NOT_USED,
     &             'SEPARATION, NUMBER OF SUMMED LINES',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        MIND   = 1
        KEY    = 1
        CALL RDPRI2S(MIND,KEY,NOT_USED,
     &             'MINIMUM DISTANCE, DOC FILE KEY',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999


        IF (AVGLOC) THEN
C        FIND AVERAGE LOCATIONS FOR RIDGES NOT MAXIMAL
C                    123456789 123456789 123456789 123456789 123456789 123456789
         COMMENT= 
     &   '  NUM,     Y,     ANG,   R1,    R2,    R3,    V2,    ' //
     &   'ASTIG,   SEP'
 
        ELSEIF (RIDGESONLY) THEN
C                    123456789 123456789 123456789 123456789 123456789 123456789
         COMMENT= 
     &   '  NUM,     Y,     ANG,   R1,    R2,    R3,    ASTIG,  SEP'

        ELSE
C                   123456789 123456789 123456789 123456789 123456789 123456789
          COMMENT= '  NUM,    YS,       ANG_S,        R_S,        '//
     &             'YL,       ANG_L,        R_L'
        ENDIF


        IF (KEY < 2) THEN
           !write(6,*) ' lundocno, comment:',lundocno,comment(1:40)
           CALL LUNDOCPUTCOM(LUNDOCNO,COMMENT(1:86),IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999
        ENDIF

C       FIND RIDGES & VALLEY LOCATIONS ALONG ALL RAYS ------------- 

        IRAY_LONG    = 0
        IRAY_SHORT   = 0
        IRADRIDGEMAX = 0
        IRADRIDGEMIN = HUGE(IRADRIDGEMIN)

        RADRIDGEAVG1 = 0.0
        RADRIDGEAVG2 = 0.0
        RADRIDGEAVG3 = 0.0
        RADVALAVG1   = 0.0
        NAVG         = 0

        DO IROW=1+2,NY-2  ! LOOP OVER ALL ROWS (SKIP 2 AT TOP & BOTTEM)

           IF (NSUM < 2) THEN
              CURVE = BUF(1:NX,IROW)
           ELSE
              N1 = IROW - NSUM/2
              IF (N1 < 3) THEN
                 N1 = 3
              ENDIF

              N2 = N1 + NSUM - 1
              IF (N2 > (NY - 2)) THEN
                 N2 = NY - 2
                 N1 = N2 - NSUM
              ENDIF
              CURVE = BUF(:, N1) 
              DO J = N1+1,N2
                 CURVE = CURVE + BUF(:, J)
              ENDDO
           ENDIF

           CALL FINDMINMAX(CURVE,NX,
     &             LOCVALLEY,LOCRIDGE, VALVALLEY,VALRIDGE,
     &             NUMMINS,NUMMAXS, NSEPER, NMIN,NMAX,IRTFLG)

           DO I = 1,NUMMAXS -1
C             FIND LONGEST AXIS OF CIRCLE RAY ---------------------------
              IRADRIDGE  = LOCRIDGE(I)    ! RADIUS AT FIRST  RIDGE
              IRADRIDGE2 = LOCRIDGE(I+1)  ! RADIUS AT SECOND RIDGE
              IRADRIDGE3 = LOCRIDGE(I+2)  ! RADIUS AT THIRD  RIDGE
              VALRIDG    = VALRIDGE(I)    ! VALUE  AT FIRST  RIDGE 
              IRADVAL1   = LOCVALLEY(I)   ! RADIUS AT FIRST  VALLEY
              IRADVAL2   = LOCVALLEY(I+1) ! RADIUS AT FIRST  VALLEY

              IF ( IRADRIDGE >= MIND ) EXIT
           ENDDO

C          FIND LONGEST DISTANCE TO RIDGE ----------------------------
           IF (IRADRIDGE > IRADRIDGEMAX) THEN
              IRAY_LONG     = IROW
              IRADRIDGEMAX  = IRADRIDGE
              IRADRIDGEMAX2 = IRADRIDGE2
              IRADRIDGEMAX3 = IRADRIDGE3
           ENDIF
   
C          FIND SHORTEST DISTANCE TO RIDGE ---------------------------
           IF (IRADRIDGE < IRADRIDGEMIN) THEN
              IRAY_SHORT   = IROW
              IRADRIDGEMIN = IRADRIDGE
           ENDIF

C          FIND AVERAGE DISTANCE TO RIDGE1 & 2 -----------------------
           RADRIDGEAVG1 = RADRIDGEAVG1 + IRADRIDGE
           RADRIDGEAVG2 = RADRIDGEAVG2 + IRADRIDGE2
           RADRIDGEAVG3 = RADRIDGEAVG3 + IRADRIDGE3
           RADVALAVG1   = RADVALAVG1   + IRADVAL1
           RADVALAVG2   = RADVALAVG2   + IRADVAL2
           NAVG         = NAVG + 1

        ENDDO

        ANGLE_S = 180.0 * FLOAT(IRAY_SHORT) / FLOAT(NY)
        ANGLE_L = 180.0 * FLOAT(IRAY_LONG)  / FLOAT(NY)
        IASTIG  = IRADRIDGEMAX  - IRADRIDGEMIN 
        ISEP    = IRADRIDGEMAX2 - IRADRIDGEMAX

        IF (AVGLOC) THEN
C          FIND AVERAGE LOCATIONS FOR RIDGES NOT MAXIMAL

           RADRIDGEAVG1 = RADRIDGEAVG1 / FLOAT(NAVG)
           RADRIDGEAVG2 = RADRIDGEAVG2 / FLOAT(NAVG)
           RADRIDGEAVG3 = RADRIDGEAVG3 / FLOAT(NAVG)
           RADVALAVG1   = RADVALAVG1   / FLOAT(NAVG)
           RADVALAVG2   = RADVALAVG2   / FLOAT(NAVG)

           WRITE(6,93) ' LONG  RIDGE Y:', IRAY_LONG,
     &                 '  ANG:',          ANGLE_L,
     &                 '  R1: ',          RADRIDGEAVG1,
     &                 '  R2: ',          RADRIDGEAVG2,
     &                 '  R3: ',          RADRIDGEAVG3,
     &                 '  V2: ',          RADVALAVG2,
     &                 '  ASTIG: ',       IASTIG,
     &                 '  SEP: ',         ISEP
93         FORMAT(1X, A,I6, A,F7.2, 4(A,F5.1),A,I5,A,I5) 


        ELSEIF (RIDGESONLY) THEN
C          FIND MAXIMAL LOCATIONS FOR RIDGES

           WRITE(6,92) ' LONG  RIDGE Y:', IRAY_LONG,
     &                 '  ANG:',          ANGLE_L,
     &                 '  R1: ',          IRADRIDGEMAX,
     &                 '  R2: ',          IRADRIDGEMAX2,
     &                 '  R3: ',          IRADRIDGEMAX3,
     &                 '  ASTIG: ',       IASTIG,
     &                 '  SEP: ',         ISEP
92         FORMAT(1X, A,I6, A,F7.2, A,I5, A,I5, A,I5, A,I5, A,I5) 

        ELSE
           WRITE(6,90) ' SHORT RIDGE Y:',IRAY_SHORT,
     &                 '   ANG:',        ANGLE_S,
     &                 '  DISTANCE: ',   IRADRIDGEMIN

           WRITE(6,90) ' LONG  RIDGE Y:',IRAY_LONG,
     &                 '   ANG:',        ANGLE_L,
     &                 '  DISTANCE: ',   IRADRIDGEMAX
90         FORMAT(1X, A,I6, A,F7.2, A,I5) 

           WRITE(6,91) ' ASTIGMATISM:', IASTIG
91         FORMAT(1X, A,I5) 
        ENDIF



        !CALL GETFILENUM(FILNAM,KEY,NDIGITS,.TRUE.,IRTFLG)

C       SAVE PARAMETERS
        IF (AVGLOC) THEN

           DLIST(1) = IRAY_LONG 
           DLIST(2) = ANGLE_L
           DLIST(3) = RADRIDGEAVG1
           DLIST(4) = RADRIDGEAVG2
           DLIST(5) = RADRIDGEAVG3
           DLIST(6) = RADVALAVG2

           DLIST(7) = IASTIG
           DLIST(8) = ISEP
           ISEL     = 8

C            123456789 123456789 123456789 123456789 123456789 123456789 
           FORMOUT  = 
     &     '(I7,1X,I2,1X,F5.0,2X,F6.2,4(1X,F6.0),3X,F6.0,1X,F6.0,)'

        ELSEIF (RIDGESONLY) THEN
           DLIST(1) = IRAY_LONG 
           DLIST(2) = ANGLE_L
           DLIST(3) = IRADRIDGEMAX
           DLIST(4) = IRADRIDGEMAX2
           DLIST(5) = IRADRIDGEMAX3

           DLIST(6) = IASTIG
           DLIST(7) = ISEP
           ISEL     = 7

C            123456789 123456789 123456789 123456789 123456789 123456789 
           FORMOUT  = 
     &     '(I7,1X,I2,1X,F5.0,2X,F6.2,3(1X,F6.0),3X,F6.0,1X,F6.0,)'
         ELSE
           DLIST(1) = IRAY_SHORT 
           DLIST(2) = ANGLE_S
           DLIST(3) = IRADRIDGEMIN
           DLIST(4) = IRAY_LONG
           DLIST(5) = ANGLE_L
           DLIST(6) = IRADRIDGEMAX

           DLIST(7) = IASTIG
           ISEL     = 7

C            123456789 123456789 123456789 123456789 123456789 123456789 
           FORMOUT  = 
     &     '(I7,1X,I2,1X,F5.0,3X,F6.2,1X,F8.3,1X,F5.0,3X,F6.2,1X,' //
     &     'F8.3,F5.0,F5.0)'
        ENDIF

        CALL REG_SET_NSELA(ISEL,DLIST,.TRUE.,IRTFLG)

        CALL LUNDOCWRTDATF(LUNDOCNO,KEY,DLIST,ISEL,FORMOUT,IRTFLG)
      !write(6,*) ' key,dlist,isel:',key,dlist,isel

9999    IF (ALLOCATED(BUF))     DEALLOCATE (BUF)
        IF (ALLOCATED(CURVE))   DEALLOCATE (CURVE)

        CLOSE(LUNIN)
        CLOSE(LUNDOCN) 
 
        END



C       --------------------- FINDMINMAX ------------------------
C       FIND VALLEYS & RIDGES LOCATIONS ALONG SPECIFIED CURVE


        SUBROUTINE FINDMINMAX(CURVE,N,
     &             LOCVALLEY,LOCRIDGE, VALVALLEY,VALRIDGE,
     &             NUMMINS,NUMMAXS,NSEPER, NMIN,NMAX,IRTFLG)

        IMPLICIT NONE
        INTEGER             :: N
        REAL                :: CURVE(N)
        INTEGER             :: NUMMINS,NUMMAXS,NSEPER

        INTEGER             :: LOCVALLEY(NUMMINS),LOCRIDGE(NUMMAXS)
        REAL                :: VALVALLEY(NUMMINS),VALRIDGE(NUMMAXS)
        INTEGER             :: NMIN,NMAX
        INTEGER             :: IRTFLG

        INTEGER             :: ILOC,ISEPER,N1,N2
        REAL                :: VAL,VTMP,CMAX,CMIN
        LOGICAL             :: WANTMIN,WANTMAX
        INTEGER             :: MAXL, MAXL_ARRAY(1)

        IRTFLG  = 0
        VAL     = CURVE(1)         ! VALUE AT ORIGIN

        NMIN    = 0
        NMAX    = 0

        WANTMIN = .TRUE.
        WANTMAX = .TRUE.

         DO ILOC = 2,N          ! LOOP ALONG THE CURVE
           VTMP = CURVE(ILOC)

           IF (VTMP < VAL) THEN
C             GOING DOWN
              IF (WANTMAX) THEN
C                FOUND A MAX (MAY BE AT INITIAL POINT)

                 IF (NMAX >= NUMMAXS) CYCLE 
 
                 IF (NSEPER > 1 .AND. NMAX > 0 .AND. ILOC < N) THEN
                    N1   = ILOC + 1
                    N2   = MIN(N, (ILOC + NSEPER))
                    CMAX = MAXVAL(CURVE(N1:N2)) 
                    IF (CMAX > VTMP) THEN
                       !VAL = VTMP  
                       CYCLE
                    ENDIF
                 ENDIF
 
                 NMAX           = NMAX + 1
                 LOCRIDGE(NMAX) = ILOC - 1  ! FOUND A RIDGE
                 VALRIDGE(NMAX) = VAL       ! VALUE AT RIDGE
                 WANTMAX        = .FALSE.
                 WANTMIN        = .TRUE.
              ENDIF
           ELSE
C             GOING UP
              IF (WANTMIN) THEN
C                FOUND A MIN (MAY BE AT INITIAL POINT)
                 IF (NMIN >= NUMMINS) CYCLE

                 IF (NSEPER > 1 .AND. NMIN > 0 .AND. ILOC < N) THEN
                    N1   = ILOC + 1
                    N2   = MIN(N, (ILOC + NSEPER))
                    CMIN = MINVAL(CURVE(N1:N2)) 
                    IF (CMIN < VTMP) THEN
                       !VAL = VTMP  
                       CYCLE
                    ENDIF
                 ENDIF

                 NMIN            = NMIN + 1
                 LOCVALLEY(NMIN) = ILOC - 1  ! FOUND A VALLEY
                 VALVALLEY(NMIN) = VAL    ! VALUE AT VALLEY
                 WANTMIN         = .FALSE.
                 WANTMAX         = .TRUE.
              ENDIF
           ENDIF

           IF (NMIN >= NUMMINS .AND. NMAX >= NUMMAXS) RETURN
                 
           VAL = VTMP  

           !write(6,'(a,i5,a,f7.2,a,L)')' R:',irad,' ',raymin,' ',gotmin
        ENDDO

        END









@


1.14
log
@avgloc added
@
text
@d63 2
a64 2
        REAL                  :: RADVALAVG1
        INTEGER               :: NAVG
d76 2
a77 2
        INTEGER, PARAMETER    :: NUMMINS = 5 ! MAX NUMBER OF VALLEYS
        INTEGER, PARAMETER    :: NUMMAXS = 5 ! MAX NUMBER OF RIDGES
d139 2
a140 1
     &   '  NUM,     Y,     ANG,   R1,    R2,    R3,    ASTIG,   SEP'
d200 6
a205 4
              IRADRIDGE  = LOCRIDGE(I)   ! RADIUS AT FIRST  RIDGE
              IRADRIDGE2 = LOCRIDGE(I+1) ! RADIUS AT SECOND RIDGE
              IRADRIDGE3 = LOCRIDGE(I+2) ! RADIUS AT THIRD  RIDGE
              VALRIDG    = VALRIDGE(I)   ! VALUE  AT FIRST  RIDGE 
d228 2
a229 1
           RADRIDGEAVG3 = RADRIDGEAVG3 + IRADRIDGE3
d245 2
a246 1
           RADRIDGEAVG3 = RADRIDGEAVG3 / FLOAT(NAVG)
d253 1
a253 1
     &                 '  V1: ',          RADVALAVG1,
d297 1
a297 1
           DLIST(6) = RADVALAVG1
@


1.13
log
@*** empty log message ***
@
text
@d5 2
d29 1
a29 1
C FINDRIDGES(RIDGESONLY)
d42 1
a42 1
        SUBROUTINE FINDRIDGES(RIDGESONLY)
d48 1
a48 1
        LOGICAL               :: RIDGESONLY
d62 3
d135 2
a136 1
        IF (RIDGESONLY) THEN
d139 6
a144 1
     &   '  NUM,     Y,     ANG,   R1,    R2,    R3,    ASTIG   SEP'
d166 6
d207 1
a207 1
C          FIND LONGEST DISTANCE TO RIDGE ---------------------------
d220 8
d235 21
a255 1
        IF (RIDGESONLY) THEN
d281 1
d285 18
a302 4
        DLIST(1) = IRAY_SHORT 
        DLIST(2) = ANGLE_S
        DLIST(3) = IRADRIDGEMIN
        IF (RIDGESONLY) THEN
@


1.12
log
@added r3 output and doc file comment
@
text
@d207 1
a207 1
        IASTIG  = IRADRIDGEMAX - IRADRIDGEMIN 
@


1.11
log
@added min distance question
@
text
@d3 2
a4 2
C  FINDRIDGES     NEW                              AUG 13 ARDEAN LEITH
C
a37 1
C
d49 1
a49 1
        CHARACTER(LEN=72)     :: FORMOUT
d55 1
a55 1
        REAL                  :: DLIST(8)
d61 1
a61 1
        INTEGER               :: IASTIG,NMIN,NMAX,NSEPER
d64 1
d132 2
a133 1
           COMMENT= '  NUM,     Y,     ANG,   R1,    R2,   ASTIG'
d184 1
d195 1
d208 1
d216 4
a219 2
     &                 '  ASTIG: ',       IASTIG
92         FORMAT(1X, A,I6, A,F7.2, A,I5, A,I5, A,I5) 
d247 1
d249 3
a251 2
           DLIST(5) = IASTIG
           ISEL     = 5
d255 1
a255 1
     &      '(I7,1X,I2,1X,F5.0,2X,F6.2,1X,F6.0,1X,F6.0,3X,F6.2,1X)'
@


1.10
log
@cosmetic
@
text
@d3 1
a3 1
C  FINDRIDGES     NEW                                 AUG 13 ARDEAN LEITH
d36 1
a36 1
C OPERATIONS: 'RI R'  & 'PO RV'
d59 1
a59 1
        INTEGER               :: NA,NR,IROW,ISEL,NSUM,N1,N2,J
d71 2
a72 2
        INTEGER, PARAMETER    :: NUMMINS = 3 
        INTEGER, PARAMETER    :: NUMMAXS = 3
d117 1
d119 8
a126 3
        NSEPER = 1
        CALL RDPRI3S(NSEPER,NSUM,KEY,NOT_USED,
     &             'SEPARATION, SUMMED LINES, DOC FILE KEY',IRTFLG)
d129 1
d135 3
a137 3
C                  123456789 123456789 123456789 123456789 123456789 123456789
        COMMENT= '  NUM,    YS,          ANG_S,        R_S,        '//
     &               'YL,          ANG_L,        R_L'
d142 1
a142 1
      !write(6,*) ' lundocno, comment:',lundocno,comment(1:40)
d177 7
a183 1
     &             3,3, NSEPER, NMIN,NMAX,IRTFLG)
d185 2
a186 4
C          FIND LONGEST AXIS OF CIRCLE RAY ---------------------------
           IRADRIDGE  = LOCRIDGE(2)   ! RADIUS AT FIRST RIDGE
           IRADRIDGE2 = LOCRIDGE(3)   ! RADIUS AT FIRST RIDGE
           VALRIDG    = VALRIDGE(2)   ! VALUE  AT FIRST RIDGE 
@


1.9
log
@doc file not saved bug
@
text
@d36 1
a36 1
C OPERATIONS: 'PO V'  & 'PO VR'
d120 1
a120 1
     &             'SEPERATION, SUMMED LINES, DOC FILE KEY',IRTFLG)
d210 2
a211 2
     &                    '   ANG:',        ANGLE_L,
     &                    '  DISTANCE: ',   IRADRIDGEMAX
@


1.8
log
@comments
@
text
@d69 1
a69 1
        INTEGER               :: LUNDOCN,LUNDOCNO,NLETD,KEY,NDIGITS
d77 2
a78 1
        INTEGER, PARAMETER    :: LUNIN  = 20
d124 2
a125 3
C                  123456789 123456789 123456789 123456789 123456789 123456789
        COMMENT= '  NUM,     Y,            ANG,        R1,        '//
     &               'R2,          ASTIG'
d135 1
d233 4
d247 5
a255 5
C        123456789 123456789 123456789 123456789 123456789 123456789 
        FORMOUT  = 
     &  '(I7,1X,I2,1X,F5.0,3X,F6.2,1X,F8.3,1X,F5.0,3X,F6.2,1X,' //
     &  'F8.3,F5.0,F5.0)'
C           123456789 123456789 123456789 123456789 123456789 123456789 1234
d257 1
@


1.7
log
@improved peak finding,  line summation, 'PO VR' added, rewrite
@
text
@d27 1
a27 1
C FINDRIDGES
d29 3
a31 1
C PURPOSE:   Find ridges and valleye running up/down an image.
d33 4
a36 1
C OPERATION: 'RO A'  & 'RO A R'
@


1.6
log
@split findridges out of to_rays.f
@
text
@d29 4
a32 1
C PURPOSE:   Find ridges and vallyes running up/down an image.
d36 1
a36 1
        SUBROUTINE FINDRIDGES
d42 2
d54 1
a54 1
        INTEGER               :: NA,NR,IROW
d57 1
a57 1
        INTEGER               :: IASTIG,NMIN,NMAX
d59 1
a75 1

d110 8
d119 14
a132 4
        COMMENT = '  NUM,     S,          ANG_S,        V_S,         '//
     &               'L,           ANG_L,        V_L'
        !CALL LUNDOCPUTCOM(LUNDOCNO,COMMENT(1:80),IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999
d141 1
a141 2
        !DO IROW=1,NY     ! LOOP OVER ALL ROWS 
        DO IROW=1+2,NY-2     ! LOOP OVER ALL ROWS (SKIP TOP & BOTTEM)
d143 18
a160 1
           CURVE = BUF(1:NX,IROW)
d164 1
a164 1
     &             3,3, NMIN,NMAX,IRTFLG)
d167 3
a169 2
           IRADRIDGE = LOCRIDGE(2)   ! RADIUS AT FIRST RIDGE
           VALRIDG   = VALRIDGE(2)   ! VALUE  AT FIRST RIDGE 
d173 3
a175 2
              IRAY_LONG    = IROW
              IRADRIDGEMAX = IRADRIDGE
d187 3
d191 16
a206 7
        WRITE(6,90) ' SHORT RIDGE Y:',IRAY_SHORT,
     &              '   ANG:',        ANGLE_S,
     &              '  DISTANCE: ',   IRADRIDGEMIN
        WRITE(6,90) ' LONG  RIDGE Y:',IRAY_LONG,
     &              '   ANG:',        ANGLE_L,
     &              '  DISTANCE: ',   IRADRIDGEMAX
90      FORMAT(1X, A,I6, A,F7.2, A,I5) 
d208 3
a210 1
        IASTIG = IRADRIDGEMAX - IRADRIDGEMIN 
a211 2
        WRITE(6,91) ' ASTIGMATISM:', IASTIG
91      FORMAT(1X, A,I5, A,ES10.3, A,I5) 
a213 1
        KEY = 9999
d219 15
d235 3
a237 3
        DLIST(4) = IRAY_LONG
        DLIST(5) = ANGLE_L
        DLIST(6) = IRADRIDGEMAX
d239 1
a239 2
        DLIST(7) = IASTIG
        CALL REG_SET_NSELA(7,DLIST,.TRUE.,IRTFLG)
d246 1
a246 1
        CALL LUNDOCWRTDATF(LUNDOCNO,KEY,DLIST,8,FORMOUT,IRTFLG)
d264 1
a264 1
     &             NUMMINS,NUMMAXS, NMIN,NMAX,IRTFLG)
d266 1
d269 1
a269 1
        INTEGER             :: NUMMINS,NUMMAXS
d276 2
a277 1
        REAL                :: VAL,VTMP
d279 1
d298 13
a310 3
                 IF (NMAX >= NUMMAXS) CYCLE  
                 NMAX         = NMAX + 1
   
d313 2
a314 2
                 WANTMAX      = .FALSE.
                 WANTMIN      = .TRUE.
d321 12
a332 1
                 NMIN         = NMIN + 1
d335 2
a336 2
                 WANTMIN      = .FALSE.
                 WANTMAX      = .TRUE.
@


1.5
log
@removed *SQRT(REAL(J) from product
@
text
@d3 1
a3 1
C  TO_RAYS     NEW                                 AUG 13 ARDEAN LEITH
d9 1
a9 1
C=* Copyright 1985-2014  Health Research Inc.,                         *
d27 1
a27 1
C TO_RAYS
d29 1
a29 2
C PURPOSE:  CREATE POLAR REPRESENTATION OF IMAGE WITH RAYS ALONG THE
C           X DIMENSION.
a31 128

        SUBROUTINE TO_RAYS

        IMPLICIT NONE
        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC' 
 
        CHARACTER(LEN=MAXNAM) :: FILNAM
        CHARACTER(LEN=72)     :: FORMOUT
        CHARACTER(LEN=96)     :: COMMENT

        REAL, ALLOCATABLE     :: BUF(:,:)
        REAL, ALLOCATABLE     :: OUT(:,:)

        CHARACTER(LEN=3)      :: MODE
        LOGICAL               :: HALFCIRC
        INTEGER               :: MAXIM,ITYPE,NX,NY,NZ,IRTFLG,IER,NLET
        INTEGER               :: NA,NRAYS,NR,IXC,IYC,I,J
        INTEGER               :: NRAD,NXP,NYP,IRAY,IRAD
        REAL                  :: PI,DFI,FI,XS,YS,VTMP,VMIN
        REAL                  :: UNUSED 
 
        INTEGER               :: NMIN,NMAX

        REAL                  :: quadri

        INTEGER, PARAMETER    :: LUNIN  = 20
        INTEGER, PARAMETER    :: LUNOUT = 21

        CHARACTER(LEN=1)      :: NULL   = CHAR(0)


C       GET NAME FOR INPUT FILE
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILNAM,LUNIN,'O',ITYPE,NX,NY,
     &              NZ,MAXIM,'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (NZ > 1)  THEN
           CALL ERRT(101,'DOES NOT WORK ON VOLUMES',IER)
           RETURN
        ENDIF

C       GET NAME FOR POLAR OUTPUT FILE
        CALL FILERD(FILNAM,NLET,NULL,'OUTPUT',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        CALL RDPRMC(MODE,NA,.TRUE.,
     &        'FULL OR HALF CIRCLE (F/H)',NULL,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        HALFCIRC  = (INDEX(MODE,'H') > 0)
        PI        = 4*DATAN(1.0D0)
        
C       FIND DEFAULT LENGTH OF RAYS = RADIUS = X
        NRAD = MIN(((NX-1)/2), ((NY-1)/2))  ! LENGTH OF RAY = X SIZE

C       FIND DEFAULT NUMBER OF RAYS = CIRCUMFERANCE = Y
        NRAYS = INT(2*PI*NRAD)                ! LEN. OF CIR = # OF RAYS
        IF (HALFCIRC) NRAYS = INT(PI*NRAD)    ! USED FOR POWER SPECTRA

        WRITE(NOUT,99)'  DEFAULT, RADIUS: ',NRAD,'   RAYS:',NRAYS
 99     FORMAT(A,I0,A,I0)

        CALL RDPRI2S(NRAD,NRAYS,UNUSED,
     &              'RADIUS & NUMBER OF RAYS',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        NXP  = NRAD + 1                       ! X SIZE
        NYP  = NRAYS                          ! Y SIZE

        DFI  = 2 * PI / NYP                   ! RADIANS 
        IF (HALFCIRC) DFI = PI / NYP

C       OPEN OUTPUT FILE
        MAXIM = 0
        ITYPE = 1
        CALL OPFILEC(0,.FALSE.,FILNAM,LUNOUT,'N',ITYPE,NXP,NYP,
     &               1,MAXIM,'RAY',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        ALLOCATE (BUF(NX,NY),
     &            OUT(NXP,NYP),         ! NRAD + 1 x NRAYS
     &            STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'TO_RAYS; BUF, OUT',NX*NY + NXP*NYP + 2*NRAYS)
           GOTO 9999
        ENDIF

C       LOAD INPUT IMAGE
        CALL REDVOL(LUNIN,NX,NY, 1,1, BUF,IRTFLG)
           
        IXC     = NX/2+1     ! X CENTER
        IYC     = NY/2+1

        !write(6,*) ' Center:(',ixc,iyc,')  rad,rays:',nrad,nrays

C       CREATE POLAR REPRESENTATION
C       NOTE: ALGORITHM IS DEPENDENT ON CIRCULAR CLOSURE IN QUADRI!
        DO  J=0,NRAD       ! OVER ALL RADII
          DO I=1,NRAYS     ! OVER ALL POINTS ON CIRCLE 

             FI         = (I-1)   * DFI
             XS         = COS(FI) * J
             YS         = SIN(FI) * J

             !VTMP      = QUADRI(XS+IXC,YS+IYC,NX,NY,BUF)!*SQRT(REAL(J))
             VTMP       = QUADRI(XS+IXC,YS+IYC,NX,NY,BUF)

             OUT(J+1,I) = VTMP

             !if(i == 1) write(6,*) j,' : ',out(j+1,1)     
          ENDDO
        ENDDO


C       OUTPUT IMAGE -------------------------------------
        CALL WRTVOL(LUNOUT,NXP,NYP, 1,1, OUT,IRTFLG)
         
9999    IF (ALLOCATED(BUF))     DEALLOCATE (BUF)
        IF (ALLOCATED(OUT))     DEALLOCATE (OUT)

        CLOSE(LUNIN)
        CLOSE(LUNOUT) 
 
        END

C       --------------------- FINDRIDGES ------------------------
@


1.4
log
@bad ending , in to_rays.f
format statement
@
text
@d139 3
a141 1
             VTMP       = QUADRI(XS+IXC,YS+IYC,NX,NY,BUF)*SQRT(REAL(J))
d143 2
a144 1
                
d148 1
a317 5





@


1.3
log
@added 'PO A' seperate oper.
@
text
@d283 1
a283 1
91      FORMAT(1X, A,I5, A,ES10.3, A,I5,) 
@


1.2
log
@version using radius 43 sampling only
@
text
@d40 1
a40 1
        CHARACTER(LEN=MAXNAM) :: FILNAM,PROFILE,DOCNAM
a45 3
        REAL, ALLOCATABLE     :: CURVE(:)
        REAL, ALLOCATABLE     :: RINGSUM(:)
        INTEGER, ALLOCATABLE  :: LOCMAX1(:)
a46 5
        REAL                  :: DLIST(8)
        INTEGER               :: LOCMAX(1)
        INTEGER               :: LOCVALAVG(1)
        INTEGER               :: IRAY_SHORT,IRAY_LONG
        INTEGER               :: MINRAD_OF_CIR,MAXRAD_OF_CIR
d51 3
a53 22
        INTEGER               :: NRAD,NXP,NYP,IRAY,IRAD,IOFF90
        REAL                  :: PI,DFI,FI,XS,YS,VTMP,VMIN,FMAXDIF
        REAL                  :: RAYMIN,RAYMAX,ANGLE_L,ANGLE_S,VMAX
        LOGICAL               :: GOTMIN,GOTMAX,WANTLINES
        INTEGER               :: IRADVALLEYSHORT,IRADVALLEYLONG
        INTEGER               :: IRADRIDGELONG,  IRADVALLEY2LONG
        INTEGER               :: IRADRIDGESHORT, IRADVALLEY2SHORT 
        REAL                  :: VALVALLEYSHORT, VALVALLEYLONG
        REAL                  :: VALRIDGELONG,   VALRIDGESHORT
        REAL                  :: VALLONG,        VALSHORT
        REAL                  :: VALVALLEY2SHORT,VALVALLEY2LONG 
        INTEGER               :: IASTIG,IASTIGP

        integer               :: locvalmin43(1),locvalmax43(1)
        integer               :: IR_PROFILE,nlet1
        integer               :: IRAY_LOW43,IRAY_HI43
        real                  :: VALLOW43,VALHI43,astig,ang,unused
        logical               :: savdoc

        LOGICAL               :: ADDEXT,GETNAME,ISOLD
        LOGICAL               :: APPEND,MESSAGE,NEWFILE
        INTEGER               :: LUNDOCNO,NLETD,KEY,NDIGITS
a54 5
        INTEGER, PARAMETER    :: NUMMINS = 2 
        INTEGER, PARAMETER    :: NUMMAXS = 2

        INTEGER               :: LOCVALLEY(NUMMINS),LOCRIDGE(NUMMAXS)
        REAL                  :: VALVALLEY(NUMMINS),VALRIDGE(NUMMAXS)
d59 2
a60 4
        INTEGER, PARAMETER    :: LUNIN   = 20
        INTEGER, PARAMETER    :: LUNOUT  = 21
        INTEGER, PARAMETER    :: LUNPRO  = 22
        INTEGER, PARAMETER    :: LUNDOCN = 80
d77 1
a77 5
        CALL FILERD(FILNAM,NLET,NULL,'POLAR OUTPUT',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

C       GET NAME FOR PROFILE OUTPUT FILE
        CALL FILERD(PROFILE,NLET1,NULL,'PROFILE OUTPUT',IRTFLG)
d81 1
a81 1
     &              'FULL OR HALF CIRCLE (F/H)',NULL,IRTFLG)
d85 3
a87 4
        WANTLINES = (INDEX(MODE,'L') > 0)
	PI        = 4*DATAN(1.0D0)

C       FIND DEFAULT LENGTH OF RAYS = RADIUS = Y
d90 1
a90 1
C       FIND DEFAULT NUMBER OF RAYS = CIRCUMFERANCE = X
d92 1
a92 1
	IF (HALFCIRC) NRAYS = INT(PI*NRAD)    ! USED FOR POWER SPECTRA
d97 2
a98 7
        IR_PROFILE = 43        ! DEFAULT PROFILE RADIUS
        IF (IR_PROFILE > NRAD) THEN 
            IR_PROFILE = NRAD / 2   ! FALLBACK DEFAULT
        ENDIF

        CALL RDPRI2S(NRAD,NRAYS,IR_PROFILE,UNUSED,
     &              'RADIUS, NUMBER OF RAYS, & PROFILE RADIUS',IRTFLG)
a99 4
        IF (IR_PROFILE > NRAD) THEN 
           CALL ERRT(102,'PROFILE RADIUS > IMAGE SIZE',NRAD)
           GOTO 9999
        ENDIF
d105 1
a105 3
	IF (HALFCIRC) DFI = PI / NYP

        !write(6,*) '  pi:',pi,'rad:',nrad,' dfi:',dfi
d109 1
a109 1
	ITYPE = 1
a113 7
C       OPEN PROFILE OUTPUT FILE
        MAXIM = 0
	ITYPE = 1
        CALL OPFILEC(0,.FALSE.,PROFILE,LUNPRO,'N',ITYPE,NYP,1,
     &               1,MAXIM,' ',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

a115 3
     &            RINGSUM(NRAYS), 
     &            LOCMAX1(NRAYS), 
     &            CURVE(NYP), 
a121 1

d125 2
a126 3
        RINGSUM = 0.0
	IXC     = NX/2+1     ! X CENTER
	IYC     = NY/2+1
d132 2
d135 18
a152 60
        !j    = 0
        !i    = 1
        !FI   = (I-1)   * DFI
        !XS   = COS(FI) * J
        !YS   = SIN(FI) * J
        !VTMP = QUADRI(XS+IXC,YS+IYC,NX,NY,BUF)
        !write(6,*) 'buf(129+42,129):',buf(129+42,129)
        !write(6,*) 'buf(129-42,129):',buf(129-42,129)
        !write(6,*) 'buf(129+1,129):',buf(129+1,129)
        !write(6,*) 'buf(129-1,129):',buf(129-1,129)


	DO  J=0, NRAD       ! OVER ALL RADII
	  DO I=1,NRAYS      ! NRAYS     ! OVER ALL POINTS ON CIRCLE 

	     FI         = (I-1)   * DFI
	     XS         = COS(FI) * J
	     YS         = SIN(FI) * J

             !VTMP      = QUADRI(XS+IXC,YS+IYC,NX,NY,BUF)*SQRT(REAL(J))
             VTMP       = QUADRI(XS+IXC,YS+IYC,NX,NY,BUF)
	     OUT(J+1,I) = VTMP
             !write(6,*) j,i,xs+ixc,ys+iyc,vtmp
             !if ((j+1) == 43)write(6,*) j,i,xs+ixc,ys+iyc,vtmp 

             RINGSUM(I) = RINGSUM(I) + VTMP   ! FOR ROTATIONAL AVG.
	  ENDDO
	ENDDO
        !write(6,*) j,i,xs+ixc, ys+iyc, vtmp
        !write(6,*) ' fi:',fi, '  nyp:',nyp
               
C       FIND VALUES FOR LINE OVERLAYS
        VMIN = MINVAL(OUT)                     ! MINUMUM OF IMAGE
        VMAX = MAXVAL(OUT)                     ! MAXIMUM OF IMAGE

C       FIND LONGEST AXIS OF CIRCLE RAY ---------------------------

C       FIND AVERAGE FOR EACH RING USING ARRAY OP
        RINGSUM = RINGSUM / NRAYS     ! AVERAGE FOR EACH RING
  
C       FIND LOCATION OF HIGHEST RAY AVERAGE = LONGEST AXIS OF 'CIRCLE' 
        LOCVALAVG = MAXLOC(RINGSUM)  ! RETURNS ARRAY OF LENGTH: 1
        IRAY_LONG = LOCVALAVG(1)

        !write(6,'(1x,a,i5)') ' Longest axis at ray: ',iray_long

C       FIND LONGEST AXIS ------------- 

        CURVE = OUT(IR_PROFILE,1:NYP)

        !write(6,*) ' curve:',curve(1),curve(nyp)

        LOCVALMIN43 = MINLOC(CURVE)    ! RETURNS ARRAY OF LENGTH: 1
        LOCVALMAX43 = MAXLOC(CURVE)    ! RETURNS ARRAY OF LENGTH: 1
        IRAY_LOW43  = LOCVALMIN43(1)
        IRAY_HI43   = LOCVALMAX43(1)
        VALLOW43    = CURVE(IRAY_LOW43)
        VALHI43     = CURVE(IRAY_HI43)
        ASTIG       = VALHI43 - VALLOW43  
        IASTIG      = ASTIG + 0.5 
d154 36
a189 7
	IF (HALFCIRC) THEN    ! USED FOR POWER SPECTRA
          ANGLE_L = 180.0 * FLOAT(IRAY_HI43  - 1) / FLOAT(NRAYS)
          ANGLE_S = 180.0 * FLOAT(IRAY_LOW43 - 1) / FLOAT(NRAYS)
        ELSE
          ANGLE_L = 360.0 * FLOAT(IRAY_HI43  - 1) / FLOAT(NRAYS)
          ANGLE_S = 360.0 * FLOAT(IRAY_LOW43 - 1) / FLOAT(NRAYS)
        ENDIF
d191 1
a191 1
        ANG = ANGLE_S
d193 1
a193 11
        WRITE(6,90) ' '
        WRITE(6,90) ' MAX:',      IRAY_LONG,
     &              '   SHORT:',  IRAY_LOW43,
     &              '   LONG:',   IRAY_HI43,
     &              '   ANG:',    ANG,
     &              '   ASTIG:',  ASTIG
90      FORMAT(1X, A, I5, A,I5, A,I5, A,F7.2, A,F6.2) 

        IF (WANTLINES) THEN
C          !DRAW AXIS OF PROFILE  
           OUT(IR_PROFILE,:) = VMIN
a194 3
C          DRAW LONGEST AXIS  
           OUT(:,IRAY_HI43) = VMAX
        ENDIF
d196 5
a200 2
C       OUTPUT IMAGE
        CALL WRTVOL(LUNOUT,NXP,NYP, 1,1, OUT,IRTFLG)
d202 4
a205 2
C       OUTPUT PROFILE IMAGE
        CALL WRTVOL(LUNPRO,NYP,1, 1,1, CURVE,IRTFLG)
d207 7
a213 9
C       SAVE PARAMETERS
        DLIST(1) = IRAY_LOW43
        DLIST(2) = VALLOW43
        DLIST(3) = IRAY_HI43
        DLIST(4) = VALHI43
        DLIST(5) = ANG          
        DLIST(6) = ASTIG
        DLIST(7) = IRAY_LONG
        CALL REG_SET_NSELA(7,DLIST,.TRUE.,IRTFLG)
d215 4
d227 18
a244 2
     &      'OUTPUT DOC',ISOLD,APPEND,MESSAGE,NEWFILE,IRTFLG)
        IF (IRTFLG > 0) GOTO 9999
d246 1
a246 2
        SAVDOC = (IRTFLG == 0)
        IF (SAVDOC) THEN
d248 58
a305 15
C                  123456789 123456789 123456789 123456789 123456789 123456789
           COMMENT='  NUM,     S,          ANG_S,        V_S,       '//
     &            '  L,           ANG_L,        V_L'
           !CALL LUNDOCPUTCOM(LUNDOCNO,COMMENT(1:80),IRTFLG)

C          SET KEY NUMBER == IMAGE NUMBER
!           CALL GETFILENUM(FILNAM,KEY,NDIGITS,.TRUE.,IRTFLG)
           KEY = 999

           FORMOUT  = 
     &      '(I7,1X,I2,1X,F5.0,3X,F6.3,2X,F5.0,1X,F6.3,3X,F6.2,1X,'//
     &      'F8.3,2X,F5.0)'
C            123456789 123456789 123456789 123456789 123456789 123456789 1234
           CALL LUNDOCWRTDATF(LUNDOCNO,KEY,DLIST,7,FORMOUT,IRTFLG)
        ENDIF
a307 3
        IF (ALLOCATED(OUT))     DEALLOCATE (OUT)
        IF (ALLOCATED(RINGSUM)) DEALLOCATE (RINGSUM)
        IF (ALLOCATED(LOCMAX1)) DEALLOCATE (LOCMAX1)
a310 1
        CLOSE(LUNOUT) 
a311 1
        CLOSE(LUNPRO) 
d318 4
d388 6
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
C             NEW                                  AUG 13 ARDEAN LEITH
d9 1
a9 1
C=* Copyright 1985-2013  Health Research Inc.,                         *
d27 2
d40 3
a42 1
        CHARACTER(LEN=MAXNAM) :: FILNAM
d50 1
d68 1
d70 11
a80 1
        INTEGER               :: IASTIG,IASTIGMIN
d91 4
a94 2
        INTEGER, PARAMETER    :: LUNIN  = 20
        INTEGER, PARAMETER    :: LUNOUT = 21
d111 5
a115 1
        CALL FILERD(FILNAM,NLET,NULL,'OUTPUT',IRTFLG)
d125 2
a126 2
        
C       FIND LENGTH OF RAYS = RADIUS = Y
d129 1
a129 1
C       FIND TOTAL NUMBER OF RAYS = CIRCUMFERANCE = X
d131 17
a147 1
	IF (HALFCIRC) NRAYS = INT(PI*NRAD)    ! USED FOR POWER SPECTRUMS
d152 1
a152 1
        DFI  = 2 * PI / NYP
d155 2
d164 7
d175 1
a175 1
     &            CURVE(NXP), 
d194 15
a208 2
	DO  J=0,NRAD       ! OVER ALL RADII
	  DO I=1,NRAYS     ! OVER ALL POINTS ON CIRCLE 
d214 2
a215 1
             VTMP       = QUADRI(XS+IXC,YS+IYC,NX,NY,BUF)*SQRT(REAL(J))
d217 3
a219 1
                
d223 3
a225 1

d239 1
a239 1
        !write(6,'(1x,a,i5)') 'longest ray axis at ray: ',iray_long
d241 1
a241 1
C       FIND RIDGES & VALLEY LOCATIONS ALONG LONGEST AXIS ------------- 
d243 1
a243 2
        IRAY  = IRAY_LONG
        CURVE = OUT(1:NXP,IRAY)
d245 14
a258 13
        CALL FINDMINMAX(CURVE,NXP,
     &             LOCVALLEY,LOCRIDGE, VALVALLEY,VALRIDGE,
     &             2,2, NMIN,NMAX,IRTFLG)

        IRADRIDGELONG  = LOCRIDGE(1)
        VALRIDGELONG   = VALRIDGE(1)   ! VALUE  AT VALLEY MAX
        IRADVALLEYLONG = LOCVALLEY(1)
        VALVALLEYLONG  = VALVALLEY(1)   ! VALUE  AT VALLEY MAX

        IF (NMIN < 2) THEN
           WRITE (6,*) ' ONLY one min: ',nmin
           IRADVALLEY2LONG = 0
           VALVALLEY2LONG  = 0   ! VALUE  AT VALLEY MAX
d260 2
a261 4
           IRADVALLEY2LONG = LOCVALLEY(2)
           VALVALLEY2LONG  = VALVALLEY(2)   ! VALUE  AT VALLEY MAX

           !WRITE(6,'(A,i0)') ' IRADVALLEYLONG: ',IRADVALLEYLONG
d264 1
a264 3
        MAXRAD_OF_CIR  = LOCRIDGE(1)
        VALRIDGELONG   = VALRIDGE(1)
        !WRITE(6,'(A,i0)') ' MAXRAD_OF_CIR:  ',MAXRAD_OF_CIR
d266 7
a272 2
   
        ANGLE_L = 360.0 * FLOAT(IRAY_LONG) / FLOAT(NRAYS)
d274 3
a276 27
        WRITE(6,90) ' LONGEST  AXIS RAY:',IRAY_LONG,
     &              '   ANG:',            ANGLE_L,
     &              '   MAX:',            VALRIDGELONG,
     &              '  AT RADIUS: ',      MAXRAD_OF_CIR
90      FORMAT(1X, A,I6, A,F7.2, A,ES10.3, A,I5) 



C       FIND RAY FOR SHORTEST AXIS OF CIRCLE ------------------
        IOFF90     = NYP / 2
        IRAY_SHORT = IRAY_LONG + IOFF90
        IF (IRAY_SHORT > NYP) IRAY_SHORT = IRAY_LONG - IOFF90 

        !~=write(6,'(1x,a,i5)') 'shortest axis at ray:    ',iray_short

C       FIND RIDGES & VALLEY LOCATIONS ALONG SHORTEST AXIS 
        IRAY  = IRAY_SHORT
        CURVE = OUT(1:NXP,IRAY)

        CALL FINDMINMAX(CURVE,NXP,
     &             LOCVALLEY,LOCRIDGE, VALVALLEY,VALRIDGE,
     &             2,2, NMIN,NMAX,IRTFLG)

        IRADRIDGESHORT  = LOCRIDGE(1)
        VALRIDGESHORT   = VALRIDGE(1)   ! VALUE  AT VALLEY MAX
        IRADVALLEYSHORT = LOCVALLEY(1)
        VALVALLEYSHORT  = VALVALLEY(1)   ! VALUE  AT VALLEY MAX
d278 2
a279 9
        IF (NMIN < 2) THEN
           WRITE (6,*) ' ONLY one min: ',nmin
           IRADVALLEY2SHORT = 0
           VALVALLEY2SHORT  = 0   ! VALUE  AT VALLEY MAX
        ELSE
           IRADVALLEY2SHORT = LOCVALLEY(2)
           VALVALLEY2SHORT  = VALVALLEY(2)   ! VALUE  AT VALLEY MAX

           !WRITE(6,'(A,i0)') ' IRADVALLEYLONG: ',IRADVALLEYLONG
d282 2
a283 26
C       FIND  RIDGE LOCATION ALONG SHORTEST AXIS
        MINRAD_OF_CIR = LOCRIDGE(1)
        VALRIDGESHORT = VALRIDGE(1)     ! VALUE 
        !WRITE(6,'(A,i0)') ' MINRAD_OF_CIR:  ',LOCRIDGE(2)

        ANGLE_S = 360.0 * FLOAT(IRAY_SHORT) / FLOAT(NRAYS)

        WRITE(6,90) ' SHORTEST AXIS RAY:',IRAY_SHORT,
     &              '   ANG:',            ANGLE_S,
     &              '   MAX:',            VALRIDGESHORT,
     &              '  AT RADIUS: ',      MINRAD_OF_CIR

        FMAXDIF    = RAYMAX - RAYMIN 
        IASTIG     = MAXRAD_OF_CIR  - MINRAD_OF_CIR
        IASTIGMIN  = IRADVALLEYLONG - IRADVALLEYSHORT
        WRITE(6,91) ' ASTIG:  ',IASTIG,
     &              '  MAXDIF: ',FMAXDIF,
     &              '  ASTIG2:  ',IASTIGMIN
91      FORMAT(1X, A,I5, A,ES10.3, A,I5,) 

        IF (WANTLINES) THEN
C          DRAW LONGEST AXIS OF CIRCLE RAY  
           OUT(:,IRAY_LONG)  = VMIN

C          DRAW SHORTEST AXIS OF CIRCLE RAY  
           !OUT(:,IRAY_SHORT) = VMIN
d285 2
a286 2
C          DRAW FIRST VALLEY FOR LONGEST AXIS  
           OUT(IRADRIDGELONG,:) = VMIN
d288 38
a325 2
C          DRAW FIRST VALLEY FOR SHORTEST AXIS  
           OUT(IRADRIDGESHORT,:) = VMIN
a327 3
C       OUTPUT IMAGE
        CALL WRTVOL(LUNOUT,NXP,NYP, 1,1, OUT,IRTFLG)

d332 1
d336 2
@
