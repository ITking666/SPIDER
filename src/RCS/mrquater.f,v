head	1.14;
access;
symbols
	healthdept_2018:1.14
	pre_getangas:1.12
	GPL2010:1.12
	pre_GPL2010:1.11
	pre_var_equation:1.11
	pre_fftwrings:1.11
	pre_opfiles:1.11
	src:1.11
	best-code:1.11
	x-named-regs:1.11
	x:1.11
	v13-00:1.11
	pre_GPL:1.10
	prec_CA:1.10
	noindx:1.10
	Bproc:1.8
	oct21:1.5
	last77:1.5;
locks; strict;
comment	@c @;


1.14
date	2018.10.03.14.34.10;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2014.02.19.13.50.28;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2010.06.24.13.26.16;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.17.20.56.12;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.12.19.20.32.36;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.17.13.13.53;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.12.07.16.31.01;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.11.23.22.45.30;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	99.11.10.23.09.39;	author yuchen;	state Exp;
branches;
next	1.5;

1.5
date	97.10.10.17.48.06;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.10.10.15.47.16;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.10.04.18.43.07;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.07.46;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.29;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.14
log
@email_health_dept
@
text
@
C ++********************************************************************
C                                                                      
C   MRQUATER                                                            
C          PROMPTS & DOC FILE HEADERS IMPROVED   FEB 2014 ARDEAN LEITH                                                                *
C                                                                    
C                                                                      
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                  
C   MRQUATER                                                            
C                                                                
C   PURPOSE: COMPUTES ROTATION MATRIX WHICH TRANSFORMS
C            THE POINTS OF IPT ONTO THE POINTS IN RPT.
C
C   USES UNIT QUATERIONS. THEORY FOUND IN APRIL 1987 J.OPT.SOC.AM.A
C     PP 629-642 BY BERNOLD K.P. HORN
C
C   ALL THE POINTS TO BE USED MUST BE FOUND IN BOTH VIEWS.
C
C   PARAMETERS:
C           RPT(3,LS) = COORDS OF POINTS IN REFERENCE VIEW
C           VPT(3,LS) = COORDS OF POINTS IN VIEW TO BE ALIGNED
C                       COORDS SHOULD BE CENTERED ABOUT THE CENTER 
C                       OF MASS OF THE POINTS USED.
C           NTPT      = NUMBER OF POINTS
C           LS        = RPT & VPT DIMENSION
C
C   OUTPUT: ROT(3,3) = ROTATIONAL MATRIX TO MATCH VPT TO RPT
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

      SUBROUTINE MRQUATER(RPT, VPT, ROT, NTPT, LS)

      INCLUDE     'CMBLOCK.INC'

      DIMENSION ROT(3,3), QUAT(4,1), EVAL(1),
     &         S(3,3), TRIX(4,4), RPT(3,LS), VPT(3,LS)

C     TRIX IS MATRIX TO FIND QUATERION (QUAT)

C     SUM UP PRODUCTS
      DO   J = 1,3
        DO   M = 1,3
          S(M,J) = 0.0
          DO   I = 1,NTPT
  	      S(M,J) = S(M,J)+VPT(M,I)*RPT(J,I)
	  ENDDO
	ENDDO
      ENDDO
C
      TRIX(1,1) = S(1,1)+S(2,2)+S(3,3)
      TRIX(1,2) = S(2,3)-S(3,2)
      TRIX(1,3) = S(3,1)-S(1,3)
      TRIX(1,4) = S(1,2)-S(2,1)
      TRIX(2,1) = TRIX(1,2)
      TRIX(2,2) = S(1,1)-S(2,2)-S(3,3)
      TRIX(2,3) = S(1,2)+S(2,1)
      TRIX(2,4) = S(3,1)+S(1,3)
      TRIX(3,1) = TRIX(1,3)
      TRIX(3,2) = TRIX(2,3)
      TRIX(3,3) = -S(1,1)+S(2,2)-S(3,3)
      TRIX(3,4) = S(2,3)+S(3,2)
      TRIX(4,1) = TRIX(1,4)
      TRIX(4,2) = TRIX(2,4)
      TRIX(4,3) = TRIX(3,4)
      TRIX(4,4) = -S(1,1)-S(2,2)+S(3,3)

      CALL MREIGEN (TRIX,EVAL,QUAT,KODE)

      IF (KODE .NE. 0) THEN
         WRITE(NOUT,250)KODE
 250     FORMAT('  POOR FIT: IVIEW# ',I3,',    KODE= ',I3)

         WRITE(NDAT,260)(QUAT(J,1),J=1,4)
 260     FORMAT('  QUAT:  ( ',F10.7,2X,F10.7,2X,F10.7,2X,F10.7,' )' )
      ENDIF

C     INSURE IT IS A UNIT QUATERION:
      QLNG1=(QUAT(1,1)**2 + QUAT(2,1)**2 + QUAT(3,1)**2 + QUAT(4,1)**2)
      QLNG2     = SQRT(QLNG1)
      QUAT(1,1) = QUAT(1,1)/QLNG2
      QUAT(2,1) = QUAT(2,1)/QLNG2
      QUAT(3,1) = QUAT(3,1)/QLNG2
      QUAT(4,1) = QUAT(4,1)/QLNG2
C
      ROT(1,1) = QUAT(1,1)**2+QUAT(2,1)**2-QUAT(3,1)**2
     &           -QUAT(4,1)**2
      ROT(1,2) = 2*(QUAT(2,1)*QUAT(3,1)-QUAT(1,1)*QUAT(4,1))
      ROT(1,3) = 2*(QUAT(2,1)*QUAT(4,1)+QUAT(1,1)*QUAT(3,1))
      ROT(2,1) = 2*(QUAT(3,1)*QUAT(2,1)+QUAT(1,1)*QUAT(4,1))
      ROT(2,2) = QUAT(1,1)**2-QUAT(2,1)**2+QUAT(3,1)**2
     &           -QUAT(4,1)**2
      ROT(2,3) = 2*(QUAT(3,1)*QUAT(4,1)-QUAT(1,1)*QUAT(2,1))
      ROT(3,1) = 2*(QUAT(4,1)*QUAT(2,1)-QUAT(1,1)*QUAT(3,1))
      ROT(3,2) = 2*(QUAT(4,1)*QUAT(3,1)+QUAT(1,1)*QUAT(2,1))
      ROT(3,3) = QUAT(1,1)**2-QUAT(2,1)**2-QUAT(3,1)**2
     &            +QUAT(4,1)**2
      END
@


1.13
log
@PROMPTS & DOC FILE HEADERS & lundoc
@
text
@d14 1
a14 1
C=* Email: spider@@wadsworth.org                                        *
@


1.12
log
@GPL_2010
@
text
@d3 5
a7 3
C                                                                      *
C                                                                      *
C                                                                      *
d12 1
a12 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d29 3
a31 3
C                                                                      *
C   MRQUATER                                                            *
C                                                                      *
d33 1
a33 1
C   THE POINTS OF IPT ONTO THE POINTS IN RPT.
d38 1
a38 1
C ALL THE POINTS TO BE USED MUST BE FOUND IN BOTH VIEWS.
d40 7
a46 7
C PARAMETERS:
C   RPT(3,LS) = COORDS OF POINTS IN REFERENCE VIEW
C   VPT(3,LS) = COORDS OF POINTS IN VIEW TO BE ALIGNED
C        COORDS SHOULD BE CENTERED ABOUT THE CENTER OF MASS
C        OF THE POINTS USED.
C   NTPT  = NUMBER OF POINTS
C   LS    = RPT & VPT DIMENSION
d48 1
a48 2
C OUTPUT:
C   ROT(3,3) = ROTATIONAL MATRIX TO MATCH VPT TO RPT
d59 1
d88 1
d90 2
a91 1
      IF (KODE.NE.0) THEN
d93 2
a94 1
 250     FORMAT('POOR FIT: IVIEW# ',I3,',    KODE= ',I3)
d96 1
a96 1
 260     FORMAT('QUAT:  ( ',F10.7,2X,F10.7,2X,F10.7,2X,F10.7,' )' )
d101 5
a105 5
      QLNG2=SQRT(QLNG1)
      QUAT(1,1)=QUAT(1,1)/QLNG2
      QUAT(2,1)=QUAT(2,1)/QLNG2
      QUAT(3,1)=QUAT(3,1)/QLNG2
      QUAT(4,1)=QUAT(4,1)/QLNG2
@


1.11
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.10
log
@used parameters instead of common for ntpt
@
text
@d7 23
a29 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.9
log
@cosmetic
@
text
@d15 1
a16 1
C                                                                      *
d25 1
a25 1
C INPUT:
a29 1
C COMMON INPUT:
d31 2
a35 4
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C        0         2         3         4         5         6         7 *
d39 1
a39 3
      SUBROUTINE MRQUATER(RPT, VPT, ROT)

      PARAMETER (LS=2000)
a41 1
      COMMON /GENERAL/NTPT,CIR(2)
@


1.8
log
@header
@
text
@a16 13
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C        0         2         3         4         5         6         7 *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

      SUBROUTINE MRQUATER(RPT, VPT, ROT)




d34 9
a42 1
C *************************************************************
d50 2
a51 2
     2 S(3,3), TRIX(4,4), RPT(3,LS), VPT(3,LS)
C  TRIX IS MATRIX TO FIND QUATERION (QUAT)
d53 1
a53 1
C SUM UP PRODUCTS
d81 4
a84 4
        WRITE(NOUT,250)KODE
 250    FORMAT('POOR FIT: IVIEW# ',I3,',    KODE= ',I3)
        WRITE(NDAT,260)(QUAT(J,1),J=1,4)
 260    FORMAT('QUAT:  ( ',F10.7,2X,F10.7,2X,F10.7,2X,F10.7,' )' )
d87 1
a87 1
C           INSURE IT IS A UNIT QUATERION:
d96 1
a96 1
     & -QUAT(4,1)**2
d101 1
a101 1
     & -QUAT(4,1)**2
d106 1
a106 1
     & +QUAT(4,1)**2
@


1.7
log
@*** empty log message ***
@
text
@d1 24
d27 3
a29 1
C **********************************************************
@


1.6
log
@a
@
text
@d23 1
a23 1
      PARAMETER (LS=100)
a24 1
#ifdef SP_UNIX
a25 3
#else
      INCLUDE     'COMMON1:CMBLOCK.INC'
#endif
@


1.5
log
@*** empty log message ***
@
text
@d35 1
a35 1
CNO_SAVE
@


1.4
log
@nosave
@
text
@d37 2
a38 2
      DO 100 J = 1,3
        DO 100 M = 1,3
d40 5
a44 2
          DO 100 I = 1,NTPT
 100      S(M,J) = S(M,J)+VPT(M,I)*RPT(J,I)
@


1.3
log
@change write(* to write(nout
@
text
@d35 1
@


1.2
log
@cpp_lines_added
@
text
@d60 1
a60 1
        WRITE(*,250)KODE
@


1.1
log
@Initial revision
@
text
@d25 3
d29 1
@
