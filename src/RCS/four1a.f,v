head	1.35;
access;
symbols
	pre_getangas:1.30
	GPL2010:1.29
	pre_GPL2010:1.28
	pre_var_equation:1.28
	pre_fftwrings:1.28
	pre_opfiles:1.28
	src:1.28
	best-code:1.28
	x-named-regs:1.28
	x:1.28
	v13-00:1.28
	pre_GPL:1.26
	prec_CA:1.23
	noindx:1.22
	Bproc:1.19
	oct21:1.18
	last77:1.18;
locks; strict;
comment	@c @;


1.35
date	2014.12.12.16.08.24;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2013.10.23.13.24.32;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2012.10.15.18.13.27;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2012.07.26.17.31.28;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2012.07.17.17.38.15;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2011.01.07.18.30.37;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2010.06.24.13.25.43;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2005.10.17.20.05.56;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2005.10.17.18.00.56;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2004.11.19.18.29.09;	author cyang;	state Exp;
branches;
next	1.25;

1.25
date	2003.10.30.20.18.04;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2003.10.24.19.47.39;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2003.02.18.20.48.46;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2002.03.11.14.07.56;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2001.03.15.19.36.37;	author bimal;	state Exp;
branches;
next	1.20;

1.20
date	2000.12.05.09.54.42;	author bimal;	state Exp;
branches;
next	1.19;

1.19
date	2000.04.24.20.31.21;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	99.03.26.14.44.24;	author pawel;	state Exp;
branches;
next	1.17;

1.17
date	98.04.06.18.56.54;	author pawel;	state Exp;
branches;
next	1.16;

1.16
date	98.01.14.14.56.24;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	97.12.31.21.47.25;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	97.11.06.15.17.37;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	97.07.30.13.18.32;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	96.12.12.15.02.56;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	96.08.29.17.50.08;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	96.05.01.18.09.44;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	96.03.05.14.00.17;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	96.02.28.15.53.55;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	96.01.25.15.45.37;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	96.01.24.23.27.46;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.01.24.23.22.12;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	96.01.22.18.32.06;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.01.16.15.37.11;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.10.24.14.48.27;	author mladjadj;	state Exp;
branches;
next	1.1;

1.1
date	95.10.23.19.50.55;	author mladjadj;	state Exp;
branches;
next	;


desc
@called by four1.f
@


1.35
log
@echo formatting
@
text
@C++*********************************************************************
C
C     FOUR1A.F
C                                OPFILEC          FEB 03 ARDEAN LEITH    
C                                COS              JUL 12 G. KISHCHENKO    
C                                FQ Q PARAMS      OCT 12 ARDEAN LEITH    
C                                RAISED SINC      OCT 13 ARDEAN LEITH    
C	
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2013  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  FOUR1A()
c
C  PURPOSE:  APPLIES FOURIER FILTERS TO 2-D OR 3-D REAL PICTURES
C            'FQ' : QUICK FILTERING (IN CORE, 2-D OR 3-D)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

	SUBROUTINE FOUR1A

        INCLUDE 'CMBLOCK.INC' 
        INCLUDE 'CMLIMIT.INC'

        CHARACTER (LEN=MAXNAM)              :: FILNAM

        REAL, ALLOCATABLE, DIMENSION(:,:,:) :: BB
       
        INTEGER                             :: MAXIM,NX,NY,NZ
        INTEGER                             :: IOPT,IRTFLG,NOT_USED
        INTEGER                             :: N2X,N2Y,N2Z,LSD
 
        INTEGER, PARAMETER                  :: LUN1 = 21
        INTEGER, PARAMETER                  :: LUN2 = 22

        MAXIM = 0
   	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,NX,NY,NZ,
     &  	   MAXIM,'INPUT',.FALSE.,IRTFLG)
	IF (IRTFLG .NE. 0) RETURN

        IF (IFORM .NE. 1 .AND. IFORM .NE. 3) THEN
           CALL ERRT(101,'OPERATION WORKS ON REAL INPUT',IDUM)
	   GOTO 999

	ELSEIF (IFORM == 1 .AND. NY == 1) THEN
           CALL ERRT(101,'OPERATION DOES NOT WORK ON 1D INPUT',IDUM)
	   GOTO 999
	ENDIF
	
        MAXIM = 0
	CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',IFORM,NX,NY,NZ,
     &		     MAXIM,'OUTPUT',.FALSE.,IRTFLG)
	IF (IRTFLG. NE. 0) GOTO 999

 
 1000   WRITE(NOUT,1009)
 1009   FORMAT
     &  ('  1 - LOW-PASS,                2 - HIGH-PASS'         ,/,
     &   '  3 - GAUSS.  LOW-PASS,        4 - GAUSS.  HIGH-PASS' ,/,
     &   '  5 - FERMI                    6 - FERMI'             ,/,
     &   '  7 - BUTTER. LOW-PASS,        8 - BUTTER. HIGH-PASS' ,/,
     &   '  9 - RAISED COS. LOW-PASS,   10 - RAISED COS. HIGH-PASS' ,/,
     &   '  9 - RAISED COS. LOW-PASS,   10 - RAISED COS. HIGH-PASS' ,/,
     &   ' 11 - BUTTER. ELLIP LOW-PASS, 12 - BUTTER. ELLIP HIGH-PASS',/,
     &   ' 13 - RAISED SINC WINDOW')

        CALL RDPRI1S(IOPT,NOT_USED,'FILTER TYPE (1-13)',IRTFLG)
	IF (IRTFLG. NE. 0) GOTO 999
	
        IF (IOPT < 1 .OR. IOPT > 13) THEN
           CALL ERRT(102,'ILLEGAL VALUE FOR FILTER TYPE',IOPT)
	   GOTO 1000
	ENDIF

       IF (NZ > 1 .AND. IOPT == 13) THEN
           CALL ERRT(101,'OPERATION NOT IMPLEMENTED FOR VOLUMES',IOPT)
	   GOTO 1000
	ENDIF

	IF (FCHAR(4:5) == 'NP')  THEN
	    N2X = NX
            N2Y = NY
            N2Z = NZ
        ELSE
           N2X = 2*NX
           N2Y = 2*NY
	   IF (NZ > 1)  THEN
	      N2Z = 2*NZ
	   ELSE
	      N2Z = 1
           ENDIF
	ENDIF

	LSD = N2X + 2 - MOD(N2X,2)

        ALLOCATE (BB(LSD,N2Y,N2Z), STAT=IRTFLG)           
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'FOUR1A; BB',LSD*N2Y*N2Z)
           GOTO 999
        ENDIF

        IF (IFORM == 1)  THEN
           WRITE(NOUT,"(A,I6,' x',I6)") 
     &                '  Dimensions used:',N2X,N2Y

           CALL FQ_Q(IOPT,LUN1,LUN2, BB, 
     &               LSD,N2X,N2Y, NX,NY, IRTFLG)
	   IF (IRTFLG .NE. 0) GOTO 999

        ELSE
           WRITE(NOUT,"(A,I6,' x',I6,' x',I6)") 
     &                '  Dimensions used:',n2x,n2y,n2z
          
           CALL FQ3_P(LUN1,LUN2, BB,
     &                LSD,N2X,N2Y,N2Z,NX,NY,NZ,IOPT)

	   IF (IOPT < 0) THEN
	      CALL ERRT(101,'USING FFTW',NE)
              GOTO 999
	   ENDIF

        ENDIF


999     IF (ALLOCATED(BB)) DEALLOCATE(BB)

        CLOSE(LUN1)
        CLOSE(LUN2)
       
        END

@


1.34
log
@raised sinc added
@
text
@d77 8
a84 8
     &   ('  1 - LOW-PASS,                2 - HIGH-PASS'         ,/,
     &    '  3 - GAUSS.  LOW-PASS,        4 - GAUSS.  HIGH-PASS' ,/,
     &    '  5 - FERMI                    6 - FERMI'             ,/,
     &    '  7 - BUTTER. LOW-PASS,        8 - BUTTER. HIGH-PASS' ,/,
     &    '  9 - RAISED COS. LOW-PASS,   10 - RAISED COS. HIGH-PASS' ,/,
     &    '  9 - RAISED COS. LOW-PASS,   10 - RAISED COS. HIGH-PASS' ,/,
     &    ' 11 - BUTTER. ELLIP LOW-PASS, 12 - BUTTER.ELLIP HIGH-PASS',/,
     &    ' 13 - RAISED SINC WINDOW')
d94 5
d123 1
a123 1
     &                '  DIMENSIONS USED:',N2X,N2Y
d131 1
a131 1
     &                '  DIMENSIONS USED:',n2x,n2y,n2z
@


1.33
log
@FQ Q PARAMS
@
text
@d7 1
d13 1
a13 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d77 8
a84 5
     &     ('  1 - LOW-PASS,              2 - HIGH-PASS'         ,/,
     &      '  3 - GAUSS.  LOW-PASS,      4 - GAUSS.  HIGH-PASS' ,/,
     &      '  5 - FERMI                  6 - FERMI'             ,/,
     &      '  7 - BUTTER. LOW-PASS,      8 - BUTTER. HIGH-PASS' ,/,
     &      '  9 - RAISED COS. LOW-PASS, 10 - RAISED COS. HIGH-PASS')
d86 1
a86 1
        CALL RDPRI1S(IOPT,NOT_USED,'FILTER TYPE (1-10)',IRTFLG)
d89 1
a89 1
        IF (IOPT < 1 .OR. IOPT > 10) THEN
d145 1
@


1.32
log
@*** empty log message ***
@
text
@d6 1
d30 1
a30 1
C  FOUR1A
d32 2
a33 2
C  PURPOSE:  'FQ' : QUICK FILTERING (IN CORE, 2-D OR 3-D, AS NEED BE)
C            APPLIES FOURIER FILTERS TO 2-D OR 3-D REAL PICTURES
d45 6
a50 3
        REAL, ALLOCATABLE, DIMENSION(:,:)   :: BB
        REAL, ALLOCATABLE, DIMENSION(:,:,:) :: BC
        
d59 2
a60 1
        IF (IFORM .NE.1 .AND. IFORM.NE.3) THEN
d63 2
a64 2
	ELSEIF (IFORM .EQ.1 .AND. NY.EQ.1) THEN
           CALL ERRT(44,'FOUR1A ',NE)
d83 1
d91 3
a93 3
	    N2S = NX
            N2R = NY
            N2L = NZ
d95 2
a96 2
           N2S = 2*NX
           N2R = 2*NY
d98 1
a98 1
	      N2L = 2*NZ
d100 1
a100 1
	      N2L = 1
d104 7
a110 1
	LSD = N2S+2-MOD(N2S,2)
d113 2
a114 8
           WRITE(NOUT,90) N2S,N2R
90         FORMAT('  DIMENSIONS USED:',3I6)

           ALLOCATE (BB(LSD,N2R), STAT=IRTFLG)           
           IF (IRTFLG .NE. 0) THEN 
              CALL ERRT(46,'FOUR1A; BB',LSD*N2R)
              GOTO 999
           ENDIF
d116 3
a118 1
           CALL FQ_Q(LUN1,LUN2,BB,LSD,N2S,N2R,NX,NY,IOPT)
d121 8
a128 5
           WRITE(NOUT,90) N2S,N2R,N2L
        
           ALLOCATE (BC(LSD,N2R,N2L), STAT=IRTFLG)           
           IF (IRTFLG .NE. 0) THEN 
              CALL ERRT(46,'FOUR1A; BC',LSD*N2R*N2L)
d130 2
a131 4
           ENDIF  
   
           CALL FQ3_P(LUN1,LUN2,BC,LSD,
     &                N2S,N2R,N2L,NX,NY,NZ,IOPT)
a133 3
	IF (IOPT < 0) THEN
	   CALL ERRT(101,'USING FFTW',NE)
	ENDIF
a135 1
	IF (ALLOCATED(BC)) DEALLOCATE(BC)
@


1.31
log
@added raised cosine
@
text
@d71 1
a71 1
     &     ('  1 - LOW-PASS,              2 - HIGH-PASS'        ,/,
d73 1
a73 1
     &      '  5 - FERMI   LOW-PASS,      6 - FERMI   HIGH-PASS' ,/,
@


1.30
log
@output cosmetic
@
text
@d4 2
a5 1
C                                   OPFILEC          FEB 03 ARDEAN LEITH    
d11 1
a11 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d29 4
a32 4
C       'FQ' : QUICK FILTERING (IN CORE, 2-D OR 3-D, AS NEED BE)
C       APPLIES FOURIER FILTERS TO 2-D OR 3-D REAL PICTURES
C
C IMAGE_PROCESSING_ROUTINE
d42 1
a42 2
        COMMON /COMMUN/ FILNAM
        CHARACTER (LEN=MAXNAM) ::  FILNAM
d44 2
a45 2
        REAL, ALLOCATABLE, DIMENSION(:,:)      :: BB
        REAL, ALLOCATABLE, DIMENSION(:,:,:)    :: BC
d47 2
a48 1
        DATA  LUN1,LUN2/21,22/
d51 1
a51 1
   	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
d58 1
a58 1
	ELSEIF (IFORM .EQ.1 .AND. NROW.EQ.1) THEN
d64 2
a65 2
	CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',IFORM,NSAM,NROW,NSLICE,
     &		   MAXIM,'OUTPUT',.FALSE.,IRTFLG)
d71 5
a75 4
     &     ('  1 - LOW-PASS,       2 - HIGH-PASS',/,
     &      '  3 - GAUSS LOW-PASS, 4 - GAUSS HIGH-PASS',/,
     &      '  5 - FERMI LOW-PASS, 6 - FERMI HIGH-PASS',/,
     &      '  7 - BUTER LOW-PASS, 8 - BUTER HIGH-PASS')
d77 1
a77 1
        CALL RDPRI1S(IOPT,NOT_USED,'FILTER TYPE (1-8)',IRTFLG)
d79 2
a80 2
        IF (IOPT .LT. 1 .OR. IOPT .GT. 8) THEN
           CALL ERRT(102,'ILLEGAL VALUE FOR FILTER TYPE ',IOPT)
d84 4
a87 4
	IF (FCHAR(4:5) .EQ. 'NP')  THEN
	    N2S = NSAM
            N2R = NROW
            N2L = NSLICE
d89 4
a92 4
           N2S = 2*NSAM
           N2R = 2*NROW
	   IF (NSLICE.GT.1)  THEN
	      N2L = 2*NSLICE
d94 1
a94 1
	      N2L=1
d97 1
d100 3
a102 3
        IF (IFORM .EQ. 1)  THEN
           WRITE(NOUT,30111)  N2S,N2R
30111      FORMAT('  DIMENSIONS USED: ',3I6)
d106 1
a106 1
              CALL ERRT(46,'FOUR1A, BB',IER)
d110 2
a111 1
           CALL  FQ_Q(LUN1,LUN2,BB,LSD,N2S,N2R,NSAM,NROW,IOPT)
d113 1
a113 1
           WRITE(NOUT,30111)  N2S,N2R,N2L
d117 2
a118 2
              CALL ERRT(46,'FOUR1A, BC',IER)
              GOTO 998
d122 1
a122 1
     &                N2S,N2R,N2L,NSAM,NROW,NSLICE,IOPT)
d125 2
a126 2
	IF (IOPT.LT.0) THEN
	   CALL ERRT(38,'FQ',NE)
d129 2
a130 2
998     IF (ALLOCATED(BB))  DEALLOCATE(BB)
	IF (ALLOCATED(BC))  DEALLOCATE(BC)
d132 1
a132 1
999     CLOSE(LUN1)
@


1.29
log
@GPL_2010
@
text
@d70 4
a73 4
     &     (' 1 - LOW-PASS,       2 - HIGH-PASS',/,
     &      ' 3 - GAUSS LOW-PASS, 4 - GAUSS HIGH-PASS',/,
     &      ' 5 - FERMI LOW-PASS, 6 - FERMI HIGH-PASS',/,
     &      ' 7 - BUTER LOW-PASS, 8 - BUTER HIGH-PASS')
d99 1
a99 1
30111      FORMAT(' DIMENSIONS USED: ',3I6)
@


1.28
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.27
log
@HRI GPL License used
@
text
@a6 2
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK        **
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK        *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND     *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.  *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR   *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR*
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                          *
@


1.26
log
@Removed MPI macros
@
text
@d7 1
d9 24
@


1.25
log
@mpi
@
text
@a36 11
#ifdef USE_MPI
        include 'mpif.h'
        INTEGER  MYPID, COMM, IERR
        CHARACTER(LEN=1) :: NULL
        COMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(COMM, MYPID, IERR)
        NULL   = CHAR(0)
        IRTFLG = 0
#else
        MYPID = -1
#endif
a50 75
#ifdef USE_MPI
C       CHECK THE FILENAME TO SEE IF THE OUTPUT IS INLINE
        CALL FILERD(FILNAM,NLETI,NULL,'OUTPUT',IRTFLG)
        IF (MYPID .EQ. 0 .or. FILNAM(1:1) .EQ. '_') THEN
  	   CALL OPFILEC(LUN1,.FALSE.,FILNAM,LUN2,'U',IFORM,NSAM,
     &                  NROW,NSLICE,MAXIM,'OUTPUT',.FALSE.,IRTFLG)
	   IF (IRTFLG. NE. 0) GOTO 999

 1000      CONTINUE
           IF (MYPID .EQ. 0) WRITE(NOUT,1009)
 1009      FORMAT
     &        (' 1 - LOW-PASS,       2 - HIGH-PASS',/,
     &         ' 3 - GAUSS LOW-PASS, 4 - GAUSS HIGH-PASS',/,
     &         ' 5 - FERMI LOW-PASS, 6 - FERMI HIGH-PASS',/,
     &         ' 7 - BUTER LOW-PASS, 8 - BUTER HIGH-PASS')

           CALL RDPRI1S(IOPT,NOT_USED,'FILTER TYPE (1-8)',IRTFLG)
	
           IF (IOPT .LT. 1 .OR. IOPT .GT. 8) THEN
              CALL ERRT(102,'ILLEGAL VALUE FOR FILTER TYPE ',IOPT)
	      GOTO 1000
           ENDIF

	   IF (FCHAR(4:5) .EQ. 'NP')  THEN
	      N2S = NSAM
              N2R = NROW
              N2L = NSLICE
           ELSE
              N2S = 2*NSAM
              N2R = 2*NROW
	      IF (NSLICE.GT.1)  THEN
	         N2L = 2*NSLICE
	      ELSE
	         N2L=1
              ENDIF
	   ENDIF
           LSD = N2S+2-MOD(N2S,2)

           IF (IFORM .EQ. 1)  THEN
              IF (MYPID .EQ. 0) THEN 
                 WRITE(NOUT,30111)  N2S,N2R
              ENDIF
30111         FORMAT(' DIMENSIONS USED: ',3I6)

              ALLOCATE (BB(LSD,N2R), STAT=IRTFLG)           
              IF (IRTFLG .NE. 0) THEN 
                 CALL ERRT(46,'FOUR1A, BB',IER)
                 GOTO 999
              ENDIF

              CALL  FQ_Q(LUN1,LUN2,BB,LSD,N2S,N2R,NSAM,NROW,IOPT)
           ELSE
              IF (MYPID .EQ. 0) THEN
                 WRITE(NOUT,30111)  N2S,N2R,N2L
              ENDIF
        
              ALLOCATE (BC(LSD,N2R,N2L), STAT=IRTFLG)           
              IF (IRTFLG .NE. 0) THEN 
                 CALL ERRT(46,'FOUR1A, BC',IER)
                 GOTO 998
              ENDIF  
   
              CALL FQ3_P(LUN1,LUN2,BC,LSD,
     &                   N2S,N2R,N2L,NSAM,NROW,NSLICE,IOPT)
           ENDIF

	   IF (IOPT.LT.0) THEN
	      CALL ERRT(38,'FQ',NE)
	   ENDIF

998        IF (ALLOCATED(BB))  DEALLOCATE(BB)
	   IF (ALLOCATED(BC))  DEALLOCATE(BC)
        ENDIF
        CALL MPI_BCAST(IBCNT, 1, MPI_INTEGER, 0, COMM, IERR)
#else
a114 1
#endif
@


1.24
log
@irtflg set to 0
@
text
@d36 8
a43 1
        
d45 4
a48 1
        MAXIM  = 0
d62 75
d201 1
@


1.23
log
@opfilec
@
text
@d37 2
a38 1
        MAXIM = 0
@


1.22
log
@nloop,iloop_removed
@
text
@d4 1
a20 1
C        1         2         3         4         5         6         7
d27 1
a27 1
        COMMON /COMMUN/ FILNAM,FILFIL
d29 2
a34 2
        CHARACTER *81   FILNAM,FILFIL              
        CHARACTER *1    NULL
d37 3
a39 3
        NULL   = CHAR(0)
100	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &  	   IDUM,'INPUT',.FALSE.,IRTFLG)
d41 1
d43 3
a45 5
	   CLOSE(LUN1)
	   RETURN
	ENDIF
	
        IF (IFORM .EQ.1 .AND. NROW.EQ.1) THEN
d47 1
a47 2
	   CLOSE(LUN1)
	   RETURN
d50 4
d55 7
a61 2
	CALL FILERD(FILNAM,NLETI,NULL,'OUTPUT',IRTFLG)
	IF (IRTFLG .EQ. -1) GOTO 999
d63 6
a68 13
        NSLICE = MAX0(1,NSLICE)

C	IOPT IS RETURNED BY RDPRMI. SET TO START LOOP    ML.
        IOPT = 0
        DO WHILE (IOPT .LT. 1 .OR. IOPT .GT. 8)
           WRITE(NOUT,1009)
 1009      FORMAT
     &     (' 1 - LOW-PASS,       2 - HIGH-PASS',/,
     &     ' 3 - GAUSS LOW-PASS, 4 - GAUSS HIGH-PASS',/,
     &     ' 5 - FERMI LOW-PASS, 6 - FERMI HIGH-PASS',/,
     &     ' 7 - BUTER LOW-PASS, 8 - BUTER HIGH-PASS')
           CALL RDPRMI(IOPT,IDUM,NOT_USED,'FILTER TYPE (1-8)')
        ENDDO
d83 1
a83 1
	LSD=N2S+2-MOD(N2S,2)
d85 1
a85 3
        IF (IFORM.EQ.3)  THEN
           WRITE(NOUT,30111)  N2S,N2R,N2L
        ELSE
d87 1
a87 3
        ENDIF
        
30111   FORMAT(' DIMENSIONS USED: ',3I6)
a88 5
	CALL OPFIL(.FALSE.,FILNAM,LUN2,'U',NSAM,NROW,NSLICE,
     &		   IDUM,'OUTPUT',.FALSE.,IRTFLG)
	IF (IRTFLG. NE. 0) GOTO 999
	
        IF (IFORM.EQ.1)  THEN
d90 1
a90 1
           IF (IRTFLG.NE.0) THEN 
d94 1
a94 1
              
d97 1
d100 1
a100 1
           IF (IRTFLG.NE.0) THEN 
d102 1
a102 1
              GOTO 999
d104 1
a104 1
                
d113 3
d118 1
a118 2
        IF (ALLOCATED(BB))  DEALLOCATE(BB)
	IF (ALLOCATED(BC))  DEALLOCATE(BC)       
@


1.21
log
@trap for 1Dimensional image
@
text
@d67 1
a67 1
           CALL RDPRMI(IOPT,IDUM,NLOOP,ILOOP,'FILTER TYPE (1-8)')
@


1.20
log
@dynamical memory allocation
@
text
@d45 7
@


1.19
log
@SP_F90 removed
@
text
@d18 4
d24 1
a24 1
	SUBROUTINE FOUR1A(MAXMEM)
a27 2
        CHARACTER *81   FILNAM,FILFIL
        COMMON          BUF(1)
a28 3
        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: Q
d30 4
a33 1
        LOGICAL		RUNTIME
d36 1
d48 1
d50 1
d54 3
a56 3
          WRITE(NOUT,1009)
 1009     FORMAT
     &    (' 1 - LOW-PASS,       2 - HIGH-PASS',/,
d60 1
a60 1
          CALL RDPRMI(IOPT,IDUM,NLOOP,ILOOP,'FILTER TYPE (1-8)')
d62 1
a62 1
C
d71 1
a71 1
	     N2L = 2*NSLICE
d73 1
a73 1
	     N2L=1
a76 21
	MEMNEED=LSD*N2R*N2L
	CALL CHKMEM(MEMNEED,BUF,MAXMEM,RUNTIME,IPQ,IRTFLG)
	IF (IRTFLG.NE.0.AND.FCHAR(4:5).EQ.'NP')  THEN
             CALL  ERRT(6,'FOUR1 ',NE)
             GOTO 999
	ELSEIF(IRTFLG.NE.0.AND.FCHAR(4:5).NE.'NP')  THEN
	     N2S = NSAM
	     N2R = NROW
	     N2L = NSLICE
	     LSD=N2S+2-MOD(N2S,2)
	     MEMNEED=LSD*N2R*N2L
	     WRITE(NOUT,*)
	     CALL CHKMEM(MEMNEED,BUF,MAXMEM,RUNTIME,IPQ,IRTFLG)
	     IF(IRTFLG.NE.0)  THEN
		CALL  ERRT(6,'FOUR1 ',NE)
		GOTO 999
	     ENDIF
	     WRITE(NOUT,*)
     &         ' WARNING! BUFFER TO SMALL TO PAD YOUR IMAGE',
     &         ' WITH THE AVERAGE. RESULT CAN BE INCORRECT'
	ENDIF
a77 2
         Q = >IPQ

d83 1
d85 1
d89 1
d91 7
a97 1
           CALL  FQ_Q(LUN1,LUN2,Q(1),LSD,N2S,N2R,NSAM,NROW,IOPT)
d99 8
a106 1
           CALL FQ3_P(LUN1,LUN2,Q(1),LSD,
a109 1
        IF (RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'FQ',IRTFLG)
d116 2
a118 1
	
@


1.18
log
@*** empty log message ***
@
text
@d26 1
a26 1
#ifdef SP_F90
d30 1
a30 4
#else
        DIMENSION       Q(1)
        POINTER         (IPQ,Q) 
#endif
d93 1
a93 1
#ifdef SP_F90
d95 1
a95 1
#endif
@


1.17
log
@f90 alloc
@
text
@a29 1

a35 1

a36 2

CNO_SAVE		
d109 1
a109 1
           CALL  FQ_Q(LUN1,LUN2,Q,LSD,N2S,N2R,NSAM,NROW,IOPT)
d111 1
a111 1
           CALL FQ3_P(LUN1,LUN2,Q,LSD,
a121 1
        RETURN
@


1.16
log
@iform should not be in opfil call
@
text
@d26 6
d34 1
d100 3
@


1.15
log
@fq fixed (N2L was not defined)
@
text
@d3 1
a3 2
C     FOUR1A.FOR
C
d19 1
d21 1
d24 4
a27 4
        CHARACTER *81 FILNAM,FILFIL
        COMMON       BUF(1)
        DIMENSION    Q(1)
        POINTER      (IPQ,Q) 
d29 2
a30 1
        CHARACTER *1  NULL
d32 1
d39 2
a40 2
	CLOSE(LUN1)
	RETURN
d42 1
d58 13
a70 13
	  IF (FCHAR(4:5).EQ.'NP')  THEN
	      N2S = NSAM
              N2R = NROW
              N2L = NSLICE
          ELSE
             N2S = 2*NSAM
             N2R = 2*NROW
	     IF(NSLICE.GT.1)  THEN
	       N2L = 2*NSLICE
	     ELSE
	       N2L=1
             ENDIF
	  ENDIF
d74 1
a74 1
	IF(IRTFLG.NE.0.AND.FCHAR(4:5).EQ.'NP')  THEN
d78 8
a85 8
	      N2S = NSAM
              N2R = NROW
              N2L = NSLICE
	      LSD=N2S+2-MOD(N2S,2)
	      MEMNEED=LSD*N2R*N2L
              WRITE(NOUT,*)
	CALL CHKMEM(MEMNEED,BUF,MAXMEM,RUNTIME,IPQ,IRTFLG)
		IF(IRTFLG.NE.0)  THEN
d88 2
a89 2
		ENDIF
		WRITE(NOUT,*)
d93 6
a98 6
	  IF(IFORM.EQ.3)  THEN
             WRITE(NOUT,30111)  N2S,N2R,N2L
          ELSE
             WRITE(NOUT,30111)  N2S,N2R
          ENDIF
30111     FORMAT('  DIMENSIONS USED: ',3I5)
d100 1
a100 1
     &		   IFORM,'OUTPUT',.FALSE.,IRTFLG)
d103 1
a103 2
                CALL  FQ_Q(LUN1,LUN2,Q,LSD,
     &               N2S,N2R,NSAM,NROW,IOPT)
d108 4
a111 3
        IF(RUNTIME)  CALL ALLOCIT(0,RUNTIME,IPQ,'FQ',IRTFLG)
	IF(IOPT.LT.0) THEN
	CALL ERRT(38,'FQ',NE)
d113 1
d116 1
@


1.14
log
@R removed
@
text
@d61 5
a65 1
	     IF(NSLICE.GT.1)  N2L = 2*NSLICE
@


1.13
log
@new FFT
@
text
@d32 1
a32 1
100	CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM,NROW,NSLICE,
@


1.12
log
@memneed corrected
@
text
@d63 2
a64 1
	MEMNEED=N2S*N2R*N2L+MAX0(N2S,2*N2R,2*N2L)
d73 2
a74 1
	      MEMNEED=N2S*N2R*N2L+MAX0(N2S,2*N2R,2*N2L)
d95 1
a95 1
                CALL  FQ_Q(LUN1,LUN2,Q,Q(N2S*N2R+1),
d98 1
a98 1
           CALL FQ3_P(LUN1,LUN2,Q,Q(N2S*N2R*N2L+1),
@


1.11
log
@new version, remez removed
@
text
@d63 1
a63 1
	MEMNEED=N2S*N2R*N2S+MAX0(N2S,2*N2R,2*N2L)
d72 1
a72 1
	      MEMNEED=N2S*N2R*N2S+MAX0(N2S,2*N2R,2*N2L)
@


1.10
log
@?
@
text
@a4 1
C     THIS FILE WAS CREATED BY THE BREAKUP OF FOUR1.F      ml 10/23/95
a19 1

a20 2

	INTEGER MAXMEM
a21 2
CNO_SAVE		

d24 4
a27 2

        COMMON        Q(1)
d29 2
a30 3

        DATA  LUN1,LUN2,LUNF,LUN3/7,10,8,9/

a31 7
        IC     = 13
        NSLICE = 1
        INFLUN = 2
        IFOUND = 1
        NE     = 0


d33 1
a33 1
     &  	   IFORM,'INPUT',.FALSE.,IRTFLG)
d35 4
a38 2
        IF (IFORM .NE.1 .AND. IFORM.NE.3) GOTO 145

a40 1

a41 1

d44 1
a44 1
        DO WHILE (IOPT .LT. 1 .OR. IOPT .GT. 9)
d50 2
a51 3
     &     ' 7 - BUTER LOW-PASS, 8 - BUTER HIGH-PASS',/,
     &     ' 9 - REMEZ')
          CALL RDPRMI(IOPT,IDUM,NLOOP,ILOOP,'FILTER TYPE (1-9)')
d53 5
a57 48

C       REMEZ FILTER
        IF (IOPT .EQ. 9)  THEN
	   CALL OPFIL(.TRUE.,FILFIL,LUNF,'R',NS1,NR1,NSL1,
     &		     IFORM,'FILTER',.TRUE.,IRTFLG)
	   IF (IRTFLG .NE. 0) GOTO 999
           IF (IFORM .EQ. -1)  THEN
              IF (NS1 .LT. NSAM .OR. NR1 .LT. NROW) GOTO 145
              IF (NS1 .EQ. NSAM .OR. NR1 .EQ. NROW)  THEN
                 WRITE(NOUT,*)
     &           ' WARNING! FILTER TOO SMALL TO PAD YOUR IMAGE'
                 WRITE(NOUT,*)
     &              ' WITH THE AVERAGE RESULT CAN BE INCORRECT'
              ENDIF
           ELSE IF (IFORM .EQ. -7)  THEN
              IF (NS1 .LT. NSAM .OR. NR1 .LT. NROW .OR. 
     &            NSL1 .LT. NSLICE)  GOTO 145

              IF (NS1 .EQ. NSAM .OR. NR1 .EQ. NROW .OR.
     &           NSL1 .EQ. NSLICE) THEN
                WRITE(NOUT,*)
     &             ' WARNING! FILTER TOO SMALL TO PAD YOUR IMAGE'
                WRITE(NOUT,*)
     &             ' WITH THE AVERAGE RESULT CAN BE INCORRECT'
              END IF
           ELSE
              GOTO  145
           ENDIF
           IFORM = IABS(IFORM)
           N2S   = NS1
           N2R   = NR1
           N2L   = NSL1
           IF (IFORM .EQ. 1) THEN
              MEMNEED = (N2S + 2) * N2R + N2S
           ELSE
              MEMNEED = N2S * N2R * N2L + N2S
           ENDIF

           IF (MEMNEED .GT. MAXMEM)  THEN
              CALL  ERRT(6,'FOUR1 ',NE)
              GOTO 999
           ENDIF
	  
        ELSE
C         THE FOLLOWING SEGMENT WORKS FOR NON-REMEZ FILTERS.
          IF(IFORM .EQ. 1) THEN
C            MEMNEED = (NSAM+2)*NROW
	     MEMNEED = NSAM*NROW+MAX0(NSAM,2*NROW)
d59 7
a65 5
             MEMNEED = NSAM*NROW*NSLICE+NSAM
     &                +MAX0(NSAM,2*NSLICE,2*NROW)
          ENDIF

          IF (MEMNEED .GT. MAXMEM)  THEN
d68 1
a68 3
          ENDIF

	  IF (FCHAR(4:5) .EQ. 'NP')  THEN
d71 9
a79 13
              IF (IFORM .NE. 1)  N2L = NSLICE
              GOTO  151
	  ENDIF

C         DO THE PADDING
          IF ( IFORM .EQ. 1) THEN
	      MEMNEED = 2*NSAM*2*NROW+MAX0(2*NSAM,2*2*NROW)
          ELSE
              MEMNEED = 8*NSAM*NROW*NSLICE+2*NSAM+
     &                  MAX0(2*NSAM,4*NSLICE,4*NROW)
          ENDIF
          IF (MEMNEED.GT.MAXMEM)  THEN
             WRITE(NOUT,*)
d82 2
a83 11
     
             N2S = NSAM
             N2R = NROW
	     IF (IFORM .NE. 1)  N2L = NSLICE
          ELSE
             N2S = 2*NSAM
             N2R = 2*NROW
	     IF (IFORM .NE. 1) N2L = 2*NSLICE
	  ENDIF

151       IF (IFORM.EQ.3)  THEN
a88 8
        ENDIF

        IF (NSLICE .LE. 1) THEN
           IFORM = 1
        ELSE
           IFORM = 3
        ENDIF

d92 2
a93 3
	IFORM1 = IFORM
        IF (IFORM1 .EQ. 1)  THEN
           CALL  FQ_Q(LUN1,LUN2,LUNF,Q,Q(N2S*N2R+1),
a94 1
	   IF (IOPT .LT. 0) GOTO 145
d96 2
a97 3
           CALL FQ3_P(LUN1,LUN2,LUNF,Q,Q(N2S*N2R*N2L+1),
     &                Q(N2S*N2R*N2L+1+N2S),N2S,N2R,N2L,
     &                NSAM,NROW,NSLICE,IOPT)
d99 4
a102 5
        GOTO 999
	
145     CALL ERRT(2,'FOUR1 ',NE)
        GOTO 999

a104 2

        RETURN
@


1.9
log
@part of four1a cut out
@
text
@d78 1
a78 1
     &           ' WITH THE AVERAGE RESULT CAN BE INCORRECT'
d81 3
a83 2
              IF (NS1 .LT. NSAM .OR. NR1 .LT. NROW .OR. NSL1 .LT. NSLICE) 
     &            GOTO 145
@


1.8
log
@cosmetic
@
text
@d5 1
a5 3
C     12/22/94
C     THIS FILE AND FOUR1B.F WERE CREATED BY THE BREAKUP OF FOUR1.F
C     ml 10/23/95
d17 3
d22 1
a22 1
	SUBROUTINE FOUR1A(MAXMEM,IFUNC)
d24 1
a24 3
C        PARAMETER (NCORE=16) BUF(2**NCORE) ::: SET IN FOUR1.F
 
	INTEGER MAXMEM,IFUNC
d28 2
a29 26
2       GOTO (100,200,300,300,600),IFUNC

	WRITE(NOUT,*) 'ERROR: IFUNC > 5 IN FOUR1A.F'
	RETURN

C       'FQ' : QUICK FILTERING (IN CORE, 2-D OR 3-D, AS NEED BE)
C       APPLIES FOURIER FILTERS TO 2-D OR 3-D REAL PICTURES
100	CALL FOUR1A_FQ(MAXMEM)
	RETURN

C       'FT' : FOURIER  TRANSFORMS
C	FOURIER TRANSFORMS A 2-D OR 3-D IMAGE.
200     CALL FOUR1A_FT(MAXMEM)
        RETURN
	
C	'FF' : FOURIER FILTER &        'FL' : FOURIER LISTING
C	APPLIES FILTERS TO 2-D OR 3-D FOURIER TRANSFORMS.
300     CALL FOUR1A_FF(IFUNC)
        RETURN

C       'FP' : FOURIER INTERPOLATION 
600     CALL FOUR1A_FP(MAXMEM)

        END

C ----------------------------------------------------------------'FQ'
d31 1
a31 8
        SUBROUTINE FOUR1A_FQ(MAXMEM)
        INCLUDE 'CMBLOCK.INC' 
		
        COMMON ADUM(80),BUF(1)
        COMMON /COMMUN/ FILNAM
        DIMENSION     Q(1)
        EQUIVALENCE   (Q,BUF)
        CHARACTER *81 FILNAM,FILFIL
d43 1
a43 2
C       'FQ' : QUICK FILTERING (IN CORE, 2-D OR 3-D, AS NEED BE)
C       APPLIES FOURIER FILTERS TO 2-D OR 3-D REAL PICTURES
d46 2
a47 2
	IF (IRTFLG .NE. 0) GOTO 999
        IF (IFORM.NE.1.AND.IFORM.NE.3) GOTO 145
d50 1
a50 1
	IF (IRTFLG .EQ. -1) GOTO 130
d52 1
a52 1
        NSLICE=MAX0(1,NSLICE)
d59 2
a60 2
     &    (' 1 - LOW-PASS, 2 - HIGH-PASS, 3 - GAUSS LOW-PASS,',
     &     ' 4 - GAUSS HIGH-PASS',/,
d65 1
a65 1
        END DO
d69 1
a69 1
	  CALL OPFIL(.TRUE.,FILFIL,LUNF,'R',NS1,NR1,NSL1,
d71 5
a75 5
	  IF (IRTFLG .NE. 0) GOTO 999
          IF (IFORM .EQ. -1)  THEN
            IF (NS1 .LT. NSAM .OR. NR1 .LT. NROW) GOTO 145
            IF (NS1 .EQ. NSAM .OR. NR1 .EQ. NROW)  THEN
              WRITE(NOUT,*)
d77 1
a77 1
              WRITE(NOUT,*)
d79 28
a106 27
            ENDIF
          ELSE IF (IFORM .EQ. -7)  THEN
            IF (NS1 .LT. NSAM .OR. NR1 .LT. NROW .OR. NSL1 .LT. NSLICE) 
     &          GOTO 145
            IF (NS1 .EQ. NSAM .OR. NR1 .EQ. NROW .OR.
     &         NSL1 .EQ. NSLICE) THEN
              WRITE(NOUT,*)
     &           ' WARNING! FILTER TOO SMALL TO PAD YOUR IMAGE'
              WRITE(NOUT,*)
     &           ' WITH THE AVERAGE RESULT CAN BE INCORRECT'
            END IF
          ELSE
            GOTO  145
          ENDIF
          IFORM = IABS(IFORM)
          N2S   = NS1
          N2R   = NR1
          N2L   = NSL1
          IF (IFORM .EQ. 1) THEN
            MEMNEED = (N2S + 2) * N2R + N2S
          ELSE
            MEMNEED = N2S * N2R * N2L + N2S
          ENDIF
          IF (MEMNEED .GT. MAXMEM)  THEN
             CALL  ERRT(6,'FOUR1 ',NE)
             GOTO 999
          ENDIF
a107 1
C       THE FOLLOWING SEGMENT WORKS FOR NON-REMEZ FILTERS.
d109 1
d111 2
a112 2
C           MEMNEED = (NSAM+2)*NROW
	    MEMNEED = NSAM*NROW+MAX0(NSAM,2*NROW)
d114 1
a114 1
            MEMNEED = NSAM*NROW*NSLICE+NSAM
d117 1
d119 2
a120 2
            CALL  ERRT(6,'FOUR1 ',NE)
            GOTO 999
d122 1
d124 4
a127 4
	     N2S = NSAM
             N2R = NROW
             IF (IFORM .NE. 1)  N2L = NSLICE
             GOTO  151
d131 2
a132 2
          IF( IFORM .EQ. 1) THEN
	     MEMNEED = 2*NSAM*2*NROW+MAX0(2*NSAM,2*2*NROW)
d134 2
a135 2
             MEMNEED = 8*NSAM*NROW*NSLICE+2*NSAM+
     &                 MAX0(2*NSAM,4*NSLICE,4*NROW)
d138 1
a138 1
            WRITE(NOUT,*)
d150 1
d152 1
a152 1
            WRITE(NOUT,30111)  N2S,N2R,N2L
d154 1
a154 1
            WRITE(NOUT,30111)  N2S,N2R
d158 1
d164 1
a179 3
130     CALL ERRT(4,'FOUR1 ',NE)
        GOTO 999

a184 4
        FCHAR(1:1) = ';'
        END
	
C --------------------------------------------------------------- 'FT'
d186 1
a186 212
        SUBROUTINE FOUR1A_FT(MAXMEM)
	
        INCLUDE 'CMBLOCK.INC' 
	
        COMMON ADUM(80),BUF(1)
        COMMON /COMMUN/ FILNAM
        DIMENSION     Q(1)
        EQUIVALENCE   (Q,BUF)
        DIMENSION     VALUES(5)
        DIMENSION     MA(3)
        CHARACTER *81 FILNAM
        CHARACTER *2  CFORM
        CHARACTER *1  NULL

        DATA  LUN1,LUN2,LUNF,LUN3/7,10,8,9/

        NULL   = CHAR(0)
        IC     = 13
        NSLICE = 1
        INFLUN = 2
        IFOUND = 1
        NE     = 0
	
C       'FT' : FOURIER  TRANSFORMS
C	FOURIER TRANSFORMS A 2-D OR 3-D IMAGE.
200     CONTINUE
        CALL CHKINPQ('MR$',FCHAR(4:),ICALL1)
        IF (ICALL1 .EQ. 2) THEN
          CALL  FTMR(MAXMEM)
          RETURN
        END IF
	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &		   IFORM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 999
        IF ( IFORM .NE. 1  .AND. IFORM .NE. 3 .AND. 
     &       IFORM .NE. -1 .AND. IFORM .NE. -7 )  GOTO 145
        INV   = ISIGN(1,IFORM)
        MA(1) = LOG2(NSAM)
        MA(2) = LOG2(NROW)
        IF (NSLICE.GT.1)  THEN
          MA(3) = LOG2(NSLICE)
        ELSE
          NSLICE = 1
          MA(3)  = 0
        ENDIF

        M  = MA(1)+MA(2)+MA(3)
        IB = MA(1)
        IF (M .LT. IC)  IC = M
        IF (NSLICE .GT. 1)  THEN
          NDIM = 3
        ELSE
          NDIM = 2
        ENDIF

C       NEW FOURIER TRANSFORM
        IF (NSLICE.LE.1)  THEN
          IF (INV.GT.0)  THEN
            CFORM(1:2) = 'F2'
          ELSE
            CFORM(1:2) = 'R2'
          ENDIF
          IF ((NSAM+3)*NROW.GT.MAXMEM)  THEN
            IF (INV.GT.0)  THEN
              IT  = 1
              FN  = 1.0
              LUN = LUN1
            ELSE

C             TRANSPOSE DIMENSIONS
              MT       = MA(NDIM)
              MA(NDIM) = MA(1)
              MA(1)    = MT
              LUN      = LUN1
              IT       = -1
              FN       = 1. / (2.**M)
            ENDIF
            WRITE(NOUT,*)
     &       ' **  WARNING !   SLOW ON-DISK VERSION OF FFT USED.'
            CALL RFFT(FN,BUF,IB,IC,MA,NDIM,IT,0)
          ELSE
            IF (INV .GT. 0)  THEN
              DO I= 1, NROW
                CALL  REDLIN(LUN1,Q(1+(I-1)*(NSAM+2)),NSAM,I)
              END DO
              CALL FFTR2_Q(Q,NSAM,NROW,1)
              CALL FFTCOP(LUN1,Q,NSAM/2+1,NROW,Q(1+(NSAM+2)*NROW),1)
            ELSE
              CALL FFTCOP(LUN1,Q,NSAM/2+1,NROW,Q(1+(NSAM+2)*NROW),-1)
              CALL FFTR2_Q(Q,NSAM,NROW,-1)
              DO  I = 1,NROW
                CALL WRTLIN(LUN1,Q(1+(I-1)*(NSAM+2)),NSAM,I)
              END DO
            ENDIF
          ENDIF
        ELSE
          IF (INV.GT.0)  THEN
             CFORM(1:2) = 'Q3'
          ELSE
             CFORM(1:2) = 'R3'
          ENDIF
          IF (NSAM*NROW*NSLICE+MAX0(NSAM,2*NROW,2*NSLICE)
     &                                    .GT.MAXMEM)  THEN
            K = NSAM*MAX0(NROW,NSLICE)+2*NROW*NSLICE
            IF (K .GT. MAXMEM)  THEN
              CALL ERRT(6,'FOUR1 ',NE)
              GOTO 999
            ELSE
              WRITE(NOUT,*)
     &           ' **  WARNING !   SLOW ON-DISK VERSION OF FFT USED.'
              KK=K-2*NROW*NSLICE+1
              KK1=KK+NROW*NSLICE
              KK2=KK1+NROW*NSLICE
              CALL  F3MD(LUN1,Q,Q,Q(KK),Q(KK1),Q(KK2),
     &                     NSAM,NROW,NSLICE,INV)

                IF(INV.EQ.0)THEN
                CALL ERRT(1,'F3MD ',NE)
                GO TO 999
                ENDIF
            ENDIF
          ELSE
            IF (INV .GT. 0)  THEN
              DO   J = 1, NSLICE
                DO  I = 1, NROW
                  L = (J-1)*NROW+I
                  CALL REDLIN(LUN1,Q(1+((I-1)+(J-1)
     &                         *NROW)*NSAM),NSAM,L)
                END DO
              END DO

              KK5=1
              KK6=KK5+NSAM*NROW*NSLICE
              CALL  F3MR(Q(KK5),NSAM,NROW,NSLICE,INV,Q(KK6))

                IF(INV.EQ.0)THEN
                CALL ERRT(1,'F3MR ',NE)
                GO TO 999
                ENDIF

              DO   J = 1, NSLICE
                DO  I = 1, NROW
                  L = (J - 1)*NROW + I
                  CALL WRTLIN( LUN1,
     &                         Q(1 + ((I - 1) + (J - 1)*NROW)*NSAM),
     &                         NSAM,L)
                END DO
              END DO
            ELSE

C             INVERSE 3-D IN CORE
              DO  J = 1, NSLICE
                DO   I = 1, NROW
                  L = (J - 1)*NROW + I
                  CALL REDLIN(LUN1,
     &                        Q( 1 + ((I - 1) + (J - 1)*NROW)*NSAM),
     &                        NSAM,L)
                END DO
              END DO
 
              KK5=1
              KK6=KK5+NSAM*NROW*NSLICE
              CALL  F3MR(Q(KK5),NSAM,NROW,NSLICE,INV,Q(KK6))
 
                IF(INV.EQ.0)THEN
                CALL ERRT(1,'F3MR ',NE)
                GO TO 999
                ENDIF
 
              DO  J = 1, NSLICE
                DO  I = 1, NROW
                  L = (J - 1)*NROW + I
                  CALL WRTLIN(LUN1,
     &                        Q( 1 + ((I - 1) + (J - 1)*NROW)*NSAM),
     &                        NSAM,L)
                 END DO
              END DO
            ENDIF
          ENDIF
        ENDIF
        SIG   = -1.
        IHIST = 0
        LUNN=LUN1

C       VALUE(1) SETS IANGLE
        VALUES(1) = 1.0
        VALUES(2) = 0.0
        VALUES(3) = 0.0

C       NEGATIVE IRTFLG SUPRESSES PRINT-OUT
        IRTFLG    = -1

C       SINCE SETPRM USES UNLABELED COMMON FOR BUF THIS SHOULD BE OK
        CALL SETLAB(LUNN,NSAM,BUF,14,3,VALUES,CFORM,IRTFLG)

C       SET SCALE
        VALUES(1) = 0.0
        IRTFLG    = -1
        CALL SETLAB(LUNN,NSAM,BUF,21,1,VALUES,'U',IRTFLG)

C       FILE NOT SEARCHED FOR MIN-MAX
        VALUES(1) = 0.0
        IRTFLG    = -1
        CALL SETLAB(LUNN,NSAM,BUF, 6,1,VALUES,'U',IRTFLG)
        GOTO 999

145     CALL ERRT(2,'FOUR1 ',NE)
        GOTO 999

999     CLOSE(LUN1)
        CLOSE(LUN2)
        FCHAR(1:1) = ';'
a188 85
C --------------------------------------------------------------- 'FF'

        SUBROUTINE FOUR1A_FF(IFUNC)
	INTEGER IFUNC
        INCLUDE 'CMBLOCK.INC' 
				
        COMMON ADUM(80),BUF(1)
        COMMON /COMMUN/ FILNAM
        DIMENSION     Q(1)
        EQUIVALENCE   (Q,BUF)
        DIMENSION     VALUES(5)
        CHARACTER *81 FILNAM
        CHARACTER *1  NULL

        DATA  LUN1,LUN2,LUNF,LUN3/7,10,8,9/

        NULL   = CHAR(0)
        IC     = 13
        NSLICE = 1
        INFLUN = 2
        IFOUND = 1
        NE     = 0
	
	IF (IFUNC.EQ.3) THEN

C	  'FF' : FOURIER FILTER
C	  APPLIES FILTERS TO 2-D OR 3-D FOURIER TRANSFORMS.
300       CALL CHKINPQ('PLOT,ROT$',FCHAR(4:),ICALL1)
          GOTO(301,302,303),ICALL1

302       CALL FILTPLOT(MAXMEM)
          GOTO 999

C         BANDPASS FILTER, ROTFLT
303       CALL ROTFLT
          GOTO 999

301	  CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &		   IFORM,'INPUT',.TRUE.,IRTFLG)
	  IF (IRTFLG .NE. 0) GOTO 999
          IF (IFORM.NE.-1 .AND. IFORM.NE.-7) GOTO 145
          IF (FCHAR(4:4) .EQ. 'S') THEN
            CALL FSHADO(LUN1,NSAM,NROW)

          ELSEIF (FCHAR(4:4).EQ.'L' .OR. FCHAR(4:4).EQ.'B') THEN
            CALL FILTB(LUN1,NSAM,NROW)

          ELSE
            IF (NSLICE.GT.1)  THEN
               CALL FILT3_P(LUN1,NSAM,NROW,NSLICE)
            ELSE
               CALL FILT2_Q(LUN1,NSAM,NROW)
            ENDIF
          ENDIF

C         VALUES(1) IS FLAG FOR MIN/MAX SET
          VALUES(1) = 0.0
          VALUES(2) = 0.0
          VALUES(3) = 0.0
          VALUES(4) = 0.0
          VALUES(5) = 0.0

C         NEGATIVE IRTFLG SUPRESSES LABEL CHANGE OUTPUT
          IRTFLG = -1
          CALL SETLAB(LUN1,NSAM,BUF,6,5,VALUES,'U',IRTFLG)
          GOTO 999

        ELSE
C         'FL' : FOURIER LISTING
C 	  LISTS MODULI AND PHASES OF 2-D FOURIER TRANSFORMATION.
400       CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM,NROW,NDUM,
     &		     IFORM,'INPUT',.TRUE.,IRTFLG)
	  IF (IRTFLG .NE. 0) GOTO 999
          IF (IFORM.NE.-1) GOTO 145
          CALL FLIST(FILNAM,LUN1,LUN2,NSAM,NROW)
          GOTO 999	
        END IF

145     CALL ERRT(2,'FOUR1 ',NE)
        GOTO 999

999     CLOSE(LUN1)
        CLOSE(LUN2)
        FCHAR(1:1) = ';'
        END
@


1.7
log
@four1a_fp removed
@
text
@d3 1
a3 1
C    FOUR1A.FOR
d6 2
a7 2
C	this file and four1b.f were created by the breakup of four1.f
C	ml 10/23/95
d35 1
a35 1
C       Applies Fourier filters to 2-D or 3-D real pictures
d40 1
a40 1
C	Fourier transforms a 2-D or 3-D image.
d44 2
a45 2
c	'FF' : Fourier Filter &        'FL' : FOURIER LISTING
c	Applies filters to 2-D or 3-D Fourier transforms.
d54 1
a54 1
CCCCC
d76 1
a76 1
C       Applies Fourier filters to 2-D or 3-D real pictures
d218 1
a218 1
CCCCC
d244 1
a244 1
C	Fourier transforms a 2-D or 3-D image.
d434 1
a434 1
CCCCC
d457 1
a457 1
	IF(IFUNC.EQ.3) THEN
d459 2
a460 2
c	'FF' : Fourier Filter
c	Applies filters to 2-D or 3-D Fourier transforms.
d477 1
d480 1
d483 1
a483 1
              CALL FILT3_P(LUN1,NSAM,NROW,NSLICE)
d485 1
a485 1
              CALL FILT2_Q(LUN1,NSAM,NROW)
d502 2
a503 2
C       'FL' : FOURIER LISTING
C 	Lists moduli and phases of 2-D Fourier transformation.
@


1.6
log
@OK.
@
text
@a50 1
	RETURN
a516 88

CCCCC			
        SUBROUTINE FOUR1A_FP(MAXMEM)
        INCLUDE 'CMBLOCK.INC' 
#ifdef SP_ALLOC
      DIMENSION    Q(1)
      POINTER      (IPQ,Q) 
      LOGICAL      RUNTIME
#else
      COMMON       Q(1)
#endif
        CHARACTER *81 FILNAM
        CHARACTER *1  NULL
        DATA  LUN1,LUN2/9,10/
CNO_SAVE
        NULL   = CHAR(0)
        NSLICE = 1
        NE     = 0
	
	
C       'FP' : FOURIER INTERPOLATION 
C	Creates interpolated picture MF*NSAM by MF*NROW
C       (where MF is Magnification Factor) of a NSAM by NROW picture
C       works for 2D and 3D
C  NSAM, NROW AND NSLICE HAVE TO BE EVEN
600	CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM,NROW,NSLICE,
     &		   IFORM,'INPUT',.FALSE.,IRTFLG)
	NSLICE=MAX0(NSLICE,1)
	IF (IRTFLG .NE. 0) RETURN
	CALL FILERD(FILNAM,NLET,NULL,'OUTPUT',IRTFLG)
        CALL RDPRMI(MGN,MGR,NLOOP,ILOOP,
     &              'Magnification NSAM, NROW')
	MGN=MAX0(2,MGN)
	MGR=MAX0(2,MGR)
	IF(NSLICE.GT.1)  THEN
	CALL RDPRMI(MGS,NSAMN,NLOOP,ILOOP,'Magnification NSLICE')
	MGS=MAX0(2,MGS)
	 IF(MOD(NSAM,2).NE.0 .OR. MOD(NROW,2).NE.0 
     &          .OR. MOD(NSLICE,2).NE.0)  THEN
	 CLOSE(LUN1)
	 CALL ERRT(1,'FP ',IE)
	 RETURN
	 ENDIF
	ELSE
	MGS=1
	 IF(MOD(NSAM,2).NE.0 .OR. MOD(NROW,2).NE.0)  THEN
	 CLOSE(LUN1)
	 CALL ERRT(1,'FP ',IE)
	 RETURN
         ENDIF
	ENDIF
	NSAMN=MGN*NSAM
	NROWN=MGR*NROW
	NSLICEN=MGS*NSLICE
C
	MEMWANT=NSAMN*NROWN*NSLICEN+MAX0(NSAMN,2*NROWN,2*NSLICEN)
#ifdef SP_ALLOC
        CALL ALLOCIT(MEMWANT,RUNTIME,IPQ,'FP',IRTFLG)
        IF (RUNTIME)  THEN
#else
        IF (MEMWANT .LT. MAXMEM) THEN
#endif
          CALL OPENF(FILNAM,LUN2,NSAMN,NROWN,'UNKNOWN',NF,NSLICEN)
	  IF (IRTFLG .NE. 0) RETURN
          DO   J = 1, NROW*NSLICE
             CALL REDLIN(LUN1,Q(1+(J-1)*NSAM),NSAM,J)
          END DO
	  CLOSE(LUN1)
	 IF(NSLICE.EQ.1)  THEN
          CALL  FINT(Q,Q,NSAM,NROW,NSAMN,NROWN,Q(1+NSAMN*NROWN))
	 ELSE
	CALL  FINT3(Q,Q,
     &	NSAM,NROW,NSLICE,NSAMN,NROWN,NSLICEN,Q(1+NSAMN*NROWN*NSLICEN))
	 ENDIF
          DO    J = 1,NROWN*NSLICEN
             CALL WRTLIN(LUN2,Q(1+(J-1)*NSAMN),NSAMN,J)
          END DO
          CLOSE(LUN2)
#ifdef SP_ALLOC
        CALL ALLOCIT(0,RUNTIME,IPQ,'FP',IRTFLG)
#endif
        ELSE
          CALL  ERRT(6,'FINT ',NE)
        ENDIF
        RETURN			
145     CALL ERRT(2,'FINT ',NE)
        END
	
@


1.5
log
@3d fp
@
text
@d556 1
a556 1
          .OR. MOD(NSLICE,2).NE.0)  THEN
@


1.4
log
@fint even->even
@
text
@d539 1
a539 1
C	Creates interpolated picture (2**(MF-1))*NSAM by (2**(MF-1))*NROW
d541 3
a543 1
600	CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM,NROW,NDUM,
d545 2
a546 2
	IF (IRTFLG .NE. 0) GOTO 999
        IF (IFORM.NE.1) GOTO 145
d548 26
a573 4
        CALL RDPRMI(MGM,NDUMP,NLOOP,ILOOP,
     &              'MAGNIFICATION FACTOR (2,3,...)')
C	MGM = 2**MAX0(1,MGM-1)
	MEMWANT=MGM*MGM*NSAM*NROW+MAX0(MGM*NSAM,MGM*2*NROW)
d580 3
a582 3
          CALL OPENF(FILNAM,LUN2,MGM*NSAM,MGM*NROW,'UNKNOWN',NF,NSLICE)
	  IF (IRTFLG .NE. 0) GOTO 999
          DO   J = 1, NROW
d585 9
a593 3
          CALL  FINT(Q,Q,NSAM,NROW,MGM,Q(1+MGM*MGM*NSAM*NROW))
          DO    J = 1, MGM*NROW
             CALL WRTLIN(LUN2,Q(1+(J-1)*MGM*NSAM),NSAM*MGM,J)
d595 1
d597 1
a597 1
      CALL ALLOCIT(0,RUNTIME,IPQ,'FP',IRTFLG)
d602 1
a602 1
        GOTO 999			
a603 3
999     CLOSE(LUN1)
        CLOSE(LUN2)
        FCHAR(1:1) = ';'
@


1.3
log
@nosave
@
text
@d322 2
a323 1
          IF (NSAM*NROW*NSLICE.GT.MAXMEM)  THEN
d522 7
a528 5
	 			
        COMMON ADUM(80),BUF(1)
        COMMON /COMMUN/ FILNAM
        DIMENSION     Q(1)
        EQUIVALENCE   (Q,BUF)
d531 2
a532 3

        DATA  LUN1,LUN2,LUNF,LUN3/7,10,8,9/

a533 1
        IC     = 13
a534 2
        INFLUN = 2
        IFOUND = 1
d545 1
d548 9
a556 4
        MGM = 2**MAX0(1,MGM-1)
        IF (MGM*MGM*NSAM*NROW .LT. MAXMEM)  THEN
	  CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',MGM*NSAM,MGM*NROW,1,
     &		     IFORM,'OUTPUT',.FALSE.,IRTFLG)
d561 1
a561 1
          CALL  FINT(Q,Q,NSAM,NROW,MGM)
d565 3
d571 2
a572 5
        GOTO 999		
	
145     CALL ERRT(2,'FOUR1 ',NE)
        GOTO 999

@


1.2
log
@remove excess lines and set variables
@
text
@d26 2
a27 1
        INCLUDE 'CMBLOCK.INC' 		
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
		
d35 1
a35 1
100	CALL FOUR1A_FQ
d40 1
a40 1
200     CALL FOUR1A_FT
d49 1
a49 1
600     CALL FOUR1A_FP
d56 1
a56 1
        SUBROUTINE FOUR1A_FQ
d220 1
a220 1
        SUBROUTINE FOUR1A_FT
a423 3
	
130     CALL ERRT(4,'FOUR1 ',NE)
        GOTO 999
a507 3
	
130     CALL ERRT(4,'FOUR1 ',NE)
        GOTO 999
d518 1
a518 1
        SUBROUTINE FOUR1A_FP
d562 1
a562 2
        GOTO 999
				
a563 3
130     CALL ERRT(4,'FOUR1 ',NE)
        GOTO 999

@
