head	1.22;
access;
symbols
	healthdept_2018:1.22
	pre_getangas:1.15
	GPL2010:1.15
	pre_GPL2010:1.14
	pre_var_equation:1.14
	pre_fftwrings:1.14
	pre_opfiles:1.14
	src:1.14
	best-code:1.14
	x-named-regs:1.14
	x:1.14
	v13-00:1.14
	pre_GPL:1.13
	prec_CA:1.13
	noindx:1.12
	Bproc:1.11
	oct21:1.9
	last77:1.9;
locks; strict;
comment	@c @;


1.22
date	2018.10.03.14.34.05;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2014.12.10.15.57.56;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2014.12.10.15.28.07;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2014.12.09.18.06.27;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2014.12.09.16.46.40;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2014.01.12.19.36.34;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2013.05.15.14.23.11;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.24.13.25.28;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.17.21.07.15;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.18.16.21.03;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.11.14.09.04;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.11.10.18.40.09;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	99.11.10.16.49.46;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	99.03.18.20.59.28;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.03.15.18.53.49;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.03.01.19.50.50;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.02.04.15.33.55;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	97.10.06.17.04.50;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	96.07.09.19.30.36;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	95.10.03.16.15.20;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.04.27;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.48.22;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.22
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C  DPROFD.FOR -- CREATED                          JAN  87 ArDean Leith
C                MODIFIED                         JUNE 87 ArDean Leith
C                POSTSCRIPT OUTPUT                JAN  99 ArDean Leith
C                MISC                             MAY  13 ArDean Leith
c
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2013  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    DPROFD(LUNPOST,LUNDOC)
C
C    PARAMETERS:    LUNPOST,LUNDOC    IO UNITS                   (SENT)

C    PURPOSE:       PREPARES PLOT FROM SELECTED COLUMNS OF A
C                   DOCUMENT FILE.
C
C    CALLED BY:     PLOT1
C
C--*******************************************************************

      SUBROUTINE DPROFD(LUNDOC,LUNPOS)

      INCLUDE 'CMBLOCK.INC'
      INCLUDE 'CMLIMIT.INC'

C     COMMON /IMGMAX/ INUMBR(NIMAX)

      INTEGER, PARAMETER    :: NSIZE = 2000
      REAL                  :: DATA(3,NSIZE)
      
      CHARACTER(LEN=MAXNAM) :: FILDOC,FILPOS,LINE
      CHARACTER(LEN=1)      :: NULL = CHAR(0)
      LOGICAL               :: VSKEY,ERRI2
     
      INCLUDE 'F90ALLOC.INC'
      REAL, POINTER         :: PBUF(:,:)

C     READ DOCUMENT FILE, ALL KEYS AND REGISTERS 
      MAXX   = 0
      MAXY   = 0
      CALL GETDOCDAT('DOCUMENT',.TRUE.,FILDOC,LUNDOC,
     &                 .TRUE.,MAXX, MAXY,PBUF,IRTFLG)
      IF (IRTFLG .NE. 0) GOTO 9999

C     GET NAME OF POSTSCRIPT FILE AND OPEN AS SEQUENTIAL FORMATTED
      CALL OPAUXFILE(.TRUE.,FILPOS,'ps',LUNPOS,0,'N',
     &                       'POSTSCRIPT OUTPUT',.TRUE.,IRTFLGT)
      IF (IRTFLGT .NE. 0) GOTO 9999

        WRITE(NOUT,99)
   99   FORMAT(
     &    ' ASSIGN COLUMN(S) OF REGISTER(S) TO BE PLOTTED ON Y AXIS',
     &    ' AND THE COLUMN OF ',/,
     &    ' REGISTERS TO BE PLOTTED ON THE',
     &    ' X AXIS.  IF THE COLUMN FOR THE X AXIS IS ZERO,',/,
     &    ' THEN THE COLUMN OF REGISTERS IS PLOTTED VERSUS REGISTER ',
     &    'KEY.'/)

  13    NLIST  = 6
        NTOTLN = NIMAX
        CALL RDPRAI(INUMBR,NTOTLN,NLIST,0,MAXX-1,
     &     'REGISTER NUMBER(S) PLOTTED ON Y AXIS',NULL,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9998

        IXREG = 1
   14   CALL RDPRIS(IXREG,IDUM,NOT_USED,
     &     'REGISTER NUMBER PLOTTED ON X AXIS',IRTFLG)
        IF (IRTFLG == -1) GOTO 13
        IF (ERRI2(IXREG,IDUM,1,0,MAXX-1,IDUM,IDUM)) GOTO 14
        VSKEY = (IXREG == 0)

        IKEY1 = 1
        IKEY2 = MAXY
   15   CALL RDPRIS(IKEY1,IKEY2,NOT_USED,
     &        'INITIAL AND FINAL KEY NUMBERS',IRTFLG)
        IF (IRTFLG == -1) GOTO 14
        IF (ERRI2(IKEY1,IKEY2,2,1,MAXY,IKEY1,MAXY)) GOTO 15
  
      
C       GO THRU ALL Y REGISTERS TO FIND OVERALL SYMIN AND SYMAX
        ICOL  = INUMBR(1)  
        SYMIN = PBUF( ICOL + 1, IKEY1)
        SYMAX = SYMIN
        DO  N = 1,NLIST
           ICOL = INUMBR(N) 
           DO IKEY=IKEY1,IKEY2
              ICOUNT = PBUF(1,IKEY)
              IF (ICOUNT > 0) THEN
                 VALUE = PBUF(ICOL + 1,IKEY)
                 SYMIN = MIN(SYMIN,VALUE)
                 SYMAX = MAX(SYMAX,VALUE)
              ENDIF
           END DO
        END DO

        IF (VSKEY) THEN
C          X AXIS IS KEY 
           SXMIN = IKEY1
           SXMAX = IKEY2
        ELSE
C          GO THRU X REGISTER TO FIND SXMIN AND SXMAX
           ICOL  = IXREG 
           SXMIN = PBUF(ICOL + 1, IKEY1)
           SXMAX = SXMIN
           DO IKEY=IKEY1,IKEY2
              ICOUNT = PBUF( 1, IKEY)
              IF (ICOUNT > 0) THEN
C                KEY EXISTS
                 VALUE = PBUF( ICOL + 1, IKEY)
                 SXMIN = MIN(SXMIN,VALUE)
                 SXMAX = MAX(SXMAX,VALUE)
              ENDIF
           END DO
        ENDIF

C       INITIALIZE & SET SCALING FOR POSTSCRIPT
        CALL POSTRT(-LUNPOS)
        CALL POSCALE(LUNPOS,1.0,1.0, -12.0,-7.0,  120.0,102.0)

C       PUT AXES IN POSTSCRIPT FILE
        CALL POSAXIS('X',SXMIN,SXMAX,0.0,0.0, 120.0,100.0,XFACTR,LUNPOS,
     &               IRTFLG)
        CALL POSAXIS('Y',SYMIN,SYMAX,0.0,0.0, 120.0,100.0,YFACTR,LUNPOS,
     &               IRTFLG)

C       SET POSTSCRIPT LINE TYPES 
        INTEN  = 9
        IPEN   = 0
        LINTYP = 0

C       GO THRU  REGISTERS AND PLOT CONTENTS

        DO  N = 1,NLIST
           LINTP = MOD(N-1,10)
           CALL POLINE(LUNPOS,INTEN,IPEN,LINTYP)

           ICOL  = INUMBR(N) 
           NDATA = 0

           DO IKEY = IKEY1,IKEY2
              ICOUNT = PBUF( 1, IKEY)
              IF (ICOUNT > 0) THEN
C                KEY EXISTS, GRAPH IT

                 NDATA = NDATA + 1

C                FIND X VALUE
                 IF (VSKEY) THEN
                    DATA(1,NDATA) = (IKEY - SXMIN) * XFACTR
                 ELSE
                    ICOLX  = IXREG
                    VALUEX = PBUF( ICOLX + 1,IKEY)
                    DATA(1,NDATA) = (VALUEX - SXMIN) * XFACTR
                 ENDIF

C                FIND Y VALUE
                 VALUE         = PBUF( ICOL + 1, IKEY)
                 DATA(2,NDATA) = (VALUE - SYMIN) * YFACTR

                 IF (NDATA >= NSIZE) THEN
C                   ARRAY FULL
                    CALL POARAYF(LUNPOS,DATA,NDATA,.FALSE.,.FALSE.)
                    DATA(1,1) = DATA(1,NDATA)
                    DATA(2,1) = DATA(2,NDATA)
                    NDATA     = 1
                 ENDIF
              ENDIF
           ENDDO
           IF (NDATA > 0)
     &        CALL POARAYF(LUNPOS,DATA,NDATA,.FALSE.,.FALSE.)
   	ENDDO

C       PUT POSTSCRIPT AND DOC FILENAME AT TOP
        NLETP = LNBLNKN(FILPOS)
        NLETD = LNBLNKN(FILDOC)
        LINE  = FILPOS(:NLETP) // '      '// FILDOC(:NLETD) // '      ' 
        NC    = NLETP + NLETD + 12

C       PUT UP TO 6 REG NUMBERS ON TOP OF PLOT
        IF (NLIST == 1) THEN
          LINE(NC+1:NC+5) = 'REG: '
          NC = NC + 5
        ELSE
          LINE(NC+1:NC+6) = 'REGS: '
          NC = NC + 6
        ENDIF

        DO  I = 1,NLIST
          CALL INTTOCHAR(INUMBR(I),LINE(NC+1:),LENL,1)
          NC = NC + LENL 
          IF (I .LT. NLIST) THEN
             LINE(NC+1:NC+2) = ', '
             NC = NC + 2
          ENDIF
       ENDDO
           
       LINE(NC+1:NC+6) = '  VS  '
       NC = NC + 6
       IF (VSKEY) THEN
C         WRITE 'KEY'
          LINE(NC+1:NC+3) = 'KEY'
          NC = NC + 3
       ELSE
C         WRITE X REG NUMBER
          CALL INTTOCHAR(IXREG,LINE(NC+1:),LENL,1)
          NC   = NC + LENL
       ENDIF

C      SET TEXT CHARACTARISTICS FOR LABEL
       ITANGL = 0
       ITSIZE = 20
       JUST   = 0

C      SET POSITION FOR LABEL
       YPOS   = 114.0
       XPOS   = -2.0
       CALL POTEX(LUNPOS,LINE,NC,XPOS,YPOS, ITSIZE,ITANGL,JUST)

       WRITE(NOUT,*)' GRAPH PLACED IN: ',FILPOS(1:NLETP)

C      CLOSE THE POSTSCRIPT-FILE 
       CALL POEND(LUNPOS)
9998   CLOSE(LUNPOS)

C      DEALLOCATE DOC. FILE MEMORY
9999   DEALLOCATE(PBUF)

C      QUERY ABOUT PRINT
       CALL POPRINT(FILPOS(1:NLETP))
 
       END


C++*********************************************************************
C
C DPROFD_GPL.F   MODIFIED FROM GNUPLOT OUTPUT   DEC 14 ArDean Leith
c
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    DPROFD_GPL(LUNGPL,LUNDOC)
C
C    PARAMETERS:    LUNGPL,LUNDOC    IO UNITS                   (SENT)
C
C    PURPOSE:       PREPARES GNUPLOT SCRIPT FILE FROM SELECTED 
C                   COLUMNS OF A DOCUMENT FILE.
C
C    CALLED BY:     PLOT1
C
C--*********************************************************************

        SUBROUTINE DPROFD_GPL(LUNDOC,LUNGPL)

        IMPLICIT NONE

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        INTEGER               :: LUNDOC,LUNGPL

C       COMMON /IMGMAX/ INUMBR(NIMAX)

      
        CHARACTER(LEN=MAXNAM) :: FILDOC,FILGPL,LINE
        CHARACTER(LEN=MAXNAM) :: YLABEL,XLABEL,TITLE

        CHARACTER(LEN=1)      :: NULL = CHAR(0)
        CHARACTER             :: YN
        INTEGER               :: MAXX,MAXY,IRTFLG,NLETG,LNBLNKN,NLIST
        INTEGER               :: NTOTLN,IXREG,IYREG,IDUM,NOT_USED
        INTEGER               :: IKEY1,IKEY2,NCHARY,NCHARX,NCHART
        INTEGER               :: I,IKEY,ICOUNT,J,NA

        LOGICAL               :: VSKEY,ERRI2
     
        INCLUDE 'F90ALLOC.INC'
        REAL, POINTER         :: PBUF(:,:)

C       READ DOCUMENT FILE, ALL KEYS AND REGISTERS 
        MAXX   = 0
        MAXY   = 0
        CALL GETDOCDAT('DOCUMENT',.TRUE.,FILDOC,LUNDOC,
     &                 .TRUE.,MAXX, MAXY,PBUF,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

C       GET NAME OF GNUPLOT FILE AND OPEN AS SEQUENTIAL FORMATTED
C       OPEN FORMATTED, SEQUENTIAL FILE FOR GNUPLOT COMMANDS
        CALL OPAUXFILE(.TRUE.,FILGPL,'gpl',LUNGPL,0,'N',
     &                 'GNUPLOT OUTPUT',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999
        NLETG = lnblnkn(FILGPL)

        WRITE(NOUT,99)
   99   FORMAT(
     &    '  ASSIGN REGISTER(S) TO BE PLOTTED ON Y AND X AXES. ',
     &    'SPECIFY REGISTER ZERO TO PLOT KEYS ON X AXIS',/)

  13    NLIST  = 6
        NTOTLN = NIMAX
        CALL RDPRAI(INUMBR,NTOTLN,NLIST,0,MAXX-1,
     &     'REGISTER NUMBER(S) PLOTTED ON Y AXIS',NULL,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9998

        IXREG = 1
   14   CALL RDPRIS(IXREG,IDUM,NOT_USED,
     &     'REGISTER NUMBER PLOTTED ON X AXIS',IRTFLG)
        IF (IRTFLG == -1) GOTO 13
        IF (ERRI2(IXREG,IDUM,1,0,MAXX-1,IDUM,IDUM)) GOTO 14
        VSKEY = (IXREG == 0)
        IXREG = IXREG + 1

        IKEY1 = 1
        IKEY2 = MAXY
   15   CALL RDPRIS(IKEY1,IKEY2,NOT_USED,
     &        'INITIAL AND FINAL KEY NUMBERS',IRTFLG)
        IF (IRTFLG == -1) GOTO 14
        IF (ERRI2(IKEY1,IKEY2,2,1,MAXY,IKEY1,MAXY)) GOTO 15
  
        IRTFLG = -999     ! NOT UPPERCASE
        CALL RDPRMC(YLABEL,NCHARY,.FALSE.,'Y AXIS LABEL',NULL,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9998

        IRTFLG = -999     ! NOT UPPERCASE
        CALL RDPRMC(XLABEL,NCHARX,.FALSE.,'X AXIS LABEL',NULL,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9998

        IRTFLG = -999     ! NOT UPPERCASE
        CALL RDPRMC(TITLE,NCHART,.FALSE.,'TITLE',NULL,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9998

        IF (NCHARY > 0) 
     &     WRITE(LUNGPL,'(3A)') 'set ylabel "',YLABEL(:NCHARY),'"' 
        IF (NCHARX > 0) 
     &     WRITE(LUNGPL,'(3A)') 'set xlabel "',XLABEL(:NCHARX),'"' 
        IF (NCHART > 0) 
     &     WRITE(LUNGPL,'(3A)') 'set title "' ,TITLE(:NCHART) ,'"'

        WRITE(LUNGPL,'(3A)') 'plot \\'
 
        IF (NLIST == 1) THEN
           WRITE(LUNGPL,'(A,I0,A,I0,A)') 
     &       '"-" using ', IXREG, ':',INUMBR(1)+1, ' with line notitle'
        ELSE
           DO I = 1, NLIST    
              IF (I < NLIST) THEN
                WRITE(LUNGPL,'(A,I0, A,I0, A,I0, A)') 
     &            '"-" using ',IXREG, 
     &            ':', INUMBR(I)+1,
     &            ' with line title "Reg: ',INUMBR(I),'", \\'
              ELSE
                WRITE(LUNGPL,'(A,I0, A,I0, A,I0, A)') 
     &            '"-" using ',IXREG,
     &            ':',INUMBR(I)+1,
     &            ' with line title "Reg: ',INUMBR(I),'"'
              ENDIF
           ENDDO
        ENDIF

C       KLUDGE FOR MULTIPLE LINES, EMBED DOC FILE FOR EACH LINE
        DO I = 1,NLIST

           DO IKEY = IKEY1,IKEY2
              ICOUNT = PBUF( 1, IKEY)

              IF (ICOUNT > 0) THEN
C               KEY EXISTS, GRAPH IT

                 !write(6,*) ' key:',ikey,icount,IKEY1,IKEY2
                 WRITE(LUNGPL,'(I8," ",30(ES13.6," "))') 
     &                 IKEY,(PBUF(J,IKEY),J=2,ICOUNT+1)

              ENDIF
           ENDDO 
           
           WRITE(LUNGPL,'(A,A,A)') 'end' 
           WRITE(LUNGPL,'(A,A,A)') ' ' 
     &                 
        ENDDO            

        WRITE(NOUT,*)' GRAPH PLACED IN: ',FILGPL(1:NLETG)

C       CLOSE THE GNUPLOT-FILE 
9998    CLOSE(LUNGPL)
        CALL FLUSHFILE(LUNGPL)

C       QUERY ABOUT PRINT
        CALL RDPRMC(YN,NA,.TRUE.,'DISPLAY PLOT NOW? (Y/N)',NULL,IRTFLG)

        IF (YN .NE. 'N') THEN
c          WRITE(NOUT,*)' WARNING: EXTERNAL SOFTWARE DEPENDENCY'

           LINE = 'gnuplot -persist ' // FILGPL(1:NLETG)
           CALL CSVMS(LINE,.TRUE.,IRTFLG)
           WRITE(NOUT,*) ' '
        ENDIF

C       DEALLOCATE DOC. FILE MEMORY
9999    IF (ASSOCIATED(PBUF)) DEALLOCATE(PBUF)

        END


@


1.21
log
@typo
@
text
@d15 1
a15 1
C=* Email: spider@@wadsworth.org                                        *
d265 1
a265 1
C=* Email: spider@@wadsworth.org                                        *
@


1.20
log
@lowercase labels, error traps
@
text
@d359 2
a360 2
        IRTFLG = -999     ! NOT NOT UPPERCASE
        CALL RDPRMC(YLABEL,NCHARY,.FALSE.,'Y LABEL',NULL,IRTFLG)
d363 2
a364 2
        IRTFLG = -999     ! NOT NOT UPPERCASE
        CALL RDPRMC(XLABEL,NCHARX,.FALSE.,'X LABEL',NULL,IRTFLG)
d367 1
a367 1
        IRTFLG = -999     ! NOT NOT UPPERCASE
@


1.19
log
@bug
@
text
@d359 1
d363 1
d367 1
d371 7
a377 3
        WRITE(LUNGPL,'(3A)') 'set ylabel "',YLABEL(:NCHARY),'"' 
        WRITE(LUNGPL,'(3A)') 'set xlabel "',XLABEL(:NCHARX),'"' 
        WRITE(LUNGPL,'(3A)') 'set title "' ,TITLE(:NCHART) ,'"'
d399 1
a399 1
C       KLUDGE FOR MULTIPLE LINES
d401 1
d413 2
a414 1
           ENDDO            
@


1.18
log
@gnuplot code added
@
text
@d375 1
a375 1
     &       '"-" using ', IXREG, ':',INUMBR(I)+1, ' with line notitle'
@


1.17
log
@enter
@
text
@d255 179
@


1.16
log
@label text size decreased, alloc changed
@
text
@d83 1
a83 1
     &     'ENTER REGISTER NUMBER(S) PLOTTED ON Y AXIS',NULL,IRTFLG)
d88 1
a88 1
     &     'ENTER REGISTER NUMBER PLOTTED ON X AXIS',IRTFLG)
d96 1
a96 1
     &        'ENTER INITIAL AND FINAL KEY NUMBERS',IRTFLG)
@


1.15
log
@GPL_2010
@
text
@d4 4
a7 3
C  DPROFD.FOR -- CREATED           JAN  87 ArDean Leith
C                MODIFIED          JUNE 87 ArDean Leith
C                POSTSCRIPT OUTPUT JAN  99 ArDean Leith
d13 1
a13 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d45 1
d47 4
a50 4
C     BE SURE THE BLANK COMMON HAS SPACE FOR DBUF AFTER DATA IN CALLER
      PARAMETER       (NSIZE = 2000)
      PARAMETER       (NTOTL = 100)
      COMMON          DATA(3,NSIZE),ILIST(NTOTL)
d52 3
a54 5
      CHARACTER *81   FILDOC,FILPOS,LINE
      COMMON /COMMUN/ FILDOC,FILPOS,LINE

      CHARACTER * 1   NULL
      LOGICAL         VSKEY,ERRI2
d57 1
a57 3
      REAL, DIMENSION(:,:), POINTER :: PBUF

      NULL   = CHAR(0)
d72 2
a73 2
   99   FORMAT('0',
     &    'ASSIGN COLUMN(S) OF REGISTER(S) TO BE PLOTTED ON Y AXIS',
d81 2
a82 2
        NTOTLN = NTOTL
        CALL RDPRAI(ILIST,NTOTLN,NLIST,0,MAXX-1,
d89 1
a89 1
        IF (IRTFLG .EQ. -1) GOTO 13
d91 1
a91 1
        VSKEY = (IXREG .EQ. 0)
d97 1
a97 1
        IF (IRTFLG .EQ. -1) GOTO 14
d102 1
a102 1
        ICOL  = ILIST(1)  
d106 1
a106 1
           ICOL = ILIST(N) 
d109 1
a109 1
              IF (ICOUNT .GT. 0) THEN
d128 1
a128 1
              IF (ICOUNT .GT. 0) THEN
d158 1
a158 1
           ICOL  = ILIST(N) 
d163 1
a163 1
              IF (ICOUNT .GT. 0) THEN
d181 1
a181 1
                 IF (NDATA .GE. NSIZE) THEN
d190 1
a190 1
           IF (NDATA .GT. 0)
d201 1
a201 1
        IF (NLIST .EQ. 1) THEN
d210 1
a210 1
          CALL INTTOCHAR(ILIST(I),LINE(NC+1:),LENL,1)
d232 1
a232 1
       ITSIZE = 32
@


1.14
log
@GPL License fixed
@
text
@a8 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d10 5
a14 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d16 1
a16 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.13
log
@icount
@
text
@d2 1
a2 1
C++*************************************************************************
d9 23
a31 7
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 1999.  HEALTH RESEARCH INCORPORATED,            *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
@


1.12
log
@nloop,iloop_removed
@
text
@d98 2
a99 2
              KEYGOT = PBUF( 1,IKEY)
              IF (KEYGOT .EQ. IKEY) THEN
d117 2
a118 2
              KEYGOT = PBUF( 1, IKEY)
              IF (KEYGOT .EQ. IKEY) THEN
d152 2
a153 2
              KEYGOT = PBUF( 1, IKEY)
              IF (KEYGOT .EQ. IKEY) THEN
@


1.11
log
@*** empty log message ***
@
text
@d77 1
a77 1
   14   CALL RDPRIS(IXREG,IDUM,NLOOP,ILOOP,
d85 1
a85 1
   15   CALL RDPRIS(IKEY1,IKEY2,NLOOP,ILOOP,
@


1.10
log
@getdocdat changed
@
text
@d237 1
a237 1
9999   CALL DEALLOCATE(PBUF)
a241 1
       RETURN
@


1.9
log
@f90
@
text
@a43 1
#ifdef SP_F90
d45 1
a45 6
      REAL, DIMENSION(:), POINTER :: PBUF
      REAL, DIMENSION(:), POINTER :: IPQ
#else
      DIMENSION      PBUF(1)
      POINTER        (IPQ,PBUF) 
#endif
d53 1
a53 4
     &                 .TRUE.,MAXX, MAXY,IPQ,IRTFLG)
#ifdef SP_F90
      PBUF = > IPQ
#endif
d93 1
a93 1
        SYMIN = PBUF((IKEY1 - 1) * MAXX + ICOL + 1)
d98 1
a98 1
              KEYGOT = PBUF((IKEY - 1) * MAXX + 0 + 1)
d100 1
a100 1
                 VALUE = PBUF((IKEY - 1) * MAXX + ICOL + 1)
d114 1
a114 1
           SXMIN = PBUF((IKEY1 - 1) * MAXX + ICOL + 1)
d117 1
a117 1
              KEYGOT = PBUF((IKEY - 1) * MAXX + 0 + 1)
d120 1
a120 1
                 VALUE = PBUF((IKEY - 1) * MAXX + ICOL + 1)
d152 1
a152 1
              KEYGOT = PBUF((IKEY - 1) * MAXX + 0 + 1)
d163 1
a163 1
                    VALUEX = PBUF((IKEY - 1) * MAXX + ICOLX + 1)
d168 1
a168 1
                 VALUE         = PBUF((IKEY - 1) * MAXX + ICOL + 1)
d237 1
a237 1
9999   CALL DEALLOCMEM_R(IPQ,IRTFLG)
@


1.8
log
@*** empty log message ***
@
text
@d44 8
a51 2
      DIMENSION       PBUF(1)
      POINTER         (IPQ,PBUF) 
d60 3
d246 1
a246 1
9999   CALL DEALLOCIT(IPQ,IRTFLG)
@


1.7
log
@for postscript
@
text
@d57 1
a57 2
      LENREC = 0
      CALL OPAUXFILE(.TRUE.,FILPOS,'ps',LUNPOS,LENREC,'N',
@


1.6
log
@CNO_SAVE
@
text
@d4 13
a16 2
C  DPROFD.FOR -- CREATED JAN 87
C                MODIFIED JUNE 87
d18 1
a18 10
C **************************************************************************
C *  AUTHOR:  A. LEITH                                                     *
C *  PART OF SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK    *
C *  COPYRIGHT (C)1987 , WADSWORTH CENTER FOR LABORATORIES AND             *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d20 3
a22 14
C    DPROFD(DOFILE,NLETD,CSFILE,NLETC,DBUF,MAXREG,MAXKEY,NKEY,LUNCS)
C
C    PARAMETERS:
C         DOFILE    DOC FILE NAME
C         NLETD     NO. OF LETTERS IN DOC FILE NAME
C         CSFILE    CNT FILE NAME
C         NLETC     NO. OF LETTERS IN CNT FILE NAME
C         DBUF      ARRAY FOR DOC FILE CONTENTS
C         MAXREG    DIMENSION OF REGISTERS IN DOC FILE
C         MAXKEY    DIMENSION OF KEYS IN DOC FILE 
C         NKEY      NO. OF KEYS IN DOC FILE
C         LUNCS     OUTPUT UNIT FOR CNT FILE
C
C    PURPOSE:       PREPARES PLOT METAFILE FROM SELECTED COLUMNS OF A
a24 3
C    CALLS:         RDPRAI     RDPRIS    CSAXIS    CSPUSH    CSPSTX
C                   CSSCALT     CSTRAP
C
d29 1
a29 2
      SUBROUTINE DPROFD(DOFILE,NLETD,CSFILE,NLETC,DBUF,MAXREG,
     &                  MAXKEY,NKEY,LUNCS,IRTFLG)
a30 1
      INCLUDE 'CONSTG.INC'
a31 1
CNO_SAVE 
a32 2

      COMMON /POLY/  HOLES,REVERS
d34 3
a36 1
      COMMON         DATA
d38 5
a42 13
      CHARACTER *(*) DOFILE,CSFILE
      CHARACTER * 80 LINE,LABEL
      CHARACTER * 1  NULL,TYPE
      CHARACTER * 4  FMT1

      PARAMETER      (NTOTL = 100)
      PARAMETER      (NSIZE = 2000)
      DIMENSION      DATA(3,NSIZE),DBUF(MAXREG,MAXKEY)
      DIMENSION      ILIST(NTOTL)
      INTEGER        IKEY
      LOGICAL        VSKEY,DEBUG,ERRI2
C                123456
      DATA FMT1/'(I )'/ 
d44 2
a45 2
      DATA MININT/-32768/,MAXINT/32767/,FLTMIN/-10E30/,FLTZER/10E-30/,
     &     FLTMAX/10E30/
a46 1
      NTOTLN = NTOTL
d49 12
a60 3
      DEBUG  = .FALSE.

C     CALLING PGM. RECOVERS DATA FROM DOC FILE
a61 1
   13   NLIST = 6
d71 5
a75 4
        NSW = 1
        CALL RDPRAI(ILIST,NTOTL,NLIST,1,6,
     &     'ENTER REGISTER NUMBER(S) FOR Y AXIS',NULL,IRTFLG)
        IF (IRTFLG .EQ. -1) RETURN
d79 1
a79 1
     &     'ENTER REGISTER NUMBER FOR X AXIS',IRTFLG)
d81 7
a87 8
        IF (ERRI2(IXREG,IDUM,1,0,MAXREG,IDUM,IDUM)) GOTO 14
        VSKEY = .FALSE.
        IF (IXREG .EQ. 0) VSKEY = .TRUE.

        IGO = 1
        ISTOP = NKEY
   15   CALL RDPRIS(IGO,ISTOP,NLOOP,ILOOP,
     &  'ENTER INITIAL AND FINAL KEY NUMBERS',IRTFLG)
d89 15
a103 16
        IF (ERRI2(IGO,ISTOP,2,1,NKEY,IGO,NKEY)) GOTO 15
        
C       GO THRU ALL Y REGISTERS TO FIND SYMIN AND SYMAX
        SYMIN = FLTMAX
        SYMAX = FLTMIN
        DO 20 N = 1,NLIST
           IYREG = ILIST(N) + 1
           IK   = 1
   22      CONTINUE
              IF (IK .GT. NKEY) GOTO 20
              IKEY = DBUF(1,IK)
              IF (IKEY .GE. IGO) THEN
                IF (IKEY .GT. ISTOP) GOTO 20
                VAL = DBUF(IYREG,IK)
                IF (VAL .LT. SYMIN) SYMIN = VAL
                IF (VAL .GT. SYMAX) SYMAX = VAL
d105 3
a107 4
              IK = IK + 1
            GOTO 22
   20   CONTINUE
   
d109 3
a111 2
           SXMIN = IGO
           SXMAX = ISTOP
d114 10
a123 12
           SXMIN  = FLTMAX
           SXMAX  = FLTMIN
           IXREG  = IXREG + 1
           IK     = 1
   28      CONTINUE
              IF (IK .GT. NKEY) GOTO 30
              IKEY = DBUF(1,IK)
              IF (IKEY .GE. IGO) THEN
                IF (IKEY .GT. ISTOP) GOTO 30
                VAL = DBUF(IXREG,IK)
                IF (VAL .LT. SXMIN) SXMIN = VAL
                IF (VAL .GT. SXMAX) SXMAX = VAL
d125 1
a125 2
              IK = IK + 1
            GOTO 28
a126 1
   30   CONTINUE
d128 9
d138 1
a138 4
C       SET TEXT CHARACTARISTICS FOR AXES (IN COMMON)
        ITANGL = 0
        ITSIZE = 32
        JUST   = 0
a139 1
        IFON   = 0
d141 1
a142 9
C       CALCULATE SCALING AND DRAW AXES
        TYPE = 'Y'
        CALL CSAXIS(TYPE,SYMIN,SYMAX,0.0,0.0,120.0,100.0,YFACTR,
     &                  LUNCS,IRTFLG)

        TYPE = 'X'
        CALL CSAXIS(TYPE,SXMIN,SXMAX,0.0,0.0,120.0,100.0,XFACTR,
     &                  LUNCS,IRTFLG)

a145 1
           IYREG = ILIST(N) + 1
d147 3
a149 2
C**        IPEN  = MOD(N,10)
           IPEN  = 0
d151 28
a178 22
           IK    = 1
   42      CONTINUE
              IF (IK .GT. NKEY) GOTO 46
              IKEY = DBUF(1,IK)
              IF (IKEY .GE. IGO) THEN
                IF (IKEY .GT. ISTOP) GOTO 46
                NDATA = NDATA + 1
                DATA(2,NDATA) = (DBUF(IYREG,IK) - SYMIN) * YFACTR
                IF (VSKEY) THEN
                   DATA(1,NDATA) = (IKEY - SXMIN) * XFACTR
                ELSE
                   DATA(1,NDATA) = (DBUF(IXREG,IK) - SXMIN) * XFACTR
                ENDIF
                IF (NDATA .GE. NSIZE) THEN
C                  ARRAY FULL
                   XLAST = DATA(1,NDATA)
                   YLAST = DATA(2,NDATA)
                   CALL CSPUSH(LUNCS,DATA,NDATA,NF,1,ICNTR)
                   DATA(1,1) = XLAST
                   DATA(2,1) = YLAST
                   NDATA = 1
                ENDIF
d180 3
a182 5
              IK = IK + 1
           GOTO 42
   46      CONTINUE
           CALL CSPUSH(LUNCS,DATA,NDATA,NF,1,ICNTR)

a183 7
C       SET TEXT CHARACTARISTICS AGAIN FOR LABEL
        ITANGL = 0
        ITSIZE = 32
        JUST   = 0
        INTEN  = 9
        IFON   = 0
        IPEN   = 0
d185 5
a189 15
C       ADD DUMMY CHAR AT LOWER RIGHT TO HELP SCALING OF TEXT ON LABEL
        XPOS = (SXMAX - SXMIN) * XFACTR + 4.0
        YPOS = -12.0
        LABEL(1:1) = ' '
        CALL CSPSTX(LABEL,1,LUNCS,NF,0,ITEXT)

C       ADD DUMMY CHAR AT LOWER LEFT TO HELP SCALING OF TEXT ON AXIS
        XPOS = -24.0
        YPOS = -12.0
        LABEL(1:1) = ' '
        CALL CSPSTX(LABEL,1,LUNCS,NF,1,ITEXT)

C       PUT CNT AND DOC FILENAME AT TOP
        NC = NLETC + NLETD + 12
        LINE = CSFILE(:NLETC) // '      '// DOFILE(:NLETD) // '      ' 
d201 6
a206 14
          L    = ILIST(I)
          LENT = MAX(4,NUMDIG(L,1))

C         WRITE Y REG NUMBER
          WRITE(FMT1(3:3),8009) L
8009      FORMAT(I1)
          WRITE(LINE(NC+1:NC+LENT),FMT1,ERR=60) L

C**       WRITE(LINE(NC+1:NC+LENT),8003,ERR=60) L
C**8003   FORMAT(I<LENT>)

          LINE(NC+LENT+1:NC+LENT+2) = ', '
          NC = NC + LENT + 2
   60     CONTINUE
d209 2
a210 2

       LINE(NC-1:NC+2) = ' VS '
d212 3
a214 2
          LINE(NC+3:NC+5) = 'KEY'
          NC = NC + 5
a215 3
          L    = IXREG - 1
          LENT = MAX(4,NUMDIG(L,1))

d217 2
a218 5
          WRITE(FMT1(3:3),8009) L
	  WRITE(LINE(NC+1:NC+LENT),FMT1,ERR=9999) L
c--          WRITE(LINE(NC+1:NC+LENT),FMT1,ERR=60) L
C**       WRITE(LINE(NC+3:NC+LENT+2),8003,ERR=9999) L
          NC   = NC + LENT + 2
d221 24
a244 21
       YPOS = 114.0
       XPOS = -2.0
       CALL CSPSTX(LINE,NC,LUNCS,NF,1,ITEXT)

 9999  CONTINUE

C..    SCALE THE META-FILE, IF ISERCH = 0 THEN SCALING IS DONE BY ONE PASS
       ISERCH = 0
       CALL CSSCALT(LUNCS,ISERCH)

C      STORE ALL CONTROL DATA
       CALL CSTRAP(LUNCS)

       WRITE(NOUT,9045) CSFILE
9045   FORMAT(/' GRAPH PLACED IN: ',A)

C..    CLOSE THE META-FILE 
       CLOSE(LUNCS)

      RETURN
      END
@


1.5
log
@*** empty log message ***
@
text
@a43 1
#ifdef SP_UNIX
a44 4
#else
      INCLUDE 'COMMON1:CONSTG.INC'
#endif
#ifdef SP_UNIX
d46 2
a47 3
#else
      INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
@


1.4
log
@avoid jump inside loop
@
text
@d175 1
a175 1
        DO 40 N = 1,NLIST
d209 1
a209 1
   40   CONTINUE
@


1.3
log
@replaced runtime formats, cosmetic
@
text
@d271 2
a272 1
          WRITE(LINE(NC+1:NC+LENT),FMT1,ERR=60) L
@


1.2
log
@cpp_lines_added
@
text
@d18 1
a18 1
C $$ DPROFD(DOFILE,NLETD,CSFILE,NLETC,DBUF,MAXREG,MAXKEY,NKEY,LUNCS)
d62 1
d66 1
a66 1
      DIMENSION      DATA(3,NSIZE),DBUF(MAXREG,MAXKEY),PLIST(7)
d70 3
a72 1
       
d86 6
a91 6
     &       'ASSIGN COLUMN(S) OF REGISTER(S) TO BE PLOTTED ON Y AXIS',
     &       ' AND THE COLUMN OF ',/,
     &    1X,'REGISTERS TO BE PLOTTED ON THE',
     &       ' X AXIS.  IF THE COLUMN FOR THE X AXIS IS ZERO,',/,
     &    1X,'THEN THE COLUMN OF REGISTERS IS PLOTTED VERSUS REGISTER ',
     &       'KEY.'/)
d95 1
a95 1
     &  'ENTER REGISTER NUMBER(S) FOR Y AXIS',NULL,IRTFLG)
d100 1
a100 1
     &  'ENTER REGISTER NUMBER FOR X AXIS',IRTFLG)
d248 7
a254 2
          WRITE(LINE(NC+1:NC+LENT),8003,ERR=60) L
 8003     FORMAT(I<LENT>)
d268 1
d270 3
a272 1
          WRITE(LINE(NC+3:NC+LENT+2),8003,ERR=9999) L
@


1.1
log
@Initial revision
@
text
@d44 3
d48 4
d53 1
@
