head	1.14;
access;
symbols
	healthdept_2018:1.14
	pre_getangas:1.13
	GPL2010:1.13
	pre_GPL2010:1.12
	pre_var_equation:1.12
	pre_fftwrings:1.12
	pre_opfiles:1.12
	src:1.12
	best-code:1.12
	x-named-regs:1.12
	x:1.12
	v13-00:1.12
	pre_GPL:1.11
	prec_CA:1.11
	noindx:1.11
	Bproc:1.9
	oct21:1.8
	last77:1.8;
locks; strict;
comment	@c @;


1.14
date	2018.10.03.14.34.10;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2010.06.24.13.26.17;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.17.21.03.54;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2000.12.19.20.32.46;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.10.17.13.18.21;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.12.07.16.31.06;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.02.11.16.28.50;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	98.11.05.18.49.16;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.10.10.17.48.11;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.06.14.20.49.42;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.10.23.20.15.56;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.10.10.15.45.13;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.10.04.18.45.22;	author mladjadj;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.31;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.14
log
@email_health_dept
@
text
@
C ++********************************************************************
C                                                                      *
C                                                                      *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  MRROTATE(ROT, PHI, THETA, PSI)                                      *
C                                                                      *
C  PURPOSE:                                                            *

C   TAKES IN ROTATION MATRIX AND RETURNS THE ANGLES USED TO
C    UNDO THAT MATRIX, USING EULER ANGLES.  ROTATION DONE
C    ABOUT Z(PHI), THEN NEW Y(THETA), THEN NEW Z(PSI).
C    OUTPUTS ANGLES TO CHANGE, IN ORDER, TO MATCH VPT TO RPT.
C
C INPUT:
C     ROT(3,3) = ROTATION MATRIX
C OUTPUT
C     PHI, THETA, PSI = ANGLES IN RADIANS
C
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C        0         2         3         4         5         6         7 *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE MRROTATE(ROT, PHI, THETA, PSI)

        INCLUDE 'CMBLOCK.INC'

	DIMENSION         ROT(3,3)
	DOUBLE PRECISION  R3(3,3)
	PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
	PARAMETER (DEPS = 1.0E-7)

	DO    I=1,3
	   DO   J=1,3
	      R3(I,J)=ROT(I,J)
	   ENDDO
	ENDDO

C       LIMIT PRECISION
	DO    J=1,3
	   DO    I=1,3
	      IF(DABS(R3(I,J)).LT.DEPS)  R3(I,J)=0.0D0
	      IF(R3(I,J)-1.0D0.GT.-DEPS)  R3(I,J)=1.0D0
	      IF(R3(I,J)+1.0D0.LT.DEPS)  R3(I,J)=-1.0D0
	   ENDDO	
	ENDDO

	IF(R3(3,3).EQ.1.0)  THEN
	   THETA=0.0
	   PSI=0.0
	   IF(R3(1,1).EQ.0.0)  THEN
	      PHI=DASIN(R3(1,2))
	   ELSE
	      PHI=DATAN2(R3(1,2),R3(1,1))
	   ENDIF
	ELSEIF(R3(3,3).EQ.-1.0)  THEN
	   THETA=QUADPI
	   PSI=0.0
	   IF(R3(1,1).EQ.0.0)  THEN
	      PHI=DASIN(-R3(1,2))
	   ELSE
	      PHI=DATAN2(-R3(1,2),-R3(1,1))
	   ENDIF
	ELSE
	   THETA=DACOS(R3(3,3))
	   ST=DSIGN(1.0D0,DBLE(THETA))
           IF(R3(3,1).EQ.0.0)  THEN
               IF(ST.NE.DSIGN(1.0D0,R3(3,2)))  THEN
                  PHI=1.5*QUADPI
               ELSE
                  PHI=0.5*QUADPI
               ENDIF
            ELSE
               PHI=DATAN2(R3(3,2)*ST,R3(3,1)*ST)
            ENDIF
            IF(R3(1,3).EQ.0.0)  THEN
               IF(ST.NE.DSIGN(1.0D0,R3(2,3)))  THEN
                  PSI=1.5*QUADPI
               ELSE
                  PSI=0.5*QUADPI
               ENDIF
            ELSE
               PSI=DATAN2(R3(2,3)*ST,-R3(1,3)*ST)
            ENDIF
         ENDIF
         IF(PSI.LT.0.0)  PSI=PSI+2*QUADPI
         IF(THETA.LT.0.0)  THETA=THETA+2*QUADPI
         IF(PHI.LT.0.0)  PHI=PHI+2*QUADPI
      END
@


1.13
log
@GPL_2010
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.12
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.11
log
@used parameters instead of common for ntpt
@
text
@d7 23
a29 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.10
log
@cosmetic
@
text
@d15 1
a16 1
C                                                                      *
a37 1

d40 1
a40 1
	DIMENSION ROT(3,3)
@


1.9
log
@header
@
text
@a17 6
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C        0         2         3         4         5         6         7 *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************
a18 4
      SUBROUTINE MRROTATE(ROT, PHI, THETA, PSI)



d29 10
a38 1
C *********************************************************
d40 1
d45 1
a45 1
C
d47 3
a49 2
	DO   J=1,3
	R3(I,J)=ROT(I,J)
d51 8
d60 42
a101 50
c<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
c  Limit precision
	do    j=1,3
	do    i=1,3
	if(dabs(r3(i,j)).lt.deps)  r3(i,j)=0.0d0
	if(r3(i,j)-1.0d0.gt.-deps)  r3(i,j)=1.0d0
	if(r3(i,j)+1.0d0.lt.deps)  r3(i,j)=-1.0d0
	enddo	
	enddo
	if(r3(3,3).eq.1.0)  then
	theta=0.0
	psi=0.0
	if(r3(1,1).eq.0.0)  then
	phi=dasin(r3(1,2))
	else
	phi=datan2(r3(1,2),r3(1,1))
	endif
	elseif(r3(3,3).eq.-1.0)  then
	theta=QUADPI
	psi=0.0
	if(r3(1,1).eq.0.0)  then
	phi=dasin(-r3(1,2))
	else
	phi=datan2(-r3(1,2),-r3(1,1))
	endif
	else
	theta=dacos(r3(3,3))
	st=dsign(1.0d0,DBLE(theta))
		if(r3(3,1).eq.0.0)  then
			if(st.ne.dsign(1.0d0,r3(3,2)))  then
			phi=1.5*QUADPI
			else
			phi=0.5*QUADPI
			endif
		else
       		phi=datan2(r3(3,2)*st,r3(3,1)*st)
		endif
		if(r3(1,3).eq.0.0)  then
			if(st.ne.dsign(1.0d0,r3(2,3)))  then
			psi=1.5*QUADPI
			else
			psi=0.5*QUADPI
			endif
		else
		psi=datan2(r3(2,3)*st,-r3(1,3)*st)
		endif
	endif
	if(psi.lt.0.0)  psi=psi+2*QUADPI
	if(theta.lt.0.0)  theta=theta+2*QUADPI
	if(phi.lt.0.0)  phi=phi+2*QUADPI
@


1.8
log
@trig
@
text
@d1 24
d27 2
a28 1
C *********************************************************
@


1.7
log
@,
@
text
@d16 5
a20 8
      DIMENSION ROT(3,3)
      DOUBLE PRECISION  R3(3,3)
#ifdef SP_F90
	DOUBLE PRECISION  DCOSD,DSIND,DATAN2D
#endif
	data  deps/1.0d-7/
CNO_SAVE
c
d39 1
a39 1
	phi=dasind(r3(1,2))
d41 1
a41 1
	phi=datan2d(r3(1,2),r3(1,1))
d44 1
a44 1
	theta=180.0
d47 1
a47 1
	phi=dasind(-r3(1,2))
d49 1
a49 1
	phi=datan2d(-r3(1,2),-r3(1,1))
d52 1
a52 1
	theta=dacosd(r3(3,3))
d56 1
a56 1
			phi=270.0
d58 1
a58 1
			phi=90.0
d61 1
a61 1
       		phi=datan2d(r3(3,2)*st,r3(3,1)*st)
d65 1
a65 1
			psi=270.0
d67 1
a67 1
			psi=90.0
d70 1
a70 1
		psi=datan2d(r3(2,3)*st,-r3(1,3)*st)
d73 3
a75 6
	if(psi.lt.0.0)  psi=psi+360.0
	if(theta.lt.0.0)  theta=theta+360.0
	if(phi.lt.0.0)  phi=phi+360.0
	 theta=THETA * 3.141592654/180
	 phi=phi* 3.141592654/180
	 psi=psi * 3.141592654/180
@


1.6
log
@*** empty log message ***
@
text
@d18 3
@


1.5
log
@angles corrected.
@
text
@d21 5
a25 3
	DO  11  I=1,3
	DO  11 J=1,3
11	R3(I,J)=ROT(I,J)
d28 2
a29 2
	do  5  j=1,3
	do  5  i=1,3
d33 2
a34 1
5	continue
@


1.4
log
@calculation of angles fixed
@
text
@a14 1
#ifdef SP_UNIX
a15 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
a69 1
      THETA = -SIGN(THETA,ROT(1,3))
d74 2
a75 3
	 st=phi* 3.141592654/180
	 phi=psi * 3.141592654/180
	psi=st
@


1.3
log
@nosave
@
text
@d21 2
a22 1
      REAL SNT, R33
d25 49
a73 10
      R33 = ROT(3,3)
      IF(R33.GT.1.0  .AND. R33.LT.1.1)  R33=1.0
      IF(R33.GT.-1.1 .AND. R33.LT.-1.0) R33=-1.0

      THETA = ACOS(R33)
      ROT(3,3)=R33

C GET SIGN OF THETA:
C   MAKING THE ASSUMPTION THAT PHI (ROTATION ABOUT NEW Z) < 180 DEGREE

d75 7
a81 18

      SNT = SIN(THETA)
C IF THETA IS 0 THEN NOTICE ONLY ONE EFFECTIVE ROTATION ABOUT Z AXIS

      IF(ABS(SNT).GT.0.01) THEN
        IF(ABS(ROT(3,2)/SNT).GT.1.0) GOTO 6789
        IF(ABS(ROT(2,3)/SNT).GT.1.0) GOTO 6789
        PSI = ASIN(ROT(3,2)/SNT)
        PHI = ASIN(ROT(2,3)/SNT)
      ELSE
        PHI = 0.0
        PSI = ASIN(ROT(1,2))
      ENDIF
      RETURN
 6789 DTHETA = THETA * 180/3.141592654
      WRITE(NOUT,*)'   THETA = ',DTHETA
      WRITE(NOUT,720)((ROT(I,J),J=1,3),I=1,3)
 720  FORMAT('  (  ',F6.3,2X,F6.3,2X,F6.3,'  )')
@


1.2
log
@change write(* to write(nout
@
text
@d22 1
@


1.1
log
@Initial revision
@
text
@d15 5
d49 2
a50 2
      WRITE(*,*)'   THETA = ',DTHETA
      WRITE(*,720)((ROT(I,J),J=1,3),I=1,3)
@
