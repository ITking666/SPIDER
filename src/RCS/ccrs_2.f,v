head	1.25;
access;
symbols
	pre_getangas:1.22
	GPL2010:1.22
	pre_GPL2010:1.21
	pre_var_equation:1.21
	pre_fftwrings:1.20
	pre_opfiles:1.19
	src:1.19
	best-code:1.19
	x-named-regs:1.17
	x:1.17
	v13-00:1.17
	pre_GPL:1.15
	prec_CA:1.15
	noindx:1.14
	Bproc:1.7
	oct21:1.2
	last77:1.2;
locks; strict;
comment	@c @;


1.25
date	2013.06.14.14.04.49;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2011.08.04.14.36.27;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2011.07.29.15.20.20;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2010.06.24.13.25.12;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2009.04.28.13.15.35;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2008.02.19.15.24.41;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2006.02.13.18.04.05;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2006.02.07.16.38.08;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.17.20.15.14;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.17.18.08.47;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2003.01.28.21.10.00;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2002.04.30.20.20.28;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.21.20.56.29;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.21.20.53.08;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.18.20.28.38;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.01.17.41.23;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.30.17.45.15;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.29.18.17.40;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2000.05.16.21.12.48;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	2000.02.14.19.38.00;	author bimal;	state Exp;
branches;
next	1.5;

1.5
date	99.12.06.15.30.50;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.12.06.15.18.17;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	99.11.10.23.09.10;	author yuchen;	state Exp;
branches;
next	1.2;

1.2
date	96.09.06.15.22.46;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	96.08.28.13.24.53;	author pawel;	state Exp;
branches;
next	;


desc
@simple CC 2D, in core
@


1.25
log
@nx, comments
@
text
@C++*********************************************************************
C
C  CCRS_2.F                      
C      PGI BUG ON: O(I,J) = CTEMP*CONJG(Y(I,J))*CMPLX(COS(ARG),SIN(ARG))
C      PGI BUG                                  FEB 10 2006 ArDean Leith
C      PGI BUG                                  FEB 10 2006 ArDean Leith
C      MOD PGI COMPILER BUG                     FEB 19 2008 ArDean Leith
C      CCRS_2I                                  APR 27 2009 ArDean Leith
C      CCRS_2_PH                                JUN 30 2011 ArDean Leith
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2013  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  CCRS_2(X,Y,O,LS,NX,NY)
C
C  PURPOSE: CALCULATES CIRCULAR CROSCORRELATION, NON-POWER-OF-TWO 
C           DIMENSIONS
C
C  PARAMETERS:  X,Y  FOURIER TRANSFORMS                    (SENT)
C               O    F(X*CONJG(Y))                         (RET.)
C               LS   NX+2-MOD(NX,2)                    (SENT)
C
C NOTE:  USE CCRS_2I WHEN: O IS SAME ADDRESS AS X!!!!!
C        June 2013 CCRS_2I was buggy when used in oracfmskm.f so
C        reverted that use to: CCRS_2 
C        CCRS_2I is still in use in: corr1.f -> mccf.f -> mccf_p
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************
 
        SUBROUTINE CCRS_2(X,Y,O, LS,NX,NY)

C       REAL   X((NX+2-MOD(NX,2)),NY)
C       ABOVE ON PGI COMPILER 7.1 FAILS TO COMPILE PROPERLY SOMETIMES

        REAL  :: X(LS,NY)
        REAL  :: Y(LS,NY)
        REAL  :: O(LS,NY)
 
	PARAMETER (QUADPI = 3.1415926535897932384)
	PARAMETER (PI2    = 2*QUADPI)

        ITMP = NX / 2
        SX   = PI2 * FLOAT(ITMP)/ FLOAT(NX)
        ITMP = NY / 2
        SY   = PI2 * FLOAT(ITMP)/ FLOAT(NY)

C$omp   parallel do private(i,j,iy,argy,arg,tmpr,tmpi)
        DO J=1,NY
           IY = J - 1
           IF (IY > (NY/2)) IY = IY - NY
           ARGY = SY * IY

           DO I=1,LS,2
              ARG      = SX * (I-1)/2 + ARGY

    	      TMPR     = X(I,J)   * Y(I,J)  + X(I+1,J) * Y(I+1,J)
	      TMPI     = X(I+1,J) * Y(I,J)  - X(I,J)   * Y(I+1,J)

	      O(I,J)   = TMPR * COS(ARG) - TMPI * SIN(ARG)
	      O(I+1,J) = TMPI * COS(ARG) + TMPR * SIN(ARG)
           ENDDO
        ENDDO

        INS = -1
        CALL FMRS_2(O,NX,NY,INS)

        END

C       --------------- CCRS_PH_2 -------------------------------------

        SUBROUTINE CCRS_PH_2(X,Y, LS,NX,NY,IRTFLG)

        IMPLICIT NONE
        INCLUDE 'CMBLOCK.INC'

        REAL             :: X(LS,NY)
        REAL             :: Y(LS,NY)
        INTEGER          :: LS,NX,NY,IRTFLG
 
        REAL             :: SX,SY,ARGY,ARG,TMPR,TMPI,FNRM,BTM
        INTEGER          :: ITMP,K,J,IY,I,INS,NE

        LOGICAL          :: BADBTM 

	REAL, PARAMETER  :: QUADPI = 3.1415926535897932384
	REAL, PARAMETER  :: PI2    = 2*QUADPI

        ITMP   = NX / 2
        SX     = PI2 * FLOAT(ITMP) / FLOAT(NX)
        ITMP   = NY / 2
        SY     = PI2 * FLOAT(ITMP ) / FLOAT(NY)
        BADBTM = .FALSE.

C$omp   parallel do private(i,j,iy,argy,arg,tmpr,tmpi,fnrm,btm,badbtm)
        DO J=1,NY
           IY = J - 1
           IF (IY .GT. (NY/2)) IY = IY - NY
           ARGY = SY * IY

           DO I=1,LS,2
              ARG      = SX * (I-1) / 2 + ARGY

    	      TMPR     = X(I,J)   * Y(I,J)  + X(I+1,J) * Y(I+1,J)
	      TMPI     = X(I+1,J) * Y(I,J)  - X(I,J)   * Y(I+1,J)

	      X(I,  J) = TMPR * COS(ARG) - TMPI * SIN(ARG)
	      X(I+1,J) = TMPI * COS(ARG) + TMPR * SIN(ARG)

              BTM = SQRT(X(I,J)**2 + X(I+1,J)**2)
              IF (BTM .LE. 0.0) THEN
                 BADBTM = .TRUE.
                 EXIT
              ENDIF
                  
	      FNRM = 1.0 / BTM

	      X(I,  J) = X(I,  J) * FNRM
	      X(I+1,J) = X(I+1,J) * FNRM
           ENDDO
        ENDDO

        IF (BADBTM) THEN
           WRITE(NOUT,90) X(I,J), X(I+1,J)
90         FORMAT(' COMPLEX VALUES GIVE DIV. BY ZERO:',1PG14.3)
           CALL ERRT(101,'AVOIDED DIV BY ZERO',NE)
           IRTFLG = 1
           RETURN
        ENDIF
  
        INS = -1
        CALL FMRS_2(X,NX,NY,INS)

        IRTFLG = 0
        END

C      --------------- CCRS_2I -------------------------------------

       SUBROUTINE CCRS_2I(X,Y, LS,NX,NY)

C       REAL   X((NX+2-MOD(NX,2)),NY)

        REAL  :: X(LS,NY)
        REAL  :: Y(LS,NY)
 
	PARAMETER (QUADPI = 3.1415926535897932384)
	PARAMETER (PI2    = 2*QUADPI)

        ITMP = NX / 2
        SX   = PI2 * FLOAT(ITMP) / FLOAT(NX)

        ITMP = NY / 2
        SY   = PI2 * FLOAT(ITMP) / FLOAT(NY)

C$omp   parallel do private(i,j,iy,argy,arg,tmpr,tmpi)
        DO J=1,NY
           IY = J - 1
           IF (IY > (NY/2)) IY = IY - NY
           ARGY = SY * IY

           DO I=1,LS,2
              ARG      = SX * (I-1)/2 + ARGY

    	      TMPR     = X(I,J)   * Y(I,J)  + X(I+1,J) * Y(I+1,J)
	      TMPI     = X(I+1,J) * Y(I,J)  - X(I,J)   * Y(I+1,J)

	      X(I,J)   = TMPR * COS(ARG) - TMPI * SIN(ARG)
	      X(I+1,J) = TMPI * COS(ARG) + TMPR * SIN(ARG)
           ENDDO
        ENDDO

        INV = -1
        CALL FMRS_2(X,NX,NY,INV)

        END


#ifdef NEVER
	      OREAL    = TMPR * COS(ARG) - TMPI * SIN(ARG)
	      OIMG     = TMPI * COS(ARG) + TMPR * SIN(ARG)
	      O(I,J)   = OREAL
              O(I+1,J) = OIMG		 
#endif




#ifdef NEVER
        SUBROUTINE CCRS_PH_2_CMPLX(X,Y, LSC,NX,NY)

        IMPLICIT NONE

        COMPLEX         :: X(LSC, NY)
        COMPLEX         :: Y(LSC, NY)
        COMPLEX         :: CTEMPA,CTEMPB

	REAL, PARAMETER :: QUADPI = 3.141592653589793238462
	REAL, PARAMETER :: PI2=2*QUADPI

        INTEGER         :: LSC,NX,NY,ITMP,J,IY,IX,INS,I
        REAL            :: SX,SY,ARGY,ARG,FVAL
      
        ITMP = NX/2
        SX   = PI2*FLOAT(ITMP)/FLOAT(NX)
        ITMP = NY/2
        SY   = PI2*FLOAT(ITMP)/FLOAT(NY)

        !write(6,*) ' NX:',lsc,NX,NY

C       PHASE CORRELATION
        DO J=1,NY
           IY = J-1
           IF (IY .GT. (NY/2)) IY = IY - NY
           ARGY = SY*IY

           DO I=1,LSC
              IX     = I - 1
              ARG    = SX * IX + ARGY

              CTEMPA = CMPLX(COS(ARG),SIN(ARG))
              CTEMPB = X(I,J) * CONJG(Y(I,J)) * CTEMPA

              X(I,J) = CTEMPB /
     &                 (SQRT(REAL(CTEMPB)**2 + AIMAG(CTEMPB)**2))
           ENDDO
           !write(6,*) ' jfjf:',x(nnnn,j)
        ENDDO

        !call CHKMAX('x',  x,lsc*2*NY)
        !call CHKMin('x',  x,lsc*2*NY)
        !call chkcmplx('x',x,lsc*NY,10,1,lsc)

        INS = -1
        CALL FMRS_2(X,NX,NY,INS)

        !call chkreal('x',x,NX*NY,10,1,NX*NY)

        END
#endif




@


1.24
log
@error trap in phase correl.
@
text
@d14 1
a14 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d32 1
a32 1
C  CCRS_2(X,Y,O,LS,NSAM,NROW)
d39 1
a39 1
C               LS   NSAM+2-MOD(NSAM,2)                    (SENT)
d42 3
d49 1
a49 1
        SUBROUTINE CCRS_2(X,Y,O, LS,NSAM,NROW)
d51 1
a51 1
C       REAL   X((NSAM+2-MOD(NSAM,2)),NROW,NSLICE)
d54 3
a56 3
        REAL  :: X(LS,NROW)
        REAL  :: Y(LS,NROW)
        REAL  :: O(LS,NROW)
d59 1
a59 1
	PARAMETER (PI2=2*QUADPI)
d61 4
a64 4
        ITMP = NSAM / 2
        SX   = PI2 * FLOAT(ITMP)/FLOAT(NSAM)
        ITMP = NROW / 2
        SY   = PI2 * FLOAT(ITMP )/ FLOAT(NROW)
d67 1
a67 1
        DO J=1,NROW
d69 1
a69 1
           IF (IY .GT. (NROW/2)) IY = IY - NROW
d84 1
a84 1
        CALL FMRS_2(O,NSAM,NROW,INS)
d90 1
a90 1
        SUBROUTINE CCRS_PH_2(X,Y, LS,NSAM,NROW,IRTFLG)
d95 3
a97 3
        REAL             :: X(LS,NROW)
        REAL             :: Y(LS,NROW)
        INTEGER          :: LS,NSAM,NROW,IRTFLG
d107 4
a110 4
        ITMP   = NSAM / 2
        SX     = PI2 * FLOAT(ITMP) /FLOAT(NSAM)
        ITMP   = NROW / 2
        SY     = PI2 * FLOAT(ITMP ) / FLOAT(NROW)
d114 1
a114 1
        DO J=1,NROW
d116 1
a116 1
           IF (IY .GT. (NROW/2)) IY = IY - NROW
d150 1
a150 1
        CALL FMRS_2(X,NSAM,NROW,INS)
d157 1
a157 1
       SUBROUTINE CCRS_2I(X,Y, LS,NSAM,NROW)
d159 1
a159 1
C       REAL   X((NSAM+2-MOD(NSAM,2)),NROW,NSLICE)
d161 2
a162 2
        REAL  :: X(LS,NROW)
        REAL  :: Y(LS,NROW)
d165 1
a165 1
	PARAMETER (PI2=2*QUADPI)
d167 5
a171 4
        ITMP = NSAM / 2
        SX   = PI2 * FLOAT(ITMP) / FLOAT(NSAM)
        ITMP = NROW / 2
        SY   = PI2 * FLOAT(ITMP ) / FLOAT(NROW)
d174 1
a174 1
        DO J=1,NROW
d176 1
a176 1
           IF (IY .GT. (NROW/2)) IY = IY - NROW
d181 1
d184 1
d190 2
a191 2
        INS = -1
        CALL FMRS_2(X,NSAM,NROW,INS)
d197 2
a198 3
	      OREAL = TMPR * COS(ARG) - TMPI * SIN(ARG)
	      OIMG  = TMPI * COS(ARG) + TMPR * SIN(ARG)
		 
d204 2
d207 1
a207 1
        SUBROUTINE CCRS_PH_2_CMPLX(X,Y, LSC,NSAM,NROW)
d211 2
a212 2
        COMPLEX         :: X(LSC, NROW)
        COMPLEX         :: Y(LSC, NROW)
d218 1
a218 1
        INTEGER         :: LSC,NSAM,NROW,ITMP,J,IY,IX,INS,I
d221 4
a224 4
        ITMP = NSAM/2
        SX   = PI2*FLOAT(ITMP)/FLOAT(NSAM)
        ITMP = NROW/2
        SY   = PI2*FLOAT(ITMP)/FLOAT(NROW)
d226 1
a226 1
        !write(6,*) ' nsam:',lsc,nsam,nrow
d229 1
a229 1
        DO J=1,NROW
d231 1
a231 1
           IF (IY .GT. (NROW/2)) IY = IY - NROW
d247 3
a249 3
        !call CHKMAX('x',  x,lsc*2*nrow)
        !call CHKMin('x',  x,lsc*2*nrow)
        !call chkcmplx('x',x,lsc*nrow,10,1,lsc)
d252 1
a252 1
        CALL FMRS_2(X,NSAM,nrow,INS)
d254 1
a254 1
        !call chkreal('x',x,nsam*nrow,10,1,nsam*nrow)
@


1.23
log
@cc h
@
text
@d9 1
d14 1
a14 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d85 1
a85 1
C      --------------- CCRS_PH_2 -------------------------------------
d87 1
a87 4
        SUBROUTINE CCRS_PH_2(X,Y, LS,NSAM,NROW)

C       REAL   X((NSAM+2-MOD(NSAM,2)),NROW,NSLICE)
C       ABOVE ON PGI COMPILER 7.1 FAILS TO COMPILE PROPERLY SOMETIMES
d90 1
d92 3
a94 3
        REAL    :: X(LS,NROW)
        REAL    :: Y(LS,NROW)
        INTEGER :: LS,NSAM,NROW,NSLICE
d96 4
a99 2
        REAL    :: SX,SY,ARGY,ARG,TMPR,TMPI,FNRM
        INTEGER :: ITMP,K,J,IY,I,INS
d104 5
d110 1
a110 6
        ITMP = NSAM / 2
        SX   = PI2 * FLOAT(ITMP)/FLOAT(NSAM)
        ITMP = NROW / 2
        SY   = PI2 * FLOAT(ITMP )/ FLOAT(NROW)

C$omp   parallel do private(i,j,iy,argy,arg,tmpr,tmpi,fnrm)
d122 1
a122 1
	      X(I,J)   = TMPR * COS(ARG) - TMPI * SIN(ARG)
d125 7
a131 1
	      FNRM     = 1 / SQRT(X(I,J)**2 + X(I+1,J)**2)
d138 8
d149 1
a189 2


d197 58
@


1.22
log
@GPL_2010
@
text
@d70 1
d73 1
d84 51
@


1.21
log
@*** empty log message ***
@
text
@a9 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d11 5
a15 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d17 1
a17 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d22 1
a22 1
C=* This program is distributed in the hope that it will be useful,    *
d24 1
a24 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a25 1
C=*                                                                    *
d27 1
a27 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.20
log
@PGI MOD in declare bug on 7.1
@
text
@d8 1
d11 1
a11 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d44 1
a44 1
C IMAGE_PROCESSING_ROUTINE
d86 41
@


1.19
log
@real calc now
@
text
@d7 1
d34 1
a34 1
C  CCRS_2(X,Y,O,NSAM,NROW)
d39 3
a41 2
C  PARAMETERS:  X,Y FOURIER TRANSFORMS                    (SENT)
C               O = F(X*CONJG(Y))                         (RET.)
d48 1
a48 1
        SUBROUTINE  CCRS_2(X,Y,O,NSAM,NROW)
d50 6
a55 6
        REAL  X((NSAM+2-MOD(NSAM,2)),NROW)
        REAL  Y((NSAM+2-MOD(NSAM,2)),NROW)
        REAL  O((NSAM+2-MOD(NSAM,2)),NROW)
 
 	INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC' 
a59 1
        NNNN = (NSAM+2-MOD(NSAM,2)) 
d70 2
a71 1
           DO I=1,NNNN,2
@


1.18
log
@PGI COMPILER BUG
@
text
@d6 1
d48 7
a54 5
        COMPLEX  X((NSAM+2-MOD(NSAM,2))/2,NROW)
        COMPLEX  Y((NSAM+2-MOD(NSAM,2))/2,NROW)
        COMPLEX  O((NSAM+2-MOD(NSAM,2))/2,NROW)
        COMPLEX  CTEMP

d58 1
a58 1
        NNNN = (NSAM+2-MOD(NSAM,2)) / 2
d64 1
a64 1
c$omp   parallel do private(i,j,iy,argy,arg,ctemp)
d69 6
a74 10
           DO I=1,NNNN
              ARG = SX * (I-1) + ARGY

C  PGI OP64 BUG: O(I,J) = X(I,J)*CONJG(Y(I,J))*CMPLX(COS(ARG),SIN(ARG))
C  WORKS:     CTEMP  = CMPLX(COS(ARG),SIN(ARG))
C             O(I,J) = X(I,J)*CONJG(Y(I,J))*CTEMP
C             CMPLX(TCOS,SQRT(1-(TCOS**2))) IS FASTER & SHOULD WORK? al

              CTEMP  = CMPLX(COS(ARG),SIN(ARG))
              O(I,J) = X(I,J) * CONJG(Y(I,J)) * CTEMP
d83 6
a88 66


#ifdef NEVER 10 feb 2005 al

c                 O(I,J) = X(I,J)*CONJG(Y(I,J))*CMPLX(COS(ARG),SIN(ARG))
c                 CTEMP  = X(I,J)
c                 O(I,J) = CTEMP*CONJG(Y(I,J))*CMPLX(COS(ARG),SIN(ARG))
C ERROR NOT DUE TO OMP----------------------
C
C                 O(I,J) = X(I,J)*CONJG(Y(I,J))*CMPLX(COS(ARG),SIN(ARG))
C
c           CTEMP  = X(I,J)*CONJG(Y(I,J))*CMPLX(COS(ARG),SIN(ARG))
c           O(I,J) = CTEMP
c
c           O(I,J) = X(I,J)*CONJG(Y(I,J))*CMPLX(COS(ARG),SIN(ARG))
C           different error!!!   peak: 0.00, 0.00, 0.00
C
C           CTEMP = CMPLX(COS(ARG),SIN(ARG))
C           O(I,J) = X(I,J)*CONJG(Y(I,J))*CTEMP
C           OK
C
c           CTEMP = X(I,J)
c           O(I,J) = CTEMP*CONJG(Y(I,J))*CMPLX(COS(ARG),SIN(ARG))
C           OK
C

orig
2.794u 0.226s 0:03.02 99.6%     0+0k 0+0io 0pf+0w    2000

               ARG    = SX * (I-1) + ARGY
               CTEMP  = X(I,J)
2.755u 0.261s 0:03.01 100.0%    0+0k 0+0io 0pf+0w
2.747u 0.239s 0:02.99 99.3%     0+0k 0+0io 0pf+0w
2.760u 0.251s 0:03.01 100.0%    0+0k 0+0io 0pf+0w

                 CTEMP  = CMPLX(COS(ARG),SIN(ARG))
2.504u 0.262s 0:02.77 99.6%     0+0k 0+0io 0pf+0w
2.494u 0.277s 0:02.78 99.2%     0+0k 0+0io 0pf+0w

no-optimize
2.506u 0.251s 0:02.97 92.5%     0+0k 0+0io 0pf+0w
2.542u 0.239s 0:02.78 99.6%     0+0k 0+0io 0pf+0w
2.554u 0.254s 0:02.82 99.2%     0+0k 0+0io 0pf+0w
optimized
2.519u 0.286s 0:02.83 98.5%     0+0k 0+0io 0pf+0w
2.523u 0.254s 0:02.77 100.0%    0+0k 0+0io 0pf+0w

                 tcos   = cos(arg)
                 CTEMP  = CMPLX(tcos,sqrt(1-tcos**2))
2.406u 0.240s 0:02.65 99.6%     0+0k 0+0io 0pf+0w
2.409u 0.251s 0:02.66 99.6%     0+0k 0+0io 0pf+0w

                 O(I,J) = X(I,J) * CONJG(Y(I,J)) *CMPLX(tcos,sqrt(1-tcos**2))
2.413u 0.246s 0:02.71 97.7%     0+0k 0+0io 0pf+0w
2.396u 0.262s 0:02.66 99.6%     0+0k 0+0io 0pf+0w

with mp
3.004u 1.276s 0:02.65 161.1%    0+0k 0+0io 0pf+0w
2.891u 1.385s 0:02.71 157.5%    0+0k 0+0io 0pf+0w
2.917u 1.377s 0:02.65 161.5%    0+0k 0+0io 0pf+0w
2.950u 1.321s 0:02.64 161.7%    0+0k 0+0io 0pf+0w

no mp
2.503u 0.249s 0:02.75 99.6%     0+0k 0+0io 0pf+0w
2.502u 0.264s 0:02.77 99.6%     0+0k 0+0io 0pf+0w

a89 1

@


1.17
log
@GPL License fixed
@
text
@d4 2
a5 1
C
d52 1
a52 1
	PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
d55 21
a75 26
        NNNN = (NSAM+2-MOD(NSAM,2))/2
        ITMP = NSAM/2
        SX   = PI2*FLOAT(ITMP)/FLOAT(NSAM)
        ITMP = NROW/2
        SY   = PI2*FLOAT(ITMP)/FLOAT(NROW)

#if defined (__linux__)
c$omp      parallel do private(i,j,ix,iy,argy,arg,ctemp)
#else
c$omp      parallel do private(i,j,ix,iy,argy,arg)
#endif
           DO J=1,NROW
              IY = J-1
              IF (IY .GT. NROW/2) IY = IY - NROW
              ARGY = SY*IY
              DO I=1,NNNN
                 IX  = I-1
                 ARG = SX * IX + ARGY
#if defined      (__linux__)
C                REQUIRED BY ONE LINUX COMPILER FOR CORRECTNESS MAY 01
                 CTEMP  = X(I,J)*CONJG(Y(I,J))*CMPLX(COS(ARG),SIN(ARG))
                 O(I,J) = CTEMP
#else
                 O(I,J) = X(I,J)*CONJG(Y(I,J))*CMPLX(COS(ARG),SIN(ARG))
#endif
              ENDDO
d77 1
a77 2


d83 69
@


1.16
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a5 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 6

C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a42 1
C--************************************************************************
@


1.15
log
@SP_LINUX
@
text
@d1 1
d8 24
d50 1
@


1.14
log
@phase parameter removed
@
text
@d43 1
a43 1
#if defined (SP_LINUX)
d55 1
a55 1
#if defined      (SP_LINUX)
@


1.13
log
@ctemp not shared ! bug
@
text
@d3 1
a3 1
C  CCRS_2.F                      ADDED PHASE CORRELATION MAR 02 AL & CR
d14 1
a14 1
C  CCRS_2(X,Y,O,NSAM,NROW,PHASE)
d21 1
a21 1
C               PHASE  LOGICAL VARIABLE FOR PHASE CORREL  (SENT)
d27 1
a27 1
        SUBROUTINE  CCRS_2(X,Y,O,NSAM,NROW,PHASE)
a32 1
        LOGICAL :: PHASE
a42 1
        IF (.NOT. PHASE) THEN
a64 10
        ELSE
C          PHASE CORRELATION
c$omp      parallel do private(i,j,ix,iy,argy,arg,ctemp)
           DO J=1,NROW
              IY = J-1
              IF (IY .GT. NROW/2) IY = IY - NROW
              ARGY=SY*IY
              DO I=1,NNNN
                 IX  = I-1
                 ARG = SX * IX + ARGY
a65 7
C                REQUIRED BY ONE LINUX COMPILER FOR CORRECTNESS MAY 01
                 CTEMP  = X(I,J)*CONJG(Y(I,J))*CMPLX(COS(ARG),SIN(ARG))
                 O(I,J) = CTEMP /
     &                    (SQRT(REAL(CTEMP)**2 + AIMAG(CTEMP)**2))
              ENDDO
           ENDDO
        ENDIF
@


1.12
log
@cosmetic
@
text
@a68 1
#if defined (SP_LINUX)
a69 3
#else
c$omp      parallel do private(i,j,ix,iy,argy,arg)
#endif
@


1.11
log
@phase correl.
@
text
@d14 1
a14 1
C  CCRS_2(X,Y,O,NSAM,NROW)
d19 3
a21 3
C  PARAMETERS:  X,Y FOURIER TRANSFORMS                 (SENT)
C               O = F(X*CONJG(Y))                      (RET.)
C
@


1.10
log
@cpp for ctemp inside private
@
text
@d3 1
a3 1
C  CCRS_2.F 
d5 8
a12 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
C **************************************************************************
d27 1
a27 1
        SUBROUTINE  CCRS_2(X,Y,O,NSAM,NROW)
d33 1
d44 3
a46 2
#if defined  (SP_LINUX)
c$omp   parallel do private(i,j,ix,iy,argy,arg,ctemp)
d48 1
a48 1
c$omp   parallel do private(i,j,ix,iy,argy,arg)
d50 11
a60 11
        DO J=1,NROW
           IY = J-1
           IF (IY .GT. NROW/2) IY = IY - NROW
           ARGY=SY*IY
           DO I=1,NNNN
              IX     = I-1
              ARG    = SX * IX + ARGY
#if defined  (SP_LINUX)
C             REQUIRED BY ONE LINUX COMPILER FOR CORRECTNESS MAY 01
              CTEMP  = X(I,J)*CONJG(Y(I,J))*CMPLX(COS(ARG),SIN(ARG))
              O(I,J) = CTEMP
d62 1
a62 1
              O(I,J) = X(I,J)*CONJG(Y(I,J))*CMPLX(COS(ARG),SIN(ARG))
d64 17
d82 5
d88 1
a88 1
        ENDDO
@


1.9
log
@CTEMP IS complex
@
text
@d44 3
d48 1
@


1.8
log
@bug fix for Linux compiler
@
text
@d33 1
@


1.7
log
@*** empty log message ***
@
text
@a13 3
C  CALCULATES CIRCULAR CROSCORRELATION, NON-POWER-OF-TWO DIMENSIONS
C  INPUT - X,Y FOURIER TRANSFORMS
C  OUTPUT -  O=F(X*CONJG(Y))
d15 1
d17 6
a24 1
C        1         2         3         4         5         6         7
d29 1
d33 1
d36 1
a36 6
C
C       INS=1
C       CALL  FMRS_2(X,NSAM,NROW,INS)
C       IF(INS.EQ.0)  RETURN
C       CALL  FMRS_2(Y,NSAM,NROW,INS)
C
d38 9
a46 8
        ITMP=NSAM/2
        SX=PI2*FLOAT(ITMP)/FLOAT(NSAM)
        ITMP=NROW/2
        SY=PI2*FLOAT(ITMP)/FLOAT(NROW)
c$omp parallel do private(i,j,ix,iy,argy,arg)
        DO    J=1,NROW
           IY=J-1
           IF(IY.GT.NROW/2)  IY=IY-NROW
d48 11
a58 4
           DO    I=1,NNNN
              IX=I-1
              ARG=SX*IX+ARGY
              O(I,J)=X(I,J)*CONJG(Y(I,J))*CMPLX(COS(ARG),SIN(ARG))
d62 3
a64 2
        INS=-1
        CALL  FMRS_2(O,NSAM,NROW,INS)
@


1.6
log
@adapted for dynamical memory allocation
@
text
@a25 2


d29 2
a30 2
        DOUBLE PRECISION  PI2

a37 1
        PI2=8.0*DATAN(1.0D0)
@


1.5
log
@bad comment
@
text
@d12 1
a12 1
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
d14 3
d18 5
d25 2
a26 1
	SUBROUTINE  CCRS_2(X,Y,O,NSAM,NROW)
d28 28
a55 1
	DIMENSION  X(*),Y(*),O(*)
d57 3
a59 2
	CALL  CCRS_2R(X,Y,O,(NSAM+2-MOD(NSAM,2))/2,NSAM,NROW)
	END
@


1.4
log
@cosmetic
@
text
@a14 1
 C
@


1.3
log
@a
@
text
@d3 1
a3 1
C $$ CCRS_2.FOR
d15 1
a15 2
C
C
d17 1
a17 3
C
C $$ CCRS_2.FOR
C
d19 1
@


1.2
log
@nosave
@
text
@d23 1
a23 1
CNO_SAVE
@


1.1
log
@Initial revision
@
text
@d23 1
@
