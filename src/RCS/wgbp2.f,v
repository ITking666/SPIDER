head	1.33;
access;
symbols
	pre_mrcs:1.33
	healthdept_2018:1.33
	pre_getangas:1.28
	GPL2010:1.28
	pre_GPL2010:1.27
	pre_var_equation:1.27
	pre_fftwrings:1.27
	pre_opfiles:1.27
	src:1.27
	best-code:1.27
	x-named-regs:1.27
	x:1.27
	v13-00:1.27
	pre_GPL:1.25
	prec_CA:1.23
	noindx:1.19
	Bproc:1.18
	oct21:1.18
	last77:1.11;
locks; strict;
comment	@c @;


1.33
date	2018.10.03.14.51.09;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2014.02.03.14.06.39;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2014.01.31.15.59.45;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2014.01.12.18.57.17;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2012.01.06.14.57.39;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2010.06.24.13.27.17;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2005.10.17.20.11.52;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2005.10.17.18.05.59;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2005.08.05.14.51.43;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2005.08.03.18.31.46;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2003.05.02.20.09.20;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2003.04.30.13.49.28;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2003.02.20.14.58.06;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2003.02.19.21.24.22;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2002.03.11.14.08.00;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	99.07.22.18.16.13;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	99.07.01.15.26.13;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	99.06.14.12.24.30;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	99.05.21.12.32.56;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	99.04.15.13.49.23;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	99.04.13.18.15.56;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.04.13.18.10.05;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	97.10.17.15.19.34;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	97.10.15.17.10.15;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	97.08.15.16.01.16;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	96.10.24.16.21.17;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	95.02.16.17.01.31;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	94.10.07.15.33.49;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	94.07.27.15.30.53;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	94.07.25.20.20.22;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	94.07.22.20.28.30;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.12.40;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.53.50;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.33
log
@email_health_dept
@
text
@
C ++********************************************************************
C                                                                      *
C  WGBP2        SIMPLIFIED VERSION               01/04/94 PAWEL PENCZEK
c               OPFILEC                          FEB  03 ARDEAN LEITH
C               SPEEDED UP (36%) & USED ALLOC    APR  03 ARDEAN LEITH
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  WGBP2(MAXMEM) 
C                                                               
C  PURPOSE:   WEIGHTED BACK-PROJECTION WITH PARZEN FILTER.
C             RECONSTRUCTION KEPT IN THE SQUARE
C             RECONSTRUCTION FROM NROWL TO NROWH.
C             AVERAGE OUTSIDE THE WINDOW IS SUBTRACTED
C             GEOMETRY  CYLINDRICAL
C
C  CALL TREE:  WGBP2  ---->   PREPSL_2L
C                             RDPA
C                             FFTR_Q
C                             BCKC0_L

C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

	SUBROUTINE WGBP2(MAXMEM)

C       THIS ROUTINE OPENS FILES ON LUNS: IOFF....IOFF+NILMAX-1
#ifdef SP_MP
	PARAMETER  (NILMAX=25 )
#else
	PARAMETER  (NILMAX=91 )
#endif

        INCLUDE 'CMBLOCK.INC' 
        INCLUDE 'CMLIMIT.INC' 
        INCLUDE 'F90ALLOC.INC'

	CHARACTER(LEN=MAXNAM) :: FINPAT,FINPIC,FINFO,ANGDOC
	COMMON  /COMMUN/         FINPAT,FINPIC,FINFO,ANGDOC

        REAL, DIMENSION(:,:), POINTER     :: PANG
        REAL, ALLOCATABLE, DIMENSION(:)   :: Q_ANG,Q_PROJ,Q_WGH,Q_BCK
        REAL, ALLOCATABLE, DIMENSION(:,:) :: DM,Q_PRJE
	DOUBLE PRECISION                  :: ABA
	LOGICAL                           :: OPENED

	COMMON        IPCUBE(5,1)

        DATA  LUNDOC/70/,LUNOUT/99/,IOFF/7/

        NUMMAX = NIMAX

        WRITE(NOUT,*)  ' SINGLE-TILT 3D-WEIGHTED BACKPROJECTION'

C       GET THE INPUT IMAGE FILE LISTING
        CALL FILELIST(.TRUE.,LUNOUT,FINPAT,NLET,
     &     INUMBR,NUMMAX,NANG,'TEMPLATE FOR 2-D IMAGES',IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(101,'WITH FILE TEMPLATE',NE)
           GOTO 9999
        ENDIF  

C       NANG - NUMBER OF ANGLES (PROJECTIONS)
	WRITE(NOUT,2001) NANG
2001	FORMAT('  NUMBER OF PROJECTION IMAGES: ',I0)

C       RETRIEVE ARRAY WITH ANGLES DATA IN IT
        MAXNUM = MAXVAL(INUMBR(1:NANG))
        MAXXT  = 4
        MAXYT  = MAXNUM
        CALL GETDOCDAT('ANGLES DOCUMENT',.TRUE.,ANGDOC,LUNDOC,.FALSE.,
     &                 MAXXT,MAXYT,PANG,IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(4,'WGBP2 ',NE)
           GOTO 9999
        ENDIF       

        ALLOCATE (Q_ANG(NANG),DM(9,NANG), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'Q_ANG...',IER)
           GOTO 9999
        ENDIF

        DO I = 1, NANG
            Q_ANG(I) = PANG(3,INUMBR(I))
        ENDDO
        IF (ASSOCIATED(PANG))  DEALLOCATE(PANG)

C       OPEN ALL THE PROJECTION FILES,IF THE NUMBER IS LESS THAN NILMAX
	IF (NANG .LE. NILMAX)  THEN
	   OPENED = .TRUE.
           KE     = NANG
        ELSE
           OPENED = .FALSE.
           KE     = 1
        ENDIF

        MAXIM = 0
	DO K=1,KE
 	   CALL  FILGET(FINPAT,FINPIC,NLET,INUMBR(K),INTFLG)
           LUN = IOFF + K
           CALL OPFILEC(0,.FALSE.,FINPIC,LUN,'O',ITYPE,NSAM,NROW,NSL,
     &                   MAXIM,' ',.FALSE.,IRTFLG)
 	   IF (IRTFLG .NE. 0) GOTO 9999
	ENDDO
        IF (.NOT. OPENED) CLOSE(IOFF+1)

        IRI    = NSAM / 2
        NSLICE = NSAM
        CALL RDPRIS(IRI,NSLICE,NOT_USED,
     &	   'RADIUS & HEIGHT OF RECONSTRUCTED OBJECT',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999
        RI = IRI

        NROWL = 1
        NROWH = NROW
        CALL  RDPRIS(NROWL,NROWH,NOT_USED,
     &	            'RECONSTRUCTION RANGE IN Y',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

	IF (NROWL.LT.1 .OR. NROWL.GT.NROW .OR.
     &      NROWH.LT.1 .OR. NROWH.GT.NROW .OR.
     &	    NROWL.GT.NROWH)  THEN
	   NROWL = 1
	   NROWH = NROW
        ENDIF
	LCYL = NROWH - NROWL + 1

        FM = 0.3
        CALL RDPRM1S(FM,NOT_USED,
     &		   'FREQUENCY CUT-OFF FOR PARZEN FILTER',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

	MK = 1
	M2 = 0
5	MK = MK*2
	M2 = M2+1
	IF (MK .LT. NSAM-1)  GOTO  5

 	MK     = MK*2
	M2     = M2+1

	LDPX   = NSAM/2+1
	LDPY   = NROW/2+1
	LDPZ   = NSLICE/2+1
	LDPNMX = NSAM/2+1
	LDPNMY = NROW/2+1

C       CREATES DM MATRIX HERE
	CALL RDPA(NANG,Q_ANG,DM)

C       RETURNS VALUE OF NN AND FILLS THE IPCUBE ARRAY
	CALL PREPSL_2L(NSAM,NSLICE,NN,NMAT,IPCUBE,RI,LDPX,LDPZ)
	NMAT = NSAM * NSLICE

	MEMTOT  = NANG + 9*NANG + 2*MK + NSAM*NANG + NSAM*NSLICE
	WRITE(NOUT,90)  MEMTOT *4 
90	FORMAT(/,'  MEMORY ALLOCATION (BYTES): ',I8,/)

        ALLOCATE(Q_PROJ(MK),Q_PRJE(NSAM,NANG),Q_WGH(MK),
     &           Q_BCK(NSAM*NSLICE),STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'Q_PROJ...',IER)
           GOTO 9999
        ENDIF

C       OPEN OUTPUT VOLUME
	IFORM = 3
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FINFO,LUNOUT,'U',IFORM,NSAM,LCYL,NSLICE,
     &                   MAXIM,'3-D OUTPUT',.FALSE.,IRTFLG)
	IF (IRTFLG .NE. 0)  GOTO 9999

C   On Linux when the file is created and written in a nmon-consecutive order,
C    the resulting file is fragmented and access is very slow.  Thus, first
C    we have to write the whole file in a consecutive order, close it,
C    and open again.   Hopefuly, this will fix the problem.  PAP  08/03/05.

	Q_BCK(1:NSAM)=0.0
	DO  K=1,NSLICE
	   DO  J=1,LCYL
	      CALL  WRTLIN(LUNOUT,Q_BCK,NSAM,(K-1)*LCYL+J)
	   ENDDO
	ENDDO
	CLOSE(LUNOUT)

C       Open again!
        CALL OPFILEC(0,.FALSE.,FINFO,LUNOUT,'O',IFORM,NSAM,LCYL,NSLICE,
     &                   MAXIM,' ',.FALSE.,IRTFLG)
	IF (IRTFLG .NE. 0)  GOTO 9999
C	
	DO I=3,MK,2
	   Q_WGH(I)   = I/2
	   Q_WGH(I+1) = Q_WGH(I)
	ENDDO

	Q_WGH(1) = 1
	Q_WGH(2) = MK/2

	IF (FM .NE. 0.0)  THEN
	   DO I=3,MK,2
	      J = I/2
	      FQ   = FLOAT(J)/FLOAT(MK)
	      PARZ = 0.0
	      IF (FQ .LE. FM) THEN
                 IF (FQ .LE. (FM/2.0)) THEN
  	            PARZ = 1.0-6.0*(FQ/FM)**2*(1.0-FQ/FM)
	         ELSE
  	            PARZ = 2.0*(1.0-FQ/FM)**3
                 ENDIF
              ENDIF
  	      Q_WGH(I)   = Q_WGH(I)   * PARZ
	      Q_WGH(I+1) = Q_WGH(I+1) * PARZ
	   ENDDO

	   FQ   = 0.5
	   PARZ = 0.0
	   IF (FQ .LE. FM) THEN
              IF (FQ .LE. (FM/2.0)) THEN
                 PARZ = 1.0-6.0*(FQ/FM)**2*(1.0-FQ/FM)
              ELSE
                 PARZ = 2.0*(1.0-FQ/FM)**3
              ENDIF
           ENDIF
 	   Q_WGH(2) = Q_WGH(2)*PARZ
       	ENDIF

	NMAT = NSAM * NSLICE

C       LOOP OVER ALL ROWS IN THE OUTPUT VOLUME
	DO LS=NROWL,NROWH

C          GET PROJECTION DATA FROM INPUT FILE
	   IF (OPENED) THEN 
	      DO J=1,NANG
	         CALL REDLIN(IOFF+J,Q_PRJE(1,J),NSAM,LS)
	      ENDDO
	   ELSE
	      DO J=1,NANG
                 MAXIM = 0
	         CALL FILGET(FINPAT,FINPIC,NLET,INUMBR(J),INTFLG)
                 CALL OPFILEC(0,.FALSE.,FINPIC,IOFF+1,'O',ITYPE,
     &                   NSAM,NROW,NSL, MAXIM,' ',.FALSE.,IRTFLG)
 	         IF (IRTFLG .NE. 0)  RETURN

	         CALL REDLIN(IOFF+1,Q_PRJE(1,J),NSAM,LS)
	         CLOSE(IOFF+1)
	      ENDDO
	   ENDIF

C          CALCULATE AVERAGE
	   IF (LS .EQ. NROWL) THEN
	      ABA = 0.0D0
c$omp      parallel do private(i,j),reduction(+:aba)
	      DO J=1,NANG
	        DO I=1,NSAM
	           ABA = Q_PRJE(I,J) + ABA
	        ENDDO
	      ENDDO
	      ABA = ABA / NANG / NSAM
	   ENDIF

C          REMOVE AVERAGE
	   DO J=1,NANG
c$omp parallel sections
c$omp section
	      DO I=1,NSAM
	        Q_PROJ(I) = Q_PRJE(I,J) - ABA
	      ENDDO
c$omp section
	      DO I=NSAM+1,MK
	         Q_PROJ(I) = 0.0
	      ENDDO
c$omp end parallel sections
	      CALL  FFTR_Q(Q_PROJ,M2)
c$omp      parallel do private(i)
	      DO I=1,MK
	         Q_PROJ(I) = Q_PROJ(I)*Q_WGH(I)
	      ENDDO
	      CALL FFTR_Q(Q_PROJ,-M2)
c$omp      parallel do private(i)
	      DO I=1,NSAM
	         Q_PRJE(I,J) = Q_PROJ(I)
	      ENDDO
	   ENDDO

C          ZERO THE OUTPUT SLAB
c$omp      parallel do private(i)
           DO I=1,NMAT
              Q_BCK(I) = 0.0
           ENDDO

C          BACK-PROJECT OVER ALL THE ANGLES
           DO I=1,NANG
              CALL BCKC0_L(Q_BCK,NMAT,DM(1,I),Q_PRJE(1,I),NSAM,
     &                    IPCUBE,NN,LDPNMX)
           ENDDO

C          DIVIDE BY NUMBER OF PIXELS PROJECTED
           FCON = 1.0  / NANG / NSAM
c$omp      parallel do private(i)
           DO I=1,NMAT
              Q_BCK(I) = Q_BCK(I) * FCON
	   ENDDO

C          SAVE THIS SLAB IN OUTPUT
	   DO IRC=1,NSLICE
	     IRB = 1+(IRC-1 )* NSAM
	     CALL WRTLIN(LUNOUT,Q_BCK(IRB),NSAM,(IRC-1)*LCYL+LS-NROWL+1)
	   ENDDO

	ENDDO

C       CLOSE OUTPUT FILE
	CLOSE(LUNOUT)
 
C       CLOSE ALL PROJECTION FILES ,IF THE NUMBER IS LESS THAN NILMAX
	IF (NANG .LE. NILMAX)  THEN
	   DO K=1,NANG
 	     CLOSE(IOFF+K)
	   ENDDO
	ENDIF

9999	IF (ALLOCATED(Q_PROJ))  DEALLOCATE (Q_PROJ)
   	IF (ALLOCATED(Q_PRJE))  DEALLOCATE (Q_PRJE)
   	IF (ALLOCATED(Q_WGH))   DEALLOCATE (Q_WGH)
   	IF (ALLOCATED(Q_BCK))   DEALLOCATE (Q_BCK)
   	IF (ALLOCATED(Q_ANG))   DEALLOCATE (Q_ANG)
   	IF (ALLOCATED(DM))      DEALLOCATE (DM)

        RETURN
	END



C ++********************************************************************
C                                                                      *
C                                                                      *
C **********************************************************************
C                                                                      *
C  PREPSL_2(NSAM,NSLICE,NN,NMAT,IPCUBE,RI)                                                                    *
C                                                                      *
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C  IPCUBE: 1 - BEGINNING
C          2 - END
C          3 - IX
C          4 - IY
C          5 - IZ
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

	SUBROUTINE PREPSL_2L(NSAM,NSLICE,NN,NMAT,IPCUBE,RI,LDPX,LDPZ)

	INTEGER       IPCUBE(5,*)
	LOGICAL       FIRST

	R    = RI * RI
	NN   = 0
	NMAT = 0

	DO I1=1,NSLICE
	   T     = I1 - LDPZ
	   XX    = T * T
	   FIRST = .TRUE.
	   DO I3=1,NSAM
	      NMAT = NMAT + 1
	      T    = I3 - LDPX
	      RC   = T * T + XX
	      IF (FIRST) THEN
	         IF (RC .LE. R) THEN
                    FIRST        = .FALSE.
	            NN           = NN + 1
	            IPCUBE(1,NN) = NMAT
	            IPCUBE(2,NN) = NMAT
	            IPCUBE(3,NN) = I3 - LDPX
	            IPCUBE(4,NN) = 1
	            IPCUBE(5,NN) = I1 - LDPZ
                 ENDIF
	      ELSE
	         IF (RC .LE. R) IPCUBE(2,NN) = NMAT
	      ENDIF
	   ENDDO
	ENDDO

	END


C ++********************************************************************
C                                                                      *
C                                                                      *
C **********************************************************************
C                                                                      *
C  BCKC0_L(CUBE,LTC,DM,B,NSAM,IPCUBE,NN,LDPX,LDPZ,LDPNMX)                                                                    *
C                                                                      *
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

       SUBROUTINE BCKC0_L(CUBE,LTC,DM,B,NSAM,IPCUBE,NN,LDPNMX)

       DIMENSION  DM(9),CUBE(LTC),B(NSAM)
       INTEGER    IPCUBE(5,NN)

       DM1 = DM(1)
       DM3 = DM(3)

c$omp  parallel do  private(i,xb,xbb,j,iqx,dipx)
       DO I=1,NN
C          XB = (IPCUBE(3,I)-LDPX)*DM(1)+(IPCUBE(5,I)-LDPZ)*DM(3)
C	   XB = IPCUBE(3,I) *DM1 + IPCUBE(5,I) * DM3
	   XB = IPCUBE(3,I) *DM1 + IPCUBE(5,I) * DM3 - 
     &          IPCUBE(1,I) *DM1 + LDPNMX

	   DO J=IPCUBE(1,I),IPCUBE(2,I)
C	      XBB     = (J - IPCUBE(1,I)) * DM1 + XB
C	      XBB     =  J * DM1 - IPCUBE(1,I) * DM1 + XB
	      XBB     =  J * DM1 + XB

C	      IQX     = IFIX(XBB + FLOAT(LDPNMX))
	      IQX     = IFIX(XBB)

C	      DIPX    = XBB + LDPNMX - IQX
C	      DIPX    = XBB - IQX

C	      CUBE(J) = CUBE(J) + B(IQX) + DIPX * (B(IQX+1) - B(IQX))
	      CUBE(J) = CUBE(J) + B(IQX) +(XBB - IQX)*(B(IQX+1)-B(IQX))
	   ENDDO
       ENDDO

       END

C     1                 +(1.0-DIPX)*B(IQX)
C     2                 +     DIPX *B(IQX+1)

@


1.32
log
@prompts
@
text
@d14 1
a14 1
C=* Email: spider@@wadsworth.org                                        *
@


1.31
log
@formatting
@
text
@d80 1
a80 1
           CALL ERRT(27,'WGBP2 ',NE)
d132 1
a132 1
     &	   'RADIUS & HEIGHT (NZ) OF RECONSTRUCTED OBJECT',IRTFLG)
d139 1
a139 1
     &	            'RECONSTRUCT FROM  NY1....NY2',IRTFLG)
d208 1
a208 1
C  Open again!
@


1.30
log
@enter
@
text
@d12 1
a12 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d86 1
a86 1
2001	FORMAT(' NUMBER OF PROJECTION IMAGES: ',I5)
d179 1
a179 1
90	FORMAT(/,' MEMORY ALLOCATION (BYTES): ',I8,/)
d194 2
a195 1
C  On Linux when the file is created and written in a nmon-consecutive order,
d199 1
d202 3
a204 3
	DO  J=1,LCYL
	CALL  WRTLIN(LUNOUT,Q_BCK,NSAM,(K-1)*LCYL+J)
	ENDDO
d207 1
a359 2
C                                                                      *
C **********************************************************************
a415 2
C                                                                      *
C **********************************************************************
@


1.29
log
@nx, ny,
@
text
@d78 1
a78 1
     &     INUMBR,NUMMAX,NANG,'ENTER TEMPLATE FOR 2-D IMAGES',IRTFLG)
@


1.28
log
@GPL_2010
@
text
@d132 1
a132 1
     &	   'RADIUS & HEIGHT (NSLICE) OF RECONSTRUCTED OBJECT',IRTFLG)
d139 1
a139 1
     &	            'RECONSTRUCT FROM  NROW1....NROW2',IRTFLG)
@


1.27
log
@GPL License fixed
@
text
@a8 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d10 5
a14 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d16 1
a16 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
a358 23
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
C=*                                                                    *
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* This program is distributed in the hope that it will be useful,    *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
a416 23
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
C=*                                                                    *
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* This program is distributed in the hope that it will be useful,    *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
@


1.26
log
@HRI GPL License used
@
text
@a8 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d12 1
a12 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a31 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a362 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d366 1
a366 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a385 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a443 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d447 1
a447 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a466 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.25
log
@pp parallel sections correected (added)
@
text
@d10 24
d371 24
d459 24
@


1.24
log
@pp fragmented and access is very slow fix for linux
@
text
@d4 1
a4 1
C  WGBP2        SIMPLIFIED VERSION               01/04/94 PAWEL PENCZYK
d259 1
d270 2
d275 1
d279 1
d281 1
d286 1
d306 1
@


1.23
log
@faster
@
text
@d181 16
a196 1

@


1.22
log
@speed & allocation improvements
@
text
@d4 3
a6 3
C  WGBP2C             SIMPLIFIED VERSION         01/04/94 PAWEL PENCZYK
c                     OPFILEC                    FEB  03 ARDEAN LEITH
C                     SPEEDED UP & USED ALLOC    APR  03 ARDEAN LEITH
d157 3
a163 3
C       CREATES DM MATRIX HERE
	CALL RDPA(NANG,Q_ANG,DM)

d166 1
a166 1
90	FORMAT(/,' MEMORY ALLOCATION(BYTES): ',I8,/)
d279 1
a279 1
     &                    IPCUBE,NN,LDPX,LDPZ,LDPNMX)
d369 1
a369 1
	            IPCUBE(3,NN) = I3
d371 1
a371 1
	            IPCUBE(5,NN) = I1
d404 1
a404 1
       SUBROUTINE BCKC0_L(CUBE,LTC,DM,B,NSAM,IPCUBE,NN,LDPX,LDPZ,LDPNMX)
d409 3
d414 5
a418 1
	   XB = (IPCUBE(3,I)-LDPX)*DM(1)+(IPCUBE(5,I)-LDPZ)*DM(3)
d420 12
a431 4
	      XBB     = (J - IPCUBE(1,I)) * DM(1) + XB
	      IQX     = IFIX(XBB + FLOAT(LDPNMX))
	      DIPX    = XBB + LDPNMX - IQX
	      CUBE(J) = CUBE(J) + B(IQX) + DIPX * (B(IQX+1) - B(IQX))
d435 2
d439 1
a439 1
       END
@


1.21
log
@opfilec
@
text
@d1 1
d4 3
a6 2
C  WGBP2                                                               *
C                  OPFILEC                         FEB  03 ARDEAN LEITH
d19 5
a23 7
C  UNIX-SPIDER VERSION
C  WEIGHTED BACK-PROJECTION WITH PARZEN FILTER.
C  RECONSTRUCTION KEPT IN THE SQUARE
C  RECONSTRUCTION FROM NROWL TO NROWH.
C  AVERAGE OUTSIDE THE WINDOW IS SUBTRACTED
C  GEOMETRY  CYLINDRICAL
C  SIMPLIFIED VERSION                               01/04/94
d25 5
d35 1
a35 1
C       NILMXX IS USED IN REPRWB.F,BPS2.F,BPRJ2.F,PRJS2.F  !!!
d37 1
a37 1
	PARAMETER  (NILMAX=25,NILMXX=560)
d39 1
a39 1
	PARAMETER  (NILMAX=91,NILMXX=560)
d44 1
a44 3

	CHARACTER*80      FINPAT,FINPIC
	COMMON  /F_SPEC/  FINPAT,FINPIC,NLET
d46 2
a47 3
        CHARACTER(LEN=MAXNAM)   ::   FINFO
	CHARACTER*1       NULL
	LOGICAL   ::  OPENED
d49 5
a53 7
C       WARNING THIS COMMON IS USED TO TRANSFER DATA !!!! 
	COMMON DUMMY(80),BUF(1024),ILIST(NILMXX),
     &    NSAM,NROW,INANG,NN,NMAT,
     &	  LTB,LTBN,K_ANG,K_DM,K_LB,K_MAP,K_IPCUBE,
     &	  K_BCKE,K_PROJ,K_BCKN,K_PRJE,K_SIGMA,
     &    KDM(7),
     &	  IUNIT,Q(1)
d55 1
a55 1
	COMMON /PAR/  LDPX,LDPY,LDPZ,LDPNMX,LDPNMY
d57 1
a57 2
C       WARNING IOFF SET SAME  IN CALLED ROUTINES
        DATA  INPIC/99/,IOFF/7/
d59 1
a59 1
	NULL = CHAR(0)
d61 1
a61 5
C       N    - LINEAR DIMENSION OF PROJECTIONS AND RESTORED CUBE
C       NANG - NUMBER OF ANGLES (PROJECTIONS)

        WRITE(NOUT,*)  ' SINGLE-TILT 3D-WB RECONSTRUCTION PROGRAM'
	IUNIT = NOUT
d64 6
a69 2
        CALL FILELIST(.TRUE.,INPIC,FINPAT,NLET,
     &     ILIST,NILMXX,NANG,'ENTER TEMPLATE FOR 2-D IMAGE NAME',IRTFLG)
d71 1
d73 1
a73 1
2001	FORMAT(' NUMBER OF IMAGES: ',I5)
d75 16
a90 25
C       GET THE ANGLES

 	K_ANG = 1
 	CALL  FILERD(FINPIC,NLETI,NULL,'ANGULAR DOCUMENT',IRTFLG)
	K2  = 1
        DO  K=0,NANG-1
	   LERR=-1
	   CALL  UNSAV(FINPIC,K,INPIC,ILIST(K+1),BUF,2,LERR,K2)
	   IF (LERR.EQ.0)  THEN
	      Q(K_ANG+K) = BUF(2)
           ELSE
              CALL ERRT(101,'IN THE ANGULAR DOC FILE',IDUM)
              CLOSE(INPIC)
              RETURN
           ENDIF
	ENDDO
	CLOSE(INPIC)

        CALL RDPRMI(IRI,NSLICE,NOT_USED,
     &	   'RADIUS OF RECONSTRUCTED OBJECT, HEIGHT OF THE SLICE')
        RI = IRI
        CALL  RDPRMI(NROWL,NROWH,NOT_USED,
     &	            'RECONSTRUCTION FROM NROW1 TO NROW2')
        CALL RDPRM2(FM,DUM,NOT_USED,
     &		   'FREQUENCY CUT-OFF FOR PARZEN FILTER')
d92 4
a95 2
C       OPEN ALL THE PROJECTION FILES ....
C       ONLY IF THE NUMBER IS LESS THAN NILMAX
d97 1
d105 1
d108 1
a108 1
 	   CALL  FILGET(FINPAT,FINPIC,NLET,ILIST(K),INTFLG)
d112 1
a112 1
 	   IF (IRTFLG .NE. 0)  RETURN
d114 8
a121 1
        IF (.NOT. OPENED)  CLOSE(IOFF+1)
d123 6
d135 6
a140 1
	LCYL = NROWH-NROWL+1
d148 2
a149 4
 	MK = MK*2
	M2 = M2+1

	INANG = NANG
d151 23
a173 26
	LDPX  = NSAM/2+1
	LDPY  = NROW/2+1
	LDPZ  = NSLICE/2+1
	LDPNMX= NSAM/2+1
	LDPNMY= NROW/2+1

 	K_DM  = IPALIGN64(K_ANG+NANG)
	K_LB  = IPALIGN64(K_DM+9*NANG)
	K_MAP = K_LB
	K_IPCUBE = K_MAP

	CALL  PREPSL_2(NSAM,NSLICE,NN,NMAT,Q(K_IPCUBE),RI)
C!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	NMAT   = NSAM*NSLICE

	K_PROJ = IPALIGN64(K_IPCUBE+5*NN)
        K_X    = K_PROJ
        K_IBN  = K_X

	MEMTOT = K_IBN
C	MEMTOT = K_IBN+NANG*N*N
	IF (MEMTOT .GT .MAXMEM)  THEN
	   WRITE(NOUT,1001)  MEMTOT
	   WRITE(NOUT,1002)  MAXMEM
	   GOTO 9999
	ENDIF
d175 1
a175 23
	CALL RDPA(NANG,Q(K_ANG),Q(K_DM),NOUT)
	LTB     = NSAM*NANG
	LTBN    = NSAM*NANG

	K_PRJE  = IPALIGN64(K_PROJ+MK)
	K_SIGMA = IPALIGN64(K_PRJE+NSAM*NANG)
C       LTBN    = NSAM*NANG
	K_BCKE  = IPALIGN64(K_SIGMA+MK)
	K_BCKN  = K_BCKE
        K_CB    = K_BCKE
	MEMTOT  = IPALIGN64(K_BCKN+NMAT)
	WRITE(NOUT,1001)  MEMTOT
1001	FORMAT(//'  REPROJECTION PROGRAM FOR 3-D BACK-PROJECTION',/,
     &     '           MEMORY NEEDED - ',I8,/)

	IF (MEMTOT .GT. MAXMEM)  THEN
	   WRITE(NOUT,1002)  MAXMEM
1002	   FORMAT('  SORRY, YOUR BUFFER LENGTH IS ONLY',I9,/,
     &            '  PROGRAM CANNOT BE RUN')
           CALL ERRT(100,'WGBP2',IDUM)
	   GOTO 9999
	ENDIF

d178 1
a178 1
        CALL OPFILEC(0,.TRUE.,FINFO,INPIC,'U',IFORM,NSAM,LCYL,NSLICE,
d182 116
a297 5
	CALL REPRWB
     &	  (Q(K_BCKN),NSAM,LCYL,NSLICE,NROWL,NROWH,NANG,
     &     Q(K_IPCUBE),NN,Q(K_PROJ),Q(K_SIGMA),MK,M2,Q(K_PRJE),
     &		FM,IRI,LTB,LTBN,INPIC,OPENED)
	CLOSE(INPIC)
d299 1
a299 3
C       CLOSE ALL THE PROJECTION FILES ...
C       ONLY IF THE NUMBER IS LESS THAN NILMAX

d306 7
a312 1
9999	CONTINUE
d315 108
@


1.20
log
@opfilec
@
text
@d192 1
a192 1
        CALL OPFILE(0,.TRUE.,FINFO,INPIC,'U',IFORM,NSAM,LCYL,NSLICE,
@


1.19
log
@nloop,iloop_removed
@
text
@d4 1
d38 2
d42 2
a43 1
	CHARACTER*80      FINFO
d45 1
a45 1
	LOGICAL           OPENED
d115 1
a115 1
           CALL OPFILE(.FALSE.,FINPIC,LUN,'O',ITYPE,NSAM,NROW,NSL,
d192 1
a192 1
        CALL OPFILE(.TRUE.,FINFO,INPIC,'U',IFORM,NSAM,LCYL,NSLICE,
@


1.18
log
@used filelist
@
text
@d89 1
a89 1
        CALL RDPRMI(IRI,NSLICE,NLOOP,ILOOP,
d92 1
a92 1
        CALL  RDPRMI(NROWL,NROWH,NLOOP,ILOOP,
d94 1
a94 1
        CALL RDPRM2(FM,DUM,NLOOP,ILOOP,
@


1.17
log
@bad common fixed
@
text
@d53 1
d63 4
a66 20
 	CALL FILERD(FINPAT,NLET,NULL,
     &	          'ENTER TEMPLATE FOR 2-D IMAGE NAME',IRTFLG)
	CALL FILERD(FINPIC,NLETI,NULL,'SELECTION DOCUMENT',IRTFLG)
	K    = 0
	K2   = 1
	NANG = 0
778	LERR = -1
	IF (NANG .EQ. NILMXX)  THEN
           WRITE(NOUT,*) '*** TOO MANY IMAGES, LIST TRUNCATED'
           GOTO  779
	ENDIF
	KP1 = K+1
	CALL  UNSAV(FINPIC,K,INPIC,KP1,Q,1,LERR,K2)
	IF (LERR .EQ. 0) THEN
	   NANG        = NANG+1
	   ILIST(NANG) = Q(1)
	   K           = K+1
	   GOTO  778
	ENDIF
779	CLOSE(INPIC)
a67 1
C       NANG - TOTAL NUMBER OF IMAGES
d91 1
a91 1
        RI=IRI
d130 1
d134 1
a134 1
	INANG=NANG
d136 10
a145 10
	LDPX=NSAM/2+1
	LDPY=NROW/2+1
	LDPZ=NSLICE/2+1
	LDPNMX=NSAM/2+1
	LDPNMY=NROW/2+1

 	K_DM=IPALIGN64(K_ANG+NANG)
	K_LB=IPALIGN64(K_DM+9*NANG)
	K_MAP=K_LB
	K_IPCUBE=K_MAP
d164 2
a165 2
	LTB=NSAM*NANG
	LTBN=NSAM*NANG
@


1.16
log
@bad lun typo fixed
@
text
@d43 2
a44 1
	COMMON BUF(2024),ILIST(NILMXX),
d57 1
a57 1
C       N - LINEAR DIMENSION OF PROJECTIONS AND RESTORED CUBE
@


1.15
log
@opfile returns 0 if normal !!!!
@
text
@a28 1

d43 1
a43 1
	COMMON DUMMY(80),BUF(1024),ILIST(NILMXX),
d202 1
a202 1
        CALL OPFILE(.TRUE.,FINFO,LUINPICN,'U',IFORM,NSAM,LCYL,NSLICE,
@


1.14
log
@ioff increased (too low), nilmax decreased, opfile, cosmetic
@
text
@d129 1
a129 1
 	   IF (IRTFLG .NE. 2)  RETURN
@


1.13
log
@bad capiltalized cpp stuff changed
@
text
@d1 15
a15 2
	SUBROUTINE WGBP2(MAXMEM)

d22 4
a25 2
C  SIMPLIFIED VERSION
C                01/04/94
d27 2
a28 1
C  NILMXX IS USED IN REPRWB.F,BPS2.F,BPRJ2.F,PRJS2.F  !!!
d30 1
d34 1
a34 1
	PARAMETER  (NILMAX=92,NILMXX=560)
d36 1
d38 1
d40 11
a50 9
	CHARACTER*80  FINPIC,Finfo
	CHARACTER*80  FINPAT
	CHARACTER*1  NULL
	COMMON     DUMMY(80),BUF(1024),ILIST(NILMXX),
     A    NSAM,NROW,INANG,NN,NMAT,
     1	  LTB,LTBN,K_ANG,K_DM,K_LB,K_MAP,K_IPCUBE,
     2	  K_BCKE,K_PROJ,K_bckn,K_PRJE,K_SIGMA,
     3    KDM(7),
     4	  IUNIT,Q(1)
d52 2
a53 3
	LOGICAL OPENED
C
        DATA  INPIC/99/,IOFF/6/
d55 1
a55 1
	NULL=CHAR(0)
d57 2
a58 2
C  N - LINEAR DIMENSION OF PROJECTIONS AND RESTORED CUBE
C  NANG - NUMBER OF ANGLES (PROJECTIONS)
d61 11
a71 11
	IUNIT=NOUT
 	CALL  FILERD(FINPAT,NLET,NULL,
     &	  'ENTER TEMPLATE FOR 2-D IMAGE NAME',IRTFLG)
	CALL  FILERD(FINPIC,NLETI,NULL,'SELECTION DOC',IRTFLG)
	K=0
	K2=1
	NANG=0
778	LERR=-1
	IF(NANG.EQ.NILMXX)  THEN
		WRITE(NOUT,*) '  TOO MANY IMAGES, LIST TRUNCATED'
		GOTO  779
d73 1
a73 1
	KP1=K+1
d75 4
a78 4
	IF (LERR.EQ.0)  THEN
	   NANG=NANG+1
	   ILIST(NANG)=Q(1)
	   K=K+1
d83 1
a83 2
C  NANG - TOTAL NUMBER OF IMAGES

d85 1
a85 1
2001	FORMAT('  NUMBER OF IMAGES =',I5)
d87 1
a87 1
C GET THE ANGLES
d89 3
a91 3
 	K_ANG=1
 	CALL  FILERD(FINPIC,NLETI,NULL,'ANGULAR DOC',IRTFLG)
	K2=1
d96 1
a96 1
	      Q(K_ANG+K)=BUF(2)
d98 1
a98 1
              WRITE(NOUT,*)  ' SOMETHING WRONG IN THE ANGULAR DOC FILE'
d109 10
a118 10
     &	   'RECONSTRUCTION FROM NROW1 TO NROW2')
        CALL  RDPRM2(FM,DUM,NLOOP,ILOOP,
     &		'FREQUENCY CUT-OFF FOR PARZEN FILTER')

C  OPEN ALL THE PROJECTION FILES ....
C  ONLY IF THE NUMBER IS LESS THAN NILMAX

	IF (NANG.LE.NILMAX)  THEN
	   OPENED=.TRUE.
           KE=NANG
d120 2
a121 2
           OPENED=.FALSE.
           KE=1
d123 1
d126 4
a129 5
 	   CALL  OPENFB(BUF,FINPIC,IOFF+K,NSAM,NROW,'O',NF,NSL)
 	   IF (NF.NE.2)  THEN
	      WRITE(NOUT,*) ' FILE NOT FOUND'
	      RETURN
	   ENDIF
d131 1
a131 1
        IF (.NOT.OPENED)  CLOSE(IOFF+1)
d133 5
a137 4
	IF (NROWL.LT.1.OR.NROWL.GT.NROW.OR.NROWH.LT.1.OR.NROWH.GT.NROW
     &		.OR.NROWL.GT.NROWH)  THEN
	   NROWL=1
	   NROWH=NROW
d139 1
a139 1
	LCYL=NROWH-NROWL+1
d141 7
a147 7
	MK=1
	M2=0
5	MK=MK*2
	M2=M2+1
	IF(MK.LT.NSAM-1)  GOTO  5
 	MK=MK*2
	M2=M2+1
d164 1
a164 3
	NMAT=NSAM*NSLICE

	K_PROJ=IPALIGN64(K_IPCUBE+5*NN)
d166 10
a175 9
        K_X=K_PROJ
        K_IBN=K_X

	MEMTOT=K_IBN
C	MEMTOT=K_IBN+NANG*N*N
	IF(MEMTOT.GT.MAXMEM)  THEN
	WRITE(NOUT,1001)  MEMTOT
	WRITE(NOUT,1002)  MAXMEM
	GOTO 9999
d178 1
a178 1
	CALL  RDPA(NANG,Q(K_ANG),Q(K_DM),NOUT)
d182 7
a188 7
	K_PRJE=IPALIGN64(K_PROJ+MK)
	K_SIGMA=IPALIGN64(K_PRJE+NSAM*NANG)
C LTBN = NSAM*NANG
	K_BCKE=IPALIGN64(K_SIGMA+MK)
	K_BCKN=K_BCKE
        K_CB=K_BCKE
	MEMTOT=IPALIGN64(K_BCKN+NMAT)
d191 8
a198 6
     1     '           MEMORY NEEDED - ',I8,/)
	IF(MEMTOT.GT.MAXMEM)  THEN
	WRITE(NOUT,1002)  MAXMEM
1002	FORMAT('  SORRY, YOUR BUFFER LENGTH IS ONLY',I9,/,
     1      '  PROGRAM CANNOT BE RUN')
	GOTO 9999
d201 5
a205 5
	CALL  FILERD(FINFO,NLETI,NULL,'3-D OUTPUT',ITRFLG)
	IF(IRTFLG.EQ.-1)  GOTO 9999
	IFORM=3
 	CALL  OPENFB(BUF,FINFO,INPIC,NSAM,LCYL,'UNKNOWN',NF,NSLICE)
	IF (NF.NE.2)  GOTO 9999
d208 3
a210 3
     1	  (Q(K_BCKN),NSAM,LCYL,NSLICE,NROWL,NROWH,NANG,
     2     Q(K_IPCUBE),NN,Q(K_PROJ),Q(K_SIGMA),MK,M2,Q(K_PRJE),
     3		FM,IRI,LTB,LTBN,INPIC,OPENED)
d213 2
a214 2
C CLOSE ALL THE PROJECTION FILES ...
C  ONLY IF THE NUMBER IS LESS THAN NILMAX
d216 2
a217 2
	IF (NANG.LE.NILMAX)  THEN
	   DO    K=1,NANG
d223 1
@


1.12
log
@inpic == 99 decreased nilmax for non parallel
@
text
@d14 1
a14 1
#IFDEF SP_MP
d16 1
a16 1
#ELSE
d18 1
a18 1
#ENDIF
@


1.11
log
@R
@
text
@d2 8
a9 8
C
c  UNIX-Spider version
C  Weighted back-projection with Parzen filter.
c  reconstruction kept in the square
c  Reconstruction from nrowl to nrowh.
c  Average outside the window is subtracted
c  Geometry  cylindrical
c  Simplified version
d11 4
a14 3
C
C  NILMXX IS USED IN reprwb.f,bps2.f,bprj2.f,prjs2.f  !!!
#ifdef SP_MP
d16 3
a18 3
#else
	PARAMETER  (NILMAX=93,NILMXX=560)
#endif
d21 1
a21 1
	CHARACTER*80  FINPIC,finfo
d33 2
a34 3
        DATA  INPIC/100/,IOFF/6/
CNO_SAVE
c
d36 5
a40 5
C
C  N - linear dimension of projections and restored cube
C  NANG - number of angles (projections)
C
        write(nout,*)  ' Single-tilt 3D-WB reconstruction program'
d43 4
a46 4
     &	  'Enter template for 2-D image name',IRTFLG)
	CALL  FILERD(FINPic,NLETI,NULL,'Selection doc',IRTFLG)
	k=0
	k2=1
d49 4
a52 4
	IF(NANG.eq.NILMXX)  THEN
		WRITE(NOUT,*) '  Too many images, list truncated'
		goto  779
	endif
d55 5
a59 5
	IF(LERR.EQ.0)  THEN
	NANG=NANG+1
	ILIST(NANG)=Q(1)
	K=K+1
	GOTO  778
d62 8
a69 8
c
C  NANG - total number of images
c
	write(nout,2001) nang
2001	format('  Number of images =',i5)
c
c get the angles
c
d71 13
a83 13
 	CALL  FILERD(FINPIC,NLETi,NULL,'Angular doc',IRTFLG)
	k2=1
        do  k=0,nang-1
	LERR=-1
	CALL  UNSAV(FINPIC,K,INPIC,ilist(k+1),BUF,2,LERR,K2)
	IF(LERR.EQ.0)  THEN
	Q(K_ANG+k)=BUF(2)
        else
           write(nout,*)  ' Something wrong in the angular doc file'
           close(inpic)
           return
        ENDIF
	enddo
d85 6
a90 6
c
        CALL RDPRMI(iri,nslice,NLOOP,ILOOP,
     &	'Radius of reconstructed object, height of the slice')
        ri=iri
        CALL  RDPRMI(nrowl,nrowh,NLOOP,ILOOP,
     &	'Reconstruction from nrow1 to nrow2')
d92 8
a99 8
     &		'Frequency cut-off for Parzen filter$')
C
C  Open all the projection files ....
c  only if the number is less than NILMAX
c
	IF(NANG.LE.NILMAX)  THEN
	OPENED=.TRUE.
        KE=NANG
d101 17
a117 2
        OPENED=.FALSE.
        KE=1
d119 2
a120 17
	do    k=1,KE
 	CALL  FILGET(FINPAT,FINPIC,NLET,ILIST(k),INTFLG)
 	CALL  OPENFB(BUF,FINPIC,IOFF+K,NSAM,NROW,'O',NF,NSL)
 	IF(NF.NE.2)  THEN
	write(nout,*) ' File not found'
	RETURN
	ENDIF
	enddo
        IF(.NOT.OPENED)  CLOSE(IOFF+1)
c
	if(nrowl.lt.1.or.nrowl.gt.nrow.or.nrowh.lt.1.or.nrowh.gt.nrow
     &		.or.nrowl.gt.nrowh)  then
	nrowl=1
	nrowh=nrow
	endif
	lcyl=nrowh-nrowl+1
C
d128 1
a128 1
C
d130 1
a130 1
C
d136 1
a136 1
C
d141 1
a141 1
C
d143 3
a145 3
c!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	nmat=nsam*nslice
C
d147 1
a147 1
C
d150 1
a150 1
C
d158 1
a158 1
C
d162 1
a162 1
C
d165 5
a169 5
c ltbn = nsam*nang
	K_BCKE=IPALIGN64(K_sigma+mk)
	k_bckn=k_bcke
        K_CB=K_bcke
	MEMTOT=IPALIGN64(k_bckn+nmat)
d171 2
a172 2
1001	FORMAT(//'  Reprojection program for 3-D back-projection',/,
     1     '           Memory needed - ',I8,/)
d175 2
a176 2
1002	FORMAT('  Sorry, your buffer length is only',I9,/,
     1      '  Program cannot be run')
d179 2
a180 2
C
	CALL  FILERD(FINFO,NLETI,NULL,'3-D output',ITRFLG)
d184 2
a185 2
	IF(NF.NE.2)  GOTO 9999
C
d187 3
a189 3
     1	  (q(k_bckn),nsam,LCYL,nslice,nrowl,nrowh,nang,
     2     q(k_ipcube),nn,Q(K_PROJ),q(k_sigma),MK,m2,Q(K_PRJE),
     3		FM,iri,ltb,LTBN,inpic,OPENED)
d191 8
a198 8
c 
c close all the projection files ...
c  only if the number is less than NILMAX
c
	IF(NANG.LE.NILMAX)  THEN
	do    k=1,nang
 	  CLOSE(ioff+k)
	enddo
d200 1
a200 1
C
@


1.10
log
@*** empty log message ***
@
text
@d106 1
a106 1
 	CALL  OPENFB(BUF,FINPIC,IOFF+K,NSAM,NROW,'R',NF,NSL)
@


1.9
log
@ipalign64
@
text
@d73 1
a73 1
        do 758 k=0,nang-1
d83 1
a83 1
 758    continue
d104 1
a104 1
	do  77  k=1,KE
d111 1
a111 1
77	continue
d196 3
a198 2
	do  78  k=1,nang
78	CLOSE(ioff+k)
@


1.8
log
@temporarily changed NILMAX for ithaca
@
text
@d14 1
a14 1
	PARAMETER  (NILMAX=25,NILMXX=500)
d16 1
a16 1
	PARAMETER  (NILMAX=93,NILMXX=500)
a17 1
#ifdef SP_UNIX
a18 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
d44 1
a44 1
	CALL  FILERD(FINPic,NLETi,NULL,'Selection doc',IRTFLG)
d137 2
a138 2
 	K_DM=K_ANG+NANG
	K_LB=K_DM+9*NANG
d146 1
a146 1
	K_PROJ=K_IPCUBE+5*NN
d163 2
a164 2
	K_PRJE=K_PROJ+MK
	K_SIGMA=K_PRJE+NSAM*NANG
d166 1
a166 1
	K_BCKE=K_sigma+mk
d169 1
a169 1
	MEMTOT=k_bckn+nmat
d186 1
a186 1
	call  reprwb
d197 1
a197 1
78	close(ioff+k)
@


1.7
log
@nosave nilmxx=500
@
text
@d13 3
d17 1
@


1.6
log
@number of projections changed to 50000
@
text
@d13 1
a13 1
	PARAMETER  (NILMAX=93,NILMXX=50000)
d33 1
@


1.5
log
@bug fixed
@
text
@d13 1
a13 1
	PARAMETER  (NILMAX=93,NILMXX=300)
@


1.4
log
@nilmax=300
@
text
@a95 1
	OPENED=.FALSE.
d98 6
a103 1
	do  77  k=1,nang
d111 1
a111 1
	ENDIF
d179 1
a179 1
	CALL  FILERD(FINPAT,NLETI,NULL,'3-D output',ITRFLG)
d182 1
a182 1
 	CALL  OPENFB(BUF,FINPAT,INPIC,NSAM,LCYL,'UNKNOWN',NF,NSLICE)
@


1.3
log
@unlimited number of projections
@
text
@d12 2
a13 2
C  NILMXX IS USED IN reprwb.f  !!!
	PARAMETER  (NILMAX=93,NILMXX=1000)
@


1.2
log
@cpp_lines_added
@
text
@d12 2
a13 1
	PARAMETER  (NILMAX=93)
d23 1
a23 1
	COMMON     DUMMY(80),BUF(1024),ILIST(NILMAX),
d30 1
d48 1
a48 1
	IF(NANG.eq.NILMAX)  THEN
d94 1
d96 3
d107 1
d184 1
a184 1
     3		FM,iri,ltb,LTBN,inpic)
d188 1
d190 1
d193 1
@


1.1
log
@Initial revision
@
text
@d13 3
d17 1
@
