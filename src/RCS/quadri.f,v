head	1.17;
access;
symbols
	healthdept_2018:1.17
	pre_getangas:1.14
	GPL2010:1.13
	pre_GPL2010:1.12
	pre_var_equation:1.12
	pre_fftwrings:1.10
	pre_opfiles:1.10
	src:1.10
	best-code:1.10
	x-named-regs:1.10
	x:1.10
	v13-00:1.10
	pre_GPL:1.8
	prec_CA:1.8
	noindx:1.8
	Bproc:1.6
	oct21:1.3
	last77:1.3;
locks; strict;
comment	@c @;


1.17
date	2018.10.03.14.34.13;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2012.10.26.15.04.31;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2011.11.21.13.17.07;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2011.01.19.15.44.32;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2010.06.24.13.26.36;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.19.12.58.21;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2008.06.19.12.53.46;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.17.20.31.31;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.17.18.22.30;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2001.09.24.19.18.54;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.24.17.24.41;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.06.20.48.58;	author bimal;	state Exp;
branches;
next	1.5;

1.5
date	99.12.07.19.26.14;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.11.10.23.11.16;	author yuchen;	state Exp;
branches;
next	1.3;

1.3
date	95.04.12.14.08.16;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.02.02.16.35.16;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.51.50;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.17
log
@email_health_dept
@
text
@C ++********************************************************************
C                                                                      *
C QUADRI                                                               *
C                  QUADRI_FAST WITHOUT TRAPS     JUN 2008 ARDEAN LEITH *
C                  QUADRI_PAD                    OCT 2012 ARDEAN LEITH *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2012  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      
C  FUNCTION QUADRI(XX, YY, NX, NY, FDATA)
C                                                                      
C  PURPOSE: QUADRATIC INTERPOLATION. QUADRI HAS CIRCULAR CLOSING STEPS 
C           WHICH   QUADRI_FAST LACKS                                  
C                                                                      
C  PARAMETERS:       XX,YY TREATED AS CIRCULARLY CLOSED.
C                    FDATA - IMAGE 1..NX, 1..NYC
C                    F3    FC       F0, F1, F2, F3 are the values
C                     +             at the grid points.  X is the
C                     + X           point at which the function
C              F2++++F0++++F1       is to be estimated. (It need
C                     +             not be in the First quadrant).
C                     +             FC - the outer corner point
C                    F4             nearest X.
C
C                                   F0 is the value of the FDATA at
C                                   FDATA(I,J), it is the interior mesh
C                                   point nearest  X.
C                                   Coordinates of F0 are (X0,Y0),
C                                   Coordinates of F1 are (XB,Y0),
C                                   Coordinates of F2 are (XA,Y0),
C                                   Coordinates of F3 are (X0,YB),
C                                   Coordinates of F4 are (X0,YA),
C                                   Coordinates of FC are (XC,YC),
C
C                   O               HXA, HXB are the mesh spacings
C                   +               in the X-direction to the left
C                  HYB              and right of the center point.
C                   +
C            ++HXA++O++HXB++O       HYB, HYA are the mesh spacings
C                   +               in the Y-direction.
C                  HYA
C                   +               HXC equals either  HXB  or  HXA
C                   O               depending on where the corner
C                                   point is located.
c
C                                   Construct the interpolant
C                                   F = F0 + C1*(X-X0) +
C                                       C2*(X-X0)*(X-X1) +
C                                       C3*(Y-Y0) + C4*(Y-Y0)*(Y-Y1) +
C                                       C5*(X-X0)*(Y-Y0)
C
C NOTE: QUADRI-FAST CAN BE USED WHEN THERE IS NO CHANCE THAT THE 
C       INPUT DATA GOES OUTSIDE THE BOUNDS OF THE IMAGE.  THE MAIN
C       CASE THAT THIS IS TRUE IS WHEN CREATING POLAR IMAGES AND
C       YOU CAN BE SURE THAT THE RADIUS IS < BOUNDARY.
C
C       MAYBE QUADRI SHOULD BE INLINED?
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

C     ------------------- QUADRI -----------------------------------

      FUNCTION QUADRI(XX,YY, NX,NY, FDATA)

      DIMENSION  FDATA(NX,NY)

      X = XX
      Y = YY

C     CIRCULAR CLOSURE
      IF (X < 1.0)               X = X+(1 - IFIX(X) / NX) * NX
      IF (X > FLOAT(NX)+0.5) X = AMOD(X-1.0,FLOAT(NX)) + 1.0
      IF (Y < 1.0)               Y = Y+(1 - IFIX(Y) / NY) * NY
      IF (Y > FLOAT(NY)+0.5) Y = AMOD(Y-1.0,FLOAT(NY)) + 1.0

      I   = IFIX(X)
      J   = IFIX(Y)

      DX0 = X - I
      DY0 = Y - J

      IP1 = I + 1
      IM1 = I - 1
      JP1 = J + 1
      JM1 = J - 1

      IF (IP1 > NX) IP1 = IP1 - NX     
      IF (IM1 < 1)      IM1 = IM1 + NX
      IF (JP1 > NY) JP1 = JP1 - NY        
      IF (JM1 < 1)      JM1 = JM1 + NY
      F0  = FDATA(I,J)
      C1  = FDATA(IP1,J) - F0
      C2  = (C1 - F0 + FDATA(IM1,J)) * 0.5
      C3  = FDATA(I,JP1) - F0 
      C4  = (C3 - F0 + FDATA(I,JM1)) * 0.5 

      DXB = (DX0 - 1)
      DYB = (DY0 - 1)

C     HXC & HYC ARE EITHER 1 OR -1
      HXC = INT(SIGN(1.0,DX0))
      HYC = INT(SIGN(1.0,DY0)) 
 
      IC  = I + HXC
      JC  = J + HYC

      IF (IC .GT .NX)   THEN
         IC = IC - NX    
      ELSEIF (IC  <  1) THEN
         IC = IC + NX
      ENDIF

      IF (JC  >  NY)    THEN
         JC = JC - NY      
      ELSEIF (JC  <  1) THEN
         JC = JC + NY      
      ENDIF

      C5  =  ((FDATA(IC,JC) - F0 - 
     &         HXC * C1 - 
     &        (HXC * (HXC - 1.0)) * C2 -
     &         HYC * C3 - 
     &        (HYC * (HYC - 1.0)) * C4) * 
     &        (HXC * HYC)) 

      QUADRI = F0 + 
     &         DX0 * (C1 + DXB * C2 + DY0 * C5) + 
     &         DY0 * (C3 + DYB * C4)


      END

C     ------------------- QUADRI_FAST --------------------------------

      FUNCTION QUADRI_FAST(X,Y, NX,NY, FDATA)

      REAL    :: X,Y
      REAL    :: FDATA(NX,NY)
      INTEGER :: NX, NY

C     SKIP CIRCULAR CLOSURE, IT IS SLOW, ENSURE IT NOT NEEDED IN CALLER

      I   = IFIX(X)
      J   = IFIX(Y)

      DX0 = X - I
      DY0 = Y - J

      IP1 = I + 1
      IM1 = I - 1
      JP1 = J + 1
      JM1 = J - 1
 
      F0  = FDATA(I,J)
      C1  = FDATA(IP1,J) - F0               ! DIFF. FROM CENTER
      C2  = (C1 - F0 + FDATA(IM1,J)) * 0.5  ! DIFF OF X+1 AND X-1
      C3  = FDATA(I,JP1) - F0               ! DIFF. FROM CENTER
      C4  = (C3 - F0 + FDATA(I,JM1)) * 0.5  ! DIFF oF Y+1 AND Y-1

      DXB = (DX0 - 1)
      DYB = (DY0 - 1)

C     HXC & HYC ARE EITHER 1 OR -1
      HXC = INT(SIGN(1.0,DX0))   ! X <> INT(X)
      HYC = INT(SIGN(1.0,DY0))   ! Y <> INT(Y)
 
      IC  = I + HXC
      JC  = J + HYC

      C5  =  ((FDATA(IC,JC) - F0 - 
     &         HXC * C1 - 
     &        (HXC * (HXC - 1.0)) * C2 -
     &         HYC * C3 - 
     &        (HYC * (HYC - 1.0)) * C4) * 
     &        (HXC * HYC)) 

      QUADRI_FAST = F0 + 
     &         DX0 * (C1 + DXB * C2 + DY0 * C5) + 
     &         DY0 * (C3 + DYB * C4)

      END


C     ------------------- QUADRI_PAD -------------------------------

      REAL FUNCTION QUADRI_PAD(XX, YY, NX,NY, NXP,NYP, FDATA)

      IMPLICIT NONE

      REAL    :: XX, YY
      REAL    :: FDATA(NXP,NYP)
      INTEGER :: NX,NY, NXP,NYP

      REAL    :: X, Y, DX0,DY0,F0,C1,C2,C3,DXB,DYB,c4,hxc,hyc,c5
      INTEGER :: I,J,IP1,IM1,JP1,JM1,ic,jc

      X = XX
      Y = YY

C     CIRCULAR CLOSURE
      IF (X < 1.0)           X = X+(1 - IFIX(X) / NX) * NX
      IF (X > FLOAT(NX)+0.5) X = AMOD(X-1.0,FLOAT(NX)) + 1.0
      IF (Y < 1.0)           Y = Y+(1 - IFIX(Y) / NY) * NY
      IF (Y > FLOAT(NY)+0.5) Y = AMOD(Y-1.0,FLOAT(NY)) + 1.0

      I   = IFIX(X)
      J   = IFIX(Y)

      DX0 = X - I
      DY0 = Y - J

      IP1 = I + 1
      IM1 = I - 1
      JP1 = J + 1
      JM1 = J - 1

      IF (IP1 > NX) IP1 = IP1 - NX     
      IF (IM1 < 1)  IM1 = IM1 + NX
      IF (JP1 > NY) JP1 = JP1 - NY        
      IF (JM1 < 1)  JM1 = JM1 + NY

      F0  = FDATA(I,J)
      C1  = FDATA(IP1,J) - F0
      C2  = (C1 - F0 + FDATA(IM1,J)) * 0.5
      C3  = FDATA(I,JP1) - F0 
      C4  = (C3 - F0 + FDATA(I,JM1)) * 0.5 

      DXB = (DX0 - 1)
      DYB = (DY0 - 1)

C     HXC & HYC ARE EITHER 1 OR -1
      HXC = INT(SIGN(1.0,DX0))
      HYC = INT(SIGN(1.0,DY0)) 
 
      IC  = I + HXC
      JC  = J + HYC

      IF (IC > NX)      THEN
         IC = IC - NX    
      ELSEIF (IC  <  1) THEN
         IC = IC + NX
      ENDIF

      IF (JC  >  NY)    THEN
         JC = JC - NY      
      ELSEIF (JC  <  1) THEN
         JC = JC + NY 
      ENDIF

      C5  =  ((FDATA(IC,JC) - F0 - 
     &         HXC * C1 - 
     &        (HXC * (HXC - 1.0)) * C2 -
     &         HYC * C3 - 
     &        (HYC * (HYC - 1.0)) * C4) * 
     &        (HXC * HYC)) 

      QUADRI_PAD = F0 + 
     &         DX0 * (C1 + DXB * C2 + DY0 * C5) + 
     &         DY0 * (C3 + DYB * C4)


      END





#ifdef NEVER
C     ------------------- FLIN -----------------------------------
     FUNCTION FLIN(X, Y, NX, NY, FDATA)

      REAL    :: X,Y
      REAL    :: FDATA(NX,NY)
      INTEGER :: NX, NY

      I   = IFIX(X)
      J   = IFIX(Y)

      IP1 = I + 1
      JP1 = J + 1
 
      F0  = FDATA(I,J)
      F1  = FDATA(IP1,J)
      F3  = FDATA(I,JP1)

      C1  = FDATA(IP1,J) - F0               ! DIFF. FROM CENTER
      C2  = (C1 - F0 + FDATA(IM1,J)) * 0.5  ! DIFF of x+1 and x-1
      C3  = FDATA(I,JP1) - F0               ! DIFF. FROM CENTER
      C4  = (C3 - F0 + FDATA(I,JM1)) * 0.5  ! DIFF of y+1 and y-1


      END

C          GET VALUE OF Y1, BILINEAR INTERPRELATAION
           Y1(I) = (1.-(K(I)-INT(K(I)))) * BUF(INT(K(I))) +
     &                 (K(I)-INT(K(I)))  * BUF(INT(K(I))+1)

        RICENT = ICENT + SHY
        RKCENT = KCENT + SHX  

        JJ     = 0
        DO  I = 1,NROW
           JJ = JJ+1
           IF (IFLAG1 .EQ. 1) II = NROWS + (I-1) * NROWSK
           IF (IFLAG1 .EQ. 0) II = I
           Y    = I - RICENT
           YCOD = Y * COD + RICENT
           YSID = -Y * SID + RKCENT
           DO K = 1,NSAM
              RBUF(K) = BACK
              X       = K - RKCENT
              XOLD    = X * COD + YSID
              YOLD    = X * SID + YCOD
              IYOLD   = YOLD
              YDIF    = YOLD - IYOLD
              YREM    = 1.   - YDIF
              IXOLD   = XOLD
              IF ((IYOLD .GE. 1 .AND. IYOLD .LE. NROW-1) .AND.
     &            (IXOLD .GE. 1 .AND. IXOLD .LE. NSAM-1)) THEN
c                INSIDE BOUNDARIES OF OUTPUT IMAGE
                 XDIF    = XOLD - IXOLD
                 XREM    = 1. - XDIF
                 NADDR   = (IYOLD-1) * NSAM + IXOLD 
                 RBUF(K) = YDIF*(BUF(NADDR+NSAM)*XREM
     &                    +BUF(NADDR+NSAM+1)*XDIF)
     &                    +YREM*(BUF(NADDR)*XREM + BUF(NADDR+1)*XDIF)
              ENDIF
           ENDDO

           CALL WRTLIN(LUNO,RBUF,NSAM,II)
        ENDDO
#endif
@


1.16
log
@added: QUADRI_PAD    NSAM --> NX
@
text
@d13 1
a13 1
C=* Email: spider@@wadsworth.org                                        *
@


1.15
log
@comment
@
text
@d4 2
a5 1
C                  QUADRI_FAST WITHOUT TRAPS     JUNE 2008 ARDEAN LEITH
d11 1
a11 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d28 6
a33 6
C                                                                      *
C  FUNCTION QUADRI(XX, YY, NXDATA, NYDATA, FDATA)
C                                                                      *
C  PURPOSE: QUADRATIC INTERPOLATION. QUADRI HAS CIRCULAR CLOSING STEPS *
C           WHICH   QUADRI_FAST LACKS                                  *
C                                                                      *
d35 1
a35 2
C                    FDATA - IMAGE 1..NXDATA, 1..NYDATA
C
d47 6
a52 6
C                                   The coordinates of F0 are (X0,Y0),
C                                   The coordinates of F1 are (XB,Y0),
C                                   The coordinates of F2 are (XA,Y0),
C                                   The coordinates of F3 are (X0,YB),
C                                   The coordinates of F4 are (X0,YA),
C                                   The coordinates of FC are (XC,YC),
d68 2
a69 2
C                                       C3*(Y-Y0) + C4*(Y-Y0)*(Y-Y1)
C                                       + C5*(X-X0)*(Y-Y0)
d81 75
a155 1
      FUNCTION QUADRI_FAST(X, Y, NXDATA, NYDATA, FDATA)
d158 2
a159 2
      REAL    :: FDATA(NXDATA,NYDATA)
      INTEGER :: NXDATA, NYDATA
d204 1
d206 1
d208 1
d210 3
a212 1
C     ------------------- QUADRI -----------------------------------
d214 2
a215 3
      FUNCTION QUADRI(XX, YY, NXDATA, NYDATA, FDATA)

      DIMENSION  FDATA(NXDATA,NYDATA)
d221 4
a224 4
      IF (X.LT.1.0)               X = X+(1 - IFIX(X) / NXDATA) * NXDATA
      IF (X.GT.FLOAT(NXDATA)+0.5) X = AMOD(X-1.0,FLOAT(NXDATA)) + 1.0
      IF (Y.LT.1.0)               Y = Y+(1 - IFIX(Y) / NYDATA) * NYDATA
      IF (Y.GT.FLOAT(NYDATA)+0.5) Y = AMOD(Y-1.0,FLOAT(NYDATA)) + 1.0
d237 4
a240 4
      IF (IP1 .GT. NXDATA) IP1 = IP1 - NXDATA     
      IF (IM1 .LT. 1)      IM1 = IM1 + NXDATA
      IF (JP1 .GT. NYDATA) JP1 = JP1 - NYDATA        
      IF (JM1 .LT. 1)      JM1 = JM1 + NYDATA
d258 4
a261 4
      IF (IC .GT .NXDATA) THEN
         IC = IC - NXDATA    
      ELSEIF (IC .LT. 1)  THEN
         IC = IC + NXDATA
d264 4
a267 4
      IF (JC .GT. NYDATA)  THEN
         JC = JC - NYDATA
      ELSEIF (JC .LT. 1)  THEN
         JC = JC + NYDATA
d277 1
a277 1
      QUADRI = F0 + 
d287 1
d290 1
a290 1
     FUNCTION FLIN(X, Y, NXDATA, NYDATA, FDATA)
d293 2
a294 2
      REAL    :: FDATA(NXDATA,NYDATA)
      INTEGER :: NXDATA, NYDATA
a305 1
      
@


1.14
log
@comments
@
text
@d10 1
a10 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d30 2
a31 1
C  PURPOSE: QUADRATIC INTERPOLATION                                                           *
@


1.13
log
@GPL_2010
@
text
@d70 7
@


1.12
log
@removed debug output
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.11
log
@ fast quadri
@
text
@d3 2
a4 1
C QUADRI                                                                     *
a82 4
      integer, save :: nval = 0
      integer, save :: nval1 = 0
      integer, save :: nval2 = 0

a95 13
      IF (IM1 .LT. 1 .and. (nval2 .le. 10)) then
         write(6,93) x,y, i,j, im1,ip1, jm1,jp1, nxdata
93       format(' bad im1: ',2f6.1,2i5,' ',4i5,'  ',i6)
         nval2 = nval2 + 1
         stop
      ENDIF
      IF (IP1 .GT. NXDATA .and. (nval1 .le. 10)) then
         write(6,94) x,y, i,j, im1,ip1,jm1,jp1, nxdata
94       format(' bad ip1: ',2f6.1,2i5,' ',4i5,'  ',i6)
         nval1 = nval1 + 1
         stop
      endif

d98 1
a98 1
      C2  = (C1 - F0 + FDATA(IM1,J)) * 0.5  ! DIFF of x+1 and x-1
d100 1
a100 1
      C4  = (C3 - F0 + FDATA(I,JM1)) * 0.5  ! DIFF of y+1 and y-1
a111 6
c      if (nval .le. 10) then
c         write(6,90) x,y, i,j, im1,ip1,jm1,jp1,ic,jc
c90       format(2f6.1,2i5,' ',4i5,' ',2i5)
c         nval = nval+1
c      endif

a269 5





@


1.10
log
@GPL License fixed
@
text
@d7 1
a7 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
a72 2
C  IMAGE_PROCESSING_ROUTINE 
C
d76 77
d223 75
@


1.9
log
@HRI GPL License used
@
text
@a5 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 6

C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.8
log
@order of ifix wrong at top
@
text
@d7 24
@


1.7
log
@speed up
@
text
@d68 8
a75 2
      I = IFIX(X)
      J = IFIX(Y)
a78 6

C     CIRCULAR CLOSURE
      IF (X.LT.1.0)               X = X+(1 - I / NXDATA) * NXDATA
      IF (X.GT.FLOAT(NXDATA)+0.5) X = AMOD(X-1.0,FLOAT(NXDATA)) + 1.0
      IF (Y.LT.1.0)               Y = Y+(1 - J / NYDATA) * NYDATA
      IF (Y.GT.FLOAT(NYDATA)+0.5) Y = AMOD(Y-1.0,FLOAT(NYDATA)) + 1.0
@


1.6
log
@cosmetic
@
text
@d3 1
a4 1
C                                                                      *
d7 1
a7 1
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
d14 1
a14 1
C                                                                      *
d16 1
a16 1
C  PURPOSE:                                                            *
d18 2
a19 17
C  PARAMETERS:                                                         *
C
C IMAGE_PROCESSING_ROUTINE 
C        0         2         3         4         5         6         7 
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

      FUNCTION quadri(XX, YY, NXDATA, nydata, FDATA)

C  Quadratic interpolation
C  XX,YY treated as circularly closed.
C  fdata - image 1..nxdata, 1..nydata
C
C
C                                  SPECIFICATIONS FOR ARGUMENTS
      dimension  FDATA(nxdata,nydata)

d39 16
a54 8
        x=xx
        y=yy
        if(x.lt.1.0)  x=x+(1-ifix(x)/nxdata)*nxdata
        if(x.gt.float(nxdata)+0.5)  x=amod(x-1.0,float(nxdata))+1.0
        if(y.lt.1.0)  y=y+(1-ifix(y)/nydata)*nydata
        if(y.gt.float(nydata)+0.5)  y=amod(y-1.0,float(nydata))+1.0
        i=IFIX(x)
        j=IFIX(y)
d56 1
a56 6
      X0 = I
      Y0 = J
      XA = I-1
      XB = I+1
      YA = J-1
      YB = J+1
d58 72
a129 71
      DX0 = X - X0
      DY0 = Y - Y0
C
      DXB = X - XB
      DYB = Y - YB
C
        ip1=i+1
        im1=i-1
        jp1=j+1
        jm1=j-1
      F0 = FDATA(I,J)
        if(ip1.gt.nxdata) ip1=ip1-nxdata        
      F1 = FDATA(Ip1,J)
        if(im1.lt.1)  im1=im1+nxdata
      F2 = FDATA(Im1,J)
        if(jp1.gt.nydata) jp1=jp1-nydata        
      F3 = FDATA(I,Jp1)
        if(jm1.lt.1)  jm1=jm1+nydata
      F4 = FDATA(I,Jm1)
C
      IC = I + INT(SIGN(1.0,DX0))
      JC = J + INT(SIGN(1.0,DY0))
C
      XC = IC
      YC = JC
        if(ic.gt.nxdata) then
        ic=ic-nxdata    
        elseif(ic.lt.1)  then
        ic=ic+nxdata
        endif
        if(jc.gt.nydata)  then
        jc=jc-nydata
        elseif(jc.lt.1)  then
        jc=jc+nydata
        endif
      FC = FDATA(IC,JC)
C                       O               HXA, HXB are the mesh spacings
C                       +               in the X-direction to the left
C                      HYB              and right of the center point.
C                       +
C               O++HXA++O++HXB++O       HYB, HYA are the mesh spacings
C                       +               in the Y-direction.
C                      HYA
C                       +               HXC equals either  HXB  or  HXA
C                       O               depending on where the corner
C                                       point is located.
C
      HXA = X0 - XA
      HXB = XB - X0
      HYA = Y0 - YA
      HYB = YB - Y0
C
      HXC = XC - X0
      HYC = YC - Y0
C
      HXCB = XC - XB
      HYCB = YC - YB
C                                       Construct the interpolant
C                                       F = F0 + C1*(X-X0) +
C                                           C2*(X-X0)*(X-X1) +
C                                           C3*(Y-Y0) + C4*(Y-Y0)*(Y-Y1)
C                                           + C5*(X-X0)*(Y-Y0)
      C1 = (F1-F0)/HXB
      T1 = (F0-F2)/HXA
      C2 = (C1-T1)/(HXA+HXB)
      C3 = (F3-F0)/HYB
      T3 = (F0-F4)/HYA
      C4 = (C3-T3)/(HYA+HYB)
      C5 = (FC-F0-HXC*C1-HXC*HXCB*C2-HYC*C3-HYC*HYCB*C4)/(HXC*HYC)
C
      quadri = F0 + DX0*(C1+DXB*C2+DY0*C5) + DY0*(C3+DYB*C4)
a130 1

@


1.5
log
@header
@
text
@a0 1

d19 3
a21 2
C                                                                      *
C        0         2         3         4         5         6         7 *
d54 8
a61 8
	x=xx
	y=yy
	if(x.lt.1.0)  x=x+(1-ifix(x)/nxdata)*nxdata
	if(x.gt.float(nxdata)+0.5)  x=amod(x-1.0,float(nxdata))+1.0
	if(y.lt.1.0)  y=y+(1-ifix(y)/nydata)*nydata
	if(y.gt.float(nydata)+0.5)  y=amod(y-1.0,float(nydata))+1.0
	i=IFIX(x)
	j=IFIX(y)
d76 4
a79 4
	ip1=i+1
	im1=i-1
	jp1=j+1
	jm1=j-1
d81 1
a81 1
	if(ip1.gt.nxdata) ip1=ip1-nxdata	
d83 1
a83 1
	if(im1.lt.1)  im1=im1+nxdata
d85 1
a85 1
	if(jp1.gt.nydata) jp1=jp1-nydata	
d87 1
a87 1
	if(jm1.lt.1)  jm1=jm1+nydata
d95 10
a104 10
	if(ic.gt.nxdata) then
	ic=ic-nxdata	
	elseif(ic.lt.1)  then
	ic=ic+nxdata
	endif
	if(jc.gt.nydata)  then
	jc=jc-nydata
	elseif(jc.lt.1)  then
	jc=jc+nydata
	endif
d142 1
@


1.4
log
@a
@
text
@d1 24
d26 1
@


1.3
log
@comment changed
@
text
@d9 1
a9 1
CNO_SAVE
@


1.2
log
@nosave
@
text
@d1 1
a5 1
      FUNCTION quadri(XX, YY, NXDATA, nydata, FDATA)
@


1.1
log
@Initial revision
@
text
@d9 1
@
