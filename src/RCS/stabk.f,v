head	1.10;
access;
symbols
	healthdept_2018:1.10
	pre_getangas:1.9
	GPL2010:1.9
	pre_GPL2010:1.8
	pre_var_equation:1.8
	pre_fftwrings:1.7
	pre_opfiles:1.7
	src:1.7
	best-code:1.7
	x-named-regs:1.7
	x:1.7
	v13-00:1.7
	pre_GPL:1.5
	prec_CA:1.4
	noindx:1.4
	Bproc:1.4
	oct21:1.3
	last77:1.3;
locks; strict;
comment	@c @;


1.10
date	2018.10.03.14.34.23;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.24.13.27.02;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.05.13.28.55;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.18.18.55.23;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.18.14.50.39;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2003.10.16.18.15.53;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.11.10.23.11.21;	author yuchen;	state Exp;
branches;
next	1.3;

1.3
date	99.02.05.14.19.43;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	97.10.15.14.29.13;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.53.10;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.10
log
@email_health_dept
@
text
@
C **********************************************************************
C                                                                      *         
C  STABK                                                     06.07.80  *         
C                                                            01.12.86  *         
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C 
C  STABK(NUMIM, NKLA, KLAS, U, IU, IV, KTOT, KFIN,NIND)
C 
C  PURPOSE:
C                                                                   
C  INPUT KLAS(NUMIM) CONTAINS THE CROSSED-PARTITION WITH KTOT                   
C       CATEGORIES.  PRODUCT OF THE NBASE INITIAL PARTITIONS.                   
C  OUTPUT KLAS(NUMIM) CONTAINS A PARTITION OF NKLA CLASSES.                     
C       THE (NKLA-1) FIRST CLASSES ARE COMPOSED OF STABLE OBJECTS IN            
C       THE NBASE INITIAL PARTITIONS.  NIND OBJECTS IN THE LAST ONE.           
C       WORKING ARRAYS U(*), IU(*), IV(*).                                      
C       DIMENSION KTOT = NCLAS ** NBASE.  OUTPUT, IU(1,...,KTOT)                
C       CONTAINS THE SIZE OF THE STABLE CLASSES U(1,...,KFIN)                   
C       CUMULATIVE PERCENTAGES OF SIZE.                                         
C 
C  CALLS:  SHELK                                                                
C                                                                               
C **********************************************************************

      SUBROUTINE STABK(NUMIM, NKLA, KLAS, U, IU, IV, KTOT, KFIN,NIND)          

      INCLUDE 'CMBLOCK.INC' 

      DIMENSION  U(KTOT), IU(KTOT), IV(KTOT), KLAS(NUMIM)                       

C     THE SIZES OF THE CROSSED-PARTITION ARE IN U(*)                        

      DO K = 1,KTOT                                                       
         U(K) = 0.0                                                                
      ENDDO

      DO I = 1,NUMIM                                                      
         K    = KLAS(I)                                                           
         U(K) = U(K) + 1.0                                                        
      ENDDO

C     THE MOST IMPORTANT (NKLA - 1) CLASSES ARE KEPT.  THE REMAINING            
C     ARE IN NKLA.
                                                              
C     SORT VECTOR U() IN ASCENDING ORDER, DESTROYS U, SORTED IN: IU
      CALL SHELK (KTOT, U, IU ) 
                                                
      DO K = 1,KTOT                                                       
         M     = IU(K)                                                             
         IV(M) = KTOT - K + 1                                                      
      ENDDO

      DO I = 1,NUMIM                                                       
         L     = KLAS(I)                                                           
         KO    = IV(L)                                                             
         IF (KO .GT. NKLA) KO = NKLA                                
         KLAS(I) = KO
      ENDDO 
                                                            
      DO K = 1,KTOT                                                       
         KS    = KTOT - K + 1                                                      
         IU(K) = U(KS) + 0.00001                                                   
      ENDDO

C     RESULTS OF THE CLASSIFICATION                                        

      KFIN  = 0                                                                 
      NIND  = 0                                                                 
      DO K = 1,KTOT                                                       
         IF (K .LT. NKLA) NIND = NIND + IU(K)                      
         IF (IU(K) .LE. 0) EXIT                                
         KFIN  = KFIN + 1                                                          
         U(K)  = 100.0 * FLOAT(IU(K)) / FLOAT(NUMIM)                                 
      ENDDO

      NIND  = NUMIM - NIND                                                      
      DO K = 2,KFIN                                                       
         U(K) = U(K) + U(K-1)                                                     
      ENDDO
           
      RETURN                                                                 
      END                                                                    
                                                       

@


1.9
log
@GPL_2010
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.8
log
@refactor
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.7
log
@GPL
@
text
@d3 4
d8 1
a8 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d31 18
d50 1
d52 1
a52 21
C*--------------------------------------------------------------------*         
C*                                                                    *         
C*      INPUT KLAS(NUMIM) CONTAINS THE CROSSED-PARTITION WITH KTOT    *         
C*      CATEGORIES.  PRODUCT OF THE NBASE INITIAL PARTITIONS.         *         
C*      OUTPUT KLAS(NUMIM) CONTAINS A PARTITION OF NKLA CLASSES.      *         
C*      THE (NKLA-1) FIRST CLASSES ARE COMPOSED OF STABLE OBJECTS IN  *         
C*      THE NBASE INITIAL PARTITIONS.  NIND OBJECTS IN THE LAST ONE.  *         
C*      WORKING ARRAYS U(*), IU(*), IV(*).                            *         
C*      DIMENSION KTOT = NCLAS ** NBASE.  OUTPUT, IU(1,...,KTOT)      *         
C*      CONTAINS THE SIZE OF THE STABLE CLASSES U(1,...,KFIN)         *         
C*      CUMULATIVE PERCENTAGES OF SIZE.                               *         
C*      SUBROUTINE CALLED ... SHELK                                   *         
C*                                                                    *         
C==06.07.80                                                           *         
C==01.12.86                                                           *         
C*--------------------------------------------------------------------*         

      SUBROUTINE STABK (NUMIM, NKLA, KLAS, U, IU, IV, KTOT, KFIN,NIND)          

C     I DO NOT KNOW IF SAVE IS NEEDED FEB 99 al
      SAVE
a54 1
      INCLUDE 'CMBLOCK.INC' 
d58 1
a58 1
      DO   K = 1,KTOT                                                       
d62 3
a64 3
      DO   I = 1,NUMIM                                                      
         K     = KLAS(I)                                                           
         U(K)  = U(K) + 1.0                                                        
d70 4
a73 2
      CALL SHELK (KTOT, U, IU )                                                 
      DO   K = 1,KTOT                                                       
d78 1
a78 1
      DO  I = 1,NUMIM                                                       
d83 2
a84 1
      ENDDO                                                             
d96 1
a96 1
         IF (IU(K) .LE. 0) GO TO  70                                
d98 1
a98 1
         U(K)  = 100.0*FLOAT(IU(K)) / FLOAT(NUMIM)                                 
a100 1
   70   CONTINUE                                                                
d102 2
a103 2
      DO   K = 2,KFIN                                                       
         U(K)  = U(K) + U(K-1)                                                     
d105 1
a105 1

@


1.6
log
@GPL License added
@
text
@d1 105
@


1.5
log
@CA rewrite
@
text
@a0 79


C*--------------------------------------------------------------------*         
C*                                                                    *         
C*      INPUT KLAS(NUMIM) CONTAINS THE CROSSED-PARTITION WITH KTOT    *         
C*      CATEGORIES.  PRODUCT OF THE NBASE INITIAL PARTITIONS.         *         
C*      OUTPUT KLAS(NUMIM) CONTAINS A PARTITION OF NKLA CLASSES.      *         
C*      THE (NKLA-1) FIRST CLASSES ARE COMPOSED OF STABLE OBJECTS IN  *         
C*      THE NBASE INITIAL PARTITIONS.  NIND OBJECTS IN THE LAST ONE.  *         
C*      WORKING ARRAYS U(*), IU(*), IV(*).                            *         
C*      DIMENSION KTOT = NCLAS ** NBASE.  OUTPUT, IU(1,...,KTOT)      *         
C*      CONTAINS THE SIZE OF THE STABLE CLASSES U(1,...,KFIN)         *         
C*      CUMULATIVE PERCENTAGES OF SIZE.                               *         
C*      SUBROUTINE CALLED ... SHELK                                   *         
C*                                                                    *         
C==06.07.80                                                           *         
C==01.12.86                                                           *         
C*--------------------------------------------------------------------*         

      SUBROUTINE STABK (NUMIM, NKLA, KLAS, U, IU, IV, KTOT, KFIN,NIND)          

C     I DO NOT KNOW IF SAVE IS NEEDED FEB 99 al
      SAVE

      DIMENSION  U(KTOT), IU(KTOT), IV(KTOT), KLAS(NUMIM)                       
      INCLUDE 'CMBLOCK.INC' 

C     THE SIZES OF THE CROSSED-PARTITION ARE IN U(*)                        

      DO   K = 1,KTOT                                                       
         U(K) = 0.0                                                                
      ENDDO

      DO   I = 1,NUMIM                                                      
         K     = KLAS(I)                                                           
         U(K)  = U(K) + 1.0                                                        
      ENDDO

C     THE MOST IMPORTANT (NKLA - 1) CLASSES ARE KEPT.  THE REMAINING            
C     ARE IN NKLA.
                                                              
      CALL SHELK (KTOT, U, IU )                                                 
      DO   K = 1,KTOT                                                       
         M     = IU(K)                                                             
         IV(M) = KTOT - K + 1                                                      
      ENDDO

      DO  I = 1,NUMIM                                                       
         L     = KLAS(I)                                                           
         KO    = IV(L)                                                             
         IF (KO .GT. NKLA) KO = NKLA                                
         KLAS(I) = KO
      ENDDO                                                             
      DO K = 1,KTOT                                                       
         KS    = KTOT - K + 1                                                      
         IU(K) = U(KS) + 0.00001                                                   
      ENDDO

C     RESULTS OF THE CLASSIFICATION                                        

      KFIN  = 0                                                                 
      NIND  = 0                                                                 
      DO K = 1,KTOT                                                       
         IF (K .LT. NKLA) NIND = NIND + IU(K)                      
         IF (IU(K) .LE. 0) GO TO  70                                
         KFIN  = KFIN + 1                                                          
         U(K)  = 100.0*FLOAT(IU(K)) / FLOAT(NUMIM)                                 
      ENDDO

   70   CONTINUE                                                                
      NIND  = NUMIM - NIND                                                      
      DO   K = 2,KFIN                                                       
         U(K)  = U(K) + U(K-1)                                                     
      ENDDO

      RETURN                                                                 
      END                                                                    
                                                       

@


1.4
log
@a
@
text
@d2 1
a2 14
C *NAME* = STABK.FOR                   31-JAN-86      13:23:14                  
C----------------------------------=*=----------------------------------        
C           COPYRIGHT 1986 - JEAN-PIERRE BRETAUDIERE                            
C THE UNIVERSITY OF TEXAS HEALTH SCIENCE CENTER AT HOUSTON                      
C MEDICAL SCHOOL - DEPARTMENT OF PATHOLOGY AND LABORATORY MEDICINE              
C P.O. BOX 20708, HOUSTON, TX 77225.                                            
C DISCLAIMER: NO GUARANTEES OF PERFORMANCE ACCOMPANY THIS SOFTWARE,             
C NOR IS ANY RESPONSIBILITY ASSUMED ON THE PART OF THE AUTHOR                   
C OR THE INSTITUTION.  ALL THE SOFTWARE HAS BEEN TESTED EXTENSIVELY             
C AND EVERY EFFORT HAS BEEN MADE TO INSURE ITS RELIABILITY.                     
C THE FOLLOWING SOFTWARE MAY NOT BE COMMUNICATED TO A THIRD PARTY               
C UNDER ANY FORM WITHOUT WRITTEN PERMISSION OF THE AUTHOR.                      
C PLEASE REPORT ANY BUG(S) TO JPB AT (713) 792 52 00.                           
C OR THRU ARPANET AT  ......!rice!ots!ut-path!suprim                            
d5 1
a5 1
C*      INPUT KLAS(ICARD) CONTAINS THE CROSSED-PARTITION WITH KTOT    *         
d7 1
a7 1
C*      OUTPUT KLAS(ICARD) CONTAINS A PARTITION OF NKLA CLASSES.      *         
d20 1
a20 3
      SUBROUTINE STABK (ICARD, NKLA, KLAS, U, IU, IV, KTOT, KFIN,NIND)          

 
d25 4
a28 2
      DIMENSION  U(KTOT), IU(KTOT), IV(KTOT), KLAS(ICARD)                       
      COMMON  / ENSOR / LEC,IMP                                                 
d30 3
a32 1
C  ...    THE SIZES OF THE CROSSED-PARTITION ARE IN U(*)                        
d34 4
a37 7
        DO   K = 1,KTOT                                                       
      U(K) = 0.0                                                                
        ENDDO
        DO   I = 1,ICARD                                                      
      K     = KLAS(I)                                                           
      U(K)  = U(K) + 1.0                                                        
        ENDDO
d39 1
a39 1
C ... THE MOST IMPORTANT (NKLA - 1) CLASSES ARE KEPT.  THE REMAINING            
d43 15
a57 14
        DO   K = 1,KTOT                                                       
      M     = IU(K)                                                             
      IV(M) = KTOT - K + 1                                                      
        ENDDO
        DO  I = 1,ICARD                                                       
      L     = KLAS(I)                                                           
      KO    = IV(L)                                                             
        IF (KO .GT. NKLA)              KO = NKLA                                
      KLAS(I)= KO
        ENDDO                                                             
        DO   K = 1,KTOT                                                       
      KS    = KTOT - K + 1                                                      
      IU(K) = U(KS) + 0.00001                                                   
        ENDDO
d59 1
a59 1
C......... RESULTS OF THE CLASSIFICATION                                        
d63 7
a69 6
        DO   K = 1,KTOT                                                       
        IF (K .LT. NKLA)               NIND = NIND + IU(K)                      
        IF (IU(K) .LE. 0)              GO TO  70                                
      KFIN  = KFIN + 1                                                          
      U(K)  = 100.0*FLOAT(IU(K)) / FLOAT(ICARD)                                 
        ENDDO
d71 9
a79 6
      NIND  = ICARD - NIND                                                      
        DO   K = 2,KFIN                                                       
      U(K)  = U(K) + U(K-1)                                                     
        ENDDO
         RETURN                                                                 
         END                                                                    
@


1.3
log
@CNO_SAVE
@
text
@d35 1
a35 1
CNO_SAVE 
@


1.2
log
@*** empty log message ***
@
text
@d1 1
d32 1
d34 6
d42 1
a42 1
C                                                                               
d44 1
a44 1
C                                                                               
d52 1
a52 1
C                                                                               
d54 2
a55 2
C                                                                               
C     ARE IN NKLA.                                                              
d71 1
a71 1
C                                                                               
d73 1
a73 1
C                                                                               
@


1.1
log
@Initial revision
@
text
@d37 4
a40 3
        DO 10  K = 1,KTOT                                                       
   10 U(K) = 0.0                                                                
        DO 20  I = 1,ICARD                                                      
d42 2
a43 1
   20 U(K)  = U(K) + 1.0                                                        
d49 1
a49 1
        DO 30  K = 1,KTOT                                                       
d51 3
a53 2
   30 IV(M) = KTOT - K + 1                                                      
        DO 40 I = 1,ICARD                                                       
d57 3
a59 2
   40 KLAS(I)= KO                                                               
        DO 50  K = 1,KTOT                                                       
d61 2
a62 1
   50 IU(K) = U(KS) + 0.00001                                                   
d68 1
a68 1
        DO 60  K = 1,KTOT                                                       
d72 2
a73 1
   60 U(K)  = 100.0*FLOAT(IU(K)) / FLOAT(ICARD)                                 
d76 3
a78 2
        DO 80  K = 2,KFIN                                                       
   80 U(K)  = U(K) + U(K-1)                                                     
@
