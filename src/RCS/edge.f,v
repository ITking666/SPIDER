head	1.15;
access;
symbols
	pre_mrcs:1.15
	healthdept_2018:1.15
	pre_getangas:1.14
	GPL2010:1.14
	pre_GPL2010:1.13
	pre_var_equation:1.13
	pre_fftwrings:1.13
	pre_opfiles:1.13
	src:1.13
	best-code:1.13
	x-named-regs:1.13
	x:1.13
	v13-00:1.13
	pre_GPL:1.10
	prec_CA:1.10
	noindx:1.9
	Bproc:1.7
	oct21:1.5
	last77:1.5;
locks; strict;
comment	@c @;


1.15
date	2018.10.03.14.34.05;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.24.13.25.30;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.18.14.03.38;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.17.20.27.43;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.17.18.19.17;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.20.19.39.48;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.03.20.23.32;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.11.14.08.14;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.12.27.19.07.32;	author bimal;	state Exp;
branches;
next	1.6;

1.6
date	99.11.10.23.09.15;	author yuchen;	state Exp;
branches;
next	1.5;

1.5
date	99.02.04.14.50.33;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	98.01.20.21.41.11;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	97.10.06.19.28.45;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.04.37;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.48.26;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.15
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C EDGE.FOR                                     LONG FILENAMES JAN 89 al
C                         LONGER BUG               APR 02 ArDean Leith
C                        OPFILEC                  FEB  03 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  EDGE(LU1,LU3,LU2,NSAM,NROW)
C
C  PURPOSE:    EDGE DETECTION
C      
C  PARAMETERS:
C        LU1      LOGICAL UNIT NUMBER OF FILE
C        LU2      LOGICAL UNIT NUMBER OF FILE
C        NSAM     NUMBER OF SAMPLES
C        NROW     NUMBER OF ROWS
C       
C
C IMPLEMENTATION OF EDGE DETECTION BY WIENER FILTERING
C ORIGINAL VERSION : R.W. FRIES, RPI, TROY, NY
C MODIFIED VERSION : R. MARSHALL, 
C NY STATE DEPT. OF HEALTH, ALBANY, NY  JULY 1977
C FOR DETAILED INFORMATION CF. WRITEUP "EDGE DETECTION IN NOISY
C IMAGES USING RECURSIVE DIGITAL FILTERING" BY J.W. MODESTINO
C AND R.W. FRIES, ELECTRICAL AND SYSTEMS ENGINEERING DEPT.,
C RENSSELAER POLYTECHNIC INSTITUTE, TROY, NY.12181
C
C THE FOLLOWING FILTER TYPES ARE BEING USED:
C
C ########################## 1 ######## 2 ####### 3 ###### 4 ######
C
C XI (S/N RATIO )    =   INFINITE       10       10       3 DB
C RHO(CORRELATION)   =      -          -0.9      0.0      0.5
C LAMBDA(EDGE FREQU.)=      0.05        0.05     0.025    0.0125
C  (PER UNIT LENGTH)
C
C--*******************************************************************

      SUBROUTINE EDGE(LU1,LU3, LU2, NSAM, NROW)

      INCLUDE 'CMBLOCK.INC'

      DIMENSION X(10*NSAM)

      CHARACTER *11 SCR
      INTEGER       CUR,PREV,PREVY,CURY,NEXTY,REC
      REAL          FB11(4),FA10(4),FA11(4),FA(4),FF(3)

      DATA SCR(1:7)/'SCR999.'/

C     FILTER TYPES ####### 1 ####### 2 ###### 3 ###### 4 ######
      DATA FB11 /-0.8256, -0.9244, -0.8460, -0.7556/
      DATA FA10 /-0.2149, -0.1944, -0.2849, -0.4815/
      DATA FA11 / 0.0098, -0.1929, -0.1687,  0.0102/
      DATA FA   / 0.115,   0.084,   0.053,   0.0088/

      DATA FF / 0.2, 0.4, 0.6/

C     DEFAULT LOGICAL UNIT ASSIGNMENTS
      LUN1 = LU1
      LUN2 = LU2
      LUN3 = LU3

C     CREATE SCRATCH FILE NAME ("." IS IN SCRATCH)
      NLET = 7
      CALL LONGER(SCR,NLET,DATEXC,IRTFLG)

      CUR  = 1
      PREV = 2

C     ADDRESS ASSIGNMENTS
      IX = 0
      IXOUT = IX + 2*NSAM
      IY    = IXOUT + NSAM
      IYL   = IY + 3*NSAM
      IYR   = IYL + 2*NSAM
      ITOT  = IYR + 2*NSAM
      
      MAXIM = 0
      IFORM = 1
      CALL OPFILEC(0,.FALSE.,SCR,LUN2,'U',IFORM,NSAM,NROW,1,
     &             MAXIM,' ',.TRUE.,IRTFLG)
      IF (IRTFLG .NE. 0)  RETURN

843   CALL RDPRMI(IFILTR, IDUM, NOT_USED, 'FILTER NUMBER (1-4)')

      IF (IFILTR .LE. 0 .OR. IFILTR .GE. 5) THEN
        CALL ERRT(16,'EDGE',NE)
        GOTO 843
      ENDIF

      B11 = FB11(IFILTR)
      A10 = FA10(IFILTR)
      A11 = FA11(IFILTR)
      A   = FA(IFILTR)

      IFTH = 2
      CALL RDPRI1S(IFTH,NOT_USED,
     &   'THRESHOLD (1)LOW, (2)MEDIUM, (3)HIGH',IRTFLG)
      FAC    = FF(IFTH)
      THRESH = 0.
      B10    = -.5*(B11+1.)

C     INITIALIZE PREVIOUS FILTER OUTPUTS TO ZERO

      NSAM0 = 10*NSAM
      DO  I = 1,NSAM0
           X(I) = 0.0
      ENDDO

C     INITIALIZE CURRENT INPUT LINE
      CALL REDLIN (LUN1,X((CUR-1)*NSAM+1),NSAM,NROW)

C     MOVE DOWN THROUGH THE IMAGE LINE BY LINE

      DO I=NROW-1,2,-1

C       MAKE OLD CURRENT LINE NEW PREVIOUS LINE

        IHOLD = CUR
        CUR   = PREV
        PREV  = IHOLD
        NCUR  = (CUR-1)*NSAM
        NPREV = (PREV-1)*NSAM

C       READ IN NEW CURRENT LINE

        CALL REDLIN(LUN1, X(NCUR+1), NSAM, I)
 
C       MOVE THROUGH LINE POINT BY POINT

        DO  J=2,NSAM-1

C          RIGHT MOVING FILTER SECTION

           JCUR = NCUR+J
           JPREV = NPREV+J
           JPREV1 = JPREV-1
           JCUR1 = JCUR-1
      X(IYR+JCUR) = -A10*(X(IYR+JCUR1)+X(IYR+JPREV)) + B10*(X(JPREV)+
     1     X(JCUR1)) + B11*X(JPREV1) - A11*X(IYR+JPREV1) + X(JCUR)

C          LEFT MOVING FILTER SECTION

           JL = NSAM - J + 1
           JLCUR = NCUR + JL
           JLCUR1 = JLCUR + 1
           JLPREV = NPREV + JL
           JLPRE1 = JLPREV + 1

           X(IYL+JLCUR) = -A10*(X(IYL+JLCUR1)+X(IYL+JLPREV)) + X(JLCUR)
     1       + B10*(X(JLCUR1)+X(JLPREV)) + B11*X(JLPRE1)
     2        - A11*X(IYL+JLPRE1)
C          END POINT BY POINT LOOP
        ENDDO


C       SUM LEFT AND RIGHT FILTER OUTPUTS

        DO  J=2,NSAM-1
           X(IY+J) = X(IYR+NCUR+J) + X(IYL+NCUR+J+1)
        ENDDO

C       WRITE OUT OUTPUT OF DOWN MOVING FILTER SECTIONS

        CALL WRTLIN(LUN2, X(IY+1), NSAM, I)

C       END LINE BY LINE LOOP MOVING DOWN

        ENDDO


C       INITIALIZE PREVIOUS FILTER OUTPUTS
C       YL CHANGED TO IYL JUNE 93 al to avoid alpha compiler error message
C       (LOOKS LINE THIS WAS NEVER CORRECT!)

        DO J=IYL+1,NSAM0
           X(J) = 0
        ENDDO


1125    DO L=1,NSAM
          X(IY+NSAM+L) = 0
          X(IY+2*NSAM+L) = 0
        ENDDO

        X(IXOUT+1) = 0
        X(IXOUT+NSAM-1) = 0
        X(IXOUT+NSAM) = 0

C       INITIALIZE POINTERS FOR FINAL EDGE OUTPUT

        PREVY = 1
        CURY = 2
        NEXTY = 3

C       REREAD FIRST INPUT LINE
C       ISET INITIALZED TO 0 TO AVOID ALPHA COMPILER ERROR JUNE 93 al
        ISET = 0
        IF(ISET.NE.3) CALL REDLIN(LUN1, X((CUR-1)*NSAM+1), NSAM, 1)

C       REC+1 IS FILTER OUTPUT POINTER
C       REC IS EDGE OUTPUT POINTER
C       MOVE THROUGH IMAGE LINE BY LINE UP

        DO  REC=2,NROW-2

C       UPDATE POINTERS FOR CURRENT, PREVIOUS AND NEXT LINES
C       OF FILTER OUTPUT

        IHOLD = PREVY
        PREVY = CURY
        CURY = NEXTY
        NEXTY = IHOLD
        
        NCURY = (CURY-1)*NSAM
        NPREVY = (PREVY-1)*NSAM
        NNEXTY = (NEXTY-1)*NSAM
        IF(ISET.EQ.3) GO TO 1550

C       UPDATE POINTERS FOR CURRENT AND PREVIOUS INPUT LINES

        IHOLD = CUR
        CUR = PREV
        PREV = IHOLD
       NCUR = (CUR-1)*NSAM
      NPREV = (PREV-1)*NSAM

C       READ IN CURRENT LINE

        CALL REDLIN(LUN1, X(NCUR+1), NSAM, REC)

C       MOVE THROUGH LINE POINT BY POINT

        DO  J=2,NSAM-1
      JCUR = NCUR + J
      JCUR1 = JCUR - 1
      JPREV = NPREV + J
      JPREV1 = JPREV - 1

C       RIGHT MOVING FILTER SECTION

        X(IYR+JCUR) =-A10*(X(IYR+JCUR1)+X(IYR+JPREV))-A11*X(IYR+JPREV1)
     1  + X(JCUR) + B10*(X(JCUR1)+X(JPREV)) + B11*X(JPREV1)

C       LEFT MOVING FILTER SECTION

        JL = NSAM-J+1

      JLCUR = NCUR + JL
      JLCUR1 = JLCUR + 1
      JLPREV = NPREV + JL
      JLPRE1 = JLPREV + 1
        X(IYL+JLCUR) =-A10*(X(IYL+JLCUR1)+X(IYL+JLPREV)) 
     1 -A11*X(IYL+JLPRE1)
     2 + X(JLCUR) +B10*(X(JLCUR1)+X(JLPREV)) + B11*X(JLPRE1)

C       END OF POINT BY POINT LOOP

        ENDDO

C       READ IN OUTPUT OF DOWN MOVING FILTER SECTION

        CALL REDLIN(LUN2, X(IY+NNEXTY+1), NSAM, REC+1)

C       ADD UP AND DOWN MOVING FILTER SECTIONS

        DO J=2,NSAM-1
           X(IY+NNEXTY+J) = A*(X(IYR+NCUR+J) + X(IYL+NCUR+J+1)
     1      + X(IY+NNEXTY+J))
        ENDDO

        CALL WRTLIN(LUN2, X(IY+NNEXTY+1), NSAM, REC)
        
        IF(ISET .EQ.2) GO TO 1600

C       MOVE THROUGH POINT BY POINT AND DETERMINE IF 
C       EDGE ELEMENT IS PRESENT

1550    IF(ISET.EQ.3) CALL REDLIN(LUN2,X(IY+NNEXTY+1),NSAM,REC+1)

        DO I=2,NSAM-2
      INEXT = NNEXTY + I
      INEXTN = INEXT - 1
      INEXTP = INEXT + 1
      IPREVY = NPREVY + I
      IPREVP = IPREVY + 1
      IPREVN = IPREVY - 1
      ICURP  = NCURY + I + 1
      ICURN  = ICURP - 2
      DIF1   = ABS(X(IY+INEXTN)-X(IY+IPREVP))
      DIF2   = ABS(X(IY+INEXT)-X(IY+IPREVY))*1.414
      DIF3   = ABS(X(IY+INEXTP)-X(IY+IPREVP))
      DIF4   = ABS(X(IY+ICURN)-X(IY+ICURP))*1.414

        DIF = 0
        DIF = AMAX1(DIF,DIF1,DIF2,DIF3,DIF4)

        ZSUM = X(IY+ICURN)    + X(IY+NCURY+I) + X(IY+ICURP)
     1         + X(IY+INEXTN)
     2         + X(IY+INEXT)  + X(IY+INEXTP) + X(IY+IPREVN) 
     3         + X(IY+IPREVY) + X(IY+IPREVP)

           ZSUM =ZSUM*ZSUM*FAC

C          INITIALIZE TO NO EDGE

           X(IXOUT+I) = 0

C          IF AN EDGE SET TO MAXIMUM VALUE

           IF(DIF*DIF-ZSUM .GT. THRESH) X(IXOUT+I) = 2.
        ENDDO

C       END POINT BY POINT LOOP


C       WRITE OUT EDGE INFORMATION
        CALL WRTLIN(LUN3, X(IXOUT+1), NSAM, REC)

1600    CONTINUE
        ENDDO

        DO I=2,NSAM-2
          X(IXOUT+I) = 0
        ENDDO

        IF (ISET .EQ.2) GO TO 2150
        CALL WRTLIN(LUN3, X(IXOUT+1), NSAM, 1)
        CALL WRTLIN(LUN3, X(IXOUT+1), NSAM, NROW)
        CALL WRTLIN(LUN3, X(IXOUT+1), NSAM, NROW-1)
        
        IF (ISET .EQ.3) GO TO 2200


2150    CALL WRTLIN(LUN2, X(IXOUT+1), NSAM, 1)
        CALL WRTLIN(LUN2, X(IXOUT+1), NSAM, NROW-1)
        CALL WRTLIN(LUN2, X(IXOUT+1), NSAM, NROW)

2200    CLOSE(LUN2)

C       END LINE BY LINE LOOP

        RETURN
        END




@


1.14
log
@GPL_2010
@
text
@d14 1
a14 1
C=* Email: spider@@wadsworth.org                                        *
d344 1
a344 1
	ENDDO
@


1.13
log
@GPL License fixed
@
text
@a8 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d10 5
a14 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d16 1
a16 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.12
log
@GPL License fixed
@
text
@a47 1
C IMAGE PROCESSING GROUP, DIVISION OF LABORATORIES AND RESEARCH,
@


1.11
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a8 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d12 1
a12 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a31 7

C *  COPYRIGHT (C)1981,1987,1990 WADSWORTH CENTER FOR LABORATORIES AND     *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
a32 1
C **************************************************************************
@


1.10
log
@opfilec
@
text
@d2 1
d9 1
d11 1
d13 24
d43 1
@


1.9
log
@longer bug fixed
@
text
@d5 2
a6 1
C                         LONGER BUG APR 02 ArDean Leith
d91 2
a92 1
      CALL OPFIL(.FALSE.,SCR,LUN2,'U',NSAM,NROW,1,
@


1.8
log
@nloop,iloop_removed
@
text
@d5 2
a50 2
 

a52 1

d61 1
a61 1
C FILTER TYPES ####### 1 ####### 2 ###### 3 ###### 4 ######
d75 1
d78 1
a78 1
30    CUR = 1
a88 1

d92 1
a92 4
      IF (IRTFLG .NE. 0) THEN
         CALL ERRT(4,'EDGE',NE)
         RETURN
      ENDIF
d104 1
a104 1
      A = FA(IFILTR)
d106 6
a111 5
      CALL RDPRMI(IFTH,IDUM,NOT_USED,
     &   'THRESHOLD (1)LOW, (2)MEDIUM, (3)HIGH')
        FAC    = FF(IFTH)
        THRESH = 0.
        B10    = -.5*(B11+1.)
d113 1
a113 1
C       INITIALIZE PREVIOUS FILTER OUTPUTS TO ZERO
d115 2
a116 2
        NSAM0 = 10*NSAM
        DO  I = 1,NSAM0
d118 1
a118 1
        ENDDO
d120 2
a121 2
C       INITIALIZE CURRENT INPUT LINE
        CALL REDLIN (LUN1,X((CUR-1)*NSAM+1),NSAM,NROW)
d123 1
a123 1
C       MOVE DOWN THROUGH THE IMAGE LINE BY LINE
d125 1
a125 1
        DO I=NROW-1,2,-1
d130 3
a132 3
        CUR = PREV
        PREV = IHOLD
        NCUR = (CUR-1)*NSAM
d143 1
a143 1
C       RIGHT MOVING FILTER SECTION
d145 4
a148 4
      JCUR = NCUR+J
      JPREV = NPREV+J
      JPREV1 = JPREV-1
      JCUR1 = JCUR-1
d150 1
a150 3
     1  X(JCUR1)) + B11*X(JPREV1) - A11*X(IYR+JPREV1) + X(JCUR)

C       LEFT MOVING FILTER SECTION
d152 1
a152 10
      JL = NSAM - J + 1
      JLCUR = NCUR + JL
      JLCUR1 = JLCUR + 1
      JLPREV = NPREV + JL
      JLPRE1 = JLPREV + 1

        X(IYL+JLCUR) = -A10*(X(IYL+JLCUR1)+X(IYL+JLPREV)) + X(JLCUR)
     1  + B10*(X(JLCUR1)+X(JLPREV)) + B11*X(JLPRE1)
     2  - A11*X(IYL+JLPRE1)
C       END POINT BY POINT LOOP
d154 10
@


1.7
log
@adapted for dynamical memory allocation
@
text
@d98 1
a98 1
843   CALL RDPRMI(IFILTR, IDUM, NLOOP,ILOOP, 'FILTER NUMBER (1-4)')
d110 1
a110 1
      CALL RDPRMI(IFTH,IDUM,NLOOP,ILOOP,
@


1.6
log
@a
@
text
@d12 1
a12 1
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
d15 1
a15 1
C  EDGE(LU1,LU3,LU2,NSAM,NROW,MAXDIM)
d24 1
a24 1
C        MAXDIM   MAXIMUM BUFFER SPACE AVAILABLE
d47 1
a47 1
      SUBROUTINE EDGE(LU1,LU3, LU2, NSAM, NROW,MAXDIM)
a52 1
      COMMON        X(1)
d54 2
d88 1
a88 4
      IF (ITOT .GT. MAXDIM) THEN
         CALL ERRT(6,'EDGE',NE)
         RETURN
      ENDIF
d95 1
a95 1
	 RETURN
d112 2
a113 2
	FAC    = FF(IFTH)
	THRESH = 0.
d121 1
a121 1
	ENDDO
d124 1
a124 1
	CALL REDLIN (LUN1,X((CUR-1)*NSAM+1),NSAM,NROW)
d128 1
a128 1
	DO I=NROW-1,2,-1
d132 3
a134 3
	IHOLD = CUR
	CUR = PREV
	PREV = IHOLD
d140 1
a140 1
	CALL REDLIN(LUN1, X(NCUR+1), NSAM, I)
d144 1
a144 1
	DO  J=2,NSAM-1
d163 1
a163 1
	X(IYL+JLCUR) = -A10*(X(IYL+JLCUR1)+X(IYL+JLPREV)) + X(JLCUR)
d168 1
a168 1
	ENDDO
d173 1
a173 1
	DO  J=2,NSAM-1
d175 1
a175 1
	ENDDO
d179 1
a179 1
	CALL WRTLIN(LUN2, X(IY+1), NSAM, I)
d183 1
a183 1
	ENDDO
d190 1
a190 1
	DO J=IYL+1,NSAM0
d195 1
a195 1
1125	DO L=1,NSAM
d206 3
a208 3
	PREVY = 1
	CURY = 2
	NEXTY = 3
d213 1
a213 1
	IF(ISET.NE.3) CALL REDLIN(LUN1, X((CUR-1)*NSAM+1), NSAM, 1)
d219 1
a219 1
	DO 1600 REC=2,NROW-2
d224 5
a228 5
	IHOLD = PREVY
	PREVY = CURY
	CURY = NEXTY
	NEXTY = IHOLD
 	
d232 1
a232 1
	IF(ISET.EQ.3) GO TO 1550
d236 3
a238 3
	IHOLD = CUR
	CUR = PREV
	PREV = IHOLD
d244 1
a244 1
	CALL REDLIN(LUN1, X(NCUR+1), NSAM, REC)
d248 1
a248 1
	DO  J=2,NSAM-1
d256 1
a256 1
	X(IYR+JCUR) =-A10*(X(IYR+JCUR1)+X(IYR+JPREV))-A11*X(IYR+JPREV1)
d261 1
a261 1
	JL = NSAM-J+1
d267 1
a267 1
	X(IYL+JLCUR) =-A10*(X(IYL+JLCUR1)+X(IYL+JLPREV)) 
d273 1
a273 1
	ENDDO
d277 1
a277 1
	CALL REDLIN(LUN2, X(IY+NNEXTY+1), NSAM, REC+1)
d281 1
a281 1
	DO J=2,NSAM-1
d286 3
a288 3
	CALL WRTLIN(LUN2, X(IY+NNEXTY+1), NSAM, REC)
 	
	IF(ISET .EQ.2) GO TO 1600
d293 1
a293 1
1550	IF(ISET.EQ.3) CALL REDLIN(LUN2,X(IY+NNEXTY+1),NSAM,REC+1)
d295 1
a295 1
	DO I=2,NSAM-2
d309 2
a310 2
	DIF = 0
	DIF = AMAX1(DIF,DIF1,DIF2,DIF3,DIF4)
d317 1
a317 1
	   ZSUM =ZSUM*ZSUM*FAC
d325 2
a326 2
	   IF(DIF*DIF-ZSUM .GT. THRESH) X(IXOUT+I) = 2.
	ENDDO
d332 1
a332 1
	CALL WRTLIN(LUN3, X(IXOUT+1), NSAM, REC)
d334 2
a335 2
1600 	CONTINUE

d337 1
a337 1
	DO I=2,NSAM-2
d341 6
a346 6
 	IF (ISET .EQ.2) GO TO 2150
	CALL WRTLIN(LUN3, X(IXOUT+1), NSAM, 1)
	CALL WRTLIN(LUN3, X(IXOUT+1), NSAM, NROW)
	CALL WRTLIN(LUN3, X(IXOUT+1), NSAM, NROW-1)
 	
	IF (ISET .EQ.3) GO TO 2200
d349 3
a351 3
2150	CALL WRTLIN(LUN2, X(IXOUT+1), NSAM, 1)
	CALL WRTLIN(LUN2, X(IXOUT+1), NSAM, NROW-1)
	CALL WRTLIN(LUN2, X(IXOUT+1), NSAM, NROW)
d353 1
a353 1
2200	CLOSE(LUN2)
d358 4
a361 1
	END
@


1.5
log
@CNO_SAVE
@
text
@d49 1
a49 1
CNO_SAVE 
@


1.4
log
@used opfil, f90 formatting
@
text
@d49 2
@


1.3
log
@*** empty log message ***
@
text
@d4 1
a4 2
C EDGE.FOR
C                                   LONG FILENAMES JAN 89 al
a48 1
#ifdef SP_UNIX
a49 3
#else
      INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d51 1
a51 1
      COMMON X(1)
d60 4
a63 4
	DATA FB11 /-0.8256, -0.9244, -0.8460, -0.7556/
	DATA FA10 /-0.2149, -0.1944, -0.2849, -0.4815/
	DATA FA11 / 0.0098, -0.1929, -0.1687,  0.0102/
	DATA FA   / 0.115,   0.084,   0.053,   0.0088/
d65 1
a65 1
	DATA FF / 0.2, 0.4, 0.6/
d75 2
a76 2
30	CUR = 1
	PREV = 2
d78 1
a78 1
C ADDRESS ASSIGNMENTS
d90 6
a95 4
      CALL OPENF(SCR,LUN2,NSAM,NROW,'UNKNOWN',NF,1)
      IF (NF .NE. 2) THEN
        CALL ERRT(4,'EDGE',NE)
	RETURN
d116 1
a116 1
C  INITIALIZE PREVIOUS FILTER OUTPUTS TO ZERO
d123 1
a123 1
C  INITIALIZE CURRENT INPUT LINE
d126 1
a126 1
C  MOVE DOWN THROUGH THE IMAGE LINE BY LINE
d130 1
a130 1
C  MAKE OLD CURRENT LINE NEW PREVIOUS LINE
d135 2
a136 2
      NCUR = (CUR-1)*NSAM
      NPREV = (PREV-1)*NSAM
d138 1
a138 1
C  READ IN NEW CURRENT LINE
d142 1
a142 1
C  MOVE THROUGH LINE POINT BY POINT
d146 1
a146 1
C  RIGHT MOVING FILTER SECTION
d155 1
a155 1
C  LEFT MOVING FILTER SECTION
d157 1
a157 1
	JL = NSAM - J + 1
d166 1
a166 1
C  END POINT BY POINT LOOP
d171 1
a171 1
C  SUM LEFT AND RIGHT FILTER OUTPUTS
d174 1
a174 1
      X(IY+J) = X(IYR+NCUR+J) + X(IYL+NCUR+J+1)
d177 1
a177 1
C  WRITE OUT OUTPUT OF DOWN MOVING FILTER SECTIONS
d181 1
a181 1
C  END LINE BY LINE LOOP MOVING DOWN
d186 3
a188 3
C  INITIALIZE PREVIOUS FILTER OUTPUTS
C  YL CHANGED TO IYL JUNE 93 al to avoid alpha compiler error message
C  (LOOKS LINE THIS WAS NEVER CORRECT!)
d200 3
a202 3
      X(IXOUT+1) = 0
      X(IXOUT+NSAM-1) = 0
      X(IXOUT+NSAM) = 0
d204 1
a204 1
C  INITIALIZE POINTERS FOR FINAL EDGE OUTPUT
d210 1
a210 1
C  REREAD FIRST INPUT LINE
d215 3
a217 3
C  REC+1 IS FILTER OUTPUT POINTER
C  REC IS EDGE OUTPUT POINTER
C  MOVE THROUGH IMAGE LINE BY LINE UP
d221 2
a222 2
C  UPDATE POINTERS FOR CURRENT, PREVIOUS AND NEXT LINES
C  OF FILTER OUTPUT
d229 3
a231 3
      NCURY = (CURY-1)*NSAM
      NPREVY = (PREVY-1)*NSAM
      NNEXTY = (NEXTY-1)*NSAM
d234 1
a234 1
C  UPDATE POINTERS FOR CURRENT AND PREVIOUS INPUT LINES
d242 1
a242 1
C  READ IN CURRENT LINE
d246 1
a246 1
C  MOVE THROUGH LINE POINT BY POINT
d254 1
a254 1
C  RIGHT MOVING FILTER SECTION
d259 1
a259 1
C  LEFT MOVING FILTER SECTION
d271 1
a271 1
C  END OF POINT BY POINT LOOP
d275 1
a275 1
C  READ IN OUTPUT OF DOWN MOVING FILTER SECTION
d279 1
a279 1
C  ADD UP AND DOWN MOVING FILTER SECTIONS
d290 2
a291 2
C  MOVE THROUGH POINT BY POINT AND DETERMINE IF 
C  EDGE ELEMENT IS PRESENT
d317 1
a317 1
	ZSUM =ZSUM*ZSUM*FAC
d319 1
a319 1
C  INITIALIZE TO NO EDGE
d321 1
a321 1
      X(IXOUT+I) = 0
d323 1
a323 1
C  IF AN EDGE SET TO MAXIMUM VALUE
d325 1
a325 1
	IF(DIF*DIF-ZSUM .GT. THRESH) X(IXOUT+I) = 2.
d328 1
a328 2
C  END POINT BY POINT LOOP

a329 1
C  WRITE OUT EDGE INFORMATION
d331 1
@


1.2
log
@cpp_lines_added
@
text
@d122 1
a122 1
        DO 100 I = 1,NSAM0
d124 1
a124 1
100	CONTINUE
d131 1
a131 1
	DO 600 I=NROW-1,2,-1
d147 1
a147 1
	DO 400 J=2,NSAM-1
d171 1
a171 1
400	CONTINUE
d176 3
a178 2
	DO 500 J=2,NSAM-1
500   X(IY+J) = X(IYR+NCUR+J) + X(IYL+NCUR+J+1)
d186 1
a186 1
600 	CONTINUE
d251 1
a251 1
	DO 1400 J=2,NSAM-1
d276 1
a276 1
1400 	CONTINUE
d298 1
a298 1
	DO 2000 I=2,NSAM-2
d329 1
a329 1
2000	CONTINUE
@


1.1
log
@Initial revision
@
text
@d50 3
d54 1
@
