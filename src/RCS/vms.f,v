head	1.30;
access;
symbols
	pre_getangas:1.28
	GPL2010:1.27
	pre_GPL2010:1.26
	pre_var_equation:1.26
	pre_fftwrings:1.26
	pre_opfiles:1.26
	src:1.26
	best-code:1.25
	named-reg:1.25
	x-named-regs:1.24
	x:1.24
	v13-00:1.23
	pre_GPL:1.21
	prec_CA:1.20
	noindx:1.19
	Bproc:1.15
	oct21:1.12
	last77:1.12;
locks; strict;
comment	@c @;


1.30
date	2015.07.27.14.30.01;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2012.08.29.14.17.55;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2011.01.07.17.17.51;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2010.06.24.13.27.14;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2006.03.24.19.19.22;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2005.12.12.15.31.34;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2005.11.15.21.51.32;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2005.10.17.20.40.10;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.17.18.30.33;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2003.10.30.19.49.46;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2003.09.03.16.18.07;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2001.04.09.14.25.05;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2001.03.22.19.33.22;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2000.11.13.20.24.14;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2000.11.09.14.50.11;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2000.09.06.16.31.06;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2000.09.05.19.50.05;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	99.11.10.23.11.24;	author yuchen;	state Exp;
branches;
next	1.12;

1.12
date	99.03.24.17.17.23;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.02.05.16.32.38;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	98.03.05.14.39.39;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	97.11.20.14.17.30;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	97.11.19.17.40.25;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	97.11.19.16.13.45;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	97.10.02.16.42.09;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	97.07.16.14.03.05;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	97.07.10.17.50.28;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	94.05.17.12.47.09;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.12.29;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.53.43;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.30
log
@implicit none
@
text
@
C++*************************************************************************
C
C VMS.F                         
C                             REMOVED FILNAMSUB   APR 2001 ARDEAN LEITH
C                             MULTILINE           SEP 2003 ARDEAN LEITH
C                             RDPR PARAMETERS     04/14/05 ARDEAN LEITH
C                             [_d] --> xd         03/24/06 ARDEAN LEITH
C                             NULL AT END BUG     01/06/10 ARDEAN LEITH
C                             NULL AT END BUG     08/29/12 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2012  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   VMS  SOLICTS SYSTEM COMMAND AND THEN RUNS THAT COMMAND 
C
C--*******************************************************************

	SUBROUTINE VMS(MULTILINE)

        IMPLICIT NONE
	INCLUDE 'CMBLOCK.INC' 

        LOGICAL             :: MULTILINE

	CHARACTER(LEN=160)  :: COMLIN
	CHARACTER(LEN=1600) :: COMMAN
        INTEGER             :: system,lnblnkn
        LOGICAL             :: GETANS,STRIP
        LOGICAL             :: UPPER,WANTSUB,SAYPRMT,SAYANS,ENDATSEMI

        INTEGER             :: NC,IRTFLG,NCM,NDUM,I,NCT,IRET

        INTEGER             :: ICOMM,MYPID,MPIERR

        CALL SET_MPI(ICOMM,MYPID,MPIERR)  ! SETS ICOMM AND MYPID

        COMMAN    = CHAR(0)

C       DO NOT UPPERCASE THE INPUT LINE, DO NOT STRIP AFTER ;
        UPPER     = .FALSE.
        WANTSUB   = .TRUE.
        SAYPRMT   = .TRUE.
        SAYANS    = .FALSE.
        ENDATSEMI = .FALSE.
        GETANS    = .TRUE.
        STRIP     = .FALSE.

        CALL RDPR('SYSTEM COMMAND',NC,COMMAN,GETANS,
     &             UPPER,WANTSUB,SAYPRMT,SAYANS,ENDATSEMI,STRIP,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
 
        IF (MULTILINE) THEN
C          DO NOT UPPERCASE THE INPUT LINE, DO NOT STRIP AFTER ;
10         SAYPRMT   = .FALSE.
           CALL RDPR('',NCM,COMLIN,GETANS,
     &             UPPER,WANTSUB,SAYPRMT,SAYANS,ENDATSEMI,STRIP,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           IF (NCM > 1 .OR. COMLIN(1:1) .NE. '.') THEN
C              CONCATENATE WITH COMMAN
               IF ((NC + NCM) > 1600) THEN
                  CALL ERRT(101,'COMMAND LIMITED TO 1600 CHAR.',NDUM)
                  RETURN
               ENDIF
               COMMAN = COMMAN(1:NC) // COMLIN(1:NCM)
               NC     = NC + NCM
               GOTO 10
           ENDIF
        ENDIF                

cc      write(6,*) comman(:nc)

        IF (NC < 160) COMMAN(NC+1:NC+1) = CHAR(0)
        NC = LNBLNKN(COMMAN)

        CALL DEBRAKXREG(COMMAN,NC)
        NC = LNBLNKN(COMMAN)

        IF (MYPID <= 0) THEN
           IF (NC <= 80) THEN
              WRITE(NOUT,90)COMMAN(1:NC)
              IF (NDAT .NE. NOUT) WRITE(NDAT,90)COMMAN(1:NC)
   90         FORMAT(/,2X,A)
           ELSE
              DO I=1,NC,80
                 NCT = lnblnkn(COMMAN(I:I+79)) -1
                 WRITE(NOUT,91) COMMAN(I:I+NCT-1)
                 IF (NDAT .NE. NOUT) WRITE(NDAT,91)COMMAN(I:I++NCT-1)
   91            FORMAT(' ',A)
              ENDDO
           ENDIF
           IF (VERBOSE) WRITE(NOUT,*) ' '

           IRET = system(COMMAN(1:NC))
        ENDIF

	END

C      *********************** DEBRAKXREG ********************************

       SUBROUTINE DEBRAKXREG(CINPUT,NCHAR)

       IMPLICIT NONE

       CHARACTER(LEN=*)   :: CINPUT
       INTEGER            :: NCHAR

       CHARACTER(LEN=161) :: CSUB
       LOGICAL            :: ISDIGI
       INTEGER            :: I,J,NDIG,IRTFLG

C        CONVERT NEW: [name] FORMAT to OLD x11 REGISTER FORMAT
         I     = 1
         DO WHILE (I < (NCHAR - 3))
            IF (CINPUT(I:I+1) == '[_') THEN
C              START OF [_
               J = I + 2
               DO WHILE (J <= NCHAR)
                  IF (ISDIGI(CINPUT(J:J))) THEN
                     J = J + 1
                     CYCLE 
                  ENDIF
                  EXIT
               ENDDO

               IF (CINPUT(J:J) .NE. ']') THEN
                  I = I + 1
                  CYCLE                 ! NOT A [_ddd]
               ENDIF

               NDIG = J - I -2 
               IF (NDIG < 1) THEN
                  I = I + 1
                  CYCLE                 ! NO dd in:  [_]
               ENDIF

               CINPUT(I:I) = 'X'
               CSUB = 'X' // CINPUT(I+2:J)
               CALL SUBCHAR(CSUB(1:NDIG+1),CINPUT,I,J,NCHAR,IRTFLG)
               I = J -1
            ENDIF
            I = I + 1
         ENDDO

         END
@


1.29
log
@NULL AT END BUG for echo
@
text
@d40 1
d43 2
d48 1
a48 1
        LOGICAL             :: MULTILINE,GETANS,STRIP
d51 4
d91 1
a91 1
cc        write(6,*) comman(:nc)
a116 1
        RETURN
d123 2
d126 2
d130 1
@


1.28
log
@null at end of echo removed, blank space added before echo
@
text
@d10 1
d16 1
a16 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d44 1
a44 1
        INTEGER             :: system
d72 1
a72 1
           IF (NCM .GT. 1 .OR. COMLIN(1:1) .NE. '.') THEN
d74 1
a74 1
               IF ((NC + NCM) .GT. 1600) THEN
d86 1
a86 1
        IF (NC .LT. 160) COMMAN(NC+1:NC+1) = CHAR(0)
d92 2
a93 2
        IF (MYPID .LE. 0) THEN
           IF (NC .LE. 80) THEN
d99 3
a101 2
                 WRITE(NOUT,91) COMMAN(I:I+79)
                 IF (NDAT .NE. NOUT) WRITE(NDAT,91)COMMAN(I:I+79)
d123 2
a124 2
         DO WHILE (I .LT. (NCHAR - 3))
            IF (CINPUT(I:I+1) .EQ. '[_') THEN
d127 1
a127 1
               DO WHILE (J .LE. NCHAR)
d141 1
a141 1
               IF (NDIG .LT. 1) THEN
@


1.27
log
@GPL_2010
@
text
@d9 1
d15 1
a15 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d47 1
a47 7
#ifdef USE_MPI
        INCLUDE 'mpif.h'
        ICOMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(ICOMM, MYPID, IERR)
#else
        MYPID = -1
#endif
d49 1
a49 1
        COMMAN = CHAR(0)
d89 1
d95 1
a95 1
   90         FORMAT(/,1X,A)
@


1.26
log
@[_d] --> xd
@
text
@a10 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d12 5
a16 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d18 1
a18 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d23 1
a23 1
C=* This program is distributed in the hope that it will be useful,    *
d25 1
a25 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a26 1
C=*                                                                    *
d28 1
a28 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.25
log
@native named registers
@
text
@d8 1
d97 2
d118 43
@


1.24
log
@named register support
@
text
@d46 1
a46 1
        LOGICAL             :: MULTILINE,GETANS
d66 1
a67 1
COLD	CALL RDPR('SYSTEM COMMAND',NC,COMMAN,.FALSE.,.TRUE.,IRTFLG)
d69 1
a69 1
     &             UPPER,WANTSUB,SAYPRMT,SAYANS,ENDATSEMI,IRTFLG)
a74 1
COLD       CALL RDPR('',NCM,COMLIN,.FALSE.,.FALSE.,IRTFLG)
d76 1
a76 1
     &             UPPER,WANTSUB,SAYPRMT,SAYANS,ENDATSEMI,IRTFLG)
a92 28
C       CHECK FOR PRESENCE OF $DATEXT IN COMMAND -----------------
        IDATEXT = INDEX(COMMAN(1:NC),'$DATEXT')
        IF (IDATEXT .LE. 0) IDATEXT = INDEX(COMMAN(1:NC),'$datext')

        DO WHILE (IDATEXT .GT. 0) 
C          SUBSTITUTE CURRENT DATEXC FOR $DATEXT
           COMMAN = COMMAN(1:IDATEXT-1) // DATEXC(1:3) // 
     &              COMMAN(IDATEXT+7:NC)
           NC      = NC - 4 
           IDATEXT = INDEX(COMMAN(1:NC),'$DATEXT')
           IF (IDATEXT .LE. 0) IDATEXT = INDEX(COMMAN(1:NC),'$datext')
        END DO

C       CHECK FOR PRESENCE OF $PRJEXT IN COMMAND -----------------
C       DO NOT CHANGE CASE OF PRJEXT HERE!!!!

        IPRJEXT = INDEX(COMMAN(1:NC),'$PRJEXT')
        IF (IPRJEXT .LE. 0) IPRJEXT = INDEX(COMMAN(1:NC),'$prjext')

        DO WHILE (IPRJEXT .GT. 0) 
C          SUBSTITUTE CURRENT PRJEXC FOR $PRJEXT
           COMMAN = COMMAN(1:IPRJEXT-1) // PRJEXC(1:3) // 
     &              COMMAN(IPRJEXT+7:NC)
           NC      = NC - 4 
           IPRJEXT = INDEX(COMMAN(1:NC),'$PRJEXT')
           IF (IPRJEXT .LE. 0) IPRJEXT = INDEX(COMMAN(1:NC),'$prjext')
        END DO
 
@


1.23
log
@GPL License fixed
@
text
@d2 1
a2 1
C++*********************************************************************
d7 1
d46 2
a47 1
        LOGICAL             :: MULTILINE
d51 2
a52 3
        INTEGER MYPID, COMM, IERR
        COMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(COMM, MYPID, IERR)
d60 10
a69 2
        IRTFLG = -9
	CALL RDPR('SYSTEM COMMAND',NC,COMMAN,.FALSE.,.TRUE.,IRTFLG)
d71 1
a71 1

d74 4
a77 2
10         IRTFLG = -9
	   CALL RDPR('',NCM,COMLIN,.FALSE.,.FALSE.,IRTFLG)
d125 1
a125 2
#ifdef USE_MPI
        IF (MYPID .EQ. 0) THEN
a140 16
#else
        IF (NC .LE. 80) THEN
           WRITE(NOUT,90)COMMAN(1:NC)
           IF (NDAT .NE. NOUT) WRITE(NDAT,90)COMMAN(1:NC)
   90      FORMAT(/,1X,A)
        ELSE
           DO I=1,NC,80
              WRITE(NOUT,91) COMMAN(I:I+79)
              IF (NDAT .NE. NOUT) WRITE(NDAT,91)COMMAN(I:I+79)
   91         FORMAT(' ',A)
           ENDDO
        ENDIF
        IF (VERBOSE) WRITE(NOUT,*) ' '

        IRET = system(COMMAN(1:NC))
#endif
@


1.22
log
@HRI GPL License used
@
text
@a2 1
C++*************************************************************************
a8 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d12 1
a12 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a31 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.21
log
@mpi
@
text
@d2 1
d11 24
@


1.20
log
@vm m
@
text
@d30 9
d97 18
d129 1
@


1.19
log
@rdpr simplification for symbolic parameters & variable subs.
@
text
@d5 2
a6 1
C                REMOVED FILNAMSUB   APR 2001 ARDEAN LEITH
d21 1
a21 1
	SUBROUTINE VMS
d25 4
a28 1
	COMMON COMMAN
a29 3
	CHARACTER * 160 COMMAN
        INTEGER         system

d37 20
d88 13
a101 4

        WRITE(NOUT,90)COMMAN(1:NC)
        IF (NDAT .NE. NOUT) WRITE(NDAT,90)COMMAN(1:NC)
   90   FORMAT(/,1X,A)
@


1.18
log
@do not strip ;
@
text
@d5 1
a63 4
C       SUBSTITUTE FOR STRINGS WITHIN {...} PORTION(S) OF COMMAND
        CALL FILNAMSUB(COMMAN,NC,.FALSE.,0,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

@


1.17
log
@to ensure no non printing chars
@
text
@d6 8
a13 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d30 2
a31 2
C       DO NOT UPPERCASE THE INPUT LINE, USE RDPR BECAUSE RDPRMC
C       STRIPS ; CONTAINING STRINGS
a33 1

@


1.16
log
@stopped double echo due to bug
@
text
@d29 3
a31 1
C       DO NOT UPPERCASE THE INPUT LINE, USE RDPR BECAUS RDPRMC
d69 4
a72 1
	IRET = system(COMMAN(1:NC))
@


1.15
log
@bad label fixed
@
text
@d70 1
a70 1
        IF (NDAT .NE. 90) WRITE(NDAT,90)COMMAN(1:NC)
@


1.14
log
@added echo
@
text
@d70 1
a70 1
        IF (NDAT .NE. 90) WRITE(NDAT,102)COMMAN(1:NC)
@


1.13
log
@a
@
text
@d24 1
a24 1
	COMMON    COMMAN
a26 1
        CHARACTER * 1   NULL
a28 2
	NULL = CHAR(0)

d68 4
@


1.12
log
@interger for system (needed on dec)
@
text
@d21 1
a21 1
CNO_SAVE
@


1.11
log
@ removed VMS specific code.
@
text
@d28 1
@


1.10
log
@used rdpr not rdprmc to save the ;
@
text
@a25 3
#ifdef SP_VMS
	INTEGER   * 4   LIB$SPAWN
#endif
a35 4
#ifdef SP_VMS
	I4 = LIB$SPAWN(COMMAN(1:NC))
	IF (I4 .NE. 1) WRITE(NOUT,*)' ERROR CODE;', I4
#else
a69 2

#endif
@


1.9
log
@added prjext
@
text
@d34 3
a36 3
C       DO NOT UPPERCASE THE INPUT LINE
        IRTFLG = -999
	CALL RDPRMC(COMMAN,NC,.TRUE.,'SYSTEM COMMAND',NULL,IRTFLG)
d58 2
@


1.8
log
@added $DATEXC substitution
@
text
@d44 3
a46 3
C       CHECK FOR PRESENCE OF $DATEXC IN COMMAND
        IDATEXC = INDEX(COMMAN(1:NC),'$DATEXC')
        IF (IDATEXC .LE. 0) IDATEXC = INDEX(COMMAN(1:NC),'$datexc')
d48 4
a51 4
        DO WHILE (IDATEXC .GT. 0) 
C          SUBSTITUTE CURRENT DATEXC FOR $DATEXC
           COMMAN = COMMAN(1:IDATEXC-1) // DATEXC(1:3) // 
     &              COMMAN(IDATEXC+7:NC)
d53 15
a67 2
           IDATEXC = INDEX(COMMAN(1:NC),'$DATEXC')
           IF (IDATEXC .LE. 0) IDATEXC = INDEX(COMMAN(1:NC),'$datexc')
@


1.7
log
@new parameters on filnamsub call
@
text
@d24 1
a24 1
	COMMON COMMAN
d43 14
@


1.6
log
@ifdef around lib$spawn
@
text
@d44 1
a44 1
        CALL FILNAMSUB(COMMAN,NC,IRTFLG)
@


1.5
log
@CNO_SAVE
@
text
@d26 1
d28 1
@


1.4
log
@added filnamsub
@
text
@d21 1
a21 1

@


1.3
log
@fixed VMS
@
text
@d4 1
a4 1
C VMS.FOR                         
d16 1
a16 1
C  $$ VMS
a19 1

a21 1
#ifdef SP_UNIX
d23 1
a23 3
#else
	INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
d26 3
a28 3
	INTEGER   * 4  LIB$SPAWN
	CHARACTER * 80 COMMAN
        CHARACTER * 1  NULL
d30 6
a35 1
	NULL=CHAR(0)
a37 2
	CALL RDPRMC(COMMAN,NC,.TRUE.,'VMS COMMAND',NULL,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
d41 2
a42 2
        IRTFLG = -999
	CALL RDPRMC(COMMAN,NC,.TRUE.,'UNIX COMMAND',NULL,IRTFLG)
d44 2
a45 1
	I4 = LIB$SPAWN(COMMAN(1:NC))
@


1.2
log
@cpp_lines_added
@
text
@d1 1
a1 1
#ifdef VMS
d4 1
a4 1
C $$ VMS.FOR                         
d20 1
d36 2
a37 1
	CALL RDPRMC(COMMAN,NC,.TRUE.,'VMS',NULL,IRTFLG)
a38 1

a40 1
	END
a41 15
	SUBROUTINE VMS

#ifdef SP_UNIX
	INCLUDE 'CMBLOCK.INC' 
#else
	INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
	COMMON COMMAN

	INTEGER   * 4  LIB$SPAWN
	CHARACTER * 80 COMMAN
        CHARACTER * 1  NULL

	NULL=CHAR(0)

a44 1

d47 2
a50 1
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1

d22 3
d26 1
d41 25
@
