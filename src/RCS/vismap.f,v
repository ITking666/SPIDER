head	1.22;
access;
symbols
	pre_getangas:1.21
	GPL2010:1.21
	pre_GPL2010:1.20
	pre_var_equation:1.20
	pre_fftwrings:1.20
	pre_opfiles:1.20
	src:1.20
	best-code:1.20
	x-named-regs:1.20
	x:1.20
	v13-00:1.20
	pre_GPL:1.19
	prec_CA:1.19
	noindx:1.17
	Bproc:1.16
	oct21:1.14
	last77:1.14;
locks; strict;
comment	@c @;


1.22
date	2013.11.20.20.14.53;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2010.06.24.13.27.13;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2005.10.17.21.01.13;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2003.03.10.17.20.42;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2003.02.20.14.58.11;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2002.03.11.14.08.57;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	99.12.03.15.26.33;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	99.11.10.23.11.24;	author yuchen;	state Exp;
branches;
next	1.14;

1.14
date	99.02.05.14.54.17;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	98.01.05.20.13.02;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	97.12.01.16.56.12;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	97.10.15.18.21.18;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	97.10.15.17.09.56;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	97.10.14.16.42.08;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	97.10.14.15.56.14;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	97.04.03.15.05.58;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	97.01.13.16.49.22;	author mladjadj;	state Exp;
branches;
next	1.5;

1.5
date	97.01.11.21.17.40;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	97.01.10.15.59.57;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	95.02.07.16.39.05;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.12.28;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.53.42;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.22
log
@file name overwrite bug, cosmetic
@
text
@C ++********************************************************************
C
C VISMAP      FILENAME OVERWRITE BUG FIXED       NOV 2013 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2013  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  VISMAP(LUN,LUNO,NDOC1,NDOC2)                                                              *
C                                                                      *
C  PURPOSE:  CREATE VISUAL MAP IN SPIDER IMAGE
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE VISMAP(LUN,LUNO,NDOC1,NDOC2)

        INCLUDE 'CMBLOCK.INC' 
        INCLUDE 'CMLIMIT.INC'

        PARAMETER (MAXREG   = 25)
        PARAMETER (MAXKEY   = 9992)
        PARAMETER (MAXIMDIM = 128)

C       WORKSTATION DISPLAY SIZE:
        PARAMETER (MAXXDP = 1024)
        PARAMETER (MAXYDP = 800)

        CHARACTER (LEN=MAXNAM) :: DOCF1,DOCF2,FILPAT,FILN1,FIL2 	
        CHARACTER (LEN=1)      :: NULL = CHAR(0)
        LOGICAL                :: WINDX,WINDY,PADX,PADY
        DOUBLE PRECISION       :: DAVX,DAVY,DAVX2,DAVY2,DAVD,DAVD2

 	REAL    :: BUF(1024), DBUF(MAXREG,MAXKEY),
     &             BUFX(MAXKEY),BUFY(MAXKEY),PLIST(MAXREG),
     &             PORTION(MAXXDP,132)

 	INTEGER :: IBINK(MAXKEY),IBIN(MAXKEY) ,NKEY(MAXKEY)

        MAXXD = MAXXDP
        MAXYD = MAXYDP

        WRITE(NOUT,401) MAXXD,MAXYD
401     FORMAT('  DEFAULT OUTPUT IMAGE SIZE:',I0,' BY ',I0)

        CALL RDPRMI(NEWMAXXD,NEWMAXYD,NOT_USED,
     &             'NEW IMAGE SIZE: X,Y (<RET>=DEF)')

        IF (NEWMAXXD.NE.0) MAXXD = NEWMAXXD
        IF (NEWMAXYD.NE.0) MAXYD = NEWMAXYD
        NSAMO = MAXXD
        CALL FILERD(DOCF1,NLET,DATEXC,'INPUT DOCUMENT',IRTFLG)       
        CALL FILERD(DOCF2,NLET,DATEXC,'OUTPUT DOCUMENT',IRTFLG)
       
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FILPAT,LUN,'O',IFORM,NSAM,NROW,NSLICE,
     &                   MAXIM,'INPUT',.FALSE.,IRTFLG)
        CLOSE(LUN)

        WRITE(NOUT,103)
103     FORMAT('  RESULT WILL BE AUTOMATICALLY WINDOWED/PADDED')

        CALL RDPRMI(IX,IY,NOT_USED,
     &         'NUMBER OF DIVISIONS IN X,Y')
 
        CALL RDPRM(STNDRT,NOT_USED,
     &         'STANDARD DEVIATION (2.3=DEF)')

        CALL RDPRM2(RANGEU,RANGEL,NOT_USED,
     &         'UPPER/LOWER IMAGE THRESHOLD IN UNITS OF SIGMA') 

        IF (STNDRT.EQ.0) STNDRT=2.3

        CALL FILERD(FIL2,NLET,NULL,'OUTPUT',IRTFLG)
        NSLIC = 1

        CALL RDPRMI(KEY1,KEY2,NOT_USED,
     &             'FIRST & LAST KEY=IMAGE NUMBERS')
        IF (KEY2.GT.MAXKEY) THEN 
           WRITE(NOUT,102)
102        FORMAT('  ENDING KEY TOO LARGE, YOU MIGHT CONSIDER',/
     &            ' TO ASK YOUR PROGRAMMER, IF HE MIGHT BE SO'/
     &            ' KIND TO CHANGE THE PARAMETERS IN VISMAP.F')
           RETURN
        ENDIF

	CALL RDPRMI(ICOLX,ICOLY,NOT_USED,
     &        'COLUMN #S IN DOC. FILE USED FOR X,Y COORD.')
        NREG=MAX(ICOLX,ICOLY)

C       PREPARE WINDOWING AND PADDING
        WINDX = .FALSE.
        WINDY = .FALSE.
        PADX  = .FALSE.
        PADY  = .FALSE.

C       CALCULATE AVAILABLE SPACE FOR IMAGES (BORDERS 2 PIXELS):
        IXSEC   = MAXXD/IX
        IYSEC   = MAXYD/IY
        IYSEC   = MIN(IYSEC,130)
        IXDIM   = MAXXD/IX-2
        IYDIM   = MAXYD/IY-2
        NROWOUT = IYSEC*IY

        MAXIM = 0
        CALL OPFILEC(0,.FALSE.,FIL2,LUNO,'U',IFORM,MAXXD,NROWOUT,NSLIC,
     &                   MAXIM,' ',.FALSE.,IRTFLG)

C       FIND OUT IF PADDING/WINDOWING NECESSARY.
        IF (IXDIM .LE. NSAM) WINDX = .TRUE.
        IF (IYDIM .LE. NROW) WINDY = .TRUE.
        IF (.NOT. WINDX) PADX =.TRUE.
        IF (.NOT. WINDY) PADY =.TRUE.

C        DETERMINE STARTING/ENDING INDICES 
        IXA = 1
        IXE = NSAM

        IF (WINDX) THEN
           IXA = (NSAM-IXDIM)/2+1
           IXE = IXA+IXDIM
        ENDIF
        IYA = 1
        IYE = NROW
        IF (WINDY) THEN 
           IYA = (NROW-IYDIM)/2+1
           IYE = IYA+IYDIM
        ENDIF
        IXSTRT = 2
        IXEND = IXDIM+1
        IF (PADX) THEN
           IXSTRT = (IXDIM-NSAM)/2+1
           IXEND  = IXSTRT+NSAM
        ENDIF
        IYSTRT = 2
        IYEND  = IYDIM+1
        IF (PADY) THEN
           IYSTRT = (IYDIM-NROW)/2+1
           IYEND  = IYSTRT+NROW
        ENDIF

        !WRITE(NDAT,221) 
!     &     IXA,IXE,IXSTRT,IXEND,IXDIM,IYA,IYE,IYSTRT,IYEND,IYDIM
221     FORMAT(' ',
     &    'WINDOW/PAD X: INPUT: IXA,IXE, OUTPUT IXSTRT,IXEND,IXDIM'/10X
     &    ,6(1X,I6))
 
C       GET ALL THE COORDINATES:

        ILINE = 0
	NOPEN = 0

C	ADD AN EXTENSION TO THE FILENAME

        DO I=KEY1,KEY2
           CALL UNSDAL(DOCF1,NOPEN,NDOC1,I,PLIST,NREG,
     &         DBUF,MAXKEY,MAXREG,LKEY,LERR) 

           IF (DBUF(1,I) .NE. 0) THEN
              ILINE       = ILINE + 1
              NKEY(ILINE) = I
              BUFX(ILINE) = PLIST(ICOLX)
              BUFY(ILINE) = PLIST(ICOLY)
              !WRITE(NOUT,101) BUFX(ILINE),BUFY(ILINE),ILINE,I
101           FORMAT(' ',2(2X,F12.6),2(2X,I5))
           ENDIF

        END DO

        NOPEN = 0
        CLOSE(NDOC1)

C       FIRST SORT INTO BINS
        XMIN = BUFX(1)
        XMAX = BUFX(1)
        YMIN = BUFY(1)
        YMAX = BUFY(1)

C       DETERMINE MAXIMUM/MINIMUM X AND Y COORDINATES
        DAVX  = 0
        DAVX2 = 0
        DAVY  = 0
        DAVY2 = 0

        DO K=2,ILINE
           BX    = BUFX(K)
           BY    = BUFY(K)
           DAVX  = DAVX+BX
           DAVX2 = DAVX2+BX*DBLE(BX)
           DAVY  = DAVY+BY
           DAVY2 = DAVY2+BY*DBLE(BY)
           IF (BX .LT. XMIN) XMIN = BX
           IF (BX .GT. XMAX) XMAX = BX
           IF (BY .LT. YMIN) YMIN = BY
           IF (BY .GT. YMAX) YMAX = BY
        END DO

        YR = (YMAX-YMIN)*1.01
        XR = (XMAX-XMIN)*1.01                                 

C       CALCULATE SIGMA AND AVERAGE
        FLINE = FLOAT(ILINE)
        DAVX  = DAVX/FLINE
        DAVY  = DAVY/FLINE

        SIGX  = DSQRT((DAVX2-DAVX*DAVX/FLINE)/DBLE(FLINE-1))
        SIGY  = DSQRT((DAVY2-DAVY*DAVY/FLINE)/DBLE(FLINE-1))

        XRA   = 2.*STNDRT*SIGX
        YRA   = 2.*STNDRT*SIGY

        IF (XRA.GT.XR) THEN 
           XRANGE = XR
           TLX    = SIGN(1.,XMIN)*(ABS(XMIN)*1.01)
           TUX    = SIGN(1.,XMAX)*(ABS(XMAX)*1.01)
        ELSE
           XRANGE  = XRA
           XCENTER = DAVX
           XDEV    = XRANGE/2
           TLX     = XCENTER-XDEV
           TUX     = XCENTER+XDEV
        ENDIF

        IF (YRA.GT.YR) THEN 
           YRANGE  = YR
           TLY     = SIGN(1.,YMIN)*(ABS(YMIN)*1.01)
           TUY     = SIGN(1.,YMAX)*(ABS(YMAX)*1.01)
        ELSE
           YRANGE  = YRA
           YCENTER = DAVY
           YDEV    = YRANGE/2
           TLY     = YCENTER-YDEV
           TUY     = YCENTER+YDEV
        ENDIF

        XINTER = XRANGE/FLOAT(IX)
        YINTER = YRANGE/FLOAT(IY) 

        WRITE(NDAT,*) ' '

C       WRITE(NOUT,345) DAVX,DAVY,XDEV,YDEV,XRANGE,YRANGE,TLX,TUX,
C     &                 TLY,TUY,XINTER,YINTER
        WRITE(NDAT,345) XMAX,XMIN,XR,YMAX,YMIN,YR, 
     &                  DAVX,DAVY,XDEV,YDEV,XRANGE,YRANGE,TLX,TUX
     &                  ,TLY,TUY,XINTER,YINTER,IX,IY
345     FORMAT(
     &  '  X-DRECTION MAX: ',E10.4,' MIN: ',E10.4,' RANGE ',E10.4,/
     &  '  Y-DRECTION MAX: ',E10.4,' MIN: ',E10.4,' RANGE ',E10.4, /
     &  '  AVERAGES              X: ',D10.4,' Y: ',D10.4,/
     &  '  DEVIATION             X: ',E10.4,' Y: ',E10.4, /
     &  '  RANGES                X: ',E10.4,' Y: ',E10.4, /
     &  '  LOWER/UPPER BOUDARIES X:',2(1X,E10.4),' Y: ',2(1X,E10.4)/
     &  '  INTERVALS             X: ',E10.4,' Y: ',E10.4,
     &  '  PARITIONS             X: ', I5  ,' Y: ', I5 )
        WRITE(NDAT,*) ' '
C
C       PUT INTO BINS
        DO K=1,ILINE
           INTX     = ((BUFX(K)-TLX)/XRANGE)*IX+1
           INTY     = ((BUFY(K)-TLY)/YRANGE)*IY+1
           IBINK(K) = NKEY(K)
           IBIN(K)  = (INTY-1)*IX+INTX
C          WRITE(NOUT,346) BUFX(K),BUFX(K)-TLX,
C     &                    INTX,BUFY(K),BUFY(K)-TLY,INTY 
   
c           WRITE(NDAT,346) BUFX(K),BUFX(K)-TLX,INTX,BUFY(K)
c     &        ,BUFY(K)-TLY,INTY,NKEY(K),IBIN(K)    
346        FORMAT(' ',
     &  'BUFX(K)   ,BUFX(K)-TLX,INTX,BUFY(K),BUFY(K)-TLY,INTY,NKEY,IBIN'    
     &     ,/2(1X,E10.4),I5,2(1X,E10.4),3I5)
           IF (INTX .LT. 1 .OR. INTX .GT. IX) IBIN(K)=10000 
           IF (INTY .LT. 1 .OR. INTY .GT. IY) IBIN(K)=10000 
        END DO

        CALL SORTINT(IBIN,IBINK,ILINE) 
        NRUN = 0
        DO K=1,ILINE
           PLIST(1) = K
           PLIST(2) = IBINK(K)
           PLIST(3) = IBIN(K)
           CALL SAVDN1(NDOC2,DOCF2,PLIST,3,NRUN,0)
           NRUN = 1
        END DO

        CLOSE(NDOC2)

C       NOW CREATE THE IMAGE:
        DO K=IYEND+1,IYSEC
           DO I=1,MAXXD
              PORTION(I,K)=0.
           END DO
        END DO
        
        DO K=1,IYSTRT
           DO I=1,MAXXD
              PORTION(I,K)=0.
           END DO
        END DO

C       START LOOP OVER Y STRIPS

        IBCOUNT =1
        DO 201 K=1,IY
C          FIRST LINE # FOR WRITING THE SECTION
           IYOFF=(K-1)*IYSEC
C          CLEAR ARRAY:
           DO KK=IYSTRT+1,IYSTRT+IYE
              DO I=1,MAXXD
                 PORTION(I,KK)=0 
              END DO
           END DO       
           IF (IBCOUNT.GT.ILINE) GOTO 217 
C          END CLEAR ARRAY

C          LOOP OVER X-DIRECTION
           ICOUNT = 0
           NLETI  = lnblnkn(FILPAT)

           DO 202 L=1,IX
203          CONTINUE

             ICURR = IBIN(IBCOUNT)
             IQ    = MOD(ICURR,IX)

C            FOR IQ=0 THIS IS THE LAST SECTION IN X
             IF  (IQ .EQ. 0) IQ=IX
             IQY = (ICURR-IQ) / IY+1

C            IF IQ .NE. L THEN WE ARE IN THE WRONG QUADRANT, 
C            GOTO NORMALIZE LAST SECTION

             !WRITE(NDAT,301) IBCOUNT,ICURR,IQ,IQY,IBINK(IBCOUNT),K,L
301          FORMAT(
     &          ' IBCOUNT,ICURR  ,IQ     ,IQY,IBINK   ,K,L'/7(3X,I5))

             IF (IQ  .NE. L) GOTO 207
             IF (IQY .NE. K) GOTO 207

C            WE HAVE THE CORRECT QUADRANT, ADD IMAGE GET FILE
             NUMBER = IBINK(IBCOUNT)    
             CALL FILGET(FILPAT,FILN1,NLETI,NUMBER,IRTFLG)

             !write(6,*) ' FILPAT:',FILPAT(1:30)
             !write(6,*) ' nleti,number:',nleti,number

             MAXIM = 0
             CALL OPFILEC(0,.FALSE.,FILN1,LUN,'O',IFORM,NSAM,NROW,NSLIC,
     &                    MAXIM,' ',.FALSE.,IRTFLG)

             IF (IMAMI .NE. 1) 
     &          CALL NORM3(LUN,NSAM,NROW,NSLIC,FMAX,FMIN,AV)

             IBCOUNT = IBCOUNT+1
             ICOUNT  = ICOUNT+1
             IYCOUNT = IYSTRT
             DO I=IYA,IYE
                IYCOUNT = IYCOUNT+1
                CALL REDLIN(LUN,BUF,NSAM,I)           
                ILC   = 0
                IXIND = (L-1)*IXSEC+IXSTRT
                DO KK=IXA,IXE
                  ILC = ILC+1
                  ILP = ILC+IXIND
                  PORTION(ILP,IYCOUNT)=PORTION(ILP,IYCOUNT)+(BUF(KK)-AV)
C                IF((I.EQ.IYA.AND.KK.EQ.IXA).OR.(I.EQ.IYE.AND.KK.EQ.IXE)) 
C     &          WRITE(NDAT,321) ILP,IYCOUNT,ICURR,IQ,KK,I,ILC,IXIND,IXSTRT
C321             FORMAT(' ',
C     &          'UPPER LEFT CORNER,ICURR,IQ,IYCOUNT,KK,I,ILC,IXIND,IXSTRT'/
C     &          9(1X,I5))
               END DO
            END DO

            CLOSE(LUN)
            IF (IBCOUNT.GT.ILINE) GOTO 207 
            GOTO 203

C          NORMALIZE
207        CONTINUE 

           !WRITE(NDAT,302) ICOUNT 
302        FORMAT('  SCALING WITH: 1/',I4)
 
           IF (ICOUNT .EQ. 0) GOTO 202
           IYCOUNT = IYSTRT
           PMAX    = -.999E20
           PMIN    = -PMAX
           DAVD    = 0
           DAVD2   = 0
           PNALL   =  (IYE-IYA+1)*(IXE-IXA+1)

           DO I=IYA,IYE
              IYCOUNT = IYCOUNT+1
              ILC     = 0
              IXIND   = (L-1)*IXSEC+IXSTRT

              DO KK=IXA,IXE
                 ILC = ILC + 1
                 ILP = ILC + IXIND

C                IF ((I.EQ.IYA.OR.I.EQ.IYE).AND.(KK.EQ.IXE.OR.KK.EQ.IXA)) 
C     &             WRITE(NDAT,322) ILP,IYCOUNT,IXIND,IXSEC,IXSTRT
C     &             ,ILC,IXA,IXE                      
322              FORMAT(X,'ILP,IYCOUNT,IXIND,IXSEC,IXSTRT,ILC,IXA,IXE'
     &              /8(1X,I5))  
                    
                 PORTION(ILP,IYCOUNT) = PORTION(ILP,IYCOUNT) / 
     &                                    FLOAT(ICOUNT)
                 B     = PORTION(ILP,IYCOUNT)
                 PMAX  = AMAX1(B,PMAX)
                 PMIN  = AMIN1(B,PMIN)
                 DAVD  = DAVD+B
                 DAVD2 = DAVD2+DBLE(B)*DBLE(B)
               END DO
           END DO

           PSIG = DSQRT((DAVD2-DAVD*DAVD/PNALL)/DBLE(PNALL-1.0))

           THUP   = RANGEU*PSIG
           THDOWN = -RANGEL*PSIG
           IF (PMAX .GT. THUP) PMAX=THUP
           IF (PMIN .LT. THDOWN) PMIN=THDOWN
           PNORMAL = PMAX-PMIN
           IYCOUNT = IYSTRT

           DO I=IYA,IYE
              IYCOUNT = IYCOUNT+1
              ILC     = 0
              IXIND   = (L-1)*IXSEC+IXSTRT

              DO KK=IXA,IXE
                 ILC = ILC+1
                 ILP = ILC+IXIND
                 B   = PORTION(ILP,IYCOUNT) 
                 IF (B.GT.THUP)   PORTION(ILP,IYCOUNT) = THUP  
                 IF (B.LT.THDOWN) PORTION(ILP,IYCOUNT) = THDOWN
                 PORTION(ILP,IYCOUNT) = PORTION(ILP,IYCOUNT)/PNORMAL 
              END DO
           END DO

C          -NORMALIZE END

179        ICOUNT = 0
           IF (IBCOUNT .GT. ILINE) GOTO 217 
202     CONTINUE

C       X-QUADRANTS FINISHED, WRITE ARRAY
217     CONTINUE
        !WRITE(NDAT,303) IYOFF+1,IYOFF+IYSEC
303     FORMAT('  WRITING FROM LINE: ',I0,' TO LINE ',I0) 

        DO I=1,IYSEC
           II=I+IYOFF
           CALL WRTLIN(LUNO,PORTION(1,I),NSAMO,II)
        ENDDO

201     CONTINUE

        CLOSE(LUNO)

        END



@


1.21
log
@GPL_2010
@
text
@d3 1
a3 1
C VISMAP
d9 1
a9 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d29 1
a29 1
C  PURPOSE:  SUBROUTINE TO CREATE VISUAL MAP 
a30 1
C        0         2         3         4         5         6         7
d36 6
a41 3
        PARAMETER (MAXREG=25)
        PARAMETER (MAXKEY=9992)
        PARAMETER (MAXIMDIM=128)
d44 13
a56 2
        PARAMETER (MAXXDP=1024)
        PARAMETER (MAXYDP=800)
d58 5
a62 5
C       FOR TEST REASONS:
C       PARAMETER (MAXXD=128)
C       PARAMETER (MAXYD=100)
C       PARAMETER (MAXIMDIM=32)
C       END TEST PARAMETER
a63 19
        INCLUDE 'CMBLOCK.INC' 
	
        COMMON /COMUN/ DOCF,FIL1,FIL2
        CHARACTER*81   DOCF1,DOCF2,FIL1,FILN1,FIL2

 	COMMON BUF(1024),
     &     DBUF(MAXREG,MAXKEY),IBINK(MAXKEY),IBIN(MAXKEY)
     &     ,NKEY(MAXKEY),BUFX(MAXKEY),BUFY(MAXKEY),PLIST(MAXREG),
     &     PORTION(MAXXDP,132)
        CHARACTER*1 NULL
        LOGICAL WINDX,WINDY,PADX,PADY
        DOUBLE PRECISION DAVX,DAVY,DAVX2,DAVY2,DAVD,DAVD2
	
        NULL = CHAR(0)

        MAXXD=MAXXDP
        MAXYD=MAXYDP
        WRITE(NOUT,401)MAXXD,MAXYD
401     FORMAT(' DEFAULT OUTPUT IMAGE SIZE',I5,' BY ',I5)
d66 4
a69 3
        IF (NEWMAXXD.NE.0) MAXXD=NEWMAXXD
        IF (NEWMAXYD.NE.0) MAXYD=NEWMAXYD
        NSAMO=MAXXD
d74 1
a74 1
        CALL OPFILEC(0,.TRUE.,FIL1,LUN,'O',IFORM,NSAM,NROW,NSLICE,
d76 1
a77 1
        CLOSE(LUN)
d79 2
a80 1
103     FORMAT(' RESULT WILL BE AUTOMATICALLY WINDOWED/PADDED')
d82 2
a83 1
     &         'NUMBER OF DIVISIONS IN X,Y') 
d85 2
a86 1
     &         'STANDARd DEVIATION (2.3=DEF)')
d89 1
d93 1
a93 1
        NSLIC=1
d99 1
a99 1
102        FORMAT(' ENDING KEY TOO LARGE, YOU MIGHT CONSIDER',/
d110 5
a114 4
        WINDX=.FALSE.
        WINDY=.FALSE.
        PADX=.FALSE.
        PADY=.FALSE.
d116 6
a121 6
        IXSEC=MAXXD/IX
        IYSEC=MAXYD/IY
        IYSEC=MIN(IYSEC,130)
        IXDIM=MAXXD/IX-2
        IYDIM=MAXYD/IY-2
        NROWOUT=IYSEC*IY
d128 5
a132 4
        IF (IXDIM.LE.NSAM) WINDX=.TRUE.
        IF (IYDIM.LE.NROW) WINDY=.TRUE.
        IF (.NOT.WINDX) PADX=.TRUE.
        IF (.NOT.WINDY) PADY=.TRUE.
d134 3
a136 2
        IXA=1
        IXE=NSAM
d138 2
a139 2
           IXA=(NSAM-IXDIM)/2+1
           IXE=IXA+IXDIM
d141 5
a145 5
        IYA=1
        IYE=NROW
        IF (WINDY)THEN 
           IYA=(NROW-IYDIM)/2+1
           IYE=IYA+IYDIM
d147 2
a148 2
        IXSTRT=2
        IXEND=IXDIM+1
d150 2
a151 2
           IXSTRT=(IXDIM-NSAM)/2+1
           IXEND=IXSTRT+NSAM
d153 2
a154 2
        IYSTRT=2
        IYEND=IYDIM+1
d156 2
a157 2
           IYSTRT=(IYDIM-NROW)/2+1
           IYEND=IYSTRT+NROW
d159 3
a161 2
        WRITE(NDAT,221) 
     &     IXA,IXE,IXSTRT,IXEND,IXDIM,IYA,IYE,IYSTRT,IYEND,IYDIM
d176 1
d178 1
a178 1
              ILINE = ILINE + 1
d182 2
a183 1
              WRITE(NOUT,101) BUFX(ILINE),BUFY(ILINE),ILINE,I
d185 1
a185 1
101        FORMAT(' ',2(2X,F12.6),2(2X,I5))
d187 2
a188 1
        NOPEN=0
d192 4
a195 4
        XMIN=BUFX(1)
        XMAX=BUFX(1)
        YMIN=BUFY(1)
        YMAX=BUFY(1)
d198 5
a202 4
        DAVX=0
        DAVX2=0
        DAVY=0
        DAVY2=0
d204 10
a213 10
           BX=BUFX(K)
           BY=BUFY(K)
           DAVX=DAVX+BX
           DAVX2=DAVX2+BX*DBLE(BX)
           DAVY=DAVY+BY
           DAVY2=DAVY2+BY*DBLE(BY)
           IF(BX.LT.XMIN) XMIN=BX
           IF(BX.GT.XMAX) XMAX=BX
           IF(BY.LT.YMIN) YMIN=BY
           IF(BY.GT.YMAX) YMAX=BY
d216 2
a217 2
        YR=(YMAX-YMIN)*1.01
        XR=(XMAX-XMIN)*1.01                                 
d220 3
a222 3
        FLINE=FLOAT(ILINE)
        DAVX=DAVX/FLINE
        DAVY=DAVY/FLINE
d224 2
a225 2
        SIGX=DSQRT((DAVX2-DAVX*DAVX/FLINE)/DBLE(FLINE-1))
        SIGY=DSQRT((DAVY2-DAVY*DAVY/FLINE)/DBLE(FLINE-1))
d227 2
a228 2
        XRA=2.*STNDRT*SIGX
        YRA=2.*STNDRT*SIGY
d231 3
a233 3
           XRANGE=XR
           TLX=SIGN(1.,XMIN)*(ABS(XMIN)*1.01)
           TUX=SIGN(1.,XMAX)*(ABS(XMAX)*1.01)
d235 5
a239 5
           XRANGE=XRA
           XCENTER=DAVX
           XDEV=XRANGE/2
           TLX=XCENTER-XDEV
           TUX=XCENTER+XDEV
d243 3
a245 3
           YRANGE=YR
           TLY=SIGN(1.,YMIN)*(ABS(YMIN)*1.01)
           TUY=SIGN(1.,YMAX)*(ABS(YMAX)*1.01)
d247 5
a251 5
           YRANGE=YRA
           YCENTER=DAVY
           YDEV=YRANGE/2
           TLY=YCENTER-YDEV
           TUY=YCENTER+YDEV
d254 4
a257 2
        XINTER=XRANGE/FLOAT(IX)
        YINTER=YRANGE/FLOAT(IY) 
d265 9
a273 8
     &  ' X-DRECTION MAX: ',E10.4,' MIN: ',E10.4,' RANGE ',E10.4,/
     &  ' Y-DRECTION MAX: ',E10.4,' MIN: ',E10.4,' RANGE ',E10.4, /
     &  ' AVERAGES              X: ',D10.4,' Y: ',D10.4,/
     &  ' DEVIATION             X: ',E10.4,' Y: ',E10.4, /
     &  ' RANGES                X: ',E10.4,' Y: ',E10.4, /
     &  ' LOWER/UPPER BOUDARIES X:',2(1X,E10.4),' Y: ',2(1X,E10.4)/
     &  ' INTERVALS             X: ',E10.4,' Y: ',E10.4,
     &  ' PARITIONS             X: ', I5  ,' Y: ', I5 )
d277 4
a280 4
           INTX=((BUFX(K)-TLX)/XRANGE)*IX+1
           INTY=((BUFY(K)-TLY)/YRANGE)*IY+1
           IBINK(K)=NKEY(K)
           IBIN(K)=(INTY-1)*IX+INTX
d284 2
a285 2
           WRITE(NDAT,346) BUFX(K),BUFX(K)-TLX,INTX,BUFY(K)
     &        ,BUFY(K)-TLY,INTY,NKEY(K),IBIN(K)    
d289 2
a290 2
           IF (INTX.LT.1.OR.INTX.GT.IX) IBIN(K)=10000 
           IF (INTY.LT.1.OR.INTY.GT.IY) IBIN(K)=10000 
d296 3
a298 3
           PLIST(1)=K
           PLIST(2)=IBINK(K)
           PLIST(3)=IBIN(K)
d300 1
a300 1
           NRUN=1
d303 1
a303 1
        CLOSE (NDOC2)
d320 1
a320 1
        IBCOUNT=1
d334 3
a336 1
           ICOUNT=0
d340 2
a341 2
             ICURR=IBIN(IBCOUNT)
             IQ=MOD(ICURR,IX)
d344 2
a345 2
             IF (IQ.EQ.0) IQ=IX
             IQ Y=(ICURR-IQ)/IY+1
d349 2
a350 1
             WRITE(NDAT,301) IBCOUNT,ICURR,IQ,IQY,IBINK(IBCOUNT),K,L
a352 2
             IF (IQ.NE.L) GOTO 207
             IF (IQY.NE.K) GOTO 207
d354 9
a362 4
C            WE HAVE THE CORRECT QUADRANT, ADD IMAGE
C            GET FILE
             NUMBER=IBINK(IBCOUNT)    
             CALL FILGET(FIL1,FILN1,NLETI,NUMBER,IRTFLG)
d366 1
a366 1
     &                   MAXIM,' ',.FALSE.,IRTFLG)
d370 4
a373 3
             IBCOUNT=IBCOUNT+1
             ICOUNT=ICOUNT+1
             IYCOUNT=IYSTRT
d375 1
a375 1
                IYCOUNT=IYCOUNT+1
d377 2
a378 2
                ILC=0
                IXIND=(L-1)*IXSEC+IXSTRT
d380 2
a381 2
                  ILC=ILC+1
                  ILP=ILC+IXIND
d397 12
a408 9
           WRITE(NDAT,302) ICOUNT 
302        FORMAT(' SCALING WITH 1/',I4) 
           IF (ICOUNT.EQ.0) GOTO 202
           IYCOUNT=IYSTRT
           PMAX=-.999E20
           PMIN=-PMAX
           DAVD=0
           DAVD2=0
           PNALL=(IYE-IYA+1)*(IXE-IXA+1)
d410 4
a413 3
              IYCOUNT=IYCOUNT+1
              ILC=0
              IXIND=(L-1)*IXSEC+IXSTRT
d415 3
a417 2
                 ILC=ILC+1
                 ILP=ILC+IXIND
d422 9
a430 7
     &              /8(1X,I5))                      
                 PORTION(ILP,IYCOUNT)=PORTION(ILP,IYCOUNT)/FLOAT(ICOUNT)
                 B=PORTION(ILP,IYCOUNT)
                 PMAX=AMAX1(B,PMAX)
                 PMIN=AMIN1(B,PMIN)
                 DAVD=DAVD+B
                 DAVD2=DAVD2+DBLE(B)*DBLE(B)
d434 8
a441 1
           PSIG=DSQRT((DAVD2-DAVD*DAVD/PNALL)/DBLE(PNALL-1.0))
a442 6
           THUP=RANGEU*PSIG
           THDOWN=-RANGEL*PSIG
           IF(PMAX.GT.THUP) PMAX=THUP
           IF (PMIN.LT.THDOWN) PMIN=THDOWN
           PNORMAL=PMAX-PMIN
           IYCOUNT=IYSTRT
d444 4
a447 3
              IYCOUNT=IYCOUNT+1
              ILC=0
              IXIND=(L-1)*IXSEC+IXSTRT
d449 6
a454 6
                 ILC=ILC+1
                 ILP=ILC+IXIND
                 B=PORTION(ILP,IYCOUNT) 
                 IF(B.GT.THUP) PORTION(ILP,IYCOUNT)=THUP  
                 IF(B.LT.THDOWN) PORTION(ILP,IYCOUNT)=THDOWN
                 PORTION(ILP,IYCOUNT)=PORTION(ILP,IYCOUNT)/PNORMAL 
d460 1
a460 1
179        ICOUNT=0
d464 11
a474 7
C         X-QUADRANTS FINISHED, WRITE ARRAY
217       WRITE(NDAT,303) IYOFF+1,IYOFF+IYSEC
303        FORMAT(' WRITING FROM LINE ',I5,' TO LINE ',I5) 
           DO I=1,IYSEC
              II=I+IYOFF
              CALL WRTLIN(LUNO,PORTION(1,I),NSAMO,II)
           ENDDO
a475 1
201        CONTINUE
d477 1
a477 1
        RETURN
@


1.20
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.19
log
@*** empty log message ***
@
text
@d6 23
a28 6
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
@


1.18
log
@opfilec
@
text
@d41 2
a42 1
        CHARACTER*81 DOCF1,DOCF2,FIL1,FILN1,FIL2
d51 1
a51 1
        NULL=CHAR(0)
d62 2
a63 2
        CALL FILERD(DOCF1,NLET,NULL,'INPUT DOCUMENT',IRTFLG)       
        CALL FILERD(DOCF2,NLET,NULL,'OUTPUT DOCUMENT',IRTFLG)
a156 5
        NLET = INDEX(DOCF1,NULL) - 1
        IF (NLET .LT. 0) NLET = LEN(DOCF1)
        CALL FILCAN(DOCF1,NLET,NULL,NULL,DOCF1,DATEXC,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
	
@


1.17
log
@nloop,iloop_removed
@
text
@d65 1
a65 1
        CALL OPFILE(.TRUE.,FIL1,LUN,'O',IFORM,NSAM,NROW,NSLICE,
d110 1
a110 1
        CALL OPFILE(.FALSE.,FIL2,LUNO,'U',IFORM,MAXXD,NROWOUT,NSLIC,
d340 1
a340 1
             CALL OPFILE(.FALSE.,FILN1,LUN,'O',IFORM,NSAM,NROW,NSLIC,
@


1.16
log
@used opfile
@
text
@d56 1
a56 1
        CALL RDPRMI(NEWMAXXD,NEWMAXYD,NLOOP,ILOOP,
d71 1
a71 1
        CALL RDPRMI(IX,IY,NLOOP,ILOOP,
d73 1
a73 1
        CALL RDPRM(STNDRT,NLOOP,ILOOP,
d75 1
a75 1
        CALL RDPRM2(RANGEU,RANGEL,NLOOP,ILOOP,
d82 1
a82 1
        CALL RDPRMI(KEY1,KEY2,NLOOP,ILOOP,
d92 1
a92 1
	CALL RDPRMI(ICOLX,ICOLY,NLOOP,ILOOP,
@


1.15
log
@a
@
text
@d22 1
a22 1
       SUBROUTINE VISMAP(LUN,LUNO,NDOC1,NDOC2)
a27 2
 

d43 3
a45 3
     $     DBUF(MAXREG,MAXKEY),IBINK(MAXKEY),IBIN(MAXKEY)
     $     ,NKEY(MAXKEY),BUFX(MAXKEY),BUFY(MAXKEY),PLIST(MAXREG),
     $     PORTION(MAXXDP,132)
d57 1
a57 1
     $             'NEW IMAGE SIZE: X,Y (<RET>=DEF)')
d62 6
a67 3
        CALL FILERD(DOCF2,NLET,NULL,'OUTPUT DOCUMENT',IRTFLG)       
        CALL FILERD(FIL1,NLETI,NULL,'INPUT',IRTFLG)
        CALL OPENFB(BUF,FIL1,LUN,NSAM,NROW,'OLD',NF,NSLIC)
d72 1
a72 1
     $         'NUMBER OF DIVISIONS IN X,Y') 
d74 1
a74 1
     $         'STANDART DEVIATION (2.3=DEF)')
d76 1
a76 1
     $         'UPPER/LOWER IMAGE THRESHOLD IN UNITS OF SIGMA') 
d78 1
d81 1
d83 1
a83 1
     $  'FIRST & LAST KEY=IMAGE NUMBERS')
d96 1
a96 1
C        PREPARE WINDOWING AND PADDING
d101 1
a101 1
C        CALCULATE AVAILABLE SPACE FOR IMAGES (BORDERS 2 PIXELS):
d108 5
a112 1
        CALL OPENFB(BUF,FIL2,LUNO,MAXXD,NROWOUT,'UNKNOWN',NF,NSLIC)
d144 1
a144 1
     $     IXA,IXE,IXSTRT,IXEND,IXDIM,IYA,IYE,IYSTRT,IYEND,IYDIM
d146 2
a147 2
     $    'WINDOW/PAD X: INPUT: IXA,IXE, OUTPUT IXSTRT,IXEND,IXDIM'/10X
     $    ,6(1X,I6))
d163 1
a163 1
     $         DBUF,MAXKEY,MAXREG,LKEY,LERR) 
d242 1
a242 1
C     $                 TLY,TUY,XINTER,YINTER
d244 2
a245 2
     $                  DAVX,DAVY,XDEV,YDEV,XRANGE,YRANGE,TLX,TUX
     $                  ,TLY,TUY,XINTER,YINTER,IX,IY
d247 8
a254 8
     $  ' X-DRECTION MAX: ',E10.4,' MIN: ',E10.4,' RANGE ',E10.4,/
     $  ' Y-DRECTION MAX: ',E10.4,' MIN: ',E10.4,' RANGE ',E10.4, /
     $  ' AVERAGES              X: ',D10.4,' Y: ',D10.4,/
     $  ' DEVIATION             X: ',E10.4,' Y: ',E10.4, /
     $  ' RANGES                X: ',E10.4,' Y: ',E10.4, /
     $  ' LOWER/UPPER BOUDARIES X:',2(1X,E10.4),' Y: ',2(1X,E10.4)/
     $  ' INTERVALS             X: ',E10.4,' Y: ',E10.4,
     $  ' PARITIONS             X: ', I5  ,' Y: ', I5 )
d263 1
a263 1
C     $                    INTX,BUFY(K),BUFY(K)-TLY,INTY 
d266 1
a266 1
     $        ,BUFY(K)-TLY,INTY,NKEY(K),IBIN(K)    
d268 2
a269 2
     $  'BUFX(K)   ,BUFX(K)-TLX,INTX,BUFY(K),BUFY(K)-TLY,INTY,NKEY,IBIN'    
     $     ,/2(1X,E10.4),I5,2(1X,E10.4),3I5)
d330 1
a330 1
     $          ' IBCOUNT,ICURR  ,IQ     ,IQY,IBINK   ,K,L'/7(3X,I5))
d338 6
a343 2
             CALL OPENFB(BUF,FILN1,LUN,NSAM,NROW,'OLD',NF,NSLIC)
             IF (IMAMI.NE.1) 
d358 1
a358 1
C     $          WRITE(NDAT,321) ILP,IYCOUNT,ICURR,IQ,KK,I,ILC,IXIND,IXSTRT
d360 2
a361 2
C     $          'UPPER LEFT CORNER,ICURR,IQ,IYCOUNT,KK,I,ILC,IXIND,IXSTRT'/
C     $          9(1X,I5))
d388 2
a389 2
C     $             WRITE(NDAT,322) ILP,IYCOUNT,IXIND,IXSEC,IXSTRT
C     $             ,ILC,IXA,IXE                      
d391 1
a391 1
     $              /8(1X,I5))                      
@


1.14
log
@CNO_SAVE
@
text
@d28 1
a28 1
CNO_SAVE 
@


1.13
log
@used norm3 & f90 formatting
@
text
@d28 2
d57 1
a57 1
401     FORMAT(' Default output image size',I5,' by ',I5)
@


1.12
log
@MR's alterations and lots of cosmetic
@
text
@a37 1

d67 1
a67 1
103     FORMAT(X,'RESULT WILL BE AUTOMATICALLY WINDOWED/PADDED')
d91 1
a91 1
C PREPARE WINDOWING AND PADDING
d96 1
a96 1
C CALCULATE AVAILABLE SPACE FOR IMAGES (BORDERS 2 PIXELS):
d104 1
a104 1
C FIND OUT IF PADDING/WINDOWING NECESSARY.
d109 1
a109 1
C DETERMINE STARTING/ENDING INDICES 
d140 1
a140 1
C GET ALL THE COORDINATES:
d167 1
a167 1
C FIRST SORT INTO BINS
d172 2
a173 1
C   DETERMINE MAXIMUM/MINIMUM X AND Y COORDINATES
d194 1
a194 1
C CALCULATE SIGMA AND AVERAGE
d247 1
a247 1
C   PUT INTO BINS
d261 2
a262 2
           IF(INTX.LT.1.OR.INTX.GT.IX) IBIN(K)=10000 
           IF(INTY.LT.1.OR.INTY.GT.IY) IBIN(K)=10000 
d266 1
a266 1
        NRUN=0
d290 1
a290 1
C START LOOP OVER Y STRIPS
d302 1
a302 1
           IF(IBCOUNT.GT.ILINE) GOTO 217 
d307 2
a308 42
        DO 202 L=1,IX
203     CONTINUE
        ICURR=IBIN(IBCOUNT)
        IQ=MOD(ICURR,IX)

C       FOR IQ=0 THIS IS THE LAST SECTION IN X
        IF(IQ.EQ.0) IQ=IX
        IQY=(ICURR-IQ)/IY+1

C IF IQ .NE. L THEN WE ARE IN THE WRONG QUADRANT, GOTO NORMALIZE LAST 
C SECTION
        WRITE(NDAT,301) IBCOUNT,ICURR,IQ,IQY,IBINK(IBCOUNT),K,L
301     FORMAT(1H ,
     $   'IBCOUNT,ICURR  ,IQ     ,IQY,IBINK   ,K,L'/7(3X,I5))
        IF(IQ.NE.L) GOTO 207
        IF(IQY.NE.K) GOTO 207
C WE HAVE THE CORRECT QUADRANT, ADD IMAGE
C GET FILE
        NUMBER=IBINK(IBCOUNT)    
        CALL FILGET(FIL1,FILN1,NLETI,NUMBER,IRTFLG)
        CALL OPENFB(BUF,FILN1,LUN,NSAM,NROW,'OLD',NF,NSLIC)
        IF (IMAMI.NE.1) CALL NORM(LUN,NSAM,NROW,FMAX,FMIN,AV)
        IBCOUNT=IBCOUNT+1
        ICOUNT=ICOUNT+1
        IYCOUNT=IYSTRT
        DO I=IYA,IYE
           IYCOUNT=IYCOUNT+1
           CALL REDLIN(LUN,BUF,NSAM,I)           
           ILC=0
           IXIND=(L-1)*IXSEC+IXSTRT
           DO KK=IXA,IXE
              ILC=ILC+1
              ILP=ILC+IXIND
              PORTION(ILP,IYCOUNT)=PORTION(ILP,IYCOUNT)+(BUF(KK)-AV)
C              IF((I.EQ.IYA.AND.KK.EQ.IXA).OR.(I.EQ.IYE.AND.KK.EQ.IXE)) 
C     $        WRITE(NDAT,321) 
C     $           ILP,IYCOUNT,ICURR,IQ,KK,I,ILC,IXIND,IXSTRT
321           FORMAT(' ',
     $       'UPPER LEFT CORNER,ICURR,IQ,IYCOUNT,KK,I,ILC,IXIND,IXSTRT'/
     $        9(1X,I5))
           END DO
        END DO
d310 2
a311 3
        CLOSE(LUN)
        IF (IBCOUNT.GT.ILINE) GOTO 207 
        GOTO 203
d313 65
a377 22
C       NORMALIZE
207     CONTINUE 
        WRITE(NDAT,302) ICOUNT 
302     FORMAT(' SCALING WITH 1/',I4) 
        IF (ICOUNT.EQ.0) GOTO 202
        IYCOUNT=IYSTRT
        PMAX=-.999E20
        PMIN=-PMAX
        DAVD=0
        DAVD2=0
        PNALL=(IYE-IYA+1)*(IXE-IXA+1)
        DO I=IYA,IYE
           IYCOUNT=IYCOUNT+1
           ILC=0
           IXIND=(L-1)*IXSEC+IXSTRT
           DO KK=IXA,IXE
              ILC=ILC+1
              ILP=ILC+IXIND
C             IF ((I.EQ.IYA.OR.I.EQ.IYE).AND.(KK.EQ.IXE.OR.KK.EQ.IXA)) 
C     $          WRITE(NDAT,322) ILP,IYCOUNT,IXIND,IXSEC,IXSTRT
C     $          ,ILC,IXA,IXE                      
322           FORMAT(X,'ILP,IYCOUNT,IXIND,IXSEC,IXSTRT,ILC,IXA,IXE'
d379 7
a385 6
              PORTION(ILP,IYCOUNT)=PORTION(ILP,IYCOUNT)/FLOAT(ICOUNT)
              B=PORTION(ILP,IYCOUNT)
              PMAX=AMAX1(B,PMAX)
              PMIN=AMIN1(B,PMIN)
              DAVD=DAVD+B
              DAVD2=DAVD2+DBLE(B)*DBLE(B)
a386 1
        END DO
d388 1
a388 1
        PSIG=DSQRT((DAVD2-DAVD*DAVD/PNALL)/DBLE(PNALL-1.0))
d390 18
a407 17
        THUP=RANGEU*PSIG
        THDOWN=-RANGEL*PSIG
        IF(PMAX.GT.THUP) PMAX=THUP
        IF (PMIN.LT.THDOWN) PMIN=THDOWN
        PNORMAL=PMAX-PMIN
        IYCOUNT=IYSTRT
        DO I=IYA,IYE
           IYCOUNT=IYCOUNT+1
           ILC=0
           IXIND=(L-1)*IXSEC+IXSTRT
           DO KK=IXA,IXE
              ILC=ILC+1
              ILP=ILC+IXIND
              B=PORTION(ILP,IYCOUNT) 
              IF(B.GT.THUP) PORTION(ILP,IYCOUNT)=THUP  
              IF(B.LT.THDOWN) PORTION(ILP,IYCOUNT)=THDOWN
              PORTION(ILP,IYCOUNT)=PORTION(ILP,IYCOUNT)/PNORMAL 
a408 1
        END DO
d410 1
a410 1
C       -NORMALIZE END
d412 2
a413 2
179     ICOUNT=0
        IF (IBCOUNT .GT. ILINE) GOTO 217 
d416 7
a422 7
C       X-QUADRANTS FINISHED, WRITE ARRAY
217     WRITE(NDAT,303) IYOFF+1,IYOFF+IYSEC
303     FORMAT(' WRITING FROM LINE ',I5,' TO LINE ',I5) 
        DO I=1,IYSEC
           II=I+IYOFF
           CALL WRTLIN(LUNO,PORTION(1,I),NSAMO,II)
        ENDDO
d424 1
a424 1
201     CONTINUE
@


1.11
log
@bad format
@
text
@d14 1
a14 1
C  VISMAP                                                              *
d16 2
a23 1
C SUBROUTINE TO CREATE VISUAL MAP 
d27 2
a28 1
C WORKSTATION DISPLAY SIZE:
d32 6
a37 5
C FOR TEST REASONS:
C        PARAMETER (MAXXD=128)
C        PARAMETER (MAXYD=100)
C        PARAMETER (MAXIMDIM=32)
C END TEST PARAMETER
a41 1

d52 1
d56 1
a56 1
401     FORMAT(' DEFAULT OUTPUT IMAGE SIZE',I5,' BY ',I5)
d58 1
a58 1
     $              'NEW IMAGE SIZE: X,Y (<RET>=DEF)')
d66 1
d68 1
a68 2
103     FORMAT(' RESULT WILL BE AUTOMATICALLY WINDOWED/PADDED')

d72 1
a72 1
     $         'STANDARD DEVIATION (2.3=DEF)')
d74 2
a75 2
     $        'UPPER/LOWER IMAGE THRESHOLD IN UNITS OF SIGMA') 
        IF(STNDRT.EQ.0) STNDRT=2.3
d79 1
a79 1
     $             'FIRST & LAST KEY=IMAGE NUMBERS')
d87 1
d90 1
a90 1
        NREG = MAX(ICOLX,ICOLY)
d106 4
a109 4
        IF(IXDIM.LE.NSAM) WINDX=.TRUE.
        IF(IYDIM.LE.NROW) WINDY=.TRUE.
        IF(.NOT.WINDX) PADX=.TRUE.
        IF(.NOT.WINDY) PADY=.TRUE.
d113 3
a115 3
        IF(WINDX) THEN
          IXA=(NSAM-IXDIM)/2+1
          IXE=IXA+IXDIM
d119 3
a121 3
        IF(WINDY)THEN 
          IYA=(NROW-IYDIM)/2+1
          IYE=IYA+IYDIM
d125 3
a127 3
        IF(PADX) THEN
          IXSTRT=(IXDIM-NSAM)/2+1
          IXEND=IXSTRT+NSAM
d131 3
a133 3
        IF(PADY) THEN
          IYSTRT=(IYDIM-NROW)/2+1
          IYEND=IYSTRT+NROW
d137 3
a139 4

221     FORMAT(
     $   ' WINDOW/PAD X: INPUT: IXA,IXE, OUTPUT IXSTRT,IXEND,IXDIM'/10X
     $   ,6(1X,I6))
d144 1
a144 1
	NOPEN=0
d153 1
a153 1
        DO  I=KEY1,KEY2
d164 1
a164 1
	ENDDO
d178 12
a189 12
        DO  K=2,ILINE
        BX=BUFX(K)
        BY=BUFY(K)
        DAVX=DAVX+BX
        DAVX2=DAVX2+BX*DBLE(BX)
        DAVY=DAVY+BY
        DAVY2=DAVY2+BY*DBLE(BY)
        IF(BX.LT.XMIN) XMIN=BX
        IF(BX.GT.XMAX) XMAX=BX
        IF(BY.LT.YMIN) YMIN=BY
        IF(BY.GT.YMAX) YMAX=BY
	ENDDO
d198 1
a198 1
c
d201 1
a201 1
C
d205 10
a214 14
        IF(XRA.GT.XR) THEN 

         XRANGE=XR
         TLX=SIGN(1.,XMIN)*(ABS(XMIN)*1.01)
         TUX=SIGN(1.,XMAX)*(ABS(XMAX)*1.01)

          ELSE

         XRANGE=XRA
         XCENTER=DAVX
         XDEV=XRANGE/2
         TLX=XCENTER-XDEV
         TUX=XCENTER+XDEV

d217 10
a226 12
        IF(YRA.GT.YR) THEN 

         YRANGE=YR
         TLY=SIGN(1.,YMIN)*(ABS(YMIN)*1.01)
         TUY=SIGN(1.,YMAX)*(ABS(YMAX)*1.01)

          ELSE
         YRANGE=YRA
         YCENTER=DAVY
         YDEV=YRANGE/2
         TLY=YCENTER-YDEV
         TUY=YCENTER+YDEV
d232 2
a233 2
C        WRITE(NOUT,345) DAVX,DAVY,XDEV,YDEV,XRANGE,YRANGE,TLX,TUX,
C     $  TLY,TUY,XINTER,YINTER
d235 2
a236 2
     $   DAVX,DAVY,XDEV,YDEV,XRANGE,YRANGE,TLX,TUX
     $  ,TLY,TUY,XINTER,YINTER,IX,IY
d248 5
a252 5
        DO  K=1,ILINE
           INTX     = ((BUFX(K)-TLX)/XRANGE)*IX+1
           INTY     = ((BUFY(K)-TLY)/YRANGE)*IY+1
           IBINK(K) = NKEY(K)
           IBIN(K)  = (INTY-1)*IX+INTX
d254 10
a263 11
C    &                     INTX,BUFY(K),BUFY(K)-TLY,INTY    
           WRITE(NDAT,346) BUFX(K),BUFX(K)-TLX,INTX,BUFY(K),
     $                     BUFY(K)-TLY,INTY,NKEY(K),IBIN(K)    

c23456789012345678901234567890123456789012345678901234567890123456789012
346        FORMAT(' BUFX(K)   ,BUFX(K)-TLX,INTX,',
     $        'BUFY(K),BUFY(K)-TLY,INTY,NKEY,IBIN',    
     $        /2(1X,E10.4),I5,2(1X,E10.4),3I5)
           IF (INTX.LT.1.OR.INTX.GT.IX) IBIN(K)=10000 
           IF (INTY.LT.1.OR.INTY.GT.IY) IBIN(K)=10000 
        ENDDO
d266 1
a266 1
        NRUN = 0
d274 1
a275 2
 
C NOW CREATE THE IMAGE:
d277 1
d283 1
d293 54
a346 7
        DO  K=1,IY
C        FIRST LINE # FOR WRITING THE SECTION
        IYOFF=(K-1)*IYSEC
C       CLEAR ARRAY:
        DO KK=IYSTRT+1,IYSTRT+IYE
           DO I=1,MAXXD
              PORTION(I,KK)=0 
a348 47
       
        IF(IBCOUNT.GT.ILINE) GOTO 217 
C       END CLEAR ARRAY
 
C       LOOP OVER X-DIRECTION
        ICOUNT=0
        DO L=1,IX
203        CONTINUE
           ICURR=IBIN(IBCOUNT)
           IQ=MOD(ICURR,IX)
C          FOR IQ=0 THIS IS THE LAST SECTION IN X
           IF(IQ.EQ.0) IQ=IX
           IQY=(ICURR-IQ)/IY+1


C          IF IQ .NE. L THEN WE ARE IN THE WRONG QUADRANT, GOTO
C          NORMALIZE LAST SECTION
           WRITE(NDAT,301) IBCOUNT,ICURR,IQ,IQY,IBINK(IBCOUNT),K,L
301        FORMAT(' ',
     $         'IBCOUNT,ICURR  ,IQ     ,IQY,IBINK   ,K,L'/7(3X,I5))
           IF(IQ.NE.L) GOTO 207
           IF(IQY.NE.K) GOTO 207

C          WE HAVE THE CORRECT QUADRANT, ADD IMAGE
C          GET FILE
           NUMBER=IBINK(IBCOUNT)    
           CALL FILGET(FIL1,FILN1,NLETI,NUMBER,IRTFLG)
           CALL OPENFB(BUF,FILN1,LUN,NSAM,NROW,'OLD',NF,NSLIC)
           IF(IMAMI.NE.1) CALL NORM(LUN,NSAM,NROW,FMAX,FMIN,AV)
           IBCOUNT=IBCOUNT+1
           ICOUNT=ICOUNT+1
           IYCOUNT=IYSTRT
           DO I=IYA,IYE
              IYCOUNT=IYCOUNT+1
              CALL REDLIN(LUN,BUF,NSAM,I)           
              ILC=0
              IXIND=(L-1)*IXSEC+IXSTRT
              DO KK=IXA,IXE
                 ILC=ILC+1
                 ILP=ILC+IXIND
                 PORTION(ILP,IYCOUNT)=PORTION(ILP,IYCOUNT)+(BUF(KK)-AV)

c                IF((I.EQ.IYA.AND.KK.EQ.IXA).or.(i.eq.iye.and.kk.eq.ixe)) 
C     $          WRITE(NDAT,321) ILP,IYCOUNT,ICURR,IQ,KK,I,ILC,IXIND,IXSTRT
c321             FORMAT(' ',
c     $          'UPPER LEFT CORNER,ICURR,IQ,IYCOUNT,KK,I,ILC,IXIND,IXSTRT'/
c     $          9(1X,I5))
d350 33
a382 1
              END DO
d384 1
d386 1
a386 2
           IF(IBCOUNT.GT.ILINE) GOTO 207 
           GOTO 203
d388 17
a404 32
C          NORMALIZE
207        CONTINUE 
           WRITE(NDAT,302) ICOUNT 
302        FORMAT(' SCALING WITH 1/',I4) 
           IF(ICOUNT.EQ.0) GOTO 202
           IYCOUNT=IYSTRT
           PMAX=-.999E20
           PMIN=-PMAX
           DAVD=0
           DAVD2=0
           PNALL=(IYE-IYA+1)*(IXE-IXA+1)
           DO I=IYA,IYE
              IYCOUNT=IYCOUNT+1
              ILC=0
              IXIND=(L-1)*IXSEC+IXSTRT
              DO  KK=IXA,IXE
                 ILC=ILC+1
                 ILP=ILC+IXIND

C                 IF((I.EQ.IYA.OR.I.EQ.IYE).AND.(KK.EQ.IXE.OR.KK.EQ.IXA)) 
C     $           WRITE(NDAT,322) ILP,IYCOUNT,IXIND,IXSEC,IXSTRT
C     $              ,ILC,IXA,IXE                      
C322              FORMAT(' ILP,IYCOUNT,IXIND,IXSEC,IXSTRT,ILC,IXA,IXE'
C     $           /8(1X,I5))
                      
                 PORTION(ILP,IYCOUNT)=PORTION(ILP,IYCOUNT)/FLOAT(ICOUNT)
                 B=PORTION(ILP,IYCOUNT)
                 PMAX=AMAX1(B,PMAX)
                 PMIN=AMIN1(B,PMIN)
                 DAVD=DAVD+B
                 DAVD2=DAVD2+DBLE(B)*DBLE(B)
              END DO
d406 1
d408 1
a408 1
           PSIG=DSQRT((DAVD2-DAVD*DAVD/PNALL)/DBLE(PNALL-1.0))
d410 3
a412 24
           THUP=RANGEU*PSIG
           THDOWN=-RANGEL*PSIG
           IF(PMAX.GT.THUP) PMAX=THUP
           IF(PMIN.LT.THDOWN) PMIN=THDOWN
           PNORMAL=PMAX-PMIN
           IYCOUNT=IYSTRT
           DO I=IYA,IYE
              IYCOUNT=IYCOUNT+1
              ILC=0
              IXIND=(L-1)*IXSEC+IXSTRT
              DO KK=IXA,IXE
                 ILC=ILC+1
                 ILP=ILC+IXIND
                 B=PORTION(ILP,IYCOUNT) 
                 IF (B.GT.THUP) PORTION(ILP,IYCOUNT)=THUP  
                 IF (B.LT.THDOWN) PORTION(ILP,IYCOUNT)=THDOWN
                 PORTION(ILP,IYCOUNT)=PORTION(ILP,IYCOUNT)/PNORMAL 
1209           END DO
1208        END DO
C          -NORMALIZE END

179        ICOUNT=0
           IF (IBCOUNT.GT.ILINE) GOTO 217 
202     END DO
d420 1
a420 1
        END DO
d422 1
a422 1
	ENDDO
a423 1

d426 3
@


1.10
log
@*** empty log message ***
@
text
@d262 3
a264 3
346        FORMAT(' BUFX(K)   ,BUFX(K)-TLX,INTX,'
     $        'BUFY(K),BUFY(K)-TLY,INTY,NKEY,IBIN'    
     $        ,/2(1X,E10.4),I5,2(1X,E10.4),3I5)
@


1.9
log
@bad format continuation line
@
text
@d150 1
a150 1
        DO 1 I=KEY1,KEY2
d161 1
a161 1
1       CONTINUE
d175 1
a175 1
        DO 2 K=2,ILINE
d186 1
a186 1
2       CONTINUE
d251 1
a251 1
        DO 3 K=1,ILINE
d267 1
a267 1
3       END DO
d296 1
a296 1
        DO 201 K=1,IY
d428 1
a428 1
201     CONTINUE
@


1.8
log
@H, indenting, initial 1 beor x in format & other f90 bugs
@
text
@d252 4
a255 4
           INTX=((BUFX(K)-TLX)/XRANGE)*IX+1
           INTY=((BUFY(K)-TLY)/YRANGE)*IY+1
           IBINK(K)=NKEY(K)
           IBIN(K)=(INTY-1)*IX+INTX
d257 1
a257 1
     &                     INTX,BUFY(K),BUFY(K)-TLY,INTY    
d260 1
a260 1
346        FORMAT(' ',''BUFX(K)   ,BUFX(K)-TLX,INTX,'
d262 1
d270 1
a270 1
        NRUN=0
@


1.7
log
@cosmetics of prompts changed
@
text
@d65 1
d71 1
a71 1
     $  'UPPER/LOWER IMAGE THRESHOLD IN UNITS OF SIGMA') 
d77 1
a77 1
        IF(KEY2.GT.MAXKEY) THEN 
d133 3
a135 2
221     FORMAT(1H ,
     $   'WINDOW/PAD X: INPUT: IXA,IXE, OUTPUT IXSTRT,IXEND,IXDIM'/10X
d160 1
a160 1
101        FORMAT(1H ,2(2X,F12.6),2(2X,I5))
d252 9
a260 9
        INTX=((BUFX(K)-TLX)/XRANGE)*IX+1
        INTY=((BUFY(K)-TLY)/YRANGE)*IY+1
        IBINK(K)=NKEY(K)
        IBIN(K)=(INTY-1)*IX+INTX
C        WRITE(NOUT,346) BUFX(K),BUFX(K)-TLX,
C     $  INTX,BUFY(K),BUFY(K)-TLY,INTY    
        WRITE(NDAT,346) BUFX(K),BUFX(K)-TLX,INTX,BUFY(K)
     $  ,BUFY(K)-TLY,INTY,NKEY(K),IBIN(K)    
346     FORMAT(1H ,
d262 6
a267 5
     $  'BUFX(K)   ,BUFX(K)-TLX,INTX,BUFY(K),BUFY(K)-TLY,INTY,NKEY,IBIN'    
     $  ,/2(1X,E10.4),I5,2(1X,E10.4),3I5)
        IF(INTX.LT.1.OR.INTX.GT.IX) IBIN(K)=10000 
        IF(INTY.LT.1.OR.INTY.GT.IY) IBIN(K)=10000 
3       CONTINUE
d270 7
a276 7
        DO 33 K=1,ILINE
        PLIST(1)=K
        PLIST(2)=IBINK(K)
        PLIST(3)=IBIN(K)
        CALL SAVDN1(NDOC2,DOCF2,PLIST,3,NRUN,0)
        NRUN=1
33      CONTINUE
d281 10
a290 6
        DO 214 K=IYEND+1,IYSEC
        DO 214 I=1,MAXXD
214     PORTION(I,K)=0.        
        DO 215 K=1,IYSTRT
        DO 215 I=1,MAXXD
215     PORTION(I,K)=0.
d296 1
a296 1
C FIRST LINE # FOR WRITING THE SECTION
d298 7
a304 4
C CLEAR ARRAY:
        DO 204 KK=IYSTRT+1,IYSTRT+IYE
        DO 204 I=1,MAXXD
204     PORTION(I,KK)=0        
d306 3
a308 3
C END CLEAR ARRAY
C 
C LOOP OVER X-DIRECTION
d310 108
a417 98
        DO 202 L=1,IX
203     CONTINUE
        ICURR=IBIN(IBCOUNT)
        IQ=MOD(ICURR,IX)
C FOR IQ=0 THIS IS THE LAST SECTION IN X
        IF(IQ.EQ.0) IQ=IX
        IQY=(ICURR-IQ)/IY+1
C
C
C IF IQ .NE. L THEN WE ARE IN THE WRONG QUADRANT, GOTO NORMALIZE LAST 
C SECTION
        WRITE(NDAT,301) IBCOUNT,ICURR,IQ,IQY,IBINK(IBCOUNT),K,L
301     FORMAT(1H ,
     $   'IBCOUNT,ICURR  ,IQ     ,IQY,IBINK   ,K,L'/7(3X,I5))
        IF(IQ.NE.L) GOTO 207
        IF(IQY.NE.K) GOTO 207
C WE HAVE THE CORRECT QUADRANT, ADD IMAGE
C GET FILE
        NUMBER=IBINK(IBCOUNT)    
        CALL FILGET(FIL1,FILN1,NLETI,NUMBER,IRTFLG)
        CALL OPENFB(BUF,FILN1,LUN,NSAM,NROW,'OLD',NF,NSLIC)
        IF(IMAMI.NE.1) CALL NORM(LUN,NSAM,NROW,FMAX,FMIN,AV)
        IBCOUNT=IBCOUNT+1
        ICOUNT=ICOUNT+1
        IYCOUNT=IYSTRT
        DO 205 I=IYA,IYE
        IYCOUNT=IYCOUNT+1
        CALL REDLIN(LUN,BUF,NSAM,I)           
        ILC=0
        IXIND=(L-1)*IXSEC+IXSTRT
        DO 206 KK=IXA,IXE
        ILC=ILC+1
        ILP=ILC+IXIND
        PORTION(ILP,IYCOUNT)=PORTION(ILP,IYCOUNT)+(BUF(KK)-AV)
c        IF((I.EQ.IYA.AND.KK.EQ.IXA).or.(i.eq.iye.and.kk.eq.ixe)) 
C     $  WRITE(NDAT,321) 
C     $  ILP,IYCOUNT,ICURR,IQ,KK,I,ILC,IXIND,IXSTRT
321     FORMAT(1H ,
     $  'UPPER LEFT CORNER,ICURR,IQ,IYCOUNT,KK,I,ILC,IXIND,IXSTRT'/
     $  9(1X,I5))
206     CONTINUE
205     CONTINUE
        IF(IBCOUNT.GT.ILINE) GOTO 207 
        GOTO 203
C NORMALIZE
207     CONTINUE 
        WRITE(NDAT,302) ICOUNT 
302     FORMAT(' SCALING WITH 1/',I4) 
        IF(ICOUNT.EQ.0) GOTO 202
        IYCOUNT=IYSTRT
        PMAX=-.999E20
        PMIN=-PMAX
        DAVD=0
        DAVD2=0
        PNALL=(IYE-IYA+1)*(IXE-IXA+1)
        DO 208 I=IYA,IYE
        IYCOUNT=IYCOUNT+1
        ILC=0
        IXIND=(L-1)*IXSEC+IXSTRT
        DO 209 KK=IXA,IXE
        ILC=ILC+1
        ILP=ILC+IXIND
C        IF((I.EQ.IYA.or.i.eq.iye).and.(kk.eq.ixe.or.kk.eq.ixa)) 
C     $  WRITE(NDAT,322) ilp,IYCOUNT,IXIND,IXSEC,IXSTRT
C     $  ,ILC,IXA,IXE                      
322     FORMAT(X,'ilp,IYCOUNT,IXIND,IXSEC,IXSTRT,ILC,ixa,ixe'
     $  /8(1X,I5))                      
        PORTION(ILP,IYCOUNT)=PORTION(ILP,IYCOUNT)/FLOAT(ICOUNT)
        B=PORTION(ILP,IYCOUNT)
        PMAX=AMAX1(B,PMAX)
        PMIN=AMIN1(B,PMIN)
        DAVD=DAVD+B
        DAVD2=DAVD2+DBLE(B)*DBLE(B)
209     CONTINUE
208     CONTINUE

        PSIG=DSQRT((DAVD2-DAVD*DAVD/PNALL)/DBLE(PNALL-1.0))

        THUP=RANGEU*PSIG
        THDOWN=-RANGEL*PSIG
        IF(PMAX.GT.THUP) PMAX=THUP
        IF(PMIN.LT.THDOWN) PMIN=THDOWN
        PNORMAL=PMAX-PMIN
        IYCOUNT=IYSTRT
        DO 1208 I=IYA,IYE
        IYCOUNT=IYCOUNT+1
        ILC=0
        IXIND=(L-1)*IXSEC+IXSTRT
        DO 1209 KK=IXA,IXE
        ILC=ILC+1
        ILP=ILC+IXIND
        B=PORTION(ILP,IYCOUNT) 
        IF(B.GT.THUP) PORTION(ILP,IYCOUNT)=THUP  
        IF(B.LT.THDOWN) PORTION(ILP,IYCOUNT)=THDOWN
        PORTION(ILP,IYCOUNT)=PORTION(ILP,IYCOUNT)/PNORMAL 
1209     CONTINUE
1208     CONTINUE
C-NORMALIZE END
d419 1
a419 4
179     ICOUNT=0
        IF(IBCOUNT.GT.ILINE) GOTO 217 
202     CONTINUE
C X-QUADRANTS FINISHED, WRITE ARRAY
d422 5
a426 3
        DO 210 I=1,IYSEC
        II=I+IYOFF
210     CALL WRTLIN(LUNO,PORTION(1,I),NSAMO,II)
d429 1
@


1.6
log
@add an extension to the filename before calling unsdal
@
text
@d1 19
d21 1
d29 1
a29 1
C
a35 1

d39 1
a39 1
C        CHARACTER*81 DOCFN,DOCF1,DOCF2,FIL1,FILN1,FIL2,FILN2
d42 3
a44 3
     $  DBUF(MAXREG,MAXKEY),IBINK(MAXKEY),IBIN(MAXKEY)
     $  ,NKEY(MAXKEY),BUFX(MAXKEY),BUFY(MAXKEY),PLIST(MAXREG),
     $  PORTION(MAXXDP,132)
d53 1
a53 1
401     FORMAT(1X,'Default output image size',I5,' by ',I5)
d55 3
a57 3
     $  'New image size: x,y (<ret>=def)')
        IF(NEWMAXXD.NE.0) MAXXD=NEWMAXXD
        IF(NEWMAXYD.NE.0) MAXYD=NEWMAXYD
d64 1
a64 1
103     FORMAT(X,'RESULT WILL BE AUTOMATICALLY WINDOWED/PADDED')
d68 1
a68 1
     $         'STANDART DEVIATION (2.3=DEF)')
d75 1
a75 1
     $  'FIRST & LAST KEY=IMAGE NUMBERS')
d77 5
a81 5
        WRITE(NOUT,102)
102     FORMAT(1H ,'ENDING KEY TOO LARGE, YOU MIGHT CONSIDER',/
     &  1X,        'TO ASK YOUR PROGRAMMER, IF HE MIGHT BE SO'/
     &  1X,        'KIND TO CHANGE THE PARAMETERS IN VISMAP.FOR')
        RETURN
d85 2
a86 2
        NREG=MAX(ICOLX,ICOLY)
C 
d131 1
a131 1
     $  IXA,IXE,IXSTRT,IXEND,IXDIM,IYA,IYE,IYSTRT,IYEND,IYDIM
d135 1
a135 1
C 
d137 1
a137 1
C
d140 1
a140 1
C
d142 1
a142 1
C
d275 1
a275 1
C 
d277 1
a277 1
C
d284 1
a284 1
C
d286 1
a286 1
C
@


1.5
log
@change unsdal2 call to an unsdal call
@
text
@d26 1
a26 1
        CHARACTER*1 NUL
d29 2
d40 3
a42 4
        NUL=CHAR(0)
        CALL FILERD(DOCF1,NLET,NUL,'INPUT DOCUMENT',IRTFLG)       
        CALL FILERD(DOCF2,NLET,NUL,'OUTPUT DOCUMENT',IRTFLG)       
        CALL FILERD(FIL1,NLETI,NUL,'INPUT',IRTFLG)
d53 1
a53 1
        CALL FILERD(FIL2,NLET,NUL,'OUTPUT',IRTFLG)
d118 1
a118 1
c        CALL FILCAN(DOCFN,NLETD,NUL,NUL,DOCF1,DATEXC,IER)
d121 8
d130 10
a139 13
        CALL UNSDAL(DOCF1,NOPEN,NDOC1,I,PLIST,NREG,
     $      DBUF,MAXKEY,MAXREG,LKEY,LERR)
C        CALL UNSDAL2(DOCF1,NOPEN,1,NDOC1,I,PLIST,NREG,
C     $      DBUF,MAXKEY,MAXREG,LKEY,LERR)
C	NOPEN=1
        IF (DBUF(1,I) .NE. 0) THEN
        ILINE = ILINE + 1
        NKEY(ILINE) = I
        BUFX(ILINE) = PLIST(ICOLX)
        BUFY(ILINE) = PLIST(ICOLY)
        WRITE(NOUT,101) BUFX(ILINE),BUFY(ILINE),ILINE,I
        ENDIF
101     FORMAT(1H ,2(2X,F12.6),2(2X,I5))
@


1.4
log
@changed maxkeys to 9992. erased $ from RDPRM* calls
@
text
@d119 1
d121 1
a121 1
        CALL UNSDAL2(DOCF1,NOPEN,1,NDOC1,I,PLIST,NREG,
d123 3
a125 1
	NOPEN=1
@


1.3
log
@clean up unused variables and hollerith warnings
@
text
@d4 1
a4 1
        PARAMETER (MAXKEY=4000)
d16 3
a18 5
#ifdef SP_UNIX
        INCLUDE 'CMBLOCK.INC'
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d34 1
a34 1
     $  'New image size: x,y (<ret>=def)$')
d46 1
a46 1
     $         'NUMBER OF DIVISIONS IN X,Y$') 
d48 1
a48 1
     $         'STANDART DEVIATION (2.3=DEF)$')
d50 1
a50 1
     $  'UPPER/LOWER IMAGE THRESHOLD IN UNITS OF SIGMA$') 
d55 1
a55 1
     $  'FIRST & LAST KEY=IMAGE NUMBERS$')
d64 1
a64 1
     &        'COLUMN #S IN DOC. FILE USED FOR X,Y COORD.$')
@


1.2
log
@cpp_lines_added
@
text
@d15 1
d22 2
a23 1
        CHARACTER*81 DOCFN,DOCF1,DOCF2,FIL1,FILN1,FIL2,FILN2
d47 4
a50 2
        CALL RDPRMI(IX,IY,NLOOP,ILOOP,'NUMBER OF DIVISIONS IN X,Y$') 
        CALL RDPRM(STNDRT,NLOOP,ILOOP,'STANDART DEVIATION (2.3=DEF)$')
d66 1
a66 1
     &             'COLUMN #S IN DOC. FILE USED FOR X,Y COORD.$')
d114 3
a116 2
221     FORMAT(1H ,'WINDOW/PAD X: INPUT: IXA,IXE
     $ , OUTPUT IXSTRT,IXEND,IXDIM'/10X,6(1X,I6))
d233 3
a235 3
     $'BUFX(K)   ,BUFX(K)-TLX,INTX,BUFY(K)    
     $  ,BUFY(K)-TLY,INTY,NKEY,IBIN'/    
     $  2(1X,E10.4),I5,2(1X,E10.4),3I5)
d286 2
a287 2
301     FORMAT(1H ,'IBCOUNT,ICURR  ,IQ     ,IQY    
     $,IBINK   ,K,L'/7(3X,I5))
d311 2
a312 2
321     FORMAT(1H ,'UPPER LEFT CORNER,ICURR,IQ,
     $  IYCOUNT,KK,I,ILC,IXIND,IXSTRT'/
@


1.1
log
@Initial revision
@
text
@d15 3
d19 1
@
