head	1.32;
access;
symbols
	pre_mrcs:1.32
	healthdept_2018:1.32
	pre_getangas:1.29
	GPL2010:1.29
	pre_GPL2010:1.28
	pre_var_equation:1.28
	pre_fftwrings:1.28
	pre_opfiles:1.28
	src:1.28
	best-code:1.27
	x-named-regs:1.27
	x:1.27
	v13-00:1.27
	pre_GPL:1.26
	prec_CA:1.21
	noindx:1.19
	Bproc:1.15
	oct21:1.14
	last77:1.10;
locks; strict;
comment	@c @;


1.32
date	2018.10.03.14.34.11;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2018.01.26.17.08.54;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2014.09.15.15.35.48;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2010.06.24.13.26.23;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2006.11.21.14.18.09;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2005.10.17.21.07.30;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2004.09.30.16.42.36;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2004.04.06.15.56.27;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2004.04.05.14.27.46;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2004.03.01.20.41.36;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2003.10.15.16.18.32;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2003.03.04.15.47.48;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2003.02.28.19.59.41;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2001.09.07.18.21.33;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2001.04.18.18.15.04;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2001.04.02.14.39.50;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2001.01.16.19.39.50;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2000.04.24.19.56.00;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	99.08.30.15.37.19;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	99.08.20.12.37.16;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.08.16.14.45.34;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.08.10.15.54.57;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	99.03.19.21.24.18;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.03.16.20.03.23;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.03.15.18.58.05;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.03.10.16.05.45;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.02.25.20.42.03;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.02.23.15.56.46;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.02.16.16.06.23;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	99.02.11.19.52.31;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	99.02.11.18.12.22;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	99.02.11.15.57.06;	author leith;	state Exp;
branches;
next	;


desc
@new
@


1.32
log
@email_health_dept
@
text
@C **********************************************************************
C
C  OPAUXFILE -- NEW  (MERGED SOME OLD FILES)     FEB 1999 ArDean Leith
C               ADDED SCRATCH                    APR 2001 ArDean Leith
C               FIXED INLINE BUG                 SEP 2001 ArDean Leith
C               LUNSETFLIP                       FEB 2003 ArDean Leith
C               LUNSETLUNS                       FEB 2003 ArDean Leith
C               REMOVED IRTFLG INPUT             APR 2004 ArDean Leith
C               SUPPORT FOR LUN=101              NOV 2006 ArDean Leith
C               IRTFLG = 1 IF NOT EXIST          SEP 2014 ArDean Leith
C               CONVERT LITTLE ENDED OPTION      JAN 2018 ArDean Leith
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2018  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  OPAUXFILE(ASKNAME,FILNAM,EXTENT,LUNT,LENREC,DISP,PROMPTT,
C            CALLERRT,IRTFLG)
C
C  PURPOSE:   OPENS A NON-SPIDER FILE (CAN HAVE EXTENSION OTHER
C             THAN DATEXC)
C
C PARAMETERS: ASKNAME    LOGICAL FLAG TO REQUEST NAME            (SENT)
C             FILNAM     FILE NAME                           (SENT/RET)
C             EXTENT     FILE EXTENSION (OPTIONAL)               (SENT)
C             LUNT       IO UNIT                                 (SENT)
C                        IF < 0 : FLAG FOR UNFORMATTED, SEQUENTIAL  
C             LENREC     RECORD LENGTH FOR OPEN (BYTES)          (SENT)
C                        >0 : LENGTH FOR UNFORMATTED, DIRECT ACCESS
C                        <0 : LENGTH FOR FORMATTED,   DIRECT ACCESS
C                         0 : FORMATTED, SEQUENTIAL ACCESS
C                         0 & LUNT < 0 : UNFORMATTED, SEQUENTIAL ACCESS 
C             DISP       CHAR FLAG THAT FILE IS OLD, ETC         (SENT)
C                        'O'  OLD (MUST EXIST)
C                        'N'  NEW (WILL BE REPLACED IF EXISTS)
C                        'S'  TEMPORARY SCRATCH FILE
C             PROMPTT    PROMPT FOR FILE NAME (USED IF ASKNAME)  (SENT)
C             CALLERRT   LOGICAL FLAG TO CALL ERRT               (SENT)
C             IRTFLG     ERROR FLAG                              (RET)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C **********************************************************************

        SUBROUTINE OPAUXFILE(ASKNAME,FILNAM,EXTENT,LUNT,LENREC,
     &                       DISP, PROMPTT,CALLERRT,IRTFLG)

        IMPLICIT NONE

        INCLUDE 'CMBLOCK.INC'

        INTEGER           :: LUNT,LENREC,IRTFLG
        CHARACTER(LEN=*)  :: FILNAM,EXTENT,PROMPTT,DISP
        LOGICAL           :: CALLERRT,EX,ASKNAME,CONVERT_TO_LITTLE
        CHARACTER(LEN=96) :: PROMPT
        CHARACTER(LEN=80) :: EXTEN
        CHARACTER(LEN=11) :: FORMVAR
        CHARACTER(LEN=10) :: ACCVAR
        CHARACTER(LEN=7)  :: STATVAR

        INTEGER           :: LENP,NCHAR,LNBLNKN,LENE,IRTFLGT,LUN
        INTEGER           :: IDUM,LENOPN,LENOPENFILE
        INTEGER           :: ICOMM, MYPID, MPIERR

        CALL SET_MPI(ICOMM, MYPID, MPIERR) ! SETS ICOMM AND MYPID

C       SET DEFAULT ERROR RETURN
        IRTFLG = 1

C       DO NOT WANT TO RETURN EXTEN
        EXTEN = EXTENT

C       INPUT FILE NAME (IF EXTEN EXISTS IT IS ADDED)

        IF (ASKNAME) THEN
C          SET PROMPT TO ALLOW FILE EXTENSION ON INPUT
           LENP   = LEN(PROMPTT)
           LENP   = MIN(LENP,93)
           PROMPT = PROMPTT(1:LENP) // '~9' 

           CALL FILERD(FILNAM,NCHAR,EXTEN,PROMPT(1:LENP+2),IRTFLG)
           IF (IRTFLG .NE. 0) RETURN
        ELSE
C          MAY WANT TO ADD EXTENT TO FILNAM
           NCHAR = LNBLNKN(FILNAM)
           LENE  = LNBLNKN(EXTENT)
           IF (LENE > 0) THEN
C             ADD THE EXTENSION THAT IS SENT TO FILNAM
              CALL FILNAMANDEXT(FILNAM,EXTEN,FILNAM,NCHAR,
     &                          .TRUE.,IRTFLGT)
           ENDIF
        ENDIF

        LUN = ABS(LUNT)
        IF ((LUN <= 0 .OR. LUN > 100) .AND. (LUN .NE. 103)) THEN
C          LUN=103 USED IN  SYMPARTEXT 
           CALL ERRT(102,'IN SOURCE CODE, LUN MUST BE 1...100',LUN)
           RETURN
        ENDIF

        IF (LUN > 0 .AND. LUN <= 100) THEN
C          ZERO THE FLAGS USED IN REDLIN/WRTLIN
           CALL LUNSETLUNS(LUN,0,0,LUN,0,IRTFLGT)
 
C          MAKE SURE THIS IS NOT TREATED AS INLINE FILE
           CALL CLOSEINLN(LUN,IRTFLGT)
        ENDIF

C       SET STATUS FOR OPEN
        CONVERT_TO_LITTLE = (DISP(2:2) == 'L')

        STATVAR = 'NEW'
        IF (DISP(1:1) == 'N' .OR. DISP(1:1) == 'U') 
     &     STATVAR = 'REPLACE'

        IF (DISP(1:1) == 'S') STATVAR = 'SCRATCH'

        IF (DISP(1:1) == 'O') THEN
C          CHECK FOR FILE EXISTENCE 
           IF (MYPID <= 0) THEN
              INQUIRE (FILE=FILNAM(1:NCHAR),EXIST=EX,IOSTAT=IRTFLGT) 
           ENDIF

#ifdef USE_MPI
           CALL BCAST_MPI('OPAUXFILE','EX',           EX,1, 'L',ICOMM)
           CALL BCAST_MPI('OPAUXFILE','IRTFLGT', IRTFLGT,1, 'I',ICOMM)
#endif

           IF (IRTFLGT .NE. 0) THEN
              WRITE(NOUT,*) '*** INQUIRY ERROR'
              IF (CALLERRT)  CALL ERRT(4,'OPAUXFILE',IDUM)
              IRTFLG = 1
              RETURN
        
           ELSEIF (.NOT. EX) THEN
              WRITE(NOUT,*) '*** FILE DOES NOT EXIST: ',FILNAM(1:NCHAR)
              IF (CALLERRT)  CALL ERRT(100,'OPAUXFILE',IDUM)
              IRTFLG = 1
              RETURN

           ENDIF
           STATVAR = 'OLD'
        ENDIF

        ACCVAR  = 'DIRECT'
        IF (LENREC == 0) ACCVAR = 'SEQUENTIAL'

        FORMVAR = 'UNFORMATTED'
        IF (LENREC <= 0) FORMVAR = 'FORMATTED'
        IF (LUNT   <  0) FORMVAR = 'UNFORMATTED'

        IF (ACCVAR == 'DIRECT') THEN
C          OPEN FILE FOR DIRECT ACCESS

C          COMPUTE RECL UNITS (DIFFERS WITH OS &A COMPILER FLAGS)
           LENOPN = LENOPENFILE(LENREC)

           IF (MYPID <= 0) THEN
              IF (STATVAR == 'SCRATCH') THEN
	         OPEN(UNIT=LUN,STATUS=STATVAR,
     &               FORM=FORMVAR, ACCESS=ACCVAR, RECL=LENOPN,
     &               IOSTAT=IRTFLGT)

              ELSEIF (CONVERT_TO_LITTLE) THEN
C                FORCE OUTPUT TO LITTLE_ENDIAN

	         OPEN(UNIT=LUN,FILE=FILNAM(1:NCHAR),STATUS=STATVAR,
     &               CONVERT='LITTLE_ENDIAN',
     &               FORM=FORMVAR, ACCESS=ACCVAR, RECL=LENOPN,
     &               IOSTAT=IRTFLGT)

              ELSE
	         OPEN(UNIT=LUN,FILE=FILNAM(1:NCHAR),STATUS=STATVAR,
     &               FORM=FORMVAR, ACCESS=ACCVAR, RECL=LENOPN,
     &               IOSTAT=IRTFLGT)
              ENDIF
           ENDIF
         ELSE
C          OPEN FILE FOR  SEQUENTIAL ACCESS
           IF (MYPID <= 0) THEN
              IF (STATVAR == 'SCRATCH') THEN
	         OPEN(UNIT=LUN,STATUS=STATVAR,
     &               FORM=FORMVAR, ACCESS=ACCVAR, 
     &               IOSTAT=IRTFLGT)
              ELSE
                 OPEN(UNIT=LUN,FILE=FILNAM(1:NCHAR),STATUS=STATVAR,
     &               FORM=FORMVAR, ACCESS=ACCVAR, 
     &               IOSTAT=IRTFLGT)
              ENDIF
           ENDIF
        ENDIF

#ifdef USE_MPI
        CALL BCAST_MPI('OPAUXFILE','IRTFLGT', IRTFLGT,1, 'I',ICOMM)
#endif

        IF (IRTFLGT .NE. 0) THEN
           WRITE(NOUT,90) ACCVAR(1:1),FORMVAR(1:1), FILNAM(:NCHAR)
 90        FORMAT(' ERROR OPENING (',A1,A1,'): ',A)
           IF (CALLERRT) CALL ERRT(102,'OPAUXFILE',IRTFLGT)
           RETURN
        ENDIF

        IF (VERBOSE .AND. MYPID <= 0) THEN
           WRITE(NOUT,91) ACCVAR(1:1),FORMVAR(1:1), FILNAM(:NCHAR)
 91        FORMAT('  OPENED (',A1,A1,'): ',A)
        ENDIF

        IRTFLG = 0

        END
@


1.31
log
@new  coi opauxfile.f   
convert littled ended option
@
text
@d19 1
a19 1
C=* Email: spider@@wadsworth.org                                        *
@


1.30
log
@==, mpi_set,  irtflg =1 if nonexistent old file
@
text
@d11 1
d17 1
a17 1
C=* Copyright 1985-2014  Health Research Inc.,                         *
d71 1
a71 1
        LOGICAL           :: CALLERRT,EX,ASKNAME
d127 2
a129 1

d180 9
@


1.29
log
@GPL_2010
@
text
@d1 1
a1 1
C ++********************************************************************
d3 8
a10 7
C  OPAUXFILE -- NEW  (MERGED SOME OLD FILES) FEB 1999 ArDean Leith
C               ADDED SCRATCH                APR 2001 ArDean Leith
C               FIXED INLINE BUG             SEP 2001 ArDean Leith
C               LUNSETFLIP                   FEB 2003 ArDean Leith
C               LUNSETLUNS                   FEB 2003 ArDean Leith
C               REMOVED IRTFLG INPUT         APR 2004 ARDEAN LEITH
C               SUPPORT FOR LUN=101          NOV 2006 ARDEAN LEITH
d16 1
a16 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d41 1
a41 1
C             FILNAM     FILE NAME                      (SENT/RETURNED)
d56 1
a56 1
C             IRTFLG     ERROR FLAG
d64 2
d68 1
d77 5
a81 8
#ifdef USE_MPI
        include 'mpif.h' 
        ICOMM  = MPI_COMM_WORLD 
        MPIERR = 0  
        CALL MPI_COMM_RANK(ICOMM, MYPID, MPIERR)
#else 
        MYPID = -1    
#endif    
d103 1
a103 1
           IF (LENE .GT. 0) THEN
d111 1
a111 2
        IF ((LUN .LE. 0 .OR. LUN .GT. 100) .AND.
     &     (LUN .NE. 103)) THEN
d117 1
a117 1
        IF (LUN .GT. 0 .AND. LUN .LE. 100) THEN
d128 1
a128 1
        IF (DISP(1:1) .EQ. 'N' .OR. DISP(1:1) .EQ. 'U') 
d131 1
a131 1
        IF (DISP(1:1) .EQ. 'S') STATVAR = 'SCRATCH'
d133 1
a133 1
        IF (DISP(1:1) .EQ. 'O') THEN
d135 1
a135 1
           IF (MYPID .LE. 0) THEN
d140 2
a141 10
           CALL MPI_BCAST(EX, 1, MPI_LOGICAL, 0, ICOMM, MPIERR)
           IF (MPIERR .NE. 0) THEN
              WRITE(0,*) 'OPAUXFILE: FAILED TO BCAST EX'
              STOP
           ENDIF 
           CALL MPI_BCAST(IRTFLGT, 1, MPI_INTEGER, 0, ICOMM, MPIERR)
           IF (MPIERR .NE. 0) THEN
              WRITE(0,*) 'OPAUXFILE: FAILED TO BCAST IRTFLGT'
              STOP
           ENDIF 
d147 1
d153 1
d161 1
a161 1
        IF (LENREC .EQ. 0) ACCVAR = 'SEQUENTIAL'
d164 2
a165 2
        IF (LENREC .LE. 0) FORMVAR = 'FORMATTED'
        IF (LUNT   .LT. 0) FORMVAR = 'UNFORMATTED'
d167 1
a167 1
        IF (ACCVAR .EQ. 'DIRECT') THEN
d173 2
a174 2
           IF (MYPID .LE. 0) THEN
              IF (STATVAR .EQ. 'SCRATCH') THEN
d186 2
a187 2
           IF (MYPID .LE. 0) THEN
              IF (STATVAR .EQ. 'SCRATCH') THEN
d200 1
a200 5
        CALL MPI_BCAST(IRTFLGT, 1, MPI_INTEGER, 0, ICOMM, MPIERR)
        IF (MPIERR .NE. 0) THEN
           WRITE(0,*) 'OPAUXFILE: FAILED TO BCAST IRTFLGT'
           STOP
        ENDIF 
d210 1
a210 1
        IF (VERBOSE .AND. MYPID .LE. 0) THEN
d216 1
a216 1
        RETURN
@


1.28
log
@allowed lun=103
@
text
@a11 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2006  Health Research Inc.                      *
d13 5
a17 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d19 1
a19 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d24 1
a24 1
C=* This program is distributed in the hope that it will be useful,    *
d26 1
a26 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a27 1
C=*                                                                    *
d29 1
a29 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.27
log
@GPL License fixed
@
text
@d9 1
d13 1
a13 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d69 8
a76 7
        CHARACTER *(*)  FILNAM,EXTENT,PROMPTT,DISP
        LOGICAL         CALLERRT,EX,ASKNAME
        CHARACTER *96   PROMPT
        CHARACTER *80   EXTEN
        CHARACTER *11   FORMVAR
        CHARACTER *10   ACCVAR
        CHARACTER * 7   STATVAR
d79 1
a79 2
        INTEGER MYPID, COMM, MPIERR
        COMM   = MPI_COMM_WORLD 
d81 1
a81 1
        CALL MPI_COMM_RANK(COMM, MYPID, MPIERR)
d114 3
a116 1
        IF (LUN .LE. 0 .OR. LUN .GT. 100) THEN
d121 3
a123 2
C       ZERO THE FLAGS USED IN REDLIN/WRTLIN
        CALL LUNSETLUNS(LUN,0,0,LUN,0,IRTFLGT)
d125 3
a127 2
C       MAKE SURE THIS IS NOT TREATED AS INLINE FILE
        CALL CLOSEINLN(LUN,IRTFLGT)
d139 1
a139 2
#ifdef USE_MPI
           IF (MYPID .EQ. 0) THEN
d142 3
a144 1
           CALL MPI_BCAST(EX, 1, MPI_LOGICAL, 0, COMM, MPIERR)
d149 1
a149 1
           CALL MPI_BCAST(IRTFLGT, 1, MPI_INTEGER, 0, COMM, MPIERR)
a153 2
#else
           INQUIRE (FILE=FILNAM(1:NCHAR),EXIST=EX,IOSTAT=IRTFLGT) 
d182 2
a183 2
#ifdef USE_MPI
           IF (MYPID .EQ. 0) THEN
a193 11
#else
           IF (STATVAR .EQ. 'SCRATCH') THEN
	      OPEN(UNIT=LUN,STATUS=STATVAR,
     &            FORM=FORMVAR, ACCESS=ACCVAR, RECL=LENOPN,
     &            IOSTAT=IRTFLGT)
           ELSE
	      OPEN(UNIT=LUN,FILE=FILNAM(1:NCHAR),STATUS=STATVAR,
     &            FORM=FORMVAR, ACCESS=ACCVAR, RECL=LENOPN,
     &            IOSTAT=IRTFLGT)
           ENDIF
#endif
d196 1
a196 2
#ifdef USE_MPI
           IF (MYPID .EQ. 0) THEN
a206 11
#else
           IF (STATVAR .EQ. 'SCRATCH') THEN
	      OPEN(UNIT=LUN,STATUS=STATVAR,
     &            FORM=FORMVAR, ACCESS=ACCVAR, 
     &            IOSTAT=IRTFLGT)
           ELSE
	      OPEN(UNIT=LUN,FILE=FILNAM(1:NCHAR),STATUS=STATVAR,
     &            FORM=FORMVAR, ACCESS=ACCVAR, 
     &            IOSTAT=IRTFLGT)
           ENDIF
#endif
d208 1
d210 1
a210 1
        CALL MPI_BCAST(IRTFLGT, 1, MPI_INTEGER, 0, COMM, MPIERR)
d220 1
a220 1
           IF (CALLERRT) CALL ERRT(100,'OPAUXFILE',IDUM)
@


1.26
log
@mpi
@
text
@d11 23
a33 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
d61 1
a61 1
C**************************************************************************
@


1.25
log
@~9 prompt wrong
@
text
@d58 9
d117 15
d133 1
d161 13
a173 1

d183 1
d186 13
d208 1
d210 7
d225 1
a225 1
        IF (VERBOSE) THEN
@


1.24
log
@IRTFLG input removed
@
text
@d71 1
a71 1
           PROMPT = PROMPTT(1:LENP) // '~9' // CHAR(0)
d73 1
a73 1
           CALL FILERD(FILNAM,NCHAR,EXTEN,PROMPT,IRTFLG)
@


1.23
log
@IRTFLG setting wrong
@
text
@d8 1
d19 1
a19 1
C  OPAUXFILE(ASKNAME,FILNAM,EXTENT,LUNT,LENREC,DISP,PROMPT,
d39 2
a40 2
C             PROMPT     PROMPT FOR FILE NAME (USED IF ASKNAME)  (SENT)
C             PROMPT     LOGICAL FLAG TO CALL ERRT               (SENT)
d47 1
a47 1
     &                       DISP, PROMPT,CALLERRT,IRTFLG)
d51 1
a51 1
        CHARACTER *(*)  FILNAM,EXTENT,PROMPT,DISP
d53 1
a61 1

a65 2
C       SET IRTFLG TO ALLOW FILE EXTENSION ON INPUT
        IRTFLGT = 9
d68 7
a74 2
           CALL FILERD(FILNAM,NCHAR,EXTEN,PROMPT,IRTFLGT)
           IF (IRTFLGT .NE. 0) RETURN
@


1.22
log
@cosmetic output
@
text
@a59 2
C       SET IRTFLG TO ALLOW FILE EXTENSION ON INPUT
        IRTFLGT = 9
d65 3
d77 2
a78 1
              CALL FILNAMANDEXT(FILNAM,EXTEN,FILNAM,NCHAR,.TRUE.,IRTFLG)
d89 1
a89 1
        CALL LUNSETLUNS(LUN,0,0,LUN,0,IRTFLG)
d92 1
a92 1
        CALL CLOSEINLN(LUN,IRTFLG)
d108 1
a108 1
              IF (CALLERRT) CALL ERRT(4,'OPAUXFILE',IDUM)
d113 1
a113 1
              IF (CALLERRT) CALL ERRT(100,'OPAUXFILE',IDUM)
@


1.21
log
@lunsetluns
@
text
@d162 1
a162 1
 91        FORMAT(' OPENED (',A1,A1,'): ',A)
@


1.20
log
@lunsetflip
@
text
@d7 1
a48 1
        COMMON /LUNARA/ LUNARA(100),LUNSTK(100),LUNARB(100)
d82 1
a82 1
           CALL ERRT(101,'*** PGM ERROR: LUN MUST BE 1...100',IDUM)
d86 2
a87 4
C       ZERO THE OFFSETS USED IN REDLIN/WRTLIN
        LUNARA(LUN) = 0
        LUNSTK(LUN) = 0
        CALL LUNSETFLIP(LUN,0,IRTFLG)
@


1.19
log
@exiting inline nedded closing bug
existing inline lun needed closing bug
@
text
@d6 2
a7 1
C 
d89 2
@


1.18
log
@N_VERBOSE --> VERBOSE
@
text
@d3 11
a13 3
C  OPAUXFILE -- NEW FEB 99 (MERGED SOME OLD FILES) ArDean Leith
C               ADDED SCRATCH APR 2001 ArDean Leith
C
a14 8
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1993, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
d88 2
@


1.17
log
@added scratch & comments
@
text
@d157 1
a157 1
        IF (N_VERBOSE .EQ. 1) THEN
@


1.16
log
@added lunarb to common /lunara/
@
text
@d3 2
a4 1
C  OPAUXFILE -- NEW FEB 99 (MERGED SOME OLD FILES)          ARDEAN LEITH
d22 1
a22 1
C PARAMETERS: AXKNAME    LOGICAL FLAG TO REQUEST NAME            (SENT)
d26 1
a26 1
C                        IF <0 FLAG FOR UNFORMATTED, SEQ         
d28 4
a31 5
C                        >0 LENGTH FOR DIRECT ACCESS, UNFORMATTED
C                         0 SEQUENTIAL ACCESS, FORMATTED
C                         0 & LUNT < 0 is SEQUENTIAL ACCESS, 
C                         UNFORMATTED
C                        <0 LENGTH FOR DIRECT ACCESS, FORMATTED
d35 2
a36 1
C             PROMPT     PROMPT FOR FILE                         (SENT)
d89 1
d95 2
a126 3
	   OPEN(UNIT=LUN,FILE=FILNAM(1:NCHAR),STATUS=STATVAR,
     &         FORM=FORMVAR, ACCESS=ACCVAR, RECL=LENOPN,
     &         IOSTAT=IRTFLGT)
d128 10
a137 1
        ELSE
d139 9
a147 4

	   OPEN(UNIT=LUN,FILE=FILNAM(1:NCHAR),STATUS=STATVAR,
     &          FORM=FORMVAR, ACCESS=ACCVAR, 
     &          IOSTAT=IRTFLGT)
@


1.15
log
@SP_F90 removed
@
text
@d46 1
a46 1
        COMMON /LUNARA/  LUNARA(100),LUNSTK(100)
@


1.14
log
@nchar undefined for not askname
@
text
@d89 1
a89 1
#ifdef SP_F90
a91 25
#else
        IF (DISP(1:1) .EQ. 'N' .OR. DISP(1:1) .EQ. 'U') THEN
C          CHECK FOR FILE EXISTENCE 
           INQUIRE (FILE=FILNAM(1:NCHAR),EXIST=EX,IOSTAT=IRTFLGT) 

           IF (IRTFLGT .NE. 0) THEN
              WRITE(NOUT,*) '*** INQUIRY ERROR'
              IF (CALLERRT) CALL ERRT(4,'OPAUXFILE',IDUM)
              RETURN

           ELSEIF (EX) THEN
C             FILE IS IS OPENED WITH 'NEW' BUT ALREADY EXISTS; IT WILL
C             BE REPLACED.  OLD FILES ARE DELETED FIRST 

              OPEN (UNIT=LUN,FILE=FILNAM(1:NCHAR),STATUS='OLD')
              CLOSE(UNIT=LUN,STATUS='DELETE',IOSTAT=IRTFLGT)

	      IF (IRTFLGT .NE. 0) THEN
                WRITE(NOUT,*)'*** ERROR DELETING FILE: ',FILNAM(1:NCHAR)
                IF (CALLERRT) CALL ERRT(100,'OPAUXFILE',NE)
                RETURN
              ENDIF
          ENDIF
        ENDIF
#endif
@


1.13
log
@added nchar to filnam use
@
text
@d70 2
a71 1
           LENE = LNBLNKN(EXTENT)
@


1.12
log
@can open seq unformatted
@
text
@d73 1
a73 1
              CALL FILNAMANDEXT(FILNAM,EXTEN,FILNAM,NLET,.TRUE.,IRTFLG)
d94 1
a94 1
           INQUIRE (FILE=FILNAM,EXIST=EX,IOSTAT=IRTFLGT) 
d105 1
a105 1
              OPEN (UNIT=LUN,FILE=FILNAM,STATUS='OLD')
d109 3
a111 3
                 WRITE(NOUT,*) '*** ERROR DELETING FILE: ', FILNAM
                 IF (CALLERRT) CALL ERRT(100,'OPAUXFILE',NE)
                 RETURN
d119 1
a119 1
           INQUIRE (FILE=FILNAM,EXIST=EX,IOSTAT=IRTFLGT) 
d127 1
a127 1
              WRITE(NOUT,*) '*** FILE DOES NOT EXIST: ',FILNAM
d147 1
a147 1
	   OPEN(UNIT=LUN,FILE=FILNAM,STATUS=STATVAR,
d154 1
a154 1
	   OPEN(UNIT=LUN,FILE=FILNAM,STATUS=STATVAR,
a158 1
        NCHAR = LNBLNKN(FILNAM)
@


1.11
log
@bad null after filenam listing
@
text
@d29 2
d140 1
@


1.10
log
@form wrong
@
text
@d156 1
d158 1
a158 1
           WRITE(NOUT,90) ACCVAR(1:1),FORMVAR(1:1), FILNAM
d165 1
a165 1
           WRITE(NOUT,91) ACCVAR(1:1),FORMVAR(1:1), FILNAM
@


1.9
log
@rewritten
@
text
@d137 1
a137 1
        IF (LENREC .LT. 0) FORMVAR = 'FORMATTED'
@


1.8
log
@access type was inconsisten for seq. formatted
@
text
@d3 1
a3 1
C  OPAUXFILE -- NEW FEB 99 (MERGED SOME OLD FILES)        ARDEAN LEITH
d25 5
a29 4
C             LENREC     RECORD LENGTH FOR OPEN (BYTES)         (SENT)
C                        >0 IS LENGTH FOR DIRECT ACCESS
C                         0 IS SEQUENTIAL ACCESS, FORMATTED
C                        -1 IS SEQUENTIAL ACCESS, UNFORMATTED
d31 2
a36 1
C        0         2         3         4         5         6         7
d40 2
a41 2
        SUBROUTINE OPAUXFILE(ASKNAME,FILNAM,EXTENT,LUNT,LENREC,DISP,
     &                       PROMPT,CALLERRT,IRTFLG)
d49 2
d75 1
a75 1
        LUN = LUNT
d77 1
a77 1
           WRITE(NOUT,*) '*** PGM ERROR: LUN MUST BE 1...100'
d87 2
a88 1
        IF (DISP(1:1) .EQ. 'N') STATVAR = 'REPLACE'
d90 1
a90 1
        IF (DISP(1:1) .EQ. 'N') THEN
d100 1
a100 1
C             FILE IS IS OPENED WITH 'NEQ' BUT ALREADY EXISTS; IT WILL
d123 1
a123 1

d129 9
a137 2
           ELSEIF (LENREC .GT. 0) THEN
C             OPEN EXISTING FILE FOR DIRECT ACCESS
d139 8
a146 19
C             COMPUTE RECL UNITS (DIFFERS WITH OS &A COMPILER FLAGS)
              LENOPN = LENOPENFILE(LENREC)
	      OPEN(UNIT=LUN,FILE=FILNAM,STATUS='OLD',
     &            FORM='UNFORMATTED',ACCESS='DIRECT',RECL=LENOPN,
     &            IOSTAT=IRTFLGT)

           ELSEIF (LENREC .EQ. -1) THEN
C             OPEN EXISTING FILE FOR  SEQUENTIAL ACCESS, UNFORMATTED

	      OPEN(UNIT=LUN,FILE=FILNAM,STATUS='OLD',
     &            FORM='UNFORMATTED',ACCESS='SEQUENTIAL',
     &            IOSTAT=IRTFLGT)

           ELSE
C             OPEN EXISTING FILE FOR SEQUENTIAL ACCESS, FORMATTED
              OPEN(UNIT=LUN,FILE=FILNAM,STATUS='OLD',
     &            FORM='FORMATTED',ACCESS='SEQUENTIAL',
     &            IOSTAT=IRTFLGT)
           ENDIF
d149 1
a149 21
C          OPEN A NEW FILE 

           IF (LENREC .GT. 0) THEN
C             OPEN NEW FILE FOR DIRECT ACCESS
              LENOPN = LENOPENFILE(LENREC)
	      OPEN(UNIT=LUN,FILE=FILNAM,STATUS=STATVAR,
     &            FORM='UNFORMATTED',ACCESS='DIRECT',RECL=LENOPN,
     &            IOSTAT=IRTFLGT)

           ELSEIF (LENREC .EQ. -1) THEN
C             OPEN EXISTING FILE FOR  SEQUENTIAL ACCESS, UNFORMATTED

	      OPEN(UNIT=LUN,FILE=FILNAM,STATUS=STATVAR,
     &            FORM='UNFORMATTED',ACCESS='SEQUENTIAL',
     &            IOSTAT=IRTFLGT)
           ELSE
C             OPEN NEW FILE FOR SEQUENTIAL ACCESS, FORMATTED
              OPEN(UNIT=LUN,FILE=FILNAM,STATUS=STATVAR,
     &            FORM='FORMATTED',ACCESS='SEQUENTIAL',
     &            IOSTAT=IRTFLGT)
           ENDIF
d151 3
d157 2
a158 1
           WRITE(NOUT,*) '*** ERROR OPENING FILE: ', FILNAM
d164 2
a165 1
           WRITE(NOUT,*) 'OPENED: ', FILNAM
@


1.7
log
@added messages and extension for .not. askname
@
text
@d27 2
a28 1
C                         0 IS SEQUENTIAL ACCESS
d134 1
a134 1
C             OPEN EXISTING FILE FOR  SEQUENTIAL ACCESS FORMATTED
d137 1
a137 1
     &            FORM='FORMATTED',ACCESS='SEQUENTIAL',
d141 1
a141 1
C             OPEN EXISTING FILE FOR SEQUENTIAL ACCESS
d143 1
a143 1
     &            FORM='UNFORMATTED',ACCESS='SEQUENTIAL',
d150 1
a150 1
           IF (LENREC .NE. 0) THEN
d156 7
d164 1
a164 1
C             OPEN NEW FILE FOR SEQUENTIAL ACCESS
@


1.6
log
@added formatted
@
text
@d61 7
d119 2
a120 2
              WRITE(NOUT,*) '*** FILE DOES NOT EXIST'
              IF (CALLERRT) CALL ERRT(4,'OPAUXFILE',IDUM)
d165 2
a166 2
           WRITE(NOUT,*) '*** ERROR: OPENING FILE'
           IF (CALLERRT) CALL ERRT(101,'OPAUXFILE',IDUM)
d168 4
@


1.5
log
@exten not returned now
@
text
@d116 1
a116 1
           ELSEIF (LENREC .NE. 0) THEN
d123 7
@


1.4
log
@changed lenopenfile parameter to bytes
@
text
@d15 1
a15 1
C  OPAUXFILE(ASKNAME,FILNAM,EXTEN,LUNT,LENREC,DISP,PROMPT,
d23 1
a23 1
C             EXTEN      FILE EXTENSION (OPTIONAL)               (SENT)
d37 1
a37 1
        SUBROUTINE OPAUXFILE(ASKNAME,FILNAM,EXTEN,LUNT,LENREC,DISP,
d43 1
a43 1
        CHARACTER *(*)  FILNAM,EXTEN,PROMPT,DISP
d45 1
d53 3
@


1.3
log
@*** empty log message ***
@
text
@d25 1
a25 1
C             LENREC     RECORD LENGTH FOR OPEN (4 BYTE WORDS)   (SENT)
@


1.2
log
@askname error
@
text
@d55 1
a55 1
           CALL FILERDT(FILNAM,NCHAR,EXTEN,PROMPT,IRTFLGT)
@


1.1
log
@Initial revision
@
text
@d54 4
a57 2
        IF (ASKNAME) CALL FILERDT(FILNAM,NCHAR,EXTEN,PROMPT,IRTFLGT)
        IF (IRTFLGT .NE. 0) RETURN
@
