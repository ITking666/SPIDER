head	1.16;
access;
symbols
	pre_mrcs:1.16
	healthdept_2018:1.16
	pre_getangas:1.14
	GPL2010:1.14
	pre_GPL2010:1.13
	pre_var_equation:1.13
	pre_fftwrings:1.13
	pre_opfiles:1.13
	src:1.13
	best-code:1.13
	x-named-regs:1.13
	x:1.13
	v13-00:1.13
	pre_GPL:1.11
	prec_CA:1.11
	noindx:1.10
	Bproc:1.8
	oct21:1.7
	last77:1.7;
locks; strict;
comment	@c @;


1.16
date	2018.10.03.14.34.10;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2014.07.30.15.15.54;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.24.13.26.17;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.17.20.13.11;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.17.18.07.05;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.20.20.13.20;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.11.14.08.01;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2000.11.03.21.05.03;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.11.10.23.09.40;	author yuchen;	state Exp;
branches;
next	1.7;

1.7
date	99.02.04.17.14.37;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	97.10.17.20.52.23;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	97.10.10.17.48.11;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.06.27.20.12.09;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	95.04.17.18.49.58;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.07.50;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.31;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.16
log
@email_health_dept
@
text
@C++*********************************************************************
C
C MRRSURF.F        FILENAMES LENGTHENED            JAN 89 al
C                  OPFILEC                         FEB 03 ARDEAN LEITH
C                  MAXNAM                          JUL 14 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  MRRSURF
C
C  PURPOSE:
C      CREATE SURFACE REPRESENTATION OF THREE-DIMENSIONAL VOLUME
C
C  AUTHOR: M.RADERMACHER, DEZ.1982
C
C--*******************************************************************

      SUBROUTINE MRRSURF

      INCLUDE 'CMBLOCK.INC'
      INCLUDE 'CMLIMIT.INC'

      COMMON ADUM(512),BUFA(512),BUF(512),BC(512,2),BOX(512),A(262144)

      CHARACTER(LEN=MAXNAM) :: FLN1,FLN3D

      CHARACTER *1  NULL,YZ
      INTEGER       LUN1,LUN2

      NULL = CHAR(0)
      LUN1 = 10
      LUN2 = 11

C----- READ INPUT -----------------------------------------------

      MAXIM = 0
      CALL OPFILEC(0,.TRUE.,FLN3D,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
     &                   MAXIM,'3-D',.FALSE.,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      CALL RDPRMC(YZ,NCHAR,.TRUE.,
     &     'ROTATION AXIS (Y)(=DEF.)  OR (Z)',NULL,IRTFLG)
      IF (YZ.EQ.'Z') THEN 
         NROWP=NSLICE
         IYY=NROW
      ELSE
         NROWP=NROW
         IYY=NSLICE
      ENDIF

      CALL FILERD(FLN1,NLET,NULL,'OUTPUT',IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

      CALL RDPRMI(NSAMP,IDUM,NOT_USED,
     &    'HORIZONTAL DIMENSION OF SURFACE DEPTH BUFFER')

      MAXIM = 0
      IFORM = 1
      CALL OPFILEC(LUN1,.FALSE.,FLN1,LUN2,'U',IFORM,NSAMP,NROWP,1,
     &                   MAXIM,'3-D',.FALSE.,IRTFLG)
      IF (IRTFLG .NE. 0) THEN
         CLOSE(LUN1)
         RETURN
      ENDIF

      CALL RDPRMI(NS1,NS2,NOT_USED,'DEPTH FROM, TO')
      NDEEP=NS2-NS1
      CALL RDPRM(PHI,NOT_USED,'VIEWING ANGLE')
      PHI=PHI/180.*3.14159265
      CALL RDPRM(SW,NOT_USED,'THRESHOLD')
      WRITE(NOUT,501) SW
501   FORMAT(' PRECISE THRESHOLD:',G10.4)
      FS=SIGN(1.,SW)
      SW=ABS(SW)
      CALL RDPRMI(IBACK,IDUM,NOT_USED,
     & 'BACKGROUND (0)ZERO,(1)MIN,(2)MAX,(3)LOCAL MIN,(4)LOCAL MAX')
      IF (IBACK.EQ.3.OR.IBACK.EQ.4) THEN 
          CALL RDPRMI(LBOX,IDUM,NOT_USED,
     &         'BOX LENGTH FOR BACKGROUND FILTER')
          CALL RDPRM(BOFF,NOT_USED,'BACKGROUND OFFSET')
      END IF
70    CONTINUE

C----- DETERMINE START VALUES ------------------------------------------
      DO  K=1,NSAMP
         BUF(K)=0.
      ENDDO
      BMIN=1000.
      BMINT=1000.
      BMAX=0.
      BMAXT=0.
      
C     CLEAR BUFFER FOR BACKGROUND CORRECTION:
      DO  L=1,NROWP
        BC(L,1)=0.
62      BC(L,2)=0.
      END DO
      
C     READ SLICE:
      IF (YZ.EQ.'Z') THEN 
        NWHAT=NSLICE
      ELSE
        NWHAT=NROW
      ENDIF
      DO  LAUF=1,NWHAT
         IF (YZ.NE.'Z') THEN
           DO  I=1,NSLICE
             N0=(I-1)*NROW+LAUF
             CALL REDLIN(LUN1,BUFA,NSAM,N0)
             IND0=(I-1)*NSAM
             DO  K=1,NSAM
               IND=IND0+K
               A(IND)=BUFA(K)
	     ENDDO
	   ENDDO
         ENDIF
         IF (YZ.EQ.'Z') THEN
            DO  I=1,NROW
               N0=(LAUF-1)*NROW+I
               IND=(I-1)*NSAM+1
               CALL REDLIN(LUN1,ADUM,NSAM,N0)
               DO  K=1,NSAM
                  A(IND-1+K)=ADUM(NSAM-K+1)
	       ENDDO
	    ENDDO
         ENDIF
         CPHI=COS(PHI)
         SPHI=SIN(PHI)
         DO 5 K=1,NSAMP
C        KSP=NSAMP+1-K
C       CHANGE SIDEDNESS OF IMAGE:
        KSP=K
        IF1=1
        IF2=1
        IF3=1
        IF4=1
        XP=K-1-NSAMP/2
        DO 6 L=1,NDEEP
          YP=L-1.+NS1
          X0=XP*CPHI-YP*SPHI+NSAM/2+1.
          Y0=XP*SPHI+YP*CPHI+IYY/2+1
          IF(X0.GE.(NSAM-1).OR.X0.LE.2) GOTO 6
          IF(Y0.GE.(IYY-1).OR.Y0.LE.2) GOTO 6
          IX0=INT(X0)
          IY0=INT(Y0)
          IND1=IX0+(IY0-1)*NSAM
          IND2=IND1+1
          IND3=IND1+NSAM
          IND4=IND3+1
          IF(A(IND1)*FS.GE.SW) IF1=0
          IF(A(IND2)*FS.GE.SW) IF2=0
          IF(A(IND3)*FS.GE.SW) IF3=0
          IF(A(IND4)*FS.GE.SW) IF4=0
          IG=IF1*IF2*IF3*IF4
          IF(IG.EQ.1) GOTO 6
C         WRITE(NOUT,100)IND1,IND2,IND3,IND4,A(IND1),A(IND2)
C    $        ,A(IND3),A(IND4)
100       FORMAT(' VALUE FOUND',4I4,4F12.4)
C-----------------------------------------------------------------------
C         INTERPOLATION
C-----------------------------------------------------------------------
          AI1=A(IND1)+(A(IND2)-A(IND1))*(X0-IX0)
          AI2=A(IND3)+(A(IND4)-A(IND3))*(X0-IX0)
          AI3=(AI1+(AI2-AI1)*(Y0-IY0))*FS
          IF(AI3.LT.SW) GOTO 6
          X2=XP*CPHI-(YP-1)*SPHI+NSAM/2+1
          Y2=XP*SPHI+(YP-1)*CPHI+IYY/2+1
          IX2=INT(X2)
          IY2=INT(Y2)
          IND1=IX2+(IY2-1)*NSAM
          IND2=IND1+1
          IND3=IND1+NSAM
          IND4=IND3+1
C-----------------------------------------------------------------------
C         CALCULATE VALUES OF NEXT POINTS
C-----------------------------------------------------------------------
          AJ1=A(IND1)+(A(IND2)-A(IND1))*(X2-IX2)
          AJ2=A(IND3)+(A(IND4)-A(IND3))*(X2-IX2)
          AJ3=(AJ1+(AJ2-AJ1)*(Y2-IY2))*FS
          IF(AI3.LE.AJ3) GOTO 7
          DIF=(SW-AJ3)/(AI3-AJ3)
          IF(DIF.LT.0) DIF=ABS((SW-AJ3)/(AI3+AJ3))
          BUF(KSP)=L+DIF-1
C     WRITE(NDAT,101) K,BUF(KSP),DIF,XP,YP,X0,Y0
101   FORMAT(' K=',I4,'BUF(K)=',F12.4,'DIF=',E12.4,
     &'XP,YP ',2F14.4,' X0,Y0 ',2F14.4)
          GOTO 5
7         BUF(KSP)=L
          GOTO 5
6       CONTINUE
5       CONTINUE
        CALL WRTLIN(LUN2,BUF,NSAMP,LAUF)
        DO  K=1,NSAMP
        IF(BMAX.LT.BUF(K)) BMAX=BUF(K)
        IF(BMIN.GT.BUF(K).AND.BUF(K).GT.0.) BMIN=BUF(K)
        BUF(K)=0.
	ENDDO
        BC(LAUF,1)=BMIN-BOFF
        BC(LAUF,2)=BMAX+BOFF
        IF(BMAXT.LT.BMAX) BMAXT=BMAX
        IF(BMINT.GT.BMIN) BMINT=BMIN
        BMAX=0.
        BMIN=1000
      ENDDO
C----- CALCULATE BACKGROUND --------------------------------------------

      IF(IBACK.EQ.0) GOTO 17



C----- CALCULATE BACKGROUND --------------------------------------------

      IF(IBACK.NE.1) GOTO 24

C----- MINIMUM TOTAL ---------------------------------------------------

      BMIN=BMINT-1
24    CONTINUE
      IF(IBACK.NE.2) GOTO 25

C----- MAXIMUM TOTAL ---------------------------------------------------

      BMAX=BMAXT+1.
25    CONTINUE
      IF (IBACK.NE.3.AND.IBACK.NE.4) GOTO 26

C----- LOCAL MINIMUM AND MAXIMUM ---------------------------------------

      IF(IBACK.EQ.3)J=1
      IF(IBACK.EQ.4)J=2
      DO  K=1,NROW
      BZ=BC(K,J)
      IZ=K
      IF(BZ.GT.0.) GOTO 32
      ENDDO
32    BC(1,J)=BZ
      DO  K=2,NROW
      IF(BC(K,J).LE.0.) BC(K,J)=BC(K-1,J)
      ENDDO
      WRITE (NOUT,999) J,(BC(K,J),K=1,NROW)
999   FORMAT(' BC',I3,1X,/,25(/1X,10F10.2))

C----- BOX CONVOLUTION -------------------------------------------------

      LEN=(LBOX-0.5)/2
      DO  K=1,NROW
      BOX(K)=BC(K,J)
      DO  L=1,LEN
      IND1=K-L
      IND2=K+L
      IF(IND1.LT.1)IND1=1
      IF(IND2.GT.NROW)IND2=NROW
      BOX(K)=BOX(K)+BC(IND1,J)+BC(IND2,J)
      ENDDO
      ENDDO
      DO  K=1,NROW
       BC(K,J)=BOX(K)/(2*LEN+1)
      ENDDO
      WRITE(NOUT,999) J,(BC(K,J),K=1,NROW)

C-----------------------------------------------------------------------

26    CONTINUE
      DO  K=1,NROW
        CALL REDLIN(LUN2,BUF,NSAMP,K)
        IF(IBACK.EQ.1) THEN

C----- MINIMUM TOTAL ----------------------------------------------
           DO  L=1,NSAMP
             IF(BUF(L).LE.0.0) BUF(L)=BMINT
	   ENDDO
        END IF
        IF(IBACK.EQ.2) THEN

C----- MAXIMUM TOTAL ----------------------------------------------
          DO  L=1,NSAMP
            IF(BUF(L).LE.0.0) BUF(L)=BMAXT
	  ENDDO
	END IF
        IF(IBACK.EQ.3.OR.IBACK.EQ.4) THEN

C----- LOCAL MINIMUM AND MAXIMUM ---------------------------------
          DO  L=1,NSAMP
             IF(BUF(L).GT.0.) BUF(L)=BUF(L)-BC(K,J)
	  ENDDO
        END IF
        CALL WRTLIN(LUN2,BUF,NSAMP,K)
      ENDDO
17    CONTINUE

C-----------------------------------------------------------------------

C     WRITE(6,200) NL1,NL2,NS1,NS2,SW,NSAM,NROW,NSLICE,CS,CQ
200   FORMAT(' NL1,NL2,NS1,NS2:',4I5,' SW:',F10.2,
     &       'NSAM,NROW,NSLICE:',3I5,'CS,CQ:',F10.2)
      CLOSE(LUN1)
      CLOSE(LUN2)
      RETURN
      END
@


1.15
log
@(LEN=MAXNAM) :: FLN1,FLN3D
@
text
@d13 1
a13 1
C=* Email: spider@@wadsworth.org                                        *
@


1.14
log
@GPL_2010
@
text
@d3 1
a3 1
C MRRSURF.F                          FILENAMES LENGTHENED JAN 89 al
d5 1
d11 1
a11 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d31 3
a33 1
C  CREATE SURFACE REPRESENTATION OF THREE-DIMENSIONAL VOLUME
d41 1
d45 2
a46 1
      CHARACTER *81 FLN1,FLN3D
d48 1
a48 2
      INTEGER LUN1,LUN2
      COMMON /COMMUN/ FLN1,FLN3D
@


1.13
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.12
log
@HRI GPL License used
@
text
@a1 1
C++*************************************************************************
a6 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.                          *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.                             *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
a30 1
C **************************************************************************
@


1.11
log
@opfilec
@
text
@d1 1
d7 1
d9 1
d11 24
d41 1
@


1.10
log
@nloop,iloop_removed
@
text
@d4 1
d41 1
a41 1
      CALL OPFILE(.TRUE.,FLN3D,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
d63 1
a63 1
      CALL OPFILE(.FALSE.,FLN1,LUN2,'U',IFORM,NSAMP,NROWP,1,
@


1.9
log
@used opfile & cosmetic
@
text
@d57 1
a57 1
      CALL RDPRMI(NSAMP,IDUM,NLOOP,ILOOP,
d69 1
a69 1
      CALL RDPRMI(NS1,NS2,NLOOP,ILOOP,'DEPTH FROM, TO')
d71 1
a71 1
      CALL RDPRM(PHI,NLOOP,ILOOP,'VIEWING ANGLE')
d73 1
a73 1
      CALL RDPRM(SW,NLOOP,ILOOP,'THRESHOLD')
d78 1
a78 1
      CALL RDPRMI(IBACK,IDUM,NLOOP,ILOOP,
d81 1
a81 1
          CALL RDPRMI(LBOX,IDUM,NLOOP,ILOOP,
d83 1
a83 1
          CALL RDPRM(BOFF,NLOOP,ILOOP,'BACKGROUND OFFSET')
@


1.8
log
@a
@
text
@d3 1
a3 1
C MRRSURF.FOR                        FILENAMES LENGTHENED JAN 89 al
a23 2
 

d33 1
a33 1
      NULL=CHAR(0)
d39 3
a41 1
      CALL FILERD(FLN3D,NLET,NULL,'3-D',IRTFLG)
a42 1
      CALL OPENF(FLN3D,LUN1,NSAM,NROW,'OLD',NF,NSLICE)
d45 1
a45 1
     &     'ROTATION AXIS (Y)(=DEF.)  OR (Z)$',NULL,IRTFLG)
d58 10
a67 3
     $    'HORIZONTAL DIMENSION OF SURFACE DEPTH BUFFER$')
      IFORM=1
      CALL OPENF(FLN1,LUN2,NSAMP,NROWP,'UNKNOWN',NF1,1)
d69 1
a69 1
      CALL RDPRMI(NS1,NS2,NLOOP,ILOOP,'DEPTH FROM,TO$')
d71 1
a71 1
      CALL RDPRM(PHI,NLOOP,ILOOP,'VIEWING ANGLE$')
d73 1
a73 1
      CALL RDPRM(SW,NLOOP,ILOOP,'THRESHOLD$')
d79 1
a79 1
     $ 'BACKGROUND (0)ZERO,(1)MIN,(2)MAX,(3)LOCAL MIN,(4)LOCAL MAX$')
d82 2
a83 2
     $         'BOX LENGTH FOR BACKGROUND FILTER$')
          CALL RDPRM(BOFF,NLOOP,ILOOP,'BACKGROUND OFFSET$')
d96 1
a96 1
C  CLEAR BUFFER FOR BACKGROUND CORRECTION:
d102 1
a102 1
C  READ SLICE:
d134 1
a134 1
C CHANGE SIDEDNESS OF IMAGE:
d159 3
a161 3
C     WRITE(NOUT,100)IND1,IND2,IND3,IND4,A(IND1),A(IND2)
C    $,A(IND3),A(IND4)
100   FORMAT(' VALUE FOUND',4I4,4F12.4)
d163 1
a163 1
C     INTERPOLATION
d178 1
a178 1
C     CALCULATE VALUES OF NEXT POINTS
d189 1
a189 1
     $'XP,YP ',2F14.4,' X0,Y0 ',2F14.4)
d209 1
a209 1
C
d213 1
a213 1
C
d215 1
a215 1
C
d217 1
a217 1
C
d219 1
a219 1
C
d223 1
a223 1
C
d225 1
a225 1
C
d228 2
a229 2
      IF(IBACK.NE.3.AND.IBACK.NE.4) GOTO 26
C
d231 1
a231 1
C
d245 1
a245 1
C
d247 1
a247 1
C
d263 1
a263 1
C
d265 1
a265 1
C
d293 1
a293 1
C
d295 1
a295 1
C
d298 3
a300 3
     $       'NSAM,NROW,NSLICE:',3I5,'CS,CQ:',F10.2)
      CLOSE(10)
      CLOSE(11)
@


1.7
log
@CNO_SAVE
@
text
@d24 1
a24 1
CNO_SAVE 
@


1.6
log
@H
@
text
@d3 1
a3 2
C $$ MRRSURF.FOR                         
C                            FILENAMES LENGTHENED JAN 89 al
d15 1
a15 1
C  $$ MRRSURF
d24 2
a25 1
#ifdef SP_UNIX
d27 1
a27 3
#else
      INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d44 1
d47 1
a47 1
      IF(YZ.EQ.'Z') THEN 
d74 2
a75 2
      IF(IBACK.EQ.3.OR.IBACK.EQ.4) THEN 
         CALL RDPRMI(LBOX,IDUM,NLOOP,ILOOP,
d77 1
a77 1
         CALL RDPRM(BOFF,NLOOP,ILOOP,'BACKGROUND OFFSET$')
d292 1
a292 1
     $'NSAM,NROW,NSLICE:',3I5,'CS,CQ:',F10.2)
@


1.5
log
@*** empty log message ***
@
text
@d70 1
a70 1
501   FORMAT(1H ,'PRECISE THRESHOLD:',G10.4)
@


1.4
log
@clear hollorith continuation line prob
@
text
@d83 1
a83 1
      DO 1 K=1,NSAMP
d85 1
a85 1
1     CONTINUE
d103 1
a103 1
      DO 2 LAUF=1,NWHAT
d105 1
a105 1
           DO 3 I=1,NSLICE
d109 1
a109 1
             DO 4 K=1,NSAM
d112 2
a113 2
4            CONTINUE
3          CONTINUE
d116 1
a116 1
            DO 333 I=1,NROW
d120 1
a120 1
               DO 334 K=1,NSAM
d122 2
a123 2
334            CONTINUE
333         CONTINUE
d191 1
a191 1
        DO 8 K=1,NSAMP
d195 1
a195 1
8       CONTINUE
d202 1
a202 1
2     CONTINUE
d229 1
a229 1
      DO 31 K=1,NROW
d233 1
a233 1
31    CONTINUE
d235 1
a235 1
      DO 33 K=2,NROW
d237 1
a237 1
33    CONTINUE
d244 1
a244 1
      DO 35 K=1,NROW
d246 1
a246 1
      DO 36 L=1,LEN
d252 5
a256 4
36    CONTINUE
35    CONTINUE
      DO 37 K=1,NROW
37    BC(K,J)=BOX(K)/(2*LEN+1)
d262 1
a262 1
      DO 10 K=1,NROW
d267 1
a267 1
           DO 11 L=1,NSAMP
d269 1
a269 1
11         CONTINUE
d274 1
a274 1
          DO 38 L=1,NSAMP
d276 1
a276 1
38        CONTINUE
d281 1
a281 1
          DO 50 L=1,NSAMP
d283 1
a283 1
50        CONTINUE
d286 1
a286 1
10    CONTINUE
@


1.3
log
@use lun for unit instead of 11,12
@
text
@a45 1

d73 2
a74 2
      CALL RDPRMI(IBACK,IDUM,NLOOP,ILOOP,'BACKGROUND (0)ZERO,
     $       (1)MIN,(2)MAX,(3)LOCAL MIN,(4)LOCAL MAX$')
@


1.2
log
@cpp_lines_added
@
text
@d34 1
d38 2
d45 1
a45 1
      CALL OPENF(FLN3D,10,NSAM,NROW,'OLD',NF,NSLICE)
d50 2
a51 2
      NROWP=NSLICE
      IYY=NROW
d53 2
a54 2
      NROWP=NROW
      IYY=NSLICE
d61 1
a61 1
     $'HORIZONTAL DIMENSION OF SURFACE DEPTH BUFFER$')
d63 1
a63 1
      CALL OPENF(FLN1,11,NSAMP,NROWP,'UNKNOWN',NF1,1)
d72 1
a72 1
	FS=SIGN(1.,SW)
d74 7
a80 6
      CALL RDPRMI(IBACK,IDUM,NLOOP,ILOOP,'BACKGROUND (0)ZERO,(1)MIN,
     $(2)MAX,(3)LOCAL MIN,(4)LOCAL MAX$')
      IF(IBACK.NE.3.AND.IBACK.NE.4) GOTO 70 
      CALL RDPRMI(LBOX,IDUM,NLOOP,ILOOP,
     $'BOX LENGTH FOR BACKGROUND FILTER$')
      CALL RDPRM(BOFF,NLOOP,ILOOP,'BACKGROUND OFFSET$')
d82 1
a82 1
C
a83 1
C
d85 1
a85 1
      BUF(K)=0.
d91 1
d93 5
a97 3
      DO 62 L=1,NROWP
      BC(L,1)=0.
62    BC(L,2)=0.
d105 25
a129 25
      IF (YZ.NE.'Z') THEN
        DO 3 I=1,NSLICE
        N0=(I-1)*NROW+LAUF
        CALL REDLIN(10,BUFA,NSAM,N0)
        IND0=(I-1)*NSAM
        DO 4 K=1,NSAM
        IND=IND0+K
        A(IND)=BUFA(K)
4       CONTINUE
3       CONTINUE
      ENDIF
      IF (YZ.EQ.'Z') THEN
        DO 333 I=1,NROW
        N0=(LAUF-1)*NROW+I
        IND=(I-1)*NSAM+1
        CALL REDLIN(10,ADUM,NSAM,N0)
        DO 334 K=1,NSAM
        A(IND-1+K)=ADUM(NSAM-K+1)
334     CONTINUE
333     CONTINUE
      ENDIF
      CPHI=COS(PHI)
      SPHI=SIN(PHI)
      DO 5 K=1,NSAMP
C      KSP=NSAMP+1-K
d131 24
a154 24
      KSP=K
      IF1=1
      IF2=1
      IF3=1
      IF4=1
      XP=K-1-NSAMP/2
      DO 6 L=1,NDEEP
      YP=L-1.+NS1
      X0=XP*CPHI-YP*SPHI+NSAM/2+1.
      Y0=XP*SPHI+YP*CPHI+IYY/2+1
      IF(X0.GE.(NSAM-1).OR.X0.LE.2) GOTO 6
      IF(Y0.GE.(IYY-1).OR.Y0.LE.2) GOTO 6
      IX0=INT(X0)
      IY0=INT(Y0)
      IND1=IX0+(IY0-1)*NSAM
      IND2=IND1+1
      IND3=IND1+NSAM
      IND4=IND3+1
      IF(A(IND1)*FS.GE.SW) IF1=0
      IF(A(IND2)*FS.GE.SW) IF2=0
      IF(A(IND3)*FS.GE.SW) IF3=0
      IF(A(IND4)*FS.GE.SW) IF4=0
      IG=IF1*IF2*IF3*IF4
      IF(IG.EQ.1) GOTO 6
d161 12
a172 12
      AI1=A(IND1)+(A(IND2)-A(IND1))*(X0-IX0)
      AI2=A(IND3)+(A(IND4)-A(IND3))*(X0-IX0)
      AI3=(AI1+(AI2-AI1)*(Y0-IY0))*FS
      IF(AI3.LT.SW) GOTO 6
      X2=XP*CPHI-(YP-1)*SPHI+NSAM/2+1
      Y2=XP*SPHI+(YP-1)*CPHI+IYY/2+1
      IX2=INT(X2)
      IY2=INT(Y2)
      IND1=IX2+(IY2-1)*NSAM
      IND2=IND1+1
      IND3=IND1+NSAM
      IND4=IND3+1
d176 7
a182 7
      AJ1=A(IND1)+(A(IND2)-A(IND1))*(X2-IX2)
      AJ2=A(IND3)+(A(IND4)-A(IND3))*(X2-IX2)
      AJ3=(AJ1+(AJ2-AJ1)*(Y2-IY2))*FS
      IF(AI3.LE.AJ3) GOTO 7
      DIF=(SW-AJ3)/(AI3-AJ3)
      IF(DIF.LT.0) DIF=ABS((SW-AJ3)/(AI3+AJ3))
      BUF(KSP)=L+DIF-1
d186 18
a203 18
      GOTO 5
7     BUF(KSP)=L
      GOTO 5
6     CONTINUE
5      CONTINUE
       CALL WRTLIN(11,BUF,NSAMP,LAUF)
       DO 8 K=1,NSAMP
       IF(BMAX.LT.BUF(K)) BMAX=BUF(K)
       IF(BMIN.GT.BUF(K).AND.BUF(K).GT.0.) BMIN=BUF(K)
       BUF(K)=0.
8      CONTINUE
       BC(LAUF,1)=BMIN-BOFF
       BC(LAUF,2)=BMAX+BOFF
       IF(BMAXT.LT.BMAX) BMAXT=BMAX
       IF(BMINT.GT.BMIN) BMINT=BMIN
       BMAX=0.
       BMIN=1000
2      CONTINUE
d263 23
a285 25
      CALL REDLIN(11,BUF,NSAMP,K)
      IF(IBACK.NE.1) GOTO 40
C
C----- MINIMUM TOTAL ---------------------------------------------------
C
      DO 11 L=1,NSAMP
      IF(BUF(L).LE.0.0) BUF(L)=BMINT
11    CONTINUE
40    IF(IBACK.NE.2) GOTO 41
C
C----- MAXIMUM TOTAL ---------------------------------------------------
C
      DO 38 L=1,NSAMP
      IF(BUF(L).LE.0.0) BUF(L)=BMAXT
38    CONTINUE
41    CONTINUE
      IF(IBACK.NE.3.AND.IBACK.NE.4) GOTO 42
C
C----- LOCAL MINIMUM AND MAXIMUM ---------------------------------------
C
      DO 50 L=1,NSAMP
      IF(BUF(L).GT.0.) BUF(L)=BUF(L)-BC(K,J)
50    CONTINUE
42    CONTINUE
      CALL WRTLIN(11,BUF,NSAMP,K)
@


1.1
log
@Initial revision
@
text
@d25 3
d29 1
@
