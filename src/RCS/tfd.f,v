head	1.21;
access;
symbols
	pre_getangas:1.15
	GPL2010:1.15
	pre_GPL2010:1.14
	pre_var_equation:1.14
	pre_fftwrings:1.14
	pre_opfiles:1.14
	src:1.14
	best-code:1.14
	x-named-regs:1.14
	x:1.14
	v13-00:1.14
	pre_GPL:1.12
	prec_CA:1.12
	noindx:1.10
	Bproc:1.10
	oct21:1.7
	last77:1.7;
locks; strict;
comment	@c @;


1.21
date	2015.11.24.19.02.38;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2015.11.17.18.11.55;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2015.11.16.16.30.55;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2015.11.12.19.38.06;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2015.11.09.20.44.51;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2015.10.14.16.03.21;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.24.13.27.06;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.17.20.27.19;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.17.18.18.56;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2003.04.04.18.36.16;	author bbaxter;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.02.14.09.49;	author bbaxter;	state Exp;
branches;
next	1.10;

1.10
date	99.12.06.19.15.55;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.11.10.20.29.05;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	99.11.10.14.59.22;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	98.04.24.20.29.01;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.05.13.19.02.55;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.10.01.14.03.11;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.04.07.19.54.03;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.03.02.15.32.42;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.11.14.14.22.48;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.53.18;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.21
log
@ACR --> WGH    GEH --> ENV   reversion to keep same as publication
@
text
@C++*********************************************************************
C
C TFD.F 
C        CHANGED TO INCLUDE INTELLIGIBLE GAUSSIAN PARAMETER JF 9/5/94
C        CHANGED LAST LINE TO CORRECT NORMALIZATION            4/2/03
C        ACR PASSED IN BY CALLING ROUTINE AS ATAN(ACR/(1.0-ACR)),
C        CS1 PASSED IN BY CALLING ROUTINE AS CS*1.E7,
C           (16.*ALOG(2.)) CHANGED TO PARAMETER KPP,
C        F = -QUADPI**2 CHANGED TO A PARAMETER
C        ADDED TFD_PLUS                                     AL 11/9/15
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2015  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C TFD     (B,CS1,DZ,LAMBDA,Q,DS,IE,AK,WGH,ENV)
C TFD_PLUS(B_RAW,CS1,DZ,LAMBDA,Q,DS,AK,WGH,ENV, B_ENV)
C
c PARAMETERS:
C          B      = TRANSFER                                  (OUTPUT)
C          CS1    = ADJUSTED SPHERICAL ABBERATION              (INPUT) 
C          DZ     = ADJUSTED DEFOCUS                           (INPUT)
C          LAMBDA = ADJUSTED ELECTRON WAVELENGHT               (INPUT) 
C          Q      = ADJUSTED SOURCE SIZE                       (INPUT)
C          DS     = ADJUSTED DEFOCUS SPREAD                    (INPUT)
C          AK     = ADJUSTED LOCATION                          (INPUT)
C          WGH    = ADJUSTED AMPLITUDE CONTRAST RATIO   == ACR (INPUT)
C          ENV    = ADJUSTED GAUSSIAN ENVELOP HALFWIDTH == GEH (INPUT)
C
C          B_RAW  = TRANSFER                                  (OUTPUT)
C          B_ENV  = ENVELOPE TRANSFER                         (OUTPUT)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

         SUBROUTINE TFD(B,CS1,DZ,LAMBDA,Q,DS,IE,AK,WGH,ENV)

         IMPLICIT  NONE
         REAL      :: B,CS1,DZ,LAMBDA,Q,DS,AK,WGH,ENV
         INTEGER   :: IE

         REAL      :: F1,F2,Q1,ENV1,AKK,DS1,KAPPA,DZ1,P,CH,QQT

         DOUBLE PRECISION, PARAMETER :: 
     &            QUADPI = 3.141592653589793238462643383279502884197
         DOUBLE PRECISION, PARAMETER :: KPP = 11.09035491943359380000
         DOUBLE PRECISION, PARAMETER :: F = -9.8696050643920898400000
C                                       F = -QUADPI**2

C        cs1   = cs * 1.e7   ! DONE IN CALLER
C        env   = 1 / geh**2  ! DONE IN CALLER

         F1    = 1. / SQRT(CS1 * LAMBDA)
         F2    = SQRT(SQRT(CS1 * LAMBDA**3))
         Q1    = (Q * F2)**2
         ENV1  = ENV / F2**2
         AKK   = AK * F2

         DS1   = DS  * DS * F1
         KAPPA = DS1 * F / KPP
         DZ1   = DZ  * F1
         P     = AKK**3 - DZ1 * AKK
         CH    = EXP(AKK**4 * KAPPA)

C        b     = (exp(f*q1*p**2)*ch)*2*exp(-ENV1*akk**2)
c        factor "2" was removed to have the ctf = w at zero.

         B     = (EXP(F * Q1 * P**2) * CH) * EXP(-ENV1 * AKK**2)
         IF (IE == 1) RETURN   ! FOR ENVELOPE ONLY

         QQT   = 2. * QUADPI*(.25 * AKK**4 - .5 * DZ1 * AKK**2)
         B     = B * SIN(QQT - WGH)

c        b     = b * sin(qqt - atan(WGH / (1.0 - WGH)))       ; old
c        b     = b * ((1.0 - WGH) * sin(qqt) - WGH*cos(qqt))  ; older

         END

C        ------------------ TFD_PLUS --------------------------------


         SUBROUTINE TFD_PLUS(B_STRAIGHT,CS1,DZ,LAMBDA,Q,DS,AK,WGH,ENV,
     &                       B_ENV)

         REAL      :: LAMBDA,KAPPA
         REAL      :: B,CS1,DZ,Q,DS,AK,WGH,ENV,B_ENV,B_STRAIGHT

         REAL      :: F1,F2,Q1,ENV1,AKK,DS1,DZ1,P,CH

         PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
         PARAMETER (KPP = 11.09035491943359380000)
         PARAMETER (F = -9.8696050643920898400000)

         F1    = 1. / SQRT(CS1 * LAMBDA)
         F2    = SQRT(SQRT(CS1 * LAMBDA**3))
         Q1    = (Q * F2)**2
         ENV1  = ENV / F2**2
         AKK   = AK  * F2

         DS1   = DS  * DS * F1
         KAPPA = DS1 * F / KPP
         DZ1   = DZ  * F1
         P     = AKK**3 - DZ1 * AKK
         CH    = EXP(AKK**4 * KAPPA)

         ! Use source size (q and q1) of zero for b_env? 

         B_ENV = (EXP(F * Q1 * P**2) * CH) * EXP(-ENV1 * AKK**2)

         QQT   = 2. * QUADPI * (.25 * AKK**4 - .5 * DZ1 * AKK**2)

         B_STRAIGHT = B_ENV  * SIN(QQT - WGH)

         END

         !write(6,*) 'env,f2,-env1,expenv: ',env,f2,-env1,exp(-env1*akk**2)



@


1.20
log
@B_RAW --> B_STRAIGHT variable name
@
text
@d34 2
a35 2
C TFD     (B,CS1,DZ,LAMBDA,Q,DS,IE,AK,ACR,GEH)
C TFD_PLUS(B_RAW,CS1,DZ,LAMBDA,Q,DS,AK,ACR,GEH, B_ENV)
d45 2
a46 2
C          ACR    = ADJUSTED AMPLITUDE CONTRAST RATIO   == WGH (INPUT)
C          GEH    = ADJUSTED GAUSSIAN ENVELOP HALFWIDTH == ENV (INPUT)
d49 1
a49 1
C          B_ENV  = TRANSFER                                  (OUTPUT)
d54 1
a54 1
         SUBROUTINE TFD(B,CS1,DZ,LAMBDA,Q,DS,IE,AK,ACR,GEH)
d57 1
a57 1
         REAL      :: B,CS1,DZ,LAMBDA,Q,DS,AK,ACR,GEH
d60 1
a60 1
         REAL      :: F1,F2,Q1,GEH1,AKK,DS1,KAPPA,DZ1,P,CH,QQT
d68 2
a69 1
C        cs1   = cs * 1.e7  ! DONE IN CALLER
d74 1
a74 1
         GEH1  = GEH / F2**2
d83 1
a83 1
C        b     = (exp(f*q1*p**2)*ch)*2*exp(-geh1*akk**2)
d86 1
a86 1
         B     = (EXP(F * Q1 * P**2) * CH) * EXP(-GEH1 * AKK**2)
d90 1
a90 1
         B     = B * SIN(QQT - ACR)
d92 2
a93 2
c        b     = b * sin(qqt - atan(acr / (1.0 - acr)))       ; old
c        b     = b * ((1.0 - acr) * sin(qqt) - acr*cos(qqt))  ; older
d100 1
a100 1
         SUBROUTINE TFD_PLUS(B_STRAIGHT,CS1,DZ,LAMBDA,Q,DS,AK,ACR,GEH,
d104 1
a104 1
         REAL      :: B,CS1,DZ,Q,DS,AK,ACR,GEH,B_ENV,B_STRAIGHT
d106 1
a106 1
         REAL      :: F1,F2,Q1,GEH1,AKK,DS1,DZ1,P,CH
d115 1
a115 1
         GEH1  = GEH / F2**2
d126 1
a126 3
         !write(6,*) 'geh1: ',geh,-geh1,exp(-geh1 * akk**2)

         B_ENV = (EXP(F * Q1 * P**2) * CH) * EXP(-GEH1 * AKK**2)
d130 1
a130 1
         B_STRAIGHT = B_ENV  * SIN(QQT - ACR)
d134 1
@


1.19
log
@cosmetic
@
text
@d99 2
a100 1
         SUBROUTINE TFD_PLUS(B_RAW,CS1,DZ,LAMBDA,Q,DS,AK,ACR,GEH, B_ENV)
d103 1
a103 1
         REAL      :: B,CS1,DZ,Q,DS,AK,ACR,GEH,B_ENV,B_RAW
d125 2
d131 1
a131 1
         B_RAW = B_ENV  * SIN(QQT - ACR)
@


1.18
log
@refactored
@
text
@d45 1
a45 1
C          ACR    = ADJUSTED AMPLITUDE CONTRAST RATION  == WGH (INPUT)
d68 2
a69 1
C        CS1   = CS * 1.E7
d82 2
a83 2
C        B     = (EXP(F*Q1*P**2)*CH)*2*EXP(-GEH1*AKK**2)
C        FACTOR "2" WAS REMOVED TO HAVE THE CTF = W AT ZERO.
d91 2
a92 2
C        B     = B * SIN(QQT - ATAN(ACR / (1.0 - ACR)))       ; old
C        B     = B * ((1.0 - ACR) * SIN(QQT) - ACR*COS(QQT))  ; older
d122 1
a122 1
         ! USE SOURCE SIZE (Q and Q1) OF ZERO FOR B_ENV? 
@


1.17
log
@added tfd_plus
@
text
@d6 1
a6 1
C        WGH PASSED IN BY CALLING ROUTINE AS ATAN(WGH/(1.0-WGH)),
d34 16
a49 1
C TFD(B,CS1,DZ,LAMBDA,Q,DS,IE,AK,WGH,ENV)
d54 1
a54 1
         SUBROUTINE TFD(B,CS1,DZ,LAMBDA,Q,DS,IE,AK,WGH,ENV)
d56 11
a66 4
         REAL       LAMBDA,KAPPA
         PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
         PARAMETER (KPP = 11.09035491943359380000)
         PARAMETER (F = -9.8696050643920898400000)
d72 1
a72 1
         ENV1  = ENV / F2**2
d74 1
a74 1
C        F     = -QUADPI**2
d81 1
a81 2
C        B     = (EXP(F*Q1*P**2)*CH)*2*EXP(-ENV1*AKK**2)

d84 2
a85 2
         B     = (EXP(F * Q1 * P**2) * CH) * EXP(-ENV1 * AKK**2)
         IF (IE == 1) RETURN
d88 1
a88 1
         B     = B * SIN(QQT - WGH)
d90 2
a91 2
C        B     = B * SIN(QQT - ATAN(WGH / (1.0 - WGH)))       ; OLD
C        B     = B * ((1.0 - WGH) * SIN(QQT) - WGH*COS(QQT))  ; OLDER
d98 1
a98 1
         SUBROUTINE TFD_PLUS(B_RAW,CS1,DZ,LAMBDA,Q,DS,AK,WGH,GEH, B_ENV)
d101 1
a101 1
         REAL      :: B,CS1,DZ,Q,DS,AK,WGH,ENV,B_ENV,B_RAW
d103 1
a103 1
         REAL      :: F1,F2,Q1,ENV1,AKK,DS1,DZ1,P,CH
d112 2
a113 2
         ENV1  = GEH / F2**2
         AKK   = AK * F2
d121 1
a121 2
        ! USE SOURCE SIZE (Q and Q1) OF ZERO FOR B_ENV 
        !B     = (EXP(F * Q1 * P**2) * CH) * EXP(-ENV1 * AKK**2)
d123 1
a123 1
         B_ENV =  EXP(-ENV1 * AKK**2)
d125 1
a125 3
         B     = (EXP(F * Q1 * P**2) * CH) * B_ENV

         QQT   = 2. * QUADPI*(.25 * AKK**4 - .5 * DZ1 * AKK**2)
d127 1
a127 1
         B_RAW = B  * SIN(QQT - WGH)
@


1.16
log
@cosmetic and formatting
@
text
@d3 1
a3 1
C TFD.FOR
d5 1
a5 1
C        CHANGED LAST LINE TO CORRECT NORMALIZATION 4/2/03
d10 1
d67 1
a67 1
         B      =B * SIN(QQT - WGH)
d73 42
@


1.15
log
@GPL_2010
@
text
@d3 7
a9 1
C $$ TFD.FOR
d15 1
a15 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d33 1
a33 10
C
C CHANGED 9/5/94 TO INCLUDE INTELLIGIBLE
C GAUSSIAN PARAMETER JF
C
C CHANGED LAST LINE TO CORRECT NORMALIZATION 4/2/03
C    WGH passed in by calling routine as ATAN(WGH/(1.0-WGH)),
C    CS1 passed in by calling routine as CS*1.E7,
C    (16.*ALOG(2.)) changed to parameter KPP,
C    F = -QUADPI**2 changed to a parameter
C
d40 1
a40 1
         REAL LAMBDA,KAPPA
d45 26
a70 20
C         CS1 = CS*1.E7
         F1=1./SQRT(CS1*LAMBDA)
         F2=SQRT(SQRT(CS1*LAMBDA**3))
         Q1 = (Q*F2)**2
         ENV1=ENV/F2**2
         AKK=AK*F2
C         F=-QUADPI**2
         DS1=DS*DS*F1
         KAPPA=DS1*F/KPP
         DZ1=DZ*F1
         P=AKK**3-DZ1*AKK
         CH=EXP(AKK**4*KAPPA)
C         B=(EXP(F*Q1*P**2)*CH)*2*EXP(-ENV1*AKK**2)
C Factor "2" was removed to have the CTF=W at zero.
         B=(EXP(F*Q1*P**2)*CH)*EXP(-ENV1*AKK**2)
         IF(IE.EQ.1) RETURN
         QQT=2.*QUADPI*(.25*AKK**4-.5*DZ1*AKK**2)
         B=B*SIN(QQT-WGH)
C         B=B*SIN(QQT-ATAN(WGH/(1.0-WGH)))       ; old
C         B=B*((1.0-WGH)*SIN(QQT)-WGH*COS(QQT))  ; older
@


1.14
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.13
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a5 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
a29 1
C **************************************************************************
a43 1
C--************************************************************************
@


1.12
log
@changes to CS, WGH, KPP to speed up tfd
@
text
@d1 1
d6 1
d8 1
d10 24
d40 1
d55 1
@


1.11
log
@changed last line to correct normalization BB(from PP)
@
text
@d20 4
d29 1
a29 1
         SUBROUTINE TFD(B,CS,DZ,LAMBDA,Q,DS,IE,AK,WGH,ENV)
d32 5
a36 2
	 PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
         CS1 = CS*1.E7
d42 1
a42 1
         F=-QUADPI**2
d44 1
a44 1
         KAPPA=DS1*F/(16.*ALOG(2.))
d53 3
a55 2
C         B=B*((1.0-WGH)*SIN(QQT)-WGH*COS(QQT))
         B=B*SIN(QQT-ATAN(WGH/(1.0-WGH)))
@


1.10
log
@header
@
text
@d19 1
d21 1
d46 2
a47 1
         B=B*((1.0-WGH)*SIN(QQT)-WGH*COS(QQT))
@


1.9
log
@*** empty log message ***
@
text
@d16 2
d19 1
d22 1
a22 5
C changed 9/5/94 to include intelligible
C Gaussian parameter jf
C
C $$ TFD.FOR
C
d24 1
@


1.8
log
@*** empty log message ***
@
text
@d24 3
a26 7
         SUBROUTINE TFD(B,CS,DZ,LAMBDA,KM,NSAM,Q,DS,IE,AK,WGH,ENV)
         REAL LAMBDA,KM,KAPPA
#ifdef SP_MP
         PI=3.14159
#else
         DATA  PI/3.14159/
#endif
d33 1
a33 1
         F=-PI**2
d43 1
a43 1
         QQT=2.*PI*(.25*AKK**4-.5*DZ1*AKK**2)
@


1.7
log
@data removed for MP
@
text
@a30 1
CNO_SAVE
@


1.6
log
@two removed
@
text
@d26 3
d30 1
d37 1
a37 1
         AK=AK*F2
d42 3
a44 3
         P=AK**3-DZ1*AK
         CH=EXP(AK**4*KAPPA)
C         B=(EXP(F*Q1*P**2)*CH)*2*EXP(-ENV1*AK**2)
d46 1
a46 1
         B=(EXP(F*Q1*P**2)*CH)*EXP(-ENV1*AK**2)
d48 1
a48 1
         QQT=2.*PI*(.25*AK**4-.5*DZ1*AK**2)
@


1.5
log
@formula corrected
 exp[ -(ak**4*ds1**2*Pi**2)/(16*log(2.0))]
@
text
@d40 3
a42 1
         B=(EXP(F*Q1*P**2)*CH)*2*EXP(-ENV1*AK**2)
@


1.4
log
@small changes.
@
text
@d35 1
a35 1
         DS1=DS*F1
@


1.3
log
@nosave
@
text
@d41 1
a41 1
         IF(IE.EQ.1)GO TO 50
a43 1
50       CONTINUE
@


1.2
log
@new version
@
text
@d27 1
@


1.1
log
@Initial revision
@
text
@d19 2
d31 1
d39 1
a39 1
         B=(EXP(F*Q1*P**2)*CH)*2*EXP(-ENV*AK**2)
d45 1
@
