head	1.24;
access;
symbols
	pre_getangas:1.23
	GPL2010:1.23
	pre_GPL2010:1.22
	pre_var_equation:1.22
	pre_fftwrings:1.22
	pre_opfiles:1.22
	src:1.22
	best-code:1.22
	x-named-regs:1.22
	x:1.22
	v13-00:1.22
	pre_GPL:1.20
	prec_CA:1.20
	noindx:1.19
	Bproc:1.18
	oct21:1.17
	last77:1.17;
locks; strict;
comment	@c @;


1.24
date	2018.02.12.20.15.44;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2010.06.24.13.25.44;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.17.20.05.44;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2005.10.17.18.00.45;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2003.02.18.20.48.59;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2000.12.05.13.13.00;	author bimal;	state Exp;
branches;
next	1.18;

1.18
date	2000.04.24.20.31.38;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	99.03.26.14.43.34;	author pawel;	state Exp;
branches;
next	1.16;

1.16
date	99.03.24.16.28.44;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	98.04.06.19.58.17;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	98.04.06.18.58.58;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	97.11.06.15.16.42;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	97.10.06.20.43.48;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	96.09.09.20.54.39;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	96.08.27.18.58.50;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	96.08.27.14.55.36;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	96.08.27.14.02.31;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	96.03.18.21.36.58;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	96.03.05.14.00.31;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	96.02.28.15.54.04;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	96.01.05.18.53.21;	author ramani;	state Exp;
branches;
next	1.3;

1.3
date	95.10.26.14.48.22;	author ramani;	state Exp;
branches;
next	1.2;

1.2
date	95.10.24.14.48.30;	author mladjadj;	state Exp;
branches;
next	1.1;

1.1
date	95.10.23.19.51.08;	author mladjadj;	state Exp;
branches;
next	;


desc
@called by four1.f
@


1.24
log
@refactored
@
text
@C++*********************************************************************
C
C    FOUR1B           OPFILEC                    FEB 2003 ARDEAN LEITH    
C                     REFACTORED                 FEB 2018 ARDEAN LEITH    
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2018  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  PURPOSE: CALCULATES POWER SPECTRUM ------------------------ 'PW'
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

	SUBROUTINE FOUR1B

        IMPLICIT NONE
        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        REAL, ALLOCATABLE, DIMENSION(:,:,:) :: QA
        REAL, ALLOCATABLE, DIMENSION(:,:)   :: qt

        CHARACTER (LEN=MAXNAM) ::  FILNAM

        INTEGER                :: NX,NY,NZ,MAXIM,IRTFLG,IFORMIN,LSD,IRL
        INTEGER                :: NE,INV

        INTEGER, PARAMETER     :: LUN1 = 21
        INTEGER, PARAMETER     :: LUN2 = 22

C       FOURIER MODULI FROM COMPLEX FOURIER TRANSFORM 
C       ON DISK FOR 2-D OR 3-D PICTURES.

C       OPEN INPUT IMAGE/VOLUME, MAY BE FOURIER FORMAT
        MAXIM = 0
	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,NX,NY,NZ,
     &		   MAXIM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) RETURN

C       FOURIER INPUT 2D & 3D
        NZ      = MAX(1,NZ)
	IFORMIN = IFORM

        IF (IFORM == 1)  THEN
C          REAL IMAGE
           IF(MOD(NX,2) == 0)  THEN
              LSD = NX + 2
           ELSE
              LSD = NX + 1
           ENDIF
           IRL = NX
          
        ELSEIF (IFORM == 3)  THEN
C          REAL VOLUME
           IF (MOD(NX,2) == 0)  THEN
              LSD = NX + 2
           ELSE
              LSD = NX + 1
           ENDIF
           IRL = NX
          
        ELSEIF (IFORM == -11)  THEN
C          FOURIER IMAGE, ODD X
           IFORM = 1
           LSD   = NX
           IRL   = NX
           NX    = NX - 1
          
        ELSEIF (IFORM == -12)  THEN
C          FOURIER IMAGE, EVEN X
           IFORM = 1
           LSD   = NX
           IRL   = NX
           NX    = NX - 2
           
        ELSEIF (IFORM == -21)  THEN
C         FOURIER VOLUME, ODD X
           IFORM = 3
           LSD   = NX
           IRL   = NX
           NX    = NX - 1
           
        ELSEIF(IFORM == -22)  THEN
C          FOURIER VOLUME, EVEN X
           IFORM = 3
           LSD   = NX
           IRL   = NX
           NX    = NX - 2
           
        ELSE
           CALL ERRT(102,'UNKNOWN FILE FORMAT',IFORM)
           CLOSE(LUN1)
           RETURN
        ENDIF

C       OPEN REAL OUTPUT FILE FOR POWER SPECTRUM
        MAXIM = 0
	CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'N',IFORM,NX,NY,NZ,
     &		       MAXIM,'OUTPUT',.FALSE.,IRTFLG)
	IF (IRTFLG .NE. 0)  RETURN

       !ALLOCATE (qt(nx,ny), QA(LSD,NY,NZ), STAT=IRTFLG)
 	ALLOCATE (QA(LSD,NY,NZ), STAT=IRTFLG)

        IF (IRTFLG  ==  0) THEN 
C          ADEQUATE SPACE IN MEMORY, LOAD INPUT IMAGE/VOLUME          
	   CALL READV(LUN1,QA,LSD,NY,IRL,NY,NZ)

	   IF (IFORMIN  >  0) THEN
C             REAL INPUT 2D & 3D, CONVERT TO FOURIER
	      INV = +1
              IF (NZ == 1)  THEN
	         CALL FMRS_2(QA,NX,NY,INV)
	      ELSE
	         CALL FMRS_3(QA,NX,NY,NZ,INV)
	      ENDIF
	      IF (INV == 0)  THEN
                 CALL  ERRT(101,'IN FFT',NE)
                 GOTO 999
	      ENDIF
	   ENDIF
           
           IF (NZ == 1)  THEN
C             IMAGE

              IF (INDEX(FCHAR,'T') > 1 ) THEN
                 CALL PW2SR  (QA,NX,NY,FCHAR(4:4))
c                OUTPUT REAL IMAGE	   
                 CALL WRITEV(LUN2,QA,LSD,NY,NX,NY,1)
                !qt(1:nx,1:ny) = qa(1:nx,1:ny,1)
                !call chkmaxloc2d(' max loc qt:',qt,nx,ny)

              ELSE
                CALL PW2SR_A(QA,NX,LSD,NY,FCHAR(4:4))

C                OUTPUT REAL IMAGE	   
                 CALL WRITEV(LUN2,QA,LSD,NY,NX,NY,1)
              ENDIF 

	   ELSE
C             VOLUME
              CALL PW3SR(QA,NX,NY,NZ,FCHAR(4:4))

C             OUTPUT REAL VOLUME	   
              CALL WRITEV(LUN2,QA,LSD,NY,NX,NY,NZ)
           ENDIF


        ELSEIF (IFORMIN > 0)  THEN
C          REAL INPUT FOR ON DISK VERSION NOT SUPPORTED
           CALL ERRT(101,'DISK VERSION NEEDS FOURIER INPUT',NE)
           GOTO 999

	ELSE
C          ON DISK VERSION, ANCIENT LEGACY VERSION
           WRITE(NOUT,*)' ** WARNING: SLOW ON-DISK VERSION USED.'

	   IF (IFORM == 1)  THEN
C             IMAGE
	      CALL PW2SDR(LUN1,LUN2,NX,NY,FCHAR(4:4))
	   ELSE
C             VOLUME
	      CALL PW3SDR(LUN1,LUN2,NX,NY,NZ,FCHAR(4:4))
	   ENDIF

	ENDIF

999     CONTINUE
	CLOSE(LUN1)
	CLOSE(LUN2)
        DEALLOCATE(QA)  
      
        END
@


1.23
log
@GPL_2010
@
text
@d3 2
a4 2
C    FOUR1B.  
C                                   OPFILEC          FEB 03 ARDEAN LEITH    
a5 1
C	
d10 1
a10 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d28 1
a28 5
C  PURPOSE: CALCULATES POWER SPECTRUM
C
C IMAGE_PROCESSING_ROUTINE
C
C    ---------------- POWER SPECTRUM ------------------------ 'PW'
d35 1
d40 1
a41 1
        COMMON /COMMUN/ FILNAM
d44 5
a48 1
	DATA LUN1,LUN2/21,22/
d52 2
d55 1
a55 1
	CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
d60 7
a66 5
        NSLICE = MAX0(1,NSLICE)
	IFI=IFORM
        IF (IFORM.EQ.1)  THEN
           IF(MOD(NSAM,2).EQ.0)  THEN
              LS=NSAM+2
d68 1
a68 1
              LS=NSAM+1
d70 1
a70 1
           IRL=NSAM
d72 4
a75 3
        ELSEIF (IFORM.EQ.3)  THEN
           IF(MOD(NSAM,2).EQ.0)  THEN
              LS=NSAM+2
d77 1
a77 1
              LS=NSAM+1
d79 1
a79 1
           IRL=NSAM
d81 6
a86 5
        ELSEIF (IFORM.EQ.-11)  THEN
           IFORM=1
           LS=NSAM
           IRL=NSAM
           NSAM=NSAM-1
d88 6
a93 5
        ELSEIF (IFORM.EQ.-12)  THEN
           IFORM=1
           LS=NSAM
           IRL=NSAM
           NSAM=NSAM-2
d95 6
a100 5
        ELSEIF (IFORM.EQ.-21)  THEN
           IFORM=3
           LS=NSAM
           IRL=NSAM
           NSAM=NSAM-1
d102 6
a107 5
        ELSEIF(IFORM.EQ.-22)  THEN
           IFORM=3
           LS=NSAM
           IRL=NSAM
           NSAM=NSAM-2
d110 1
a110 1
           CALL ERRT(2,'FT',NE)
d115 1
d117 1
a117 1
	CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'N',IFORM,NSAM,NROW,NSLICE,
d121 2
a122 5
 	ALLOCATE (QA(LS,NROW,NSLICE), STAT=IRTFLG)
        IF (IRTFLG .EQ. 0) THEN 
          
	   CALL READV(LUN1,QA,LS,NROW,IRL,NROW,NSLICE)
	   CLOSE(LUN1)
d124 9
a132 5
	   IF (IFI .GT. 0) THEN
C             REAL INPUT 2D & 3D
	      INV=+1
              IF (NSLICE.EQ.1)  THEN
	         CALL  FMRS_2(QA,NSAM,NROW,INV)
d134 1
a134 1
	         CALL  FMRS_3(QA,NSAM,NROW,NSLICE,INV)
d136 3
a138 6
	      IF (INV.EQ.0)  THEN
                 CALL  ERRT(38,'PW',NE)
                 CLOSE(LUN1)
                 CLOSE(LUN2)
                 DEALLOCATE (QA)                   
                 RETURN
d142 17
a158 2
           IF (NSLICE.EQ.1)  THEN
              CALL PW2SR(QA,NSAM,NROW,FCHAR(4:4))
d160 5
a164 1
              CALL PW3SR(QA,NSAM,NROW,NSLICE,FCHAR(4:4))
a165 3
	   
           CALL WRITEV(LUN2,QA,LS,NROW,NSAM,NROW,NSLICE)
	   CLOSE(LUN2)
d167 2
a168 1
        ELSEIF(IFI.GT.0)  THEN
d170 2
a171 5
           CALL ERRT(6,'PW',NE)
           CLOSE(LUN1)
           CLOSE(LUN2)
           DEALLOCATE (QA)   
           RETURN
d174 1
a174 1
C          ON DISK VERSION
d177 3
a179 2
	   IF (IFORM.EQ.1)  THEN
	      CALL  PW2SDR(LUN1,LUN2,NSAM,NROW,FCHAR(4:4))
d181 2
a182 1
	      CALL  PW3SDR(LUN1,LUN2,NSAM,NROW,NSLICE,FCHAR(4:4))
a184 2
	   CLOSE(LUN1)
	   CLOSE(LUN2)
d187 5
a191 1
        DEALLOCATE (QA)        
@


1.22
log
@GPL License fixed
@
text
@a7 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d9 5
a13 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d15 1
a15 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.21
log
@HRI GPL License used
@
text
@a7 2
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK        **
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK        *
d11 1
a11 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a30 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND     *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.  *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR   *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR*
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                          *
@


1.20
log
@opfilec
@
text
@d8 1
d10 24
@


1.19
log
@adapted to dynamical memory allocation
@
text
@d3 2
a4 1
C    FOUR1B.FOR
d21 2
a22 1
C        1         2         3         4         5         6         7
d27 1
a27 1
C ----------------------- POWER SPECTRUM ------------------------ 'PW'
d29 1
a29 1

d33 2
a35 3
        COMMON /COMMUN/ FILNAM
        CHARACTER *81 FILNAM 
        CHARACTER *1  NULL 
d37 1
a37 1
        NULL   = CHAR(0)
d40 6
a45 7
	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &		   IDUM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0)  THEN
           CALL ERRT(4,'PW',NE)
           RETURN
        ENDIF
C    FOURIER INPUT 2D & 3D
d48 1
a48 1
        IF(IFORM.EQ.1)  THEN
d56 1
a56 1
        ELSEIF(IFORM.EQ.3)  THEN
d64 1
a64 1
        ELSEIF(IFORM.EQ.-11)  THEN
d70 1
a70 1
        ELSEIF(IFORM.EQ.-12)  THEN
d76 1
a76 1
        ELSEIF(IFORM.EQ.-21)  THEN
d93 5
a97 7
	CALL OPFIL(.TRUE.,FILNAM,LUN2,'N',NSAM,NROW,NSLICE,
     &		       IDUM,'OUTPUT',.FALSE.,IRTFLG)
	IF (IRTFLG .NE. 0)  THEN
           CALL ERRT(4,'PW',NE)
           CLOSE(LUN1)
           RETURN
        ENDIF
d100 1
a100 1
        IF (IRTFLG.EQ.0) THEN 
d105 1
a105 1
	   IF(IFI .GT. 0) THEN
d108 1
a108 1
              IF(NSLICE.EQ.1)  THEN
d113 1
a113 1
	      IF(INV.EQ.0)  THEN
d122 1
a122 1
           IF(NSLICE.EQ.1)  THEN
d138 1
d141 3
a143 3
           WRITE(NOUT,*)
     &           ' ** WARNING: SLOW ON-DISK VERSION USED.'
	   IF(IFORM.EQ.1)  THEN
d148 1
d152 1
@


1.18
log
@SP_F90 removed
@
text
@d18 4
d24 1
a24 1
	SUBROUTINE FOUR1B(MAXMEM)
a26 1
	COMMON	BUF(1)
a27 3
        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: Q
d29 3
a31 1
        LOGICAL      RUNTIME
d46 48
a93 48
          NSLICE = MAX0(1,NSLICE)
	  IFI=IFORM
          IF(IFORM.EQ.1)  THEN
                IF(MOD(NSAM,2).EQ.0)  THEN
                LS=NSAM+2
                ELSE
                LS=NSAM+1
                ENDIF
		IRL=NSAM
		MEMNEED=LS*NROW
          ELSEIF(IFORM.EQ.3)  THEN
                IF(MOD(NSAM,2).EQ.0)  THEN
                LS=NSAM+2
                ELSE
                LS=NSAM+1
                ENDIF
		IRL=NSAM
		MEMNEED=LS*NROW*NSLICE
          ELSEIF(IFORM.EQ.-11)  THEN
		IFORM=1
                LS=NSAM
		IRL=NSAM
                NSAM=NSAM-1
		MEMNEED=LS*NROW
          ELSEIF(IFORM.EQ.-12)  THEN
		IFORM=1
                LS=NSAM
		IRL=NSAM
                NSAM=NSAM-2
		MEMNEED=LS*NROW
          ELSEIF(IFORM.EQ.-21)  THEN
		IFORM=3
                LS=NSAM
		IRL=NSAM
                NSAM=NSAM-1
		MEMNEED=LS*NROW*NSLICE
          ELSEIF(IFORM.EQ.-22)  THEN
		IFORM=3
                LS=NSAM
		IRL=NSAM
                NSAM=NSAM-2
		MEMNEED=LS*NROW*NSLICE
          ELSE
                CALL ERRT(2,'FT',NE)
		CLOSE(LUN1)
                RETURN
          ENDIF
	  CALL OPFIL(.TRUE.,FILNAM,LUN2,'N',NSAM,NROW,NSLICE,
d95 29
a123 25
	      IF (IRTFLG .NE. 0)  THEN
              CALL ERRT(4,'PW',NE)
              CLOSE(LUN1)
              RETURN
              ENDIF
c             buf(1) = 999
c             write(6,*) 'buf(1):',buf(1)

      CALL CHKMEM(MEMNEED,BUF,MAXMEM,RUNTIME,IPQ,IRTFLG)
	IF(IRTFLG.EQ.0)  THEN

          Q = >IPQ

	  IB=1
	  DO   K=1,NSLICE
	  DO   J=1,NROW
	  NR=J+(K-1)*NROW
	  CALL  REDLIN(LUN1,Q(IB),IRL,NR)
	  IB=IB+LS
	  ENDDO
	  ENDDO
	  CLOSE(LUN1)
	  IF(IFI .GT. 0) THEN
C     REAL INPUT 2D & 3D
	   INV=+1
d125 1
a125 1
	   CALL  FMRS_2(Q(1),NSAM,NROW,INV)
d127 6
a132 25
	   CALL  FMRS_3(Q(1),NSAM,NROW,NSLICE,INV)
	   ENDIF
	   IF(INV.EQ.0)  THEN
		CALL  ERRT(38,'PW',NE)
		CLOSE(LUN1)
		CLOSE(LUN2)
		RETURN
	   ENDIF
	  ENDIF
          IF(NSLICE.EQ.1)  THEN
           CALL PW2S(Q(1),NSAM,NROW,FCHAR(4:4))
	  ELSE
           CALL PW3S(Q(1),NSAM,NROW,NSLICE,FCHAR(4:4))
          ENDIF
	  IB=1
	  DO    K=1,NSLICE
	  DO    J=1,NROW
	  NR=J+(K-1)*NROW
	  CALL  WRTLIN(LUN2,Q(IB),NSAM,NR)
	  IB=IB+LS
	  ENDDO
	  ENDDO
	  CLOSE(LUN1)
	  CLOSE(LUN2)
	IF(RUNTIME)	CALL ALLOCIT(0,RUNTIME,IPQ,'PW',IRTFLG)
d134 6
a139 5
C  REAL INPUT FOR ON DISK VERSION NOT SUPPORTED
              CALL ERRT(6,'PW',NE)
              CLOSE(LUN1)
              CLOSE(LUN2)
              RETURN
d141 12
a152 21
C  ON DISK VERSION
	MEMNEED=LS+NSAM
      CALL CHKMEM(MEMNEED,BUF,MAXMEM,RUNTIME,IPQ,IRTFLG)
	 IF(IRTFLG.EQ.0)  THEN

          Q = >IPQ

	  IF(IFORM.EQ.1)  THEN
	  CALL  PW2SD(LUN1,LUN2,Q,NSAM,NROW,FCHAR(4:4))
	  ELSE
	  CALL  PW3SD(LUN1,LUN2,Q,NSAM,NROW,NSLICE,FCHAR(4:4))
	  ENDIF
	  CLOSE(LUN1)
	  CLOSE(LUN2)
	IF(RUNTIME)	CALL ALLOCIT(0,RUNTIME,IPQ,'PW',IRTFLG)
	 ELSE
              CALL ERRT(6,'PW',NE)
              CLOSE(LUN1)
              CLOSE(LUN2)
	 ENDIF
        ENDIF
@


1.17
log
@*** empty log message ***
@
text
@d24 1
a24 1
#ifdef SP_F90
d28 1
a28 4
#else
        DIMENSION	Q(1)
	POINTER (IPQ,Q)
#endif
d103 3
a105 3
#ifdef SP_F90
         Q = >IPQ
#endif
d157 3
a159 3
#ifdef SP_F90
         Q = >IPQ
#endif
@


1.16
log
@q(1) not q
@
text
@a36 1
CNO_SAVE		
a104 1
c             write(6,*) 'buf(1)b:',buf(1)
a108 3
c             write(6,*) 'buf(1)b:',buf(1)
c             write(6,*) 'ipq(1):',ipq(1)
c             write(6,*) 'q(1):',q(1)
@


1.15
log
@*** empty log message ***
@
text
@d102 3
d106 1
d111 3
d127 1
a127 1
	   CALL  FMRS_2(Q,NSAM,NROW,INV)
d129 1
a129 1
	   CALL  FMRS_3(Q,NSAM,NROW,NSLICE,INV)
d139 1
a139 1
           CALL PW2S(Q,NSAM,NROW,FCHAR(4:4))
d141 1
a141 1
           CALL PW3S(Q,NSAM,NROW,NSLICE,FCHAR(4:4))
@


1.14
log
@f90 alloc
@
text
@a23 1
        DIMENSION	Q(1)
d29 1
d31 1
a32 1
#endif
@


1.13
log
@R removed
@
text
@d25 5
d32 1
d104 3
d158 3
@


1.12
log
@*** empty log message ***
@
text
@d35 1
a35 1
	CALL OPFIL(.TRUE.,FILNAM,LUN1,'R',NSAM,NROW,NSLICE,
@


1.11
log
@error added in pw
@
text
@d99 2
a100 2
	  DO  1  K=1,NSLICE
	  DO  1  J=1,NROW
d103 3
a105 1
1	  IB=IB+LS
d128 2
a129 2
	  DO  2  K=1,NSLICE
	  DO  2  J=1,NROW
d132 3
a134 1
2	  IB=IB+LS
@


1.10
log
@malloc
@
text
@d113 6
@


1.9
log
@IFORM changed
@
text
@d22 4
a25 5
        INCLUDE 'CMBLOCK.INC' 
        COMMON       BUF(1)
        DIMENSION    Q(1)
#ifdef SP_ALLOC
        POINTER      (IPQ,Q) 
a26 3
#else
        EQUIVALENCE	(Q,BUF)
#endif
d96 2
a97 11
#ifdef SP_ALLOC
c  probably wrong !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 	  IF(MEMNEED.LT.MAXMEM)  THEN
	  RUNTIME=.TRUE.
	  ELSE
          CALL ALLOCIT(MEMNEED,RUNTIME,IPQ,'FT',IRTFLG)
	  ENDIF
	IF(RUNTIME)  THEN
#else		
 	IF(MEMNEED.LT.MAXMEM)  THEN
#endif
d127 1
d137 2
a138 11
#ifdef SP_ALLOC
c  probably wrong !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 	 IF(MEMNEED.LT.MAXMEM)  THEN
	 RUNTIME=.TRUE.
	 ELSE
         CALL ALLOCIT(MEMNEED,RUNTIME,IPQ,'FT',IRTFLG)
	 ENDIF
	 IF(RUNTIME)  THEN
#else		
 	 IF(MEMNEED.LT.MAXMEM)  THEN
#endif
d146 1
@


1.8
log
@new version
@
text
@d40 1
a40 1
     &		   IFORM,'INPUT',.TRUE.,IRTFLG)
d94 1
a94 1
     &		       IFORM,'OUTPUT',.FALSE.,IRTFLG)
@


1.7
log
@q doubley defined
@
text
@a0 1

a4 1
C    THIS FILE WAS CREATED BY THE BREAKUP OF FOUR1.F      ml 10/23/95
d16 1
a16 1
C  PURPOSE:  FINDS POWER SPECTRUM
a20 1
	
a21 1

d23 8
a30 3
	
        COMMON ADUM(80),Q(1)

a31 1

d34 2
a35 3

	DATA LUN1,LUN2/55,56/

a36 1

a38 1

d41 47
a87 22
	IF (IRTFLG .NE. 0) GOTO 999

	IF (IFORM .GT. 0) THEN
          IF (IFORM.EQ.1)  THEN
	  
C           REAL INPUT 2D
            IF ((NSAM+1)*NROW .GT. MAXMEM)  THEN
              CALL  ERRT(6,'FOUR1 ',NE)
              CLOSE(LUN1)
              RETURN
            ENDIF
            IFORM = 1
	    
C           2D POWER SPECTRUM IS TRANSPOSED !
	    CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NROW,NSAM,NSLICE,
     &		       IFORM,'OUTPUT',.FALSE.,IRTFLG)
	    IF (IRTFLG .NE. 0) GOTO 999

            CALL PSICMR(LUN1,LUN2,Q,Q(1+NSAM*NROW),
     &                  NSAM,NROW,FCHAR(4:4))
            GOTO 999

d89 2
a90 30
	  
C            NO PW FOR REAL INPUT 3D
             CALL ERRT(2,'FOUR1 ',NE)
             GOTO 999
          ENDIF
	ENDIF
	
C       FOURIER INPUT 2D & 3D
        NSLICE = MAX0(1,NSLICE)
        IFI    = IFORM
        IF (NSLICE .EQ. 1)  THEN
           IFORM = 1
        ELSE
           IFORM = 3
        ENDIF
        IF (NSLICE .EQ. 1)  THEN
	
C         FOURIER INPUT 2D
          IF (IFI.EQ.-11 .OR. IFI.EQ.-12) NSAM=NSAM+IFI+10

C         PS FOR 2-D HAS TRANSPOSED FORMAT  !!!!!!!!!!!!!!
	  CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NROW,NSAM,NSLICE,
     &		     IFORM,'OUTPUT',.TRUE.,IRTFLG)
	  IF (IRTFLG .NE. 0) GOTO 999
          IF (IFI .EQ. -11 .OR. IFI .EQ. -12)  THEN
	  
C            MIXED-RADIX FOURIER 2D INPUT
             IF ((NSAM)*NROW+MAX0(NSAM,NROW) .GT. MAXMEM)  THEN
                CALL  ERRT(6,'FOUR1 ',NE)
                CLOSE(LUN1)
a91 10
             ENDIF
             CALL  INTFN2(Q,NSAM,NROW,Q(1+NSAM*NROW),LUN1)
             MM = -1
             CALL PSICMR(MM,LUN2,Q,Q(1+NSAM*NROW),
     &                  NSAM,NROW,FCHAR(4:4))
          ELSE
	  
C            POWER-OF-TWO FOURIER 2D INPUT
             CALL PSQOD_2D(LUN1,LUN2,Q,Q(NSAM+1),
     &                     NSAM,NROW,FCHAR(4:4))
d93 38
a130 31
        ELSE
	
C         POWER-OF-TWO FOURIER 3D INPUT
	  CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM,NROW,NSLICE,
     &		     IFORM,'OUTPUT',.FALSE.,IRTFLG)
	  IF (IRTFLG .NE. 0) GOTO 999
          IF (NSAM*NROW*NSLICE .GT. MAXMEM)  THEN
	  
C           POWER-OF-TWO FOURIER 3D INPUT - HAS TO BE DONE ON DISK
            K=2*NROW*NSLICE+1
            CALL PS_OD_3D(LUN1,LUN2,Q,Q(K),Q(K+NSAM),Q(K+2*NSAM),
     &                     Q(K+3*NSAM),Q(K+4*NSAM),Q(K+5*NSAM),
     &                     Q(K+6*NSAM),Q(K+7*NSAM),NSAM,NROW,
     &                     NSLICE,FCHAR(4:4))
          ELSE
	  
C           POWER-OF-TWO FOURIER 3D INPUT - FITS INTO THE MEMORY
            DO J = 1, NSLICE
               DO  I = 1, NROW
                  L = (J -1)*NROW + I
                  CALL REDLIN(LUN1,Q(1+((I-1)+(J-1)*NROW)*NSAM),NSAM,L)
               ENDDO
            ENDDO
            CALL PS_IC_3D(Q,NSAM,NROW,NSLICE,FCHAR(4:4))
            DO  J = 1, NSLICE
               DO  I = 1, NROW
                  L = (J - 1)*NROW + I
                  CALL WRTLIN(LUN2,Q(1+((I-1)+(J-1)
     &                           *NROW)*NSAM),NSAM,L)
               END DO
            END DO
d132 40
a172 8
        CLOSE(LUN2)
        GOTO 999
	

999     CLOSE(LUN1)
        CLOSE(LUN2)

        RETURN
a173 1
	
@


1.6
log
@part of earlier four1b
@
text
@a29 1
        DIMENSION     Q(1)
@


1.5
log
@cosmetic
@
text
@d6 1
a6 3
C    12/22/94
C    THIS FILE AND FOUR1A.F WERE CREATED BY THE BREAKUP OF FOUR1.F
C    ml 10/23/95
d18 2
d22 3
a24 1
	SUBROUTINE FOUR1B(MAXMEM,IFUNC)
a26 23
	INTEGER MAXMEM,IFUNC 
CNO_SAVE

2       GOTO (700,800,900,900,1100,1100),IFUNC

	WRITE(NOUT,*) 'ERROR: IFUNC > 6 IN FOUR1B.F'
	RETURN

C	'EF' : EXTRACT FOURIER :   NOT SUPPORTED
700     CALL FOUR1B_EF
        RETURN
 
C       'PW' : POWER SPECTRUM
800     CALL FOUR1B_PW(MAXMEM)
        RETURN

C	'RF' : R-FACTOR & 'CF' : CONSTRUCT FOURIER
900     CALL FOUR1B_RF(MAXMEM,IFUNC)
        RETURN

C       'GF' : GENERAL FILTER & 'RD' : REDUCE TRANSFORM
1100    CALL FOUR1B_GF(IFUNC)
        RETURN
d28 1
a28 1
        END
d30 2
a31 1
c ------------------------------------------------------------ 'EF'
a32 9
        SUBROUTINE FOUR1B_EF
	
        INCLUDE 'CMBLOCK.INC' 
	
        COMMON ADUM(80),BUF(1)
        COMMON /COMMUN/ FILNAM
        COMMON /OUTP_P/  NOUTT
        DIMENSION     Q(1)
        EQUIVALENCE   (Q,BUF)
a35 44
        NULL   = CHAR(0)
        IC     = 13
        NSLICE = 1
        INFLUN = 2
        IFOUND = 1
        NE     = 0
	

C	'EF' : EXTRACT FOURIER :   NOT SUPPORTED
C	EXTRACTS CENTRAL SECTION FROM 3-D FOURIER UNDER ARBITRARY ANGLES.
700	CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NSLICE,
     &		   IFORM,'INPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 999
        IF (IFORM.NE.-3) GOTO 145
        IFORM = -1
	CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM,NROW,1,
     &		   IFORM,'OUTPUT',.TRUE.,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 999
        CALL CSECT(LUN1,LUN2,NSAM,NROW,NSLICE)
        CLOSE(LUN2)
        GOTO 999

145     CALL ERRT(2,'FOUR1 ',NE)
        GOTO 999

999     CLOSE(LUN1)
        CLOSE(LUN2)
        FCHAR(1:1) = ';'
        END
	
	
C ------------------------------------------------------------- 'PW'

        SUBROUTINE FOUR1B_PW(MAXMEM)		

        INCLUDE 'CMBLOCK.INC' 
	INTEGER MAXMEM
	
        COMMON ADUM(80),BUF(1)
        COMMON /COMMUN/ FILNAM
        DIMENSION     Q(1)
        EQUIVALENCE   (Q,BUF)
        CHARACTER *81 FILNAM 
        CHARACTER *1  NULL 
a38 5
        IC     = 13
        NSLICE = 1
        INFLUN = 2
        IFOUND = 1
        NE     = 0
a39 1
C       'PW' : POWER SPECTRUM
a42 2
800     CALL  CHKINPQ('LP  $',FCHAR(4:),ICALL1)
        IF (ICALL1 .EQ. 2) GOTO 999
d48 1
a48 1
          IF(IFORM.EQ.1)  THEN
d58 1
a58 1
C            2D POWER SPECTRUM IS TRANSPOSED !
d66 1
d69 3
a71 2
C           NO PW FOR REAL INPUT 3D
            GOTO 145
d79 1
a79 1
          IFORM = 1
d81 1
a81 1
          IFORM = 3
d94 9
a102 9
C           MIXED-RADIX FOURIER 2D INPUT
            IF ((NSAM)*NROW+MAX0(NSAM,NROW) .GT. MAXMEM)  THEN
              CALL  ERRT(6,'FOUR1 ',NE)
              CLOSE(LUN1)
              RETURN
            ENDIF
            CALL  INTFN2(Q,NSAM,NROW,Q(1+NSAM*NROW),LUN1)
            MM = -1
            CALL PSICMR(MM,LUN2,Q,Q(1+NSAM*NROW),
d106 2
a107 2
C           POWER-OF-TWO FOURIER 2D INPUT
            CALL PSQOD_2D(LUN1,LUN2,Q,Q(NSAM+1),
d128 5
a132 5
              DO  I = 1, NROW
                L = (J -1)*NROW + I
                CALL REDLIN(LUN1,Q(1+((I-1)+(J-1)*NROW)*NSAM),NSAM,L)
              END DO
            END DO
d135 3
a137 3
              DO  I = 1, NROW
                L = (J - 1)*NROW + I
                CALL WRTLIN(LUN2,Q(1+((I-1)+(J-1)
d139 1
a139 1
              END DO
a145 2
145     CALL ERRT(2,'FOUR1 ',NE)
        GOTO 999
a148 5
        FCHAR(1:1) = ';'
        END
	
	
C ------------------------------------------------------------- 'RF'
d150 1
a150 109
        SUBROUTINE FOUR1B_RF(MAXMEM,IFUNC)	

        INCLUDE 'CMBLOCK.INC' 
	INTEGER  IFUNC 
	
        COMMON ADUM(80),BUF(1)
        COMMON /COMMUN/ FILNAM
        COMMON /OUTP_P/  NOUTT
        DIMENSION     Q(1)
        EQUIVALENCE   (Q,BUF)
        CHARACTER *81 FILNAM 
        CHARACTER *1  NULL 

        DATA  LUN1,LUN2,LUNF,LUN3/7,10,8,9/

        NULL   = CHAR(0)
        IC     = 13
        NSLICE = 1
        INFLUN = 2
        IFOUND = 1
        NE     = 0

	IF (IFUNC .EQ. 3) THEN	
C	  'RF' : R-FACTOR
C	  COMPUTES VARIOUS MEASURES OF PROXIMITY BETWEEN 2 GIVEN 
C         TRANSFORMS
900       IF (FCHAR(4:4).EQ.'3' .OR. FCHAR(5:5).EQ. '3') THEN
            CALL PR3D(MAXMEM)
          ELSEIF (FCHAR(4:5).EQ.'SN') THEN
            CALL SSNR(MAXMEM)
          ELSEIF (FCHAR(4:4).EQ.'M') THEN
            CALL RFACTSDO(MAXMEM)
          ELSE
            CALL RFACT(LUN1,LUN2)
          ENDIF
	  
	ELSE
C 	  'CF' : CONSTRUCT FOURIER
C	  CONSTRUCT FOURIER FILE FROM AMPLITUDES & PHASES OF REFLECTIONS.
1000      IF (FCHAR(4:4).EQ. '3')THEN
            CALL CREAF3(LUN1)
          ELSE
            CALL CREATF(LUN1)
          ENDIF
	END IF
         
        CLOSE(LUN1)
        CLOSE(LUN2)
        FCHAR(1:1) = ';'
        END
	
C --------------------------------------------------------------- 'GF'	

	SUBROUTINE FOUR1B_GF(IFUNC)	

        INCLUDE 'CMBLOCK.INC' 
	INTEGER IFUNC 
	
        COMMON ADUM(80),BUF(1)
        COMMON /COMMUN/ FILNAM
        COMMON /OUTP_P/  NOUTT
        DIMENSION     Q(1)
        EQUIVALENCE   (Q,BUF)
        CHARACTER *81 FILNAM 
        CHARACTER *1  NULL 

        DATA  LUN1,LUN2,LUNF,LUN3/7,10,8,9/

        NULL   = CHAR(0)
        IC     = 13
        NSLICE = 1
        INFLUN = 2
        IFOUND = 1
        NE     = 0

        IF(IFUNC .EQ. 5) THEN
C         'GF' : GENERAL FILTER
C         FOR QUASI-OPTICAL FOURIER FILTRATION 
1100	  CALL OPFIL(.TRUE.,FILNAM,LUN1,'O',NSAM,NROW,NDUM,
     &		   IFORM,'INPUT',.TRUE.,IRTFLG)
	  IF (IRTFLG .NE. 0) GOTO 999
          IF (IFORM .GE. 0) GOTO  145
          IF (FCHAR(4:4) .EQ. 'C') THEN
            CALL FILTM(LUN1,LUN2,LUNF,NSAM,NROW)
            CLOSE(LUN2)
            GOTO 999
          END IF
	  CALL OPFIL(.TRUE.,FILNAM,LUN2,'U',NSAM,NROW,NSLICE,
     &		   IFORM,'OUTPUT',.TRUE.,IRTFLG)
	  IF (IRTFLG .NE. 0) GOTO 999
          CALL FILTG(LUN1,LUN2,LUNF,NSAM,NROW)
          GOTO 999
        ELSE
C	  'RD' : REDUCE TRANSFORM
C	  GENERATES REDUCED FOURIER TRANSFORM FROM A MASKED FOURIER
1200      IF (FCHAR(4:4) .EQ. 'D' .OR. FCHAR(4:4) .EQ. 'L') THEN
            CALL REDUC1(LUN1)
          ELSE
            CALL REDUCE(LUN1)
          ENDIF
          GOTO 999
	END IF	
         
145     CALL ERRT(2,'FOUR1 ',NE)
        GOTO 999

999     CLOSE(LUN1)
        CLOSE(LUN2)
        FCHAR(1:1) = ';'
a151 1
	
@


1.4
log
@changed call to rfactsdo
@
text
@d1 1
d6 3
a8 3
C     12/22/94
C	this file and four1a.f were created by the breakup of four1.f
C	ml 10/23/95
a9 1
C
d33 1
a33 1
c	'EF' : Extract Fourier :   NOT SUPPORTED
d41 1
a41 1
c	'RF' : R-Factor & 'CF' : Construct Fourier
d45 1
a45 1
C       'GF' : General Filter & 'RD' : ReDuce transform
d51 2
a52 1
CCCC
d73 2
a74 2
c	'EF' : Extract Fourier :   NOT SUPPORTED
c	Extracts central section from 3-D Fourier under arbitrary angles.
d96 2
a97 1
CCCCC
d109 1
a109 1
	data lun1,lun2/55,56/
d119 3
a121 2
C       Fourier moduli from complex Fourier transform 
C       on disk for 2-D or 3-D pictures.
d234 1
a234 1
CCCC
d258 4
a261 4
	IF(IFUNC .EQ. 3) THEN	
c	  'RF' : R-Factor
C	  Computes various measures of proximity between 2 given 
C         transforms
d273 2
a274 2
c 	  'CF' : Construct Fourier
c	  construct Fourier file from amplitudes & phases of reflections.
d287 1
a287 1
	
d312 2
a313 2
C         'GF' : General Filter
C         for quasi-optical Fourier Filtration 
d329 2
a330 2
c	  'RD' : ReDuce transform
c	  Generates reduced Fourier transform from a masked Fourier
@


1.3
log
@corrected unit number
@
text
@d264 1
a264 1
            CALL RFACTSDO(LUN1,LUN2)
@


1.2
log
@remove excess lines and set variables
@
text
@d26 1
d107 1
@


1.1
log
@Initial revision
@
text
@d37 1
a37 1
800     CALL FOUR1B_PW
d41 1
a41 1
900     CALL FOUR1B_RF(IFUNC)
a83 3
       
130     CALL ERRT(4,'FOUR1 ',NE)
        GOTO 999
d95 1
a95 1
        SUBROUTINE FOUR1B_PW		
a219 4
         
130     CALL ERRT(4,'FOUR1 ',NE)
        GOTO 999

d231 1
a231 1
        SUBROUTINE FOUR1B_RF(IFUNC)	
@
