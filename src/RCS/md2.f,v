head	1.13;
access;
symbols
	pre_mrcs:1.13
	healthdept_2018:1.13
	pre_getangas:1.10
	GPL2010:1.10
	pre_GPL2010:1.9
	pre_var_equation:1.9
	pre_fftwrings:1.9
	pre_opfiles:1.9
	src:1.9
	best-code:1.9
	x-named-regs:1.9
	x:1.9
	v13-00:1.9
	pre_GPL:1.8
	prec_CA:1.8
	noindx:1.8
	Bproc:1.7
	oct21:1.3
	last77:1.3;
locks; strict;
comment	@c @;


1.13
date	2018.10.03.14.34.09;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2012.09.05.18.58.55;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2012.06.29.14.12.02;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2010.06.24.13.26.09;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.17.21.00.53;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.15.14.49.32;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.24.15.16.03;	author bimal;	state Exp;
branches;
next	1.6;

1.6
date	99.12.27.16.13.49;	author bimal;	state Exp;
branches;
next	1.5;

1.5
date	99.12.06.18.50.11;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.11.10.23.09.37;	author yuchen;	state Exp;
branches;
next	1.3;

1.3
date	97.10.10.17.47.24;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	96.01.16.16.02.38;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.03;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.13
log
@email_health_dept
@
text
@C ++********************************************************************
C                                                                      *
C  MD2                                                                                       *
C      MD2_NOLUN                                 AUG 2012 ARDEAN LEITH                                                                                *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2012  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      
C  MD2(X,NX,NY,L,K,MODE,LUNO)                                                                 *
C                                                                      
C  PURPOSE:  MEDIAN FILTER ON IMAGE                                                            *
C                                                                      
C  PARAMETERS: L = BOX SIZE
C              K = NUMBER OF PIXELS TO BE TESTED (BOX = L**2)                                                        
C                                                                      
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE  MD2(X, NX,NY,L,K,MODE, LUNO)

        INTEGER           :: NX,NY,L,K
        REAL              :: X(NX,NY)
        CHARACTER(LEN=1)  :: MODE
        INTEGER           :: LUNO

C       AUTOMATIC ARRAYS
        REAL              :: Y(NX)
        REAL              :: A(K)

        LH  = L/2
        K21 = K/2+1

        DO J=1,NY

           IF (MODE == 'C')  THEN
              DO I=1,NX
                 LB = 0

                 DO M=-LH,LH
                    IF (M .NE. 0)  THEN
                       LB    = LB + 1
                       A(LB) = X(I,MOD(J+M+NY-1,NY)+1)
                       LB    = LB + 1
                       A(LB) = X(MOD(I+M+NX-1,NX)+1,J)
                    ELSE
                       LB    = LB + 1
                       A(LB) = X(I,J)
                    ENDIF
                 ENDDO

                 CALL FSORT(A,K)

                 Y(I) = A(K21)
              ENDDO

           ELSE
              DO I=1,NX
                 LB = 0

                 DO MJ=-LH,LH
                    MJM = MOD(J+MJ+NY-1,NY)+1
                    DO MI=-LH,LH
                       LB    = LB + 1
                       A(LB) = X(MOD(I+MI+NX-1,NX)+1,MJM)
                    ENDDO
                 ENDDO

                 CALL FSORT(A,K)

                 Y(I) = A(K21)
              ENDDO
           ENDIF

           CALL  WRTLIN(LUNO,Y,NX,J)
        ENDDO

        END 



C ****************************** MD2_NOLUN *****************************

        SUBROUTINE  MD2_NOLUN(XIN,XOUT, NX,NY, L,K, MODE)

        IMPLICIT NONE
        INTEGER           :: NX,NY,L,K
        REAL              :: XIN (NX,NY)
        REAL              :: XOUT(NX,NY)
        CHARACTER(LEN=1)  :: MODE

C       AUTOMATIC ARRAYS
        REAL              :: Y(NX)
        REAL              :: A(K)

        INTEGER           :: LH,K21,J,I,LB,M,MJ,MJM,MI

        LH  = L / 2
        K21 = K / 2 + 1

        DO J=1,NY

           IF (MODE == 'C')  THEN
C             CROSS SHAPED BOX
              DO I=1,NX
                 LB = 0

                 DO M=-LH,LH
                    IF (M .NE. 0)  THEN
                       LB    = LB + 1
                       A(LB) = XIN(I, MOD(J+M+NY-1,NY)+1)

                       LB    = LB + 1
                       A(LB) = XIN(MOD(I+M+NX-1,NX)+1, J)
                    ELSE
                       LB    = LB + 1
                       A(LB) = XIN(I,J)
                    ENDIF
                 ENDDO

                 CALL FSORT(A,K)

                 Y(I) = A(K21)
              ENDDO
           ELSE
C             SQUARE SHAPED BOX
              DO I=1,NX
                 LB = 0

                 DO MJ=-LH,LH
                    MJM = MOD(J+MJ+NY-1,NY)+1

                    DO MI=-LH,LH
                       LB    = LB + 1
                       A(LB) = XIN(MOD(I+MI+NX-1,NX)+1, MJM)
                    ENDDO
                 ENDDO

                 CALL FSORT(A,K)

                 Y(I) = A(K21)
              ENDDO
           ENDIF

           XOUT(1:NX,J) = Y(1:NX)

        ENDDO

        END 
@


1.12
log
@md2_nolun added
@
text
@d11 1
a11 1
C=* Email: spider@@wadsworth.org                                        *
@


1.11
log
@added md2_nolun, nx,ny change
@
text
@d3 2
a4 2
C  MD2                                                                 *
C                                                                      *
d9 1
a9 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d26 1
a26 1
C                                                                      *
d28 1
a28 1
C                                                                      *
d30 4
a33 6
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C IMAGE_PROCESSING_ROUTINE                                             *
C                                                                      *
C        0         2         3         4         5         6         7 *
d37 6
a42 1
        SUBROUTINE  MD2(X,NX,NY,L,K,MODE,LUNO)
a43 1
        REAL,    DIMENSION(NX,NY) :: X
d45 2
a46 3
        REAL,    DIMENSION(NX)    :: Y
        REAL,    DIMENSION(K)     :: A
        CHARACTER(LEN=1)          :: MODE
d50 1
d52 2
a53 1
           IF (MODE .EQ. 'C')  THEN
d56 1
d70 1
d73 1
d77 1
d85 1
d87 1
d91 1
d94 1
d98 4
a101 2
        !           md2_nolun(bufwork1,bufwork2, nx,ny, 5,25,'B')
        SUBROUTINE  MD2_NOLUN(X,XOUT, NX,NY, L,K,MODE)
d104 4
a107 4
        INTEGER                   :: NX,NY,L,K
        REAL,    DIMENSION(NX,NY) :: X
        REAL,    DIMENSION(NX,NY) :: XOUT
        CHARACTER(LEN=1)          :: MODE
d110 2
a111 2
        REAL,    DIMENSION(NX)    :: Y
        REAL,    DIMENSION(K)     :: A
d113 4
a116 3
        INTEGER                   :: lh,k21,j,i,lb,m,mj,mjm,mi
        LH  = L/2
        K21 = K/2+1
d121 1
d124 1
d128 2
a129 1
                       A(LB) = X(I,MOD(J+M+NY-1,NY)+1)
d131 1
a131 1
                       A(LB) = X(MOD(I+M+NX-1,NX)+1,J)
d134 1
a134 1
                       A(LB) = X(I,J)
d137 1
d139 1
d143 1
d146 1
d152 1
a152 1
                       A(LB) = X(MOD(I+MI+NX-1,NX)+1,MJM)
d155 1
d157 1
@


1.10
log
@GPL_2010
@
text
@d27 1
a27 1
C  MD2(X,NSAM,NROW,L,K,MODE,LUNO)                                                                 *
d39 1
a39 1
        SUBROUTINE  MD2(X,NSAM,NROW,L,K,MODE,LUNO)
d41 1
a41 1
        REAL,    DIMENSION(NSAM,NROW) :: X
d43 3
a45 3
        REAL,    DIMENSION(NSAM)      :: Y
        REAL,    DIMENSION(K)         :: A
        CHARACTER(LEN=1)              :: MODE
d49 1
a49 1
        DO J=1,NROW
d51 1
a51 1
              DO I=1,NSAM
d56 1
a56 1
                       A(LB) = X(I,MOD(J+M+NROW-1,NROW)+1)
d58 1
a58 1
                       A(LB) = X(MOD(I+M+NSAM-1,NSAM)+1,J)
d69 1
a69 1
              DO I=1,NSAM
d72 1
a72 1
                    MJM = MOD(J+MJ+NROW-1,NROW)+1
d75 1
a75 1
                       A(LB) = X(MOD(I+MI+NSAM-1,NSAM)+1,MJM)
d82 1
a82 1
           CALL  WRTLIN(LUNO,Y,NSAM,J)
d84 59
@


1.9
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.8
log
@removed arith. if
@
text
@d6 23
a28 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.7
log
@cosmetic
@
text
@d14 1
a14 1
C  MD2                                                                 *
d16 1
a16 1
C  PURPOSE:                                                            *
d28 5
a32 2
        DIMENSION   X(NSAM,NROW),Y(NSAM),A(K)
        CHARACTER*1  MODE
d34 20
a53 18
        LH=L/2
        K21=K/2+1
        DO    J=1,NROW
           IF(MODE.EQ.'C')  THEN
              DO    I=1,NSAM
                 LB=0
                 DO  102  M=-LH,LH
                    IF(M)  103,104,103
103                 LB=LB+1
                    A(LB)=X(I,MOD(J+M+NROW-1,NROW)+1)
                    LB=LB+1
                    A(LB)=X(MOD(I+M+NSAM-1,NSAM)+1,J)
                    GOTO  102
104                 LB=LB+1
                    A(LB)=X(I,J)
102              CONTINUE
                 CALL   FSORT(A,K)
                 Y(I)=A(K21)
d56 7
a62 7
              DO    I=1,NSAM
                 LB=0
                 DO    MJ=-LH,LH
                    MJM=MOD(J+MJ+NROW-1,NROW)+1
                    DO    MI=-LH,LH
                       LB=LB+1
                       A(LB)=X(MOD(I+MI+NSAM-1,NSAM)+1,MJM)
d65 2
a66 2
                 CALL   FSORT(A,K)
                 Y(I)=A(K21)
@


1.6
log
@adapted for dynamical memory allocation
@
text
@d34 31
a64 31
        IF(MODE.EQ.'C')  THEN
        DO    I=1,NSAM
        LB=0
        DO  102  M=-LH,LH
        IF(M)  103,104,103
103     LB=LB+1
        A(LB)=X(I,MOD(J+M+NROW-1,NROW)+1)
        LB=LB+1
        A(LB)=X(MOD(I+M+NSAM-1,NSAM)+1,J)
        GOTO  102
104     LB=LB+1
        A(LB)=X(I,J)
102     CONTINUE
        CALL   FSORT(A,K)
        Y(I)=A(K21)
        ENDDO
        ELSE
        DO    I=1,NSAM
        LB=0
        DO    MJ=-LH,LH
        MJM=MOD(J+MJ+NROW-1,NROW)+1
        DO    MI=-LH,LH
        LB=LB+1
        A(LB)=X(MOD(I+MI+NSAM-1,NSAM)+1,MJM)
        ENDDO
        ENDDO
        CALL   FSORT(A,K)
        Y(I)=A(K21)
        ENDDO
        ENDIF
        CALL  WRTLIN(LUNO,Y,NSAM,J)
@


1.5
log
@header
@
text
@d14 1
a14 1
C  MD2                                                                *
d20 2
d26 1
a26 1
	SUBROUTINE  MD2(X,Y,NSAM,NROW,L,A,K,MODE,LUNO)
d28 2
a29 2
	DIMENSION   X(NSAM,NROW),Y(NSAM),A(K)
	CHARACTER*1  MODE
d31 36
a66 36
	LH=L/2
	K21=K/2+1
	DO    J=1,NROW
	IF(MODE.EQ.'C')  THEN
	DO    I=1,NSAM
	LB=0
	DO  102  M=-LH,LH
	IF(M)  103,104,103
103	LB=LB+1
	A(LB)=X(I,MOD(J+M+NROW-1,NROW)+1)
	LB=LB+1
	A(LB)=X(MOD(I+M+NSAM-1,NSAM)+1,J)
	GOTO  102
104	LB=LB+1
	A(LB)=X(I,J)
102	CONTINUE
	CALL   FSORT(A,K)
	Y(I)=A(K21)
	ENDDO
	ELSE
	DO    I=1,NSAM
	LB=0
	DO    MJ=-LH,LH
	MJM=MOD(J+MJ+NROW-1,NROW)+1
	DO    MI=-LH,LH
	LB=LB+1
	A(LB)=X(MOD(I+MI+NSAM-1,NSAM)+1,MJM)
	ENDDO
	ENDDO
	CALL   FSORT(A,K)
	Y(I)=A(K21)
	ENDDO
	ENDIF
	CALL  WRTLIN(LUNO,Y,NSAM,J)
	ENDDO
	END	
@


1.4
log
@a
@
text
@d1 23
d25 1
@


1.3
log
@*** empty log message ***
@
text
@d4 1
a4 1
CNO_SAVE
@


1.2
log
@nosave
@
text
@d7 1
a7 1
	DO  100  J=1,NROW
d9 1
a9 1
	DO  101  I=1,NSAM
d22 2
a23 1
101	Y(I)=A(K21)
d25 1
a25 1
	DO  201  I=1,NSAM
d27 1
a27 1
	DO  202  MJ=-LH,LH
d29 1
a29 1
	DO  202  MI=-LH,LH
d31 3
a33 1
202	A(LB)=X(MOD(I+MI+NSAM-1,NSAM)+1,MJM)
d35 2
a36 1
201	Y(I)=A(K21)
d38 2
a39 1
100	CALL  WRTLIN(LUNO,Y,NSAM,J)
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
C
@
