head	1.20;
access;
symbols
	pre_getangas:1.18
	GPL2010:1.18
	pre_GPL2010:1.17
	pre_var_equation:1.17
	pre_fftwrings:1.17
	pre_opfiles:1.17
	src:1.17
	best-code:1.17
	x-named-regs:1.17
	x:1.17
	v13-00:1.17
	pre_GPL:1.15
	prec_CA:1.15
	noindx:1.14
	Bproc:1.13
	oct21:1.11
	last77:1.11;
locks; strict;
comment	@c @;


1.20
date	2014.11.25.13.36.53;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2013.01.07.15.21.22;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2010.06.24.13.25.24;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.17.20.38.07;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.17.18.28.31;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.19.14.55.48;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2002.03.11.14.08.28;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.01.06.17.11.24;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.11.10.23.09.13;	author yuchen;	state Exp;
branches;
next	1.11;

1.11
date	99.02.04.14.38.19;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	98.01.26.15.40.23;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	97.10.06.17.03.51;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	96.07.14.21.04.06;	author mladjadj;	state Exp;
branches;
next	1.7;

1.7
date	95.07.31.20.32.08;	author mladjadj;	state Exp;
branches;
next	1.6;

1.6
date	95.07.06.20.29.19;	author mladjadj;	state Exp;
branches;
next	1.5;

1.5
date	95.02.07.16.20.10;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	94.08.31.18.16.10;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	94.08.29.12.58.15;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.07.05.12.15.39;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.31.21.17.16;	author mladjadj;	state Exp;
branches;
next	;


desc
@calculate defocus and amplitude contrast by zhu j.
@


1.20
log
@cosmetic rewrite
@
text
@C++*********************************************************************
C
C DEFO001.F 
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C   DEFO001(NUM,NP,KP,NA,NSAM,SPMAX)
C
C   USING LEAST SQUARE METHOD TO DETERMINE DEFOCUS, AMPLITUDE CONTRAST
C   X(K,A)=PI*(0.5*CS*LAMBDA**3*K**4-DZ*LAMBDA*K**2)-OFFSET
C   X(K,A)=PI*(0.5*CS*LAMBDA**3*K**4-A1*LAMBDA*K**2)-A2
C
C       NUM: NUMBER OF IMAGES
C       NP(I): NUMBER OF MINIMUM IN EACH IMAGES
C       KP(I,J): ARRAY OF SP. FREQ. POINTS OF MINIMUM
C       NA(I,J): ARRAY OF ABBERATION
C       NSAM: IMAGE DIMENSION
C       SPMAX: MAX OF SP. FREQ.
C       NA: NUMBER OF ABBERATION IN UNIT OF PI
C       
C23456789012345678901234567890123456789012345678901234567890123456789012
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC*/

        SUBROUTINE DEFO001(NUM,NP,KP,NA,NSAM,SPMAX)

C       I DO NOT KNOW IF SAVE IS NEEDED FEB 99 al
        SAVE

        INCLUDE 'CMBLOCK.INC' 
        INCLUDE 'CMLIMIT.INC' 

        CHARACTER (LEN=MAXNAM) :: OUTNAME
        
        DIMENSION     NP(*)
        REAL          NA(20,20),KP(20,20)

        COMMON        C(20,20),B(20),Y1(10,10),Y2(10,10),A0(20),A1(20)
        DIMENSION     AM0(30),AM2(30),NM(30),XM(30)
        DIMENSION     F2(512),WEIGHT(20,10)

        REAL          KM,KS,KF,LAMBDA
        CHARACTER *1  CHO1,NULL

        DATA PI/3.141592654/

        AA0 = -100.0

        LUN2 = 10

C       INPUT EM PARAMETERS 
        WRITE(NOUT,*)' INPUT PARAMETERS OF IMAGES'
  
        A1(1) = 0

        DO I=2,NUM
           WRITE(NOUT,*) '#',I, '   IMAGE'
           CALL RDPRM(A1(I),NOT_USED,
     &            'DEFOCUS INTERVAL TO FIRST ONE [A]')
        ENDDO

        CALL RDPRM1S(LAMBDA,NOT_USED,'WAVELENGTH LAMBDA [A]',IRTFLG)

        CALL RDPRM1S(CS,NOT_USED,'SPHERICAL ABERRATION CS [MM]',IRTFLG)

        IF (CS < 0.0001) CS = 0.0001
        CS = CS * 1.0E07
        KM = SPMAX
        KS = KM / FLOAT(NSAM)

C       GET VALUE OF Y1   
        DO  I=1,NUM
           DO  J=1,NP(I)
              Y1(I,J)=PI*NA(I,J)
           ENDDO
        ENDDO

        DO  I=1,20
           A0(I) = 0
           B(I)  = 0
           DO  J=1,20
              C(I,J) = 0
           ENDDO
        ENDDO

        DO I=1,NUM
           DO J=1,NP(I)
              KF     = KP(I,J) * KS
              C(1,1) = C(1,1) - PI * (LAMBDA * KF**2)**2
              C(2,1) = C(2,1) - PI * LAMBDA * KF**2
              C(1,2) = C(1,2) - LAMBDA * KF**2
              C(2,2) = C(2,2) - 1.0
              B(1) = B(1) - (PI*(0.5 * CS * LAMBDA**3 * KF**4 -
     &                       A1(I) * LAMBDA * KF**2)-
     &                       Y1(I,J)) * (LAMBDA*KF**2)
              B(2) = B(2)-(PI*(0.5*CS*LAMBDA**3*KF**4 -
     &                       A1(I)*LAMBDA*KF**2) - Y1(I,J))
           ENDDO
        ENDDO

        CALL MATINV(C,2,DET)

        DO  I=1,2
           DO  J=1,2
             A0(I) = A0(I)+C(I,J)*B(J)
           ENDDO
        ENDDO

        A2 = A0(2)

        IF (A0(2) .GT. 0.3 .OR. A0(2) .LT. 0) THEN
C          USING THE DEEPEST GRADIENT PROGRAM 
C          CALCULATE THE WEIGHT OF EACH POINTS
           DO  I=1,NUM
              DO  J=1,NP(I)
                 KF = KP(I,J) * KS
                 WEIGHT(I,J) = PI*(2.*CS*LAMBDA**3*KF**3-2.*
     &                        (A0(1)+A1(I))*LAMBDA*KF)*2.*KS
              ENDDO
           ENDDO
     
           DO  K=1,30
              A0(1) = AA0
              A2    = FLOAT(K)*0.01

C             SET ITERATION STEP
              NSTEP = 0

C             CALCULATE VALUE OF Y2
              DO I=1,NUM
                 DO J=1,NP(I)
                    KF      = KP(I,J)*KS
                    Y2(I,J) = PI*(0.5*CS*LAMBDA**3*KF**4-(A0(1)+A1(I))*
     &                       LAMBDA*KF**2)-A2
                 ENDDO
              ENDDO

C             SET INITIAL VALUE X**2(X,A)=SUM((Y1(I)-Y2(I))**2) 
              X1 = 0
              DO  I=1,NUM
                 DO  J=1,NP(I)
                    X1=X1+(Y1(I,J)-Y2(I,J))**2/WEIGHT(I,J)**2
                 ENDDO
              ENDDO

C             CALCULATE THE VALUE OF Y2(I) 
999           DA0 = 0.001*A0(1)
              DA2 = 0.001*A2

              DO  I=1,NUM
                 X = A0(1)+0.1*DA0+A1(I)
                 DO  J=1,NP(I)
                    KF = KP(I,J)*KS
                    Y2(I,J) = PI*(0.5*CS*LAMBDA**3*KF**4 -
     &                        X*LAMBDA*KF**2)-A2
                 ENDDO
              ENDDO

C             CALCULATE DX**2/DA0   
              X2 = 0
              DO  I=1,NUM
                 DO  J=1,NP(I)
                    X2=X2+(Y1(I,J)-Y2(I,J))**2/WEIGHT(I,J)**2
                 ENDDO
              ENDDO

              DXA0 = (X2-X1)/(0.1*DA0)

C             CALCULATE DX**2/DA2 
              DO  I=1,NUM
                 X = A0(1) + A1(I)
                 DO  J=1,NP(I)
                    KF = KP(I,J)*KS
                 Y2(I,J) = PI*(0.5*CS*LAMBDA**3*KF**4-X*LAMBDA*KF**2)-
     &                   (A2+0.1*DA2)
                 ENDDO
              ENDDO

              X2 = 0
              DO  I=1,NUM
                 DO  J=1,NP(I)
                    X2 = X2+(Y1(I,J)-Y2(I,J))**2/WEIGHT(I,J)**2
                 ENDDO
              ENDDO

              DXA2 = (X2-X1)/(0.1*DA2)

C             CALCULATE THE SUM=SUM((DX**2/DAI*DAI)**2) */
              SUM   = SQRT((DXA0*DA0)**2+(DXA2*DA2)**2)
              A0(1) = A0(1)-DXA0*DA0**2/SUM
              A2    =  A2-DXA2*DA2**2/SUM

C             CRITERI FOR ITERATION 
              DO  I=1,NUM
                 X = A0(1)+A1(I)
                 DO  J=1,NP(I)
                    KF = KP(I,J)*KS
                 Y2(I,J)=PI*(0.5*CS*LAMBDA**3*KF**4-X*LAMBDA*KF**2)-A2
                 ENDDO
              ENDDO

              X2 = 0
              DO  I=1,NUM
                 DO  J=1,NP(I)
                    X2 = X2 + (Y1(I,J) - Y2(I,J))**2 / WEIGHT(I,J)**2
                 ENDDO
              ENDDO
              IF ((X1-X2) .LT. 0) THEN
                 A0(1) = A0(1) + 0.5 * DXA0 * DA0**2 / SUM
                 A2    = A2 + 0.5*DXA2*DA2**2/SUM

c                WRITE(NOUT,*) 'INITIAL A2=',FLOAT(K)*0.01,'  STEP',NSTEP
c                WRITE(NOUT,*) 'A0=',A0,'OFFSET(RAD)=',A2,'X**2=',X1
                 Q      = SIN(A2)/COS(A2)*100.
                 XM(K)  = X1
                 AM0(K) = A0(1)
                 AM2(K) = A2
                 NN     = INT(A2/0.01+0.5)
                 NM(NN) = NM(NN)+1
              ELSE
C                SET PARAMETERS FOR NEXT STEP */
                 X1    = X2
                 NSTEP = NSTEP+1
                 GOTO 999
              ENDIF
           ENDDO

C          FIND CONVERGE POINTS
           NN = 0
           DO I=1,30
              IF(NM(I) .GT. 5) NN = NN + 1
           ENDDO

           IF (NN .GT. 1) THEN
C             THERE ARE TWO CONVERGE POINTS
              X0 = 999999999.0
              DO I=1,30
                 IF(NM(I) .GT. 5 .AND. XM(I) .LT. X0) THEN
                    NN=I
                 X0 = XM(I)       
                 ENDIF
              ENDDO
           ELSE
C             THERE IS ONLY ONE CONVERGE POINT
              NN = 0
              DO I=1,30
                 IF (NM(I) .GT. NN .OR. (NM(I) .EQ. NN .AND. 
     &               XM(I) .LT. XM(NN))) NN=I
              ENDDO
           ENDIF

           A0(1) = AM0(NN)
           A2    = AM2(NN)
        ENDIF

        WRITE(NOUT,*)' DEFOCUS ARE [A]',(A0(1)+A1(I), I=1,NUM)

        WRITE(NOUT,140) A2
140     FORMAT('  AMPLITUDE CONTRAST:',F10.6)

C       GENERATE A FILTER FILE FROM CTF W/O ENVELOPE FUNCTION
C       GATE VALUE IS 0.08

        GATE = 0.08
        CALL RDPRMC(CHO1,NUMC,.TRUE.,
     &      'DO YOU WANT TO GENERATE A FILTER? (Y/N)',NULL,IRT)

        IF ( CHO1 .EQ. 'Y') THEN

            DO I=1,NUM
               X = A0(1)+A1(I)

               DO  J=1,NSAM
                  KF = FLOAT(J)*KS
                  X1 = PI*(0.5*CS*LAMBDA**3*KF**4-X*LAMBDA*KF**2)-A2
                  F1 = SIN(X1)
                  IF (F1 .GT. GATE) THEN
                     F2(J) = 1
                  ELSE
                     IF (F1 .LT. -1.* GATE) THEN
                        F2(J) = -1
                     ELSE
                        F2(J) = 0
                     ENDIF
                  ENDIF
               ENDDO

               IFORM = 1
               MAXIM = 0
               CALL OPFILEC(0,.TRUE.,OUTNAME,LUN2,'U',IFORM,NSAM,1,1,
     &               MAXIM,'OUTPUT',.FALSE.,IRTFLG)

               CALL WRTLIN(LUN2,F2,NSAM,1)

               CLOSE(LUN2)
            ENDDO
        ENDIF
                
        END
@


1.19
log
@CS_zero
@
text
@d32 1
a32 1
C	NUM: NUMBER OF IMAGES
d34 5
a38 5
C	KP(I,J): ARRAY OF SP. FREQ. POINTS OF MINIMUM
C	NA(I,J): ARRAY OF ABBERATION
C	NSAM: IMAGE DIMENSION
C	SPMAX: MAX OF SP. FREQ.
C	NA: NUMBER OF ABBERATION IN UNIT OF PI
d43 1
a43 3
	SUBROUTINE DEFO001(NUM,NP,KP,NA,NSAM,SPMAX)

 
d49 19
a67 1
	INCLUDE 'CMLIMIT.INC' 
d69 8
a76 21
        CHARACTER (LEN=MAXNAM) ::  OUTNAME
	
	DIMENSION NP(*)
	REAL      NA(20,20),KP(20,20)

        COMMON    C(20,20),B(20),Y1(10,10),Y2(10,10),A0(20),A1(20)
	DIMENSION AM0(30),AM2(30),NM(30),XM(30),F2(512),WEIGHT(20,10)

	REAL          KM,KS,KF,LAMBDA
	CHARACTER *1  CHO1,NULL

	DATA PI/3.141592654/

	AA0=-100.0
	LUN2=10
C....... INPUT EM PARAMETERS*/
	WRITE(NOUT,*)' INPUT PARAMETERS OF  IMAGES'
	a1(1)=0
	DO I=2,NUM
	   WRITE(NOUT,*) '#',I, '   IMAGE'
	   CALL RDPRM(A1(I),NOT_USED,
d78 50
a127 1
	ENDDO
d129 1
a129 40
	CALL RDPRM(LAMBDA,NOT_USED,'WAVELENGTH LAMBDA [A]')
	CALL RDPRM(CS,NOT_USED,'SPHERICAL ABERRATION CS[MM]')
           IF (CS < 0.0001)    CS = 0.0001
	CS=CS*1.0E07
	KM=SPMAX
	KS=KM/FLOAT(NSAM)
C.......GET VALUE OF Y1  */
	DO  I=1,NUM
	DO  J=1,NP(I)
	Y1(I,J)=PI*NA(I,J)
	ENDDO
	ENDDO
	do  i=1,20
	a0(i)=0
	b(i)=0
	do  j=1,20
	c(i,j)=0
	enddo
	enddo
	DO I=1,NUM
	DO J=1,NP(I)
	KF=KP(I,J)*KS
	C(1,1)=C(1,1)-PI*(LAMBDA*KF**2)**2
	C(2,1)=C(2,1)-PI*LAMBDA*KF**2
	C(1,2)=C(1,2)-LAMBDA*KF**2
	C(2,2)=C(2,2)-1.0
	B(1)=B(1)-(PI*(0.5*CS*LAMBDA**3*KF**4-a1(i)*lambda*kf**2)-
     &       Y1(I,J))* (LAMBDA*KF**2)
	B(2)=B(2)-(PI*(0.5*CS*LAMBDA**3*KF**4-a1(i)*lambda*kf**2)-
     &       Y1(I,J))
	ENDDO
	ENDDO
	CALL MATINV(C,2,DET)
	DO  I=1,2
	   DO  J=1,2
	      A0(I)=A0(I)+C(I,J)*B(J)
	      ENDDO
	   ENDDO
	a2=a0(2)
	IF (A0(2) .GT. 0.3 .OR. A0(2) .LT. 0) THEN
d132 7
a138 7
	DO  I=1,NUM
	DO  J=1,NP(I)
	KF=KP(I,J)*KS
	WEIGHT(I,J)=PI*(2.*CS*LAMBDA**3*KF**3-2.*
     &  (A0(1)+A1(I))*LAMBDA*KF)*2.*KS
	ENDDO
	ENDDO
d140 132
a271 112
	DO  K=1,30
	A0(1)=AA0
	A2=FLOAT(K)*0.01
C.......SET ITERATION STEP
	NSTEP=0
C........CALCULATE VALUE OF Y2
	DO  I=1,NUM
	DO  J=1,NP(I)
	KF=KP(I,J)*KS
	Y2(I,J)=PI*(0.5*CS*LAMBDA**3*KF**4-(A0(1)+A1(I))*
     &          LAMBDA*KF**2)-A2
	ENDDO
	ENDDO
C.......SET INITIAL VALUE X**2(X,A)=SUM((Y1(I)-Y2(I))**2) 
	X1=0
	DO  I=1,NUM
	DO  J=1,NP(I)
        X1=X1+(Y1(I,J)-Y2(I,J))**2/WEIGHT(I,J)**2
	ENDDO
	ENDDO
C........CALCULATE THE VALUE OF Y2(I) 
999	DA0=0.001*A0(1)
	DA2=0.001*A2
	DO  I=1,NUM
	X=A0(1)+0.1*DA0+A1(I)
	DO  J=1,NP(I)
	KF=KP(I,J)*KS
 	Y2(I,J)=PI*(0.5*CS*LAMBDA**3*KF**4-X*LAMBDA*KF**2)-A2
	ENDDO
	ENDDO
C........CALCULATE DX**2/DA0   

	X2=0
	DO  I=1,NUM
	DO  J=1,NP(I)
	X2=X2+(Y1(I,J)-Y2(I,J))**2/WEIGHT(I,J)**2
	ENDDO
	ENDDO
	DXA0=(X2-X1)/(0.1*DA0)
C........CALCULATE DX**2/DA2 */
 	DO  I=1,NUM
	X=A0(1)+A1(I)
	DO  J=1,NP(I)
	KF=KP(I,J)*KS
	Y2(I,J)=PI*(0.5*CS*LAMBDA**3*KF**4-X*LAMBDA*KF**2)-
     &          (A2+0.1*DA2)
	ENDDO
	ENDDO
	X2=0
	DO  I=1,NUM
	DO  J=1,NP(I)
	X2=X2+(Y1(I,J)-Y2(I,J))**2/WEIGHT(I,J)**2
	ENDDO
	ENDDO
	DXA2=(X2-X1)/(0.1*DA2)
C       CALCULATE THE SUM=SUM((DX**2/DAI*DAI)**2) */
	SUM=SQRT((DXA0*DA0)**2+(DXA2*DA2)**2)
	A0(1)=A0(1)-DXA0*DA0**2/SUM
        A2=A2-DXA2*DA2**2/SUM
C       CRITERI FOR ITERATION */
	DO  I=1,NUM
	X=A0(1)+A1(I)
	DO  J=1,NP(I)
        KF=KP(I,J)*KS
	Y2(I,J)=PI*(0.5*CS*LAMBDA**3*KF**4-X*LAMBDA*KF**2)-A2
	ENDDO
	ENDDO
	X2=0
	DO  I=1,NUM
	DO  J=1,NP(I)
	X2=X2+(Y1(I,J)-Y2(I,J))**2/WEIGHT(I,J)**2
	ENDDO
	ENDDO
	IF((X1-X2) .LT. 0) THEN
	  A0(1)=A0(1)+0.5*DXA0*DA0**2/SUM
	  A2=A2+0.5*DXA2*DA2**2/SUM
c	WRITE(NOUT,*) 'INITIAL A2=',FLOAT(K)*0.01,'  STEP',NSTEP
c	WRITE(NOUT,*) 'A0=',A0,'OFFSET(RAD)=',A2,'X**2=',X1
	  Q=SIN(A2)/COS(A2)*100.
	    XM(K)=X1
	    AM0(K)=A0(1)
	    AM2(K)=A2
	    NN=INT(A2/0.01+0.5)
	    NM(NN)=NM(NN)+1
	ELSE
C........SET PARAMETERS FOR NEXT STEP */
	  X1=X2
	  NSTEP=NSTEP+1
	  GOTO 999
	ENDIF
        ENDDO
C      FIND CONVERGE POINTS
	NN=0
	DO I=1,30
	IF(NM(I) .GT. 5) NN=NN+1
	ENDDO
	IF (NN .GT. 1) THEN
C         THERE ARE TWO CONVERGE POINTS
          X0=999999999.0
          DO I=1,30
          IF(NM(I) .GT. 5 .AND. XM(I) .LT. X0) THEN
           NN=I
           X0=XM(I)	
          ENDIF
          ENDDO
	ELSE
C         THERE IS ONLY ONE CONVERGE POINT
          NN=0
	  DO I=1,30
	     IF (NM(I) .GT. NN .OR. (NM(I) .EQ. NN .AND. 
     &           XM(I) .LT. XM(NN))) NN=I
	  ENDDO
d273 5
a277 7
	A0(1)=AM0(NN)
	A2=AM2(NN)
	ENDIF

	WRITE(NOUT,*)' DEFOCUS ARE [A]',(A0(1)+A1(I), I=1,NUM)
	WRITE(NOUT,140)a2
140	FORMAT(' AMPLITUDE CONTRAST=',F10.6)
d280 1
a280 1
C	GATE VALUE IS 0.08
d282 27
a308 24
	GATE=0.08
	CALL RDPRMC(CHO1,NUMC,.TRUE.,
     &      'DO YOU WANT TO GENERATE A FILTER?(Y/N)',NULL,IRT)
	IF ( CHO1 .EQ. 'Y'  .OR. CHO1 .EQ. 'Y') THEN
		DO  I=1,NUM
		X=A0(1)+A1(I)
	 	DO  J=1,NSAM
	 	KF=FLOAT(J)*KS
		X1=PI*(0.5*CS*LAMBDA**3*KF**4-X*LAMBDA*KF**2)-A2
		F1=SIN(X1)
		IF (F1 .GT. GATE) THEN
	  	 F2(J)=1
		ELSE
			IF (F1 .LT. -1.*GATE) THEN
		   		F2(J)=-1
			ELSE
		   		F2(J)=0
			ENDIF
		ENDIF
		ENDDO

		IFORM = 1
                MAXIM = 0
                CALL OPFILEC(0,.TRUE.,OUTNAME,LUN2,'U',IFORM,NSAM,1,1,
d310 8
a317 7
		CALL WRTLIN(LUN2,F2,NSAM,1)
		CLOSE(LUN2)
		ENDDO
	ENDIF
		
	RETURN
	END
@


1.18
log
@GPL_2010
@
text
@d78 2
a79 1
	CALL RDPRM(CS,NOT_USED,'SPHERICAL ABBERATION CS [MM]')
@


1.17
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.16
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a5 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
a29 1
C **************************************************************************
@


1.15
log
@opfilec
@
text
@d1 1
d6 1
d8 1
d10 24
d40 1
@


1.14
log
@nloop,iloop_removed
@
text
@d39 3
a49 1
	CHARACTER *81 OUTNAME
d60 2
a61 2
	WRITE(NOUT,*) '#',I, '   IMAGE'
	CALL RDPRM(A1(I),NOT_USED,
d64 3
a66 2
	CALL RDPRM(LAMBDA,NOT_USED,' WAVELENGTH LAMBDA [A]')
	CALL RDPRM(CS,NOT_USED,' SPHERICAL ABBERATION CS [MM]')
d258 2
a259 1
		IFORM=1
d261 1
a261 1
                CALL OPFIL(.TRUE.,OUTNAME,LUN2,'U',NSAM,1,1,
d266 2
a267 1
	ENDIF		
@


1.13
log
@overlength   lines shortened
@
text
@d59 1
a59 1
	CALL RDPRM(A1(I),NLOOP,ILOOP,
d62 2
a63 2
	CALL RDPRM(LAMBDA,NLOOP,ILOOP,' WAVELENGTH LAMBDA [A]')
	CALL RDPRM(CS,NLOOP,ILOOP,' SPHERICAL ABBERATION CS [MM]')
@


1.12
log
@a
@
text
@d3 1
a3 1
C DEFO001.FOR
d87 4
a90 3
	B(1)=B(1)-(PI*(0.5*CS*LAMBDA**3*KF**4-a1(i)*lambda*kf**2)-Y1(I,J))*
     &  (LAMBDA*KF**2)
	B(2)=B(2)-(PI*(0.5*CS*LAMBDA**3*KF**4-a1(i)*lambda*kf**2)-Y1(I,J))
d95 4
a98 4
	DO  J=1,2
	A0(I)=A0(I)+C(I,J)*B(J)
	ENDDO
	ENDDO
d100 3
a102 3
	IF(A0(2) .GT. 0.3 .OR. A0(2) .LT. 0) THEN
C   USING THE DEEPEST GRADIENT PROGRAM 
C......CALCULATE THE WEIGHT OF EACH POINTS
d120 2
a121 1
	Y2(I,J)=PI*(0.5*CS*LAMBDA**3*KF**4-(A0(1)+A1(I))*LAMBDA*KF**2)-A2
d155 2
a156 1
	Y2(I,J)=PI*(0.5*CS*LAMBDA**3*KF**4-X*LAMBDA*KF**2)-(A2+0.1*DA2)
d166 1
a166 1
C....... CALCULATE THE SUM=SUM((DX**2/DAI*DAI)**2) */
d170 1
a170 1
C........CRITERI FOR ITERATION */
@


1.11
log
@CNO_SAVE
@
text
@d33 1
a33 1
CNO_SAVE 
@


1.10
log
@f90 formating, used common blocks
@
text
@d33 5
@


1.9
log
@*** empty log message ***
@
text
@d3 1
a3 1
C $$ DEFO001.FOR
d14 1
a14 1
C   $$ DEFO001:
a28 1
C
a32 1
#ifdef SP_UNIX
a33 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
d36 9
a44 7
	real NA(20,20)
	REAL KP(20,20),c(20,20),b(20)
	REAL KM,KS,KF,LAMBDA
  	DIMENSION Y1(10,10),Y2(10,10),a0(20),A1(20)
	DIMENSION AM0(30),AM2(30),NM(30),XM(30)
	DIMENSION F2(512),WEIGHT(20,10)
	CHARACTER *81 OUTNAME, CHO1*1,NULL*1
d46 1
d54 2
a55 1
	CALL RDPRM(A1(I),NLOOP,ILOOP,' DEFOCUS INTERVAL TO FIRST ONE [A]$')
d57 2
a58 2
	CALL RDPRM(LAMBDA,NLOOP,ILOOP,' WAVELENGTH LAMBDA [A]$')
	CALL RDPRM(CS,NLOOP,ILOOP,' SPHERICAL ABBERATION CS [MM]$')
d209 1
a209 1
C   THERE IS ONLY ONE CONVERGE POINT
d212 2
a213 1
	  IF( NM(I) .GT. NN .OR. (NM(I) .EQ. NN .AND. XM(I) .LT. XM(NN))) NN=I
d218 1
a218 1
	endif
d223 1
a223 1
C
d226 1
a226 1
C
d229 1
a229 1
     &   'DO YOU WANT TO GENERATE A FILTER?(Y/N)$',NULL,IRT)
d247 4
a250 3
		iform=1
		CALL FILERD(OUTNAME,NLET,NULL,'OUTPUT',IRTFLG)
	        CALL OPENF(OUTNAME,LUN2,NSAM,1,'UNKNOWN',NF,1)
@


1.8
log
@add iform=1
@
text
@d64 2
a65 2
	DO 10 I=1,NUM
	DO 10 J=1,NP(I)
d67 3
a69 2
10	CONTINUE
	do 20 i=1,20
d72 1
a72 1
	do 20 j=1,20
d74 4
a77 3
20	continue
	DO 600 I=1,NUM
	DO 600 J=1,NP(I)
d86 2
a87 1
600	CONTINUE
d89 2
a90 2
	DO 610 I=1,2
	DO 610 J=1,2
d92 2
a93 1
610	CONTINUE
d98 2
a99 2
	DO 520 I=1,NUM
	DO 520 J=1,NP(I)
d101 1
a101 1
520	WEIGHT(I,J)=PI*(2.*CS*LAMBDA**3*KF**3-2.*
d103 4
a106 1
	DO 200 K=1,30
d112 2
a113 2
	DO 30 I=1,NUM
	DO 30 J=1,NP(I)
d115 3
a117 1
30	Y2(I,J)=PI*(0.5*CS*LAMBDA**3*KF**4-(A0(1)+A1(I))*LAMBDA*KF**2)-A2
d120 5
a124 3
	DO 40 I=1,NUM
	DO 40 J=1,NP(I)
40      X1=X1+(Y1(I,J)-Y2(I,J))**2/WEIGHT(I,J)**2
d128 1
a128 1
	DO 50 I=1,NUM
d130 1
a130 1
	DO 50 J=1,NP(I)
d132 3
a134 1
50 	Y2(I,J)=PI*(0.5*CS*LAMBDA**3*KF**4-X*LAMBDA*KF**2)-A2
d138 5
a142 3
	DO 60 I=1,NUM
	DO 60 J=1,NP(I)
60	X2=X2+(Y1(I,J)-Y2(I,J))**2/WEIGHT(I,J)**2
d145 1
a145 1
 	DO 90 I=1,NUM
d147 1
a147 1
	DO 90 J=1,NP(I)
d149 3
a151 1
90	Y2(I,J)=PI*(0.5*CS*LAMBDA**3*KF**4-X*LAMBDA*KF**2)-(A2+0.1*DA2)
d153 5
a157 3
	DO 100 I=1,NUM
	DO 100 J=1,NP(I)
100	X2=X2+(Y1(I,J)-Y2(I,J))**2/WEIGHT(I,J)**2
d164 1
a164 1
	DO 110 I=1,NUM
d166 1
a166 1
	DO 110 J=1,NP(I)
d168 3
a170 1
110	Y2(I,J)=PI*(0.5*CS*LAMBDA**3*KF**4-X*LAMBDA*KF**2)-A2
d172 5
a176 3
	DO 120 I=1,NUM
	DO 120 J=1,NP(I)
120	X2=X2+(Y1(I,J)-Y2(I,J))**2/WEIGHT(I,J)**2
d194 1
a194 1
200 	CONTINUE
d231 1
a231 1
		DO 1010 I=1,NUM
d233 1
a233 1
	 	DO 1000 J=1,NSAM
d246 1
a246 1
1000		CONTINUE
d252 1
a252 1
1010		CONTINUE
@


1.7
log
@correct warnings from VAX
@
text
@d197 3
a199 5
	WRITE(NOUT,*)' DEFOCUS ARE [A]'
	WRITE(NOUT,*) (A0(1)+A1(I), I=1,NUM)
	Q=SIN(A2)/COS(A2)*100.
	WRITE(NOUT,140)Q
140	FORMAT(' AMPLITUDE CONTRAST=',F10.6,'%')
d224 1
@


1.6
log
@changes done by june Zhu
@
text
@d33 7
a39 1
	INCLUDE 'CMBLOCK.INC'
d179 1
a179 1
          X0=9999999990
d206 3
a208 2
	CALL RDPRMC(CHO1,NUMC,.TRUE.,'DO YOU WANT TO GENERATE A FILTER?(Y/N)
     &  $',NULL,IRT)
@


1.5
log
@clean up unused variables and hollerith warnings
@
text
@a0 7
#ifdef SP_DISTRIB
      SUBROUTINE DEFO001
      COMMON /UNITS/LUNC,NIN,NOUT
      WRITE(NOUT,*) 'DUMMY CALL: DEFO001'
      RETURN
      END
#else
d17 2
a18 2
C   x(K,A)=PI*(0.5*CS*LAMBDA**3*K**4-DZ*LAMBDA*K**2)-OFFSET
C   x(K,A)=PI*(0.5*CS*LAMBDA**3*K**4-A1*LAMBDA*K**2)-A2
d22 2
a23 2
C	KP(I,J): ARRAy OF SP. FREQ. POINTS OF MINIMUM
C	NA(I,J): ARRAy OF ABBERATION
d25 1
a25 1
C	SPMAx: MAx OF SP. FREQ.
d27 2
a29 1
C
d33 1
a33 6
#ifdef SP_UNIX
        INCLUDE 'CMBLOCK.INC'
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif

d35 2
a36 1
	DIMENSION KP(10,10),NA(10,10)
d38 3
a40 2
  	DIMENSION Y1(10,10),Y2(10,10)
	DIMENSION F2(512)
d43 1
a43 1
	NULL=CHAR(0)
a44 3
	AA0= -100.0
	XM=100000.0

d47 5
a51 8
	IF(NUM .EQ. 1) THEN
	CALL RDPRM(AA1,NLOOP,ILOOP,'INPUT DEFOCUS [A]$')
	ELSE
	CALL RDPRM(AA0,NLOOP,ILOOP,'FIRST IMAGE DEFOCUS[A]$')
	CALL RDPRM(AA1,NLOOP,ILOOP,' INPUT DEFOCUS STEP [A]$')
	AA0=AA0-AA1
	IF( AA0 .EQ. 0) AA0=-100.
	ENDIF
d60 35
a94 4
10	Y1(I,J)=PI*FLOAT(NA(I,J))
	DO 20 K=1,31
	A0=AA0
	A1=AA1
d96 1
a96 6
	IF (K .EQ. 31) THEN
	A0=AM0
	A1=AM1
	A2=AM2
	ENDIF
C.......SET ITERATION STEP */
d98 1
a98 1
C........CALCULATE VALUE OF Y2 */
d100 4
a103 10
	IF(K .LT. 31 .AND. NP(I) .GE. 3) THEN
	NN=3
	ELSE
	NN=NP(I)
	ENDIF
	DO 30 J=1,NN
	KF=FLOAT(KP(I,J))*KS
30	Y2(I,J)=PI * (0.5*CS*LAMBDA**3*KF**4-
     &             (A0+FLOAT(I)*A1)*LAMBDA*KF**2)-A2
C.......SET INITIAL VALUE X**2(X,A)=SUM((Y1(I)-Y2(I))**2) */
d106 4
a109 11
	IF(K .LT. 31 .AND. NP(I) .GE. 3) THEN
	NN=3
	ELSE
	NN=NP(I)
	ENDIF
	DO 40 J=1,NN
40      X1=X1+(Y1(I,J)-Y2(I,J))**2

C........CALCULATE THE VALUE OF Y2(I)  */
999	DA0=0.001*A0
	DA1=0.001*A1
d112 3
a114 8
	X=A0+0.1*DA0+FLOAT(I)*A1
	IF(K .LT. 31 .AND. NP(I) .GE. 3) THEN
	NN=3
	ELSE
	NN=NP(I)
	ENDIF
	DO 50 J=1,NN
	KF=FLOAT(KP(I,J))*KS
d116 1
a117 4
C........CALCULATE DX**2/DA0   */
	IF(NUM .EQ. 1) THEN
	DXA0=0
	ELSE
d120 2
a121 7
	IF(K .LT. 31 .AND. NP(I) .GE. 3) THEN
	NN=3
	ELSE
	NN=NP(I)
	ENDIF
	DO 60 J=1,NN
60	X2=X2+(Y1(I,J)-Y2(I,J))**2
a122 28
	ENDIF

C........CALCULATE DX**2/DA1  */
	IF(NUM .EQ. 2) THEN
	DXA1=0
	ELSE
	DO 70 I=1,NUM
	X=A0+FLOAT(I)*(A1+0.1*DA1)
	IF(K .LT. 31 .AND. NP(I) .GE. 3) THEN
	NN=3
	ELSE
	NN=NP(I)
	ENDIF
	DO 70 J=1,NN
	KF=FLOAT(KP(I,J))*KS
70	Y2(I,J)=PI*(0.5*CS*LAMBDA**3*KF**4-X*LAMBDA*KF**2)-A2
	X2=0
	DO 80 I=1,NUM
	IF(K .LT. 31 .AND. NP(I) .GE. 3) THEN
	NN=3
	ELSE
	NN=NP(I)
	ENDIF
	DO 80 J=1,NN
80	X2=X2+(Y1(I,J)-Y2(I,J))**2
	DXA1=(X2-X1)/(0.1*DA1)
	ENDIF

d125 4
a128 10
	X=A0+FLOAT(I)*A1
	IF(K .LT. 31 .AND. NP(I) .GE. 3) THEN
	NN=3
	ELSE
	NN=NP(I)
	ENDIF
	DO 90 J=1,NN
	KF=FLOAT(KP(I,J))*KS
90	Y2(I,J)=PI*(0.5*CS*LAMBDA**3*KF**4-X*LAMBDA*KF**2)
     &         -(A2+0.1*DA2)
d131 2
a132 7
	IF(K .LT. 31 .AND. NP(I) .GE. 3) THEN
	NN=3
	ELSE
	NN=NP(I)
	ENDIF
	DO 100 J=1,NN
100	X2=X2+(Y1(I,J)-Y2(I,J))**2
a133 1

d135 2
a136 3
	SUM=SQRT((DXA0*DA0)**2+(DXA1*DA1)**2+(DXA2*DA2)**2)
	A0=A0-DXA0*DA0**2/SUM
        A1=A1-DXA1*DA1**2/SUM
a137 1

d140 3
a142 8
	X=A0+FLOAT(I)*A1
	IF(K .LT. 31 .AND. NP(I) .GE. 3) THEN
	NN=3
	ELSE
	NN=NP(I)
	ENDIF
	DO 110 J=1,NN
        KF=FLOAT(KP(I,J))*KS
d146 2
a147 7
	IF(K .LT. 31 .AND. NP(I) .GE. 3) THEN
	NN=3
	ELSE
	NN=NP(I)
	ENDIF
	DO 120 J=1,NN
120	X2=X2+(Y1(I,J)-Y2(I,J))**2
d149 1
a149 2
	  A0=A0+0.5*DXA0*DA0**2/SUM
	  A1=A1+0.5*DXA1*DA1**2/SUM
d151 8
a158 14
C	write(nout,*) 'INITIAL A2=',float(k)*0.01,'STEP',NSTEP
C	write(nout,*) 'A0=',A0,'A1=',A1,'OFFSET(RAD)=',A2,'X**2=',X1
C	  PRINTF(" DEFOCI ARE:")
C	  FOR(I=1;I<=NUM;I++){
C	    PRINTF("%F",A0+(FLOAT)I*A1)
C	  }
C	  Q=SIN(A2)/COS(A2)*100.
C	  PRINTF("      AMPLITUDE CONTRAST= %F %%\N",Q)
	  IF(XM .GT. X1) THEN
	    XM=X1
	    AM0=A0
	    AM1=A1
	    AM2=A2
	  ENDIF
a159 1

d165 26
a190 2
20 	CONTINUE
	WRITE(NOUT,*)'A0=',A0,'A1=',A1,'A2=',A2,'X**2=',X1
d192 1
a192 1
	WRITE(NOUT,*) (A0+FLOAT(I)*A1, I=1,NUM)
d200 3
a202 7
        GATE = 0.08
	CALL RDPRMC(CHO1,NUMC,.TRUE.,
     &         'DO YOU WANT TO GENERATE A FILTER?(Y/N)$'
     &         ,NULL,IRT)
	IF ( CHO1 .EQ. 'Y'  .OR. CHO1 .EQ. 'y') THEN
	        WRITE(NOUT,*) 
     &         'GENERATE FILTER IN THE INPUT FILE SEQURNCE'
d204 1
a204 1
		X=A0+FLOAT(I)*A1
d210 1
a210 1
	  	 F2(J)=-1
d213 1
a213 1
		   		F2(J)=1
a218 1
	        WRITE(NOUT,*)'FILE # ',I
d224 1
a224 1
	ENDIF
a226 1
#endif
@


1.4
log
@GATE initialized to 0.08
@
text
@d96 2
a97 1
30	Y2(I,J)=PI*(0.5*CS*LAMBDA**3*KF**4-(A0+FLOAT(I)*A1)*LAMBDA*KF**2)-A2
d176 2
a177 1
90	Y2(I,J)=PI*(0.5*CS*LAMBDA**3*KF**4-X*LAMBDA*KF**2)-(A2+0.1*DA2)
d252 3
a254 2
	CALL RDPRMC(CHO1,NUMC,.TRUE.,'DO YOU WANT TO GENERATE A FILTER?(Y/N)
     &  $',NULL,IRT)
d256 2
a257 1
	        WRITE(NOUT,*) 'GENERATE FILTER IN THE INPUT FILE SEQURNCE'
@


1.3
log
@corrections by Jun Zhu from germany
@
text
@d249 1
@


1.2
log
@wrong col in distrib code
@
text
@a33 2
C       
C23456789012345678901234567890123456789012345678901234567890123456789012
d35 1
d42 1
a42 1
	INCLUDE 'COMMON1:CMBLOCK.INC'
d44 1
d49 2
d52 3
a54 1
	AA0= -100.0   
d56 1
d76 1
a76 1
	DO 20 K=1,30
d80 5
d89 6
a94 1
	DO 30 J=1,NP(I)
d100 6
a105 1
	DO 40 J=1,NP(I)
d107 1
d114 6
a119 1
	DO 50 J=1,NP(I)
d122 1
d124 3
a126 1
C
d129 6
a134 1
	DO 60 J=1,NP(I)
d137 2
a138 1
	IF(NUM .EQ. 1) DXA0=0.0 
d140 3
d145 6
a150 1
	DO 70 J=1,NP(I)
d155 6
a160 1
	DO 80 J=1,NP(I)
d163 2
d168 6
a173 1
	DO 90 J=1,NP(I)
d178 6
a183 1
	DO 100 J=1,NP(I)
d186 1
d192 1
d196 6
a201 1
	DO 110 J=1,NP(I)
d206 6
a211 1
	DO 120 J=1,NP(I)
d232 1
d239 1
a239 1
	WRITE(NOUT,*)'A0=',AM0,'A1=',AM1,'A2=',AM2,'X**2=',XM
d241 2
a242 2
	WRITE(NOUT,*) (AM0+FLOAT(I)*AM1, I=1,NUM)
	Q=SIN(AM2)/COS(AM2)*100.
d245 31
@


1.1
log
@Initial revision
@
text
@d2 5
a6 5
     SUBROUTINE DEFO001
     COMMON /UNITS/LUNC,NIN,NOUT
     WRITE(NOUT,*) 'DUMMY CALL: DEFO001'
     RETURN
     END
@
