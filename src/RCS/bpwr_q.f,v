head	1.19;
access;
symbols
	pre_mrcs:1.19
	healthdept_2018:1.19
	pre_getangas:1.17
	GPL2010:1.17
	pre_GPL2010:1.16
	pre_var_equation:1.16
	pre_fftwrings:1.16
	pre_opfiles:1.16
	src:1.16
	best-code:1.16
	x-named-regs:1.16
	x:1.16
	v13-00:1.16
	pre_GPL:1.14
	prec_CA:1.14
	noindx:1.13
	Bproc:1.11
	oct21:1.11
	last77:1.10;
locks; strict;
comment	@c @;


1.19
date	2018.10.03.14.33.57;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2014.02.07.18.55.05;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2010.06.24.13.25.10;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.17.20.07.03;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.17.18.01.52;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.20.21.24.45;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.10.19.16.25.40;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.10.19.16.24.07;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.06.04.21.02.12;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	98.02.12.17.02.23;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	97.12.02.18.16.42;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	97.12.01.21.56.18;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.10.17.15.18.36;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.10.01.21.06.50;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.10.31.20.57.24;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.08.04.18.42.13;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.07.24.19.06.47;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.02.45;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.47.29;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.19
log
@email_health_dept
@
text
@C++*********************************************************************
C
C BPWR_Q.F
C                  OPFILEC                         FEB 03 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   BPWR_Q(BUF,B,W,FM,ILIST,NANG,N2S,N2R,NSAM,NROW)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

         SUBROUTINE BPWR_Q(BUF,B,W,FM,ILIST,NANG,N2S,N2R,
     &                     NSAM,NROW,FINPAT,NLET,FOUT,NLOT)

         INCLUDE 'CMBLOCK.INC'
         INCLUDE 'CMLIMIT.INC'

         CHARACTER (LEN=*)      :: FINPAT,FOUT

         CHARACTER (LEN=MAXNAM) :: FINPIC

         REAL                   :: B(N2S+2,N2R),W(N2S+2,N2R)
         DOUBLE PRECISION       :: AVE
         INTEGER                :: ILIST(NANG)
         REAL                   :: BUF(*)
 
         INTEGER, PARAMETER     :: LUNI = 21

         NS2 = N2S/2
         NR2 = N2R/2
         X1  = FLOAT(NS2)**2
         Y1  = FLOAT(NR2)**2

C        PREPARE WEIGHTING FUNCTION R**2
         DO J=1,N2R
            IY = J-1
            IF (IY .GT. NR2)  IY=IY-N2R
            DO    I=1,N2S+2,2
               IX = (I-1)/2
               IF (FM .GE. 0.0)  THEN
                  FQ = 0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
               ELSE
                  FQ = 0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
               ENDIF
               W(I,J)   = FQ
               W(I+1,J) = FQ
            ENDDO
	 ENDDO
         W(1,1) = 1.0
         W(2,1) = 1.0

C       PARZEN FILTER

	FM = ABS(FM)
	IF (.NOT.(FM.EQ.0.0.OR.FM.EQ.1.0))  THEN
           DO    J=1,N2R
              IY=J-1
              IF (IY .GT. NR2)  IY=IY-N2R
              DO    I=1,N2S+2,2
                 IX   = (I-1)/2
                 FQ   = 0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
                 PARZ = 0.0
                 IF (FQ .LE. FM)  THEN
                    IF (FQ.LE.FM/2.0)  THEN
                       PARZ = 1.0-6.0*(FQ/FM)**2*(1.0-FQ/FM)
                    ELSE
                       PARZ = 2.0*(1.0-FQ/FM)**3
                    ENDIF
                 ENDIF
                 W(I,J)   = W(I,J)*PARZ
                 W(I+1,J) = W(I+1,J)*PARZ
              ENDDO
           ENDDO
	ENDIF

         DO  K=1,NANG
C           READ ONE PROJECTION
            CALL  FILGET(FINPAT,FINPIC,NLET,ILIST(K),INTFLAG)
            MAXIM = 0
            CALL OPFILEC(0,.FALSE.,FINPIC,LUNI,'O',IFORM,LSAM,LROW,NSL,
     &               MAXIM,' ',.FALSE.,IRTFLG)
            IF (IRTFLG .NE. 0) THEN
               WRITE(NOUT,2032)  FINPIC
2032           FORMAT(' FILE SKIPPED: ',A)
	    ELSE

C              READ  IMAGE
               DO    I=1,NROW
                  CALL  REDLIN(LUNI,B(1,I),NSAM,I)
               ENDDO
               CLOSE(LUNI)

C              PADDING WITH BORDER AVERAGE
               IF (N2S.NE.NSAM .AND. N2R.NE.NROW)  THEN
                  AVE=0.0
                  DO    J=1,NROW
                     AVE=AVE+B(NSAM,J)
                     AVE=AVE+B(1,J)
                  ENDDO

                  DO    I=1,NSAM
                     AVE = AVE+B(I,1)
                     AVE = AVE+B(I,NROW)
                  ENDDO

                  AVE = AVE/(2*FLOAT(NSAM)+2*FLOAT(NROW))

                  DO    J=1,N2R
                     DO I=NSAM+1,N2S
                        B(I,J) = AVE
                     ENDDO
                  ENDDO

                  DO J=NROW+1,N2R
                     DO I=1,NSAM
                        B(I,J) = AVE
                     ENDDO
                  ENDDO
               ENDIF

               INV = +1
               CALL FMRS_2(B,N2S,N2R,INV)

C              APPLY FILTER

c$omp          parallel do private(i,j)
               DO J=1,N2R
                  DO I=1,N2S+2
                     B(I,J) = B(I,J)*W(I,J)
                  ENDDO
               ENDDO

               INV=-1
               CALL  FMRS_2(B,N2S,N2R,INV)

C              WRITE IMAGE
               CALL FILGET(FOUT,FINPIC,NLOT,ILIST(K),INTFLAG)

               MAXIM = 0
               CALL OPFILEC(0,.FALSE.,FINPIC,LUNI,'U',IFORM,
     &               LSAM,LROW,NSL,
     &               MAXIM,' ',.FALSE.,IRTFLG)

               DO I=1,NROW
                  CALL WRTLIN(LUNI,B(1,I),NSAM,I)
               ENDDO
               CLOSE(LUNI)
            ENDIF

C        ENDIF COMES FROM SKIPPING A FILE
	 ENDDO

         END
@


1.18
log
@finpat passed bug
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.17
log
@GPL_2010
@
text
@d33 2
a34 1
         SUBROUTINE  BPWR_Q(BUF,B,W,FM,ILIST,NANG,N2S,N2R,NSAM,NROW)
d37 1
d39 15
a53 12
         DIMENSION         B(N2S+2,N2R),W(N2S+2,N2R)
         DOUBLE PRECISION  AVE
         DIMENSION         ILIST(NANG),BUF(1024)
         COMMON  /F_SPEC/  FINPAT,FINPIC,FOUT,NLET,NLOT
         CHARACTER*80      FINPAT,FINPIC,FOUT

         DATA  LUNI/99/

         NS2=N2S/2
         NR2=N2R/2
         X1=FLOAT(NS2)**2
         Y1=FLOAT(NR2)**2
d56 3
a58 3
         DO    J=1,N2R
            IY=J-1
            IF(IY.GT.NR2)  IY=IY-N2R
d60 3
a62 3
               IX=(I-1)/2
               IF(FM.GE.0.0)  THEN
                  FQ=0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
d64 1
a64 1
                  FQ=0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
d66 2
a67 2
               W(I,J)=FQ
               W(I+1,J)=FQ
d70 2
a71 2
         W(1,1)=1.0
         W(2,1)=1.0
d75 2
a76 2
	FM=ABS(FM)
	IF(.NOT.(FM.EQ.0.0.OR.FM.EQ.1.0))  THEN
d79 1
a79 1
              IF(IY.GT.NR2)  IY=IY-N2R
d81 6
a86 6
                 IX=(I-1)/2
                 FQ=0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
                 PARZ=0.0
                 IF(FQ.LE.FM)  THEN
                    IF(FQ.LE.FM/2.0)  THEN
                       PARZ=1.0-6.0*(FQ/FM)**2*(1.0-FQ/FM)
d88 1
a88 1
                       PARZ=2.0*(1.0-FQ/FM)**3
d91 2
a92 2
                 W(I,J)=W(I,J)*PARZ
                 W(I+1,J)=W(I+1,J)*PARZ
d115 1
a115 1
               IF (N2S.NE.NSAM.AND.N2R.NE.NROW)  THEN
d121 1
d123 2
a124 2
                     AVE=AVE+B(I,1)
                     AVE=AVE+B(I,NROW)
d126 3
a128 1
                  AVE=AVE/(2*FLOAT(NSAM)+2*FLOAT(NROW))
d130 2
a131 2
                     DO    I=NSAM+1,N2S
                        B(I,J)=AVE
d134 4
a137 3
                  DO    J=NROW+1,N2R
                     DO    I=1,NSAM
                        B(I,J)=AVE
a140 2
               INV=+1
               CALL  FMRS_2(B,N2S,N2R,INV)
d142 4
a145 1
C              Apply filter
d148 3
a150 3
               DO    J=1,N2R
                  DO    I=1,N2S+2
                     B(I,J)=B(I,J)*W(I,J)
d157 2
a158 2
C              WRITE  IMAGE
               CALL  FILGET(FOUT,FINPIC,NLOT,ILIST(K),INTFLAG)
d166 1
a166 1
                  CALL  WRTLIN(LUNI,B(1,I),NSAM,I)
d170 1
d173 1
@


1.16
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.15
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a6 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
a30 1
C **************************************************************************
a35 1
C--************************************************************************
@


1.14
log
@opfilec
@
text
@d1 1
d7 1
d9 1
d11 24
d41 1
d47 1
@


1.13
log
@typo
@
text
@d4 1
d84 1
a84 1
            CALL OPFILE(.FALSE.,FINPIC,LUNI,'O',IFORM,LSAM,LROW,NSL,
d125 1
a125 1
c$omp parallel do private(i,j)
d137 1
d139 2
a140 1
               CALL OPFILE(.FALSE.,FINPIC,LUNI,'U',IFORM,LSAM,LROW,NSL,
d143 1
a143 1
               DO    I=1,NROW
@


1.12
log
@openfb--> opfile & cosmetic
@
text
@d85 1
a85 1
            IF (IRTFLG .NE. 0) THRN
@


1.11
log
@OpenMP
@
text
@d3 1
a3 1
C $$ BPWR_Q.FOR
d15 1
a16 1
C
d19 1
a19 3
C
C $$ BPWR_Q.FOR
C
d21 4
a24 1
         DIMENSION   B(N2S+2,N2R),W(N2S+2,N2R)
d26 1
a26 2
         INCLUDE 'CMBLOCK.INC'
         DIMENSION  ILIST(NANG),BUF(1024)
d28 2
a29 1
         CHARACTER*80  FINPAT,FINPIC,FOUT
d31 1
a31 1
C
d36 2
a37 3
C
C  Prepare weighting function R**2
C
d39 12
a50 11
         IY=J-1
         IF(IY.GT.NR2)  IY=IY-N2R
         DO    I=1,N2S+2,2
         IX=(I-1)/2
	IF(FM.GE.0.0)  THEN
         FQ=0.25*(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	ELSE
         FQ=0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	ENDIF
         W(I,J)=FQ
         W(I+1,J)=FQ
a51 1
	 ENDDO
d54 3
a56 3
C
C  Parzen filter
C
d59 18
a76 13
	DO    J=1,N2R
	IY=J-1
	IF(IY.GT.NR2)  IY=IY-N2R
	DO    I=1,N2S+2,2
	IX=(I-1)/2
	FQ=0.5*SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
	PARZ=0.0
	IF(FQ.LE.FM)  THEN
	IF(FQ.LE.FM/2.0)  THEN
	PARZ=1.0-6.0*(FQ/FM)**2*(1.0-FQ/FM)
	ELSE
	PARZ=2.0*(1.0-FQ/FM)**3
	ENDIF
d78 1
a78 6
	W(I,J)=W(I,J)*PARZ
	W(I+1,J)=W(I+1,J)*PARZ
	ENDDO
	ENDDO
	ENDIF
C --
d80 44
a123 45
C Read one projection
         CALL  FILGET(FINPAT,FINPIC,NLET,ILIST(K),INTFLAG)
         CALL  OPENFB(BUF,FINPIC,LUNI,LSAM,LROW,'O',NF,NSL)
        IF(NF.NE.2)  THEN
         WRITE(NOUT,2032)  FINPIC
2032     FORMAT(' File skipped ',A80)
	ELSE
C
C  READ  IMAGE
C
         DO    I=1,NROW
         CALL  REDLIN(LUNI,B(1,I),NSAM,I)
  	 ENDDO
       CLOSE(LUNI)
C
C  Padding with border average
C
         IF(N2S.NE.NSAM.AND.N2R.NE.NROW)  THEN
         AVE=0.0
         DO    J=1,NROW
         AVE=AVE+B(NSAM,J)
         AVE=AVE+B(1,J)
   	 ENDDO
	 DO    I=1,NSAM
         AVE=AVE+B(I,1)
         AVE=AVE+B(I,NROW)
	 ENDDO
         AVE=AVE/(2*FLOAT(NSAM)+2*FLOAT(NROW))
         DO    J=1,N2R
         DO    I=NSAM+1,N2S
         B(I,J)=AVE
	 ENDDO
	 ENDDO
         DO    J=NROW+1,N2R
         DO    I=1,NSAM
         B(I,J)=AVE
	 ENDDO
	 ENDDO
         ENDIF
C
	INV=+1
	CALL  FMRS_2(B,N2S,N2R,INV)
C
C  Apply filter
C
d125 21
a145 15
         DO    J=1,N2R
         DO    I=1,N2S+2
         B(I,J)=B(I,J)*W(I,J)
	 ENDDO
	 ENDDO
C
	INV=-1
	CALL  FMRS_2(B,N2S,N2R,INV)
C
C  WRITE  IMAGE
C
         CALL  FILGET(FOUT,FINPIC,NLOT,ILIST(K),INTFLAG)
         CALL  OPENFB(BUF,FINPIC,LUNI,LSAM,LROW,'UNKNOWN',NF,NSL)
         DO    I=1,NROW
         CALL  WRTLIN(LUNI,B(1,I),NSAM,I)
a146 4
         CLOSE(LUNI)
         ENDIF
C endif comes from skipping a file
	ENDDO
@


1.10
log
@freq fixed
@
text
@a29 1
CNO_SAVE
d79 1
a79 1
         DO  2202  K=1,NANG
d83 1
a83 1
         IF(NF.NE.2)  THEN
d86 1
a86 2
         GOTO  2202
         ENDIF
d125 1
a125 1
c$doacross local(i,j)
d143 3
a145 1
2202     CONTINUE
@


1.9
log
@*** empty log message ***
@
text
@d34 2
a35 2
         X1=FLOAT(N2S+2)**2
         Y1=FLOAT(N2R)**2
d45 1
a45 1
         FQ=FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1
d47 1
a47 1
         FQ=SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
d65 1
a65 1
	FQ=SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
d127 1
@


1.8
log
@corrected
@
text
@d34 1
a34 1
         X1=FLOAT(N2S/2+1)**2
@


1.7
log
@R
@
text
@d34 1
a34 1
         X1=FLOAT(N2S)**2
d44 3
d48 1
d58 9
a66 8
         IF(FM.NE.0.0)  THEN
         DO    J=1,N2R
         IY=J-1
         IF(IY.GT.NR2)  IY=IY-N2R
         DO    I=1,N2S+2,2
         IX=(I-1)/2
         FQ=SQRT(FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1)
         PARZ=0.0
d76 3
a78 3
	 ENDDO
	 ENDDO
         ENDIF
d122 2
a123 1
         CALL  FFTR2_Q(B,N2S,N2R,1)
d133 2
a134 1
         CALL  FFTR2_Q(B,N2S,N2R,-1)
@


1.6
log
@*** empty log message ***
@
text
@d78 1
a78 1
         CALL  OPENFB(BUF,FINPIC,LUNI,LSAM,LROW,'R',NF,NSL)
@


1.5
log
@buf passed
@
text
@d39 1
a39 1
         DO  1  J=1,N2R
d42 1
a42 1
         DO  2  I=1,N2S+2,2
d44 1
a44 2
         FQ=FLOAT(IX*IX)/X1+FLOAT(IY*IY)/Y1
		fq=sqrt(fq)
d47 2
a48 2
2        CONTINUE
1        CONTINUE
d55 1
a55 1
         DO  51  J=1,N2R
d58 1
a58 1
         DO  51  I=1,N2S+2,2
d62 11
a72 8
         IF(FQ-FM)  10,10,16
10       IF(FQ-FM/2.0)  12,12,14
12       PARZ=1.0-6.0*(FQ/FM)**2*(1.0-FQ/FM)
         GOTO  16
14       PARZ=2.0*(1.0-FQ/FM)**3
16       W(I,J)=W(I,J)*PARZ
         W(I+1,J)=W(I+1,J)*PARZ
51       CONTINUE
d87 4
a90 3
         DO  81  I=1,NROW
81       CALL  REDLIN(LUNI,B(1,I),NSAM,I)
         CLOSE(LUNI)
d96 1
a96 1
         DO  221  J=1,NROW
d98 3
a100 2
221      AVE=AVE+B(1,J)
         DO  222  I=1,NSAM
d102 2
a103 1
222      AVE=AVE+B(I,NROW)
d105 10
a114 6
         DO  21  J=1,N2R
         DO  21  I=NSAM+1,N2S
21       B(I,J)=AVE
         DO  22  J=NROW+1,N2R
         DO  22  I=1,NSAM
22       B(I,J)=AVE
d121 5
a125 3
         DO  301  J=1,N2R
         DO  301  I=1,N2S+2
301      B(I,J)=B(I,J)*W(I,J)
d133 3
a135 2
         DO  82  I=1,NROW
82       CALL  WRTLIN(LUNI,B(1,I),NSAM,I)
@


1.4
log
@no change
@
text
@d22 1
a22 1
         SUBROUTINE  BPWR_Q(B,W,FM,ILIST,NANG,N2S,N2R,NSAM,NROW)
a24 1
#ifdef SP_UNIX
a25 3
#else
         INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
@


1.3
log
@nosave
@
text
@d49 1
@


1.2
log
@cpp_lines_added
@
text
@d34 1
@


1.1
log
@Initial revision
@
text
@d25 3
d29 1
@
