head	1.17;
access;
symbols
	pre_getangas:1.14
	GPL2010:1.14
	pre_GPL2010:1.13
	pre_var_equation:1.13
	pre_fftwrings:1.13
	pre_opfiles:1.13
	src:1.13
	best-code:1.13
	x-named-regs:1.13
	x:1.13
	v13-00:1.13
	pre_GPL:1.12
	prec_CA:1.10
	noindx:1.9
	Bproc:1.6
	oct21:1.5
	last77:1.5;
locks; strict;
comment	@c @;


1.17
date	2014.01.12.19.18.16;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2014.01.07.20.26.04;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2014.01.07.20.23.58;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.24.13.26.38;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.17.21.08.36;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2004.07.20.20.24.19;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2004.06.18.14.34.56;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.20.17.55.20;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.11.14.09.07;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.06.12.40.48;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2000.11.05.20.14.07;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.10.21.20.50.48;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	97.10.14.21.19.19;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.09.07.17.47.42;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	95.03.01.16.40.48;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.09.44;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.51.57;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.17
log
@enter
@
text
@C++*********************************************************************
C
C RCONV.F               LONG FILENAMES           JAN 89 al
C                       USED OPFILE              NOV 00 ARDEAN LEITH
C                       OPFILEC                  FEB 03 ARDEAN LEITH
C                       REFACTORED               JAN 14 ARDEAN LEITH
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C RCONV(LUN1,LUN2,LUNP,NSAM,NROW,NSLICE,MODE,MBUF)
C        LUN1               LOGICAL UNIT NUMBER OF FILE
C        LUN2               LOGICAL UNIT NUMBER OF FILE
C        LUNP               LOGICAL UNIT NUMBER OF PSF FILE
C        NSAM,NROW,NSLICE   DIMENSIONS OF FILE
C        MODE
C        MBUF
C
C--*******************************************************************

      SUBROUTINE RCONV(LUN1,LUN2,LUNP,NSAM,NROW,NSLICE,MODE,MBUF)

      INCLUDE 'CMBLOCK.INC'
      INCLUDE 'CMLIMIT.INC' 
 
      REAL,ALLOCATABLE       :: PSF(:,:), Q(:)  

      CHARACTER(LEN=MAXNAM)  :: FILEP
      DOUBLE PRECISION       :: A
      CHARACTER(LEN=1)       :: NULL = CHAR(0)
C                                          123456789  
      CHARACTER (LEN=MAXNAM) :: PROMPTL = 'ROW('
      LOGICAL                :: SAVEPSF

C     OPTIONS WITH MODE > 1 RESERVED FOR STANDARD PSFS
C     TO BE IMPLEMENTED LATER
      IF (MODE .NE. 1) THEN
	 CALL ERRT(102,' OPTION NOT YET IMPLEMENTED',MODE)
         RETURN
      ENDIF

      CALL FILERD(FILEP,NLET,NULL,'PSF INPUT',IRTFLG)
      IF (IRTFLG .NE. 0) RETURN
      SAVEPSF = (FILEP(1:1) == '#')

      IF (NSLICE == 1)  THEN
C        IMAGE INPUT

C        -----------------------------------------------------------
C        NEW PSF, INPUT FROM CONSOLE OR INPUT STREAM EXPECTED,
C        PSF NOT TO BE SAVED

         IF (FILEP(1:1) .NE. '*' .AND. 
     &       FILEP(1:1) .NE. '#') THEN
C            READ PSF FROM FILE --------------------------------

            MAXIM = 0
            CALL OPFILEC(0,.FALSE.,FILEP,LUNP,'O',
     &                   IFORM,NSPRD,NSPRD,NDUM,
     &                   MAXIM,' ',.TRUE.,IRTFLG)
            IF (IRTFLG .NE. 0) RETURN

C           MEMORY AVAILABLE ?
	    K_Q    = 1
	    K_B    = K_Q + NSPRD*NSAM
            MUBUF  = K_B + NSAM

            ALLOCATE (PSF(NSPRD,NSPRD),
     &                Q(MUBUF), STAT=IRTFLG)
            IF (IRTFLG .NE. 0) THEN
               CALL ERRT(46,'RCONV; PSF..',MUBUF*NSPRD*NSPRD)
               GOTO 999
            ENDIF

            CALL REDVOL(LUNP,NSPRD,NSPRD,1,1,PSF,IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 999

         ELSE

C           PSF INPUT FROM CONSOLE OR INPUT STREAM 

            IF (SAVEPSF) THEN
C              PSF TO BE SAVED
               CALL FILERD(FILEP,NLETO,NULL,'PSF OUTPUT',IRTFLG)
               IF (IRTFLG .NE. 0) GOTO 999
            ENDIF

            CALL RDPRI1S(NSPRD,NOT_USED,'PSF WIDTH',IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 999

C           MEMORY AVAILABLE ?
	    K_Q    = 1
	    K_B    = K_Q + NSPRD*NSAM
            MUBUF  = K_B + NSAM

            ALLOCATE (PSF(NSPRD,NSPRD),
     &                Q(MUBUF), STAT=IRTFLG)
            IF (IRTFLG .NE. 0) THEN
               CALL ERRT(46,'RCONV; PSF..',MUBUF*NSPRD*NSPRD)
            ENDIF

            IF (SAVEPSF) THEN
C              OPEN FILE FOR PSF OUTPUT 
               IFORM = 1
               MAXIM = 0
               CALL OPFILEC(0,.FALSE.,FILEP,LUNP,'U',
     &                   IFORM,NSPRD,NSPRD,1,
     &                   MAXIM,' ',.TRUE.,IRTFLG)
               IF (IRTFLG .NE. 0) GOTO 999
            ENDIF

            NSPRD1 = NSPRD  / 2 + 1
            NSPRD2 = NSPRD1 + 1
            NSPRDS = NSPRD  * NSPRD

            WRITE(NOUT,43) NSPRD, NSPRD
            IF (NDAT .NE. 0 .AND. NDAT .NE. NOUT)
     &         WRITE(NDAT,43)NSPRD, NSPRD
43          FORMAT(/,'  PSF MATRIX(',I2,' x ',I2,')')

            DO  IROW = 1,NSPRD

               CALL INTTOCHAR(IROW,PROMPTL(5:),NC,1)
               PROMPTL(5+NC:5+NC) = ')'

               CALL RDPRA(PROMPTL(1:5+NC), NSPRD,0,.FALSE.,
     &                 PSF(1,IROW),NGOT,IRTFLG)

               IF (IRTFLG .NE. 0 ) THEN
                 CALL ERRT(101,'INPUT CAN NOT BE UNDERSTOOD',NE)
                 GOTO 999
               ELSEIF (NGOT < NSPRD) THEN
                 CALL ERRT(102,'INSUFFICIENT VALUES FOR THIS LINE',NGOT)
                 GOTO 999
               ENDIF
            ENDDO

C           NORMALIZE IF POSSIBLE
            A = SUM(PSF)
            IF (A == 0.0) THEN
               A = 1.0
               WRITE(NOUT,*) ' *** PSF CANNOT BE NORMALIZED'
            ELSE
               WRITE(NOUT,*) ' PSF NORMALIZED, DIVIDED BY:',A
            ENDIF
   
            PSF = PSF / A     ! ARRAY OPERATION

            IF (SAVEPSF) CALL WRTVOL(LUNP,NSPRD,NSPRD, 1,1,PSF,IRTFLG)
            CLOSE(LUNP)

         ENDIF

C        WRITE OUT PSF FOR VERIFICATION
         WRITE(NOUT,*) ' '
         WRITE(NOUT,*) ' PSF IN USE:'
         DO  IROW = 1,NSPRD
            WRITE(NOUT,90) (PSF(ICOL,IROW),ICOL=1,NSPRD)
 90	    FORMAT(10(1X,ES10.3))
         ENDDO
         WRITE(NOUT,*) ' '

C        REAL 2D, CONVOLUTION
         NQ = NSPRD / 2
         CALL RCNV2_P(LUN1,LUN2,Q(K_B),Q(K_Q),NSAM,NROW,PSF,NQ)

C------------------------------------------------------------

      ELSE
C        3-D REAL CONVOLUTION WITH PSF READ FROM FILE
         MAXIM = 0
         CALL OPFILEC(0,.FALSE.,FILEP,LUNP,'O',IFORM,
     &                NSPRD,NSPRD,NSPRD,
     &                MAXIM,' ',.TRUE.,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN

         MUBUF = NSAM*NROW*NSPRD+NSAM+NSPRD**3
         ALLOCATE (Q(MUBUF), STAT=IRTFLG)
         IF (IRTFLG .NE. 0) THEN
            CALL ERRT(46,'RCONV; Q..',MUBUF*NSPRD*NSPRD)
            GOTO 999
         ENDIF
 
         DO K=1,NSPRD
            DO I = 1,NSPRD
	       NR =(K-1)*NSPRD+I
               I1 = (K-1)*NSPRD*NSPRD+(I-1)*NSPRD + 1
               CALL REDLIN(LUNP,Q(I1),NSPRD,NR)
            ENDDO
         ENDDO
         CLOSE(LUNP)

C        WRITE OUT PSF FOR VERIFICATION
         WRITE(NOUT,*) ' '
         WRITE(NOUT,*) ' PSF IN USE:'

	 K1 = 1
	 K2 = NSPRD
	 DO K=1,NSPRD
	    WRITE(NOUT,*) K

	    DO I=1,NSPRD

	       WRITE(NOUT,892) (Q(J),J=K1,K2)
892	       FORMAT(10(1X,ES10.3))

	       K1 = K1 + NSPRD
	       K2 = K2 + NSPRD
	    ENDDO
	 ENDDO

	 K1 = NSPRD*NSPRD*NSPRD

	 CALL RCNV3_P(LUN1,LUN2,
     &	    Q(NSAM*NROW*NSPRD+K1+1),Q(K1+1),NSAM,NROW,NSLICE,Q,NSPRD)
      ENDIF
	
999   IF (ALLOCATED(PSF)) DEALLOCATE(PSF)
      IF (ALLOCATED(Q))   DEALLOCATE(Q)

      END
@


1.16
log
@comment
@
text
@d137 1
a137 1
43          FORMAT(/,'  ENTER PSF MATRIX(',I2,' x ',I2,')')
@


1.15
log
@rewrite
@
text
@d3 4
a6 3
C RCONV.F                                      LONG FILENAMES JAN 89 al
C                                   USED OPFILE     NOV 00 ARDEAN LEITH
C                                   OPFILEC         FEB 03 ARDEAN LEITH
d11 1
a11 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
@


1.14
log
@GPL_2010
@
text
@d29 3
a31 3
C        LUN1        LOGICAL UNIT NUMBER OF FILE
C        LUN2        LOGICAL UNIT NUMBER OF FILE
C        LUNP        LOGICAL UNIT NUMBER OF FILE
d43 1
a43 2
      CHARACTER(LEN=MAXNAM)   ::  FILEP
      COMMON /COMMUN/FILEP
d45 6
a50 1
      COMMON	Q(1)
d52 1
a52 6
      DOUBLE PRECISION A
      CHARACTER *1  NULL

      NULL = CHAR(0)

C     OPTIONS WITH MODE .GT.1 RESERVED FOR STANDARD PSFS
d54 2
a55 2
      IF (MODE.NE.1) THEN
	 CALL ERRT(101,' OPTION NOT YET IMPLEMENTED',NE)
d59 7
a65 2
      CALL FILERD(FILEP,NLET,NULL,'PSF IN',IRTFLG)
      IF (NSLICE.EQ.1)  THEN
a68 17
C
C        NEW PSF, INPUT AS BEFORE, BUT PSF TO BE SAVED
         IF(FILEP(1:1).NE.'*' .AND. FILEP(1:1).NE.'#') GOTO 100
         IF (FILEP(1:1).EQ.'*') GOTO 405

40       CALL FILERD(FILEP,NLETO,NULL,'PSF OUT',IRTFLG)
405      CALL RDPRMI(NSPRD,NDUM,NOT_USED,'PSF WIDTH')
C        MEMORY AVAILABLE ?
	 NSPRDH = NSPRD/2
	 K_Q = 1
	 K_B = K_Q+NSPRD*NSAM
	 K_PSF=K_B+NSAM
         MUBUF = K_PSF+NSPRD**2
         IF (MUBUF.GT.MBUF) THEN 
            CALL ERRT(3,'RCONV',NE)
            RETURN
         ENDIF
d70 9
a78 4
         IOUT  = 1
C        nov 2000 how can iform be zero???? al
         IFORM = 0
         IF (FILEP(1:1).EQ.'*') GOTO 42
d80 45
a124 2
         MAXIM = 0
         CALL OPFILEC(0,.FALSE.,FILEP,LUNP,'U',IFORM,NSPRD,NSPRD,1,
d126 2
a127 1
         IF (IRTFLG .NE. 0) RETURN
d129 24
a152 31
         IOUT = 2
42       NSPRD1 = NSPRD/2 + 1
         NSPRD2 = NSPRD1 + 1
         NSPRDS =NSPRD*NSPRD
         WRITE(NOUT,43) NSPRD1,NSPRD
         IF (NDAT.NE.0) WRITE(NDAT,43) NSPRD
43       FORMAT(' ENTER PSF MATRIX(',I2,' ROWS AND COLUMNS ')
         A = 0.
         DO  I = 1,NSPRD
            I1 = (I-1)* NSPRD+1
            I2 = I1 + NSPRD - 1
            READ(NIN,*)       (Q(K_PSF+K-1),K=I1,I2)
            WRITE(NOUT,436)   (Q(K_PSF+K-1),K=I1,I2)
            IF(NDAT.NE.0) WRITE(NDAT,436)   (Q(K_PSF+K-1),K=I1,I2)
436         FORMAT(5X,15F5.1)
            DO  K = I1,I2
               A = A + Q(K_PSF+K-1)
            ENDDO
         ENDDO

C        NORMALIZE IF POSSIBLE
         IF (A.NE.0.) GOTO 46
         A = 1.
         WRITE(NOUT,465)
465      FORMAT(' *** PSF CANNOT BE NORMALIZED')
46       DO 48 I = 1,NSPRD
            LL=(I-1)*NSPRD         
            I1=LL+1
            DO  KK=1,NSPRD
               II=LL+KK
               Q(K_PSF+II-1) = Q(K_PSF+II-1)/A
d155 10
a164 4
            GOTO(48,475),IOUT
475         CALL WRTLIN(LUNP,Q(K_PSF+I1-1),NSPRD,I)
48       CONTINUE
         GOTO 150
d166 2
a167 4
100      MAXIM = 0
         CALL OPFILEC(0,.FALSE.,FILEP,LUNP,'O',IFORM,NSPRD,NSPRD,NDUM,
     &                   MAXIM,' ',.TRUE.,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN
a168 8
C        Memory
         K_Q = 1
         K_B = K_Q+NSPRD*NSAM
         K_PSF=K_B+NSAM
         MUBUF = K_PSF+NSPRD**2
         IF (MUBUF.GT.MBUF) THEN
            CALL ERRT(3,'RCONV',NE)
            RETURN
d171 6
a176 3
         DO  I = 1,NSPRD
            I1 = (I-1)*NSPRD + 1
            CALL REDLIN(LUNP,Q(K_PSF+I1-1),NSPRD,I)
d178 5
a182 1
150      CLOSE(LUNP)
a183 14
C        WRITE OUT PSF FOR VERIFICATION
1905     WRITE(NOUT,191)
191      FORMAT(' PSF IN EFFECT'/)
         K1 = 1
         K2 = K1+NSPRD-1
         DO  I = 1,NSPRD
            WRITE(NOUT,192)   (Q(K_PSF+K-1),K=K1,K2)
            K1 = K1+NSPRD
            K2 = K2+NSPRD
         ENDDO
192      FORMAT(1X,15F5.2)
C------------------------------------------------------------
         NQ=NSPRD/2
         CALL  RCNV2_P(LUN1,LUN2,Q(K_B),Q(K_Q),NSAM,NROW,Q(K_PSF),NQ)
d185 1
d187 1
a187 1
C        3-D REAL CONVOLUTION WITH PSF READ FROM THE FILE
d189 3
a191 2
         CALL OPFILEC(0,.FALSE.,FILEP,LUNP,'O',IFORM,NSPRD,NSPRD,NSPRD,
     &                   MAXIM,' ',.TRUE.,IRTFLG)
d194 5
a198 3
         IF (NSAM*NROW*NSPRD+NSAM+NSPRD**3.GT.MBUF) THEN
            CALL ERRT(3,'RCONV',NE)
            RETURN
d200 4
a203 3
         DO    K=1,NSPRD
            DO  I = 1,NSPRD
	       NR=(K-1)*NSPRD+I
d208 18
a225 10
850      CLOSE(LUNP)
         WRITE(NOUT,191)
	 K1=1
	 K2=NSPRD
	 DO    K=1,NSPRD
	    WRITE(NOUT,*)  K
	    DO    I=1,NSPRD
	       WRITE(NOUT,892)  (Q(J),J=K1,K2)
	       K1=K1+NSPRD
	       K2=K2+NSPRD
d228 1
a228 2
892	 FORMAT(9(1X,1PE10.3))
C
d230 2
a231 1
	 CALL  RCNV3_P(LUN1,LUN2,
d233 5
a237 1
      ENDIF	
@


1.13
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.12
log
@NPROC changed to NDAT ??? (undefined anyway)
@
text
@d1 1
a1 1
C++*************************************************************************
d6 25
a30 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
@


1.11
log
@msg OPTION NOT YET IMPLEMENTED used errt
@
text
@d86 1
a86 1
         IF (NPROC.NE.0) WRITE(NPROC,43) NSPRD
d93 2
a94 2
            WRITE(NOUT,436)  (Q(K_PSF+K-1),K=I1,I2)
            IF(NPROC.NE.0) WRITE(NPROC,436)   (Q(K_PSF+K-1),K=I1,I2)
@


1.10
log
@opfilec
@
text
@d44 1
a44 1
	 WRITE(NOUT,*) ' OPTION NOT YET IMPLEMENTED'
@


1.9
log
@nloop,iloop_removed
@
text
@d4 2
a5 1
C                                   USED OPFILE NOV 00 ARDEAN LEITH
d29 4
d35 1
a35 2
      CHARACTER *81 FILEP
      COMMON /COMMUN/ FILEP
d77 1
a77 1
         CALL OPFILE(.FALSE.,FILEP,LUNP,'U',IFORM,NSPRD,NSPRD,1,
d120 1
a120 1
         CALL OPFILE(.FALSE.,FILEP,LUNP,'O',IFORM,NSPRD,NSPRD,NDUM,
d158 1
a158 1
         CALL OPFILE(.FALSE.,FILEP,LUNP,'O',IFORM,NSPRD,NSPRD,NSPRD,
@


1.8
log
@NECHO --> NOUT
@
text
@d55 1
a55 1
405      CALL RDPRMI(NSPRD,NDUM,NLOOP,ILOOP,'PSF WIDTH')
@


1.7
log
@opfile used now instead of openf & cosmetic
@
text
@d89 1
a89 1
            WRITE(NECHO,436)  (Q(K_PSF+K-1),K=I1,I2)
d98 1
a98 1
         IF(A.NE.0.) GOTO 46
@


1.6
log
@*** empty log message ***
@
text
@d3 2
a4 2
C $$ RCONV.FOR
C                                        LONG FILENAMES JAN 89 al
d15 1
a15 3
C $$ RCONV:
C
C      CALL RCONV(LUN1,LUN2,LUNP,NSAM,NROW,NSLICE,MODE,MBUF)
d25 3
a28 2
      SUBROUTINE RCONV(LUN1,LUN2,LUNP,NSAM,NROW,NSLICE,MODE,MBUF)
	INCLUDE 'CMBLOCK.INC'
d30 1
d32 1
a32 2
	DOUBLE PRECISION A
      CHARACTER *81 FILEP
d34 9
a42 7
C
      NULL=CHAR(0)
C
      IF(MODE.NE.1) then
	WRITE(NOUT,*) ' OPTION NOT YET IMPLEMENTED'
      RETURN
	endif
a43 2
C OPTIONS WITH MODE .GT.1 RESERVED FOR STANDARD PSFS
C TO BE IMPLEMENTED LATER
d45 102
a146 99
      IF(NSLICE.EQ.1)  THEN
C-----------------------------------------------------------
C * NEW PSF, INPUT FROM CONSOLE OR INPUT STREAM EXPECTED,
C   PSF NOT TO BE SAVED
C
C # NEW PSF, INPUT AS BEFORE, BUT PSF TO BE SAVED
      IF(FILEP(1:1).NE.'*' .AND. FILEP(1:1).NE.'#') GOTO 100
      IF(FILEP(1:1).EQ.'*') GOTO 405

40    CALL FILERD(FILEP,NLETO,NULL,'PSFOUT',IRTFLG)
405   CALL RDPRMI(NSPRD,NDUM,NLOOP,ILOOP,'PSF WIDTH')
c  Memory available ?
	NSPRDH = NSPRD/2
	K_Q = 1
	K_B = K_Q+NSPRD*NSAM
	K_PSF=K_B+NSAM
      MUBUF = K_PSF+NSPRD**2
      IF(MUBUF.GT.MBUF) THEN 
      CALL ERRT(3,'RCONV',NE)
      RETURN
      ENDIF
c
	IOUT = 1
      IFORM = 0
      IF(FILEP(1:1).EQ.'*') GOTO 42
      CALL OPENF(FILEP,LUNP,NSPRD,NSPRD,'UNKNOWN',NF,1)
      IF(NF.EQ.1) THEN
	CALL ERRT(4,'RCONV',NE)
	RETURN
      ENDIF
      IOUT = 2
42    NSPRD1 = NSPRD/2 + 1
      NSPRD2 = NSPRD1 + 1
      NSPRDS =NSPRD*NSPRD
      WRITE(NOUT,43) NSPRD1,NSPRD
      IF(NPROC.NE.0) WRITE(NPROC,43) NSPRD
43    FORMAT(' ENTER PSF MATRIX(',I2,' ROWS AND COLUMNS ')
      A = 0.
      DO  I = 1,NSPRD
      I1 = (I-1)* NSPRD+1
      I2 = I1 + NSPRD - 1
      READ(NIN,*)       (Q(K_PSF+K-1),K=I1,I2)
      WRITE(NECHO,436)  (Q(K_PSF+K-1),K=I1,I2)
      IF(NPROC.NE.0) WRITE(NPROC,436)   (Q(K_PSF+K-1),K=I1,I2)
436   FORMAT(5X,15F5.1)
      DO  K = I1,I2
      A = A + Q(K_PSF+K-1)
      ENDDO
      ENDDO

C NORMALIZE IF POSSIBLE
      IF(A.NE.0.) GOTO 46
      A = 1.
      WRITE(NOUT,465)
465   FORMAT(' *** PSF CANNOT BE NORMALIZED')
46    DO 48 I = 1,NSPRD
      LL=(I-1)*NSPRD         
      I1=LL+1
      DO  KK=1,NSPRD
      II=LL+KK
      Q(K_PSF+II-1) = Q(K_PSF+II-1)/A
      ENDDO
      GOTO(48,475),IOUT
475   CALL WRTLIN(LUNP,Q(K_PSF+I1-1),NSPRD,I)
48    CONTINUE
      GOTO 150

100   CALL OPENF(FILEP,LUNP,NSPRD,NSPRD,'OLD',NF,NDUM)
      IF(NF.EQ.1) THEN
	CALL ERRT(4,'RCONV',NE)
	RETURN
      ENDIF
C Memory
	K_Q = 1
	K_B = K_Q+NSPRD*NSAM
	K_PSF=K_B+NSAM
      MUBUF = K_PSF+NSPRD**2
      IF(MUBUF.GT.MBUF) THEN
      CALL ERRT(3,'RCONV',NE)
      RETURN
	ENDIF
c
	DO  I = 1,NSPRD
       I1 = (I-1)*NSPRD + 1
       CALL REDLIN(LUNP,Q(K_PSF+I1-1),NSPRD,I)
        ENDDO
150   CLOSE(LUNP)
c
C WRITE OUT PSF FOR VERIFICATION
1905  WRITE(NOUT,191)
191   FORMAT(' PSF IN EFFECT'/)
      K1 = 1
      K2 = K1+NSPRD-1
      DO  I = 1,NSPRD
      WRITE(NOUT,192)   (Q(K_PSF+K-1),K=K1,K2)
      K1 = K1+NSPRD
      K2 = K2+NSPRD
      ENDDO
192   FORMAT(1X,15F5.2)
d148 2
a149 2
	NQ=NSPRD/2
	CALL  RCNV2_P(LUN1,LUN2,Q(K_B),Q(K_Q),NSAM,NROW,Q(K_PSF),NQ)
d151 35
a185 35
	ELSE
C 3-D REAL CONVOLUTION WITH PSF READ FROM THE FILE
	CALL OPENF(FILEP,LUNP,NSPRD,NSPRD,'OLD',NF,NSPRD)
      IF(NF.EQ.1) THEN
	CALL ERRT(4,'RCONV',NE)
	RETURN
      ENDIF
      IF(NSAM*NROW*NSPRD+NSAM+NSPRD**3.GT.MBUF) THEN
        CALL ERRT(3,'RCONV',NE)
        RETURN
      ENDIF
      DO    K=1,NSPRD
      DO  I = 1,NSPRD
	NR=(K-1)*NSPRD+I
        I1 = (K-1)*NSPRD*NSPRD+(I-1)*NSPRD + 1
        CALL REDLIN(LUNP,Q(I1),NSPRD,NR)
      ENDDO
      ENDDO
850   CLOSE(LUNP)
      WRITE(NOUT,191)
	K1=1
	K2=NSPRD
	DO    K=1,NSPRD
	WRITE(NOUT,*)  K
	DO    I=1,NSPRD
	WRITE(NOUT,892)  (Q(J),J=K1,K2)
	K1=K1+NSPRD
	K2=K2+NSPRD
	ENDDO
	ENDDO
892	FORMAT(9(1X,1PE10.3))
C
	K1=NSPRD*NSPRD*NSPRD
	CALL  RCNV3_P(LUN1,LUN2,
     &	Q(NSAM*NROW*NSPRD+K1+1),Q(K1+1),NSAM,NROW,NSLICE,Q,NSPRD)
@


1.5
log
@*** empty log message ***
@
text
@a28 1
#ifdef SP_UNIX
a29 3
#else
	INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
a34 1
CNO_SAVE
d72 4
a75 1
      IF(NF.EQ.1) GOTO 105
d114 4
a117 5
      GOTO(105,110),NF
105   CALL ERRT(4,'RCONV',NE)
      RETURN

110     continue
d152 7
a158 5
      GOTO(105,810),NF

810   IF(NSAM*NROW*NSPRD+NSAM+NSPRD**3.GT.MBUF) THEN
      CALL ERRT(3,'RCONV',NE)
      RETURN
@


1.4
log
@change 1,1 to nloop,iloop in dpr* calls
@
text
@d86 1
a86 1
      DO 45 I = 1,NSPRD
d93 5
a97 3
      DO 44 K = I1,I2
44    A = A + Q(K_PSF+K-1)
45    CONTINUE
d106 1
a106 1
      DO 49 KK=1,NSPRD
d109 1
a109 1
49    CONTINUE
d131 4
a134 3
	DO 120 I = 1,NSPRD
      I1 = (I-1)*NSPRD + 1
120   CALL REDLIN(LUNP,Q(K_PSF+I1-1),NSPRD,I)
d142 1
a142 1
      DO 200 I = 1,NSPRD
d145 2
a146 1
200   K2 = K2+NSPRD
d161 2
a162 2
      DO  820  K=1,NSPRD
      DO 820 I = 1,NSPRD
d164 4
a167 2
      I1 = (K-1)*NSPRD*NSPRD+(I-1)*NSPRD + 1
820   CALL REDLIN(LUNP,Q(I1),NSPRD,NR)
d172 1
a172 1
	DO  830  K=1,NSPRD
d174 1
a174 1
	DO  830  I=1,NSPRD
d177 3
a179 1
830	K2=K2+NSPRD
@


1.3
log
@nosave
@
text
@d61 1
a61 1
405   CALL RDPRMI(NSPRD,NDUM,1,1,'PSF WIDTH$')
@


1.2
log
@cpp_lines_added
@
text
@d39 1
d69 1
a69 1
411   CALL ERRT(3,'RCONV',NE)
d71 1
a71 1
	ENDIF
d153 5
a157 2
810   IF(NSAM*NROW*NSPRD+NSAM+NSPRD**3.GT.MBUF) GOTO 411
	DO  820  K=1,NSPRD
@


1.1
log
@Initial revision
@
text
@d29 3
d33 1
@
