head	1.17;
access;
symbols
	pre_mrcs:1.17
	healthdept_2018:1.17
	pre_getangas:1.16
	GPL2010:1.16
	pre_GPL2010:1.15
	pre_var_equation:1.15
	pre_fftwrings:1.15
	pre_opfiles:1.15
	src:1.15
	best-code:1.15
	x-named-regs:1.15
	x:1.15
	v13-00:1.15
	pre_GPL:1.14
	prec_CA:1.8
	noindx:1.8
	Bproc:1.6
	oct21:1.3
	last77:1.3;
locks; strict;
comment	@c @;


1.17
date	2018.10.03.14.34.08;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2010.06.24.13.25.56;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.17.21.09.42;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2004.02.09.17.53.56;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2004.01.23.17.16.40;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.14.20.35.01;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2004.01.09.19.52.53;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2003.11.03.13.48.02;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.16.16.43.37;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.12.18.04.53;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.29.20.36.01;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2000.06.05.13.46.41;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.12.06.18.44.45;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.11.10.23.09.22;	author yuchen;	state Exp;
branches;
next	1.3;

1.3
date	96.10.04.19.33.04;	author ramani;	state Exp;
branches;
next	1.2;

1.2
date	96.01.16.15.47.29;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.49.38;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.17
log
@email_health_dept
@
text
@
C***********************************************************************
C INCOR3
C                         REWRITTEN      SEP 2003 ARDEAN LEITH
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  INCOR3(NUMIM,NPIX,NFAC,USE_PCA,
C         MATS,EVALS,WEIGHTI,WEIGHTP,TRACE,SUMW,IRTFLG)
C
C  PARAMETERS:
C       NUMIM	  NUMBER OF IMAGES                              (INPUT)
C	NPIX      NUMBER OF PIXELS PER IMAGE                    (INPUT)
C	NFAC 	  NUMBER OF EIGENVECTORS REQUESTED              (INPUT)
C	USE_PCA   CORAN VS PCA FLAG                             (INPUT)
C	MATS	  EIGENVECTOR ARRAY                             (OUTPUT)                                    (OUTPUT)
C	EVALS	  EIGENVALUE ARRAY                              (OUTPUT)
C	U	  INPUT BUFFER                                  (WORK)
C	WEIGHTI	  SUM OF PIXEL VALUES FOR THIS IMAGE             (INPUT)
C	WEIGHTP	  SUM OF PIXEL VALUES AT THIS PIXEL              (INPUT)
C	TRACE	  SUM OF THE ELEMENTS ARRAY DIAGONAL            (OUTPUT)
C	SUMW      SUM OF ALL THE PIXEL VALUES IN ALL IMAGES     (INPUT)
C	IRTFLG    ERROR FLAG                                    (OUTPUT)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************
        
        SUBROUTINE INCOR3(NUMIM,NPIX,NFAC,LUNS,USE_PCA,MATS,
     &                    EVALS,BLU,WEIGHTI,WEIGHTP,TRACE,SUMW,IRTFLG)
                                                  
        INCLUDE 'CMBLOCK.INC'

        REAL                              :: MATS(NPIX,NPIX)  
        REAL                              :: EVALS(NPIX)
        REAL                              :: WEIGHTP(NPIX)
        REAL                              :: WEIGHTI(NUMIM)
        REAL                              :: BLU(NPIX)
        REAL, ALLOCATABLE, DIMENSION(:,:) :: EVECTS

C       AUTOMATIC ARRAYS
        INTEGER,PARAMETER                 :: LWORK=100
        REAL                              :: WORK(LWORK*NPIX)
        INTEGER                           :: IWORK(5*NPIX)
        INTEGER                           :: IFAIL(NPIX)

        LOGICAL                           :: USE_PCA

C       SET MATS ARRAY = 0.0
        MATS     = 0.0

C       POSITION _SEQ FILE
        REWIND(LUNS)
        READ(LUNS,IOSTAT=IERR) NUMIMT,NPIXT

C       READ ALL THE ROWS. EACH ROW CONTAINS VALUES FROM ONE IMAGE

C       WE ARE ASSUMING ARRAY IS SYMMETRICAL.
C       COMPUTE  MATS(NUMIM,NUMIM) = MATS' . MATS WHERE MATS' IS MATS TRANSPOSE.

        DO I = 1, NUMIM
C          READ THE WHOLE IMAGE IN BLU ARRAY.
           READ(LUNS,IOSTAT=IERR) BLU,FIM

           IF (USE_PCA) THEN
              DO J=1,NPIX
                 DO JJ =1,J
                    MATS(J, JJ) = MATS(J,JJ) + (BLU(J) * BLU(JJ))   
                    MATS(JJ,J)  = MATS(J,JJ)   
                 ENDDO
              ENDDO
           ELSE
              PIA = WEIGHTI(I)

              DO J=1,NPIX
                 DO JJ =1,J
                    MATS(J,JJ) = MATS(J,JJ) + (BLU(J) * BLU(JJ)) /PIA 
                 ENDDO
              ENDDO
           ENDIF
        ENDDO

C       ALL THE IMAGES HAVE BEEN READ INTO MATS.

C       WEIGHTP(K) IS THE SUM OF THIS PIXEL IN ALL IMAGES.
        IF (USE_PCA) THEN
C          PCA
           DO J =  1, NPIX
             DO JJ  =  1, J
               MATS(J, JJ) =  (MATS(J, JJ) - 
     &                      (WEIGHTP(J) * WEIGHTP(JJ)) / NUMIM) 
               MATS(JJ, J) = MATS(J, JJ)                                 
             ENDDO
           ENDDO

        ELSE
C          CORAN
           DO J =1,NPIX
              DO JJ =1,J
                 AAA        =  SQRT(WEIGHTP(J) * WEIGHTP(JJ))
                 MATS(J,JJ) =  MATS(J, JJ) / AAA  -  AAA / SUMW
              ENDDO
           ENDDO
        ENDIF

C       THE "TRACE" OF A MATRIX IS THE SUM OF THE ELEMENTS ON DIAGONAL
        TRACE = 0.0
        DO J = 1, NPIX
           TRACE = TRACE + MATS(J, J)
        ENDDO

C       COMPUTE EIGENVALUES AND EIGENVECTORS.

#ifdef  SP_LAPACK

        ALLOCATE (EVECTS(NPIX,NPIX),STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
            MWANT = NPIX**2
            CALL ERRT(46,'EVECTS',MWANT)
            RETURN
        ENDIF

        LWORKT = LWORK * NPIX 
        WRITE(NOUT,*) ' Using LAPACK eigenvalues routine.'
        CALL ssyevx('V', 'A', 'L', NPIX, MATS, NPIX, 
     &              DUM,DUM, IDUM,IDUM,
     &              0.0, NGOT, EVALS, EVECTS, NPIX, 
     &              WORK, LWORKT, IWORK, IFAIL, IRTFLG)

         WRITE(NOUT,*)' RETURNED:',NGOT, 'EIGENVALUES.'

         WRITE(NOUT,*)
     &         ' USED LWORK: ',LWORKT,'  OPTIMAL LWORK: ', WORK(1)

C        REVERSE ORDER OF EIGENVALUES & EIGENVECTORS 
         IEND = NGOT / 2

         MATS = EVECTS
         IF (ALLOCATED(EVECTS)) DEALLOCATE(EVECTS)

         DO I=1,IEND
            IT         = NGOT-I+1
            TMP        = EVALS(I)
            EVALS(I)   = EVALS(IT)
            EVALS(IT)  = TMP

            BLU        = MATS(:,I)
            MATS(:,I)  = MATS(:,IT)
            MATS(:,IT) = BLU(:)
         ENDDO 

#else
         CALL VPROP(NPIX,  NPIX,  MATS, EVALS,  BLU,  IRTFLG)
#endif       
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(101,'DIAGONALIZATION FAILURE',IRTFLG)
           RETURN
        ENDIF

C       EVALS() HOLDS THE EIGENVALUES 
C       WHILE MATS() HOLDS THE CORRESPONDING EIGENVECTORS.

c       WRITE(NOUT,*) ' EIGENVALUES:'
c       WRITE(NOUT,90) (EVALS(K),K=1,NFAC)
c90     FORMAT(5(1PG12.5,' '))
c       WRITE(NOUT,*) ' EIGENVECTORS:'
c       DO I=1,NFAC
c            WRITE(NOUT,92) (MATS(K,I),K=1,NPIX)
c       ENDDO
c92     FORMAT(5(1PG12.5,' '),/,5(1PG12.5,' '),/,
c     &        5(1PG12.5,' '),/,5(1PG12.5,' '),/,1(1PG12.5,' ')/)

     
        IF (.NOT. USE_PCA) THEN
           DO L=1,NFAC
              DO K=1,NPIX
                MATS(K,L) = MATS(K,L) * SQRT(SUMW / WEIGHTP(K))
              ENDDO
           ENDDO
        ENDIF
  
        RETURN
        END

@


1.16
log
@GPL_2010
@
text
@d11 1
a11 1
C=* Email: spider@@wadsworth.org                                        *
@


1.15
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.14
log
@ssyevx work bug
@
text
@d6 23
a28 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.13
log
@file formats
@
text
@d47 2
a48 1
        REAL                              :: WORK(20*NPIX)
d128 2
a129 1
        LWORK = 100 * NPIX 
d133 1
a133 1
     &              WORK, LWORK, IWORK, IFAIL, IRTFLG)
d137 2
a138 1
         WRITE(NOUT,*)' USED LWORK: ',LWORK,'  OPTIMAL LWORK: ', WORK(1)
@


1.12
log
@CA SR  bug
@
text
@d15 1
a15 1
C         MATS,EVALS,WEIGHTi,WEIGHTP,TRACE,SUMW,IRTFLG)
d42 1
d56 4
d67 1
a67 1
           READ(LUNS,REC=I,IOSTAT=IERR) BLU
d155 1
a155 1
         CALL VPROP(NPIX,  NPIX,  MATS, EVALS,  U,  IRTFLG)
@


1.11
log
@allocation for vects instead of auto
@
text
@d14 2
a15 2
C  INCOR3(ITOT,JTOT,NFAC,LUNS,USE_PCA,
C         BLS,BLD,U,WEIGHTJ,TRACE,SOM,IRTFLG)
d18 2
a19 2
C       ITOT	  NUMBER OF IMAGES                              (INPUT)
C	JTOT      NUMBER OF PIXELS PER IMAGE                    (INPUT)
a20 1
C	LUNS	  SEQUENTIAL IMAGE I/O UNIT                     (INPUT)
d22 2
a23 2
C	BLS	  EIGENVECTOR ARRAY                             (OUTPUT)                                    (OUTPUT)
C	BLD	  EIGENVALUE ARRAY                              (OUTPUT)
d25 2
a26 1
C	WEIGHTJ   SUM OF ENTRIES IN ONE COLUMN OF X ARRAY.      (INPUT)
d28 1
a28 1
C	SOM       SUM OF ALL THE PIXEL VALUES IN ALL IMAGES     (OUTPUT)
a30 3
C  NOTE:  IMAGE ROW & COLUMNS MAY HAVE BEEN TRANSPOSED ALREADY
C         ON I/O UNIT LUNS
C
d34 2
a35 2
        SUBROUTINE INCOR3(ITOT,JTOT,NFAC,LUNS,USE_PCA,
     &                    BLS,BLD,U,WEIGHTJ,TRACE,SOM,IRTFLG)
d39 5
a43 4
        REAL                              :: BLS(JTOT,JTOT)  
        REAL                              :: BLD(JTOT), U(JTOT)
        REAL                              :: WEIGHTJ(JTOT)
        REAL, ALLOCATABLE, DIMENSION(:,:) :: VECTS
d46 34
a79 55
        REAL                 :: WORK(20*JTOT)
        INTEGER              :: IWORK(5*JTOT)
        INTEGER              :: IFAIL(JTOT)

        LOGICAL              :: USE_PCA

C       SKIP SEQUENTIAL INPUT FILE HEADER
        CALL REW(LUNS,1)

#ifndef  SP_LAPACK
C       SET BLS ARRAY = 0.0
        BLS     = 0.0
#endif

        SOM     = 0.0

C       READ ALL THE ROWS.
        DO  I  =  1, ITOT

C           READ THE WHOLE IMAGE/PIXELS IN U() ARRAY.
C	    THE 2D IMAGE WAS STORED AS A 1D ARRAY. SEE JPMSK1.F  

C	    WE HAVE AN ARRAY X(ITOT,JTOT). EACH IMAGE IS ONE LONG ROW U()
C           IN THE X ARRAY. X(I,*) = U().

            READ(LUNS) U, PIA

c           IF (I .EQ. 1) THEN
c             WRITE(NOUT,92) (U(K),K=1,10),WEIGHTJ(I)
c 92          FORMAT(5(1PG12.5,' '),/,5(1PG12.5,' '),/,
c     &              5(1PG12.5,' '),/,5(1PG12.5,' '),/,1(1PG12.5,' ')/)
c           ENDIF


C           PIA = SUM OF U(K), K=1,JTOT
C           SOM IS THE SUM OF ALL THE PIXEL VALUES IN ALL THE IMAGES.
            SOM = SOM + PIA

C           WE ARE ASSUMING THAT THE ARRAY IS SYMMETRICAL.
C	    COMPUTE  BLS(JTOT,JTOT) = X'. X WHERE X' IS X TRANSPOSE.

            IF (USE_PCA) THEN
               DO J=1,JTOT
                  DO JJ =1,J
                     BLS(J, JJ) = BLS(J,JJ) + (U(J) * U(JJ))   
                     BLS(JJ,J)  = BLS(J,JJ)   
                  ENDDO
               ENDDO
            ELSE
               DO J=1,JTOT
                  DO JJ =1,J
                     BLS(J,JJ) = BLS(J,JJ) + (U(J) * U(JJ)) / PIA 
                  ENDDO
               ENDDO
            ENDIF
d82 12
a93 1
C       ALL THE IMAGES HAVE BEEN READ.
d95 3
a97 3
        IF (.NOT. USE_PCA) THEN
C          WEIGHTJ(K) IS THE SUM OF ENTRIES IN ONE COLUMN OF X ARRAY.
           DO J =1,JTOT
d99 2
a100 3
                 AAA        =  SQRT(WEIGHTJ(J) * WEIGHTJ(JJ))
                 BLS(J,JJ)  =  BLS(J, JJ) / AAA  -  AAA / SOM
cc               BLS(JJ,J)  =  BLS(J, JJ)
d107 2
a108 2
        DO J=1, JTOT
           TRACE = TRACE + BLS(J, J)
d115 1
a115 1
        ALLOCATE (VECTS(JTOT,JTOT) STAT=IRTFLG)
d117 2
a118 2
            MWANT = JTOT**2
            CALL ERRT(46,'VECTS',MWANT)
d122 2
a123 2
        LWORK = 100 * JTOT 
        CALL ssyevx('V', 'A', 'L', JTOT, BLS, JTOT, 
d125 1
a125 1
     &              0.0, NGOT, BLD, VECTS, JTOT, 
a127 3
C                 ABSTOL,  M,  W,   Z,  LDZ, 
C                 WORK,   LWORK,  IWORK, IFAIL,IRTFLG)

d135 2
a136 2
         BLS = VECTS
         IF (ALLOCATED(VECTS))  DEALLOCATE(VECTS)
d139 8
a146 8
            IT             = NGOT-I+1
            TMP            = BLD(I)
            BLD(I)         = BLD(IT)
            BLD(IT)        = TMP

            U              = BLS(1:JTOT,I)
            BLS(1:JTOT,I)  = BLS(1:JTOT,IT)
            BLS(1:JTOT,IT) = U(1:JTOT)
d150 1
a150 1
         CALL VPROP(JTOT,  JTOT,  BLS, BLD,  U,  IRTFLG)
d152 2
a153 2
        IF (IRTFLG .NE. 0)  THEN
           CALL ERRT(102,'DIAGONALIZATION FAILURE',IRTFLG)
d157 2
a158 2
C       BLD() HOLDS THE EIGENVALUES 
C       WHILE BLS() HOLDS THE CORRESPONDING EIGENVECTORS.
d161 1
a161 1
c       WRITE(NOUT,90) (BLD(K),K=1,NFAC)
d165 1
a165 1
c            WRITE(NOUT,92) (BLS(K,I),K=1,JTOT)
d173 2
a174 2
              DO K=1,JTOT
                BLS(K,L) = BLS(K,L) * SQRT(SOM / WEIGHTJ(K))
a181 5
#ifdef NEVER
original old SPIDER
 1.63677E-06  1.78826E-06  1.87376E-06  1.93852E-06  2.14307E-06  
 2.21764E-06  2.31187E-06  2.35837E-06  2.63528E-06  4.35528E-06
#endif
@


1.10
log
@vects doubly defined bug
@
text
@d42 4
a45 3
        REAL                 :: BLS(JTOT,JTOT)  
        REAL                 :: BLD(JTOT), U(JTOT)
        REAL                 :: WEIGHTJ(JTOT)
a50 1
        REAL                 :: VECTS(JTOT,JTOT)
d57 1
d60 1
d127 8
d152 1
d169 1
a169 1
           CALL ERRT(102,'DIAGONALIZATION FAILURE ERROR',IRTFLG)
@


1.9
log
@CA & CL rewrite
@
text
@a44 1
        REAL                 :: VECTS(JTOT,JTOT)
@


1.8
log
@*** empty log message ***
@
text
@d2 1
a2 1
C***************************************************************************
d4 1
d14 2
a15 7
C INCOR3 (ITOT, JTOT, JACT, NFAC, S, D, U, PJ, TRACE, SOM, LSAV,  LUV)
C       ITOT	NUMBER OF IMAGES
C	JTOT    NUMBER OF PIXELS PER IMAGE
C       JACT    NUMBER OF ACTIVE IMAGES
C	NFAC 	NUMBER OF EIGENVECTORS REQUESTED
C	LSAV	SEQUENTIAL IMAGE FILE (INPUT)
C	LUV	LOGICAL FLAGS (1 = ACTIVE,  0 = INACTIVE)
d17 19
a35 1
C***************************************************************************
d37 2
a38 2
        SUBROUTINE INCOR3 (ITOT,  JTOT,  JACT,  NFAC,  S,  D,  U,  
     &                   PJ,  TRACE,  SOM,  LSAV,  LUV)
d42 12
a53 1
        REAL S(JTOT,JTOT), D(JTOT), U(JTOT), PJ(JTOT)
d55 2
a56 10
        INTEGER LUV(ITOT)
                                                  
        DO J  =  1, JTOT
          PJ(J)  =  0.0
        END DO
        DO J  =  1, JTOT
          DO JJ  =  1, J
            S(J, JJ) =  0.0
          END DO
        END DO
d58 2
a59 2
        CALL REW(LSAV, 1)
        SOM    =  0.0
d61 1
a61 1
C       READ ALL THE IMAGES.
d63 1
d65 3
a67 4
          IF (LUV(I) .EQ. 0)  THEN
C           INACTIVE IMAGE, SKIP IT.
            READ(LSAV)
          ELSE
a68 3
C           ACTIVE IMAGE. READ THE WHOLE IMAGE IN U() ARRAY.
C	    THE 2D IMAGE WAS STORED AS A 1D ARRAY. SEE JPMSK1.FOR ROUTINE.
C
d72 7
a78 1
            READ (LSAV)  (U(J), J = 1, JTOT),  PIA,  VAR,  IDPIXL
d80 2
a81 2
C           PIA = SUM OF ALL THE PIXEL VALUES (.GT. 0.5) IN ONE IMAGE.
C           PIA = SUM OF U(K), K=1,JTOT.
d83 1
a83 8
C           note: som = sum of pj(j)   (j=1,jtot)

            SOM  =  SOM  +  PIA
                                                      
C           PJ(K) IS THE SUM OF ENTRIES IN ONE COLUMN OF X ARRAY.
            DO  J = 1, JTOT
              PJ(J)  =  PJ(J)  +  U(J)
            END DO
a84 2
C           PIA = AMAX1(PIA, 1.0E - 8)
                           
d86 1
a86 1
C	    COMPUTE  S(JTOT,JTOT) = X'. X WHERE X' IS X TRANSPOSE.
d88 15
a102 7
            DO J  =  1, JTOT
              DO JJ  =  1, J
                S(J, JJ) =  S(J, JJ)  +  ( U(J) * U(JJ) ) / PIA
              END DO
            END DO
          END IF        
        END DO
d106 10
a115 11
C       DO J  =  1, JTOT
C         PJ(J) = AMAX1(PJ(J), 1.0E - 9)
C       END DO

        DO  J  =  1, JTOT
          DO  JJ  =  1, J
            AAA    =  SQRT(PJ(J) * PJ(JJ))
            S(J, JJ)  =  S(J, JJ)/AAA  -  AAA/SOM
            S(JJ, J)  =  S(J, JJ)
          END DO
        END DO
d117 1
a117 3
C       THE "TRACE" OF A MATRIX IS THE SUM OF THE ELEMENTS IN ITS DIAGONAL
C       TRACE = SUM A(II) I=1,MAX.
C
d120 2
a121 2
          TRACE = TRACE + S(J, J)
        END DO
d123 38
a160 9
C       EIGENVALUES AND EIGENVECTORS ARE COMPUTED.
C       ON RETURN FROM VPROP ROUTINE,
C       D() HOLDS THE EIGENVALUES WHILE S() HOLDS THE CORRESPONDING 
C	EIGENVECTORS.
C
        CALL VPROP (JTOT,  JTOT,  S,  D,  U,  KODE)
        IF (KODE  .NE.  0)  THEN
          CALL ERRT(102,'DIAGONALIZATION FAILURE. KODE',KODE)
          RETURN
d163 2
a164 5
        DO L=1, NFAC
          DO K=1, JTOT
            S(K, L) =  S(K, L) * SQRT(SOM / PJ(K))
          ENDDO
        ENDDO  
d166 19
d187 6
@


1.7
log
@ diagonalization comments removed
@
text
@d3 9
d13 1
a13 10
C **************************************************************************
C *  AUTHOR :                                                              *
C *  COPYRIGHT (C)1987 , WADSWORTH CENTER FOR LABORATORIES AND             *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
C
d19 1
a19 1
C	LUV	LOGICAL UTILITY VECTOR (1 = ACTIVE,  0 = INACTIVE)
a28 1
C     &       TRACE, SOM, PIA, VAR
d41 1
a41 1
        CALL REW ( LSAV,  1)
d47 1
a47 2
          IF(LUV(I) .EQ. 0)  THEN

a48 1

a56 1
C
a59 1
C           NOTE 
a63 1
C
a67 2
C

d72 1
a72 1
C            PIA = AMAX1(PIA, 1.0E - 8)
d76 1
a76 1
C
d87 3
a89 3
C        DO J  =  1, JTOT
C          PJ(J) = AMAX1(PJ(J), 1.0E - 9)
C        END DO
d99 2
a100 2
C       THE "trace" OF A MATRIX IS THE SUM OF THE ELEMENTS IN ITS DIAGONAL
C       trace = sum a(ii) i=1,max.
d102 3
a104 3
        TRACE  =  0.0
        DO J  =  1, JTOT
          TRACE  =  TRACE  +  S(J, J)
a106 6
c	do j=1,jtot
c	write(9,500)(s(j,i),i=1,jtot)
c500	format(5(2x,e10.3))
c	end do


d114 2
a115 3
          WRITE (NOUT, 1000)  KODE
1000      FORMAT('*** FATAL ERROR IN DIAGONALIZATION. KODE=',I4)
          CALL ERRT(100,'INCOR3',NDUM)
d118 2
a119 2
        DO L  =  1, NFAC
          DO  K  =  1, JTOT
d121 2
a122 2
          END DO
        END DO  
@


1.6
log
@nout
@
text
@d121 1
a121 1
C       DIAGONALISATION: EIGENVALUES AND EIGENVECTORS ARE COMPUTED.
a130 1
          STOP 'ABNORMAL TERMINATION'
@


1.5
log
@header
@
text
@a3 1
C
d25 2
a27 3
                                                  
C        INTEGER I, J, JJ, IDPIXL, KODE, L, K, LSAV
C        INTEGER*4  JTOT, ITOT, NFAC, JACT
d30 1
a92 1
C
a93 1
C
d114 1
a114 1
c
d119 2
a120 2
c
c
d128 1
a128 1
          WRITE (6, 1000)  KODE
d130 2
a131 1
          STOP 'abnormal termination'
@


1.4
log
@a
@
text
@a1 1
C
d15 6
a22 1
C
a26 6
C       ITOT	NUMBER OF IMAGES
C	JTOT    NUMBER OF PIXELS PER IMAGE
C       JACT    NUMBER OF ACTIVE IMAGES
C	NFAC 	NUMBER OF EIGENVECTORS REQUESTED
C	LSAV	SEQUENTIAL IMAGE FILE (INPUT)
C	LUV	LOGICAL UTILITY VECTOR (1 = ACTIVE,  0 = INACTIVE)
a45 1
C
a46 1
C
d52 1
a52 1
C
@


1.3
log
@tests done
@
text
@d35 1
a35 1
CNO_SAVE                                                  
@


1.2
log
@nosave
@
text
@d121 7
a127 1

@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
                                                  
@
