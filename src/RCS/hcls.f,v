head	1.35;
access;
symbols
	healthdept_2018:1.35
	pre_getangas:1.31
	GPL2010:1.31
	pre_GPL2010:1.30
	pre_var_equation:1.30
	pre_fftwrings:1.30
	pre_opfiles:1.30
	src:1.30
	best-code:1.30
	x-named-regs:1.30
	x:1.30
	v13-00:1.30
	pre_GPL:1.28
	prec_CA:1.21
	noindx:1.21
	Bproc:1.19
	oct21:1.17
	last77:1.15;
locks; strict;
comment	@c @;


1.35
date	2018.10.03.14.34.07;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2013.05.09.18.21.26;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2013.05.06.18.36.13;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2011.10.19.19.49.41;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2010.06.24.13.25.53;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2005.10.17.20.19.17;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2005.10.17.18.12.09;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2004.05.12.16.53.07;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2004.05.12.16.49.51;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2004.05.12.16.30.00;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2004.02.10.18.43.27;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2004.01.23.18.42.22;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2004.01.20.21.36.47;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2003.10.16.16.46.10;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2002.03.11.14.08.06;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2001.01.03.21.47.08;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	99.12.06.18.41.25;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	99.12.03.20.33.46;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	99.08.09.19.15.25;	author pawel;	state Exp;
branches;
next	1.16;

1.16
date	99.07.27.15.18.59;	author pawel;	state Exp;
branches;
next	1.15;

1.15
date	98.04.06.20.01.30;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	98.04.06.19.15.58;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	98.04.01.23.17.18;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	97.10.09.14.29.33;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	97.08.15.16.59.47;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	96.12.03.15.34.26;	author mladjadj;	state Exp;
branches;
next	1.9;

1.9
date	96.12.02.21.43.43;	author mladjadj;	state Exp;
branches;
next	1.8;

1.8
date	95.10.03.18.46.32;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	95.08.09.13.49.56;	author mladjadj;	state Exp;
branches;
next	1.6;

1.6
date	95.08.08.17.35.18;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	95.08.03.16.00.05;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.08.01.18.16.09;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.02.02.21.13.58;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.06.13;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.49.30;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.35
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C  HCLS.F
C               USED ALLOCATE                    JAN 2001 ARDEAN LEITH
C               Q** ALLOC                        MAY 2013 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  HCLS(LUNF,LUNT,LUND)
C
C  CALL TREE:  HCLS -> HCLP -> DIST_P
C                              CHAVA
C                              DENDRO
C                              DENDRO2
C                              ARBRE
C                              DENLST 
C
C--*********************************************************************

         SUBROUTINE HCLS(LUNF,LUNT,LUND)

         IMPLICIT NONE

         INCLUDE 'CMBLOCK.INC' 
         INCLUDE 'CMLIMIT.INC' 

         INTEGER               :: LUNF,LUNT,LUND

         REAL, ALLOCATABLE     :: Q_K_W(:),    Q_MEMD( :), Q_MEMPK(:)
         REAL, ALLOCATABLE     :: Q_MEMVAL(:), Q_MEMLA(:), Q_MEMLB(:)     &            Q_MEMNT( :),
         REAL, ALLOCATABLE     :: Q_MEMNT(:),  Q_MEMNO(:), Q_MEMIV(:)
         REAL, ALLOCATABLE     :: Q_MEMIW(:),  Q_MEMV(:),  Q_MEMW(:) 

         CHARACTER(LEN=MAXNAM) :: FILNAM
         CHARACTER(LEN=MAXNAM) :: FILNAMT
         CHARACTER(LEN=1)      :: NULL = CHAR(0)

         INTEGER *8            :: MEMTOT_8,MDIM_8

         INTEGER               :: NLET,IRTFLG,IT,ITYPE,NKLA,NFAC
         INTEGER               :: MAXFAC,MAXFA,MINFAC,NE,IER,I
         INTEGER               :: JFIN,NOT_USED,MODE
         REAL                  :: W1

         WRITE(NOUT,*) ' YOU MAY USE A _IMC, _PIX, or _SEQ FILE'
         WRITE(NOUT,*) ' '

         CALL FILERD(FILNAM,NLET,NULL,
     &              'CORAN/PCA FILE (e.g. CORAN_01_IMC)~',IRTFLG)
         IF (IRTFLG .NE. 0) RETURN

         IT = INDEX(FILNAM,'_SEQ')
         IF (IT > 0) THEN
            ITYPE = 1
            WRITE(NOUT,*)' For _SEQ coordinates file ---'
            CALL OPAUXFILE(.FALSE.,FILNAM,DATEXC,-LUNF,0,
     &                 'O',' ',.TRUE.,IRTFLG)
            IF (IRTFLG .NE. 0) RETURN

            READ(LUNF)  NKLA,NFAC

         ELSEIF(INDEX(FILNAM,'_IMC') > 0) THEN
            CALL OPAUXFILE(.FALSE.,FILNAM,DATEXC,LUNF,0,
     &                 'O',' ',.TRUE.,IRTFLG)
            IF (IRTFLG .NE. 0) RETURN
            ITYPE = 2
            WRITE(NOUT,*)' In image coordinates file ---'
            READ(LUNF,*)  NKLA,NFAC

         ELSEIF(INDEX(FILNAM,'_PIX') > 0) THEN
            CALL OPAUXFILE(.FALSE.,FILNAM,DATEXC,LUNF,0,
     &                 'O',' ',.TRUE.,IRTFLG)
            IF (IRTFLG .NE. 0) RETURN
            ITYPE = 3
            WRITE(NOUT,*)' In pixel coordinates file ---'
            READ(LUNF,*)  NKLA,NFAC

         ELSE
            CALL ERRT(101,'INVALID INPUT FILE TYPE',NE)
            RETURN
         ENDIF

         WRITE(NOUT,*)' Number of objects: ', NKLA
         WRITE(NOUT,*)' Number of factors: ', NFAC

         MAXFAC = NFAC
         MAXFA  = NFAC
         MINFAC = 1
         CALL  RDPRAI(INUMBR,NFAC,MAXFA, MINFAC,MAXFAC,
     &            'FACTOR NUMBERS',NULL,IER)
     
C        DIMENSION  W(MAXFA),COO(NFAC),COB(NFAC),INUM(MAXFA)

         
C        CALCULATE NUMBER OF FACTORS
         MDIM_8    = NKLA                    ! FOR BIG NKLA
         MDIM_8    = MDIM_8 * (NKLA-1) / 2   ! FOR BIG NKLA

         JFIN     = 2 * NKLA - 1

         MEMTOT_8 = NFAC + MDIM_8 + 2*JFIN + 2*NKLA + 2*JFIN +
     &              4*NKLA

         WRITE(NOUT,*) ' DYNAMIC MEMORY ALLOCATION: ',MEMTOT_8

         ALLOCATE(Q_K_W(   NFAC),
     &            Q_MEMD(  MDIM_8),
     &            Q_MEMPK( JFIN),
     &            Q_MEMVAL(JFIN),
     &            Q_MEMLA( NKLA),
     &            Q_MEMLB( NKLA),
     &            Q_MEMNT( JFIN),
     &            Q_MEMNO( JFIN),
     &            Q_MEMIV( NKLA),
     &            Q_MEMIW( NKLA),
     &            Q_MEMV(  NKLA),
     &            Q_MEMW(  NKLA),
     &            STAT=IRTFLG)
         IF (IRTFLG .NE. 0) THEN
            WRITE(NOUT,*) '*** UNABLE TO ALLOCATE MEMORY:',MEMTOT_8
            CALL ERRT(46,'HCLS; Q...',MEMTOT_8)
            RETURN
         ENDIF
 
         DO I=1,MAXFA
            Q_K_W(I) = 1.0
         ENDDO

         DO I=1,MAXFA
            CALL  RDPRM(W1,NOT_USED,'FACTOR WEIGHT')
            IF (W1 == 0.0) EXIT
            Q_K_W(I) = W1
         ENDDO

201      WRITE(NOUT,*) ' FACTOR WEIGHTS USED:'
         WRITE(NOUT,23)  (Q_K_W(I),I=1,MAXFA)
23       FORMAT(10(2X,G10.3))

         CALL RDPRI1S(MODE,NOT_USED,
     &                 'CLUSTERING CRITERION (1-5)',IRTFLG)
         IF (IRTFLG .NE. 0) GOTO 9999

         CALL  HCLP(NKLA,MDIM_8,JFIN,
     &         Q_K_W, INUMBR,MAXFA,NFAC,
     &         Q_MEMD, Q_MEMPK, Q_MEMVAL,
     &         Q_MEMLA,Q_MEMLB, Q_MEMNT,
     &         Q_MEMNO,Q_MEMIV, Q_MEMIW, Q_MEMV,
     &         Q_MEMW, LUNF,LUND,LUNT,MODE,ITYPE)
 

9999     IF (ALLOCATED(Q_K_W))   DEALLOCATE(Q_K_W)
         IF (ALLOCATED(Q_MEMD))  DEALLOCATE(Q_MEMD)
         IF (ALLOCATED(Q_MEMPK)) DEALLOCATE(Q_MEMPK)
         IF (ALLOCATED(Q_MEMVAL))DEALLOCATE(Q_MEMVAL)
         IF (ALLOCATED(Q_MEMLA)) DEALLOCATE(Q_MEMLA)
         IF (ALLOCATED(Q_MEMLB)) DEALLOCATE(Q_MEMLB)
         IF (ALLOCATED(Q_MEMNT)) DEALLOCATE(Q_MEMNT)
         IF (ALLOCATED(Q_MEMNO)) DEALLOCATE(Q_MEMNO)
         IF (ALLOCATED(Q_MEMIV)) DEALLOCATE(Q_MEMIV)
         IF (ALLOCATED(Q_MEMIW)) DEALLOCATE(Q_MEMIW)
         IF (ALLOCATED(Q_MEMV))  DEALLOCATE(Q_MEMV)
         IF (ALLOCATED(Q_MEMW))  DEALLOCATE(Q_MEMW)

         WRITE (NDAT,2600)
2600     FORMAT (/' ',10('-'),'END OF HIERARCHICAL CLUSTERING',10('-')/)

         END
@


1.34
log
@*** empty log message ***
@
text
@d14 1
a14 1
C=* Email: spider@@wadsworth.org                                        *
@


1.33
log
@>2gb alloc
@
text
@d5 2
a6 1
C               USED ALLOCATE JAN 2001 ARDEAN LEITH
d50 4
a53 4
         REAL, ALLOCATABLE     :: Q_K_W(:),   Q_MEMD( :),Q_MEMPK(:)
         REAL, ALLOCATABLE     :: Q_MEMVAL(:),Q_MEMLA(:),Q_MEMLB(:)     &            Q_MEMNT( :),
         REAL, ALLOCATABLE     :: Q_MEMNT(:), Q_MEMNO(:),Q_MEMIV(:)
         REAL, ALLOCATABLE     :: Q_MEMIW(:), Q_MEMV(:),  Q_MEMW(:) 
d123 1
a123 1
     &            4*NKLA
d142 1
a142 1
            CALL ERRT(46,'HCLS; Q',MEMTOT_8)
d156 1
a156 1
201      WRITE(NOUT,*) '  FACTOR WEIGHTS USED:'
@


1.32
log
@allocation trap
@
text
@d42 2
d47 7
a53 1
         REAL, ALLOCATABLE     :: Q(:)
d56 1
a56 1
         CHARACTER(LEN=1)      :: NULL
d58 1
a58 2
         INTEGER *8            :: MDIM8,HUG8
         INTEGER               :: MDIM 
d60 4
a63 1
         NULL = CHAR(0)
d73 1
a73 1
         IF (IT .GT. 0) THEN
d82 1
a82 1
         ELSEIF(INDEX(FILNAM,'_IMC') .GT. 0) THEN
d90 1
a90 1
         ELSEIF(INDEX(FILNAM,'_PIX') .GT. 0) THEN
d108 1
a108 1
	 MINFAC = 1
d110 1
a110 1
     &	          'FACTOR NUMBERS',NULL,IER)
d114 1
a114 2
         K_W   = 1 
	 
d116 2
a117 10
         MDIM8  = NKLA 
         MDIM8  = MDIM8 * (NKLA-1) / 2   ! FOR BIG NKLA
         HUG8   = HUGE(IT) / 2

         IF (MDIM8 > HUG8) THEN
             WRITE(NOUT,*) '*** ALLOCATION NEEDED:',MDIM8
             WRITE(6,*) ' *** ALLOCATION NEEDED:',MDIM8
             CALL ERRT(101, 'EXCESSIVE ALLOCATION FOR DISTANCES',NE)
             RETURN
         ENDIF
d119 1
a119 1
         MDIM   = MDIM8
d121 2
a122 1
         JFIN   = 2 * NKLA - 1
d124 18
a141 17
         MEMD   = IPALIGN64(K_W+NFAC)
         MEMPK  = IPALIGN64(MEMD+MDIM)
         MEMVAL = IPALIGN64(MEMPK+JFIN)
         MEMLA  = IPALIGN64(MEMVAL+JFIN)
         MEMLB  = IPALIGN64(MEMLA+NKLA)
         MEMNT  = IPALIGN64(MEMLB+NKLA)
         MEMNO  = IPALIGN64(MEMNT+JFIN)
         MEMTOT = IPALIGN64(MEMNO+JFIN)
         MEMIV  = MEMD
         MEMIW  = IPALIGN64(MEMIV+NKLA)
         MEMV   = IPALIGN64(MEMIW+NKLA)
         MEMW   = IPALIGN64(MEMV+NKLA)
         MEMTOT = MAX(MEMTOT,IPALIGN64(MEMW+NKLA))
	 
         ALLOCATE(Q(MEMTOT),STAT=IRTFLG)
	 IF (IRTFLG .NE. 0) THEN
            CALL ERRT(46,'HCLS; Q',MEMTOT)
d145 2
a146 4
         WRITE(NOUT,*) ' DYNAMIC MEMORY ALLOCATION: ',MEMTOT
	    
         DO I=0,MAXFA-1
            Q(K_W+I) = 1.0
d149 1
a149 1
         DO I=0,MAXFA-1
d151 2
a152 2
            IF (W1 .EQ. 0.0)  EXIT
            Q(K_W+I) = W1
d156 1
a156 1
         WRITE(NOUT,23)  (Q(K_W+I),I=0,MAXFA-1)
d163 6
a168 6
         CALL  HCLP(NKLA,MDIM,JFIN,
     &         Q(K_W),INUMBR,MAXFA,NFAC,
     &         Q(MEMD),Q(MEMPK),Q(MEMVAL),
     &         Q(MEMLA),Q(MEMLB),Q(MEMNT),
     &         Q(MEMNO),Q(MEMIV),Q(MEMIW),Q(MEMV),
     &         Q(MEMW),LUNF,LUND,LUNT,MODE,ITYPE)
d170 14
a183 2
9999     IF (ALLOCATED(Q)) DEALLOCATE(Q) 
	    
@


1.31
log
@GPL_2010
@
text
@d45 7
a51 4
         REAL, ALLOCATABLE, DIMENSION(:) ::  Q
         CHARACTER(LEN=MAXNAM)           :: FILNAM
         CHARACTER(LEN=MAXNAM)           :: FILNAMT
         CHARACTER(LEN=1)                :: NULL
d107 13
a119 1
         MDIM   = NKLA * (NKLA-1) / 2
d134 1
a134 1
         MEMTOT = MAX0(MEMTOT,IPALIGN64(MEMW+NKLA))
@


1.30
log
@GPL License fixed
@
text
@a7 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d9 5
a13 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d15 1
a15 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.29
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a7 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d11 1
a11 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a30 6

C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a42 1
C--************************************************************************
@


1.28
log
@output line formatting
@
text
@d2 1
d10 24
d50 1
@


1.27
log
@cosmetic
@
text
@d128 1
a128 1
23       FORMAT(10(1X,G10.3))
@


1.26
log
@did not work with _PIX type
@
text
@d7 8
a14 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
C **************************************************************************
d49 1
a49 1
            WRITE(NOUT,*)'  For _SEQ coordinates file ---'
d61 1
a61 1
            WRITE(NOUT,*)'  In image coordinates file ---'
d69 1
a69 1
            WRITE(NOUT,*)'  In pixel coordinates file ---'
d77 2
a78 2
         WRITE(NOUT,*)'  Number of objects: ', NKLA
         WRITE(NOUT,*)'  Number of factors: ', NFAC
d144 1
a144 1
2600     FORMAT (/' ',12('-'),'END OF HIERARCHICAL CLUSTERING',12('-')/)
@


1.25
log
@1+80 bug on faces
@
text
@d65 1
a65 1
         ELSEIF(INDEX(FILNAM,'_IMC') .GT. 0) THEN
@


1.24
log
@file formats changed
@
text
@d19 7
a89 2
         K_COO = IPALIGN64(K_W+MAXFA)
         K_COB = IPALIGN64(K_COO+NFAC)
d95 1
a95 1
         MEMD   = IPALIGN64(K_COB+NFAC)
d98 1
a98 2
         MEMIDK = IPALIGN64(MEMVAL+JFIN)
         MEMLA  = IPALIGN64(MEMIDK+NKLA)
d103 1
a103 2
         MEMNUM = MEMD
         MEMIV  = IPALIGN64(MEMNUM+NKLA)
d111 1
a111 1
            CALL ERRT(46,'Q',MEMTOT)
d136 2
a137 2
     &         Q(K_W),INUMBR,Q(K_COO),Q(K_COB),MAXFA,NFAC,
     &         Q(MEMD),Q(MEMPK),Q(MEMVAL),Q(MEMIDK),
d139 1
a139 1
     &         Q(MEMNO),Q(MEMNUM),Q(MEMIV),Q(MEMIW),Q(MEMV),
d145 1
a145 3
2600     FORMAT (//' ',70('-'),//
     &             ' ',28X, 'END OF HIERARCHICAL CLUSTERING',/,
     &             ' ',70('-'))
d147 1
a147 1
        END
@


1.23
log
@_seq file format changed
@
text
@d33 1
a33 1
         WRITE(NOUT,*) ' YOU MAY USE A _SEQ, _EIG, or _IMC FILE'
d50 1
a50 1
         ELSE IF(INDEX(FILNAM,'_IMC') .GT. 0) THEN
d58 1
a58 1
         ELSE
d65 4
@


1.22
log
@CA & CL rewrite
@
text
@d28 1
d40 4
a43 1
         IF (INDEX(FILNAM,'_SEQ') .GT. 0) THEN
d46 1
a46 5
         ELSE
            CALL OPAUXFILE(.FALSE.,FILNAM,DATEXC,LUNF,0,
     &                 'O',' ',.TRUE.,IRTFLG)
         ENDIF
         IF (IRTFLG .NE. 0) RETURN
d48 1
a49 4
         IF (INDEX(FILNAM,'_SEQ') .GT. 0) THEN
            ITYPE = 1
            WRITE(NOUT,*)'  In sequential coordinates file ---'
            READ(LUNF)  NKLA,NFAC
d51 3
d57 1
d59 3
d67 2
a68 2
         WRITE(NOUT,*)'  Number of objects:', NKLA
         WRITE(NOUT,*)'  Number of factors', NFAC
@


1.21
log
@nloop,iloop_removed
@
text
@d16 3
a18 1
C  HCLS(MAXMEM)
d21 1
a21 1
         SUBROUTINE HCLS(MAXMEM)
d24 1
d27 4
a30 1
         COMMON    INUM(1)
d32 6
a37 2
C        IMP - OUTPUT USED IN CHAVA
         COMMON  /ENSOR/  LMP,IMP
d39 3
a41 17
         CHARACTER*81  CLUSTI,FILPAT
         CHARACTER*140 CLUST
         CHARACTER*1   NULL
         INTEGER       ONE_1

         NULL=CHAR(0)
         IMP = NDAT

         ONE_1 = 1
         CALL  RDPRMI(ITYPE,I, NOT_USED,
     &        'ENTER DATA FILENAME TYPE (SEQ(1), IMC(2) or PIX(3))')
         CALL  RDPRMI(ICODE,I,NOT_USED,
     &        'ENTER COORDINATES FILE CODE')
         IF (ITYPE .EQ. 1) THEN
            FILPAT(1:3) = 'SEQ'
         ELSE IF(ITYPE .EQ. 2) THEN
            FILPAT(1:3) = 'IMC'
d43 14
a56 5
            FILPAT(1:3) = 'PIX'
         END IF
         IF(ICODE .GE. 1000) THEN
            FILPAT(4:11) = '****'//NULL//NULL//NULL//NULL
            NLET = 7
d58 4
a61 7
            FILPAT(4:11) = '***'//NULL//NULL//NULL//NULL//NULL
            NLET = 6
         END IF

         IRTFLG = 0
         CALL FILGET(FILPAT, CLUSTI, NLET, ICODE, IRTFLG)
         IF (IRTFLG .NE. 0) RETURN
d63 2
a64 2
         CALL  FILCAN(CLUST,NF,NULL,NULL,CLUSTI,DATEXC,IER)
         IF (IER .NE. 0) RETURN
a65 8
C        ONLY NEW VERSION OF CLUSTER FILE ALLOWED
         OPEN(FILE=CLUST,UNIT=111,STATUS='OLD',FORM='UNFORMATTED')
         READ(111)  NKLA,NFAC

         WRITE(NOUT,33)  NKLA,NFAC
33       FORMAT('   Number of objects and number of factors',
     &          ' in image coordinates file:',/,2I10)
C
d69 1
a69 1
         CALL  RDPRAI(INUM,NFAC,MAXFA,MINFAC,MAXFAC,
d79 2
a80 2
         MDIM=NKLA*(NKLA-1)/2
         JFIN=2*NKLA-1
d82 15
a96 15
         MEMD=IPALIGN64(K_COB+NFAC)
         MEMPK=IPALIGN64(MEMD+MDIM)
         MEMVAL=IPALIGN64(MEMPK+JFIN)
         MEMIDK=IPALIGN64(MEMVAL+JFIN)
         MEMLA=IPALIGN64(MEMIDK+NKLA)
         MEMLB=IPALIGN64(MEMLA+NKLA)
         MEMNT=IPALIGN64(MEMLB+NKLA)
         MEMNO=IPALIGN64(MEMNT+JFIN)
         MEMTOT=IPALIGN64(MEMNO+JFIN)
         MEMNUM=MEMD
         MEMIV=IPALIGN64(MEMNUM+NKLA)
         MEMIW=IPALIGN64(MEMIV+NKLA)
         MEMV=IPALIGN64(MEMIW+NKLA)
         MEMW=IPALIGN64(MEMV+NKLA)
         MEMTOT=MAX0(MEMTOT,IPALIGN64(MEMW+NKLA))
d100 1
a100 1
            CALL ERRT(102,'UNABLE TO ALLOCATE Q',MEMTOT)
d104 1
a104 3
         WRITE (NOUT,2500)  MEMTOT
2500     FORMAT (/ ' DYNAMICAL MEMORY ALLOCATION: YOU HAVE',
     &             ' RESERVED ',I9 / )
d106 1
a106 1
         DO  I=0,MAXFA-1
d108 1
a108 1
         END DO
d112 1
a112 1
            IF (W1 .EQ. 0.0)  GOTO  201
d116 1
a116 1
201      WRITE(NOUT,*) ' FACTOR WEIGHTS USED:'
d119 5
d125 1
a125 1
     &         Q(K_W),INUM,Q(K_COO),Q(K_COB),MAXFA,NFAC,
d129 1
a129 1
     &         Q(MEMW))
d131 1
a131 1
         IF (ALLOCATED(Q)) DEALLOCATE(Q) 
@


1.20
log
@used allocate not chkmem
@
text
@d38 1
a38 1
         CALL  RDPRMI(ITYPE,I, NLOOP,ILOOP,
d40 1
a40 1
         CALL  RDPRMI(ICODE,I,NLOOP,ILOOP,
d119 1
a119 1
            CALL  RDPRM(W1,NLOOP,ILOOP,'FACTOR WEIGHT')
@


1.19
log
@header
@
text
@d4 2
a5 1
C  HCLS.FOR
d16 1
a16 1
C
d22 4
a25 6
         INCLUDE 'F90ALLOC.INC'
         REAL, DIMENSION(:), POINTER :: IPQ
         REAL, DIMENSION(:), POINTER :: Q
         LOGICAL   RUNTIME
         COMMON  DUMMY(8),BAF(1)
         EQUIVALENCE  (INUM,BAF)
d28 1
a28 1
C
d31 3
a33 2
         CHARACTER*1  NULL
         INTEGER ICODE,ITYPE,ONE_1
d35 1
a35 1
         IMP=NDAT
d39 1
a39 1
     $        'ENTER DATA FILENAME TYPE (SEQ(1), IMC(2) or PIX(3))')
d41 1
a41 1
     $        'ENTER COORDINATES FILE CODE')
d43 1
a43 1
           FILPAT(1:3) = 'SEQ'
d45 1
a45 1
           FILPAT(1:3) = 'IMC'
d47 1
a47 1
           FILPAT(1:3) = 'PIX'
d50 2
a51 2
           FILPAT(4:11) = '****'//NULL//NULL//NULL//NULL
           NLET = 7
d53 2
a54 2
           FILPAT(4:11) = '***'//NULL//NULL//NULL//NULL//NULL
           NLET = 6
d60 1
d64 1
a64 3
C
C  ONLY NEW VERSION OF CLUSTER FILE ALLOWED

d70 1
a70 1
     &   ' in image coordinates file:',/,2I10)
d72 3
a74 3
         MAXFAC=NFAC
         MAXFA=NFAC
	 MINFAC=1
d78 1
a78 1
C         DIMENSION  W(MAXFA),COO(NFAC),COB(NFAC),INUM(MAXFA)
d80 3
a82 5
         K_INUM=1
	  
         K_W=1 
         K_COO=IPALIGN64(K_W+MAXFA)
         K_COB=IPALIGN64(K_COO+NFAC)
d104 9
a112 36
         CALL CHKMEM(MEMTOT, BAF, MAXMEM-8,RUNTIME,IPQ,IRTFLG)
	 IF (IRTFLG.EQ.0) THEN
            IF (RUNTIME)  THEN
               WRITE (NOUT,2500)  MEMTOT
2500           FORMAT (/ ' DYNAMICAL MEMORY ALLOCATION:  YOU HAVE',
     &                   ' RESERVED ',I9 / )
            ELSE 
		K_INUM=1
		K_W=IPALIGN64(K_INUM+MAXFA)
		K_COO=IPALIGN64(K_W+MAXFA)
		K_COB=IPALIGN64(K_COO+NFAC)
	 
C              CALCULATE NUMBER OF FACTORS
		MDIM=NKLA*(NKLA-1)/2
		JFIN=2*NKLA-1

		MEMD=IPALIGN64(K_COB+NFAC)
		MEMPK=IPALIGN64(MEMD+MDIM)
		MEMVAL=IPALIGN64(MEMPK+JFIN)
		MEMIDK=IPALIGN64(MEMVAL+JFIN)
		MEMLA=IPALIGN64(MEMIDK+NKLA)
		MEMLB=IPALIGN64(MEMLA+NKLA)
		MEMNT=IPALIGN64(MEMLB+NKLA)
		MEMNO=IPALIGN64(MEMNT+JFIN)
		MEMTOT=IPALIGN64(MEMNO+JFIN)
		MEMNUM=MEMD
		MEMIV=IPALIGN64(MEMNUM+NKLA)
		MEMIW=IPALIGN64(MEMIV+NKLA)
		MEMV=IPALIGN64(MEMIW+NKLA)
		MEMW=IPALIGN64(MEMV+NKLA)
		MEMTOT=MAX0(MEMTOT,IPALIGN64(MEMW+NKLA))
	     
                  WRITE (NOUT,2501)  MAXMEM , MEMTOT
2501              FORMAT (/ ' MEMORY RESERVATION:  YOU HAVE',
     &              ' RESERVED ',I9,',  YOU NEED  ',I9 / )  
            END IF
d114 14
a127 15
         Q = >IPQ
            DO  I=0,MAXFA-1
               Q(K_W+I)=1.0
            END DO

            DO    I=0,MAXFA-1
               CALL  RDPRM(W1,NLOOP,ILOOP,'FACTOR WEIGHT')
               IF(W1.EQ.0.0)  GOTO  201
               Q(K_W+I)=W1
	    ENDDO

201         WRITE(NOUT,*) ' FACTOR WEIGHTS USED:'
            WRITE(NOUT,23)  (Q(K_W+I),I=0,MAXFA-1)
23          FORMAT(10(1X,G10.3))
            CALL  HCLP(NKLA,MDIM,JFIN,
d134 1
a134 1
            IF (RUNTIME) CALL ALLOCIT(0,RUNTIME,IPQ,'HCLS',IRTFLG) 
d136 6
a141 9
            WRITE (NDAT,2600)
2600        FORMAT (//' ',80('-')//' ',28X,
     &           'END OF HIERARCHICAL CLUSTERING',/, 80('-'))
         ELSE
            WRITE(NOUT,*)
     &      ' *** BUFFER TOO SMALL - PROGRAM CANNOT BE RUN!'
            CALL ERRT(100,'HCLS',NE)
         ENDIF
         END
@


1.18
log
@ # continue char fails on NT f90
@
text
@d19 5
a23 4
          INCLUDE 'CMBLOCK.INC' 
        INCLUDE 'F90ALLOC.INC'
        REAL, DIMENSION(:), POINTER :: IPQ
        REAL, DIMENSION(:), POINTER :: Q
@


1.17
log
@*** empty log message ***
@
text
@d111 1
a111 1
     #                   ' RESERVED ',I9 / )
d140 1
a140 1
     #              ' RESERVED ',I9,',  YOU NEED  ',I9 / )  
d168 1
a168 1
     #           'END OF HIERARCHICAL CLUSTERING',/, 80('-'))
@


1.16
log
@*** empty log message ***
@
text
@a19 1
#ifdef SP_F90
a22 4
#else
         DIMENSION Q(1)
         POINTER   (IPQ,Q) 
#endif
a142 1
#ifdef SP_F90
a143 1
#endif
@


1.15
log
@*** empty log message ***
@
text
@a37 1
CNO_SAVE
@


1.14
log
@f90 alloc
@
text
@d29 2
a30 2
         COMMON  DUMMY(8),KAF(1)
         EQUIVALENCE  (INUM,KAF)
d112 1
a112 1
         CALL CHKMEM(MEMTOT, KAF, MAXMEM-8,RUNTIME,IPQ,IRTFLG)
@


1.13
log
@unnecessary %LOC removed
@
text
@d20 5
d27 1
d149 3
@


1.12
log
@*** empty log message ***
@
text
@a137 1
	       IF (MEMTOT.LT.(MAXMEM-8))  THEN
a140 7
     
                  IPQ = %LOC(KAF)
	       ELSE
                 WRITE (NOUT,2520)   MEMTOT
2520             FORMAT (/ ' IMPOSSIBLE. SHOULD NOT BE HERE',
     #           ' HCLS.F MEMTOT= ',I9 / )
	       END IF
@


1.11
log
@ipalign64
@
text
@d155 1
a155 1
            DO  20  I=0,MAXFA-1
d159 1
a159 1
20          CONTINUE
@


1.10
log
@chmod label 2500 to 2501
@
text
@d19 1
a19 2
 
         INCLUDE 'CMBLOCK.INC' 
d23 1
a23 1
         COMMON  DUMMY(2),KAF(1)
a24 1
	 
d83 2
a84 6
         K_COO=K_W+MAXFA
         K_COO=K_COO/2
         K_COO=K_COO*2+1
         K_COB=K_COO+NFAC
         K_COB=K_COB/2
         K_COB=K_COB*2+1
d90 9
a98 27
         MEMD=K_COB+NFAC
         MEMD=MEMD/2
         MEMD=MEMD*2+1
         MEMPK=MEMD+MDIM
         MEMPK=MEMPK/2
         MEMPK=MEMPK*2+1
         MEMVAL=MEMPK+JFIN
         MEMVAL=MEMVAL/2
         MEMVAL=MEMVAL*2+1
         MEMIDK=MEMVAL+JFIN
         MEMIDK=MEMIDK/2
         MEMIDK=MEMIDK*2+1
         MEMLA=MEMIDK+NKLA
         MEMLA=MEMLA/2
         MEMLA=MEMLA*2+1
         MEMLB=MEMLA+NKLA
         MEMLB=MEMLB/2
         MEMLB=MEMLB*2+1
         MEMNT=MEMLB+NKLA
         MEMNT=MEMNT/2
         MEMNT=MEMNT*2+1
         MEMNO=MEMNT+JFIN
         MEMNO=MEMNO/2
         MEMNO=MEMNO*2+1
         MEMTOT=MEMNO+JFIN
         MEMTOT=MEMTOT/2
         MEMTOT=MEMTOT*2+1
d100 5
a104 13
         MEMIV=MEMNUM+NKLA
         MEMIV=MEMIV/2
         MEMIV=MEMIV*2+1
         MEMIW=MEMIV+NKLA
         MEMIW=MEMIW/2
         MEMIW=MEMIW*2+1
         MEMV=MEMIW+NKLA
         MEMV=MEMV/2
         MEMV=MEMV*2+1
         MEMW=MEMV+NKLA
         MEMW=MEMW/2
         MEMW=MEMW*2+1
         MEMTOT=MAX0(MEMTOT,MEMW+NKLA)
d106 1
a106 1
         CALL CHKMEM(MEMTOT, KAF, MAXMEM-2,RUNTIME,IPQ,IRTFLG)
d113 4
a116 10
               K_INUM=1
               K_W=K_INUM+MAXFA
               K_W=K_W/2
               K_W=K_W*2+1 
               K_COO=K_W+MAXFA
               K_COO=K_COO/2
               K_COO=K_COO*2+1
               K_COB=K_COO+NFAC
               K_COB=K_COB/2
               K_COB=K_COB*2+1
d119 2
a120 2
               MDIM=NKLA*(NKLA-1)/2
               JFIN=2*NKLA-1
d122 15
a136 41
               MEMD=K_COB+NFAC
               MEMD=MEMD/2
               MEMD=MEMD*2+1
               MEMPK=MEMD+MDIM
               MEMPK=MEMPK/2
               MEMPK=MEMPK*2+1
               MEMVAL=MEMPK+JFIN
               MEMVAL=MEMVAL/2
               MEMVAL=MEMVAL*2+1
               MEMIDK=MEMVAL+JFIN
               MEMIDK=MEMIDK/2
               MEMIDK=MEMIDK*2+1
               MEMLA=MEMIDK+NKLA
               MEMLA=MEMLA/2
               MEMLA=MEMLA*2+1
               MEMLB=MEMLA+NKLA
               MEMLB=MEMLB/2
               MEMLB=MEMLB*2+1
               MEMNT=MEMLB+NKLA
               MEMNT=MEMNT/2
               MEMNT=MEMNT*2+1
               MEMNO=MEMNT+JFIN
               MEMNO=MEMNO/2
               MEMNO=MEMNO*2+1
               MEMTOT=MEMNO+JFIN
               MEMTOT=MEMTOT/2
               MEMTOT=MEMTOT*2+1
               MEMNUM=MEMD
               MEMIV=MEMNUM+NKLA
               MEMIV=MEMIV/2
               MEMIV=MEMIV*2+1
               MEMIW=MEMIV+NKLA
               MEMIW=MEMIW/2
               MEMIW=MEMIW*2+1
               MEMV=MEMIW+NKLA
               MEMV=MEMV/2
               MEMV=MEMV*2+1
               MEMW=MEMV+NKLA
               MEMW=MEMW/2
               MEMW=MEMW*2+1
               MEMTOT=MAX0(MEMTOT,MEMW+NKLA)
d138 1
a138 1
	       IF (MEMTOT.LT.(MAXMEM-2))  THEN
a180 2

         RETURN
@


1.9
log
@use chkmem instead of allocit call
@
text
@d203 2
a204 2
                  WRITE (NOUT,2500)  MAXMEM , MEMTOT
2500              FORMAT (/ ' MEMORY RESERVATION:  YOU HAVE',
@


1.8
log
@*** empty log message ***
@
text
@d19 2
a20 8

#ifdef SP_UNIX
         INCLUDE 'CMBLOCK.INC'
#else
         INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
#ifdef SP_ALLOC
         COMMON  DUMMY(2),INUM(1)
d23 4
a26 5
         LOGICAL         RUNTIME
#else
         COMMON  DUMMY(2),Q(1)
         EQUIVALENCE  (INUM,Q)
#endif
d77 3
a79 2
           CALL  RDPRAI(INUM,NFAC,
     &	MAXFA,MINFAC,MAXFAC,'FACTOR NUMBERS',NULL,IER)
d81 1
d83 2
a84 7
#ifdef SP_ALLOC
         K_W=1
#else
         K_W=K_INUM+MAXFA
         K_W=K_W/2
         K_W=K_W*2+1
#endif
d91 2
a92 2
C  CALCULATE NUMBER OF FACTORS

d137 81
a217 17

#ifdef SP_ALLOC
         CALL ALLOCIT(MEMTOT,RUNTIME,IPQ,'HCLS',IRTFLG)
	 IF (RUNTIME)  THEN
            WRITE (NOUT,2500)  MEMTOT
2500        FORMAT (/ ' DYNAMICAL MEMORY ALLOCATION:  YOU HAVE',
     #       ' RESERVED ',I9 / )
#else
	 IF (MEMTOT.LT.MAXMEM)  THEN
            WRITE (NOUT,2500)  MAXMEM , MEMTOT
2500        FORMAT (/ ' MEMORY RESERVATION:  YOU HAVE',
     #              ' RESERVED ',I9,',  YOU NEED  ',I9 / )
#endif
C

            DO  21  I=0,MAXFA-1
21          Q(K_W+I)=1.0
d234 3
a236 4

#ifdef SP_ALLOC
            CALL ALLOCIT(0,RUNTIME,IPQ,'HCLS',IRTFLG)
#endif
@


1.7
log
@add SP_ALLOC for allocit call
@
text
@d1 1
d4 1
a4 1
C $$ HCLS.FOR
a15 3
C
C
C23456789012345678901234567890123456789012345678901234567890123456789012
d17 1
a17 3
C
C $$ HCLS.FOR
C
d19 1
d46 1
a46 1
         CALL  RDPRMI(ITYPE,I, one_1, one_1,
d48 1
a48 1
         CALL  RDPRMI(ICODE,I, one_1, one_1,
d74 1
a74 1
         OPEN(NAME=CLUST,UNIT=111,STATUS='OLD',FORM='UNFORMATTED')
d105 1
a105 1
C
d147 1
d150 4
a153 4
	 IF(RUNTIME)  THEN
         WRITE (NOUT,2500)  MEMTOT
2500     FORMAT (/ ' DYNAMICAL MEMORY ALLOCATION:  YOU HAVE',
     #   ' RESERVED ',I9 / )
d155 4
a158 4
	IF(MEMTOT.LT.MAXMEM)  THEN
         WRITE (NOUT,2500)  MAXMEM , MEMTOT
2500     FORMAT (/ ' MEMORY RESERVATION:  YOU HAVE',
     #   ' RESERVED ',I9,',  YOU NEED  ',I9 / )
d162 18
a179 2
         DO  21  I=0,MAXFA-1
21       Q(K_W+I)=1.0
a180 14
         DO  20  I=0,MAXFA-1
         CALL  RDPRM(W1,NLOOP,ILOOP,'FACTOR WEIGHT')
         IF(W1.EQ.0.0)  GOTO  201
         Q(K_W+I)=W1
20       CONTINUE

201      WRITE(NOUT,*) ' FACTOR WEIGHTS USED:'
         WRITE(NOUT,23)  (Q(K_W+I),I=0,MAXFA-1)
23       FORMAT(10(1X,G10.3))
         CALL  HCLP(NKLA,MDIM,JFIN,
     &   Q(K_W),INUM,Q(K_COO),Q(K_COB),MAXFA,NFAC,
     &   Q(MEMD),Q(MEMPK),Q(MEMVAL),Q(MEMIDK),
     &   Q(MEMLA),Q(MEMLB),Q(MEMNT),
     &   Q(MEMNO),Q(MEMNUM),Q(MEMIV),Q(MEMIW),Q(MEMV),Q(MEMW))
d182 1
a182 1
         CALL ALLOCIT(0,RUNTIME,IPQ,'HCLS',IRTFLG)
d184 3
a186 3
         WRITE (NDAT,2600)
2600     FORMAT (//' ',80('-')//' ',28X,
     #   'END OF HIERARCHICAL CLUSTERING',/, 80('-'))
d188 3
a190 3
         WRITE(NOUT,2700)
2700     FORMAT
     &   ('  MEMORY BUFFER TOO SMALL - SORRY, PROGRAM CANNOT BE RUN!')
d192 2
@


1.6
log
@dealloc corrected
@
text
@d25 4
a33 1
         INCLUDE 'COMMON1:CMBLOCK.INC'
d91 1
a91 1
#ifdef SP_UNIX
d150 1
a150 1
#ifdef SP_UNIX
d181 1
a181 1
#ifdef SP_UNIX
@


1.5
log
@fixed
@
text
@d178 3
a188 3
#ifdef SP_UNIX
         CALL ALLOCIT(0,RUNTIME,IPQ,'HCLS',IRTFLG)
#endif
@


1.4
log
@malloc
@
text
@d88 3
d92 3
d96 2
d99 2
d107 2
d110 2
d113 2
d116 2
d119 2
d122 2
d125 2
d128 2
d131 2
d135 2
d138 2
d141 2
d144 2
d150 1
a150 1
         WRITE (NOUT,2500)  MAXMEM , MEMTOT
d174 1
a174 1
     &   Q(K_W),Q(K_INUM),Q(K_COO),Q(K_COB),MAXFA,NFAC,
@


1.3
log
@nosave
@
text
@d25 4
d31 2
a33 1
         COMMON  DUMMY(2),Q(1)
a35 1
         EQUIVALENCE  (INUM,Q)
a91 19
C
         IF(K_COB+NFAC.GT.MAXMEM)  then
	WRITE(NOUT,2700)
	return
	endif

         DO  21  I=0,MAXFA-1
21       Q(K_W+I)=1.0

         DO  20  I=0,MAXFA-1
         CALL  RDPRM(W1,NLOOP,ILOOP,'FACTOR WEIGHT$')
         IF(W1.EQ.0.0)  GOTO  201
         Q(K_W+I)=W1
20       CONTINUE

201      WRITE(NOUT,*) ' FACTOR WEIGHTS USED:'
         WRITE(NOUT,23)  (Q(K_W+I),I=0,MAXFA-1)
23       FORMAT(10(1X,G10.3))

d111 8
a118 1

d122 11
d134 3
a136 1
         IF (MEMTOT  .LE. MAXMEM)  THEN
d150 3
@


1.2
log
@cpp_lines_added
@
text
@d37 1
a37 1

d82 1
a82 1
C         DIMENSION  W(MAXFAC),COO(NFAC),COB(NFAC),INUM(MAXFAC)
d84 2
a85 2
         K_W=K_INUM+MAXFAC
         K_COO=K_W+MAXFAC
d94 1
a94 1
         DO  21  I=0,MAXFAC-1
d97 1
a97 1
         DO  20  I=0,MAXFAC-1
d104 1
a104 1
         WRITE(NOUT,23)  (Q(K_W+I),I=0,MAXFAC-1)
d133 1
a133 1
     &   Q(K_W),Q(K_INUM),Q(K_COO),Q(K_COB),MAXFAC,NFAC,
@


1.1
log
@Initial revision
@
text
@d23 3
d27 1
@
