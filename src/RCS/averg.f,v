head	1.13;
access;
symbols
	healthdept_2018:1.13
	pre_getangas:1.11
	GPL2010:1.11
	pre_GPL2010:1.10
	pre_var_equation:1.10
	pre_fftwrings:1.10
	pre_opfiles:1.10
	src:1.10
	best-code:1.10
	x-named-regs:1.10
	x:1.10
	v13-00:1.10
	pre_GPL:1.8
	prec_CA:1.8
	noindx:1.8
	Bproc:1.7
	oct21:1.6
	last77:1.6;
locks; strict;
comment	@c @;


1.13
date	2018.10.03.14.33.55;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2012.08.02.13.54.53;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2010.06.24.13.25.07;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.17.20.36.04;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.17.18.26.33;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.13.15.37.30;	author bimal;	state Exp;
branches;
next	1.7;

1.7
date	99.11.10.23.09.08;	author yuchen;	state Exp;
branches;
next	1.6;

1.6
date	99.02.03.19.17.52;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	97.10.01.20.17.08;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.02.14.19.41.10;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	95.02.13.20.53.47;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.02.07.16.13.42;	author mladjadj;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.47.20;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.13
log
@email_health_dept
@
text
@C++*******************************************************************
C
C  AVERG.F
C                     
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  AVERG(LUN1,XAVG,J,K,NX,NY,DS,DR,MOVWAY,X)
C      
C  XAVG: RECURSIVE LOCAL AVERAGE OF PICTURE AREA
C  X( ): DR PICTURE LINES STORED  X[J,K]<>X((MOD(J-1,DR))*NX+K)
C  J,K PICTURE COORD
C  NX,NY: PICTURE SIZE
C  DS,DR: LOCAL BOX  SIZE
C  MOVWAY= 1: READ IN DR LINE AND COMPUTE 1ST AVERAGE VALUE FROM SCRATCH
C             IF J,K IS IN A BORDER AREA COMPUTE XAVG FOR NEAREST
C             ACTIVE POINT
C        = 2: MOVE RIGHT ONE PIXEL
C        = 3: MOVE LEFT  ONE PIXEL
C        = 4: MOVE DOWN  ONE PIXEL, READ IN NEXT LINE
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*******************************************************************

        SUBROUTINE AVERG(LUN1,XAVG,J,K,NX,NY,DS,DR,MOVWAY,X)

        INTEGER :: DS,DR, HDS,HDR, EDGFST,EDGLST,EDGLFT,EDGRT

        REAL    :: X(*)

        SAVE       ! WHY?? al


        IF (MOVWAY .EQ. 1) THEN       
C          INITIALIZE PARM AND XAVG
           HDR    = DR  / 2
           HDS    = DS  / 2
           EDGFST = HDR + 1
           EDGLST = NY  - HDR
           EDGLFT = HDS + 1
           EDGRT  = NX  - HDS

C          CHECK IF IN BORDER
           XAVG = 0.
           JT   = J
           KT   = K
           IF (J .LT. EDGFST) JT = EDGFST
           IF (J .GT. EDGLST) JT = EDGLST
           IF (K .LT. EDGLFT) KT = EDGLFT
           IF (K .GT. EDGRT)  KT = EDGRT

C          READ IN DR LINES AND COMPUTE AVERAGE FROM SCRATCH
           DO  JJ=JT-HDR,JT+HDR
              LSTART = (MOD(JJ-1,DR)) * NX

              CALL REDLIN(LUN1,X(LSTART+1),NX,JJ)

              DO  KK=KT-HDS, KT+HDS
                 XAVG = XAVG + X(LSTART+KK)
              ENDDO
           ENDDO

           XAVG = XAVG / FLOAT(DR*DS)

        ELSEIF (MOVWAY .EQ. 2) THEN
C          MOVE RT ONE PIXEL, UPDATE XAVG
           JT = J
           IF (K .EQ. EDGLFT .OR. K.LT.EDGLFT .OR. K.GT.EDGRT)RETURN
           IF (J .LT. EDGFST) JT = EDGFST
           IF (J .GT. EDGLST) JT = EDGLST
           CORECT = 0.

           DO  JJ=JT-HDR, JT+HDR
              LSTART = (MOD(JJ-1,DR))*NX
              CORECT = CORECT + X(LSTART+K+HDS) - X(LSTART+K-HDS-1)
           ENDDO

           XAVG = CORECT/FLOAT(DR*DS)+XAVG

        ELSEIF (MOVWAY .EQ. 3) THEN
C          MOVE LEFT ONE PIXEL UPDATE XAVG
           JT = J
           IF (K .LT. EDGLFT .OR. K.GT.EDGRT .OR. K.EQ.EDGRT)RETURN
           IF (J .LT. EDGFST) JT = EDGFST
           IF (J .GT. EDGLST) JT = EDGLST

           CORECT = 0.

           DO  JJ=JT-HDR,JT+HDR
              LSTART = (MOD(JJ-1,DR))*NX
              CORECT = CORECT + X(LSTART+K-HDS) - X(LSTART+K+HDS+1)
           ENDDO

           XAVG = CORECT / FLOAT(DR*DS) + XAVG

        ELSEIF (MOVWAY .EQ. 4) THEN
C          J INCREMENTED ONE
           IF (J.LE.EDGFST .OR. J.GT.EDGLST)RETURN
           KT = K
           IF (K .LT. EDGLFT) KT = EDGLFT
           IF (K .GT. EDGRT)  KT = EDGRT
           CORECT = 0.
           JOLD   = J-HDR-1
           LSTART = (MOD(JOLD-1,DR))*NX

           DO  KK=KT-HDS, KT+HDS
              CORECT = CORECT - X(LSTART+KK)
           ENDDO

           CALL REDLIN(LUN1,X(LSTART+1),NX,J+HDR)

           DO  KK=KT-HDS,KT+HDS
              CORECT = CORECT + X(LSTART+KK)
           ENDDO

           XAVG = XAVG + CORECT / FLOAT(DS*DR)

        ENDIF

        END
@


1.12
log
@added x param
@
text
@d11 1
a11 1
C=* Email: spider@@wadsworth.org                                        *
@


1.11
log
@GPL_2010
@
text
@d4 1
a4 1
C
d27 1
a27 1
C      AVERG(LUN1,XAVG,J,K,NSAM,NROW,DS,DR,MOVWAY)
d30 1
a30 1
C  X( ): DR PICTURE LINES STORED  X[J,K]<>X((MOD(J-1,DR))*NSAM+K)
d32 1
a32 1
C  NSAM,NROW: PICTURE SIZE
d37 3
a39 5
C        = 2: MOVE RT ONE PIXEL
C        = 3: MOVE LEFT ONE PIXEL
C        = 4: MOVE DOWN ONE PIXEL, READ IN NEXT LINE
C
C IMAGE_PROCESSING_ROUTINE
a40 1
C        1         2         3         4         5         6         7
d44 1
a44 1
        SUBROUTINE AVERG(LUN1,XAVG,J,K,NSAM,NROW,DS,DR,MOVWAY)
d46 1
d48 1
d50 1
a50 4
        INTEGER DS,DR,HDS,HDR,EDGFST,EDGLST,EDGLFT,EDGRT
        COMMON /UNITS/LUN,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
        DIMENSION X(1)
        COMMON X
a51 1
        SAVE
d55 6
a60 6
           HDR=DR/2
           HDS=DS/2
           EDGFST=HDR+1
           EDGLST=NROW-HDR
           EDGLFT=HDS+1
           EDGRT=NSAM-HDS
d63 7
a69 7
           XAVG=0.
           JT=J
           KT=K
           IF(J.LT.EDGFST)JT=EDGFST
           IF(J.GT.EDGLST)JT=EDGLST
           IF(K.LT.EDGLFT)KT=EDGLFT
           IF(K.GT.EDGRT)KT=EDGRT
d73 6
a78 4
              LSTART=(MOD(JJ-1,DR))*NSAM
              CALL REDLIN(LUN1,X(LSTART+1),NSAM,JJ)
              DO  KK=KT-HDS,KT+HDS
                 XAVG=XAVG+X(LSTART+KK)
d82 1
a82 2
           XAVG=XAVG/FLOAT(DR*DS)
           RETURN
d86 9
a94 8
           JT=J
           IF (K.EQ.EDGLFT.OR.K.LT.EDGLFT.OR.K.GT.EDGRT)RETURN
           IF (J.LT.EDGFST)JT=EDGFST
           IF (J.GT.EDGLST)JT=EDGLST
           CORECT=0.
           DO  JJ=JT-HDR,JT+HDR
              LSTART=(MOD(JJ-1,DR))*NSAM
              CORECT=CORECT+X(LSTART+K+HDS)-X(LSTART+K-HDS-1)
d97 1
a97 2
           XAVG=CORECT/FLOAT(DR*DS)+XAVG
           RETURN
d101 7
a107 5
           JT=J
           IF(K.LT.EDGLFT.OR.K.GT.EDGRT.OR.K.EQ.EDGRT)RETURN
           IF(J.LT.EDGFST)JT=EDGFST
           IF(J.GT.EDGLST)JT=EDGLST
           CORECT=0.
d109 2
a110 2
              LSTART=(MOD(JJ-1,DR))*NSAM
              CORECT=CORECT+X(LSTART+K-HDS)-X(LSTART+K+HDS+1)
d112 2
a113 2
           XAVG=CORECT/FLOAT(DR*DS)+XAVG
           RETURN
d117 10
a126 9
           IF (J.LE.EDGFST.OR.J.GT.EDGLST)RETURN
           KT=K
           IF (K.LT.EDGLFT)KT=EDGLFT
           IF (K.GT.EDGRT)KT=EDGRT
           CORECT=0.
           JOLD=J-HDR-1
           LSTART=(MOD(JOLD-1,DR))*NSAM
           DO  KK=KT-HDS,KT+HDS
              CORECT=CORECT-X(LSTART+KK)
d128 3
a130 1
           CALL REDLIN(LUN1,X(LSTART+1),NSAM,J+HDR)
d132 1
a132 1
              CORECT=CORECT+X(LSTART+KK)
a133 1
           XAVG=XAVG+CORECT/FLOAT(DS*DR)
d135 2
a136 1
           RETURN
d138 1
@


1.10
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.9
log
@HRI GPL License used
@
text
@a5 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
a29 1
C **************************************************************************
@


1.8
log
@remove computed GOTO
@
text
@d5 1
d7 1
d9 24
d39 1
@


1.7
log
@a
@
text
@d12 1
a12 1
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
d29 4
d35 1
a35 2
	SUBROUTINE AVERG(LUN1,XAVG,J,K,NSAM,NROW,DS,DR,MOVWAY)

a37 84
	INTEGER DS,DR,HDS,HDR,EDGFST,EDGLST,EDGLFT,EDGRT
	COMMON /UNITS/LUN,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
	DIMENSION X(1)
	COMMON X

	SAVE

	GO TO(1000,2000,3000,4000),MOVWAY

C       INITIALIZE PARM AND XAVG
1000	HDR=DR/2
	HDS=DS/2
	EDGFST=HDR+1
	EDGLST=NROW-HDR
	EDGLFT=HDS+1
	EDGRT=NSAM-HDS

C       CHECK IF IN BORDER
	XAVG=0.
	JT=J
	KT=K
	IF(J.LT.EDGFST)JT=EDGFST
	IF(J.GT.EDGLST)JT=EDGLST
	IF(K.LT.EDGLFT)KT=EDGLFT
	IF(K.GT.EDGRT)KT=EDGRT

C       READ IN DR LINES AND COMPUTE AVERAGE FROM SCRATCH
	DO  JJ=JT-HDR,JT+HDR
	   LSTART=(MOD(JJ-1,DR))*NSAM
	   CALL REDLIN(LUN1,X(LSTART+1),NSAM,JJ)
	   DO  KK=KT-HDS,KT+HDS
	      XAVG=XAVG+X(LSTART+KK)
	   ENDDO
	ENDDO

c 1010	CONTINUE
	XAVG=XAVG/FLOAT(DR*DS)
	RETURN



C       MOVE RT ONE PIXEL, UPDATE XAVG
2000	JT=J
	IF (K.EQ.EDGLFT.OR.K.LT.EDGLFT.OR.K.GT.EDGRT)RETURN
	IF (J.LT.EDGFST)JT=EDGFST
	IF (J.GT.EDGLST)JT=EDGLST
	CORECT=0.
	DO  JJ=JT-HDR,JT+HDR
	   LSTART=(MOD(JJ-1,DR))*NSAM
	   CORECT=CORECT+X(LSTART+K+HDS)-X(LSTART+K-HDS-1)
	ENDDO

	XAVG=CORECT/FLOAT(DR*DS)+XAVG
	RETURN
C	MOVE LEFT ONE PIXEL UPDATE XAVG
3000	JT=J
	IF(K.LT.EDGLFT.OR.K.GT.EDGRT.OR.K.EQ.EDGRT)RETURN
	IF(J.LT.EDGFST)JT=EDGFST
	IF(J.GT.EDGLST)JT=EDGLST
	CORECT=0.
	DO  JJ=JT-HDR,JT+HDR
	LSTART=(MOD(JJ-1,DR))*NSAM
	CORECT=CORECT+X(LSTART+K-HDS)-X(LSTART+K+HDS+1)
	ENDDO
	XAVG=CORECT/FLOAT(DR*DS)+XAVG
	RETURN


C       J INCREMENTED ONE
4000	IF (J.LE.EDGFST.OR.J.GT.EDGLST)RETURN
	KT=K
	IF (K.LT.EDGLFT)KT=EDGLFT
	IF (K.GT.EDGRT)KT=EDGRT
	CORECT=0.
	JOLD=J-HDR-1
	LSTART=(MOD(JOLD-1,DR))*NSAM
	DO  KK=KT-HDS,KT+HDS
	   CORECT=CORECT-X(LSTART+KK)
	ENDDO
	CALL REDLIN(LUN1,X(LSTART+1),NSAM,J+HDR)
	DO  KK=KT-HDS,KT+HDS
	   CORECT=CORECT+X(LSTART+KK)
	ENDDO
	XAVG=XAVG+CORECT/FLOAT(DS*DR)
d39 87
a125 2
	RETURN
	END
@


1.6
log
@c nosave
@
text
@d33 1
a33 1
CNO_SAVE
@


1.5
log
@*** empty log message ***
@
text
@d3 1
a3 1
C $$ AVERG.FOR
d15 1
a15 4
C
C $$ AVERG:
C
C      CALL AVERG(LUN1,XAVG,J,K,NSAM,NROW,DS,DR,MOVWAY)
a16 6
C      FOR FURTHER INFORMATION, SEE COMMENTS IN AVERG.
C
C--*******************************************************************
C
C
	SUBROUTINE AVERG(LUN1,XAVG,J,K,NSAM,NROW,DS,DR,MOVWAY)
d29 6
d39 1
d41 1
a41 1
C
d43 2
a44 1
C   INITIALIZE PARM AND XAVG
d51 2
a52 1
C   CHECK IF IN BORDER
d60 2
a61 1
C   READ IN DR LINES AND COMPUTE AVERAGE FROM SCRATCH
d63 5
a67 5
	LSTART=(MOD(JJ-1,DR))*NSAM
	CALL REDLIN(LUN1,X(LSTART+1),NSAM,JJ)
	DO  KK=KT-HDS,KT+HDS
	XAVG=XAVG+X(LSTART+KK)
	ENDDO
d69 1
d73 4
a76 2
C
C  MOVE RT ONE PIXEL, UPDATE XAVG
d78 3
a80 3
	IF(K.EQ.EDGLFT.OR.K.LT.EDGLFT.OR.K.GT.EDGRT)RETURN
	IF(J.LT.EDGFST)JT=EDGFST
	IF(J.GT.EDGLST)JT=EDGLST
d83 2
a84 2
	LSTART=(MOD(JJ-1,DR))*NSAM
	CORECT=CORECT+X(LSTART+K+HDS)-X(LSTART+K-HDS-1)
d86 1
d101 4
a104 2
C  J INCREMENTED ONE
4000	IF(J.LE.EDGFST.OR.J.GT.EDGLST)RETURN
d106 2
a107 2
	IF(K.LT.EDGLFT)KT=EDGLFT
	IF(K.GT.EDGRT)KT=EDGRT
d112 1
a112 1
	CORECT=CORECT-X(LSTART+KK)
d116 1
a116 1
	CORECT=CORECT+X(LSTART+KK)
d119 1
@


1.4
log
@add SAVE to make some variables static
@
text
@d61 1
a61 1
	DO 1010 JJ=JT-HDR,JT+HDR
d64 5
a68 3
	DO 1005 KK=KT-HDS,KT+HDS
1005	XAVG=XAVG+X(LSTART+KK)
1010	CONTINUE
d78 1
a78 1
	DO 2010 JJ=JT-HDR,JT+HDR
d80 2
a81 1
2010	CORECT=CORECT+X(LSTART+K+HDS)-X(LSTART+K-HDS-1)
d90 1
a90 1
	DO 3010 JJ=JT-HDR,JT+HDR
d92 2
a93 1
3010	CORECT=CORECT+X(LSTART+K-HDS)-X(LSTART+K+HDS+1)
d104 3
a106 2
	DO 4010 KK=KT-HDS,KT+HDS
4010	CORECT=CORECT-X(LSTART+KK)
d108 3
a110 2
	DO 4020 KK=KT-HDS,KT+HDS
4020	CORECT=CORECT+X(LSTART+KK)
@


1.3
log
@I restored old version, please don't change it !
@
text
@d42 1
@


1.2
log
@clean up unused variables and hollerith warnings
@
text
@d42 2
d45 1
a45 1
	HDR=DR/2
d51 1
d53 1
a53 4
C
	GO TO(1000,2000,3000,4000),MOVWAY
C   CHECK IF IN BORDER
1000	JT=J
@


1.1
log
@Initial revision
@
text
@a41 2
C
	GO TO(1000,2000,3000,4000),MOVWAY
d43 1
a43 1
1000	HDR=DR/2
d49 3
d53 1
a53 2
	XAVG=0.
	JT=J
@
