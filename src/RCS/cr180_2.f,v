head	1.13;
access;
symbols
	healthdept_2018:1.13
	pre_getangas:1.12
	GPL2010:1.12
	pre_GPL2010:1.11
	pre_var_equation:1.11
	pre_fftwrings:1.11
	pre_opfiles:1.11
	src:1.11
	best-code:1.11
	x-named-regs:1.10
	x:1.10
	v13-00:1.10
	pre_GPL:1.8
	prec_CA:1.8
	noindx:1.8
	Bproc:1.8
	oct21:1.5
	last77:1.4;
locks; strict;
comment	@c @;


1.13
date	2018.10.03.14.34.03;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2010.06.24.13.25.21;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.07.18.16.00;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.17.20.38.33;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.17.18.28.57;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.06.20.22.14;	author bimal;	state Exp;
branches;
next	1.7;

1.7
date	99.12.07.15.36.55;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.11.10.23.09.12;	author yuchen;	state Exp;
branches;
next	1.5;

1.5
date	99.06.03.20.50.48;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	97.10.03.21.08.26;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	97.08.19.18.32.51;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.07.21.19.56.45;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.47.59;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.13
log
@email_health_dept
@
text
@C ++********************************************************************
C                                                                      *
C                                                                      *
C                           PGI BUG            FEB 10 2006 ArDean Leith
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  PURPOSE:                                                            *
C
C  CALCULATES CIRCULAR CROSCORRELATION 
C    BETWEEN 180 DEG ROTATED IMAGE AND 0 DEGS
C  NON-POWER-OF-TWO DIMENSIONS
C  INPUT - X,Y FOURIER TRANSFORMS
C  OUTPUT -  O=F(CONJG(X)*CONJG(Y))
C
C  PARAMETERS:                                                         *
C
C IMAGE_PROCESSING_ROUTINE                                                                      
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE  CR180_2(X,Y,O,NNNN,NSAM,NROW)

        COMPLEX  X(NNNN,NROW),Y(NNNN,NROW),O(NNNN,NROW)
        DOUBLE PRECISION  PI2
        COMPLEX :: CTEMP

        PI2=8.0*DATAN(1.0D0)
        ITMP=NSAM/2
        SX=PI2*FLOAT(ITMP)/FLOAT(NSAM)
        ITMP=NROW/2
        SY=PI2*FLOAT(ITMP)/FLOAT(NROW)

c$omp   parallel do private(i,j,ix,iy,argy,arg,ctemp)
        DO J=1,NROW
           IY = J-1
           IF (IY .GT. NROW/2)  IY=IY-NROW
           ARGY = SY * IY

           DO I=1,NNNN
              IX     = I-1
              ARG    = SX * IX + ARGY
              CTEMP  = CMPLX(COS(ARG),SIN(ARG))
              O(I,J) = CONJG(X(I,J)) * CONJG(Y(I,J)) * CTEMP
           ENDDO
        ENDDO

        INS = -1
        CALL  FMRS_2(O,NSAM,NROW,INS)

        END
@


1.12
log
@GPL_2010
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.11
log
@pgi compiler bug
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.10
log
@GPL License fixed
@
text
@d4 1
a31 2
C                                                                      *
C                                                                      *
d43 1
a43 1
C        0         2         3         4         5         6         7 *
d51 1
a51 5

C       INS=1
C       CALL  FMRS_2(X,NSAM,NROW,INS)
C       IF(INS.EQ.0)  RETURN
C       CALL  FMRS_2(Y,NSAM,NROW,INS)
d59 11
a69 9
c$omp parallel do private(i,j,ix,iy,argy,arg)
        DO    J=1,NROW
           IY=J-1
           IF(IY.GT.NROW/2)  IY=IY-NROW
           ARGY=SY*IY
           DO    I=1,NNNN
              IX=I-1
              ARG=SX*IX+ARGY
           O(I,J)=CONJG(X(I,J))*CONJG(Y(I,J))*CMPLX(COS(ARG),SIN(ARG))
d73 1
a73 1
        INS=-1
d75 1
@


1.9
log
@HRI GPL License used
@
text
@a5 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.8
log
@cosmetic
@
text
@d7 24
@


1.7
log
@header
@
text
@a0 1

d25 2
a26 1
C                                                                      *
d31 1
a31 1
	SUBROUTINE  CR180_2(X,Y,O,NNNN,NSAM,NROW)
d33 1
a33 1
	COMPLEX  X(NNNN,NROW),Y(NNNN,NROW),O(NNNN,NROW)
d36 4
a39 4
C	INS=1
C	CALL  FMRS_2(X,NSAM,NROW,INS)
C	IF(INS.EQ.0)  RETURN
C	CALL  FMRS_2(Y,NSAM,NROW,INS)
d42 4
a45 4
 	ITMP=NSAM/2
	SX=PI2*FLOAT(ITMP)/FLOAT(NSAM)
	ITMP=NROW/2
	SY=PI2*FLOAT(ITMP)/FLOAT(NROW)
d49 6
a54 6
        IY=J-1
        IF(IY.GT.NROW/2)  IY=IY-NROW
        ARGY=SY*IY
        DO    I=1,NNNN
           IX=I-1
           ARG=SX*IX+ARGY
d56 2
a57 2
	ENDDO
	ENDDO
d59 3
a61 3
	INS=-1
	CALL  FMRS_2(O,NSAM,NROW,INS)
	END
@


1.6
log
@a
@
text
@d1 17
a17 1
	SUBROUTINE  CR180_2(X,Y,O,NNNN,NSAM,NROW)
d19 5
a23 5
C  Calculates circular croscorrelation 
C    between 180 deg rotated image and 0 degs
C  non-power-of-two dimensions
C  Input - X,Y Fourier transforms
C  Output -  O=F(conjg(X)*conjg(Y))
d25 8
a35 1
C
d40 1
a40 1
C
d46 1
d53 3
a55 3
        IX=I-1
        ARG=SX*IX+ARGY
        O(I,J)=CONJG(X(I,J))*CONJG(Y(I,J))*CMPLX(COS(ARG),SIN(ARG))
d58 1
a58 1
C
@


1.5
log
@OpenMP
@
text
@d11 1
a11 1
CNO_SAVE
@


1.4
log
@*** empty log message ***
@
text
@d23 1
a23 1
c$doacross local(i,j,ix,iy,argy,arg)
@


1.3
log
@new version for new FFT
@
text
@d24 1
a24 1
        DO  202  J=1,NROW
d28 1
a28 1
        DO  202  I=1,NNNN
d32 2
a33 1
 202    CONTINUE
@


1.2
log
@nosave
@
text
@d1 1
a1 1
	SUBROUTINE  CR180_2(X,Y,O,NSAM,NROW,WRK)
d9 2
a10 4
C  WRK(MAX0(NSAM,NROW))
C
	DIMENSION  X(NSAM,NROW),Y(NSAM,NROW),O(NSAM,NROW),WRK(*)
	LOGICAL  IFNS,IFNR
a12 3
	IFNS=MOD(NSAM,2).EQ.0
	IFNR=MOD(NROW,2).EQ.0
C
d14 1
a14 1
C	CALL  Fmr_2(X,NSAM,NROW,WRK,INS)
d16 1
a16 6
C	CALL  Fmr_2(Y,NSAM,NROW,WRK,INS)
C
	I=NSAM/2-1
	DO  201  J=1,NROW
	CALL  MJC(X(3,J),Y(3,J),O(3,J),I)
 201	CONTINUE
d18 15
a32 17
	IF(IFNS)  THEN
	DO  202  I=1,2
   	DO  203  J=2,NROW/2
	KJ=2*J-1
	O(I,KJ+1)=-X(I,KJ)*Y(I,KJ+1)-X(I,KJ+1)*Y(I,KJ)
	O(I,KJ)=X(I,KJ)*Y(I,KJ)-X(I,KJ+1)*Y(I,KJ+1)
203	CONTINUE
	IF(.NOT.IFNR)  THEN
	O(I,2)=-X(I,NROW)*Y(I,2)-X(I,2)*Y(I,NROW)
	O(I,NROW)=X(I,NROW)*Y(I,NROW)-X(I,2)*Y(I,2)
	ENDIF
202	CONTINUE
	O(2,1)=X(2,1)*Y(2,1)
	IF(IFNR)  THEN
	O(1,2)=X(1,2)*Y(1,2)
	O(2,2)=X(2,2)*Y(2,2)
	ENDIF
a33 20
	ELSE	
C
 	DO  301  J=2,NROW/2
	KJ=2*J-1
	O(1,KJ+1)=-X(1,KJ)*Y(1,KJ+1)-X(1,KJ+1)*Y(1,KJ)
	O(1,KJ)=X(1,KJ)*Y(1,KJ)-X(1,KJ+1)*Y(1,KJ+1)
301 	CONTINUE
	IF(IFNR)  THEN
	O(1,2)=X(1,2)*Y(1,2)
	ELSE
	O(1,2)=-X(1,NROW)*Y(1,2)-X(1,2)*Y(1,NROW)
	O(1,NROW)=X(1,NROW)*Y(1,NROW)-X(1,2)*Y(1,2)
	ENDIF
	DO  302  J=1,NROW
	O(2,J)=-X(NSAM,J)*Y(2,J)-X(2,J)*Y(NSAM,J)
	O(NSAM,J)=X(NSAM,J)*Y(NSAM,J)-X(2,J)*Y(2,J)
302 	CONTINUE
	ENDIF
	O(1,1)=X(1,1)*Y(1,1)

d35 1
a35 79
	CALL  Fmr_2(O,NSAM,NROW,WRK,INS)
C
	NR2=NROW/2
	NS2=NSAM/2
	IF(IFNS.AND.IFNR)  THEN
	DO  2  J=1,NR2
	JJ=J+NR2
	DO  2  I=1,NS2
	II=I+NS2
	Q=O(I,J)
	O(I,J)=O(II,JJ)
	O(II,JJ)=Q
	Q=O(I,JJ)
	O(I,JJ)=O(II,J)
	O(II,J)=Q
2 	CONTINUE
	ELSEIF(.NOT.IFNS .AND. .NOT.IFNR)  THEN
	K=0
	DO  21  I=1,NS2+1
	K=K+1
21	WRK(K)=O(I,NR2+1)
	DO  22  J=1,NR2
	K=K+1
22	WRK(K)=O(NS2+1,J)
	DO  23  J=1,NR2+1
	DO  24  I=1,NS2
24	O(I,J+NR2)=O(I+NS2+1,J)
	IF(J.EQ.NR2+1)  GOTO  23
	DO  25  I=1,NS2+1
25	O(I+NS2,J)=O(I,J+NR2+1)
23	CONTINUE
	DO  32  J=1,NR2
	DO  32  I=1,NS2
	O(I+NS2,J+NR2)=O(I,J)
32	O(I,J)=O(I+NS2+1,J+NR2+1)
	K=0
	DO  41  I=1,NS2+1
	K=K+1
41	O(I+NS2,NROW)=WRK(K)
	DO  42  J=1,NR2
	K=K+1
42	O(NSAM,J+NR2)=WRK(K)
C
	ELSEIF(.NOT.IFNS .AND.IFNR)  THEN
	DO  51  J=1,NR2
51	WRK(J)=O(NS2+1,J)
C
	DO  52  I=1,NS2+1
 	DO  53  J=1,NR2
53	O(I+NS2,J)=O(I,J+NR2)
	IF(I.EQ.NS2+1)  GOTO  52
	DO  54  J=1,NR2
54	O(I,J+NR2)=O(I+NS2+1,J)
52	CONTINUE
	DO  55  J=1,NR2
	DO  55  I=1,NS2
	O(I+NS2,J+NR2)=O(I,J)
55	O(I,J)=O(I+NS2+1,J+NR2)
	DO  56  J=1,NR2
56	O(NSAM,J+NR2)=WRK(J)
C
	ELSEIF(IFNS .AND. .NOT.IFNR)  THEN
	DO  61  I=1,NS2
61	WRK(I)=O(I,NR2+1)
C
	DO  62  J=1,NR2+1
 	DO  63  I=1,NS2
63	O(I,J+NR2)=O(I+NS2,J)
	IF(J.EQ.NR2+1)  GOTO  62
	DO  64  I=1,NS2
64	O(I+NS2,J)=O(I,J+NR2+1)
62	CONTINUE
	DO  65  I=1,NS2
	DO  65  J=1,NR2
	O(I+NS2,J+NR2)=O(I,J)
65	O(I,J)=O(I+NS2,J+NR2+1)
	DO  66  I=1,NS2
66	O(I+NS2,NROW)=WRK(I)
	ENDIF
@


1.1
log
@Initial revision
@
text
@d13 1
@
