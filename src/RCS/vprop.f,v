head	1.12;
access;
symbols
	pre_getangas:1.12
	GPL2010:1.12
	pre_GPL2010:1.11
	pre_var_equation:1.11
	pre_fftwrings:1.11
	pre_opfiles:1.11
	src:1.11
	best-code:1.11
	x-named-regs:1.11
	x:1.11
	v13-00:1.11
	pre_GPL:1.9
	prec_CA:1.9
	noindx:1.9
	Bproc:1.8
	oct21:1.6
	last77:1.6;
locks; strict;
comment	@c @;


1.12
date	2010.06.24.13.27.15;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.17.20.11.34;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.17.18.05.44;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2001.10.29.20.35.40;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.12.07.16.35.41;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	99.11.10.23.11.24;	author yuchen;	state Exp;
branches;
next	1.6;

1.6
date	97.10.15.17.09.59;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.10.21.20.43.35;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	96.10.21.20.38.23;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.10.08.17.15.15;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	95.10.10.15.55.21;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.53.45;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.12
log
@GPL_2010
@
text
@
C ++********************************************************************
C                                                                      *
C                                                                      *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C VPROP                                                                     *
C                                                                      *
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C
C Double precision version 10/21/96 PP
C======================================================================

      SUBROUTINE VPROP( NDIM, N, W, D, S, KODE ) 
                            
      DIMENSION  W(NDIM,N) , D(N) , S(N) 
                                       
      DATA  SEUIL / 1.0E-7 /
	DOUBLE PRECISION Q,H,T,U,V,P,B
                                                  
      KODE  = 0                                                                 
      CALL  TRIDI (NDIM,N,W,D,S)                                                
        IF (N .EQ. 1)        GO TO  140                                         
        DO   I = 2,N                                                          
      S(I-1)= S(I)                                                              
        ENDDO
      S(N)  = 0.0                                                               
        DO 90  K = 1,N                                                          
      M     = 0                                                                 
   20   DO   J = K,N                                                          
        IF (J .EQ. N)        GO TO   40                                         
      ABJ   = ABS(S(J))                                                         
      EPS   = SEUIL*(ABS(D(J)) + ABS(D(J+1)))                                   
        IF (ABJ .LE. EPS)    GO TO   40                                         
	ENDDO
   40 H     = D(K)                                                              
        IF (J .EQ. K)        GO TO   90                                         
        IF (M .EQ. 30)       GO TO  130                                         
      M     = M + 1                                                             
      Q     = (D(K+1) - H) / (2.0*S(K))                                         
      T     = DSQRT (Q*Q + 1.0)                                                  
      Q     = D(J) - H + S(K) / (Q + DSIGN(T,Q))                                 
      U     = 1.0                                                               
      V     = 1.0                                                               
      H     = 0.0                                                               
      JK    = J - K                                                             
        DO  IJK = 1,JK                                                        
      I     = J - IJK                                                           
      P     = U * S(I)                                                          
      B     = V * S(I)                                                          
        IF (ABS(P).LT.ABS(Q))GO TO   50                                         
      V     = Q / P                                                             
      T     = DSQRT (V*V + 1.0)                                                  
      S(I+1)= P * T                                                             
      U     = 1.0 / T                                                           
      V     = V * U                                                             
                             GO TO   60                                         
   50 U     = P / Q                                                             
      T     = DSQRT (U*U + 1.0)                                                  
      S(I+1)= Q * T                                                             
      V     = 1.0 / T                                                           
      U     = U * V                                                             
   60 Q     = D(I+1) - H                                                        
      T     = (D(I) - Q)*U + 2.0*V*B                                            
      H     = U * T                                                             
      D(I+1)= Q + H                                                             
      Q     = V*T - B                                                           
        DO   L = 1,N                                                          
      P     = W(L,I+1)                                                          
      W(L,I+1)= U*W(L,I) + V*P                                                  
      W(L,I)= V*W(L,I) - U*P                                                    
	ENDDO
	ENDDO
      D(K)  = D(K) - H                                                          
      S(K)  = Q                                                                 
      S(J)  = 0.0                                                               
                             GO TO   20                                         
   90   CONTINUE                                                                
        DO 120  IJ = 2,N                                                        
      I     = IJ - 1                                                            
      L     = I                                                                 
      H     = D(I)                                                              
        DO 100  M = IJ,N                                                        
        IF (D(M) .LE. H)     GO TO  100                                         
      L     = M                                                                 
      H     = D(M)                                                              
  100   CONTINUE                                                                
        IF (L .EQ. I)        GO TO  120                                         
      D(L)  = D(I)                                                              
      D(I)  = H                                                                 
        DO   M = 1,N                                                         
      H     = W(M,I)                                                            
      W(M,I)= W(M,L)                                                            
      W(M,L)= H                                                                 
	ENDDO
  120   CONTINUE                                                                
                             GO TO  140                                         
  130 KODE  = K                                                                 
  140     RETURN                                                                
          END                                                                   

@


1.11
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.10
log
@HRI GPL License used
@
text
@a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.9
log
@diagonalization comments removed
@
text
@d8 24
@


1.8
log
@header
@
text
@d15 1
a16 1
C                                                                      *
d22 1
a22 11
C	This routine tries to diagonalize an array.
C
C	The diagonalization may fail if KODE .ne. 0
C	This disgonalization fails if too many images are identical.
C	for example, if you have used an RT * command to create the 
C 	images used by CA *, then your images will have a high number
C	of background pixels (i.e without data) and that will cause
C	the Diagonalization to fail. INSTEAD use RT SQ. this rotation d
C	does a shift before a rotation so you have no data loss (i.e no
C	background pixels added to the image
C
a23 1
C Double precision version 10/21/96 PP
d25 1
a25 1
      SUBROUTINE   VPROP ( NDIM, N, W, D, S, KODE ) 
d27 2
a28 2
C==05.01.81                                                                     
      DIMENSION  W(NDIM,N) , D(N) , S(N)                                        
@


1.7
log
@a
@
text
@d1 20
a21 1
C
d35 3
a37 1
      SUBROUTINE   VPROP ( NDIM, N, W, D, S, KODE )                             
@


1.6
log
@*** empty log message ***
@
text
@d21 1
a21 1
CNO_SAVE                                                  
@


1.5
log
@*** empty log message ***
@
text
@d25 3
a27 2
        DO 10  I = 2,N                                                          
   10 S(I-1)= S(I)                                                              
d31 1
a31 1
   20   DO 30  J = K,N                                                          
d36 1
a36 1
   30   CONTINUE                                                                
d48 1
a48 1
        DO 80 IJK = 1,JK                                                        
d69 1
a69 1
        DO 70  L = 1,N                                                          
d73 2
a74 2
   70   CONTINUE                                                                
   80   CONTINUE                                                                
d92 1
a92 1
        DO 110  M = 1,N                                                         
d96 1
a96 1
  110   CONTINUE                                                                
@


1.4
log
@double precision version
@
text
@d23 1
a23 1
      CALL  TRIDID (NDIM,N,W,D,S)                                                
@


1.3
log
@added info to explain diagonalization failure
@
text
@d15 1
a15 1

d19 2
a20 1
      DATA  SEUIL / 1.0E-7 /  
d23 1
a23 1
      CALL  TRIDI (NDIM,N,W,D,S)                                                
d41 2
a42 2
      T     = SQRT (Q*Q + 1.0)                                                  
      Q     = D(J) - H + S(K) / (Q + SIGN(T,Q))                                 
d53 1
a53 1
      T     = SQRT (V*V + 1.0)                                                  
d59 1
a59 1
      T     = SQRT (U*U + 1.0)                                                  
d101 1
@


1.2
log
@nosave
@
text
@d1 13
a13 1

@


1.1
log
@Initial revision
@
text
@d7 2
a8 1
      DATA  SEUIL / 1.0E-7 /                                                    
@
