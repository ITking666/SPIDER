head	1.11;
access;
symbols
	healthdept_2018:1.11
	pre_getangas:1.9
	GPL2010:1.9
	pre_GPL2010:1.8
	pre_var_equation:1.8
	pre_fftwrings:1.8
	pre_opfiles:1.8
	src:1.8
	best-code:1.8
	x-named-regs:1.8
	x:1.8
	v13-00:1.8
	pre_GPL:1.6
	prec_CA:1.6
	noindx:1.6
	Bproc:1.5
	oct21:1.4
	last77:1.4;
locks; strict;
comment	@c @;


1.11
date	2018.10.03.14.34.08;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2011.09.28.16.39.18;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.24.13.25.59;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.17.20.36.42;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.17.18.27.09;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.16.15.50.05;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.11.10.23.09.23;	author yuchen;	state Exp;
branches;
next	1.4;

1.4
date	99.03.09.21.50.42;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	97.10.09.14.37.10;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.09.28.18.06.33;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.49.42;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.11
log
@email_health_dept
@
text
@
C++********************************************************************
C
C INTERP.FOR
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  INTERP(LUNO,LUNN,BUF,NSAMO,NROWO,NSAMN,NROWN)
C
C  PURPOSE:
C       THIS SUBROUTINE INTERPOLATES A GIVEN IMAGE 1 IN A RASTER OF
C       ARBITRARY DIMENSIONS TO GIVE IMAGE 2.
C
C  PARAMETERS:
C         LUNO          LOGICAL UNIT NUMBER OF INPUT IMAGE
C         LUNN          LOGICAL UNIT NUMBER OF OUTPUT IMAGE
C         BUF           BUFFER ARRAY OF SIZE 2*NSAMO+NSAMN
C         NSAMO,NROWO   DIMENSIONS OF INPUT PICTURE
C         NSAMN,NROWN   DIMENSIONS OF OUTPUT PICTURE
C
C       CODING:  BILINEAR INTERPOLATION AS DESCRIBED BY AEBI ET AL.,
C                ULTRASTR. RES.  IS APPLIED TO COMPUTE IMAGE ON
C                NEW RASTER.  PARAMETER LABEL IS COPIED OVER.  OUTPUT
C                PICTURE CAN BE LARGER OR SMALLER THAN INPUT PICTURE.
C
C*RPTX,RPTY SCALES I AND J
C*SUBSCRIPTS OF INTERPOLATED
C*PICTURE DOWN TO SCALE OF
C*ORIGINAL PICTURE,
C*X IS DISTANCE IN X DIR. FROM
C*POINT TO BE INTERPOLATED AT
C*TO OLDIMAGE(NPTY1,NPTX1)
C*Y IS Y DISTANCE
C*     OLDIMAGE(NPTY1,NPTX1)----------OLDIMAGE(NPTY1,NPTX2)
C           -              NEWIMAGE(J,I)             -
C*     OLDIMAGE(NPTY2,NPTX1)----------OLDIMAGE(NPTY2,NPTX2)
C*USED FOR ITS INTERPOLATION.
C*SEE J. OF SUPRAMOLECULAR STRUCTURE
C*PAGE 498 1973
C***************
C--*******************************************************************

      SUBROUTINE INTERP(LUNO,LUNN,NSAMO,NROWO,NSAMN,NROWN,IDUM)

      COMMON BUF(1)

	IF (NSAMO.EQ.2*NSAMN .AND. NROWO.EQ.2*NROWN)  THEN
C          TWO-FOLD DECIMATION BY SUMMATION OF NEIGHBOURING PIXELS.
           K1 = 1
           K2 = K1+NSAMO
           DO J=1,NROWO,2
              DO I=1,NSAMN
                 BUF(K2+I-1)=0.0
              ENDDO
              DO K=1,2
                 CALL  REDLIN(LUNO,BUF,NSAMO,J+K-1)
                 DO I=1,NSAMO,2
                    BUF(K2-1+(I+1)/2)=BUF(K2-1+(I+1)/2)+BUF(I)+BUF(I+1)
                 ENDDO
              ENDDO
              DO I=1,NSAMN
                 BUF(K2+I-1)=BUF(K2+I-1)/4
              ENDDO
              CALL  WRTLIN(LUNN,BUF(K2),NSAMN,(J+1)/2)
           ENDDO
           RETURN

	ELSEIF (NSAMO.EQ.4*NSAMN .AND. NROWO.EQ.4*NROWN)  THEN
C          Four-fold decimation by summation of neighbouring pixels.
           K1=1
           K2=K1+NSAMO
           DO    J=1,NROWO,4
              DO    I=1,NSAMN
                 BUF(K2+I-1)=0.0
              ENDDO
              DO    K=1,4
                 CALL  REDLIN(LUNO,BUF,NSAMO,J+K-1)
                 DO    I=1,NSAMO,4
                    BUF(K2-1+(I+3)/4)=BUF(K2-1+(I+3)/4)+
     &               BUF(I)+BUF(I+1)+BUF(I+2)+BUF(I+3)
                 ENDDO
              ENDDO
              DO    I=1,NSAMN
                 BUF(K2+I-1)=BUF(K2+I-1)/16
              ENDDO
              CALL  WRTLIN(LUNN,BUF(K2),NSAMN,(J+3)/4)
           ENDDO
           RETURN

	ELSEIF(NSAMO.EQ.6*NSAMN .AND. NROWO.EQ.6*NROWN)  THEN
C          SIX-FOLD DECIMATION BY SUMMATION OF NEIGHBOURING PIXELS.
           K1=1
           K2=K1+NSAMO
           DO J=1,NROWO,6
              DO I=1,NSAMN
                 BUF(K2+I-1)=0.0
              ENDDO
              DO K=1,6
                 CALL  REDLIN(LUNO,BUF,NSAMO,J+K-1)
                 DO I=1,NSAMO,6
                    BUF(K2-1+(I+5)/6)=BUF(K2-1+(I+5)/6)+
     &	             BUF(I)+BUF(I+1)+BUF(I+2)+BUF(I+3)+BUF(I+4)+BUF(I+5)
                 ENDDO
              ENDDO
              DO I=1,NSAMN
                 BUF(K2+I-1)=BUF(K2+I-1)/36
              ENDDO
              CALL  WRTLIN(LUNN,BUF(K2),NSAMN,(J+5)/6)
           ENDDO
           RETURN
	ENDIF
C---------------------------------------------------------------
      SIZX=FLOAT(NSAMN)/FLOAT(NSAMO)
      SIZY = FLOAT(NROWN)/FLOAT(NROWO)
      CORX = (NSAMO-1.)/(NSAMN-1.)
      CORY = (NROWO-1.)/(NROWN-1.)

C     WRITE(4,7777)SIZX,CORX,SIZY,CORY
C7777 FORMAT(1X,4F8.3)
      NSAMO2 = NSAMO*2
      NSAMO3 = NSAMO2+NSAMN

      NE  = NROWN - 1
      NES = NSAMN-1

C     DO FIRST LINE
         CALL REDLIN(LUNO,BUF,NSAMO,1)
	 RPTY = 1.
         DO  J = 2,NES
            RPTY = RPTY+CORX
            NPTY1 = INT(RPTY)
            Y = RPTY-NPTY1
            YREM = 1.-Y
            BUF(NSAMO2+J) = YREM*BUF(NPTY1)+Y*BUF(NPTY1+1)
         ENDDO
         BUF(NSAMO2+1) = BUF(1)
         BUF(NSAMO3)   = BUF(NSAMO)
         CALL WRTLIN(LUNN,BUF(NSAMO2+1),NSAMN,1)
         NS1 = 1
         NS2 = NSAMO+1
         RPTX = 1.
         DO  I = 2,NE
            RPTX=RPTX+CORY
            NPTX1=INT(RPTX)
            IF (NPTX1.EQ.NPREV) GOTO 800
            NPTX2=NPTX1+1
	    IF (SIZY .LT. 1) CALL REDLIN(LUNO,BUF(NS1),NSAMO,NPTX1)
            CALL REDLIN(LUNO,BUF(NS2),NSAMO,NPTX2)
            NPREV = NPTX1
C           ALTERNATE BUFFER ADDRESS
            NS1P = NS1
            NS1 = NS2
            NS2 = NS1P

800         X= RPTX-NPTX1
            XREM=1.-X
C           INTERPOLATE  LINE (I) 
	    RPTY = 1.
            DO  J = 2,NES
               RPTY=RPTY+CORX
               NPTY1=INT(RPTY)
               NPTY2=NPTY1+1
               Y=(RPTY-NPTY1)
               YREM=1.-Y
               BUF(NSAMO2+J)=X*(YREM*BUF(NPTY1+NS1-1)+Y*BUF(NPTY1+NS1))
     &             + XREM*(YREM*BUF(NPTY1+NS2-1) + Y*BUF(NPTY1+NS2))
            ENDDO
            BUF(NSAMO2+1) = X*BUF(NS1) + XREM*BUF(NS2)
            BUF(NSAMO3)=X*BUF(NSAMO+NS1-1) +XREM*BUF(NSAMO+NS2-1)
            CALL WRTLIN(LUNN,BUF(NSAMO2+1),NSAMN,I)
         ENDDO

C        DO LAST LINE
	 RPTY = 1.
	 IF(SIZY .LT. 1) CALL REDLIN(LUNO,BUF(NS1),NSAMO,NROWO)
         DO  J=2,NES
            RPTY=RPTY+CORX
            NPTY1=INT(RPTY)
            Y=RPTY-NPTY1
            YREM=1.-Y
            BUF(NSAMO2+J)=YREM*BUF(NPTY1+NS1-1)+Y*BUF(NPTY1+NS1)
         ENDDO
         BUF(NSAMO2+1) = BUF(NS1)
         BUF(NSAMO3)   = BUF(NS1+NSAMO-1)
         CALL WRTLIN(LUNN,BUF(NSAMO2+1),NSAMN,NROWN)
         END
@


1.10
log
@maxdim was not used
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.9
log
@GPL_2010
@
text
@d63 1
a63 1
      SUBROUTINE INTERP(LUNO,LUNN,NSAMO,NROWO,NSAMN,NROWN,MAXDIM)
a142 5
C     IF(NSAMO3.LE.MAXDIM) GOTO 20
C     CALL ERRT(6,'INTERP',NE)
C     RETURN
C20   NPTX1 = -1

d145 1
@


1.8
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.7
log
@HRI GPL License used
@
text
@a6 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
a30 1
C **************************************************************************
@


1.6
log
@cosmetic
@
text
@d6 1
d8 1
d10 24
d40 1
@


1.5
log
@a
@
text
@a33 4
C--*******************************************************************

      SUBROUTINE      INTERP(LUNO,LUNN,NSAMO,NROWO,NSAMN,NROWN,MAXDIM)

d49 5
d55 20
a74 1
      COMMON         BUF(1)
d76 22
a97 48
C
C  Two-fold decimation by summation of neighbouring pixels.
C
	IF(NSAMO.EQ.2*NSAMN .AND. NROWO.EQ.2*NROWN)  THEN
	K1=1
	K2=K1+NSAMO
	DO    J=1,NROWO,2
	DO    I=1,NSAMN
	 BUF(K2+I-1)=0.0
	ENDDO
	DO    K=1,2
	CALL  REDLIN(LUNO,BUF,NSAMO,J+K-1)
	DO    I=1,NSAMO,2
	BUF(K2-1+(I+1)/2)=BUF(K2-1+(I+1)/2)+BUF(I)+BUF(I+1)
	ENDDO
	ENDDO
	DO    I=1,NSAMN
	BUF(K2+I-1)=BUF(K2+I-1)/4
	ENDDO
	CALL  WRTLIN(LUNN,BUF(K2),NSAMN,(J+1)/2)
	ENDDO
	RETURN
C
C  Four-fold decimation by summation of neighbouring pixels.
C
	ELSEIF(NSAMO.EQ.4*NSAMN .AND. NROWO.EQ.4*NROWN)  THEN
	K1=1
	K2=K1+NSAMO
	DO    J=1,NROWO,4
	DO    I=1,NSAMN
	BUF(K2+I-1)=0.0
	ENDDO
	DO    K=1,4
	CALL  REDLIN(LUNO,BUF,NSAMO,J+K-1)
	DO    I=1,NSAMO,4
	BUF(K2-1+(I+3)/4)=BUF(K2-1+(I+3)/4)+
     &		BUF(I)+BUF(I+1)+BUF(I+2)+BUF(I+3)
	ENDDO
	ENDDO
	DO    I=1,NSAMN
	BUF(K2+I-1)=BUF(K2+I-1)/16
	ENDDO
	CALL  WRTLIN(LUNN,BUF(K2),NSAMN,(J+3)/4)
	ENDDO
	RETURN
C
C  Six-fold decimation by summation of neighbouring pixels.
C
d99 20
a118 19
	K1=1
	K2=K1+NSAMO
	DO    J=1,NROWO,6
	DO    I=1,NSAMN
	BUF(K2+I-1)=0.0
	ENDDO
	DO    K=1,6
	CALL  REDLIN(LUNO,BUF,NSAMO,J+K-1)
	DO    I=1,NSAMO,6
	BUF(K2-1+(I+5)/6)=BUF(K2-1+(I+5)/6)+
     &	  BUF(I)+BUF(I+1)+BUF(I+2)+BUF(I+3)+BUF(I+4)+BUF(I+5)
	ENDDO
	ENDDO
	DO    I=1,NSAMN
	BUF(K2+I-1)=BUF(K2+I-1)/36
	ENDDO
	CALL  WRTLIN(LUNN,BUF(K2),NSAMN,(J+5)/6)
	ENDDO
	RETURN
d126 2
a127 2
C      WRITE(4,7777)SIZX,CORX,SIZY,CORY
C7777  FORMAT(1X,4F8.3)
d130 1
d134 3
a136 2
C20    NPTX1 = -1
      NE=NROWN - 1
d138 61
a198 59
C DO FIRST LINE
      CALL REDLIN(LUNO,BUF,NSAMO,1)
	RPTY = 1.
      DO  J = 2,NES
      RPTY = RPTY+CORX
      NPTY1 = INT(RPTY)
      Y = RPTY-NPTY1
      YREM = 1.-Y
      BUF(NSAMO2+J) = YREM*BUF(NPTY1)+Y*BUF(NPTY1+1)
      ENDDO
      BUF(NSAMO2+1) = BUF(1)
      BUF(NSAMO3) = BUF(NSAMO)
      CALL WRTLIN(LUNN,BUF(NSAMO2+1),NSAMN,1)
      NS1 = 1
      NS2 = NSAMO+1
	RPTX = 1.
      DO  I=2,NE
      RPTX=RPTX+CORY
      NPTX1=INT(RPTX)
      IF(NPTX1.EQ.NPREV) GOTO 800
      NPTX2=NPTX1+1
	IF (SIZY .LT. 1) CALL REDLIN(LUNO,BUF(NS1),NSAMO,NPTX1)
      CALL REDLIN(LUNO,BUF(NS2),NSAMO,NPTX2)
      NPREV = NPTX1
C ALTERNATE BUFFER ADDRESS
      NS1P = NS1
      NS1 = NS2
      NS2 = NS1P
800    X= RPTX-NPTX1
      XREM=1.-X
C INTERPOLATE  LINE (I) 
	RPTY = 1.
      DO  J = 2,NES
      RPTY=RPTY+CORX
      NPTY1=INT(RPTY)
      NPTY2=NPTY1+1
      Y=(RPTY-NPTY1)
      YREM=1.-Y
      BUF(NSAMO2+J)=X*(YREM*BUF(NPTY1+NS1-1)+Y*BUF(NPTY1+NS1))
     1 + XREM*(YREM*BUF(NPTY1+NS2-1) + Y*BUF(NPTY1+NS2))
      ENDDO
      BUF(NSAMO2+1) = X*BUF(NS1) + XREM*BUF(NS2)
      BUF(NSAMO3)=X*BUF(NSAMO+NS1-1) +XREM*BUF(NSAMO+NS2-1)
      CALL WRTLIN(LUNN,BUF(NSAMO2+1),NSAMN,I)
      ENDDO
C DO LAST LINE
	RPTY = 1.
	IF(SIZY .LT. 1) CALL REDLIN(LUNO,BUF(NS1),NSAMO,NROWO)
      DO  J=2,NES
      RPTY=RPTY+CORX
      NPTY1=INT(RPTY)
      Y=RPTY-NPTY1
      YREM=1.-Y
      BUF(NSAMO2+J)=YREM*BUF(NPTY1+NS1-1)+Y*BUF(NPTY1+NS1)
      ENDDO
      BUF(NSAMO2+1) = BUF(NS1)
      BUF(NSAMO3)=BUF(NS1+NSAMO-1)
      CALL WRTLIN(LUNN,BUF(NSAMO2+1),NSAMN,NROWN)
      END
@


1.4
log
@six-fold
@
text
@d55 1
a55 1
CNO_SAVE
@


1.3
log
@*** empty log message ***
@
text
@d101 23
@


1.2
log
@nosave
@
text
@d62 5
a66 4
	DO  80  J=1,NROWO,2
	DO  81  I=1,NSAMN
81	BUF(K2+I-1)=0.0
	DO  82  K=1,2
d68 9
a76 5
	DO  82  I=1,NSAMO,2
82	BUF(K2-1+(I+1)/2)=BUF(K2-1+(I+1)/2)+BUF(I)+BUF(I+1)
	DO  83  I=1,NSAMN
83	BUF(K2+I-1)=BUF(K2+I-1)/4
80	CALL  WRTLIN(LUNN,BUF(K2),NSAMN,(J+1)/2)
d84 5
a88 4
	DO  90  J=1,NROWO,4
	DO  91  I=1,NSAMN
91	BUF(K2+I-1)=0.0
	DO  92  K=1,4
d90 2
a91 2
	DO  92  I=1,NSAMO,4
92	BUF(K2-1+(I+3)/4)=BUF(K2-1+(I+3)/4)+
d93 7
a99 3
	DO  93  I=1,NSAMN
93	BUF(K2+I-1)=BUF(K2+I-1)/16
90	CALL  WRTLIN(LUNN,BUF(K2),NSAMN,(J+3)/4)
d121 1
a121 1
      DO 50 J = 2,NES
d127 1
a127 1
50    CONTINUE
d134 1
a134 1
      DO 200 I=2,NE
d150 1
a150 1
      DO 100 J = 2,NES
d158 1
a158 1
 100  CONTINUE
d162 1
a162 1
 200  CONTINUE
d166 1
a166 1
      DO 300 J=2,NES
d172 1
a172 1
 300  CONTINUE
@


1.1
log
@Initial revision
@
text
@d55 1
d76 1
a76 1
	elseIF(NSAMO.EQ.4*NSAMN .AND. NROWO.EQ.4*NROWN)  THEN
@
