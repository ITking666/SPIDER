head	1.27;
access;
symbols
	pre_getangas:1.27
	GPL2010:1.26
	pre_GPL2010:1.25
	pre_var_equation:1.23
	pre_fftwrings:1.22
	pre_opfiles:1.22
	src:1.22
	best-code:1.22
	named-reg:1.22
	x-named-regs:1.21
	x:1.21
	v13-00:1.21
	pre_GPL:1.19
	prec_CA:1.16
	noindx:1.15
	Bproc:1.13
	oct21:1.12
	last77:1.8;
locks; strict;
comment	@c @;


1.27
date	2010.08.31.14.45.02;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2010.06.24.13.26.52;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2010.02.10.13.07.50;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2009.11.17.15.37.16;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2008.06.06.15.18.08;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2005.12.12.15.30.06;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2005.10.17.20.47.18;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2005.10.17.18.37.41;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2004.10.13.16.16.42;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2004.09.30.16.40.11;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2003.10.30.20.09.10;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2003.07.08.16.18.30;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2002.09.18.17.29.24;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2000.12.19.19.50.29;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.08.08.19.49.56;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.09.13.18.35.55;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	99.06.17.19.11.18;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	99.05.27.13.28.52;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.04.21.15.47.21;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	97.03.21.14.59.22;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	97.03.21.14.35.48;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	96.09.19.18.27.53;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	96.07.02.18.40.13;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	94.11.01.21.30.42;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	94.08.09.10.00.40;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.07.19.12.01.22;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.37;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.27
log
@can substitute comment keys
@
text
@
C++*********************************************************************
C
C SAVDOCQ.F           REWRITTEN                   SEPT 96  ArDean Leith
C                     USED LUNDOC                 JUNE 99  ArDean Leith
C                     OPENDOC PARAMETERS          DEC 2000 ARDEAN LEITH
C                     FLUSH                       SEP 2002 ArDean Leith
C                     INCORE OPENDOC              JUL 2003 ARDEAN LEITH
C                     LUNDOCWRTDAT FLUSHES        OCT 2003 ARDEAN LEITH
C                     REMOVED / FROM COMMENT      JUN 2008 ARDEAN LEITH
C                     USED: LUNDOCPUTCOM          NOV 2009 ARDEAN LEITH
C                     HEADER                      FEB 2010 ARDEAN LEITH
C                     SUPPORT FOR //COMMENT       AUG 2010 ARDEAN LEITH
C                     LONGER COMMENT KEYS         AUG 2010 ARDEAN LEITH
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  SAVDOCQ(DOCNAM,NLET,HEADER,IRTFLG)
C
C  PURPOSE:    SUBROUTINE TO SAVE PARTICULAR REGISTERS IN A 
C              FILE-BASED DOCUMENT FILE.  CALLED FROM COMMAND LINE.
C
C  OPERATION USAGE:
C             SD [KEY],[REG1],[REG2],[REG3]
C             SD E               (END DOC FILE USAGE, CLOSE FILE)
C             SD /NEW COMMENT FOR DOC. FILE 
C             SD //NEW COMMENT FOR DOC. FILE 
C                 
C  PARAMETERS:
C      DOCNAME   FILE NAME                            (SENT)
C      NLET      NUMBER OF CHAR IN DOCNAME            (SENT)
C      HEADER   PUT HEADER IN FILE ON OPEN            (SENT)
C      IRTFLG    ERROR FLAG                           (RETURNED)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

	SUBROUTINE SAVDOCQ(DOCNAM,NLET,HEADER,IRTFLG)

        INCLUDE 'CMLIMIT.INC' 
        INCLUDE 'CMBLOCK.INC' 

        CHARACTER(LEN=*)      :: DOCNAM

C	MAX. NUMBER OF SIMULTANEOUS DOCUMENT FILES ALLOWED
	INTEGER, PARAMETER    :: MAXICDOCS = 20 
        CHARACTER(LEN=MAXNAM) :: DCFILE(MAXICDOCS)

C       MAXIMUM NUMBER OF REGISTERS SAVED
        INTEGER, PARAMETER    :: MAXLIST=50
	REAL                  :: DLIST(MAXLIST)
	INTEGER               :: ILIST(MAXLIST)
	LOGICAL               :: NEWFILE,COMOUT,HEADER,SDT
        LOGICAL               :: GETANS,UPPER,WANTSUB,SAYPRMT,SAYANS
        LOGICAL               :: ENDATSEMI,STRIP
        CHARACTER(LEN=160)    :: COMSTR
  
C       NEEDED FOR FUTURE CALLS
        SAVE           DCFILE, ICLAST

        DATA           DCFILE/MAXICDOCS*'*'/
        DATA           ICLAST/0/

        CALL SET_MPI(ICOMM,MYPID,MPIERR) ! SETS ICOMM AND MYPID

C       SET ERROR RETURN
        IRTFLG = 1

        IF (FCHAR(4:4) .EQ. 'E') THEN
C          WANT TO CEASE USING A DOC FILE -----------------------------
C          DETERMINE WHICH OF THE OLD NAMES NEEDS TO BE CLOSED
           DO  IC=1,MAXICDOCS
             IF  (DOCNAM .EQ. DCFILE(IC)) THEN
C              CHANGE DCFILE SO THAT IT CANNOT BE MATCHED WITH ANY FILE NAME.
               DCFILE(IC)  = '*' 
               CLOSE(200+IC)
               IRTFLG     = 0
               RETURN
             ENDIF
           ENDDO

           IF (MYPID .LE. 0)WRITE(NOUT,*) ' DOCUMENT FILE NOT OPEN NOW '
           RETURN
        ENDIF


C       COMPARE NEW DOCUMENT FILE WITH OLD NAMES ---------------------

        IC     = 0

C       NAME IS MOST-LIKELY STILL THE SAME
        IF (ICLAST .GT. 0 .AND. ICLAST .LE. MAXICDOCS .AND.
     &      DOCNAM .EQ. DCFILE(ICLAST)) THEN
C          DOCNAM IS ALREADY IN-CORE
           IC    = ICLAST
           NDOC  = 200 + IC
           GOTO 14
        ENDIF

C       FILL FROM FRONT TO BACK
        DO ICT = 1,MAXICDOCS
           IF (DOCNAM .EQ. DCFILE(ICT)) THEN
C             DOCNAM IS ALREADY OPEN
              IC   = ICT
              NDOC = 200 + IC
              GOTO 14
           ENDIF

C          REMEMBER FIRST EMPTY LOCATION
           IF (IC .EQ. 0 .AND. DCFILE(ICT)  .EQ. '*') IC = ICT
        ENDDO

C       DOCUMENT NAME NOT FOUND IN LIST. 
        IF (IC .EQ. 0) THEN
C          LIST FULL, CLOSE SOMETHING & OPEN THIS
           IC = ICLAST + 1
           IF (IC .GT. MAXICDOCS) IC = 1
           DCFILE(IC) = '*'
           CLOSE(200 + IC)
        ENDIF

C       OPEN DOC FILE ON UNIT IC + 200 
        NDOC = IC + 200 
      
C       FILE MAY NOT HAVE BEEN ACCESSED YET TODAY, PUT NEW HEADER IN? 
        CALL OPENDOC(DOCNAM,.FALSE.,NLET,NDOC,NIC,.FALSE.,' ',
     &               .FALSE.,.TRUE.,HEADER,NEWFILE,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (NIC .LE. 0) THEN
           CALL ERRT(101,'USE <SD IC> FOR INCORE DOC FILE.',NE)
           RETURN
        ENDIF 

C       PUT NAME IN LIST OF OPENED FILES
        DCFILE(IC)= DOCNAM
        ICLAST = IC

C       PARSE REGISTER LINE, CHECK FOR IKEY & NLIST ------------------
14      CALL REG_DOC_PARSE(FCHAR(4:),COMOUT,IKEY,NLIST,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (COMOUT) THEN
C          JUST WANT TO PUT A TEXT COMMENT IN THE DOC FILE.

           WANTSUB = (FCHAR(5:5) .EQ. '/')
           IF (WANTSUB) THEN
C             SUBSTITUTE VARIABLES INTO COMMENT

C             DO NOT UPPERCASE THE COMMENT, STRIP AFTER ;
              UPPER     = .FALSE.
              SAYPRMT   = .FALSE.
              SAYANS    = .FALSE.
              ENDATSEMI = .TRUE.
              GETANS    = .FALSE.
              STRIP     = .TRUE.
              CALL RDPR(FCHAR(6:),NC,COMSTR,GETANS,
     &            UPPER,WANTSUB,SAYPRMT,SAYANS,ENDATSEMI,STRIP,IRTFLG)
              IF (IRTFLG .NE. 0) RETURN

              CALL LUNDOCPUTCOM(NDOC,COMSTR(1:NC),IRTFLG)
           ELSE
C             DO NOT SUBSTITUTE VARIABLES INTO COMMENT
              CALL LUNDOCPUTCOM(NDOC,FCHAR(5:),IRTFLG)
           ENDIF
           RETURN
        ENDIF


        IF (MAXLIST .LT. NLIST) THEN
           CALL ERRT(102,'MAX. NUMBER OF REGISTERS',MAXLIST)
           NLIST = MAXLIST
        ENDIF

C       RETRIEVE DATA FROM THE REGISTER(S) LISTED IN NSEL INTO: DLIST
        CALL REG_GET_NSELA(NLIST,DLIST,IRTFLG)

C       WRITE DATA FROM DLIST INTO DOC FILE FOR THIS KEY
        SDT =  (FCHAR(4:4) .EQ. 'T') 
        CALL LUNDOCWRTDAT(NDOC,IKEY,DLIST,NLIST,SDT,IRTFLG)

C       LEAVE FILE OPEN, FOR NEXT USE
        IRTFLG = 0

	RETURN
	END

@


1.26
log
@GPL_2010
@
text
@d13 2
d46 2
a47 1
C
d72 5
a76 2
	LOGICAL               :: NEWFILE,COMOUT,HEADER
   
d83 1
a83 1
       CALL SET_MPI(ICOMM,MYPID,MPIERR) ! SETS ICOMM AND MYPID
d163 22
a184 2
C          JUST WANT TO PUT A COMMENT IN THE DOC FILE.
           CALL LUNDOCPUTCOM(NDOC,FCHAR(5:),IRTFLG)
d188 1
d198 2
a199 1
        CALL LUNDOCWRTDAT(NDOC,IKEY,DLIST,NLIST,IRTFLG)
@


1.25
log
@HEADER
@
text
@d14 3
a16 1
C=* This file is part of:                                              * C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
d28 1
a28 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a29 1
C=*                                                                    *
@


1.24
log
@USED: LUNDOCPUTCOM
@
text
@d11 2
a12 1
C                     USED: LUNDOCPUTCOM          nov 2009 ARDEAN LEITH
d15 1
a15 1
C=* Copyright 1985-2009  Health Research Inc.,                         *
d34 1
a34 1
C  SAVDOCQ(DOCNAM,NLET,IRTFLG)
d45 4
a48 3
C      DOCNAME   FILE NAME                       (SENT)
C      NLET      NUMBER OF CHAR IN DOCNAME       (SENT)
C      IRTFLG    ERROR FLAG                      (RETURNED)
d53 1
a53 1
	SUBROUTINE SAVDOCQ(DOCNAM,NLET,IRTFLG)
d68 2
a69 2
	LOGICAL               :: NEWFILE,COMOUT

d137 1
a137 1
C       FILE MAY NOT HAVE BEEN ACCESSED YET TODAY, PUT NEW HEADER IN 
d139 1
a139 1
     &               .FALSE.,.TRUE.,.TRUE.,NEWFILE,IRTFLG)
@


1.23
log
@removed / from comment
@
text
@d11 1
d13 4
a16 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d18 1
a18 6
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d23 1
a23 1
C=* This program is distributed in the hope that it will be useful,    *
d29 1
a29 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d39 1
a39 1
C             SD X0,X15,X20,X5
d74 1
a74 8
#ifdef USE_MPI
        INCLUDE 'mpif.h'
        INTEGER MYPID, COMM, MPIERR
        COMM = MPI_COMM_WORLD
        CALL MPI_COMM_RANK(COMM, MYPID, MPIERR)
#else
        MYPID = -1 
#endif
d97 1
a97 1
C       COMPARE NEW DOCUMNET FILE WITH OLD NAMES ---------------------
d155 1
a155 3
           IF (MYPID .LE. 0) WRITE(NDOC,94) FCHAR(5:)
94         FORMAT(' ; ',A)
           IRTFLG = 0
@


1.22
log
@native named registers
@
text
@d4 7
a10 6
C SAVDOCQ.F               REWRITTEN               SEPT 96  ArDean Leith
C                         USED LUNDOC             JUNE 99  ArDean Leith
C                         OPENDOC PARAMETERS      DEC 2000 ARDEAN LEITH
C                         FLUSH                   SEP 2002 ArDean Leith
C                         INCORE OPENDOC          JUL 2003 ARDEAN LEITH
C                         LUNDOCWRTDAT FLUSHES    OCT 2003 ARDEAN LEITH
d13 1
a13 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d166 1
a166 1
           IF (MYPID .LE. 0) WRITE(NDOC,94) FCHAR(4:)
@


1.21
log
@GPL License fixed
@
text
@d59 2
d62 2
a63 4
	INTEGER, PARAMETER    ::  MAXICDOCS = 20 
        CHARACTER(LEN=MAXNAM) ::  DCFILE(MAXICDOCS)

        CHARACTER(LEN=*) ::       DOCNAM
d66 4
a69 3
        PARAMETER        (MAXLIST=50)
	DIMENSION        DLIST(MAXLIST),ILIST(MAXLIST)
	LOGICAL ::       NEWFILE,COMOUT
d85 1
d102 1
a102 2
           IF (MYPID .LE. 0) 
     &        WRITE(NOUT,*) ' DOCUMENT FILE NOT OPEN NOW '
d159 2
a160 3
C       PARSE REGISTER LINE, CHECK FOR ',' OR 'X' ---------------------
14      CALL LUNDOCPARSE(FCHAR(4:),COMOUT,IKEY,ILIST,MAXLIST,
     &                   NLIST,IRTFLG)
d171 7
a177 5
C       GET DATA FROM THE REGISTER(S)
	DO  K=1,NLIST
C          DLIST(K) = PARAM(ILIST(K))
           CALL REG_GET(ILIST(K), DLIST(K) ,.TRUE.,IRTFLG)
        ENDDO
d179 1
a179 1
C       WRITE DATA INTO DOC FILE
@


1.20
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a10 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d14 1
a14 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a33 6

C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.19
log
@LUNDOCWRTDAT FLUSHES
@
text
@d2 1
d13 24
@


1.18
log
@mpi
@
text
@d4 6
a9 6
C SAVDOCQ.F                   REWRITTEN           SEPT 96  ArDean Leith
C                             USED LUNDOC         JUNE 99  ArDean Leith
C                             OPENDOC PARAMETERS  DEC 2000 ARDEAN LEITH
C                             FLUSH               SEP 2002 ArDean Leith
C                             INCORE OPENDOC      JUL 2003 ARDEAN LEITH
C
a161 11

C       ADDED SEPT 02 al
#if defined (SP_NT)
        CALL flush(NDOC)
#else
#if defined (SP_IBMSP3) 
        CALL flush_(NDOC)
#else
        CALL flush(NDOC,IRET)
#endif
#endif
@


1.17
log
@mpi
@
text
@d61 1
a61 1
        INTEGER MYPID, COMM, IERR
d63 1
a63 1
        CALL MPI_COMM_RANK(COMM, MYPID, IERR)
d83 2
a84 7
#ifdef USE_MPI
           IF (MYPID .EQ. 0) THEN
              WRITE(NOUT,*) ' DOCUMENT FILE NOT OPEN NOW '
           ENDIF
#else
           WRITE(NOUT,*) ' DOCUMENT FILE NOT OPEN NOW '
#endif
d148 1
a148 7
#ifdef USE_MPI
           IF (MYPID .EQ. 0) THEN 
              WRITE(NDOC,94) FCHAR(4:)
           ENDIF 
#else
           WRITE(NDOC,94) FCHAR(4:)
#endif
@


1.16
log
@incore opendoc
@
text
@d59 8
d83 5
d89 1
d153 5
d159 1
@


1.15
log
@flush
@
text
@d4 2
a5 2
C SAVDOCQ.F                   REWRITTEN SEPT 96 ArDean Leith
C                             USED LUNDOC JUNE 99 ArDean Leith
d8 1
d12 1
a12 1
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
d22 1
a22 1
C              DOCUMENT FILE.  CALLED FROM COMMAND LINE.
d39 1
d43 2
a44 2
	PARAMETER      (MAXICDOCS = 20) 
        CHARACTER *81  DCFILE(MAXICDOCS)
d46 1
a46 1
        CHARACTER *(*) DOCNAM
d49 3
a51 3
        PARAMETER      (MAXLIST=50)
	DIMENSION      DLIST(MAXLIST),ILIST(MAXLIST)
	LOGICAL        NEWFILE,COMOUT
d70 1
a70 1
               IRTFLG = 0
d97 1
a97 1
              IC    = ICT
d119 1
a119 1
        CALL OPENDOC(DOCNAM,.FALSE.,NLET,NDOC,.FALSE.,' ',
d122 5
@


1.14
log
@opendoc has prompt parameter now
@
text
@d7 1
d9 8
a16 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d146 11
@


1.13
log
@used reg_set
@
text
@d4 3
a6 2
C SAVDOCQ.F                        REWRITTEN SEPT 96 ArDean Leith
C                                  USED LUNDOC JUNE 99 ArDean Leith
a32 2
C  CALLS:        OPENDOC, LUNDOCPARSE, LUNDOCWRTDAT 
C
d117 1
a117 1
        CALL OPENDOC(DOCNAM,.FALSE.,NLET,NDOC,.FALSE.,
@


1.12
log
@unused DINDEX variable removed
@
text
@d141 2
a142 1
           DLIST(K) = PARAM(ILIST(K))
@


1.11
log
@used lundoc
@
text
@a46 2
        CHARACTER      DINDEX,CTEMP

@


1.10
log
@used opendoc message now
@
text
@d4 2
a5 1
C SAVDOCQ.F                                       REWRITTEN SEPT 96 al
d22 5
d32 2
d50 1
a50 1
        PARAMETER      (MAXLIST=20)
d52 1
a52 1
	LOGICAL        NEWFILE
d77 1
a77 1
          RETURN
a80 1

d119 1
a119 2
C       FILE PROBABLY HASN'T BEEN ACCESSED YET DURING THIS RUN.
C       PUT NEW TITLE IN FILE
d126 1
d129 3
d133 3
a135 14
C       CHECK IF FIRST ENTRY IS A REGISTER, INTEGER, OR COMMENT
14 	DO K = 4,80
          CTEMP = FCHAR(K:K)
	  IF (CTEMP .EQ. ',' .OR. CTEMP .EQ. 'X' .OR.
     &        CTEMP .EQ. '/') GOTO 15
        ENDDO
	CALL ERRT(16,'SAVDOCQ',NE)
	RETURN

15      ICLAST = IC

        IF (CTEMP .EQ. '/') THEN
C          JUST WANT TO PUT COMMENT IN THE DOC FILE.
           WRITE(NDOC,94) FCHAR(1:80)
a138 39

	ELSEIF (CTEMP .EQ. 'X') THEN
C         FIRST ENTRY IS A REGISTER. PUT REGISTER CONTENTS IN DLIST.
          K = INDEX(FCHAR(4:80),',') + 3
	  IF (K .LE. 5) THEN
             CALL ERRT(16,'SAVDOCQ',NE)
             RETURN

          ELSE
            CALL CHKSTRQ(FCHAR(4:),K-4,'I',KLIST,DUM,NLIST,IER)
            IF (IER .NE. 0) THEN
               CALL ERRT(16,'SAVDOCQ',NE)
               RETURN
            ENDIF
	    DLIST(1) = PARAM(KLIST)
          ENDIF
       
	ELSEIF (FCHAR(K-1:K-1) .GE. 'A' .AND. 
     &          FCHAR(K-1:K-1) .LE. 'Z' .AND. 
     &          FCHAR(K-1:K-1) .NE. 'X') THEN
C          FIRST ENTRY IS A DO LOOP INDEX, PUT ITS VALUE INTO DLIST(1).
           DINDEX   = FCHAR(K-1:K-1)
           IDX      = ICHAR(DINDEX) - 64
           DLIST(1) = IALPHA(IDX)

        ELSE
C          FIRST ENTRY IS A NUMBER. PUT NUMBER IN DLIST
           CALL CHKNUMQ(FCHAR(4:),K-4,'I',NUM,FNUM,IER)
           IF (IER.NE.0) THEN
              CALL ERRT(16,'SAVDOCQ',NE)
              RETURN
           ENDIF
           DLIST(1) = NUM
        ENDIF

        CALL CHKSTRQ(FCHAR(K+1:),79-K,'I',ILIST,DUM,NLIST,IER)
        IF (IER .NE. 0) THEN
           CALL ERRT(16,'SAVDOCQ',NE)
           RETURN
d141 1
a141 2

C       TITLE HAS BEEN ADDED FOR THIS RUN, WRITE DATA ----------------
d143 1
a143 2
          K1 = ILIST(K)
          DLIST(K+1) = PARAM(K1)
d146 2
a147 45
	NLIST = NLIST+1

C       ICOUNT IS THE NUMBER OF VALUES IN THAT LINE.
        IGO    = 2
        LEFT   = NLIST - IGO + 1
	ICOUNT = MIN0(LEFT,6)

        IF (DLIST(1) .LT. 0.0) THEN
C         THIS IS A COMMENT KEY
          IKEY  = ABS(DLIST(1))
          IF (IKEY .GT. 999) THEN
            WRITE(NOUT,95) IKEY
95          FORMAT(' *** COMMENT KEY:',I5,' MUST BE < 1000'/)
            CALL ERRT(100,'SAVDOCQ',NE)
            RETURN
          ENDIF

          WRITE(NDOC,96) IKEY,ICOUNT,(DLIST(K),K=2,ICOUNT+1)
96        FORMAT(' ;',I3,' ',I1,6G12.5)
C         CONTINUATION LINES NOT SUPPORTED FOR COMMENT KEYS

        ELSE
          IKEY = DLIST(1) + 0.5
          IF (IKEY .GT. 99999) THEN
            WRITE(NOUT,97) IKEY
97          FORMAT(' *** KEY:',I7,' MUST BE < 100000'/)
            CALL ERRT(100,'SAVDOCQ',NE)
            RETURN
          ENDIF

          WRITE(NDOC,1462) IKEY,ICOUNT,(DLIST(K),K=2,ICOUNT+1)
1462	  FORMAT(I5,' ',I1,6G12.5)

20        IGO    = IGO + ICOUNT
          LEFT   = NLIST - IGO + 1
	  ICOUNT = MIN0(LEFT,6)

          IF (LEFT .GT. 0) THEN
C           CONTINUATION LINE OF REGISTERS
            WRITE(NDOC,98) ICOUNT,(DLIST(K),K=IGO,IGO+ICOUNT-1)
98          FORMAT('  -99 ',I1,6G12.5)
            GOTO 20
          ENDIF
        ENDIF

d149 1
a149 1
C       LEAVE FILE OPEN
@


1.9
log
@y2k
@
text
@a38 2
        CHARACTER *12  CDATT
        CHARACTER *8   CTIMT
d110 4
a113 1
        NDOC = IC + 200       
d115 1
a115 1
     &               .FALSE.,.TRUE.,.FALSE.,NEWFILE,IRTFLG)
a116 8


C       FILE PROBABLY HASN'T BEEN ACCESSED YET DURING THIS RUN.
C       PUT NEW TITLE IN FILE
        CALL DATE_2K(CDATT)
        CALL TIME(CTIMT)
	WRITE(NDOC,93)PRJEXC(1:3),DATEXC(1:3), CDATT,CTIMT,DOCNAM(:NLET)
93      FORMAT(' ; ',A,'/',A,3X,A,'  AT ',A,3X,A)
@


1.8
log
@nlet fixed comment
@
text
@a31 1
CNO_SAVE
d39 1
a39 1
        CHARACTER *9   CDATT
d120 1
a120 1
        CALL DATE(CDATT)
d168 2
a169 2
           DINDEX = FCHAR(K-1:K-1)
           IDX    = ICHAR(DINDEX) - 64
@


1.7
log
@comments changed
@
text
@d22 2
a23 2
C      DOCNAME   file name                       (SENT)
C      NLET      UNUSED
@


1.6
log
@keeps files open now
@
text
@d22 3
a24 2
C      FCHAR   OPERATION READ INTO SPIDER                       (SENT)
C      NDOC    LUN NUMBER OF DOC. FILE TO SAVE REGISTERS        (SENT)
@


1.5
log
@make key go to 99999
@
text
@d4 1
a4 1
C SAVDOCQ.FOR
d16 1
a16 1
C  SAVDOCQ(CFUNC,NDOC,NNAME,CDUM,DCFILE,NUMFIL,NDOCFL)
a19 1
C              SOLICITS DOC FILE NAME.
d22 1
a22 1
C      CFUNC   OPERATION READ INTO DRIVER                       (SENT)
a23 7
C      DCFILE  ARRAY CONTAINING DOCUMENT FILE NAMES BEING       (SENT)
C                   USED DURING THIS SESSION OF DRIVER
C      NNAME   MAX. LENGTH OF DOC. FILE NAMES                   (SENT)
C      NUMFIL  NUMBER OF DOCUMENT FILES PREVIOUSLY USED         (SENT)
C                   IN THIS SESSION
C      CDUM    UNUSED 
C      NDOCFL  NUMBER OF LOCATIONS IN DCFILE                    (SENT)
d28 1
a28 2
c	SUBROUTINE SAVDOCQ(CFUNC,NDOC,NNAME,CDUM,DCFILE,NUMFIL,NDOCFL)
	SUBROUTINE SAVDOCQ(CFUNC,NDOC,NNAME,NUMFIL)
d30 2
a31 2
C	MAX. NUMBER OF DOCUMENT FILES ALLOWED
	PARAMETER (NDOCFL = 20) 
d33 3
a35 13
C       ACTUAL DCFILE(NDOCFL1) = DOC FILE NAMES
        CHARACTER *81 DCFILE
        COMMON /DOC_DCF/ DCFILE(NDOCFL)

	COMMON /UNITS/LUN,NIN,NOUT
	COMMON /PARAM/PARAM(103)
	COMMON /DOLOOP/IALPHA(26)

        CHARACTER *4     DATEXC,PRJEXC
        CHARACTER *10    CDAT
        CHARACTER *8     CTIM
        CHARACTER *160   CTIT
        COMMON /MASTER1/ DATEXC,PRJEXC,CDAT,CTIM,CTIT
d37 2
a38 2
        CHARACTER *(*) CFUNC
        CHARACTER *81  DOCNAM
d41 60
a100 1
        CHARACTER      NULL,DINDEX,CTEMP
d102 25
a126 2
	DIMENSION      DLIST(20),ILIST(20)
	LOGICAL        COMNT,NEWFILE
d128 1
a128 1
        NULL=CHAR(0)
d131 2
a132 2
    	DO K = 4,80
          CTEMP = CFUNC(K:K)
d134 1
a134 1
     &        CTEMP .EQ. '/') GOTO 14
d139 2
a140 1
14      COMNT = .FALSE.
d142 5
a146 2
C         WANT NEW COMMENT IN DOC. FILE
          COMNT = .TRUE.
d150 1
a150 1
          K = INDEX(CFUNC(4:80),',') + 3
d152 2
a153 2
            CALL ERRT(16,'SAVDOCQ',NE)
            RETURN
d156 1
a156 1
            CALL CHKSTRQ(CFUNC(4:),K-4,'I',KLIST,DUM,NLIST,IER)
d158 2
a159 2
              CALL ERRT(16,'SAVDOCQ',NE)
              RETURN
d164 3
a166 3
	ELSEIF (CFUNC(K-1:K-1) .GE. 'A' .AND. 
     &          CFUNC(K-1:K-1) .LE. 'Z' .AND. 
     &          CFUNC(K-1:K-1) .NE. 'X') THEN
d168 1
a168 1
           DINDEX = CFUNC(K-1:K-1)
d174 1
a174 1
           CALL CHKNUMQ(CFUNC(4:),K-4,'I',NUM,FNUM,IER)
d176 2
a177 2
             CALL ERRT(16,'SAVDOCQ',NE)
             RETURN
d182 4
a185 18
        IF (.NOT. COMNT) THEN
           CALL CHKSTRQ(CFUNC(K+1:),79-K,'I',ILIST,DUM,NLIST,IER)
           IF (IER .NE. 0) THEN
             CALL ERRT(16,'SAVDOCQ',NE)
             RETURN
           ENDIF
        ENDIF

C       FIND DOC FILE NAME AND EXISTENCE        
20      CALL OPENDOC(DOCNAM,.TRUE.,NLET,NDOC,.TRUE.,
     &               .FALSE.,.TRUE.,.FALSE.,NEWFILE,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (.NOT. NEWFILE .AND. NUMFIL .GT. 0) THEN
C           SEE IF OLD FILE HAS ALREADY BEEN USED IN THIS DRIVER RUN.
            DO  J = 1,NUMFIL
              IF (DOCNAM(1:NNAME) .EQ. DCFILE(J)(1:NNAME)) GOTO 1450
            ENDDO
a187 13
C       FILE HASN'T BEEN ACCESSED YET DURING THIS RUN.
C       PUT NEW TITLE IN FILE AND PUT NAME IN LIST OF OPENED FILES
        CALL DATE(CDATT)
        CALL TIME(CTIMT)
	WRITE(NDOC,1463) PRJEXC(1:3), DATEXC(1:3), CDATT,CTIMT,
     &                   DOCNAM(1:NNAME)
1463	FORMAT(' ; ',A,'/',A,3X,A,'  AT ',A,3X,A)

	NUMFIL = NUMFIL+1

C       TEMPORARY FIX FOR DCFILE OVERFLOW NOV 90 al
        IF (NUMFIL .GT. NDOCFL) NUMFIL = 1
        DCFILE(NUMFIL)(1:NNAME)= DOCNAM(1:NNAME)
d189 1
a189 9
1450    IF (COMNT) THEN
C          JUST WANT TO PUT COMMENT IN THE DOC FILE.
           WRITE(NDOC,1460) CFUNC(1:80)
1460       FORMAT(' ; ',A)
           CLOSE(NDOC)
           RETURN
        ENDIF

C       TITLE HAS BEEN ADDED FOR THIS DRIVER RUN, WRITE DATA
d206 3
a208 3
            WRITE(NOUT,9934) IKEY
9934        FORMAT(' *** COMMENT KEY:',I5,' MUST BE < 1000'/)
            CLOSE(NDOC)
d212 2
a213 2
          WRITE(NDOC,1491) IKEY,ICOUNT,(DLIST(K),K=2,ICOUNT+1)
1491	  FORMAT(' ;',I3,' ',I1,6G12.5)
d219 3
a221 3
            WRITE(NOUT,9935) IKEY
9935        FORMAT(' *** KEY:',I7,' MUST BE < 100000'/)
            CLOSE(NDOC)
d228 1
a228 1
120       IGO    = IGO + ICOUNT
d234 3
a236 3
            WRITE(NDOC,1469) ICOUNT,(DLIST(K),K=IGO,IGO+ICOUNT-1)
1469        FORMAT('  -99 ',I1,6G12.5)
            GOTO 120
d240 4
a243 1
	CLOSE(NDOC)
@


1.4
log
@fixed common block dcfile(20)
@
text
@d186 1
a186 1
          IF (IKEY .GT. 9999) THEN
d188 1
a188 1
9935        FORMAT(' *** KEY:',I7,' MUST BE < 10000'/)
d194 1
a194 1
1462	  FORMAT(1X,I4,' ',I1,6G12.5)
@


1.3
log
@bug on ndname
@
text
@d36 2
a37 1
	SUBROUTINE SAVDOCQ(CFUNC,NDOC,NNAME,CDUM,DCFILE,NUMFIL,NDOCFL)
d39 7
d56 1
a56 1
        CHARACTER *(*) CDUM,DCFILE(20),CFUNC
a66 1

a75 1

a127 1

a146 1

a147 2


@


1.2
log
@used opendoc and cosmetic
@
text
@d135 1
a135 1
     &                   DOCNAM(I:NDNAME)
@


1.1
log
@Initial revision
@
text
@a1 1

d16 1
a16 1
C  SAVDOC(CFUNC,NDOC,NNAME,CDUM,DCFILE,NUMFIL,NDOCFL)
d18 3
a20 1
C  PURPOSE:    SUBROUTINE TO SAVE PARTICULAR REGISTERS IN A DOCUMENT FILE
d23 7
a29 6
C      CFUNC   OPERATION READ INTO DRIVER
C      NDOC    LUN NUMBER OF DOC. FILE TO SAVE REGISTERS
C      DCFILE  ARRAY CONTAINING DOCUMENT FILE NAMES BEING
C              USED DURING THIS SESSION OF DRIVER
C      NNAME   MAX. LENGTH OF DOC. FILE NAMES
C      NUMFIL  NUMBER OF DOCUMENT FILES PREVIOUSLY USED IN THIS SESSION
d31 1
a31 1
C      NDOCFL  NUMBER OF LOCATIONS IN DCFILE
d49 1
a49 1
        CHARACTER *81  DOCNAM,DOC
d55 1
a55 1
	LOGICAL        EX,COMNT
d66 1
a66 1
	CALL ERRT(16,'DRIVER',NE)
d79 1
a79 1
            CALL ERRT(16,'SAVDOC',NE)
d84 2
a85 2
            IF (IER.NE.0) THEN
              CALL ERRT(16,'DRIVER',NE)
d103 1
a103 1
             CALL ERRT(16,'DRIVER',NE)
d112 1
a112 1
             CALL ERRT(16,'DRIVER',NE)
d118 2
a119 1
20      CALL FILERD(DOC,NLETD,NULL,'DOCUMENT',IRTFLG)
a120 1
	CALL FILCAN(DOCNAM,NDNAME,NULL,NULL,DOC,DATEXC,IER)
a121 3
	WRITE(NOUT,1446) (DOCNAM(II:II),II=1,NDNAME)
1446	FORMAT(1X,30A1)
	INQUIRE(FILE=DOCNAM,EXIST=EX)
d123 5
a127 17
        IF (.NOT. EX) THEN
C         CREATE NEW FILE
          OPEN(UNIT=NDOC,FILE=DOCNAM,STATUS='UNKNOWN')

        ELSE
C         FILE ALREADY EXISTS, OPEN IT FOR APPENDING NEW RECORDS
          OPEN(UNIT=NDOC,FILE=DOCNAM,ACCESS='APPEND',STATUS='OLD')

          IF (NUMFIL .GT. 0) THEN
C           SEE IF FILE HAS ALREADY BEEN USED IN THIS DRIVER RUN.
            DO 1500 J = 1,NUMFIL
              DO K = 1,NNAME
                IF (DOCNAM(K:K) .NE. DCFILE(J)(K:K)) GOTO 1500
              ENDDO
              GOTO 1450
1500        CONTINUE
          ENDIF
d130 1
a130 1
C       FILE NOW EXISTS, BUT HASN'T BEEN ACCESSED YET DURING THIS RUN.
d137 1
d145 2
d149 2
a150 2
           WRITE(NDOC,1460) (CFUNC(I:I),I=K+1,80)
1460       FORMAT(' ; ',80A1)
d156 1
a156 1
	DO 1461 K=1,NLIST
d159 2
a160 1
1461	CONTINUE
d186 1
a186 1
9935        FORMAT(' *** KEY:',I8,' MUST BE < 10000'/)
@
