head	1.15;
access;
symbols
	pre_getangas:1.14
	GPL2010:1.14
	pre_GPL2010:1.13
	pre_var_equation:1.12
	pre_fftwrings:1.12
	pre_opfiles:1.12
	src:1.12
	best-code:1.12
	x-named-regs:1.12
	x:1.12
	v13-00:1.12
	pre_GPL:1.10
	prec_CA:1.10
	noindx:1.10
	Bproc:1.9
	oct21:1.8
	last77:1.7;
locks; strict;
comment	@c @;


1.15
date	2014.02.07.18.14.54;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.24.13.26.45;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2009.10.16.13.41.13;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.17.20.33.00;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.17.18.23.46;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.11.14.08.19;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.12.07.19.38.46;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	99.06.04.21.02.18;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.10.14.21.19.28;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.02.24.20.04.26;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	96.01.16.16.23.36;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.01.27.18.28.38;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	94.11.02.18.46.05;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.10.12;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.15;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.15
log
@formating
@
text
@
C ++********************************************************************
C                                                                      *
C  REPR2_S                                                             *
C           REFORMATTED, LESS OUTPUT          OCT  8 2009 ArDean Leith *
C           ENDLESS LOOP WITH BAD DATA FIXED  FEB  8 2014 ArDean Leith *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  REPR2_S(BCKE,BCN,NSAM,LCYL,NSLICE,                                  *
C          NROWL,NROWH,NANG,IPCUBE,NN,PROJ,PRN,IRI,LTB,LTBN,ABA,INPIC) *
C                                                                      *
C  PURPOSE:  ITERATIVE BACK PROJECTION                                 *
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C        0         2         3         4         5         6         7 *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

	SUBROUTINE REPR2_S(BCKE,BCN,NSAM,LCYL,NSLICE,
     &	   NROWL,NROWH,NANG,IPCUBE,NN,PROJ,PRN,IRI,LTB,LTBN,ABA,INPIC)

        INCLUDE 'CMBLOCK.INC' 

	REAL             :: BCKE(NSAM*NSLICE*3),BCN(NSAM*NSLICE)
	REAL             :: PROJ(NSAM,NANG),PRN(NSAM,NANG)
	INTEGER          :: IPCUBE(5,NN)
	DOUBLE PRECISION :: ABA
	LOGICAL          :: ACTIVE_MIN,ACTIVE_MAX,ENDIT,DODO,DOD

	DATA IOFF/6/    ! IO UNIT SET IN bps2.f

	CALL RDPRM2(ALA,AIM,NOT_USED,'LAMBDA, CORRECTION LIMIT')

	CALL RDPRMI(MAXIT,INTER,NOT_USED,
     &	            'ITERATION LIMIT, NUMBER OF INTERNAL STEPS')

	CALL RDPRMI(MODE,IDUM,NOT_USED,'MODE')

	CALL RDPRM2(TMIN,TMAX,NOT_USED,'MINIMUM, MAXIMUM')

	TMIN = TMIN - ABA
	TMAX = TMAX - ABA

	WRITE(NOUT,2059) TMIN,TMAX
2059	FORMAT(/,'  MIN. & MAX. AFTER AVERAGE SUBTRACTION:',
     &          2(5X,1PE10.3))

	CALL RDPRM(T,NOT_USED,'SMOOTHING CONSTANT')

	T = MIN(MAX(T,0.0), 1.0)

	IF (.NOT.
     &     (MODE == 1 .OR. MODE == 3 .OR.
     &      MODE == 6 .OR. MODE == 8)) THEN
	   IF (MAXIT > 1)  THEN
	      INTER  = INTER * MAXIT
	      MAXIT  = 1
	      DODO   = .FALSE.
	      WRITE(NOUT,6066) INTER
6066	      FORMAT(/ ' NO SMOOTHING REQUESTED, ITERATION LIMIT ',
     &           'SET TO 1 AND NO. OF INTERNAL STEPS IS SET TO: ',I0,/)
	   ELSE
	      DODO = .TRUE.
	   ENDIF
	ENDIF

	NMAT       = NSAM * NSLICE
        ACTIVE_MIN = .FALSE.
        ACTIVE_MAX = .FALSE.
        SQOLD      = 1.E23
        ENDIT      = .FALSE.
        ITER       = 0

	DO WHILE (.NOT. ENDIT)
            ITER = ITER + 1
            WRITE(NOUT,971) ITER
971         FORMAT('  ITERATION: ',I6)

            SQ = 0.0
            DO LS = NROWL,NROWH
               IF (ITER > 1)  THEN
                  DO IRC=1,NSLICE
                     IRB = 1+(IRC-1)*NSAM
                     CALL REDLIN(INPIC,BCKE(IRB),NSAM,
     &                            (IRC-1)*LCYL+LS-NROWL+1)
                  ENDDO
               ELSE
                  DO I=1,NMAT
                     BCKE(I) = 0.0
                  ENDDO
               ENDIF

C              GET THE PROJECTION DATA, READS FROM MULTIPLE OPEN FILES
               DO J=1,NANG
                  CALL REDLIN(IOFF+J,PROJ(1,J),NSAM,LS)
               ENDDO

C              REMOVE AVERAGE
               DO J=1,NANG
                  DO I=1,NSAM
                     PROJ(I,J) = PROJ(I,J) - ABA
                  ENDDO
               ENDDO

               SQINT = 1.0E23
               DO ITR=1,INTER
                  IF (.NOT. ENDIT)  THEN
                     IF (ITER == 1 .AND. ITR == 1)  THEN
c$omp                   parallel do private(i,j)
                        DO J=1,NANG
                           DO I=1,NSAM
                              PRN(I,J) = PROJ(I,J)
                           ENDDO
                        ENDDO
                     ELSE
C                       BCKE -> PRN
                        CALL  PRJS2
                        IF (DODO) THEN
                           DOD = (ITR  ==  INTER)
                        ELSE
                           DOD = .TRUE.
                        ENDIF

                        IF (DOD) THEN
			   CALL FMIN_S(PRN,LTBN,GMIN)
			   CALL FMAX_S(PRN,LTBN,GMAX)

cal09                      WRITE(NOUT,2062) LS,GMIN,GMAX
2062	                   FORMAT('  MIN &  MAX IN SLICE: ',I0,'= ',
     &                            1PE10.3,3X,1PE10.3)
                        ENDIF
                        IF ((MODE == 2.OR.MODE == 3 .OR.
     &                       MODE == 7.OR.MODE == 8)
     &		           .AND. .NOT. ACTIVE_MIN .AND. DOD)  THEN
                           IF (GMIN < TMIN)  THEN
                              CALL BMIN_S(BCKE,NMAT,IPCUBE,NN,BMIN)

cal09                         WRITE(NOUT,2051) BMIN
2051	                      FORMAT(
     &                       '  Min constraint active, value in 3D:',
     &                        1PE10.3)

			      ACTIVE_MIN = .TRUE.
			   ENDIF
                        ENDIF

	                IF ((MODE == 5.OR.MODE == 6.OR.MODE == 7 .OR.
     &                       MODE == 8) 
     &		           .AND. .NOT.ACTIVE_MAX .AND. DOD)  THEN
                           IF (GMAX > TMAX)  THEN
                              CALL BMAX_S(BCKE,NMAT,IPCUBE,NN,BMAX)
cal09                         WRITE(NOUT,2052) BMAX
2052                          FORMAT(
     &                        '  Max constraint active, value in 3D:',
     &                        1PE10.3)
			      ACTIVE_MAX = .TRUE.
			   ENDIF
                        ENDIF
                         
c$omp                   parallel do private(i,j)
                        DO J=1,NANG
                           DO I=1,NSAM
                             PRN(I,J) = PROJ(I,J) - PRN(I,J)
                           ENDDO
		        ENDDO
                     ENDIF
                     SQT = 0.0

c$omp              parallel do private(i,j),reduction(+:sqt)
                   DO J=1,NANG
		      DO I=1,NSAM
		         SQT = SQT + PRN(I,J) * PRN(I,J)
                      ENDDO
		   ENDDO

                   IF (SQT <= SQINT)  THEN
                      SQINT = SQT
		      IF (DOD) SQ = SQ + SQT

C                     PRN  -> BCN
                      CALL BPRJ2
		      CALL DOCORR3_S(BCKE,BCN,NMAT,IPCUBE,NN,ALA,SBQ)
cal09 	              WRITE(NOUT,*)' Squared correction of structure: ',
cal09     &                     LS,ITR,SBQ
                      IF (MODE .NE. 0)  THEN
		         IF (ACTIVE_MIN) 
     &                     CALL DOMIN3_S(BCKE,NMAT,IPCUBE,NN,BMIN)
                         IF (ACTIVE_MAX) 
     &                     CALL DOMAX3_S(BCKE,NMAT,IPCUBE,NN,BMAX)
                      ENDIF
                   ELSE
C                     BREAK IT UP, THE ERROR INCREASED.
                      ENDIT = .TRUE.
                   ENDIF
                ENDIF
             ENDDO    ! END OF DO-LOOP OVER ITR

             DO IRC=1,NSLICE
                IRB = 1 + (IRC-1)*NSAM
                CALL WRTLIN(INPIC,BCKE(IRB),NSAM,
     &                        (IRC-1)*LCYL+LS-NROWL+1)
             ENDDO
          ENDDO

cal09	  WRITE(NOUT,*)' Squared discrepancies between projections: ',SQ
          IF (MODE == 1 .OR. MODE == 3 .OR. 
     &        MODE == 6 .OR. MODE == 8) THEN

             DO LS=NROWL+1,NROWH-1
                IF (LS  ==  NROWL+1)  THEN
                    DO IRC=1,NSLICE
                       IRB = 1+ (IRC-1)*NSAM
	               CALL REDLIN(INPIC,BCKE(IRB),NSAM,
     &                           (IRC-1)*LCYL+LS-1-NROWL+1)
                    ENDDO

                    DO IRC=1,NSLICE
                       IRB = 1+ (IRC-1) *NSAM+NSAM*NSLICE
                       CALL REDLIN(INPIC,BCKE(IRB),NSAM,
     &                           (IRC-1)*LCYL+LS-NROWL+1)
                    ENDDO
                 ENDIF
		 DO IRC=1,NSLICE
		    IRB = 1 + (IRC-1)*NSAM + 2*NSAM*NSLICE
	            CALL REDLIN(INPIC,BCKE(IRB),NSAM,
     &                          (IRC-1)*LCYL+LS+1-NROWL+1)
		 ENDDO

                 CALL SMT3(T,BCKE,BCN,NSAM,NSLICE,IPCUBE,NN)

                 DO IRC=1,NSLICE
		    IRB = 1 + (IRC-1)*NSAM
	            CALL WRTLIN(INPIC,BCN(IRB),NSAM,
     &                         (IRC-1)*LCYL+LS-NROWL+1)
                 ENDDO
	         CALL CPPB(BCKE(NSAM*NSLICE+1),BCKE,2*NSAM*NSLICE)
	      ENDDO
	   ENDIF

           IF (.NOT. ENDIT) THEN
              IF (SQ > AIM .AND. ITER < MAXIT)  THEN
                 IF (ITER  ==  1)  THEN
C                   CONTINUE ITERATIONS
                 ELSEIF (SQ < SQOLD)  THEN
                    SQOLD = SQ      ! CONTINUE ITERATIONS
	         ELSE
	            ENDIT = .TRUE.  ! STOP ITERATIONS
	         ENDIF
              ELSE
	         ENDIT = .TRUE.     ! STOP ITERATIONS
	      ENDIF
	   ENDIF
	ENDDO

        END         
@


1.14
log
@GPL_2010
@
text
@d6 1
d67 2
a68 1
2059	FORMAT('  Min. & max. after average subtraction:',2(5X,1PE10.3))
d75 3
a77 2
     &     (MODE.EQ.1.OR.MODE.EQ.3.OR.MODE.EQ.6.OR.MODE.EQ.8)) THEN
	   IF (MAXIT .GT. 1)  THEN
d82 2
a83 2
6066	      FORMAT(/ ' No smoothing requested so iteration limit ',
     &           'set to 1 and number of internal sets is set to:',I5,/)
d96 1
a96 1
	DO WHILE (.NOT.ENDIT)
d99 1
a99 1
971         FORMAT('  Iteration: ',I6)
d102 2
a103 2
            DO LS=NROWL,NROWH
               IF (ITER .GT. 1)  THEN
d115 1
a115 1
C              GET THE PROJECTION DATA, reads from multiple open files?
d130 1
a130 1
                     IF (ITER.EQ.1 .AND. ITR.EQ.1)  THEN
d141 1
a141 1
                           DOD = (ITR .EQ. INTER)
d151 1
a151 1
2062	                   FORMAT('  Min &  Max in slice #',I3,'= ',
d154 4
a157 4
                        IF ((MODE.EQ.2.OR.MODE.EQ.3.OR.
     &                       MODE.EQ.7.OR.MODE.EQ.8)
     &		           .AND. .NOT.ACTIVE_MIN .AND. DOD)  THEN
                           IF (GMIN .LT. TMIN)  THEN
d162 1
a162 1
     &                       '  Min constraint active, value in 3D=',
d169 2
a170 2
	                IF ((MODE.EQ.5.OR.MODE.EQ.6.OR.MODE.EQ.7 .OR.
     &                       MODE.EQ.8) 
d172 1
a172 1
                           IF (GMAX .GT. TMAX)  THEN
d176 1
a176 1
     &                        '  Max constraint active, value in 3D=',
d198 1
a198 1
                   IF (SQT .LE. SQINT)  THEN
d228 3
a230 1
          IF (MODE.EQ.1.OR.MODE.EQ.3.OR.MODE.EQ.6.OR.MODE.EQ.8) THEN
d232 1
a232 1
                IF (LS .EQ. NROWL+1)  THEN
d262 3
a264 3
           IF (.NOT.ENDIT) THEN
              IF (SQ .GT. AIM .AND. ITER .LT. MAXIT)  THEN
                 IF (ITER .EQ. 1)  THEN
d266 2
a267 2
                 ELSEIF (SQ .LT. SQOLD)  THEN
                    SQOLD = SQ        ! CONTINUE ITERATIONS
d269 1
a269 1
	           ENDIT = .TRUE.     ! STOP ITERATIONS
d271 2
@


1.13
log
@reformmatted, removed extra output, prompts
@
text
@d8 4
a11 3
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
C=* Copyright 1985-2009  Health Research Inc.,                         *
d22 1
a22 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a23 1
C=*                                                                    *
@


1.12
log
@GPL License fixed
@
text
@d4 2
a6 1
C                                                                      *
d8 5
a12 7
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
C=*                                                                    *
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
d14 1
a14 1
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d25 1
a25 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d29 2
d32 1
a33 2
C  PURPOSE:                                                            *
C                                                                      *
d40 2
a41 2
	SUBROUTINE  REPR2_S(BCKE,BCN,NSAM,LCYL,NSLICE,
     &	NROWL,NROWH,NANG,IPCUBE,NN,PROJ,PRN,IRI,LTB,LTBN,ABA,INPIC)
d44 224
a267 203
	DIMENSION   BCKE(Nsam*nslice*3),BCN(Nsam*nslice)
	dimension   PROJ(NSAM,NANG),PRN(NSAM,NANG)
	dimension  ipcube(5,nn)
	double precision  aba
C
	logical*1    active_min,active_max,endit,dodo,dod
c
	data  IOFF/6/
	CALL  RDPRM2(ALA,aim,NOT_USED,'Lambda, Correction limit')
	CALL  RDPRMI(maxit,inter,NOT_USED,
     &	'Iteration limit, Number of internal steps')
	CALL  RDPRMI(MODE,idum,NOT_USED,'Mode')
	CALL  RDPRM2(tmin,tmax,NOT_USED,'Minimum, maximum')
	tmin=tmin-aba
	tmax=tmax-aba
	write(nout,2059) tmin,tmax
2059	format(' Minimum and maximum after average subtraction',/,
     &	2(5x,1pe10.3))
	CALL  RDPRM(t,NOT_USED,'Smoothing constant')
	t=amin1(amax1(t,0.0),1.0)
c
	if(.not.
     &		(mode.eq.1.or.mode.eq.3.or.mode.eq.6.or.mode.eq.8)) then
	if(maxit.gt.1)  then
	inter=inter*maxit
	maxit=1
	dodo=.false.
	write(nout,6066)  inter
6066	format(/
     &	' Since no smoothing was requested iteration limit was set to 1'
     &  ,/,' and number of internal sets was set to =',i5)
	else
	dodo=.true.
	endif
	endif
c
	nmat=nsam*nslice
		active_min=.false.
		active_max=.false.
		sqold=1.e23
		endit=.false.
                ITER = 0
	DO WHILE(.not.endit)
                   ITER = ITER + 1
                   WRITE(NOUT,971) ITER
971                FORMAT(/' ITERATION ',I5)
c
	sq=0.0
	do    ls=nrowl,nrowh
	if(ITER.gt.1)  then
	do    irc=1,nslice
	irb=1+(irc-1)*nsam
	call  redlin(inpic,bcke(irb),nsam,(irc-1)*lcyl+ls-nrowl+1)
	enddo
	else
	do    i=1,nmat
	  bcke(i)=0.0
	enddo
	endif
c
c  get the projection data
c
	do    j=1,nang
	  call  redlin(IOFF+j,proj(1,j),nsam,ls)
	enddo
c
c remove average
c
	do    j=1,nang
	do    i=1,nsam
	  proj(i,j)=proj(i,j)-aba
	enddo
	enddo
		sqint=1.0e23
		do    itr=1,inter
		if(.not.endit)  then
		if(ITER.eq.1.and.itr.eq.1)  then
c$omp parallel do private(i,j)
		 do    j=1,nang
		 do    i=1,nsam
		  prn(i,j)=proj(i,j)
		 enddo
		 enddo
c  goto 981
		else
c   bcke -> prn
	call  prjs2
	if(dodo) then
	dod=itr.eq.inter
	else
	dod=.true.
	endif
c  
	if(dod)  then
			call  fmin_s(prn,ltbn,gmin)
			call  fmax_s(prn,ltbn,gmax)
		write(nout,2062) ls,gmin,gmax
2062	format(' Min Max in slice #',i3,' =',2(1x,1pe10.3) )
	endif
	if((mode.eq.2.or.mode.eq.3.or.mode.eq.7.or.mode.eq.8)
     &		.and. .not.active_min .and. dod)  then
			if(gmin.lt.tmin)  then
			call  bmin_s(bcke,nmat,ipcube,nn,bmin)
			write(nout,2051)  bmin
2051	format(' Min constraint activated, value in 3D =',1pe10.3)
			active_min=.true.
			endif
	endif
c
	if((mode.eq.5.or.mode.eq.6.or.mode.eq.7.or.mode.eq.8) 
     &		.and. .not.active_max .and. dod)  then
			if(gmax.gt.tmax)  then
			call  bmax_s(bcke,nmat,ipcube,nn,bmax)
			write(nout,2052)  bmax
2052	format(' Max constraint activated, value in 3D =',1pe10.3)
			active_max=.true.
			endif
	endif
c                         
c$omp parallel do private(i,j)
		do    j=1,nang
		do    i=1,nsam
		  prn(i,j)=proj(i,j)-prn(i,j)
		enddo
		enddo
c 981
		endif
		sqt=0.0
c$omp parallel do private(i,j),reduction(+:sqt)
		do    j=1,nang
		do    i=1,nsam
		  sqt=sqt+prn(i,j)*prn(i,j)
		enddo
		enddo
c
	   if(sqt.le.sqint)  then
	    sqint=sqt
		if(dod)  sq=sq+sqt
c
c   prn  -> bcn
	call  bprj2
c
		call  docorr3_s(bcke,bcn,nmat,ipcube,nn,ala,sbq)
 	write(nout,*) '  Squared correction of the structure ',ls,itr,sbq
		if(mode.ne.0)  then
		if(active_min)  call   domin3_s(bcke,nmat,ipcube,nn,bmin)
		if(active_max)  call   domax3_s(bcke,nmat,ipcube,nn,bmax)
		endif
	   else
c break it up, the error increased.
		 endit=.true.
	   endif
c  end of do-loop over itr
		endif
		enddo
c
c5078	continue
	do    irc=1,nslice
	irb=1+(irc-1)*nsam
	call  wrtlin(inpic,bcke(irb),nsam,(irc-1)*lcyl+ls-nrowl+1)
	enddo
c
	enddo
c
	write(nout,*)  '  Squared discrepancies between projections ',sq
	if(mode.eq.1.or.mode.eq.3.or.mode.eq.6.or.mode.eq.8) then
		do    ls=nrowl+1,nrowh-1
			if(ls.eq.nrowl+1)  then
			do    irc=1,nslice
			irb=1+(irc-1)*nsam
	call  redlin(inpic,bcke(irb),nsam,(irc-1)*lcyl+ls-1-nrowl+1)
			enddo
			do    irc=1,nslice
			irb=1+(irc-1)*nsam+nsam*nslice
	call  redlin(inpic,bcke(irb),nsam,(irc-1)*lcyl+ls-nrowl+1)
			enddo
			endif
		do    irc=1,nslice
		irb=1+(irc-1)*nsam+2*nsam*nslice
	call  redlin(inpic,bcke(irb),nsam,(irc-1)*lcyl+ls+1-nrowl+1)
		enddo
	call   smt3(t,bcke,bcn,nsam,nslice,ipcube,nn)
		do    irc=1,nslice
		irb=1+(irc-1)*nsam
	call  wrtlin(inpic,bcn(irb),nsam,(irc-1)*lcyl+ls-nrowl+1)
		enddo
	call  cppb(bcke(nsam*nslice+1),bcke,2*nsam*nslice)
	enddo
	endif
	if(.not.endit)  then
	 if(sq.gt.aim .and. iter.lt.maxit)  then
	  if(iter.eq.1)  then
c continue iterations
	  elseif(sq.lt.sqold)  then
	   sqold=sq
c continue iterations
	  else
	   endit=.true.
c stop iterations
	  endif
	 endif
	endif
C
d269 1
@


1.11
log
@HRI GPL License used
@
text
@a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.10
log
@nloop,iloop_removed
@
text
@d8 24
@


1.9
log
@header
@
text
@d37 2
a38 2
	CALL  RDPRM2(ALA,aim,NLOOP,ILOOP,'Lambda, Correction limit')
	CALL  RDPRMI(maxit,inter,NLOOP,ILOOP,
d40 2
a41 2
	CALL  RDPRMI(MODE,idum,NLOOP,ILOOP,'Mode')
	CALL  RDPRM2(tmin,tmax,NLOOP,ILOOP,'Minimum, maximum')
d47 1
a47 1
	CALL  RDPRM(t,NLOOP,ILOOP,'Smoothing constant')
@


1.8
log
@OpenMP
@
text
@d1 27
a27 2
	SUBROUTINE  repr2_s(BCKE,BCN,nsam,lcyl,nslice,
     &	nrowl,nrowh,nang,ipcube,nn,PROJ,PRN,iri,LTB,LTBN,aba,inpic)
@


1.7
log
@*** empty log message ***
@
text
@a11 1
CNO_SAVE
d34 1
a34 1
     &  ,/,' and number of internal set was set to =',i5)
d46 2
a47 1
999             ITER = ITER + 1
d79 1
d81 3
a83 3
c$doacross  local(i,j)
		do    j=1,nang
		do    i=1,nsam
d85 4
a88 4
		enddo
		enddo
		goto  981
		endif
d123 1
a123 1
c$doacross  local(i,j)
d129 4
a132 3
c
981		sqt=0.0
c$doacross  local(i,j),reduction(sqt)
d138 3
a140 6
		if(sqt.gt.sqint)  then
		endit=.true.
		goto  5078
		else
		sqint=sqt
		endif
d148 1
a148 1
		if(mode.eq.0)  goto  821
d151 7
a157 2
821		continue
c
d160 1
a160 1
5078	continue
d193 12
a204 8
	if(endit)  return
	if(sq.gt.aim .and. iter.lt.maxit)  then
	if(iter.eq.1)  then
	goto  999
	elseif(sq.lt.sqold)  then
	sqold=sq
	goto  999
	endif
d207 1
@


1.6
log
@nothing
@
text
@d52 1
a52 1
	do  5710  ls=nrowl,nrowh
d54 1
a54 1
	do  5720  irc=1,nslice
d56 2
a57 1
5720	call  redlin(inpic,bcke(irb),nsam,(irc-1)*lcyl+ls-nrowl+1)
d59 3
a61 2
	do  5721  i=1,nmat
5721	bcke(i)=0.0
d66 3
a68 2
	do  5501  j=1,nang
5501	call  redlin(IOFF+j,proj(1,j),nsam,ls)
d72 5
a76 3
	do  5502  j=1,nang
	do  5502  i=1,nsam
5502	proj(i,j)=proj(i,j)-aba
d78 1
a78 1
		do  5077  itr=1,inter
d81 5
a85 3
		do  8711  j=1,nang
		do  8711  i=1,nsam
8711		prn(i,j)=proj(i,j)
d123 5
a127 3
		do  1  j=1,nang
		do  1  i=1,nsam
1		prn(i,j)=proj(i,j)-prn(i,j)
d131 5
a135 3
		do  2  j=1,nang
		do  2  i=1,nsam
2		sqt=sqt+prn(i,j)*prn(i,j)
d154 1
a154 1
5077		continue
d157 1
a157 1
	do  5730  irc=1,nslice
d159 2
a160 1
5730	call  wrtlin(inpic,bcke(irb),nsam,(irc-1)*lcyl+ls-nrowl+1)
d162 1
a162 1
5710	continue
d166 1
a166 1
		do  6710  ls=nrowl+1,nrowh-1
d168 1
a168 1
			do  6711  irc=1,nslice
d170 3
a172 2
6711	call  redlin(inpic,bcke(irb),nsam,(irc-1)*lcyl+ls-1-nrowl+1)
			do  6712  irc=1,nslice
d174 2
a175 1
6712	call  redlin(inpic,bcke(irb),nsam,(irc-1)*lcyl+ls-nrowl+1)
d177 1
a177 1
		do  6720  irc=1,nslice
d179 2
a180 1
6720	call  redlin(inpic,bcke(irb),nsam,(irc-1)*lcyl+ls+1-nrowl+1)
d182 1
a182 1
		do  6730  irc=1,nslice
d184 2
a185 1
6730	call  wrtlin(inpic,bcn(irb),nsam,(irc-1)*lcyl+ls-nrowl+1)
d187 1
a187 1
6710	continue
@


1.5
log
@nosave
.,
@
text
@a2 1
#ifdef SP_UNIX
a3 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
@


1.4
log
@*** empty log message ***
@
text
@d16 1
a16 1
c
@


1.3
log
@itr bug fixed
@
text
@d79 1
a79 1
c$doacross  local(i)
@


1.2
log
@cpp_lines_added
@
text
@d13 1
a13 1
	logical*1    active_min,active_max,endit
d35 1
d40 2
d87 5
d93 1
a93 1
	if(itr.eq.inter)  then
d100 1
a100 1
     &		.and. .not.active_min .and. itr.eq.inter)  then
d110 1
a110 1
     &		.and. .not.active_max .and. itr.eq.inter)  then
d135 1
a135 1
		if(itr.eq.inter)  sq=sq+sqt
@


1.1
log
@Initial revision
@
text
@d3 3
d7 1
@
