head	1.11;
access;
symbols
	pre_getangas:1.11
	GPL2010:1.11
	pre_GPL2010:1.10
	pre_var_equation:1.10
	pre_fftwrings:1.10
	pre_opfiles:1.10
	src:1.10
	best-code:1.10
	x-named-regs:1.10
	x:1.10
	v13-00:1.10
	pre_GPL:1.8
	prec_CA:1.8
	noindx:1.8;
locks; strict;
comment	@c @;


1.11
date	2010.06.24.13.25.30;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.17.20.34.08;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.17.18.24.47;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.23.17.09.40;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.23.17.08.02;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.03.17.57.44;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.05.18.47.30;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.11.14.08.22;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.20.19.53.34;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.20.19.19.05;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.17.15.59.36;	author leith;	state Exp;
branches;
next	;


desc
@@


1.11
log
@GPL_2010
@
text
@C ++********************************************************************
C                                                                      *
C EDM                     CREATED MAY 01 ARDEAN LEITH                  * 
C                         REMOVED AUTO ARRAYS (TOO BIG) APR 02 A. LEITH
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  EDM(LUN1,LUN2,NSAM,NROW,NSLICE,FMINT,FMAXT)
C
C  PARAMETERS:
C
C  PURPOSE: CREATE EUCLIDEAN DISTANCE MAP FROM AN IMAGE OR VOLUME 
C           SHOWING DISTANCE FROM A PIXEL/VOXEL TO NEAREST BACKGROUND
C           PIXEL/VOLUME
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C **********************************************************************

	SUBROUTINE EDM(LUN1,LUN2,NSAM,NROW,NSLICE,FMINT,FMAXT)

	INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

	REAL, ALLOCATABLE, DIMENSION(:) ::  VIN
	REAL, ALLOCATABLE, DIMENSION(:) ::  VOUT

        THRESH = FMINT + (FMAXT - FMINT) / 2.0
10      CALL RDPRM1S(THRESH,NOT_USED,'BACKGROUND THRESHOLD',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (THRESH .GT. FMAXT) THEN
           CALL ERRT(101,'THRESHOLD MUST BE < THAN FMAX',IDUM) 
           GOTO 10
        ENDIF

        ALLOCATE(VIN(NSAM*NROW*NSLICE),
     &           VOUT(NSAM*NROW*NSLICE),STAT=IRTFLG)
	IF (IRTFLG .NE. 0) THEN
            CALL ERRT(46,'ER EDM, VIN,VOUT',IER)
            RETURN
        ENDIF

C       LOAD INPUT IMAGE/VOLUME
        CALL REDVOL(LUN1,NSAM,NROW,1,NSLICE,VIN,IRTFLG)
	IF (IRTFLG .NE. 0) GOTO 999

        IF (NSLICE .GT. 1) THEN
           CALL EDM3(VIN,VOUT,NSAM,NROW,NSLICE,THRESH,LUN2,
     &               NABOVE,LAYERS)

           WRITE(NOUT,*) ' VOXELS ABOVE THRESHOLD: ',NABOVE
           WRITE(NOUT,*) ' LAYERS: ',LAYERS

        ELSE
    
           CALL EDM2(VIN,VOUT,NSAM,NROW,NSLICE,THRESH,LUN2,
     &              NABOVE,LAYERS)
           WRITE(NOUT,*) ' PIXELS ABOVE THRESHOLD: ',NABOVE
           WRITE(NOUT,*) ' LAYERS: ',LAYERS
        ENDIF

999     IF (ALLOCATED(VIN))  DEALLOCATE(VIN)
	IF (ALLOCATED(VOUT)) DEALLOCATE(VOUT)

        END

C       ------------------------- EDM2 --------------------------------

	SUBROUTINE EDM2(X,X2,NSAM,NROW,NSLICE,THRESH,LUN2,NABOVE,LAYERS)

	REAL, DIMENSION(NSAM,NROW) :: X
	REAL, DIMENSION(NSAM,NROW) :: X2
	REAL, DIMENSION(-1:1,-1:1) :: DISTA

C       AUTOMATIC ARRAYS MAY BE TOO BIG, DO NOT USE

        DATA DISTA / 1.41, 1.0,  1.41,   
     &               1.00, 0.0,  1.00,  
     &               1.41, 1.0,  1.41/

C          INITIALIZE EDM
           NABOVE = 0
           LAYERS = 0

           DO J=1,NROW                      
              DO I=1,NSAM
                 IF (X(I,J) .LT. THRESH) THEN
                    X2(I,J) = 0.0
                    X (I,J) = 0.0
                 ELSE
                    X2(I,J) = -1.0
                    X (I,J) = -1.0
                    NABOVE  = NABOVE + 1
                 ENDIF
              ENDDO
           ENDDO 

10         NPIXER = 0
           LAYERS = LAYERS + 1

           DO J=1,NROW                      
              DO I=1,NSAM
                 IF (X(I,J) .LT. 0.0)  THEN
C                   CENTRAL PIXEL IS ABOVE THRESHOLD, FIND DISTANCE
                    NPIXER = NPIXER + 1

                    DISMIN = HUGE(DISMIN)
                    DO MJ=-1,1
                       MJM = MOD(J+MJ+NROW-1,NROW)+1
                       DO MI=-1,1
                          VALT = X(MOD(I+MI+NSAM-1,NSAM)+1,MJM)
                          IF (VALT .GE. 0.0) THEN
                             DISMIN = MIN(DISMIN,VALT + DISTA(MI,MJ))
                          ENDIF
                       ENDDO
C                      END OF: DO MI=-1,1

                    ENDDO
C                   END OF: DO MJ=-1,1
                    
                    IF (DISMIN .LT. HUGE(DISMIN)) X2(I,J) = DISMIN
	         ENDIF
C                END OF CLAUSE: IF (X(I,J) .LT. 0.0) 

              ENDDO
C             END OF: DO I=1,NSAM 

           ENDDO
C          END OF: DO J=1,NROW 

C          SEE IF WE NEED MORE DISTANCE CYCLES
           IF (NPIXER .GT. 0) THEN
              X = X2 
              GOTO 10
           ENDIF

C       OUTPUT IMAGE
        CALL WRTVOL(LUN2,NSAM,NROW,1,NSLICE,X2,IRTFLG)

        END	

C       ------------------------- EDM3 --------------------------------

	SUBROUTINE EDM3(X,X2,NSAM,NROW,NSLICE,THRESH,LUN2,NABOVE,LAYERS)

	REAL, DIMENSION(NSAM,NROW,NSLICE) :: X
	REAL, DIMENSION(NSAM,NROW,NSLICE) :: X2
	REAL, DIMENSION(-1:1,-1:1,-1:1) :: DISTA

C       AUTOMATIC ARRAYS MAY BE TOO BIG, DO NOT USE

        DATA DISTA /
     &               1.73, 1.41,  1.73,   
     &               1.00, 1.00,  1.00,  
     &               1.73, 1.41,  1.73,

     &               1.41, 1.00,  1.41,   
     &               1.00, 0.00,  1.00,  
     &               1.41, 1.00,  1.41,

     &               1.73, 1.41,  1.73,   
     &               1.00, 1.00,  1.00,  
     &               1.73, 1.41,  1.73 /

C       INITIALIZE EDM
        NABOVE = 0
        LAYERS = 0

        DO K=1,NSLICE
           DO J=1,NROW                      
              DO I=1,NSAM
                 IF (X(I,J,K) .LT. THRESH) THEN
                    X(I,J,K)  = 0.0
                    X2(I,J,K) = 0.0
                 ELSE
                    X(I,J,K)  = -1.0
                    X2(I,J,K) = -1.0
                    NABOVE   = NABOVE + 1
                 ENDIF
              ENDDO
           ENDDO
        ENDDO 

10      NPIXER = 0
        LAYERS = LAYERS + 1

        DO K=1,NSLICE
           DO J=1,NROW                      
              DO I=1,NSAM
                 IF (X(I,J,K) .LT. 0.0)  THEN
C                   CENTRAL VOXEL IS ABOVE THRESHOLD, FIND DISTANCE

                    DISMIN = HUGE(DISMIN)
                    NPIXER = NPIXER + 1

                    DO MK=-1,1
                    MKM = MOD(K+MK+NSLICE-1,NSLICE)+1

                    DO MJ=-1,1
                       MJM = MOD(J+MJ+NROW-1,NROW)+1
                       DO MI=-1,1
                          VALT = X(MOD(I+MI+NSAM-1,NSAM)+1,MJM,MKM)
                          IF (VALT .GE. 0.0) THEN
                             DISMIN = MIN(DISMIN,VALT + DISTA(MI,MJ,MK))
                          ENDIF
                       ENDDO
C                      END OF: DO MI=-1,1

                    ENDDO
C                   END OF: DO MJ=-1,1
                    ENDDO
C                   END OF: DO MK=-1,1
                    
                    IF (DISMIN .LT. HUGE(DISMIN)) X2(I,J,K) = DISMIN
	         ENDIF
C                END OF CLAUSE: IF (X(I,J,K) .LT. 0.0) 

              ENDDO
C             END OF: DO I=1,NSAM 

           ENDDO
C          END OF: DO J=1,NROW 

        ENDDO
C       END OF: DO K=1,NSLICE 


C       SEE IF WE NEED MORE DISTANCE CYCLES
        IF (NPIXER .GT. 0) THEN
           X = X2
           GOTO 10
        ENDIF

C       OUTPUT VOLUME
        CALL WRTVOL(LUN2,NSAM,NROW,1,NSLICE,X2,IRTFLG)

        END	
@


1.10
log
@GPL License fixed
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.9
log
@HRI GPL License used
@
text
@a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.8
log
@wrtvol param added
@
text
@d8 24
@


1.7
log
@wrtvol param added
@
text
@d242 1
a242 1
        CALL WRTVOL(LUN2,NSAM,NROW,NSLICE,X2,IRTFLG)
@


1.6
log
@redvol parameters changed
@
text
@d145 1
a145 1
        CALL WRTVOL(LUN2,NSAM,NROW,NSLICE,X2,IRTFLG)
@


1.5
log
@automatic arrays fail if big
@
text
@d51 1
a51 1
        CALL REDVOL(LUN1,NSAM,NROW,NSLICE,VIN,IRTFLG)
@


1.4
log
@nloop,iloop_removed
@
text
@d4 1
d8 1
a8 1
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
d22 2
a23 1
C                                                                     *
d31 2
a32 2
	REAL, ALLOCATABLE, DIMENSION(:,: )  ::  VIN2
	REAL, ALLOCATABLE, DIMENSION(:,:,:) ::  VIN3
d39 1
a39 1
           CALL ERRT(100,'THRESHOLD MUST BE < THAN FMAX',IDUM) 
d43 11
d55 2
a56 16
	   ALLOCATE(VIN3(NSAM,NROW,NSLICE),STAT=IRTFLG)
	   IF (IRTFLG .NE. 0) THEN
               CALL ERRT(46,'ER EDM, VIN3',IER)
               RETURN
           ENDIF

C          LOAD INPUT VOLUME
	   INDEX = 0
           DO K = 1,NSLICE
              DO J = 1,NROW
                 INDEX = INDEX + 1
                 CALL REDLIN(LUN1,VIN3(1,J,K),NSAM,INDEX)
	      ENDDO
	   ENDDO
     
           CALL EDM3(VIN3,NSAM,NROW,NSLICE,THRESH,LUN2,NABOVE,LAYERS)
a57 1
	   DEALLOCATE(VIN3)
d62 3
a64 14
	   ALLOCATE(VIN2(NSAM,NROW),STAT=IRTFLG)
	   IF (IRTFLG .NE. 0) THEN
               CALL ERRT(46,'ER EDM, VIN2',IER)
               RETURN
           ENDIF

C          LOAD INPUT IMAGE
	   INDEX = 0
           DO J = 1,NROW
              INDEX = INDEX + 1
              CALL REDLIN(LUN1,VIN2(1,J),NSAM,INDEX)
	   ENDDO
     
           CALL EDM2(VIN2,NSAM,NROW,NSLICE,THRESH,LUN2,NABOVE,LAYERS)
a66 1
	   DEALLOCATE(VIN2)
d69 3
d74 1
a74 1
C       ------------------------- EDM2 -----------------------------
d76 1
a76 1
	SUBROUTINE EDM2(X,NSAM,NROW,NSLICE,THRESH,LUN2, NABOVE,LAYERS)
d79 1
d82 1
a82 2
C       AUTOMATIC ARRAY
	REAL, DIMENSION(NSAM,NROW) :: X2
d145 1
a145 3
        DO J = 1,NROW
           CALL WRTLIN(LUN2,X2(1,J),NSAM,J)
        ENDDO
d149 1
a149 1
C       ------------------------- EDM3 -----------------------------
d151 1
a151 1
	SUBROUTINE EDM3(X,NSAM,NROW,NSLICE,THRESH,LUN2, NABOVE,LAYERS)
d154 1
d157 1
a157 2
C       AUTOMATIC ARRAY
	REAL, DIMENSION(NSAM,NROW,NSLICE) :: X2
d242 1
a242 5
        DO K = 1,NSLICE
           DO J = 1,NROW
              CALL WRTLIN(LUN2,X2(1,J,K),NSAM,(K-1)*NROW+J)
           ENDDO
        ENDDO
@


1.3
log
@bug fixed in 3d
@
text
@d33 1
a33 1
10      CALL RDPRM1S(THRESH,NLOOP,ILOOP,'BACKGROUND THRESHOLD',IRTFLG)
@


1.2
log
@bad 3d mk fixed
@
text
@d57 1
a57 1
           CALL EDM3(VIN3,NSAM,NROW,NSLICE,THRESH,LUN2,NPIXER,LAYERS)
d70 1
a70 1
C          LOAD INPUT VOLUME
d111 1
a111 1
                    NABOVE = NABOVE + 1
d122 1
a122 1
C                   CENTRAL VOXEL IS ABOVE THRESHOLD, FIND DISTANCE
d193 1
a193 1
                    X(I,J,K) = 0.0
d196 2
a197 2
                    X(I,J,K) = 0.0
                    X2(I,J,K) = 0.0
d254 1
a254 1
C       OUTPUT IMAGE
@


1.1
log
@Initial revision
@
text
@d217 1
a217 1
                    MKM = MOD(J+MJ+NSLICE-1,NSLICE)+1
@
