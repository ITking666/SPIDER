head	1.28;
access;
symbols
	pre_mrcs:1.28
	healthdept_2018:1.28
	pre_getangas:1.18
	GPL2010:1.18
	pre_GPL2010:1.17
	pre_var_equation:1.17
	pre_fftwrings:1.17
	pre_opfiles:1.17
	src:1.17
	best-code:1.14
	x-named-regs:1.14
	x:1.14
	v13-00:1.14
	pre_GPL:1.12
	prec_CA:1.12
	noindx:1.11
	Bproc:1.10
	oct21:1.9
	last77:1.8;
locks; strict;
comment	@c @;


1.28
date	2018.10.03.14.34.11;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2014.12.05.15.59.00;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2014.12.04.18.31.03;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2014.12.04.18.29.51;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2014.12.04.16.49.30;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2014.12.03.18.54.04;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2014.12.03.18.49.41;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2014.11.20.15.22.03;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2014.11.10.19.00.38;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2014.11.05.17.02.02;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2010.06.24.13.26.21;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2006.07.24.18.03.34;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2006.07.19.16.20.49;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2006.07.19.16.14.39;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.17.20.51.55;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.17.18.42.19;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.20.19.54.01;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.11.14.08.45;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2000.05.17.18.09.02;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	99.07.14.19.29.15;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	97.10.10.17.49.01;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.09.30.22.11.35;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	95.10.04.18.50.42;	author mladjadj;	state Exp;
branches;
next	1.5;

1.5
date	95.07.07.17.50.19;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	95.07.06.20.32.27;	author mladjadj;	state Exp;
branches;
next	1.3;

1.3
date	94.08.29.12.58.45;	author mladjadj;	state Exp;
branches;
next	1.2;

1.2
date	94.07.05.13.54.48;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.31.16.19.36;	author michael;	state Exp;
branches;
next	;


desc
@calculate noise background for transferfunction.
@


1.28
log
@email_health_dept
@
text
@C++*********************************************************************
C
C  NOISE.F   FIXED UNWORKING CODE                NOV 2014 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C NOISE:  CALCULATE BACKGROUND NOISE OF POWER SPECTRUM AND SUBTRACT
C         IT USING LEAST-SQUARE METHOD TO FIT POINTS INTO GAUSSIAN 
C         PROFILE USING STEEPEST DESCENT METHOD.
C         F(XI,A) = A1 * EXP(-(XI/A2)**2) + A3
C
C NOTE:   COULD NOT HAVE WORKED SINCE 1999 DUE TO LUN2 BUG  al NOV 2014
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

        SUBROUTINE NOISE(LUN1,LUN2)

        IMPLICIT NONE

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        REAL :: BUF
        COMMON /IOBUF/ BUF(NBUFSIZ)   ! FROM CMLIMITS.INC

        INTEGER               :: LUN1,LUN2

        INTEGER, PARAMETER    :: MAXMINS = 120
        INTEGER, PARAMETER    :: MAXX  = NBUFSIZ
        INTEGER ,PARAMETER    :: LUNDOC  = 81

        REAL                  :: Y1(MAXX),Y2(MAXX)
        INTEGER               :: NUMLIS(MAXMINS)
        REAL                  :: X(MAXMINS),RKFR(MAXMINS),RMINS(MAXMINS)
        REAL                  :: SFR(MAXMINS)   ! UNUSED HERE
        REAL                  :: KM,KS
        CHARACTER(LEN=MAXNAM) :: OUTNAME,IMFILE,DOCOUT
        INTEGER               :: NE,NLUNDOC,IDUM,NUMT,IP

        INTEGER               :: MAXIM,NX,NY,NZ,IRTFLG,INUM,N,NUM,I,J
        INTEGER               :: NSTEP,NOT_USED,NLET
        REAL                  :: SPMAX,A1,A2,A3,P,X1,X0,DA1,DA2,DA3
        REAL                  :: DXA1,DXA2,XMIN,DXA3,SUM,D

        CHARACTER(LEN=30)     :: COMMEN
        LOGICAL               :: ASKNAM,NEWFILE,ADDEXT,ISOLD
        LOGICAL               :: WRTCOM,APPEND
        

C       OPEN 1D POWER SPECTRUM IMAGE FILE
        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,IMFILE,LUN1,'O',IFORM,NX,NY,NZ,
     &             MAXIM,'POWER SPECTRUM 1D IMAGE',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        WRITE(NOUT,10 ) NX,NY
10      FORMAT('  IMAGE DIMENSIONS:', I0,' x ',I0)

C       FIND MINIMA IN POWER SPECTRUM
        INUM = 1
        CALL DEFO003(INUM,N,RKFR,SFR,Y2,NX,SPMAX,LUN1,BUF,
     &               MAXMINS,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (N <= 0) THEN
           CALL ERRT(101,'INVALID INPUT, NO MINIMA FOUND',I)
           RETURN
        ENDIF

C       REREAD INPUT 1D IMAGE 
        CALL REDLIN(LUN1,Y2,NX,1)

        CALL FLUSHRESULTS

        NUMT = N
        CALL RDPRAI(NUMLIS,MAXMINS,NUMT, IDUM,IDUM,
     &              'LIST OF MINIMA TO BE USED','F',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
        IF (NUMT <= 0) THEN
           DO I = 1,N
              NUMLIS(I) = I
           ENDDO
           NUMT = N
        ENDIF


        KM = SPMAX
        KS = KM / FLOAT(NX)
       
        NUM = 0
        DO I=1,NUMT

           IF (NUMLIS(I) < 1) THEN
              CALL ERRT(102,'MINIMA BELOW VALID RANGE',NUMLIS(I))
              RETURN
           ELSEIF (NUMLIS(I) > N) THEN
              WRITE(NOUT,'(A,I0)') 
     &              'INVALID MINIMA DISCARDED: ',NUMLIS(I)
              CYCLE
           ENDIF

           RMINS(I) = RKFR(NUMLIS(I))

           Y1(I) = (1.-(RMINS(I)-INT(RMINS(I)))) * BUF(INT(RMINS(I))) +
     &                 (RMINS(I)-INT(RMINS(I)))  * BUF(INT(RMINS(I))+1)
           X(I)  = RMINS(I) * KS
 
           !write(6,*) ' x:',x(i),'  y1:',y1(i), rmins(i)
           !write(6,*) ' x:',x(i),'  y1:',y1(i), buf(int(rmins(i)))
           NUM = NUM + 1
        ENDDO

C       OPEN OUTPUT 1D IMAGE
        MAXIM = 0
        CALL  OPFILEC(LUN1,.TRUE.,OUTNAME,LUN2,'U',IFORM, NX,1,1,
     &                MAXIM,'DENOISED PROFILE',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        ADDEXT  = .TRUE.
        ASKNAM  = .TRUE.
        ISOLD   = .FALSE.
        APPEND  = .FALSE.
        WRTCOM  = .TRUE.
        CALL OPENDOC(DOCOUT,ADDEXT,NLET,
     &               LUNDOC,NLUNDOC,ASKNAM,'OUTPUT DOCUMENT',
     &               ISOLD,APPEND,WRTCOM,NEWFILE,IRTFLG)

        IF (IRTFLG == -1) THEN
C          DO NOT WANT OUTPUT DOC FILE
           NLUNDOC = 0
        ENDIF
        IF (IRTFLG .NE. 0) GOTO 9999

C                 123456789 123456789 123456789 1234567890
        COMMEN = '   DENOISED VALUES'
        IF (NLUNDOC > 0) CALL LUNDOCPUTCOM(NLUNDOC,COMMEN(1:19),IRTFLG)


           
C       FOR  SINGLE MINIMUM, HACK TO AVOID JUMP INTO LOOP --------
        IF (NUM == 1) THEN

           CALL RDPRM1S(A2,NOT_USED,'A2 VALUE [A-1]',IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

           IF (A2 == 0) THEN
              CALL ERRT(101,'INVALID INPUT GIVES DIVISION BY ZERO',I)
              GOTO 9999
           ENDIF

           A3 = 0
           A1 = Y1(1) / (EXP(-(X(1) / A2)**2))
           P  = A2 / KS

           GOTO 99

        ENDIF


C       HAS MORE THAN ONE MINIMA IN LIST ------------------------

C       SET INITIAL VALUE FOR A1,A2 AND A3

        A3 = 0             ! FOR NUM=2 ONLY
        IF (NUM > 2) A3 = Y1(NUM) * 0.8
       
        A2 = SQRT( (X(2)**2 - X(1) **2) / LOG(Y1(1) / Y1(2)) )
        A1 = (Y1(1) - A3) / EXP(-(X(1) / A2)**2)

c       write(6,*) ' Num:', num
c       write(6,*) ' Top:', (x(2)**2 - x(1)**2)
c       write(6,*) ' Bot:', log(y1(1)/y1(2))
c       write(6,*) ' X(1), x(2) :',x(1), x(2)
c       write(6,*) ' Y1(1), y1(2) :',y1(1), y1(2)
c       write(6,*) ' Y1(1)/y1(2)  :',y1(1)/y1(2)
c       write(6,*) ' Initial a1 :',a1
c       write(6,*) ' Initial a2 :',a2
c       write(6,*) ' Initial a3 :',a3
       
C       SET INITIAL VALUE OF X**2
        DO  I=1,NUM
          Y2(I) = A1 * EXP(-(X(I)/A2)**2) + A3
        ENDDO

        X0 = 0
        DO I=1,NUM
           X0 = X0 + (Y1(I) - Y2(I))**2
        ENDDO

        NSTEP = 0
999     DA1   = 0.001 * A1
        DA2   = 0.001 * A2
        DA3   = 0.001 * A3

C       CALCULATE dX**2 / dA1
        DO  I=1,NUM
           Y2(I) = (A1 + 0.1 * DA1) * EXP(-(X(I)/A2)**2) + A3
        ENDDO

        X1 = 0
        DO  I=1,NUM
           X1 = X1 + (Y1(I) - Y2(I))**2
        ENDDO

        DXA1 = (X1-X0) / (0.1*DA1)
c       write(6,*) ' dxa1:',dxa1,'=',x1,x0,da1

C       CALCULATE DERIVATE dX**2/dA2
        DO  I=1,NUM
           Y2(I) = A1 * EXP(-(X(I) / (A2 + 0.1 * DA2))**2) + A3
        ENDDO

        X1 = 0
        DO I=1,NUM
           X1 = X1 + (Y1(I) - Y2(I))**2
        ENDDO

        DXA2 = (X1-X0) / (0.1 * DA2)
        

C       CALCULATE DERIVATE dX**2 / dA3
        DO  I=1,NUM
           Y2(I) = A1 * EXP(-(X(I)/A2)**2) + (A3 + 0.1 * DA3)
        ENDDO

        X1 = 0
        DO I=1,NUM
           X1 = X1 + (Y1(I) - Y2(I)) **2
        ENDDO

        IF (NUM < 3) THEN
           DXA3 = 0
        ELSE
           DXA3 = (X1-X0) / (0.1 * DA3)
        ENDIF

c       write(6,*) ' for sum:',dxa1,da1
c       write(6,*) ' for sum:',dxa2,da2
c       write(6,*) ' for sum:',dxa3,da3

        SUM = SQRT((DXA1*DA1)**2 + (DXA2*DA2)**2 + (DXA3*DA3)**2)

c       write(6,*) ' sum:',sum

        A1 = A1 - DXA1 * DA1**2 / SUM
        A2 = A2 - DXA2 * DA2**2 / SUM
        A3 = A3 - DXA3 * DA3**2 / SUM
        
C       CRITERIA FOR ITERATION  ...... CALCULATE THE Y2
        DO  I=1,NUM
           Y2(I) = A1 * EXP(-(X(I )/ A2)**2) + A3
        ENDDO

        X1 = 0
        DO  I=1,NUM
           X1 = X1 + (Y1(I) - Y2(I))**2
        ENDDO
        D = X1 - X0

C       SOLVE GOTO 899 BY REWRITING THE IF () THEN .. LOOP . ML 7/5/95
        IF (D <= 0) THEN
           X0 = X1
           P  = A2 / KS
C          WRITE(NOUT,*)'A1=',A1,' A2=',A2,'(A-1) ',P,'POINTS',' A3',A3
           NSTEP = NSTEP + 1
           GOTO 999
        ENDIF

        A1 = A1 + 0.5 * DXA1 * DA1**2 / SUM
        A2 = A2 + 0.5 * DXA2 * DA2**2 / SUM
        A3 = A3 + 0.5 * DXA3 * DA3**2 / SUM
        P  = A2 / KS



99      IP = P          ! TRUNCATE -----------------------------------

        WRITE(NOUT,*) ' '
        WRITE(NOUT,*) ' LOWER ENVELOPE EQUATION PARAMETERS:'
        WRITE(NOUT,91) A1, A2, A3, IP
91      FORMAT(  '  A1:',     ES11.4,' ',  
     &           '  A2:',     ES11.4,' ',
     &           '  A3:',     ES11.4,' (A-1) ',
     &           '  POINTS:', I0,/)

C       ADD ADDITIONAL VALUE, SO ALL THE MINIMI ARE ABOVE ZERO, 
C       AT THE OTHER PLACES VALUES BELOW ZERO ARE SET TO ZERO.

        XMIN = 0
        DO I=1,NX

           X1    = FLOAT(I) * KS
           Y1(I) = A1 * EXP(-(X1/A2)**2) + A3
           Y2(I) = Y2(I) - Y1(I)

           DO  J=1,NUM
              IF ( I == INT(RMINS(J))-1 .OR. 
     &             I == INT(RMINS(J))     .OR.
     &             I == NINT(RMINS(J))+1 ) 
     &           XMIN = MIN( Y2(I), XMIN )
           ENDDO
        ENDDO


        DO I=1,NX
           Y2(I) = Y2(I) - XMIN
           IF (Y2(I) < 0) Y2(I) = 0

C          PUSH Y2(I) INTO OUTPUT DOC. FILE
           IF (NLUNDOC > 0) 
     &        CALL LUNDOCWRTDAT(NLUNDOC,I,Y2(I),1,IRTFLG)

        ENDDO

        CALL WRTLIN(LUN2,Y2,NX,1)
  
        CALL REG_SET_NSEL(1,1,FLOAT(NUM),0,0,0,0, IRTFLG)
          
9999    CLOSE(LUN1)
        CLOSE(LUN2)
        CLOSE(LUNDOC)

        END

@


1.27
log
@simplified for 1 minimum
@
text
@d11 1
a11 1
C=* Email: spider@@wadsworth.org                                        *
@


1.26
log
@ip error for num = 1 fixed
@
text
@d90 3
d128 2
a129 2
           !write(6,*) ' x:',x(i),'  y1:',y1(i), RMINS(I)
           !write(6,*) ' x:',x(i),'  y1:',y1(i), BUF(INT(RMINS(I)))
d132 29
a160 2
             
C       FOR  SINGLE MINIMUM  START HACK TO AVOID JUMP INTO LOOP ---------------
d162 1
d166 5
a173 1
           IP = P
d175 1
a175 1
           WRITE(6,91) A1, A2, A3, IP
a176 37
C          OPEN OUTPUT 1D IMAGE
           MAXIM = 0
           CALL  OPFILEC(LUN1,.TRUE.,OUTNAME,LUN2,'U',IFORM, NX,1,1,
     &                  MAXIM,'DENOISED PROFILE',.FALSE.,IRTFLG)
           IF (IRTFLG .NE. 0) RETURN

C          READ INPUT 1D IMAGE 
           CALL REDLIN(LUN1,Y2,NX,1)

C          ADD AN ADDITIONAL VALUE, SO ALL THE MINIMI ARE ABOVE ZERO, AT THE 
C          OTHER PLACES VALUE BELOW ZERO ARE SET TO ZERO.

           XMIN = 0
           DO I=1,NX
              X1    = FLOAT(I) * KS
              Y1(I) = A1 * EXP(-(X1/A2)**2) + A3
              Y2(I) = Y2(I) - Y1(I)

              DO  J=1,NUM
                 IF (I == INT(RMINS(J))-1 .OR. 
     &               I == INT(RMINS(J)) .OR. 
     &               I == INT(RMINS(J))+1) THEN
                   IF (XMIN > Y2(I)) XMIN = y2(I)
                 ENDIF
              ENDDO
           ENDDO

           DO I=1,NX
              Y2(I) = Y2(I) - XMIN
              IF (Y2(I) < 0)  Y2(I) = 0
           ENDDO
           CALL WRTLIN(LUN2,Y2,NX,1)    
        
           CLOSE(LUN1)
           CLOSE(LUN2)

           RETURN
d294 3
a296 1
        IP = P          ! TRUNCATE
a305 29
C       OPEN OUTPUT 1D IMAGE
        MAXIM = 0
        CALL  OPFILEC(LUN1,.TRUE.,OUTNAME,LUN2,'U',IFORM, NX,1,1,
     &                MAXIM,'DENOISED PROFILE',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        ADDEXT  = .TRUE.
        ASKNAM  = .TRUE.
        ISOLD   = .FALSE.
        APPEND  = .FALSE.
        WRTCOM  = .TRUE.
        CALL OPENDOC(DOCOUT,ADDEXT,NLET,
     &               LUNDOC,NLUNDOC,ASKNAM,'OUTPUT DOCUMENT',
     &               ISOLD,APPEND,WRTCOM,NEWFILE,IRTFLG)

        IF (IRTFLG == -1) THEN
C          DO NOT WANT OUTPUT DOC FILE
           NLUNDOC = 0
        ENDIF
        IF (IRTFLG .NE. 0) GOTO 9999

C                 123456789 123456789 123456789 1234567890
        COMMEN = '   DENOISED VALUES'
        IF (NLUNDOC > 0) CALL LUNDOCPUTCOM(NLUNDOC,COMMEN(1:19),IRTFLG)


C       READ INPUT 1D IMAGE 
        CALL REDLIN(LUN1,Y2,NX,1)

d318 2
a319 2
     &             I == INT(RMINS(J))   .OR.
     &             I == NINT(RMINS(J))+1) 
d324 1
d335 1
a335 1
        CALL WRTLIN(LUN2,Y2,NX,1)  
d338 1
a338 1
        
@


1.25
log
@formatting, error traps improved
@
text
@d138 1
d140 1
a140 1
           WRITE(6,91) A1, A2, A3, P
@


1.24
log
@error traps, formatting
@
text
@d85 7
d129 1
a129 2
    
  
@


1.23
log
@*** empty log message ***
@
text
@d58 1
a58 1
        INTEGER               :: NE,NLUNDOC,IDUM
d85 2
a86 2
        NUM = N
        CALL RDPRAI(NUMLIS,MAXMINS,NUM, IDUM,IDUM,
d89 1
a89 1
        IF (NUM <= 0) THEN
d93 1
a93 1
           NUM = N
d100 2
a101 1
        DO I=1,NUM
d103 2
a104 2
           IF (NUMLIS(I) < 1 .OR. NUMLIS(I) > N) THEN
              CALL ERRT(101,'MINIMA OUTSIDE VALID RANGE',NE)
d106 4
d120 1
d133 1
a133 1
           WRITE(6,90) A1, A2, A3, P
d179 1
a179 1
        A3 = 0
d289 1
a289 2
c        WRITE(NOUT,*)' A1=',   A1,'  A2=',A2,
c     &               '(A-1)  ',P, 'POINTS','  A3=',A3
d291 7
a297 5
        WRITE(6,90) A1, A2, A3, P
90      FORMAT(  '  A1:',G12.4,' ',  
     &           '  A2:',G12.4,' ',
     &           '  A3:',G12.4,' (A-1) ',
     &           '  POINTS:' G12.4)
@


1.22
log
@RDPRAI(NUMLIS,MAXMINS
@
text
@d3 1
a3 1
C  NOISE.F  ATTEMPTED FIX OF UNWORKING CODE     NOV 2014 ARDEAN LEITH
d32 1
a32 1
C NOTE:   COULD NEVER HAVE WORKED DUE TO LUN2 BUG         al NOV 2014
@


1.21
log
@default CR for all
@
text
@d79 1
a79 1
C       FIND MINIMA IN POWER SPECTUM
d86 1
a86 1
        CALL RDPRAI(NUMLIS,N,NUM, IDUM,IDUM,
d113 2
a114 1
           !write(6,*) ' x1:',x(i),'  y1:',y1(i), BUF(INT(RMINS(I)))
a171 16
        IF (NUM > 2) THEN       
           A3 = Y1(NUM) * 0.8
           A2 = SQRT( (X(2)**2 - X(1) **2) / LOG(Y1(1) / Y1(2)) )
           A1 = (Y1(1) - A3) / EXP(-(X(1) / A2)**2)

c          write(6,*) ' top:', (x(2)**2 - x(1)**2)
c          write(6,*) ' bot:', log(y1(1)/y1(2))
c          write(6,*) ' a2:',  exp(-(x(1) / a2)**2)
c          write(6,*) ' num:', num
c          write(6,*) ' a3:', a3, y1(num)
c          write(6,*) 'x(1), x(2) :',x(1), x(2)
c          write(6,*) 'buf(1), buf(2) :',buf(1), buf(2)
c          write(6,*) 'y1(1), y1(2) :',y1(1), y1(2)
c          write(6,*) 'y1(1)/y1(2) :',y1(1)/y1(2)
c          bot = log(y1(1) / y1(2))
c          write(6,*) 'bot:',bot
d173 5
a177 5
        ELSEIF(NUM > 1) THEN
           A3 = 0
           A2 = SQRT( (X(2)**2-X(1)**2) / LOG( Y1(1) / Y1(2) ) )
           A1 = (Y1(1) - A3) / EXP(-(X(1) / A2) **2)
        ENDIF
d179 10
a188 5
c       write(6,*) 'initial a1 :',a1
c       write(6,*) 'initial a2 :',a2
c       write(6,*) 'initial a3 :',a3

        
d335 1
a335 1
     &             XMIN = MIN( Y2(I), XMIN )
@


1.20
log
@traps set, formatting
@
text
@d3 1
a3 2
C  NOISE.F
C            ATTEMPTED FIX OF UNWORKING CODE     NOV 2014 ARDEAN LEITH
d27 1
a27 1
C NOISE:  CALCULATE THE BACKGROUND NOISE OF POWER SPECTRUM AND SUBTRACT
d29 2
a30 2
C         PROFILE USING STEEPEST DESCENT METHOD
C         F(XI,A)=A1EXP(-(XI/A2)**2)+A3
d32 1
a32 1
C NOTE:   COULD NOT HAVE WORKED EVER DUE TO LUN2 BUG  al NOV 2014
d38 2
d43 1
d48 11
a58 2
        INTEGER, PARAMETER    :: NUMMIN = 120
        INTEGER, PARAMETER    :: NUMXY  = NBUFSIZ
d60 9
a68 6
        REAL                  :: Y1(NUMXY),Y2(NUMXY)
        INTEGER               :: NUMLIS(NUMMIN)
        REAL                  :: X(NUMMIN), RKFR(NUMMIN), RMINS(NUMMIN)
        REAL                  :: KM,KS
        CHARACTER(LEN=MAXNAM) :: OUTNAME,IMFILE
        INTEGER               :: NE
d72 1
a72 1
        CALL OPFILEC(0,.TRUE.,IMFILE,LUN1,'O',IFORM,NX,NY,NSLICE,
d81 2
a82 1
        CALL DEFO003(INUM,N,RKFR,Y2,NX,SPMAX,LUN1,BUF,NUMMIN,IRTFLG)
d86 1
a86 1
        CALL RDPRAI(NUMLIS,NUMMIN,NUM, 1,N,
d89 7
a95 1
        IF (NUM <= 0) RETURN
d306 21
a326 1
        IF (IRTFLG .NE. 0) RETURN
d331 2
a332 2
C       ADD AN ADDITIONAL VALUE, SO ALL THE MINIMI ARE ABOVE ZERO, AT THE 
C       OTHER PLACES VALUE BELOW ZERO ARE SET TO ZERO.
d336 1
a340 2
           !if (i < 50)  write(6,*) ' i:',i,y2(i)

d344 2
a345 3
     &             I == NINT(RMINS(J))+1) THEN
                 IF (XMIN > Y2(I)) XMIN = Y2(I)
              ENDIF
a348 1

d352 5
d359 3
a361 1
        CALL WRTLIN(LUN2,Y2,NX,1)    
d363 1
a363 1
        CLOSE(LUN1)
d365 1
@


1.19
log
@ATTEMPTED FIX OF UNWORKING CODE
@
text
@d28 3
a30 3
C NOISE:  CALCULATE THE BACKGROUND NOISE OF POWER SPECTRUM AND SUBTRACT IT 
C         USING LEAST-SQUARE METHOD TO FIT POINTS INTO GAUSSIAN PROFILE
C         USING STEEPEST DESCENT METHOD
d42 1
a42 1
        COMMON /IOBUF/ BUF(NBUFSIZ)
d54 1
d71 1
a71 1
        CALL RDPRAI(NUMLIS,NUMMIN,NUM, 0,N,
d76 1
a76 1
         KM = SPMAX
d78 2
d81 4
a84 1
        DO I=1,NUM
d88 1
a88 1
           Y1(I) = (1.-(RMINS(I)-INT(RMINS(I)))) * BUF(INT(RMINS(I)))+
d92 1
d96 1
a96 1
C       FOR  SINGLE INPUT POINT  START HACK TO AVOID JUMP INTO LOOP ---------------
d105 1
a105 2
           WRITE(NOUT,*) 'A1=',A1,'  A2=',A2,'(A-1)  ',
     &                   P,'POINTS','  A3=',A3
d110 1
a110 1
     &                  MAXIM,'NOISE DELETED PROFILE',.FALSE.,IRTFLG)
d151 2
a152 2
           A3 = Y1(NUM)*0.8
           A2 = SQRT((X(2)**2-X(1)**2) / LOG(Y1(1)/Y1(2)))
d155 5
d169 2
a170 2
           A2 = SQRT((X(2)**2-X(1)**2) / LOG(Y1(1) / Y1(2)))
           A1 = (Y1(1)-A3) / EXP(-(X(1)/A2)**2)
d173 3
a175 1
c       write(6,*) 'initial a1 :',a1,initial a2 :',a2,'initial a3 :',a3
d204 2
d235 4
d241 2
d271 9
a279 2
        WRITE(NOUT,*)' A1=',   A1,'  A2=',A2,
     &               '(A-1)  ',P, 'POINTS','  A3=',A3
d284 1
a284 1
     &                MAXIM,'NOISE DELETED PROFILE',.FALSE.,IRTFLG)
d299 2
a322 20


#ifdef NEVER

        WRITE(NOUT,*) ' INPUT THE POINT YOU WANT:'
        DO  I=1,NUM
           WRITE(NOUT,40) I
40         FORMAT(' POINT #',I4,':   ')

           CALL RDPRM(RMINS(I),NOT_USED,'R [POINT]=?')

C          GET VALUE OF Y1, BILINEAR INTERPOLATAION
           Y1(I) = (1.-(RMINS(I)-INT(RMINS(I)))) * BUF(INT(RMINS(I)))+
     &                 (RMINS(I)-INT(RMINS(I)))  * BUF(INT(RMINS(I))+1)

c          write(nout,*) rmins(i),y1(i)
c          loc  = int(rmins(i))
c          tbuf = buf(loc)
c          write(nout,*) '----------',rmins(i), loc,'=', buf,':',y1(i)
#endif
@


1.18
log
@GPL_2010
@
text
@d4 1
d10 1
a10 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d33 2
d37 1
a37 1
	SUBROUTINE NOISE(IRTFLG)
d42 1
a42 1
c        INTEGER, PARAMETER :: NUMMIN = 120
d44 1
a44 5
        REAL                  :: Y1(512),Y2(512)
        REAL                  :: X(120)
        REAL                  :: KFR(120),K(120)
	REAL                  :: KM,KS
        CHARACTER(LEN=MAXNAM) :: OUTNAME,IMFILE
d46 2
a47 2
c        COMMON /IOBUF/ BUF(NBUFSIZ)
        real :: BUF(5000)
d49 5
a53 3
	LUN1 = 8
c	LUN2 = 10
c	INUM = 1
d55 1
d57 36
a92 25
	CALL OPFILEC(0,.TRUE.,IMFILE,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
     &             MAXIM,'IMAGE',.FALSE.,IRTFLG)
	IF (IRTFLG .NE. 0) RETURN

	WRITE(NOUT,10 )NSAM,NROW
10	FORMAT(' FILE DIMENSIONS:', I5,' X',I5)

	CALL DEFO003(INUM,N,KFR,Y2,NSAM,SPMAX,LUN1,BUF,NUMMIN,IRTFLG)
	IF (IRTFLG .NE. 0) RETURN

	CALL RDPRMI(NUM,NDUM,NOT_USED,'HOW MANY POINTS DO YOU WANT?')
	IF (NUM .EQ. 0) RETURN

	KM = SPMAX
        KS = KM / FLOAT(NSAM)
	WRITE(NOUT,*) ' INPUT THE POINT YOU WANT:'
	DO  I=1,NUM
	   WRITE(NOUT,40) I
40	   FORMAT(' POINT #',I4,':   ')
	   CALL RDPRM(K(I),NOT_USED,'R [POINT]=?')

C          GET VALUE OF Y1, BILINEAR INTERPRELATAION
	   Y1(I) = (1.-(K(I)-INT(K(I)))) * BUF(INT(K(I)))+
     &                  (K(I)-INT(K(I))) * BUF(INT(K(I))+1)
c	   WRITE(NOUT,*) K(I),Y1(I)
d94 3
a96 16
c          loc  = int(k(i))
c          tbuf = buf(loc)
c	   write(NOUT,*) '----------',K(I), loc,'=', buf,':',Y1(I)
	ENDDO
	
C       GET X(I) VALUE
	DO  I=1,NUM
	   X(I) = K(I) * KS
	ENDDO

C       START HACK TO AVOID JUMP INTO LOOP ---------------
C       FOR  SINGLE INPUT POINT
        IF (NUM .EQ. 1) THEN
	   CALL RDPRM(A2,NOT_USED,'SUPPLY A2 VALUE [A-1]:')
	   A3 = 0
	   A1 = Y1(1) / (EXP(-(X(1)/A2)**2))
d98 1
a98 2
           P  = A2 / KS
	   WRITE(NOUT,*)'A1=',A1,'  A2=',A2,'(A-1)  ',
d101 1
d103 1
a103 1
           CALL  OPFILEC(LUN1,.TRUE.,OUTNAME,LUN2,'U',IFORM, NSAM,1,1,
d105 1
a105 1
	   IF (IRTFLG .NE. 0) RETURN
d107 2
a108 7
           MAXIM = 0
           CALL  OPFILEC(0,.FALSE.,IMFILE,LUN1,'O',IFORM,
     &                  NSAM,NROW,NSLICE,
     &                  MAXIM,' ',.FALSE.,IRTFLG)
	   IF (IRTFLG .NE. 0) RETURN

 	   CALL REDLIN(LUN1,Y2,NSAM,1)
d113 23
a135 20
	   XMIN = 0
	   DO I=1,NSAM
	      X1    = FLOAT(I) * KS
	      Y1(I) = A1 * EXP(-(X1/A2)**2)+A3
	      Y2(I) = Y2(I) - Y1(I)
	      DO  J=1,NUM
                 IF (I .EQ. INT(K(J))-1 .OR. I .EQ. INT(K(J)) 
     &               .OR. I .EQ.  INT(K(J))+1) THEN
                   IF (XMIN .GT. Y2(I)) XMIN = Y2(I)
	         ENDIF
	      ENDDO
	   ENDDO
	   DO I=1,NSAM
   	      Y2(I) = Y2(I)-XMIN
	      IF (Y2(I) .LT. 0) Y2(I) = 0
	   ENDDO
	   CALL WRTLIN(LUN2,Y2,NSAM,1)	
	
	   CLOSE(LUN1)
	   CLOSE(LUN2)
d137 2
a138 2
	   RETURN
	ENDIF
a139 1
C       END HACK TO AVOID JUMP THAT CAUSES COMPILE PROBLEM -----------
d141 1
d144 10
a153 10
	IF (NUM .GT. 2) THEN	
	   A3 = Y1(NUM)*0.8
	   A2 = SQRT((X(2)**2-X(1)**2)/LOG(Y1(1)/Y1(2)))
	   A1 = (Y1(1)-A3)/EXP(-(X(1)/A2)**2)

c          WRITE(6,*) 'x(1), x(2) :',x(1), x(2)
c          WRITE(6,*) 'BUF(1), BUF(2) :',BUF(1), BUF(2)
c          WRITE(6,*) 'Y1(1), Y1(2) :',Y1(1), Y1(2)
c          write(6,*) 'Y1(1)/Y1(2) :',Y1(1)/Y1(2)
c          bot = LOG(Y1(1) / Y1(2))
d156 7
a162 8
	ELSEIF(NUM .GT. 1) THEN
	   A3 = 0
	   A2 = SQRT((X(2)**2-X(1)**2)/LOG(Y1(1)/Y1(2)))
	   A1 = (Y1(1)-A3) / EXP(-(X(1)/A2)**2)
	ENDIF
c       write(6,*) 'initial a1 :',a1
c       write(6,*) 'initial a2 :',a2
c       write(6,*) 'initial a3 :',a3
d164 1
a164 1
	
d166 8
a173 8
	DO  I=1,NUM
  	  Y2(I) = A1 * EXP(-(X(I)/A2)**2)+A3
	ENDDO

	X0=0
	DO I=1,NUM
	   X0 = X0+(Y1(I)-Y2(I))**2
	ENDDO
d176 3
a178 3
999	DA1   = 0.001 * A1
	DA2   = 0.001 * A2
	DA3   = 0.001 * A3
d181 8
a188 8
     	DO  I=1,NUM
	   Y2(I) = (A1 + 0.1 * DA1) * EXP(-(X(I)/A2)**2) + A3
	ENDDO

	X1 = 0
	DO  I=1,NUM
	   X1 = X1 + (Y1(I) - Y2(I))**2
	ENDDO
d190 1
a190 1
	DXA1 = (X1-X0) / (0.1*DA1)
d192 34
a225 35
	DO  I=1,NUM
	   Y2(I) = A1 * EXP(-(X(I)/(A2+0.1*DA2))**2)+A3
	ENDDO

	X1 = 0
	DO I=1,NUM
	   X1 = X1+(Y1(I)-Y2(I))**2
	ENDDO

	DXA2 = (X1-X0)/(0.1*DA2)
	

C       CALCULATE DERIVATE dX**2/dA3
	DO  I=1,NUM
	   Y2(I) = A1*EXP(-(X(I)/A2)**2)+(A3+0.1*DA3)
	ENDDO

	X1 = 0
	DO I=1,NUM
	   X1 = X1+(Y1(I)-Y2(I))**2
	ENDDO

	IF (NUM .LT. 3) THEN
	   DXA3 = 0
	ELSE
	   DXA3 = (X1-X0)/(0.1*DA3)
	ENDIF

C       ..........................
	SUM = SQRT((DXA1*DA1)**2+(DXA2*DA2)**2+(DXA3*DA3)**2)

	A1 = A1-DXA1*DA1**2/SUM
	A2 = A2-DXA2*DA2**2/SUM
	A3 = A3-DXA3*DA3**2/SUM
	
d227 9
a235 9
	DO  I=1,NUM
	   Y2(I) = A1*EXP(-(X(I)/A2)**2)+A3
	ENDDO

	X1 = 0
	DO  I=1,NUM
	   X1 = X1+(Y1(I)-Y2(I))**2
	ENDDO
	D = X1-X0
d238 2
a239 11
	IF (D .LE. 0) THEN
	   X0 = X1
	   P  = A2 / KS
C	   WRITE(NOUT,*)'A1=',A1,' A2=',A2,'(A-1) ',P,'POINTS',' A3',A3
	   NSTEP = NSTEP + 1
	   GOTO 999
	ENDIF

           A1 = A1 + 0.5*DXA1*DA1**2/SUM
	   A2 = A2 + 0.5*DXA2*DA2**2/SUM
	   A3 = A3 + 0.5*DXA3*DA3**2/SUM
d241 51
a291 2
	   WRITE(NOUT,*)'A1=',A1,'  A2=',A2,'(A-1)  ',
     &                   P,'POINTS','  A3=',A3
a292 4
           MAXIM = 0
           CALL  OPFILEC(LUN1,.TRUE.,OUTNAME,LUN2,'U',IFORM, NSAM,1,1,
     &                  MAXIM,'NOISE DELETED PROFILE',.FALSE.,IRTFLG)
	   IF (IRTFLG .NE. 0) RETURN
a293 5
           MAXIM = 0
           CALL  OPFILEC(0,.FALSE.,IMFILE,LUN1,'O',IFORM,
     &                  NSAM,NROW,NSLICE,
     &                  MAXIM,' ',.FALSE.,IRTFLG)
	   IF (IRTFLG .NE. 0) RETURN
d295 1
a295 1
 	   CALL REDLIN(LUN1,Y2,NSAM,1)
d297 4
a300 2
C          ADD AN ADDITIONAL VALUE, SO ALL THE MINIMI ARE ABOVE ZERO, AT THE 
C          OTHER PLACES VALUE BELOW ZERO ARE SET TO ZERO.
d302 1
a302 21
	   XMIN=0
	   DO I=1,NSAM
	      X1    = FLOAT(I)*KS
	      Y1(I) = A1*EXP(-(X1/A2)**2)+A3
	      Y2(I) = Y2(I)-Y1(I)
	      DO  J=1,NUM
                 IF ( I .EQ. INT(K(J))-1 .OR. I .EQ. INT(K(J))
     &            .OR. I .EQ.  INT(K(J))+1) THEN
                   IF (XMIN .GT. Y2(I)) XMIN = Y2(I)
	         ENDIF
	      ENDDO
	   ENDDO

	   DO I=1,NSAM
   	      Y2(I) = Y2(I)-XMIN
	      IF (Y2(I) .LT. 0) Y2(I) = 0
	   ENDDO
	   CALL WRTLIN(LUN2,Y2,NSAM,1)	
	
	CLOSE(LUN1)
	CLOSE(LUN2)
d304 3
a306 1
	RETURN
d308 5
a312 1
	END
@


1.17
log
@hack needed to compile on pgi 6.1
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.16
log
@cpgi opt=0
@
text
@a0 2
cpgi$ opt=0
C Fails to compile on PGI with O2
d31 4
a34 4
C    NOISE:  CALCULATE THE BACKGROUND NOISE OF POWER SPECTRUM AND SUBTRACT IT 
C            USING LEAST-SQUARE METHOD TO FIT POINTS INTO GAUSSIAN PROFILE
C            USING STEEPEST DESCENT METHOD
C            F(XI,A)=A1EXP(-(XI/A2)**2)+A3
d43 1
a43 1
        PARAMETER       (NUMMIN = 120)
d45 5
a49 2
C       NSAM APEARS TO BE LIMITED TO 512 al
C       (I DID NOT WRITE THIS MESS al!!!!)
d51 2
a52 8
        REAL   KFR,K
	COMMON Y1(512),Y2(512),X(NUMMIN),KFR(NUMMIN),K(NUMMIN)

	REAL          KM,KS
	CHARACTER     NULL
        CHARACTER *81 OUTNAME,IMFILE

        COMMON /IOBUF/  BUF(NBUFSIZ)
d55 2
a56 3
	LUN2 = 10
	NULL = CHAR(0)
	INUM = 1
d60 1
a60 1
     &             MAXIM,'IMAGE', .FALSE.,IRTFLG)
d63 1
a63 1
	WRITE(NOUT,10)NSAM,NROW
d66 1
a66 2
	CALL DEFO003(INUM,N,KFR,Y2,NSAM,SPMAX,LUN1,
     &               BUF,NUMMIN,IRTFLG)
d73 1
a73 1
        KS = KM/FLOAT(NSAM)
d79 1
d85 3
a87 3
c           loc  = int(k(i))
c           tbuf = buf(loc)
c	   WRITE(NOUT,*) '----------',K(I), loc,'=', buf,':',Y1(I)
a88 3
	IF (NUM .EQ. 1) THEN
	   CALL RDPRM(A2,NOT_USED,'SUPPLY A2 VALUE [A-1]:')
	ENDIF
d92 1
a92 1
	   X(I)=K(I)*KS
d95 1
d97 47
a143 4
        IF(NUM .EQ. 1) THEN
	   A3=0
	   A1=Y1(1)/(EXP(-(X(1)/A2)**2))
	   GOTO 899
d146 1
a146 5
C       SET INITIAL VALUE FOR A1,A2 AND A3
	IF( NUM .GT. 2) THEN	
	   A3=Y1(NUM)*0.8
	   A2=SQRT((X(2)**2-X(1)**2)/LOG(Y1(1)/Y1(2)))
	   A1=(Y1(1)-A3)/EXP(-(X(1)/A2)**2)
a147 2
c            WRITE(6,*) 'x(1), x(2) :',x(1), x(2)
c            WRITE(6,*) 'BUF(1), BUF(2) :',BUF(1), BUF(2)
d149 12
a160 5
c            WRITE(6,*) 'Y1(1), Y1(2) :',Y1(1), Y1(2)
c            write(6,*) 'Y1(1)/Y1(2) :',Y1(1)/Y1(2)

c            bot = LOG(Y1(1) / Y1(2))
c            write(6,*) 'bot:',bot
d163 3
a165 6
	   A3=0
	   A2=SQRT((X(2)**2-X(1)**2)/LOG(Y1(1)/Y1(2)))
	   A1=(Y1(1)-A3)/EXP(-(X(1)/A2)**2)
	ELSE
	   A3=0
	   A1=(Y1(1)-A3)/EXP(-(X(1)/A2)**2)
d167 3
a169 3
c            write(6,*) 'initial a1 :',a1
c            write(6,*) 'initial a2 :',a2
c            write(6,*) 'initial a3 :',a3
d174 1
a174 1
  	  Y2(I)=A1*EXP(-(X(I)/A2)**2)+A3
d176 1
d179 1
a179 1
	   X0=X0+(Y1(I)-Y2(I))**2
d182 6
a187 5
        NSTEP=0
999	DA1=0.001*A1
	DA2=0.001*A2
	DA3=0.001*A3
C       CALCULATE dX**2/dA1
d189 1
a189 1
	   Y2(I)=(A1+0.1*DA1)*EXP(-(X(I)/A2)**2)+A3
d191 2
a192 1
	X1=0
d194 1
a194 1
	   X1=X1+(Y1(I)-Y2(I))**2
d196 2
a197 1
	DXA1=(X1-X0)/(0.1*DA1)
d200 1
a200 1
	   Y2(I)=A1*EXP(-(X(I)/(A2+0.1*DA2))**2)+A3
a201 1
	X1=0
d203 1
d205 1
a205 1
	   X1=X1+(Y1(I)-Y2(I))**2
d208 1
a208 5
	IF(NUM .LT. 2) THEN
	   DXA2=0
	ELSE
	   DXA2=(X1-X0)/(0.1*DA2)
	ENDIF
d213 1
a213 1
	   Y2(I)=A1*EXP(-(X(I)/A2)**2)+(A3+0.1*DA3)
d215 2
a216 1
	X1=0
d218 1
a218 1
	   X1=X1+(Y1(I)-Y2(I))**2
d220 3
a222 2
	IF(NUM .LT. 3) THEN
	   DXA3=0
d224 1
a224 1
	   DXA3=(X1-X0)/(0.1*DA3)
d226 1
d228 1
a228 1
	SUM=SQRT((DXA1*DA1)**2+(DXA2*DA2)**2+(DXA3*DA3)**2)
d230 3
a232 3
	A1=A1-DXA1*DA1**2/SUM
	A2=A2-DXA2*DA2**2/SUM
	A3=A3-DXA3*DA3**2/SUM
d236 1
a236 1
	   Y2(I)=A1*EXP(-(X(I)/A2)**2)+A3
d238 2
a239 1
	X1=0
d241 1
a241 1
	   X1=X1+(Y1(I)-Y2(I))**2
d243 1
a243 1
	D=X1-X0
d247 4
a250 4
	   X0=X1
	   P=A2/KS
C	   WRITE(NOUT,*)'A1=',A1,' A2=',A2,'(A-1)  ',P,'POINTS','  A3',A3
	   NSTEP=NSTEP+1
d252 6
a257 6
	END IF
C	IF (D .GT. 0) THEN
	   A1=A1+0.5*DXA1*DA1**2/SUM
	   A2=A2+0.5*DXA2*DA2**2/SUM
	   A3=A3+0.5*DXA3*DA3**2/SUM
899	   P=A2/KS
d279 3
a281 3
	      X1=FLOAT(I)*KS
	      Y1(I)=A1*EXP(-(X1/A2)**2)+A3
	      Y2(I)=Y2(I)-Y1(I)
d283 1
a283 1
                 IF( I .EQ. INT(K(J))-1 .OR. I .EQ. INT(K(J))
d285 1
a285 1
                   IF (XMIN .GT. Y2(I)) XMIN=Y2(I)
d289 1
d292 1
a292 1
	      IF (Y2(I) .LT. 0) Y2(I)=0
d300 1
@


1.15
log
@cpgig opt=0
@
text
@d1 1
a1 1
cpgi$g opt=0
@


1.14
log
@GPL License fixed
@
text
@d1 2
@


1.13
log
@HRI GPL License used
@
text
@a5 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
a29 1
C **************************************************************************
@


1.12
log
@opfilec
@
text
@d5 1
d7 1
d9 24
d39 1
@


1.11
log
@nloop,iloop_removed
@
text
@d47 1
a47 1
	CALL OPFILE(.TRUE.,IMFILE,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
d207 1
a207 1
           CALL  OPFILE(.TRUE.,OUTNAME,LUN2,'U',IFORM, NSAM,1,1,
d212 2
a213 1
           CALL  OPFILE(.FALSE.,IMFILE,LUN1,'O',IFORM,NSAM,NROW,NSLICE,
@


1.10
log
@fixed buffer overrun bug
@
text
@d58 1
a58 1
	CALL RDPRMI(NUM,NDUM,NLOOP,ILOOP,'HOW MANY POINTS DO YOU WANT?')
d67 1
a67 1
	   CALL RDPRM(K(I),NLOOP,ILOOP,'R [POINT]=?')
d78 1
a78 1
	   CALL RDPRM(A2,NLOOP,ILOOP,'SUPPLY A2 VALUE [A-1]:')
@


1.9
log
@common bug fixed
@
text
@d25 1
d27 1
a27 3
C       WARNING IMFILE SET IN DEFO003
        CHARACTER *81 IMFILE
	COMMON /IMFILE/IMFILE
a28 1
C       WARNING DEFO003 RETURNS DATA IN BUF!!!!!!!
d31 1
d33 1
a33 1
	COMMON Y1(512),Y2(512),X(120),KFR(120),K(120),BUF(1)
d37 3
a39 1
        CHARACTER *81 OUTNAME
d45 11
a55 1
	CALL DEFO003(INUM,N,KFR,Y2,NSAM,SPMAX,LUN1,IRTFLG)
d58 1
a58 1
	CALL RDPRMI(NUM,NDUM,NLOOP,ILOOP,'HOW MANY POINTS YOU WANT?')
d61 2
a62 2
	KM=SPMAX
        KS=KM/FLOAT(NSAM)
d67 1
a67 1
	   CALL RDPRM(K(I),NLOOP,ILOOP,'R [POINT]=?$')
d69 7
a75 3
	   Y1(I)=(1.-(K(I)-INT(K(I))))*BUF(INT(K(I)))+
     &        (K(I)-INT(K(I)))*BUF(INT(K(I))+1)
	   WRITE(NOUT,*) K(I),Y1(I)
d77 1
a77 1
	IF(NUM .EQ. 1) THEN
d98 10
d116 4
d175 1
@


1.8
log
@*** empty log message ***
@
text
@d1 1
a1 1
C++*******************************************************************
d3 1
a3 1
C $$ NOISE.FOR
d15 1
a15 2
C
C $$ NOISE:  CALCULATE THE BACKGROUND NOISE OF POWER SPECTRUM AND SUBTRACT IT 
d18 1
a18 1
C            f(Xi,A)=A1exp(-(Xi/A2)**2)+A3
d20 1
a20 2
C    CALL NOISE(IRTFLG)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
d23 1
d25 3
a27 1
C	COMMON /COMMUN/IMFILE
d29 15
a43 10
	common adum(2048),buf(1)
	DIMENSION Y1(512),Y2(512),X(120)
	real KFR(120),K(120)
	REAL KM,KS
	CHARACTER OUTNAME*81,IMFILE*81,NULL*1,CHO*1
CNO_SAVE
	LUN1=8
	LUN2=10
	NULL=CHAR(0)
	INUM=1
d45 5
a49 3
	IF(IRTFLG .NE. 0) RETURN
	CALL RDPRMI(NUM,NDUM,NLOOP,ILOOP,'HOW MANY POINTS YOU WANT?$')
	IF(NUM .EQ. 0) RETURN
d56 4
a59 4
	   CALL RDPRM(k(I),NLOOP,ILOOP,'R [point]=?$')
C          get value of y1, bilinear interprelataion
	   Y1(I)=(1.-(k(i)-int(k(i))))*buf(int(k(i)))+
     &        (k(i)-int(k(i)))*buf(int(k(i))+1)
d63 1
a63 1
	   CALL RDPRM(A2,NLOOP,ILOOP,'SUPPLY A2 VALUE [A-1]: $ ')
d66 1
a66 1
C....... GET X(I) VALUE
d71 1
a71 1
C......FOR  SINGLE INPUT POINT
d78 1
a78 1
C...... SET INITIAL VALUE FOR A1,A2 AND A3
d80 3
a82 3
	A3=Y1(NUM)*0.8
	A2=SQRT((X(2)**2-X(1)**2)/LOG(Y1(1)/Y1(2)))
	A1=(Y1(1)-A3)/EXP(-(X(1)/A2)**2)
d84 3
a86 3
	A3=0
	A2=SQRT((X(2)**2-X(1)**2)/LOG(Y1(1)/Y1(2)))
	A1=(Y1(1)-A3)/EXP(-(X(1)/A2)**2)
d88 2
a89 2
	A3=0
	A1=(Y1(1)-A3)/EXP(-(X(1)/A2)**2)
d92 1
a92 1
C.......SET INITIAL VALUE OF X**2
a96 4
c	XMIN=0
c	DO I=1,NUM
c	IF(XMIN .GT. (Y1(I)-Y2(I))) XMIN=Y1(I)-Y2(I)
c	ENDDO
d98 1
a98 2
c	X0=X0+(Y1(I)-Y2(I)-xmin)**2
	X0=X0+(Y1(I)-Y2(I))**2
d100 1
a100 1
C	write(nout,*) 'x0=',x0
d105 1
a105 1
C...... CALCULATE dX**2/dA1
a109 4
c	XMIN=0
c	DO I=1,NUM
c	IF(XMIN .GT. (Y1(I)-Y2(I))) XMIN=Y1(I)-Y2(I)
c	ENDDO
a110 1
c	   X1=X1+(Y1(I)-Y2(I)-xmin)**2
d114 1
a114 2
C	WRITE(NOUT,*)'x1=',x1,'dxa1=',dxa1
C.......CALCULATE DERIVATE dX**2/dA2
d119 2
a120 6
c	XMIN=0
c	DO I=1,NUM
c	IF(XMIN .GT. (Y1(I)-Y2(I))) XMIN=Y1(I)-Y2(I)
c	ENDDO
	DO  I=1,NUM
c	   X1=X1+(Y1(I)-Y2(I)-xmin)**2
d123 1
d130 2
a131 2
C	write(nout,*)'x1=',x1,'dxa2',dxa2
C...... CALCULATE DERIVATE dX**2/dA3
a135 4
c	XMIN=0
c	DO I=1,NUM
c	IF( XMIN .GT. (Y1(I)-Y2(I))) XMIN=(Y1(I)-Y2(I))
c	ENDDO
a136 1
c	   X1=X1+(Y1(I)-Y2(I)-xmin)**2
d144 1
a144 2
C	write(nout,*)'x1=',x1,'dxa3=',dxa3
C..........................
d150 1
a150 1
C....... CRITERIA FOR ITERATION  ...... CALCULATE THE Y2
a154 4
c	XMIN=0
c	DO I=1,NUM
c	IF(XMIN .GT. (Y1(I)-Y2(I))) XMIN=Y1(I)-Y2(I)
c	ENDDO
a155 1
c          X1=X1+(Y1(I)-Y2(I)-xmin)**2	
d175 4
a178 2
	   WRITE(NOUT,*)' CREATE A NOISE DELETED PROFILE'
	   CALL FILERD(OUTNAME,NLET,NULL,'OUTPUT',IRTFLG)
d180 6
a185 2
           CALL OPENF(OUTNAME,LUN2,NSAM,1,'UNKNOWN',NF,1)
	   CALL OPENF(IMFILE,LUN1,NSAM,NROW,'O',NF,NSLICE)
a186 1
C	   CALL RDPRMI(NK1,NK2,NLLOP,ILOOP,'MAX. CAL. POINTS=$')
d188 2
a189 2
C  add an additional value, so all the minimi are above zero, at the 
c  other places value below zero are set to zero.
d196 4
a199 4
	      do  j=1,num
                 IF( i .eq. int(k(j))-1 .or. i .eq. int(k(j))
     &            .or. i .eq.  int(k(j))+1) then
                   if (XMIN .GT. Y2(I)) XMIN=Y2(I)
d204 1
a204 1
   	      Y2(I)=Y2(I)-XMIN
a207 7
C	ELSE
C	   X0=X1
C	   P=A2/KS
CC	   WRITE(NOUT,*)'A1=',A1,' A2=',A2,'(A-1)  ',P,'POINTS','  A3',A3
C	   NSTEP=NSTEP+1
C	   GOTO 999
C	ENDIF
d211 1
@


1.7
log
@*** empty log message ***
@
text
@d45 1
a45 1
	DO 60 I=1,NUM
d53 1
a53 1
60 	CONTINUE
d59 3
a61 2
	DO 70 I=1,NUM
70	   X(I)=K(I)*KS
d85 3
a87 2
	DO 75 I=1,NUM
75	Y2(I)=A1*EXP(-(X(I)/A2)**2)+A3
d103 3
a105 2
     	DO 80 I=1,NUM
80	   Y2(I)=(A1+0.1*DA1)*EXP(-(X(I)/A2)**2)+A3
d111 1
a111 1
	DO 85 I=1,NUM
d114 1
a114 1
85	continue
d118 3
a120 2
	DO 100 I=1,NUM
100	   Y2(I)=A1*EXP(-(X(I)/(A2+0.1*DA2))**2)+A3
d126 1
a126 1
	DO 105 I=1,NUM
d129 1
a129 1
105	continue
d138 1
a138 1
	DO 108 I=1,NUM
d140 1
a140 1
108     CONTINUE
d163 1
a163 1
	DO 110 I=1,NUM
d165 1
a165 1
110     continue
d171 1
a171 1
	DO 120 I=1,NUM
d174 1
a174 1
120	continue	
d208 1
a208 1
	      do 200 j=1,num
d213 1
a213 1
200	      continue
@


1.6
log
@change write(* to write(nout
@
text
@a24 1
#ifdef SP_UNIX
a25 5
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif


d47 1
a47 1
40	   FORMAT(' POINT #',I4,':   ',$)
@


1.5
log
@solve branch to label 899 from outside block
@
text
@d25 5
a30 1
	INCLUDE 'CMBLOCK.INC'
d52 1
a52 1
	   WRITE(*,40) I
d119 1
a119 1
C	write(*,*)'x1=',x1,'dxa1=',dxa1
d183 1
a183 1
C	   WRITE(*,*)'A1=',A1,' A2=',A2,'(A-1)  ',P,'POINTS','  A3',A3
d225 1
a225 1
CC	   WRITE(*,*)'A1=',A1,' A2=',A2,'(A-1)  ',P,'POINTS','  A3',A3
@


1.4
log
@changes done by june Zhu
@
text
@d35 1
d48 7
a54 7
	WRITE(*,40) I
40	FORMAT(' POINT #',I4,':   ',$)
	CALL RDPRM(k(I),NLOOP,ILOOP,'R [point]=?$')
C       get value of y1, bilinear interprelataion
	Y1(I)=(1.-(k(i)-int(k(i))))*buf(int(k(i)))+
     &  (k(i)-int(k(i)))*buf(int(k(i))+1)
	WRITE(NOUT,*) K(I),Y1(I)
d57 1
a57 1
	CALL RDPRM(A2,NLOOP,ILOOP,'SUPPLY A2 VALUE [A-1]: $ ')
d59 1
d62 2
a63 1
70	X(I)=K(I)*KS
d66 3
a68 3
	A3=0
	A1=Y1(1)/(EXP(-(X(1)/A2)**2))
	GOTO 899
d104 1
a104 1
80	Y2(I)=(A1+0.1*DA1)*EXP(-(X(I)/A2)**2)+A3
d111 2
a112 2
c	X1=X1+(Y1(I)-Y2(I)-xmin)**2
	X1=X1+(Y1(I)-Y2(I))**2
d118 1
a118 1
100	Y2(I)=A1*EXP(-(X(I)/(A2+0.1*DA2))**2)+A3
d125 2
a126 2
c	X1=X1+(Y1(I)-Y2(I)-xmin)**2
	X1=X1+(Y1(I)-Y2(I))**2
d129 1
a129 1
	DXA2=0
d131 1
a131 1
	DXA2=(X1-X0)/(0.1*DA2)
d133 1
d137 2
a138 1
108	Y2(I)=A1*EXP(-(X(I)/A2)**2)+(A3+0.1*DA3)
d145 2
a146 2
c	X1=X1+(Y1(I)-Y2(I)-xmin)**2
	X1=X1+(Y1(I)-Y2(I))**2
d149 1
a149 1
	DXA3=0
d151 1
a151 1
	DXA3=(X1-X0)/(0.1*DA3)
d159 2
a160 2
C....... CRETIA FOR ITERATION
C....... CALCULATE THE Y2
d162 2
a163 1
110	Y2(I)=A1*EXP(-(X(I)/A2)**2)+A3
d170 2
a171 2
c	X1=X1+(Y1(I)-Y2(I)-xmin)**2	
	X1=X1+(Y1(I)-Y2(I))**2
d174 23
a196 13
	IF (D .GT. 0) THEN
	A1=A1+0.5*DXA1*DA1**2/SUM
	A2=A2+0.5*DXA2*DA2**2/SUM
	A3=A3+0.5*DXA3*DA3**2/SUM
899	P=A2/KS
	WRITE(NOUT,*)'A1=',A1,'  A2=',A2,'(A-1)  ',P,'POINTS','  A3=',A3
	WRITE(NOUT,*)' CREATE A NOISE DELETED PROFILE'
	CALL FILERD(OUTNAME,NLET,NULL,'OUTPUT',IRTFLG)
	IF (IRTFLG .NE. 0) RETURN
        CALL OPENF(OUTNAME,LUN2,NSAM,1,'UNKNOWN',NF,1)
	CALL OPENF(IMFILE,LUN1,NSAM,NROW,'O',NF,NSLICE)
 	CALL REDLIN(LUN1,Y2,NSAM,1)
C	CALL RDPRMI(NK1,NK2,NLLOP,ILOOP,'MAX. CAL. POINTS=$')
d198 2
a199 2
C add an additional value, so all the minimi are above zero, at the other places
c value below zero are set to zero.
d201 25
a225 24
	XMIN=0
	DO I=1,NSAM
	X1=FLOAT(I)*KS
	Y1(I)=A1*EXP(-(X1/A2)**2)+A3
	Y2(I)=Y2(I)-Y1(I)
	do 200 j=1,num
           IF( i .eq. int(k(j))-1 .or. i .eq. int(k(j)) .or. i .eq. 
     &   int(k(j))+1) then
             if (XMIN .GT. Y2(I)) XMIN=Y2(I)
	   ENDIF
200	continue
	ENDDO
	DO I=1,NSAM
	Y2(I)=Y2(I)-XMIN
	IF (Y2(I) .LT. 0) Y2(I)=0
	ENDDO
	CALL WRTLIN(LUN2,Y2,NSAM,1)	
	ELSE
	X0=X1
	P=A2/KS
C	WRITE(*,*)'A1=',A1,' A2=',A2,'(A-1)  ',P,'POINTS','  A3',A3
	NSTEP=NSTEP+1
	GOTO 999
	ENDIF
@


1.3
log
@corrections by Jun Zhu from germany
@
text
@a0 8
#ifdef SP_DISTRIB
      SUBROUTINE NOISE
      COMMON /UNITS/LUNC,NIN,NOUT
      WRITE(NOUT,*) 'DUMMY CALL: NOISE'
      RETURN
      END
#else

d16 1
a16 1
C $$ NOISE:  CALCULATE THE BACKGROUND NOISE OF POWER SPECTRUM AND SUBTRACT IT
d26 1
a26 5
#ifdef SP_UNIX
        INCLUDE 'CMBLOCK.INC'
#else
        INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d30 3
a32 1
	DIMENSION Y1(512),Y2(512),X(120),K(120),KFR(120)
d49 4
a52 3
	CALL RDPRMI(NP,NDUM,NLOOP,ILOOP,'WHICH POINT YOU WANT?$')
	K(I)=KFR(NP)
	Y1(I)=Y2(NP)
d56 1
a56 1
	CALL RDPRM(A2,NLOOP,ILOOP,'SUPPLY A2 VALUE : $ ')
d60 8
a67 1
70	X(I)=FLOAT(K(I))*KS
d69 1
a69 1
	IF( NUM .GT. 2) THEN
d81 1
a81 10

C	WRITE(NOUT,*) 'A1=',A1,'   A2=',A2,'  A3=',A3
C	WRITE(NOUT,73)
C73	FORMAT(' DO YOU WANT CHANGE THE INITIAL VALUE?(Y/N)',$)
C	READ (*,74) CHO
C74	FORMAT(A1)
C	IF(CHO .EQ. 'Y' .OR. CHO .EQ. 'y') THEN
C	WRITE(nout,*) ' INPUT INITAIL VALUE FOR A1,A2,A3'
C	READ(*,*) A1,A2,A3
C	ENDIF
d86 4
d91 1
d103 4
d108 3
a110 1
85	X1=X1+(Y1(I)-Y2(I))**2
d117 4
d122 3
a124 1
105	X1=X1+(Y1(I)-Y2(I))**2
d135 4
d140 1
d159 4
d164 3
a166 1
120	X1=X1+(Y1(I)-Y2(I))**2
d172 1
a172 1
	P=A2/KS
d181 5
a185 1
C	XMIN=0
d190 4
a193 2
           IF(XMIN .GT. Y2(I)) THEN
           XMIN=Y2(I)
d195 1
d199 1
a199 1
C	IF (Y2(I) .LT. 0) Y2(I)=0
d201 1
a201 1
	CALL WRTLIN(LUN2,Y2,NSAM,1)
a212 1
#endif
@


1.2
log
@wrong col in distrib code
@
text
@d8 2
a9 1
C++*********************************************************************
d11 1
a11 1
C NOISE.FOR
d13 9
a21 8
C **********************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK          *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND       *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.    *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *  THE CENTER FOR LABORATORIES AND RESEARCH 			   *
d24 4
a27 4
C NOISE:CALCULATE THE BACKGROUND NOISE OF POWER SPECTRUM AND SUBTRACT IT 
C       USING LEAST-SQUARE METHOD TO FIT POINTS INTO GAUSSIAN PROFILE
C       USING STEEPEST DESCENT METHOD
C         F(XI,A)=A1EXP(-(XI/A2)**2)+A3
d29 2
a30 3
C    NOISE(IRTFLG)
C
C **********************************************************************
d33 1
d37 1
a37 1
	INCLUDE 'COMMON1:CMBLOCK.INC'
d39 4
a42 2
	COMMON /COMMUN/IMFILE
	DIMENSION Y1(512),Y2(512),X(20),K(20),KFR(20)
a44 1

d51 2
a52 1
	CALL RDPRMI(NUM,NDUM,NLOOP,ILOOP,'HOW MANY POINTS YOU WANT?')
d59 1
a59 1
	CALL RDPRMI(NP,NDUM,NLOOP,ILOOP,'WHICH POINT YOU WANT?')
d64 3
d71 1
d75 9
d86 1
a86 1
C73	FORMAT(' DO YOU WANT CHANGE THE INITIAL VALUE?(Y/N)',)
d89 2
a90 2
C	IF(CHO .EQ. 'Y' .OR. CHO .EQ. 'Y') THEN
C	WRITE(NOUT,*) ' INPUT INITAIL VALUE FOR A1,A2,A3'
d100 1
a100 1
C	WRITE(NOUT,*) 'X0=',X0
d105 1
a105 1
C...... CALCULATE DX**2/DA1
d112 2
a113 2
C	WRITE(*,*)'X1=',X1,'DXA1=',DXA1
C.......CALCULATE DERIVATE DX**2/DA2
d119 3
d123 3
a125 2
C	WRITE(NOUT,*)'X1=',X1,'DXA2',DXA2
C...... CALCULATE DERIVATE DX**2/DA3
d132 3
d136 2
a137 1
C	WRITE(NOUT,*)'X1=',X1,'DXA3=',DXA3
d149 1
a149 1
120	X1=X1+(Y1(I)-Y2(I))**2	
d163 2
a164 1
	XMIN=0
d175 1
d177 1
a177 1
	CALL WRTLIN(LUN2,Y2,NSAM,1)	
@


1.1
log
@Initial revision
@
text
@d2 5
a6 5
     SUBROUTINE NOISE
     COMMON /UNITS/LUNC,NIN,NOUT
     WRITE(NOUT,*) 'DUMMY CALL: NOISE'
     RETURN
     END
d8 1
a8 1
C++*******************************************************************
d10 1
a10 1
C $$ NOISE.FOR
d12 8
a19 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d22 4
a25 4
C $$ NOISE:  CALCULATE THE BACKGROUND NOISE OF POWER SPECTRUM AND SUBTRACT IT 
C            USING LEAST-SQUARE METHOD TO FIT POINTS INTO GAUSSIAN PROFILE
C            USING STEEPEST DESCENT METHOD
C            F(XI,A)=A1EXP(-(XI/A2)**2)+A3
d27 3
a29 2
C    CALL NOISE(IRTFLG)
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
d41 1
d48 1
a48 1
	CALL RDPRMI(NUM,NDUM,NLOOP,ILOOP,'HOW MANY POINTS YOU WANT?$')
d55 1
a55 1
	CALL RDPRMI(NP,NDUM,NLOOP,ILOOP,'WHICH POINT YOU WANT?$')
d69 1
a69 1
C73	FORMAT(' DO YOU WANT CHANGE THE INITIAL VALUE?(Y/N)',$)
@
