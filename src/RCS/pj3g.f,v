head	1.6;
access;
symbols
	pre_getangas:1.5
	pre_GPL2010:1.5
	pre_var_equation:1.5
	pre_fftwrings:1.4;
locks; strict;
comment	@c @;


1.6
date	2014.01.12.19.20.13;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.19.12.02.58;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.24.13.44.54;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2007.03.29.14.05.00;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.28.14.57.53;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.28.13.22.13;	author leith;	state Exp;
branches;
next	;


desc
@@


1.6
log
@enter
@
text
@C++*********************************************************************
C
C PJ3G.F        
C              EXTENSIVELY ALTERED                 MAR 07 ArDean Leith
C              FMRS_PLAN                           MAY  08 ARDEAN LEITH
C
C **********************************************************************
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C)2002-2008, P. A. Penczek                                   *
C=* University of Texas - Houston Medical School                       *
C=* Email:  pawel.a.penczek@@uth.tmc.edu                                *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* This program is distributed in the hope that it will be useful,    *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
C **********************************************************************
C
C PJ3G
C
C PURPOSE:  COMPUTES PROJECTIONS OF A 3D VOLUME ACCORDING TO 
C           THREE EULERIAN ANGLES. DOES A WHOLE PROJECTION SERIES. 
C           USES GRIDDING.  UNTESTED. NO MANUAL PAGE
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE PJ3G

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        CHARACTER (LEN=MAXNAM)                 :: FINPIC,FINPAT
        COMPLEX, DIMENSION(:,:,:), ALLOCATABLE :: X
        REAL, ALLOCATABLE, DIMENSION(:,:)      :: ANGBUF

         DATA  INVOL/92/,INDOCA/96/,INDOCS/95/

#ifdef USE_MPI
         include 'mpif.h'
         ICOMM = MPI_COMM_WORLD
         CALL MPI_COMM_RANK(ICOMM, MYPID, MPIERR)
#else
         MYPID = -1 
#endif

C        OPEN INPUT VOLUME
         MAXIM  = 0
         IRTFLG = 0
         CALL OPFILEC(0,.TRUE.,FINPIC,INVOL,'O',IFORM,NSAM,NROW,NSL,
     &               MAXIM,'3-D INPUT',.FALSE.,IRTFLG)
         IF (IRTFLG .NE. 0)  RETURN

C        READ SELECTION DOC FILE 
         NIMAXT = NIMAX
         CALL FILELIST(.FALSE.,INDOCS,FINPAT,NLETA,INUMBR,NIMAXT,NANG,
     &        'ANGLE NUMBERS OR SELECTION DOC. FILE NAME',IRTFLG)
         IF (IRTFLG .NE. 0) RETURN 
         
C        OPEN ANGLES DOC FILE
         CALL OPENDOC(FINPIC,.TRUE.,NLETI,INDOCAT,INDOCA,.TRUE.,
     &            'ANGLES DOC',.TRUE.,.FALSE.,.FALSE.,NEWFILE,IRTFLG)
         IF (IRTFLG .NE. 0)  RETURN

C        READ ANGLES (IN DEGREES) FROM ANGLES DOC FILE.
C        ORDER IN THE DOC. FILE IS PSI, THETA, PHI! 
         ALLOCATE(ANGBUF(3,NANG),STAT=IRTFLG)
         IF (IRTFLG .NE. 0) THEN 
            MWANT = 3*NANG 
            CALL ERRT(46,'ANGBUF',MWANT)
	    GOTO 9996
         ENDIF

         IF (IRTFLG .NE. 0) RETURN 

C        RETRIEVE THE ANGLES FROM KEYED DOC FILE
         CALL LUNDOCREDANG(INDOCA,ANGBUF,NANG,NGOTY,MAXGOTY,IRTFLG)
         IF (IRTFLG .NE. 0) GOTO 9996

         N2  = 2*NSAM
         LSD = N2+2-MOD(N2,2)

         ALLOCATE (X(0:N2/2,N2,N2), STAT=IRTFLG)
         IF (IRTFLG .NE. 0) THEN 
            MWANT = (1+N2)/2 * N2 * N2 
            FWANT = (1+N2)/2 * N2 * N2 
            WRITE(NOUT,*) ' BYTES WANTED: ',FWANT
            CALL ERRT(46,'X',MWANT)
	    GOTO 9996
         ENDIF

C        LOAD THE VOLUME INTO: X
         CALL READV(INVOL,X,NSAM,NSAM,NSAM,NSAM,NSAM)
         CLOSE(INVOL)

C        PROJECT NOW
         CALL GPRJ3(NSAM,X,X,
     &              LSD,N2,N2/2,ANGBUF,NANG,INUMBR,NANG)

         IF (MYPID .LE. 0) THEN
            WRITE(NOUT,90) NANG
90          FORMAT('  PJ 3G FINISHED FOR: ',I6,'   PROJECTIONS ----',/)
            CALL FLUSHRESULTS()
         ENDIF

9996     IF (ALLOCATED(X))       DEALLOCATE(X)
         IF (ALLOCATED(ANGBUF))  DEALLOCATE(ANGBUF)

         END


C       ------------------ GPRJ3 ----------------------------------

        SUBROUTINE GPRJ3(NS,X,VO,LSD,N,N2,ANGBUF,MAXKEY,ISELECT,NANG)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'
        
        COMPLEX, DIMENSION(0:N2,N,N)           :: X 
	REAL, DIMENSION(NS,NS,NS)              :: VO
	REAL, DIMENSION(4)                     :: BUFOUT
        INTEGER, DIMENSION(MAXKEY)             :: ISELECT
        REAL,    DIMENSION(3,MAXKEY)           :: ANGBUF

        REAL, DIMENSION(:,:,:),    ALLOCATABLE :: PROJ
        COMPLEX, DIMENSION(:,:),   ALLOCATABLE :: FPROJ1
        COMPLEX, DIMENSION(:,:,:), ALLOCATABLE :: BI
        COMPLEX, DIMENSION(:,:,:), ALLOCATABLE :: VIN

        PARAMETER         (LTABI=5999)
        REAL, DIMENSION(0:LTABI)               :: TABI
        CHARACTER (LEN=MAXNAM)                 :: FINPAT,FINP

        DATA  INPAT/91/

C       CREATE KAISER-BESSEL TABLE
        CALL FILLBESSI0(NS,LTABI,LNB,LNE,FLTB,TABI,ALPHA,RRR,V)
c       write(6,*) 'TABI(66): ',TABI(66),V,FLTB,ALPHA,RRR,V,LNB,LNE

C       FIND NUMBER OF PARALLEL THREADS
        CALL GETTHREADS(NUMTH)

        ALLOCATE (FPROJ1(0:N2,NUMTH),
     &		  PROJ(NS,NS,NUMTH),
     &            BI(0:N2,N,NUMTH),
     &            VIN(0:N2,N,N),
     &            STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           MWANT =(N2+1)*NUMTH+ NS*NS*NUMTH+2*(N2+1)*N*NUMTH+(N2+1)*N*N 
           CALL ERRT(46,'FPROJ1, ...',MWANT)
           RETURN
        ENDIF

C       CREATE FFTW3 NxN PLAN FOR USE WITHIN OMP LOOP BELOW	
        CALL FMRS_PLAN(.TRUE.,BI, N,N,1, 1,-1,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

C       PREPARE INPUT VOLUME
        CALL DIVKB3(VO,NS,ALPHA,RRR,V)   !CODE LOCATED IN: wiw3g.f

        CALL PAD3_3(VIN,N+2,N,VO,NS)

C       FORWARD FFT ON: VIN NxNxN
        INV = +1
        CALL FMRS_3(VIN,N,N,N,INV)

        DO L=1,N
            DO J=1,N
              DO I=0,N2
                 VIN(I,J,L) = VIN(I,J,L)*(-1)**(I+J+L)
              ENDDO
            ENDDO
        ENDDO

C       SHIFT THE ORIGIN OF THE FT FROM (0,0) TO (0,int(N/2)+1=N2+1)
        DO  L=1,N
           DO  J=1,N2
             FPROJ1(:,1)   = VIN(:,J,L)
             VIN(:,J,L)    = VIN(:,J+N2,L)
             VIN(:,J+N2,L) = FPROJ1(:,1)
           ENDDO
        ENDDO

        DO J=1,N
           DO L=1,N2
             FPROJ1(:,1)   = VIN(:,J,L)
             VIN(:,J,L)    = VIN(:,J,L+N2)
             VIN(:,J,L+N2) = FPROJ1(:,1)
           ENDDO
        ENDDO

C       GET FINPAT TEMPLATE ONLY (NOT ILIST)
        NMAX = 0
        CALL FILSEQP(FINPAT,NLET,ILIST,NMAX,NIMA,
     &               'TEMPLATE FOR 2-D PROJECTION',IRTFLG)

        IFORM = 1
        NSL   = 1
	NP2   = N+2 

        IANG  = 1
        DO WHILE (IANG .LE. NANG)
            NEEDED = MIN(IANG+NUMTH-1,NANG)

c$omp       parallel do private(i,ifile,j,jx,inv)
            DO I=IANG,NEEDED
              IFILE = ISELECT(I)

              IF (VERBOSE) WRITE(NOUT,90)IFILE
90            FORMAT('  PROJECTION: ',I6)

              CALL EXTRACTPLANE(N,N2,BI(0,1,I-IANG+1),VIN,
     &		     ANGBUF(3,IFILE),ANGBUF(2,IFILE),ANGBUF(1,IFILE),
     &               LNB,LNE,FLTB,LTABI,TABI)

C             SHIFT THE ORIGIN OF THE FT FROM (0,int(N/2)+1=N2+1) TO (0,0)
              DO  J=1,N2
                 FPROJ1(:,I-IANG+1)  = BI(:,J,I-IANG+1)
                 BI(:,J,I-IANG+1)    = BI(:,J+N2,I-IANG+1)
                 BI(:,J+N2,I-IANG+1) = FPROJ1(:,I-IANG+1)
              ENDDO

              DO  J=1,N
                 DO  JX=0,N2
                    BI(JX,J,I-IANG+1) = BI(JX,J,I-IANG+1)*(-1)**(JX+J+1)
                 ENDDO
              ENDDO

C             INVERSE FFT ON: NxN
              INV = -1
              CALL FMRS_2(BI(0,1,I-IANG+1),N,N,INV)

C             WINDOWING?
	      CALL WIN2_2(BI(0,1,I-IANG+1),NP2,N,PROJ(1,1,I-IANG+1),NS)
	    ENDDO

C           WRITE PROJECTIONS TO OUTPUT FILES
            DO I=IANG,NEEDED
               IFILE  = ISELECT(I)
C              CREATE OUTPUT FILENAME
               CALL FILGET(FINPAT,FINP,NLET,IFILE,IRTFLG)

C              OPEN FILE
               MAXIM = 0
               CALL OPFILEC(0,.FALSE.,FINP,INPAT,'U',IFORM,NS,NS,NSL,
     &                 MAXIM,' ',.FALSE.,IRTFLG)

               DO J=1,NS
                  CALL WRTLIN(INPAT,PROJ(1,J,I-IANG+1),NS,J)
               ENDDO

C              PUT ANGLES IN HEADER
               BUFOUT(1) = ANGBUF(1,IFILE)
               BUFOUT(2) = ANGBUF(2,IFILE)
               BUFOUT(3) = ANGBUF(3,IFILE)
               BUFOUT(4) = 1.0
               CALL LUNSETVALS(INPAT,IAPLOC+1,4,BUFOUT,IRTFLG)
               CLOSE(INPAT)
            ENDDO


            IANG = IANG + NUMTH

         ENDDO

999     IF (ALLOCATED(PROJ))    DEALLOCATE (PROJ)
        IF (ALLOCATED(BI))      DEALLOCATE (BI)
        IF (ALLOCATED(FPROJ1))  DEALLOCATE (FPROJ1)
        IF (ALLOCATED(VIN))     DEALLOCATE (VIN)

	END


C       ------------------- WIN2_2 -------------------------------

	SUBROUTINE  WIN2_2(X,LSD,N,V,NS)

	DIMENSION  X(LSD,N), V(NS,NS)

C       FOR NS ODD ADD ONE.  N IS ALWAYS EVEN
        IP = (N-NS) / 2+MOD(NS,2)
	V  = X(IP+1:IP+NS,IP+1:IP+NS)

	END

C       ------------------- PAD3_3 -------------------------------

	SUBROUTINE  PAD3_3(X,LSD,N,V,NS)
C 
	DIMENSION  X(LSD,N,N),V(NS,NS,NS)
C       FOR NS ODD ADD ONE.  N IS ALWAYS EVEN

	X = 0.0
        IP = (N-NS) / 2+MOD(NS,2)

	DO K=1,NS
	   DO J=1,NS
	      DO I=1,NS
	         X(IP+I,IP+J,IP+K) = V(I,J,K)
	      ENDDO
	   ENDDO
	ENDDO
	END

C       ------------------- EXTRACTPLANE -------------------------------

        SUBROUTINE EXTRACTPLANE(N,N2,X,BI,PHI,THETA,PSI,
     &                          LNB,LNE,FLTB,LTABI,TABI)

        REAL              TABI(0:LTABI)
        COMPLEX           BI(0:N2,-N2:N2-1,-N2:N2-1)
        COMPLEX           X(0:N2,-N2:N2-1),BTQ
        DIMENSION         DM(6)
	DIMENSION         WZ(LNB:LNE),WY(LNB:LNE),WX(LNB:LNE)
	DOUBLE PRECISION  CWG
	LOGICAL           FLIP,MIRROR
        DOUBLE PRECISION  CPHI,SPHI,CTHE,STHE,CPSI,SPSI
        DOUBLE PRECISION  QUADPI,DGR_TO_RAD,RAD_TO_DGR

        PARAMETER (QUADPI = 3.1415926535897932384626)
        PARAMETER (DGR_TO_RAD = (QUADPI/180))

	CWG = 0.0
	LWG = 0
	X   = (0.0,0.0)

	CPHI = DCOS(DBLE(PHI)*DGR_TO_RAD)
	SPHI = DSIN(DBLE(PHI)*DGR_TO_RAD)
	CTHE = DCOS(DBLE(THETA)*DGR_TO_RAD)
	STHE = DSIN(DBLE(THETA)*DGR_TO_RAD)
	CPSI = DCOS(DBLE(PSI)*DGR_TO_RAD)
	SPSI = DSIN(DBLE(PSI)*DGR_TO_RAD)

	DM(1) = CPHI*CTHE*CPSI-SPHI*SPSI
	DM(2) = SPHI*CTHE*CPSI+CPHI*SPSI
	DM(3) = -STHE*CPSI
	DM(4) = -CPHI*CTHE*SPSI-SPHI*CPSI
	DM(5) = -SPHI*CTHE*SPSI+CPHI*CPSI
	DM(6) = STHE*SPSI

	RIM = N2*N2
        DO J=-N2,N2-1
           DO I=0,N2
              XNEW = I * DM(1) + J * DM(4)
              YNEW = I * DM(2) + J * DM(5)
              ZNEW = I * DM(3) + J * DM(6)
              IF (XNEW*XNEW+YNEW*YNEW+ZNEW*ZNEW.LE.RIM)  THEN
                 BTQ = (0.0,0.0)
	         IF (XNEW .LT. 0.0)  THEN
		    FLIP = .TRUE.
		    XNEW = -XNEW
		    YNEW = -YNEW
		    ZNEW = -ZNEW
		 ELSE
		    FLIP = .FALSE.
		 ENDIF

		 IXN = IFIX(XNEW+SIGN(0.5,XNEW))
		 IYN = IFIX(YNEW+SIGN(0.5,YNEW))
		 IZN = IFIX(ZNEW+SIGN(0.5,ZNEW))
		 IF (IXN.GE.-LNB.AND.IXN.LE.N2-1-LNE     .AND.
     &	             IYN.GE.-N2-LNB.AND.IYN.LE.N2-1-LNE  .AND.
     &	             IZN.GE.-N2-LNB.AND.IZN.LE.N2-1-LNE ) THEN
	             LWG = LWG+1

                     DO  LZ=LNB,LNE
                        IZP     = IZN + LZ
                        WZ(LZ)  = TABI(NINT(ABS(ZNEW-IZP) * FLTB))
                        IYP     = IYN + LZ
                        WY(LZ)  = TABI(NINT(ABS(YNEW-IYP) * FLTB))
		        IXP     = IXN + LZ
                        WX(LZ)  = TABI(NINT(ABS(XNEW-IXP) * FLTB))
                     ENDDO

C                    RESTRICT LOOPS
                     DO  LY=LNB,-1,1
                        IF (WY(LY).NE.0.0)  THEN
                           LNBY = LY
                           GOTO 1
                        ENDIF
                     ENDDO

                     LNBY = 0
1                    DO LY=LNE,1,-1
	                IF (WY(LY) .NE. 0.0)  THEN
	                   LNEY = LY
	                   GOTO 2
	                ENDIF
	             ENDDO
	             LNEY = 0
2	             DO  LY=LNB,-1,1
	                IF (WX(LY) .NE. 0.0)  THEN
	                   LNBX = LY
	                   GOTO 3
	                ENDIF
	             ENDDO
	             LNBX = 0
3	             DO  LY=LNE,1,-1
	                IF (WX(LY) .NE. 0.0)  THEN
                           LNEX = LY
	                   GOTO 4
	                ENDIF
	             ENDDO
	             LNEX = 0

4	             DO  LY=LNB,-1,1
                        IF(WZ(LY) .NE. 0.0)  THEN
                           LNBZ = LY
                           GOTO 5
                        ENDIF
                     ENDDO
                  LNBZ = 0
5	          DO  LY=LNE,1,-1
	             IF (WZ(LY) .NE. 0.0)  THEN
                       LNEZ = LY
	               GOTO 6
	             ENDIF
	          ENDDO
	          LNEZ = 0

6	          CONTINUE	

                  DO LZ=LNBZ,LNEZ
                      IZP = IZN + LZ
                      DO LY=LNBY,LNEY
                         IYP = IYN + LY
                         TY  = WZ(LZ)*WY(LY)
                         DO LX=LNBX,LNEX
                            IXP  = IXN + LX

C                           GET THE WEIGHT
                            WG  = WX(LX)*TY
                            BTQ = BTQ + BI(IXP,IYP,IZP) * WG
                            CWG = CWG+WG
                         ENDDO
                     ENDDO
                  ENDDO
	       ELSE

C                 SPECIAL CASES OF POINTS "STICKING OUT"
	          LWG=LWG+1

	          DO  LZ=LNB,LNE
                      IZP     = IZN + LZ
                      WZ(LZ)  = TABI(NINT(ABS(ZNEW-IZP) * FLTB))
                      IYP     = IYN + LZ
                      WY(LZ)  = TABI(NINT(ABS(YNEW-IYP) * FLTB))
		      IXP     = IXN + LZ
                      WX(LZ)  = TABI(NINT(ABS(XNEW-IXP) * FLTB))
	          ENDDO

C                 RESTRICT LOOPS
	          DO LY=LNB,-1,1
	             IF (WY(LY) .NE. 0.0)  THEN
                        LNBY = LY
	                GOTO 11
	             ENDIF
	          ENDDO
	          LNBY=0
11	          DO LY=LNE,1,-1
	             IF (WY(LY) .NE. 0.0)  THEN
                        LNEY = LY
	                GOTO 12
	             ENDIF
	          ENDDO
	          LNEY = 0
12	          DO  LY=LNB,-1,1
	             IF (WX(LY) .NE.0.0)  THEN
                        LNBX = LY
	                GOTO 13
	             ENDIF
	          ENDDO
	          LNBX = 0
13	          DO  LY=LNE,1,-1
	             IF (WX(LY) .NE.0.0)  THEN
	                LNEX = LY
	                GOTO 14
	             ENDIF
	          ENDDO
                  LNEX = 0
14	          DO  LY=LNB,-1,1
                     IF (WZ(LY) .NE.0.0)  THEN
                        LNBZ = LY
                        GOTO 15
                     ENDIF
                  ENDDO
                  LNBZ=0
15	          DO  LY=LNE,1,-1
                     IF (WZ(LY) .NE. 0.0)  THEN
                        LNEZ = LY
                        GOTO 16
                     ENDIF
                  ENDDO
                  LNEZ = 0
16	          CONTINUE	


                  DO LZ=LNBZ,LNEZ
                      IZP = IZN + LZ
                          DO  LY=LNBY,LNEY
                             IYP = IYN + LY
                             TY  = WZ(LZ)*WY(LY)
                                DO LX=LNBX,LNEX
				   IXP = IXN + LX
C                                  GET THE WEIGHT
                                   WG     = WX(LX)*TY
	                           MIRROR =.FALSE.
	                           IXT    = IXP
	                           IYT    = IYP
	                           IZT    = IZP
	                           IF (IXT.GT.N2.OR.IXT.LE.-N2) THEN
	                              IXT    = ISIGN(N-IABS(IXT),IXT)
	                              IYT    = -IYT
	                              IZT    = -IZT
	                              MIRROR = .NOT.MIRROR
	                           ENDIF

	                           IF (IYT.GE.N2.OR.IYT.LT.-N2 ) THEN
	                              IF (IXT.NE.0) THEN
	                                 IXT    = -IXT
	                                 IYT    = ISIGN(N-IABS(IYT),IYT)
	                                 IZT    = -IZT
	                                 MIRROR = .NOT.MIRROR
	                              ELSE
	                                 IYT = IYT-ISIGN(N,IYT)
	                              ENDIF
	                           ENDIF

	                           IF (IZT.GE.N2.OR.IZT.LT.-N2)  THEN
	                              IF (IXT.NE.0)  THEN
	                                 IXT    = -IXT
	                                 IYT    = -IYT
	                                 IZT    = ISIGN(N-IABS(IZT),IZT)
	                                 MIRROR = .NOT.MIRROR
	                              ELSE
	                                 IZT = IZT-ISIGN(N,IZT)
	                              ENDIF
	                           ENDIF

	                           IF (IXT.LT.0)  THEN
	                              IXT    = -IXT
	                              IYT    = -IYT
	                              IZT    = -IZT
	                              MIRROR = .NOT.MIRROR
	                           ENDIF

	                           IF (IYT .EQ. N2) IYT=-N2
	                           IF (IZT .EQ. N2) IZT=-N2

	                           IF (MIRROR) THEN
	                              BTQ = BTQ + 
     &                                      CONJG(BI(IXT,IYT,IZT)) * WG
	                           ELSE
                                      BTQ = BTQ + BI(IXT,IYT,IZT) * WG
	                           ENDIF
	                           CWG = CWG + WG
	                        ENDDO
	                     ENDDO
	                  ENDDO
	               ENDIF
	               IF (FLIP)  THEN
	                  X(I,J) = CONJG(BTQ)
	               ELSE
	                  X(I,J) = BTQ
	               ENDIF
	            ENDIF
C                   END I-J LOOP
                 ENDDO
              ENDDO

	      X = X / CWG * LWG
        END
@


1.5
log
@FFTW3 plan changes
@
text
@d68 1
a68 1
     &        'ENTER ANGLE NUMBERS OR SELECTION DOC. FILE NAME',IRTFLG)
d206 1
a206 1
     &               'ENTER TEMPLATE FOR 2-D PROJECTION',IRTFLG)
@


1.4
log
@gridded
@
text
@d4 2
a5 1
C                         EXTENSIVELY ALTERED        MAR 07 ArDean Leith
d9 1
a9 1
C=* Copyright (C)2002-2007, P. A. Penczek                                   *
d34 1
a34 1
C           USES GRIDDING
d79 6
d95 4
a98 2
         IF (IRTFLG.NE.0) THEN 
            MWANT = (1+N2)/2*N2*N2 
a142 1
 	DOUBLE  PRECISION                      :: QUADPI
a143 3
 	DOUBLE  PRECISION                      :: WEIGHT,TOTW,SINTHETA
	DOUBLE  PRECISION                      :: DELTATHETA
 	DOUBLE  PRECISION                      :: SINDELTATHETA
d160 1
a160 1
           MWANT = (N2+1)*NUMTH+ NS*NS*NUMTH+ (N2+1)*N*NUMTH+ (N2+1)*N*N 
d164 5
a168 1
	
d170 1
a170 1
        CALL DIVKB3(VO,NS,ALPHA,RRR,V)
d174 1
d216 1
a216 1
c$omp       parallel do private(i,ifile,j,jx)
d220 3
d240 1
a240 1
C             FOURIER TRANSFORM
d272 1
a315 2


a317 1

@


1.3
log
@runs
@
text
@d61 1
a61 1
     &               MAXIM,'INPUT VOLUME',.FALSE.,IRTFLG)
d65 2
a66 1
         CALL FILELIST(.FALSE.,INDOCS,FINPAT,NLETA,INUMBR,MAXKEY,NANG,
d68 2
a69 2
         IF (IRTFLG .NE. 0) RETURN         

d75 3
a77 5
C        READ ANGLES FROM ANGLES DOC FILE.
C        ORDER IN THE DOCUMENT FILE IS PSI, THETA, PHI, AND ANGLES ARE 
C        IN DEGREES! 

         ALLOCATE(ANGBUF(3,MAXKEY),STAT=IRTFLG)
d81 1
a81 1
         CALL LUNDOCREDANG(INDOCA,ANGBUF,MAXKEY,NGOTY,MAXGOTY,IRTFLG)
d100 1
a100 1
     &              LSD,N2,N2/2,ANGBUF,MAXKEY,INUMBR,NANG)
d143 1
a143 1
        CALL MAKEBESSI0(NS,LTABI,LNB,LNE,FLTB,TABI,ALPHA,RRR,V)
d162 1
a301 69
C       ------------------- DIVKB3 -------------------------------

        SUBROUTINE DIVKB3(X,M,ALPHA,RRR,V)

        DIMENSION  X(M,M,M)

	PARAMETER (QUADPI = 3.1415926535897932384626)
	PARAMETER (TWOPI = 2*QUADPI)

C       M IS NSAM
	ICENT = INT(M/2)+1
	WKB0  = SINH(TWOPI*ALPHA*RRR*V) / (TWOPI*ALPHA*RRR*V)

	DO K=1,M
	   TTT = REAL(IABS(K-ICENT)) / RRR

	   IF (TTT.EQ.0.0)  THEN
	      WKBK = 1.0
	   ELSEIF (TTT.LT.ALPHA) THEN
	      XX   = SQRT(1.0-(TTT/ALPHA)**2)
	      WKBK = SINH(TWOPI*ALPHA*RRR*V*XX)/
     &                   (TWOPI*ALPHA*RRR*V*XX)/WKB0
	   ELSEIF (TTT.EQ.ALPHA) THEN
	       WKBK = 1.0/WKB0
	   ELSE
	       XX   = SQRT((TTT/ALPHA)**2-1.0)
	       WKBK = SIN(TWOPI*ALPHA*RRR*V*XX)/
     &                   (TWOPI*ALPHA*RRR*V*XX)/WKB0
	   ENDIF

	   DO J=1,M
	      TTT = REAL(IABS(J-ICENT))/RRR

	      IF (TTT .EQ. 0.0) THEN
	         WKBJ = 1.0
	      ELSEIF (TTT .LT. ALPHA)  THEN
	         XX   = SQRT(1.0-(TTT/ALPHA)**2)
	         WKBJ = SINH(TWOPI*ALPHA*RRR*V*XX)/
     &                      (TWOPI*ALPHA*RRR*V*XX)/WKB0
	      ELSEIF (TTT .EQ. ALPHA)  THEN
	         WKBJ = 1.0/WKB0
	      ELSE
	         XX   = SQRT((TTT/ALPHA)**2-1.0)
	         WKBJ = SIN(TWOPI*ALPHA*RRR*V*XX)/
     &                     (TWOPI*ALPHA*RRR*V*XX)/WKB0
	      ENDIF

	      DO I=1,M
	         TTT = REAL(IABS(I-ICENT))/RRR

	         IF (TTT .EQ. 0.0)  THEN
	            WKBI = 1.0
	         ELSEIF (TTT .LT. ALPHA)  THEN
	            XX   = SQRT(1.0-(TTT/ALPHA)**2)
	            WKBI = SINH(TWOPI*ALPHA*RRR*V*XX)/
     &                         (TWOPI*ALPHA*RRR*V*XX)/WKB0
	         ELSEIF (TTT .EQ. ALPHA)  THEN
	            WKBI = 1.0/WKB0
	         ELSE
	            XX   = SQRT((TTT/ALPHA)**2-1.0)
	            WKBI = SIN(TWOPI*ALPHA*RRR*V*XX)/
     &                        (TWOPI*ALPHA*RRR*V*XX)/WKB0
	         ENDIF

	         X(I,J,K) = X(I,J,K) / ABS(WKBI*WKBJ*WKBK)
	      ENDDO
           ENDDO
	ENDDO
        END
d348 1
a348 1
                 BTQ=(0.0,0.0)
d357 1
d373 1
a373 1
                    ENDDO
d375 1
a375 1
C                   RESTRICT LOOPS
d383 1
a383 1
                     LNBY=0
d425 12
a436 12
                           DO LY=LNBY,LNEY
                             IYP = IYN + LY
                             TY  = WZ(LZ)*WY(LY)
                             DO LX=LNBX,LNEX
                                IXP  = IXN + LX

C                               GET THE WEIGHT
                                WG  = WX(LX)*TY
                                BTQ = BTQ + BI(IXP,IYP,IZP) * WG
                                CWG = CWG+WG
                             ENDDO
                          ENDDO
d561 1
a561 1
	               IF(FLIP)  THEN
@


1.2
log
@cosmetic, etc
@
text
@a42 1

d105 1
a105 1
90          FORMAT('  PJ 3G FINISHED FOR: ',I7,'   PROJECTIONS ----',/)
d122 3
a124 2
        COMPLEX         X(0:N2,N,N)
	DIMENSION	VO(NS,NS,NS),BUFOUT(4)
d133 3
a135 3
 	DOUBLE  PRECISION  QUADPI
 	DOUBLE  PRECISION  WEIGHT,TOTW,SINTHETA,DELTATHETA,SINDELTATHETA

d137 3
a139 6

        PARAMETER         (LTABI=5999)
        COMMON  /TABS/    LNB,LNE,FLTB,TABI(0:LTABI)
	COMMON  /BESSEL_PARAM/  ALPHA,RRR,V
	PARAMETER (QUADPI = 3.14159265358979323846D0)
	PARAMETER (TWOPI = 2*QUADPI)
d143 3
a145 31
C       K=6
        LN=6
        LNB=-INT(LN/2)
	LNE=INT(LN/2)

C       Kaiser-Bessel window according to Schomberg
C       M is NSAM, N is 2*NSAM
C       M=NS, N=N
	M=NS
	V=REAL(LN)/2.0/REAL(N)

C       Adjust V to make sure that it is not zero at the window border
	VADJUST=1.0*V
	LTAB=NINT(REAL(LTABI)/1.25)
	RRR=M/2
	ALPHA=1.75
C       GENERATE TABLE WITH INTERPOLANTS
	IF (LTABI.GT.LTAB)  TABI(LTAB+1:LTABI)=0.0
	B0   = BESI0(TWOPI*ALPHA*RRR*VADJUST)
        FLTB = REAL(LTAB)/REAL(LNE)

cc$omp  parallel do private(i,s,x),shared(mmm)
        DO  I=0,LTAB
	   S=REAL(I)/FLTB/N
	   IF (S .LT. VADJUST)  THEN
	      XX      = SQRT(1.0-(S/VADJUST)**2)
	      TABI(I) = BESI0(TWOPI*ALPHA*RRR*VADJUST*XX)/B0
	   ELSE
	      TABI(I) = 0.0
	   ENDIF
        ENDDO
d147 1
d162 1
a162 1
        CALL DIVKB3(VO,NS)
d211 2
a212 1
     &		     ANGBUF(3,IFILE),ANGBUF(2,IFILE),ANGBUF(1,IFILE))
d227 1
d231 1
d275 1
a275 1
	DIMENSION  X(LSD,N),V(NS,NS)
d304 1
a304 1
        SUBROUTINE DIVKB3(X,M)
a306 1
	COMMON  /BESSEL_PARAM/  ALPHA,RRR,V
d317 1
d331 1
d334 1
d348 1
d351 1
d365 1
d376 2
a377 1
        SUBROUTINE EXTRACTPLANE(N,N2,X,BI,PHI,THETA,PSI)
d379 5
a383 4
        COMPLEX        BI(0:N2,-N2:N2-1,-N2:N2-1)
        COMPLEX        X(0:N2,-N2:N2-1),BTQ
        DIMENSION      DM(6)
	DIMENSION      WZ(LNB:LNE),WY(LNB:LNE),WX(LNB:LNE)
d385 1
a385 1
	LOGICAL        FLIP,MIRROR
d392 3
a394 2
        PARAMETER      (LTABI=5999)
        COMMON  /TABS/ LNB,LNE,FLTB,TABI(0:LTABI)
a395 3
	CWG=0.0
	LWG=0
	X=(0.0,0.0)
d410 1
a410 1
	RIM=N2*N2
d418 5
a422 5
	         IF (XNEW.LT.0.0)  THEN
		    FLIP=.TRUE.
		    XNEW=-XNEW
		    YNEW=-YNEW
		    ZNEW=-ZNEW
d424 1
a424 1
		    FLIP=.FALSE.
d432 1
a432 1
	             LWG=LWG+1
d435 1
a435 1
                        IZP = IZN + LZ
d437 1
a437 1
                        IYP = IYN + LZ
d439 1
a439 1
		        IXP = IXN + LZ
d460 2
a461 2
	                IF (WX(LY).NE.0.0)  THEN
	                   LNBX=LY
d465 1
a465 1
	             LNBX=0
d467 2
a468 2
	                IF (WX(LY).NE.0.0)  THEN
                           LNEX=LY
d472 1
a472 1
	             LNEX=0
d475 2
a476 2
                        IF(WZ(LY).NE.0.0)  THEN
                           LNBZ=LY
d480 1
a480 1
                  LNBZ=0
d482 1
a482 1
	             IF (WZ(LY).NE.0.0)  THEN
d487 1
a487 1
	          LNEZ=0
d512 1
a512 1
                      IZP = IZN + LZ
d514 1
a514 1
                      IYP = IYN + LZ
d516 1
a516 1
		      IXP = IXN + LZ
d523 1
a523 1
                        LNBY=LY
d529 2
a530 2
	             IF (WY(LY).NE.0.0)  THEN
                        LNEY=LY
d534 1
a534 1
	          LNEY=0
d536 2
a537 2
	             IF (WX(LY).NE.0.0)  THEN
                        LNBX=LY
d541 1
a541 1
	          LNBX=0
d543 2
a544 2
	             IF(WX(LY).NE.0.0)  THEN
	                LNEX=LY
d548 1
a548 1
                  LNEX=0
d550 2
a551 2
                     IF(WZ(LY).NE.0.0)  THEN
                        LNBZ=LY
d557 2
a558 2
                     IF(WZ(LY).NE.0.0)  THEN
                        LNEZ=LY
d562 1
a562 1
                  LNEZ=0
d574 5
a578 5
                                   WG=WX(LX)*TY
	                           MIRROR=.FALSE.
	                           IXT=IXP
	                           IYT=IYP
	                           IZT=IZP
d580 4
a583 4
	                              IXT=ISIGN(N-IABS(IXT),IXT)
	                              IYT=-IYT
	                              IZT=-IZT
	                              MIRROR=.NOT.MIRROR
d588 4
a591 4
	                                 IXT=-IXT
	                                 IYT=ISIGN(N-IABS(IYT),IYT)
	                                 IZT=-IZT
	                                 MIRROR =.NOT.MIRROR
d593 1
a593 1
	                                 IYT=IYT-ISIGN(N,IYT)
d599 4
a602 4
	                                 IXT=-IXT
	                                 IYT=-IYT
	                                 IZT=ISIGN(N-IABS(IZT),IZT)
	                                 MIRROR=.NOT.MIRROR
d604 1
a604 1
	                                 IZT=IZT-ISIGN(N,IZT)
d609 4
a612 4
	                              IXT=-IXT
	                              IYT=-IYT
	                              IZT=-IZT
	                              MIRROR=.NOT.MIRROR
d615 2
a616 2
	                           IF (IYT.EQ.N2) IYT=-N2
	                           IF (IZT.EQ.N2) IZT=-N2
d618 1
a618 1
	                           IF (MIRROR)  THEN
d624 1
a624 1
	                           CWG=CWG+WG
d630 1
a630 1
	                  X(I,J)=CONJG(BTQ)
d632 1
a632 1
	                  X(I,J)=BTQ
d639 1
a639 1
	      X=X/CWG*LWG
@


1.1
log
@used to be reversegrid32.f
@
text
@d1 36
d38 1
a38 3
C       PROJECTION

        SUBROUTINE REVERSEGRID32
d43 2
a44 1
c        REAL, DIMENSION(:,:), ALLOCATABLE :: DM3,SM
d46 1
a46 2
C       DOC FILE POINTERS
        REAL, ALLOCATABLE, DIMENSION(:,:)   :: ANGBUF
d48 1
a48 2
        COMMON /F_SPEC/ FINPAT,NLET,FINPIC
        CHARACTER*80    FINPIC,FINPAT,FILNAM,ANGDOC
d50 7
a56 2
        DATA  IOPIC/98/,INPIC/99/
        DATA  INDOCA,INDOCS/96,95/
d61 2
a62 2
         CALL OPFILEC(0,.TRUE.,FINPIC,INPIC,'O',IFORM,NSAM,NROW,NSL,
     &               MAXIM,'3-D INPUT',.FALSE.,IRTFLG)
d68 1
a68 1
         IF (IRTFLG .NE. 0) GOTO 9996         
d73 1
a73 1
         IF (IRTFLG .NE. 0)  GOTO 9996
d76 1
a76 1
C        ORDER IN THE DOCUMENT FILE IS PSI, THETA, PHI AND ANGLES ARE 
d80 1
a80 1
         IF (IRTFLG .NE. 0) GOTO 9996 
d82 1
d86 2
a87 2
        N2     = 2*NSAM
        LSD    = N2+2-MOD(N2,2)
d89 10
a98 8
        ALLOCATE (X(0:N2/2,N2,N2), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'PJ RG',IER)
	   RETURN
        ENDIF

        CALL READV(INPIC,X,NSAM,NSAM,NSAM,NSAM,NSAM)
        CLOSE(INPIC)
d100 2
a101 1
       CALL GPRJ3(NSAM,X,X,
d104 5
a108 3
9996     CONTINUE
        IF (ALLOCATED(X))       DEALLOCATE(X)
        IF (ALLOCATED(ANGBUF))  DEALLOCATE(ANGBUF)
d110 2
a111 1
        END
d113 1
d118 1
a118 1
        SUBROUTINE  GPRJ3(NS,X,VO,LSD,N,N2,ANGBUF,MAXKEY,ISELECT,NANG)
a122 2
        INTEGER, DIMENSION(MAXKEY)          :: ISELECT
        REAL,    DIMENSION(3,MAXKEY)        :: ANGBUF
d125 2
d128 2
a129 2
        REAL, DIMENSION(:,:,:), ALLOCATABLE :: PROJ
        COMPLEX, DIMENSION(:,:), ALLOCATABLE :: FPROJ1
d133 1
a133 1
 	DOUBLE  PRECISION  QUADPI,DGR_TO_RAD
d136 1
a136 3
        CHARACTER*80      FINPIC,FINPAT
        COMMON  /F_SPEC/  FINPAT,NLET,FINPIC
        CHARACTER(LEN=80)   ::  FINP
d141 1
a141 2
        DATA  INPAT/99/
	PARAMETER (QUADPI = 3.141592653589793238462643383279502884197D0)
d143 4
a146 2
        PARAMETER  (DGR_TO_RAD = (QUADPI/180))
C K=6
d150 4
a153 3
C  Kaiser-Bessel window according to Schomberg
C  M is NSAM, N is 2*NSAM
C  M=NS, N=N
d156 2
a157 1
C  Adjust V to make sure that it is not zero at the window border
d167 1
a167 1
cc$omp parallel do private(i,s,x),shared(mmm)
d171 1
a171 1
	      XX = SQRT(1.0-(S/VADJUST)**2)
a177 1

d181 7
a187 3
     &		 PROJ(NS,NS,NUMTH),BI(0:N2,N,NUMTH),STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'BP 3F, W,PROJ,BI',IER)
a189 7
        ALLOCATE (VIN(0:N2,N,N),STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'BP 3F, W,PROJ,BI',IER)
           RETURN
        ENDIF


d191 11
a201 13
c	VIN=CMPLX(0.0,0.0)
c	CALL SETX(VIN,N)
C  Prepare input volume
	   CALL DIVKB3(VO,NS)
	   CALL PAD3_3(VIN,N+2,N,VO,NS)

           INV = +1
           CALL FMRS_3(VIN,N,N,N,INV)

           DO  L=1,N
            DO  J=1,N
              DO  I=0,N2
                 VIN(I,J,L)=VIN(I,J,L)*(-1)**(I+J+L)
d204 4
a207 3
           ENDDO
C SHIFT THE ORIGIN OF THE FT FROM (0,0) TO (0,int(N/2)+1=N2+1)
	  DO  L=1,N
d209 3
a211 3
             FPROJ1(:,1)=VIN(:,J,L)
             VIN(:,J,L)=VIN(:,J+N2,L)
             VIN(:,J+N2,L)=FPROJ1(:,1)
d213 7
a219 6
          ENDDO
	  DO  J=1,N
           DO  L=1,N2
             FPROJ1(:,1)=VIN(:,J,L)
             VIN(:,J,L)=VIN(:,J,L+N2)
             VIN(:,J,L+N2)=FPROJ1(:,1)
d221 1
a221 1
          ENDDO
d223 8
a230 8
C        GET FINPAT TEMPLATE ONLY (NOT ILIST)
         NMAX = 0
         CALL  FILSEQP(FINPAT,NLET,ILIST,NMAX,NIMA,
     &        'ENTER TEMPLATE FOR 2-D PROJECTION',IRTFLG)

         IFORM = 1
         NSL   = 1
	 NP2=N+2 
d232 2
a233 2
         IANG  = 1
         DO WHILE (IANG .LE. NANG)
d235 1
d237 5
a241 2
           DO I=IANG,NEEDED
            IFILE  = ISELECT(I)
d243 11
a253 11
        CALL  EXTRACTPLANE(N,N2,BI(0,1,I-IANG+1),VIN,
     &		ANGBUF(3,IFILE),ANGBUF(2,IFILE),ANGBUF(1,IFILE))
C SHIFT THE ORIGIN OF THE FT FROM (0,int(N/2)+1=N2+1) TO (0,0)
           DO  J=1,N2
             FPROJ1(:,I-IANG+1)=BI(:,J,I-IANG+1)
             BI(:,J,I-IANG+1)=BI(:,J+N2,I-IANG+1)
             BI(:,J+N2,I-IANG+1)=FPROJ1(:,I-IANG+1)
           ENDDO
            DO  J=1,N
              DO  JX=0,N2
                 BI(JX,J,I-IANG+1)=BI(JX,J,I-IANG+1)*(-1)**(JX+J+1)
d255 6
a260 5
            ENDDO
           INV = -1
           CALL FMRS_2(BI(0,1,I-IANG+1),N,N,INV)
	   CALL WIN2_2(BI(0,1,I-IANG+1),NP2,N,PROJ(1,1,I-IANG+1),NS)
	  ENDDO
d276 1
d290 5
a294 4
999     CONTINUE
        IF (ALLOCATED(PROJ))     DEALLOCATE (PROJ)
        IF (ALLOCATED(BI))       DEALLOCATE (BI)
        IF (ALLOCATED(FPROJ1))   DEALLOCATE (FPROJ1)
d298 1
a298 1
C___________________WIN2_2___________________________________________________
d305 2
a306 2
        IP = (N-NS)/2+MOD(NS,2)
	V = X(IP+1:IP+NS,IP+1:IP+NS)
d310 2
a311 1
C___________________PAD3_3___________________________________________________
d317 2
a318 2
	X=0.0
        IP = (N-NS)/2+MOD(NS,2)
d320 4
a323 4
	DO  K=1,NS
	   DO  J=1,NS
	      DO  I=1,NS
	         X(IP+I,IP+J,IP+K)=V(I,J,K)
d336 1
a336 1
	PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
d339 3
a341 3
C       M is NSAM
	ICENT=INT(M/2)+1
	WKB0=SINH(TWOPI*ALPHA*RRR*V)/(TWOPI*ALPHA*RRR*V)
d344 9
a352 8
	   TTT=REAL(IABS(K-ICENT))/RRR
	   IF(TTT.EQ.0.0)  THEN
	      WKBK=1.0
	   ELSEIF(TTT.LT.ALPHA)  THEN
	      XX=SQRT(1.0-(TTT/ALPHA)**2)
	      WKBK=SINH(TWOPI*ALPHA*RRR*V*XX)/(TWOPI*ALPHA*RRR*V*XX)/WKB0
	   ELSEIF(TTT.EQ.ALPHA)  THEN
	       WKBK=1.0/WKB0
d354 3
a356 2
	       XX=SQRT((TTT/ALPHA)**2-1.0)
	       WKBK=SIN(TWOPI*ALPHA*RRR*V*XX)/(TWOPI*ALPHA*RRR*V*XX)/WKB0
d359 9
a367 8
	      TTT=REAL(IABS(J-ICENT))/RRR
	      IF(TTT.EQ.0.0)  THEN
	         WKBJ=1.0
	      ELSEIF(TTT.LT.ALPHA)  THEN
	         XX=SQRT(1.0-(TTT/ALPHA)**2)
	         WKBJ=SINH(TWOPI*ALPHA*RRR*V*XX)/(TWOPI*ALPHA*RRR*V*XX)/WKB0
	      ELSEIF(TTT.EQ.ALPHA)  THEN
	         WKBJ=1.0/WKB0
d369 3
a371 2
	         XX=SQRT((TTT/ALPHA)**2-1.0)
	         WKBJ=SIN(TWOPI*ALPHA*RRR*V*XX)/(TWOPI*ALPHA*RRR*V*XX)/WKB0
d374 9
a382 8
	         TTT=REAL(IABS(I-ICENT))/RRR
	         IF(TTT.EQ.0.0)  THEN
	            WKBI=1.0
	         ELSEIF(TTT.LT.ALPHA)  THEN
	            XX=SQRT(1.0-(TTT/ALPHA)**2)
	            WKBI=SINH(TWOPI*ALPHA*RRR*V*XX)/(TWOPI*ALPHA*RRR*V*XX)/WKB0
	         ELSEIF(TTT.EQ.ALPHA)  THEN
	            WKBI=1.0/WKB0
d384 3
a386 2
	            XX=SQRT((TTT/ALPHA)**2-1.0)
	            WKBI=SIN(TWOPI*ALPHA*RRR*V*XX)/(TWOPI*ALPHA*RRR*V*XX)/WKB0
d388 1
a388 1
	         X(I,J,K) = X(I,J,K)/ABS(WKBI*WKBJ*WKBK)
d393 270
@

