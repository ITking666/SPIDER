head	1.15;
access;
symbols
	pre_getangas:1.14
	GPL2010:1.14
	pre_GPL2010:1.13
	pre_var_equation:1.13
	pre_fftwrings:1.13
	pre_opfiles:1.13
	src:1.13
	best-code:1.13
	named-reg:1.12
	x-named-regs:1.11
	x:1.11
	v13-00:1.11
	pre_GPL:1.9
	prec_CA:1.9
	noindx:1.9
	Bproc:1.7
	oct21:1.6
	last77:1.4;
locks; strict;
comment	@c @;


1.15
date	2015.12.10.14.40.56;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2010.06.24.13.25.33;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.23.15.58.34;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.12.15.27.08;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.17.19.55.59;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.17.17.52.40;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.19.16.01.55;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.26.21.16.22;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.08.18.14.16;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.09.28.15.17.51;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.09.15.14.55.29;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.02.04.14.53.37;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	98.03.31.14.34.52;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	97.10.14.15.25.06;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.48.34;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.15
log
@detab
@
text
@
C++*********************************************************************
C
C EXPRQ.F           ADAPTED FROM EXPR.FOR FOR CHAR.  AUG 89 ArDean Leith
C                   INDEXTOREG CHANGED TO SUBROUTINE MAR 01 ArDean Leith
C                   REG_GET                          JAN 06 ArDean Leith
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C    EXPRQ(OLDSTR,NCHAR,VALUE,IRTFLG)
C
C    PURPOSE:    SUBROUTINE TO EVALUATE GENERAL ARITHMETIC EXPRESSION
C
C    PARAMETERS:  OLDSTR     INPUT STRING                   (SENT)
C                 NCHAR      LENGTH OF INPUT STRING         (SENT)
C                 VALUE      VALUE OF EXPRESSION            (RETURNED)
C                 IRTFLG     ERROR FLAG                     (RETURNED)
C
C **********************************************************************

        SUBROUTINE EXPRQ(OLDSTR,NCHAR,VALUE,IRTFLG)

        CHARACTER(LEN=*)    :: OLDSTR
        CHARACTER(LEN=80)   :: NEWSTR
        CHARACTER(LEN=4)    :: CREG
        LOGICAL             :: ISCHAR

C       SET DEFAULT RETURN VALUES
        IRTFLG = 0
        VALUE = 0.0

C       REMOVE ALL BLANKS FROM OLDSTR
        CALL SHRINKQ(OLDSTR(1:NCHAR),NCHAR,NEWSTR,L2)

        IF (NCHAR .EQ. 1 .AND. ISCHAR(NEWSTR(1:1))) THEN

C          EXPRESSION HAS LENGTH 1, AND IT'S NOT A NUMBER, INTERPRET
C          AS A OLD-STYLE DO-LOOP INDEX - EVALUATE IT!
           CALL REG_GET(0,0,CXREG,VALUE,LOOPREG,IRTFLG)
CC         CALL REG_GET_VAR(0,NEWSTR(1:1),.TRUE.,VALUE,LOOPREG,IENDVAR,IERR)
           IF (VALUE .EQ. 0) IRTFLG = -1

        ELSEIF ((NEWSTR(:1) .EQ. 'P' .OR. NEWSTR(:1) .EQ. 'p')
     &         .AND. NCHAR .LE. 3) THEN

C          EXPRESSION STARTS WITH 'P', AND HAS LENGTH 2 OR 3, IT IS A
C          OBSOLETE SYMBOLIC REFERENCE (P1)!
           IRTFLG = -1

        ELSE
C          IF NONE OF ABOVE APPLIES, HAVE TRUE ARITHMETIC EXPRESSION!
           ILEVEL = 0
           CALL EVALNQ(ILEVEL,NEWSTR,NCHAR,VALUE,IRTFLG)
        ENDIF

        RETURN
        END
@


1.14
log
@GPL_2010
@
text
@d41 1
a41 1
	SUBROUTINE EXPRQ(OLDSTR,NCHAR,VALUE,IRTFLG)
d49 2
a50 2
	IRTFLG = 0
	VALUE = 0.0
d53 1
a53 1
	CALL SHRINKQ(OLDSTR(1:NCHAR),NCHAR,NEWSTR,L2)
d55 1
a55 1
	IF (NCHAR .EQ. 1 .AND. ISCHAR(NEWSTR(1:1))) THEN
d76 2
a77 2
	RETURN
	END
@


1.13
log
@index reg case parsing fixed
@
text
@a8 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d10 5
a14 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d16 1
a16 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d23 1
a23 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a24 1
C=*                                                                    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.12
log
@native named registers
@
text
@d4 3
a6 2
C EXPRQ.F           ADAPTED FROM EXPR.FOR FOR CHAR.  AUG 89 al
C                   INDEXTOREG CHANGED TO SUBROUTINE MAR 01 al
d50 1
d59 1
a59 1
	IF (NCHAR .EQ. 1 .AND. NEWSTR(:1) .GE. 'A') THEN
d63 2
a64 2
           CREG = '[_' // NEWSTR(:1) // ']'
           CALL REG_GET_VAR(0,CREG,.TRUE.,VALUE,LOOPREG,IENDVAR,IERR)
@


1.11
log
@GPL License fixed
@
text
@d33 1
a33 1
C    EXPRQ(OLDSTR,NCHAR,VALUE,IFLAG)
d40 1
a40 1
C                 IFLAG      ERROR FLAG                     (RETURNED)
d44 1
a44 1
	SUBROUTINE EXPRQ(OLDSTR,NCHAR,VALUE,IFLAG)
d46 3
a48 2
        CHARACTER *(*) OLDSTR
        CHARACTER *80  NEWSTR
d51 1
a51 1
	IFLAG = 0
d61 3
a63 3
           CALL INDEXTOREG(NEWSTR(:1),.TRUE.,IDUM,IVALUE)
           VALUE = IVALUE
           IF (VALUE .EQ. 0) IFLAG = -1
d65 2
a66 1
        ELSEIF (NEWSTR(:1) .EQ. 'P' .AND. NCHAR .LE. 3) THEN
d70 1
a70 1
           IFLAG = -1
d74 2
a75 1
           CALL EVALNQ(NEWSTR,NCHAR,VALUE,IFLAG)
@


1.10
log
@HRI GPL License used
@
text
@a2 1
C++**********************************************************************
a7 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d11 1
a11 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a30 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a42 1
C **************************************************************************
@


1.9
log
@CALL INDEXTOREG used insteak of function.
@
text
@d2 1
d10 24
d50 1
@


1.8
log
@indextoreg parameters
@
text
@d4 2
a5 1
C EXPRQ.F                     ADAPTED FROM EXPR.FOR FOR CHAR. AUG 89 al
d7 8
a14 9
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d39 1
a39 1
	IF( NCHAR .EQ. 1 .AND. NEWSTR(:1) .GE. 'A') THEN
d43 2
a44 1
           VALUE = INDEXTOREG(NEWSTR(:1),.TRUE.,IDUM)
d50 1
a50 2
C          SYMBOLIC REFERENCE - GET IT!
C          CURRENTLY NOT IMPLEMENTED
d54 1
a54 1
C          IF NONE OF ABOVE APPLIES, WE HAVE A TRUE ARITHMETIC EXPRESSION!
@


1.7
log
@changes for reg_set
@
text
@d43 1
a43 1
           VALUE = INDEXTOREG(NEWSTR(:1),IDUM)
@


1.6
log
@*** empty log message ***
@
text
@a31 9
C       MAXPARAM: NUMBER OF PARAMETER REGISTERS IN PARAM COMMON
C       REGISTERS 104...129 USED FOR OLD STYLE DO INDEX COUNTERS
        PARAMETER (MAXPARAM=129)

C       MAXPARAMSEL: NUMBER OF SELECTED  REGISTERS IN PARAM COMMON
        PARAMETER (MAXPARAMSEL=20)

        COMMON /PARAM/ PARAM(MAXPARAM),NSEL(MAXPARAMSEL)

d39 1
a39 18
	IF (L2 .LE. 3 .AND. NEWSTR(1:1) .EQ. 'X') THEN
C          EXPRESSION STARTS WITH 'X' AND HAS LENGTH 2 OR 3, IT CONSISTS
C          OF A SINGLE REGISTER - EVALUATE
           IF (NCHAR .EQ. 2) THEN
              READ(NEWSTR(2:2),605,IOSTAT=IER) ITEMP
605           FORMAT(I1)
           ELSE
              READ(NEWSTR(2:3),606,IOSTAT=IER) ITEMP
606           FORMAT(I2)
           ENDIF
           IF (IER .NE. 0) THEN
C             ERROR CONVERTING REGISTER TO INTEGER
              IFLAG = -1
              RETURN
           ENDIF
           VALUE = PARAM(ITEMP+1)

        ELSEIF( NCHAR .EQ. 1 .AND. NEWSTR(:1) .GE. 'A') THEN
@


1.5
log
@loop index converted to register
@
text
@d69 1
a69 1
           VALUE = INDEXTOREG(TCHAR,IDUM)
@


1.4
log
@CNO_SAVE
@
text
@a28 2
CNO_SAVE 

d32 6
a37 2
	COMMON /DOLOOP/IALPHA(26)
	COMMON /PARAM/ PARAM(103),NSEL(20)
d39 2
d68 3
a70 5
C          AS A DO-LOOP INDEX - EVALUATE IT!

           IDX   = ICHAR(NEWSTR(1:1)) - 64
           VALUE = IALPHA(IDX)
           IF (IALPHA(IDX) .EQ. 0) IFLAG = -1
@


1.3
log
@removed unused code, comments improved
@
text
@d29 2
@


1.2
log
@f90
@
text
@d16 1
a16 1
C    EXPRQ(OLDSTR,L,VALUE,IFLAG)
d20 5
d27 1
a27 1
	SUBROUTINE EXPRQ(OLDSTR,L1,VALUE,IFLAG)
a30 5
        CHARACTER      CCHAR
        LOGICAL * 1    BYTSTR(80)
        LOGICAL * 1    BCHAR
        EQUIVALENCE    (BCHAR,CCHAR)
        LOGICAL        DEBUG
a31 1
	COMMON /UNITS/ LUN,NIN,NOUT
d33 1
a33 1
	COMMON /PARAM/ PARAM(103),NSEL(10)
d35 1
d39 2
a40 10
	CALL SHRINKQ(OLDSTR(1:L1),L1,NEWSTR,L2)

C**********************************88
C        DEBUG = .FALSE.
C        IF (NEWSTR(1:1) .EQ. '4' ) DEBUG = .TRUE.
C        DO 1 I=1,L2
C           CCHAR = NEWSTR(I:I)
C           BYTSTR(I) = BCHAR
C1       CONTINUE
C******************************
d45 3
a47 3
           IF (L1 .EQ. 2) THEN
             READ(NEWSTR(2:2),605,IOSTAT=IER) ITEMP
605          FORMAT(I1)
d49 2
a50 2
             READ(NEWSTR(2:3),606,IOSTAT=IER) ITEMP
606          FORMAT(I2)
d57 1
a57 1
           VALUE=PARAM(ITEMP+1)
d59 1
a59 1
        ELSEIF( L1 .EQ. 1 .AND. NEWSTR(:1) .GE. 'A') THEN
d68 1
a68 1
        ELSEIF (NEWSTR(:1) .EQ.'P' .AND. L1 .LE. 3) THEN
d76 2
a77 6
C          IF NONE OF THE ABOVE APPLIES, WE HAVE A TRUE ARITHMETIC EXPRESSION!
C           IF (DEBUG) THEN
C             CALL EVALN(BYTSTR,L1,VALUE,IFLAG)
C           ELSE
             CALL EVALNQ(NEWSTR,L1,VALUE,IFLAG)
C           ENDIF
@


1.1
log
@Initial revision
@
text
@d4 1
a4 2
C $$ EXPRQ.FOR
C                  ADAPTED FROM EXPR.FOR FOR CHAR. AUG 89 al
d16 1
a16 1
C $$ EXPRQ(OLDSTR,L,VALUE,IFLAG)
d27 2
a28 2
        BYTE           BYTSTR(80)
        BYTE           BCHAR
@
