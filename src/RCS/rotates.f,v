head	1.15;
access;
symbols
	pre_mrcs:1.15
	healthdept_2018:1.15;
locks; strict;
comment	@c @;


1.15
date	2018.10.03.14.34.15;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2014.01.27.17.12.44;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2013.12.03.14.38.18;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2012.09.07.13.26.14;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2012.06.13.13.45.25;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2012.04.30.13.00.34;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2012.01.03.15.03.03;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2011.12.29.17.46.20;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2011.12.29.17.45.21;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2011.12.08.17.10.36;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.19.14.53.15;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.12.15.16.14;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2011.10.06.16.05.31;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2011.10.05.15.49.59;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.05.13.05.59;	author leith;	state Exp;
branches;
next	;


desc
@@


1.15
log
@email_health_dept
@
text
@C++*********************************************************************
C                                                                      *
C  ROTATES.F   NEW                               SEP 2011 ARDEAN LEITH *  
C              FBS VOLUME INTERP                 OCT 2011 ARDEAN LEITH *
C              ROT2QS --> RTSQ RENAMED           DEC 2011 ARDEAN LEITH *
C              NSAM --> NX                       JAN 2012 ARDEAN LEITH *
C              ROT3L CALL ADDED                  JAN 2012 ARDEAN LEITH *
C              ROT 2D BUG                        JUN 2012 ARDEAN LEITH *
C              ROTATESZ FBS BUF BUG              SEP 2012 ARDEAN LEITH *
C              ROT32 IOFF BUG                    DEC 2013 ARDEAN LEITH *
C ********************************************************************** 
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2014  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C ********************************************************************** 
C 
C  ROTATES ()
C
C  CALLS:
C
C  For images (Linear Interp)
C    ROT32(LUN1,LUN2,NX,IREC1,IREC2,1,TH,BACK,SHX,SHY) 
C  For images (Quadratic Interp)
C    RTSQ(BUF,BUFLIN, NX,NY, THETA,SCLI,SHXI,SHYI, IREC1,LUN2)
C  For images (FBS Interp)
C    RTSF(BUF,BUF2, NXLD,NX,NY, THETA,SCLI,SHXI,SHYI, IRTFLG)
C
C  For volumes (All)
C    ROTATES3(LUN1,LUN2, NX,NY,NZ, ANGLE, THETA,PHI,PSI, 
C           MODE, NCX,NCY,NCZ,  P1,P2,INTERPC, BACKC,BACK,IRTFLG)
C
C  For volumes around point (Linear Interp)
C    ROTATES3L(LUN2,BUF,KLX,KNX,KLY,KNY,KLZ,KNZ, DRM, BACKC,BACK)
C  For volumes around point (Quadratic Interp)
C    ROTATES3Q(LUN2,Q1,KLX,KNX,KLY,KNY,KLZ,KNZ, DRM, BACKC,BACK) 
C  For volumes around point (FBS Interp)
C    ROTATES3FBS(LUN2,BUF,KLX,KNX,KLY,KNY,KLZ,KNZ,
C             DRM,USEBACK,BACK,IRTFLG)
C
C  For volumes around line (Quadratic Interp)
C    ROTATESL3Q(LUN2,BUF,NX,NY,NZ,P1,P2,ANGLE, BACKC,BACK)
C  For volumes around line (Linear Interp)
C
C23456789 123456789 123456789 123456789 123456789 123456789 123456789 12 
C--********************************************************************* 

      SUBROUTINE ROTATES() 

      IMPLICIT NONE
      INCLUDE 'CMBLOCK.INC' 
      INCLUDE 'CMLIMIT.INC' 

      CHARACTER (LEN=MAXNAM) :: FILNAM,BACKC,BACKTIL 
      CHARACTER (LEN=1)      :: CDUM,NULL,MODE,INTERPC 
      CHARACTER (LEN=40 )    :: MSG 

      REAL                   :: AV1,FMAX1,FMIN1
      REAL                   :: BACK,SHX,SHY
      REAL                   :: PHI,THETA,PSI,ANGLE
      REAL                   :: P1(3),P2(3)

      INTEGER                :: ICOMM,MYPID,MPIERR
      INTEGER                :: MAXIM1,MAXIM2,IRTFLG
      INTEGER                :: NX,NY,NZ,ITYPE,NLET,NOT_USED
      INTEGER                :: IREC1,IREC2,NXLD,IRECOFF
      INTEGER                :: IMAMI1,ISLICE,NCX,NCY,NCZ,IDUM,MWANT
      REAL                   :: TH
      DOUBLE PRECISION       :: DRM(3,3)
      LOGICAL                :: USEBACK

      REAL,    ALLOCATABLE   :: BUFLIN(:),BUF(:,:),BUF2(:,:)

      INTEGER,PARAMETER      :: LUN1 = 50 
      INTEGER,PARAMETER      :: LUN2 = 51 

C     DATA FUNC/ '14'/ ROT

      CALL SET_MPI(icomm,mypid,mpierr)  ! SET MYPID

      NULL   = CHAR(0)
      MODE   = FCHAR(4:4)

C     OPEN INPUT FILE 
      MAXIM1 = 0 
      CALL OPFILEC(0,.TRUE.,FILNAM,LUN1,'O',ITYPE,
     &             NX,NY,NZ, 
     & 		   MAXIM1,'INPUT',.FALSE.,IRTFLG) 
      IF (IRTFLG .NE. 0) GOTO 9999 
 
      IF (IMAMI == 0) CALL NORM3(LUN1,NX,NY,NZ,FMAX,FMIN,AV) 
C     RECORD INPUT IMAGE  AVERAGE IN CASE NEEDED FOR BACKGROUND 
      AV1    = AV 
      FMAX1  = FMAX 
      FMIN1  = FMIN 
      IMAMI1 = IMAMI 

C     OPEN OUTPUT FILE WITH SAME DIMENSIONS AS INPUT FILE 
      MAXIM2 = 0 
      CALL OPFILEC(LUN1,.TRUE.,FILNAM,LUN2,'U',ITYPE,
     &             NX,NY,NZ, 
     &             MAXIM2,'OUTPUT',.FALSE.,IRTFLG) 
      IF (IRTFLG .NE. 0) GOTO 9999 

 
      IF (ITYPE == 1) THEN 
C        INPUT IMAGE ------------------------------------------ IMAGE

C        SET ROTATION ANGLE 
         CALL RDPRM1S(ANGLE,NOT_USED,'ROTATION ANGLE',IRTFLG) 
         TH = ANGLE * DATAN(1.0D0) / 45.0D0

C        SET ROTATION CENTER (ARBITRARY)
         SHX = 0.0 
         SHY = 0.0 

         IF (FCHAR(4:4) == 'A') THEN 
C           ROTATE AROUND AN ARBITRARY CENTER  
            CALL RDPRM2S(SHX,SHY,NOT_USED,
     &                   'X & Y CENTER OFFSETS',IRTFLG) 
            IF (IRTFLG .NE. 0) GOTO 9999 
         ENDIF 

C        SET INTERPOLATION TYPE 
         CALL RDPRMC(INTERPC,NLET,.TRUE.,
     &       'LINEAR, QUADRATIC, OR FBS INTERPOLATION (L,Q,F)',
     &               NULL,IRTFLG)
         IF (IRTFLG .NE. 0) GOTO 9999 
 


         IF ((INTERPC .NE. 'L') .AND. 
     &       (INTERPC .NE. 'Q') .AND. 
     &       (INTERPC .NE. 'F')) THEN
C                      123456789 1123456789 23456789 
                MSG = 'UNKNOWN INTERPOLATION TYPE: ' // INTERPC
                CALL ERRT(101,MSG,IDUM)
            GOTO 9999
         ENDIF

C        SET BACKGROUND VALUE 
         CALL RDPRMC(BACKC,NLET,.TRUE.,
     &        'UNROTATED, AVG, MIN, OR SPECIFIED CORNERS (U,A,M,2.5)',
     &         NULL,IRTFLG)
         IF (IRTFLG .NE. 0) GOTO 9999 

         BACK = HUGE(BACK)
         IF (INDEX(BACKC(1:NLET),'A') > 0) BACK = AV1
         IF (INDEX(BACKC(1:NLET),'M') > 0) BACK = FMIN1
         IF (INDEX(BACKC(1:NLET),'U') > 0) BACK = 0.0 ! UNUSED
        
         IF (BACK == HUGE(BACK)) THEN
            BACKTIL = '~' // BACKC(1:NLET)
            CALL RDPRM1S(BACK,NOT_USED,BACKTIL,IRTFLG) 
            IF (IRTFLG .NE. 0) GOTO 9999 
         ENDIF
         USEBACK = (BACKC(1:1) .NE. 'U')

         IF (INTERPC == 'Q' ) THEN
            ALLOCATE(BUF(NX,NY),BUFLIN(NX), STAT=IRTFLG)
            IF (IRTFLG .NE. 0) THEN 
               MWANT = NX + NX*NY*NZ
               CALL ERRT(46,'ROTATES; BUF',MWANT)
               GOTO 9999
            ENDIF  
         ELSEIF (INTERPC == 'F' ) THEN
            NXLD   = NX + 2 - MOD(NX,2)
            ALLOCATE (BUF(NXLD, NY),BUF2(NX,NY), STAT=IRTFLG)
            IF (IRTFLG .NE. 0) THEN 
               MWANT = NXLD*NY + NX*NY 
               CALL ERRT(46,'ROTATES; BUF..',MWANT)
               GOTO 9999
            ENDIF  
         ENDIF

C       ROTATE IMAGE IN-CORE 

        IF (INTERPC == 'L')     THEN
C          LINEAR INTERP ('RT') 

C          READS OWN IMAGE IN ROT32 WRITES OUTPUT IMAGE
           CALL ROT32(LUN1,LUN2,NX, 1,NY,1,
     &                TH,BACK,SHX,SHY,0)

        ELSEIF (INTERPC == 'Q') THEN
C          QUADRATIC INTERP ('RT SQ') 

C          LOAD IMAGE INTO BUF
           CALL REDVOL(LUN1,NX,NY, 1,1, BUF,IRTFLG)

C          ROTATE WITH RTSQ AND WRITE OUTPUT IMAGE
     	   CALL RTSQ_BACK(BUF,BUFLIN, NX,NY,
     &                    ANGLE, 1.0,0.0,0.0, 
     &                    USEBACK,BACK, 0,LUN2)

        ELSEIF (INTERPC == 'F') THEN
C          FBS INTERP ('RT SF') 

C          LOAD INTO FFT X PADDED BUF
           CALL READV(LUN1,BUF,NXLD,NY, NX,NY,1)

C          ROTATE WITH RTSF 
           CALL RTSF_BACK(BUF,BUF2, NXLD, NX, NY, 
     &                   ANGLE, 1.0,0.0,0.0, 
     &                   USEBACK,BACK, IRTFLG)

C          WRITE UNPADDED OUTPUT IMAGE
           CALL WRITEV(LUN2,BUF2,NX,NY,NX,NY,1)
         ENDIF 

      ELSE

C        INPUT VOLUME ------------------------------------------ VOLUME
 
         IF (MODE == 'L' ) THEN
C           ROTATE VOLUME AROUND LINE, GET ANGLE

            ANGLE = 0.0
            CALL RDPRM1S(ANGLE,NOT_USED,
     &                  'ROTATION ANGLE',IRTFLG)
            IF (IRTFLG .NE. 0) RETURN

C           GET LINE 
            P1(1) = NX   / 2 + 1
            P1(2) = NY   / 2 + 1
            P1(3) = 1
            CALL  RDPRM3S(P1(1),P1(2),P1(3),NOT_USED,
     &           'X, Y, & Z FOR FIRST  POINT ON ROTATION AXIS',
     &           IRTFLG)
            IF (IRTFLG .NE. 0)  GOTO 9999

            P2(1) = NX   / 2 + 1
            P2(2) = NY   / 2 + 1
            P2(3) = NZ  
            CALL  RDPRM3S(P2(1),P2(2),P2(3),NOT_USED,
     &           'X, Y, & Z FOR SECOND POINT ON ROTATION AXIS',
     &           IRTFLG)
            IF (IRTFLG .NE. 0)  GOTO 9999

            CALL RDPRMC(INTERPC,NLET,.TRUE.,
     &           'LINEAR OR QUADRATIC INTERPOLATION (L,Q)',
     &            NULL,IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 9999
 
            IF (INTERPC .NE. 'L' .AND. 
     &          INTERPC .NE. 'Q') THEN
C                      123456789 1123456789 23456789 
                MSG = 'UNKNOWN INTERPOLATION TYPE: ' // INTERPC
                CALL ERRT(101,MSG,IDUM)
               GOTO 9999
            ENDIF

         ELSE
C           ROTATE VOLUME BY EULER ANGLES  

C           GET EULER ANGLES
            PHI   = 0.0
            THETA = 0.0
            PSI   = 0.0
            ANGLE = 0.0

            CALL RDPRM3S(PHI,THETA,PSI,NOT_USED,
     &                  'ROTATION ANGLES (PHI, THETA, & PSI)',IRTFLG)
            IF (IRTFLG .NE. 0) RETURN

            IF (MODE == 'A' ) THEN
               CALL RDPRI3S(NCX,NCY,NCZ,NOT_USED,
     &                 'X, Y & Z FOR CENTER OF ROTATION',IRTFLG)
               IF (IRTFLG .NE. 0) GOTO 9999
            ENDIF

            CALL RDPRMC(INTERPC,NLET,.TRUE.,
     &           'TRI- LINEAR, QUADRATIC  OR FBS INTERPOLATION (L,Q,F)',
     &            NULL,IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 9999 
            IF (INTERPC .NE. 'L' .AND. 
     &          INTERPC .NE. 'Q' .AND.
     &          INTERPC .NE. 'F') THEN
C                      123456789 1123456789 23456789 
                MSG = 'UNKNOWN INTERPOLATION TYPE: ' // INTERPC
                CALL ERRT(101,MSG,IDUM)
               GOTO 9999
            ENDIF
         ENDIF 

         !write(6,*) ' mode & fcahr:',MODE,INTERPC

         IF (MODE .NE. 'L' .OR. INTERPC .NE. 'L') THEN
C           SET BACKGROUND VALUE 
            CALL RDPRMC(BACKC,NLET,.TRUE.,
     &         'UNROTATED, AVG, MIN, OR SPECIFIED CORNERS (U,A,M,2.5)',
     &            NULL,IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 9999 

            BACK = HUGE(BACK)
            IF (BACKC(1:1) == 'U')            BACK = 0.0 !(unused)
            IF (INDEX(BACKC(1:NLET),'A') > 0) BACK = AV1
            IF (INDEX(BACKC(1:NLET),'M') > 0) BACK = FMIN1

            IF (BACK == HUGE(BACK)) THEN
               BACKTIL = '~' // BACKC(1:NLET)
               CALL RDPRM1S(BACK,NOT_USED,BACKTIL,IRTFLG) 
               IF (IRTFLG .NE. 0) GOTO 9999 
            ENDIF
         ENDIF

         IF ((MODE .NE. 'L') .AND.
     &        PHI .NE. 0 .AND. THETA == 0.0 .AND. PSI == 0) THEN
            !write(6,*) '  Using rotatesz:',interpc,useback,back

            SHX     = 0.0 
            SHY     = 0.0 
            ANGLE   = PHI
            USEBACK = (BACKC(1:1) .NE. 'U')

            CALL ROTATESZ(LUN1,LUN2, NX,NY,NZ,
     &                    ANGLE, SHX,SHY,
     &                    INTERPC,USEBACK, BACK,   
     &                    IRTFLG) 
         ELSE

            CALL ROTATES3(LUN1,LUN2, NX,NY,NZ,
     &                    ANGLE, THETA,PHI,PSI, 
     &                    MODE,  NCX,NCY,NCZ,  P1,P2,
     &                    INTERPC, BACKC,BACK,IRTFLG)
         ENDIF
      ENDIF

9999  CONTINUE

C     SET HEADER FOR ALTERATIONS IN IMAGE DUE TO OPERATIONS 
      CALL SETPRMB(LUN2, 0.0,0.0, 0.0,0.0) 

      IF (ALLOCATED(BUF))    DEALLOCATE(BUF)
      IF (ALLOCATED(BUF2))   DEALLOCATE(BUF2)
      IF (ALLOCATED(BUFLIN)) DEALLOCATE(BUFLIN)

9998  CLOSE(LUN1)
      CLOSE(LUN2)

      END


C     -------------  ROTATES3 ----------------------- ROTATES3

        SUBROUTINE ROTATES3(LUN1,LUN2,NX,NY,NZ,
     &                       ANGLE, THETA,PHI,PSI, 
     &                       MODE,   NCX,NCY,NCZ,  P1,P2,
     &                       INTERPC, BACKC,BACK,IRTFLG) 

        IMPLICIT NONE    
        INCLUDE 'CMBLOCK.INC'
  
        INTEGER           :: LUN1,LUN2,NX,NY,NZ
        REAL              :: ANGLE, THETA,PHI,PSI 
        CHARACTER(LEN=1)  :: MODE,INTERPC,BACKC
        INTEGER           :: NCX,NCY,NCZ 
        REAL              :: P1(3),P2(3)
        REAL              :: BACK 
        INTEGER           :: IRTFLG 

        REAL, ALLOCATABLE :: BUF(:,:,:)
        INTEGER           :: KNX,KNY,KNZ,KLX,KLY,KLZ
        INTEGER           :: I
        DOUBLE PRECISION  :: DRM(3,3)
        LOGICAL           :: USEBACK


C       3-D  ROTATION
        USEBACK = (BACKC(1:1) .NE. 'U')

        !write(6,*) ' In rotates3a; mode & interpc:',mode,interpc

        ALLOCATE (BUF(NX,NY,NZ), STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN 
           CALL ERRT(46,'ROTATES3A, BUF',NX*NY*NZ)
           RETURN
        ENDIF

        CALL REDVOL(LUN1,NX,NY,1,NZ,BUF,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        IF (MODE == 'A')  THEN
C          USER SPECIFIES CENTER OF ROTATION
           KNX = NX - NCX
           KNY = NY - NCY
           KNZ = NZ - NCZ

           KLX = -NCX + 1
           KLY = -NCY + 1
           KLZ = -NCZ + 1

C          CALCULATE ROTATION MATRIX
           CALL BLDR(DRM,PSI,THETA,PHI)

           !write(6,*) ' specified rotation center:',PSI,THETA,PHI

        ELSEIF (MODE .NE. 'L') THEN
C          DEFAULT IS SPIDER CENTER OF ROTATION
           KNX = NX   / 2 - 1 + MOD(NX,2)
           KNY = NY   / 2 - 1 + MOD(NY,2)
           KNZ = NZ / 2 - 1 + MOD(NZ,2)

           KLX = -NX   / 2
           KLY = -NY   / 2
           KLZ = -NZ / 2

C          CALCULATE ROTATION MATRIX
           CALL BLDR(DRM,PSI,THETA,PHI)
           !write(6,*) ' spider rotation center:',PSI,THETA,PHI
        ENDIF

        IF ((MODE == 'L' .AND. ANGLE == 0.0) .OR.
     &     (THETA == 0.0 .AND. PHI   == 0.0 .AND. PSI == 0.0)) THEN
C          NO ROTATION NEEDED
           !write(6,*) ' Calling wrtvol:',psi,theta,phi
           CALL WRTVOL(LUN2,NX,NY,1,NZ,BUF,IRTFLG)
           IRTFLG = 0

        ELSEIF (MODE == 'L')  THEN
C          USER SPECIFIES LINE OF ROTATION, USE LIN/QUAD INTERP

           IF (INTERPC == 'L') THEN
C             ROTATE ABOUT LINE, TRI-LINEAR INTERPOLATION 
              !write(6,*) ' Linear about line:',angle
              CALL ROTL3(LUN2,BUF, NX,NY,NZ, P1,P2,ANGLE)

           ELSEIF (INTERPC == 'Q') THEN
C             ROTATE ABOUT LINE, TRI-QUADRATIC INTERPOLATION 
              !write(6,*) ' Quad about line:',angle
              CALL ROTATESL3Q(LUN2,BUF, NX,NY,NZ,
     &                     P1,P2,ANGLE, BACKC,BACK)
           ENDIF
           IRTFLG = 0


        ELSEIF (INTERPC == 'L') THEN
C          ROTATE ABOUT POINT, TRI-LINEAR INTERPOLATION 

           !write(6,*) ' Linear about point:',PSI,THETA,PHI
           CALL ROTATES3L(LUN2,BUF,KLX,KNX,KLY,KNY,KLZ,KNZ,
     &                    DRM, BACKC,BACK)
           IRTFLG = 0

        ELSEIF (INTERPC == 'Q') THEN
C          ROTATE ABOUT POINT, TRI-QUADRATIC INTERPOLATION
           !write(6,*) ' Quad about point:',PSI,THETA,PHI

           CALL ROTATES3Q(LUN2,BUF,KLX,KNX,KLY,KNY,KLZ,KNZ,
     &                    DRM, BACKC,BACK)
           IRTFLG = 0
        ELSE
C          ROTATE ABOUT POINT, FBS INTERPOLATION
           !write(6,*) ' FBS about point:',PSI,THETA,PHI
           CALL ROTATES3FBS(LUN2,BUF,KLX,KNX,KLY,KNY,KLZ,KNZ,
     &                      DRM,USEBACK,BACK,IRTFLG)
        ENDIF

9999    IF (ALLOCATED(BUF)) DEALLOCATE(BUF)
  
        END



C       -------------  ROTATESZ ----------------------- ROTATESZ

        SUBROUTINE ROTATESZ(LUN1,LUN2, NX,NY,NZ,
     &                      ANGLE, SHX,SHY,
     &                      INTERPC,USEBACK, BACK,   
     &                      IRTFLG) 

        IMPLICIT NONE    
        INCLUDE 'CMBLOCK.INC'
  
        INTEGER           :: LUN1,LUN2, NX,NY,NZ
        REAL              :: ANGLE, SHX,SHY
        CHARACTER(LEN=1)  :: INTERPC
        LOGICAL           :: USEBACK
        REAL              :: BACK
        INTEGER           :: IRTFLG 

        REAL, ALLOCATABLE :: BUF(:,:),BUFLIN(:),BUF2(:,:)
        REAL              :: TH 

        INTEGER           :: ISLICE,IREC1,IREC2,NXLD,IRECOFF,MWANT,IROW
        INTEGER           :: IOFF

C       ROTATION OF VOLUME AROUND Z AXIS
        TH = ANGLE * DATAN(1.0D0) / 45.0D0

        IF (INTERPC == 'Q') THEN
C       ROTATION OF VOLUME AROUND Z AXIS
 
           ALLOCATE (BUF(NX,NY), BUFLIN(NX),STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN 
              MWANT = NX*NY + NX
              CALL ERRT(46,'ROTATESZ, BUF..',MWANT)
              RETURN
           ENDIF

        ELSEIF (INTERPC == 'F') THEN
           NXLD = NX + 2 - MOD(NX,2)
           ALLOCATE (BUF(NXLD,NY), BUF2(NX,NY),STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN 
              MWANT = NXLD*NY + NX*NY
              CALL ERRT(46,'ROTATESZ, BUF..',MWANT)
              RETURN
           ENDIF
         ENDIF

         !write(6,*) 'linear interp :',interpc,shx,shy
         !write(6,*) 'angle,back,nz:',angle,back,nz

         DO ISLICE = 1,NZ 
C           ROTATE SLICE IN-CORE 

            IF (INTERPC == 'L')     THEN
C              LINEAR INTERP ('RT')

C              READS IMAGE IN ROT32, WRITES OUTPUT SLICE
               IREC1 = (ISLICE-1)*NY+1 
               IREC2 = IREC1 + NY - 1 
               IOFF  = IREC1 - 1 
               !write(6,*) 'irec1,irec2,ioff:',irec1,irec2,ioff

               CALL ROT32(LUN1,LUN2,NX,IREC1,IREC2,1,
     &                    TH,BACK,SHX,SHY,IOFF)

            ELSEIF (INTERPC == 'Q') THEN
C              QUADRATIC INTERP ('RT SQ')

C              LOAD IMAGE INTO BUF
               CALL REDVOL(LUN1,NX,NY, ISLICE,ISLICE, BUF,IRTFLG)

C              ROTATE WITH RTSQ AND WRITE OUTPUT SLICE
               IRECOFF = (ISLICE-1) * NY 
   	       CALL RTSQ_BACK(BUF,BUFLIN, NX,NY,
     &                     ANGLE, 1.0,0.0,0.0, 
     &                     USEBACK,BACK,  IRECOFF,LUN2)

            ELSEIF (INTERPC == 'F') THEN
C              FBS INTERP ('RT SF')

C              LOAD CURRENT SLICE INTO FFT X PADDED BUF
               DO IROW=1,NY
                  CALL REDLIN(LUN1,BUF(1,IROW),
     &                        NX,IROW+(ISLICE-1)*NX)
               ENDDO

C              ROTATE WITH RTSF 
               CALL RTSF_BACK(BUF,BUF2, NXLD, NX, NY, 
     &                        ANGLE, 1.0,0.0,0.0, 
     &                        USEBACK,BACK, IRTFLG)

C              WRITE OUTPUT SLICE
               CALL WRTVOL(LUN2,NX,NY, ISLICE,ISLICE,BUF2,IRTFLG)
            ENDIF
         ENDDO 

9999     IF (ALLOCATED(BUF))    DEALLOCATE(BUF)
         IF (ALLOCATED(BUFLIN)) DEALLOCATE(BUFLIN)
         IF (ALLOCATED(BUF2))   DEALLOCATE(BUF2)

         END
@


1.14
log
@X & Y CENTER OFFSETS had leading blanks
@
text
@d17 1
a17 1
C=* Email: spider@@wadsworth.org                                        *
@


1.13
log
@ROT32 IOFF BUG
@
text
@d15 1
a15 1
C=* Copyright 1985-2013  Health Research Inc.,                         *
d134 2
a135 2
            CALL RDPRM2S(SHX,SHY,NOT_USED,'
     &                   X & Y CENTER OFFSETS',IRTFLG) 
@


1.12
log
@ROTATESZ FBS BUF BUG if 2 angles zero
@
text
@d10 1
d15 1
a15 1
C=* Copyright 1985-2012  Health Research Inc.,                         *
d131 1
d144 2
d198 1
a198 1
     &                TH,BACK,SHX,SHY)
d229 1
a229 1

d325 3
d330 1
d336 1
d501 1
d504 1
a504 2

        TH   = ANGLE * DATAN(1.0D0) / 45.0D0
d526 3
a528 2
         !write(6,*) 'linear interp :',interpc,SHX,SHY
         !write(6,*) 'angle,back:',angle,back
d538 3
d542 1
a542 2
     &                    TH,BACK,SHX,SHY)

d551 1
a551 1
               IRECOFF = (ISLICE-1)*NY 
@


1.11
log
@CALL ROT32(LUN1,LUN2,NX, 1,NY bug
@
text
@d9 1
d37 1
a37 1
C  ROT32(LUN1,LUN2,NX,IREC1,IREC2,1,TH,BACK,SHX,SHY) 
d39 1
a39 1
C  RTSQ(BUF,BUFLIN, NX,NY, THETA,SCLI,SHXI,SHYI, IREC1,LUN2)
d41 1
a41 1
C  RTSF(BUF,BUF2, NXLD,NX,NY, THETA,SCLI,SHXI,SHYI, IRTFLG)
d44 1
a44 1
C  ROTATES3(LUN1,LUN2, NX,NY,NZ, ANGLE, THETA,PHI,PSI, 
d48 1
a48 1
C  ROTATES3L(LUN2,BUF,KLX,KNX,KLY,KNY,KLZ,KNZ, DRM, BACKC,BACK)
d50 1
a50 1
C  ROTATES3Q(LUN2,Q1,KLX,KNX,KLY,KNY,KLZ,KNZ, DRM, BACKC,BACK) 
d52 1
a52 1
C  ROTATES3FBS(LUN2,BUF,KLX,KNX,KLY,KNY,KLZ,KNZ,
d56 1
a56 1
C  ROTATESL3Q(LUN2,BUF,NX,NY,NZ,P1,P2,ANGLE, BACKC,BACK)
d319 2
a320 2
     &        PHI .NE. 0 .AND. THETA == 0.0 .AND. PSI ==0) THEN
            !write(6,*) ' USing rotatesz:',interpc,useback,back
d491 1
a491 1
        INTEGER           :: ISLICE,IREC1,IREC2,NXLD,IRECOFF,MWANT
d547 5
a551 2
C              LOAD INTO FFT X PADDED BUF
               CALL REDVOL(LUN1,NX,NY,ISLICE,ISLICE,BUF,IRTFLG)
@


1.10
log
@added rotatesz for simple vol z rotate
@
text
@d8 1
d138 1
a138 1
     &       'BI- LINEAR, QUADRATIC, OR FBS INTERPOLATION (L,Q,F)',
d192 1
a192 1
           CALL ROT32(LUN1,LUN2,NX,1,1,1,
d251 1
a251 1
     &           'TRI- LINEAR OR QUADRATIC INTERPOLATION (L,Q)',
@


1.9
log
@NSAM --> NX,   ROT3L CALL ADDED
@
text
@d185 14
a198 5
C        CAN DO IMAGE OR VOLUME(AROUND Z AXIS) 
         DO ISLICE = 1,NZ 
C           ROTATE SLICE IN-CORE 
            IREC1 = (ISLICE-1)*NY+1 
            IREC2 = IREC1 + NY - 1 
d200 4
a203 4
            IF (INTERPC == 'L')     THEN
C              LINEAR INTERP ('RT')
               CALL ROT32(LUN1,LUN2,NX,IREC1,IREC2,1,
     &                    TH,BACK,SHX,SHY)
d205 2
a206 7
            ELSEIF (INTERPC == 'Q') THEN
C              QUADRATIC INTERP ('RT SQ')
               CALL REDVOL(LUN1,NX,NY, ISLICE,ISLICE, BUF,IRTFLG)
               IRECOFF = (ISLICE-1)*NY 
    	       CALL RTSQ_BACK(BUF,BUFLIN, NX,NY,
     &                     ANGLE, 1.0,0.0,0.0, 
     &                     USEBACK,BACK,  IRECOFF,LUN2)
d208 2
a209 3
            ELSEIF (INTERPC == 'F') THEN
C              FBS INTERP ('RT SF')
               CALL READV(LUN1,BUF,NXLD,NY,NX,NY,ISLICE)
d211 2
a212 1
               CALL RTSF_BACK(BUF,BUF2, NXLD, NX, NY, 
d216 3
a218 4
C              WRITE OUTPUT IMAGE
               CALL WRITEV(LUN2,BUF2,NX,NY,NX,NY,ISLICE)
            ENDIF
         ENDDO 
d316 15
a330 4
         CALL ROTATES3(LUN1,LUN2, NX,NY,NZ,
     &                 ANGLE, THETA,PHI,PSI, 
     &                 MODE, NCX,NCY,NCZ,  P1,P2,
     &                 INTERPC, BACKC,BACK,IRTFLG)
d342 1
a342 1
      CLOSE(LUN1)
d372 1
d466 97
@


1.8
log
@ROT2QS --> RTSQ RENAMED
@
text
@d4 1
a4 1
C              FBS VOLUME INTERP                 OCT 2011 ARDEAN LEITH *                                                     *
d6 2
d12 1
a12 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d33 1
d35 1
a35 2
C  ROT32(LUN1,LUN2,NSAM,IREC1,IREC2,1,TH,BACK,SHX,SHY) 
C
d37 3
a39 2
C  RTSQ(BUF,BUFLIN, NSAM,NROW,THETA,SCLI,SHXI,SHYI, IREC1,LUN2)
C  RTSF(BUF,BUF2, NXLD, NSAM, NROW, THETA,SCLI,SHXI,SHYI, IRTFLG)
d42 2
a43 2
C  ROTATES3(LUN1,LUN2, NSAM,NROW,NSLICE, ANGLE, THETA,PHI,PSI, 
C           MODE, NX,NY,NZ,  P1,P2,INTERPC, BACKC,BACK,IRTFLG)
a46 1
C
a48 1
C
d54 2
a55 2
C  ROTATESL3Q(LUN2,BUF,NSAM,NROW,NSLICE,P1,P2,ANGLE, BACKC,BACK)
C
d68 1
d77 1
a77 1
      INTEGER                :: NSAM,NROW,NSLICE,ITYPE,NLET,NOT_USED
d79 1
a79 1
      INTEGER                :: IMAMI1,ISLICE,NX,NY,NZ,IDUM,MWANT
d99 1
a99 1
     &             NSAM,NROW,NSLICE, 
d103 1
a103 1
      IF (IMAMI.EQ.0)CALL NORM3(LUN1,NSAM,NROW,NSLICE,FMAX,FMIN,AV) 
d113 1
a113 1
     &             NSAM,NROW,NSLICE, 
d118 1
a118 1
      IF (ITYPE .EQ. 1) THEN 
d128 1
a128 1
         IF (FCHAR(4:4) .EQ. 'A') THEN 
d144 3
a146 1
            CALL ERRT(101,'UNKNOWN INTERPOLATION TYPE',IDUM)
d161 1
a161 1
         IF (BACK .EQ. HUGE(BACK)) THEN
d168 2
a169 2
         IF (INTERPC .EQ. 'Q' ) THEN
            ALLOCATE(BUF(NSAM,NROW),BUFLIN(NSAM), STAT=IRTFLG)
d171 1
a171 1
               MWANT = NSAM + NSAM*NROW*NSLICE
d175 3
a177 3
         ELSEIF (INTERPC .EQ. 'F' ) THEN
            NXLD   = NSAM + 2 - MOD(NSAM,2)
            ALLOCATE (BUF(NXLD, NROW),BUF2(NSAM,NROW), STAT=IRTFLG)
d179 1
a179 1
               MWANT = NXLD*NROW + NSAM*NROW 
d186 1
a186 1
         DO ISLICE = 1,NSLICE 
d188 2
a189 2
            IREC1 = (ISLICE-1)*NROW+1 
            IREC2 = IREC1 + NROW - 1 
d191 1
a191 1
            IF (INTERPC .EQ. 'L')     THEN
d193 1
a193 1
               CALL ROT32(LUN1,LUN2,NSAM,IREC1,IREC2,1,
d196 1
a196 1
            ELSEIF (INTERPC .EQ. 'Q') THEN
d198 3
a200 3
               CALL REDVOL(LUN1,NSAM,NROW, ISLICE,ISLICE, BUF,IRTFLG)
               IRECOFF = (ISLICE-1)*NROW 
    	       CALL RTSQ_BACK(BUF,BUFLIN, NSAM,NROW,
d204 1
a204 1
            ELSEIF (INTERPC .EQ. 'F') THEN
d206 1
a206 1
               CALL READV(LUN1,BUF,NXLD,NROW,NSAM,NROW,ISLICE)
d208 1
a208 1
               CALL RTSF_BACK(BUF,BUF2, NXLD, NSAM, NROW, 
d213 1
a213 1
               CALL WRITEV(LUN2,BUF2,NSAM,NROW,NSAM,NROW,ISLICE)
d221 1
a221 1
         IF (MODE .EQ. 'L' ) THEN
d223 1
a224 1

d230 3
d238 3
d246 13
d272 2
a273 2
            IF (MODE .EQ. 'A' ) THEN
               CALL RDPRI3S(NX,NY,NZ,NOT_USED,
a276 1
         ENDIF
a277 13
C        SET INTERPOLATION TYPE 
         IF (MODE .EQ. 'L') then
            CALL RDPRMC(INTERPC,NLET,.TRUE.,
     &           'TRI- QUADRATIC  OR FBS INTERPOLATION (Q,F)',
     &            NULL,IRTFLG)
            IF (IRTFLG .NE. 0) GOTO 9999 
            IF (INTERPC .NE. 'Q' .AND. 
     &          INTERPC .NE. 'F' .AND.
     &          INTERPC .NE. 'F') THEN
                CALL ERRT(101,'UNKNOWN INTERPOLATION TYPE',IDUM)
               GOTO 9999
            ENDIF
         ELSE
d285 3
a287 1
                CALL ERRT(101,'UNKNOWN INTERPOLATION TYPE',IDUM)
d294 4
a297 3
C        SET BACKGROUND VALUE 
         CALL RDPRMC(BACKC,NLET,.TRUE.,
     &       'UNROTATED, AVG, MIN, OR SPECIFIED CORNERS (U,A,M,2.5)',
d299 1
a299 1
         IF (IRTFLG .NE. 0) GOTO 9999 
d301 10
a310 9
         BACK = HUGE(BACK)
         IF (BACKC(1:1) .EQ. 'U')          BACK = 0.0 !(unused)
         IF (INDEX(BACKC(1:NLET),'A') > 0) BACK = AV1
         IF (INDEX(BACKC(1:NLET),'M') > 0) BACK = FMIN1

         IF (BACK .EQ. HUGE(BACK)) THEN
            BACKTIL = '~' // BACKC(1:NLET)
            CALL RDPRM1S(BACK,NOT_USED,BACKTIL,IRTFLG) 
            IF (IRTFLG .NE. 0) GOTO 9999 
d313 1
a313 1
         CALL ROTATES3(LUN1,LUN2, NSAM,NROW,NSLICE,
d315 1
a315 1
     &                 MODE, NX,NY,NZ,  P1,P2,
d336 1
a336 1
        SUBROUTINE ROTATES3(LUN1,LUN2,NSAM,NROW,NSLICE,
d338 1
a338 1
     &                       MODE,   NX,NY,NZ,  P1,P2,
d344 1
a344 1
        INTEGER           :: LUN1,LUN2,NSAM,NROW,NSLICE
d347 1
a347 1
        INTEGER           :: NX,NY,NZ 
d355 1
a355 1
        double precision  :: DRM(3,3)
d363 1
a363 1
        ALLOCATE (BUF(NSAM,NROW,NSLICE), STAT=IRTFLG)
d365 1
a365 1
           CALL ERRT(46,'ROTATES3A, BUF',NSAM*NROW*NSLICE)
d369 1
a369 1
        CALL REDVOL(LUN1,NSAM,NROW,1,NSLICE,BUF,IRTFLG)
d372 1
a372 1
        IF (MODE .EQ. 'A')  THEN
d374 7
a380 7
           KNX = NSAM   - NX
           KNY = NROW   - NY
           KNZ = NSLICE - NZ

           KLX = -NX + 1
           KLY = -NY + 1
           KLZ = -NZ + 1
d389 7
a395 7
           KNX = NSAM   / 2 - 1 + MOD(NSAM,2)
           KNY = NROW   / 2 - 1 + MOD(NROW,2)
           KNZ = NSLICE / 2 - 1 + MOD(NSLICE,2)

           KLX = -NSAM   / 2
           KLY = -NROW   / 2
           KLZ = -NSLICE / 2
d402 2
a403 2
        IF ((MODE .EQ. 'L' .AND. ANGLE.EQ.0.0) .OR.
     &     (THETA.EQ.0.0 .AND .PHI.EQ.0.0 .AND. PSI.EQ.0.0)) THEN
d405 2
a406 2
           !write(6,*) ' Calling wrtvol:',PSI,THETA,PHI
           CALL WRTVOL(LUN2,NSAM,NROW,1,NSLICE,BUF,IRTFLG)
d409 2
a410 2
        ELSEIF (MODE .EQ. 'L')  THEN
C          USER SPECIFIES LINE OF ROTATION, USE QUADRATIC INTERP
d412 9
a420 2
           !write(6,*) ' quad line:',angle
           CALL ROTATESL3Q(LUN2,BUF,NSAM,NROW,NSLICE,
d422 1
d425 2
a426 1
        ELSEIF (INTERPC .EQ. 'L') THEN
d429 1
a429 1
           !write(6,*) ' linear point:',PSI,THETA,PHI
d434 1
a434 1
        ELSEIF (INTERPC .EQ. 'Q') THEN
d436 1
a436 2
           !write(6,*) ' Calling rots3q:',PSI,THETA,PHI
           !write(6,*) ' quad point:',PSI,THETA,PHI
d443 1
@


1.7
log
@comment
@
text
@d196 1
a196 1
    	       CALL ROT2QS_BACK(BUF,BUFLIN, NSAM,NROW,
@


1.6
log
@cosmetic
@
text
@d3 3
a5 2
C  ROTATES.F        NEW                         SEP 2011 ARDEAN LEITH  *  
C                   FBS VOLUME INTERP           OCT 2011 ARDEAN LEITH  *                                                     *
d35 1
a35 1
C  ROT2QS(BUF,BUFLIN, NSAM,NROW,THETA,SCLI,SHXI,SHYI, IREC1,LUN2)
@


1.5
log
@IRECOFF = (ISLICE-1)*NROW bug for quadratic interp
@
text
@d57 1
a57 1
 
d59 1
a59 1
 
d63 1
a63 1
 
d66 1
a66 1
 
d190 1
a190 1
               
d279 1
a279 1
     
d304 1
a304 1
  
@


1.4
log
@deallocate missing
@
text
@d75 1
a75 1
      INTEGER                :: IREC1,IREC2,NXLD
d194 1
d197 1
a197 1
     &                     USEBACK,BACK,  IREC1,LUN2)
@


1.3
log
@*** empty log message ***
@
text
@d4 1
a4 1
C                                                                      *
d32 1
d44 1
a44 1
C  For volumes around point (Quad Interp)
d47 5
a51 1
C  For volumes around line (Quad Interp)
d309 3
a311 2
      IF (ALLOCATED(BUF))   DEALLOCATE(BUF)
      IF (ALLOCATED(BUF2))  DEALLOCATE(BUF2)
d392 1
d400 1
d408 1
d417 1
d421 1
a421 1
     &                      DRM,USEBACK,BACK)
a424 1
        IRTFLG = 0
@


1.2
log
@rtsf_back called
@
text
@d194 1
a194 1
C              FSB INTERP ('RT SF')
d335 1
d338 1
d409 3
a411 3
C          ROTATE ABOUT POINT, FSB INTERPOLATION
C          FSB INTERPOLATION NEEDED !!!!!!!!!!!
       !!CALL ROTATES3F(LUN2,BUF,KLX,KNX,KLY,KNY,KLZ,KNZ,DRM,BACKC,BACK)
@


1.1
log
@Initial revision
@
text
@d74 2
d122 2
a123 1
            CALL RDPRM2S(SHX,SHY,NOT_USED,'X & Y CENTER OFFSETS',IRTFLG) 
d129 1
a129 1
     &              'BI- LINEAR, QUADRATIC, OR FBS INTERPOLATION (L,F)',
d141 3
a143 10
         IF (INTERPC .EQ. 'Q' .OR. INTERPC .EQ. 'F') THEN
            CALL RDPRMC(BACKC,NLET,.TRUE.,
     &       'UNROTATED CORNERS (U)',
     &            NULL,IRTFLG)
            backc(1:1) = 'U'
         ELSE
            CALL RDPRMC(BACKC,NLET,.TRUE.,
     &       'UNROTATED, AVG, MIN, OR SPECIFIED CORNERS (U,A,M,2.5)',
     &            NULL,IRTFLG)
         ENDIF
d149 2
a150 1

d156 1
d189 3
a191 2
    	       CALL ROT2QS(BUF,BUFLIN, NSAM,NROW,
     &                     ANGLE, 1.0,0.0,0.0, IREC1,LUN2)
d196 5
a200 2
               CALL RTSF(BUF,BUF2, NXLD, NSAM, NROW, 
     &                   ANGLE, 1.0,0.0,0.0, IRTFLG)
@
