head	1.9;
access;
symbols
	healthdept_2018:1.9
	pre_getangas:1.8
	GPL2010:1.8
	pre_GPL2010:1.7
	pre_var_equation:1.7
	pre_fftwrings:1.7
	pre_opfiles:1.7
	src:1.7
	best-code:1.7
	x-named-regs:1.6
	x:1.6
	v13-00:1.6
	pre_GPL:1.5
	prec_CA:1.5
	noindx:1.5
	Bproc:1.3
	oct21:1.2
	last77:1.2;
locks; strict;
comment	@c @;


1.9
date	2018.10.03.14.34.23;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2010.06.24.13.26.59;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.23.16.46.19;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.17.21.04.39;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2001.12.05.18.45.22;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.05.13.45.15;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	99.11.10.23.11.21;	author yuchen;	state Exp;
branches;
next	1.2;

1.2
date	97.01.31.13.18.19;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.57;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.9
log
@email_health_dept
@
text
@C++*******************************************************************
C
C SORTINT.F
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  SORTINT(A,B,N)
C
C  PARAMETERS:
C       A    KEY ARRAY USED IN SORTING
C       B    ARRAY TO BE SORTED
C       N    NUMBER OF VALUES 
C
C  PURPOSE:
C     SINGLETON SORT PROGRAM TO ORDER B USING A AS A KEY
C     AS OF THE PRESENT TIME (FEB. 1971) THIS IS THE FASTEST GENERAL
C     PURPOSE SORTING METHOD
C
C     MODIFIED VERSION J.FRANK, FEB. 1977,M.RADERMACHER JAN.90
C
C--*******************************************************************


      SUBROUTINE SORTINT ( A, B, N)

      INTEGER  A(N),B(N),T,TT,X
      INTEGER  IL(16), IU(16)

      M = 1
      I = 1
      J = N
    5 IF (I .GE. J) GO TO 70

C    ORDER THE TWO ENDS AND THE MIDDLE

   10 K = I
      IJ = (I + J)/2
      T = A(IJ)
      IF (A(I) .LE. T) GO TO 20
      A(IJ) = A(I)
      A(I) = T
      T = A(IJ)
      X = B(I)
      B(I) = B(IJ)
      B(IJ) = X
   20 L = J
      IF (A(J) .GE. T) GO TO 40
      IF (A(J) .LT. A(I)) GO TO 25
      A(IJ) = A(J)
      A(J) = T
      T = A(IJ)
      X = B(IJ)
      B(IJ) = B(J)
      B(J) = X
      GO TO 40
   25 A(IJ) = A(I)
      A(I) = A(J)
      A(J) = T
      T = A(IJ)
      X = B(J)
      B(J) = B(IJ)
      B(IJ) = B(I)
      B(I) = X
      GO TO 40

C     SPLIT THE SEQUENCE BETWEEN I AND J INTO TWO SEQUENCES.  THAT
C     SEQUENCE BETWEEN I AND L WILL CONTAIN ONLY ELEMENTS LESS THAN OR
C     EQUAL TO T, WHILE THAT BETWEEN K AND J WILL CONTAIN ONLY ELEMENTS
C     GREATER THAN T.

   30 A(L) = A(K)
      A(K) = TT
      X = B(L)
      B(L) = B(K)
      B(K) = X
   40 L = L - 1
      IF (A(L) .GT. T) GO TO 40
      TT = A(L)
   50 K = K + 1
      IF (A(K) .LT. T) GO TO 50
      IF (K .LE. L) GO TO 30

C     SAVE THE END POINTS OF THE LONGER SEQUENCE IN IL AND IU, AND SORT
C     THE SHORTER SEQUENCE.

      IF (L - I .LE. J - K) GO TO 60
      IL(M) = I
      IU(M) = L
      I = K
      M = M + 1
      GO TO 80
   60 IL(M) = K
      IU(M) = J
      J = L
      M = M + 1
      GO TO 80

C     RETRIEVE END POINTS PREVIOUSLY SAVED AND SORT BETWEEN THEM.

   70 M = M - 1
      IF (M .EQ. 0) RETURN
      I = IL(M)
      J = IU(M)

C     IF THE SEQUENCE IS LONGER THAN 11 OR IS THE FIRST SEQUENCE, SORT
C     BY SPLITTING RECURSIVELY.

   80 IF (J - I .GE. 11) GO TO 10
      IF (I .EQ. 1) GO TO 5

C    IF THE SEQUENCE IS 11 OR LESS LONG, SORT IT BY A SHELLSORT.

      I = I - 1
   90 I = I + 1
      IF (I .EQ. J) GO TO 70
      T = A(I + 1)
      IF (A(I) .LE. T) GO TO 90
      X = B(I+1)
      K = I
  100 A(K+1) = A(K)
      B(K+1) = B(K)
      K = K - 1
      IF (T .LT. A(K)) GO TO 100
      A(K+1) = T
      B(K+1) = X
      GO TO 90

      END


@


1.8
log
@GPL_2010
@
text
@d11 1
a11 1
C=* Email: spider@@wadsworth.org                                        *
@


1.7
log
@*** empty log message ***
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.6
log
@GPL License fixed
@
text
@d3 1
a3 1
C ORTINT.F
d36 1
a36 1
C       N
d39 1
a39 1
C     SINGLETON SORT PROGRAM TO ORDER B AND C USING A AS A KEY
d41 1
a41 1
C     PURPOSE SORTING METHOD KNOWN
@


1.5
log
@cols off in pawels email
@
text
@d6 23
a28 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.4
log
@pawel's changes
@
text
@d31 1
a31 2
       SUBROUTINE SORTINT ( A, B, N)
       INTEGER  A(N),B(N),T,TT,X
d33 2
d36 36
a71 1
       INTEGER IL(16), IU(16)
a72 37
       M = 1
       I = 1
       J = N
     5 IF (I .GE. J) GO TO 70

C     ORDER THE TWO ENDS AND THE MIDDLE

    10 K = I
       IJ = (I + J)/2
       T = A(IJ)
       IF (A(I) .LE. T) GO TO 20
       A(IJ) = A(I)
       A(I) = T
       T = A(IJ)
       X = B(I)
       B(I) = B(IJ)
       B(IJ) = X
    20 L = J
       IF (A(J) .GE. T) GO TO 40
       IF (A(J) .LT. A(I)) GO TO 25
       A(IJ) = A(J)
       A(J) = T
       T = A(IJ)
       X = B(IJ)
       B(IJ) = B(J)
       B(J) = X
       GO TO 40
    25 A(IJ) = A(I)
       A(I) = A(J)
       A(J) = T
       T = A(IJ)
       X = B(J)
       B(J) = B(IJ)
       B(IJ) = B(I)
       B(I) = X
       GO TO 40

d78 11
a88 11
    30 A(L) = A(K)
       A(K) = TT
       X = B(L)
       B(L) = B(K)
       B(K) = X
    40 L = L - 1
       IF (A(L) .GT. T) GO TO 40
       TT = A(L)
    50 K = K + 1
       IF (A(K) .LT. T) GO TO 50
       IF (K .LE. L) GO TO 30
d93 11
a103 11
       IF (L - I .LE. J - K) GO TO 60
       IL(M) = I
       IU(M) = L
       I = K
       M = M + 1
       GO TO 80
    60 IL(M) = K
       IU(M) = J
       J = L
       M = M + 1
       GO TO 80
d107 4
a110 4
    70 M = M - 1
       IF (M .EQ. 0) RETURN
       I = IL(M)
       J = IU(M)
d115 2
a116 2
    80 IF (J - I .GE. 11) GO TO 10
       IF (I .EQ. 1) GO TO 5
d118 1
a118 1
C     IF THE SEQUENCE IS 11 OR LESS LONG, SORT IT BY A SHELLSORT.
d120 14
a133 14
       I = I - 1
    90 I = I + 1
       IF (I .EQ. J) GO TO 70
       T = A(I + 1)
       IF (A(I) .LE. T) GO TO 90
       X = B(I+1)
       K = I
   100 A(K+1) = A(K)
       B(K+1) = B(K)
       K = K - 1
       IF (T .LT. A(K)) GO TO 100
       A(K+1) = T
       B(K+1) = X
       GO TO 90
d135 1
a135 1
       END
@


1.3
log
@a
@
text
@a0 1

d3 1
a3 11
C $$ SORTINT.FOR
C
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
C **************************************************************************
d5 8
d14 1
a14 1
C $$ SORTINT:    SINGLETON SORT
d16 1
a16 1
C     CALL SORTINT(A,B,N)
d19 8
a26 1
C       N    
d31 2
a32 2
      SUBROUTINE SORTINT ( A, B, N)
      INTEGER  A(N),B(N)
a33 4
C     SINGLETON SORT PROGRAM TO ORDER B AND C USING A AS A KEY
C     AS OF THE PRESENT TIME (FEB. 1971) THIS IS THE FASTEST GENERAL
C     PURPOSE SORTING METHOD KNOWN.
C MODIFIED VERSION J.FRANK, FEB. 1977,M.RADERMACHER JAN.90
d35 1
a35 1
      INTEGER IL(16), IU(16)
d37 4
a40 4
      M = 1
      I = 1
      J = N
    5 IF (I .GE. J) GO TO 70
d44 30
a73 30
   10 K = I
      IJ = (I + J)/2
      T = A(IJ)
      IF (A(I) .LE. T) GO TO 20
      A(IJ) = A(I)
      A(I) = T
      T = A(IJ)
      X = B(I)
      B(I) = B(IJ)
      B(IJ) = X
   20 L = J
      IF (A(J) .GE. T) GO TO 40
      IF (A(J) .LT. A(I)) GO TO 25
      A(IJ) = A(J)
      A(J) = T
      T = A(IJ)
      X = B(IJ)
      B(IJ) = B(J)
      B(J) = X
      GO TO 40
   25 A(IJ) = A(I)
      A(I) = A(J)
      A(J) = T
      T = A(IJ)
      X = B(J)
      B(J) = B(IJ)
      B(IJ) = B(I)
      B(I) = X
      GO TO 40
C
d78 13
a90 13
C
   30 A(L) = A(K)
      A(K) = TT
      X = B(L)
      B(L) = B(K)
      B(K) = X
   40 L = L - 1
      IF (A(L) .GT. T) GO TO 40
      TT = A(L)
   50 K = K + 1
      IF (A(K) .LT. T) GO TO 50
      IF (K .LE. L) GO TO 30
C
d93 13
a105 13
C
      IF (L - I .LE. J - K) GO TO 60
      IL(M) = I
      IU(M) = L
      I = K
      M = M + 1
      GO TO 80
   60 IL(M) = K
      IU(M) = J
      J = L
      M = M + 1
      GO TO 80
C
d107 6
a112 6
C
   70 M = M - 1
      IF (M .EQ. 0) RETURN
      I = IL(M)
      J = IU(M)
C
d115 4
a118 4
C
   80 IF (J - I .GE. 11) GO TO 10
      IF (I .EQ. 1) GO TO 5
C
d120 19
a138 17
C
      I = I - 1
   90 I = I + 1
      IF (I .EQ. J) GO TO 70
      T = A(I + 1)
      IF (A(I) .LE. T) GO TO 90
      X = B(I+1)
      K = I
  100 A(K+1) = A(K)
      B(K+1) = B(K)
      K = K - 1
      IF (T .LT. A(K)) GO TO 100
      A(K+1) = T
      B(K+1) = X
      GO TO 90
C
      END
@


1.2
log
@nosave
@
text
@d29 1
a29 1
CNO_SAVE
@


1.1
log
@Initial revision
@
text
@d28 2
a29 2
      INTEGER  A(1),B(1)

@
