head	1.50;
access;
symbols
	pre_mrcs:1.50
	healthdept_2018:1.50
	pre_getangas:1.48
	GPL2010:1.48
	pre_GPL2010:1.47
	pre_var_equation:1.46
	pre_fftwrings:1.45
	pre_opfiles:1.45
	src:1.45
	best-code:1.45
	x-named-regs:1.42
	x:1.42
	v13-00:1.42
	pre_GPL:1.40
	prec_CA:1.26
	noindx:1.25
	Bproc:1.17
	oct21:1.17
	last77:1.16;
locks; strict;
comment	@c @;


1.50
date	2018.10.03.14.34.08;	author leith;	state Exp;
branches;
next	1.49;

1.49
date	2014.01.12.19.32.12;	author leith;	state Exp;
branches;
next	1.48;

1.48
date	2010.06.24.13.26.01;	author leith;	state Exp;
branches;
next	1.47;

1.47
date	2010.01.13.18.44.35;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2009.06.22.14.47.49;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2006.03.15.17.55.49;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2006.03.14.21.15.39;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2005.12.19.18.16.24;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2005.10.17.20.19.29;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2005.10.17.18.12.19;	author leith;	state Exp;
branches;
next	1.40;

1.40
date	2004.07.07.16.30.31;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2004.05.18.16.44.26;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2004.05.18.13.25.25;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2004.04.20.13.57.32;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2004.04.02.20.16.49;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2004.03.19.18.31.23;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2004.01.23.17.17.21;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2004.01.14.20.35.28;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2003.12.10.20.03.07;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2003.11.21.18.43.08;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2003.11.19.14.47.35;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2003.11.17.15.23.21;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	2003.10.16.18.58.31;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	2003.10.16.16.47.21;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2003.02.20.21.33.39;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2002.03.11.14.08.07;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2001.04.13.13.54.46;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2001.04.13.13.05.46;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2001.04.06.14.53.40;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2001.02.08.20.31.56;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2001.01.29.21.35.39;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2001.01.03.20.02.56;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2000.11.01.14.23.41;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	99.10.21.14.54.30;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	98.04.02.16.38.16;	author pawel;	state Exp;
branches;
next	1.15;

1.15
date	98.03.25.20.55.42;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	97.10.09.14.37.24;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	97.04.03.14.47.34;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	97.01.15.20.53.36;	author mladjadj;	state Exp;
branches;
next	1.11;

1.11
date	97.01.14.22.13.25;	author mladjadj;	state Exp;
branches;
next	1.10;

1.10
date	96.12.11.20.46.28;	author mladjadj;	state Exp;
branches;
next	1.9;

1.9
date	96.12.10.22.20.04;	author mladjadj;	state Exp;
branches;
next	1.8;

1.8
date	96.12.10.19.59.26;	author mladjadj;	state Exp;
branches;
next	1.7;

1.7
date	96.12.05.15.54.46;	author mladjadj;	state Exp;
branches;
next	1.6;

1.6
date	96.10.21.13.49.46;	author mladjadj;	state Exp;
branches;
next	1.5;

1.5
date	96.10.09.15.54.30;	author mladjadj;	state Exp;
branches;
next	1.4;

1.4
date	95.10.10.18.42.33;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	95.10.03.19.17.16;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.06.42;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.49.48;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.50
log
@email_health_dept
@
text
@
C++************************************************************ 5/14/85   
C
C  JPMSK2   
C           RECONS RESTORED FROM LISTING       9/16/85 JF
C           LONG FILE NAMES                    FEB 89 ARDEAN LEITH
C           PCA REWRITTEN                      OCT 03 MAHIEDDINE LADJADJ
C           USED OPAUXFILE & OPFILE            NOV 00 ARDEAN LEITH
C           SRIPE PARAMETERS CHANGED           JAN 01 ARDEAN LEITH
C           FMIN --> FMINT & INSERTED RECDUM   APR 01 ARDEAN LEITH
C           REWRITTEN                          OCT 03 ARDEAN LEITH
C           MASK BUG                           NOV 03 ARDEAN LEITH
C           _EIG & _IMC FORMATS CHANGED        JAN 04 ARDEAN LEITH
C           _REMAKE J BUG                      APR 04 ARDEAN LEITH
C           SRE COORDINATE BUG                 JUL 04 ARDEAN LEITH
C           RDPRAF REMOVED                     DEC 05 ARDEAN LEITH 
C           CREATES VOLUMES OK                 MAR 06 ARDEAN LEITH 
C           PIXEL FILE FDUM                    JUN 09 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C JPMSK2(LUN,LUNI,LUNE,LUNP,LUNM,LUNDOC)
C
C PURPOSE:   RECONSTITUTE IMAGES USING SELECTED FACTORS
C            OF A CORRESPONDENCE ANALYSIS STORED IN
C            FILES: _IMC , _PIX , _MAS, AND _EIG 
C
C PARAMETERS:
C    LUN      LOGICAL UNIT NUMBER OF INPUT/OUTPUT FILE
C    LUNI     LOGICAL UNIT NUMBER OF IMAGE COORDINATES FILE
C    LUNE     LOGICAL UNIT NUMBER OF EIGEN FILE
C    LUNP     LOGICAL UNIT NUMBER OF PIXEL COORDINATES FILE
C    LUNM     LOGICAL UNIT NUMBER OF MASK FILE
C
C COMMANDS SUPPORTED :
C    CA SR  -- RECONSTITUTE FULL IMAGE INCLUDING 0-FACTOR
C    CA SRD -- RECONSTITUTE DIFFERENTIAL IMAGE, WITHOUT 0-FACTOR
C    CA SRI -- RECONSTITUTE IMPORTANCE IMAGE (AS CA_SRD BUT
C                 WITHOUT COORDINATE WEIGHTING)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

	SUBROUTINE JPMSK2(LUN,LUNI,LUNE,LUNP,LUNM)

	INCLUDE 'CMBLOCK.INC'
	INCLUDE 'CMLIMIT.INC'

        COMMON /IOBUF/ BUF(NBUFSIZ)

        COMMON  /COMMUN/         FILNAM,FILNMP,FILNMC,FILNME, FILNMM,
     &                           FILPRE
        CHARACTER(LEN=MAXNAM) :: FILNAM,FILNMP,FILNMC,FILNME, FILNMM,
     &                           FILPRE

        CHARACTER(LEN=1)                   :: NULL, ANS
        LOGICAL                            :: USE_PCA,ADD_AVRG

        REAL, ALLOCATABLE, DIMENSION(:)    :: BUFM
        INTEGER, ALLOCATABLE, DIMENSION(:) :: NUMFAC
        REAL, ALLOCATABLE, DIMENSION(:)    :: QBUF
        REAL, ALLOCATABLE, DIMENSION(:)    :: COO
        LOGICAL                            :: SRE, SRA, SR

#ifndef SP_32
        INTEGER * 8 :: JTOT,IASK8,IOK
#else
        INTEGER * 4 :: JTOT,IASK8,IOK
#endif

        NULL = CHAR(0)
       
        SRE  = (FCHAR(4:6) .EQ. 'SRE')
        SRA  = (FCHAR(4:6) .EQ. 'SRA')
        SR   = (.NOT. SRE .AND. .NOT. SRA) .OR. 
     &         (FCHAR(4:6) .EQ. 'SRI') .OR. 
     &         (FCHAR(4:6) .EQ. 'SRD')

        CALL FILERD(FILPRE,NLET,NULL,
     &              'CORAN/PCA FILE PREFIX (e.g. CORAN_)~',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (SR) THEN
C	   IMUSED IS THE NUMBER OF IMAGES WE WANT TO RECONSTRUCT.
           NILMAX = NIMAX	 
           CALL FILELIST(.FALSE.,LUNDOC,NULL,IDUM,
     &               INUMBR,NILMAX,IMUSED,NULL,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999
        ELSE

        ENDIF

        FILNMC = FILPRE(1:NLET) // '_IMC'//NULL
        FILNMP = FILPRE(1:NLET) // '_PIX'//NULL
        FILNME = FILPRE(1:NLET) // '_EIG'//NULL
        FILNMM = FILPRE(1:NLET) // '_MAS'//NULL

C       OPEN IMAGE COORDINATE FILE
        CALL OPAUXFILE(.FALSE.,FILNMC,DATEXC,LUNI,0,
     &                       'O', ' ',.TRUE.,IRTFLG)
        READ(LUNI,*) NUMIM, NFAC, NSAM, NROW, NDUM, KIND_PCA

        IF (KIND_PCA .EQ. 1) THEN

          IF (FCHAR(4:6) .EQ. 'SRD' .OR. FCHAR(4:6) .EQ. 'SRI') THEN
             CALL ERRT(101,'OPERATION DOES NOT WORK FOR PCA FILES',NE)
             GOTO 9999
          ENDIF

          USE_PCA = .TRUE.

          CALL RDPRMC(ANS, NCHAR, .TRUE.,
     &      'SUBTRACT AVERAGE IN PCA RECONSTITUTION? (N/Y)',NULL,IRTFLG)
          IF (IRTFLG .NE. 0) RETURN
          ADD_AVRG = (ANS .EQ. 'N') 

        ELSE
          USE_PCA = .FALSE.
     
C         IDIFF= SWITCH DETERMINING WHETHER THE AVERAGE IMAGE 
C         SHOULD BE SUBTRACTED.
C         IDIFF=1 -- SUBTRACT. IDIFF=-1 -- SUBTRACT 
C         AVERAGE IMAGE, AND THEN DIVIDE RESULT BY AVERAGE IMAGE 
C         TO OBTAIN  SO-CALLED "IMPORTANCE IMAGE" USED IN EARLIER
C         LITERATURE.

   	  IDIFF = 0
          IF (FCHAR(6:6) .EQ. 'D') THEN
C            'CA SRD'
             IDIFF = 1 
	  ELSEIF (FCHAR(6:6) .EQ. 'I') THEN
C            'CA SRI'
             IDIFF = -1
          ENDIF
        ENDIF
 
C       OPEN PIXEL COORDINATE FILE
        CALL OPAUXFILE(.FALSE.,FILNMP,DATEXC,LUNP,0,
     &                       'O', ' ',.TRUE.,IRTFLG)
	READ(LUNP,*) NMASKP,NDUM1,NDUM2,NDUM3,NDUM4 
        WRITE(NOUT,*)' NUMBER OF ACTIVE PIXELS: ',NMASKP
        IF (NMASKP .LE. 0) THEN
           CALL ERRT(101,'NO PIXELS',NE)
           GOTO 9999
        ENDIF

C       OPEN MASK FILE, RETURNS IFORM  AND NSLICE
        CALL OPFILEC(0,.FALSE.,FILNMM,LUNM,'O',IFORM,
     &              NSAMM,NROWM,NSLICE, MAXIMT,' ',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999
 
        IF ((NSAMM .NE. NSAM) .OR. (NROWM .NE. NROW)) THEN
              WRITE(NOUT, 93) NSAM, NROW, NSAMM, NROWM 
93            FORMAT('*** IMAGE DIMENSION (',I4,',',I4,')', 
     &               '  NOT SAME AS MASK  (',I4,',',I4,')')
              CALL ERRT(100,'JPMSK2',NE)
              GOTO 9999
        ENDIF
 
        NPIX = NSAM*NROW*NSLICE 
        ALLOCATE (BUFM(NPIX),STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(46,'JPMSK2; BUFM',NPIX)
           RETURN
        ENDIF

C       READ MASK IN BUFM
        CALL REDVOL(LUNM,NSAM,NROW,1,NSLICE,BUFM,IRTFLG)
        NMASK = 0
        DO I=1,NSAM*NROW*NSLICE
           IF (BUFM(I) .GT. 0.5) NMASK = NMASK + 1
        ENDDO

        WRITE(NOUT,*)' NUMBER OF PIXELS UNDER MASK: ',NMASK
        IF (NMASK .LE. 0) THEN
           CALL ERRT(101,'NO PIXELS UNDER MASK',NE)
           GOTO 9999
        ENDIF

C       FACTOR SELECTION 
        ALLOCATE(NUMFAC(NFAC), COO(NFAC),STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
            MWANT = 2 * NFAC
            CALL ERRT(46,'NUMFAC & COO',MWANT)
            GOTO 9999
	ENDIF

        WRITE(NOUT,*)' NUMBER OF FACTORS AVAILABLE: ',NFAC
        NUSE   = NFAC
        CALL FILELISTB(LUNDOC,NUMFAC,NFAC,NUSE,
     &     'FACTOR NUMBERS OR DOC. FILE NAME FOR FACTOR LIST',
     &     IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999
  
C       OPEN EIGENVALUE FILE
        CALL OPAUXFILE(.FALSE.,FILNME,DATEXC,LUNE,0,
     &                       'O', ' ',.TRUE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

C       READ _EIG FILE HEADER
	READ(LUNE,*) NFACT, SUMP, TRACE, KIND_PCA

C       MEMORY ALLOCATION

C       JPIC  = OFFSET OF ARRAY CONTAINING RECONSTITUTED IMAGE

        IF (USE_PCA) THEN
           JPIC = 1
	   LCI	= JPIC  + NPIX
	   LIDI	= LCI 	+ NUMIM * NFAC
	   LCP	= LIDI	+ NUMIM
	   LD	= LCP 	+ NMASK  * NFAC
	   JIM  = LD	+ NFAC
	   LPJ  = JIM   + NMASK
	   JTOT = LPJ   + NMASK

        ELSE
           JPIC = 1
	   LCI	= JPIC  + NPIX
	   LWI	= LCI 	+ NUMIM * NFAC
	   LIDI	= LWI	+ NUMIM
	   LCP	= LIDI	+ NUMIM
	   LD	= LCP 	+ NMASK  * NFAC
	   JIM	= LD	+ NFAC
	   LWP  = JIM   + NMASK
	   JTOT = LWP   + NMASK
        ENDIF

C       COMPLAIN IF EXCESSIVE ALLOCATION
        IASK8 = JTOT * 4
        CALL BIGALLOC(IASK8,IOK,.FALSE.,.TRUE.,IRTFLG)

        ALLOCATE(QBUF(JTOT),STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(46,'QBUF',JTOT)
           GOTO 9999
        ENDIF

C       LOAD THE _IMC, _PIX, & _EIG DATA INTO LOCAL ARRAYS
        IF (USE_PCA) THEN
           CALL PCA_SRIP2(NUMIM, NMASK, NFAC, LUNI, LUNP, LUNE,
     &                    QBUF(LCI), QBUF(LIDI), QBUF(LCP), 
     &                    QBUF(LD),  QBUF(LPJ), IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999
        ELSE
	   CALL SRIP2(NUMIM,NMASK,NFAC,LUNI,LUNP,LUNE,
     &		      QBUF(LCI),QBUF(LWI),QBUF(LIDI),
     &                QBUF(LCP),QBUF(LWP), QBUF(LD))

	ENDIF 

	CLOSE(LUNI)
	CLOSE(LUNP)

C       NOW THAT THE NUMBER OF FACTORS USED IN THE INITIAL ANALYSIS IS
C       KNOWN, SWAP FACTOR SELECTION ARRAY AND CHECK AGAINST THIS NUMBER

        DO  I=1,NUSE
           IF (NUMFAC(I) .GT. NFAC) THEN
              WRITE(NOUT,9801) NFAC
9801          FORMAT(' ** AXIS NUMBER OUT OF RANGE. MAXIMUM = ',I2)
              WRITE(NOUT,9802) NFAC, NUMFAC(I)
9802          FORMAT(' Number of factors (or eigenvectors) used to ',
     &               ' create data files is: ',I6,
     &               ' you have asked for factor: ',I4)
	     GOTO 9999
          ENDIF
        ENDDO

        IF (SRA) THEN
C          ----------------------------- ARBITRARY ----------- 'CA SRA'
C          RECONSTITUTION FOR DUMMY IMAGES USING ARBITRARY COORDINATES
           NVAL = NUSE
           CALL RDPRA('COORDINATES FOR EACH FACTOR SELECTED',
     &         NVAL,0,.FALSE.,QBUF,NUSE,IRTFLG)

C          ZERO COO ARRAY
	   COO = 0.0

           IMAX = 0
           DO K=1,NUSE
               DO  I=1,NFAC
                 IF (NUMFAC(K) .EQ. I) THEN
                    COO(I) = QBUF(K)
                    IF (I .GT. IMAX) IMAX = I
                    EXIT
                 ENDIF
	       ENDDO
          ENDDO

C         WRITE OUT COORDINATES TO BE USED
          WRITE(NOUT,*) ' COORDINATES USED:'
          WRITE(NOUT,281) (COO(I),I=1,IMAX)
281       FORMAT(1X,8F8.3)
          WRITE(NOUT,*) ' '

C         NOW CALL RECONSTITUTION ROUTINE FOR DUMMY IMAGE
          IF (USE_PCA) THEN
              CALL PCA_RECDUM(NUMIM, NMASK, NUSE, NUMFAC, 
     &              NFAC, AV,QBUF(JIM), QBUF(LCP),
     &              COO, QBUF(LD), QBUF(LPJ), ADD_AVRG)
	  ELSE
              CALL RECDUM(NUMIM,NMASK,NUSE,NUMFAC,NFAC,SUMP,
     &              FMAXT,FMINT,AV,SIG,IDIFF,QBUF(JIM),
     &              QBUF(LCP),COO,QBUF(LD),QBUF(LWI),QBUF(LWP))
          ENDIF

          MAXIM = 0
          CALL OPFILEC(0,.TRUE.,FILNAM,LUN,'U',IFORM,NSAM,NROW,NSLICE,
     &                   MAXIM,'RECONSTITUTED OUTPUT',.FALSE.,IRTFLG)
          IF (IRTFLG .NE. 0) GOTO 9999

C         REPLACE PIXELS IN MASK AREA BY THEIR TRUE VALUES
C         COPY OUTPUT IMAGE QBUF(JIM:-) TO RECONSTITUTED IMAGE
C         QBUF(JPIC:-) SUBJECT TO MASK IN BUFM

          IF (USE_PCA) THEN
              FMINT = MINVAL(QBUF(JIM:JIM+NMASK-1)) 
          ENDIF

C         PUT FMINT IN THE RECONSTITUTED IMAGE: QBUF(JPIC:)
          QBUF(JPIC:JPIC+NPIX-1) = FMINT

          ILOC = JIM 
          DO  L = 1, NPIX
             IF (BUFM(L) .GT. 0.5) THEN
                QBUF(JPIC+L-1) = QBUF(ILOC)
                ILOC           = ILOC + 1
             ENDIF
          ENDDO

C         WRITE IMAGE ONTO DISK
          CALL WRTVOL(LUN,NSAM,NROW,1,NSLICE,QBUF(JPIC),IRTFLG)
          CLOSE(LUN)
	   
        ELSEIF (SRE) THEN
C         ------------- EIGENIMAGE RECONSTITUTION ----------- 'CA SRE'
 
C          ZERO COO ARRAY
	   COO = 0.0

C          SET COORDINATE TO 1.0 FOR EACH FACTOR IN USE
           DO K=1,NUSE
               DO  I=1,NFAC
                 IF (NUMFAC(K) .EQ. I) THEN
                    COO(I) = 1.0
                    EXIT
                 ENDIF
	       ENDDO
           ENDDO


C         CALL RECONSTITUTION ROUTINE FOR DUMMY IMAGE
          IF (USE_PCA) THEN
              CALL PCA_RECDUM(NUMIM, NMASK, NUSE, NUMFAC, 
     &              NFAC, AV,QBUF(JIM), QBUF(LCP),
     &              COO, QBUF(LD), QBUF(LPJ), ADD_AVRG)
	  ELSE
              CALL RECDUM(NUMIM,NMASK,NUSE,NUMFAC,NFAC,SUMP,
     &              FMAXT,FMINT,AV,SIG,IDIFF,QBUF(JIM),
     &              QBUF(LCP),COO,QBUF(LD),QBUF(LWI),QBUF(LWP))
          ENDIF

          MAXIM = 0
          CALL OPFILEC(0,.TRUE.,FILNAM,LUN,'U',IFORM,NSAM,NROW,NSLICE,
     &                 MAXIM,'RECONSTITUTED OUTPUT',.FALSE.,IRTFLG)
          IF (IRTFLG .NE. 0) GOTO 9999

C         REPLACE PIXELS IN MASK AREA BY THEIR TRUE VALUES
C         COPY OUTPUT IMAGE QBUF(JIM:-) TO RECONSTITUTED IMAGE
C         QBUF(JPIC:-) SUBJECT TO MASK IN BUFM

          IF (USE_PCA) THEN
              FMINT = MINVAL(QBUF(JIM:JIM+NMASK-1)) 
          ENDIF

C         PUT FMINT IN THE RECONSTITUTED IMAGE: QBUF(JPIC:)
          QBUF(JPIC:JPIC+NPIX-1) = FMINT

          ILOC = JIM 
          DO  L = 1, NPIX
             IF (BUFM(L) .GT. 0.5) THEN
                QBUF(JPIC+L-1) = QBUF(ILOC)
                ILOC           = ILOC + 1
             ENDIF
          ENDDO

C         WRITE IMAGE ONTO DISK
          CALL WRTVOL(LUN,NSAM,NROW,1,NSLICE,QBUF(JPIC),IRTFLG)
          CLOSE(LUN)
	   
        ELSEIF (SR) THEN
C          ---------------- IMAGE RECONSTITUTION  ------------ 'CA SR'
           CALL FILERD(FILPRE,NLET,NULL,'OUTPUT FILE PREFIX~',IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999

C          LOOP OVER ALL REQUESTED IMAGES
           DO IM=1,IMUSED
             IMNO = 0
             DO I = 1,NUMIM 
	        IF (TRANSFER(QBUF(LIDI + I - 1),I) .EQ. INUMBR(IM))THEN
                   IMNO = I
                   EXIT
                ENDIF
             ENDDO
             IF (IMNO .EQ. 0) THEN
                WRITE(NOUT,*) ' IMAGE: ',INUMBR(IM),'  NOT FOUND'
                CYCLE
             ENDIF

C            RECONSTITUTION FOR CURRENT IMAGE
             IF (USE_PCA) THEN
               CALL PCA_REMAKE(IMNO, NUMIM, NMASK, NUSE, NUMFAC, 
     &              NFAC, AV,QBUF(JIM), QBUF(LCP), 
     &              QBUF(LCI), QBUF(LD), QBUF(LPJ), ADD_AVRG)
             ELSE
               CALL RECONS(IMNO,NUMIM,NMASK,NUSE,NUMFAC,NFAC,SUMP,
     &                  FMAXT,FMINT,AV,IDIFF,QBUF(JIM),QBUF(LCP),
     &                  QBUF(LCI),QBUF(LD),QBUF(LWI),QBUF(LWP))
             ENDIF

C            OPEN IMAGE OUTPUT FILE
             NLET1 = 0
             CALL FILGET(FILPRE,FILNAM,NLET1,IMNO,IRTFLG)
             IF (IRTFLG .NE. 0)  GOTO 9999

             MAXIM = 0
             CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'U',IFORM,
     &                   NSAM,NROW,NSLICE,
     &                   MAXIM,' ',.FALSE.,IRTFLG)
             IF (IRTFLG .NE. 0) GOTO 9999

C            REPLACE PIXELS IN MASK AREA BY THEIR TRUE VALUES
C            COPY OUTPUT IMAGE QBUF(JIM:-) TO RECONSTITUTED IMAGE
C            QBUF(JPIC:-) SUBJECT TO MASK IN BUFM

             IF (USE_PCA) THEN
                 FMINT = MINVAL(QBUF(JIM:JIM+NMASK-1)) 
             ENDIF

C	     PUT FMINT IN THE RECONSTITUTED IMAGE: QBUF(JPIC:)
             QBUF(JPIC:JPIC+NPIX-1) = FMINT

             ILOC = JIM 
             DO  L = 1, NPIX
                IF (BUFM(L) .GT. 0.5) THEN
                   QBUF(JPIC+L-1) = QBUF(ILOC)
                   ILOC           = ILOC + 1
                ENDIF
	     ENDDO

C            WRITE IMAGE ONTO DISK
             CALL WRTVOL(LUN,NSAM,NROW,1,NSLICE,QBUF(JPIC),IRTFLG)
             CLOSE(LUN)
	   ENDDO 
        ENDIF

9999	CLOSE(LUN)
    	CLOSE(LUNI)
    	CLOSE(LUNP)
        IF (ALLOCATED(COO))    DEALLOCATE(COO)
	IF (ALLOCATED(NUMFAC)) DEALLOCATE(NUMFAC)
	IF (ALLOCATED(QBUF))   DEALLOCATE(QBUF)
	IF (ALLOCATED(BUFM))   DEALLOCATE(BUFM)

	END


C ++********************************************************************
C                                                                      *
C  SRIP2(NIMA,NPIX,NFAC,LUNI,LUNP,LUNE,CI,WI,IDI,CP,WP,D)
C
C  REMOVED FROM SRIPE.F    DEC 90 AL
C
C  PURPOSE:  LOADS CORAN SPECIFIC FILES                                                          *
C                                                                      *
C  PARAMETERS:  CI                                            RETURNED                                                         *
C               WI                                            RETURNED                                                         *
C               IDI                                           RETURNED                                                         *
C               CP                                            RETURNED                                                         *
C               WP                                            RETURNED                                                         *
C               D                                             RETURNED                                                         *
C                                                                      *
C***********************************************************************

	SUBROUTINE SRIP2(NIMA,NPIX,NFAC,LUNI,LUNP,LUNE,
     &                   CI,WI,IDI,CP,WP,D) 

	DIMENSION CI(NIMA,NFAC), WI(NIMA), IDI(NIMA)
	DIMENSION CP(NPIX,NFAC), WP(NPIX), D(NFAC)

	DO  I=1,NIMA
	   READ(LUNI,*) (CI(I,N),N=1,NFAC), WI(I),CODUM,FIM,FACTDUM
           IDI(I) = FIM
	ENDDO

	DO  I=1,NPIX
	   READ(LUNP,*) (CP(I,N),N=1,NFAC), WP(I),CODUM,FPIXDUM,FDUM
	ENDDO

	DO  I=1,NFAC
	   READ(LUNE,*) D(I)
        ENDDO

	END

C **********************************************************************
C
C *  AUTHOR :  MAHIEDDINE LADJADJ                                          *
C
C  PURPOSE: LOADS PCA INPUT FILES                                                          *
C                                                                      *
C  PARAMETERS:  CI                                            RETURNED                                                         *
C               IDI                                           RETURNED                                                         *
C               CP                                            RETURNED                                                         *
C               D                                             RETURNED                                                         *
C               PJ                                            RETURNED                                                         *
C                                                                      *
C **********************************************************************

        SUBROUTINE PCA_SRIP2(NIMA,NPIX,NFAC,LUNI,LUNP,LUNE,
     &             CI,IDI,CP,D,PJ,IRTFLG)

        INCLUDE 'CMBLOCK.INC'

        DIMENSION CI(NIMA,NFAC), IDI(NIMA), CP(NPIX,NFAC)
        DIMENSION PJ(NPIX), D(NFAC)

        IRTFLG = 0

c       READ THE _IMC  FILE.
        DO I=1,NIMA
           READ(LUNI,*) (CI(I,N),N=1,NFAC),WDUM,DORDUM,FIM,ACTDUM
           IDI(I) = FIM
        ENDDO

C       READ THE _PIX  FILE.
        DO I=1,NPIX
           READ(LUNP,*) (CP(I,N),N=1,NFAC),PJ(I),CODUM,FPIXDUM,FDUM
        ENDDO

C       READ THE PCA _EIG  FILE TO GET THE EIGENVALUES.
        DO I=1,NFAC
           READ(LUNE,*) D(I)
        ENDDO

        WRITE(NOUT,*) ' DATA IS FROM PCA USING COVARIANCE MATRIX'
        RETURN

        END

C ++********************************************************************
C  RECONS                                                                     *
C                                                                      *
C  RESTORED FROM LISTING 9/16/85 JF
C                                                                      *
C **********************************************************************
C **********************************************************************
C
C PURPOSE: RECONSTITUTES IMAGES USING COORDINATES FROM _IMC & _PIX FILES
C                                                                      *
C  PARAMETERS:  IMNO                                          SENT
C               NIMA                                          SENT
C               NPIX                                          SENT
C               NF                                            SENT
C               NV                                            SENT                                                         *
C               NFAC                                          SENT
C               SUMP                                          SENT
C               FMAX1,FMIN1                                   RETURNED
C               PIA                                           RETURNED                                                         *
C               IDIFF                                         SENT
C               RIM                                           RETURNED                                                         *
C               CP                                            SENT                                                         *
C               CI                                            SENT                                                         *
C               D                                             SENT                                                         *
C               WI                                            SENT                                                        *
C               WP                                            SENT                                                                                                   *
C                                                                      *
C***********************************************************************

        SUBROUTINE RECONS(IMNO,NIMA,NPIX,NF,NV,NFAC,SUMP,
     &              FMAXT,FMINT,PIA,IDIFF,RIM,CP,CI,D,WI,WP)

        DIMENSION RIM(NPIX), CP(NPIX,NFAC), CI(NIMA,NFAC), D(NFAC)
        DIMENSION WP(NPIX), WI(NIMA), NV(NF)

        COMMON BUF(1)

        INCLUDE 'CMBLOCK.INC'

C       ZERO BUF
        BUF(1:NFAC) = 0.0

        DO  L = 1,NF
           K      = NV(L)
           BUF(K) = CI(IMNO,K)
	ENDDO

C       WRITE OUT COORDINATES EFFECTIVE IN THIS RECONSTITUTION
        WRITE(NOUT,*) ' COORDINATES EFFECTIVE IN THIS RECONSTITUTION:'

        WRITE(NOUT,281) (BUF(L),L=1,NFAC)
281     FORMAT(2X,8F9.5)

        WRITE(NOUT,*) ' '

        DELTA = 1.0 - FLOAT(IDIFF)
        SUM   = 0

C       CHANGED FROM 10000 APR 01 al
        FMINT = HUGE(FMINT)
        FMAXT = -FMIN

C       LOOP OVER ALL PIXELS

        DO  I=1,NPIX
           RIM(I) = 0.0
           DO  L=1,NF
              K      = NV(L)
              RIM(I) = RIM(I) + CP(I,K) * CI(IMNO,K) / SQRT(D(K))
           ENDDO

           IF (IDIFF .GE. 0) THEN
              RIM(I) = WP(I) * WI(IMNO) * (DELTA + RIM(I)) * SUMP
           ENDIF

           FMAXT = MAX (RIM(I),FMAXT)
           FMINT = MIN (RIM(I),FMINT)

           SUM = SUM + RIM(I)
        ENDDO

        PIA = SUM / FLOAT(NPIX)

        END


C ++********************************************************************
C                                                                      *
C   RECDUM                                                             *
C                                                                      *
C **********************************************************************
C **********************************************************************
C                                                                      *
C  RECDUM(NIMA,NPIX,NF,NV,NFAC,SUMP,
C         FMAX,FMIN,PIA,SIG,IDIFF, RIM,CP,CI,D,WI,WP) 
C                                                                      *
C  PURPOSE:  RECONSTITUTES DUMMY IMAGES USING USER-SUPPLIED COORDINATES
C
C  PARAMETERS:
C   NIMA  		NUMBER OF ACTIVE IMAGES
C   NPIX   		NUMBER OF ACTIVE PIXELS
C   NFAC    		NUMBER OF FACTORS USED IN THE ANALYSIS
C   SUMP     		TOTAL WEIGHT
C   FMAX, FMIN 		MAXIMUM, MINIMUM OF RECONSTITUTED IMAGE
C   PIA			AVERAGE OF RECONSTITUTED IMAGE (SUPPLIED)
C   SIG			STANDARD DEVIATION OF RECONSTITUTED IMAGE
C   IDIFF    		FLAG INDICATING THE TYPE OF IMAGE COMPUTED
C 	=1    		   DIFFERENTIAL IMAGE (0-FACTOR NOT ADDED)
C       =0		   TOTAL IMAGE        (0-FACTOR IMAGE ADDED)
C       =-1    		   IMPORTANCE IMAGE (SAME AS DIFFERENTIAL BUT
C			   NO WEIGHTING USED)
C   RIM(NPIX)		OUTPUT IMAGE
C   CP(NPIX,NFAC)	PIXEL COOS AS NEEDED BY SRIPE
C   CI(NFAC)		IMAGE COOS
C   D(NFAC)		EIGENVALUES AS NEEDED BY SRIPE
C   WP(NPIX)		PIXEL WEIGHTS
C   WI(NIMA)		IMAGE WEIGHTS 
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

         SUBROUTINE RECDUM(NIMA,NPIX,NF,NV,NFAC,SUMP,
     &             FMAX,FMIN,PIA,SIG,IDIFF, RIM,CP,CI,D,WI,WP)

         DIMENSION RIM(NPIX), CP(NPIX,NFAC), CI(NFAC), D(NFAC)
         DIMENSION WP(NPIX), WI(NIMA), NV(NF)

         IF (IDIFF .GE. 0) THEN
            WIAVG = SUM(WI) / FLOAT(NIMA) 
         ENDIF

         FMIN  = HUGE(FMIN)
         FMAX  = -FMIN
         PIA   = 0
         DELTA = 1. - FLOAT(IDIFF)

         DO I = 1, NPIX
           RIM(I) = 0.0
           DO L = 1,NF
              K      = NV(L)
              RIM(I) = RIM(I) + CP(I,K) * CI(K) / SQRT(D(K))
           ENDDO

           IF (IDIFF .GE. 0) THEN
              RIM(I) = WP(I) * WIAVG * (DELTA + RIM(I)) * SUMP
           ENDIF

           IF (RIM(I) .GT .FMAX) FMAX = RIM(I)
           IF (RIM(I) .LT .FMIN) FMIN = RIM(I)
           PIA = PIA + RIM(I)
         ENDDO

         PIA = PIA / FLOAT(NPIX)

         RETURN
         END


C++*********************************************************************
C
C PCA_RECDUM(NIMA, NPIX, NF, NV, NFAC,
C            PIA, RIM, CP, CI, D, PJ, ADD_AVRG)
C
C PURPOSE: RECONSTITUTES DUMMY IMAGES USING USER-SUPPLIED COORDINATES
C
C PARAMETERS:
C    NIMA	        NUMBER OF ACTIVE IMAGES
C    NPIX	        NUMBER OF ACTIVE PIXELS
C    NFAC	        NUMBER OF FACTORS USED IN THE ANALYSIS
C    SUMP	        TOTAL WEIGHT
C    PIA	        AVERAGE OF RECONSTITUTED IMAGE (SUPPLIED)
C    RIM(NPIX)          OUTPUT IMAGE
C    CP(NPIX,NFAC)	PIXEL COOS AS NEEDED BY SRIPE
C    CI(NFAC)           IMAGE COOS
C    D(NFAC)            EIGENVALUES AS NEEDED BY SRIPE
C    PJ(I)		AVERAGE OF INDIVIDUAL IMAGE.
C    SDV(I)             STANDARD DEVIATION
C
C++*********************************************************************

       SUBROUTINE PCA_RECDUM(NIMA, NPIX, NF, NV, NFAC,
     &                       PIA, RIM, CP, CI, D, PJ, ADD_AVRG)

        DIMENSION :: RIM(NPIX), CP(NPIX,NFAC), CI(NFAC), D(NFAC)
        DIMENSION :: PJ(NPIX), NV(NF)

	LOGICAL   :: ADD_AVRG

        PIA = 0.0

        DO I = 1, NPIX
	  IF (ADD_AVRG) THEN
             RIM(I) = PJ(I)
          ELSE
             RIM(I) = 0
          ENDIF

          DO L = 1, NF
             K      = NV(L)
             RIM(I) = RIM(I) + CP(I,K) * CI(K) / SQRT(D(K))
          ENDDO
                                                
          PIA = PIA + RIM(I)

        ENDDO

        END

 
C++*********************************************************************
C
C  PCA_REMAKE(IMNO, NIMA, NPIX, NF, NV, NFAC,
C                 PIA, RIM, CP, CI, D, PJ, ADD_AVRG)
C
C PURPOSE: RECONSTITUTES IMAGES USING COORDINATES FROM _IMC & _PIX FILES
C
C PARAMETERS:
C    IMNO          IMAGE NUMBER
C    NIMA          NUMBER OF ACTIVE IMAGES
C    NPIX          NUMBER OF ACTIVE PIXELS
C    NFAC          NUMBER OF FACTORS USED IN THE ANALYSIS
C    PIA           AVERAGE OF RECONSTITUTED IMAGE (SUPPLIED)
C    RIM(NPIX)     OUTPUT IMAGE
C    CP(NPIX,NFAC) PIXEL COOS AS NEEDED BY SRIPE
C    CI(NFAC)      IMAGE COOS
C    D(NFAC)       EIGENVALUES AS NEEDED BY SRIPE
C    PJ(I)         AVERAGE OF INDIVIDUAL IMAGE.
C    ADD_AVRG      ADD THE AVERAGE TO IMAGE
C
C++*********************************************************************
  
        SUBROUTINE PCA_REMAKE(IMNO, NIMA, NPIX, NF, NV, NFAC,
     &                     PIA, RIM, CP, CI, D, PJ, ADD_AVRG)

        DIMENSION :: RIM(NPIX), CP(NPIX,NFAC), CI(NIMA,NFAC), D(NFAC)
        DIMENSION :: PJ(NPIX),  NV(NF)
        REAL      :: SUM
        LOGICAL   :: ADD_AVRG

        SUM = 0.0

C       LOOP OVER ALL PIXELS
        DO I = 1, NPIX

C	  REPLACE THE AVERAGES TO THE ORIGINAL DATA IF(PCA_AVRG)=TRUE
          IF (ADD_AVRG) THEN
             RIM(I) = PJ(I)
          ELSE
             RIM(I) = 0
          ENDIF

          DO L = 1, NF
             K      = NV(L)
#ifdef DEBUG
             if (i .lt. 1 .or. i .gt. npix) write(6,*) 'bad i:',i,l,k
             if (k .lt. 1 .or. k .gt. nfac) write(6,*) 'bad k:',k,l,i
#endif
             RIM(I) = RIM(I) + CP(I, K) * CI(IMNO, K) / SQRT(D(K))
          ENDDO

          SUM = SUM + RIM(I)
        ENDDO

        PIA = SUM / FLOAT(NPIX)

        END
 
 

@


1.49
log
@enter
@
text
@d26 1
a26 1
C=* Email: spider@@wadsworth.org                                        *
@


1.48
log
@GPL_2010
@
text
@d211 1
a211 1
     &     'ENTER FACTOR NUMBERS OR DOC. FILE NAME FOR FACTOR LIST',
d294 1
a294 1
           CALL RDPRA('ENTER COORDINATES FOR EACH FACTOR SELECTED',
@


1.47
log
@'bad j msg removed'
@
text
@a20 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d22 5
a26 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d28 1
a28 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d33 1
a33 1
C=* This program is distributed in the hope that it will be useful,    *
d35 1
a35 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a36 1
C=*                                                                    *
d38 1
a38 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
a577 23
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
C=*                                                                    *
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* This program is distributed in the hope that it will be useful,    *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
a662 23
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
C=*                                                                    *
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* This program is distributed in the hope that it will be useful,    *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
@


1.46
log
@_IMC or _PIX Line length bug
@
text
@d876 2
a877 5
             if (i .lt. 1 .or. i .gt. npix) write(6,*) 'bad i:',i,l,k,i
             if (k .lt. 1 .or. k .gt. nfac) write(6,*) 'bad k:',k,l,k,i
             if (j .lt. 1 .or. j .gt. npix) then
                    write(6,*) 'bad j:',j,l,k,i
             endif
@


1.45
log
@volumes iform was wrong
@
text
@d18 1
d22 1
a22 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d164 1
a164 1
	READ(LUNP,*) NMASKP 
d522 1
a522 1
	   READ(LUNP,*) (CP(I,N),N=1,NFAC), WP(I),CODUM,FPIXDUM
d563 1
a563 1
           READ(LUNP,*) (CP(I,N),N=1,NFAC),PJ(I),CODUM,FPIXDUM
@


1.44
log
@nslice supported
@
text
@d17 1
d170 1
a170 1
C       OPEN MASK FILE
d172 1
a172 1
     &              NSAMM,NROWM,NSLICEM, MAXIMT,' ',.FALSE.,IRTFLG)
d175 1
a175 2
        IF ((NSAMM   .NE. NSAM)    .OR. 
     &      (NROWM   .NE. NROW)) THEN
a181 1
        NSLICE = NSLICEM         
d183 1
a183 1
        NPIX = NSAMM*NROWM*NSLICEM 
d191 1
a191 1
        CALL REDVOL(LUNM,NSAMM,NROWM,1,NSLICEM,BUFM,IRTFLG)
d193 1
a193 1
        DO I=1,NSAMM*NROWM*NSLICEM
a331 1
          IFORM = 1
a387 1
          IFORM = 1
a450 1
             IFORM = 1
@


1.43
log
@used rdpra instead of rdpraf
@
text
@d182 2
a183 1
          
d334 1
a334 1
          CALL OPFILEC(0,.TRUE.,FILNAM,LUN,'U',IFORM,NSAM,NROW,1,
d358 1
a358 1
          CALL WRTVOL(LUN,NSAM,NROW,1,1,QBUF(JPIC),IRTFLG)
d391 1
a391 1
          CALL OPFILEC(0,.TRUE.,FILNAM,LUN,'U',IFORM,NSAM,NROW,1,
d415 1
a415 1
          CALL WRTVOL(LUN,NSAM,NROW,1,1,QBUF(JPIC),IRTFLG)
d455 2
a456 1
             CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'U',IFORM,NSAM,NROW,1,
d480 1
a480 1
             CALL WRTVOL(LUN,NSAM,NROW,1,1,QBUF(JPIC),IRTFLG)
@


1.42
log
@GPL License fixed
@
text
@d16 1
a92 2
        DATA AMIN/-10E30/,AMAX/10E30/

a267 1
 
d297 2
a298 2
           CALL RDPRAF(QBUF,NUSE,NVAL,AMIN,AMAX,
     &        'ENTER COORDINATES FOR EACH FACTOR SELECTED',NULL,IRTFLG)
@


1.41
log
@HRI GPL License used
@
text
@a17 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d21 1
a21 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a40 6

C * COPYRIGHT (C)1985, 2003. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a534 1
C****************************************************************************
a546 1
C****************************************************************************
a584 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d588 1
a588 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a607 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a692 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d696 1
a696 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a715 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a783 1
C++************************************************************************
a803 1
C++************************************************************************
a834 1
C++************************************************************************
a854 1
C++************************************************************************
@


1.40
log
@ca sre coo bug (all same)
@
text
@d19 24
d541 1
d554 1
d595 24
d710 24
d806 1
d827 1
d859 1
d880 1
@


1.39
log
@srd & sri bugs
@
text
@d15 1
d348 13
a360 2
C         ZERO COO ARRAY
          COO = 0.0
d376 1
a376 1
     &                 MAXIM,' ',.FALSE.,IRTFLG)
@


1.38
log
@IMNO bug in 'CA SRD' & SRI
@
text
@d109 6
d245 1
a245 1
C       LOAD THE _IMC, _PIX, & _EIG FILES 
d318 1
a318 1
     &                   MAXIM,' ',.FALSE.,IRTFLG)
d397 11
a407 1
	     IMNO = INUMBR(IM)
a803 1

d806 1
a806 2
C	  PUT BACK THE AVERAGES TO THE ORIGINAL DATA IF(PCA_AVRG)=TRUE

d811 1
a811 1
          END IF
@


1.37
log
@NUMBER OF FACTORS AVAILABLE:
@
text
@d309 3
a311 3
             MAXIM = 0
             IFORM = 1
             CALL OPFILEC(0,.TRUE.,FILNAM,LUN,'U',IFORM,NSAM,NROW,1,
d313 1
a313 1
             IF (IRTFLG .NE. 0) GOTO 9999
d315 3
a317 3
C            REPLACE PIXELS IN MASK AREA BY THEIR TRUE VALUES
C            COPY OUTPUT IMAGE QBUF(JIM:-) TO RECONSTITUTED IMAGE
C            QBUF(JPIC:-) SUBJECT TO MASK IN BUFM
d319 3
a321 3
             IF (USE_PCA) THEN
                 FMINT = MINVAL(QBUF(JIM:JIM+NMASK-1)) 
             ENDIF
d323 2
a324 2
C	     PUT FMINT IN THE RECONSTITUTED IMAGE: QBUF(JPIC:)
             QBUF(JPIC:JPIC+NPIX-1) = FMINT
d326 7
a332 7
             ILOC = JIM 
             DO  L = 1, NPIX
                IF (BUFM(L) .GT. 0.5) THEN
                   QBUF(JPIC+L-1) = QBUF(ILOC)
                   ILOC           = ILOC + 1
                ENDIF
	     ENDDO
d334 3
a336 3
C            WRITE IMAGE ONTO DISK
             CALL WRTVOL(LUN,NSAM,NROW,1,1,QBUF(JPIC),IRTFLG)
             CLOSE(LUN)
d339 1
a339 1
C          ------------- EIGENIMAGE RECONSTITUTION ----------- 'CA SRE'
d341 2
a342 3
          DO  I=1,NFAC
             COO(I) = 1.0
          ENDDO
d344 1
a344 1
C         NOW CALL RECONSTITUTION ROUTINE FOR DUMMY IMAGE
d355 13
a367 5
              MAXIM = 0
             IFORM = 1
             CALL OPFILEC(0,.TRUE.,FILNAM,LUN,'U',IFORM,NSAM,NROW,1,
     &                   MAXIM,' ',.FALSE.,IRTFLG)
             IF (IRTFLG .NE. 0) GOTO 9999
d369 2
a370 3
C            REPLACE PIXELS IN MASK AREA BY THEIR TRUE VALUES
C            COPY OUTPUT IMAGE QBUF(JIM:-) TO RECONSTITUTED IMAGE
C            QBUF(JPIC:-) SUBJECT TO MASK IN BUFM
d372 5
a376 2
             IF (USE_PCA) THEN
                 FMINT = MINVAL(QBUF(JIM:JIM+NMASK-1)) 
d378 1
a378 11

C	     PUT FMINT IN THE RECONSTITUTED IMAGE: QBUF(JPIC:)
             QBUF(JPIC:JPIC+NPIX-1) = FMINT

             ILOC = JIM 
             DO  L = 1, NPIX
                IF (BUFM(L) .GT. 0.5) THEN
                   QBUF(JPIC+L-1) = QBUF(ILOC)
                   ILOC           = ILOC + 1
                ENDIF
	     ENDDO
d380 3
a382 3
C            WRITE IMAGE ONTO DISK
             CALL WRTVOL(LUN,NSAM,NROW,1,1,QBUF(JPIC),IRTFLG)
             CLOSE(LUN)
a383 2


d389 1
a389 1
C          LOOP OVER ALL IMAGES
d395 1
a395 1
               CALL PCA_REMAKE(IM, NUMIM, NMASK, NUSE, NUMFAC, 
d399 1
a399 1
               CALL RECONS(IM,NUMIM,NMASK,NUSE,NUMFAC,NFAC,SUMP,
d539 10
a548 1
C  PURPOSE:                                                            *
d550 10
a559 1
C  PARAMETERS:  NV                                            SENT                                                         *
a560 1
C               PIA                                           RETURNED                                                         *
d569 2
a570 2
        SUBROUTINE RECONS(J,NIMA,NPIX,NF,NV,NFAC,SUMP,
     &              FMAX1,FMIN1,PIA,IDIFF,RIM,CP,CI,D,WI,WP)
a578 4
        DATA FLTMAX/10E30/

C       WRITE OUT COORDINATES EFFECTIVE IN THIS RECONSTITUTION

d584 1
a584 1
           BUF(K) = CI(J,K)
d587 1
a587 1
C       WRITES TO RESULTS FILE
d591 1
a591 1
281     FORMAT(1X,8F9.5)
d599 2
a600 2
        FMIN1 = FLTMAX
        FMAX1 = -FMIN
d608 1
a608 1
              RIM(I) = RIM(I) + CP(I,K) * CI(J,K) / SQRT(D(K))
d612 1
a612 1
              RIM(I) = WP(I) * WI(J) * (DELTA + RIM(I)) * SUMP
d615 3
a617 2
           IF (RIM(I) .GT. FMAX1) FMAX1 = RIM(I)
           IF (RIM(I) .LT. FMIN1) FMIN1 = RIM(I)
d652 5
a656 5
C   IDIFF    		FLAG INDICATING THE TYPE OF IMAGE
C 	=1    		COMPUTE DIFFERENTIAL IMAGE (0-FACTOR NOT ADDED)
C       =0		COMPUTE TOTAL IMAGE (0-FACTOR IMAGE ADDED)
C       =-1    		COMPUTE IMPORTANCE IOMAGE (AS DIFFERENTIAL BUT
C			NO WEIGHTING USED)
d757 1
a757 1
C  PCA_REMAKE(J, NIMA, NPIX, NF, NV, NFAC,
d763 1
a766 1
C    SUMP          TOTAL WEIGHT
d773 1
a773 1
C    SDV(I)        STANDARD DEVIATION
d777 1
a777 1
        SUBROUTINE PCA_REMAKE(J, NIMA, NPIX, NF, NV, NFAC,
d781 1
a781 1
        DIMENSION :: PJ(NPIX), NV(NF)
d808 1
a808 1
             RIM(I) = RIM(I) + CP(I, K) * CI(J, K) / SQRT(D(K))
@


1.36
log
@j bug in call to pca_remake  fixed
@
text
@d188 1
@


1.35
log
@ca sra & ca sre
@
text
@d14 1
d397 1
a397 1
               CALL PCA_REMAKE(IMS, NUMIM, NMASK, NUSE, NUMFAC, 
d401 1
a401 1
               CALL RECONS(IMS,NUMIM,NMASK,NUSE,NUMFAC,NFAC,SUMP,
d789 7
@


1.34
log
@file formats
@
text
@d24 1
a24 1
C JPMSK2(LUN,LUNI,LUNE,LUNP,LUNM)
d65 1
d77 6
d87 9
a95 11
C	IMUSED IS THE NUMBER OF IMAGES WE WANT TO RECONSTRUCT.
        IBIG   = HUGE(IBIG)
        NILMAX = NIMAX	 
        CALL RDPRAI(INUMBR, NILMAX,IMUSED, 1,IBIG,
     &              'FILE NUMBERS TO BE USED',NULL,IRTFLG) 
        IF (IRTFLG .NE. 0) GOTO 9999
 
C       IF AN IMAGE NUMBER IS NOT FOUND IN THE INDEX ARRAY OF
C       _IMC00  THEN IT IS ASSUMED THAT A DUMMY IMAGE HAS TO BE
C       CREATED.  IN THAT CASE, COORDINATES FOR EACH FACTOR USED
C       ARE SOLICITED.
d187 4
a190 3
        NUSE   = NFAC	 
        CALL RDPRAI(NUMFAC, NFAC,NUSE, 1,NFAC,
     &              'ENTER FACTORS TO BE USED',NULL,IRTFLG) 
d192 1
a192 1
        
a224 1

d269 6
a274 18
        CALL FILERD(FILPRE,NLET,NULL,'OUTPUT FILE PREFIX~',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

C-------------------------------------------------
                  
C       LOOP OVER ALL IMAGES
 
        DO  IM=1,IMUSED
	  IMNO = INUMBR(IM)

          IMS = IMSEQ4(NUMIM,IMNO,QBUF(LIDI))
          IF (IMS .EQ. 0) THEN
             WRITE(NOUT,9700) IMNO
 9700        FORMAT(' NO COORDINATES FOR IMAGE NO: ',I7)

             NVAL = NUSE
             CALL RDPRAF(QBUF,NUSE,NVAL,AMIN,AMAX,
     &         'ENTER COORDINATES FOR EACH FACTOR SELECTED',NULL,IRTFLG)
d276 2
a277 2
C            ZERO COO ARRAY
	     COO = 0.0
d279 2
a280 2
             IMAX = 0
             DO K=1,NUSE
d288 1
a288 1
            ENDDO
d290 5
a294 5
C           WRITE OUT COORDINATES TO BE USED
            WRITE(NOUT,*) ' COORDINATES USED:'
            WRITE(NOUT,281) (COO(I),I=1,IMAX)
281         FORMAT(1X,8F8.3)
            WRITE(NOUT,*) ' '
d296 2
a297 2
C           NOW CALL RECONSTITUTION ROUTINE FOR DUMMY IMAGE
            IF (USE_PCA) THEN
d301 1
a301 1
	    ELSE
d305 43
a347 1
            ENDIF
d349 44
d394 2
a395 2
C           NOW CALL RECONSTITUTION ROUTINE FOR CURRENT IMAGE
            IF (USE_PCA) THEN
d399 1
a399 1
            ELSE
d403 1
a403 2
            ENDIF
          ENDIF
d405 8
a412 8
C         OPEN IMAGE OUTPUT FILE
          NLET1 = 0
          CALL FILGET(FILPRE,FILNAM,NLET1,IMNO,IRTFLG)
          IF (IRTFLG .NE. 0)  GOTO 9999

          MAXIM = 0
          IFORM = 1
          CALL OPFILEC(0,.FALSE.,FILNAM,LUN,'U',IFORM,NSAM,NROW,1,
d414 1
a414 1
          IF (IRTFLG .NE. 0) GOTO 9999
d416 3
a418 3
C         REPLACE PIXELS IN MASK AREA BY THEIR TRUE VALUES
C         COPY OUTPUT IMAGE QBUF(JIM:-) TO RECONSTITUTED IMAGE
C         QBUF(JPIC:-) SUBJECT TO MASK IN BUFM
d420 3
a422 3
          IF (USE_PCA) THEN
              FMINT = MINVAL(QBUF(JIM:JIM+NMASK-1)) 
          ENDIF
d424 2
a425 2
C	  PUT FMINT IN THE RECONSTITUTED IMAGE: QBUF(JPIC:)
          QBUF(JPIC:JPIC+NPIX-1) = FMINT
d427 13
a439 12
          ILOC = JIM 
          DO  L = 1, NPIX
             IF (BUFM(L) .GT. 0.5) THEN
                QBUF(JPIC+L-1) = QBUF(ILOC)
                ILOC           = ILOC + 1
             ENDIF
	  ENDDO

C         WRITE IMAGE ONTO DISK
          CALL WRTVOL(LUN,NSAM,NROW,1,1,QBUF(JPIC),IRTFLG)
          CLOSE(LUN)
	ENDDO 
a689 28



C ++********************************************************************
C                                                                      *
C  FUNCTION IMSEQ4(NUMIM,IMNO,IDI)                                                                    *
C                                                                      *
C  PURPOSE: CHECKS IF NUMBER IMNO IS CONTAINED IN ARRAY       
C            IDI.  IF YES, IT RETURNS THE ADDRESS IN IDI WHERE IMNO 
C           HAS BEEN LOCATED. IF NO, IT RETURNS 0.
C
C  PARAMETERS:                                                         *
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        INTEGER  FUNCTION IMSEQ4(NUMIM,IMNO,IDI)

        INTEGER   :: IDI(NUMIM)

        DO  I=1,NUMIM
          IF  (IMNO .EQ. IDI(I)) THEN
             IMSEQ4 = I
             RETURN
          ENDIF
        ENDDO
        IMSEQ4 = 0
        END
@


1.33
log
@CA SR  bug
@
text
@d13 1
d33 3
a35 3
C    LUNE     LOGICAL UNIT NUMBER OF EIGENVECTOR FILE
C    LUNP     LOGICAL UNIT NUMBER OF PIXEL COORDINATE FILE
C    LUNM     LOGICAL UNIT NUMBER FOR MASK FILE
a101 1

d193 1
a193 1
	READ(LUNE,*) NFACT, SUMP, TRACE
d377 1
a377 1
C  REMOVED FROM SRIPE.FOR   DEC 90 AL
d397 1
a397 1
	   READ(LUNI,*) (CI(I,N),N=1,NFAC), WI(I),FDUM,FIM
d437 1
a437 1
           READ(LUNI,*) (CI(I,N),N=1,NFAC), FDUM,FDUM1,FIM
d443 1
a443 1
           READ(LUNP,*) (CP(I,N),N=1,NFAC),FDUMWEIGHTP, FDUMCO, FDUMPIX 
a449 8

        READ(LUNE,*,IOSTAT=IER) PJ
        IF (IER .NE. 0) THEN
100	   IRTFLG = 1
           WRITE(NOUT,*) ' NO PIXEL AVERAGES IN _EIG FILE'
           CALL ERRT(101,'THIS _EIG FILE IS NOT FROM PCA',IER)
           RETURN
        ENDIF
@


1.32
log
@output formats changed
@
text
@d121 2
a122 1
          IF (FCHAR(7:7) .EQ. 'D') THEN
d124 2
a125 1
	  ELSEIF (FCHAR(7:7) .EQ. 'I') THEN
d133 3
a135 3
	READ(LUNP,*) NPIX 
        WRITE(NOUT,*)' NUMBER OF PIXELS: ',NPIX
        IF (NPIX .LE. 0) THEN
d154 1
d157 1
a157 2
           MWANT = NPIX 
           CALL ERRT(46,'JPMSK2; BUFM',MWANT)
a304 1
CC            CALL PCA_RECDUM(NUMIM, NPIX, NUSE, NUMFAC, 
a308 1
CC            CALL RECDUM(NUMIM,NPIX,NUSE,NUMFAC,NFAC,SUMP,
a316 1
CC             CALL PCA_REMAKE(IMS, NUMIM, NPIX, NUSE, NUMFAC, 
a320 1
CC             CALL RECONS(IMS,NUMIM,NPIX,NUSE,NUMFAC,NFAC,SUMP,
d402 1
a402 1
	   READ(LUNP,*) (CP(I,N),N=1,NFAC), WP(I)
d430 2
a431 2
        DIMENSION CI(NIMA,NFAC),IDI(NIMA),CP(NPIX,NFAC)
        DIMENSION PJ(NPIX),D(NFAC)
a432 1
        CHARACTER(LEN=150) :: CVAL
d443 1
a443 1
           READ(LUNP,*) (CP(I,N),N=1,NFAC)
a588 2
         DATA FLTMAX/10E30/

d590 1
a590 5
            WIAVG = 0.0
            DO  J = 1, NIMA
               WIAVG = WIAVG + WI(J)
            ENDDO
            WIAVG = WIAVG / FLOAT(NIMA)
d593 1
a593 1
         FMIN  = FLTMAX
d607 1
a607 1
           END IF
@


1.31
log
@mask bug
@
text
@d27 1
a27 1
C            FILES: _IMC , _PIX , AND _EIG 
d52 4
a55 4
        COMMON  /COMMUN/         FILNAM,FILNMP,FILNMC,FILNME, FILPAT1,
     &                           FILPRE,MSKNAM
        CHARACTER(LEN=MAXNAM) :: FILNAM,FILNMP,FILNMC,FILNME, FILPAT1,
     &                           FILPRE,MSKNAM
d58 1
a58 1
        LOGICAL                            :: USE_PCA,ADD_AVRG,USEMASK
d60 1
a60 1
        LOGICAL, ALLOCATABLE, DIMENSION(:) :: BUFM
d94 1
d138 4
a141 7
        MAXIMT = 0
        CALL FILERD(MSKNAM,NLET,NULL,'MASK (USED IN <CA S>)',IRTFLG)
        IF (IRTFLG .EQ. 0) THEN
C           CHECK MASK SIZE
            CALL OPFILEC(0,.FALSE.,MSKNAM,LUNM,'O',IFORM,
     &                 NSAMM,NROWM,NSLICEM, MAXIMT,' ',.FALSE.,IRTFLG)
           IF (IRTFLG .NE. 0) GOTO 9999
d143 8
a150 8
           IF ((NSAMM   .NE. NSAM)    .OR. 
     &         (NROWM   .NE. NROW)) THEN
                 WRITE(NOUT, 93) NSAM, NROW, NSAMM, NROWM 
93               FORMAT('*** IMAGE DIMENSION (',I4,',',I4,')', 
     &                  '  NOT SAME AS MASK  (',I4,',',I4,')')
                 CALL ERRT(100,'JPMSK2',NE)
                 GOTO 9999
           ENDIF
d152 6
a157 6
           ALLOCATE (BUFM(NPIX),STAT=IRTFLG)
           IF (IRTFLG .NE. 0) THEN
              MWANT = NPIX 
              CALL ERRT(46,'JPMSK2; BUFM',MWANT)
              RETURN
           ENDIF
d159 6
a164 15
C          READ MASK IN BUFM
           NMASK = 0
           ILOCM = 0
           DO I=1,NROWM*NSLICEM
              CALL REDLIN(LUNM,BUF,NSAMM,I)
              DO J = 1,NSAMM
                 ILOCM = ILOCM + 1
                 IF (BUF(J) .GT. 0.5) THEN
                    BUFM(ILOCM) = .TRUE.
                    NMASK       = NMASK + 1
                 ELSE
                    BUFM(ILOCM) = .FALSE.
                 ENDIF
              ENDDO
           ENDDO
d166 4
a169 8
           WRITE(NOUT,*)' NUMBER OF PIXELS UNDER MASK: ',NMASK
           IF (NMASK .LE. 0) THEN
              CALL ERRT(101,'NO PIXELS UNDER MASK',NE)
              GOTO 9999
           ENDIF
        ELSE
C          NO MASK NEEDED
           NMASK = NPIX  
a171 2
        USEMASK = NMASK .LT. NPIX

d191 1
a191 1
	READ(LUNE,*) NFACT, SUMP
a231 1
CC         CALL PCA_SRIP2(NUMIM, NPIX, NFAC, LUNI, LUNP, LUNE,
a237 1
CC         CALL SRIP2(NUMIM,NPIX,NFAC,LUNI,LUNP,LUNE,
d340 10
a349 4
          IF (USEMASK) THEN
C            REPLACE PIXELS IN MASK AREA BY THEIR TRUE VALUES
C	     COPY OUTPUT IMAGE QBUF(JIM:-) TO RECONSTITUTED IMAGE
C	     QBUF(JPIC:-) SUBJECT TO MASK IN BUFM
d351 5
a355 2
             IF (USE_PCA) THEN
                FMINT = MINVAL(QBUF(JIM:JIM+NMASK-1)) 
d357 1
a357 3

C	     PUT FMINT IN THE RECONSTITUTED IMAGE: QBUF(JPIC:)
             QBUF(JPIC:JPIC+NPIX-1) = FMINT
d359 3
a361 15
             ILOC = JIM 
             DO  L = 1, NPIX
                IF (BUFM(L)) THEN
                   QBUF(JPIC+L-1) = QBUF(ILOC)
                   ILOC           = ILOC + 1
                ENDIF
	     ENDDO

C            WRITE IMAGE ONTO DISK
             CALL WRTVOL(LUN,NSAM,NROW,1,1,QBUF(JPIC),IRTFLG)
          ELSE
C            WRITE IMAGE ONTO DISK
             CALL WRTVOL(LUN,NSAM,NROW,1,1,QBUF(JIM),IRTFLG)
           ENDIF
           CLOSE(LUN)
d407 3
a409 1
	READ(LUNE,*) D
d435 1
d450 3
a452 5
        READ(LUNE,*) D

C	READ THE PCA  _EIG  FILE TO GET THE PIXEL AVERAGES.
        READ(LUNE,80,IOSTAT=IER) PJ
80      FORMAT(G12.5)
d454 1
d458 1
a458 1
           CALL ERRT(101,'THIS _EIG FILE IS NOT FROM PCA',IDUM)
d581 1
a581 1
C   WI(NIMA)		IMAGE WEIGHTS (ACTIVE+INACTIVE)
d674 1
a674 1
C    PJ(I)		AVERAGE OF INDIVIDUEL IMAGE.
@


1.30
log
@redlin mask error
@
text
@d12 1
d27 1
a27 2
C            FILES IMC00#, PIX00#, AND EIG00#, WHERE #
C            IS THE COORDINATE FILE CODE.
d131 1
a131 1
        WRITE(NOUT,*)'  NUMBER OF PIXELS: ',NPIX
d142 1
a142 1
     &                 NSAMM,NROWM,NSLICEM, MAXIMT,'  ',.FALSE.,IRTFLG)
d177 1
a177 1
           WRITE(NOUT,*)'  NUMBER OF PIXELS UNDER MASK: ',NMASK
a189 1

a212 2
        JPIC  = 1
	JOFF  = JPIC  + NPIX
d215 2
a216 2

	   LCI	= JOFF
d219 5
a223 4
	   LD	= LCP 	+ NPIX  * NFAC
	   LPJ  = LD	+ NFAC
	   JIM  = LPJ   + NPIX
	   JTOT = JIM   + NPIX
d225 2
a226 1
	   LCI	= JOFF
d230 1
a230 2
	   LWP	= LCP 	+ NPIX  * NFAC
	   LD	= LWP	+ NPIX
d232 3
a234 1
	   JTOT = JIM   + NPIX
d249 4
a252 3
           CALL PCA_SRIP2(NUMIM, NPIX, NFAC, LUNI, LUNP, LUNE,
     &                 QBUF(LCI), QBUF(LIDI), QBUF(LCP), 
     &                 QBUF(LD), QBUF(LPJ), IRTFLG)
d256 4
a259 3
	   CALL SRIP2(NUMIM,NPIX,NFAC,LUNI,LUNP,LUNE,
     &		  QBUF(LCI),QBUF(LWI),QBUF(LIDI),QBUF(LCP),QBUF(LWP),
     &		  QBUF(LD))
d275 1
a275 1
     &               ' create your data files is: ',I6,
d294 1
a294 1
 9700        FORMAT(' ** NO COORDINATES FOR IMAGE NO: ',I7)
d315 1
a315 1
            WRITE(NOUT,*) '  COORDINATES USED:'
d318 1
a318 1
            WRITE(NOUT,*) '  '
d322 2
a323 1
              CALL PCA_RECDUM(NUMIM, NPIX, NUSE, NUMFAC, 
d327 2
a328 1
              CALL RECDUM(NUMIM,NPIX,NUSE,NUMFAC,NFAC,SUMP,
d336 2
a337 1
               CALL PCA_REMAKE(IMS, NUMIM, NPIX, NUSE, NUMFAC, 
d341 2
a342 1
               CALL RECONS(IMS,NUMIM,NPIX,NUSE,NUMFAC,NFAC,SUMP,
d365 1
a365 1
                FMINT = MINVAL(QBUF(JIM:JIM+NPIX-1)) 
d371 1
d374 2
a375 1
                   QBUF(JPIC+L-1) = QBUF(L+JIM-1)
d400 90
d496 8
a503 1
C  PARAMETERS:                                                         *
a511 1
        REAL SUM
d530 1
a530 1
        WRITE(NOUT,*) '  COORDINATES EFFECTIVE IN THIS RECONSTITUTION:'
d535 1
a535 1
        WRITE(NOUT,*) '  '
a650 82
C ++********************************************************************
C                                                                      *
C  SRIP2(NIMA,NPIX,NFAC,LUNI,LUNP,LUNE,CI,WI,IDI,CP,WP,IDP,D)
C
C  REMOVED FROM SRIPE.FOR   DEC 90 AL
C
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C***********************************************************************

	SUBROUTINE SRIP2(NIMA,NPIX,NFAC,LUNI,LUNP,LUNE,
     &                   CI,WI,IDI,CP,WP,D) 

	DIMENSION CI(NIMA,NFAC), WI(NIMA), IDI(NIMA)
	DIMENSION CP(NPIX,NFAC), WP(NPIX), IDP(NPIX)
	DIMENSION D(NFAC)

	DO  I=1,NIMA
	   READ(LUNI,*) (CI(I,N),N=1,NFAC), WI(I),FDUM,FIM
           IDI(I) = FIM
	ENDDO

	DO  I=1,NPIX
	   READ(LUNP,*) (CP(I,N),N=1,NFAC), WP(I)
	ENDDO

	READ(LUNE,*) (D(N),N=1,NFAC)

	END

C****************************************************************************
C
C *  AUTHOR :  MAHIEDDINE LADJADJ                                          *
C
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C****************************************************************************

        SUBROUTINE PCA_SRIP2(NIMA,NPIX,NFAC,LUNI,LUNP,LUNE,
     &             CI,IDI,CP,D,PJ,IRTFLG)

        INCLUDE 'CMBLOCK.INC'

        DIMENSION CI(NIMA,NFAC),IDI(NIMA),CP(NPIX,NFAC)
        DIMENSION PJ(NPIX),D(NFAC)

        IRTFLG = 0

c       READ THE _IMC  FILE.
        DO I=1,NIMA
           READ(LUNI,*) (CI(I,N),N=1,NFAC), FDUM,FDUM1,FIM
           IDI(I) = FIM
        END DO

C       READ THE _PIX  FILE.
        DO I=1,NPIX
           READ(LUNP,*) (CP(I,N),N=1,NFAC)
        END DO

C       READ THE PCA _EIG  FILE TO GET THE EIGENVALUES.
        READ(LUNE,*) D

C	READ THE PCA  _EIG  FILE TO GET THE PIXEL AVERAGES.
        READ(LUNE,80,IOSTAT=IER) PJ
80      FORMAT(G12.5)

        IF (IER .NE. 0) THEN
100	   IRTFLG = 1
           WRITE(NOUT,*) ' NO PIXEL AVERAGES IN _EIG FILE'
           CALL ERRT(101,'THIS EIGEN FILE IS NOT FROM PCA',IDUM)
           RETURN
        ENDIF

        WRITE(NOUT,212)
212     FORMAT('  DATA IS FROM PCA USING COVARIANCE MATRIX')
        RETURN

        END
d681 2
a682 2
C   PCA_RECDUM( NIMA, NPIX, NF, NV, NFAC,
C               PIA, RIM, CP, CI, D, PJ, ADD_AVRG)
d701 2
a702 2
       SUBROUTINE PCA_RECDUM( NIMA, NPIX, NF, NV, NFAC,
     &                        PIA, RIM, CP, CI, D, PJ, ADD_AVRG)
a728 3



d747 1
a747 1
C    PJ(I)         AVERAGE OF INDIVIDUEL IMAGE.
@


1.29
log
@bad nslicem test
@
text
@d131 5
d165 1
a165 1
              CALL REDLIN(LUNM,NSAMM,BUF,I)
d178 4
@


1.28
log
@NIMAX
@
text
@d87 1
a87 1
C       IMC00# THEN IT IS ASSUMED THAT A DUMMY IMAGE HAS TO BE
d141 4
a144 6
     &         (NROWM   .NE. NROW)    .OR.
     &         (NSLICEM .NE. NSLICE)) THEN
                 WRITE(NOUT, 93) NSAM, NROW, NSAMM, NROWM, 
     &                            NSLICE,NSLICEM
93               FORMAT('*** IMAGE DIMENSION (',I4,',',I4,',',I4,
     &                  ')  NOT SAME AS MASK (',I4,',',I4,',',I4,')')
@


1.27
log
@ca rewrite
@
text
@d80 2
a81 1
        IBIG = HUGE(IBIG)	 
@


1.26
log
@opfilec
@
text
@d2 1
a2 1
C++************************************************************* 5/14/85   
d4 8
a11 14
C  JPMSK2         LONG FILE NAMES FEB 89 al
C                 USED OPAUXFILE & OPFILE NOV 00 ARDEAN LEITH
C                 SRIPE PARAMETERS CHANGED JAN 2001 A. LEITH
C                 FMIN --> FMINT & INSERTED RECDUM.. APR 01 A. LEITH
C
C **************************************************************************
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH                            *
C **************************************************************************
d13 10
a22 1
C JPMSK2(LUN,LUNM,LUNP)
d25 3
a27 3
C		 OF A CORRESPONDENCE ANALYSIS STORED IN
C		 FILES IMC00#, PIX00#, AND EIG00#, WHERE #
C		 IS THE COORDINATE FILE CODE.
d30 5
a34 3
C	  LUN	   LOGICAL UNIT NUMBER OF  INPUT FILE
C	  LUNM     LOGICAL UNIT NUMBER OF MASK FILE
C	  LUNP     LOGICAL UNIT NUMBER OF PIXEL COORDINATE FILE
d37 4
a40 11
C CA SRP -- RECONSTITUTE IMAGE FOR PRINCIPAL COMPONENT ANALYSIS (PCA)
C CA SR  -- RECONSTITUTE FULL IMAGE INCLUDING 0-FACTOR
C CA SRD -- RECONSTITUTE DIFFERENTIAL IMAGE, WITHOUT 0-FACTOR
C CA SRI -- RECONSTITUTE IMPORTANCE IMAGE (AS CA_SRD BUT
C           WITHOUT COORDINATE WEIGHTING)
C CA SR/C (ETC.) -- AS ABOVE, BUT COORDINATES ARE SUPPLIED BY A
C 	    CLUSTER FILE FROM A PREVIOUS RUN OF 'CA CLA'
C--*******************************************************************
C**MODIFIED 2/6/86 J.F. TO ACCESS CLUSTER CENTER COORDINATES IF NEEDED
C  (OPTIONS CA SR/C, CA SRD/C, AND CA SRI/C). CLEANED UP FOR I4 VERSION
C  6/16/88 J.F.
d42 2
a43 1
C--*******************************************************************
d45 1
a45 1
	SUBROUTINE JPMSK2(LUN,LUNM,LUNP,MAXBUF)
d48 11
a58 8
  
        COMMON  /COMMUN/ FILNM1,FILNM2,FILNMP,FILNAM,
     &                   FILNMC,FILNME,FILPATC,FILPATP,
     &                   FILPATE,FILPAT1
        CHARACTER *81    FILNM1,FILNM2,FILNMP,FILNAM,
     &                   FILNMC,FILNME,FILPATC,FILPATP,
     &                   FILPATE,FILPAT1
        CHARACTER * 1    NULL, ADD_AVRG, PCA_AVRG
d60 2
a63 1
        INTEGER, ALLOCATABLE, DIMENSION(:) :: NUMFAC
a70 4
	INTEGER   IMAR(2000)
        LOGICAL   PICK_PCA
        INTEGER   PCA_ERR, PTRFAC, PTRCOO

d73 1
a73 1
        NULL    = CHAR(0)
d75 3
a77 3
        FILPATC = 'IMC***'//NULL
        FILPATP = 'PIX***'//NULL
        FILPATE = 'EIG***'//NULL
d80 27
a106 19
C	FOR EXAMPLE: 6 (IF FILE NUMBERS: 2-3,5-8)
C	IMAR() ARRAY HOLDS  THOSE FILE NUMBERS.
C			SEE DO LOOP 100          ML.

        CALL FILSEQP(FILPAT1,NLET1,IMAR,2000,IMUSED,
     &       'FILE TEMPLATE (EG. PIC****)' ,IRTFLG)

        IF (FCHAR(4:6) .EQ. 'SRP') THEN
          PICK_PCA = .TRUE.
          ICLUR    = 0
          CALL RDPRMC(PCA_AVRG, NCHAR, .TRUE.,
     &       'SUBTRACT AVERAGE IN PCA RECONSTITUTION? (N/Y)' ,
     &       NULL,IRTFLG)
          IF (PCA_AVRG .NE. 'Y' .AND. PCA_AVRG .NE. 'y') THEN
             ADD_AVRG = 'Y'
          ELSE
C	     SUBTRACT AVERAGE IN THE RECONSTRUCTED DATA.
             ADD_AVRG = 'N'
          END IF
d109 1
a109 1
          PICK_PCA = .FALSE.
d119 1
a119 1
          IF (FCHAR(6:6) .EQ. 'D') THEN
d121 1
a121 1
	  ELSEIF (FCHAR(6:6) .EQ. 'I') THEN
d124 6
a129 3
C
C         CLUSTER READING SWITCH ICLUR IS SET IF RECONSTITUTION IS
C         ACCORDING TO CLUSTER CENTER COORDINATES.
d131 41
a171 11
	  ICLUR = 0
	  IF (FCHAR(7:7).EQ.'C' .OR. FCHAR(8:8).EQ.'C') THEN
C	     WE ARE MOVING THE CLUSTER COMMAND TO CL *** INSTEAD 
C	     OF CA *** AND WE ARE CHANGING THE INPUT FILES FROM
C	     A BINARY FORMAT (PIX***, IMC***) TO DOCUMENT FORMAT
C	     (SD *** COMMAND TYPE)
	  
	     CALL ERRT(101,'NO CLUSTER RECONSTRUCTION NOW',IDUM)
	     GOTO 9999
	  ENDIF
        END IF
d173 5
a177 10
C       IF AN IMAGE NUMBER IS NOT FOUND IN THE INDEX ARRAY OF
C       IMC00# THEN IT IS ASSUMED THAT A DUMMY IMAGE HAS TO BE
C       CREATED.  IN THAT CASE, COORDINATES FOR EACH FACTOR USED
C       ARE SOLICITED, UNLESS THEY ARE SUPPLIED BY A CLUSTER FILE.

	CALL RDPRMI(IMNO,NDUM,NOT_USED,'COORDINATE FILE CODE')
        NLET = 6
        CALL FILGET(FILPATC,FILNMC,NLET,IMNO,IRTFLG)
        CALL FILGET(FILPATP,FILNMP,NLET,IMNO,IRTFLG)
        CALL FILGET(FILPATE,FILNME,NLET,IMNO,IRTFLG)
d179 1
a179 8
C       OPEN IMAGE COORDINATE FILE
        CALL OPAUXFILE(.FALSE.,FILNMC,DATEXC,-LUN,0,
     &                       'O', ' ',.TRUE.,IRTFLG)
        READ(LUN) NUMIM, NFAC, NSAM, NROW
 
C       OPEN PIXEL COORDINATE FILE
        CALL OPAUXFILE(.FALSE.,FILNMP,DATEXC,-LUNP,0,
     &                       'O', ' ',.TRUE.,IRTFLG)
d181 1
a181 3
C       BUFFER ALLOCATIONS
C       JMASK = OFFSET OF MASK ARRAY
C       JPIC  = OFFSET OF ARRAY CONTAINING RECONSTITUTED IMAGE
d183 6
a188 8
20      IM    = NSAM * NROW
	JMASK = 2000
	JPIC  = JMASK + IM
	JBUF  = JPIC  + IM
	JOFF  = JBUF  + NSAM
 
C       BYPASS FACTOR SELECTION IF COORDINATES COME FROM 
C       CLASSIFICATION  CLUSTER FILE
d190 2
a191 8
	IF (ICLUR .NE. 1) THEN
	  MAXFAC = NFAC
          NUSE   = MAXFAC	 
	   
C	  ARRAY NUMFAC(MAXFAC)
	  ALLOCATE(NUMFAC(MAXFAC))
	  
          CALL RDPRAI(NUMFAC,MAXFAC,NUSE,1,MAXFAC,
d193 2
a194 5
	   
C	  ARRAY COO(MAXFAC)
	  ALLOCATE(COO(MAXFAC))
        ENDIF
	
d196 1
a196 1
        CALL OPAUXFILE(.FALSE.,FILNME,DATEXC,-LUNM,0,
d198 4
d203 15
a217 5
C       NOW INITIALIZE JP'S RECONSTITUTION ROUTINE
        IF (PICK_PCA) THEN
           CALL PCA_SRIPE(NUMIM,NPIX,NFAC,LUN,LUNP,LUNM,
     &                   JOFF,NSAM,NROW,SUMP,LCI,LIDI,LCP,
     &                   LIDP,LD,LPJ,JIM,JTOT)
d219 8
a226 3
           CALL SRIPE (NUMIM,NPIX,NFAC,LUN,LUNP,LUNM,
     &                   JOFF,NSAM,NROW,SUMP,LCI,LWI,LIDI,LCP,
     &                   LWP,LIDP,LD,JIM,JTOT)
d235 1
a235 1
           CALL ERRT(102,'UNABLE TO ALLOCATE QBUF',JTOT)
d239 6
a244 6
        IF (PICK_PCA) THEN
           PCA_ERR = 0
           CALL PCA_SRIP2(NUMIM, NPIX, NFAC, LUN, LUNP, LUNM,
     &                 QBUF(LCI), QBUF(LIDI), QBUF(LCP), QBUF(LIDP),
     &                 QBUF(LD), QBUF(LPJ), PCA_ERR)
           IF (PCA_ERR .NE. 0) GOTO 9999
d247 1
a247 1
	   CALL SRIP2(NUMIM,NPIX,NFAC,LUN,LUNP,LUNM,
d249 1
a249 2
     &		  QBUF(LIDP),QBUF(LD))
	END IF 
d251 1
a251 2
C       NOTE THAT QBUF(LIDP) ... QBUF(LIDP+NPIX-1) CONTAINS THE
C       MASK ADDRESS ARRAY (CALLED MADAR IN JPMSK1)
d253 1
a253 1
	CLOSE(LUN)
d259 14
a272 13
	IF (ICLUR .NE. 1) THEN
          DO  I=1,NUSE
             IF (NUMFAC(I) .GT. NFAC) THEN
                WRITE(NOUT,9801) NFAC
9801            FORMAT(' ** AXIS NUMBER OUT OF RANGE. MAXIMUM = ',I2)
                WRITE(NOUT,9802) NFAC, NUMFAC(I)
9802            FORMAT(' Number of factors (or eigenvectors) used to ',
     &                 ' create your data files is: ',I6,
     &                 ' you have asked for factor: ',I4)
	       GOTO 9999
            ENDIF
	  ENDDO
        ENDIF
d276 1
a276 1
C       LOOP OVER ALL IMAGES;   begin DO LOOP 100
d279 1
a279 6
	  IMNO = IMAR(IM)

          IF (ICLUR .EQ.1 ) THEN
	     CALL ERRT(101,'NO CLUSTER RECONSTRUCTION IN JPMSK2',NDUM)
	     GOTO 9999
          ENDIF
d284 1
a284 1
 9700        FORMAT(' ** IMAGE NO: ',I6,' DOES NOT HAVE COORDINATES')
d290 2
a291 3
24           DO  I=1,MAXFAC
	        COO(I) = 0
	     ENDDO
d293 4
a296 4
             IMAX=0
             DO 28 K=1,NUSE
               DO  I=1,MAXFAC
                 IF (NUMFAC(K).EQ.I) THEN
d299 1
a299 1
                    GOTO 28
d302 1
a302 1
28          CONTINUE
d305 2
a306 1
            WRITE(NOUT,281)(COO(I),I=1,IMAX)
d308 1
d311 1
a311 1
            IF (PICK_PCA) THEN
d323 1
a323 1
            IF (PICK_PCA) THEN
d331 1
a331 1
            END IF
d334 4
a337 5
          CALL FILGET(FILPAT1,FILNM1,NLET1,IMNO,IRTFLG)
          IF (IRTFLG .NE. 0) THEN
             CALL ERRT(101,'CREATING FILE NAME',NDUM)
	     GOTO 9999
          ENDIF
d339 1
d341 1
a341 2
          MAXIM = 0
          CALL OPFILEC(0,.FALSE.,FILNM1,LUN,'U',IFORM,NSAM,NROW,1,
d345 17
a361 6
          IF (PICK_PCA) THEN
             FMINT = QBUF(JIM)
             DO I = 0, NPIX-1
                FMINT = MIN(FMINT,QBUF(JIM + I)) 
             ENDDO
          END IF
d363 7
a369 23
C	  PUT FMINT IN THE RECONSTITUTED IMAGE QBUF(JPIC:)
	  DO I = JPIC, JPIC + NSAM*NROW - 1
             QBUF(I) = FMINT
          ENDDO

C         NOW REPLACE PIXELS IN MASK AREA BY THEIR TRUE VALUES
C	  COPY OUTPUT IMAGE QBUF(JIM:-) TO RECONSTITUTED IMAGE
C	  QBUF(JPIC:-) SUBJECT TO MASK IN QBUF(LIDP:-)
C         'CA SR'.

          DO  L = 1, NPIX
             CALL MSKDEC(L, QBUF(LIDP), NSAM, K, I)
             QBUF(JPIC + (I - 1)*NSAM + K - 1) = QBUF(L + JIM - 1)
	  ENDDO

C         WRITE IMAGE ONTO DISK
          I1 = JPIC
          DO  I = 1, NROW
             CALL WRTLIN(LUN, QBUF(I1), NSAM, I)
             I1 = I1 + NSAM
	  ENDDO

          CLOSE(LUN)
a370 1
C	END DO LOOP 100
d372 4
a375 1
9999	IF (ALLOCATED(COO))    DEALLOCATE(COO)
d378 1
a378 56

	END


C       -------------------- PCA_SRIPE -----------------------------

	SUBROUTINE PCA_SRIPE( NIMA, NPIX, NFAC, LUNI, LUNP, LUND, 
     &                        IOFF, NOC, NOR, SUMP, LCI, LIDI, LCP,
     &                        LIDP, LD, LPJ, JIM, JTOT)

#ifndef SP_32
        INTEGER * 8 :: JTOT
#else
        INTEGER * 4 :: JTOT
#endif


	CALL REW(LUNI,0)
	READ(LUNI) NIMA, NFAC, NOC, NOR

	CALL REW(LUNP,0)
	READ(LUNP) NPIX, NFAC, NOC, NOR

	CALL REW(LUND,0)
	READ(LUND) NFAC, SUMP, TRACE

	LCI	= IOFF
	LIDI	= LCI 	+ NIMA * NFAC
	LCP	= LIDI	+ NIMA
	LIDP	= LCP 	+ NPIX * NFAC
	LD	= LIDP	+ NPIX
	LPJ     = LD	+ NFAC
        JIM     = LPJ   + NPIX
	JTOT    = JIM   + NPIX
	
        RETURN	
	END

C       -------------------- SRIPE -----------------------------

	SUBROUTINE SRIPE(NIMA,NPIX,NFAC,LUNI,LUNP,LUND,
     &                   IOFF, NOC,NOR,SUMP,LCI,LWI,LIDI,LCP,
     &                   LWP,LIDP,LD,JIM, JTOT)

#ifndef SP_32
        INTEGER * 8 :: JTOT
#else
        INTEGER * 4 :: JTOT
#endif


	CALL REW(LUNI,0)
	READ(LUNI) NIMA,NFAC,NOC,NOR

	CALL REW(LUNP,0)
	READ(LUNP) NPIX,NFAC,NOC,NOR
a379 14
	CALL REW(LUND,0)
	READ(LUND) NFAC, SUMP, TRACE

	LCI	= IOFF
	LWI	= LCI 	+ NIMA * NFAC
	LIDI	= LWI	+ NIMA
	LCP	= LIDI	+ NIMA
	LWP	= LCP 	+ NPIX * NFAC
	LIDP	= LWP	+ NPIX
	LD	= LIDP	+ NPIX
	JIM	= LD	+ NFAC
	JTOT    = JIM   + NPIX

        RETURN	
a382 1

d384 1
a384 1
C RECONS                                                                     *
d386 1
a386 1
C RESTORED FROM LISTING 9/16/85 JF
a396 1

d400 1
d409 6
a414 2
        DO  L = 1, NFAC
          BUF(L)=0.
d417 2
a418 4
        DO  L = 1, NF
         K=NV(L)
         BUF(K)=CI(J,K)
	ENDDO
d420 1
a420 1
        WRITE(NOUT,281)(BUF(L),L=1,NFAC)
d423 3
a425 1
        DELTA = 1. - FLOAT(IDIFF)
d434 16
a449 13
        DO  I = 1, NPIX
          RIM(I) = 0.0
          DO  L = 1, NF
             K      = NV(L)
             RIM(I) = RIM(I) + CP(I,K) * CI(J,K) / SQRT(D(K))
          END DO
          IF (IDIFF .GE. 0) THEN
             RIM(I) = WP(I) * WI(J) * (DELTA + RIM(I)) * SUMP
          ENDIF
          IF (RIM(I) .GT. FMAX1) FMAX1 = RIM(I)
          IF (RIM(I) .LT. FMIN1) FMIN1 = RIM(I)
          SUM = SUM + RIM(I)
        END DO
d471 1
a471 2
C  PURPOSE:                                                            *
C   RECONSTITUTES DUMMY IMAGES USING USER-SUPPLIED COORDINATES
d473 1
a492 1
C                                                                      *
d505 5
a509 5
           WIAVG = 0.0
           DO  J = 1, NIMA
              WIAVG = WIAVG + WI(J)
           ENDDO
           WIAVG = WIAVG / FLOAT(NIMA)
d519 1
a519 1
           DO L = 1, NF
d541 1
a541 1
C  SRIP2(NIMA,NPIX,NFAC,LUNI,LUNP,LUND,CI,WI,IDI,CP,WP,IDP,D)
d551 2
a552 2
	SUBROUTINE SRIP2(NIMA,NPIX,NFAC,LUNI,LUNP,LUND,
     &                   CI,WI,IDI,CP,WP,IDP,D) 
d559 2
a560 1
	   READ(LUNI) (CI(I,N),N=1,NFAC), WI(I), DIO, IDI(I)
d564 1
a564 1
	   READ(LUNP) (CP(I,N),N=1,NFAC), WP(I), DIO, INO, IDP(I)
d567 1
a567 1
	READ(LUND) (D(N),N=1,NFAC)
d573 1
a573 1
C *  AUTHOR :  mahieddine ladjadj                                          *
d575 4
d581 2
a582 2
        SUBROUTINE PCA_SRIP2(NIMA,NPIX,NFAC,LUNI,LUNP,LUND,
     &             CI,IDI,CP,IDP,D,PJ,PCA_ERR)
d586 6
a591 6
        DIMENSION CI(NIMA,NFAC), IDI(NIMA)
        DIMENSION CP(NPIX,NFAC), PJ(NPIX), IDP(NPIX)
        DIMENSION D(NFAC)
        INTEGER PCA_ERR,N
C
c       rEAD THE IMC**** FILE.
d593 2
a594 1
           READ(LUNI) (CI(I,N), N = 1, NFAC), W, DIO, IDI(I)
d597 1
a597 1
C       READ THE PIX**** FILE.
d599 1
a599 1
          READ(LUNP) (CP(I,N), N = 1, NFAC), W, DIO, INO, IDP(I)
d602 2
a603 3
C       READ THE EIG**** FILE.
C	READ THE EIGENVALUES.
        READ(LUND) (D(N), N = 1, NFAC)
d605 10
a614 2
C	READ THE PIXEL AVERAGES.
        READ(LUND,ERR=100) (PJ(N), N = 1, NPIX)
d617 1
a617 1
212     FORMAT(' THIS DATA IS FROM PCA USING COVARIANCE MATRIX')
d620 17
a636 3
100	PCA_ERR = 1
        WRITE(NOUT,101)
101     FORMAT(' WARNING: PIXEL AVERAGES HAVE NOT BEEN FOUND')
d638 119
a756 2
        WRITE(NOUT,102)
102     FORMAT('          THESE FILES ARE NOT FOR PCA: RETURN')
d758 3
@


1.25
log
@nloop,iloop_removed
@
text
@d313 1
a313 1
          CALL OPFILE(.FALSE.,FILNM1,LUN,'U',IFORM,NSAM,NROW,1,
@


1.24
log
@consolidated files.
@
text
@d138 1
a138 1
	CALL RDPRMI(IMNO,NDUM,NLOOP,ILOOP,'COORDINATE FILE CODE')
@


1.23
log
@fixed fmint & put recdum & recons.f in here
@
text
@d576 77
@


1.22
log
@SP_32 for NT
@
text
@d4 4
a7 3
C  JPMSK2                   LONG FILE NAMES FEB 89 al
C                           USED OPAUXFILE & OPFILE NOV 00 ARDEAN LEITH
C                           SRIPE PARAMETERS CHANGED JAN 2001 A. LEITH
d83 1
a83 2
C			SEE DO LOOP 100
C	ML.
d288 1
a288 1
     &              FMAX,FMIN,AV,SIG,IDIFF,QBUF(JIM),
d300 1
a300 1
     &                  FMAX,FMIN,AV,IDIFF,QBUF(JIM),QBUF(LCP),
d307 1
a307 1
             CALL ERRT(101,'OPENING FILE',NDUM)
d318 1
a318 1
             FMIN = QBUF(JIM)
d320 1
a320 1
                FMIN = MIN(FMIN,QBUF(JIM + I)) 
d324 1
a324 1
C	  PUT FMIN IN THE RECONSTITUTED IMAGE QBUF(JPIC:)
d326 1
a326 1
             QBUF(I) = FMIN
d426 150
@


1.21
log
@added bigalloc
@
text
@d61 1
d63 3
d363 1
d365 3
d369 1
d396 2
d399 4
@


1.20
log
@bad qbuf boundary fixed
@
text
@d61 2
d164 1
a164 1
          NUSE  = MAXFAC	 
d191 4
d359 2
d387 1
@


1.19
log
@had memory corruption due to overflow of q, used allocate now, merged sripe in
@
text
@d308 4
a311 4
            FMIN = QBUF(JIM)
            DO I = 1, NPIX
              FMIN = MIN(FMIN,QBUF(JIM + I)) 
            ENDDO
@


1.18
log
@opfile & opauxfile & cosmetic
@
text
@d6 1
d18 1
a18 1
C JPMSK2(LUN,LUNM,LUNP,MAXDI4)
a28 1
C	  MAXDI4   MAXIMUM BUFFER LENGTH TO BE USED BY PROGRAM
a48 2
	COMMON    BUF(1)

d56 3
a58 1
        REAL, ALLOCATABLE, DIMENSION(:) :: COO
d106 5
a110 5
          IF (FCHAR(6:6) .EQ.'D') THEN
            IDIFF = 1 
	  ELSEIF (FCHAR(6:6).EQ.'I') THEN
            IDIFF = -1
          END IF
d122 1
a122 1
	     CALL ERRT(101,'NO CLUSTER RECONSTRUCTION FOR NOW',IDUM)
a138 2
C	CALL FILCAN(FILNAM,NFN,NULL,NULL,FILNMC,DATEXC,IER)
C	OPEN(FILE=FILNAM,UNIT=LUN,STATUS='OLD',FORM='UNFORMATTED')
a143 2
C	CALL FILCAN(FILNAM,NFN,NULL,NULL,FILNMP,DATEXC,IER)
C	OPEN(FILE=FILNAM,UNIT=LUNP,STATUS='OLD',FORM='UNFORMATTED')
d151 1
a151 1
20      IM    = NSAM*NROW
d154 2
a155 2
	JBUF  = JPIC + IM
	JOFF  = JBUF + NSAM
a174 2
C	CALL FILCAN(FILNAM,NFN,NULL,NULL,FILNME,DATEXC,IER)
C	OPEN(FILE=FILNAM,UNIT=LUNM,STATUS='OLD',FORM='UNFORMATTED')
d179 16
a194 1
        PCA_ERR = 0 
d196 6
a201 4
          CALL PCA_SRIPE( NUMIM, NPIX, NFAC, LUN, LUNP, LUNM,
     $                  BUF, JOFF, NSAM, NROW, SUMP, LCI, LIDI, LCP,
     $                  LIDP, LD, LPJ, JIM, MAXBUF, PCA_ERR)
          IF (PCA_ERR .NE. 0) GOTO 9999
d203 3
a205 4
          CALL SRIPE(NUMIM,NPIX,NFAC,LUN,LUNP,LUNM,
     &              BUF,JOFF,NSAM,NROW,SUMP,LCI,LWI,LIDI,LCP,
     &              LWP,LIDP,LD,JIM, MAXBUF, PCA_ERR) 
          IF (PCA_ERR .NE. 0) GOTO 9999
d208 1
a208 1
C       NOTE THAT BUF(LIDP) ... BUF(LIDP+NPIX-1) CONTAINS THE
d219 9
a227 1
          IF (NUMFAC(I) .GT. NFAC)GOTO 9800
d238 1
a238 1
          IF (ICLUR.EQ.1) THEN
d243 1
a243 1
          IMS = IMSEQ4(NUMIM,IMNO,BUF(LIDI))
d249 1
a249 1
             CALL RDPRAF(BUF,NUSE,NVAL,AMIN,AMAX,
d253 1
a253 1
	       COO(I)=0
d260 3
a262 3
                   COO(I) = BUF(K)
                   IF (I.GT.IMAX) IMAX=I
                   GOTO 28
d272 1
a272 2
	
            IF(PICK_PCA) THEN
d274 2
a275 2
     &              NFAC, AV,BUF(JIM), BUF(LCP),
     &              COO, BUF(LD), BUF(LPJ), ADD_AVRG)
d278 3
a280 3
     &              FMAX,FMIN,AV,SIG,IDIFF,BUF(JIM),
     &              BUF(LCP),COO,BUF(LD),BUF(LWI),BUF(LWP))
            END IF
a283 1

d286 2
a287 2
     &              NFAC, AV,BUF(JIM), BUF(LCP), 
     &              BUF(LCI), BUF(LD), BUF(LPJ), ADD_AVRG)
d290 2
a291 2
     &                  FMAX,FMIN,AV,IDIFF,BUF(JIM),BUF(LCP),
     &                  BUF(LCI),BUF(LD),BUF(LWI),BUF(LWP))
d296 4
a299 1
          IF (IRTFLG .NE. 0) GOTO 9000
d305 1
a305 1
          IF (IRTFLG .NE. 0) GOTO 9300
d308 4
a311 4
            FMIN = BUF(JIM)
            DO I = 1, NPIX - 1
              IF (FMIN .GT. BUF(JIM + I)) FMIN = BUF(JIM+I)
            END DO
d314 4
a317 1
C	  PUT FMIN IN THE RECONSTITUTED IMAGE BUF(JPIC:-)
a318 4
	  DO  I = JPIC, JPIC + NSAM*NROW - 1
             BUF(I) = FMIN
          END DO

d320 3
a322 3
C	  COPY OUTPUT IMAGE BUF(J IM:-) TO RECONSTITUTED IMAGE
C	  BUF(JPIC:-) SUBJECT TO MASK IN BUF(LIDP:-)
C         CA SR.
d325 2
a326 2
             CALL MSKDEC(L, BUF(LIDP), NSAM, K, I)
             BUF(JPIC + (I - 1)*NSAM + K - 1) = BUF(L + JIM - 1)
d332 1
a332 1
             CALL WRTLIN(LUN, BUF(I1), NSAM, I)
d339 13
a351 1
	GOTO 9999
d353 45
a397 20
9000	IER=19
	GOTO 9900
9300	IER=4
	GOTO 9900
 
9800	WRITE(NOUT,9801) NFAC
9801	FORMAT(' ** AXIS NUMBER OUT OF RANGE. MAXIMUM = ',I2)
	WRITE(NOUT,9802) NFAC, NUMFAC(I)
9802    format(' The number of factors (or eigenvectors) used to ',
     &         ' create your data files is: ',i5,
     &         ' you have asked for factor: ',i4)
	GOTO 9999

9900	CALL ERRT(IER,'JPMSK2',IER)
9999	CONTINUE

	IF (ICLUR.NE.1) THEN
	   DEALLOCATE(COO)
	   DEALLOCATE(NUMFAC)
	ENDIF	
d399 1
@


1.17
log
@removed f77 ifdef section
@
text
@d3 4
a6 1
C                                    LONG FILE NAMES FEB 89 al
d17 2
d24 1
a24 1
C	JPMSK2(LUN,LUNM,LUNP,MAXDI4)
d47 3
a49 2
C       MAXIMUM CLASS NUMBER TO BE USED:
C	PARAMETER (MAXKLA=50)
a50 8
C       MAXIMUM NUMBER OF FACTORS ALLOWED:
C        PARAMETER (MAXFAC=24)

 
	INCLUDE 'CMBLOCK.INC'  
C	INTEGER   IDUM(2000)
	COMMON    BUF(1)
C	EQUIVALENCE  (IDUM,BUF)
d58 3
a60 4
      REAL, ALLOCATABLE, DIMENSION(:) :: COO
      INTEGER, ALLOCATABLE, DIMENSION(:) :: NUMFAC
c	REAL      COO(MAXFAC),CG(MAXKLA,MAXFAC)
c	INTEGER   NUMFAC(MAXFAC)
d62 3
a65 2
        LOGICAL   PICK_PCA
        INTEGER   PCA_ERR, PTRFAC, PTRCOO, MAXFAC
d80 1
a80 2
     $       'FILE TEMPLATE (EG. PIC****)' ,IRTFLG)
     
d105 3
a107 3
   	  IDIFF=0
          IF (FCHAR(6:6)    .EQ.'D') THEN
            IDIFF=1 
d109 1
a109 1
            IDIFF=-1
d115 2
a116 3
	  ICLUR=0
	  IF (FCHAR(7:7).EQ.'C'.OR.FCHAR(8:8).EQ.'C') THEN

d122 1
a122 1
	     WRITE(NOUT,*) 'NO CLUSTER RECONSTRUCTION FOR NOW !!'
a123 13

C            ICLUR=1
C            CALL FILERD(FILNM2,NLET,NULL,'CLUSTER',IRTFLG)
C            IF (IRTFLG.NE.0) RETURN
C            CALL FILCAN(FILNAM,NFN,NULL,NULL,FILNM2,DATEXC,IER)
C            OPEN(UNIT = LUN, FILE = FILNAM, STATUS = 'OLD',
C     &           FORM = 'UNFORMATTED')
C            READ(LUN) NUMIM,NFAC,NKLA,NUSE,(NUMFAC(K),K=1,NUSE)
C            IF (NKLA.GT.MAXKLA) GOTO 9500
C            READ(LUN)(IDUM(I),I=1,NUMIM),(IDUM(I),I=1,NUMIM),
C     &        (BUF(I),I=1,NKLA),((CG(L,J),L=1,NKLA),J=1,NUSE)
C            CLOSE(LUN)

d132 1
a132 1
	CALL RDPRMI(IMNO,NDUM,NLOOP,ILOOP,'COORDINATE FILE CODE$')
d139 4
a142 2
	CALL FILCAN(FILNAM,NFN,NULL,NULL,FILNMC,DATEXC,IER)
	OPEN(FILE=FILNAM,UNIT=LUN,STATUS='OLD',FORM='UNFORMATTED')
d146 4
a149 3
	CALL FILCAN(FILNAM,NFN,NULL,NULL,FILNMP,DATEXC,IER)
	OPEN(FILE=FILNAM,UNIT=LUNP,STATUS='OLD',FORM='UNFORMATTED')

d153 1
a153 1
C       JPIC = OFFSET OF ARRAY CONTAINING RECONSTITUTED IMAGE
d155 1
a155 1
20      IM = NSAM*NROW
d164 1
a164 1
	IF (ICLUR.NE.1) THEN
d166 1
a166 1
          NUSE = MAXFAC	 
d168 1
a168 1
c	  ARRAY NUMFAC(MAXFAC)
d174 1
a174 1
c	  ARRAY COO(MAXFAC)
a177 1

d179 4
a183 3
	CALL FILCAN(FILNAM,NFN,NULL,NULL,FILNME,DATEXC,IER)
	OPEN(FILE=FILNAM,UNIT=LUNM,STATUS='OLD',FORM='UNFORMATTED')

a184 1

d204 2
a205 2
C NOW THAT THE NUMBER OF FACTORS USED IN THE INITIAL ANALYSIS IS
C KNOWN, SWAP FACTOR SELECTION ARRAY AND CHECK AGAINST THIS NUMBER
d207 1
a207 1
	IF (ICLUR.NE.1) THEN
d209 1
a209 1
          IF (NUMFAC(I).GT.NFAC)GOTO 9800
d215 1
a215 1
C LOOP OVER ALL IMAGES;   begin DO LOOP 100
d221 1
a221 1
	     WRITE(NOUT,*) ' NO CLUSTER RECONSTRUCTION IN JPMSK2'
a222 14
CC            IF THIS IS A RECONSTITUTION FROM CLUSTER COOS, 
CC            MAKE SURE THAT THE IMAGE NUMBER SPECIFIED IS WITHIN 
CC	     RANGE OF CLUSTER NUMBERS
CC
C             IF (IMNO.GT.NKLA) THEN
C                WRITE(NOUT,225) IMNO,NKLA
C225             FORMAT(' *** IMAGE NUMBER ',I4,
C     &                 ' OUTSIDE RANGE (1...',I4,')')
C                GOTO 100
C             ENDIF
C
C             DO 23 I=1,NUSE
C23              BUF(I) = CG(IMNO,I)
C             GOTO 24
d228 1
a228 1
 9700        FORMAT(' ** IMAGE NO ',I5,' DOES NOT HAVE COORDINATES')
d232 1
a232 1
     &       'ENTER COORDINATES FOR EACH FACTOR SELECTED',NULL,IRTFLG)
d268 1
a268 1
            IF(PICK_PCA) THEN
d281 6
a286 3
          IFORM=1
          CALL OPENF(FILNM1,LUN,NSAM,NROW,'UNKNOWN',NF,1)
          IF (NF.NE.2)GOTO 9300
d288 1
a288 1
          IF(PICK_PCA) THEN
d295 1
a295 1
C	 PUT FMIN IN THE RECONSTITUTED IMAGE BUF(JPIC:-)
d298 1
a298 1
            BUF(I) = FMIN
a299 1
                                                    
d307 2
a308 2
            CALL MSKDEC(L, BUF(LIDP), NSAM, K, I)
            BUF(JPIC + (I - 1)*NSAM + K - 1) = BUF(L + JIM - 1)
d312 2
a313 3
C
           I1 = JPIC
           DO  I = 1, NROW
d316 1
a316 1
	   ENDDO
a319 2


d321 1
a322 1
	GOTO 9999
d332 2
a333 2
     $         ' create your data files is: ',i4,
     $         ' you have asked for factor: ',i4)
d340 2
a341 2
	DEALLOCATE(COO)
	DEALLOCATE(NUMFAC)
a342 1

@


1.16
log
@f90 version added
@
text
@d39 1
a39 1
#ifdef SP_F90 
d68 1
a68 1
CNO_SAVE        
d183 1
a183 1
	ALLOCATE(NUMFAC(MAXFAC))
d189 1
a189 1
	ALLOCATE(COO(MAXFAC))
a375 340
#else   

	SUBROUTINE JPMSK2(LUN,LUNM,LUNP,MAXBUF)

C       MAXIMUM CLASS NUMBER TO BE USED:
C	PARAMETER (MAXKLA=50)

C       MAXIMUM NUMBER OF FACTORS ALLOWED:
C        PARAMETER (MAXFAC=24)

 
	INCLUDE 'CMBLOCK.INC'  
C	INTEGER   IDUM(2000)
	COMMON    BUF(1)
C	EQUIVALENCE  (IDUM,BUF)
        COMMON  /COMMUN/ FILNM1,FILNM2,FILNMP,FILNAM,
     &                   FILNMC,FILNME,FILPATC,FILPATP,
     &                   FILPATE,FILPAT1
        CHARACTER *81    FILNM1,FILNM2,FILNMP,FILNAM,
     &                   FILNMC,FILNME,FILPATC,FILPATP,
     &                   FILPATE,FILPAT1
        CHARACTER * 1    NULL, ADD_AVRG, PCA_AVRG
	DIMENSION    COO(1)
        POINTER      (IPQCOO,COO)
	DIMENSION    NUMFAC(1)
        POINTER      (IPQNUMFAC,NUMFAC)
c	REAL      COO(MAXFAC),CG(MAXKLA,MAXFAC)
c	INTEGER   NUMFAC(MAXFAC)
	INTEGER   IMAR(2000)
        DATA AMIN/-10E30/,AMAX/10E30/
        LOGICAL   PICK_PCA
        INTEGER   PCA_ERR, PTRFAC, PTRCOO, MAXFAC
CNO_SAVE        
        NULL    = CHAR(0)
       
        FILPATC = 'IMC***'//NULL
        FILPATP = 'PIX***'//NULL
        FILPATE = 'EIG***'//NULL

C	IMUSED IS THE NUMBER OF IMAGES WE WANT TO RECONSTRUCT.
C	FOR EXAMPLE: 6 (IF FILE NUMBERS: 2-3,5-8)
C	IMAR() ARRAY HOLDS  THOSE FILE NUMBERS.
C			SEE DO LOOP 100
C	ML.

        CALL FILSEQP(FILPAT1,NLET1,IMAR,2000,IMUSED,
     $       'FILE TEMPLATE (EG. PIC****)' ,IRTFLG)
     

        IF (FCHAR(4:6) .EQ. 'SRP') THEN
          PICK_PCA = .TRUE.
          ICLUR    = 0
          CALL RDPRMC(PCA_AVRG, NCHAR, .TRUE.,
     &       'SUBTRACT AVERAGE IN PCA RECONSTITUTION? (N/Y)' ,
     &       NULL,IRTFLG)
          IF (PCA_AVRG .NE. 'Y' .AND. PCA_AVRG .NE. 'y') THEN
             ADD_AVRG = 'Y'
          ELSE
C	     SUBTRACT AVERAGE IN THE RECONSTRUCTED DATA.
             ADD_AVRG = 'N'
          END IF

        ELSE
          PICK_PCA = .FALSE.
     
C         IDIFF= SWITCH DETERMINING WHETHER THE AVERAGE IMAGE 
C         SHOULD BE SUBTRACTED.
C         IDIFF=1 -- SUBTRACT. IDIFF=-1 -- SUBTRACT 
C         AVERAGE IMAGE, AND THEN DIVIDE RESULT BY AVERAGE IMAGE 
C         TO OBTAIN  SO-CALLED "IMPORTANCE IMAGE" USED IN EARLIER
C         LITERATURE.

   	  IDIFF=0
          IF (FCHAR(6:6)    .EQ.'D') THEN
            IDIFF=1 
	  ELSEIF (FCHAR(6:6).EQ.'I') THEN
            IDIFF=-1
          END IF
C
C         CLUSTER READING SWITCH ICLUR IS SET IF RECONSTITUTION IS
C         ACCORDING TO CLUSTER CENTER COORDINATES.

	  ICLUR=0
	  IF (FCHAR(7:7).EQ.'C'.OR.FCHAR(8:8).EQ.'C') THEN

C	     WE ARE MOVINF THE CLUSTER COMMAND TO CL *** INSTEAD 
C	     OF CA *** AND WE ARE CHANGING THE INPUT FILES FROM
C	     A BINARY FORMAT (PIX***, IMC***) TO DOCUMENT FORMAT
C	     (SD *** COMMAND TYPE)
	  
	     WRITE(NOUT,*) 'NO CLUSTER RECONSTRUCTION FOR NOW !!'
	     RETURN

C            ICLUR=1
C            CALL FILERD(FILNM2,NLET,NULL,'CLUSTER',IRTFLG)
C            IF (IRTFLG.NE.0) RETURN
C            CALL FILCAN(FILNAM,NFN,NULL,NULL,FILNM2,DATEXC,IER)
C            OPEN(UNIT = LUN, FILE = FILNAM, STATUS = 'OLD',
C     &           FORM = 'UNFORMATTED')
C            READ(LUN) NUMIM,NFAC,NKLA,NUSE,(NUMFAC(K),K=1,NUSE)
C            IF (NKLA.GT.MAXKLA) GOTO 9500
C            READ(LUN)(IDUM(I),I=1,NUMIM),(IDUM(I),I=1,NUMIM),
C     &        (BUF(I),I=1,NKLA),((CG(L,J),L=1,NKLA),J=1,NUSE)
C            CLOSE(LUN)

	  ENDIF
        END IF

C       IF AN IMAGE NUMBER IS NOT FOUND IN THE INDEX ARRAY OF
C       IMC00# THEN IT IS ASSUMED THAT A DUMMY IMAGE HAS TO BE
C       CREATED.  IN THAT CASE, COORDINATES FOR EACH FACTOR USED
C       ARE SOLICITED, UNLESS THEY ARE SUPPLIED BY A CLUSTER FILE.

	CALL RDPRMI(IMNO,NDUM,NLOOP,ILOOP,'COORDINATE FILE CODE$')
        NLET = 6
        CALL FILGET(FILPATC,FILNMC,NLET,IMNO,IRTFLG)
        CALL FILGET(FILPATP,FILNMP,NLET,IMNO,IRTFLG)
        CALL FILGET(FILPATE,FILNME,NLET,IMNO,IRTFLG)

C       OPEN IMAGE COORDINATE FILE
	CALL FILCAN(FILNAM,NFN,NULL,NULL,FILNMC,DATEXC,IER)
	OPEN(FILE=FILNAM,UNIT=LUN,STATUS='OLD',FORM='UNFORMATTED')
        READ(LUN) NUMIM, NFAC, NSAM, NROW
 
C       OPEN PIXEL COORDINATE FILE
	CALL FILCAN(FILNAM,NFN,NULL,NULL,FILNMP,DATEXC,IER)
	OPEN(FILE=FILNAM,UNIT=LUNP,STATUS='OLD',FORM='UNFORMATTED')


C       BUFFER ALLOCATIONS
C       JMASK = OFFSET OF MASK ARRAY
C       JPIC = OFFSET OF ARRAY CONTAINING RECONSTITUTED IMAGE

20      IM = NSAM*NROW
	JMASK = 2000
	JPIC  = JMASK + IM
	JBUF  = JPIC + IM
	JOFF  = JBUF + NSAM
 
C       BYPASS FACTOR SELECTION IF COORDINATES COME FROM 
C       CLASSIFICATION  CLUSTER FILE

	IF (ICLUR.NE.1) THEN
	  MAXFAC = NFAC
          NUSE = MAXFAC	 
	   
c	  ARRAY NUMFAC(MAXFAC)
          PTRFAC = JOFF
	  IPQNUMFAC = %LOC(BUF(PTRFAC)) 
	  
          CALL RDPRAI(NUMFAC,MAXFAC,NUSE,1,MAXFAC,
     &              'ENTER FACTORS TO BE USED',NULL,IRTFLG) 
     
c	  NUSE IS THE MAX SIZE OF ANSWERS ENTERED IN NUMFAC ARRAY. 
C	  ASSIGN SPACE FOR NUMFAC ARRAY
          JOFF = PTRFAC + NUSE
	   
c	  ARRAY COO(MAXFAC)
	  PTRCOO = JOFF
	  IPQCOO = %LOC(BUF(PTRCOO))
	  JOFF = PTRCOO + MAXFAC
        ENDIF
	

C       OPEN EIGENVALUE FILE

	CALL FILCAN(FILNAM,NFN,NULL,NULL,FILNME,DATEXC,IER)
	OPEN(FILE=FILNAM,UNIT=LUNM,STATUS='OLD',FORM='UNFORMATTED')

C       NOW INITIALIZE JP'S RECONSTITUTION ROUTINE

        PCA_ERR = 0 
        IF (PICK_PCA) THEN
          CALL PCA_SRIPE( NUMIM, NPIX, NFAC, LUN, LUNP, LUNM,
     $                  BUF, JOFF, NSAM, NROW, SUMP, LCI, LIDI, LCP,
     $                  LIDP, LD, LPJ, JIM, MAXBUF, PCA_ERR)
          IF (PCA_ERR .NE. 0) RETURN
        ELSE
          CALL SRIPE(NUMIM,NPIX,NFAC,LUN,LUNP,LUNM,
     &              BUF,JOFF,NSAM,NROW,SUMP,LCI,LWI,LIDI,LCP,
     &              LWP,LIDP,LD,JIM, MAXBUF, PCA_ERR) 
          IF (PCA_ERR .NE. 0) RETURN
	END IF 

C       NOTE THAT BUF(LIDP) ... BUF(LIDP+NPIX-1) CONTAINS THE
C       MASK ADDRESS ARRAY (CALLED MADAR IN JPMSK1)

	CLOSE(LUN)
	CLOSE(LUNP)

C NOW THAT THE NUMBER OF FACTORS USED IN THE INITIAL ANALYSIS IS
C KNOWN, SWAP FACTOR SELECTION ARRAY AND CHECK AGAINST THIS NUMBER

	IF (ICLUR.NE.1) THEN
          DO  I=1,NUSE
          IF (NUMFAC(I).GT.NFAC)GOTO 9800
	  ENDDO
        ENDIF

C-------------------------------------------------
                  
C LOOP OVER ALL IMAGES;   begin DO LOOP 100
 
        DO  IM=1,IMUSED
	  IMNO = IMAR(IM)

          IF (ICLUR.EQ.1) THEN
	     WRITE(NOUT,*) ' NO CLUSTER RECONSTRUCTION IN JPMSK2'
	     RETURN
CC            IF THIS IS A RECONSTITUTION FROM CLUSTER COOS, 
CC            MAKE SURE THAT THE IMAGE NUMBER SPECIFIED IS WITHIN 
CC	     RANGE OF CLUSTER NUMBERS
CC
C             IF (IMNO.GT.NKLA) THEN
C                WRITE(NOUT,225) IMNO,NKLA
C225             FORMAT(' *** IMAGE NUMBER ',I4,
C     &                 ' OUTSIDE RANGE (1...',I4,')')
C                GOTO 100
C             ENDIF
C
C             DO 23 I=1,NUSE
C23              BUF(I) = CG(IMNO,I)
C             GOTO 24
          ENDIF

          IMS = IMSEQ4(NUMIM,IMNO,BUF(LIDI))
          IF (IMS .EQ. 0) THEN
             WRITE(NOUT,9700) IMNO
 9700        FORMAT(' ** IMAGE NO ',I5,' DOES NOT HAVE COORDINATES')

             NVAL = NUSE
             CALL RDPRAF(BUF,NUSE,NVAL,AMIN,AMAX,
     &       'ENTER COORDINATES FOR EACH FACTOR SELECTED',NULL,IRTFLG)

24           DO  I=1,MAXFAC
	       COO(I)=0
	     ENDDO

             IMAX=0
             DO 28 K=1,NUSE
               DO  I=1,MAXFAC
                 IF (NUMFAC(K).EQ.I) THEN
                   COO(I) = BUF(K)
                   IF (I.GT.IMAX) IMAX=I
                   GOTO 28
                 ENDIF
	       ENDDO
28          CONTINUE

C           WRITE OUT COORDINATES TO BE USED
            WRITE(NOUT,281)(COO(I),I=1,IMAX)
281         FORMAT(1X,8F8.3)

C           NOW CALL RECONSTITUTION ROUTINE FOR DUMMY IMAGE
	
            IF(PICK_PCA) THEN
              CALL PCA_RECDUM(NUMIM, NPIX, NUSE, NUMFAC, 
     &              NFAC, AV,BUF(JIM), BUF(LCP),
     &              COO, BUF(LD), BUF(LPJ), ADD_AVRG)
	    ELSE
              CALL RECDUM(NUMIM,NPIX,NUSE,NUMFAC,NFAC,SUMP,
     &              FMAX,FMIN,AV,SIG,IDIFF,BUF(JIM),
     &              BUF(LCP),COO,BUF(LD),BUF(LWI),BUF(LWP))
            END IF
	  ELSE

C           NOW CALL RECONSTITUTION ROUTINE FOR CURRENT IMAGE

            IF(PICK_PCA) THEN
               CALL PCA_REMAKE(IMS, NUMIM, NPIX, NUSE, NUMFAC, 
     &              NFAC, AV,BUF(JIM), BUF(LCP), 
     &              BUF(LCI), BUF(LD), BUF(LPJ), ADD_AVRG)
            ELSE
               CALL RECONS(IMS,NUMIM,NPIX,NUSE,NUMFAC,NFAC,SUMP,
     &                  FMAX,FMIN,AV,IDIFF,BUF(JIM),BUF(LCP),
     &                  BUF(LCI),BUF(LD),BUF(LWI),BUF(LWP))
            END IF
          ENDIF

          CALL FILGET(FILPAT1,FILNM1,NLET1,IMNO,IRTFLG)
          IF (IRTFLG .NE. 0) GOTO 9000
          IFORM=1
          CALL OPENF(FILNM1,LUN,NSAM,NROW,'UNKNOWN',NF,1)
          IF (NF.NE.2)GOTO 9300

          IF(PICK_PCA) THEN
            FMIN = BUF(JIM)
            DO I = 1, NPIX - 1
              IF (FMIN .GT. BUF(JIM + I)) FMIN = BUF(JIM+I)
            END DO
          END IF

C	 PUT FMIN IN THE RECONSTITUTED IMAGE BUF(JPIC:-)

	  DO  I = JPIC, JPIC + NSAM*NROW - 1
            BUF(I) = FMIN
          END DO
                                                    

C         NOW REPLACE PIXELS IN MASK AREA BY THEIR TRUE VALUES
C	  COPY OUTPUT IMAGE BUF(J IM:-) TO RECONSTITUTED IMAGE
C	  BUF(JPIC:-) SUBJECT TO MASK IN BUF(LIDP:-)
C         CA SR.

          DO  L = 1, NPIX
            CALL MSKDEC(L, BUF(LIDP), NSAM, K, I)
            BUF(JPIC + (I - 1)*NSAM + K - 1) = BUF(L + JIM - 1)
	  ENDDO

C         WRITE IMAGE ONTO DISK
C
           I1 = JPIC
           DO  I = 1, NROW
             CALL WRTLIN(LUN, BUF(I1), NSAM, I)
             I1 = I1 + NSAM
	   ENDDO

          CLOSE(LUN)
	ENDDO 


C	END DO LOOP 100

	RETURN
9000	IER=19
	GOTO 9900
9300	IER=4
	GOTO 9900
 
9800	WRITE(NOUT,9801) NFAC
9801	FORMAT(' ** AXIS NUMBER OUT OF RANGE. MAXIMUM = ',I2)
	WRITE(NOUT,9802) NFAC, NUMFAC(I)
9802    format(' The number of factors (or eigenvectors) used to ',
     $         ' create your data files is: ',i4,
     $         ' you have asked for factor: ',i4)
	RETURN

9900	CALL ERRT(IER,'JPMSK2',IER)
	END
#endif
@


1.15
log
@corrected, IDUM and equivalence removed
@
text
@d39 338
d715 1
@


1.14
log
@*** empty log message ***
@
text
@d50 1
d52 1
a52 1
	EQUIVALENCE(IDUM(1),BUF(1))
a65 1
	INTEGER   IDUM(2000)
@


1.13
log
@cosmetic
@
text
@d232 3
a234 2
          DO 21 I=1,NUSE
21        IF (NUMFAC(I).GT.NFAC)GOTO 9800
d241 1
a241 1
        DO 100 IM=1,IMUSED
d272 1
a272 1
24           DO 25 I=1,MAXFAC
d274 1
a274 1
25           CONTINUE
d278 1
a278 1
               DO 26 I=1,MAXFAC
d284 1
a284 1
26            CONTINUE
d342 1
a342 1
          DO 80 L = 1, NPIX
d345 1
a345 1
80        CONTINUE                                
d350 1
a350 1
           DO 90 I = 1, NROW
d353 1
a353 1
90         CONTINUE
d356 2
a357 1
100	CONTINUE
@


1.12
log
@better pointer for NUMFAC and COO arrays
@
text
@d2 1
a2 1
C++******************************************** 5/14/85   
a13 1
C
d40 1
a40 1
	SUBROUTINE JPMSK2(LUN,LUNM,LUNP,MAXbuf)
d77 1
a77 2

c	IMUSED IS THE NUMBER OF IMAGES WE WANT TO RECONSTRUCT.
d81 1
a81 1
c	ML.
a82 1
c       WRITE(NOUT,*) ' .FOR IMAGES:'
d84 1
a84 1
     $  'FILE PREFIX OR TEMPLATE (EG. PIC****)' ,IRTFLG)
d87 1
a87 1
        IF(FCHAR(4:6).EQ.'SRP') THEN
d89 1
a89 1
          iclur = 0
d91 1
a91 1
     &       'SUBTRACT AVERAGE IN PCA RECONSTITUTION ? (NO/yes)$' ,
d93 2
a94 2
          IF(PCA_AVRG .NE. 'Y' .AND. PCA_AVRG .NE. 'y') THEN
            ADD_AVRG = 'Y'
d96 2
a97 3

C	    SUBTRACT AVERAGE IN THE RECONSTRUCTED DATA.
            ADD_AVRG = 'N'
d109 1
a109 1
C
d111 2
a112 2
          IF (FCHAR(6:6).EQ.'D') THEN
            IDIFF=1
d122 1
a122 1
C
d127 1
a127 1
C	  
d145 1
a145 1
C
d150 1
a150 1
C
d156 1
a156 1
C
a157 1
C
d161 1
a161 1
C 
a162 1
C
d166 1
a166 1
C
d170 1
a170 1
C
a175 1

d184 1
a184 1
c	  array NUMFAC(MAXFAC)
d191 2
a192 2
c	  NUSE is the max size of answers entered in NUMFAC array. 
c	  assign space for NUMFAC array
d195 1
a195 1
c	  array COO(MAXFAC)
d199 1
a199 1
        END IF
d201 1
a201 1
C
d203 1
a203 1
C
d206 1
a206 1
C
d208 1
a208 1
C
d221 1
a221 1
c
d224 1
a224 1
c
d237 3
a239 3
C                  
C LOOP OVER ALL IMAGES;   begin do loop 100
C 
d285 1
a285 1
C
a286 1
C
d289 1
a289 1
C
d291 1
a291 1
C	
d302 1
a302 1
C
d304 1
a304 1
C
d328 3
a330 3
c
c	put fmin in the reconstituted image buf(jpic:-)
c
d335 1
a335 1
C
d340 1
a340 1
C
d356 3
a358 3
c
c	end do loop 100
c
a363 2
c9500	IER=100
c	GOTO 9900
d367 1
a367 1
	write(nout,9802) nfac, numfac(i)
@


1.11
log
@label 9500 not reached. comment it out.
@
text
@d187 5
a191 1
	IF (ICLUR.NE.1) THEN 
d193 2
a194 3
	  IPQNUMFAC = %LOC(BUF(PTRFAC))
	  MAXFAC = NFAC
          NUSE = MAXFAC
d196 7
a202 4
     &     'ENTER FACTORS TO BE USED',NULL,IRTFLG) 

          MAXFAC =  NUSE
          JOFF = PTRFAC +  NUSE
a203 1
	  JOFF = PTRCOO + NUSE
d205 1
@


1.10
log
@changed numfac(parameter) to numfac on the common buffer
ignore version 1.8 and 1.9. wrong versions of the current change
@
text
@d366 2
a367 2
9500	IER=100
	GOTO 9900
@


1.9
log
@change NUMFAC arrays to buf(I+ptrfac-1)
@
text
@d1 2
a2 3
C++*******************************************************************
C
C						 5/14/85   
d33 1
a33 1
C 	    CLUSTER FILE FROM A PREVIOUS RUN OF 'CL CLA'
d44 1
a44 1
c	PARAMETER (MAXKLA=50)
d47 1
a47 1
c         PARAMETER (MAXFAC=24)
d60 6
a65 2
C	REAL      COO(MAXFAC),CG(MAXKLA,MAXFAC)
C	INTEGER   NUMFAC(MAXFAC)
d83 1
a83 1
C	ML.
d85 1
a85 1
C       WRITE(NOUT,*) ' .FOR IMAGES:'
d92 1
a92 1
          ICLUR = 0
a170 1
 
d183 1
d187 3
a189 1
	IF (ICLUR.NE.1) THEN
d191 4
a194 4
          NUSE = MAXFAC 
          PTRFAC = JOFF
          CALL RDPRAI(BUF(PTRFAC),MAXFAC,NUSE,1,MAXFAC,
     &          'ENTER FACTORS TO BE USED',NULL,IRTFLG)
d199 1
d201 1
a201 2


d234 1
a234 2
c21       IF (NUMFAC(I).GT.NFAC)GOTO 9800 
21        IF (BUF(I+PTRFAC-1) .GT. NFAC ) GOTO 9800
d272 2
a273 4
  
24           DO 25 I = 1, MAXFAC
C	       COO(I) = 0
	       BUF(I+PTRCOO-1) = 0
d276 6
a281 17
C             IMAX=0
C             DO 28 K=1,NUSE
C               DO 26 I=1,MAXFAC
C                 IF (NUMFAC(K).EQ.I) THEN
C                   COO(I) = BUF(K)
C                   IF (I .GT. IMAX) IMAX=I
C                   GOTO 28
C                 ENDIF
C26            CONTINUE
C28          CONTINUE 
C
             IMAX = 0
             DO 28 K = 1, NUSE
               DO 26 I = 1, MAXFAC 
                 IF (BUF(K + PTRFAC-1) .EQ. I) THEN
                   BUF(I + PTRCOO-1) = BUF(K)
                   IF (I .GT. IMAX) IMAX=I
d283 1
a283 1
                 END IF
a285 1

d289 1
a289 2
C            WRITE(NOUT,281)(COO(I),I=1,IMAX)
            WRITE(NOUT,281)(BUF(I+PTRCOO-1),I=1,IMAX)
d295 1
a295 4
C              CALL PCA_RECDUM(NUMIM, NPIX, NUSE, NUMFAC, 
C     &              NFAC, AV,BUF(JIM), BUF(LCP),
C     &             COO, BUF(LD), BUF(LPJ), ADD_AVRG)
               CALL PCA_RECDUM(NUMIM, NPIX, NUSE, BUF(PTRFAC), 
d297 1
a297 1
     &              BUF(PTRCOO), BUF(LD), BUF(LPJ), ADD_AVRG)
d299 1
a299 4
C              CALL RECDUM(NUMIM,NPIX,NUSE,NUMFAC,NFAC,SUMP,
C     &              FMAX,FMIN,AV,SIG,IDIFF,BUF(JIM),
C     &              BUF(LCP),COO,BUF(LD),BUF(LWI),BUF(LWP))
               CALL RECDUM(NUMIM,NPIX,NUSE,BUF(PTRFAC),NFAC,SUMP,
d301 1
a301 1
     &              BUF(LCP),BUF(PTRCOO),BUF(LD),BUF(LWI),BUF(LWP))
d308 1
a308 4
C               CALL PCA_REMAKE(IMS, NUMIM, NPIX, NUSE, NUMFAC, 
C     &              NFAC, AV,BUF(JIM), BUF(LCP), 
C     &              BUF(LCI), BUF(LD), BUF(LPJ), ADD_AVRG)
               CALL PCA_REMAKE(IMS, NUMIM, NPIX, NUSE, BUF(PTRFAC), 
d312 1
a312 4
C               CALL RECONS(IMS,NUMIM,NPIX,NUSE,NUMFAC,NFAC,SUMP,
C     &                  FMAX,FMIN,AV,IDIFF,BUF(JIM),BUF(LCP),
C     &                  BUF(LCI),BUF(LD),BUF(LWI),BUF(LWP))
               CALL RECONS(IMS,NUMIM,NPIX,NUSE,BUF(PTRFAC),NFAC,SUMP,
d371 1
a371 2
C	write(nout,9802) nfac, numfac(i)
	write(nout,9802) nfac, BUF(i+PTRFAC-1)
@


1.8
log
@put numfac array in buf for dynamic size.
@
text
@d241 12
a252 3
C            IF THIS IS A RECONSTITUTION FROM CLUSTER COOS, 
C            MAKE SURE THAT THE IMAGE NUMBER SPECIFIED IS WITHIN 
C	     RANGE OF CLUSTER NUMBERS
d254 3
a256 10
             IF (IMNO.GT.NKLA) THEN
                WRITE(NOUT,225) IMNO,NKLA
225             FORMAT(' *** IMAGE NUMBER ',I4,
     &                 ' OUTSIDE RANGE (1...',I4,')')
                GOTO 100
             ENDIF

             DO 23 I=1,NUSE
23              BUF(I) = CG(IMNO,I)
             GOTO 24
d306 4
a309 1
              CALL PCA_RECDUM(NUMIM, NPIX, NUSE, NUMFAC, 
a311 1
C     &             COO, BUF(LD), BUF(LPJ), ADD_AVRG)
d313 4
a316 1
              CALL RECDUM(NUMIM,NPIX,NUSE,NUMFAC,NFAC,SUMP,
a318 1
C     &              BUF(LCP),COO,BUF(LD),BUF(LWI),BUF(LWP))
d325 4
a328 1
               CALL PCA_REMAKE(IMS, NUMIM, NPIX, NUSE, NUMFAC, 
d332 4
a335 1
               CALL RECONS(IMS,NUMIM,NPIX,NUSE,NUMFAC,NFAC,SUMP,
d394 2
a395 1
	write(nout,9802) nfac, numfac(i)
@


1.7
log
@pass maxbuf to pca_sripe and sripe routines and do chkmem there
@
text
@d1 3
a3 2

C++******************************************** 5/14/85   
d34 1
a34 1
C 	    CLUSTER FILE FROM A PREVIOUS RUN OF 'CA CLA'
d45 1
a45 1
	PARAMETER (MAXKLA=50)
d48 1
a48 1
        PARAMETER (MAXFAC=24)
d61 2
a62 2
	REAL      COO(MAXFAC),CG(MAXKLA,MAXFAC)
	INTEGER   NUMFAC(MAXFAC)
d67 1
a67 1
        INTEGER   PCA_ERR
d80 1
a80 1
c	ML.
d82 1
a82 1
c       WRITE(NOUT,*) ' .FOR IMAGES:'
d89 1
a89 1
          iclur = 0
d123 21
a143 11
            ICLUR=1
            CALL FILERD(FILNM2,NLET,NULL,'CLUSTER',IRTFLG)
            IF (IRTFLG.NE.0) RETURN
            CALL FILCAN(FILNAM,NFN,NULL,NULL,FILNM2,DATEXC,IER)
            OPEN(UNIT = LUN, FILE = FILNAM, STATUS = 'OLD',
     &           FORM = 'UNFORMATTED')
            READ(LUN) NUMIM,NFAC,NKLA,NUSE,(NUMFAC(K),K=1,NUSE)
            IF (NKLA.GT.MAXKLA) GOTO 9500
            READ(LUN)(IDUM(I),I=1,NUMIM),(IDUM(I),I=1,NUMIM),
     &        (BUF(I),I=1,NKLA),((CG(L,J),L=1,NKLA),J=1,NUSE)
            CLOSE(LUN)
a168 7
C       BYPASS FACTOR SELECTION IF COORDINATES COME FROM 
C       CLASSIFICATION  CLUSTER FILE

	IF (ICLUR.NE.1) THEN
          NUSE = MAXFAC
          CALL RDPRAI(NUMFAC,MAXFAC,NUSE,1,MAXFAC,
     &     'ENTER FACTORS TO BE USED',NULL,IRTFLG) 
a169 1
        END IF
d180 17
d229 2
a230 1
21        IF (NUMFAC(I).GT.NFAC)GOTO 9800
d241 14
a254 14
C           IF THIS IS A RECONSTITUTION FROM CLUSTER COOS, 
C           MAKE SURE THAT THE IMAGE NUMBER SPECIFIED IS WITHIN 
C	    RANGE OF CLUSTER NUMBERS
C
            IF (IMNO.GT.NKLA) THEN
              WRITE(NOUT,225) IMNO,NKLA
225           FORMAT(' *** IMAGE NUMBER ',I4,' OUTSIDE RANGE (1...',
     &        I4,')')
              GOTO 100
            ENDIF

            DO 23 I=1,NUSE
23          BUF(I) = CG(IMNO,I)
            GOTO 24
d266 4
a269 2
24           DO 25 I=1,MAXFAC
	       COO(I)=0
d272 17
a288 6
             IMAX=0
             DO 28 K=1,NUSE
               DO 26 I=1,MAXFAC
                 IF (NUMFAC(K).EQ.I) THEN
                   COO(I) = BUF(K)
                   IF (I.GT.IMAX) IMAX=I
d290 1
a290 1
                 ENDIF
d293 1
d297 2
a298 1
            WRITE(NOUT,281)(COO(I),I=1,IMAX)
d306 2
a307 1
     &              COO, BUF(LD), BUF(LPJ), ADD_AVRG)
d311 2
a312 1
     &              BUF(LCP),COO,BUF(LD),BUF(LWI),BUF(LWP))
@


1.6
log
@delete an extra common in arg list
@
text
@d185 1
d187 1
a187 5
          PCA_ERR = 0
C          CALL PCA_SRIPE( NUMIM, NPIX, NFAC, LUN, LUNP, LUNM,
C     $                  BUF, JOFF, NSAM, NROW, SUMP, LCI, LIDI, LCP,
C     $                  LIDP, LD, JIM, LPJ, LIM, PCA_ERR)
           CALL PCA_SRIPE( NUMIM, NPIX, NFAC, LUN, LUNP, LUNM,
d189 1
a189 1
     $                  LIDP, LD, LPJ, JIM, PCA_ERR)
a190 5
C          IF (LIM .GT. MAXBUF) THEN
C            JIM = LIM
C            GOTO 9600
C          END IF
          IF (JIM .GT. MAXBUF)           GOTO 9600
d194 2
a195 2
     &              LWP,LIDP,LD,JIM)
          IF (JIM .GT. MAXBUF) GOTO 9600
d341 1
a341 7

C       ADDRESS BOUNDARY. CHECK IT AGAINST ALLOCATION
9600    WRITE(NOUT,15) JIM,MAXBUF
15      FORMAT(' *** MEMORY ALLOCATION EXCEEDED.  NEEDED ',
     &     I6,'  PROVIDED ',I6)
        RETURN

@


1.5
log
@change filseq to filseqp call
@
text
@d83 1
a83 1
     $  'FILE PREFIX OR TEMPLATE (EG. PIC****)',,IRTFLG)
@


1.4
log
@nosave
@
text
@d49 2
a50 5
#ifdef SP_UNIX
	INCLUDE 'CMBLOCK.INC' 
#else
	INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
d82 3
a84 1
        CALL FILSEQ(FILPAT1,NLET1,IMAR,2000,IMUSED,IRTFLG)
@


1.3
log
@ name in open -> file
@
text
@d70 1
a70 1
        
a365 1
	RETURN
@


1.2
log
@cpp_lines_added
@
text
@d1 1
a1 1
C
d15 1
a15 1
C  $$  JPMSK2:   RECONSTITUTE IMAGES USING SELECTED FACTORS
d20 1
a20 1
C	CALL JPMSK2(LUN,LUNM,LUNP,MAXDI4)
d62 1
a62 2
        CHARACTER * 1    NULL, ANS, ADD_AVRG, PCA_AVRG
	DOUBLE PRECISION    DAV
d77 5
a81 5
c
c	imused is the number of images we want to reconstruct.
c	for example: 6 (if file numbers: 2-3,5-8)
c	imar() array holds  those file numbers.
c			see do loop 100
d84 1
a84 1
c        WRITE(NOUT,*) ' .FOR IMAGES:'
d151 1
a151 1
	OPEN(NAME=FILNAM,UNIT=LUN,STATUS='OLD',FORM='UNFORMATTED')
d157 1
a157 1
	OPEN(NAME=FILNAM,UNIT=LUNP,STATUS='OLD',FORM='UNFORMATTED')
d182 1
a182 1
	OPEN(NAME=FILNAM,UNIT=LUNM,STATUS='OLD',FORM='UNFORMATTED')
@


1.1
log
@Initial revision
@
text
@d49 3
d53 1
@
