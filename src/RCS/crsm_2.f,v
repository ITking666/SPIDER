head	1.10;
access;
symbols
	pre_getangas:1.10
	GPL2010:1.10
	pre_GPL2010:1.9
	pre_var_equation:1.9
	pre_fftwrings:1.9
	pre_opfiles:1.9
	src:1.9
	best-code:1.9
	x-named-regs:1.9
	x:1.9
	v13-00:1.9
	pre_GPL:1.8
	prec_CA:1.8
	noindx:1.8
	Bproc:1.8
	oct21:1.5
	last77:1.4;
locks; strict;
comment	@c @;


1.10
date	2010.06.24.13.25.22;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.17.21.00.43;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2000.03.06.20.06.19;	author bimal;	state Exp;
branches;
next	1.7;

1.7
date	99.12.07.15.36.57;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.11.10.23.09.13;	author yuchen;	state Exp;
branches;
next	1.5;

1.5
date	99.06.03.20.50.48;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	97.10.03.21.09.27;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.01.16.15.07.59;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.02.02.20.33.37;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.48.02;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.10
log
@GPL_2010
@
text
@C ++********************************************************************
C                                                                      
C                                                                      
C                                                                      
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      
C                                                                      
C                                                                      
C  PURPOSE:                                                            
C
C  Calculates circular croscorrelation, non-power-of-two dimensions
C  Input - X,Y Fourier transforms
C  Output -  O=F(X*conjg(Y))
C
C  PARAMETERS:                                                         
C
C IMAGE_PROCESSING_ROUTINE
C
C        1         2         3         4         5         6         7
C23456789012345678901234567890123456789012345678901234567890123456789012 
C***********************************************************************

        SUBROUTINE  CRSM_2(X,Y,O,NSAM,NROW,WRK)
C  WRK(MAX0(NSAM,NROW))

        DIMENSION  X(NSAM,NROW),Y(NSAM,NROW),O(NSAM,NROW),WRK(*)
        LOGICAL  IFNS,IFNR

        IFNS=MOD(NSAM,2).EQ.0
        IFNR=MOD(NROW,2).EQ.0

C       INS=1
C       CALL  Fmr_2(X,NSAM,NROW,WRK,INS)
C       IF(INS.EQ.0)  RETURN
C       CALL  Fmr_2(Y,NSAM,NROW,WRK,INS)

        I=NSAM/2-1
c$omp parallel do private(j)
        DO   J=1,NROW
           CALL  MLC(X(3,J),Y(3,J),O(3,J),I)
        ENDDO

        IF(IFNS)  THEN
c$omp parallel do private(i,j,kj)
           DO    I=1,2
              DO    J=2,NROW/2
                 KJ=2*J-1
                 O(I,KJ+1)=-X(I,KJ)*Y(I,KJ+1)+X(I,KJ+1)*Y(I,KJ)
                 O(I,KJ)=X(I,KJ)*Y(I,KJ)+X(I,KJ+1)*Y(I,KJ+1)
              ENDDO
              IF(.NOT.IFNR)  THEN
                 O(I,2)=-X(I,NROW)*Y(I,2)+X(I,2)*Y(I,NROW)
                 O(I,NROW)=X(I,NROW)*Y(I,NROW)+X(I,2)*Y(I,2)
              ENDIF
           ENDDO
           O(2,1)=X(2,1)*Y(2,1)
           IF(IFNR)  THEN
              O(1,2)=X(1,2)*Y(1,2)
              O(2,2)=X(2,2)*Y(2,2)
           ENDIF
        ELSE    

c$omp parallel do private(j,kj)
           DO    J=2,NROW/2
              KJ=2*J-1
              O(1,KJ+1)=-X(1,KJ)*Y(1,KJ+1)+X(1,KJ+1)*Y(1,KJ)
              O(1,KJ)=X(1,KJ)*Y(1,KJ)+X(1,KJ+1)*Y(1,KJ+1)
           ENDDO
           IF(IFNR)  THEN
              O(1,2)=X(1,2)*Y(1,2)
           ELSE
              O(1,2)=-X(1,NROW)*Y(1,2)+X(1,2)*Y(1,NROW)
              O(1,NROW)=X(1,NROW)*Y(1,NROW)+X(1,2)*Y(1,2)
           ENDIF
c$omp parallel do private(j)
           DO    J=1,NROW
              O(2,J)=-X(NSAM,J)*Y(2,J)+X(2,J)*Y(NSAM,J)
              O(NSAM,J)=X(NSAM,J)*Y(NSAM,J)+X(2,J)*Y(2,J)
           ENDDO
        ENDIF
        O(1,1)=X(1,1)*Y(1,1)

        INS=-1
        CALL  Fmr_2(O,NSAM,NROW,WRK,INS)

        NR2=NROW/2
        NS2=NSAM/2
        IF(IFNS.AND.IFNR)  THEN
           DO    J=1,NR2
              JJ=J+NR2
              DO    I=1,NS2
                 II=I+NS2
                 Q=O(I,J)
                 O(I,J)=O(II,JJ)
                 O(II,JJ)=Q
                 Q=O(I,JJ)
                 O(I,JJ)=O(II,J)
                 O(II,J)=Q
              ENDDO
           ENDDO
        ELSEIF(.NOT.IFNS .AND. .NOT.IFNR)  THEN
           K=0
           DO    I=1,NS2+1
              K=K+1
              WRK(K)=O(I,NR2+1)
           ENDDO
           DO    J=1,NR2
              K=K+1
              WRK(K)=O(NS2+1,J)
           ENDDO
           DO J=1,NR2+1
              DO    I=1,NS2
                 O(I,J+NR2)=O(I+NS2+1,J)
              ENDDO
              IF(J.EQ.NR2+1)  GOTO  23
              DO    I=1,NS2+1
                 O(I+NS2,J)=O(I,J+NR2+1)
              ENDDO
23            CONTINUE
           ENDDO
           DO    J=1,NR2
              DO    I=1,NS2
                 O(I+NS2,J+NR2)=O(I,J)
                 O(I,J)=O(I+NS2+1,J+NR2+1)
              ENDDO
           ENDDO
           K=0
           DO    I=1,NS2+1
              K=K+1
              O(I+NS2,NROW)=WRK(K)
           ENDDO
           DO    J=1,NR2
              K=K+1
              O(NSAM,J+NR2)=WRK(K)
           ENDDO

        ELSEIF(.NOT.IFNS .AND.IFNR)  THEN
           DO    J=1,NR2
              WRK(J)=O(NS2+1,J)
           ENDDO

           DO I=1,NS2+1
              DO    J=1,NR2
                 O(I+NS2,J)=O(I,J+NR2)
              ENDDO
              IF(I.EQ.NS2+1)  GOTO  52
              DO    J=1,NR2
                 O(I,J+NR2)=O(I+NS2+1,J)
              ENDDO
52            CONTINUE
           ENDDO
           DO    J=1,NR2
              DO    I=1,NS2
                 O(I+NS2,J+NR2)=O(I,J)
                 O(I,J)=O(I+NS2+1,J+NR2)
              ENDDO
           ENDDO
           DO    J=1,NR2
              O(NSAM,J+NR2)=WRK(J)
           ENDDO

        ELSEIF(IFNS .AND. .NOT.IFNR)  THEN
           DO    I=1,NS2
              WRK(I)=O(I,NR2+1)
           ENDDO

           DO J=1,NR2+1
              DO    I=1,NS2
                 O(I,J+NR2)=O(I+NS2,J)
              ENDDO
              IF(J.EQ.NR2+1)  GOTO  62
              DO    I=1,NS2
                 O(I+NS2,J)=O(I,J+NR2+1)
              ENDDO
62            CONTINUE
           ENDDO
           DO    I=1,NS2
              DO    J=1,NR2
                 O(I+NS2,J+NR2)=O(I,J)
                 O(I,J)=O(I+NS2,J+NR2+1)
              ENDDO
           ENDDO
           DO    I=1,NS2
              O(I+NS2,NROW)=WRK(I)
           ENDDO
        ENDIF
        END
@


1.9
log
@GPL License fixed
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.8
log
@cosmetic
@
text
@d6 23
a28 6
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.7
log
@header
@
text
@a0 1

d2 3
a4 3
C                                                                      *
C                                                                      *
C                                                                      *
d13 4
a16 4
C                                                                      *
C                                                                      *
C                                                                      *
C  PURPOSE:                                                            *
d22 6
a27 4
C  PARAMETERS:                                                         *
C                                                                      *
C        0         2         3         4         5         6         7 *
C23456789012345678901234567890123456789012345678901234567890123456789012
d30 1
a30 1
	SUBROUTINE  CRSM_2(X,Y,O,NSAM,NROW,WRK)
d33 2
a34 2
	DIMENSION  X(NSAM,NROW),Y(NSAM,NROW),O(NSAM,NROW),WRK(*)
	LOGICAL  IFNS,IFNR
d36 2
a37 2
	IFNS=MOD(NSAM,2).EQ.0
	IFNR=MOD(NROW,2).EQ.0
d39 4
a42 4
C	INS=1
C	CALL  Fmr_2(X,NSAM,NROW,WRK,INS)
C	IF(INS.EQ.0)  RETURN
C	CALL  Fmr_2(Y,NSAM,NROW,WRK,INS)
d44 1
a44 1
	I=NSAM/2-1
d46 3
a48 3
	DO   J=1,NROW
	 CALL  MLC(X(3,J),Y(3,J),O(3,J),I)
	ENDDO
d50 1
a50 1
	IF(IFNS)  THEN
d52 18
a69 19
	DO    I=1,2
   	DO    J=2,NROW/2
	 KJ=2*J-1
	 O(I,KJ+1)=-X(I,KJ)*Y(I,KJ+1)+X(I,KJ+1)*Y(I,KJ)
	 O(I,KJ)=X(I,KJ)*Y(I,KJ)+X(I,KJ+1)*Y(I,KJ+1)
	ENDDO
	IF(.NOT.IFNR)  THEN
	 O(I,2)=-X(I,NROW)*Y(I,2)+X(I,2)*Y(I,NROW)
	 O(I,NROW)=X(I,NROW)*Y(I,NROW)+X(I,2)*Y(I,2)
	 ENDIF
	ENDDO
	O(2,1)=X(2,1)*Y(2,1)
	IF(IFNR)  THEN
	O(1,2)=X(1,2)*Y(1,2)
	O(2,2)=X(2,2)*Y(2,2)
	ENDIF
C
	ELSE	
C
d71 11
a81 11
 	DO    J=2,NROW/2
	 KJ=2*J-1
	 O(1,KJ+1)=-X(1,KJ)*Y(1,KJ+1)+X(1,KJ+1)*Y(1,KJ)
	 O(1,KJ)=X(1,KJ)*Y(1,KJ)+X(1,KJ+1)*Y(1,KJ+1)
	ENDDO
	IF(IFNR)  THEN
	O(1,2)=X(1,2)*Y(1,2)
	ELSE
	O(1,2)=-X(1,NROW)*Y(1,2)+X(1,2)*Y(1,NROW)
	O(1,NROW)=X(1,NROW)*Y(1,NROW)+X(1,2)*Y(1,2)
	ENDIF
d83 112
a194 109
	DO    J=1,NROW
	 O(2,J)=-X(NSAM,J)*Y(2,J)+X(2,J)*Y(NSAM,J)
	 O(NSAM,J)=X(NSAM,J)*Y(NSAM,J)+X(2,J)*Y(2,J)
	ENDDO
	ENDIF
	O(1,1)=X(1,1)*Y(1,1)
C
	INS=-1
	CALL  Fmr_2(O,NSAM,NROW,WRK,INS)
C
	NR2=NROW/2
	NS2=NSAM/2
	IF(IFNS.AND.IFNR)  THEN
	DO    J=1,NR2
	 JJ=J+NR2
	  DO    I=1,NS2
	   II=I+NS2
	   Q=O(I,J)
	   O(I,J)=O(II,JJ)
	   O(II,JJ)=Q
	   Q=O(I,JJ)
	   O(I,JJ)=O(II,J)
	   O(II,J)=Q
	  ENDDO
	ENDDO
	ELSEIF(.NOT.IFNS .AND. .NOT.IFNR)  THEN
	K=0
	DO    I=1,NS2+1
	 K=K+1
	 WRK(K)=O(I,NR2+1)
	ENDDO
	DO    J=1,NR2
	 K=K+1
	 WRK(K)=O(NS2+1,J)
	ENDDO
	DO  23  J=1,NR2+1
	DO    I=1,NS2
	 O(I,J+NR2)=O(I+NS2+1,J)
	ENDDO
	IF(J.EQ.NR2+1)  GOTO  23
	DO    I=1,NS2+1
	 O(I+NS2,J)=O(I,J+NR2+1)
	ENDDO
23	CONTINUE
	DO    J=1,NR2
	 DO    I=1,NS2
	  O(I+NS2,J+NR2)=O(I,J)
	  O(I,J)=O(I+NS2+1,J+NR2+1)
	 ENDDO
	ENDDO
	K=0
	DO    I=1,NS2+1
	 K=K+1
	 O(I+NS2,NROW)=WRK(K)
	ENDDO
	DO    J=1,NR2
	 K=K+1
	 O(NSAM,J+NR2)=WRK(K)
	ENDDO
C
	ELSEIF(.NOT.IFNS .AND.IFNR)  THEN
	DO    J=1,NR2
	 WRK(J)=O(NS2+1,J)
	ENDDO
C
	DO  52  I=1,NS2+1
 	DO    J=1,NR2
	  O(I+NS2,J)=O(I,J+NR2)
	ENDDO
	IF(I.EQ.NS2+1)  GOTO  52
	DO    J=1,NR2
	  O(I,J+NR2)=O(I+NS2+1,J)
	ENDDO
52	CONTINUE
	DO    J=1,NR2
	 DO    I=1,NS2
	  O(I+NS2,J+NR2)=O(I,J)
	  O(I,J)=O(I+NS2+1,J+NR2)
	 ENDDO
	ENDDO
	DO    J=1,NR2
	  O(NSAM,J+NR2)=WRK(J)
	ENDDO
C
	ELSEIF(IFNS .AND. .NOT.IFNR)  THEN
	DO    I=1,NS2
	  WRK(I)=O(I,NR2+1)
	ENDDO
C
	DO  62  J=1,NR2+1
 	DO    I=1,NS2
	  O(I,J+NR2)=O(I+NS2,J)
	ENDDO
	IF(J.EQ.NR2+1)  GOTO  62
	DO    I=1,NS2
	  O(I+NS2,J)=O(I,J+NR2+1)
	ENDDO
62	CONTINUE
	DO    I=1,NS2
	 DO    J=1,NR2
	  O(I+NS2,J+NR2)=O(I,J)
	  O(I,J)=O(I+NS2,J+NR2+1)
	 ENDDO
	ENDDO
	DO    I=1,NS2
	 O(I+NS2,NROW)=WRK(I)
	ENDDO
	ENDIF
	END
@


1.6
log
@a
@
text
@d1 17
a17 1
	SUBROUTINE  CRSM_2(X,Y,O,NSAM,NROW,WRK)
d23 7
d31 1
a31 1
C
a34 1
C
d37 1
a37 1
C
d42 1
a42 1
C
d48 1
a48 1
C
@


1.5
log
@OpenMP
@
text
@d11 1
a11 1
CNO_SAVE
@


1.4
log
@*** empty log message ***
@
text
@d22 1
a22 1
c$doacross local(j)
d28 1
a28 1
c$doacross local(i,j,kj)
d48 1
a48 1
c$doacross local(j,kj)
d60 1
a60 1
c$doacross local(j)
@


1.3
log
@nosave
@
text
@d23 3
a25 3
	DO  201  J=1,NROW
	CALL  MLC(X(3,J),Y(3,J),O(3,J),I)
 201	CONTINUE
d29 6
a34 6
	DO  202  I=1,2
   	DO  203  J=2,NROW/2
	KJ=2*J-1
	O(I,KJ+1)=-X(I,KJ)*Y(I,KJ+1)+X(I,KJ+1)*Y(I,KJ)
	O(I,KJ)=X(I,KJ)*Y(I,KJ)+X(I,KJ+1)*Y(I,KJ+1)
203	CONTINUE
d36 4
a39 4
	O(I,2)=-X(I,NROW)*Y(I,2)+X(I,2)*Y(I,NROW)
	O(I,NROW)=X(I,NROW)*Y(I,NROW)+X(I,2)*Y(I,2)
	ENDIF
202	CONTINUE
d49 5
a53 5
 	DO  301  J=2,NROW/2
	KJ=2*J-1
	O(1,KJ+1)=-X(1,KJ)*Y(1,KJ+1)+X(1,KJ+1)*Y(1,KJ)
	O(1,KJ)=X(1,KJ)*Y(1,KJ)+X(1,KJ+1)*Y(1,KJ+1)
301 	CONTINUE
d61 4
a64 4
	DO  302  J=1,NROW
	O(2,J)=-X(NSAM,J)*Y(2,J)+X(2,J)*Y(NSAM,J)
	O(NSAM,J)=X(NSAM,J)*Y(NSAM,J)+X(2,J)*Y(2,J)
302 	CONTINUE
d74 12
a85 11
	DO  2  J=1,NR2
	JJ=J+NR2
	DO  2  I=1,NS2
	II=I+NS2
	Q=O(I,J)
	O(I,J)=O(II,JJ)
	O(II,JJ)=Q
	Q=O(I,JJ)
	O(I,JJ)=O(II,J)
	O(II,J)=Q
2 	CONTINUE
d88 8
a95 6
	DO  21  I=1,NS2+1
	K=K+1
21	WRK(K)=O(I,NR2+1)
	DO  22  J=1,NR2
	K=K+1
22	WRK(K)=O(NS2+1,J)
d97 3
a99 2
	DO  24  I=1,NS2
24	O(I,J+NR2)=O(I+NS2+1,J)
d101 3
a103 2
	DO  25  I=1,NS2+1
25	O(I+NS2,J)=O(I,J+NR2+1)
d105 6
a110 4
	DO  32  J=1,NR2
	DO  32  I=1,NS2
	O(I+NS2,J+NR2)=O(I,J)
32	O(I,J)=O(I+NS2+1,J+NR2+1)
d112 8
a119 6
	DO  41  I=1,NS2+1
	K=K+1
41	O(I+NS2,NROW)=WRK(K)
	DO  42  J=1,NR2
	K=K+1
42	O(NSAM,J+NR2)=WRK(K)
d122 3
a124 2
	DO  51  J=1,NR2
51	WRK(J)=O(NS2+1,J)
d127 3
a129 2
 	DO  53  J=1,NR2
53	O(I+NS2,J)=O(I,J+NR2)
d131 3
a133 2
	DO  54  J=1,NR2
54	O(I,J+NR2)=O(I+NS2+1,J)
d135 9
a143 6
	DO  55  J=1,NR2
	DO  55  I=1,NS2
	O(I+NS2,J+NR2)=O(I,J)
55	O(I,J)=O(I+NS2+1,J+NR2)
	DO  56  J=1,NR2
56	O(NSAM,J+NR2)=WRK(J)
d146 3
a148 2
	DO  61  I=1,NS2
61	WRK(I)=O(I,NR2+1)
d151 3
a153 2
 	DO  63  I=1,NS2
63	O(I,J+NR2)=O(I+NS2,J)
d155 3
a157 2
	DO  64  I=1,NS2
64	O(I+NS2,J)=O(I,J+NR2+1)
d159 9
a167 6
	DO  65  I=1,NS2
	DO  65  J=1,NR2
	O(I+NS2,J+NR2)=O(I,J)
65	O(I,J)=O(I+NS2,J+NR2+1)
	DO  66  I=1,NS2
66	O(I+NS2,NROW)=WRK(I)
@


1.2
log
@nosave mp
@
text
@d11 1
@


1.1
log
@Initial revision
@
text
@d21 1
d27 1
d47 1
d59 1
@
