head	1.13;
access;
symbols
	pre_getangas:1.13
	GPL2010:1.13
	pre_GPL2010:1.12
	pre_var_equation:1.10
	pre_fftwrings:1.10
	pre_opfiles:1.10
	src:1.10
	best-code:1.9
	named-reg:1.9
	x-named-regs:1.8
	x:1.8
	v13-00:1.7
	pre_GPL:1.6
	prec_CA:1.6
	noindx:1.6
	Bproc:1.5
	oct21:1.4
	last77:1.2;
locks; strict;
comment	@c @;


1.13
date	2010.06.24.13.25.58;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2009.11.10.19.28.31;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2009.08.19.13.53.30;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2006.07.20.15.37.01;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.12.15.27.56;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.15.21.50.57;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.17.21.00.33;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.11.14.08.57;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.08.18.18.19;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	99.08.27.19.01.49;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	99.08.06.12.54.48;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	98.01.02.20.17.50;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	98.01.02.17.43.25;	author leith;	state Exp;
branches;
next	;


desc
@new
@


1.13
log
@GPL_2010
@
text
@C++*********************************************************************
C
C  INQUIREREG.F                      NEW ROUTINE  JAN 1998 ARDEAN LEITH
C                  FOR VARIABLES                  NOV 2005 ARDEAN LEITH
C                  SAYANS = .TRUE.                JUL 2006 ARDEAN LEITH
C                  [i] BUG                        AUG 2009 ARDEAN LEITH
C                  SHOULD NOT ACCEPT SYMVAR       NOV 2009 ARDEAN LEITH
C             
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   INQUIREREG(SAYIT,SHUDSTOP,IRTFLG)    
C
C   PURPOSE: DETERMINES IF A REGISTER/REAL VARIABLE'S VALUE IS CORRECT
C
C   PARAMETERS:  SAYIT    LOGICAL FLAG TO LIST ERROR
C                SHUDSTOP LOGICAL FLAG TO STOP IF WRONG IN BATCH
C                IRTFLG   ERROR FLAG
C                         -1 IS ABORT INPUT
C                          0  IS NORMAL
C                          1 INQUIRY WAS NOT AS EXPECTED
C
C--*********************************************************************

      SUBROUTINE INQUIREREG(SAYIT,SHUDSTOP,IRTFLG)

      INCLUDE 'CMBLOCK.INC' 
 
      LOGICAL            :: SAYIT,SHUDSTOP
      CHARACTER(LEN=80)  :: VARNAME,RESPONSE,REGNAME
      CHARACTER(LEN=160) :: MESG
      CHARACTER(LEN=1)   :: CDUM
      REAL, DIMENSION(2) :: FLIST

      LOGICAL            :: GETANS,UPPER,WANTSUB
      LOGICAL            :: SAYPRMT,SAYANS,ENDATSEMI,STRIP

      GETANS    = .TRUE.
      UPPER     = .FALSE.
      WANTSUB   = .FALSE.
      SAYPRMT   = .TRUE.
      SAYANS    = .TRUE.
      ENDATSEMI = .TRUE.
      STRIP     = .TRUE.

      CALL RDPR('REGISTER VARIABLE, & ITS CORRECT VALUE',NCHAR,RESPONSE,.TRUE.,.FALSE.,.FALSE.,
     &       GETANS,UPPER,WANTSUB,SAYPRMT,SAYANS,ENDATSEMI,STRIP,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN

C     SEE IF THERE IS A VARIABLE ID STRING IN RESPONSE STRING
      CALL CHARINSIDE(RESPONSE,'[',']',.TRUE.,.FALSE.,
     &                 IP1,IP2,NCHARI)

      IF (NCHARI .GE. 1) THEN
C         MAKE SURE VARIABLE IS A REGISTER VARIABLE NOT A STRING VAR.  
          CALL ISSYMPAR(RESPONSE(IP1-1:IP2+1),-1,ICVAR,IRTFLG) 
          IF (ICVAR .GT. 0) THEN
C            THIS IS A STRING VARIABLE, NOT A REGISTER VARIABLE!
             MESG = RESPONSE(IP1-1:IP2+1) //'IS NOT A REGISTER VARIABLE'
             IF (SAYIT) WRITE(NOUT,92) MESG 
92           FORMAT('  *** ERROR: ',A)
             IF (SHUDSTOP) CALL ERRT(101,MESG,NE)
             IRTFLG = 1
             RETURN
          ENDIF

C         EVALUATE RESPONSE 
          RESPONSE = '~' // RESPONSE(1:)
          CALL RDPRINC(RESPONSE(1:NCHAR+1),2,.FALSE.,NOT_USED,
     &                 REGVALUE,CORRECTVAL,FDUM,IRTFLG)        
          IF (IRTFLG .NE. 0) RETURN

          IF (REGVALUE .NE. CORRECTVAL) THEN
             VARNAME = RESPONSE(2:IP2+2) 

             IF (SAYIT) WRITE(NOUT,90) VARNAME(1:IP2+1),
     &                  REGVALUE,CORRECTVAL 
90           FORMAT(' *** ',A,' =',G11.3, '  SHOULD BE: ',G11.3)

             IF (SHUDSTOP) CALL ERRT(101,'REGISTER VALUE INCORRECT',NE)
             IRTFLG = 1
             RETURN
          ENDIF

       ELSE
C         NOT A NAMED REGISTER VARIABLE, MAYBE OBSOLETE NUMBER ONLY
          RESPONSE(1:NCHAR+1) = '~' // RESPONSE(1:NCHAR)
          CALL RDPRINC(RESPONSE(1:NCHAR+1),2,.FALSE.,NOT_USED,
     &                 REGVALUE,CORRECTVAL,FDUM,IRTFLG)        
          IF (IRTFLG .NE. 0) RETURN

          IREG         = REGVALUE
          REGNAME(1:2) = '[_'
          CALL INTTOCHAR(IREG,REGNAME(3:),NLET,1)
          REGNAME(NLET+3:NLET+3) = ']'
          CALL REG_GET_VAR(0,REGNAME,.FALSE.,REGVALUE,IREG,IEND,IRTFLG)
          IF (IRTFLG .NE. 0) RETURN

          IF (REGVALUE .NE. CORRECTVAL) THEN
             LENT = lnblnkn(REGNAME)
             IF (SAYIT) WRITE(NOUT,91) REGNAME(:LENT),
     &                                 REGVALUE,CORRECTVAL 
91           FORMAT(' ***  ',A,' = ',G11.3,'   SHOULD BE: ',G11.3)

             IF (SHUDSTOP) CALL ERRT(101,'REGISTER VALUE INCORRECT',NE)
             IRTFLG = 1
             RETURN
           ENDIF
        ENDIF

        IRTFLG = 0
        WRITE(NOUT,*) ' '

        END






@


1.12
log
@SHOULD NOT ACCEPT SYMVAR
@
text
@d10 4
a13 3
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
C=* Copyright 1985-2009  Health Research Inc.                          *
d24 1
a24 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a25 1
C=*                                                                    *
d27 1
a27 1
C=* along with this program. If not, see <http://www.gnu.org/licenses> *    
@


1.11
log
@[i] BUG
@
text
@d7 1
d50 1
d72 1
a72 1
 
d74 12
d105 1
a105 1
C         NOT A NAMED REGISTER, MAYBE OBSOLETE NUMBER ONLY
d121 1
a121 1
     &                                REGVALUE,CORRECTVAL 
@


1.10
log
@sayans = true
@
text
@d5 3
a7 2
C                  SAYANS = .TRUE.               JULY 2006 ARDEAN LEITH
C                                
d9 5
a13 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d15 1
a15 6
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d20 1
a20 1
C=* This program is distributed in the hope that it will be useful,    *
d26 1
a26 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d71 1
a71 1
      IF (NCHARI .GE. 2) THEN
@


1.9
log
@native named registers
@
text
@d5 1
d38 1
a38 1
C                SHUDSTOP LOGICAL FLAGE TO STOP IF WRONG IN BATCH
d62 1
a62 1
      SAYANS    = .FALSE.
@


1.8
log
@named register support
@
text
@d45 1
a45 1
       SUBROUTINE INQUIREREG(SAYIT,SHUDSTOP,IRTFLG)
d47 1
a47 1
       INCLUDE 'CMBLOCK.INC' 
d49 19
a67 7
       LOGICAL            :: SAYIT,SHUDSTOP
       CHARACTER(LEN=80)  :: VARNAME,RESPONSE
       REAL, DIMENSION(2) :: FLIST

       CALL RDPR('REGISTER VARIABLE & ITS CORRECT VALUE',NCHAR,RESPONSE,
     &           .TRUE.,.FALSE.,.FALSE.,.TRUE.,.TRUE.,.TRUE.,IRTFLG)
       IF (IRTFLG .NE. 0) RETURN
d69 2
a70 2
C      SEE IF THERE IS A VARIABLE ID STRING IN RESPONSE STRING
       CALL CHARINSIDE(RESPONSE,'[',']',.TRUE.,.FALSE.,
d73 5
a77 10
       IF (NCHARI .GT. 2) THEN

          CALL SUBSYMPAR(RESPONSE,RESPONSE,NCHAR,0,IRTFLG)

          RESPONSE(1:NCHAR+1) = '~' // RESPONSE(1:NCHAR)
          NUMBER = 2
          HI     = HUGE(BIG)
          FLOW   = -HI
          CALL RDPRANC(IDUM,FLIST,2,NUMBER,FLOW,HI,
     &                 RESPONSE(1:NCHAR+1),.TRUE.,.FALSE.,IRTFLG)        
d80 2
a81 7
          IF (NUMBER .LT. 2) THEN
             IF (MYPID .LE. 0) THEN
                WRITE(NDAT,*)' *** NO CORRECT VALUE IN: ',RESPONSE
             ENDIF
             CALL ERRT(101,'INQUIREREG',NE)
             RETURN
          ENDIF
d83 2
a84 6
          REGVALUE   = FLIST(1)
          CORRECTVAL = FLIST(2)
          VARNAME    = RESPONSE(IP1:IP2)

          IF (REGVALUE .NE. CORRECTVAL) THEN
             IF (SAYIT) WRITE(NOUT,90) VARNAME,REGVALUE,CORRECTVAL 
d93 1
a93 2
C         NOT A NAMED REGISTER

d95 2
a96 5
          NUMBER = 2
          HI     = HUGE(BIG)
          FLOW   = -HI
          CALL RDPRANC(IDUM,FLIST,2,NUMBER,FLOW,HI,
     &                 RESPONSE(1:NCHAR+1),.TRUE.,.FALSE.,IRTFLG)        
d99 6
a104 13
          IF (NUMBER .LT. 2) THEN
             IF (MYPID .LE. 0) THEN
                WRITE(NDAT,*)' *** NO CORRECT VALUE IN: ',RESPONSE
             ENDIF
             CALL ERRT(101,'INQUIREREG',NE)
             RETURN
          ENDIF

          IREG       = FLIST(1)
          CALL REG_GET(IREG,REGVALUE,.TRUE.,IRTFLG)
          IF (IRTFLG .EQ. -1) RETURN

          CORRECTVAL = FLIST(2)
d107 4
a110 3
             IF (SAYIT) WRITE(NOUT,91) IREG,REGVALUE,CORRECTVAL 
91           FORMAT(' *** REGISTER: ',I5,' = ',G11.3,
     &                             '  SHOULD BE: ',G11.3)
d120 1
a120 1
        RETURN
a122 47
#ifdef NEVER
            IF (MYPID .LE. 0) THEN
             WRITE(NDAT,*)' *** NO VARIABLE NAME ([NAME]) IN: ',RESPONSE
            ENDIF
            CALL ERRT(101,'INQUIREREG',NE)
            RETURN
          ENDIF
          VARNAME = RESPONSE(IP1:IP2) 
        IF (FCHAR .EQ. 'REG') THEN
           IRTFLG = 1

           CALL RDPRM2S(REG,CORRECTVAL,NOT_USED,
     &                'REGISTER & ITS REQUIRED VALUE',IRTFLG)
           IREG = REG + 0.5

           CALL REG_GET(IREG,REGVALUE,.TRUE.,IRTFLG)
           IF (IRTFLG .EQ. -1) RETURN

           IF (REGVALUE .NE. CORRECTVAL) THEN
              IF (SAYIT) WRITE(NOUT,90) IREG,REGVALUE,CORRECTVAL 
90            FORMAT(' *** REGISTER: ',I6,'    VALUE: ',G11.3,
     &                                '  SHOULD BE: ',G11.3)
              IF (SHUDSTOP) CALL ERRT(101,'REGISTER VALUE INCORRECT',NE)
              RETURN
           ENDIF

           IRTFLG = 0
           WRITE(NOUT,*) ' '

           RETURN

        ELSE
 
C         SEE IF THERE IS A VARIABLE ID STRING IN RESPONSE STRING
          CALL CHARINSIDE(RESPONSE,'[',']',.TRUE.,.FALSE.,
     &                    IP1,IP2,NCHARI)

          IF (NCHARI .LT. 3) THEN
            IF (MYPID .LE. 0) THEN
             WRITE(NDAT,*)' *** NO VARIABLE NAME ([NAME]) IN: ',RESPONSE
            ENDIF
            CALL ERRT(101,'INQUIREREG',NE)
            RETURN
          ENDIF
          VARNAME = RESPONSE(IP1:IP2) 

#endif
@


1.7
log
@GPL License fixed
@
text
@d3 2
a4 1
C  INQUIREREG.F                                  NEW ROUTINE  JAN 98 al
d32 3
a34 1
C   INQUIREIF    DETERMINES IF A REGISTER VALUE IS CORRECT
d45 1
a45 1
        SUBROUTINE INQUIREREG(SAYIT,SHUDSTOP,IRTFLG)
d47 13
a59 1
        INCLUDE 'CMBLOCK.INC' 
d61 1
a61 1
        LOGICAL        SAYIT,SHUDSTOP
d63 1
a63 1
        IRTFLG = 1
d65 58
a122 6
        CALL RDPRM2S(REG,CORRECTVAL,NOT_USED,
     &               'REGISTER & ITS REQUIRED VALUE',IRTFLG)
        IF (IRTFLG .EQ. -1) RETURN

        IREG = REG + 0.5
        CALL REG_GET(IREG,REGVALUE,.TRUE.,IRTFLG)
d124 4
a127 6
        IF (REGVALUE .NE. CORRECTVAL) THEN
           IF (SAYIT) WRITE(NOUT,90) IREG,REGVALUE,CORRECTVAL 
90         FORMAT(' *** REGISTER: ',I6,'    VALUE: ',G11.3,
     &                             '  SHOULD BE: ',G11.3)
           IF (SHUDSTOP) CALL ERRT(101,'REGISTER VALUE INCORRECT',NE)
           RETURN
a131 1

d135 48
@


1.6
log
@nloop,iloop_removed
@
text
@d6 23
a28 6
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK      *
C *  COPYRIGHT (C)1985, 1996 HEALTH RESEARCH INCORPORATED, ALBANY, NY. *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HEALTH            *
C * RESEARCH INC. AND ARE NOT TO BE DISCLOSED TO OTHERS OR USED        *
C * FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF       *
C * HEALTH RESEARCH INC.                                               *
@


1.5
log
@changes for reg_set
@
text
@d33 1
a33 1
        CALL RDPRM2S(REG,CORRECTVAL,NLOOP,ILOOP,
@


1.4
log
@resgister # wrong on printout
@
text
@d33 1
a33 1
        CALL RDPRM2S(REG,VALUE,NLOOP,ILOOP,
d37 2
a38 6
        IREG = REG + 1.5
        IF (IREG .LT. 1 .OR. IREG .GT. 103) THEN
C          REGISTER OUT OF RANGE
           CALL ERRT(101,'REGISTER OUT OF RANGE: 0...102',NE)
           RETURN
        ENDIF
d40 4
a43 4
        IF (PARAM(IREG) .NE. VALUE) THEN
C          REGISTER NOT CORRECT
           IF (SAYIT) WRITE(NOUT,90) IREG-1,PARAM(IREG) 
90         FORMAT(' *** REGISTER: ',I4,'  VALUE INCORRECT: ',G11.3)
@


1.3
log
@added more output
@
text
@d46 1
a46 1
           IF (SAYIT) WRITE(NOUT,90) IREG,PARAM(IREG) 
@


1.2
log
@bug fixed
@
text
@a25 1
CNO_SAVE
d46 3
a48 6
           IF (SHUDSTOP) THEN
               CALL ERRT(101,'REGISTER VALUE INCORRECT',NE)
           ELSE
               IF (SAYIT) WRITE(NOUT,*) 'REGISTER VALUE INCORRECT!'
               WRITE(NOUT,*) 'REGISTER VALUE INCORRECT'
           ENDIF
@


1.1
log
@Initial revision
@
text
@d34 1
a34 1
        CALL RDPRM2S(REG,VALUE,NLOOPD,ILOOPD,
d39 1
a39 1
        IF (IREG LT. 1 .OR. IREG .GT. 103) THEN
@
