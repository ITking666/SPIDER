head	1.26;
access;
symbols
	pre_mrcs:1.26
	healthdept_2018:1.26
	pre_getangas:1.20
	GPL2010:1.20
	pre_GPL2010:1.19
	pre_var_equation:1.14
	pre_fftwrings:1.13
	pre_opfiles:1.13
	src:1.13
	best-code:1.9
	named-reg:1.7
	x-named-regs:1.6
	x:1.6
	v13-00:1.5
	pre_GPL:1.3
	prec_CA:1.3
	noindx:1.3;
locks; strict;
comment	@c @;


1.26
date	2018.10.03.14.34.24;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2015.06.15.15.35.17;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2015.06.15.13.50.47;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2015.02.24.17.01.24;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2014.04.17.17.24.37;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2011.12.06.14.31.31;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2010.06.24.13.27.05;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2009.11.16.16.54.10;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2009.09.09.10.53.55;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2009.08.28.14.34.57;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2009.08.28.13.09.19;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2009.06.26.13.59.30;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2009.02.02.14.11.54;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2006.11.21.14.17.53;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2006.11.02.15.46.59;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2006.11.02.13.44.21;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2006.11.01.19.21.16;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.06.15.39.52;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.06.15.34.50;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.12.15.30.46;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.15.21.51.25;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.17.19.53.27;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.17.17.50.33;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.02.18.21.43;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.28.16.23.35;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.26.19.52.47;	author leith;	state Exp;
branches;
next	;


desc
@@


1.26
log
@email_health_dept
@
text
@
C++*********************************************************************
C
C    SYMPAR    REWRITTEN FROM SETSYMPAR           JUN 2002 ARDEAN LEITH
C              VARIABLES NOT PARAMETERS           OCT 2005 ARDEAN LEITH
C              SYMPAR TEXT ADDED                  OCT 2006 ARDEAN LEITH
C              'FR GS' & 'FR LS'                  JAN 2009 ARDEAN LEITH
C              PROMPT                             SEP 2009 ARDEAN LEITH
C              TEXT FILE PROMPT                   NOV 2009 ARDEAN LEITH
C              ! COMMENT DELIMITER                DEC 2011 ARDEAN LEITH
C              'FR N' / INPUT BUG                 APR 2014 ARDEAN LEITH
C              PARSESYMPAR REWRITE                JUN 2015 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2015  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C   SYMPAR(LUNDOC)
C
C   PURPOSE:   CALLS ROUTINES REMOVED FROM DRIVER IN MAR 93
C
C   PARAMETERS: LUNDOC     IO UNIT FOR 'FR F' OPERATION
C
C   CALL TREE:  DRIV1 
C                v          
C               SYMPAR       
C                v 
C       'FR F'   |-> FILESYMPAR -> ----PARSESYMPAR
C                |                     SETSYMPAR
C                |                                     
C       'FR L'   |-> LOCALSYMPAR   
C                |     v            
C       'FR'     |-> RDPRMC ----->  RDPR -> FRSYMPAR  -> PARSESYMPAR                    ^
C                     ^                                  EVALSYMPAR
C                     ^                                  SETSYMPAR
C      ?..? [ID] -----' (FILERD)                              
C                                                   
C
C23456789 123456789 123456789 123456789 123456789 123456789 123456789 12
C--*********************************************************************

        SUBROUTINE SYMPAR(LUNDOC)

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC'

        CHARACTER (LEN=160) :: PROMPTNID,SYMPARVAL
        LOGICAL             :: CLOSEIT,WANTSUB,BIND

        CHARACTER (LEN=1)   :: FCVAL
        CHARACTER (LEN=1)   :: NULL = CHAR(0)

        SELECT CASE (FCHAR(4:4))

        CASE('F') 
C          GLOBAL VARIABLE & VALUE FROM  TEXT FILE --------------- FR F
           CALL FILESYMPAR(LUNDOC,IRTFLG)

        CASE('N') 
C          NEXT GLOBAL VARIABLE & VALUE FROM  TEXT FILE ---------- FR N
C          READS LINE_BY_LINE
           CLOSEIT = (FCHAR(5:5) == 'E')
           LUNTEXT = 103
           CALL SYMPARTEXT(CLOSEIT,LUNTEXT,IRTFLG)

        CASE('G')
C          GLOBAL VARIABLE & VALUE FROM  INPUT ------------------- FR G
C          GET GLOBAL  PARAMETER & ASSOCIATED VALUE FROM INPUT 
           BIND = (FCHAR(5:5) == 'S')
           CALL LOCALSYMPAR(.FALSE.,BIND,SYMPARVAL,IRTFLG)

        CASE('L')
C          LOCAL VARIABLE & VALUE FROM  INPUT -------------------- FR L
C          GET LOCAL  PARAMETER & ASSOCIATED VALUE FROM INPUT 
           BIND = (FCHAR(5:5) == 'S')
           CALL LOCALSYMPAR(.TRUE.,BIND,SYMPARVAL,IRTFLG)

        CASE DEFAULT
C          FILE READ --------------------------------------------- FR 
C          GET "?-----? PROMPT,PARAMETER NUMBER, AND ASSOCIATED VALUE
C          FROM CALLER (CALLER CAN BE PROCEDURE OR INTERACTIVE RUN)

C          KEEP LOWERCASE INPUT BY SETTING IRTFLG = -999  
           IRTFLG = -999
           CALL RDPRMC(PROMPTNID,NCHAR,.TRUE.,
     &        'PROMPT (?PROMPT?) & VARIABLE NAME ([NAME])',NULL,IRTFLG)

C          READ AND SET A SYMBOL
           CALL FRSYMPAR(PROMPTNID(1:NCHAR),SYMPARVAL,NCHAR,IRTFLG)

         END SELECT

       END


C++*********************************************************************
C
C  FRSYMPAR.F -- CREATED 6/8/02 ARDEAN LEITH 
C
C **********************************************************************
C
C FRSYMPAR(PROMPTNID,SYMPARVAL,NCHAR,IRTFLG)
C
C PURPOSE: 
C     MEANT TO BE USED INSIDE A PROCEDURE!
C     TAKES IN PROMPT & PARAMETER LABEL, THEN QUERIES CALLING
C     PROCEDURE OR TERMINAL FOR ASSOCIATED VALUE USING THIS PROMPT. 
C     ASSOCIATED VALUE IS USED A LOCAL PARAMETER.
C             
C PARAMETERS:     PROMPTNID    PROMPT AND ID                      SENT
C                 SYMPAROUT    VARIABLE PARAMETER VALUE        RETURNED
C                 NCHARV       LENGTH OF SYMPARVAL             RETURNED
C                 IRTFLG       ERROR FLAG (0 IS NORMAL)        RETURNED
C
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

      SUBROUTINE FRSYMPAR(PROMPTNID,SYMPAROUT,NCHARV,IRTFLG)

      INCLUDE 'CMBLOCK.INC' 
      INCLUDE 'CMLIMIT.INC' 
 
      CHARACTER (LEN=*)        :: SYMPAROUT,PROMPTNID
      CHARACTER (LEN=2*MAXNAM) :: SYMPARID,PROMPT,SYMPARIN,COMMENTSTR
      CHARACTER (LEN=1)        :: CDUM
      LOGICAL                  :: CALLERRT
      CHARACTER(LEN=1)         :: NULL = CHAR(0)

C     FOR VARIABLE  HANDLING 
      INTEGER, DIMENSION(MAXPRC) :: IPSTACK,IPNUMSTACK,IPARNUM
      COMMON /QSTR_STUFF1/ ISTOP,ITI,ITIN,IWHERE,IPSTACK,
     &                     IPNUMSTACK,IPARNUM

      CALL SET_MPI(ICOMM,MYPID,MPIERR)  ! SETS ICOMM AND MYPID

C     EXTRACT PROMPT & ID  FROM PROMPTNID INPUT STRING
      CALLERRT = .TRUE.
      CALL PARSESYMPAR(PROMPTNID,NULL,PROMPT,NCHARP,
     &                 SYMPARID,NCHARI,CDUM,NDUM,CALLERRT,IRTFLG)
      IF (PROMPT == NULL) RETURN

      IF (SYMPARID == NULL .AND. CALLERRT) THEN
C        MUST CREATE A NUMERICAL LABEL
         INUM           = IPARNUM(ISTOP) + 1
         IPARNUM(ISTOP) = INUM
         SYMPARID(1:1)  = '<'
         CALL INTTOCHAR(INUM,SYMPARID(2:),NCHARI,1)
         SYMPARID(NCHARI+2:NCHARI+2) = '>'
         NCHARI  = NCHARI + 2
c        write(6,*)'symparid(1:',nchari,'): ',symparid
      ENDIF

C     INPUT ASSOCIATED VALUE FOR THIS VARIABLE  


      IF (FROMBATCH) THEN
C        FROM BATCH MODE, NOT FROM INTERACTIVE MODE
C        SO GET SYMPARIN FROM CALLING PROCEDURE FILE

C        INCREMENT BATCH LINE POINTER FOR FURTHER READS
         IPSTACK(ISTOP) = IPSTACK(ISTOP) + 1
         CALL PROC_GETPLINE(IPSTACK(ISTOP),IPNUMSTACK(ISTOP-1),SYMPARIN,
     &                         NCHAR,IRTFLG)

      ELSE
C        '?...?' FROM BATCH TO INTERACTIVE MODE

C        WRITE  ?---? PROMPT TO TERMINAL 
         IF (MYPID <= 0) THEN
            WRITE(ITI,991,ADVANCE='NO') PROMPT(1:NCHARP)
         ENDIF
991      FORMAT( ' .',A,': ')

C        GET SYMPARIN FROM CALLING TERMINAL
         READ(ITIN,80) SYMPARIN
 80      FORMAT(A)

      ENDIF

C     STRIP LEADING & TRAILING BLANKS IN SYMPARIN BEFORE COMMENT
      NCHARR = lnblnkn(SYMPARIN)
      CALL PARSE_RESPONSE(SYMPARIN,NCHARR,.TRUE.,.TRUE.,
     &                    SYMPARIN,NCHAR,COMMENTSTR,NCHARC,IRTFLG)

      NLENBRAK = 1
C     LOOP TO CHECK FOR ALL [] PAIRS
      DO WHILE (NLENBRAK > 0)
         CALL CHARINSIDE(SYMPARIN(1:NCHAR),'[',']',.FALSE.,.FALSE.,
     &                   IGOBRAK,IENDBRAK,NLENBRAK)

         IF (NLENBRAK > 0) THEN      
C           CONVERT  [] VARIABLE DELIMITERS TO QSTRQ <> FORMAT
            SYMPARIN(IGOBRAK:IGOBRAK)   = '<'
            SYMPARIN(IENDBRAK:IENDBRAK) = '>'
         ENDIF
      ENDDO

C     SUBSTITUTE FOR VARIABLES & REGISTERS IN HIGHER LEVEL PROCEDURES
      CALL EVALSYMPAR(SYMPARIN(1:NCHAR),SYMPAROUT,NCHARV,IRTFLG)

      IF (CALLERRT) THEN
C        SET VARIABLE AT THIS LEVEL
         CALL SETSYMPAR(SYMPARID(1:NCHARI),SYMPAROUT(1:NCHARV),
     &                 .TRUE.,IRTFLG)
      ENDIF

C     WRITE TO  RESULTS FILE
      IF (MYPID <= 0) THEN
         WRITE(NOUT,*) ' ',SYMPAROUT(1:NCHARV)
      ENDIF 

#ifdef USE_MPI
      call MPI_BARRIER(icomm,ierr)
#endif

      END



C++*********************************************************************
C
C  FILESYMPAR.F -- CREATED 6/8/02 ARDEAN LEITH 
C
C **********************************************************************
C
C FILESYMPAR(PROMPT,NCHAR,ANS,UPPER,SAYIT,IRTFLG)
C
C PURPOSE: 
C             
C PARAMETERS:     LUNT          UNIT FOR DOC FILE               SENT
C                 IRTFLG        ERROR FLAG (0 IS NORMAL)        RETURNED
C
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

      SUBROUTINE FILESYMPAR(LUNT,IRTFLG)

      INCLUDE 'CMBLOCK.INC' 
      INCLUDE 'CMLIMIT.INC' 
 
      CHARACTER (LEN=MAXNAM) :: FILNAM,RECLIN,SYMPARID,SYMPARVAL
      CHARACTER (LEN=MAXNAM) :: COMMENTSTR
      CHARACTER (LEN=1)      :: CDUM

      
      LENREC = 0
      CALL OPAUXFILE(.TRUE.,FILNAM,DATEXC,LUNT,LENREC,
     &                 'O','TEXT',.TRUE.,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN
      IRTFLG = 1

C     ---------------------- INPUT LOOP 
 
10    READ(LUNT,80,END=998,ERR=999) RECLIN
80    FORMAT(A)

C     IGNORE COMMENT LINES 
      NCHARR = lnblnkn(RECLIN)
      CALL PARSE_RESPONSE(RECLIN,NCHARR,.TRUE.,.TRUE.,
     &                    RECLIN,NCHAROUT,COMMENTSTR,NCHARC,IRTFLG)
      IF (NCHAROUT <= 0) GOTO 10

C     CONVERT OLD <> VARIABLE DELIMITER TO NEW: []
      IGOANG = INDEX(RECLIN(1:NCHAROUT),'<')
      IF (IGOANG >= 1) THEN
         RECLIN(IGOANG:IGOANG) = '['
         IENDANG = INDEX(RECLIN(1:NCHAROUT),'>')
         IF (IENDANG >= 1) THEN
            RECLIN(IENDANG:IENDANG) = ']'
         ENDIF
      ENDIF
 
      IEND = INDEX(RECLIN(1:NCHAROUT),']')
      IF (IEND <= 1) THEN
         WRITE(NDAT,*) '*** UNDECIPHERABLE LINE: ',RECLIN(1:NCHAROUT)
         CALL ERRT(101,'FILESYMPAR',NE)
         GOTO 10
      ENDIF

C     EXTRACT VARIABLE ID & VALUES FROM RECLIN
      CALL PARSESYMPAR(CHAR(0),RECLIN(1:NCHAROUT),CDUM,NDUM,
     &                 SYMPARID,NCHARI,
     &                 SYMPARVAL,NCHARV,.TRUE.,IRTFLG)
      IF (SYMPARID == CHAR(0)  .OR. IRTFLG .NE. 0) GOTO 999 

C     SET GLOBAL VARIABLE ID & VALUE
      CALL SETSYMPAR(SYMPARID(:NCHARI),SYMPARVAL(:NCHARV),
     &                .FALSE.,IRTFLG)

      GOTO 10

C     ------------------ END INPUT LOOP

998   IRTFLG = 0

999   CLOSE (LUNT)
      RETURN
      END


C++*********************************************************************
C
C  LOCALSYMPAR.F -- CREATED 6/8/02 ARDEAN LEITH 
C
C **********************************************************************
C
C LOCALSYMPAR(LOCAL,BIND,SYMPARVAL,IRTFLG)
C
C PURPOSE:  
C             
C PARAMETERS:      
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************


      SUBROUTINE LOCALSYMPAR(LOCAL,BIND,SYMPARVAL,IRTFLG)

      INCLUDE 'CMBLOCK.INC' 
      INCLUDE 'CMLIMIT.INC' 
 
      CHARACTER (LEN=*)      :: SYMPARVAL
      CHARACTER (LEN=160)    :: RESPONSE
      CHARACTER (LEN=MAXNAM) :: SYMPARID
      LOGICAL                :: LOCAL,GETANS,STRIP,BIND
      CHARACTER (LEN=1)      :: CDUM
      LOGICAL                :: UPPER,WANTSUB,SAYPRMT,SAYANS,ENDATSEMI
      CHARACTER(LEN=1)       :: NULL = CHAR(0)

      NULL = CHAR(0)

C     DO NOT UPPERCASE THE INPUT LINE, DO NOT SUBSTITUTE FOR REGS
      GETANS    = .TRUE.
      UPPER     = .FALSE.
      SAYPRMT   = .TRUE.
      SAYANS    = .TRUE.
      ENDATSEMI = .TRUE.
      STRIP     = .TRUE.
      WANTSUB   = .FALSE.

      CALL RDPR('VARIABLE NAME & ASSOCIATED VALUE',NCHAR,RESPONSE,
     &       GETANS,UPPER,WANTSUB,SAYPRMT,SAYANS,ENDATSEMI,STRIP,IRTFLG)
      IF (IRTFLG .NE. 0) RETURN
 
C     EXTRACT PROMPT (OLD STYLE) & ID FROM RESPONSE
      CALL PARSESYMPAR(RESPONSE(1:NCHAR),NULL,CDUM,NDUM,SYMPARID,NCHARI,
     &                 CDUM,NDUM,.FALSE.,IRTFLG)
      IF (SYMPARID == CHAR(0)  .OR. IRTFLG .NE. 0) THEN
         CALL ERRT(101,'SYMPAR',NE)
         RETURN
      ENDIF

C     EXTRACT  SYMBOL VALUE FROM RESPONSE(S)
      CALL PARSESYMPAR(NULL,RESPONSE(1:NCHAR),CDUM,NDUM,CDUM,NDUM,
     &                 SYMPARVAL,NCHARV,.FALSE.,IRTFLG)

      IF (NCHARV <= 0) THEN
C        NO SYMBOL VALUE IN RESPONSE,  MUST GET SYMBOL VALUE NOW
         CALL RDPR(SYMPARID(1:NCHARI),NCHARV,SYMPARVAL,
     &       GETANS,UPPER,WANTSUB,SAYPRMT,SAYANS,ENDATSEMI,STRIP,IRTFLG)
         IF (IRTFLG .NE. 0) RETURN
      ENDIF

      IF (BIND) THEN
C        SUBSTITUTE FOR STRING VAR. NOW
         CALL SUBSYMPAR(SYMPARVAL(1:NCHARV),SYMPARVAL,NCHARV,0,IRTFLG)
      ENDIF

C     SET LOCAL SYMBOL NAME & VALUE
      CALL SETSYMPAR(SYMPARID(1:NCHARI),SYMPARVAL(1:NCHARV),
     &               LOCAL,IRTFLG)
      
      END


C      *********************** PARSE_RESPONSE ********************************

       SUBROUTINE PARSE_RESPONSE(RESPONSE,NCHARR,ENDATSEMI,UNUSED,
     &                           ANSW,NCHAR,COMMENTSTR,NCHARC,IRTFLG)

C      FINDS LOCATION OF COMMENT AND STRIPS LEADING AND TRAILING
C      BLANKS FROM ANSW STRING

       IMPLICIT NONE
       CHARACTER(LEN=*) :: RESPONSE,ANSW,COMMENTSTR
       LOGICAL          :: ENDATSEMI,UNUSED
       CHARACTER(LEN=1) :: CTEMP,CTEMPJ
       INTEGER          :: NCHARR,NCHAR,NCHARC,IRTFLG

       INTEGER          :: N1,N2,I

       NCHAR  = 0
       NCHARC = 0

       N1     = 0
       N2     = 0

       DO I = 1,NCHARR
          CTEMP = RESPONSE(I:I)

          IF ((CTEMP == ';' .OR. CTEMP == '!') .AND. ENDATSEMI) THEN
C            START OF COMMENT, SET COMMENT STRING AND LENGTH, EXIT
             COMMENTSTR = RESPONSE(I:)
             NCHARC     = NCHARR - I + 1
             EXIT

          ELSEIF (CTEMP >= '!' .AND. CTEMP <= '~' .AND. N1 == 0) THEN
C            GOT PRINTING CHAR, KEEP IT, RECORD ANSW STRING START
             N1 = I

          ELSEIF (CTEMP >= '!' .AND. CTEMP <= '~' .AND. N1 > 0) THEN
C            GOT PRINTING CHAR, KEEP IT, RECORD ANSW STRING END
             N2 = I

          ELSEIF (CTEMP < '!' .OR. CTEMP > '~')   THEN
C            GOT NON PRINTING CHAR LIKE A BLANK, IGNORE IT
             CYCLE
          ENDIF
       ENDDO

       IF (N1 > 0)  THEN
C          HAVE ANSW STRING
           NCHAR        = N2 - N1 + 1
           ANSW(:NCHAR) = RESPONSE(N1:N2)
       ENDIF
 
       IRTFLG = 0

       END
  

C++*********************************************************************
C
C SYMPARTEXT                  NEW                 OCT 2006 ARDEAN LEITH
C
C **********************************************************************
C
C  SYMPARTEXT(CLOSEIT,LUNT,IRTFLG)
C
C  PURPOSE:  SUPPORTS OPERATION TO RETRIEVE A SYMBOLIC VARIABLE FROM
C            A TEXT FILE. ALWAYS SOLICITS FILENAME,  OPENS FILE IF NAME
C            NOT SAME AS PREVIOUS TEXT FILE USED BY THIS OPERATION.
C             
C  TYPICAL USAGE: 
C            FR N
C            Filename            (RETRIEVED)
C            FR NE               (CLOSES FILE OPENED WITH FR N)
C
C  PARAMETERS:    CLOSEIT   CLOSE CURRENT FILE                 (SENT)
C                 LUNT      LUN NUMBER OF FILE                 (SENT)
C                 IRTFLG    ERROR RETURN FLAG                  (RET.)
C
C--*********************************************************************

        SUBROUTINE SYMPARTEXT(CLOSEIT,LUNT,IRTFLG)

        INCLUDE 'CMLIMIT.INC' 
        INCLUDE 'CMBLOCK.INC'

        LOGICAL               :: CLOSEIT
        CHARACTER(LEN=MAXNAM) :: FRNAME,FRNAMET
        CHARACTER(LEN=MAXNAM) :: OLDNAM = '-'
        CHARACTER(LEN=MAXNAM) :: SYMPARID,SYMPARVAL
        INTEGER               :: LUNOLD = 0
        INTEGER               :: NLINE  = 0
        CHARACTER(LEN=1)      :: NULL

        NULL = CHAR(0)

        CALL REG_GET_USED(NSEL_USED)

C       GET VARIABLE LIST NAME
        IRTFLG = -999    ! CONVERT LEGACY REGISTERS x**
        CALL FILERD(FRNAMET,NLET,NULL,'VARIABLE LIST',IRTFLG)
        IF (IRTFLG .NE. 0) THEN
            FIRTFLG = IRTFLG
            CALL REG_SET_NSEL(1,1,FIRTFLG,0.0,0.0,0.0,0.0,IRTFLG)
            RETURN
        ENDIF

        IF (CLOSEIT) THEN
C          END USE OF CURRENT FILE
           CLOSE(LUNOLD)
           LUNOLD = 0
           NLINE  = 0
           OLDNAM = NULL
           IRTFLG = 0
           RETURN
        ENDIF

        IF (LUNT .NE. LUNOLD .OR. FRNAMET .NE. OLDNAM) THEN
C         NEW FILE OR DIFFERENT LUN FOR FILE
          IF (LUNOLD .NE. 0) CLOSE(LUNOLD)
          LUNOLD = 0
          OLDNAM = NULL
          NLINE  = 0

C         OPEN THE DOC FILE
          FRNAME = FRNAMET
          LENREC = 0             !SEQUENTIAL ACCESS, FORMATTED
          CALL OPAUXFILE(.FALSE.,FRNAME,DATEXC,LUNT,LENREC,
     &                       'O', NULL,.TRUE.,IRTFLG)
          IF (IRTFLG .NE. 0) THEN
             FIRTFLG = IRTFLG
             CALL REG_SET_NSEL(1,1,FIRTFLG,0.0,0.0,0.0,0.0,IRTFLG)
             RETURN
          ENDIF

          OLDNAM = FRNAMET
          LUNOLD = LUNT
        ENDIF

C       SPECIAL CODE IN RDPRMC FOR NO SUBSTITUTION OF VARIABLE
        IRTFLG = -999
        CALL RDPRMC(SYMPARID,NCHAR,.TRUE.,
     &         'VARIABLE NAME (ENCLOSED WITH[])',NULL,IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           FIRTFLG = IRTFLG
           CALL REG_SET_NSEL(1,1,FIRTFLG,0.0,0.0,0.0,0.0,IRTFLG)
           RETURN
        ENDIF

        NLINE = NLINE + 1
        READ(LUNT,'(A)',IOSTAT=IERR) SYMPARVAL

        IF (IERR .NE. 0) THEN
C          ERROR ON READ, PROBABLY END OF FILE
           NLETT   = lnblnkn(OLDNAM)

           IF (NSEL_USED > 0) THEN
              FIRTFLG = IERR
              CALL REG_SET_NSEL(1,1,FIRTFLG,0.0,0.0,0.0,0.0,IRTFLG)
           ELSE
              WRITE(NOUT,90) SYMPARID(1:NCHAR),OLDNAM(1:NLETT),NLINE
90            FORMAT(' *** UNABLE TO RETRIEVE: ',A,
     &               '  FROM: ',A,
     &               '  LINE: ',I6)
              CALLERRT(102,'UNABLE TO READ INPUT LINE',NLINE)
           ENDIF
           IRTFLG  = 1
           RETURN
        ENDIF

C       SET THE VARIABLE
        LENID = lnblnk(SYMPARID)
        SYMPARID(1:1) = '<'
        SYMPARID(LENID:LENID) = '>'
        LENVAR = lnblnk(SYMPARVAL)

c        write(6,*) ' FOR ID: ',SYMPARID(1:LENID),
c     &             '  VALUE: ',SYMPARVAL(:LENVAR)

        CALL SETSYMPAR(SYMPARID(1:LENID),SYMPARVAL(:LENVAR),
     &                 .FALSE.,IRTFLG)

C       DO NOT CLOSE FILE UNTIL 'FR NE' IS GIVEN!

        END




@


1.25
log
@PARSESYMPAR REWRITE,  ==
@
text
@d20 1
a20 1
C=* Email: spider@@wadsworth.org                                        *
@


1.24
log
@CALL PARSE_RESPONSE(SYMPARIN,NCHARR,.TRUE.,.FALSE.
cosmetic, detab, ==
@
text
@d12 1
a12 1
C              NCHAR BUG                          JUN 2015 ARDEAN LEITH
a154 2
      NULL = CHAR(0)

d201 1
a201 1
      CALL PARSE_RESPONSE(SYMPARIN,NCHARR,.TRUE.,.FALSE.,
a216 1

d285 1
a285 1
      IF (IGOANG .GE. 1) THEN
d288 1
a288 1
         IF (IENDANG .GE. 1) THEN
d398 1
a398 1
       SUBROUTINE PARSE_RESPONSE(RESPONSE,NCHARR,ENDATSEMI,STRIP,
d401 2
a402 1
C      FINDS LOCATION OF COMMENT AND ANY TRAILING BLANKS BEFORE COMMENT
d404 1
d406 1
a406 2
       LOGICAL          :: ENDATSEMI,STRIP
       LOGICAL          :: KEEPGO
d408 3
d415 3
d422 1
a422 1
C            START OF COMMENT
d427 12
a438 28
          ELSEIF ((CTEMP < '!' .OR. CTEMP > '~') .AND. 
     &            .NOT. STRIP)THEN
C            GOT NON PRINTING CHAR LIKE A BLANK
             NCHAR             = NCHAR + 1
             ANSW(NCHAR:NCHAR) = CTEMP   ! DO NOT REPLACE WITH BLANK

          ELSEIF ((CTEMP .GE. '!' .AND. CTEMP <= '~')) THEN
C            GOT PRINTING CHAR
             NCHAR             = NCHAR + 1
             ANSW(NCHAR:NCHAR) = CTEMP

          ELSEIF ((CTEMP < '!' .OR.  CTEMP > '~') .AND.
     &             NCHAR > 0   .AND. I < NCHARR) THEN
C            GOT NON PRINTING CHAR LIKE A BLANK AFTER A PRINTING CHAR
             KEEPGO = .FALSE.
             
             DO J = I+1,NCHARR
                CTEMPJ = RESPONSE(J:J)
                IF ((CTEMP .GE. '!' .AND. CTEMP <= '~')) THEN
C                  GOT PRINTING CHAR
                   KEEPGO = .TRUE.
                   EXIT
                ENDIF
             ENDDO
             IF (.NOT. KEEPGO) EXIT
             NCHAR             = NCHAR + 1
             ANSW(NCHAR:NCHAR) = CTEMP
           ENDIF
d440 7
@


1.23
log
@fails no longer lists fail msg
@
text
@d12 2
d18 1
a18 1
C=* Copyright 1985-2014  Health Research Inc.,                         *
d51 1
a51 1
C          'FR'  |-> RDPRMC ----->  RDPR -> FRSYMPAR  -> PARSESYMPAR                    ^
a64 1
        CHARACTER (LEN=1)   :: NULL,FCVAL
d68 2
a69 1
        NULL = CHAR (0)
d80 1
a80 1
           CLOSEIT = (FCHAR(5:5) .EQ. 'E')
d87 1
a87 1
           BIND = (FCHAR(5:5) .EQ. 'S')
d93 1
a93 1
           BIND = (FCHAR(5:5) .EQ. 'S')
d97 1
a97 1
C          FILE READ ----------------------------------------------- FR 
d111 1
a111 2
       RETURN
        END
d142 5
a146 4
      CHARACTER (LEN=*) ::         SYMPAROUT,PROMPTNID
      CHARACTER (LEN=2*MAXNAM) ::  SYMPARID,PROMPT,SYMPARIN,COMMENTSTR
      CHARACTER (LEN=1) ::         NULL,CDUM
      LOGICAL   ::                 CALLERRT
d152 2
a153 7
#ifdef USE_MPI
      include 'mpif.h'
      icomm = MPI_COMM_WORLD
      call MPI_COMM_RANK(icomm, mypid, ierr)
#else
      MYPID = -1
#endif
d161 1
a161 1
      IF (PROMPT .EQ. NULL) RETURN
d163 1
a163 1
      IF (SYMPARID .EQ. NULL .AND. CALLERRT) THEN
d190 1
a190 1
         IF (MYPID .LE. 0) THEN
d203 1
a203 1
      CALL PARSE_RESPONSE(SYMPARIN,NCHARR,.TRUE.,.TRUE.,
d208 1
a208 1
      DO WHILE (NLENBRAK .GT. 0)
d212 1
a212 1
         IF (NLENBRAK .GT. 0) THEN      
d219 1
d226 1
a226 1
     &               .TRUE.,IRTFLG)
d230 1
a230 1
      IF (MYPID .LE. 0) THEN
d237 1
a237 1
      RETURN
d264 3
a266 3
      CHARACTER (LEN=MAXNAM) ::  FILNAM,RECLIN,SYMPARID,SYMPARVAL
      CHARACTER (LEN=MAXNAM) ::  COMMENTSTR
      CHARACTER (LEN=1)      ::  CDUM
d284 1
a284 1
      IF (NCHAROUT .LE. 0) GOTO 10
d297 1
a297 1
      IF (IEND .LE. 1) THEN
d307 1
a307 1
      IF (SYMPARID .EQ. CHAR(0)  .OR. IRTFLG .NE. 0) GOTO 999 
d349 1
a349 1
      CHARACTER (LEN=1)      :: NULL,CDUM
d351 1
d371 1
a371 1
      IF (SYMPARID .EQ. CHAR(0)  .OR. IRTFLG .NE. 0) THEN
d380 1
a380 1
      IF (NCHARV .LE. 0) THEN
d418 1
d423 2
a424 2
          ELSEIF ((CTEMP .LT. '!' .OR. CTEMP .GT. '~') .AND.
     &             .NOT. STRIP) THEN
d426 1
a426 1
             NCHAR = NCHAR + 1
d429 1
a429 1
          ELSEIF ((CTEMP .GE. '!' .AND. CTEMP .LE. '~')) THEN
d434 2
a435 2
          ELSEIF ((CTEMP .LT. '!' .OR. CTEMP .GT. '~') .AND.
     &             NCHAR .GT. 0 .AND. I .LT. NCHARR) THEN
d438 1
d441 1
a441 1
                IF ((CTEMP .GE. '!' .AND. CTEMP .LE. '~')) THEN
d453 1
d480 1
a480 1
	SUBROUTINE SYMPARTEXT(CLOSEIT,LUNT,IRTFLG)
d499 1
a499 1
	CALL FILERD(FRNAMET,NLET,NULL,'VARIABLE LIST',IRTFLG)
d583 1
a583 1
	END
@


1.22
log
@'FR N' / INPUT BUG
@
text
@a551 4
           WRITE(NOUT,90) SYMPARID(1:NCHAR),OLDNAM(1:NLETT),NLINE
90         FORMAT(' *** UNABLE TO RETRIEVE: ',A,
     &            '  FROM: ',A,
     &            '  LINE: ',I6)
d557 5
a561 1
              CALLERRT(100,'UNABLE TO READ INPUT LINE',NE)
@


1.21
log
@! COMMENT DELIMITER
@
text
@d11 1
d16 1
a16 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
a459 1
C **********************************************************************
d547 2
a548 1
        READ(LUNT,*,IOSTAT=IERR) SYMPARVAL
d557 1
a557 1
           IF (NSEL_USED .GT. 0) THEN
a580 1
	RETURN
@


1.20
log
@GPL_2010
@
text
@d10 1
d15 1
a15 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d417 1
a417 1
          IF (CTEMP .EQ. ';' .AND. ENDATSEMI) THEN
@


1.19
log
@TEXT FILE PROMPT
@
text
@d11 4
a14 2
C=* This file is part of:                                              * C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
C=* Copyright 1985-2009  Health Research Inc.,                         *
d25 1
a25 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a26 1
C=*                                                                    *
a457 23
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
C=*                                                                    *
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* This program is distributed in the hope that it will be useful,    *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
@


1.18
log
@prompt
@
text
@d9 1
d11 1
a11 2
C=* This file is part of:                                              * 
C=* SPIDER - Modular Image Processing System.   Author: J. FRANK       *
d270 1
a270 1
     &                 'O','TEXT DOC. FILE',.TRUE.,IRTFLG)
@


1.17
log
@prompt
@
text
@d8 1
a8 1
C
d10 5
a14 7
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
C=*                                                                    *
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
d16 1
a16 1
C=* This program is free software; you can redistribute it and/or      *
d21 1
a21 1
C=* This program is distributed in the hope that it will be useful,    *
d27 1
a27 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
d362 1
a362 1
      CALL RDPR('SYMBOL NAME & ASSOCIATED VALUE',NCHAR,RESPONSE,
@


1.16
log
@comment
@
text
@d564 1
a564 1
     &         'SYMBOLIC VARIABLE NAME (ENCLOSED WITH[])',NULL,IRTFLG)
@


1.15
log
@x11 in filenames by irtflg
@
text
@d494 2
a495 2
C            Filename (RETRIEVE)
C            FR NE               (CLOSES FILE OPENED WITH FR T)
d561 1
@


1.14
log
@BIND for fr gs
@
text
@d520 2
a521 1
C       GET FILE NAME
@


1.13
log
@lun=103
@
text
@d7 1
d11 1
a11 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d66 1
a66 1
        LOGICAL             :: CLOSEIT
d86 2
a87 1
           CALL LOCALSYMPAR(.FALSE.,SYMPARVAL,IRTFLG)
d92 2
a93 1
           CALL LOCALSYMPAR(.TRUE.,SYMPARVAL,IRTFLG)
d333 1
a333 1
C LOCALSYMPAR(LOCAL,SYMPARVAL,IRTFLG)
d343 1
a343 1
      SUBROUTINE LOCALSYMPAR(LOCAL,SYMPARVAL,IRTFLG)
d351 1
a351 1
      LOGICAL                :: LOCAL,GETANS,STRIP
a359 1
      WANTSUB   = .FALSE.
d364 1
d389 5
d397 1
a397 1

@


1.12
log
@[fails]
@
text
@d79 1
a79 1
           LUNTEXT = 99
@


1.11
log
@FR N
@
text
@d69 1
a69 3
        NCT  = lnblnkn(FCHAR)

        SELECT CASE (FCHAR(4:NCT))
d478 1
a478 1
C  UDOC(CFUNC,NDOC)
d485 1
a485 1
C            FR T
d487 1
a487 4
C            FR TE               (CLOSES FILE OPENED WITH FR T)
C
C  PARAMETERS:    CFUNC   OPERATION READ INTO DRIVER           (SENT)
C                 NDOC    LUN NUMBER OF FILE                   (SENT)
d489 3
a491 1
C  CALLS          UNSAV
d505 1
a505 1
        INTEGER               :: NLINES = 0
d510 11
a520 1
       IF (CLOSEIT) THEN
a529 4
C       GET FILE NAME
	CALL FILERD(FRNAMET,NLET,NULL,'DOCUMENT',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

d542 5
a546 1
          IF (IRTFLG .NE. 0) RETURN
d555 5
a559 1
        IF (IRTFLG .NE. 0) RETURN
d562 2
a563 3
        READ(LUNT,80,IOSTAT=IERR) SYMPARVAL
80      FORMAT(A)
        IF (IERR .GT. 0) THEN
d565 13
a577 2
           CALLERRT(102,'UNABLE TO RETRIEVE VARIABLE FROM LINE',NLINE)
           IRTFLG = 1
d593 1
a593 1
C       DO NOT CLOSE FILE UNTIL 'FR TE' IS GIVEN!
@


1.10
log
@cvar variables
@
text
@d77 2
a78 2
        CASE('T') 
C          GLOBAL VARIABLE & VALUE FROM  TEXT FILE --------------- FR T
@


1.9
log
@COMMENTSTR UNDEFINED
@
text
@d6 1
d63 3
a65 2
        CHARACTER (LEN=1) ::        NULL,FCVAL
        CHARACTER (LEN=160) ::      PROMPTNID,SYMPARVAL
d69 1
a69 2

        NCT   = lnblnkn(FCHAR)
d74 1
a74 2
C          FILE READ --------------------------------------------- FR F
C          GET GLOBAL PARAMETER & ASSOCIATED VALUE FROM  TEXT DOC. FILE 
d77 7
d85 1
d90 1
a90 1
C          FILE READ --------------------------------------------- FR L
a93 1

a94 1

d450 129
@


1.8
log
@moved parse_response to sympar.f
@
text
@d136 1
a136 1
      CHARACTER (LEN=2*MAXNAM) ::  SYMPARID,PROMPT,SYMPARIN
a198 2
C      CALL DECOMMENT(SYMPARIN,NCHAR,LOCSEMI)

@


1.7
log
@native named registers
@
text
@d203 1
a203 1
     &            SYMPARIN,NCHAR,COMMENTSTR,NCHARC,IRTFLG)
d281 1
a281 3
     &            RECLIN,NCHAROUT,COMMENTSTR,NCHARC,IRTFLG)

CC      CALL DECOMMENT(RECLIN,NCHAROUT,LOCSEMI)
d391 55
@


1.6
log
@named register support
@
text
@d51 1
a51 1
C      ?..? [ID] -----'                              
a63 1
        CHARACTER (LEN=MAXNAM) ::   CID,CORRECT
a68 6
        IF (FCHAR(1:2) .EQ. 'FR') THEN
C          OLD VARIABLE DEFINITION
           FCVAL = FCHAR(4:NCT)
        ELSEIF (FCHAR(1:2) .EQ. 'DV') THEN
           FCVAL = FCHAR(5:NCT)
        ENDIF
d70 1
a70 1
        SELECT CASE (FCVAL)
d97 4
d109 133
d263 1
d279 5
a283 1
      CALL DECOMMENT(RECLIN,NCHAROUT,LOCSEMI)
d345 2
a346 2
      CHARACTER (LEN=*) ::      SYMPARVAL
      CHARACTER (LEN=160) ::    RESPONSE
d348 3
a350 2
      LOGICAL ::                LOCAL
      CHARACTER (LEN=1) ::      NULL,CDUM
d354 11
a364 4
C     SET IRTFLG TO INHIBIT UPPERCASE CHANGES
      IRTFLG = -999
      CALL RDPRMC(RESPONSE,NCHAR,.TRUE.,
     &        'SYMBOL NAME & ASSOCIATED VALUE',NULL,IRTFLG)
d366 1
a366 1

d380 3
a382 5
C        MUST GET SYMBOL VALUE NOW
C        SET IRTFLG TO INHIBIT UPPERCASE CHANGES
         IRTFLG = -999
         CALL RDPRMC(SYMPARVAL,NCHARV,.TRUE.,SYMPARID(1:NCHARI),
     &               NULL,IRTFLG)
a389 1
      RETURN
@


1.5
log
@GPL License fixed
@
text
@d4 2
a5 1
C    SYMPAR    REWRITTEN FROM SETSYMPAR             JUNE 02 ARDEAN LEITH
d51 1
a51 1
C      ?..? <ID> -----'                              
d62 1
a62 1
        CHARACTER (LEN=1) ::        NULL
d68 13
a80 2
        IF (FCHAR(4:4) .EQ. 'F') THEN
C       FILE READ ----------------------------------------------- FR F
d84 1
a84 1
        ELSEIF (FCHAR(4:4) .EQ. 'G') THEN
d88 1
a88 1
        ELSEIF (FCHAR(4:4) .EQ. 'L') THEN
d94 2
a95 1
        ELSE
d103 2
a104 2
     &           'PROMPT (?PROMPT?) & LABEL (<LABEL>)',NULL,IRTFLG)
        ENDIF
d106 1
a106 1
        RETURN
a114 24
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
C=*                                                                    *
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* This program is distributed in the hope that it will be useful,    *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
C **********************************************************************
d118 1
a118 1
C PURPOSE: READ A TEXT DOCUMENT FILE.
d151 11
a161 1
      IEND = INDEX(RECLIN(1:NCHAROUT),'>')
d168 1
a168 1
C     EXTRACT ID & VALUES FROM RECLIN
d174 1
a174 1
C     SET GLOBAL SYM PAR ID & VALUE
d189 15
a203 1
C     ------------------- LOCALSYMPAR -------------------- LOCALSYMPAR
d210 5
a214 5
      CHARACTER (LEN=*) ::       SYMPARVAL
      CHARACTER (LEN=160) ::     RESPONSE
      CHARACTER (LEN=MAXNAM) ::  SYMPARID
      LOGICAL ::                 LOCAL
      CHARACTER (LEN=1) ::       NULL,CDUM
d221 1
a221 1
     &        'PARAMETER LABEL & ASSOCIATED VALUE',NULL,IRTFLG)
d232 1
a232 1
C     EXTRACT  SYMBOLIC PARAMETER VALUE FROM RESPONSE(S)
d237 1
a237 1
C        MUST GET SYM PARAMETER VALUE NOW
d245 1
a245 1
C     SET LOCAL SYM PAR ID & VALUE
@


1.4
log
@HRI GPL License used
@
text
@a2 1
C++************************************************************************
a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
a101 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d105 1
a105 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a124 6

C * COPYRIGHT (C)1985, 2002. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.3
log
@iparnum
@
text
@d2 1
d9 24
d111 24
@


1.2
log
@sympar
@
text
@d110 1
a110 1
      CHARACTER (LEN=1)      ::  NULL,CDUM
d112 1
d139 1
a139 1
      IF (IRTFLG .NE. 0) GOTO 999 
d180 4
a183 1
      IF (IRTFLG .NE. 0) RETURN
@


1.1
log
@Initial revision
@
text
@d22 1
a22 1
C                 v          
d24 11
a34 10
C                | 
C       'FR F'   |-> FILESYMPAR -> -------------------v
C                |                                    v
C       'FR L'   |-> LOCALSYMPAR -> RDPRMC -----------v  
C                |                                    v
C          'FR'  |-> RDPRMC -> RDPR -> FRSYMPAR  -> PARSESYMPAR                    ^
C                     ^                               v
C                     ^                             EVALSYMPAR
C      ?..? <ID> -----'                               v
C                                                   SETSYMPAR
d73 1
a73 1
     &           'PROMPT (?PROMPT?) & ID (<ID>)',NULL,IRTFLG)
d173 1
a173 1
     &        'PARAMETER & ASSOCIATED VALUE',NULL,IRTFLG)
@
