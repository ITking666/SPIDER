head	1.27;
access;
symbols
	healthdept_2018:1.27
	pre_getangas:1.25
	GPL2010:1.25
	pre_GPL2010:1.24
	pre_var_equation:1.24
	pre_fftwrings:1.23
	pre_opfiles:1.23
	src:1.23
	best-code:1.23
	x-named-regs:1.23
	x:1.23
	v13-00:1.23
	pre_GPL:1.21
	prec_CA:1.19
	noindx:1.18
	Bproc:1.16
	oct21:1.11
	last77:1.10;
locks; strict;
comment	@c @;


1.27
date	2018.10.03.14.34.10;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2014.01.12.19.22.37;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2010.06.24.13.26.14;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2008.12.02.19.44.21;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2005.10.17.20.46.01;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2005.10.17.18.36.26;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2004.03.11.16.21.15;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2004.03.11.14.16.22;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2003.08.12.20.34.40;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2002.03.11.14.08.38;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2001.07.23.17.16.10;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	99.12.14.15.41.48;	author pawel;	state Exp;
branches;
next	1.15;

1.15
date	99.12.14.15.01.09;	author pawel;	state Exp;
branches;
next	1.14;

1.14
date	99.12.14.14.58.35;	author pawel;	state Exp;
branches;
next	1.13;

1.13
date	99.12.07.16.13.54;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	99.11.10.23.09.39;	author yuchen;	state Exp;
branches;
next	1.11;

1.11
date	99.08.04.19.16.31;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	97.10.10.17.47.56;	author pawel;	state Exp;
branches;
next	1.9;

1.9
date	96.12.12.14.13.16;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	96.12.11.21.31.09;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	96.06.17.13.47.48;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	96.06.12.19.15.58;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	95.10.11.19.26.25;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	95.10.10.15.51.33;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	94.07.22.20.30.08;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.07.34;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.22;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.27
log
@email_health_dept
@
text
@
C ++********************************************************************
C                                                                      *
C                                                                      *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C  MRGETINFO                                                                    *
C                                                                      *
C  PURPOSE: GETS INFORMATION NEEDED TO ALIGN IMAGES.                                                           *
C                                                                      *
C  PARAMETERS:                                                         *
C                                                                      *
C INPUT:
C     NOUT= OUTPUT DEVICE # (SCREEN)
C     NDAT= FIXED DEVICE # (DRIVE)
C OUTPUT:
C     XYPTS(LV,LS,3)= ARRAY HOLDING COORDS OF MARKERS IN EACH PROJECTION
C     IREF= INDEX OF REFERENCE IMAGE IN NUMBER, XYPTS, ETC.
C     NUMBER(LV)= ARRAY WITH INDEXES MATCHING THOSE OF XYPTS, ANGLE,
C           NUMPTS, PTACTIVE, AND SCALE HOLDING FILE NUMBERS
C     ANGLE(3,LV)= EULER ANGLES FOR A VIEW (PSI,THETA,PHI)
C     SCALE(LV)= SCALE FOR EACH IMAGE. SET TO 1.0 IF NEW.
C     TSHIFT(2,LV)= SHIFT FOR EACH IMAGE. SET TO 0.0 IF NEW.
C     FIRST= LOGICAL; .T.=START FROM SCRATCH, .F.=USE OLD OUTPUT TO
C           BEGIN REFINEMENT
C     NTTVL= TOTAL NUMBER OF POINTS FOUND IN THE ALL IMAGES COMBINED
C COMMON VARIABLES PASSED OUT:
C     PTACTIVE(LS,LV)= BOOLEAN ARRAY TELLING IF A POINT IS BEING USED IN
C           ALIGNMENT OR NOT FOR A VIEW
C     NUMPTS(LV)= HIGHEST NUMBERED MARKER TO BE FOUND IN AN IMAGE
C     NTVW= TOTAL NUMBER OF VIEWS. ALSO HIGHEST VALID INDEX OF XYPTS,
C           ANGLE, ETC.
C     NTPT= HIGHEST NUMBER OF MARKERS USED
C     CIR(2)= COORDS OF CENTER OF VIEW. NSAM/2+1, NROW/2+1
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

      SUBROUTINE MRGETINFO(XYPTS, IREF, NUMBER, ANGLE, SCALE, TSHIFT,
     &              FIRST,NTTVL,PARAMQ,PTACTIVE,NUMPTS,NTVW,NTPT,CIR)

      INCLUDE 'CMBLOCK.INC'
      INCLUDE 'CMLIMIT.INC'

      PARAMETER (LV=300)
      PARAMETER (LS=256)
      PARAMETER (MAXREG=7)
      PARAMETER (MAXKEY=256)

      LOGICAL           PARAMQ(4), PTACTIVE(LS,LV)
      INTEGER           NUMPTS(LV)
      REAL              CIR(2)

      CHARACTER(LEN=MAXNAM) :: XYIN,XYIN1,XYIN2,CORFIL,CORIN,DOCTIT
      CHARACTER(LEN=MAXNAM) :: SERNAME

      DIMENSION         XYPTS(2,LS,LV),ANGLE(3,LV),SCALE(LV)
      DIMENSION         TSHIFT(2,LV)
      DIMENSION         DBUF(MAXREG,MAXKEY),PLIST(MAXREG)
      INTEGER           NUMBER(LV),MXY(2)
      CHARACTER * 1     NULL,ANSW
      LOGICAL           FAKE,FIRST

      DATA DTOR/0.017453292/
      DATA LUNDOC,LUN1/10,79/

      NULL = CHAR(0)

C      ASK FOR DATA FILE
       NMAX = LV

       CALL FILELIST(.TRUE.,LUNDOC,XYIN1,NA,NUMBER,NMAX,NVW,
     &     'PREFIX OF MARKER DOC FILES',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

C      NVW - TOTAL NUMBER OF IMAGES

       NLETP   = NA
       SERNAME = XYIN1

       CALL RDPRMI(IRFR,IDUM,NOT_USED,'REFERENCE FILE NUMBER')

C      GET CENTER OF IMAGE
       CALL RDPRIS(MXY(1),MXY(2),NOT_USED,
     &      'X,Y IMAGE DIMENSIONS',IRTFLG)
       IF (IRTFLG .NE. 0) RETURN

       CIR(1) = MXY(1) / 2 + 1
       CIR(2) = MXY(2) / 2 + 1

      CALL RDPRMC(ANSW,NC,.TRUE.,'REFINE SCALE (VS REFERENCE)? (Y/N)',
     &      NULL,IRTFLG)
      PARAMQ(3) = (ANSW(:1) .EQ. 'Y') 

      CALL RDPRMC(ANSW,NC,.TRUE.,
     &      'REFINE TILT ANGLE (VS REFERENCE)? (Y/N)', NULL,IRTFLG)
      PARAMQ(2) = (ANSW(:1) .EQ. 'Y') 

      CALL RDPRMC(ANSW,NC,.TRUE.,'REFINE IN-PLANE ROTATION? (Y/N)',
     &      NULL,IRTFLG)
      PARAMQ(1) = (ANSW(:1) .EQ. 'Y') 

      CALL RDPRMC(ANSW,NC,.TRUE.,
     &      'REFINE SHIFT (VS REFERENCE)? (Y/N)',NULL,IRTFLG)
      PARAMQ(4) = (ANSW(:1) .EQ. 'Y') 

      CALL RDPRMC(ANSW,NC,.TRUE.,'USE PREVIOUS CORRECTIONS? (Y/N)',
     &           NULL,IRTFLG)
      FIRST = (ANSW(:1) .EQ. 'Y') 

      IF (FIRST) THEN
         CALL FILERD(CORFIL,NLTC,NULL,'CORRECTIONS INPUT DOC',
     &        IRTFLG)
         IF (IRTFLG.NE.0) RETURN
      ENDIF

      NTPT  = 0
      IVIEW = 0
      NTVW  = 0
      NTTVL = 0

      IRT2  = 0    ! SAY OPENDOC INFO

      NLETFIL = 0
      DO IVIEWT=1,NVW
C       GO THROUGH AND PULL ALL X,Y COORDS FROM DOC FILES

        CALL FILGET(XYIN1,XYIN2,NLETFIL,NUMBER(IVIEWT),IRTFLG1)
        IF (IRTFLG1 .NE. 0) CYCLE   ! BAD FILE NAME GENERATION

        IF (NUMBER(IVIEWT) .EQ. IRFR) IREF = IVIEWT
        XYIN2(NLETP+1:NLETP+1) = CHAR(0)

        IOPEN = 0
        IKEY  = 1
        CALL FILNAMANDEXT(XYIN2,DATEXC,XYIN,NLET,.TRUE.,IER)

        IF (IVIEWT > 1) IRT2  = -9    ! DO NOT SAY ANY MORE OPENDOC INFO
        CALL UNSDAL(XYIN,IOPEN,LUN1,IKEY,PLIST,3,DBUF,
     &              MAXKEY,MAXREG,NKEY2,IRT2)

C       UNSDAL CLOSES THE FILE
C       IRT2 WILL BE 1 IF KEY 1 IS MISSING, SO OK IF IRT2=0 OR 1
        IF (IRT2 .NE. 0 .AND. IRT2 .NE. 1) CYCLE

        IVIEW = IVIEW + 1
        NTVW  = NTVW  + 1
        IF (NTVW .GT. LV) THEN
           CALL ERRT(102,'NUMBER OF VIEWS CAN NOT EXCEED',LV)
           RETURN
        ENDIF

C       GET X,Y COORDS OF EACH MARKER FROM ALL VIEWS. A VIEW
C       CAN LACK SOME MARKERS
        NUMPTS(IVIEWT) = 0
        NUSED          = 0

        DO I=1,NKEY2
C         IF COORD OUTSIDE RANGE, THE POINT IS FAKE AND NOT USED
          FAKE = DBUF(2,I).LT.0 .OR. DBUF(2,I) .GT. (2*CIR(1)) .OR.
     &           DBUF(3,I).LT.0 .OR. DBUF(3,I) .GT. (2*CIR(2))
C         OR WHEN THE KEY IS MISSING ...
     &    .OR.  DBUF(1,I).EQ.0.0

          IF (FAKE) THEN
	    WRITE(NOUT,*)  '  FAKE POINT !!  ',IVIEWT,I
            PTACTIVE(I,IVIEWT) = .FALSE.
            XYPTS(1,I,IVIEWT)  = 0.0
            XYPTS(2,I,IVIEWT)  = 0.0
          ELSE
            PTACTIVE(I,IVIEWT) = .TRUE.
            NTTVL              = NTTVL + 1
            XYPTS(1,I,IVIEWT)  = DBUF(2,I )- CIR(1)
            XYPTS(2,I,IVIEWT)  = DBUF(3,I) - CIR(2)
            IF (I .GT. NUMPTS(IVIEW)) NUMPTS(IVIEW) = I
          ENDIF
        ENDDO

        IF (NUMPTS(IVIEW) .GT. NTPT) NTPT = NUMPTS(IVIEW)

C       GET INITIAL ANGLES FROM DOC FILE
        IOPEN = 0
        IKEY  = -1
        IRT2  = -9
        CALL UNSDAL(XYIN,IOPEN,LUN1,IKEY,PLIST,3,DBUF,
     &                 MAXKEY,MAXREG,NKEY2,IRT2)
c       UNSDAL CLOSES THE FILE

        ANGLE(1,IVIEWT)  = PLIST(1) * DTOR
        ANGLE(2,IVIEWT)  = PLIST(2) * DTOR
        ANGLE(3,IVIEWT)  = PLIST(3) * DTOR
        SCALE(IVIEWT)    = 1.000000
        TSHIFT(1,IVIEWT) = 0.0
        TSHIFT(2,IVIEWT) = 0.0
      ENDDO

      IF (.NOT. FIRST) GOTO 999

      IOPEN = 0
      IKEY  = 1
      IC    = 1
      IRT2  = 0
      CALL FILNAMANDEXT(CORFIL,DATEXC,CORIN,NLET,.TRUE.,IER)

      CALL UNSDAL(CORIN,IOPEN,LUN1,IKEY,PLIST,3,DBUF,
     &              MAXKEY,MAXREG,NKEY2,IRT2)

C     IRT2 WILL BE 1 IF KEY 1 IS MISSING, SO OK IF IRT2=0 OR 1
      IF (IRT2 .NE. 0 .AND. IRT2 .NE. 1) THEN
         WRITE(NOUT)' NO CORRECTIONS FILE. CONTINUING AS FIRST RUN'
         FIRST = .FALSE.
         GOTO 999
      ENDIF

C     COMMENTS TEMP MODIFIED TO READ IN MARKER ANGLES FILE
      DO  J=1,NKEY2
        IVIEW           = DBUF(1,J)
        SCALE(IVIEW)    = DBUF(2,J)
        ANGLE(2,IVIEW)  = DBUF(3,J)*DTOR
        ANGLE(1,IVIEW)  = DBUF(4,J)*DTOR
        TSHIFT(1,IVIEW) = DBUF(5,J)
        TSHIFT(2,IVIEW) = DBUF(6,J)
      ENDDO

 999  RETURN
      END
@


1.26
log
@enter
@
text
@d12 1
a12 1
C=* Email: spider@@wadsworth.org                                        *
@


1.25
log
@GPL_2010
@
text
@d94 1
a94 1
     &     'ENTER PREFIX OF MARKER DOC FILES',IRTFLG)
d102 1
a102 1
       CALL RDPRMI(IRFR,IDUM,NOT_USED,'ENTER REFERENCE FILE NUMBER')
d106 1
a106 1
     &      'ENTER X,Y IMAGE DIMENSIONS',IRTFLG)
d133 1
a133 1
         CALL FILERD(CORFIL,NLTC,NULL,'ENTER CORRECTIONS INPUT DOC',
@


1.24
log
@mk xypts in 2 parameters mralign bug
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.23
log
@GPL License fixed
@
text
@d34 1
a34 1
C  PURPOSE:                                                            *
a37 2
C GETS INFORMATION NEEDED TO ALIGN IMAGES.
C
d65 1
a65 1
     &                     FIRST,NTTVL)
d75 3
a77 5
      CHARACTER(LEN=MAXNAM) :: SERNAME
      COMMON /FILEN/SERNAME

      LOGICAL*1       PTACTIVE(LS,LV),PARAMQ(4)
      COMMON /GENERAL/PTACTIVE,NUMPTS(LV),NTVW,NTPT,CIR(2),PARAMQ
d80 1
d101 1
a101 1
C      NVW - total number of images
d113 2
a114 8
       CIR(1) = MXY(1)/2+1
       CIR(2) = MXY(2)/2+1

C      ARE ANGLES GIVEN BY -1 KEY IN ORDER PSI(COR),THETA,PHI
C           OR IN NORMAL SPIDER ;          PSI     THETA     PHI
CC      CALL RDPRMC(ANSW,NC,.TRUE.,
CC     &     '.ARE ANGLES IN PICK MARKER FORMAT? (Y/N)', NULL, IRTFLG)

d137 1
a137 1
       CALL FILERD(CORFIL,NLTC,NULL,'ENTER CORRECTIONS INPUT DOC',
d146 5
a150 1
      DO 503 IVIEWT=1,NVW
a151 4
C       NULL IS RESET EACH TIME BECAUSE CORRUPTION HAPPENS???? why all
        NULL = CHAR(0)
        NLETP = NA
        CALL FILGET(XYIN1,XYIN2,NLETP,NUMBER(IVIEWT),IRT2)
d153 4
a156 1
        IF (NUMBER(IVIEWT) .EQ. IRFR) IREF=IVIEWT
a158 3
C       IRT2=0 MEANS ALL OKAY
        IF (IRT2 .NE. 0) GOTO 503

d163 1
d169 1
a169 1
        IF (IRT2 .NE. 0 .AND. IRT2 .NE. 1) GOTO 503
d172 1
a172 1
        NTVW  = NTVW + 1
d180 3
a182 2
        NUMPTS(IVIEWT)=0
        NUSED = 0
d185 3
a187 3
          FAKE=DBUF(2,I).LT.0 .OR. DBUF(2,I).GT.(2*CIR(1)) .OR.
     &         DBUF(3,I).LT.0 .OR. DBUF(3,I).GT.(2*CIR(2))
C         OR when the key is missing ...
d189 1
d192 3
a194 3
            PTACTIVE(I,IVIEWT)=.FALSE.
            XYPTS(1,I,IVIEWT)=0.0
            XYPTS(2,I,IVIEWT)=0.0
d196 5
a200 5
            PTACTIVE(I,IVIEWT)=.TRUE.
            NTTVL=NTTVL+1
            XYPTS(1,I,IVIEWT)=DBUF(2,I)-CIR(1)
            XYPTS(2,I,IVIEWT)=DBUF(3,I)-CIR(2)
            IF (I .GT. NUMPTS(IVIEW)) NUMPTS(IVIEW)=I
d202 1
a202 1
        END DO
d204 1
a204 1
        IF (NUMPTS(IVIEW) .GT. NTPT) NTPT=NUMPTS(IVIEW)
d209 1
d214 9
a222 8
        ANGLE(1,IVIEWT)=PLIST(1)*DTOR
        ANGLE(2,IVIEWT)=PLIST(2)*DTOR
        ANGLE(3,IVIEWT)=PLIST(3)*DTOR
        SCALE(IVIEWT)=1.000000
        TSHIFT(1,IVIEWT)=0.0
        TSHIFT(2,IVIEWT)=0.0
 503  CONTINUE
      IF (.NOT.FIRST) GOTO 999
d225 3
a227 2
      IKEY = 1
      IC=1
d232 1
d242 6
a247 12
        IVIEW=DBUF(1,J)
        SCALE(IVIEW)=DBUF(2,J)
        ANGLE(2,IVIEW)=DBUF(3,J)*DTOR
        ANGLE(1,IVIEW)=DBUF(4,J)*DTOR
        TSHIFT(1,IVIEW)=DBUF(5,J)
        TSHIFT(2,IVIEW)=DBUF(6,J)

C       SCALE(IVIEW)=DBUF(2,J)**-1
C       ANGLE(1,IVIEW)=-DBUF(3,J)*DTOR
C       ANGLE(2,IVIEW)=DBUF(5,J)*DTOR
C       TSHIFT(1,IVIEW)=-DBUF(7,J)
C       TSHIFT(2,IVIEW)=-DBUF(6,J)
@


1.22
log
@HRI GPL License used
@
text
@a6 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d10 1
a10 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a29 6

C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.21
log
@MAXKEY, cosmetic
@
text
@d8 24
@


1.20
log
@ls-->256
@
text
@d58 1
a58 4
      PARAMETER (MAXKEY=100)
      PARAMETER (MAXLOOP=999)
      REAL MAXPER
      PARAMETER (MAXPER=1.0e-6)
d60 1
a60 1
      CHARACTER   *80   SERNAME
d66 1
a66 1
      CHARACTER(LEN=MAXNAM)   :: XYIN,XYIN1,XYIN2,CORFIL,CORIN,DOCTIT
@


1.19
log
@*** empty log message ***
@
text
@d56 1
a56 1
      PARAMETER (LS=100)
@


1.18
log
@nloop,iloop_removed
@
text
@d79 1
a79 1
      DATA LUNDOC/10/
@


1.17
log
@filelist used, filcan removed
@
text
@d95 1
a95 1
       CALL RDPRMI(IRFR,IDUM,NLOOP,ILOOP,'ENTER REFERENCE FILE NUMBER')
d98 1
a98 1
       CALL RDPRIS(MXY(1),MXY(2),NLOOP,ILOOP,
@


1.16
log
@*** empty log message ***
@
text
@d15 1
a16 1
C                                                                      *
a20 11
C        0         2         3         4         5         6         7 *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************


      SUBROUTINE MRGETINFO(XYPTS, IREF, NUMBER, ANGLE, SCALE, TSHIFT,
     &                     FIRST,NTTVL)


C
C **************************************************************
d45 6
d53 1
d55 7
a61 7
        PARAMETER (LV=300)
        PARAMETER (LS=100)
        PARAMETER (MAXREG=7)
        PARAMETER (MAXKEY=100)
        PARAMETER (MAXLOOP=999)
        REAL MAXPER
        PARAMETER (MAXPER=1.0e-6)
a62 3
      COMMON /DOCLAB/DOCTIT
      LOGICAL*1   PTACTIVE(LS,LV),PARAMQ(4)
      COMMON /GENERAL/PTACTIVE,NUMPTS(LV),NTVW,NTPT,CIR(2),PARAMQ
d66 6
a71 2
      DIMENSION         XYPTS(2,LS,LV)
      DIMENSION         ANGLE(3,LV),SCALE(LV)
d73 2
a74 4
      DIMENSION         DBUF(MAXREG,MAXKEY)
      DIMENSION         PLIST(MAXREG)
      INTEGER           NUMBER(LV)
      INTEGER           MXY(2)
d76 1
a76 6
      INTEGER   * 4     IRTFLG,IRT2
      CHARACTER * 81    XYIN,XYIN1,XYIN2
      CHARACTER * 81    CORFIL, CORIN
      CHARACTER * 80    DOCTIT
      LOGICAL *1        FAKE,MINANG
      LOGICAL *1        FIRST
d79 1
a79 2

      NULL=CHAR(0)
d81 1
a81 2
      NA=80
      NC=3
d85 5
a89 2
       CALL FILSEQP(XYIN1,NA,NUMBER,NMAX,NVW,
     &	  'ENTER PREFIX OF MARKER DOC FILES',IRTFLG)
d102 2
a103 2
       CIR(1)=MXY(1)/2+1
       CIR(2)=MXY(2)/2+1
d109 1
a109 2
CC      MINANG = .NOT.(ANSW(:1) .EQ. 'Y') .OR. (ANSW(:1) .EQ. 'y')
	MINANG=.TRUE.
d113 1
a113 1
      PARAMQ(3) = (ANSW(:1) .EQ. 'Y') .OR. (ANSW(:1) .EQ. 'y')
d117 1
a117 1
      PARAMQ(2) = (ANSW(:1) .EQ. 'Y') .OR. (ANSW(:1) .EQ. 'y')
d121 1
a121 1
      PARAMQ(1) = (ANSW(:1) .EQ. 'Y') .OR. (ANSW(:1) .EQ. 'n')
d125 1
a125 1
      PARAMQ(4) = (ANSW(:1) .EQ. 'Y') .OR. (ANSW(:1) .EQ. 'y')
d129 2
a130 1
      FIRST = (ANSW(:1) .EQ. 'Y') .OR. (ANSW(:1) .EQ. 'y')
d132 1
a132 1
       CALL FILERD(CORFIL,NLTC,NULL,'ENTER CORRECTIONS INPUT DOC FILE',
d134 1
a134 1
         IF(IRTFLG.NE.0) RETURN
d137 4
a140 4
      NTPT  =0
      IVIEW =0
      NTVW  =0
      NTTVL =0
d143 2
a144 2
C       NULL IS RESET EACH TIME BECAUSE CORRUPTION HAPPENS
        NULL  = CHAR(0)
d148 1
a148 1
        IF(NUMBER(IVIEWT) .EQ. IRFR) IREF=IVIEWT
d150 1
d155 3
a157 3
        NLET = 0
        IKEY = 1
        CALL FILCAN(XYIN,NLET,NULL,NULL,XYIN2,DATEXC,IER)
d159 3
a161 2
     &    MAXKEY,MAXREG,NKEY2,IRT2)
C        UNSDAL CLOSES THE FILE
d168 2
a169 3
          WRITE(NOUT,6900) LV
 6900     FORMAT(' ERROR: NUMBER OF VIEWS CAN NOT EXCEED',I5//)
          RETURN
d199 6
a204 13
        IF (MINANG) THEN
          IOPEN=0
          IKEY=-1
          CALL UNSDAL(XYIN,IOPEN,LUN1,IKEY,PLIST,3,DBUF,
     &        MAXKEY,MAXREG,NKEY2,IRT2)
c         UNSDAL CLOSES THE FILE
        ELSE

          READ(DOCTIT(9:20),8001) PLIST(1)
          READ(DOCTIT(21:32),8001) PLIST(3)
          READ(DOCTIT(33:44),8001) PLIST(2)
 8001     FORMAT(F12.4)
        ENDIF
d213 7
a219 6
        IOPEN = 0
        NLET = 0
        IKEY = 1
	IC=1
        CALL FILCAN(CORIN,NLET,NULL,NULL,CORFIL,DATEXC,IER)
        CALL UNSDAL(CORIN,IOPEN,LUN1,IKEY,PLIST,3,DBUF,
d221 7
a227 6
C       IRT2 WILL BE 1 IF KEY 1 IS MISSING, SO OK IF IRT2=0 OR 1
        IF (IRT2 .NE. 0 .AND. IRT2 .NE. 1) THEN
           WRITE(NOUT)' NO CORRECTIONS FILE. CONTINUING AS FIRST RUN'
           FIRST = .FALSE.
           GOTO 999
        ENDIF
d236 1
@


1.15
log
@*** empty log message ***
@
text
@d141 3
a143 3
         CALL FILERD(CORFIL,NLTC,NULL,'ENTER CORRECTIONS INPUT DOC FILE',
     &           IRTFLG)
         IF (IRTFLG .NE. 0) RETURN
a217 1

a219 1

a227 1

a240 1

@


1.14
log
@*** empty log message ***
@
text
@d141 2
a142 1
         CALL FILERD(CORFIL,NLTC,NULL,'.ENTER CORRECTIONS FILE',IRTFLG)
@


1.13
log
@header
@
text
@d98 1
a98 1
     &	  'ENTER PREFIX OF X,Y COORD FILES',IRTFLG)
d104 1
a104 1
       CALL RDPRMI(IRFR,IDUM,NLOOP,ILOOP,'REFERENCE FILE NUMBER')
d108 1
a108 1
     &      'ENTER X,Y DIMENSIONS OF IMAGE',IRTFLG)
d121 1
a121 1
      CALL RDPRMC(ANSW,NC,.TRUE.,'.REFINE SCALE (VS REFERENCE)? (Y/N)',
d126 1
a126 1
     &      '.REFINE TILT ANGLE (VS REFERENCE)? (Y/N)', NULL,IRTFLG)
d129 1
a129 1
      CALL RDPRMC(ANSW,NC,.TRUE.,'.REFINE IN-PLANE ROTATION? (Y/N)',
d134 1
a134 1
     &      '.REFINE SHIFT (VS REFERENCE)? (Y/N)',NULL,IRTFLG)
@


1.12
log
@a
@
text
@d2 24
@


1.11
log
@used rdprmis not rdprai
@
text
@d65 1
a65 1
CNO_SAVE
@


1.10
log
@*** empty log message ***
@
text
@d80 2
a81 1
       CALL RDPRMI(IRFR,IDUM,NLOOP,ILOOP,'REFERENCE FILE NUMBER')
d84 4
a87 3
       NDM=2
 555   CALL RDPRAI(MXY,2,NDM,1,10000, 'ENTER X,Y DIMENSIONS OF IMAGE',
     &      NULL, IRTFLG)
d152 1
a152 1
 6900     FORMAT(' ERROR: NUMBER OF VIEWS CAN NOT EXCEED',I5//)
@


1.9
log
@needed filerd instead of rdprmc
@
text
@d220 1
a220 1
      DO 505 J=1,NKEY2
d232 1
a232 1
 505  CONTINUE
@


1.8
log
@used unsdal
@
text
@d72 2
a73 2
       NMAX=LV
       CALL  FILSEQP(XYIN1,NA,NUMBER,NMAX,NVW,
d77 2
a78 2
       NLETP=NA
       SERNAME=XYIN1
d116 2
a117 2
         CALL RDPRMC(CORFIL,NLTC,.TRUE.,'.ENTER CORRECTIONS FILE',NULL,
     &               IRTFLG)
d127 2
a128 2
        NULL=CHAR(0)
        NLETP=NA
d142 1
a142 1
c unsdal closes the file
@


1.7
log
@model removed
@
text
@d1 1
d4 2
a32 1
#ifdef SP_UNIX
a33 3
#else
      INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
a48 1

d66 1
a66 1
	NULL=char(0)
a67 3
C GET X,Y COORD DOC FILE NAMES
c      WRITE(NOUT,8988)
c 8988 FORMAT(1X,/)
a69 2
C      CALL RDPRMC(DATEXC, NC, .TRUE.,'ENTER DATA EXTENSION CODE',
C     &      NULL, IRTFLG)
d71 3
a73 5
C
C  ASK FOR DATA FILE
C
	NMAX=LV
 	CALL  FILSEQP(XYIN1,NA,NUMBER,NMAX,NVW,
d75 2
a76 5
C  NVW - total number of images
C
c
c      CALL RDPRMC(XYIN1, NA, .TRUE., 
c     & 'ENTER PREFIX OF X,Y COORD FILES', NULL, IRTFLG)
d79 6
a84 10
c
c      NVW=LV
c      CALL RDPRAI(NUMBER, LV, NVW, 0, LV, 'ENTER FILE NUMBERS$',
c     & NULL, IRTFLG)

      CALL RDPRMI(IRFR,IDUM,NLOOP,ILOOP,'REFERENCE FILE NUMBER')

C           GET CENTER OF IMAGE
      NDM=2
 555  CALL RDPRAI(MXY,2,NDM,1,10000, 'ENTER X,Y DIMENSIONS OF IMAGE$',
d86 2
a87 3
c      IF(NDM.LT.2) GOTO 555
      CIR(1)=MXY(1)/2+1
      CIR(2)=MXY(2)/2+1
d89 1
a89 1
C           ARE ANGLES GIVEN BY -1 KEY IN ORDER PSI(COR),THETA,PHI
d101 1
a101 1
     &      '.REFINE TILT ANGLE (VS REFERENCE)? (Y/N)$', NULL,IRTFLG)
d104 1
a104 1
      CALL RDPRMC(ANSW,NC,.TRUE.,'.REFINE IN-PLANE ROTATION? (Y/N)$',
d109 1
a109 1
     &      '.REFINE SHIFT (VS REFERENCE)? (Y/N)$',NULL,IRTFLG)
d112 2
a113 3
c      WRITE(NOUT,9898)
      CALL RDPRMC(ANSW,NC,.TRUE.,'USE PREVIOUS CORRECTIONS? (Y/N)$',
     &      NULL,IRTFLG)
d115 3
a117 7
      IF(FIRST) THEN
        CALL FILERD(CORIN,NLTC,NULL,'.ENTER CORRECTIONS FILE',
     &      IRTFLG)
C        NLTC=80
C        CALL RDPRMC(CORFIL,NLTC,.TRUE.,'.ENTER CORRECTIONS FILE',NULL,
C     &      IRTFLG)
C        CORFIL(NLTC+1:NLTC+1)=CHAR(0)
d120 4
a123 7
c      WRITE(NOUT,9898)
c 9898 FORMAT(1X,/)

      NTPT=0
      IVIEW=0
      NTVW=0
      NTTVL=0
d125 2
a126 2
C           GO THROUGH AND PULL ALL X,Y COORDS FROM DOC FILES
C           NULL IS RESET EACH TIME BECAUSE CORRUPTION HAPPENS
d132 3
a134 3
        XYIN2(NLETP+1:NLETP+1)=CHAR(0)
C           IRT2=0 MEANS ALL OKAY
        IF(IRT2 .NE. 0) GOTO 503
a139 1
c        XYIN(NLET:NLET)=CHAR(0)
d143 2
a144 3
c        CLOSE (LUN1)
C           IRT2 WILL BE 1 IF KEY 1 IS MISSING, SO OK IF IRT2=0 OR 1
        IF(IRT2 .NE. 0 .AND. IRT2 .NE. 1) GOTO 503
d147 2
a148 2
        NTVW = NTVW + 1
        IF(NTVW .GT. LV) THEN
d153 3
a155 2
C           GET X,Y COORDS OF EACH MARKER FROM ALL VIEWS. A VIEW
C           CAN LACK SOME MARKERS
d157 1
a157 1
        NUSED=0
d159 1
a159 1
C           IF COORD OUTSIDE RANGE, THE POINT IS FAKE AND NOT USED
d162 1
a162 1
C  OR when the key is missing ...
d164 2
a165 2
          IF(FAKE) THEN
	write(nout,*)  '  FAKE POINT !!  ',iviewt,i
d180 2
a181 2
C           GET INITIAL ANGLES FROM DOC FILE
        IF(MINANG) THEN
d186 1
a186 2
c unsdal closes the file
c          CLOSE (LUN1)
d203 2
a204 1
      IF(.NOT.FIRST) GOTO 999
d209 8
a216 12
C        CALL FILCAN(CORIN,NLET,NULL,NULL,CORFIL,DATEXC,IER)
c        CORIN(NLET:NLET)=CHAR(0)
c        CALL UNSDAL(CORIN,IOPEN,LUN1,IKEY,PLIST,3,DBUF,
c     &    MAXKEY,MAXREG,NKEY2,IRT2)
        CALL UNSDAL2(CORIN,IOPEN,IC,LUN1,IKEY,PLIST,3,DBUF,
     &    MAXKEY,MAXREG,NKEY2,IRT2)
        CLOSE(LUN1)
C           IRT2 WILL BE 1 IF KEY 1 IS MISSING, SO OK IF IRT2=0 OR 1
        IF(IRT2 .NE. 0 .AND. IRT2 .NE. 1) THEN
          WRITE(NOUT)' NO CORRECTIONS FILE. CONTINUING AS FIRST RUN'
          FIRST=.FALSE.
          GOTO 999
d219 1
a219 1
C      COMMENTS TEMP MODIFIED TO READ IN MARKER ANGLES FILE
d227 5
a231 5
C        SCALE(IVIEW)=DBUF(2,J)**-1
C        ANGLE(1,IVIEW)=-DBUF(3,J)*DTOR
C        ANGLE(2,IVIEW)=DBUF(5,J)*DTOR
C        TSHIFT(1,IVIEW)=-DBUF(7,J)
C        TSHIFT(2,IVIEW)=-DBUF(6,J)
d233 1
@


1.6
log
@model added
@
text
@d2 1
a2 1
     &                     FIRST,P3D,MODEL3D,NTTVL)
a26 2
C     P3D(3,LS) - previous 3D model to be used as a starting point.
C     MODEL3D - .TRUE. if previous 3D model available
d30 1
d32 3
d52 1
a52 2
      DIMENSION         ANGLE(3,LV)
      DIMENSION         P3D(3,LS),SCALE(LV)
d61 1
a61 1
      CHARACTER * 81    CORFIL, CORIN, MODEL
d64 1
a64 1
      LOGICAL *1        FIRST,MODEL3D
d68 1
a68 1
	NULL=CHAR(0)
d71 2
d100 1
a100 1
 555  CALL RDPRAI(MXY,2,NDM,1,10000, 'ENTER X,Y DIMENSIONS OF IMAGE',
d133 2
a134 2
      IF(FIRST) 
     &        CALL FILERD(CORIN,NLTC,NULL,'.ENTER CORRECTIONS FILE',
d140 5
a144 9
C      ENDIF
C
      CALL RDPRMC(ANSW,NC,.TRUE.,'USE PREVIOUS 3D MODEL? (Y/N)$',
     &      NULL,IRTFLG)
      MODEL3D = (ANSW(:1) .EQ. 'Y') .OR. (ANSW(:1) .EQ. 'y')
      IF(MODEL3D) 
     &  CALL FILERD(MODEL,NLTC,NULL,'.ENTER 3D MODEL FILE',
     &      IRTFLG)
C
d230 1
a230 1
      IF(FIRST) THEN
d263 1
a263 16
      ENDIF
999	CONTINUE
	IF(MODEL3D) THEN
        IOPEN = 0
        NLET = 0
        IKEY = 1
	IC=1
        CALL UNSDAL2(MODEL,IOPEN,IC,LUN1,IKEY,PLIST,3,DBUF,
     &    MAXKEY,MAXREG,NKEY2,IRT2)
        CLOSE(LUN1)
	DO  K=1,NKEY2
	DO  J=1,3
	P3D(J,K)=DBUF(J+1,K)
	ENDDO
	ENDDO
	ENDIF
@


1.5
log
@logical*2 changed to logical*1 (was causing a crash, strange !)
@
text
@d2 1
a2 1
     &                     FIRST,NTTVL)
d27 2
a31 1
#ifdef SP_UNIX
a32 3
#else
      INCLUDE 'COMMON1:CMBLOCK.INC'
#endif
d50 2
a51 1
      DIMENSION         ANGLE(3,LV),SCALE(LV)
d60 1
a60 1
      CHARACTER * 81    CORFIL, CORIN
d63 1
a63 1
      LOGICAL *1        FIRST
d67 1
a67 1
	NULL=char(0)
a69 2
c      WRITE(NOUT,8988)
c 8988 FORMAT(1X,/)
d97 1
a97 1
 555  CALL RDPRAI(MXY,2,NDM,1,10000, 'ENTER X,Y DIMENSIONS OF IMAGE$',
d130 2
a131 2
      IF(FIRST) THEN
        CALL FILERD(CORIN,NLTC,NULL,'.ENTER CORRECTIONS FILE',
d137 9
a145 5
      ENDIF

c      WRITE(NOUT,9898)
c 9898 FORMAT(1X,/)

d231 1
a231 1
      IF(.NOT.FIRST) GOTO 999
d264 16
a279 1
 999  RETURN
@


1.4
log
@nosave
@
text
@d63 2
a64 2
      LOGICAL *2        FAKE,MINANG
      LOGICAL *2        FIRST
@


1.3
log
@LV set to 300 (number of projections)
@
text
@d67 1
@


1.2
log
@cpp_lines_added
@
text
@d36 1
a36 1
        PARAMETER (LV=100)
@


1.1
log
@Initial revision
@
text
@d30 3
d34 1
@
