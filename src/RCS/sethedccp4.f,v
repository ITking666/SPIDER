head	1.22;
access;
symbols
	healthdept_2018:1.22
	pre_getangas:1.14
	pre_GPL2010:1.14
	pre_var_equation:1.14
	pre_fftwrings:1.14
	pre_opfiles:1.13
	src:1.13
	best-code:1.13
	x-named-regs:1.11
	x:1.11
	v13-00:1.11
	pre_GPL:1.11
	prec_CA:1.9
	noindx:1.8;
locks; strict;
comment	@c @;


1.22
date	2018.10.03.14.34.16;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2018.01.26.17.07.45;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2016.06.13.15.39.06;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2016.01.22.14.52.07;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2015.07.15.15.41.24;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2015.07.15.14.06.27;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2013.04.15.17.27.11;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2012.05.17.14.47.42;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.26.16.26.38;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.28.19.45.39;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.09.16.14.21;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2004.11.22.20.08.33;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2004.11.01.13.25.37;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2003.04.16.16.26.58;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.18.13.49.21;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.15.20.32.56;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.19.15.32.44;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.11.14.08.19;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.04.19.48.14;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.25.13.47.02;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.22.19.25.56;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.22.18.06.36;	author leith;	state Exp;
branches;
next	;


desc
@@


1.22
log
@email_health_dept
@
text
@
C **********************************************************************
c
C SETHEDCCP4    ISSWAB ADDED                      JUL  02 ARDEAN LEITH
C               ANGSTROMS/PIXEL                   JAN  05 ARDEAN LEITH 
C               STARTING                          FEB  06 ARDEAN LEITH 
C               MRC PROMPTS                       MAY  12 ARDEAN LEITH 
C               NSYMBYT,ISPG                      JUN  15 ARDEAN LEITH 
C               ISSWAB RENAMED ISSWABT            JAN  16 ARDEAN LEITH
C               SETHEDCCP4_NEW ADDED              JUN  16 ARDEAN LEITH
C               SETSTAMP NOW ALWAYS LITTLE ENDED  JAN  18 ARDEAN LEITH
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2018  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C SETHEDCCP4(HEADBUF, NX, NY, NZ,
C           DMIN,DMAX,DMEAN,DSIG, SCALEX,SCALEY,SCALEZ,
C           IMODE,ISSWABT,NSYMBYT,NIMG,MZ,IRTFLG)
C
C PURPOSE: CREATE NEW CCP4 HEADER. ALL OF THE STANDARD IMAGE 
C          DEFAULTS ARE SET UP GIVEN THE REQUESTED INFORMATION. 
C          HEADER NOT WRITTEN.
C
C          NOTE: THE STARTING POINT FOR COLUMNS,ROWS,SECTIONS
C          ARE SET TO 0 BY DEFAULT.!!!!!!!!!
C
C PARAMETERS:
C       NX...    # OF INTERVALS COLUMNS, ROWS, SECTIONS
C       IMODE    DATA STORAGE MODE (1-4)
C                0 = IMAGE               8               INTEGERS
C                1 = IMAGE               16 BIT SIGNED   INTEGERS 
C                2 = IMAGE               32 BIT REALS
C                3 = FOURIER TRANSFORM   16 BIT INTEGER
C                4 = FOURIER TRANSFORM   32 BIT REALS      
C                6 = IMAGE               16 BIT UNSIGNED INTEGERS 
C
C NOTE:  SEE REDHEDCCP4 FOR SOME MORE DETAILS
C
C        ISPG == 0        IMAGE OR IMAGE STACK
C        ISPG == 1        VOLUMES
C        ISPG == 401      STACK OF EM VOLUMES
C
C        MZ   ==  1       IMAGE 
C        MZ   >=  1       IMAGE STACK
C        MZ   == NZ       VOLUME
C        MZ   NZ/NUMVOLS  VOLUME STACK
C
C        DMAX  < DMIN                        MAX & MIN UNDETERMINED
C        DMEAN < (SMALLER OF DMIN and DMAX)  DMEAN     UNDETERMINED
C        RMS   < 0.0                         RMS       UNDETERMINED
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE SETHEDCCP4_NEW(HEADBUF, 
     &                        NX, NY, NZ, NIMG, IMODE,IVERSION,
     &                        ISTARTX,ISTARTY,ISTARTZ, 
     &                        ORIGX,ORIGY,ORIGZ, 
     &                        SCALEX,SCALEY,SCALEZ, 
     &                        DMIN,DMAX,DMEAN,DSIG, 
     &                        ISSWABT,NSYMBYT, IRTFLG)

        IMPLICIT NONE

        INCLUDE 'CMBLOCK.INC'

        REAL               :: HEADBUF(*)
        INTEGER            :: NX,NY,NZ, IMODE,IVERSION
        INTEGER            :: ISTARTX,ISTARTY,ISTARTZ
        REAL               :: SCALEX,SCALEY,SCALEZ
        REAL               :: ORIGX,ORIGY,ORIGZ
        REAL               :: DMIN,DMAX,DMEAN,DSIG,SCALE
        LOGICAL            :: ISSWABT
        INTEGER            :: NSYMBYT,NIMG,ISPG,MZ,IRTFLG

        INTEGER            :: MX,MY,MACHST,NZMRC 
        INTEGER            :: NLABEL,I,INOW,NOT_USED
        CHARACTER(LEN=44)  :: LABEL1 
        CHARACTER(LEN=4)   :: CVAL
        CHARACTER(LEN=1)   :: BLANK = CHAR(32)
        real               :: cellax,cellay,cellaz

C       NOTE: COPY IMAGE DATA IN REAL*4 FORMAT. 

        WRITE(NOUT,*)' '
        
        NZMRC = NZ
        IF (IVERSION < 20140) THEN
           NZMRC = NIMG
        ENDIF

        CALL CCPMVI(HEADBUF(1),NX,1)
        CALL CCPMVI(HEADBUF(2),NY,1)
        CALL CCPMVI(HEADBUF(3),NZMRC,1)

        CALL CCPMVI(HEADBUF(4),IMODE,1)

C       SET START POINTS ON COLUMNS, ROWS, SECTIONS 
        CALL CCPMVI(HEADBUF(5),ISTARTX,1)
        CALL CCPMVI(HEADBUF(6),ISTARTY,1)
        CALL CCPMVI(HEADBUF(7),ISTARTZ,1)

C       GRID SAMPLING ON X, Y, Z (MX & MY ) 
C       FOR EM, NUMBER OF SECTIONS ALONG Z IN A VOLUME STACK
C       SO: MZ = NZ / NUMBER OF VOLUMES 

        MX = NX
        MY = NY
        IF (NZ == 1 .AND. NIMG == 1) THEN
C          IMAGE
           ISPG  = 0    
           MZ    = 1
           NZMRC = 1            
        ELSEIF (NZ == 1 .AND. NIMG > 1 ) THEN
C          IMAGE STACK
           ISPG  = 0    
           MZ    = NIMG
           NZMRC = NIMG        ! NUMBER OF IMAGES 
        ELSEIF (NZ > 1 .AND. NIMG == 1 ) THEN
C          VOLUME
           ISPG  = 1    
           MZ    = NZ
           NZMRC = NZ          ! NUMBER OF VOLUMES 
        ELSEIF (NZ > 1 .AND. NIMG > 1 ) THEN
C          STACK OF EM VOLUMES
           ISPG  = 401    
           MZ    = NZ * NIMG
           NZMRC = NIMG       ! NUMBER OF VOLUMES
        ELSE 
           CALL ERRT(102,'BAD STACK OR VOLUME PARAMETERS',NIMG)
           IRTFLG = 1
           RETURN
        ENDIF

        CALL CCPMVI(HEADBUF(8), MX,1)
        CALL CCPMVI(HEADBUF(9), MY,1)
        CALL CCPMVI(HEADBUF(10),MZ,1)

C       CELL SIZE (ANGSTROMS) (CELLAX..) 
        CELLAX      = SCALEX * NX
        CELLAY      = SCALEX * NX
        CELLAZ      = SCALEX * NX
        HEADBUF(11) = CELLAX
        HEADBUF(12) = CELLAY
        HEADBUF(13) = CELLAZ  

C       CELL ANGLES (DEGREES)  (CELLBX..) 
        HEADBUF(14) = 90.0
        HEADBUF(15) = 90.0
        HEADBUF(16) = 90.0

C       STORAGE: FAST, MEDIUM, SLOW AXES 
        CALL CCPMVI(HEADBUF(17),1,1)
        CALL CCPMVI(HEADBUF(18),2,1)
        CALL CCPMVI(HEADBUF(19),3,1)
 
C       MIN, MAX. & MEAN DENSITY 
        HEADBUF(20) = DMIN
        HEADBUF(21) = DMAX
        HEADBUF(22) = DMEAN

C       SPACE GROUP, # BYTES SYMMETRY 
        CALL CCPMVI(HEADBUF(23), ISPG,  1)
        CALL CCPMVI(HEADBUF(24), NSYMBYT,1)

C       ZERO THE EXTRA POSITIONS
        DO I = 25,49
           CALL CCPMVI(HEADBUF(I), 0,1)
        ENDDO

C       PUT IN EXTTYP : 'MRCO'
        CVAL = 'MRCO'
        CALL CCPMVC(HEADBUF(27),CVAL,ISSWABT)

C       VERSION NUMBER 
        CALL CCPMVI(HEADBUF(28), IVERSION,1)
                
        HEADBUF(50) = ORIGX
        HEADBUF(51) = ORIGY
        HEADBUF(52) = ORIGZ

C       PUT IN 'MAP'
        CVAL = 'MAP '
        CALL CCPMVC(HEADBUF(53),CVAL,ISSWABT)

C       SET MACHINE STAMP
C       MACHST = 286326784    ! FOR BIG ENDIAN DATA
C       MACHST = 4369         ! FOR LITTLE ENDIAN DATA
        MACHST = 16708        ! FOR LITTLE ENDIAN DATA
        CALL CCPMVI(HEADBUF(54),MACHST,1)

c       write(nout,*) ' map:',cval,headbuf(53)
c       write(nout,*) ' machst:',machst,headbuf(54)

C       SET RMS (ASSUMING THIS DEFINED SAME AS SIG IN SPIDER??)
        HEADBUF(55) = DSIG

C       SET NUMBER OF LABELS
        NLABEL = 1  
        CALL CCPMVI(HEADBUF(56), NLABEL,1)

C       ZERO ALL LABELS WITH BLANKS
        CVAL = BLANK // BLANK // BLANK // BLANK
        DO I = 57,256
           CALL CCPMVC(HEADBUF(I),CVAL,ISSWABT)
        ENDDO

C       ADD ONE LABEL
        LABEL1 = 'Converted from SPIDER to MRC using SPIDER '
        INOW   = 56
        DO I = 1,44,4
           CVAL = LABEL1(I:I+3)
           INOW = INOW + 1
           CALL CCPMVC(HEADBUF(INOW),CVAL,ISSWABT)
        ENDDO
        
        IRTFLG = 0
        END

#ifdef NEVER
C          WRITE OUT HEADER INFORMATION
           WRITE(6,1000) NX,NY,NZ,IMODE,
     &       ISTARTX,ISTARTY,ISTARTZ, MX,MY,MZ,
     &       CELLAX,CELLAY,CELLAZ, 
     &       DMIN,DMAX,DMEAN,DSIG,ORIGX,ORIGY,ORIGZ,ISPG,NSYMBYT,
     &       MACHST,IVERSION, CVAL

1000       FORMAT(
     &     2X,'Columns, rows, sections .................. ',3(I7,1X)/
     &     2X,'Mode ..................................... ',I6/
     &     2X,'Start points on columns, rows, sections .. ',3I7/
     &     2X,'Grid sampling on x, y, z ................. ',3I7/
     &     2X,'Cell axes ................................ ',3F10.2/
     &     2X,'Minimum density .......................... ',F25.12/
     &     2X,'Maximum density .......................... ',F25.12/
     &     2X,'Mean density ............................. ',F25.12/
     &     2X,'RMS deviation ............................ ',F25.12/
     &     2X,'Origins .................................. ',3F10.2/
     &     2X,'Space group, # bytes symmetry ............ ',2I7/
     &     2X,'Machine stamp ............................ ',I12/
     &     2X,'Version ..................................    ',I7/
     &     2X,'ExtType .....................................   ',A)

#endif




C ******************************** SETHEDCCP4 *****************************


        SUBROUTINE SETHEDCCP4(HEADBUF, NX, NY, NZ,
     &                        DMIN,DMAX,DMEAN,DSIG, 
     &                        SCALEX,SCALEY,SCALEZ, IMODE,
     &                        ISSWABT,NSYMBYT,NIMG,MZ,IRTFLG)

        IMPLICIT NONE

        INCLUDE 'CMBLOCK.INC'

        REAL               :: HEADBUF(*)
        INTEGER            :: NX,NY,NZ, IMODE
        REAL               :: DMIN,DMAX,DMEAN,DSIG,SCALE
        LOGICAL            :: ISSWABT
        INTEGER            :: NSYMBYT,NIMG,MZ,IRTFLG

        INTEGER            :: ISTARTX,ISTARTY,ISTARTZ,NOT_USED
        INTEGER            :: MX,MY,IVERSION,MACHST,ISPG,NZMRC 
        REAL               :: SCALEX,SCALEY,SCALEZ
        REAL               :: ORIGX,ORIGY,ORIGZ
        INTEGER            :: NLABEL,I,INOW
        CHARACTER(LEN=44)  :: LABEL1 
        CHARACTER(LEN=4)   :: CVAL
        CHARACTER(LEN=1)   :: BLANK = CHAR(32)

c       NOTE: COPY IMAGE DATA IN REAL*4 FORMAT. 
        
        CALL CCPMVI(HEADBUF(1),NX,1)
        CALL CCPMVI(HEADBUF(2),NY,1)
C       NZ = MZ * NUMBER OF VOLUMES
        CALL CCPMVI(HEADBUF(3),NZ,1)

C       COPY IMAGE DATA IN REAL*4 FORMAT.       
        CALL CCPMVI(HEADBUF(4),IMODE,1)

C       SET START POINTS ON COLUMNS, ROWS, SECTIONS

        WRITE(NOUT,*)' '
        IF (NZ > 1) THEN
C          VOLUME
           WRITE(NOUT,*)' STARTING (X,Y,Z) DEFAULT VALUE: (-(NX/2)+ 1,',
     &                 ' -(NY/2)+1), -(NZ/2)+1'
           WRITE(NOUT,*)' (+1 ADDED ONLY IF LENGTH IS ODD) ',
     &               ' USE <CR> FOR DEFAULT VALUE'
                
           ISTARTX = -(NX/2) + (MOD(NX,2))
           ISTARTY = -(NY/2) + (MOD(NY,2))
           ISTARTZ = -(NZ/2) + (MOD(NZ,2))
 
           CALL RDPRI3S(ISTARTX,ISTARTY,ISTARTZ,NOT_USED,
     &                 'STARTING X, Y, & Z FOR MRC DATA',IRTFLG)

        ELSE
C          IMAGE
           ISTARTZ = -(NZ/2) + (MOD(NZ,2))
           WRITE(NOUT,*)' STARTING (X & Y) DEFAULT VALUE: (-(NX/2)+ 1,',
     &                  ' -(NY/2)+1)'
           WRITE(NOUT,*)' (+1 ADDED ONLY IF LENGTH IS ODD) ',
     &               ' USE <CR> FOR DEFAULT VALUE'
                
           ISTARTX = -(NX/2) + (MOD(NX,2))
           ISTARTY = -(NY/2) + (MOD(NY,2))
           ISTARTZ = -(NZ/2) + (MOD(NZ,2))
 
           CALL RDPRI2S(ISTARTX,ISTARTY,NOT_USED,
     &                 'STARTING X & Y FOR MRC DATA',IRTFLG)
        ENDIF

        CALL CCPMVI(HEADBUF(5),ISTARTX,1)
        CALL CCPMVI(HEADBUF(6),ISTARTY,1)
        CALL CCPMVI(HEADBUF(7),ISTARTZ,1)

C       GRID SAMPLING ON X, Y, Z (MX..) SAME AS NX, NY, NZ
        MX = NX
        MY = NY
C       FOR EM, NUMBER OF SECTIONS ALONG Z IN A VOLUME STACK
C       SO: MZ = NZ / NUMBER OF VOLUMES 

        IF (NZ == 1 .AND. NIMG == 1) THEN
C          IMAGE
           ISPG  = 0    
           MZ    = 1
           NZMRC = 1            
        ELSEIF (NZ == 1 .AND. NIMG > 1 ) THEN
C          IMAGE STACK
           ISPG  = 0    
           MZ    = NIMG
           NZMRC = NIMG        ! NUMBER OF IMAGES 
        ELSEIF (NZ > 1 .AND. NIMG == 1 ) THEN
C          VOLUME
           ISPG  = 1    
           MZ    = NZ
           NZMRC = NZ          ! NUMBER OF VOLUMES 
        ELSEIF (NZ > 1 .AND. NIMG > 1 ) THEN
C          STACK OF EM VOLUMES
           ISPG  = 401    
           MZ    = NZ * NIMG
           NZMRC = NZ          ! NUMBER OF VOLUMES
        ELSE 
           CALL ERRT(102,'BAD STACK OR VOLUME PARAMETERS',NIMG)
           IRTFLG = 1
           RETURN
        ENDIF


        CALL CCPMVI(HEADBUF(8), NX,1)
        CALL CCPMVI(HEADBUF(9), NY,1)
        CALL CCPMVI(HEADBUF(10),NZMRC,1)

C       CELL AXES (CELLAX..) 
        IF (SCALEX > 0) THEN
           WRITE(NOUT,*) ' ANGSTROMS/PIXEL FOR ALL AXES (HEADER ',
     &                   ' LOCATION=21): ',SCALEX
        ELSE
           SCALEX = 1.0
           SCALEY = 1.0
           SCALEZ = 1.0
        ENDIF

        IF (NZ > 1) THEN
           CALL RDPRM3S(SCALEX,SCALEY,SCALEZ,NOT_USED,
     &              'ANGSTROMS/PIXEL FOR  X, Y, & Z AXIS',IRTFLG)
        ELSE
           CALL RDPRM2S(SCALEX,SCALEY,NOT_USED,
     &              'ANGSTROMS/PIXEL FOR  X &  Y AXES',IRTFLG)
        ENDIF
        IF (IRTFLG .NE. 0) RETURN

        HEADBUF(11) = SCALEX * NX
        HEADBUF(12) = SCALEY * NY
        HEADBUF(13) = SCALEZ * NZ

C       CELL ANGLES (CELLBX..) 
        HEADBUF(14) = 90.0
        HEADBUF(15) = 90.0
        HEADBUF(16) = 90.0

C       FAST, MEDIUM, SLOW AXES 
        CALL CCPMVI(HEADBUF(17),1,1)
        CALL CCPMVI(HEADBUF(18),2,1)
        CALL CCPMVI(HEADBUF(19),3,1)
 
C       MIN, MAX. & MEAN DENSITY 
        HEADBUF(20) = DMIN
        HEADBUF(21) = DMAX
        HEADBUF(22) = DMEAN

C       SPACE GROUP, # BYTES SYMMETRY 
        CALL CCPMVI(HEADBUF(23), ISPG,  1)
        CALL CCPMVI(HEADBUF(24), NSYMBYT,1)

C       ZERO THE EXTRA POSITIONS
        DO I = 25,49
           CALL CCPMVI(HEADBUF(I), 0,1)
        ENDDO

C       PUT IN 'MRCO'
        CVAL = 'MRCO'
        CALL CCPMVC(HEADBUF(27),CVAL,ISSWABT)

C       VERSION NUMBER 
        IVERSION = 20140
        CALL CCPMVI(HEADBUF(28), IVERSION,1)

C       ORIGIN ON X,Y & Z AXIS 
        ORIGX = (NX/2) + (MOD(NX,2))
        ORIGY = (NY/2) + (MOD(NY,2))
        ORIGZ = (NZ/2) + (MOD(NZ,2))

        WRITE(NOUT,*)' '
        IF (NZ < 2) THEN
          WRITE(NOUT,*)' ORIGIN (X,Y) DEFAULT VALUE:((NX/2)+ 1, ',
     &                 '(NY/2)+1)'
          WRITE(NOUT,*)'   (+1 ADDED ONLY IF AXIS LENGTH IS ODD)',
     &                 ' USE <CR> FOR DEFAULT VALUE'
          CALL RDPRM2S(ORIGX,ORIGY,NOT_USED,
     &               'X, & Y ORIGIN FOR MRC DATA',IRTFLG)
        ELSE 
          WRITE(NOUT,*)' ORIGIN (X,Y,Z) DEFAULT VALUE:((NX/2)+ 1, ',
     &                 '(NY/2)+1), (NZ/2)+1'
          WRITE(NOUT,*)'   (+1 ADDED ONLY IF AXIS LENGTH IS ODD)',
     &                 ' USE <CR> FOR DEFAULT VALUE'
          CALL RDPRM3S(ORIGX,ORIGY,ORIGZ,NOT_USED,
     &               'X, Y, & Z ORIGIN FOR MRC DATA',IRTFLG)
        ENDIF
        IF (IRTFLG .NE. 0) RETURN
                
        HEADBUF(50) = ORIGX
        HEADBUF(51) = ORIGY
        HEADBUF(52) = ORIGZ

C       PUT IN 'MAP'
        CVAL = 'MAP '
        CALL CCPMVC(HEADBUF(53),CVAL,ISSWABT)

C       SET MACHINE STAMP
C       MACHST = 286326784    ! FOR BIG ENDIAN DATA
C       MACHST = 4369         ! FOR LITTLE ENDIAN DATA
        MACHST = 16708        ! FOR LITTLE ENDIAN DATA
        CALL CCPMVI(HEADBUF(54),MACHST,1)
 
c        write(nout,*) ' map:',cval,headbuf(53)
c        write(nout,*) ' machst:',machst,headbuf(54)

C       SET RMS (ASSUMING THIS DEFINE SAME AS SIG IN SPIDER??)
        HEADBUF(55) = DSIG

C       SET NUMBER OF LABELS
        NLABEL = 1  
        CALL CCPMVI(HEADBUF(56), NLABEL,1)

C       ZERO ALL LABELS WITH BLANKS
        CVAL = BLANK // BLANK // BLANK // BLANK
        DO I = 57,256
           CALL CCPMVC(HEADBUF(I),CVAL,ISSWABT)
        ENDDO

C       NOW GO BACK AND ADD IN ONE LABEL
        LABEL1 = 'Converted from SPIDER to MRC using SPIDER '
        INOW   = 56
        DO I = 1,44,4
           CVAL = LABEL1(I:I+3)
           INOW = INOW + 1
           CALL CCPMVC(HEADBUF(INOW),CVAL,ISSWABT)
        ENDDO
        
        IRTFLG = 0

        END





C ------------------------- CCPMVC --------------------------

C     PURPOSE:     PACK 4 CHAR INTO A INTEGER OR FLOAT

C     PARAMETERS:
C     I1ARRAY      ARRAY TO WHICH CHARS ARE TO BE COPIED       RET.
C     CIN          CHAR STRING TO BE COPIED INTO I1ARRAY       SENT
C     REVERSE      FLAG TO INVERT STRING                       SENT

      SUBROUTINE CCPMVC(I1ARRAY,CIN,REVERSE)

      CHARACTER(LEN=4) :: CIN
      INTEGER * 1      :: I1ARRAY(4)
      LOGICAL          :: REVERSE

      IF (REVERSE) THEN
         DO I = 1,4
            I1ARRAY(I) = ICHAR(CIN(5-I:5-I))
         ENDDO
      ELSE
         DO I = 1,4
            I1ARRAY(I) = ICHAR(CIN(I:I))
         ENDDO
      ENDIF

      END

@


1.21
log
@machine stamp fixed,  convert=little-ended rewrite
@
text
@d19 1
a19 1
C=* Email: spider@@wadsworth.org                                        *
@


1.20
log
@SETHEDCCP4_NEW ADDED
@
text
@d11 1
d17 1
a17 1
C=* Copyright 1985-2016  Health Research Inc.,                         *
a105 1

d206 3
a208 1
        CALL SETSTAMP(MACHST,ISSWABT)
d211 2
a212 2
c        write(nout,*) ' map:',cval,headbuf(53)
c        write(nout,*) ' machst:',machst,headbuf(54)
d466 3
a468 1
        CALL SETSTAMP(MACHST,ISSWABT)
d470 1
a470 1

a530 102
C ---------------------- SETSTAMP -----------------------------------
 
      SUBROUTINE SETSTAMP(MACHSTMP,ISSWABT)

C     PURPOSE: SETS MACHINE STAMP FOR THIS ARCHITECTURE

C     NOTE: I HAVE EXTRACTED THIS FROM THE MRC 2000 CODE AND
C           CONVERTED TO FORTRAN. BUT I MAY HAVE BOTCHED IT? al

      INTEGER * 4 :: MACHSTMP
      LOGICAL     :: ISSWABT

      INCLUDE 'CMBLOCK.INC'

c       Little-ended Intel and some MIPS
#if defined(MIPSEL) || defined(i386) || defined(i860)
#  define NATIVEIT 4
#  define NATIVEFT 4
#endif

C       AN attempt at machines using the powerPC chip.             
#if defined (SP_PPC)
#  define NATIVEIT 1
#  define NATIVEFT 1
#endif

C       Compaq alpha's running Unix.             
#ifdef __alpha
#  define NATIVEFT 4
#  define NATIVEIT 4
#endif

C        SGI Altix running GNU/Linux.             
#ifdef __ia64
#  define NATIVEFT 4
#  define NATIVEIT 4
#endif

C       Big-endian ieee includes SGI machines,       
C       HP (68k-based or RISC), RS/6000 and all        
C       Suns except obsolete i386-based ones.       

#if defined(MIPSEB) || defined(__hpux) || defined(_AIX) || defined(m68k) || defined(mc68000) || defined(sparc)
#  define NATIVEIT 1
#  define NATIVEFT 1
#endif

C       Little-endian AMD OPTERON,       
#if defined  __x86_64__ || defined __ORDER_LITTLE_ENDIAN__
#  define NATIVEIT 4
#  define NATIVEFT 4
#endif


#if defined(SP_IBMSP3) 
#  define NATIVEIT 1
#  define NATIVEFT 1
#endif


#ifndef NATIVEFT
#error "Can't determine machine number format"
#endif

      NATIVEFTT = NATIVEFT
      NATIVEITT = NATIVEIT

      IF (ISSWABT) THEN
C        RUNNING WITH NON-NATIVE BYTE-SWAPPING
         IF (NATIVEFTT == 1) THEN
            MACHSTMP = 4369
         ELSE
            MACHSTMP = 286326784
         ENDIF
      ELSE
         IF (NATIVEFTT == 1) THEN
            MACHSTMP = 286326784
         ELSE
            MACHSTMP = 4369
         ENDIF
       ENDIF
c        write(nout,*) ' MACHSTMP:',MACHSTMP


      END


C -----------------------------------------------------------

      SUBROUTINE CCPMVIT(ARR1,ARR2,N)

C     THIS ROUTINE ASSIGNS  ARR2 TO ARR1

      REAL  :: ARR1(N),ARR2(N)

      DO I = 1,N
         ARR1(I) = ARR2(I)
      ENDDO

      END

 
@


1.19
log
@ISSWAB RENAMED ISSWABT  if used as local variable
@
text
@d4 8
a11 6
C SETHEDCCP4    ISSWAB ADDED                     JUL  02 ARDEAN LEITH
C               ANGSTROMS/PIXEL                  JAN  05 ARDEAN LEITH 
C               STARTING                         FEB  06 ARDEAN LEITH 
C               MRC PROMPTS                      MAY  12 ARDEAN LEITH 
C               NSYMBYT,ISPG                     JUN  15 ARDEAN LEITH 
C               ISSWAB RENAMED ISSWABT           JAN  16 ARDEAN LEITH
d33 1
d35 2
a36 1
C            DMIN,DMAX,DMEAN,DSIG, IMODE,ISSWABT,NSYMBYT,ISPG,IRTFLG)
d73 196
d495 4
@


1.18
log
@*** empty log message ***
@
text
@d9 1
d14 1
a14 1
C=* Copyright 1985-2015  Health Research Inc.,                         *
d32 1
a32 1
C            DMIN,DMAX,DMEAN,DSIG, IMODE,ISSWAB,NSYMBYT,ISPG,IRTFLG)
d72 1
a72 1
     &                        ISSWAB,NSYMBYT,NIMG,MZ,IRTFLG)
d81 1
a81 1
        LOGICAL            :: ISSWAB
d226 1
a226 1
        CALL CCPMVC(HEADBUF(27),CVAL,ISSWAB)
d261 1
a261 1
        CALL CCPMVC(HEADBUF(53),CVAL,ISSWAB)
d264 1
a264 1
        CALL SETSTAMP(MACHST,ISSWAB)
d280 1
a280 1
           CALL CCPMVC(HEADBUF(I),CVAL,ISSWAB)
d289 1
a289 1
           CALL CCPMVC(HEADBUF(INOW),CVAL,ISSWAB)
d325 1
a325 1
      SUBROUTINE SETSTAMP(MACHSTMP,ISSWAB)
d333 1
a333 1
      LOGICAL     :: ISSWAB
d390 1
a390 1
      IF (ISSWAB) THEN
@


1.17
log
@improved stack support,  more compact queries,
@
text
@d2 1
a2 1
C *********************************************************************
d9 21
a29 2
C *********************************************************************
c
d65 2
a66 1
C *********************************************************************
d103 1
d105 20
a124 3
        WRITE(NOUT,*)' STARTING (X,Y,Z) DEFAULT VALUE:(-(NX/2)+ 1, ',
     &               '-(NY/2)+1), -(NZ/2)+1'
        WRITE(NOUT,*)' (+1 ADDED ONLY IF LENGTH IS ODD) ',
d126 4
a129 4
        
        ISTARTX = -(NX/2) + (MOD(NX,2))
        ISTARTY = -(NY/2) + (MOD(NY,2))
        ISTARTZ = -(NZ/2) + (MOD(NZ,2))
d131 4
a134 2
        CALL RDPRI3S(ISTARTX,ISTARTY,ISTARTZ,NOT_USED,
     &              'STARTING X, Y, & Z FOR MRC DATA',IRTFLG)
d186 2
a187 1
        CALL RDPRM3S(SCALEX,SCALEY,SCALEZ,NOT_USED,
d189 6
d249 1
a249 1
        CALL RDPRM3S(ORIGX,ORIGY,ORIGZ,NOT_USED,
d252 1
@


1.16
log
@#if defined  __x86_64__ || defined __ORDER_LITTLE_ENDIAN__
@
text
@d4 5
a8 4
C SETHEDCCP4                       ISSWAB ADDED    JUL  02 ARDEAN LEITH
C                              ANGSTROMS/PIXEL     JAN  05 ARDEAN LEITH 
C                              STARTING            FEB  06 ARDEAN LEITH 
C                              MRC PROMPTS         MAY  12 ARDEAN LEITH 
d11 2
a12 2
C SETHEDCCP4(HEADBUF, NSAM, NROW, NSLICE,
C            DMIN,DMAX,DMEAN,DSIG, MODE,ISSWAB,IRTFLG)
d18 2
a19 2
C       NOTE: THE STARTING POINT FOR COLUMNS,ROWS,SECTIONS
C	ARE SET TO 0 BY DEFAULT.!!!!!!!!!
d22 8
a29 7
C	NSAM...  # OF INTERVALS COLUMNS, ROWS, SECTIONS
C	IMODE    DATA STORAGE MODE (1-4)
C				0 = IMAGE		INTEGER*1
C				1 = IMAGE               INTEGER*2
C				2 = IMAGE               REALS
C				3 = FOURIER TRANSFORM   INTEGER*2
C				4 = FOURIER TRANSFORM   REALS
d31 14
a44 1
C NOTE:  SEE REDHEDCCP4 FOR DETAILS
d48 6
a53 3
	SUBROUTINE SETHEDCCP4(HEADBUF, NSAM, NROW, NSLICE,
     &                       DMIN,DMAX,DMEAN,DSIG, SCALE,IMODE,
     &                       ISSWAB,IRTFLG)
d57 11
a67 2
        REAL, DIMENSION(*) :: HEADBUF 

d70 8
a77 2
        CHARACTER(LEN=1)   :: NULL
	LOGICAL            :: ISSWAB
d79 1
a79 7
        NULL = CHAR(1)
 
c	NOTE: COPY IMAGE DATA IN REAL*4 FORMAT.	
	
        CALL CCPMVI(HEADBUF(1),NSAM,1)
        CALL CCPMVI(HEADBUF(2),NROW,1)
        CALL CCPMVI(HEADBUF(3),NSLICE,1)
d83 9
a91 9
 	WRITE(NOUT,*)' '
 	WRITE(NOUT,*)' STARTING (X,Y,Z) DEFAULT VALUE:(-(NSAM/2)+ 1, ',
     &               '-(NROW/2)+1), -(NSLICE/2)+1'
 	WRITE(NOUT,*)'  (+1 ADDED ONLY IF LENGTH IS ODD)'
	WRITE(NOUT,*)' USE <CR> TO KEEP DEFAULT VALUE'
	
        ISTARTX = -(NSAM/2)   + (MOD(NSAM,2))
        ISTARTY = -(NROW/2)   + (MOD(NROW,2))
        ISTARTZ = -(NSLICE/2) + (MOD(NSLICE,2))
d93 1
a93 1
	CALL RDPRI3S(ISTARTX,ISTARTY,ISTARTZ,NOT_USED,
d99 36
a134 4
C       GRID SAMPLING ON X, Y, Z (MX..) SAME AS NSAM, NROW, NSLICE
        CALL CCPMVI(HEADBUF(8), NSAM,1)
        CALL CCPMVI(HEADBUF(9), NROW,1)
        CALL CCPMVI(HEADBUF(10),NSLICE,1)
d137 1
a137 1
        IF (SCALE .NE. 0) THEN
d139 1
a139 4
     &                   ' LOCATION=21): ',SCALE
           SCALEX = SCALE
           SCALEY = SCALE
           SCALEZ = SCALE
d146 1
a146 1
	CALL RDPRM3S(SCALEX,SCALEY,SCALEZ,NOT_USED,
d148 3
a150 3
        HEADBUF(11) = SCALEX * NSAM
        HEADBUF(12) = SCALEY * NROW
        HEADBUF(13) = SCALEZ * NSLICE
d168 2
a169 4
        ISPG   = 1
        NSYMBT = 0
        CALL CCPMVI(HEADBUF(23), ISPG,1)
        CALL CCPMVI(HEADBUF(24), NSYMBT,1)
d176 30
a205 14
C	ORIGIN ON X,Y & Z AXIS 
        ORIGX = (NSAM/2)   + (MOD(NSAM,2))
        ORIGY = (NROW/2)   + (MOD(NROW,2))
        ORIGZ = (NSLICE/2) + (MOD(NSLICE,2))
 
 	WRITE(NOUT,*)' '
 	WRITE(NOUT,*)' ORIGIN (X,Y,Z) DEFAULT VALUE:((NSAM/2)+ 1, ',
     &               '(NROW/2)+1),  (NSLICE/2)+1'
 	WRITE(NOUT,*)'  (+1 ADDED ONLY IF AXIS LENGTH IS ODD)'
	WRITE(NOUT,*)' USE <CR> TO KEEP DEFAULT VALUE'
	
	CALL RDPRM3S(ORIGX,ORIGY,ORIGZ,NOT_USED,
     &              'X, Y, & Z ORIGIN FOR MRC DATA',IRTFLG)
	
d221 1
a221 1
C       SET RMS (ASSUMING THIS SAME AS SIG IN SPIDER???)
d228 2
a229 2
C       ZERO ALL LABELS WITH NULLS
        CVAL = NULL // NULL // NULL // NULL
d235 1
a235 1
        LABEL1 = 'CONVERTED FROM SPIDER TO MRC USING SPIDER  '
d242 2
a243 2
	
	IRTFLG = 0
a244 1
	RETURN
d258 3
a260 3
      CHARACTER(LEN=4) ::   CIN
      INTEGER * 1           I1ARRAY(4)
      LOGICAL          ::   REVERSE
a271 1
      RETURN
d278 1
a278 1
C  PURPOSE: SETS MACHINE STAMP FOR THIS ARCHITECTURE
d280 2
a281 2
C  NOTE: I HAVE EXTRACTED THIS FROM THE MRC 2000 CODE AND
C        CONVERTED TO FORTRAN. BUT I MAY HAVE BOTCHED IT? al
d283 2
a284 2
      INTEGER * 4 MACHSTMP
      LOGICAL :: ISSWAB
d286 1
a286 1
        INCLUDE 'CMBLOCK.INC'
d343 1
a343 1
         IF (NATIVEFTT .EQ. 1) THEN
d349 1
a349 1
         IF (NATIVEFTT .EQ. 1) THEN
d367 1
a367 1
      REAL  ARR1(N),ARR2(N)
a372 1
      RETURN
@


1.15
log
@MRC PROMPTS
@
text
@d254 1
a254 1
#if defined  __x86_64__
d264 1
@


1.14
log
@SP_PPC
@
text
@d4 1
a4 1
C SETHEDCCP4                       ISSWAB ADDED     JUL 02 ARDEAN LEITH
d7 1
d67 1
a67 1
     &              'ENTER STARTING X, Y, & Z FOR CCP4 DATA',IRTFLG)
d134 1
a134 1
     &              'ENTER X, Y, & Z ORIGIN FOR CCP4 DATA',IRTFLG)
d165 1
a165 1
        LABEL1 = 'CONVERTED FROM SPIDER TO CCP4 USING SPIDER  '
@


1.13
log
@*** empty log message ***
@
text
@d226 1
a226 1
#if defined (powerpc)
@


1.12
log
@scale
@
text
@d6 1
d55 15
a69 3
        CALL CCPMVI(HEADBUF(5),0,1)
        CALL CCPMVI(HEADBUF(6),0,1)
        CALL CCPMVI(HEADBUF(7),0,1)
@


1.11
log
@amd64
@
text
@d4 2
a5 2
C SETHEDCCP4                       ISSWAB ADDED JULY 02 ARDEAN LEITH

d32 1
a32 1
     &                       DMIN,DMAX,DMEAN,DSIG, IMODE,
d63 18
a80 4
C       CELL AXES (CELLAX..) SAME AS NSAM, NROW, NSLICE
        HEADBUF(11) = NSAM 
        HEADBUF(12) = NROW
        HEADBUF(13) = NSLICE
@


1.10
log
@#error
@
text
@d225 6
@


1.9
log
@altix
@
text
@d232 1
a232 1
  #error "Can't determine machine number format"
@


1.8
log
@*** empty log message ***
@
text
@d210 6
d224 1
@


1.7
log
@*** empty log message ***
@
text
@d40 1
a40 1
        CHARACTER(LEN=4)   :: NULLS
d42 1
a42 4
	LOGICAL            :: BIGENDARCH,BIGENDED,ISSWAB,FLIP
        INTEGER            :: MACHST
        REAL               :: FMACHST
        EQUIVALENCE (FMACHST,MACHST)
d54 3
a56 7
        NXSTART = 0
        NYSTART = 0
        NZSTART = 0

        CALL CCPMVI(HEADBUF( 5),NXSTART,  1)
        CALL CCPMVI(HEADBUF( 6),NYSTART,  1)
        CALL CCPMVI(HEADBUF( 7),NZSTART,  1)
d74 3
a76 3
        CALL CCPMVI(HEADBUF(17), 1,1)
        CALL CCPMVI(HEADBUF(18), 2,1)
        CALL CCPMVI(HEADBUF(19), 3,1)
d86 2
a87 2
        CALL CCPMVI(HEADBUF(23), ISPG,   1)
        CALL CCPMVI(HEADBUF(24), NSYMBT, 1)
d91 1
a91 1
           CALL CCPMVI(0, HEADBUF(I), 1)
d113 2
a114 1
        CALL CTOI1(HEADBUF(53),'MAP ',4)
d118 1
a118 2
c          write(6,*) ' '
c          write(6,*) '!!!!!!!!!!!!!!!!!!! sethed arch machst:',machst
d120 2
a121 1
        HEADBUF(54) = FMACHST
a122 2
C        CALL CCPMVI(MACHST, HEADBUF(54), 1)

d128 1
a128 1
        CALL CCPMVI(NLABEL,  HEADBUF(56), 1)
d130 5
a134 4
C       ZERO ALL LABELS
        NULLS = NULL // NULL // NULL // NULL
        NCHAR  = (256 - 57 + 1)  
        CALL CTOI1(HEADBUF(57),LABEL1,NCHAR)
d138 6
a143 2
        NCHAR  = 44
        CALL CTOI1(HEADBUF(57),LABEL1,NCHAR)
d150 1
a150 3
C -----------------------------------------------------------

C CTOI1(I1ARRAY,CIN,NB)
d152 1
a152 4
C PARAMETERS:
C      I1ARRAY      ARRAY TO WHICH CHARS ARE TO BE COPIED
C      CIN          CHAR STRING TO BE COPIED INTO ARR1
C      NB           THE NUMBER OF BYTES TO BE COPIED
d154 20
a173 4
      SUBROUTINE CTOI1(I1ARRAY,CIN,NB)

      CHARACTER(LEN=*) ::   CIN
      INTEGER * 1           I1ARRAY(*)
a174 4
      DO I = 1,NB
         I1ARRAY(I) = ICHAR(CIN(I:I))
      ENDDO

d180 1
a180 1
        SUBROUTINE SETSTAMP(MTSTRING,ISSWAB)
d183 1
a183 1
C
d186 2
a187 2
C        
      INTEGER * 1 MTSTRING(4)
d190 2
d234 7
a240 2
            NATIVEFTT = 4
            NATIVEITT = 4
d242 1
a242 2
            NATIVEFTT = 1
            NATIVEITT = 1
d244 2
a245 1
      ENDIF
a246 4
      MTSTRING(1) = IOR(NATIVEFTT,ISHFT(NATIVEFTT,4))
      MTSTRING(2) = IOR(1,ISHFT(NATIVEITT,4))
      MTSTRING(3) = 0
      MTSTRING(4) = 0
d251 14
@


1.6
log
@*** empty log message ***
@
text
@d4 2
a5 2
C SETHEDCCP4
C
d9 1
a9 1
C            DMIN,DMAX,DMEAN,DSIG, MODE,IRTFLG)
d32 2
a33 1
     &                       DMIN,DMAX,DMEAN,DSIG, IMODE,IRTFLG)
d42 1
a42 1
	LOGICAL            :: BIGENDARCH,BIGENDED
a47 3

C       GET CURRENT ARCHITECTURE ENDED-NESS
        BIGENDARCH = BIGENDED(0)
d123 1
a123 1
        CALL SETSTAMP(MACHST)
d176 1
a176 1
        SUBROUTINE SETSTAMP(MTSTRING)
d183 3
d222 13
a234 1
      INTEGER * 1 MTSTRING(4)
d236 2
a237 2
      MTSTRING(1) = IOR(NATIVEFT,ISHFT(NATIVEFT,4))
      MTSTRING(2) = IOR(1,ISHFT(NATIVEIT,4))
d242 1
@


1.5
log
@nloop,iloop_removed
@
text
@d212 5
@


1.4
log
@removed debug output
@
text
@d114 1
a114 1
	CALL RDPRM3S(ORIGX,ORIGY,ORIGZ,NLOOP,ILOOP,
@


1.3
log
@*** empty log message ***
@
text
@d126 2
a127 2
          write(6,*) ' '
          write(6,*) '!!!!!!!!!!!!!!!!!!! sethed arch machst:',machst
@


1.2
log
@*** empty log message ***
@
text
@d32 1
a32 1
     &                       DMIN,DMAX,DMEAN,DSIG, MODE,IRTFLG)
d42 3
d126 2
a127 1
        CALL CCPMVI(MACHST,  HEADBUF(54), 1)
d129 4
d134 1
a134 1
        HEADBUF(54) = DSIG
@


1.1
log
@Initial revision
@
text
@d122 1
a122 2
ccc           CALL MACSTAMP(MACHST)
               machst = 0
d167 2
d170 46
@
