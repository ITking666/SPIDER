head	1.22;
access;
symbols
	pre_getangas:1.21
	GPL2010:1.21
	pre_GPL2010:1.20
	pre_var_equation:1.20
	pre_fftwrings:1.17
	pre_opfiles:1.17
	src:1.17
	best-code:1.17
	x-named-regs:1.17
	x:1.17
	v13-00:1.17
	pre_GPL:1.15
	prec_CA:1.15
	noindx:1.15
	Bproc:1.15
	oct21:1.9
	last77:1.9;
locks; strict;
comment	@c @;


1.22
date	2013.01.09.17.56.11;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2010.06.24.13.26.26;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2008.07.23.17.18.52;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2008.06.09.13.42.27;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2008.06.04.16.15.19;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.17.20.24.37;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.17.18.16.39;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2000.09.11.18.48.35;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2000.08.17.16.48.03;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2000.08.10.15.32.44;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2000.07.26.20.25.58;	author bimal;	state Exp;
branches;
next	1.11;

1.11
date	2000.01.18.20.56.30;	author bimal;	state Exp;
branches;
next	1.10;

1.10
date	2000.01.18.20.44.55;	author bimal;	state Exp;
branches;
next	1.9;

1.9
date	99.03.01.15.02.12;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	98.02.19.15.55.07;	author pawel;	state Exp;
branches;
next	1.7;

1.7
date	97.10.10.17.51.00;	author pawel;	state Exp;
branches;
next	1.6;

1.6
date	97.01.16.16.55.38;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	97.01.16.14.21.44;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	96.04.09.19.53.11;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	96.01.16.16.12.32;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.09.28.18.57.13;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.50.58;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.22
log
@angle bug rewrite
@
text
@C++*********************************************************************
C
C ORMD_P.F
C             ANGLE BUG                         JAN 2013 ARDEAN LEITH                      
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2013  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  ORMD_P(NX,NY, NRING,LCIRC,MAXRAYS,NUMR,X,NPEAK,MODE,LUNEXP,LUNREF)
C
C  PARAMETERS:   NX,NY                  SIZE                    INPUT
C                LUNEXP,LUNREF,LUNDOC   IO UNITS                INPUT
C
C  NOTE:  THE SUB-PIXEL INTERPOLATION IS DONE DIFFERENTLY FROM
C         'OR SH' THAT IS REASON FOR SMALL VARIANCE IN POSITION
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE ORMD_P(NX,NY, 
     &                    NRING,LCIRC,MAXRAYS,NUMR,X,
     &                    NPEAK,MODE,FFTW_PLANS,
     &                    LUNEXP,LUNREF,LUNDOC)
 
        INCLUDE 'CMBLOCK.INC'

        INTEGER                  :: NX,NY
        INTEGER                  :: NRING,LCIRC,MAXRAYS
        INTEGER                  :: NUMR(3,NRING)
        REAL                     :: X(NX,NY)
        INTEGER                  :: NPEAK
	CHARACTER(LEN=1)         :: MODE 
        INTEGER                  :: LUNEXP,LUNREF,LUNDOC

        REAL, ALLOCATABLE        :: CIRCEXP(:),CIRCREF(:) 
        REAL                     :: Q(MAXRAYS+2)
        REAL                     :: PEAK(2,NPEAK)
        DOUBLE PRECISION         :: T7(-3:3)
        REAL                     :: WRE(NRING)
        REAL                     :: WRR(NRING)
        DOUBLE PRECISION         :: DQMAX
        REAL                     :: QMAX
        REAL                     :: POS_MAX
        INTEGER                  :: MAXL

        INTEGER, PARAMETER       :: NDLI       = 2
        REAL                     :: DLIST(NDLI)
        LOGICAL, PARAMETER       :: USE_OMP    = .FALSE.
        LOGICAL, PARAMETER       :: USE_MIR    = .FALSE.

        ALLOCATE (CIRCEXP(LCIRC), CIRCREF(LCIRC), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'ORMD_P, CIRC',2*LCIRC)
           RETURN
        ENDIF

C       CALCULATE DIMENSIONS FOR NORMALIZING IN APRINGS_ONE
	CNS2 = NX/2+1     ! IMAGE CENTER
	CNR2 = NY/2+1     ! IMAGE CENTER

C       LOAD REF. IMAGE DATA ------------------------------
        CALL REDVOL(LUNREF,NX,NY,1,1,X,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999
        CLOSE(LUNREF)

C       EXTRACT REF. IMAGE RINGS, NORMALIZE & FFT THEM
        WRR(1) = 0.0     ! ONLY WEIGHT EXP IMAGES
        CALL APRINGS_ONE_NEW(NX,NY, CNS2,CNR2, X, USE_OMP,
     &                       MODE,NUMR,NRING,LCIRC, WRR,FFTW_PLANS,
     &                       CIRCREF,IRTFLG)

C       LOAD EXP. IMAGE DATA ----------------------------
        CALL REDVOL(LUNEXP,NX,NY,1,1,X,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999
        CLOSE(LUNEXP)

C       FIND  WEIGHTS FOR TRANSFORMED CIRC RINGS 
        CALL RINGWE_NEW(WRE,NUMR,NRING,MAXRAYS)

C       EXTRACT EXP. IMAGE RINGS, NORMALIZE & FFT THEM
        CALL APRINGS_ONE_NEW(NX,NY, CNS2,CNR2, X, USE_OMP,
     &                       MODE,NUMR,NRING,LCIRC, WRE,FFTW_PLANS,
     &                       CIRCEXP,IRTFLG)
    
        CALL CROSRNG_NEW(CIRCREF,CIRCEXP,LCIRC, 
     &                NRING,MAXRAYS,NUMR,
     &                FFTW_PLANS, USE_MIR,
     &                Q,  QMAX,POS_MAX,MAXL)

        IF (NPEAK <= 1)  THEN

C          NORMALIZE PEAK 
           QMAX = 2.0 * Q(MAXL) / MAXRAYS/ MAXRAYS / NRING 

C          CONVERT PEAK LOCATION TO ANGLE
           RANGNEW = ANG_N(POS_MAX,MODE,MAXRAYS)

           WRITE(NOUT,2799)RANGNEW,QMAX    
2799       FORMAT('  Angle: ',F10.4,'    Peak Height: ',G12.5)
          
C          ONE PEAK, FIRST REGISTER IS ANGLE, SECOND IS PEAK VALUE
           CALL REG_SET_NSEL(1,2,RANGNEW,QMAX, 0.0,0.0,0.0,IRTFLG)

        ELSE
C          FIND SPECIFIED NUMBER OF PEAKS
           DO K2=1,NPEAK
              PEAK(1,K2) = -HUGE(PEAK)
              PEAK(2,K2) = -1.0
           ENDDO

           DO J=1,MAXRAYS
              J2 = MOD(J+MAXRAYS-1,MAXRAYS)+1
              J1 = MOD(J+MAXRAYS-2,MAXRAYS)+1
              J3 = MOD(J+MAXRAYS,  MAXRAYS)+1

              IF (Q(J2) > Q(J1) .AND. 
     &            Q(J2) > Q(J3)) THEN
C                LOCAL PEAK HERE

                 DO K2=1,NPEAK
                    IF (Q(J2) > PEAK(1,K2))  THEN
                       IF (NPEAK > 1)  THEN
C                         MOVE THIS PEAK IN LIST
                          DO K3=NPEAK,K2+1,-1
                             PEAK(1,K3) = PEAK(1,K3-1)
                             PEAK(2,K3) = PEAK(2,K3-1)
                          ENDDO
                       ENDIF

                       PEAK(1,K2) = Q(J2)
                       PEAK(2,K2) = J
                       EXIT
                    ENDIF
                 ENDDO
              ENDIF
           ENDDO

           !write(6,*) (peak(2,i),i=1,npeak)

C          CONVERT TO ANGLES AND INTERPOLATE
           DO K2=1,NPEAK
              JTOT = PEAK(2,K2)
              NPT  = K2 
              IF (JTOT == -1) EXIT

              DO K3=-3,3
                 J      = MOD(JTOT+K3+MAXRAYS-1,MAXRAYS) + 1
                 T7(K3) = Q(J)
              ENDDO

C             SUB-PIXEL INTERPOLATION
              CALL PRB1D(T7,7,POS)

              QMAX = 2.0 * PEAK(1,K2) / MAXRAYS/ MAXRAYS / NRING ! HEIGHT
              RANG = PEAK(2,K2) + POS                    ! LOCATION

C             CONVERT PEAK LOCATION TO ANGLE
              RANGNEW = ANG_N(RANG,MODE,MAXRAYS)

              DLIST(1) = RANGNEW     ! ANGLE
              DLIST(2) = QMAX        ! HEIGHT
              CALL LUNDOCWRTDAT(LUNDOC,K2,DLIST,NDLI,IRTFLG)

              !write(6,90) j,pos,rang,peak(2,k2)
  90          format(   ' j,pos,rang,angle: ', i5, f8.2, f8.2, f8.2)

              WRITE(NOUT,2701) PEAK(2,K2),QMAX
2701          FORMAT('  Angle: ',F10.4,'    Peak Height: ',G12.5)
           ENDDO

C          MULTIPLE PEAKS, FIRST REGISTER IS THE NUMBER OF PEAKS SAVED
           CALL REG_SET_NSEL(1,1,FLOAT(NPT), 0.0,0.0,0.0,0.0,IRTFLG)
        ENDIF

9999    IF (ALLOCATED(CIRCEXP)) DEALLOCATE (CIRCEXP)
	IF (ALLOCATED(CIRCREF)) DEALLOCATE (CIRCREF)
       
        END

@


1.21
log
@GPL_2010
@
text
@d4 1
a4 1
C
d9 1
a9 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d27 1
a27 5
C  ORMD_P(NSAM,NROW,LSAM,LROW,
C         NRING,LCIRC,MAXRIN,NUMR,X,NPEAK,MODE,LUNEXP,LUNREF)
C
C  PARAMETERS:   NSAM,NROW     USED SIZE
C                LSAM,LROW     ACTUAL SIZE
d29 2
a30 1
C                LUNEXP,LUNREF,LUNDOC   IO UNITS                  INPUT
d32 2
d38 4
a41 3
        SUBROUTINE ORMD_P(NSAM,NROW, LSAM,LROW,
     &              NRING,LCIRC,MAXRIN,NUMR,X,NPEAK,MODE,FFTW_PLANS,
     &              LUNEXP,LUNREF,LUNDOC)
d45 23
a67 17
        INTEGER, PARAMETER              :: NDLI=2
        REAL                            :: DLIST(NDLI)

        REAL                            :: X(NSAM,NROW),BUFIN(LSAM)
        REAL, ALLOCATABLE, DIMENSION(:) :: CIRC,CIRCREF 
        INTEGER                         :: NUMR(3,NRING)
        REAL                            :: TEMP(MAXRIN+2)
        REAL                            :: PEAK(2,NPEAK)
        DOUBLE PRECISION                :: T7(-3:3)
	CHARACTER(LEN=1)                :: MODE 
        REAL                            :: WR(NRING)
#ifdef SP_LIBFFT
C       TT FOR SGI FFT USE
        REAL, ALLOCATABLE, DIMENSION(:) :: TT
#endif
        DOUBLE PRECISION                :: QMAX
        REAL                            :: POS_MAX
d69 1
a69 6
        JACUP = 0

C       FIND  WEIGHTS FOR TRANSFORMED CIRC RINGS 
        CALL RINGWE_NEW(WR,NUMR,NRING,MAXRIN)

        ALLOCATE (CIRC(LCIRC), CIRCREF(LCIRC), STAT=IRTFLG)
a74 19
C       FIND CENTRAL WINDOW SIZE
        LQ  = LROW/2+1
        LR1 = (NROW-1)/2
        LR2 = LQ+LR1
        LR1 = LQ-LR1
        LQ  = LSAM/2+1
        LS1 = (NSAM-1)/2
        LS2 = LQ+LS1
        LS1 = LQ-LS1

C       READ IN CENTRAL WINDOW FROM THE WHOLE EXP. IMAGE
        DO K2=LR1,LR2
           CALL REDLIN(LUNEXP,BUFIN,LSAM,K2)
           DO K3=LS1,LS2
              X(K3-LS1+1,K2-LR1+1) = BUFIN(K3)
           ENDDO
        ENDDO
        CLOSE(LUNEXP)

d76 2
a77 2
	CNS2 = NSAM/2+1
	CNR2 = NROW/2+1
d79 3
a81 12
C       EXTRACT EXP. IMAGE RINGS, NORMALIZE & FFT THEM
        CALL APRINGS_ONE_NEW(NSAM,NROW, CNS2,CNR2, X, .FALSE.,
     &                       MODE,NUMR,NRING,LCIRC, WR,FFTW_PLANS,
     &                       CIRC,IRTFLG)
    
C       READ IN CENTRAL WINDOW FROM THE WHOLE REFERENCE IMAGE
        DO K2=LR1,LR2
           CALL REDLIN(LUNREF,BUFIN,LSAM,K2)
           DO K3=LS1,LS2
              X(K3-LS1+1,K2-LR1+1) = BUFIN(K3)
           ENDDO
        ENDDO
d85 3
a87 3
        WR(1) = 0.0     ! ONLY WEIGHT ONCE
        CALL APRINGS_ONE_NEW(NSAM,NROW, CNS2,CNR2, X, .FALSE.,
     &                       MODE,NUMR,NRING,LCIRC, WR,FFTW_PLANS,
d90 4
a93 10
#ifdef SP_LIBFFT
C       CREATE TT FOR SGI FFT USE
        LENTT = NUMR(3,NRING) + 15
        ALLOCATE (TT(LENTT), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'ORMD_P, TT ',LENTT)
           RETURN
        ENDIF
        CALL DZFFT1DUI(LENTT-15,TT)
#endif
d95 2
a96 2
        CALL CROSRNG_NEW(CIRC,CIRCREF,LCIRC, NRING,MAXRIN,NUMR,
     &                TEMP,QMAX,POS_MAX, TT,.FALSE., FFTW_PLANS,MODE)
d98 21
a118 9

        IF (NPEAK .LE. 1)  THEN

           RANGNEW = ANGMOR_NEW(POS_MAX,MODE,MAXRIN)
           FQMAX   = 2.0 * QMAX / MAXRIN / NRING

           WRITE(NOUT,2700)RANGNEW,FQMAX
2700       FORMAT('  Angle = ',F10.4,'    Peak Height = ',G12.5)
 
d120 1
a120 1
           CALL REG_SET_NSEL(1,2,RANGNEW,FQMAX, 0.0,0.0,0.0,IRTFLG)
d129 9
a137 6
           DO J=1,MAXRIN
              J2 = MOD(J+MAXRIN-1,MAXRIN)+1
              J1 = MOD(J+MAXRIN-2,MAXRIN)+1
              J3 = MOD(J+MAXRIN,MAXRIN)+1
              IF (TEMP(J2) .GT. TEMP(J1) .AND. 
     &            TEMP(J2) .GT. TEMP(J3)) THEN
d139 2
a140 2
                    IF (TEMP(J2) .GT. PEAK(1,K2))  THEN
                       IF (NPEAK .GT. 1)  THEN
d147 2
a148 1
                       PEAK(1,K2) = TEMP(J2)
d156 3
a158 1
C          CONVERT TO ANGLES AND DO THE INTERPOLATION
d162 2
a163 1
              IF (JTOT .EQ. -1) EXIT
d165 2
a166 2
                 J      = MOD(JTOT+K3+MAXRIN-1,MAXRIN) + 1
                 T7(K3) = TEMP(J)
d172 2
a173 2
              QMAX     = 2.0 * PEAK(1,K2) / MAXRIN/ MAXRIN / NRING ! HEIGHT
              RANG     = PEAK(2,K2) + POS                    ! LOCATION
d176 5
a180 1
              PEAK(2,K2) = ANGMOR_NEW(RANG,MODE,MAXRIN)
a184 4
              DLIST(1) = PEAK(2,K2)     ! ANGLE
              DLIST(2) = QMAX                ! HEIGHT
              CALL LUNDOCWRTDAT(LUNDOC,K2,DLIST,NDLI,IRTFLG)

d186 1
a186 1
2701          FORMAT('  Angle = ',F10.4,'    Peak Height = ',G12.5)
d193 1
a193 1
9999    IF (ALLOCATED(CIRC))    DEALLOCATE (CIRC)
a196 21

C       -------------------- ANGMOR_NEW ------------------------------

        REAL FUNCTION ANGMOR_NEW(RKK,MODE,MAXRIN)

        REAL, INTENT(IN)             :: RKK
        CHARACTER(LEN=1), INTENT(IN) :: MODE
        INTEGER, INTENT(IN)          :: MAXRIN

         IF (MODE .EQ. 'H')  THEN
            ANGMOR_NEW = (RKK - 1.0) / MAXRIN * 180.0
            IF (ANGMOR_NEW .GT. 0.0) ANGMOR_NEW = 360.0 - ANGMOR_NEW
            ANGMOR_NEW = MOD(ANGMOR_NEW + 180.0,180.0)

         ELSEIF (MODE .EQ. 'F')  THEN
            ANGMOR_NEW = (RKK - 1.0) / MAXRIN * 360.0
            IF (ANGMOR_NEW .GT. 0.0) ANGMOR_NEW = 360.0 - ANGMOR_NEW
            ANGMOR_NEW = MOD(ANGMOR_NEW+360.0, 360.0)
         ENDIF

         END
@


1.20
log
@ALLOCATE (TT(LENTT)
@
text
@a5 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d7 5
a11 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d13 1
a13 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d18 1
a18 1
C=* This program is distributed in the hope that it will be useful,    *
d20 1
a20 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a21 1
C=*                                                                    *
d23 1
a23 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.19
log
@npeak doc file bug
@
text
@d60 4
a63 1
        DOUBLE PRECISION                :: TT(LENTT)
d124 5
@


1.18
log
@rewrite for FFTW aprings
@
text
@d128 1
a128 1
        IF (FCHAR(5:5) .NE. 'M')  THEN
@


1.17
log
@GPL License fixed
@
text
@d7 1
a7 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d32 6
a37 1
C         NRING,LCIRC,MAXRIN,NUMR,X,NPEAK,MODE,INPIC,INREF)
a38 1
C IMAGE_PROCESSING_ROUTINE
a39 1
C        1         2         3         4         5         6         7
d43 3
a45 2
        SUBROUTINE  ORMD_P(NSAM,NROW,LSAM,LROW,
     &              NRING,LCIRC,MAXRIN,NUMR,X,NPEAK,MODE,INPIC,INREF)
d49 2
a50 2
        PARAMETER        (NDLI=3)
        DIMENSION        DLIST(NDLI)
d52 11
a62 6
        DIMENSION        X(NSAM,NROW),BUFIN(LSAM)
        REAL, ALLOCATABLE, DIMENSION(:) :: CIRC,CIROLD 
        INTEGER          NUMR(3,NRING)
        DOUBLE PRECISION TEMP(MAXRIN,2),PEAK(2,NPEAK)
        DOUBLE PRECISION TOTMIN,EAV,TOTMIR,T7(-3:3)
        CHARACTER*1      MODE
d64 1
a64 1
        DATA  NDOC/56/
d66 2
a67 1
        JACUP=0
d69 1
a69 1
        ALLOCATE (CIRC(LCIRC), STAT=IRTFLG)
d71 1
a71 1
           CALL ERRT(46,'ORMD_P, CIRC',IER)
d75 18
a92 5
        ALLOCATE (CIROLD(LCIRC), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           CALL ERRT(46,'ORMD_P, CIROLD',IER)
           RETURN
        ENDIF
d94 14
a107 13
        LQ=LROW/2+1
        LR1=(NROW-1)/2
        LR2=LQ+LR1
        LR1=LQ-LR1
        LQ=LSAM/2+1
        LS1=(NSAM-1)/2
        LS2=LQ+LS1
        LS1=LQ-LS1

        DO    K2=LR1,LR2
           CALL  REDLIN(INPIC,BUFIN,LSAM,K2)
           DO    K3=LS1,LS2
              X(K3-LS1+1,K2-LR1+1)=BUFIN(K3)
d110 13
a122 1
        CLOSE(INPIC)
d124 20
a143 11
C       Normalize under the mask
        CALL NORMAS(X,-NSAM/2,NSAM/2,-NROW/2,NROW/2,
     &              NUMR,NUMR(1,NRING))

        CALL  ALRQ(X,NSAM,NROW,NUMR,CIRC,LCIRC,NRING,MODE,K3)
        CALL  FOURING(CIRC,LCIRC,NUMR,NRING,EAV,MODE)

        DO    K2=LR1,LR2
           CALL  REDLIN(INREF,BUFIN,LSAM,K2)
           DO    K3=LS1,LS2
              X(K3-LS1+1,K2-LR1+1)=BUFIN(K3)
a144 2
        ENDDO
        CLOSE(INREF)
d146 18
a163 27
C       Normalize under the mask
        CALL NORMAS(X,-NSAM/2,NSAM/2,-NROW/2,NROW/2,
     &              NUMR,NUMR(1,NRING))

        CALL  ALRQ(X,NSAM,NROW,NUMR,CIROLD,LCIRC,NRING,MODE,K3)
        CALL  FOURING(CIROLD,LCIRC,NUMR,NRING,EAV,MODE)

        CALL  CROSRNG
     &   (CIRC,CIROLD,LCIRC,NRING,TEMP,TEMP(1,2),
     &   MAXRIN,JACUP,NUMR,TOTMIN,TOT,MODE)
C       Find specified number of peaks
        DO  K2=1,NPEAK
           PEAK(1,K2)=-1.0D20
           PEAK(2,K2)=-1.0
        ENDDO
        DO    J=1,MAXRIN
           J2=MOD(J+MAXRIN-1,MAXRIN)+1
           J1=MOD(J+MAXRIN-2,MAXRIN)+1
           J3=MOD(J+MAXRIN,MAXRIN)+1
        IF(TEMP(J2,2).GT.TEMP(J1,2) .AND. TEMP(J2,2).GT.TEMP(J3,2)) THEN
              DO  K2=1,NPEAK
                 IF(TEMP(J2,2).GT.PEAK(1,K2))  THEN
                    IF(NPEAK.GT.1)  THEN
                       DO  K3=NPEAK,K2+1,-1
                          PEAK(1,K3)=PEAK(1,K3-1)
                          PEAK(2,K3)=PEAK(2,K3-1)
                       ENDDO
d165 12
a176 4
                    PEAK(1,K2)=TEMP(J2,2)
                    PEAK(2,K2)=J
                    GOTO 1209
                 ENDIF
d178 19
a196 11
1209            CONTINUE
        ENDIF
        ENDDO
C       Convert to angles and do the interpolation
        DO  K2=1,NPEAK
           JTOT=PEAK(2,K2)
           NPT=K2-1
           IF(JTOT.EQ.-1)  GOTO  1409
           DO  K3=-3,3
              J=MOD(JTOT+K3+MAXRIN-1,MAXRIN)+1
              T7(K3)=TEMP(J,2)
a197 14
           CALL  PRB1D(T7,7,POS)
           PEAK(1,K2)=PEAK(1,K2)/MAXRIN/NRING
           RANG=PEAK(2,K2)+POS
           PEAK(2,K2)=ANGMOR(RANG,MODE)
           IF(FCHAR(5:5).EQ.'M')  THEN
              DLIST(1)=K2
              DLIST(2)=PEAK(2,K2)
              DLIST(3)=PEAK(1,K2)
              CALL  SAVD(NDOC,DLIST,NDLI,IRTFLG)
           ENDIF
           WRITE(NOUT,2700)  PEAK(2,K2),PEAK(1,K2)
2700       FORMAT('    Angle = ',F10.4,'    Peak = ',G12.5)
        ENDDO
1409    CONTINUE
d199 1
a199 6
        IF(FCHAR(5:5).EQ.'M')  THEN
C          MULTIPLE PEAKS
           CLOSE(NDOC)
           CALL  SAVDC
C          FIRST REGISTER IS THE NUMBER OF PEAKS SAVED
C          IF (NSEL(1).NE.0) PARAM(NSEL(1))=NPT
d201 6
a206 7
        ELSE
C          ONE PEAK
C          FIRST REGISTER IS THE ANGLE, SECOND THE PEAK VALUE
C          IF (NSEL(1).NE.0) PARAM(NSEL(1))=PEAK(2,1)
C          IF (NSEL(2).NE.0) PARAM(NSEL(2))=PEAK(1,1)
           FPEAK1 = PEAK(2,1)
           FPEAK2 = PEAK(1,1)
d208 1
a208 2
           CALL REG_SET_NSEL(1,2,FPEAK1,FPEAK2,0.0,0.0,0.0,IRTFLG)
        ENDIF
d210 1
d212 14
a225 2
	DEALLOCATE (CIRC)
	DEALLOCATE (CIROLD)
d227 1
a227 1
        END
@


1.16
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a5 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH                              *
a29 1
C **************************************************************************
a38 1
C--************************************************************************
@


1.15
log
@double in reg_set call fixed
@
text
@d1 1
d6 1
d8 1
d10 24
d40 1
d50 1
@


1.14
log
@reg_set_nsel params changed
.reg_set_nsel params changed
@
text
@d28 5
a32 4
        PARAMETER (NDLI=3)
        DIMENSION DLIST(NDLI)
        INTEGER    MAXRIN
        DIMENSION  X(NSAM,NROW),BUFIN(LSAM)
d34 1
a34 1
        INTEGER    NUMR(3,NRING)
d37 1
a37 1
        CHARACTER*1  MODE
d40 1
d146 1
d159 4
a162 1
           CALL REG_SET_NSEL(1,2,PEAK(2,1),PEAK(1,1),0.0,0.0,0.0,IRTFLG)
@


1.13
log
@used reg_set_nsel
@
text
@d150 1
a150 1
           CALL REG_SET_NSEL(1,FLOAT(NPT), 0.0,0.0,0.0,0.0,IRTFLG)
d156 1
a156 1
           CALL REG_SET_NSEL(1,PEAK(2,1),PEAK(1,1),0.0,0.0,0.0,IRTFLG)
@


1.12
log
@allocate circ and cirold
@
text
@d3 1
a3 1
C $$ ORMD_P.FOR
d15 2
a17 1
C
d23 1
a23 3
C
C $$ ORMD_P.FOR
C
d25 1
a25 1
     &   NRING,LCIRC,MAXRIN,NUMR,X,NPEAK,MODE,INPIC,INREF)
a46 1

a52 1

d70 1
a70 2
C  Normalize under the mask

d72 1
a72 1
     &   NUMR,NUMR(1,NRING))
d85 1
a85 2
C  Normalize under the mask

d87 1
a87 1
     &   NUMR,NUMR(1,NRING))
d95 1
a95 1
C  Find specified number of peaks
d121 1
a121 1
C  Convert to angles and do the interpolation
d145 1
a145 1
c  Multiple peaks
d148 3
a150 2
C  First register is the number of peaks saved
           IF(NSEL(1).NE.0) PARAM(NSEL(1))=NPT
d152 5
a156 4
C  One peak
C  First register is the angle, second the peak value
           IF(NSEL(1).NE.0) PARAM(NSEL(1))=PEAK(2,1)
           IF(NSEL(2).NE.0) PARAM(NSEL(2))=PEAK(1,1)
@


1.11
log
@cosmetic
@
text
@d33 1
a33 1
        DIMENSION  CIRC(LCIRC),CIROLD(LCIRC)
d42 14
d161 5
@


1.10
log
@adapted for dynamical memory allocation
@
text
@d28 1
a28 1
        INCLUDE '/net/ithaca/usr1/spider/src/CMBLOCK.INC'
@


1.9
log
@ff
@
text
@d12 1
a12 1
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
d17 3
d25 4
a28 5
	SUBROUTINE  ORMD_P(NSAM,NROW,LSAM,LROW,
     &   NRING,LCIRC,MAXRIN,NUMR,
     &   CIRC,X,BUFIN,CIROLD,
     &   TEMP,PEAK,NPEAK,MODE,INPIC,INREF)
	INCLUDE 'CMBLOCK.INC'
d31 28
a58 27
	INTEGER    MAXRIN
	DIMENSION  X(NSAM,NROW),BUFIN(LSAM)
	DIMENSION  CIRC(LCIRC),CIROLD(LCIRC)
	INTEGER    NUMR(3,NRING)
	DOUBLE PRECISION TEMP(MAXRIN,2),PEAK(2,NPEAK)
	DOUBLE PRECISION TOTMIN,EAV,TOTMIR,T7(-3:3)
	CHARACTER*1  MODE
	DATA  NDOC/56/
	JACUP=0
C
	LQ=LROW/2+1
	LR1=(NROW-1)/2
 	LR2=LQ+LR1
	LR1=LQ-LR1
	LQ=LSAM/2+1
	LS1=(NSAM-1)/2
	LS2=LQ+LS1
	LS1=LQ-LS1
C
	DO    K2=LR1,LR2
	CALL  REDLIN(INPIC,BUFIN,LSAM,K2)
	DO    K3=LS1,LS2
	X(K3-LS1+1,K2-LR1+1)=BUFIN(K3)
	ENDDO
	ENDDO
	CLOSE(INPIC)
C
d60 2
a61 2
C
	CALL NORMAS(X,-NSAM/2,NSAM/2,-NROW/2,NROW/2,
d63 12
a74 12
C
	CALL  ALRQ(X,NSAM,NROW,NUMR,CIRC,LCIRC,NRING,MODE,K3)
	CALL  FOURING(CIRC,LCIRC,NUMR,NRING,EAV,MODE)
C
	DO    K2=LR1,LR2
	CALL  REDLIN(INREF,BUFIN,LSAM,K2)
	DO    K3=LS1,LS2
 	X(K3-LS1+1,K2-LR1+1)=BUFIN(K3)
	ENDDO
	ENDDO
	CLOSE(INREF)
C
d76 2
a77 2
C
	CALL NORMAS(X,-NSAM/2,NSAM/2,-NROW/2,NROW/2,
d79 5
a83 5
C
	CALL  ALRQ(X,NSAM,NROW,NUMR,CIROLD,LCIRC,NRING,MODE,K3)
	CALL  FOURING(CIROLD,LCIRC,NUMR,NRING,EAV,MODE)
C
	CALL  CROSRNG
d87 25
a111 25
	DO  K2=1,NPEAK
	PEAK(1,K2)=-1.0D20
	PEAK(2,K2)=-1.0
	ENDDO
	DO    J=1,MAXRIN
        J2=MOD(J+MAXRIN-1,MAXRIN)+1
        J1=MOD(J+MAXRIN-2,MAXRIN)+1
        J3=MOD(J+MAXRIN,MAXRIN)+1
	IF(TEMP(J2,2).GT.TEMP(J1,2) .AND. TEMP(J2,2).GT.TEMP(J3,2)) THEN
		DO  K2=1,NPEAK
		IF(TEMP(J2,2).GT.PEAK(1,K2))  THEN
			IF(NPEAK.GT.1)  THEN
			DO  K3=NPEAK,K2+1,-1
			PEAK(1,K3)=PEAK(1,K3-1)
			PEAK(2,K3)=PEAK(2,K3-1)
			ENDDO
			ENDIF
		PEAK(1,K2)=TEMP(J2,2)
		PEAK(2,K2)=J
		GOTO 1209
		ENDIF
		ENDDO
1209		CONTINUE
	ENDIF
	ENDDO
d113 23
a135 23
	DO  K2=1,NPEAK
	JTOT=PEAK(2,K2)
	NPT=K2-1
	IF(JTOT.EQ.-1)  GOTO  1409
	DO  K3=-3,3
        J=MOD(JTOT+K3+MAXRIN-1,MAXRIN)+1
	T7(K3)=TEMP(J,2)
	ENDDO
	CALL  PRB1D(T7,7,POS)
	PEAK(1,K2)=PEAK(1,K2)/MAXRIN/NRING
	RANG=PEAK(2,K2)+POS
	PEAK(2,K2)=ANGMOR(RANG,MODE)
	IF(FCHAR(5:5).EQ.'M')  THEN
	DLIST(1)=K2
	DLIST(2)=PEAK(2,K2)
	DLIST(3)=PEAK(1,K2)
	CALL  SAVD(NDOC,DLIST,NDLI,IRTFLG)
	ENDIF
	WRITE(NOUT,2700)  PEAK(2,K2),PEAK(1,K2)
2700	FORMAT('    Angle = ',F10.4,'    Peak = ',G12.5)
	ENDDO
1409	CONTINUE
	IF(FCHAR(5:5).EQ.'M')  THEN
d137 2
a138 2
        CLOSE(NDOC)
        CALL  SAVDC
d140 2
a141 2
	IF(NSEL(1).NE.0) PARAM(NSEL(1))=NPT
	ELSE
d144 5
a148 4
	IF(NSEL(1).NE.0) PARAM(NSEL(1))=PEAK(2,1)
	IF(NSEL(2).NE.0) PARAM(NSEL(2))=PEAK(1,1)
	ENDIF
	END
@


1.8
log
@OR 2
@
text
@d29 1
a29 1
	INTEGER*2  MAXRIN,CMP
d32 1
a32 1
	INTEGER*2  NUMR(3,NRING)
a36 1
CNO_SAVE
d89 3
a91 6
        CMP = J+MAXRIN-1
        J2=MOD(CMP,MAXRIN)+1
        CMP = J+MAXRIN-2
        J1=MOD(CMP,MAXRIN)+1
        CMP = J+MAXRIN
        J3=MOD(CMP,MAXRIN)+1
d115 1
a115 2
        CMP = JTOT+K3+MAXRIN-1
        J=MOD(CMP,MAXRIN)+1
@


1.7
log
@*** empty log message ***
@
text
@d22 2
a23 2
         SUBROUTINE  ORMD_P(NSAM,NROW,LSAM,LROW,
     &   NRING,LCIRC,MAXRIN,JACUP,NUMR,
d25 12
a36 7
     &   TEMP,MODE,INPIC,INREF,TOTMIN,RANG)
         INTEGER*2  MAXRIN
         DIMENSION  X(NSAM,NROW),BUFIN(LSAM)
         DIMENSION  CIRC(LCIRC),CIROLD(LCIRC)
         INTEGER*2  NUMR(3,NRING)
         DOUBLE PRECISION TEMP(MAXRIN,2),TOTMIN,EAV,TOTMIR
         CHARACTER*1  MODE
d38 1
d40 16
a55 16
         LQ=LROW/2+1
         LR1=(NROW-1)/2
         LR2=LQ+LR1
         LR1=LQ-LR1
         LQ=LSAM/2+1
         LS1=(NSAM-1)/2
         LS2=LQ+LS1
         LS1=LQ-LS1
C
         DO    K2=LR1,LR2
         CALL  REDLIN(INPIC,BUFIN,LSAM,K2)
         DO    K3=LS1,LS2
         X(K3-LS1+1,K2-LR1+1)=BUFIN(K3)
	 ENDDO
	 ENDDO
         CLOSE(INPIC)
d59 1
a59 1
         CALL NORMAS(X,-NSAM/2,NSAM/2,-NROW/2,NROW/2,
d62 2
a63 2
         CALL  ALRQ(X,NSAM,NROW,NUMR,CIRC,LCIRC,NRING,MODE,K3)
         CALL  FOURING(CIRC,LCIRC,NUMR,NRING,EAV,MODE)
d65 7
a71 7
         DO    K2=LR1,LR2
         CALL  REDLIN(INREF,BUFIN,LSAM,K2)
         DO    K3=LS1,LS2
         X(K3-LS1+1,K2-LR1+1)=BUFIN(K3)
	 ENDDO
	 ENDDO
         CLOSE(INREF)
d75 1
a75 1
         CALL NORMAS(X,-NSAM/2,NSAM/2,-NROW/2,NROW/2,
d78 2
a79 2
         CALL  ALRQ(X,NSAM,NROW,NUMR,CIROLD,LCIRC,NRING,MODE,K3)
         CALL  FOURING(CIROLD,LCIRC,NUMR,NRING,EAV,MODE)
d81 1
a81 1
         CALL  CROSRNG
d84 66
a149 8
C Mirror ...
C     CALL  CROSRMG
C    &  (CIRC,CIROLD,LCIRC,NRING,TEMP,TEMP(1,2),
C    &   MAXRIN,JACUP,NUMR,TOTMIR,TMT,MODE)
	TOTMIN=TOTMIN/MAXRIN/NRING
         RANG=TOT
         RANG=ANGMOR(RANG,MODE)
         END
@


1.6
log
@fixed
@
text
@d43 1
a43 1
         DO  61  K2=LR1,LR2
d45 4
a48 2
         DO  61  K3=LS1,LS2
61       X(K3-LS1+1,K2-LR1+1)=BUFIN(K3)
d59 1
a59 1
         DO  65  K2=LR1,LR2
d61 4
a64 2
         DO  65  K3=LS1,LS2
65       X(K3-LS1+1,K2-LR1+1)=BUFIN(K3)
@


1.5
log
@corrected
@
text
@d26 1
a26 1
         INTEGER*2  MAXRIN,MAXRI
a30 1
         COMMON  /MXR/  MAXRI
a33 2
         MAXRI=MAXRIN
C
d78 1
@


1.4
log
@fixed here and there
@
text
@d22 1
a22 1
         SUBROUTINE  ORMD_P(NSAM,NROW,LSAM,LROW,NIMA,
@


1.3
log
@nosave
@
text
@d24 1
a24 1
     &   CIRC,X,WORK,BUFIN,CIROLD,
d27 1
a27 1
         DIMENSION  X(NSAM,NROW),BUFIN(LSAM),WORK(*)
d57 2
a58 3
         CALL  ALRQ(X,NSAM,NROW,NUMR,CIRC,LCIRC,NRING,MODE,K1)
         CALL  FOURING
     &   (CIRC,LCIRC,NUMR,NRING,EAV,MODE)
d71 1
a71 1
         CALL  ALRQ(X,NSAM,NROW,NUMR,CIROLD,LCIRC,NRING,MODE,ITI)
@


1.2
log
@imsl removed
@
text
@d33 1
@


1.1
log
@Initial revision
@
text
@d25 1
a25 1
     &   TEMP,MODE,KXORD,KYORD,INPIC,INREF,TOTMIN,RANG)
d56 1
a56 7
         IF(KXORD.EQ.0)  THEN
         CALL  ALRQ(X,NSAM,NROW,NUMR,
     &   CIRC,LCIRC,NRING,MODE,K1)
         ELSE
         CALL  ALRBS(X,NSAM,NROW,NUMR,
     &   CIRC,LCIRC,NRING,MODE,WORK,KXORD,KYORD,K1)
         ENDIF
d71 2
a72 9
         IF(KXORD.EQ.0)  THEN
         CALL  ALRQ(X,NSAM,NROW,NUMR,
     &   CIROLD,LCIRC,NRING,MODE,ITI)
         ELSE
         CALL  ALRBS(X,NSAM,NROW,NUMR,
     &   CIROLD,LCIRC,NRING,MODE,WORK,KXORD,KYORD,ITI)
         ENDIF
         CALL  FOURING
     &   (CIROLD,LCIRC,NUMR,NRING,EAV,MODE)
@
