head	1.9;
access;
symbols;
locks; strict;
comment	@c @;


1.9
date	2012.06.28.13.45.02;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2011.12.19.17.38.32;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2011.12.15.14.42.42;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	2011.12.12.20.02.38;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	2011.12.12.17.35.20;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	2011.12.08.20.09.59;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	2011.12.08.19.53.12;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	2011.12.08.19.23.43;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	2011.12.08.18.42.28;	author leith;	state Exp;
branches;
next	;


desc
@@


1.9
log
@gpk's bug fix
@
text
@C++*********************************************************************
C                                                                      *
C PJ3_FBS.F   NEW                               DEC 2011 G KISHCHENKO  *
C                                                                      *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C PJ3_FBS                                                              *
C                                                                      *
C PURPOSE:  COMPUTES A SINGLE PROJECTION OF A 3D VOLUME ACCORDING TO   *
C           THREE EULERIAN ANGLES.                                     *
C           USES 3D FBS INTERPOLATION.                                 *
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

        SUBROUTINE PJ3_FBS()
 
        IMPLICIT NONE

        INCLUDE 'CMBLOCK.INC'
        INCLUDE 'CMLIMIT.INC' 
        
        CHARACTER(LEN=MAXNAM) :: FINPIC
        REAL, ALLOCATABLE     :: VOLIN(:,:,:)
        REAL, ALLOCATABLE     :: XYZ(:,:,:)
        REAL, ALLOCATABLE     :: X1 (:,:,:)
        REAL, ALLOCATABLE     :: Y1 (:,:,:)
        REAL, ALLOCATABLE     :: Z1 (:,:,:)
        REAL, ALLOCATABLE     :: XY2(:,:,:)
        REAL, ALLOCATABLE     :: XZ2(:,:,:)
        REAL, ALLOCATABLE     :: YZ2(:,:,:)
        REAL, ALLOCATABLE     :: PRJOUT(:,:)

        INTEGER, PARAMETER    :: INPIC = 60
        INTEGER, PARAMETER    :: IOPIC = 61

        INTEGER               :: NX,NY,NZ,IRTFLG,NE,NXP,NYP,NOT_USED
        INTEGER               :: NXLD,MWANT,K,J,I,maxim,itype,nzp
        REAL                  :: PSI,PHI,THETA,TVAL

        MAXIM = 0
        CALL OPFILEC(0,.TRUE.,FINPIC,INPIC,'O',ITYPE,
     &               NX,NY,NZ,
     &               MAXIM,'INPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

        IF (ITYPE .NE. 3)  THEN
           CALL  ERRT(101,'THIS OPERATION ONLY WORKS ON VOLUMES',NE)
           GOTO 9999
        ENDIF

        NXP = NX
        NYP = 0
        CALL RDPRIS(NXP,NYP,NOT_USED,
     &              'PROJECTION DIMENSIONS IN X,Y',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999

        IF (NYP.EQ.0) NYP = NINT(NXP*(FLOAT(NY)/FLOAT(NX)))
        IF (NYP.EQ.0) THEN
           CALL  ERRT(102,'ILLEGAL Y DIMENSION',NYP)
           GOTO 9999
        ENDIF

        MAXIM = 0
        NZP   = 1
        ITYPE = 1
        CALL OPFILEC(0,.TRUE.,FINPIC,IOPIC,'U',ITYPE,
     &               NXP,NYP,NZP,
     &               MAXIM,'OUTPUT',.FALSE.,IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999 

        PSI = HUGE(PSI)
        CALL RDPRM3S(PHI,THETA,PSI,NOT_USED,
     &              'PHI, THETA, & PSI',IRTFLG)
        IF (IRTFLG .NE. 0) GOTO 9999 

        TVAL = HUGE(PSI)
        IF (PSI .EQ. TVAL) THEN 
           CALL RDPRM1S(PSI,NOT_USED,'PSI',IRTFLG)
           IF (IRTFLG.NE.0) GOTO 9999 
        ENDIF

        NXLD = NX + 2 - MOD(NX,2)

        ALLOCATE (VOLIN (NX,  NY,NZ),
     &            PRJOUT(NXP, NYP),
     &            XYZ   (NXLD,NY,NZ),
     &            X1    (NXLD,NY,NZ),
     &            Y1    (NXLD,NY,NZ),
     &            Z1    (NXLD,NY,NZ),
     &            XY2   (NXLD,NY,NZ),
     &            XZ2   (NXLD,NY,NZ),
     &            YZ2   (NXLD,NY,NZ),STAT=IRTFLG)

        IF (IRTFLG.NE.0) THEN
           MWANT = NX*NY*NZ + NXP*NYP + 7*NXLD*NY*NZ
           CALL ERRT(46,'PJ3_FBS; VOLIN,...',MWANT)
           GOTO 9999
        ENDIF

        CALL READV(INPIC,VOLIN,NX,NY,NX,NY,NZ)  ! NO PAD

C       COPY VOLIN INTO XYZ WITH ROW PADDING
        DO K=1,NZ
           DO J=1,NY
              DO I=1,NX
                 XYZ(I,J,K) = VOLIN(I,J,K)
              ENDDO

              DO I = NX+1,NXLD
                 XYZ(I,J,K) = 0
              ENDDO
           ENDDO
        ENDDO

C       WRITE(6,*), ' NXLD = ............',  NXLD
C       WRITE(6,*), ' NX = ..............',  NX
C       WRITE(6,*), ' NY = ..............',  NY
C       WRITE(6,*), ' NZ = ..............',  NZ
C       WRITE(6,*), ' PSI = .............',  PSI
C       WRITE(6,*), ' THETA = ...........',  THETA
C       WRITE(6,*), ' PHI = .............',  PHI

C       CALCULATE PROJECTION DERIVATIVES USING 3D FFT
        CALL FBS3_PREP(XYZ, NXLD, NX, NY, NZ,
     &                  X1, Y1, Z1, XY2, XZ2, YZ2)

        CALL PJ33_FBS(VOLIN,PRJOUT, NXLD,NX,NY,NZ,NXP,NYP,
     &                PSI,THETA,PHI,
     &                XYZ, X1, Y1, Z1, XY2, XZ2, YZ2)

        NZP = 1
        CALL WRITEV(IOPIC,PRJOUT, NXP,NYP,NXP,NYP,NZP) ! NOT PADDED

9999    IF (ALLOCATED(VOLIN)) DEALLOCATE (VOLIN)
        IF (ALLOCATED(XYZ))   DEALLOCATE (XYZ)
        IF (ALLOCATED(X1))    DEALLOCATE(X1)
        IF (ALLOCATED(Y1))    DEALLOCATE(Y1)
        IF (ALLOCATED(Z1))    DEALLOCATE(Z1)
        IF (ALLOCATED(XY2))   DEALLOCATE(XY2)
        IF (ALLOCATED(XZ2))   DEALLOCATE(XZ2)
        IF (ALLOCATED(YZ2))   DEALLOCATE(YZ2)
        IF (ALLOCATED(PRJOUT))DEALLOCATE(PRJOUT)

        CLOSE(IOPIC)
        CLOSE(INPIC)

        END


C       ************ SUBROUTINE  PJ33_FBS ****************************

        SUBROUTINE  PJ33_FBS(VOLIN,PRJOUT, NXLD,NX,NY,NZ,NXP,NYP,
     &                  PSI,THETA,PHI,
     &                  XYZ, X1, Y1, Z1, XY2, XZ2, YZ2)

        IMPLICIT NONE

        REAL              :: VOLIN (NX, NY,NZ) 
        REAL              :: PRJOUT(NXP,NYP)
        INTEGER           :: NX,NY,NZ,NXP,NYP
        REAL              :: PSI,THETA,PHI
        REAL              :: XYZ(NXLD,NY,NZ)
        REAL              :: X1 (NXLD,NY,NZ)
        REAL              :: Y1 (NXLD,NY,NZ)
        REAL              :: Z1 (NXLD,NY,NZ)
        REAL              :: XY2(NXLD,NY,NZ)
        REAL              :: XZ2(NXLD,NY,NZ)
        REAL              :: YZ2(NXLD,NY,NZ)

        REAL              :: DM(9)
        DOUBLE PRECISION  :: CPHI,SPHI,CTHE,STHE,CPSI,SPSI
        DOUBLE PRECISION  :: RAD_TO_DGR

        INTEGER           :: I,J,K,I2,J2
        INTEGER           :: IOX, IOY, IOZ
        INTEGER           :: N, NXLD,LDPX,LDPY,LDPZ,MPPX,MPPY

        REAL              :: XB, YB, ZB
        REAL              :: DM1,DM2,DM3

        REAL              :: fbs3

        DOUBLE PRECISION,PARAMETER :: QUADPI = 3.141592653589793238462643383279
        DOUBLE PRECISION,PARAMETER :: DGR_TO_RAD = QUADPI/180

        CPHI = DCOS(DBLE(PHI)  * DGR_TO_RAD)
        SPHI = DSIN(DBLE(PHI)  * DGR_TO_RAD)
        CTHE = DCOS(DBLE(THETA)* DGR_TO_RAD)
        STHE = DSIN(DBLE(THETA)* DGR_TO_RAD)
        CPSI = DCOS(DBLE(PSI)  * DGR_TO_RAD)
        SPSI = DSIN(DBLE(PSI)  * DGR_TO_RAD)

        DM(1) =  CPHI*CTHE*CPSI-SPHI*SPSI
        DM(2) =  SPHI*CTHE*CPSI+CPHI*SPSI
        DM(3) = -STHE*CPSI
        DM(4) = -CPHI*CTHE*SPSI-SPHI*CPSI
        DM(5) = -SPHI*CTHE*SPSI+CPHI*CPSI
        DM(6) =  STHE*SPSI

        DM(7) = STHE*CPHI
        DM(8) = STHE*SPHI
        DM(9) = CTHE

        DM1   = DM(1)
        DM2   = DM(2)
        DM3   = DM(3)

C       ZERO THE WHOLE PRJOUT ARRAY
        PRJOUT = 0.0

        LDPX = NX/2+1
        LDPY = NY/2+1
        LDPZ = NZ/2+1

        MPPX = NXP/2+1
        MPPY = NYP/2+1

        DO K=1,NZ
           DO  J=1,NY
               XB  = (1-LDPX)*DM(1) + (J-LDPY)*DM(4) +
     &               (K-LDPZ)*DM(7) + LDPX

               YB  = (1-LDPX)*DM(2) + (J-LDPY)*DM(5) +
     &               (K-LDPZ)*DM(8) + LDPY

               ZB  = (1-LDPX)*DM(3) + (J-LDPY)*DM(6) +
     &               (K-LDPZ)*DM(9) + LDPZ

c               J2  = J - LDPY + MPPY

c               IOX = IFIX(XB)
c               IOY = IFIX(YB)
c               IOZ = IFIX(ZB)

c               IF (J2  >= 1 .AND. J2  <= NYP .AND.
c     &             IOX >= 1 .AND. IOX < NX   .AND.
c     &             IOY >= 1 .AND. IOY < NY   .AND.
c     &             IOZ >= 1 .AND. IOZ < NZ)  THEN

c                   DO  I=1,NX
c                      I2 = I - LDPX + MPPX

c                      IF (I2 >= 1 .AND. I2 <= NXP) THEN


               J2 = J-LDPY+MPPY
               IF (.NOT.(J2.LT.1 .OR. J2.GT.NYP))  THEN
                   DO  I=1,NX
                     IOX    = IFIX(XB)
                     IF(.NOT.(IOX.LT.1 .OR. IOX.GE.NX))  THEN
                        IOY    = IFIX(YB)
                        IF (.NOT.(IOY.LT.1 .OR. IOY.GE.NY))  THEN
                            IOZ    = IFIX(ZB)
                            IF (.NOT.(IOZ.LT.1 .OR. IOZ.GE.NZ)) THEN
                               I2=I-LDPX+MPPX
                               IF (.NOT.(I2.LT.1 .OR. I2.GT.NXP))THEN



                          PRJOUT(I2,J2) = PRJOUT(I2,J2) + 
     &                              FBS3(XB,YB,ZB,
     &                              NXLD, NX, NY, NZ,
     &                              VOLIN,NX, XYZ,
     &                              X1, Y1, Z1,
     &                              XY2,XZ2,YZ2)

                              ENDIF
                           ENDIF
                        ENDIF
                     ENDIF

                      XB = XB + DM1
                      YB = YB + DM2
                      ZB = ZB + DM3
                  ENDDO
               ENDIF
            ENDDO
         ENDDO

         END

@


1.8
log
@fbs3 nxp parameter
@
text
@d250 1
a250 1
               J2  = J - LDPY + MPPY
d252 3
a254 8
               IOX = IFIX(XB)
               IOY = IFIX(YB)
               IOZ = IFIX(ZB)

               IF (J2  >= 1 .AND. J2  <= NYP .AND.
     &             IOX >= 1 .AND. IOX < NX   .AND.
     &             IOY >= 1 .AND. IOY < NY   .AND.
     &             IOZ >= 1 .AND. IOZ < NZ)  THEN
d256 13
d270 9
a278 1
                      I2 = I - LDPX + MPPX
a279 1
                      IF (I2 >= 1 .AND. I2 <= NXP) THEN
d287 5
a291 1
                      ENDIF
@


1.7
log
@rewrite
@
text
@d202 1
a202 1
        REAL              :: fbs3_n
d267 1
a267 1
     &                              FBS3_N(XB,YB,ZB,
d269 1
a269 1
     &                              VOLIN, XYZ,
@


1.6
log
@refactor
@
text
@d38 2
d44 2
a45 2
        REAL, ALLOCATABLE     :: CUBE (:,:,:)
        REAL, ALLOCATABLE     :: CUBE0(:,:,:)
d52 1
a52 1
        REAL, ALLOCATABLE     :: B(:,:)
d57 3
a59 1
        INTEGER               :: NXLD
d63 1
a63 1
     &               NSAM,NROW,NSLICE,
d72 4
a75 4
        NSAMP = NSAM
        NROWP = 0
        CALL RDPRIS(NSAMP,NROWP,NOT_USED,
     &              'PROJECTION DIMENSIONS X,Y',IRTFLG)
d78 3
a80 3
        IF (NROWP.EQ.0) NROWP = NINT(NSAMP*(FLOAT(NROW)/FLOAT(NSAM)))
        IF (NROWP.EQ.0) THEN
           CALL  ERRT(102,'ILLEGAL Y DIMENSION',NROWP)
d84 3
a86 3
        MAXIM   = 0
        NSLICEP = 1
        ITYPE   = 1
d88 3
a90 3
     &             NSAMP,NROWP,NSLICEP,
     &             MAXIM,'OUTPUT',.FALSE.,IRTFLG)
        IF (IRTFLG.NE.0) GOTO 9999 
d94 2
a95 2
     &                 'PHI, THETA, & PSI',IRTFLG)
        IF (IRTFLG.NE.0) GOTO 9999 
d103 1
a103 1
        NXLD = NSAM + 2 - MOD(NSAM,2)
d105 9
a113 9
        ALLOCATE (CUBE (NSAM,NROW,NSLICE),
     &            B    (NSAMP,NROWP),
     &            CUBE0(NXLD,NROW,NSLICE),
     &            X1   (NXLD,NROW,NSLICE),
     &            Y1   (NXLD,NROW,NSLICE),
     &            Z1   (NXLD,NROW,NSLICE),
     &            XY2  (NXLD,NROW,NSLICE),
     &            XZ2  (NXLD,NROW,NSLICE),
     &            YZ2  (NXLD,NROW,NSLICE),STAT=IRTFLG)
d116 2
a117 2
           MWANT = NSAM*NROW*NSLICE + NSAMP*NROWP + 7*NXLD*NROW*NSLICE
           CALL ERRT(46,'PJ 3, CUBE,...',MWANT)
d121 1
a121 1
       CALL READV(INPIC,CUBE,NSAM,NROW,NSAM,NROW,NSLICE)
d123 5
a127 8
C       ZERO WHOLE B ARRAY         
	B = 0.0

C       ZERO THE LAST COL OF CUBE0 ARRAY
        DO K=1,NSLICE
           DO J=1,NROW
              DO I = NSAM+1,NXLD
                 CUBE0(I,J,K) = 0
a128 2
           ENDDO
        ENDDO
d130 2
a131 5
C       COPY CUBE INTO CUBE0 EXCEPT FOR THE LAST COL OF CUBE0
        DO K=1,NSLICE
           DO J=1,NROW
              DO I=1,NSAM
                 CUBE0(I,J,K) = CUBE(I,J,K)
d136 7
a142 7
c       WRITE(6,*), ' NXLD = .............',  NXLD
c       WRITE(6,*), ' NSAM = .............',  NSAM
c       WRITE(6,*), ' NROW = .............',  NROW
c       WRITE(6,*), ' NSLICE = ...........',  NSLICE
c       WRITE(6,*), ' PSI = .............',  PSI
c       WRITE(6,*), ' THETA = ...........',  THETA
c       WRITE(6,*), ' PHI = .............',  PHI
d144 2
a145 2
C       CALCULATION OF PROJECTIONS DERIVATIVES USING 3D FFT
        CALL FBS3_PREP(CUBE0, NXLD, NSAM, NROW, NSLICE,
d148 1
a148 1
        CALL PJ33_FBS(CUBE,B,NSAM,NROW,NSLICE,NSAMP,NROWP,
d150 1
a150 1
     &                CUBE0, X1, Y1, Z1, XY2, XZ2, YZ2)
d152 2
a153 2
        NSLICEP = 1
        CALL WRITEV(IOPIC,B,NSAMP,NROWP,NSAMP,NROWP,NSLICEP)
d155 2
a156 2
9999    IF (ALLOCATED(CUBE))  DEALLOCATE (CUBE)
        IF (ALLOCATED(CUBE0)) DEALLOCATE (CUBE0)
d163 1
a163 1
        IF (ALLOCATED(B))     DEALLOCATE(B)
d173 1
a173 1
        SUBROUTINE  PJ33_FBS(CUBE,B,NX,NY,NZ,NXP,NYP,
d175 1
a175 1
     &                  CUBE0, X1, Y1, Z1, XY2, XZ2, YZ2)
d177 1
a177 52
         DIMENSION        :: CUBE(NX,NY,NZ),B(NXP,NYP)
         DIMENSION        :: DM(9)
         DOUBLE PRECISION :: CPHI,SPHI,CTHE,STHE,CPSI,SPSI
         DOUBLE PRECISION :: QUADPI,DGR_TO_RAD,RAD_TO_DGR

         PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
         PARAMETER (DGR_TO_RAD = (QUADPI/180))

         INTEGER       :: I,J,K,I2,J2
         INTEGER       :: IOX, IOY, IOZ
         INTEGER       :: N, NXLD
         INTEGER       :: NX, NY, NZ
         INTEGER       :: NXP, NYP

         REAL, ALLOCATABLE :: CUBE1(:,:,:)
         REAL              :: CUBE0(NXLD,NY,NZ)
         REAL              :: X1   (NXLD,NY,NZ)
         REAL              :: Y1   (NXLD,NY,NZ)
         REAL              :: Z1   (NXLD,NY,NZ)
         REAL              :: XY2  (NXLD,NY,NZ)
         REAL              :: XZ2  (NXLD,NY,NZ)
         REAL              :: YZ2  (NXLD,NY,NZ)
         REAL              :: B    (NXP,NYP)
	 REAL              :: XB, YB, ZB
         REAL              :: DM1,DM2,DM3
         REAL              :: fbs3

         NXLD   = NX + 2 - MOD(NX,2)

         ALLOCATE (CUBE1 (NX,NY,NY))

         CPHI = DCOS(DBLE(PHI)*DGR_TO_RAD)
         SPHI = DSIN(DBLE(PHI)*DGR_TO_RAD)
         CTHE = DCOS(DBLE(THETA)*DGR_TO_RAD)
         STHE = DSIN(DBLE(THETA)*DGR_TO_RAD)
         CPSI = DCOS(DBLE(PSI)*DGR_TO_RAD)
         SPSI = DSIN(DBLE(PSI)*DGR_TO_RAD)

         DM(1) = CPHI*CTHE*CPSI-SPHI*SPSI
         DM(2) = SPHI*CTHE*CPSI+CPHI*SPSI
         DM(3) = -STHE*CPSI
         DM(4) = -CPHI*CTHE*SPSI-SPHI*CPSI
         DM(5) = -SPHI*CTHE*SPSI+CPHI*CPSI
         DM(6) = STHE*SPSI

         DM(7) = STHE*CPHI
         DM(8) = STHE*SPHI
         DM(9) = CTHE

         DM1   = DM(1)
         DM2   = DM(2)
         DM3   = DM(3)
d179 49
a227 1
        NXLD   = N + 2 - MOD(N,2)
d229 2
a230 22
C       ZERO THE WHOLE B ARRAY
        B = 0.0

        ALLOCATE(CUBE1(NXLD, NY,NZ) )

C       ZERO THE LAST COL OF CUBE0 ARRAY
        DO K=1,NZ
           DO  J=1,NY
              DO  I=NX+1, NXLD
                 CUBE1(I,J,K) = 0
              ENDDO
           ENDDO
        ENDDO

C       COPY CUBE1 INTO CUBE EXCEPT FOR THE LAST COL OF CUBE0
        DO K=1,NZ
           DO  J=1,NY
              DO  I=1,NX
                 CUBE1(I,J,K) = CUBE(I,J,K)
              ENDDO
           ENDDO
        ENDDO
d235 1
d241 2
a242 2
               XB = (1-LDPX)*DM(1) + (J-LDPY)*DM(4) +
     &              (K-LDPZ)*DM(7) + LDPX
d244 2
a245 2
               YB = (1-LDPX)*DM(2) + (J-LDPY)*DM(5) +
     &              (K-LDPZ)*DM(8) + LDPY
d247 2
a248 3
               ZB = (1-LDPX)*DM(3) + (J-LDPY)*DM(6) +
     &              (K-LDPZ)*DM(9) + LDPZ
               J2 = J-LDPY+MPPY
d250 1
a250 3
               IF (.NOT.(J2.LT.1 .OR. J2.GT.NYP))  THEN
                   DO  I=1,NX
                     IOX    = IFIX(XB)
d252 3
a254 2
                     IF(.NOT.(IOX.LT.1 .OR. IOX.GE.NX))  THEN
                        IOY    = IFIX(YB)
d256 4
a259 2
                        IF (.NOT.(IOY.LT.1 .OR. IOY.GE.NY))  THEN
                            IOZ    = IFIX(ZB)
d261 2
a262 2
                            IF (.NOT.(IOZ.LT.1 .OR. IOZ.GE.NZ)) THEN
                               I2=I-LDPX+MPPX
d264 1
a264 1
                               IF (.NOT.(I2.LT.1 .OR. I2.GT.NXP))THEN
d266 2
a267 2
                                 B(I2,J2) = B(I2,J2) + 
     &                              FBS3(XB,YB,ZB,
d269 1
a269 1
     &                              CUBE1, CUBE0,
d272 1
d274 3
a276 8
                               ENDIF
                           ENDIF
                        ENDIF
                     ENDIF

                     XB = XB + DM1
                     YB = YB + DM2
                     ZB = ZB + DM3
d282 1
a282 3
        IF (ALLOCATED(CUBE1)) DEALLOCATE (CUBE1)

	END
@


1.5
log
@gpk04's changes
@
text
@d36 1
a36 1
        SUBROUTINE PJ3_FBS
d55 1
a55 1
        INTEGER                              :: NXLD
d61 1
a61 2

        IF (IRTFLG .NE. 0)    RETURN
a67 20
        NXLD = NSAM + 2 - MOD(NSAM,2)
        ALLOCATE (CUBE  (NSAM,NROW,NSLICE),
     &            CUBE0 (NXLD,NROW,NSLICE),
     &              X1  (NXLD,NROW,NSLICE),
     &              Y1  (NXLD,NROW,NSLICE),
     &              Z1  (NXLD,NROW,NSLICE),
     &              XY2 (NXLD,NROW,NSLICE),
     &              XZ2 (NXLD,NROW,NSLICE),
     &              YZ2 (NXLD,NROW,NSLICE),
     &              YZ2 (NXLD,NROW,NSLICE),STAT=IRTFLG)


        IF (IRTFLG.NE.0) THEN 
           MWANT = NSAM*NROW*NSLICE+NXLD*NROW*NSLICE
           CALL ERRT(46,'PJ 3, CUBE,...',MWANT)
           GOTO 9999
        ENDIF

        CALL READV(INPIC,CUBE,NSAM,NROW,NSAM,NROW,NSLICE)

d69 1
a69 1
        NROWP = NROW
d76 1
a76 1
           CALL  ERRT(31,'PJ 3',NE)
d81 1
a81 1
        NSLICEP = 0
d86 1
d90 1
a90 1
     &                 'PHI, THETA & PSI',IRTFLG)
d99 15
a113 4
        ALLOCATE (B(NSAMP,NROWP), STAT=IRTFLG)
        IF (IRTFLG.NE.0) THEN 
           MWANT = NSAMP * NROWP
           CALL ERRT(46,'PJ 3, B',MWANT)
d117 3
d122 1
d131 1
d140 7
a146 7
c        WRITE(6,*), ' NXLD = .............',  NXLD
c        WRITE(6,*), ' NSAM = .............',  NSAM
c        WRITE(6,*), ' NROW = .............',  NROW
c        WRITE(6,*), ' NSLICE = ...........',  NSLICE
c        WRITE(6,*), ' PSI = .............',  PSI
c        WRITE(6,*), ' THETA = ...........',  THETA
c        WRITE(6,*), ' PHI = .............',  PHI
d161 7
a167 7
        IF (ALLOCATED(X1))  DEALLOCATE(X1)
        IF (ALLOCATED(Y1))  DEALLOCATE(Y1)
        IF (ALLOCATED(Z1))  DEALLOCATE(Z1)
        IF (ALLOCATED(XY2)) DEALLOCATE(XY2)
        IF (ALLOCATED(XZ2)) DEALLOCATE(XZ2)
        IF (ALLOCATED(YZ2)) DEALLOCATE(YZ2)
        IF (ALLOCATED(B)) DEALLOCATE(B)
d181 4
a184 4
         DIMENSION         CUBE(NX,NY,NZ),B(NXP,NYP)
         DIMENSION         DM(9)
         DOUBLE PRECISION  CPHI,SPHI,CTHE,STHE,CPSI,SPSI
         DOUBLE PRECISION  QUADPI,DGR_TO_RAD,RAD_TO_DGR
d195 12
a206 12
         REAL, ALLOCATABLE :: CUBE1  (:,:,:)
         REAL              :: CUBE0 (NXLD,NY,NZ)
         REAL              ::   X1  (NXLD,NY,NZ)
         REAL              ::   Y1  (NXLD,NY,NZ)
         REAL              ::   Z1  (NXLD,NY,NZ)
         REAL              ::   XY2 (NXLD,NY,NZ)
         REAL              ::   XZ2 (NXLD,NY,NZ)
         REAL              ::   YZ2 (NXLD,NY,NZ)
         REAL              ::   B (NXP,NYP)
	 REAL          :: XB, YB, ZB
         REAL          :: DM1,DM2,DM3
         REAL          :: FBS3
d230 3
a232 3
         DM1 = DM(1)
         DM2 = DM(2)
         DM3 = DM(3)
d236 1
a236 1
C        ZERO THE WHOLE B ARRAY
d239 1
a239 1
        ALLOCATE ( CUBE1(NXLD, NY,NZ) )
d241 1
d244 2
a245 2
              DO  I=1,NX + 1,NXLD
           CUBE1(I,J,K) = 0
d250 1
d254 1
a254 1
           CUBE1(I,J,K) = CUBE(I,J,K)
d276 1
d280 1
d283 1
d286 1
d289 1
d303 1
d312 1
a312 1
        IF (ALLOCATED(CUBE1))  DEALLOCATE (CUBE1)
@


1.4
log
@*** empty log message ***
@
text
@d2 3
a4 3
C
C PJ3_FBS.F   NEW                                DEC 2011 G KISHCHENKO
C
d26 7
a32 7
C
C PJ3_FBS
C
C PURPOSE:  COMPUTES PROJECTIONS OF A 3D VOLUME ACCORDING TO 
C           THREE EULERIAN ANGLES. DOES A WHOLE PROJECTION SERIES. 
C           USES 3D FBS INTERPOLATION
C
d44 6
d55 1
d70 11
a80 2
        ALLOCATE (CUBE0(NXLD,NROW,NSLICE),
     &            CUBE (NSAM,NROW,NSLICE), STAT=IRTFLG)
d144 8
d158 1
a158 1
     &                X1, Y1, Z1, XY2, XZ2, YZ2)
d163 1
a163 2
9999    IF (ALLOCATED(B))     DEALLOCATE (B)
        IF (ALLOCATED(CUBE))  DEALLOCATE (CUBE)
d165 7
d183 1
a183 1
     &                  X1, Y1, Z1, XY2, XZ2, YZ2)
d196 2
a197 1
         INTEGER       :: NZ, NY, NX
a198 1
c         REAL              :: CUBE  (NZ,NY,NZ)
d207 1
d214 2
d243 1
a243 1
        ALLOCATE ( CUBE1(NXLD, N, N) )
d291 1
a291 1
     &                              NXLD, N, N, N,
d311 1
@


1.3
log
@NXLD   = NSAM + 2 - MOD(NSAM,2) but nsam not defined bug
@
text
@d47 1
a47 1
        INTEGER, PARAMETER    :: IOPIC = 61/
d63 1
a63 1
        ALLOCATE (CUBE0(NXLD,NROW,NSLICE,
@


1.2
log
@*** empty log message ***
@
text
@d46 2
a47 1
        DATA  INPIC/60/,IOPIC/61/
a48 1
        NXLD   = NSAM + 2 - MOD(NSAM,2)
d51 3
a53 2
        CALL OPFILEC(0,.TRUE.,FINPIC,INPIC,'O',ITYPE,NSAM,NROW,NSLICE,
     &             MAXIM,'INPUT',.FALSE.,IRTFLG)
d57 2
a58 2
        IF (ITYPE.NE.3)  THEN
           CALL  ERRT(2,'THIS OPERATION ONLY WORKS ON VOLUMES',NE)
d62 1
d70 1
d73 5
a77 1
        CALL RDPRMI(NSAMP,NROWP,NOT_USED,'PROJECTION DIMENSIONS X,Y')
d110 1
a110 1
	B=0.
d276 1
@


1.1
log
@Initial revision
@
text
@d42 2
a43 2
        REAL, ALLOCATABLE     :: CUBE(:,:,:)
        REAL, ALLOCATABLE     :: CUBE0  (:,:,:)
@
