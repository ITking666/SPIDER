head	1.23;
access;
symbols
	pre_getangas:1.14
	GPL2010:1.13
	pre_GPL2010:1.12
	pre_var_equation:1.12
	pre_fftwrings:1.11
	pre_opfiles:1.10
	src:1.10
	best-code:1.10
	x-named-regs:1.10
	x:1.10
	v13-00:1.10
	pre_GPL:1.8
	prec_CA:1.8
	noindx:1.8
	Bproc:1.6
	oct21:1.6
	last77:1.5;
locks; strict;
comment	@c @;


1.23
date	2012.10.26.15.01.07;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2012.05.09.16.29.26;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2012.01.11.14.36.39;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2012.01.04.15.11.58;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2011.12.30.18.17.11;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2011.12.29.18.47.00;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2011.10.19.14.50.44;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2011.10.05.15.50.19;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2011.08.29.17.33.05;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2011.01.12.18.55.27;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2010.06.24.13.26.47;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2009.05.22.10.56.40;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2007.01.25.16.34.09;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.17.20.12.53;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.17.18.06.50;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2002.11.15.17.21.37;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2002.11.01.16.35.55;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.06.03.20.50.56;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	99.02.11.15.29.11;	author pawel;	state Exp;
branches;
next	1.4;

1.4
date	99.02.10.16.17.20;	author pawel;	state Exp;
branches;
next	1.3;

1.3
date	97.10.14.21.19.38;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	95.11.09.15.00.45;	author pawel;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.22;	author leith;	state Exp;
branches;
next	;


desc
@copied from USER2:[PSIDER.CMSREF] on 11 May 1994
@


1.23
log
@sub: RTSQ_PADIN added (could replace all rtsq uses)_
@
text
@
C++*********************************************************************
C
C RTSQ.F     BUFOUT RETURN ADDED, SPEEDED UP      12/28/06 ArDean Leith
C            MERGED WITH ROT2QS_DL                 1/12/11 ArDean Leith
C            ROT2QS_PAD ADDED                      8/12/11 ArDean Leith
C            ROT2QS_BACK ADDED                    10/05/11 ArDean Leith
C            RENAMED FROM: ROT2QS                 12/28/11 ArDean Leith
C            REMOVED LINE-BY-LINE OUTPUT           1/04/12 ArDean Leith
C            RYE1 BUG                              5/08/12 ArDean Leith
C            RTSQ_PADIN                           10/10/12 ArDean Leith
C
C **********************************************************************
C=*                                                                    *                            
C=* This file is part of:   SPIDER - Modular Image Processing System.  *                            
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *                            
C=* Copyright 1985-2012  Health Research Inc.,                         *                            
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *                            
C=* Email: spider@@wadsworth.org                                        *                            
C=*                                                                    *                            
C=* SPIDER is free software; you can redistribute it and/or            *                            
C=* modify it under the terms of the GNU General Public License as     *                            
C=* published by the Free Software Foundation; either version 2 of the *                            
C=* License, or (at your option) any later version.                    *                            
C=*                                                                    *                            
C=* SPIDER is distributed in the hope that it will be useful,          *                            
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *                            
C=* merchantability or fitness for a particular purpose.  See the GNU  *                            
C=* General Public License for more details.                           *                            
C=* You should have received a copy of the GNU General Public License  *                            
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C--*********************************************************************
C
C RTSQ(XIMG,BUFOUT, NX,NY, NXP,NYP, 
C     THETA,SCLI,SHXI,SHYI,IRTFLG)

C RTSQ_PADIN(XIMG,BUFOUT, NXP,NYP, NX,NY,
C            THETA,SCLI,SHXI,SHYI, IRTFLG)
C
C PURPOSE: ROTATES AND SHIFTS A SLICE OF AN IMAGE, ROW BY ROW
C
C PARAMETERS: XIMG        INPUT IMAGE                        (INPUT)
C             BUFOUT      OUTPUT IMAGE OR LINE BUFFER        (OUTPUT)
C             NX,NY       INPUT IMAGE SIZE                   (INPUT)
C             NXP,NYP     OUTPUT IMAGE SIZE                  (INPUT)
C             THETA,SCLI  ROTATION AND SCALE                 (INPUT)
C             SHXI,SHYI   SHIFTS                             (INPUT)
C             USEBACK     USE BACKGROUND                     (INPUT)
C             BACK        BACKGROUND                         (INPUT)
C             IREC1       IMAGE STARTING RECORD              (INPUT)
C             LUN         LUN FOR OUTPUT (0 IS NO FILE OUT)  (INPUT)
C  
C--*********************************************************************

         SUBROUTINE RTSQ(XIMG,BUFOUT, NX,NY, NXP,NYP,
     &                     THETA,SCLI,SHXI,SHYI, IRTFLG)

         IMPLICIT NONE
         REAL            :: XIMG(NX,NY)
         INTEGER         :: NX,NY 
         REAL            :: BUFOUT(NXP,NYP)   
         INTEGER         :: NXP,NYP
         REAL            :: THETA,SCLI,SHXI,SHYI
         INTEGER         :: IRTFLG

	 REAL, PARAMETER :: QUADPI = 3.14159265358979323846
	 REAL, PARAMETER :: DGR_TO_RAD = (QUADPI/180)

         REAL            :: SHX,SHY,RY1,RX1,RY2,RX2,COD,SID,XI
         REAL            :: CODDSCLI,SIDDSCLI,FIXCENMSHX,FIYCENMSHY 
         REAL            :: RYE2,RYE1,RXE2,RXE1,YI
         REAL            :: YCOD,YSID,X1,YOLD,XOLD
         INTEGER         :: IYCEN,IXCEN,IX,IY

         REAL            :: quadri

C        SHIFT WITHIN IMAGE BOUNDARY
         SHX   = AMOD(SHXI,FLOAT(NX))
         SHY   = AMOD(SHYI,FLOAT(NY))

C        SPIDER IMAGE CENTER
         IYCEN = NY/2+1
         IXCEN = NX/2+1

C        IMAGE DIMENSIONS AROUND ORIGIN
         RX1   = -NX/2
         RX2   =  NX/2
         RY1   = -NY/2
         RY2   =  NY/2

         IF (MOD(NX,2) == 0) THEN
            RX2  =  RX2 - 1.0
            RXE1 = -NX
            RXE2 =  NX
         ELSE
            RXE1 = -NX - 1
            RXE2 =  NX + 1
         ENDIF

         IF (MOD(NY,2) == 0) THEN
            RY2  =  RY2 - 1.0
            RYE1 = -NY 
            RYE2 =  NY
         ELSE
            RYE1 = -NY - 1
            RYE2 =  NY + 1
         ENDIF

C        CREATE TRANSFORMATION MATRIX
         COD = COS(THETA * DGR_TO_RAD)
         SID = SIN(THETA * DGR_TO_RAD)

C        ADJUST FOR SCALING
         CODDSCLI   = COD / SCLI
         SIDDSCLI   = SID / SCLI

C        -(CENTER PLUS SHIFT)
         FIXCENMSHX = -IXCEN - SHX
         FIYCENMSHY = -IYCEN - SHY

c$omp    parallel do private(iy,yi,ycod,ysid, ix,xi, xold,yold)
         DO IY=1,NY

            YI = IY + FIYCENMSHY
            IF (YI < RY1) YI = MIN(YI+RYE2, RY2)
            IF (YI > RY2) YI = MAX(YI+RYE1, RY1)

            YCOD =  YI * CODDSCLI + IYCEN
            YSID = -YI * SIDDSCLI + IXCEN

            DO IX=1,NX
               XI = IX + FIXCENMSHX                           
               IF (XI  <  RX1) XI = MIN(XI+RXE2, RX2)   
               IF (XI  >  RX2) XI = MAX(XI+RXE1, RX1) 
 
               YOLD          = XI * SIDDSCLI + YCOD  
               XOLD          = XI * CODDSCLI + YSID
  
               BUFOUT(IX,IY) = QUADRI(XOLD, YOLD, NX, NY, XIMG)
            ENDDO

         ENDDO
c$omp    end parallel do

         IRTFLG = 0

         END

C******************************** RTSQ _BACK ********************************

         SUBROUTINE RTSQ_BACK(XIMG,BUFOUT, NX,NY,
     &                        THETA,SCLI,SHXI,SHYI, 
     &                        USEBACK,BACK,   IRECOFF,LUN)

         IMPLICIT NONE
         REAL            :: XIMG(NX,NY)
         REAL            :: BUFOUT(NX,*)   ! Y MAY BE: 1
         INTEGER         :: NX,NY 
         REAL            :: THETA,SCLI,SHXI,SHYI
         LOGICAL         :: USEBACK
         REAL            :: BACK
         INTEGER         :: IRECOFF,LUN

	 REAL, PARAMETER :: QUADPI = 3.14159265358979323846
	 REAL, PARAMETER :: DGR_TO_RAD = (QUADPI/180)

         REAL            :: SHX,SHY,RY1,RX1,RY2,RX2,COD,SID,XI
         REAL            :: CODDSCLI,SIDDSCLI,FIXCENMSHX,FIYCENMSHY 
         REAL            :: RYE2,RYE1,RXE2,RXE1
         REAL            :: YI,YCOD,YSID,X1,YOLD,XOLD
         INTEGER         :: IYCEN,IXCEN,IT,IX,IY

         REAL            :: quadri

C        SHIFT WITHIN IMAGE BOUNDARY
         SHX   = AMOD(SHXI,FLOAT(NX))
         SHY   = AMOD(SHYI,FLOAT(NY))

C        SPIDER IMAGE CENTER
         IYCEN = NY/2+1
         IXCEN = NX/2+1

C        IMAGE DIMENSIONS AROUND ORIGIN
         RX1   = -NX/2
         RX2   =  NX/2
         RY1   = -NY/2
         RY2   =  NY/2

         IF (MOD(NX,2) == 0) THEN
            RX2  =  RX2 - 1.0
            RXE1 = -NX
            RXE2 =  NX
         ELSE
            RXE1 = -NX - 1
            RXE2 =  NX + 1
         ENDIF

         IF (MOD(NY,2) == 0) THEN
            RY2  =  RY2 - 1.0
            RYE1 = -NY 
            RYE2 =  NY
         ELSE
            RYE1 = -NY - 1
            RYE2 =  NY + 1
         ENDIF

C        CREATE TRANSFORMATION MATRIX
         COD        = COS(THETA * DGR_TO_RAD)
         SID        = SIN(THETA * DGR_TO_RAD)

C        ADJUST FOR SCALING
         CODDSCLI   = COD / SCLI
         SIDDSCLI   = SID / SCLI

C        -(CENTER PLUS SHIFT)
         FIXCENMSHX = -IXCEN - SHX
         FIYCENMSHY = -IYCEN - SHY

         IT         = 1   ! IF WRITING TO OUTPUT

         DO IY=1,NY
            IF (LUN <= 0) IT = IY

            YI = IY + FIYCENMSHY

            IF (YI < RY1) YI = MIN(YI+RYE2, RY2)
            IF (YI > RY2) YI = MAX(YI+RYE1, RY1)
 
            YCOD =  YI * CODDSCLI + IYCEN
            YSID = -YI * SIDDSCLI + IXCEN

            if (USEBACK) THEN
c$omp          parallel do private(ix,xi,xold,yold)
               DO IX=1,NX
                  XI = IX + FIXCENMSHX  
                         
                  IF (XI < RX1) XI = MIN(XI+RXE2, RX2)   
                  IF (XI > RX2) XI = MAX(XI+RXE1, RX1)  

                  YOLD = XI * SIDDSCLI + YCOD  
                  XOLD = XI * CODDSCLI + YSID

                  IF (YOLD < 1 .OR. YOLD > NY .OR. 
     &                XOLD < 1 .OR. XOLD > NX) THEN
C                    CORNER LOCATION
                     BUFOUT(IX,IT) = BACK

                  ELSE
C                    could use quadri_fast?? al
                     BUFOUT(IX,IT) = QUADRI(XOLD,YOLD, NX,NY, XIMG)
                  ENDIF
               ENDDO

            ELSE
c$omp          parallel do private(ix,xi,xold,yold)
               DO IX=1,NX
                  XI = IX + FIXCENMSHX  
                         
                  IF (XI < RX1) XI = MIN(XI+RXE2, RX2)   
                  IF (XI > RX2) XI = MAX(XI+RXE1, RX1)  

                  YOLD         = XI * SIDDSCLI + YCOD  
                  XOLD         = XI * CODDSCLI + YSID

                  BUFOUT(IX,IT) = QUADRI(XOLD,YOLD, NX,NY, XIMG)
               ENDDO
            ENDIF

            IF (LUN > 0) THEN
C              WRITE CURRENT LINE TO FILE
               CALL WRTLIN(LUN,BUFOUT,NX,IRECOFF+IY)
            ENDIF
         ENDDO

         END


C******************************** RTSQ_PADIN *****************************

C        could replace all: rtsq uses!!

         SUBROUTINE RTSQ_PADIN(XIMG,BUFOUT, NXP,NYP, NX,NY,
     &                     THETA,SCLI,SHXI,SHYI, IRTFLG)

         IMPLICIT NONE
         REAL            :: XIMG(NXP,NYP)
         REAL            :: BUFOUT(NX,NY)   
         INTEGER         :: NXP,NYP, NX,NY
         REAL            :: THETA,SCLI,SHXI,SHYI
         INTEGER         :: IRTFLG

	 REAL, PARAMETER :: QUADPI = 3.14159265358979323846
	 REAL, PARAMETER :: DGR_TO_RAD = (QUADPI/180)

         REAL            :: SHX,SHY,RY1,RX1,RY2,RX2,COD,SID,XI
         REAL            :: CODDSCLI,SIDDSCLI,FIXCENMSHX,FIYCENMSHY 
         REAL            :: RYE2,RYE1,RXE2,RXE1,YI
         REAL            :: YCOD,YSID,X1,YOLD,XOLD
         INTEGER         :: IYCEN,IXCEN,IX,IY

         REAL            :: quadri_pad

C        SHIFT WITHIN IMAGE BOUNDARY
         SHX   = AMOD(SHXI,FLOAT(NX))
         SHY   = AMOD(SHYI,FLOAT(NY))

C        SPIDER IMAGE CENTER
         IYCEN = NY/2+1
         IXCEN = NX/2+1

C        IMAGE DIMENSIONS AROUND ORIGIN
         RX1   = -NX/2
         RX2   =  NX/2
         RY1   = -NY/2
         RY2   =  NY/2

         IF (MOD(NX,2) == 0) THEN
            RX2  =  RX2 - 1.0
            RXE1 = -NX
            RXE2 =  NX
         ELSE
            RXE1 = -NX - 1
            RXE2 =  NX + 1
         ENDIF

         IF (MOD(NY,2) == 0) THEN
            RY2  =  RY2 - 1.0
            RYE1 = -NY 
            RYE2 =  NY
         ELSE
            RYE1 = -NY - 1
            RYE2 =  NY + 1

         ENDIF

C        CREATE TRANSFORMATION MATRIX
         COD = COS(THETA * DGR_TO_RAD)
         SID = SIN(THETA * DGR_TO_RAD)

C        ADJUST FOR SCALING
         CODDSCLI = COD / SCLI
         SIDDSCLI = SID / SCLI

C        -(CENTER PLUS SHIFT)
         FIXCENMSHX = -IXCEN - SHX
         FIYCENMSHY = -IYCEN - SHY

c$omp    parallel do private(iy,yi,ycod,ysid, ix,xi,xold,yold)
         DO IY=1,NY

            YI = IY + FIYCENMSHY
            IF (YI < RY1) YI = MIN(YI+RYE2, RY2)
            IF (YI > RY2) YI = MAX(YI+RYE1, RY1)

            YCOD =  YI * CODDSCLI + IYCEN
            YSID = -YI * SIDDSCLI + IXCEN

            DO IX=1,NX
               XI = IX + FIXCENMSHX                           
               IF (XI  <  RX1) XI = MIN(XI+RXE2, RX2)   
               IF (XI  >  RX2) XI = MAX(XI+RXE1, RX1) 
 
               YOLD          = XI * SIDDSCLI + YCOD  
               XOLD          = XI * CODDSCLI + YSID  

               BUFOUT(IX,IY) = QUADRI_PAD(XOLD, YOLD, 
     &                                NX, NY, NXP,NYP,XIMG)
            ENDDO
         ENDDO

         IRTFLG = 0

         END

#ifdef NEVER
               if (xold < 1 )  Write(6,*) 'bad xold:',xold,xi
               if (xold > nx ) Write(6,*) 'bad xold:',xold,xi
               if (yold < 1 )  Write(6,*) 'bad yold:',yold,yi
               if (yold > ny ) Write(6,*) 'bad yold:',yold,yi

 
               if (IX < 1 )  Write(6,*) 'bad ix:',ix
               if (IX > nx ) Write(6,*) 'bad ix:',ix
               if (IY < 1 )  Write(6,*) 'bad IY:',IY
               if (IY > ny ) Write(6,*) 'bad IY:',IY
#endif
 


@


1.22
log
@rye1 bug!!
@
text
@d11 1
d35 5
a39 1
C RTSQ(XIMG,BUFOUT, NX,NY, NXP,NYP, THETA,SCLI,SHXI,SHYI,IRTFLG)
d153 2
a154 2
     &                     THETA,SCLI,SHXI,SHYI, 
     &                     USEBACK,BACK,   IRECOFF,LUN)
d279 3
a281 1
C******************************** RTSQ_PAD *****************************
d283 1
a283 1
         SUBROUTINE RTSQ_PAD(XIMG,BUFOUT, NX,NY, NXP,NYP,
d287 3
a289 3
         REAL            :: XIMG(NX,NY)
         REAL            :: BUFOUT(NXP,NYP)   
         INTEGER         :: NX,NY, NXP,NYP
d302 1
a302 1
         REAL            :: quadri
d366 3
a368 1
               BUFOUT(IX,IY) = QUADRI(XOLD, YOLD, NX, NY, XIMG)
d373 1
d376 5
d382 7
@


1.21
log
@RTSQ_PAD without lun
@
text
@d10 1
d101 1
a101 1
            RY2  = -NY - 1
a102 1

d106 2
a107 2
         COD        = COS(THETA * DGR_TO_RAD)
         SID        = SIN(THETA * DGR_TO_RAD)
d139 2
d199 1
a199 1
            RY2  = -NY - 1
d325 1
a325 1
            RY2  = -NY - 1
@


1.20
log
@REMOVED LINE-BY-LINE OUTPUT, added padding for output also
@
text
@d275 1
a275 1
     &                     THETA,SCLI,SHXI,SHYI, IRECOFF,LUN)
d279 1
a279 1
         REAL            :: BUFOUT(NXP,NYP)   ! Y MAY BE: 1
d282 1
a282 1
         INTEGER         :: IRECOFF,LUN
d291 1
a291 1
         INTEGER         :: IYCEN,IXCEN,IT,IX,IY
a294 1

d329 2
a330 2
         COD        = COS(THETA * DGR_TO_RAD)
         SID        = SIN(THETA * DGR_TO_RAD)
d333 2
a334 2
         CODDSCLI   = COD / SCLI
         SIDDSCLI   = SID / SCLI
d340 1
a340 2
         IT = 1             ! IF WRITING TO OUTPUT

a341 1
            IF (LUN <= 0) IT = IY
a349 1
c$omp       parallel do private(ix,xi,xold,yold)
d357 1
a357 1
               BUFOUT(IX,IT) = QUADRI(XOLD, YOLD, NX, NY, XIMG)
d359 1
d361 1
a361 5
            IF (LUN > 0) THEN
C              WRITE CURRENT LINE TO FILE
               CALL WRTLIN(LUN,BUFOUT,NX,IRECOFF+IY)
            ENDIF
         ENDDO
@


1.19
log
@cosmetic
@
text
@d9 2
d12 20
d33 1
a33 1
C RTSQ(XIMG,BUFOUT,NX,NY,THETA,SCLI,SHXI,SHYI,IREC1,LUN)
d39 2
a40 1
C             NX,NY       IMAGE SIZE                         (INPUT)
d50 2
a51 2
         SUBROUTINE RTSQ(XIMG,BUFOUT, NX,NY,
     &                     THETA,SCLI,SHXI,SHYI, IRECOFF,LUN)
a54 1
         REAL            :: BUFOUT(NX,*)       ! Y DIM. MAY BE: 1
d56 2
d59 1
a59 1
         INTEGER         :: IRECOFF,LUN
d66 3
a68 3
         REAL            :: RYE2,RYE1,RXE2,RXE1
         REAL            :: YI,YCOD,YSID,X1,YOLD,XOLD
         INTEGER         :: IYCEN,IXCEN,IT,IX,IY
d70 1
a70 1
         REAL            :: QUADRI
d72 1
a72 2

C        SHIFT WITHIN IMGE BOUNDARY
d102 1
d106 2
a107 2
         COD = COS(THETA * DGR_TO_RAD)
         SID = SIN(THETA * DGR_TO_RAD)
d117 1
a117 2
         IT = 1             ! IF WRITING TO OUTPUT

a118 1
            IF (LUN <= 0) IT = IY
a126 1
c$omp       parallel do private(ix,xi,xold,yold)
d129 5
a133 2
               IF (XI < RX1) XI = MIN(XI+RXE2, RX2)   
               IF (XI > RX2) XI = MAX(XI+RXE1, RX1)
d135 1
a135 4
               YOLD = XI * SIDDSCLI + YCOD  
               XOLD = XI * CODDSCLI + YSID  

               BUFOUT(IX,IT) = QUADRI(XOLD, YOLD, NX, NY, XIMG)
a137 4
            IF (LUN > 0) THEN
C              WRITE CURRENT LINE TO FILE
               CALL WRTLIN(LUN,BUFOUT,NX,IRECOFF+IY)
            ENDIF
d139 2
d293 1
a293 1
         REAL            :: QUADRI
d296 1
a296 1
C        SHIFT WITHIN IMGE BOUNDARY
@


1.18
log
@RENAMED FROM: ROT2QS, many var. renamed also
@
text
@d82 2
a83 2
         COD        = COS(THETA * DGR_TO_RAD)
         SID        = SIN(THETA * DGR_TO_RAD)
d111 3
a113 2
               YOLD          = XI * SIDDSCLI + YCOD  
               XOLD          = XI * CODDSCLI + YSID  
@


1.17
log
@irec1 --> irecoff
@
text
@d4 5
a8 4
C ROT2QS.F      BUFOUT RETURN ADDED, SPEEDED UP   12/28/06 ArDean Leith
C               MERGED WITH ROT2QS_DL              1/12/11 ArDean Leith
C               ROT2QS_PAD ADDED                   8/12/11 ArDean Leith
C               ROT2QS_BACK ADDED                 10/05/11 ArDean Leith
d11 1
a11 1
C ROT2QS(XIMG,BUFOUT,NSAM,NROW,THETA,SCLI,SHXI,SHYI,IREC1,LUN)
d17 1
a17 1
C             NSAM,NROW   IMAGE SIZE                         (INPUT)
d27 99
a125 1
         SUBROUTINE ROT2QS_BACK(XIMG,BUFOUT, NSAM,NROW,
d130 3
a132 3
         REAL            :: XIMG(NSAM,NROW)
         REAL            :: BUFOUT(NSAM,*)   ! Y MAY BE: 1
         INTEGER         :: NSAM,NROW 
d141 5
a145 4
         REAL            :: SHX,SHY,RN2,SN2,RW2,RS2,COD,SID,XI
         REAL            :: CODDSCLI,SIDDSCLI,FKCENTMSHX,FICENTMSHY 
         REAL            :: RE1,RE2,RF1,RF2,YI,YCOD,YSID,X1,YOLD,XOLD
         INTEGER         :: ICENT,KCENT,IT,I,K
d149 31
a179 12
         SHX   = AMOD(SHXI,FLOAT(NSAM))
         SHY   = AMOD(SHYI,FLOAT(NROW))
         ICENT = NROW/2+1
         KCENT = NSAM/2+1
         RN2   = -NROW/2
         SN2   = -NSAM/2

         RW2   = -RN2
         RS2   = -SN2

         IF (MOD(NSAM,2) .EQ. 0) RW2 = RW2 - 1.0
         IF (MOD(NROW,2) .EQ. 0) RS2 = RS2 - 1.0
d181 1
d184 2
d189 3
a191 7
         FKCENTMSHX = -KCENT - SHX
         FICENTMSHY = -ICENT - SHY

         RE1        = RW2 - RN2 + 1.0
         RE2        = RN2 - RW2 - 1.0
         RF1        = RS2 - SN2 + 1.0
         RF2        = SN2 - RS2 - 1.0
d195 2
a196 2
         DO I=1,NROW
            IF (LUN .LE. 0) IT = I
d198 1
a198 1
            YI = I + FICENTMSHY
d200 2
a201 2
            IF (YI < RN2) YI = MIN(YI+RE1, RW2)
            IF (YI > RW2) YI = MAX(YI+RE2, RN2)
d203 2
a204 2
            YCOD =  YI * CODDSCLI + ICENT
            YSID = -YI * SIDDSCLI + KCENT
d207 3
a209 3
c$omp          parallel do private(k,xi,xold,yold)
               DO K=1,NSAM
                  XI      = K + FKCENTMSHX  
d211 2
a212 2
                  IF (XI < SN2) XI = MIN(XI+RF1, RS2)   
                  IF (XI > RS2) XI = MAX(XI+RF2, SN2)  
d217 2
a218 2
                  IF (YOLD < 1 .OR. YOLD > NROW .OR. 
     &                XOLD < 1 .OR. XOLD > NSAM) THEN
d220 1
a220 1
                     BUFOUT(K,IT) = BACK
d224 1
a224 1
                     BUFOUT(K,IT) = QUADRI(XOLD,YOLD, NSAM,NROW, XIMG)
d229 3
a231 3
c$omp          parallel do private(k,xi,xold,yold)
               DO K=1,NSAM
                  XI      = K + FKCENTMSHX  
d233 2
a234 2
                  IF (XI < SN2) XI = MIN(XI+RF1, RS2)   
                  IF (XI > RS2) XI = MAX(XI+RF2, SN2)  
d239 1
a239 1
                  BUFOUT(K,IT) = QUADRI(XOLD,YOLD, NSAM,NROW, XIMG)
d243 1
a243 1
            IF (LUN .GT. 0) THEN
d245 1
a245 1
               CALL WRTLIN(LUN,BUFOUT,NSAM,IRECOFF+I)
d252 1
a252 1
C******************************** ROT2QS *****************************
d254 1
a254 1
         SUBROUTINE ROT2QS(XIMG,BUFOUT, NSAM,NROW,
d258 3
a260 3
         REAL            :: XIMG(NSAM,NROW)
         REAL            :: BUFOUT(NSAM,*)   ! Y MAY BE: 1
         INTEGER         :: NSAM,NROW 
d267 5
a271 4
         REAL            :: SHX,SHY,RN2,SN2,RW2,RS2,COD,SID,XI
         REAL            :: CODDSCLI,SIDDSCLI,FKCENTMSHX,FICENTMSHY 
         REAL            :: RE1,RE2,RF1,RF2,YI,YCOD,YSID,X1,YOLD,XOLD
         INTEGER         :: ICENT,KCENT,IT,I,K
d276 30
a305 8
         SHX   = AMOD(SHXI,FLOAT(NSAM))
         SHY   = AMOD(SHYI,FLOAT(NROW))
         ICENT = NROW/2+1
         KCENT = NSAM/2+1
         RN2   = -NROW/2
         SN2   = -NSAM/2
         RW2   = -RN2
         RS2   = -SN2
d307 1
a307 2
         IF (MOD(NSAM,2) .EQ. 0) RW2 = RW2 - 1.0
         IF (MOD(NROW,2) .EQ. 0) RS2 = RS2 - 1.0
d309 1
d312 2
d317 3
a319 7
         FKCENTMSHX = -KCENT - SHX
         FICENTMSHY = -ICENT - SHY

         RE1        = RW2 - RN2 + 1.0
         RE2        = RN2 - RW2 - 1.0
         RF1        = RS2 - SN2 + 1.0
         RF2        = SN2 - RS2 - 1.0
a321 2
         DO I=1,NROW
            IF (LUN .LE. 0) IT = I
d323 2
a324 16
            YI = I + FICENTMSHY
            IF (YI.LT.RN2) YI = MIN(YI+RE1, RW2)
            IF (YI.GT.RW2) YI = MAX(YI+RE2, RN2)

            YCOD =  YI * CODDSCLI + ICENT
            YSID = -YI * SIDDSCLI + KCENT

c$omp       parallel do private(k,xi,xold,yold)
            DO K=1,NSAM
               XI = K + FKCENTMSHX                           
               IF (XI .LT. SN2) XI = MIN(XI+RF1, RS2)   
               IF (XI .GT. RS2) XI = MAX(XI+RF2, SN2)  
               YOLD         = XI * SIDDSCLI + YCOD  
               XOLD         = XI * CODDSCLI + YSID  
               BUFOUT(K,IT) = QUADRI(XOLD, YOLD, NSAM, NROW, XIMG)
            ENDDO
d326 16
a341 75
            IF (LUN .GT. 0) THEN
C              WRITE CURRENT LINE TO FILE
               CALL WRTLIN(LUN,BUFOUT,NSAM,IRECOFF+I)
            ENDIF
         ENDDO
         END


C******************************** ROT2QS *****************************

         SUBROUTINE ROT2QS_PAD(XIMG,BUFOUT, NSAM,NROW, NSAMP,NROWP,
     &                     THETA,SCLI,SHXI,SHYI, IRECOFF,LUN)

         IMPLICIT NONE
         REAL            :: XIMG(NSAM,NROW)
         REAL            :: BUFOUT(NSAMP,NROWP)   ! Y MAY BE: 1
         INTEGER         :: NSAM,NROW, NSAMP,NROWP
         REAL            :: THETA,SCLI,SHXI,SHYI
         INTEGER         :: IRECOFF,LUN

	 REAL, PARAMETER :: QUADPI = 3.14159265358979323846
	 REAL, PARAMETER :: DGR_TO_RAD = (QUADPI/180)

         REAL            :: SHX,SHY,RN2,SN2,RW2,RS2,COD,SID,XI
         REAL            :: CODDSCLI,SIDDSCLI,FKCENTMSHX,FICENTMSHY 
         REAL            :: RE1,RE2,RF1,RF2,YI,YCOD,YSID,X1,YOLD,XOLD
         INTEGER         :: ICENT,KCENT,IT,I,K

         REAL            :: QUADRI


         SHX   = AMOD(SHXI,FLOAT(NSAM))
         SHY   = AMOD(SHYI,FLOAT(NROW))
         ICENT = NROW/2+1
         KCENT = NSAM/2+1
         RN2   = -NROW/2
         SN2   = -NSAM/2
         RW2   = -RN2
         RS2   = -SN2

         IF (MOD(NSAM,2) .EQ. 0) RW2 = RW2 - 1.0
         IF (MOD(NROW,2) .EQ. 0) RS2 = RS2 - 1.0

         COD        = COS(THETA * DGR_TO_RAD)
         SID        = SIN(THETA * DGR_TO_RAD)
         CODDSCLI   = COD / SCLI
         SIDDSCLI   = SID / SCLI

         FKCENTMSHX = -KCENT - SHX
         FICENTMSHY = -ICENT - SHY

         RE1        = RW2 - RN2 + 1.0
         RE2        = RN2 - RW2 - 1.0
         RF1        = RS2 - SN2 + 1.0
         RF2        = SN2 - RS2 - 1.0

         IT = 1             ! IF WRITING TO OUTPUT
         DO I=1,NROW
            IF (LUN .LE. 0) IT = I

            YI = I + FICENTMSHY
            IF (YI.LT.RN2) YI = MIN(YI+RE1, RW2)
            IF (YI.GT.RW2) YI = MAX(YI+RE2, RN2)

            YCOD =  YI * CODDSCLI + ICENT
            YSID = -YI * SIDDSCLI + KCENT

c$omp       parallel do private(k,xi,xold,yold)
            DO K=1,NSAM
               XI = K + FKCENTMSHX                           
               IF (XI .LT. SN2) XI = MIN(XI+RF1, RS2)   
               IF (XI .GT. RS2) XI = MAX(XI+RF2, SN2)  
               YOLD         = XI * SIDDSCLI + YCOD  
               XOLD         = XI * CODDSCLI + YSID  
               BUFOUT(K,IT) = QUADRI(XOLD, YOLD, NSAM, NROW, XIMG)
d344 1
a344 1
            IF (LUN .GT. 0) THEN
d346 1
a346 1
               CALL WRTLIN(LUN,BUFOUT,NSAM,IRECOFF+I)
@


1.16
log
@added rot2qs_back
@
text
@d28 1
a28 1
     &                     USEBACK,BACK,   IREC1,LUN)
d37 1
a37 1
         INTEGER         :: IREC1,LUN
a57 1
            write(6,*) ' useback:',useback
d127 1
a127 1
               CALL WRTLIN(LUN,BUFOUT,NSAM,IREC1+I)
d137 1
a137 1
     &                     THETA,SCLI,SHXI,SHYI, IREC1,LUN)
d144 1
a144 1
         INTEGER         :: IREC1,LUN
d205 1
a205 1
               CALL WRTLIN(LUN,BUFOUT,NSAM,IREC1+I)
d214 1
a214 1
     &                     THETA,SCLI,SHXI,SHYI, IREC1,LUN)
d221 1
a221 1
         INTEGER         :: IREC1,LUN
d282 1
a282 1
               CALL WRTLIN(LUN,BUFOUT,NSAM,IREC1+I)
@


1.15
log
@rot.._pad added
@
text
@d7 1
d19 2
d26 111
d212 1
d287 2
@


1.14
log
@merged with rot2qs_dl
@
text
@d6 1
d96 77
@


1.13
log
@GPL_2010
@
text
@a0 87
C++*********************************************************************
C
C ROT2QS.F
C               COSMETIC                             MAY 09 ARDEAN LEITH

C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@wadsworth.org                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C ROT2QS(X,OUT,NSAM,NROW, THETA,SCLI,SHXI,SHYI,LUN2,LB).F
C
C PURPOSE: ROTATES AND SHIFTS A SLICE OF AN IMAGE, ROW BY ROW
C
C PARAMETERS: X           INPUT IMAGE                        (INPUT)
C             OUT         OUTPUT IMAGE OR LINE BUFFER        (OUTPUT)
C             NSAM,NROW   IMAGE SIZE                         (INPUT)
C             THETA,SCLI  ROTATION AND SCALE                 (INPUT)
C             SHXI,SHYI   SHIFTS                             (INPUT)
C             LB          IMAGE STARTING RECORD              (INPUT)
C             LUN2        LUN FOR OUTPUT (0 IS NO FILE OUT)  (INPUT)
C
C--*********************************************************************

         SUBROUTINE ROT2QS(X,OUT,NSAM,NROW,
     &                        THETA,SCLI,SHXI,SHYI,LUN2,LB)

         DIMENSION  X(NSAM,NROW),OUT(NSAM)
	 PARAMETER (QUADPI = 3.14159265358979)
	 PARAMETER (DGR_TO_RAD = (QUADPI/180))

         SHX   = MOD(SHXI,FLOAT(NSAM))
         SHY   = MOD(SHYI,FLOAT(NROW))
         ICENT = NROW/2+1
         KCENT = NSAM/2+1
         RN2   = -NROW/2
         SN2   = -NSAM/2
         RW2   = -RN2
         RS2   = -SN2

         IF (MOD(NSAM,2) .EQ. 0) RW2 = RW2 - 1.0
         IF (MOD(NROW,2) .EQ. 0) RS2 = RS2 - 1.0

         COD = COS(THETA*DGR_TO_RAD)
         SID = SIN(THETA*DGR_TO_RAD)
         
         DO I=1,NROW
           YI = I - ICENT - SHY
           IF (YI .LT. RN2) YI = MIN(RW2+YI-RN2+1.0, RW2)
           IF (YI .GT. RW2) YI = MAX(RN2+YI-RW2-1.0, RN2)

           YCOD =  YI * COD / SCLI + ICENT
           YSID = -YI * SID / SCLI + KCENT

c$omp      parallel do private(k,xi,xold,yold)
           DO K=1,NSAM
              XI = K - KCENT - SHX
              IF (XI .LT. SN2) XI = MIN(RS2+XI-SN2+1.0, RS2)
              IF (XI .GT. RS2) XI = MAX(SN2+XI-RS2-1.0, SN2)

              YOLD   = XI * SID / SCLI + YCOD
              XOLD   = XI * COD / SCLI + YSID

              OUT(K) = QUADRI(XOLD, YOLD, NSAM, NROW, X)

	   ENDDO
           CALL WRTLIN(LUN2,OUT,NSAM,LB+I)
	 ENDDO
         END

d4 2
a5 2
C ROT2QS_DL.F    BUFOUT RETURN ADDED, SPEEDED UP      12/28/06 ArDean Leith
C **********************************************************************
d8 1
a8 1
C ROT2QS_DL(XIMG,BUFOUT,NSAM,NROW,THETA,SCLI,SHXI,SHYI,IREC1,LUN)
d22 1
a22 1
         SUBROUTINE ROT2QS_DL(XIMG,BUFOUT, NSAM,NROW,
d25 1
d27 5
a31 1
         REAL            :: BUFOUT(NSAM,*)
d35 8
d68 1
a68 1
         IT = 1
@


1.12
log
@ cosmetic
@
text
@a6 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d8 5
a12 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d14 1
a14 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d19 1
a19 1
C=* This program is distributed in the hope that it will be useful,    *
d21 1
a21 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a22 1
C=*                                                                    *
d24 1
a24 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
a92 23
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2007  Health Research Inc.                      *
C=*                                                                    *
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C=*                                                                    *
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* This program is distributed in the hope that it will be useful,    *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
C=* General Public License for more details.                           *
C=*                                                                    *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
C=*                                                                    *
@


1.11
log
@RTD SQ
@
text
@d4 2
a5 1
C
d8 1
a8 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d32 3
a34 1
C ROT2QS.F
d36 7
d46 1
a46 1
         SUBROUTINE  ROT2QS(X,OUT,NSAM,NROW,
d50 1
a50 1
	 PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
d53 2
a54 2
         SHX   = AMOD(SHXI,FLOAT(NSAM))
         SHY   = AMOD(SHYI,FLOAT(NROW))
d62 2
a63 2
         IF (MOD(NSAM,2).EQ.0)  RW2 = RW2-1.0
         IF (MOD(NROW,2).EQ.0)  RS2 = RS2-1.0
d67 1
d70 4
a73 3
           IF (YI.LT.RN2)  YI = AMIN1(RW2+YI-RN2+1.0,RW2)
           IF (YI.GT.RW2)  YI = AMAX1(RN2+YI-RW2-1.0,RN2)
           YCOD =  YI * COD  / SCLI + ICENT
d75 1
d78 8
a85 6
             XI = K - KCENT - SHX
             IF (XI.LT.SN2)  XI = AMIN1(RS2+XI-SN2+1.0,RS2)
             IF (XI.GT.RS2)  XI = AMAX1(SN2+XI-RS2-1.0,SN2)
             YOLD   = XI * SID / SCLI + YCOD
             XOLD   = XI * COD / SCLI + YSID
             OUT(K) = QUADRI(XOLD, YOLD, NSAM, NROW, X)
d153 2
a154 2
         IF (MOD(NSAM,2).EQ.0) RW2 = RW2 - 1.0
         IF (MOD(NROW,2).EQ.0) RS2 = RS2 - 1.0
d156 4
a159 4
         COD       = COS(THETA * DGR_TO_RAD)
         SID       = SIN(THETA * DGR_TO_RAD)
         CODDSCLI  = COD / SCLI
         SIDDSCLI  = SID / SCLI
d164 4
a167 4
         RE1       = RW2 - RN2 + 1.0
         RE2       = RN2 - RW2 - 1.0
         RF1       = RS2 - SN2 + 1.0
         RF2       = SN2 - RS2 - 1.0
d196 1
@


1.10
log
@GPL License fixed
@
text
@d76 105
@


1.9
log
@HRI GPL License used
@
text
@a1 1
C++************************************************************************
a5 3
C **************************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK         *
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
d9 1
a9 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a28 7

C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *  THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR       *
C *  LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR    *
C *  USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF     *
C *  THE CENTER FOR LABORATORIES AND RESEARCH   			   *
a29 1
C **************************************************************************
a34 1
C--************************************************************************
@


1.8
log
@debug output should not have been left in
@
text
@d1 1
d6 1
d8 1
d10 24
d40 1
d46 1
@


1.7
log
@cosmetic
@
text
@d55 1
a55 7
        if (out(k) .lt. 0) then
          write(6,*) ' out(',k,')=',out(k)
          write(6,*) ' xi,yi: ',xi,yi
          write(6,*) ' xold,yold: ',xold,yold
          write(6,*) ' i,k: ',i,k
             OUT(K) = QUADRI(XOLD, YOLD, NSAM, NROW, X)
        endif
@


1.6
log
@OpenMP
@
text
@d3 1
a3 1
C $$ ROT2QS.FOR
d15 1
d19 1
a19 3
C
C $$ ROT2QS.FOR
C
d22 1
d24 38
a61 29
	PARAMETER (QUADPI = 3.141592653589793238462643383279502884197)
	PARAMETER (DGR_TO_RAD = (QUADPI/180))
C
         SHX=AMOD(SHXI,FLOAT(NSAM))
         SHY=AMOD(SHYI,FLOAT(NROW))
         ICENT=NROW/2+1
         KCENT=NSAM/2+1
         RN2=-NROW/2
         SN2=-NSAM/2
         RW2=-RN2
         RS2=-SN2
         IF(MOD(NSAM,2).EQ.0)  RW2=RW2-1.0
         IF(MOD(NROW,2).EQ.0)  RS2=RS2-1.0
         COD=COS(THETA*DGR_TO_RAD)
         SID=SIN(THETA*DGR_TO_RAD)
         DO    I=1,NROW
           YI=I-ICENT-SHY
           IF(YI.LT.RN2)  YI=AMIN1(RW2+YI-RN2+1.0,RW2)
           IF(YI.GT.RW2)  YI=AMAX1(RN2+YI-RW2-1.0,RN2)
           YCOD=YI*COD/SCLI+ICENT
           YSID=-YI*SID/SCLI+KCENT
c$omp parallel do private(k,xi,xold,yold)
           DO    K=1,NSAM
             XI=K-KCENT-SHX
             IF(XI.LT.SN2)  XI=AMIN1(RS2+XI-SN2+1.0,RS2)
             IF(XI.GT.RS2)  XI=AMAX1(SN2+XI-RS2-1.0,SN2)
             YOLD=XI*SID/SCLI+YCOD
             XOLD=XI*COD/SCLI+YSID
             OUT(K)=QUADRI(XOLD, YOLD, NSAM, NROW, X)
d63 1
a63 1
           CALL  WRTLIN(LUN2,OUT,NSAM,LB+I)
@


1.5
log
@*** empty log message ***
@
text
@d45 1
a45 1
c$doacross local(k,xi,xold,yold)
@


1.4
log
@trig
@
text
@d25 1
a25 1
	PARAMETER (DRG_TO_RAD = (QUADPI/180))
d37 2
a38 2
         COD=COS(THETA*DRG_TO_RAD)
         SID=SIN(THETA*DRG_TO_RAD)
@


1.3
log
@*** empty log message ***
@
text
@d24 2
a25 1
CNO_SAVE
d37 2
a38 2
         COD=COSD(THETA)
         SID=SIND(THETA)
@


1.2
log
@nosave, mp
@
text
@d38 1
a38 1
         DO  2  I=1,NROW
d45 1
a45 1
           DO  3  K=1,NSAM
d52 1
a52 1
3          CONTINUE
d54 1
a54 1
2        CONTINUE
@


1.1
log
@Initial revision
@
text
@d24 1
d44 1
@
