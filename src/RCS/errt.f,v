head	1.62;
access;
symbols
	pre_mrcs:1.62
	healthdept_2018:1.62
	pre_getangas:1.57
	GPL2010:1.57
	pre_GPL2010:1.56
	pre_var_equation:1.56
	pre_fftwrings:1.53
	pre_opfiles:1.52
	src:1.52
	best-code:1.52
	x-named-regs:1.50
	x:1.50
	v13-00:1.50
	pre_GPL:1.48
	prec_CA:1.46
	noindx:1.43
	Bproc:1.36
	oct21:1.27
	last77:1.19;
locks; strict;
comment	@c @;


1.62
date	2018.10.03.14.34.05;	author leith;	state Exp;
branches;
next	1.61;

1.61
date	2012.04.16.18.04.01;	author leith;	state Exp;
branches;
next	1.60;

1.60
date	2011.05.11.12.08.08;	author leith;	state Exp;
branches;
next	1.59;

1.59
date	2011.03.18.18.28.12;	author leith;	state Exp;
branches;
next	1.58;

1.58
date	2011.03.11.15.28.51;	author leith;	state Exp;
branches;
next	1.57;

1.57
date	2010.06.24.13.25.32;	author leith;	state Exp;
branches;
next	1.56;

1.56
date	2009.06.26.12.06.04;	author leith;	state Exp;
branches;
next	1.55;

1.55
date	2008.10.31.15.20.10;	author leith;	state Exp;
branches;
next	1.54;

1.54
date	2008.10.17.12.51.57;	author leith;	state Exp;
branches;
next	1.53;

1.53
date	2007.10.10.12.22.56;	author leith;	state Exp;
branches;
next	1.52;

1.52
date	2006.02.16.20.18.49;	author leith;	state Exp;
branches;
next	1.51;

1.51
date	2006.01.06.14.53.06;	author leith;	state Exp;
branches;
next	1.50;

1.50
date	2005.10.17.20.12.22;	author leith;	state Exp;
branches;
next	1.49;

1.49
date	2005.10.17.18.06.25;	author leith;	state Exp;
branches;
next	1.48;

1.48
date	2005.06.28.15.42.02;	author leith;	state Exp;
branches;
next	1.47;

1.47
date	2004.10.15.15.36.53;	author leith;	state Exp;
branches;
next	1.46;

1.46
date	2003.07.25.14.54.01;	author leith;	state Exp;
branches;
next	1.45;

1.45
date	2003.01.23.19.42.42;	author leith;	state Exp;
branches;
next	1.44;

1.44
date	2003.01.23.19.35.11;	author leith;	state Exp;
branches;
next	1.43;

1.43
date	2002.06.28.16.25.25;	author leith;	state Exp;
branches;
next	1.42;

1.42
date	2002.05.13.14.13.39;	author leith;	state Exp;
branches;
next	1.41;

1.41
date	2002.05.02.16.21.38;	author pawel;	state Exp;
branches;
next	1.40;

1.40
date	2002.04.04.18.13.37;	author leith;	state Exp;
branches;
next	1.39;

1.39
date	2002.04.04.18.12.00;	author leith;	state Exp;
branches;
next	1.38;

1.38
date	2002.04.04.17.00.21;	author leith;	state Exp;
branches;
next	1.37;

1.37
date	2002.04.04.15.06.49;	author leith;	state Exp;
branches;
next	1.36;

1.36
date	2000.09.07.13.45.44;	author leith;	state Exp;
branches;
next	1.35;

1.35
date	2000.08.31.18.01.37;	author leith;	state Exp;
branches;
next	1.34;

1.34
date	2000.08.30.18.29.55;	author leith;	state Exp;
branches;
next	1.33;

1.33
date	2000.08.30.15.45.52;	author leith;	state Exp;
branches;
next	1.32;

1.32
date	2000.08.14.15.01.37;	author leith;	state Exp;
branches;
next	1.31;

1.31
date	2000.08.08.20.16.09;	author leith;	state Exp;
branches;
next	1.30;

1.30
date	2000.08.01.19.24.27;	author leith;	state Exp;
branches;
next	1.29;

1.29
date	2000.08.01.19.23.14;	author leith;	state Exp;
branches;
next	1.28;

1.28
date	99.12.28.16.21.03;	author leith;	state Exp;
branches;
next	1.27;

1.27
date	99.10.18.19.14.31;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	99.08.20.13.10.55;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	99.08.03.12.58.42;	author pawel;	state Exp;
branches;
next	1.24;

1.24
date	99.08.03.12.56.34;	author pawel;	state Exp;
branches;
next	1.23;

1.23
date	99.07.29.17.28.23;	author pawel;	state Exp;
branches;
next	1.22;

1.22
date	99.07.29.13.20.01;	author pawel;	state Exp;
branches;
next	1.21;

1.21
date	99.07.29.13.16.18;	author pawel;	state Exp;
branches;
next	1.20;

1.20
date	99.07.29.13.12.49;	author pawel;	state Exp;
branches;
next	1.19;

1.19
date	98.11.05.14.30.06;	author pawel;	state Exp;
branches;
next	1.18;

1.18
date	98.07.22.17.37.13;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	98.03.23.18.30.50;	author pawel;	state Exp;
branches;
next	1.16;

1.16
date	97.09.30.20.22.53;	author pawel;	state Exp;
branches;
next	1.15;

1.15
date	97.09.17.15.53.45;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	97.04.21.18.33.16;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	96.08.27.13.33.22;	author pawel;	state Exp;
branches;
next	1.12;

1.12
date	96.07.26.14.56.43;	author pawel;	state Exp;
branches;
next	1.11;

1.11
date	96.07.25.18.14.20;	author pawel;	state Exp;
branches;
next	1.10;

1.10
date	96.05.02.13.28.48;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	96.04.04.14.55.28;	author pawel;	state Exp;
branches;
next	1.8;

1.8
date	96.03.13.21.46.10;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	95.04.21.16.40.41;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	95.01.26.13.50.28;	author pawel;	state Exp;
branches;
next	1.5;

1.5
date	94.07.19.12.26.01;	author leith;	state Exp;
branches;
next	1.4;

1.4
date	94.05.17.17.27.58;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	94.05.17.13.02.19;	author leith;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.04.46;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.48.32;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.62
log
@email_health_dept
@
text
@C++*********************************************************************
C
C ERRT.F               ALTERED OUTPUT UNITS           SEPT  97 A. Leith
C                      ADDED ERROR 44                 JULY  98 A. Leith
C                      ADDED ERROR 102                JULY  00 A. Leith
C                      ADDED ERROR CLEANUP EXECUTION  APRIL 02 A. Leith
C                      ADDED SPIREOUT                 JUNE  05 A. Leith
C                      ADDED ERR 8                    FEB   06 A. Leith
C                      MPI                            OCT   07 A. Leith
C                      MPI NOW PRINTS FROM ALL PID    OCT   08 A. Leith
C                      DOUBLE OUTPUT BUG FIXED        JUN   09 A. Leith
C                      IEEE                           MAR   11 A. Leith
C
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2010  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C
C  ERRT(IERRT,PROG,NE)
C
C  PURPOSE:      WRITE OUT AN ERROR MESSAGE, HALTS IF IN BATCH MODE
C 
C  PARAMETERS:   IERRT   ERROR CODE NUMBER                     (SENT)
C                PROG    STRING ALPHANUMERIC CHARACTERS CONTAINING
C                        PROGRAM NAME OR ERROR MESSAGE (IF IERRT IS
C                        EQUAL TO 101 or 102)                  (SENT)
C                NE      ONLY USED FOR ERROR 46 & 102          (SENT)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C--*********************************************************************

      SUBROUTINE ERRT(IERRT,PROG,NE)

#ifndef SP_GFORTRAN
#ifndef USE_MPI
#ifndef __APPLE__
        USE, intrinsic :: ieee_exceptions
#endif
#endif
#endif

      INCLUDE 'CMBLOCK.INC' 

      CHARACTER (LEN=*)   :: PROG
      CHARACTER (LEN=78)  :: MESG
      CHARACTER (LEN=180) :: CSTRING
      CHARACTER (LEN=1)   :: NUL

C     FOLLOWING COMMON BLOCKS ARE USED BY THIS MODULE
C     COMMON /UNITS/, /FUNCTION/, /PROC/

      CALL SET_MPI(ICOMM,MYPID,MPIERR)

      IF (IERRT .EQ. 16) THEN

C         WRITES:  '.BAD INPUT PARAMETER(S). RE-ENTER' TO NOUT, THEN
C                 WILL ALLOW RE-INPUT

          WRITE(NOUT,116)
116       FORMAT(' .BAD INPUT PARAMETER(S). RE-ENTER: ')
          GOTO 2201

      ELSEIF (IERRT .EQ. 8) THEN

C         WRITES:  'ERROR WITH REGISTER VARIABLE --' THEN WRITES
C                 PROG (ERROR MESSAGE)  
C         TO TERMINAL AND RESULTS FILE

          WRITE(NDAT,904) PROG
          IF (NDAT .NE. 6) WRITE(6,904) PROG
904       FORMAT(' *** ERROR UNDEFINED REGISTER VARIABLE: ',A,/)

C         SKIP USUAL MESSAGE OUTPUT
          GOTO 2201

      ELSEIF (IERRT .EQ. 46 .AND. NE .GT. 0) THEN

C         WRITES:  'ERROR MEMORY ALLOCATION FAILED' THEN WRITES
C                 PROG (ERROR MESSAGE) AND NE (ALLOCATION VALUE) 
C         TO TERMINAL AND RESULTS FILE

          WRITE(NDAT,903) PROG,NE
          IF (NDAT .NE. 6) WRITE(6,903) PROG,NE
903       FORMAT(' *** ERROR MEMORY ALLOCATION FAILED -- ',A,': ',I12/)

C         SKIP USUAL MESSAGE OUTPUT
          GOTO 2201


      ELSEIF (IERRT .EQ. 101) THEN
C         WRITES  PROG (ERROR MESSAGE) TO TERMINAL AND RESULTS FILE

          WRITE(NDAT,901) PROG                       ! 3 = NDAT
          IF (NOUT .NE. NDAT) WRITE(NOUT,901) PROG   ! 6 = NOUT
          IF (NOUT .EQ. NDAT) WRITE(0,901) PROG      ! 0 = TERMINAL
901       FORMAT(' *** ERROR: ',A/)

C         SKIP USUAL MESSAGE OUTPUT
          GOTO 2201


      ELSEIF (IERRT .EQ. 102) THEN
C         WRITES  PROG (ERROR MESSAGE) AND NE (INTEGER VALUE) 
C         TO TERMINAL AND RESULTS FILE

          WRITE(NDAT,902) PROG,NE                       ! 3 = NDAT
          IF (NOUT .NE. NDAT) WRITE(NOUT,902) PROG,NE   ! 6 = NOUT
          IF (NOUT .EQ. NDAT) WRITE(0,902) PROG,NE      ! 0 = TERMINAL
902       FORMAT(' *** ERROR -- ',A,': ',I8/)

C         SKIP USUAL MESSAGE OUTPUT
          GOTO 2201

      ELSEIF (IERRT .EQ. 100) THEN
C         SKIP ANY MESSAGE OUTPUT
          GOTO 2201

       ENDIF

C      PROCESS ALL OTHER ERROR CODES (1 - 47)

       SELECT CASE(IERRT)
          CASE (1)
          MESG = 'INCONSISTENT PICTURE DIMENSIONS'

          CASE (2)
          MESG = 'OPERATION NOT CONSISTENT WITH DATA FORMAT'

          CASE (3)
          MESG = 'ROWLENGTH TOO LARGE FOR BUFFER'

          CASE (4)
          MESG = 'OPENING FILE'

          CASE (5)
          MESG = 'NORMALIZING DATA'

          CASE (6)
          MESG = 'INSUFFICIENT BUFFER SPACE'

          CASE (7)
          MESG = 'I/O RECORD NUMBER OUT OF LIMITS'

          CASE (8)
C         THIS ERROR ALREADY PROCESSED BEFORE
          CONTINUE

          CASE (9)
          MESG = 'LABEL SPACE INSUFFICIENT'

          CASE (10)
          MESG = 'DIMENSIONS NOT POWER OF TWO'

          CASE (11)
          MESG = 'PICTURE DIMENSIONS EXCEED FRAME'

          CASE (12)
          MESG = 'READING FILE'

          CASE (13)
          MESG = 'OPERATION NOT ALLOWED IN INTERACTIVE MODE'

          CASE (14)
          MESG = 'INCONSISTENT INPUT PARAMETERS'

          CASE (15)
          MESG = 'FILE IS WRITE PROTECTED'

          CASE (16)
C         THIS ERROR ALREADY PROCESSED BEFORE
          CONTINUE

          CASE (17)
          MESG = 'END-OF-FILE ON INPUT'

          CASE (18)
          MESG = 'FILE DOES NOT EXIST'

          CASE (19)
          MESG = 'TOO MANY FILE NUMBERS ENTERED'

          CASE (20)
          MESG = 'NOT DEFINED...'

          CASE (21)
          MESG = 'NUMBER OF PROCEEDURES EXCEEDS MAXPRC'

          CASE (22)
          MESG = 'TOO MANY PROCEDURES'

          CASE (23)
          MESG = 'UNKNOWN OPTION'

          CASE (24)
          MESG = 'SLICE NUMBER OUT OF BOUNDS'

          CASE (25)
          MESG = 'NOT CONTAINED IN TABLE'

          CASE (26)
          MESG = 'UNDEFINED ERROR'

          CASE (27)
          MESG = 'UNABLE TO CONSTRUCT FILE NAME'

          CASE (28)
          MESG = 'NUMBER OF PROJECTIONS TOO LARGE'

          CASE (29)
          MESG = 'POOR PHASES'

          CASE (30)
           MESG = 'TMPARY FULL, SHORTEN YOUR FILENAMES?'

          CASE (31)
           MESG = 'PARAMETER VALUE OUT OF LEGAL RANGE'

          CASE (32)
           MESG = 'PROGRAM TRAP'

          CASE (33)
           MESG = 'ACCURACY NOT ACHIEVED'

          CASE (34)
           MESG = 'OVERFLOW PROTECTION'

          CASE (35)
           MESG = 'EXIT ERROR'

          CASE (36)
           MESG = 'ILLEGAL ARGUMENT RANGE'

          CASE (37)
           MESG = 'ONLY FIXED IMAGE SIZE ALLOWED'

          CASE (38)
          MESG = 'DIMENSION IS A PRODUCT OF A PRIME NUMBER > 23'

          CASE (39)
          MESG = 'COMMAND NOT SUPPORTED FOR THIS FILE FORMAT'

          CASE (40)
          MESG = 'CONFLICT OF DATA FORMATS'

          CASE (41)
          MESG = 'COMMAND TEMPORARILY DISABLED'

          CASE (42)
          MESG = 'CAN NOT USE THIS OPERATION ON VOLUMES'

          CASE (43)
          MESG = 'INVALID ARITHMETIC EXPRESSION'

          CASE (44)
          MESG = 'INVALID COLUMN, ROW, OR SLICE NUMBER'

          CASE (45)
          MESG = 'INSUFFICIENT DYNAMIC MEMORY'

          CASE (46)
          MESG = 'MEMORY ALLOCATION FAILED'

          CASE (47)
          MESG = 'CANNOT PERFORM FFT'

          CASE DEFAULT
C         PROCESS ERROR CODE > 47
          MESG = 'UNIDENTIFIED,'

        END SELECT


C         WRITE TO TERMINAL AND RESULTS FILE ------------------------

          WRITE(NDAT,900) MESG,IERRT,PROG                      ! 3 = NDAT
          IF (NOUT .NE. NDAT) WRITE(NOUT,900) MESG,IERRT,PROG  ! 6 = NOUT
          IF (NOUT .EQ. NDAT) WRITE(0,900) MESG,IERRT,PROG     ! 0 = TERMINAL
900       FORMAT(' *** ERROR: ',A,'#',I3,' SUBROUTINE: ',A,' ***'/)

          CSTRING = ' *** ERROR: ' // MESG // ' SUBROUTINE: ' // 
     &              PROG // ' ***' 
          CALL SPIREOUT(CSTRING,IRTFLG)


2201      IF (FROMBATCH .OR. COPT .EQ. 'B') THEN
C            IN BATCH MODE, MUST STOP IMMEDIATELY
             NUL = CHAR(0)
             CALL ENDIT('TERMINATED ON ERROR IN BATCH MODE',.FALSE.,NUL)

#ifdef  HAS_IEEE
#ifndef SP_GFORTRAN
#ifndef USE_MPI
#ifndef __APPLE__
C            DO NOT REPORT IEEE INEXACT ....
             call ieee_set_flag( ieee_inexact,.FALSE. )
             call ieee_set_flag( ieee_invalid,.FALSE. )
             call ieee_set_flag( ieee_denorm,.FALSE. )
#endif
#endif
#endif 
#endif 
             STOP '*** FATAL ERROR ENCOUNTERED IN BATCH MODE'
          ENDIF

C         SET REGISTER 9 EQUAL TO 1. SO THAT YOU CAN TEST AND ABORT 
C         THE PROGRAM IF NECESSARY WITHIN A SUBROUTINE (UNUSED??)
C         PARAM(10) = 1.0
          CALL REG_SET(9,1.0, CHAR(0), IRTFLG) 
     
      RETURN
      END
@


1.61
log
@ifndef SP_GFORTRAN on ieee stuff
@
text
@d20 1
a20 1
C=* Email: spider@@wadsworth.org                                        *
@


1.60
log
@#ifdef  HAS_IEEE
@
text
@d51 1
d57 1
d308 1
d317 1
@


1.59
log
@#ifndef __APPLE__
@
text
@a302 10

#ifdef NEVER
C            USUALLY UNUSED, REMOVED OCT 08 al xxxxxxxxxxxxxxxxxxxxxxx
C            WILL EXECUTE FILE: spider_error_cleanup.spi IF EXISTS NOW
C                      123456789 123456789 123456789 123456789 1234567 
             MESG(1:47)  = 'if [ -e ./spider_error_cleanup.spi ]; then'
             MESG(48:78) = ' spider_error_cleanup.spi ; fi' //CHAR(0)
             CALL CSVMS(MESG(1:78),IERRT)
#endif

d305 1
d314 1
a314 1
 
@


1.58
log
@ieee no warn add
@
text
@d52 1
d55 1
d316 1
d321 1
@


1.57
log
@GPL_2010
@
text
@d12 1
d51 4
d313 7
@


1.56
log
@redundant error msg. to terminal bug
@
text
@a13 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2009  Health Research Inc.                      *
d15 5
a19 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d21 1
a21 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d26 1
a26 1
C=* This program is distributed in the hope that it will be useful,    *
d28 1
a28 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a29 1
C=*                                                                    *
d31 1
a31 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.55
log
@mpi print changes
@
text
@d11 1
d15 1
a15 1
C=* Copyright (C) 1985-2007  Health Research Inc.                      *
d52 1
a52 1
       SUBROUTINE ERRT(IERRT,PROG,NE)
d54 1
a54 1
       INCLUDE 'CMBLOCK.INC' 
d56 4
a59 4
       CHARACTER (LEN=*)   :: PROG
       CHARACTER (LEN=78)  :: MESG
       CHARACTER (LEN=180) :: CSTRING
       CHARACTER (LEN=1)   :: NUL
d61 2
a62 2
C      FOLLOWING COMMON BLOCKS ARE USED BY THIS MODULE
C      COMMON /UNITS/, /FUNCTION/, /PROC/
d64 1
a64 8
#ifdef USE_MPI
       include 'mpif.h'

       ICOMM = MPI_COMM_WORLD
       CALL MPI_COMM_RANK(ICOMM, MYPID, MPIERR)
#else
       MYPID = -1
#endif
d105 3
a107 3
          WRITE(NDAT,901) PROG
          IF (NDAT .NE. 6) WRITE(6,901) PROG
          IF (NDAT .NE. 0) WRITE(0,901) PROG
d118 3
a120 3
          WRITE(NDAT,902) PROG,NE
          IF (NDAT .NE. 6) WRITE(6,902) PROG,NE
          IF (NDAT .NE. 0) WRITE(0,902) PROG,NE
d287 3
a289 3
          WRITE(6,900) MESG,IERRT,PROG
          IF (NDAT .NE. 6) WRITE(NDAT,900)MESG,IERRT,PROG
          IF (NDAT .NE. 0) WRITE(0,900) MESG,IERRT,PROG
d316 1
a316 1
C         THE PROGRAM IF NECESSARY WITHIN A SUBROUTINE
@


1.54
log
@mpi write bug fixed
@
text
@d10 1
d77 1
a77 1
          IF (mypid .LE. 0) WRITE(NOUT,116)
d87 2
a88 2
          IF (mypid .LE. 0) WRITE(NDAT,904) PROG
          IF (mypid .LE. 0 .AND. NDAT .NE. 6) WRITE(6,904) PROG
d100 2
a101 2
          IF (mypid .LE. 0) WRITE(NDAT,903) PROG,NE
          IF (mypid .LE. 0 .AND. NDAT .NE. 6) WRITE(6,903) PROG,NE
d107 1
d111 3
a113 3
          IF (mypid .LE. 0) WRITE(NDAT,901) PROG
          IF (mypid .LE. 0 .AND. NDAT .NE. 6) WRITE(6,901) PROG
          IF (mypid .LE. 0 .AND. NDAT .NE. 0) WRITE(0,901) PROG
d119 1
d124 3
a126 3
          IF (mypid .LE. 0)                WRITE(NDAT,902) PROG,NE
          IF (mypid .LE. 0 .AND. NDAT .NE. 6) WRITE(6,902) PROG,NE
          IF (mypid .LE. 0 .AND. NDAT .NE. 0) WRITE(0,902) PROG,NE
d293 3
a295 3
          IF (MYPID .LE. 0) WRITE(6,900)  MESG,IERRT,PROG
          IF (MYPID .LE. 0 .AND.NDAT.NE.6)WRITE(NDAT,900)MESG,IERRT,PROG
          IF (MYPID .LE. 0 .AND. NDAT.NE.0)WRITE(0,900) MESG,IERRT,PROG
d307 2
d314 1
@


1.53
log
@mpi
@
text
@d37 1
a37 1
C  ERRT(IERR,PROG,NE)
d41 1
a41 1
C  PARAMETERS:   IERR    ERROR CODE NUMBER                     (SENT)
d43 1
a43 1
C                        PROGRAM NAME OR ERROR MESSAGE (IF IERR IS
d50 1
a50 1
       SUBROUTINE ERRT(IERR,PROG,NE)
d65 2
a66 2
       icomm = MPI_COMM_WORLD
       call MPI_COMM_RANK(icomm, mypid, ierr)
d68 1
a68 1
       mypid = -1
d71 1
a71 2

      IF (IERR .EQ. 16) THEN
d80 1
a80 1
      ELSEIF (IERR .EQ. 8) THEN
d93 1
a93 1
      ELSEIF (IERR .EQ. 46 .AND. NE .GT. 0) THEN
d106 1
a106 1
      ELSEIF (IERR .EQ. 101) THEN
d117 1
a117 1
      ELSEIF (IERR .EQ. 102) THEN
d129 1
a129 1
      ELSEIF (IERR .EQ. 100) THEN
d137 1
a137 1
       SELECT CASE(IERR)
d290 3
a292 3
          IF (mypid .LE. 0) WRITE(6,900)  MESG,IERR,PROG
          IF (mypid .LE. 0 .AND.NDAT.NE.6)WRITE(NDAT,900)MESG,IERR,PROG
          IF (mypid .LE. 0 .AND. NDAT.NE.0)WRITE(0,900) MESG,IERR,PROG
d308 1
a308 1
             CALL CSVMS(MESG(1:78),IERR)
@


1.52
log
@new error msgs
@
text
@d9 1
d13 1
a13 1
C=* Copyright (C) 1985-2005  Health Research Inc.                      *
d62 10
d77 1
a77 1
          WRITE(NOUT,116)
d87 2
a88 2
          WRITE(NDAT,904) PROG
          IF (NDAT .NE. 6) WRITE(6,904) PROG
d100 2
a101 2
          WRITE(NDAT,903) PROG,NE
          IF (NDAT .NE. 6) WRITE(6,903) PROG,NE
a107 1

d110 3
a112 3
          WRITE(NDAT,901) PROG
          WRITE(6,901)    PROG
          IF (NDAT .NE. 0) WRITE(0,901) PROG
a118 1

d122 3
a124 3
          WRITE(NDAT,902) PROG,NE
          WRITE(6,902)    PROG,NE
          IF (NDAT .NE. 0) WRITE(0,902) PROG,NE
a130 1

d291 3
a293 3
          WRITE(6,900)    MESG,IERR,PROG
          WRITE(NDAT,900) MESG,IERR,PROG
          IF (NDAT .NE. 0) WRITE(0,900) MESG,IERR,PROG
@


1.51
log
@reg_set param
@
text
@d8 1
d63 3
a65 1
C         FIRST CHECK FOR BAD INPUT ERROR CODE, PRINT ERROR MESSAGE 
d70 13
d85 3
a87 3
C         PROCESS ERROR CODE OF 102 FOR PROG = ERROR MESSAGE
C         AND NE AS A VALUE 
C         WRITE TO TERMINAL AND RESULTS FILE
a95 5
      ELSEIF (IERR .EQ. 100) THEN

C         SKIP MESSAGE OUTPUT
          GOTO 2201

d98 1
a98 2
C         PROCESS ERROR CODE OF 101 FOR PROG = ERROR MESSAGE
C         WRITE TO TERMINAL AND RESULTS FILE
d110 2
a111 3
C         PROCESS ERROR CODE OF 102 FOR PROG = ERROR MESSAGE
C         AND NE AS A VALUE 
C         WRITE TO TERMINAL AND RESULTS FILE
d121 5
a125 4
       ELSEIF (IERR .GT. 47) THEN
C         PROCESS ERROR CODE > 47
          MESG = 'UNIDENTIFIED,'
          GOTO 50
d130 3
a132 3
       GOTO (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
     &       21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,
     &       38,39,40,41,42,43,44,45,46), IERR
d134 2
a135 2
1         MESG = 'INCONSISTENT PICTURE DIMENSIONS'
          GOTO 50
d137 2
a138 2
2         MESG = 'OPERATION NOT CONSISTENT WITH DATA FORMAT'
          GOTO 50
d140 2
a141 2
3         MESG = 'ROWLENGTH TOO LARGE FOR BUFFER'
          GOTO 50
d143 2
a144 2
4         MESG = 'OPENING FILE'
          GOTO 50
d146 2
a147 2
5         MESG = 'NORMALIZING DATA'
          GOTO 50
d149 2
a150 2
6         MESG = 'INSUFFICIENT BUFFER SPACE'
          GOTO 50
d152 3
a154 2
7         MESG = 'I/O RECORD NUMBER OUT OF LIMITS'
          GOTO 50
d156 2
a157 2
8         MESG = 'NO HISTOGRAM DATA FOUND IN FILE'
          GOTO 50
d159 2
a160 2
9         MESG = 'LABEL SPACE INSUFFICIENT'
          GOTO 50
d162 2
a163 2
10        MESG = 'DIMENSIONS NOT POWER OF TWO'
          GOTO 50
d165 2
a166 2
11        MESG = 'PICTURE DIMENSIONS EXCEED FRAME'
          GOTO 50
d168 2
a169 2
12        MESG = 'READING FILE'
          GOTO 50
d171 2
a172 2
13        MESG = 'OPERATION NOT ALLOWED IN INTERACTIVE MODE'
          GOTO 50
d174 2
a175 2
14        MESG = 'INCONSISTENT INPUT PARAMETERS'
          GOTO 50
d177 3
a179 2
15        MESG = 'FILE IS WRITE PROTECTED'
          GOTO 50
d181 2
a182 3
16        CONTINUE
C..       THIS ERROR ALREADY PROCESSED BEFORE
          GOTO 50
d184 2
a185 2
17        MESG = 'END-OF-FILE ON INPUT'
          GOTO 50
d187 2
a188 2
18        MESG = 'FILE DOES NOT EXIST'
          GOTO 50
d190 2
a191 2
19        MESG = 'TOO MANY FILE NUMBERS ENTERED'
          GOTO 50
d193 2
a194 2
20        MESG = 'NOT DEFINED...'
          GOTO 50
d196 2
a197 2
21        MESG = 'NUMBER OF PROCEEDURES EXCEEDS MAXPRC'
          GOTO 50
d199 2
a200 2
22        MESG = 'TOO MANY PROCEDURES'
          GOTO 50
d202 2
a203 2
23        MESG = 'UNKNOWN OPTION'
          GOTO 50
d205 2
a206 2
24        MESG = 'SLICE NUMBER OUT OF BOUNDS'
          GOTO 50
d208 2
a209 2
25        MESG = 'NOT CONTAINED IN TABLE'
          GOTO 50
d211 2
a212 2
26        MESG = 'UNDEFINED ERROR'
          GOTO 50
d214 2
a215 2
27        MESG = 'UNABLE TO CONSTRUCT FILE NAME'
          GOTO 50
d217 2
a218 2
28        MESG = 'NUMBER OF PROJECTIONS TOO LARGE'
          GOTO 50
d220 2
a221 2
29        MESG = 'POOR PHASES'
          GOTO 50
d223 2
a224 2
30        MESG = 'TMPARY FULL, SHORTEN YOUR FILENAMES?'
          GOTO 50
d226 2
a227 2
31        MESG = 'PARAMETER VALUE OUT OF LEGAL RANGE'
          GOTO 50
d229 2
a230 2
32        MESG = 'PROGRAM TRAP'
          GOTO 50
d232 2
a233 2
33        MESG = 'ACCURACY NOT ACHIEVED'
          GOTO 50
d235 2
a236 2
34        MESG = 'OVERFLOW PROTECTION'
          GOTO 50
d238 2
a239 2
35        MESG = 'EXIT ERROR'
          GOTO 50
d241 2
a242 2
36        MESG = 'ILLEGAL ARGUMENT RANGE'
          GOTO 50
d244 2
a245 2
37        MESG = 'ONLY FIXED IMAGE SIZE ALLOWED'
          GOTO 50
d247 2
a248 2
38        MESG = 'DIMENSION IS A PRODUCT OF A PRIME NUMBER > 23'
          GOTO 50
d250 2
a251 2
39        MESG = 'COMMAND NOT SUPPORTED FOR THIS FILE FORMAT'
          GOTO 50
d253 2
a254 2
40        MESG = 'CONFLICT OF DATA FORMATS'
          GOTO 50
d256 2
a257 2
41        MESG = 'COMMAND TEMPORARILY DISABLED'
          GOTO 50
d259 2
a260 2
42        MESG = 'CAN NOT USE THIS OPERATION ON VOLUMES'
          GOTO 50
d262 2
a263 2
43        MESG = 'INVALID ARITHMETIC EXPRESSION'
          GOTO 50
d265 2
a266 2
44        MESG = 'INVALID COLUMN, ROW, OR SLICE NUMBER'
          GOTO 50
d268 2
a269 2
45        MESG = 'INSUFFICIENT DYNAMIC MEMORY'
          GOTO 50
d271 8
a278 2
46        MESG = 'MEMORY ALLOCATION FAILED'
          GOTO 50
a279 2
47        MESG = 'CANNOT PERFORM FFT'
          GOTO 50
d281 3
a283 2
C         WRITE TO TERMINAL AND RESULTS FILE
50        WRITE(6,900)    MESG,IERR,PROG
d292 1
@


1.50
log
@GPL License fixed
@
text
@d294 1
a294 1
          CALL REG_SET(9,1.0, .TRUE., IRTFLG) 
@


1.49
log
@HRI GPL License used
@
text
@a9 1
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
d13 1
a13 1
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *  
a32 6

C * COPYRIGHT (C)1985, 2001. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
@


1.48
log
@*** empty log message ***
@
text
@d11 24
@


1.47
log
@format for mmemory failure (46) to i12 from i8
@
text
@d3 5
a7 4
C ERRT.F                 ALTERED OUTPUT UNITS SEPT 97 al
C                        ADDED ERROR 44 JULY 98  al
C                        ADDED ERROR 102 JULY 00 A LEITH
C                        ADDED ERROR CLEANUP EXECUTION APRIL 02 A. Leith
d35 4
a38 3
       CHARACTER (LEN=*)  :: PROG
       CHARACTER (LEN=78) :: MESG
       CHARACTER (LEN=1)  :: NUL
d255 3
a261 1
             CALL ENDIT('TERMINATED ON ERROR IN BATCH MODE',.FALSE.,NUL)
d269 2
@


1.46
log
@error 46
@
text
@d56 1
a56 1
903       FORMAT(' *** ERROR MEMORY ALLOCATION FAILED -- ',A,': ',I8/)
@


1.45
log
@endit call wrong
@
text
@d25 1
a25 1
C                NE      ONLY USED FOR ERROR 102               (SENT)
d48 13
d93 2
a94 2
       ELSEIF (IERR .GT. 46) THEN
C         PROCESS ERROR CODE > 46
d99 1
a99 1
C      PROCESS ALL OTHER ERROR CODES (1 - 46)
@


1.44
log
@endit call parameters wrong
@
text
@d34 3
a36 2
       CHARACTER *(*) PROG
       CHARACTER *78  MESG
d243 2
a244 1
             CALL ENDIT('TERMINATED ON ERROR IN BATCH MODE',.FALSE.,CHAR(0))
@


1.43
log
@*** empty log message ***
@
text
@d242 1
a242 1
             CALL ENDIT('TERMINATED ON ERROR IN BATCH MODE',.FALSE.)
@


1.42
log
@if cleanup
@
text
@d35 1
a35 1
       CHARACTER *62  MESG
d245 4
a248 4
C                      123456789 123456789 123456789 123456789 
             MESG(1:35)  = 'if (-e ./spider_error_cleanup.spi) '
             MESG(36:62) = './spider_error_cleanup.spi' // CHAR(0)
             CALL CSVMS(MESG(1:62),IERR)
@


1.41
log
@error #47 added
@
text
@d35 1
a35 1
       CHARACTER *44  MESG
d245 4
a248 2
             MESG = './spider_error_cleanup.spi' // CHAR(0)
             CALL CSVMS(MESG(1:26),IERR)
@


1.40
log
@ibm bug
@
text
@a0 1

d228 3
@


1.39
log
@ibm only bug persists
@
text
@d244 1
a244 1
             CALL CSVMS(MSG(1:26),IERR)
@


1.38
log
@ibm bug
@
text
@d244 1
a244 1
             CALL CSVMS(MSG,IERR)
@


1.37
log
@error cleanup file
@
text
@d241 1
d243 2
a244 1
             CALL CSVMS('spider_error_cleanup.spi',ierr)
@


1.36
log
@error msg to unit zero changed.
@
text
@d2 1
a2 1
C++*************************************************************************
d4 5
a8 3
C ERRT.F                                 ALTERED OUTPUT UNITS SEPT 97 al
C                                        ADDED ERROR 44 JULY 98  al
C                                        ADDED ERROR 102 JULY 00 A LEITH
d10 6
a15 7
C *  SPIDER - MODULAR IMAGE PROCESSING SYSTEM.  AUTHOR: J.FRANK            *
C *  COPYRIGHT (C)1981,1987, WADSWORTH CENTER FOR LABORATORIES AND         *
C *  RESEARCH, NEW YORK STATE DEPARTMENT OF HEALTH, ALBANY, NY 12201.      *
C *    THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO THE CENTER FOR     *
C *    LABORATORIES AND RESEARCH AND ARE NOT TO BE DISCLOSED TO OTHERS OR  *
C *    USED FOR PURPOSES OTHER THAN INTENDED WITHOUT WRITTEN APPROVAL OF   *
C *    THE CENTER FOR LABORATORIES AND RESEARCH 			   *
d20 1
a20 1
C  PURPOSE:      WRITE OUT AN ERROR MESSAGE
d22 1
a22 1
C  PARAMETERS:   IERR    ERROR CODE NUMBER
d25 2
a26 2
C                        EQUAL TO 101 or 102)
C                NE      (NO LONGER USED EXCEPT FOR ERROR 102)
d241 3
@


1.35
log
@no msg if errr = 100
@
text
@d59 1
d73 1
d233 1
a239 1
             IF (IERR .NE. 100) WRITE(0,900) MESG,IERR,PROG
@


1.34
log
@another attempt at writing error to console
@
text
@d237 1
a237 1
             WRITE(0,900) MESG,IERR,PROG
@


1.33
log
@echo msg to stop
@
text
@d237 2
a238 2
             STOP MESG
C             STOP '*** FATAL ERROR ENCOUNTERED IN BATCH MODE'
@


1.32
log
@NE SHOULD NOT BE ALTERED FOR ERROR #102
@
text
@d237 2
a238 1
             STOP '*** FATAL ERROR ENCOUNTERED IN BATCH MODE'
@


1.31
log
@used reg_set
@
text
@a39 2
       NE = 1

@


1.30
log
@bad I
@
text
@d38 1
a38 1
C      COMMON /UNITS/, /PARAM/ , /FUNCTION/, /PROC/
d242 1
a242 1
C         SET REGISTER 10 EQUAL TO 1. SO THAT YOU CAN TEST AND ABORT 
d244 2
a245 1
          PARAM(10) = 1.0
@


1.29
log
@added error 102
@
text
@d74 1
a74 1
902       FORMAT(' *** ERROR -- ',A,8/)
@


1.28
log
@redundant code removed
@
text
@d6 1
a6 1
C
d24 2
a25 3
C                        EQUAL TO 101)
C                NE      FLAG THAT CAN BE USED FOR DIFFERENT PROGRAM 
C                        ACTIONS ON RETURN OF ERRT (NO LONGER USED)
d62 13
@


1.27
log
@used frombatch
@
text
@d216 1
a216 6
          WRITE(6,900)    MESG,IERR,PROG
          WRITE(NDAT,900) MESG,IERR,PROG
          CALL ENDIT('TERMINATED ON MEMORY ALLOCATION ERROR',.FALSE.)
          STOP '*** FATAL ERROR ENCOUNTERED'


@


1.26
log
@op not allowied in interactive mode = new number 13
@
text
@d39 1
a39 1
C      COMMON /UNITS/, /PARAM/ , /FUNCTION/
d229 1
a229 1
2201      IF (IPROC .NE. 0 .OR. COPT .EQ. 'B') THEN
@


1.25
log
@*** empty log message ***
@
text
@d115 1
a115 1
13        MESG = 'INITIALIZING TAPE'
@


1.24
log
@*** empty log message ***
@
text
@d215 2
a216 1
46        WRITE(6,900)    MESG,IERR,PROG
a217 1
          MESG = 'MEMORY ALLOCATION FAILED'
@


1.23
log
@*** empty log message ***
@
text
@a36 1
CNO_SAVE
d215 3
a217 1
46        MESG = 'MEMORY ALLOCATION FAILED'
@


1.22
log
@*** empty log message ***
@
text
@d68 2
a69 2
       ELSEIF (IERR .GT. 45) THEN
C         PROCESS ERROR CODE > 45
d74 1
a74 1
C      PROCESS ALL OTHER ERROR CODES (1 - 45)
@


1.21
log
@*** empty log message ***
@
text
@d68 2
a69 2
       ELSEIF (IERR .GT. 46) THEN
C         PROCESS ERROR CODE > 46
@


1.20
log
@fatal memory allocation error #46 added
@
text
@d68 2
a69 2
       ELSEIF (IERR .GT. 45) THEN
C         PROCESS ERROR CODE > 45
@


1.19
log
@error#45 insufficient dynamic memory
@
text
@d36 1
a36 1
       CHARACTER *43  MESG
d68 2
a69 2
       ELSEIF (IERR .GT. 44) THEN
C         PROCESS ERROR CODE > 44
d74 1
a74 1
C      PROCESS ALL OTHER ERROR CODES (1 - 44)
d78 1
a78 1
     &       38,39,40,41,42,43,44,45), IERR
d215 4
@


1.18
log
@added error 44
@
text
@d68 2
a69 2
       ELSEIF (IERR .GT. 43) THEN
C         PROCESS ERROR CODE > 43
d74 1
a74 1
C      PROCESS ALL OTHER ERROR CODES (1 - 43)
d78 1
a78 1
     &       38,39,40,41,42,43,44), IERR
d211 3
@


1.17
log
@*** empty log message ***
@
text
@d5 1
d78 1
a78 1
     &       38,39,40,41,42,43), IERR
d208 3
@


1.16
log
@*** empty log message ***
@
text
@d67 2
a68 2
       ELSEIF (IERR .GT. 42) THEN
C         PROCESS ERROR CODE > 42
d73 1
a73 1
C      PROCESS ALL OTHER ERROR CODES (1 - 42)
d77 1
a77 1
     &       38,39,40,41,42), IERR
d205 4
@


1.15
log
@improved file closing on halt, changed output destinations
@
text
@d47 1
a47 1
116       FORMAT($' .BAD INPUT PARAMETER(S). RE-ENTER: ')
@


1.14
log
@added error #42
@
text
@d4 1
a4 1
C ERRT.FOR
a31 3
#ifdef SP_VMS
       INTEGER        SYS$TRNLOG
#endif
d58 4
a61 1
          WRITE(NOUT,901) PROG
d63 2
d191 1
a191 1
38       MESG = 'DIMENSION IS A PRODUCT OF A PRIME NUMBER > 23'
d194 1
a194 1
39       MESG = 'COMMAND NOT SUPPORTED FOR THIS FILE FORMAT'
d197 1
a197 1
40       MESG = 'CONFLICT OF DATA FORMATS'
d200 1
a200 1
41       MESG = 'COMMAND TEMPORARILY DISABLED'
d203 1
a203 1
42       MESG = 'CAN NOT USE THIS OPERATION ON VOLUMES'
a205 8
50        WRITE(NOUT,900) MESG,IERR,PROG
900       FORMAT(' *** ERROR: ',A,'#',I3,' MODULE: ',A,' ***'/)

2201      CONTINUE

C         IF IN BATCH MODE STOP IMMEDIATELY
          IF (IPROC .NE. 0)   STOP 'FATAL ERROR CONDITION ENCOUNTERED'
          IF (COPT  .EQ. 'B') STOP 'FATAL ERROR ENCOUNTERED'
d207 4
a210 1
#ifdef SP_VMS
a211 11
          ISTAT = SYS$TRNLOG(%DESCR('SYS$INPUT'),NAMLEN,MESG,,,)
          DO I = 1,NAMLEN
             IF (MESG(I:I) .GE. '!' .AND. MESG(I:I) .LE. '~') THEN
                IF (MESG(I:I) .NE. '_') THEN
                   WRITE(NOUT,*) '*** FATAL ERROR:',I,'>',MESG(I:)
                   STOP ' FATAL ERROR OCCURED'
                ENDIF
                GOTO 500
             ENDIF
          ENDDO
#endif
d213 5
a217 1
500       CONTINUE
d219 3
a221 3
C         SET REGISTER 10 EQUAL TO 1. SO THAT YOU CAN TEST AND ABORT THE
C         PROGRAM IF NECESSARY WITHIN A SUBROUTINE
          PARAM(10) = 1.
@


1.13
log
@error #41
@
text
@d65 2
a66 2
       ELSEIF (IERR .GT. 40) THEN
C         PROCESS ERROR CODE > 41
d71 1
a71 1
C      PROCESS ALL OTHER ERROR CODES (1 - 41)
d75 1
a75 1
     &       38,39,40,41), IERR
d201 2
@


1.12
log
@error #40 CONFLICT OF DATA FORMATS
@
text
@d71 1
a71 1
C      PROCESS ALL OTHER ERROR CODES (1 - 40)
d75 1
a75 1
     &       38,39,40), IERR
d196 3
@


1.11
log
@error #39 - COMMAND NOT SUPPORTED FOR THIS FILE FORMAT
@
text
@d65 2
a66 2
       ELSEIF (IERR .GT. 39) THEN
C         PROCESS ERROR CODE > 40
d71 1
a71 1
C      PROCESS ALL OTHER ERROR CODES (1 - 39)
d75 1
a75 1
     &       38,39), IERR
d193 3
@


1.10
log
@changed message for 21 to better fit error
@
text
@d65 2
a66 2
       ELSEIF (IERR .GT. 38) THEN
C         PROCESS ERROR CODE > 39
d71 1
a71 1
C      PROCESS ALL OTHER ERROR CODES (1 - 38)
d75 1
a75 1
     &       38), IERR
d190 3
@


1.9
log
@error #38 for prime numbered dimensions.
@
text
@d138 1
a138 1
21        MESG = 'DATA FILE PARAMETER ERROR'
@


1.8
log
@added error 39
@
text
@d65 1
a65 1
       ELSEIF (IERR .GT. 39) THEN
d75 1
a75 1
     &       38,39), IERR
d189 1
a189 4
38        MESG = 'IMAGE SIZE IS PRODUCT OF PRIMES'
          GOTO 50

39        MESG = 'DIMENSION IS A PRODUCT OF A PRIME NUMBER > 23'
@


1.7
log
@changed error 30 message
@
text
@a32 2
       INCLUDE 'COMMON1:CMBLOCK.INC' 

d34 1
a34 1
#else
a35 1
#endif
d65 2
a66 2
       ELSEIF (IERR .GT. 38) THEN
C         PROCESS ERROR CODE > 38
d75 1
a75 1
     &       38), IERR
d190 3
@


1.6
log
@nosave
@
text
@d168 1
a168 1
30        MESG = 'TOO MANY PARAMETERS IN TMPARY'
@


1.5
log
@merged unix and vax code
@
text
@d42 1
@


1.4
log
@*** empty log message ***
@
text
@d6 1
a6 1
C **************************************************************************
d14 1
a14 1
C **************************************************************************
a29 2
#ifdef SP_VMS

d32 1
d35 5
a41 1
       INTEGER        SYS$TRNLOG
d43 1
a43 1
C      FOLLOWING COMMON BLOCKS ARE USED IN THIS MODULE
d64 1
a64 1
901       FORMAT(1X,'*** ERROR: ',A/)
d204 2
d216 1
a225 193



#else
       SUBROUTINE ERRT(IERR,PROG,NE)

       INCLUDE 'CMBLOCK.INC' 

       CHARACTER *(*) PROG
       CHARACTER *43  MESG
       INTEGER        SYS$TRNLOG

C..    FOLLOWING COMMON BLOCKS ARE USED IN THIS MODULE
C..    COMMON /UNITS/, /PARAM/ , /FUNCTION/

       NE = 1


      IF (IERR .EQ. 16) THEN

C..       FIRST CHECK FOR BAD INPUT ERROR CODE, PRINT ERROR MESSAGE 
          WRITE(NOUT,116)
116       FORMAT($' .BAD INPUT PARAMETER(S). RE-ENTER: ')
          GOTO 2201

      ELSEIF (IERR .EQ. 100) THEN

C..       PROCESS ERROR CODE OF 100
          MESG = 'SEE EXPLICIT STATEMENT,'
          GOTO 50

      ELSEIF (IERR .EQ. 101) THEN

C..       PROCESS ERROR CODE OF 101 FOR PROG = ERROR MESSAGE
          WRITE(NOUT,901) PROG
901       FORMAT(1X,'*** ERROR: ',A/)
          GOTO 2201
 

       ELSEIF (IERR .GT. 37) THEN
C..       PROCESS ERROR CODE > 37 
          MESG = 'UNIDENTIFIED,'
          GOTO 50
       ENDIF

C..    PROCESS ALL OTHER ERROR CODE (1 - 37)

       GOTO (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
     &       21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37), IERR

1         MESG = 'INCONSISTENT PICTURE DIMENSIONS,'
          GOTO 50

2         MESG = 'OPERATION NOT CONSISTENT WITH DATA FORMAT'
          GOTO 50

3         MESG = 'ROWLENGTH TOO LARGE FOR BUFFER,'
          GOTO 50

4         MESG = 'OPEN ERROR,'
          GOTO 50

5         MESG = 'DATA NORMALISATION ERROR,'
          GOTO 50

6         MESG = 'INSUFFICIENT BUFFER SPACE,'
          GOTO 50

7         MESG = 'I/O RECORD NUMBER OUT OF LIMITS,'
          GOTO 50

8         MESG = 'NO HISTOGRAM DATA FOUND IN FILE,'
          GOTO 50

9         MESG = 'LABEL SPACE INSUFFICIENT,'
          GOTO 50

10        MESG = 'DIMENSIONS NOT POWER OF TWO,'
          GOTO 50

11        MESG = 'PICTURE DIMENSIONS EXCEED FRAME,'
          GOTO 50

12        MESG = 'READ ERROR,'
          GOTO 50

13        MESG = 'TAPE INITIALISATION ERROR,'
          GOTO 50

14        MESG = 'INCONSISTENT INPUT PARAMETERS,'
          GOTO 50

15        MESG = 'FILE IS WRITE PROTECTED,'
          GOTO 50

16        CONTINUE
C..       THIS ERROR ALREADY PROCESSED BEFORE
          GOTO 50

17        MESG = 'END-OF-FILE ON INPUT,'
          GOTO 50

18        MESG = 'FILE DOES NOT EXIST,'
          GOTO 50

19        MESG = 'TOO MANY FILE NUMBERS ENTERED,'
          GOTO 50

20        MESG = 'NOT DEFINED...,'
          GOTO 50

21        MESG = 'DATA FILE PARAMETER ERROR,'
          GOTO 50

22        MESG = 'TOO MANY PROCEDURES,'
          GOTO 50

23        MESG = 'UNKNOWN OPTION,'
          GOTO 50

24        MESG = 'SLICE # OUT OF BOUNDS,'
          GOTO 50

25        MESG = 'NOT CONTAINED IN TABLE,'
          GOTO 50

26        MESG = 'UNDEFINED ERROR,'
          GOTO 50

27        MESG = 'UNABLE TO CONSTRUCT FILE NAME'
          GOTO 50

28        MESG = '# OF PROJECTIONS TOO LARGE,'
          GOTO 50

29        MESG = 'POOR PHASES,'
          GOTO 50

30        MESG = 'TOO MANY PARAMETERS IN TMPARY,'
          GOTO 50

31        MESG = 'PARAMETER VALUE OUT OF LEGAL RANGE'
          GOTO 50

32        MESG = 'PROGRAM TRAP,'
          GOTO 50

33        MESG = 'ACCURACY NOT ACHIEVED,'
          GOTO 50

34        MESG = 'OVERFLOW PROTECTION,'
          GOTO 50

35        MESG = 'EXIT ERROR,'
          GOTO 50

36        MESG = 'ILLEGAL ARGUMENT RANGE,'
          GOTO 50

37        MESG = 'ONLY FIXED IMAGE SIZE ALLOWED,'
          GOTO 50



50        WRITE(NOUT,900) MESG,IERR,PROG
900       FORMAT(' *** ERROR: ',A,'#',I3,' MODULE: ',A,' ***'/)

2201      CONTINUE

C         IF IN BATCH MODE STOP IMMEDIATELY
          IF (IPROC .NE. 0)   STOP 'FATAL ERROR CONDITION ENCOUNTERED'
          IF (COPT  .EQ. 'B') STOP 'FATAL ERROR ENCOUNTERED'

C$DEC          ISTAT = SYS$TRNLOG(%DESCR('SYS$INPUT'),NAMLEN,MESG,,,)
C$DEC          DO I = 1,NAMLEN
C$DEC             IF (MESG(I:I) .GE. '!' .AND. MESG(I:I) .LE. '~') THEN
C$DEC                IF (MESG(I:I) .NE. '_') THEN
C$DEC                   WRITE(NOUT,*) '*** FATAL ERROR:',I,'>',MESG(I:)
C$DEC                   STOP ' FATAL ERROR OCCURED'
C$DEC                ENDIF
C$DEC                GOTO 500
C$DEC             ENDIF
C$DEC          ENDDO

500       CONTINUE

C..       SET REGISTER 10 EQUAL TO 1. SO THAT YOU CAN TEST AND ABORT THE
C..       PROGRAM IF NECESSARY WITHIN A SUBROUTINE
          PARAM(10) = 1.
     
      RETURN
      END
#endif
@


1.3
log
@fixed VMS
@
text
@d30 1
a30 1
#ifdef VMS
@


1.2
log
@cpp_lines_added
@
text
@d1 1
a1 1
#ifdef VMS
d30 2
a33 3
#ifdef SP_UNIX
       INCLUDE 'CMBLOCK.INC' 
#else
a34 1
#endif
d221 2
a225 1
#ifdef SP_UNIX
a226 3
#else
       INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1

d32 3
d36 1
d223 194
@
