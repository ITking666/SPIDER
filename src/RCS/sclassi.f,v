head	1.27;
access;
symbols
	healthdept_2018:1.27
	pre_getangas:1.21
	GPL2010:1.21
	pre_GPL2010:1.20
	pre_var_equation:1.20
	pre_fftwrings:1.19
	pre_opfiles:1.18
	src:1.18
	best-code:1.18
	x-named-regs:1.16
	x:1.16
	v13-00:1.16
	pre_GPL:1.16
	prec_CA:1.11
	noindx:1.11
	Bproc:1.6
	oct21:1.4
	last77:1.4;
locks; strict;
comment	@c @;


1.27
date	2018.10.03.14.34.16;	author leith;	state Exp;
branches;
next	1.26;

1.26
date	2017.04.18.15.38.43;	author leith;	state Exp;
branches;
next	1.25;

1.25
date	2013.05.06.16.16.28;	author leith;	state Exp;
branches;
next	1.24;

1.24
date	2013.01.25.19.53.19;	author leith;	state Exp;
branches;
next	1.23;

1.23
date	2011.12.22.17.06.02;	author leith;	state Exp;
branches;
next	1.22;

1.22
date	2011.11.30.13.50.28;	author leith;	state Exp;
branches;
next	1.21;

1.21
date	2010.06.24.13.26.52;	author leith;	state Exp;
branches;
next	1.20;

1.20
date	2008.12.05.13.28.46;	author leith;	state Exp;
branches;
next	1.19;

1.19
date	2007.12.20.18.34.53;	author leith;	state Exp;
branches;
next	1.18;

1.18
date	2006.01.05.21.18.54;	author leith;	state Exp;
branches;
next	1.17;

1.17
date	2005.12.13.20.21.23;	author leith;	state Exp;
branches;
next	1.16;

1.16
date	2005.09.23.19.42.30;	author leith;	state Exp;
branches;
next	1.15;

1.15
date	2004.02.10.19.16.49;	author leith;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.10.20.08.11;	author leith;	state Exp;
branches;
next	1.13;

1.13
date	2003.10.16.18.16.01;	author leith;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.16.16.46.07;	author leith;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.27.16.38.27;	author leith;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.26.19.10.50;	author leith;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.11.14.08.15;	author leith;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.24.19.14.55;	author leith;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.24.13.49.56;	author leith;	state Exp;
branches;
next	1.6;

1.6
date	99.12.07.19.48.19;	author leith;	state Exp;
branches;
next	1.5;

1.5
date	99.11.10.23.11.19;	author yuchen;	state Exp;
branches;
next	1.4;

1.4
date	98.01.30.17.40.56;	author leith;	state Exp;
branches;
next	1.3;

1.3
date	97.10.15.14.28.56;	author pawel;	state Exp;
branches;
next	1.2;

1.2
date	94.05.13.14.10.48;	author leith;	state Exp;
branches;
next	1.1;

1.1
date	94.05.13.12.52.38;	author leith;	state Exp;
branches;
next	;


desc
@unix specific source code with preprocessor lines
@


1.27
log
@email_health_dept
@
text
@
C **********************************************************************
C                                                                      *
C SCLASSI.F                                                            *
C             ORIGINAL CODE WRITTEN                02.09.81            *
C             MODIFIED                             31-JAN-86           *
C             DENDRO CALL ADDED                    NOV 86 ARDEAN LEITH *
C             LONG FILE NAMES                      JAN 89 ARDEAN LEITH *
C             INCLUDED FILES FOR SCLASSY, SEMIS    MAR 02 ARDEAN LEITH *
C             NEW IMC FORMAT                       OCT 02 ARDEAN LEITH *
C             EXCESSIVE PARTITION TRAP             DEC 05 ARDEAN LEITH *
C             NFAC VS KFAC BUG                     DEC 07 ARDEAN LEITH *
C             IPALIGN & REFACTORING                DEC 08 ARDEAN LEITH *
C             KV FACTOR SELECTION                  NOV 11 ARDEAN LEITH *
C             UNDECLARED INUMBER on SORT CALL BUG  APR 17 ARDEAN LEITH *
C                                                                   *
C **********************************************************************
C=*                                                                    *
C=* This file is part of:   SPIDER - Modular Image Processing System.  *
C=* SPIDER System Authors:  Joachim Frank & ArDean Leith               *
C=* Copyright 1985-2017  Health Research Inc.,                         *
C=* Riverview Center, 150 Broadway, Suite 560, Menands, NY 12204.      *
C=* Email: spider@@health.ny.gov                                        *
C=*                                                                    *
C=* SPIDER is free software; you can redistribute it and/or            *
C=* modify it under the terms of the GNU General Public License as     *
C=* published by the Free Software Foundation; either version 2 of the *
C=* License, or (at your option) any later version.                    *
C=*                                                                    *
C=* SPIDER is distributed in the hope that it will be useful,          *
C=* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
C=* merchantability or fitness for a particular purpose.  See the GNU  *
C=* General Public License for more details.                           *
C=* You should have received a copy of the GNU General Public License  *
C=* along with this program. If not, see <http://www.gnu.org/licenses> *
C=*                                                                    *
C **********************************************************************
C                                                                      *
C AUTHOR:  JEAN-PIERRE BRETAUDIERE (DECEASED)                          *
C      THE UNIVERSITY OF TEXAS HEALTH SCIENCE CENTER AT HOUSTON        *
C      MEDICAL SCHOOL - DEPT. OF PATHOLOGY AND LABORATORY MEDICINE     *
C      P.O. BOX 20708, HOUSTON, TX 77225.                              *
C                                                                      *
C **********************************************************************
C                                                                      *         
C  SCLASSI(LUNI,LUNK,LUNDOC)                                           *
C                                                                      *         
C  PURPOSE:  PERFORMS FIRST STEP AN AUTOMATIC CLUSTERING OF            *         
C            OBJECTS BY AGGREGATION AROUND MOBILE CENTERS AND IN A 2ND *
C            STEP, A HIERARCHIC ASCENDENT CLASSIFICATION OF THE GRAVITY*         
C            CENTERS OF THE CLUSTERS DETERMINED IN THE FIRST STEP.     *
C                                                                      *         
C  CALL TREE:   SCLASSI - NOYAU - PARST  - RETIR                       *
C                  |        |            - CLAST                       *
C                  |        |            - STABK - SHELK               *
C                  |        |                                          *
C                  |      NOYAU - DEUCL                                * 
C                  |      NOYAU - CHAVA                                *
C                  |      NOYAU - DENDRO - DENLST                      *
C                  |      NOYAU - COUPE                                *
C                  |                                                   *
C               SCLASSI - RGRI                                         *
C                                                                      *
C23456789012345678901234567890123456789012345678901234567890123456789012
C***********************************************************************

        SUBROUTINE SCLASSI(LUNI,LUNK,LUNDOC)

        IMPLICIT NONE


        INCLUDE 'CMBLOCK.INC' 
        INCLUDE 'CMLIMIT.INC' 

        INTEGER               :: LUNI,LUNK,LUNDOC

        REAL, ALLOCATABLE     :: Q(:)
        CHARACTER(LEN=MAXNAM) :: CLUSFILE,IMCFILE,FILPRE
        CHARACTER(LEN=1)      :: NULL = CHAR(0)

#ifndef SP_32
        INTEGER *8            :: IBIG,IBIG4
#else
        INTEGER *4            :: IBIG,IBIG4
#endif
                                                                                  
        INTEGER               :: NKLA,NLET,IRTFLG,NUMIM,NFAC
        INTEGER               :: IDUM,KFAC,MINFAC,MAXFAC,IER,NITER
        INTEGER               :: NCLAS,NOT_USED,NBASE,K
        INTEGER               :: N2DIM,KDIM,N1,NK,ND,NU,NJV,NJW
        INTEGER               :: MDIM,LDIM,L2DIM,NIDK,NCI,NGT,NNUM,NLA
        INTEGER               :: NLB,NIV,NIW,NV,NW,NNT,NVAL,NPK,NNO
        INTEGER               :: NI,NFIN

        INTEGER               :: ipalign64
                                                                                                         
C       MARCH 02 al NKLA IS REDEFINED LATER! SO REPEAT FAILED
        NKLA   = 100

        CALL FILERD(FILPRE,NLET,NULL,
     &          'CORAN/PCA FILE PREFIX (e.g.. CORAN_01_)~',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN
        IMCFILE = FILPRE(1:NLET) // '_IMC'//NULL

C       GET CLUSTER OUTPUT FILE NAME
        CALL FILERD(CLUSFILE,NLET,DATEXC,'CLUSTER OUTPUT',IRTFLG)
        IF (IRTFLG .NE. 0) RETURN

C       OPEN & READ HEADER OF _IMC FILE FORM='FORMATTED'
        CALL OPAUXFILE(.FALSE.,IMCFILE,DATEXC,LUNI,0,
     &                       'O', ' ',.TRUE.,IRTFLG)
        READ(LUNI,*) NUMIM, NFAC,IDUM,IDUM,IDUM,IDUM                                       

    
        WRITE(NOUT,90) NFAC,NUMIM
90      FORMAT(/,'  FACTORS AVAILABLE:',I5,'  OBJECTS (IMAGES):',I6)

        KFAC   = NFAC
        MINFAC = 1
        MAXFAC = NFAC

        WRITE(NOUT, *) ' WARNING. INPUT ALTERED 2011.  LIST',
     &                  ' ALL FACTORS WANTED, E.G. 1-7, NOT: 7'
                                      
        CALL RDPRAI(INUMBR,NIMAX,KFAC, MINFAC,MAXFAC,
     &              'FACTOR NUMBERS TO BE USED',NULL,IER)
        IF (IRTFLG .NE. 0) RETURN
        IF (KFAC <= 0) THEN
           CALL ERRT(102,'NO FACTORS REQUESTED',KFAC)                              
           RETURN
        ENDIF

C       SORT THE INUMBER FACTOR LIST IN ASCENDING ORDER
        IF (KFAC > 1) CALL SORTI(INUMBR,KFAC)

        NITER = 5
        NCLAS = 5
        CALL RDPRIS(NITER,NCLAS,NOT_USED,
     &       'NUMBER OF ITERATIONS & CENTERS',IRTFLG)
        IF (NITER .LE. 0) THEN
           CALL ERRT(102,'ILLEGAL: NUMBER OF ITERATIONS',NITER)                              
           RETURN
        ELSEIF (NCLAS .LE. 0) THEN
           CALL ERRT(102,'ILLEGAL: NUMBER OF CENTERS',NCLAS)                              
           RETURN
        ENDIF

        NBASE = 4
        CALL RDPRI1S(NBASE,NOT_USED,'NUMBER OF PARTITIONS',IRTFLG)
        IF (NBASE .LE. 0) THEN
           CALL ERRT(102,'ILLEGAL: NUMBER OF PARTITIONS',NBASE)                              
           RETURN
        ENDIF
                                                        
C       OPEN NEW CLUSTER FILE (ALREADY HAS EXTENSION ON IT)
        CALL OPAUXFILE(.FALSE.,CLUSFILE,NULL,-LUNK,0,
     &                       'N', ' ',.TRUE.,IRTFLG)

        WRITE(NDAT, 2100) (INUMBR(K), K=1,KFAC)                                      
 2100   FORMAT (/,'  FACTORS USED:',(10I6))
                                         
        WRITE(NDAT, 2150) NBASE, NITER, NCLAS, NKLA                               
 2150   FORMAT('  PARTITIONS:',I6,'  ITERATIONS:      ',I6,/,                          
     &         '  CENTERS:   ',I6,'  INITIAL CLASSES: ',I6,/)
                                              
C       MEMORY SEGMENTATION                                                  
        N2DIM = MAX(NKLA, 2*NCLAS)                                              
        KDIM  = MAX(NUMIM, NCLAS**NBASE)                                        
        KDIM  = MAX(KDIM,  2*NKLA - 1)                                          
        MDIM  = NKLA*(NKLA-1) / 2                                                 
        LDIM  = NKLA                                                              
        L2DIM = 2*NKLA - 1                                                        

        IBIG  = NCLAS
        IBIG  = (IBIG**NBASE) * 3     
        IBIG  = IBIG + (LDIM * 7) + (L2DIM * 4) + 2 * NUMIM +
     &          MDIM  + (3 *KDIM)+ NKLA + NFAC + N2DIM * KFAC    
        IBIG4 = HUGE(IBIG4)
        IF (IBIG .GE. IBIG4) THEN
           WRITE(NOUT,*)' *** MUST REDUCE NUMBER OF PARTITIONS'
           CALL ERRT(102,'EXCESSIVE MEMORY NEEDED>',IBIG4)
           GOTO 9999
        ENDIF

        N1    = 1
        NK    = IPALIGN64(N1   + NUMIM)                                                    
        ND    = IPALIGN64(NK   + NUMIM)                                                    
        NU    = IPALIGN64(ND   + MDIM)                                                        
        NJV   = IPALIGN64(NU   + KDIM)                                                        
        NJW   = IPALIGN64(NJV  + KDIM)                                                       
        NIDK  = IPALIGN64(NJW  + KDIM)                                                       
        NCI   = IPALIGN64(NIDK + NKLA)                                                      
        NGT   = IPALIGN64(NCI  + NFAC)                                                        
        NNUM  = IPALIGN64(NGT  + N2DIM * KFAC)                                                 
        NLA   = IPALIGN64(NNUM + LDIM)                                                      
        NLB   = IPALIGN64(NLA  + LDIM)                                                       
        NIV   = IPALIGN64(NLB  + LDIM)                                                        
        NIW   = IPALIGN64(NIV  + LDIM)                                                        
        NV    = IPALIGN64(NIW  + LDIM)                                                        
        NW    = IPALIGN64(NV   + LDIM)                                                         
        NNT   = IPALIGN64(NW   + LDIM)                                                        
        NVAL  = IPALIGN64(NNT  + L2DIM)                                                       
        NPK   = IPALIGN64(NVAL + L2DIM)                                                      
        NNO   = IPALIGN64(NPK  + L2DIM)                                                       
        NFIN  = IPALIGN64(NNO  + L2DIM)
                                                       
        ALLOCATE (Q(NFIN),STAT=IRTFLG)
        IF (IRTFLG .NE. 0) THEN
           CALL ERRT(46,'SCLASSI; Q',NFIN)
           GOTO 9999
        ENDIF

C       CLASSIFICATION OF OBJECTS ACCORDING TO FACTORIAL COORDINATES          
        CALL NOYAU(N2DIM,KDIM,MDIM,LDIM,L2DIM,                                   
     &   NFAC,KFAC,NUMIM,INUMBR,NBASE,NITER,NCLAS,NKLA,
     &   Q(N1), Q(NK),  Q(ND),  Q(NU), Q(NJV),Q(NJW),Q(NIDK),
     &   Q(NCI),Q(NGT), Q(NNUM),Q(NLA),Q(NLB),Q(NIV),Q(NIW),Q(NV),Q(NW),                        
     &   Q(NNT),Q(NVAL),Q(NPK), Q(NNO), LUNI,LUNK,LUNDOC)
                                               
C       PRINT OUT LIST OF CLUSTER MEMBERS, LIST OF CENTERS OF GRAVITY, 
C       AND RE-CLASSIFICATION LOOKUP TABLE

        REWIND(LUNK)                                                                        
        READ(LUNK) NUMIM, NFAC, NKLA, KFAC  
                
        NK    = 1                                                                 
        NI    = IPALIGN64(NK  + NUMIM )                                                       
        NPK   = IPALIGN64(NI  + NUMIM)                                                        
        NGT   = IPALIGN64(NPK + NKLA )                                                     
        NIV   = IPALIGN64(NGT + NKLA * KFAC)                                               
                                                     
C       READS: LUNI AND LUNK (WRITTEN FROM NOYAU)                
        CALL RGRI(NUMIM, KFAC, NKLA,                                              
     &            Q(NK),Q(NI),Q(NPK),Q(NGT),Q(NIV), 
     &            LUNK,LUNI,NFAC,INUMBR)

9999    CLOSE(LUNK)
        CLOSE(LUNI)

        END












@


1.26
log
@UNDECLARED INUMBER on SORT CALL BUG,  implicit none
@
text
@d23 1
a23 1
C=* Email: spider@@wadsworth.org                                        *
@


1.25
log
@cosmetic
@
text
@d15 2
a16 1
C                                                                      *
d21 1
a21 1
C=* Copyright 1985-2013  Health Research Inc.,                         *
d69 3
d75 3
d79 1
d82 1
a82 1
        INTEGER *8            :: IBIG
d84 1
a84 1
        INTEGER *4            :: IBIG
d86 8
d95 2
a96 4
        CHARACTER(LEN=1)      :: NULL = CHAR(0)

        REAL, ALLOCATABLE     :: Q(:)
                                                                                                          
d114 1
d134 1
a134 1
        IF (KFAC > 1) CALL SORTI(INUMBER,KFAC)
@


1.24
log
@NUMBER OF ITERATIONS & CENTERS prompt
@
text
@d5 3
a7 3
C             ORIGINAL CODE WRITTEN                02.09.81            *        
C             MODIFIED                             31-JAN-86           *       
C             DENDRO CALL ADDED                    NOV 86 ARDEAN LEITH * 
d9 1
a9 1
C             INCLUDED FILES FOR SCLASSY, SEMIS    MAR 02 ARDEAN LEITH * 
d20 1
a20 1
C=* Copyright 1985-2011  Health Research Inc.,                         *
d50 1
a50 1
C            CENTERS OF THE CLUSTERS DETERMINED IN THE FIRST STEP.     *             
d58 1
a58 1
C                  |      NOYAU - DENDRO - DENLST                      * 
d61 2
a62 2
C               SCLASSI - RGRI                                         *    
C                                                                      *         
d66 1
a66 1
	SUBROUTINE SCLASSI(LUNI,LUNK,LUNDOC)
a224 1
        RETURN
@


1.23
log
@added inumbr to rgri call
@
text
@d124 1
a124 1
     &       'NUMBER OF ITERATIONS & CENTERS PER PARTITION',IRTFLG)
@


1.22
log
@factor list possible
@
text
@d220 1
a220 1
     &            LUNK,LUNI,NFAC)
@


1.21
log
@GPL_2010
@
text
@d2 14
a15 13
C ++********************************************************************
C                                                                       
C SCLASSI.F                                                             
C                                                    02.09.81           
C                                                    31-JAN-86          
C             DENDRO CALL ADDED                      NOV 86 ARDEAN LEITH 
C             LONG FILE NAMES                        JAN 89 ARDEAN LEITH
C             INCLUDED FILES FOR SCLASSY, SEMIS      MAR 02 ARDEAN LEITH                                                       *
C             NEW IMC FORMAT                         OCT 02 ARDEAN LEITH
C             EXCESSIVE PARTITION TRAP               DEC 05 ARDEAN LEITH
C             NFAC VS KFAC BUG                       DEC 07 ARDEAN LEITH
C             IPALIGN & REFACTORING                  DEC 08 ARDEAN LEITH
C                                
d20 1
a20 1
C=* Copyright 1985-2010  Health Research Inc.,                         *
d37 6
a42 6
C
C AUTHOR:  JEAN-PIERRE BRETAUDIERE                            
C      THE UNIVERSITY OF TEXAS HEALTH SCIENCE CENTER AT HOUSTON                      
C      MEDICAL SCHOOL - DEPARTMENT OF PATHOLOGY AND LABORATORY MEDICINE              
C      P.O. BOX 20708, HOUSTON, TX 77225. 
C                                           
d44 19
a62 21
C
C  SCLASSI(LUNI,LUNK,LUNDOC)
C
C  PURPOSE:  PERFORMS FIRST STEP AN AUTOMATIC CLUSTERING OF         
C            OBJECTS BY AGGREGATION AROUND MOBILE CENTERS AND IN A 2ND          
C            STEP, A HIERARCHIC ASCENDENT CLASSIFICATION OF THE GRAVITY         
C            CENTERS OF THE CLUSTERS DETERMINED IN THE FIRST STEP.              
C  
C  CALL TREE:   SCLASSI - NOYAU - PARST - RETIR    
C                                       - CLAST  
C                                       - STABK - SHELK   
C                               - DEUCL  
C                               - CHAVA 
C                               - ARBRE
C                               - DENDRO  
C                               - DENDRO2
C                               - DENLST  
C                               - CLULST
C                               - COUPE
C               SCLASSI - RGRI     
C
d71 1
a71 1
        CHARACTER(LEN=MAXNAM)           :: CLUSFILE,IMCFILE,FILPRE
d74 1
a74 1
        INTEGER *8                      :: IBIG
d76 1
a76 1
        INTEGER *4                      :: IBIG
d79 1
a79 1
        CHARACTER(LEN=1)                :: NULL
d81 1
a81 1
        REAL, ALLOCATABLE, DIMENSION(:) :: Q
a82 2
        NULL = CHAR(0)

d95 17
a111 2
        KFAC = 2
        CALL RDPRI1S(KFAC,NOT_USED,'NUMBER OF FACTORS',IRTFLG)
d113 2
a114 2
        IF (KFAC .LE. 0) THEN
           CALL ERRT(102,'FACTORS <= 0',KFAC)                              
d118 3
d125 5
a129 2
        IF (NITER .LE. 0  .OR. NCLAS .LE. 0) THEN
           CALL ERRT(100,'ILLEGAL: ITERATIONS OR CENTERS',NE)                              
d139 1
a139 6

C       OPEN & READ HEADER OF _IMC FILE FORM='FORMATTED'
        CALL OPAUXFILE(.FALSE.,IMCFILE,DATEXC,LUNI,0,
     &                       'O', ' ',.TRUE.,IRTFLG)
        READ(LUNI,*) NUMIM, NFAC,IDUM,IDUM,IDUM,IDUM                                       
                                                         
d144 2
a145 2
        WRITE(NDAT, 2100) KFAC                                      
 2100   FORMAT (/,'  FACTORS USED:  1...',I3)
d148 2
a149 2
 2150   FORMAT(/,'  #PARTITIONS:',I6,'    #ITER:',I6,/,                          
     &           '  #CENTERS:',   I6,'    INITIAL CLASSES: ',I6,/)
d179 1
a179 1
        NNUM  = IPALIGN64(NGT  + N2DIM * KFAC )                                                 
d194 1
a194 1
           CALL ERRT(46,'Q',NFIN)
d200 4
a203 4
     &           NFAC,KFAC,NUMIM,NBASE,NITER,NCLAS,NKLA,
     &   Q(N1),Q(NK),Q(ND),Q(NU),Q(NJV),Q(NJW),Q(NIDK),Q(NCI),Q(NGT),               
     &   Q(NNUM),Q(NLA),Q(NLB),Q(NIV),Q(NIW),Q(NV),Q(NW),                        
     &   Q(NNT),Q(NVAL),Q(NPK),Q(NNO) ,LUNI,LUNK,LUNDOC)
d217 1
a217 1
C       READS: LUNK                
d219 2
a220 1
     &          Q(NK),Q(NI),Q(NPK),Q(NGT),Q(NIV), LUNK,LUNI,NFAC)
@


1.20
log
@refactor & ipaling64
@
text
@a15 2
C=* FROM: SPIDER - MODULAR IMAGE PROCESSING SYSTEM.   AUTHOR: J.FRANK  *
C=* Copyright (C) 1985-2008  Health Research Inc.                      *
d17 5
a21 2
C=* HEALTH RESEARCH INCORPORATED (HRI),                                *   
C=* ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
d23 1
a23 3
C=* Email:  spider@@wadsworth.org                                       *
C=*                                                                    *
C=* This program is free software; you can redistribute it and/or      *
d28 1
a28 1
C=* This program is distributed in the hope that it will be useful,    *
d30 1
a30 1
C=* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  *
a31 1
C=*                                                                    *
d33 1
a33 3
C=* along with this program; if not, write to the                      *
C=* Free Software Foundation, Inc.,                                    *
C=* 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.      *
@


1.19
log
@NFAC,KFAC,READ BUG & REFORMATTING
@
text
@d13 34
a46 7
C                                                
C----------------------------------=*=----------------------------------        
C COPYRIGHT 1986 - JEAN-PIERRE BRETAUDIERE                            
C THE UNIVERSITY OF TEXAS HEALTH SCIENCE CENTER AT HOUSTON                      
C MEDICAL SCHOOL - DEPARTMENT OF PATHOLOGY AND LABORATORY MEDICINE              
C P.O. BOX 20708, HOUSTON, TX 77225.                                            
C*---------------------------------------------------------------------*        
d56 2
a57 2
C                               - CLAST  
C                               - STABK - SHELK   
d61 4
a64 1
C                               - DENDRO -
a65 1
C                               - CLULST
d68 2
a69 1
C **********************************************************************
d114 1
a114 1
        IF (NITER .LE. 0  .OR. NCLAS .LT. 0) THEN
d136 1
a136 1
 2100   FORMAT (/,2X,'FACTORS USED:  1...',I3)
d139 2
a140 2
 2150   FORMAT(/,2X,'NBASE:',I6,4X,'NITER:',I6,4X,                          
     &              'NCLAS:',I6,4X,'NKLA: ',I6,/)
d152 2
a153 2
        IBIG  = IBIG + (LDIM * 7) + (L2DIM * 4) +
     &         NUMIM  + MDIM  + (3 *KDIM)+ NKLA + NFAC + N2DIM * KFAC    
d161 21
a181 20
        NKLAS = 1 + NUMIM                                                         
        ND    = NKLAS + NUMIM                                                     
        NU    = ND   + MDIM                                                         
        NJV   = NU   + KDIM                                                         
        NJW   = NJV  + KDIM                                                        
        NIDK  = NJW  + KDIM                                                        
        NCI   = NIDK + NKLA                                                       
        NGT   = NCI  + NFAC                                                        
        NNUM  = NGT  + N2DIM * KFAC                                                  
        NLA   = NNUM + LDIM                                                       
        NLB   = NLA  + LDIM                                                        
        NIV   = NLB  + LDIM                                                        
        NIW   = NIV  + LDIM                                                        
        NV    = NIW  + LDIM                                                        
        NW    = NV   + LDIM                                                         
        NNT   = NW   + LDIM                                                         
        NVAL  = NNT  + L2DIM                                                       
        NPK   = NVAL + L2DIM                                                      
        NNO   = NPK  + L2DIM                                                       
        NFIN  = NNO  + L2DIM
d189 1
a189 1
C       CLASSIFICATION OF OBJECTS ACCORDING TO THEIR FACTORIAL COORDINATES *         
d192 1
a192 1
     &   Q(1),Q(NKLAS),Q(ND),Q(NU),Q(NJV),Q(NJW),Q(NIDK),Q(NCI),Q(NGT),               
d200 2
a201 1
        READ(LUNK) NUMIM, NFAC, NKLA, KFAC                  
d203 4
a206 4
        NI    = NK  + NUMIM                                                        
        NPK   = NI  + NUMIM                                                        
        NGT   = NPK + NKLA                                                      
        NIV   = NGT + NKLA * KFAC                                               
@


1.18
log
@INTEGER 8 not on NT
@
text
@d3 5
a7 4
C                                                                      *
C SCLASSI.F    
C             02.09.81                               31-JAN-86 
C             DENDRO CALL ADDED                      NOV 86 ARDEAN LEITHal
d10 1
a10 1
C             EXTENSIVE REWRITE                      OCT 02 ARDEAN LEITH
d12 2
a13 1
C                                                 
d21 1
a21 1
C  SCLASSI(LUNI,LUNK)
d24 3
a26 3
C            OBJECTS BY AGGREGATION AROUND MOBILE CENTERS AND IN A 2ND *        
C            STEP, A HIERARCHIC ASCENDENT CLASSIFICATION OF THE GRAVITY*        
C            CENTERS OF THE CLUSTERS DETERMINED IN THE FIRST STEP.     *        
d28 1
a28 1
C  CALL TREE:  SCLASSI - NOYAU - PARST - RETIR    
d36 1
d39 1
a39 1
C ***********************************************************************
d41 1
a41 1
	SUBROUTINE SCLASSI(LUNI,LUNK)
a46 1
        COMMON /COMMUN/                    CLUSFILE,IMCFILE,FILPRE
a47 2
        INTEGER,PARAMETER               :: LFA=16
	INTEGER                         :: KV(LFA)
d72 2
a73 3
        KFAC = LFA
        IHUGE = HUGE(I)
        CALL RDPRAI(KV,LFA,KFAC,0,IHUGE,'FACTOR NUMBERS',NULL,IRTFLG)
d84 4
d89 1
a89 1
        NBASE =  4
d91 4
d105 2
a106 3
        WRITE(NDAT, 2100) (KV(K), K=1, KFAC)                                      
 2100   FORMAT (//,' ',5X,'FACTORS USED :',/,
     &             ' ',5X, 16I6)
d109 2
a110 2
 2150   FORMAT(/,6X,'NBASE:',I7,5X,'NITER:',I7,5X,                          
     &              'NCLAS:',I7,5X,'NKLA: ',I7,/)
d113 3
a115 4

        N2DIM = MAX0 (NKLA, 2*NCLAS)                                              
        KDIM  = MAX0 (NUMIM, NCLAS**NBASE)                                        
        KDIM  = MAX0 (KDIM,  2*NKLA - 1)                                          
d126 1
a126 1
           WRITE(NOUT,*)'  *** MUST REDUCE NUMBER OF PARTITIONS'
d160 1
a160 1
     &           NFAC,KFAC,NUMIM,KV,NBASE,NITER,NCLAS,NKLA,
d163 1
a163 1
     &   Q(NNT),Q(NVAL),Q(NPK),Q(NNO) ,LUNI,LUNK)
d169 1
a169 1
        READ(LUNK) NUMIM, NFAC, NKLA, KFAC, (KV(K), K=1, KFAC)                  
d176 1
d178 1
a178 1
     &          Q(NK),Q(NI),Q(NPK),Q(NGT),Q(NIV), LUNK,LUNI)
@


1.17
log
@trap for excessive partitions
@
text
@d48 6
a53 1
	INTEGER *8                      :: IBIG
@


1.16
log
@ open source issues
@
text
@d10 2
a11 1
                                                  
d46 1
a46 1
        PARAMETER                      (LFA=16)
d48 1
d110 11
@


1.15
log
@imc header changed
@
text
@d5 5
a9 5
C             02.09.81                              31-JAN-86 
C             DENDRO CALL ADDED                      NOV 86 al
C             LONG FILE NAMES                        JAN 89 al
C             INCLUDED FILES FOR SCLASSY, SEMIS      MAR 02 al                                                       *
C             EXTENSIVE MODIFICATIONS                OCT 02 ARDEAN LEITH
a15 8
C DISCLAIMER: NO GUARANTEES OF PERFORMANCE ACCOMPANY THIS SOFTWARE,             
C NOR IS ANY RESPONSIBILITY ASSUMED ON THE PART OF THE AUTHOR                   
C OR THE INSTITUTION.  ALL THE SOFTWARE HAS BEEN TESTED EXTENSIVELY             
C AND EVERY EFFORT HAS BEEN MADE TO INSURE ITS RELIABILITY.                     
C THE FOLLOWING SOFTWARE MAY NOT BE COMMUNICATED TO A THIRD PARTY               
C UNDER ANY FORM WITHOUT WRITTEN PERMISSION OF THE AUTHOR.                      
C PLEASE REPORT ANY BUG(S) TO JPB AT (713) 792 5200.                           
C OR THRU ARPANET AT  ......!rice!ots!ut-path!suprim                            
@


1.14
log
@cosmetic?
@
text
@d93 1
a93 1
        READ(LUNI,*) NUMIM, NFAC                                       
@


1.13
log
@CA rewrite
@
text
@d4 6
a9 6
C SCLASSY.F     02.09.81                                                           *         
C               31-JAN-86 
C               DENDRO CALL ADDED  TO PLOT DENDROGRAM       NOV 86 al
C               LONG FILE NAMES JAN 89 al
C               INCLUDED FILES FOR SCLASSY, SEMIS           MAR. 02 al                                                       *
C               EXTENSIVE MODIFICATIONS                     OCT  02 ARDEAN LEITH
d26 1
a26 1
C  SCLASSI
d29 3
a31 3
C          OBJECTS BY AGGREGATION AROUND MOBILE CENTERS AND IN A SECOND*        
C          STEP, A HIERARCHIC ASCENDENT CLASSIFICATION OF THE GRAVITY  *        
C          CENTERS OF THE CLUSTERS DETERMINED IN THE FIRST STEP.       *        
d33 1
a33 1
C   CALL TREE:  SCLASSI - NOYAU - PARST - RETIR    
d90 1
a90 1
C       OPEN & READ HEADER OF IMC FILE FORM='FORMATTED'
@


1.12
log
@CA & CL rewrite
@
text
@a172 21
C----------------------------------=*=----------------------------------        
C *NAME* = NOYAU.FOR                   31-JAN-86      13:23:08                  
C*--------------------------------------------------------------------*         
C*                                                                    *         
C PURPOSE:  CLASSIFICATION ACCORDING TO FACTORIAL COORDINATES         *         
C INPUT  ...  DATA AND WEIGHTS IN /LUNI/ UNFORMATTED                  *         
C N2DIM     = SUP (NKLA, 2*NCLAS)                                     *         
C KDIM      = SUP (NUMIM, NCLAS**NBASE, 2*NKLA - 1)                   *         
C MDIM      = SUP (NKLA*(NKLA-1)/2)                                   *         
C LDIM      = SUP (NKLA)                                              *         
C L2DIM     = SUP (2*NKLA - 1)                                        *         
C NFAC      = NUMBER OF COORDINATES IN RECORD FOLLOWED BY WEIGHT      *         
C KFAC      = NUMBER OF COORDINATES USED FOR CALCULATION              *         
C NUMIM     = NUMBER OF OBJECTS TO BE CLASSIFIED                      *         
C NBASE NITER NCLAS NKLA ... PARAMETERS DEFINED IN SUBROUTINE PARST   *         
C          WORKING ARRAYS  GT(*,*) D(*) KLAS(*) CI(*) U(*) JV(*) JW(*)*         
C           U(), JV(), JW() EQUIVALENCED TO D()                       *         
C                                                                     *         
C   DENDRO CALL ADDED NOV 86 al TO PLOT DENDROGRAM 
C
C*--------------------------------------------------------------------*         
a173 4
      SUBROUTINE NOYAU(N2DIM,KDIM,MDIM,LDIM,L2DIM,NFAC,KFAC,NUMIM,KV,          
     &                 NBASE, NITER, NCLAS, NKLA, IDI,                
     &                 KLAS, D, U, JV, JW, IDK, CI, GT,               
     &                 NUM,LA,LB,IV,IW,V,W,NT,VAL,PK,NO,LUNI,LUNK)
a174 1
        COMMON /UNITS/LUN,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
a175 4
      DIMENSION GT(N2DIM,KFAC),D(MDIM),KLAS(NUMIM),CI(NFAC),IDI(NUMIM),         
     &          U(KDIM), JV(KDIM), JW(KDIM), IDK(NKLA)                         
        DIMENSION NUM(LDIM),LA(LDIM),LB(LDIM),NT(L2DIM),VAL(L2DIM),               
     &       PK(L2DIM),NO(L2DIM),IV(LDIM),W(LDIM),IW(LDIM),V(LDIM)                    
a176 3
        PARAMETER      (LFA=16)
        DIMENSION      KV(LFA)   
        CHARACTER * 1  NULL,ANS
a177 1
        DATA NDOC/10/
a178 1
        NULL = CHAR(0)
a179 6
C       AGGREGATION AROUND MOBILE CENTERS AND STABLE CLUSTERING             
        CALL PARST(N2DIM,KDIM,NFAC,NUMIM,KFAC,NBASE,NITER,NCLAS,NKLA,            
     &                        KLAS,JW,U,CI,JV,GT, KFIN,LUNI,LUNK,IDI)              
                                                                               
C       HIERARCHICAL CLASSIFICATION OF THE CLUSTER GRAVITY                  
C       CENTERS ACCORDING TO THE VARIANCE CRITERION (WARD)                  
a180 1494
C       IMPORTANT CHANGE: LIMIT THE NUMBER OF CLUSTERS TO BE USED
C       IN THE HAC. 8/25/86

	WRITE(NDAT,1111) (KLAS(K),K=1,NUMIM)
1111	FORMAT(20I5)

	CALL RDPRM(PERC,NOT_USED,
     &      'PERCENT FOR CLASS CUTOFF (0=NO CUTOFF)')

	IF (PERC .NE. 0.0) THEN
          NTH = 0.01 * PERC * FLOAT(NUMIM) + 0.5
          DO I=1,NKLA
            IF (JV(I) .LT. NTH) THEN
               NKLA = I-1
               EXIT
            ENDIF
	  ENDDO
        ENDIF

        IF (NKLA .GT. KFIN) NKLA = KFIN                              
        MCARD = NKLA * (NKLA-1) / 2                              
        CALL DEUCL(N2DIM,NKLA,MCARD,NUMIM,KFAC,NFAC,            
     &            KLAS, D, GT, PK, CI, LUNI)

        JFIN  = 2 * NKLA - 1                                
        CALL CHAVA(NKLA,MCARD,JFIN,
     &             D,PK,VAL,LA,LB,NT,NO,LUNK,5)                  
                                          
C       SAVE CLASSIFICATION ON LUNK                                                                                                                      
        CALL REW(LUNK,0)                                                         
        WRITE(LUNK) NUMIM, NFAC, NKLA, KFAC, (KV(K), K=1, KFAC)                 
        WRITE(LUNK) (KLAS(I), I=1,NUMIM), (IDI(I), I=1,NUMIM),                   
     &              (PK(L),L=1,NKLA), ((GT(L,J),L=1,NKLA),J=1,KFAC)              
                                                                               
C       GENERATION OF IDENTIFIERS, ADDED 1/2001 al SEEMS TO BE
C       NEEDED IN DENDRO BUT REMOVED BY pp SOMETIME ??
                            
        DO  K=1,NKLA
           IDK(K) = K
        ENDDO

C       CLASSIFICATION TREE OF THE NKLA CENTERS                             
                                                                               
        CALL RDPRMC(ANS,NA,.TRUE.,
     &   'DO YOU WANT A DENDROGRAM POSTSCRIPT PLOT? (Y/T/N)',NULL,IRT)

        IF (ANS .EQ. 'T') THEN
         CALL DENDRO2(NKLA, JFIN, VAL, LA, LB, PK, IDK,
     &               NO,NUM,NT,IV,IW,V,W,VMIN,VMAX)             

        ELSEIF (ANS .NE. 'N' .AND. ANS .NE. 'n') THEN
         CALL DENDRO(NKLA, JFIN, VAL, LA, LB, PK, IDK,
     &               NO,NUM,NT,IV,IW,V,W,VMIN,VMAX)             

        ELSE
         CALL ARBRE(NKLA, JFIN, VAL, LA, LB, PK, IDK,   
     &               NO,NUM,NT,IV,IW,V,W,VMIN,VMAX)
        ENDIF

C       CAN LIST THE DENDROGRAM IN DOCUMENT FILE IF DESIRED
        CALL RDPRMC(ANS,NA,.TRUE.,
     &     'DO YOU WANT A DENDROGRAM DOC. FILE? (Y/N)',NULL,IRT)

        IF (ANS .NE. 'N') THEN
           CALL DENLST(NDOC,VMIN,VMAX,NKLA,V,NUM,IRTFLG)
        ENDIF

C       CAN LIST THE DENDROGRAM IN DOC. FILE FOR WEB IF DESIRED - liy
        CALL RDPRMC(ANS,NA,.TRUE.,
     &      'DO YOU WANT A CLUSTER DOC FILE? (Y/N)',NULL,IRT)

        IF (ANS .NE. 'N' .AND. ANS .NE. 'n') THEN
           CALL CLUSTERLST(NDOC,VMIN,VMAX,NKLA,V,NUM,
     &         NUMIM,KLAS,IDI,IRTFLG)
        ENDIF

C       SUCCESSIVE TRUNCATIONS OF THE CLASS. TREE OUTPUT RESULTS TO LUNK 
        DO KPRO =2,NKLA-1                                                   
           CALL COUPE(NUMIM,NKLA,KPRO, PK,LA,LB,IV,KLAS,NT, IW)                     
           WRITE(LUNK) (IV(J), J=1,NKLA)                                           
        ENDDO

        END

C*--------------------------------------------------------------------*         
C*                                                                    *         
C     CLUSTERING OF NUMIM OBJECTS CHARACTERIZED BY KFAC COORDINATES.  *         
C NKLA CLUSTERS ARE DETERMINED.  THE NKLA-1 FIRST CLUSTERS            *         
C CONTAIN THE MOST STABLE OBJECTS AS OBTAINED FROM THE NBASE          *         
C BASIC PARTITIONS.  EACH BASIC PARTITION IS GENERATED BY NITER       *         
C ITERATIONS AROUND NCLAS SEED-OBJECTS RANDOMLY DRAWN.  THE           *         
C SEED OBJECTS ARE REPLACED AFTER THE FIRST ITERATION BY THE          *         
C GRAVITY CENTERS OF THE GENERATED CLASSES.                           *         
C    INPUT  ..... DATA IN (LUNI) UNFORMATTED                          *         
C NUMIM     = NUMBER OF OBJECTS TO BE CLUSTERED                       *         
C KFAC      = NUMBER PF COORDINATES FOR THE OBJECTS                   *         
C NBASE     = NUMBER OF BASIC PARTITIONS                              *         
C NITER     = NUMBER OF ITERATIONS FOR EACH BASIC PARTITION           *         
C NCLAS     = NUMBER OF CLASSES FOR EACH BASIC PARTITION              *         
C NKLA      = FINAL NUMBER OF CLUSTERS  ... LES NKLA-1 PREMIERES      *         
C             CONTIENDRONT  LES INDIVIDUS LES PLUS STABLES            *         
C N2DIM     = MAJORANT DE  2*NCLAS                                    *         
C KDIM      = MAJORANT DE  MAX (NUMIM , NCLAS ** NBASE)               *         
C    OUTPUT   ..... NUMBER AND COORDINATES OF SEED-OBJECTS            *         
C KLAS(NUMIM)= CLASS NUMBER OF EACH OBJECT                            *         
C    AND, IF NBASE.GT.1                                               *         
C KFIN       = NUMBER OF FINAL CLUSTERS NOT EMPTY                     *         
C JV(KFIN)   = SIZES RANKED IN DESCENDING ORDER OF THE                *         
C              STABLE CLUSTERS                                        *         
C     WORKING ARRAYS  CI(KFAC),JW(KDIM),G(N2DIM,KFAC)                 *         
C PROGRAMS CALLED SEN3A, SHELK, RETIR, OUVRE, CLAST, STABK.           *         
C*                                                                    *         
C*--------------------------------------------------------------------*         

      SUBROUTINE PARST(N2DIM,KDIM,NFAC,NUMIM,KFAC,NBASE,NITER,NCLAS,           
     &                  NKLA,KLAS,JW,U,CI,JV,G,KFIN,LUNI,LUNK,IDI)        

      DIMENSION KLAS(NUMIM),CI(NFAC),G(N2DIM,KFAC)                              
      DIMENSION U(KDIM), JV(KDIM), JW(KDIM)  
      DIMENSION IDI(NUMIM)  
                                   
      COMMON /UNITS/LUN,NIN,NOUT,NECHO,IFOUND,NPROC,NDAT
                                                 
      NSTAB = NKLA - 1                                                          
      WRITE(NDAT,1000)  NUMIM , KFAC                                            
 1000 FORMAT (6X,'CLUSTERING BY AGGREGATION AROUND MOBILE CENTERS',///,       
     &        6X,'PARTITION OF:' ,I7,' OBJECTS CHARACTERIZED'  ,             
     &        ' BY:' ,I5,'  CARTESIAN COORDINATES',//)              

      IF (NBASE .GT. 1) WRITE(NDAT,2000) NKLA,NSTAB,NBASE,NITER,NCLAS          
 2000 FORMAT(6X,'PARTITION CONTAINS:' ,I5,' CLASSES',/,
     &   6X,'THE',I5,' FIRST CONTAINS THE MOST STABLE OBJECTS IN THE', 
     &            I5,'  BASIC PARTITIONS',/,
     &   6X,'EACH PARTITION IS GENERATED BY',I5,' ITERATIONS',                    
     &      ' AROUND',I5,' SEED-OBJECTS DRAWN AT RANDOM',/)              

C     EXHAUSTIVE RANDOM DRAWING OF THE SEED-OBJECTS                       
C     FOR THE NBASE PARTITION                                             

      KGERM = NCLAS*NBASE                                                       
      CALL RETIR(NUMIM, KLAS, KGERM, JV)                                     

C     COPY OVER ALL SEED-OBJECTS ON LUNK                                 
      CALL REWF(LUNI, 1)                                                         
      REWIND LUNK                                                              
      DO I = 1,NUMIM                                                      
         READ(LUNI,*) (CI(KF), KF=1,KFAC), FDUM,FDUM,FIM
         IDI(I) = FIM                                         
         DO M = 1,KGERM                                                      
            IF (JV(M) .EQ. I) WRITE(LUNK) I, (CI(KF),KF=1,KFAC)              
        ENDDO      
      ENDDO

C     BIG LOOP OVER THE BASIC PARTITIONS N=1,NBASE                        
      KG1   = 1                                                                 
      DO 100 N = 1,NBASE                                                      
         KG2   = KG1 + NCLAS - 1                                                   
         WRITE(NDAT,3000)                                      
 3000    FORMAT(/,6X,'CONSTRUCTION OF PARTITION WITH SEED-OBJECTS:')                              

         WRITE(NDAT,3001)  (JV(LL), LL=KG1,KG2)
 3001    FORMAT(/' ',6X,10I6)                              
 
         J = 0                                                                 

C        SEED-OBJECTS TABLE FOR PARTITION NUMBER N                           

         REWIND LUNK                                                              
         DO   L = 1,KGERM                                                      
            READ(LUNK) I , (CI(KF), KF=1,KFAC)                                     
            DO 40  LL = KG1,KG2                                                     
               IF (JV(LL) .NE. I) GO TO  40                                
               J     = J + 1                                                             
               DO KF = 1,KFAC                                                      
                  G(J,KF)= CI(KF)                                                           
               ENDDO
   40       CONTINUE                                                                
	 ENDDO

C        GENERATION OF PARTITION N BY NITER ITERATIONS.                      
C        UPDATE CENTERS AND CLASS NUMBERS OF OBJECTS.                        
         DO NIT = 1,NITER                                                    
            CALL CLAST(N2DIM,NFAC,NUMIM,KFAC,NCLAS,G,JW,CI,U,LUNI)                   
       	ENDDO

        WRITE(NDAT,4001) NITER                                                    
 4001   FORMAT(6X,'SIZE OF CLUSTERS AFTER: ',I4,' ITERATIONS')
                
        WRITE(NDAT,5000) (U(J), J=1,NCLAS)                                        
 5000   FORMAT(6X,10F6.0 )
                                                  
        IF (N .GT. 1) GO TO  80                                
        DO   I = 1,NUMIM                                                      
           KLAS(I)= JW(I)                                                            
        ENDDO
        IF (NBASE .NE. 1) GO TO  100                               
        KFIN  = NCLAS                                                             
        NKLA  = NCLAS                                                             
        RETURN 
                                                                
   80   CONTINUE                                                                
        DOI = 1,NUMIM                                                      
           KLAS(I)= KLAS(I) + (JW(I) - 1)*NCLAS**(N-1)                               
      	ENDDO

C       END OF BASIC PARTITION NUMBER N                                     

  100   KG1= KG1 + NCLAS                                                       

C       GENERATION OF THE STABLE CLUSTERING WITH NKLA CLUSTERS              
        KTOT  = NCLAS ** NBASE                                                    
        CALL STABK(NUMIM,NKLA,KLAS,U,JV,JW,KTOT,KFIN,NIND)
                       
        PCT   = 100.0*NIND/FLOAT(NUMIM)                                           
        WRITE(NDAT,6000)  KTOT                                                    
 6000   FORMAT (/,6X,'SIZE OF THE:',I6,' CLUSTERS FROM THE',                   
     &               ' CROSSED-PARTITION',/,
     &            6X,'FOLLOWED BY THE CUMULATIVE PERCENTAGES.')                                        

        WRITE(NDAT,7000) (JV(K),K=1,KFIN)                                       
 7000   FORMAT(//,' ',12I6)                                                    

        WRITE(NDAT,8000) (U(K),K=1,KFIN)                                        
 8000   FORMAT(//,' ',12F6.1)                                                  

        WRITE(NDAT,9000)  NKLA,NIND,PCT                                         
 9000   FORMAT(//,6X,'SIZE OF RESIDUAL CLUSTER (NUMBER',I4,')=',I6,///,
     &            6X,'PERCENTAGE=',F9.2,/,
     &            ' ',72('-')/)                 

         RETURN                                                                 
         END                                                                    


C*--------------------------------------------------------------------*         
C*                                                                    *         
C*      DETERMINATION OF CLASSES FROM COORDINATES.  THE DISTANCE      *         
C*      BETWEEN OBJECT I AND THE NCLAS CENTERS IS CALCULATED.         *         
C*      THE COORDINATES OF THE NCLAS CENTERS ARE IN G(NCLAS,*).       *         
C*      OBJECT I IS ASSIGNED TO THE NEAREST CLASS.  THE GRAVITY       *         
C*      CENTERS OF THE NEWLY FORMED NCLAS CLASSES ARE DETERMINED      *         
C*      AND USED IN THE NEXT ITERATION.                               *         
C*      FILLINF OF KLAS(NUMIM).                                       *         
C*                                                                    *         
C*--------------------------------------------------------------------*         

      SUBROUTINE CLAST(N2DIM,NFAC,NUMIM,KFAC,NCLAS,G,KLAS,CI,PCLAS,            
     &                  LUNI)

C     I DO NOT KNOW IF SAVE IS NEEDED FEB 99 al
      SAVE
                                                                               
      COMMON /UNITS/LUN,NIN,NOUT

      DIMENSION KLAS(NUMIM),CI(NFAC),PCLAS(NCLAS), G(N2DIM,KFAC)
      DIMENSION VAR(10)

      CALL REWF(LUNI, 1)
                                                         
      DO N = 1,NCLAS                                                      
         DO KF = 1,KFAC                                                      
            G(NCLAS+N,KF) = 0.0                                                        
	 ENDDO
      PCLAS(N) = 0.0                                                             
      ENDDO
                                                                         
C     ASSIGNMENT OF OBJECT TO THE NEAREST CENTER                              
                                                                               
      DO I = 1,NUMIM                                                      
         READ(LUNI,*) (CI(KF),KF=1,KFAC)                                              
         SUP   = 1.0 E+15                                                          
         KAT   = 1 
                                                                
         DO  N=1,NCLAS                                                      
            DIST  = 0.0                                                               
            DO KF = 1,KFAC                                                      
               DC   = CI(KF) - G(N,KF)                                                  
               DIST = DIST + DC*DC                                                      
	    ENDDO
            IF (DIST .GT. SUP) CYCLE                                
            KAT   = N                                                                 
            SUP   = DIST                                                              
         ENDDO                                                                
         KLAS(I)    = KAT                                                              
         PCLAS(KAT) =  PCLAS(KAT) + 1.0                                              
         DO KF = 1,KFAC                                                      
           G(NCLAS+KAT,KF) = G(NCLAS+KAT,KF) + CI(KF)                                 
         ENDDO
      ENDDO
                                                                              
C     PROTECTION AGAINST AN EMPTY CLASS (REJECTED FURTHER)               
                                                                              
        DO N=1,NCLAS                                                      
           IF (PCLAS(N) .GT. 0.0)  CYCLE                               
           DO KF = 1,KFAC                                                      
             G(NCLAS+N,KF) = 1.0 E+8                                                    
	   ENDDO
        ENDDO                                                                
                                                                               
C       UPDATE COORDINATES OF THE GRAVITY CENTERS                              
        DO N=1,NCLAS                                                     
           IF (PCLAS(N) .LE. 0.0)  PCLAS(N) = 1.0 E-8                    
           DO  KF = 1,KFAC                                                      
             G(N,KF)= G(NCLAS+N,KF) / PCLAS(N)
	   ENDDO
	ENDDO
	DO  N=1,NCLAS
           VAR(N)=0.0
	ENDDO

	DO I=1,NUMIM
	   N = KLAS(I)
	   DO KF=1,KFAC
	      VAR(N) = VAR(N) + (CI(KF) - G(N,KF))**2
	   ENDDO
	ENDDO


        RETURN                                                                 
        END                                                                    

C*--------------------------------------------------------------------*         
C*                                                                    *         
C*      EXHAUSTIVE RANDOM DRAWING OF K INDICES BETWEEN 1 AND N.       *         
C*      STORED IN IDK(*), IDN(N) IS A WORKING ARRAY.                  *         
C*      CALL ... SEN3A. REPLACED BY RAN FUNCTION WITH TIME-DEPENDENT  *         
C*      SEED J.F. 8/20/86. OPTION FOR SEED SPECIFICATION FROM PREVIOUS*
C*	RUN INSTALLED J.F. 11/26/86				      *         
C==06.07.80                                                           *         
C*--------------------------------------------------------------------*         

      SUBROUTINE RETIR(N,IDN,K,IDK)                                       

      DIMENSION  IDN(N) , IDK(K)

      DO J = 1,N                                                          
         IDN(J) = J                                                                 
      ENDDO

      KFIN  = K                                                                 
      IF (K .GT. N) KFIN = N 
                                
      DO  L = 1,KFIN                                                       
          X = N - L + 1                                                         
C         I = X*RAN(IST) + 1.0
	
          CALL RANDOM_NUMBER(VALUE)
          I = X * VALUE + 1.0
                                              
          IDK(L) = IDN(I)                                                            
          IF (I .NE. N) THEN 
             N1 = N - L                                                             
             IF (N1 .GT. 0) THEN                                
                DO   J = I,N1                                                         
                   IDN(J)= IDN(J+1)                                                          
                ENDDO
             ENDIF
          ENDIF
       ENDDO

       RETURN                                                                 
       END 
          

  

C*--------------------------------------------------------------------*         
C*                                                                    *         
C*      INPUT KLAS(NUMIM) CONTAINS THE CROSSED-PARTITION WITH KTOT    *         
C*      CATEGORIES.  PRODUCT OF THE NBASE INITIAL PARTITIONS.         *         
C*      OUTPUT KLAS(NUMIM) CONTAINS A PARTITION OF NKLA CLASSES.      *         
C*      THE (NKLA-1) FIRST CLASSES ARE COMPOSED OF STABLE OBJECTS IN  *         
C*      THE NBASE INITIAL PARTITIONS.  NIND OBJECTS IN THE LAST ONE.  *         
C*      WORKING ARRAYS U(*), IU(*), IV(*).                            *         
C*      DIMENSION KTOT = NCLAS ** NBASE.  OUTPUT, IU(1,...,KTOT)      *         
C*      CONTAINS THE SIZE OF THE STABLE CLASSES U(1,...,KFIN)         *         
C*      CUMULATIVE PERCENTAGES OF SIZE.                               *         
C*      SUBROUTINE CALLED ... SHELK                                   *         
C*                                                                    *         
C==06.07.80                                                           *         
C==01.12.86                                                           *         
C*--------------------------------------------------------------------*         

      SUBROUTINE STABK (NUMIM, NKLA, KLAS, U, IU, IV, KTOT, KFIN,NIND)          

C     I DO NOT KNOW IF SAVE IS NEEDED FEB 99 al
      SAVE

      DIMENSION  U(KTOT), IU(KTOT), IV(KTOT), KLAS(NUMIM)                       
      INCLUDE 'CMBLOCK.INC' 

C     THE SIZES OF THE CROSSED-PARTITION ARE IN U(*)                        

      DO   K = 1,KTOT                                                       
         U(K) = 0.0                                                                
      ENDDO

      DO   I = 1,NUMIM                                                      
         K     = KLAS(I)                                                           
         U(K)  = U(K) + 1.0                                                        
      ENDDO

C     THE MOST IMPORTANT (NKLA - 1) CLASSES ARE KEPT.  THE REMAINING            
C     ARE IN NKLA.
                                                              
      CALL SHELK (KTOT, U, IU )                                                 
      DO   K = 1,KTOT                                                       
         M     = IU(K)                                                             
         IV(M) = KTOT - K + 1                                                      
      ENDDO

      DO  I = 1,NUMIM                                                       
         L     = KLAS(I)                                                           
         KO    = IV(L)                                                             
         IF (KO .GT. NKLA) KO = NKLA                                
         KLAS(I) = KO
      ENDDO                                                             
      DO K = 1,KTOT                                                       
         KS    = KTOT - K + 1                                                      
         IU(K) = U(KS) + 0.00001                                                   
      ENDDO

C     RESULTS OF THE CLASSIFICATION                                        

      KFIN  = 0                                                                 
      NIND  = 0                                                                 
      DO K = 1,KTOT                                                       
         IF (K .LT. NKLA) NIND = NIND + IU(K)                      
         IF (IU(K) .LE. 0) GO TO  70                                
         KFIN  = KFIN + 1                                                          
         U(K)  = 100.0*FLOAT(IU(K)) / FLOAT(NUMIM)                                 
      ENDDO

   70   CONTINUE                                                                
      NIND  = NUMIM - NIND                                                      
      DO   K = 2,KFIN                                                       
         U(K)  = U(K) + U(K-1)                                                     
      ENDDO

      RETURN                                                                 
      END                                                                    
                                                       



C*---------------------------------------------------------------------*        
C  SORT VECTOR X() IN ASCENDING ORDER                                  *        
C  WARNING: ORIGININAL VECTOR(X) GETS CLOBBERED UPON RETURN            *        
C  BUT THE ORIGINAL LOCATIONS ARE SAVED IN VECTOR KX()                 *        
C  REFERENCES   (1) J.BOOTHROYD/SHELLSORT ALGORITHM.201/COMM.ACM/VOL.6 *        
C  (1963),NO.8,PP.445/  (2) D.A.SHELL/A HIGH-SPEED SORTING PROCEDURE/  *        
C  COMM.ACM/VOL.2(1959),PP.30-32/                                      *        
C==07.06.80                                                            *        
C*---------------------------------------------------------------------*        

      SUBROUTINE SHELK(N, X, KX )
                                            
C     I DO NOT KNOW IF SAVE IS NEEDED FEB 99 al
      SAVE

      DIMENSION  X(N) , KX(N) 
                                                  
      DO   J = 1,N                                                          
         KX(J) = J                                                                 
      ENDDO

      I     = 1                                                                 
   20 I     = I + I                                                             
      IF (I .LE. N) GO TO  20                                          
      M     = I - 1                                                             
   30 M     = M / 2                                                             
      IF (M .EQ. 0) GO TO  70                                          
      K     = N - M  
                                                           
      DO 60 J = 1,K                                                          
         JM = J + M                                                             
   40    JM = JM - M                                                            
         IF (JM .LE. 0) GO TO  60                                          
         L = JM + M                                                            
         IF (X(L) .GE. X(JM)) GO TO  60                                          
         PIV   = X(JM)                                                             
         X(JM) = X(L)                                                              
         X(L)  = PIV                                                               
         KPIV  = KX(JM)                                                            
         KX(JM)= KX(L)                                                             
         KX(L) = KPIV                                                              
         GO TO  40 
                                         
   60   CONTINUE                                                                
        GO TO  30 
                                         
   70   RETURN                                                                  
        END                                                                     

C*--------------------------------------------------------------------*         
C*                                                                    *         
C*      CONSTRUCTION OF THE MONO-INDEXED TABLE OF DISTANCES BETWEEN   *         
C*      THE NKLA CLASSES IN THE EUCLIDEAN SPACE CHARACTERIZED BY THE  *         
C*      KFAC FIRST FACTORIAL COORDINATES.                             *         
C*                                                                    *         
C*   INPUT:                                                           *         
C*      NKDIM        = MAJORIZER OF NKLA FOR T(*,KFAC)                *         
C*      NKLA         = NUMBER OF CLUSTERS FOR THE GIVEN PARTITION     *         
C*      MCARD        = NKLA * (NKLA-1) / 2  = DIMENSION FOR D(*)      *         
C*      JFIN         = 2 * NKLA - 1   = DIMENSION OF WORKING ARRAYS   *         
C*      NUMIM        = NUMBER OF OBJECTS TO BE CLUSTERED              *         
C*      KFAC,NFAC    = FIRST KFAC FACTORIAL COORDINATES FROM A TOTAL  *         
C*                     OF NFAC                                        *         
C*      KLAS(NUMIM)  = GIVEN PARTITION IN NKLA CLUSTERS.              *         
C*      LUNI         = FILE CONTAINING THE FACTORIAL COORDINATES OF   *         
C*                     THE GRAVITY CENTERS OF THE CLUSTERS.                     
C*                                                                    *         
C*   OUTPUT:                                                          *         
C*      T(NKLA,KFAC) = TABLE CONTAINING THE COORDINATES OF THE NKLA   *         
C*                     CENTERS                                        *         
C*      PK(JFIN)    = WEIGHT OF THE NKLA CLUSTERS                     *         
C*      D(MCARD)    = MATRIX OF DISTANCES BETWEEN CLUSTERS            *         
C*                                                                    *         
C*   WORKING ARRAY ... CI(KFAC)                                       *         
C*   INTERNAL FUNCTION  ... MONO.                                     *         
C*                                                                    *         
C==02.03.81                                                           *         
C==01.12.86                                                           *         
C*--------------------------------------------------------------------*         

      SUBROUTINE DEUCL(NKDIM,NKLA,MCARD,NUMIM,KFAC,NFAC,                       
     &                  KLAS, D, T, PK, CI, LUNI )                              

      DIMENSION KLAS(NUMIM),D(MCARD),PK(NKLA),CI(NFAC),T(NKDIM,KFAC)                                                   

C     MONO-INDEXING OF THE TABLE OF DISTANCES                              

      MONO(K1,K2)= MIN0(K1,K2) + ((MAX0(K1,K2)-1)*(MAX0(K1,K2)-2)/2)            

C     GRAVITY CENTER OF THE NKLA CLASSES                                   

      CALL REWF(LUNI, 1)                                                         
      DO  J=1,NKLA                                                       
         PK(J) = -1.0                                                             
      ENDDO 

      DO I = 1,NUMIM                                                      
         READ(LUNI,*) (CI(K),K=1,KFAC)                                            
         J     = KLAS(I)                                                           
         IF (PK(J) .LE. -0.99) THEN                                
            PK(J) = 1.0                                                               
            DO K = 1,KFAC                                                       
               T(J,K) = CI(K)
	    ENDDO                                                             
         ELSE                       
            PK(J) = PK(J) + 1.0                                                       
            PKJ   = 1.0 / PK(J)                                                       
            DO   K = 1,KFAC                                                       
               CI(K)  = CI(K)  - T(J,K)                                                    
               T(J,K) = T(J,K) + PKJ*CI(K)                                                
	    ENDDO
        ENDIF
      ENDDO                                                                

C       CALCULATION OF THE MATRIX OF DISTANCES BETWEEN OBJECTS               

        DO K1 = 2,NKLA                                                      
           K3    = K1 - 1                                                            
           DO K2 = 1,K3                                                        
              K1K2    = MONO (K1, K2)                                                     
              D(K1K2) = 0.0                                                              
              DO K = 1,KFAC                                                       
                 AJ      = T(K1,K) - T(K2,K)                                                 
                 D(K1K2) = D(K1K2) + AJ*AJ                                                  
              ENDDO
           ENDDO
	ENDDO
        DO K1 = 2,NKLA                                                      
           K3 = K1 - 1                                                            
           DO K2 = 1,K3                                                        
              K1K2   = MONO (K1, K2)                                                     
              D(K1K2) = PK(K1)*PK(K2)*D(K1K2) / (PK(K1)+PK(K2))                          
           ENDDO
        ENDDO

        END  
                                                                  
C----------------------------------=*=----------------------------------        
C  CHAVA.F                    31-JAN-86      13:23:01                  
C*--------------------------------------------------------------------*         
C*                                                                    *         
C*      HIERARCHICAL ASCENDENT CLASSIFICATION USING THE VARIANCE AS   *         
C*      AN AGGREGATION CRITERION.  THE DISTANCES ARE IN THE MONO-     *         
C*      INDEXED TABLE D(MCAR).                                        *         
C*                                                                    *         
C*   INPUT:                                                        *         
C*      NKLA            = NUMBER OF ELEMENTS TO BE CLASSIFIED         *         
C*      MCARD           = NKLA * (NKLA-1) /2                          *         
C*      JFIN            = 2*NKLA - 1                                  *         
C*      D(MCARD)        = TABLE OF DISTANCES DESTROYED AFTER EXECUTION*         
C*      PK(1,...,NKLA)  = WEIGHT OF THE NKLA ELEMENTS                 *         
C*                                                                    *         
C*   OUTPUT:                                                       *         
C*      PK(NKLA+1,...)      = WEIGHT OF THE NODES OF THE HIERARCHY    *         
C*      IDK(NKLA)           = ELEMENT IDENTIFIERS (NUMBERS IN A4)     *         
C*      LA(NKLA,LB(NKLA)    = SENIORS AND JUNIORS OF THE              *         
C*                            CLASSIFICATION                          *         
C*      VAL(NKLA+1,...)     = NODE INDICES                            *         
C*      NT(NKLA+1,...)      = SIZE OF CLASSES                         *         
C*      NO(NKLA+1,...)      = WORKING ARRAY                           *         
C*                                                                    *         
C*      INTERNAL FUNCTION ... MONO                                    *         
C*                                                                    *         
C==04.11.81                                                           *         
C==01.12.86                                                           *         
C*--------------------------------------------------------------------*         

       SUBROUTINE CHAVA(NKLA, MCARD, JFIN,  D, PK,                         
     &                  VAL, LA, LB, NT, NO, NBAND, MODE)

       INCLUDE 'CMBLOCK.INC'

      DIMENSION D(MCARD), PK(JFIN),VAL(JFIN),LA(NKLA),                 
     &          LB(NKLA),NT(JFIN),NO(JFIN)                                

      CHARACTER*8  CTM
      CHARACTER*1  IAST,KLIGN(110)

      DATA  IAST /'*'/

C      MONO-INDEXING OF THE TABLE OF DISTANCES                             
       MONO(K1,K2)= MIN0(K1,K2) + ((MAX0(K1,K2)-1)*(MAX0(K1,K2)-2)/2)            

C      GENERATION OF IDENTIFIERS, NUMBERS IN A4                            

       IF (MODE .EQ. 1) THEN
  	   WRITE(NDAT,*) 'CLUSTERING CRITERION:  SINGLE LINKAGE'
        ELSEIF (MODE.EQ. 2) THEN
  	   WRITE(NDAT,*) 'CLUSTERING CRITERION:  COMPLETE LINKAGE' 
        ELSEIF (MODE.EQ. 3) THEN
  	   WRITE(NDAT,*) 'CLUSTERING CRITERION:  AVERAGE LINKAGE' 
        ELSEIF (MODE.EQ. 4) THEN
  	   WRITE(NDAT,*) 'CLUSTERING CRITERION:  CENTROID METHOD' 
        ELSEIF (MODE.EQ. 5) THEN
  	   WRITE(NDAT,*) 'CLUSTERING CRITERION:  WARDS METHOD' 
        ENDIF

	IF (MODE.LE.3)  D = SQRT(D)

        WRITE (NDAT,650)                                                           
  650   FORMAT (//1X,'DESCRIPTION OF THE HIERARCHY NODES'      /                  
     &      //1X,'  NO. SENIOR JUNIOR NO.  WEIGHT   INDEX'   /)

        DO L=1,100                                                          
            KLIGN(L)= IAST 
	ENDDO 
                                                          
        DO J = 1,JFIN                                                       
           NO(J)  = J                                                                 
           VAL(J) = 0.0                                                               
           NT(J)  = 1                                                                 
        ENDDO

C       CALCULATIONS AND LISTINGS                                           

        JDEB  = NKLA + 1                                                          
        VMAX  = 0.0 
                                                              
        REWIND(NBAND)                                                             
        DO J=JDEB,JFIN                                                   
           DINF  = D(1)                                                              
           II1   = 1                                                                 
           II2   = 2                                                                 
           II    = 2*NKLA  - J + 1                                                   
           DO I1 = 2,II                                                       
              I3    = I1 - 1                                                            
              DO I2 = 1,I3                                                       
                 I1I2  = MONO (I1, I2)                                                     
                 IF (D(I1I2) .GE. DINF) CYCLE                               
                 DINF  = D(I1I2)                                                           
                 II1   = I1                                                                
                 II2   = I2                                                                
              ENDDO                                                                
           ENDDO                                                                
           IR     = J - JDEB + 1                                                      
           LA(IR)  = MIN0 (NO(II1), NO(II2))                                           
           LB(IR)  = MAX0 (NO(II1), NO(II2))                                           
           VAL(J)  = DINF                                                              
           LAI     = LA(IR)                                                            
           LBI     = LB(IR)                                                            
           NT(J)   = NT(LAI) + NT(LBI)                                                 
           VA      = VAL(LAI)                                                          
           VB      = VAL(LBI)                        
           P1      = PK(LAI)
           P2      = PK(LBI)
           PK(J)   = P1 + P2
           NO(II1) = J 
                                                               
           DO III = 1,II                                                      
              IF (III.EQ.II1 .OR. III.EQ.II2) CYCLE                               
              M1    = MONO (III, II1)                                                   
              M2    = MONO (III, II2)                                                   
              JS    = NO(III)                                                           
              VJS   = PK(JS)

              IF (MODE.EQ. 1) THEN
                    D(M1) = AMIN1(D(M1),D(M2))
              ELSEIF (MODE.EQ. 2) THEN
                     D(M1) = AMAX1(D(M1),D(M2))
              ELSEIF (MODE.EQ. 3) THEN
                    D(M1) =(P1*D(M1)+P2*D(M2))/(P1+P2)
              ELSEIF (MODE.EQ. 4) THEN
                    D(M1) = ((P1*D(M1)+P2*D(M2))/(P1+P2))-
     &                      (P1*P2*DINF/((P1+P2)**2))
              ELSEIF (MODE.EQ. 5) THEN
                    D(M1) = ((VA+VJS)*D(M1)+(VB+VJS)*D(M2)-
     &                   VJS*DINF)/(VA+VB+VJS)
              ENDIF 
           ENDDO 
                                        
           IF (II2 .NE. II) THEN                               
               NO(II2)= NO(II)                                                           
               IT    = II - 1                                                            
               DO III = 1,IT                                                      
                  IF (III .EQ. II2) CYCLE                               
                  M1    = MONO (III, II2)                                                   
                  M2    = MONO (III, II)                                                    
                  D(M1) = D(M2)                                                             
               ENDDO 
            ENDIF                                                  
            IF (VAL(J) .GT. VMAX) VMAX = VAL(J)                            
            WRITE(NBAND) J,LA(IR),LB(IR),NT(J),PK(J),VAL(J)                         
  150    ENDDO
                                                                
      REWIND(NBAND)                                                            
      NKLA1 = NKLA - 1  
                                                        
      DO  JJ = 1,NKLA1                                                    
         J    = JJ + NKLA                                                          
         IR   = J - JDEB + 1                                                       
         READ(NBAND) J,LA(IR),LB(IR),NT(J),PK(J),VAL(J)                         
         LIG   = 90.0*VAL(J)/VMAX + 1.0                                            
         IF (LIG .GT. 90) LIG = 90                                 
         WRITE(NDAT,660) J,LA(IR),LB(IR),NT(J),PK(J),VAL(J),                       
     &                              (KLIGN(L),L=1,LIG)                          
  660    FORMAT(1X,I5,3I5,2(1PG10.2,1X),90A1)
      ENDDO

      RETURN                                                                 
      END                                                                    



C*--------------------------------------------------------------------*         
C*                                                                    *         
C*      TREE DESCRIPTION AND DENDROGRAM                               *         
C*                                                                    *         
C*      NKLA SUMMITS            JFIN =2*NKLA - 1                      *         
C*      ARRAYS PROVIDED BY CHAVA  VAL(JFIN), LA(NKLA), LB(NKLA)       *         
C*                                PK(JFIN), IDK(NKLA)                 *         
C*                                                                    *         
C*      WORKING ARRAYS            NO(JFIN), V(NKLA), NT(NKLA),        *         
C*                                IW(NKLA), W(NKLA), IV(NKLA),        *         
C*                                NUM(NKLA)                           *         
C*                                                                    *         
C==06.07.80                                                           *         
C==01.12.86                                                           *         
C*--------------------------------------------------------------------*         

      SUBROUTINE ARBRE(NKLA, JFIN, VAL, LA, LB, PK, IDK,                       
     &                 NO,NUM,NT,IV,IW,V,W,VMIN,VMAX)

      INCLUDE 'CMBLOCK.INC' 
                                                   
      DIMENSION VAL(JFIN),LA(NKLA),LB(NKLA),PK(JFIN),IDK(NKLA)       
     &  ,NO(JFIN),V(NKLA),NT(NKLA),IW(NKLA),W(NKLA),IV(NKLA),NUM(NKLA)

      CHARACTER*1  LIGN(102)

      DATA  LIG/102/   

      JDEB  = NKLA + 1                                                          
      VMIN  = VAL(JDEB)
      VMAX  = VAL(JFIN)
      DO J = JDEB,JFIN                                                   
         IR    = J - JDEB + 1                                                      
         IA    = LA(IR)                                                            
         IB    = LB(IR)                                                            
         IF (VAL(J) .LT. VMIN) VMIN = VAL(J)                            
         IF (VAL(J) .GT. VMAX) VMAX = VAL(J)                            
         NO(IA) = J                                                                 
         NO(IB) = J                                                                 
      ENDDO
      NO(JFIN)= JFIN                                                            

C     DESCRIPTION OF THE HIERARCHY CLASSES                                 

      WRITE(NDAT,600)                                                           
  600 FORMAT (' NODE  INDEX  SENIOR  JUNIOR  SIZE'    ,5X,                   
     &  'DESCRIPTION OF THE HIERARCHY CLASSES'     /' ',64('. ') / )            

      DO J = JDEB,JFIN                                                   
         NT(1) = J                                                                 
         KPT   = 0                                                                 
         JI    = 1 
                                                                
   20    IF (NT(JI) .LE. NKLA) THEN                                
            K       = NT(JI)                                                            
            KPT     = KPT + 1                                                           
            IV(KPT) = IDK(K)                                                           
            IW(KPT) = K                                                                
            NUM(NKLA-KPT+1) = IDK(K)                                                   
            JI      = JI - 1                                                            
         ELSE                      
            IJ      = JI + 1                                                            
            NI      = NT(JI) - JDEB + 1                                                 
            NT(IJ)  = LA(NI)                                                            
            NT(JI)  = LB(NI)                                                            
            JI      = JI + 1 
         ENDIF
                                                      
         IF (JI .NE. 0) GO TO  20 
                               
         IR    = J - JDEB + 1                                                      
         WRITE(NDAT,610) J, VAL(J),LA(IR),LB(IR),KPT,(IV(KK),KK=1,KPT)            
  610    FORMAT
     &   (//1X,I4,1X,1PG10.3,I5,I6,I6,4X,18(1X,I4),(/' ',36X,18(1X,I4)))
         I1    = IW(1)                                                             
         I2    = IW(KPT)                                                           
         W(I1) = NO(J)  + 0.0001                                                    
         W(I2) = NO(I2) + 0.0001                                                   
       ENDDO

C     GRAPH OF DENDROGRAM                                                  

      WRITE(NDAT,620)  VMIN, VMAX                                               
  620 FORMAT (' ',5X, 'WEIGHT',4X, 'INDEX' ,9X,'DENDROGRAM',                    
     &                            4X, '(SCALE  ',2(1X,1PG10.3),' )',//)

      DO J = 1,NKLA                                                       
         K     = W(J)                                                              
         W(J)  = VAL(K)                                                            
      ENDDO

      DO J = 1,NKLA                                                       
         IWI   = IW(J)                                                             
         V(NKLA-J+1)= W(IWI)                                                       
      ENDDO

      DO L = 1,LIG                                                        
         LIGN(L)= ' '                                                          
      ENDDO 
 
      PAS   = FLOAT(LIG) / (VMAX - VMIN)                                        
      I1    = NKLA - 1                                                          
      DO J=1,I1                                                        
         LX    = (V(J) - VMIN)*PAS + 1.0                                           
         IF (LX .LE. 1)   LX = 1                                   
         IF (LX .GT. LIG) LX = LIG 
                                
         DO LL = 1,LX                                                        
            LIGN(LL)= '.'
	 ENDDO

         JJ    = IW(NKLA-J+1)                                                      
         POID  = PK(JJ)                                                            
         WRITE(NDAT,630)  POID, V(J), MOD(NUM(J),10000),
     &                    (LIGN(L),L=1,LIG)                    
  630    FORMAT (' ',2(1PG10.3),1X,I4,2X,'..',102A1)

         IF (LX .NE. 1) THEN                               
            LX    = LX - 1                                                            
            DO LL = 1,LX                                                       
               LIGN(LL)= ' '                 
	    ENDDO
         ENDIF
         WRITE(NDAT,640)  (LIGN(L),L=1,LIG)                                        
  640    FORMAT (' ',29X,102A1)
      ENDDO

      DO L = 1,LIG                                                       
         LIGN(L) = '.'                                                            
      ENDDO

      JJ    = IW(1)                                                             
      POID  = PK(JJ)

      WRITE(NDAT,650) POID, MOD(NUM(NKLA),10000), (LIGN(L),L=1,LIG)
  650 FORMAT (' ',1PG10.3,4X,6('-'),1X,I4,2X,'..',102A1)

      RETURN
      END                       


C**********************************************************************
C
C  DENDRO.F -- ADAPTED FOR METAFILE    3 NOVEMBER 86 ARDEAN LEITH
C              USED POSTSCRIPT OUTPUT  MAR 99        ARDEAN LEITH
C**********************************************************************
C DRAWS DENDROGRAM AND FORMS A PLOT METAFILE FOR THE DENDROGRAM
C
C BASED ON ARBRE.FOR,    A DENDROGRAM PGM BY - JEAN-PIERRE BRETAUDIERE 
C THE UNIVERSITY OF TEXAS HEALTH SCIENCE CENTER AT HOUSTON                      
C MEDICAL SCHOOL - DEPARTMENT OF PATHOLOGY AND LABORATORY MEDICINE              
C P.O. BOX 20708, HOUSTON, TX 77225.                                            
C*--------------------------------------------------------------------*         
C*                                                                
C*      TREE DESCRIPTION 
C*                                                                 
C*      NKLA SUMMITS              JFIN = 2 * NKLA - 1                
C*      ARRAYS PROVIDED BY CHAVA  VAL(JFIN), LA(NKLA), LB(NKLA)     
C*                                PK(JFIN)      
C*                                                              
C*      WORKING ARRAYS            NO(JFIN), V(NKLA), NT(NKLA),     
C*                                IW(NKLA), W(NKLA), IV(NKLA),    
C*                                NUM(NKLA)                          
C
C       CALLED BY:     NOYAU
C
C*--------------------------------------------------------------------*         

      SUBROUTINE DENDRO(NKLA, JFIN, VAL, LA, LB, PK, IDK, 
     &                  NO,NUM,NT,IV,IW,V,W,VMIN,VMAX)

      INCLUDE 'CMLIMIT.INC' 
      INCLUDE 'CMBLOCK.INC' 

C     LIMITED TO 200 LEAVES ON TREE BY NKMAX
      PARAMETER       (NKMAX = 200)
      PARAMETER       (NSIZE=2000)
      COMMON /COMMUN/ DATA(3,NSIZE),YT(NKMAX),X(NKMAX)
      
      DIMENSION      VAL(JFIN),PK(JFIN),V(NKLA),W(NKLA)
      INTEGER        LA(NKLA),LB(NKLA),IDK(NKLA),NO(JFIN),NT(NKLA)
      INTEGER        IV(NKLA),NUM(NKLA),IW(NKLA)

      CHARACTER(LEN=80)     :: LINE
      CHARACTER(LEN=10)     :: CVJ,CVMIN,CVMAX
      CHARACTER(LEN=4)      :: CNUM,CPOID
      CHARACTER(LEN=1)      :: NULL,LIGN(102)
      CHARACTER(LEN=MAXNAM) :: FILPOS

      DATA   LIG/102/

      NULL = CHAR(0)

C     GET NAME OF POSTSCRIPT FILE AND OPEN AS SEQUENTIAL FORMATTED
      LUNPOS = 80
      CALL OPAUXFILE(.TRUE.,FILPOS,'ps',LUNPOS,0,'N',
     &               'DENDROGRAM POSTSCRIPT OUTPUT',.TRUE.,IRTFLGT)
      IF (IRTFLGT .NE. 0) RETURN
      NLETP = LNBLNKN(FILPOS)

      JDEB   = NKLA + 1     
      VMIN   = VAL(JDEB)    
      VMAX   = VAL(JFIN)          

      DO J = JDEB,JFIN                                                   
         IR     = J - JDEB + 1           
         IA     = LA(IR)        
         IB     = LB(IR)         
         IF (VAL(J) .LT. VMIN) VMIN = VAL(J) 
         IF (VAL(J) .GT. VMAX) VMAX = VAL(J)
         NO(IA) = J          
         NO(IB) = J         
      ENDDO
      NO(JFIN)= JFIN  

C     PRINT DESCRIPTION OF THE HIERARCHY CLASSES               
      WRITE(NDAT,600)     
  600 FORMAT (' NODE  INDEX  SENIOR  JUNIOR  SIZE'    ,5X,  
     &  'DESCRIPTION OF THE HIERARCHY CLASSES'     /' ',64('. ') / )

      DO J = JDEB,JFIN         
        NT(1) = J 
        KPT   = 0 
        JI    = 1 

   20   IF (NT(JI) .LE. NKLA) THEN    
           K       = NT(JI)   
           KPT     = KPT + 1  
           IV(KPT) = IDK(K)  
           IW(KPT) = K       
           NUM(NKLA-KPT+1) = IDK(K)
           JI    = JI - 1         
        ELSE 
          IJ     = JI + 1         
           NI    = NT(JI) - JDEB + 1
           NT(IJ)= LA(NI)           
           NT(JI)= LB(NI)           
           JI    = JI + 1
        ENDIF
           
        IF (JI .NE. 0) GO TO  20 

        IR    = J - JDEB + 1     
        WRITE(NDAT,610)  J, VAL(J),LA(IR),LB(IR),KPT,
     &		(MOD(IV(KK),10000),KK=1,KPT)
  610   FORMAT (//1X,I4,F9.3,I5,I6,I7,5X,18(1X,I4),/' ',36X,18(1X,I4) ,
     &  /' ',36X,18(1X,I4)/' ',36X,18(1X,I4),/' ',36X,18(1X,I4))
        I1    = IW(1)            
        I2    = IW(KPT)          
        W(I1) = NO(J) + 0.0001   
        W(I2) = NO(I2) + 0.0001  
      ENDDO

C     PRINT GRAPH OF DENDROGRAM  
      WRITE(NDAT,620)  VMIN, VMAX
  620 FORMAT (/////,6X, 'WEIGHT',4X, 'INDEX' ,9X,'DENDROGRAM',    
     &              4X, '(SCALE  ',2F7.2,' )',//)                 

      DO J = 1,NKLA
         K     = W(J)      
         W(J)  = VAL(K)
      ENDDO

      DO J = 1,NKLA   
         IWI         = IW(J)     
         V(NKLA-J+1) = W(IWI)
      ENDDO

      DO L = 1,LIG                                                        
         LIGN(L) = ' '
      ENDDO

      PAS = FLOAT(LIG) /(VMAX - VMIN)

C     SET WINDOW SIZE (SCALING WILL BE DONE IN PLOT ROUTINES)
      XWIN = 120
      YWIN = 100

C     FIND SCALE FOR TREE (NOT INCLUDING LABELS)
      YSCALE = YWIN / (VMAX - VMIN) 
  
C     FIND HORIZ DISTANCE BETWEEN LEAVES
      XDIS = XWIN / (NKLA - 1)

C     LENGTH OF LEAVES
      YLEAF = -5.0


C     INITIALIZE & SET SCALING FOR POSTSCRIPT
      CALL POSTRT(-LUNPOS)

      XLL = -66.0  
      YLL = -26.0
      XUR = 120
      YUR = 110
      CALL POSCALE(LUNPOS, 1.0,1.0,  XLL,YLL,  XUR,YUR)

C     SET TEXT CHARACTARISTICS FOR Y AXIS LABELS
      ITSIZE = 9
      ITANGL = 0
      JUST   = 0

C     PUT POSTSCRIPT FILENAME AT TOP
      YPOS = 120.0
      XPOS = 0.0
      CALL POTEX(LUNPOS,FILPOS,NLETP,XPOS,YPOS, ITSIZE,ITANGL,JUST)

C     RIGHT JUSTIFIED Y LABELS
      JUST   = 2

C     LABEL Y AXIS
      XPOS = -16.0
      YPOS = -24.0
      LINE = 'WEIGHT'
      CALL POTEX(LUNPOS,LINE,6,XPOS,YPOS, ITSIZE,ITANGL,JUST)

      YPOS = -18.0
      LINE = 'INDEX '
      CALL POTEX(LUNPOS,LINE,6,XPOS,YPOS, ITSIZE,ITANGL,JUST)

C     PREVIOUS LABEL WAS INTEGER, MAR 99 AL 
c     YPOS = -21.0
c     LINE = 'X1000 '
c     CALL POTEX(LUNPOS,LINE,6,XPOS,YPOS, ITSIZE,ITANGL,JUST)
      
      YPOS = -12.0
      LINE = 'CLASS '
      CALL POTEX(LUNPOS,LINE,6,XPOS,YPOS, ITSIZE,ITANGL,JUST)

      YPOS = 0.0           
      WRITE(CVMIN,8802) VMIN
      CALL POTEX(LUNPOS,CVMIN,10,XPOS,YPOS, ITSIZE,ITANGL,JUST)

      YPOS = 100.0
      WRITE(CVMAX,8802)VMAX
      CALL POTEX(LUNPOS,CVMAX,10,XPOS,YPOS, ITSIZE,ITANGL,JUST)

      YPOS   = 50.0
      ITANGL = 90
      LINE   = 'SCALE '
      CALL POTEX(LUNPOS,LINE,6,XPOS,YPOS, ITSIZE,ITANGL,JUST)

C     SET TEXT CHARACTARISTICS FOR X AXIS LABELS
      ITSIZE = 5
      ITANGL = 0
      JUST   = 0

C     CENTER X AXIS LABELS
      JUST = 1

      DO J = 1,NKLA
C      DO J = NKLA,1,-1

         LX   = (V(J) - VMIN) * PAS + 1.0
         IF (LX .LT. 1)   LX = 1
         IF (LX .GT. LIG) LX = LIG

         DO  II = 1,LX
            LIGN(II) = '.'
   	 ENDDO

C        FIND NODE HEIGHT (Y)
         X(J)    = (J-1) * XDIS
         YT(J)   = (V(J) - VMIN) * YSCALE 
         JJ      = IW(NKLA-J+1)
         POID    = PK(JJ)

C        SET LEAF POSITION
         XPOS  = X(J)

C        LABEL THE LEAF WITH WEIGHT
         YPOS  = -24.0
         IPOID = POID
         WRITE(CPOID,8800)IPOID
 8800    FORMAT(I4)
         IT = 1
         IF (CPOID(:1) .EQ. ' ') IT = 2
         CALL POTEX(LUNPOS,CPOID(IT:4),5-IT,XPOS,YPOS, 
     &              ITSIZE,ITANGL,JUST)

C        LABEL LEAF WITH CLASS NUMBER NUM(J)
         YPOS = -12.0
C         INUM = NUM(J)
	 WRITE(CNUM,801) NUM(J)
801	 FORMAT(I4)
         CALL POTEX(LUNPOS,CNUM(2:4),3,XPOS,YPOS,ITSIZE,ITANGL,JUST)

C        LABEL THE LEAF WITH THE INDEX 
         YPOS = -18.0
         IF (J .NE. NKLA) THEN
C           LABEL THE LEAF WITH THE INDEX 

C           PREVIOUS LABEL WAS AN INTEGER MAR 99
            IVT  = V(J) * 1000
            WRITE(CVJ,8801)IVT
 8801       FORMAT(I3)

            WRITE(CVJ,8802) V(J)
 8802       FORMAT(1PG10.2)
            CALL POTEX(LUNPOS,CVJ,10,XPOS,YPOS, ITSIZE,ITANGL,JUST)

            WRITE(NDAT,630)  POID, V(J), NUM(J), (LIGN(L),L=1,LIG)
  630       FORMAT (' ',2F10.3,1X,I4,2X,'..',102A1)   
 
         ELSE
C           LABEL THE LEAF WITH NULL INDEX
            LINE = ' --'
            CALL POTEX(LUNPOS,LINE,3,XPOS,YPOS, ITSIZE,ITANGL,JUST)

            WRITE(NDAT,650)  POID, NUM(NKLA), (LIGN(L),L=1,LIG)  
  650       FORMAT (' ',F10.3,4X,6('-'),1X,I4,2X,'..',102A1)
         ENDIF

         IF (LX .EQ. 1) GO TO  110                               
         LX = LX - 1 

         DO LL = 1,LX
            LIGN(LL) = ' '
  	 ENDDO

  110    WRITE(NDAT,640)  (LIGN(L),L=1,LIG)
  640    FORMAT (' ',29X,102A1)

      ENDDO	

C     START I SWEEP
      DO I=1,NKLA
         YTI = YT(I)

C        DRAW VERTICAL LINE
         DATA(1,1) = X(I)
         DATA(2,1) = YLEAF
         DATA(1,2) = X(I)
         DATA(2,2) = YTI
         NDATA     = 2
         IF (I .EQ. NKLA) GOTO 340

C        FIND LENGTH OF HORIZONTAL LINE
         DO  J = I+1,NKLA
            YTJ   = YT(J)
            IF (YTJ .GE. YTI) GOTO 330
  	 ENDDO
C        NO HIGHER BRANCH FOUND, POSSIBLE ERROR
         GOTO 300

C        DRAW HORIZONTAL LINE
  330    DATA(1,3) = X(J)
         DATA(2,3) = YTI
         NDATA = 3

C        PUSH DATA INTO FILE
  340    CALL POARAYF(LUNPOS,DATA,NDATA,.FALSE.,.FALSE.)

  300    CONTINUE
      ENDDO

C     TICK MARKS AT Y = 0 AND Y = YMAX
      CALL POSEG(LUNPOS, -3.0,0.0, -1.0,0.0)
      CALL POSEG(LUNPOS, -3.0,100.0,  -1.0,100.0)

C     CLOSE THE POSTSCRIPT-FILE 
9998  CALL POEND(LUNPOS)

      WRITE(NOUT,*) '  PLOT PLACED IN: ',FILPOS(1:NLETP)

9999  CLOSE(LUNPOS)

      END

C*--------------------------------------------------------------------*         
C*                                                                    *         
C*                                                                    *         
C*      INITIAL DENDROGRAM CHARACTERIZED BY NKLA SUMMITS IS TRUN-     *         
C*      CATED INTO KPART FINAL CLASSES.  OBJECTS ARE ASSIGNED         *         
C*      TO THE NEW CLASSES.                                           *         
C*                                                                    *         
C*   INPUT:                                                           *         
C*      NUMIM,NKLA,KPART,PK(NKLA),LA(NKLA),LB(NKLA) (CF,CHAVA)        *         
C*                                                                    *         
C*   OUTPUT:                                                          *         
C*      KLAS(NUMIM)      = NEW CLASSIFICATION CONTAINING KPART CLASSES*         
C*      IV(NKLA)         = ASSIGNMENT OF OLD CLASSES TO NEW CLASSES   *         
C*      NT(NKLA)         = SIZES OF THE KPART CLASSES                 *         
C*                                                                    *         
C*   WORKING ARRAY ... IW(NKLA)                                       *         
C*                                                                    *         
C*--------------------------------------------------------------------*         

      SUBROUTINE COUPE(NUMIM,NKLA,KPART, PK,LA,LB,IV,KLAS,NT, IW) 
             
      DIMENSION IV(NKLA),LA(NKLA),LB(NKLA),KLAS(NUMIM),PK(NKLA),                
     &          NT(NKLA),IW(NKLA)                                               

      JDEB  = NKLA + 1                                                          
      JFIN  = 2*NKLA - 1                                                        
                                                                              
C     INDICATOR IV(NKLA) OF THE AGGREGATION IN KPART CLASSES               
                                                                               
      DO   L = 1,NKLA                                                       
         IV(L) = 0 
      ENDDO 
                                                               
      DO   J = JDEB,JFIN                                                    
         NT(1) = J                                                                 
         KPT   = 0                                                                 
         JI    = 1 
                                                                
   20    IF (NT(JI) .LE. NKLA) THEN                                
            K       = NT(JI)                                                            
            KPT     = KPT + 1                                                           
            IW(KPT) = K                                                                
            JI      = JI - 1                                                            
         ELSE 
                               
            IJ      = JI + 1                                                            
            NI      = NT(JI) - JDEB + 1                                                 
            NT(IJ)  = LA(NI)                                                            
            NT(JI)  = LB(NI)                                                            
            JI      = JI + 1 
         ENDIF                                                           
         IF (JI .NE. 0) GO TO  20
                                
         IF (J .LE. JFIN-KPART+1) THEN                                
            DO   KK = 1,KPT                                                       
               JPP     = IW(KK)                                                            
               IV(JPP) = J                                                                
	    ENDDO
         ENDIF
         I1    = IW(1)                                                             
         I2    = IW(KPT)                                                           
      ENDDO

      KKK   = 1                                                                 
      NKLA1 = NKLA - 1                                                          
      DO  IL1 = 1,NKLA1                                                   
         IF(IV(IL1) .NE. 0) THEN                                
            IF (IV(IL1) .LT. KKK) CYCLE                               
            IV1     = IV(IL1)                                                           
            IV(IL1) = KKK                                                              
            IL3     = IL1 + 1
                                                           
            DO IL2 = IL3,NKLA                                                   
               IF (IV(IL2) .NE. IV1) CYCLE                                
               IV(IL2) = IV(IL1)                                                          
            ENDDO                                                                
         ELSE 
            IV(IL1 )= KKK 
         ENDIF                                                             
         KKK   = KKK + 1
      ENDDO
                                                               
      IF (IV(NKLA) .EQ. 0) IV(NKLA) = KKK 
                          
      END                                                                    


C ++********************************************************************
C                                                                      *
C  RGRI                                                                    *
C                                                                      *
C **********************************************************************
C                                                                      *
C  RGRI(NUMIM,KFAC,NKLA,KLAS,IDI,PK,GT,IV,LUNK,LUNI)
C
C  PURPOSE:                                                            *
C                                                                      *
C  PARAMETERS:                                                         *
C
C  IMPORTANT CHANGE: NKLA IS REDUCED BEFORE DEUCL IS CALLED. THE ORIGINAL
C  NUMBER OF CLUSTERS IS STORED IN NKLAO 
C
C** 2/6/86 J.F. READ CLUSTER FILE PRODUCED BY SCLASSY AND PRINT OUT
C LISTS OF CLASS MEMBERS, CENTERS OF GRAVITIES FOR EACH CLASS, AND
C RE-CLASSIFICATION LOOKUP TABLE
C
C----------------------------------------------------------------------

      SUBROUTINE RGRI(NUMIM,KFAC,NKLA,KLAS,IDI,PK,GT,IV,LUNK,LUNI)

      INCLUDE 'CMBLOCK.INC' 

      DIMENSION        KLAS(NUMIM), IDI(NUMIM)
      DIMENSION        PK(NKLA), GT(NKLA, KFAC), IV(NKLA)

C     NUMBER OF MAJOR CLASSES TO BE ANALYSED IN TERMS OF DISPERSIONS
C     10/20/87 TEMPORARILY CHANGED TO 11 JF
      PARAMETER (NMAJ=11)

C     MAXIMUM NUMBER PER CLASS TO BE PRINTED
      PARAMETER (MAXPRT=1000)
	
      INTEGER          BELONG
      DIMENSION        COO(NMAJ)
      EQUIVALENCE      (COO,BELONG)
      COMMON /COMMUN/  DIST(NMAJ,NMAJ),BELONG(MAXPRT)

      DIMENSION         DISP(NMAJ),DELTA(3),NEXT(3)
                                                                               
        READ(LUNK) (KLAS(I), I=1,NUMIM), (IDI(I), I=1,NUMIM),
     &             (PK(L),L=1,NKLA), ((GT(L,J),L=1,NKLA),J=1,KFAC)

	NMAJOR = MIN0(NMAJ,NKLA)

C       LIST IMAGES BY CLASSES
	WRITE(NDAT,13)
13	FORMAT(/' LIST OF CLASS MEMBERS'//,' CLASS'/)

	DO  K=1,NKLA
	   IKLA=0
           DO I=1, NUMIM
             IF (KLAS(I).EQ.K) THEN
                IKLA         = IKLA+1
                BELONG(IKLA) = IDI(I)
             ENDIF
           ENDDO
	   IF (IKLA .EQ. 0) GOTO 15
	   IF (IKLA .GT. MAXPRT) THEN
              WRITE(NDAT,12)K,MAXPRT
12            FORMAT(I4,' *** MORE THAN ',I4,' IMAGES')
              GOTO 15
	   ENDIF

	   WRITE(NDAT,11)K,(BELONG(I),I=1,IKLA)
11	   FORMAT(/I6,10I7,/(6X,10I7))
15	   CONTINUE
        ENDDO

C       LIST CLASS CENTER COORDINATES

	WRITE(NDAT,1001)((IFAC),IFAC=1,KFAC)
1001	FORMAT(//' LIST OF CLASS CENTER COORDINATES'//,
     &           ' CLASS  SIZE',8(3X,I2,3X)/)
        DO N=1, NKLA                               
           WRITE(NDAT, 1002) N,INT(PK(N)+0.5),(GT(N,IFAC),IFAC=1,KFAC)
 1002      FORMAT(2X,I4,3X,I4,3X,12(F9.4,1X))                 
        ENDDO

C       RE-CLASSIFICATION LOOKUP TABLE

	WRITE(NDAT,1004)((I),I=1,NKLA)
1004	FORMAT(//' RE-CLASSIFICATION LOOKUP TABLE'/,
     &           ' ORIGINAL CLASS',//,
     &         8X,(40I3))

        KPART = NKLA - 1                                            
        DO KPRO = 2,KPART                                   
           READ(LUNK) (IV(J), J=1,NKLA)                
           WRITE(NDAT, 1003) KPRO, (IV(J), J=1,NKLA) 
 1003      FORMAT(I6,2X,(40I3)) 
        ENDDO

C       COMPUTE CLASS DISPERSIONS AND INTERCLASS DISTANCES FOR NMAJOR
C       MAIN CLASSES
	CALL REWF(LUNI,1)

C       CLEAR ARRAY DIST
	DO K=1,NMAJOR
           DISP(K) = 0.0
           DO K1=1,NMAJOR
              DIST(K,K1) = 0.0
  	   ENDDO
        ENDDO

	DO I=1,NUMIM
           READ(LUNI,*) (COO(IFAC),IFAC=1,KFAC)
           K = KLAS(I)
           IF (K .LE. NMAJOR) THEN
              DO IFAC=1,KFAC
                 DISP(K) = DISP(K) + (COO(IFAC) - GT(K,IFAC))**2
  	      ENDDO
           ENDIF
  	ENDDO

	DO K=1,NMAJOR
  	   DISP(K) = SQRT(DISP(K) / PK(K))
        ENDDO

C       COMPUTE INTERCLASS DISTANCES

	DO K=1,NMAJOR
           DO K1=1,NMAJOR
             IF (K1 .EQ. K) GOTO 80
             DO IFAC=1,KFAC
               DIST(K,K1) = DIST(K,K1)+(GT(K,IFAC) - GT(K1,IFAC))**2
  	     ENDDO
80	   ENDDO
        ENDDO

C       SCALE DISTANCES
	DO K=1,NMAJOR
           DO K1=1,NMAJOR
              DIST(K,K1 )= SQRT(DIST(K,K1))
           ENDDO
        ENDDO

C       WRITE HEADING
        WRITE(NDAT,*) ' '
	WRITE(NDAT,1202)(I,I=1,10)
1202	FORMAT(' DISPERSIONS AND INTER-CLASS DISTANCES OF 10 LARGEST',
     &         ' CLUSTERS',//,
     &         ' CLASS      DISP         NEIGHBORS       ',10I7/)

C       FOR EACH CLUSTER, DETERMINE THE 3 CLOSEST NEIGHBORS

	DO K=1,NMAJOR
C          CLEAR TABLES
           DO J=1,3
              DELTA(J) = 100000.
              NEXT(J)  = 0
           ENDDO

           DO K1=1,NMAJOR
             IF (K1 .EQ.K) CYCLE
             IF (DIST(K,K1) .LT. DELTA(1)) THEN
		DELTA(3) = DELTA(2)
		DELTA(2) = DELTA(1)
		DELTA(1) = DIST(K,K1)
		NEXT(3)  = NEXT(2)
		NEXT(2)  = NEXT(1)
		NEXT(1)  = K1
		CYCLE
             ENDIF

             IF (DIST(K,K1) .LT. DELTA(2)) THEN
		DELTA(3) = DELTA(2)
		DELTA(2) = DIST(K,K1)
		NEXT(3)  = NEXT(2)
		NEXT(2)  = K1
		CYCLE
             ENDIF

             IF (DIST(K,K1) .LT. DELTA(3)) THEN
		DELTA(3) = DIST(K,K1)
		NEXT(3)  = K1
             ENDIF
   	   ENDDO

	   WRITE(NDAT,1201)K,DISP(K),(NEXT(J),J=1,3),
     &                     (DIST(K,K1),K1=1,K-1)
1201	   FORMAT(5X,I4,3X,F7.4,5X,3I3,6X,10F7.4)

150      ENDDO

      RETURN
      END                                                                       
                                              
@


1.11
log
@merged with sclassy & semis
@
text
@d4 4
a7 1
C  SCLASSI                                  LONG FILE NAMES FEB. 89 al
d9 16
a24 11
C                                                                      
C **********************************************************************
C * SPIDER - MODULAR IMAGE PROCESSING SYSTEM.    AUTHOR: J.FRANK       *
C * COPYRIGHT (C)1985, 1999. HEALTH RESEARCH INCORPORATED (HRI),       *
C * ONE UNIVERSITY PLACE, RENSSELAER, NY 12144-3455.                   *
C * THE CONTENTS OF THIS DOCUMENT ARE PROPRIETARY TO HRI AND ARE NOT   *
C * TO BE DISCLOSED TO OTHERS OR USED FOR PURPOSES OTHER THAN INTENDED *
C * WITHOUT WRITTEN APPROVAL OF HRI.                                   *
C **********************************************************************
C                                                                      *C
C   SCLASSI(MAXMEM)
d26 1
a26 1
C   PURPOSE:    2/6/86 J.F. SPIDER CLASSIFICATION INTERFACE ROUTINE
d28 4
a31 1
C   INTERFACES BETWEEN JP'S CLUSTERING/HAC PACKAGE AND SPIDER
d33 9
a41 9
C   CALL TREE: SCLASSI - SCLASSY - SEMIS - NOYAU - PARST - RETIR - SEN3A  
C                                                - CLAST  
C                                                - STABK - SHELK   
C                                                - DEUCL  
C                                                - CHAVA 
C                                                - ARBRE
C                                                - DENDRO -
C                                                - COUPE
C               SCLASSI - RCLU    - RGRI     
d45 1
a45 1
	SUBROUTINE SCLASSI(MAXMEM)
d50 2
a51 6
        CHARACTER(LEN=MAXNAM)::  CLUS,IMCFILE,FILPAT
        COMMON /COMMUN/          CLUS,IMCFILE,FILPAT

        PARAMETER            (LFA=16)
	INTEGER ::           KV(LFA)
        CHARACTER(LEN=1)::   NULL
d53 3
a55 1
        DATA MAXINT/32000/
d57 2
d64 2
a65 14
        NGUS   = 11
        NGRI   = 12

        CALL RDPRMI(NUM,IDUM,NOT_USED,'INPUT FILE CODE')
        IF (NUM .GE. 1000) THEN
           FILPAT(1:11)= 'IMC****'//NULL//NULL//NULL//NULL
           NLET = 7
        ELSE
           FILPAT(1:11)= 'IMC***'//NULL//NULL//NULL//NULL//NULL
           NLET = 6
        ENDIF

C       MAKE IMC*** FILE NAME OUT OF: INPUT FILE CODE
        CALL FILGET(FILPAT,IMCFILE,NLET,NUM,IRTFLG)
d67 1
d70 1
a70 1
        CALL FILERD(CLUS,NLET,DATEXC,'CLUSTER',IRTFLG)
d73 3
a75 2
        KFACT = LFA
        CALL RDPRAI(KV,LFA,KFACT,0,MAXINT,'FACTOR NUMBERS',NULL,IRTFLG)
d77 4
d85 1
a85 1
     &              '# OF ITERATIONS/PART., # CENTERS/PART.',IRTFLG)
d88 20
a107 1
        CALL RDPRI1S(NBASE,NOT_USED,' # OF PARTITIONS',IRTFLG)
d109 33
a141 2
        CALL SCLASSY(NBASE,NITER,NCLAS,NKLA,
     &               KFACT,NIN,NDAT,KV,IMCFILE,CLUS,NGUS,NGRI,MAXMEM)
d143 8
a150 1
C       PRINT OUT LISTS OF CLUSTER MEMBERS, LIST OF CENTERS OF GRAVITY, 
d153 10
a162 1
	CALL RCLU(NGRI,NGUS,MAXMEM)
d164 2
a165 2
        CLOSE(NGRI)
        CLOSE(NGUS)
d172 1
a172 2
C *NAME* = SCLASSY.FOR                 31-JAN-86      13:23:03 
C                                      LONG FILE NAMES JAN 89 al
d174 493
a666 12
C           COPYRIGHT 1986 - JEAN-PIERRE BRETAUDIERE                            
C THE UNIVERSITY OF TEXAS HEALTH SCIENCE CENTER AT HOUSTON                      
C MEDICAL SCHOOL - DEPARTMENT OF PATHOLOGY AND LABORATORY MEDICINE              
C P.O. BOX 20708, HOUSTON, TX 77225.                                            
C DISCLAIMER: NO GUARANTEES OF PERFORMANCE ACCOMPANY THIS SOFTWARE,             
C NOR IS ANY RESPONSIBILITY ASSUMED ON THE PART OF THE AUTHOR                   
C OR THE INSTITUTION.  ALL THE SOFTWARE HAS BEEN TESTED EXTENSIVELY             
C AND EVERY EFFORT HAS BEEN MADE TO INSURE ITS RELIABILITY.                     
C THE FOLLOWING SOFTWARE MAY NOT BE COMMUNICATED TO A THIRD PARTY               
C UNDER ANY FORM WITHOUT WRITTEN PERMISSION OF THE AUTHOR.                      
C PLEASE REPORT ANY BUG(S) TO JPB AT (713) 792 52 00.                           
C OR THRU ARPANET AT  ......!rice!ots!ut-path!suprim                            
d668 7
a674 9
C*                          C L A S S Y                                *        
C*         PERFORMS IN A FIRST STEP AN AUTOMATIC CLUSTERING OF THE     *        
C*         OBJECTS BY AGGREGATION AROUND MOBILE CENTERS AND IN A SECOND*        
C*         STEP, A HIERARCHIC ASCENDENT CLASSIFICATION OF THE GRAVITY  *        
C*         CENTERS OF THE CLUSTERS DETERMINED IN THE FIRST STEP.       *        
C*                                                                     *        
C*WARNING: THIS IS A TEMPLATE PROGRAM FOR DEMONSTRATION AND TESTING.   *        
C*         IT SHOULD BE REWRITTEN TO FIT IN YOUR LOCAL IMAGE PROCESSING*        
C*         SYSTEM.                                                     *        
d677 105
a781 2
      SUBROUTINE SCLASSY(NBASE,NITER,NCLAS,NKLA,KFAC,
     &           LECA,IMPA,KV,FILIN,FILOU,NGUS,NGRI,MAXMEM)
d783 55
a837 1
      INCLUDE 'CMBLOCK.INC' 
d839 2
a840 5
      COMMON Q(1)
      COMMON /ENSOR/ LEC, IMP  
                                                 
      PARAMETER       (LFA=16)
      INTEGER        KV(LFA)
d842 21
a862 4
      CHARACTER(LEN=*) :: FILIN,FILOU
      CHARACTER(LEN=1) ::     NULL
                                                            
       DATA LTMP  / 14/    
d864 1
a864 1
        NULL = CHAR(0)
d866 98
a963 2
        LEC=LECA
        IMP=IMPA
d965 2
a966 4
C       KLUDGE TO MAKE SURE IMC IS NOT OPEN UPON 2ND CALL TO CA CLA
        CLOSE(NGRI)
        CLOSE(NGUS)
        CLOSE(LTMP)
a967 5
C       OPEN & READ IMC FILE FORM='UNFORMATTED'
        CALL OPAUXFILE(.FALSE.,FILIN,DATEXC,-NGUS,0,
     &                       'O', ' ',.TRUE.,IRTFLG)
        CALL REW(NGUS, 0)                                                       
        READ (NGUS) NUMIM, NFAC, NOC, NOR                                       
a968 12
C       EXTRACT SOME INFO FROM CLUSTER FILE AND PUT IT IN SCRATCH
        OPEN(LTMP,STATUS='SCRATCH',FORM='UNFORMATTED')                     
        CALL RDFC(NUMIM, NFAC, KFAC, KV, NACT, Q, NGUS, LTMP)                   
        LUNT = NGUS

C       NGUS NOW POINTS TO SCRATCH
        NGUS = LTMP
                                                             
C       OPEN CLUSTER FILE (ALREADY HAS EXTENSION ON IT)
C       OPEN(NGRI,FILE=FILOU,STATUS='NEW',FORM='UNFORMATTED')             
        CALL OPAUXFILE(.FALSE.,FILOU,NULL,-NGRI,0,
     &                       'N', ' ',.TRUE.,IRTFLG)
d970 15
a984 1
	MODE = 5
d986 2
a987 2
        CALL SEMIS(Q, MAXMEM, NGUS,NGRI, MODE,
     &            NACT, NFAC, KFAC, KV, NBASE, NITER, NCLAS, NKLA)
d989 114
a1102 2
C       LEAVE NGRI AND NGUS OPEN FOR SUBSEQUENT CALL TO RCLU
        CLOSE(LUNT)
d1104 2
a1105 2
        RETURN
        END
d1107 2
d1111 8
a1118 3
C *NAME* = SEMIS.FOR                   31-JAN-86      13:23:12                  
C----------------------------------=*=----------------------------------        
C           COPYRIGHT 1986 - JEAN-PIERRE BRETAUDIERE                            
d1122 317
a1438 8
C DISCLAIMER: NO GUARANTEES OF PERFORMANCE ACCOMPANY THIS SOFTWARE,             
C NOR IS ANY RESPONSIBILITY ASSUMED ON THE PART OF THE AUTHOR                   
C OR THE INSTITUTION.  ALL THE SOFTWARE HAS BEEN TESTED EXTENSIVELY             
C AND EVERY EFFORT HAS BEEN MADE TO INSURE ITS RELIABILITY.                     
C THE FOLLOWING SOFTWARE MAY NOT BE COMMUNICATED TO A THIRD PARTY               
C UNDER ANY FORM WITHOUT WRITTEN PERMISSION OF THE AUTHOR.                      
C PLEASE REPORT ANY BUG(S) TO JPB AT (713) 792 52 00.                           
C OR THRU ARPANET AT  ......!rice!ots!ut-path!suprim                            
d1440 13
a1452 1
C* CLASSIFICATION OF OBJECTS ACCORDING TO THEIR FACTORIAL COORDINATES *         
d1454 1
a1454 7
C*  ROUTINES CALLED - NOYAU - PARST - RETIR - SEN3A                   *         
C*                                  - CLAST                           *         
C*                                  - STABK - SHELK                   *         
C*                          - DEUCL                                   *         
C*                          - CHAVA                                   *         
C*                          - ARBRE                                   *         
C*                          - COUPE                                   *         
a1455 2
C==02.09.81                                                           *         
C==01.11.86                                                           *         
d1458 90
a1547 2
      SUBROUTINE SEMIS(Q, MAXMEM, NGUS, NGRI, MODE,                           
     &               ICARD, NFAC, KFAC, KV, NBASE, NITER, NCLAS, NKLA)          
d1551 164
a1714 2
      PARAMETER   (LFA=16)
      DIMENSION   Q(MAXMEM), KV(LFA)
a1715 71
      IF (KFAC .LE. 0) THEN
         CALL ERRT(102,'KFAC IS <= 0',KFAC)                              
         RETURN
      ENDIF

       WRITE(NDAT,2000)                                                          
 2000 FORMAT(' ',5X,'STEP: CLASSY *****',///,
     &       ' ',72('-')/)                     

      WRITE(NDAT, 2100) (KV(K), K=1, KFAC)                                      
 2100 FORMAT (' ','SPECIFICATIONS FOR: CLASSY',/,                       
     &        ' ',5X,'FACTORS USED :',/,
     &        ' ',5X, 16I4)
                                         
      WRITE(NDAT, 2150) NBASE, NITER, NCLAS, NKLA                               
 2150 FORMAT(/,5X,'NBASE=',I6,5X,'NITER=',I6,5X,                          
     &            'NCLAS=',I6,5X,'NKLA =',I6)
                                              
C     MEMORY SEGMENTATION                                                  

      N2DIM = MAX0 (NKLA, 2*NCLAS)                                              
      KDIM  = MAX0 (ICARD, NCLAS**NBASE)                                        
      KDIM  = MAX0 (KDIM,  2*NKLA - 1)                                          
      MDIM  = NKLA*(NKLA-1) / 2                                                 
      LDIM  = NKLA                                                              
      L2DIM = 2*NKLA - 1                                                        

      NKLAS = 1 + ICARD                                                         
C     NKLAS = 1                                                                 
      ND    = NKLAS + ICARD                                                     
      NU    = ND + MDIM                                                         
      NJV   = NU + KDIM                                                         
      NJW   = NJV + KDIM                                                        
      NIDK  = NJW + KDIM                                                        
      NCI   = NIDK + NKLA                                                       
      NGT   = NCI + NFAC                                                        
      NNUM  = NGT + N2DIM*KFAC                                                  
      NLA   = NNUM + LDIM                                                       
      NLB   = NLA + LDIM                                                        
      NIV   = NLB + LDIM                                                        
      NIW   = NIV + LDIM                                                        
      NV    = NIW + LDIM                                                        
      NW    = NV  + LDIM                                                         
      NNT   = NW  + LDIM                                                         
      NVAL  = NNT + L2DIM                                                       
      NPK   = NVAL + L2DIM                                                      
      NNO   = NPK  + L2DIM                                                       
      NFIN  = NNO  + L2DIM
                                                       
      IF (NFIN .GT. MAXMEM) THEN
         WRITE(NDAT,2500) MAXMEM, NFIN                                           
 2500    FORMAT (/,' UNLABELED COMMON BLOCK MEMORY AVAILABLE:',I10,5X,
     &              'YOU NEED: ',I11,/)
         CALL ERRT(6,'SEMIS',NDUM)                              
         RETURN
      ENDIF

C     CALL PRINCIPAL ROUTINE FOR CALCULATIONS                             
      CALL NOYAU(N2DIM,KDIM,MDIM,LDIM,L2DIM,                                   
     &           NFAC,KFAC,ICARD,KV,NBASE,NITER,NCLAS,NKLA,
     &  Q(1),Q(NKLAS),Q(ND),Q(NU),Q(NJV),Q(NJW),Q(NIDK),Q(NCI),Q(NGT),               
     &  Q(NNUM),Q(NLA),Q(NLB),Q(NIV),Q(NIW),Q(NV),Q(NW),                        
     &  Q(NNT),Q(NVAL),Q(NPK),Q(NNO) ,NGUS,NGRI, MODE)
                          
      WRITE(NDAT,2600)                                                          
 2600 FORMAT(//,' ',72('-'),//,
     &          ' ',5X,'END OF STEP:  CLASSY ****',//,
     &          ' ',72('-'))
                     
       RETURN                                                                 
       END                                                                    
@


1.10
log
@cosmetic
@
text
@d4 3
a6 3
C  SCLASSI                                  LONG FILE NAMES FEB 89 al
C                                                                      *
C                                                                      *
d37 1
d39 2
a40 2
        CHARACTER *81   CLUS,IMCFILE,FILPAT
        COMMON /COMMUN/ CLUS,IMCFILE,FILPAT
d42 3
a44 3
        PARAMETER       (LFA=16)
        CHARACTER       NULL
	INTEGER         KV(LFA),KKV(LFA)
a46 1
        DATA NKLA/100/
d50 3
a55 3
        NNBASE = 4
        NNITER = 5
        NNCLAS = 5
d74 1
a74 1
        CALL RDPRAI(KKV,LFA,KFACT,0,MAXINT,'FACTOR NUMBERS',NULL,IRTFLG)
d77 4
a80 8
        DO  II=1,KFACT
           KV(II) = KKV(II)
	ENDDO

        CALL RDPRMI(NITER,NCLAS,NOT_USED,
     &              '# OF ITER./PART., # CENTERS/PART.')
        IF (NITER.EQ.0) NITER = NNITER
        IF (NCLAS.EQ.0) NCLAS = NNCLAS
d82 2
a83 2
        CALL RDPRMI(NBASE,NDUM,NOT_USED,' # OF PARTITIONS')
        IF (NBASE.EQ.0) NBASE = NNBASE
d99 195
@


1.9
log
@nloop,iloop_removed
@
text
@d45 1
a45 1
        DATA MININT/-32000/,MAXINT/32000/
d74 1
a74 2
        CALL RDPRAI(KKV,LFA,KFACT,0,MAXINT,'FACTOR NUMBERS',
     &              NULL,IRTFLG)
d89 2
a90 2
        CALL SCLASSY(NBASE,NITER,NCLAS,NKLA
     &              ,KFACT,NIN,NDAT,KV,IMCFILE,CLUS,NGUS,NGRI,MAXMEM)
@


1.8
log
@cosmetic & IDK bug
@
text
@d56 1
a56 1
        CALL RDPRMI(NUM,IDUM,NLOOP,ILOOP,'INPUT FILE CODE')
d82 1
a82 1
        CALL RDPRMI(NITER,NCLAS,NLOOP,ILOOP,
d87 1
a87 1
        CALL RDPRMI(NBASE,NDUM,NLOOP,ILOOP,' # OF PARTITIONS')
@


1.7
log
@cosmetic & filerd
@
text
@d38 2
a39 2
        CHARACTER *81   CLUS,IMC,CLUSO,FILPAT,IMCO
        COMMON /COMMUN/ CLUS,IMC,CLUSO,IMCO,FILPAT
d50 2
a51 2
        NGUS = 11
        NGRI = 12
d53 3
a55 3
        NNBASE=4
        NNITER=5
        NNCLAS=5
d65 2
a66 1
        CALL FILGET(FILPAT,IMC,NLET,NUM,IRTFLG)
a67 1
        CALL FILCAN(IMCO,NF,NULL,NULL,IMC,DATEXC,IER)
d69 1
d88 1
a88 1
        IF (NBASE.EQ.0) NBASE=NNBASE
d91 1
a91 1
     &              ,KFACT,NIN,NDAT,KV,IMCO,CLUSO,NGUS,NGRI,MAXMEM)
@


1.6
log
@header
@
text
@d4 1
d18 1
a18 1
C   2/6/86 J.F. Spider CLASSification Interface routine
a20 1
C   LONG FILE NAMES FEB 89 al
d22 1
a22 4
C   CALLED BY: UTIL1
C
C   CALL TREE: SCLASSI - RCLU    - RGRI     
C              SCLASSI - SCLASSY - SEMIS - NOYAU - PARST - RETIR - SEN3A  
d30 1
a37 1

d58 2
a59 2
          FILPAT(1:11)= 'IMC****'//NULL//NULL//NULL//NULL
          NLET = 7
d61 2
a62 2
          FILPAT(1:11)= 'IMC***'//NULL//NULL//NULL//NULL//NULL
          NLET = 6
d69 1
a69 1
        CALL FILERD(CLUS,NLET,NULL,'CLUSTER',IRTFLG)
a70 1
        CALL FILCAN(CLUSO,NF,NULL,NULL,CLUS,DATEXC,IER)
d78 1
a78 1
           KV(II)=KKV(II)
d82 3
a84 3
     $              '# OF ITER./PART., # CENTERS/PART.')
        IF(NITER.EQ.0) NITER=NNITER
        IF  (NCLAS.EQ.0) NCLAS=NNCLAS
d90 1
a90 1
     $              ,KFACT,NIN,NDAT,KV,IMCO,CLUSO,NGUS,NGRI,MAXMEM)
@


1.5
log
@a
@
text
@d2 13
a14 2
C ***********************************************************************
C
@


1.4
log
@updated
@
text
@d28 1
a28 1
CNO_SAVE
@


1.3
log
@*** empty log message ***
@
text
@d4 1
a4 1
C $$ SCLASSI(MAXMEM)
d6 1
a6 1
C** 2/6/86 J.F. Spider CLASSification Interface routine
a26 3
        PARAMETER (LFA=16)
 
#ifdef SP_UNIX
d28 3
a30 3
#else
        INCLUDE 'COMMON1:CMBLOCK.INC' 
#endif
d33 3
a35 5
        CHARACTER *81 CLUS,IMC,CLUSO,FILPAT,IMCO
        CHARACTER     NULL

	INTEGER   KV(LFA)
        DIMENSION KKV(LFA)
d39 2
a40 1
        NULL=CHAR(0)
d48 1
a48 1
        CALL RDPRMI(NUM,IDUM,NLOOP,ILOOP,'INPUT FILE CODE$')
d71 1
a71 1
          KV(II)=KKV(II)
d75 1
a75 1
     $  '# OF ITER./PART., # CENTERS/PART.$')
d77 1
a77 1
        IF(NCLAS.EQ.0) NCLAS=NNCLAS
d79 2
a80 2
        CALL RDPRMI(NBASE,NDUM,NLOOP,ILOOP,' # OF PARTITIONS$')
        IF(NBASE.EQ.0) NBASE=NNBASE
d83 1
a83 1
     $  ,KFACT,NIN,NDAT,KV,IMCO,CLUSO,NGUS,NGRI,MAXMEM)
@


1.2
log
@cpp_lines_added
@
text
@d74 3
a76 2
        DO 1 II=1,KFACT
1       KV(II)=KKV(II)
@


1.1
log
@Initial revision
@
text
@d29 3
d33 1
@
